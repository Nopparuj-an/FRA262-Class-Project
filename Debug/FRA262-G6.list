
FRA262-G6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000decc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800e070  0800e070  0001e070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e768  0800e768  000203e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e768  0800e768  0001e768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e770  0800e770  000203e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e770  0800e770  0001e770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e774  0800e774  0001e774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003e0  20000000  0800e778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000afc  200003e0  0800eb58  000203e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000edc  0800eb58  00020edc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167d2  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003040  00000000  00000000  00036be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00039c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  0003ae70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a072  00000000  00000000  0003bf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d34  00000000  00000000  00055ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a02ae  00000000  00000000  0006dd2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010dfdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000650c  00000000  00000000  0010e02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003e0 	.word	0x200003e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e054 	.word	0x0800e054

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003e4 	.word	0x200003e4
 80001dc:	0800e054 	.word	0x0800e054

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <modbus_1t5_Timeout+0x1c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	751a      	strb	r2, [r3, #20]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	200003fc 	.word	0x200003fc

08001028 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <modbus_3t5_Timeout+0x1c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	755a      	strb	r2, [r3, #21]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	200003fc 	.word	0x200003fc

08001048 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <modbus_UART_Recived+0x60>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001062:	1c59      	adds	r1, r3, #1
 8001064:	b289      	uxth	r1, r1
 8001066:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800106a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800106e:	d210      	bcs.n	8001092 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68d8      	ldr	r0, [r3, #12]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <modbus_UART_Recived+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001082:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001086:	4413      	add	r3, r2
 8001088:	3302      	adds	r3, #2
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	f005 fe87 	bl	8006da0 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200003fc 	.word	0x200003fc

080010ac <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <Modbus_init+0x9c>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <Modbus_init+0x9c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <Modbus_init+0x9c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	4a20      	ldr	r2, [pc, #128]	; (800114c <Modbus_init+0xa0>)
 80010cc:	2114      	movs	r1, #20
 80010ce:	4618      	mov	r0, r3
 80010d0:	f005 f818 	bl	8006104 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <Modbus_init+0x9c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <Modbus_init+0xa4>)
 80010dc:	210e      	movs	r1, #14
 80010de:	4618      	mov	r0, r3
 80010e0:	f005 f810 	bl	8006104 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <Modbus_init+0x9c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <Modbus_init+0xa8>)
 80010ec:	2103      	movs	r1, #3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f005 fdae 	bl	8006c50 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <Modbus_init+0x9c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d8      	ldr	r0, [r3, #12]
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <Modbus_init+0x9c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <Modbus_init+0x9c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001106:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800110a:	4413      	add	r3, r2
 800110c:	3302      	adds	r3, #2
 800110e:	2201      	movs	r2, #1
 8001110:	4619      	mov	r1, r3
 8001112:	f005 fe45 	bl	8006da0 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <Modbus_init+0x9c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10c      	bne.n	8001140 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <Modbus_init+0x9c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4618      	mov	r0, r3
 800112e:	f004 f889 	bl	8005244 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <Modbus_init+0x9c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f004 fac8 	bl	80056d0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200003fc 	.word	0x200003fc
 800114c:	08001009 	.word	0x08001009
 8001150:	08001029 	.word	0x08001029
 8001154:	08001049 	.word	0x08001049

08001158 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800116c:	e013      	b.n	8001196 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	4053      	eors	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <CRC16+0x64>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4053      	eors	r3, r2
 800118a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <CRC16+0x68>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	803a      	strh	r2, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e6      	bne.n	800116e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000100 	.word	0x20000100
 80011c0:	20000000 	.word	0x20000000

080011c4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	7e1b      	ldrb	r3, [r3, #24]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d80a      	bhi.n	80011ec <Modbus_Protocal_Worker+0x28>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <Modbus_Protocal_Worker+0x18>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	080011f7 	.word	0x080011f7
 80011e0:	08001397 	.word	0x08001397
 80011e4:	08001283 	.word	0x08001283
 80011e8:	080012a9 	.word	0x080012a9
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	761a      	strb	r2, [r3, #24]
		break;
 80011f4:	e0e8      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001202:	f000 f9dd 	bl	80015c0 <Modbus_Emission>
 8001206:	e01c      	b.n	8001242 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001208:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	7d9b      	ldrb	r3, [r3, #22]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2203      	movs	r2, #3
 8001240:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b20      	cmp	r3, #32
 8001250:	f040 80b3 	bne.w	80013ba <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001270:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001274:	4413      	add	r3, r2
 8001276:	3302      	adds	r3, #2
 8001278:	2201      	movs	r2, #1
 800127a:	4619      	mov	r1, r3
 800127c:	f005 fd90 	bl	8006da0 <HAL_UART_Receive_IT>
		}
		break;
 8001280:	e09b      	b.n	80013ba <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7d1b      	ldrb	r3, [r3, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8098 	beq.w	80013be <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001296:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	22fe      	movs	r2, #254	; 0xfe
 800129c:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2204      	movs	r2, #4
 80012a4:	761a      	strb	r2, [r3, #24]
		}
		break;
 80012a6:	e08a      	b.n	80013be <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	7d9b      	ldrb	r3, [r3, #22]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80012c6:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ce:	f113 0f02 	cmn.w	r3, #2
 80012d2:	d150      	bne.n	8001376 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f203 2272 	addw	r2, r3, #626	; 0x272
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80012ec:	3b02      	subs	r3, #2
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f7ff ff31 	bl	8001158 <CRC16>
 80012f6:	4603      	mov	r3, r0
 80012f8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012fa:	793a      	ldrb	r2, [r7, #4]
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001308:	3b02      	subs	r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001310:	429a      	cmp	r2, r3
 8001312:	d10c      	bne.n	800132e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001314:	797a      	ldrb	r2, [r7, #5]
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001322:	3b01      	subs	r3, #1
 8001324:	440b      	add	r3, r1
 8001326:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800132a:	429a      	cmp	r2, r3
 800132c:	d004      	beq.n	8001338 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	75da      	strb	r2, [r3, #23]
				break;
 8001336:	e047      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d113      	bne.n	8001372 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800135a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001364:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001366:	461a      	mov	r2, r3
 8001368:	f006 fedc 	bl	8008124 <memcpy>

			//execute command
			Modbus_frame_response();
 800136c:	f000 f910 	bl	8001590 <Modbus_frame_response>
 8001370:	e001      	b.n	8001376 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001372:	bf00      	nop
					}
		break;


	}
}
 8001374:	e028      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7d5b      	ldrb	r3, [r3, #21]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f005 fdb4 	bl	8006efc <HAL_UART_AbortReceive>
		break;
 8001394:	e015      	b.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d10f      	bne.n	80013c6 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	761a      	strb	r2, [r3, #24]
		break;
 80013b8:	e005      	b.n	80013c6 <Modbus_Protocal_Worker+0x202>
		break;
 80013ba:	bf00      	nop
 80013bc:	e004      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013be:	bf00      	nop
 80013c0:	e002      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c6:	bf00      	nop
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200003fc 	.word	0x200003fc

080013d4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <modbusWrite1Register+0x80>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	7e9b      	ldrb	r3, [r3, #26]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <modbusWrite1Register+0x80>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	7edb      	ldrb	r3, [r3, #27]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <modbusWrite1Register+0x80>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d903      	bls.n	8001406 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013fe:	2002      	movs	r0, #2
 8001400:	f000 f8a4 	bl	800154c <ModbusErrorReply>
			 return;
 8001404:	e023      	b.n	800144e <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <modbusWrite1Register+0x80>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <modbusWrite1Register+0x80>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	7f12      	ldrb	r2, [r2, #28]
 8001418:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <modbusWrite1Register+0x80>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <modbusWrite1Register+0x80>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	440b      	add	r3, r1
 800142a:	7f52      	ldrb	r2, [r2, #29]
 800142c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <modbusWrite1Register+0x80>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <modbusWrite1Register+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800143c:	2208      	movs	r2, #8
 800143e:	4619      	mov	r1, r3
 8001440:	f006 fe70 	bl	8008124 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <modbusWrite1Register+0x80>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2205      	movs	r2, #5
 800144a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200003fc 	.word	0x200003fc

08001458 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <modbusRead1Register+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	7f1b      	ldrb	r3, [r3, #28]
 8001464:	b29b      	uxth	r3, r3
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <modbusRead1Register+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	7f5b      	ldrb	r3, [r3, #29]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <modbusRead1Register+0xf0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7e9b      	ldrb	r3, [r3, #26]
 800147c:	b29b      	uxth	r3, r3
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <modbusRead1Register+0xf0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	7edb      	ldrb	r3, [r3, #27]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <modbusRead1Register+0x42>
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2b7d      	cmp	r3, #125	; 0x7d
 8001498:	d903      	bls.n	80014a2 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f856 	bl	800154c <ModbusErrorReply>
		 return;
 80014a0:	e04e      	b.n	8001540 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80014a2:	88ba      	ldrh	r2, [r7, #4]
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <modbusRead1Register+0xf0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d808      	bhi.n	80014c0 <modbusRead1Register+0x68>
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <modbusRead1Register+0xf0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d903      	bls.n	80014c8 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f000 f843 	bl	800154c <ModbusErrorReply>
		 return;
 80014c6:	e03b      	b.n	8001540 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <modbusRead1Register+0xf0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <modbusRead1Register+0xf0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0052      	lsls	r2, r2, #1
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80014e2:	2400      	movs	r4, #0
 80014e4:	e020      	b.n	8001528 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <modbusRead1Register+0xf0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	4423      	add	r3, r4
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	18d1      	adds	r1, r2, r3
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <modbusRead1Register+0xf0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	7849      	ldrb	r1, [r1, #1]
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <modbusRead1Register+0xf0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	4423      	add	r3, r4
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <modbusRead1Register+0xf0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	0063      	lsls	r3, r4, #1
 800151a:	3303      	adds	r3, #3
 800151c:	7809      	ldrb	r1, [r1, #0]
 800151e:	4413      	add	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001526:	3401      	adds	r4, #1
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	429c      	cmp	r4, r3
 800152c:	dbdb      	blt.n	80014e6 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <modbusRead1Register+0xf0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	200003fc 	.word	0x200003fc

0800154c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <ModbusErrorReply+0x40>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	7e5a      	ldrb	r2, [r3, #25]
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <ModbusErrorReply+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <ModbusErrorReply+0x40>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <ModbusErrorReply+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200003fc 	.word	0x200003fc

08001590 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <Modbus_frame_response+0x2c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	7e5b      	ldrb	r3, [r3, #25]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d004      	beq.n	80015a8 <Modbus_frame_response+0x18>
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d105      	bne.n	80015ae <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80015a2:	f7ff ff17 	bl	80013d4 <modbusWrite1Register>
		break;
 80015a6:	e006      	b.n	80015b6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80015a8:	f7ff ff56 	bl	8001458 <modbusRead1Register>
		break;
 80015ac:	e003      	b.n	80015b6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff ffcc 	bl	800154c <ModbusErrorReply>
		break;
 80015b4:	bf00      	nop

	}
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200003fc 	.word	0x200003fc

080015c0 <Modbus_Emission>:

void Modbus_Emission()
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80015c6:	4b3d      	ldr	r3, [pc, #244]	; (80016bc <Modbus_Emission+0xfc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b20      	cmp	r3, #32
 80015d4:	d15e      	bne.n	8001694 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80015d6:	4b39      	ldr	r3, [pc, #228]	; (80016bc <Modbus_Emission+0xfc>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b38      	ldr	r3, [pc, #224]	; (80016bc <Modbus_Emission+0xfc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80015e4:	4b35      	ldr	r3, [pc, #212]	; (80016bc <Modbus_Emission+0xfc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80015ec:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80015ee:	4b33      	ldr	r3, [pc, #204]	; (80016bc <Modbus_Emission+0xfc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80015f6:	4b31      	ldr	r3, [pc, #196]	; (80016bc <Modbus_Emission+0xfc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80015fe:	461a      	mov	r2, r3
 8001600:	f006 fd90 	bl	8008124 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <Modbus_Emission+0xfc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800160c:	b29a      	uxth	r2, r3
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <Modbus_Emission+0xfc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	3203      	adds	r2, #3
 8001614:	b292      	uxth	r2, r2
 8001616:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800161a:	4b28      	ldr	r3, [pc, #160]	; (80016bc <Modbus_Emission+0xfc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001622:	4b26      	ldr	r3, [pc, #152]	; (80016bc <Modbus_Emission+0xfc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800162a:	3b02      	subs	r3, #2
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f7ff fd92 	bl	8001158 <CRC16>
 8001634:	4603      	mov	r3, r0
 8001636:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001638:	4b20      	ldr	r3, [pc, #128]	; (80016bc <Modbus_Emission+0xfc>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <Modbus_Emission+0xfc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001644:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001646:	7939      	ldrb	r1, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	460a      	mov	r2, r1
 800164c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <Modbus_Emission+0xfc>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <Modbus_Emission+0xfc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800165c:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800165e:	7979      	ldrb	r1, [r7, #5]
 8001660:	4413      	add	r3, r2
 8001662:	460a      	mov	r2, r1
 8001664:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <Modbus_Emission+0xfc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b20      	cmp	r3, #32
 8001676:	d10d      	bne.n	8001694 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001678:	4b10      	ldr	r3, [pc, #64]	; (80016bc <Modbus_Emission+0xfc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <Modbus_Emission+0xfc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <Modbus_Emission+0xfc>)
 8001688:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800168a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800168e:	461a      	mov	r2, r3
 8001690:	f005 fbb6 	bl	8006e00 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <Modbus_Emission+0xfc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2200      	movs	r2, #0
 800169a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <Modbus_Emission+0xfc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2200      	movs	r2, #0
 80016a2:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <Modbus_Emission+0xfc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2200      	movs	r2, #0
 80016aa:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <Modbus_Emission+0xfc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2202      	movs	r2, #2
 80016b2:	761a      	strb	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200003fc 	.word	0x200003fc

080016c0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016c6:	463b      	mov	r3, r7
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016d2:	4b21      	ldr	r3, [pc, #132]	; (8001758 <MX_ADC1_Init+0x98>)
 80016d4:	4a21      	ldr	r2, [pc, #132]	; (800175c <MX_ADC1_Init+0x9c>)
 80016d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <MX_ADC1_Init+0x98>)
 80016da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_ADC1_Init+0x98>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <MX_ADC1_Init+0x98>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_ADC1_Init+0x98>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <MX_ADC1_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_ADC1_Init+0x98>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <MX_ADC1_Init+0x98>)
 8001702:	4a17      	ldr	r2, [pc, #92]	; (8001760 <MX_ADC1_Init+0xa0>)
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_ADC1_Init+0x98>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MX_ADC1_Init+0x98>)
 800170e:	2201      	movs	r2, #1
 8001710:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_ADC1_Init+0x98>)
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_ADC1_Init+0x98>)
 800171c:	2201      	movs	r2, #1
 800171e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001720:	480d      	ldr	r0, [pc, #52]	; (8001758 <MX_ADC1_Init+0x98>)
 8001722:	f001 fdcd 	bl	80032c0 <HAL_ADC_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800172c:	f001 f852 	bl	80027d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001730:	230a      	movs	r3, #10
 8001732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001734:	2301      	movs	r3, #1
 8001736:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800173c:	463b      	mov	r3, r7
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_ADC1_Init+0x98>)
 8001742:	f001 fe01 	bl	8003348 <HAL_ADC_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800174c:	f001 f842 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000400 	.word	0x20000400
 800175c:	40012000 	.word	0x40012000
 8001760:	0f000001 	.word	0x0f000001

08001764 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <HAL_ADC_MspInit+0x7c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d127      	bne.n	80017d6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_ADC_MspInit+0x80>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <HAL_ADC_MspInit+0x80>)
 8001790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_ADC_MspInit+0x80>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_ADC_MspInit+0x80>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <HAL_ADC_MspInit+0x80>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <HAL_ADC_MspInit+0x80>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017be:	2303      	movs	r3, #3
 80017c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c2:	2303      	movs	r3, #3
 80017c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <HAL_ADC_MspInit+0x84>)
 80017d2:	f002 fd07 	bl	80041e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	; 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40012000 	.word	0x40012000
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020800 	.word	0x40020800

080017ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_DMA_Init+0x3c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <MX_DMA_Init+0x3c>)
 80017fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_DMA_Init+0x3c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	2011      	movs	r0, #17
 8001814:	f002 f8a1 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001818:	2011      	movs	r0, #17
 800181a:	f002 f8ba 	bl	8003992 <HAL_NVIC_EnableIRQ>

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800

0800182c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <MX_GPIO_Init+0x108>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a3a      	ldr	r2, [pc, #232]	; (8001934 <MX_GPIO_Init+0x108>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b38      	ldr	r3, [pc, #224]	; (8001934 <MX_GPIO_Init+0x108>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b34      	ldr	r3, [pc, #208]	; (8001934 <MX_GPIO_Init+0x108>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a33      	ldr	r2, [pc, #204]	; (8001934 <MX_GPIO_Init+0x108>)
 8001868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b31      	ldr	r3, [pc, #196]	; (8001934 <MX_GPIO_Init+0x108>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <MX_GPIO_Init+0x108>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a2c      	ldr	r2, [pc, #176]	; (8001934 <MX_GPIO_Init+0x108>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <MX_GPIO_Init+0x108>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b26      	ldr	r3, [pc, #152]	; (8001934 <MX_GPIO_Init+0x108>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a25      	ldr	r2, [pc, #148]	; (8001934 <MX_GPIO_Init+0x108>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b23      	ldr	r3, [pc, #140]	; (8001934 <MX_GPIO_Init+0x108>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 6102 	mov.w	r1, #2080	; 0x820
 80018b8:	481f      	ldr	r0, [pc, #124]	; (8001938 <MX_GPIO_Init+0x10c>)
 80018ba:	f002 fe17 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4819      	ldr	r0, [pc, #100]	; (800193c <MX_GPIO_Init+0x110>)
 80018d6:	f002 fc85 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018da:	230c      	movs	r3, #12
 80018dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4619      	mov	r1, r3
 80018ee:	4813      	ldr	r0, [pc, #76]	; (800193c <MX_GPIO_Init+0x110>)
 80018f0:	f002 fc78 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 80018f4:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80018f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	480a      	ldr	r0, [pc, #40]	; (8001938 <MX_GPIO_Init+0x10c>)
 800190e:	f002 fc69 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <MX_GPIO_Init+0x114>)
 8001928:	f002 fc5c 	bl	80041e4 <HAL_GPIO_Init>

}
 800192c:	bf00      	nop
 800192e:	3728      	adds	r7, #40	; 0x28
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000
 800193c:	40020800 	.word	0x40020800
 8001940:	40020400 	.word	0x40020400

08001944 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <MX_I2C1_Init+0x50>)
 800194a:	4a13      	ldr	r2, [pc, #76]	; (8001998 <MX_I2C1_Init+0x54>)
 800194c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_I2C1_Init+0x50>)
 8001950:	4a12      	ldr	r2, [pc, #72]	; (800199c <MX_I2C1_Init+0x58>)
 8001952:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <MX_I2C1_Init+0x50>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_I2C1_Init+0x50>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_I2C1_Init+0x50>)
 8001962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001966:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <MX_I2C1_Init+0x50>)
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_I2C1_Init+0x50>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <MX_I2C1_Init+0x50>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_I2C1_Init+0x50>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001980:	4804      	ldr	r0, [pc, #16]	; (8001994 <MX_I2C1_Init+0x50>)
 8001982:	f002 fdcd 	bl	8004520 <HAL_I2C_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800198c:	f000 ff22 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000448 	.word	0x20000448
 8001998:	40005400 	.word	0x40005400
 800199c:	000186a0 	.word	0x000186a0

080019a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <HAL_I2C_MspInit+0x84>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d12b      	bne.n	8001a1a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_I2C_MspInit+0x88>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <HAL_I2C_MspInit+0x88>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_I2C_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019de:	23c0      	movs	r3, #192	; 0xc0
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e2:	2312      	movs	r3, #18
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ee:	2304      	movs	r3, #4
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	480c      	ldr	r0, [pc, #48]	; (8001a2c <HAL_I2C_MspInit+0x8c>)
 80019fa:	f002 fbf3 	bl	80041e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_I2C_MspInit+0x88>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_I2C_MspInit+0x88>)
 8001a08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_I2C_MspInit+0x88>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	3728      	adds	r7, #40	; 0x28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40005400 	.word	0x40005400
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020400 	.word	0x40020400

08001a30 <localize>:
float calculateNorm(Coordinate coord);
Coordinate negateCoordinate(Coordinate coord);

// USER CODE ======================================================================================

void localize(Coordinate *inputs, Coordinate *outputs, Coordinate *origin, float *angle) {
 8001a30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a34:	b0a2      	sub	sp, #136	; 0x88
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	603b      	str	r3, [r7, #0]
	Coordinate point1 = inputs[0];
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a4a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point2 = inputs[1];
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a54:	3208      	adds	r2, #8
 8001a56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a5a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point3 = inputs[2];
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a64:	3210      	adds	r2, #16
 8001a66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a6a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate vectA = subtractCoordinates(point2, point1);
 8001a6e:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8001a72:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001a76:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001a7a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a7e:	eeb0 1a46 	vmov.f32	s2, s12
 8001a82:	eef0 1a66 	vmov.f32	s3, s13
 8001a86:	eeb0 0a47 	vmov.f32	s0, s14
 8001a8a:	eef0 0a67 	vmov.f32	s1, s15
 8001a8e:	f000 fbc7 	bl	8002220 <subtractCoordinates>
 8001a92:	eeb0 7a40 	vmov.f32	s14, s0
 8001a96:	eef0 7a60 	vmov.f32	s15, s1
 8001a9a:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8001a9e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	Coordinate vectB = subtractCoordinates(point3, point2);
 8001aa2:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8001aa6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001aaa:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001aae:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ab2:	eeb0 1a46 	vmov.f32	s2, s12
 8001ab6:	eef0 1a66 	vmov.f32	s3, s13
 8001aba:	eeb0 0a47 	vmov.f32	s0, s14
 8001abe:	eef0 0a67 	vmov.f32	s1, s15
 8001ac2:	f000 fbad 	bl	8002220 <subtractCoordinates>
 8001ac6:	eeb0 7a40 	vmov.f32	s14, s0
 8001aca:	eef0 7a60 	vmov.f32	s15, s1
 8001ace:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8001ad2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	Coordinate vectC = subtractCoordinates(point3, point1);
 8001ad6:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8001ada:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001ade:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ae2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ae6:	eeb0 1a46 	vmov.f32	s2, s12
 8001aea:	eef0 1a66 	vmov.f32	s3, s13
 8001aee:	eeb0 0a47 	vmov.f32	s0, s14
 8001af2:	eef0 0a67 	vmov.f32	s1, s15
 8001af6:	f000 fb93 	bl	8002220 <subtractCoordinates>
 8001afa:	eeb0 7a40 	vmov.f32	s14, s0
 8001afe:	eef0 7a60 	vmov.f32	s15, s1
 8001b02:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8001b06:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float lenA = calculateNorm(vectA);
 8001b0a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001b0e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001b12:	eeb0 0a47 	vmov.f32	s0, s14
 8001b16:	eef0 0a67 	vmov.f32	s1, s15
 8001b1a:	f000 fbbb 	bl	8002294 <calculateNorm>
 8001b1e:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
	float lenB = calculateNorm(vectB);
 8001b22:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001b26:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b2e:	eef0 0a67 	vmov.f32	s1, s15
 8001b32:	f000 fbaf 	bl	8002294 <calculateNorm>
 8001b36:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	float lenC = calculateNorm(vectC);
 8001b3a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001b3e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b42:	eeb0 0a47 	vmov.f32	s0, s14
 8001b46:	eef0 0a67 	vmov.f32	s1, s15
 8001b4a:	f000 fba3 	bl	8002294 <calculateNorm>
 8001b4e:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	Coordinate vector1;
	Coordinate vector2;

	if (lenA < lenB && lenB < lenC && lenA < lenC) {
 8001b52:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001b56:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b62:	d534      	bpl.n	8001bce <localize+0x19e>
 8001b64:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001b68:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001b6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	d52b      	bpl.n	8001bce <localize+0x19e>
 8001b76:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001b7a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001b7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b86:	d522      	bpl.n	8001bce <localize+0x19e>
		// CASE 1
		*origin = point2;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b94:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectB;
 8001b98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b9c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001ba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba4:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = negateCoordinate(vectA);
 8001ba8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001bac:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001bb0:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb4:	eef0 0a67 	vmov.f32	s1, s15
 8001bb8:	f000 fb9f 	bl	80022fa <negateCoordinate>
 8001bbc:	eeb0 7a40 	vmov.f32	s14, s0
 8001bc0:	eef0 7a60 	vmov.f32	s15, s1
 8001bc4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8001bc8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8001bcc:	e134      	b.n	8001e38 <localize+0x408>
	} else if (lenC < lenB && lenB < lenA && lenC < lenA) {
 8001bce:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001bd2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001bd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	d53e      	bpl.n	8001c5e <localize+0x22e>
 8001be0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001be4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001be8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf0:	d535      	bpl.n	8001c5e <localize+0x22e>
 8001bf2:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001bf6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	d52c      	bpl.n	8001c5e <localize+0x22e>
		// CASE 2
		*origin = point3;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c10:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectB);
 8001c14:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001c18:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c20:	eef0 0a67 	vmov.f32	s1, s15
 8001c24:	f000 fb69 	bl	80022fa <negateCoordinate>
 8001c28:	eeb0 7a40 	vmov.f32	s14, s0
 8001c2c:	eef0 7a60 	vmov.f32	s15, s1
 8001c30:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8001c34:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectC);
 8001c38:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001c3c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c40:	eeb0 0a47 	vmov.f32	s0, s14
 8001c44:	eef0 0a67 	vmov.f32	s1, s15
 8001c48:	f000 fb57 	bl	80022fa <negateCoordinate>
 8001c4c:	eeb0 7a40 	vmov.f32	s14, s0
 8001c50:	eef0 7a60 	vmov.f32	s15, s1
 8001c54:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8001c58:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8001c5c:	e0ec      	b.n	8001e38 <localize+0x408>
	} else if (lenA < lenC && lenC < lenB && lenA < lenB) {
 8001c5e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001c62:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	d52a      	bpl.n	8001cc6 <localize+0x296>
 8001c70:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001c74:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001c78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c80:	d521      	bpl.n	8001cc6 <localize+0x296>
 8001c82:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001c86:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001c8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	d518      	bpl.n	8001cc6 <localize+0x296>
		// CASE 3
		*origin = point1;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	461a      	mov	r2, r3
 8001c98:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ca0:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectC;
 8001ca4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ca8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cb0:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectA;
 8001cb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001cbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cc0:	e883 0003 	stmia.w	r3, {r0, r1}
 8001cc4:	e0b8      	b.n	8001e38 <localize+0x408>
	} else if (lenC < lenA && lenA < lenB && lenC < lenB) {
 8001cc6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001cca:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	d52a      	bpl.n	8001d2e <localize+0x2fe>
 8001cd8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001cdc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001ce0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce8:	d521      	bpl.n	8001d2e <localize+0x2fe>
 8001cea:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001cee:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001cf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfa:	d518      	bpl.n	8001d2e <localize+0x2fe>
		// CASE 4
		*origin = point1;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d08:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectA;
 8001d0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d10:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001d14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d18:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectC;
 8001d1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d20:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d28:	e883 0003 	stmia.w	r3, {r0, r1}
 8001d2c:	e084      	b.n	8001e38 <localize+0x408>
	} else if (lenB < lenC && lenC < lenA && lenB < lenA) {
 8001d2e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001d32:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3e:	d53e      	bpl.n	8001dbe <localize+0x38e>
 8001d40:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001d44:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001d48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d50:	d535      	bpl.n	8001dbe <localize+0x38e>
 8001d52:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001d56:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	d52c      	bpl.n	8001dbe <localize+0x38e>
		// CASE 5
		*origin = point3;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	461a      	mov	r2, r3
 8001d68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d70:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectC);
 8001d74:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001d78:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d7c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d80:	eef0 0a67 	vmov.f32	s1, s15
 8001d84:	f000 fab9 	bl	80022fa <negateCoordinate>
 8001d88:	eeb0 7a40 	vmov.f32	s14, s0
 8001d8c:	eef0 7a60 	vmov.f32	s15, s1
 8001d90:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8001d94:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectB);
 8001d98:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001d9c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001da0:	eeb0 0a47 	vmov.f32	s0, s14
 8001da4:	eef0 0a67 	vmov.f32	s1, s15
 8001da8:	f000 faa7 	bl	80022fa <negateCoordinate>
 8001dac:	eeb0 7a40 	vmov.f32	s14, s0
 8001db0:	eef0 7a60 	vmov.f32	s15, s1
 8001db4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8001db8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8001dbc:	e03c      	b.n	8001e38 <localize+0x408>
	} else if (lenB < lenA && lenA < lenC && lenB < lenC) {
 8001dbe:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001dc2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	d533      	bpl.n	8001e38 <localize+0x408>
 8001dd0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001dd4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001dd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de0:	d52a      	bpl.n	8001e38 <localize+0x408>
 8001de2:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001de6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001dea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df2:	d521      	bpl.n	8001e38 <localize+0x408>
		// CASE 6
		*origin = point2;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	461a      	mov	r2, r3
 8001df8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e00:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectA);
 8001e04:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001e08:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001e0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001e10:	eef0 0a67 	vmov.f32	s1, s15
 8001e14:	f000 fa71 	bl	80022fa <negateCoordinate>
 8001e18:	eeb0 7a40 	vmov.f32	s14, s0
 8001e1c:	eef0 7a60 	vmov.f32	s15, s1
 8001e20:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8001e24:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = vectB;
 8001e28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e2c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e34:	e883 0003 	stmia.w	r3, {r0, r1}
	}

	// calculate vector angle
	if (vector1.x == 0) {
 8001e38:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e44:	d10e      	bne.n	8001e64 <localize+0x434>
		if (vector1.y > 0) {
 8001e46:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e52:	dd03      	ble.n	8001e5c <localize+0x42c>
			*angle = M_PI / 2.0;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4a72      	ldr	r2, [pc, #456]	; (8002020 <localize+0x5f0>)
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	e092      	b.n	8001f82 <localize+0x552>
		} else {
			*angle = 1.5 * M_PI;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4a71      	ldr	r2, [pc, #452]	; (8002024 <localize+0x5f4>)
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	e08e      	b.n	8001f82 <localize+0x552>
		}
	} else if (vector1.y == 0) {
 8001e64:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e70:	d10f      	bne.n	8001e92 <localize+0x462>
		if (vector1.x >= 0) {
 8001e72:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7e:	db04      	blt.n	8001e8a <localize+0x45a>
			*angle = 0;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	e07b      	b.n	8001f82 <localize+0x552>
		} else {
			*angle = M_PI;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	4a66      	ldr	r2, [pc, #408]	; (8002028 <localize+0x5f8>)
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e077      	b.n	8001f82 <localize+0x552>
		}
	} else {
		*angle = fabs(atan(vector1.y / vector1.x));
 8001e92:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001e96:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e9e:	ee16 0a90 	vmov	r0, s13
 8001ea2:	f7fe fb59 	bl	8000558 <__aeabi_f2d>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	ec43 2b10 	vmov	d0, r2, r3
 8001eae:	f00a fdaf 	bl	800ca10 <atan>
 8001eb2:	ec53 2b10 	vmov	r2, r3, d0
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe fe9d 	bl	8000bf8 <__aeabi_d2f>
 8001ebe:	ee07 0a90 	vmov	s15, r0
 8001ec2:	eef0 7ae7 	vabs.f32	s15, s15
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	edc3 7a00 	vstr	s15, [r3]
		if (vector1.x < 0 && vector1.y < 0) {
 8001ecc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ed0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed8:	d51a      	bpl.n	8001f10 <localize+0x4e0>
 8001eda:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ede:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	d513      	bpl.n	8001f10 <localize+0x4e0>
			*angle = M_PI + *angle;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fb33 	bl	8000558 <__aeabi_f2d>
 8001ef2:	a347      	add	r3, pc, #284	; (adr r3, 8002010 <localize+0x5e0>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe f9d0 	bl	800029c <__adddf3>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f7fe fe78 	bl	8000bf8 <__aeabi_d2f>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e038      	b.n	8001f82 <localize+0x552>
		} else if (vector1.x < 0) {
 8001f10:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	d515      	bpl.n	8001f4a <localize+0x51a>
			*angle = M_PI - *angle;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fb18 	bl	8000558 <__aeabi_f2d>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	a138      	add	r1, pc, #224	; (adr r1, 8002010 <localize+0x5e0>)
 8001f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f32:	f7fe f9b1 	bl	8000298 <__aeabi_dsub>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7fe fe5b 	bl	8000bf8 <__aeabi_d2f>
 8001f42:	4602      	mov	r2, r0
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e01b      	b.n	8001f82 <localize+0x552>
		} else if (vector1.y < 0) {
 8001f4a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f56:	d514      	bpl.n	8001f82 <localize+0x552>
			*angle = 2.0 * M_PI - *angle;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fafb 	bl	8000558 <__aeabi_f2d>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	a12c      	add	r1, pc, #176	; (adr r1, 8002018 <localize+0x5e8>)
 8001f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f6c:	f7fe f994 	bl	8000298 <__aeabi_dsub>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	f7fe fe3e 	bl	8000bf8 <__aeabi_d2f>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	601a      	str	r2, [r3, #0]
		}
	}

	// calculate for matrix directions
	float dir = vector1.x * vector2.y - vector1.y * vector2.x;
 8001f82:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f86:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001f92:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	if (dir < 0) {
 8001fa2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fae:	d516      	bpl.n	8001fde <localize+0x5ae>
		*angle = *angle + M_PI;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe facf 	bl	8000558 <__aeabi_f2d>
 8001fba:	a315      	add	r3, pc, #84	; (adr r3, 8002010 <localize+0x5e0>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	f7fe f96c 	bl	800029c <__adddf3>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f7fe fe14 	bl	8000bf8 <__aeabi_d2f>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	601a      	str	r2, [r3, #0]
		dir = -1.0;
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <localize+0x5fc>)
 8001fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001fdc:	e003      	b.n	8001fe6 <localize+0x5b6>
	} else {
		dir = 1.0;
 8001fde:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001fe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	}

	// create 9 points
	float X[] = { 10.0, 30.0, 50.0 };
 8001fe6:	4a12      	ldr	r2, [pc, #72]	; (8002030 <localize+0x600>)
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float Y[] = { 10.0, 25.0, 40.0 };
 8001ff2:	4a10      	ldr	r2, [pc, #64]	; (8002034 <localize+0x604>)
 8001ff4:	f107 0310 	add.w	r3, r7, #16
 8001ff8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ffa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < 3; i++) {
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002004:	e0e1      	b.n	80021ca <localize+0x79a>
		for (int j = 0; j < 3; j++) {
 8002006:	2300      	movs	r3, #0
 8002008:	67fb      	str	r3, [r7, #124]	; 0x7c
 800200a:	e0d5      	b.n	80021b8 <localize+0x788>
 800200c:	f3af 8000 	nop.w
 8002010:	54442d18 	.word	0x54442d18
 8002014:	400921fb 	.word	0x400921fb
 8002018:	54442d18 	.word	0x54442d18
 800201c:	401921fb 	.word	0x401921fb
 8002020:	3fc90fdb 	.word	0x3fc90fdb
 8002024:	4096cbe4 	.word	0x4096cbe4
 8002028:	40490fdb 	.word	0x40490fdb
 800202c:	bf800000 	.word	0xbf800000
 8002030:	0800e070 	.word	0x0800e070
 8002034:	0800e07c 	.word	0x0800e07c
			double angleValue = (double) (*angle);  // Dereference and convert to double
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fa8b 	bl	8000558 <__aeabi_f2d>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			outputs[i * 3 + j].x = origin->x + X[i] * dir * cos(angleValue) - Y[j] * sin(angleValue);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fa82 	bl	8000558 <__aeabi_f2d>
 8002054:	4604      	mov	r4, r0
 8002056:	460d      	mov	r5, r1
 8002058:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	3388      	adds	r3, #136	; 0x88
 8002060:	443b      	add	r3, r7
 8002062:	3b6c      	subs	r3, #108	; 0x6c
 8002064:	ed93 7a00 	vldr	s14, [r3]
 8002068:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800206c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002070:	ee17 0a90 	vmov	r0, s15
 8002074:	f7fe fa70 	bl	8000558 <__aeabi_f2d>
 8002078:	4680      	mov	r8, r0
 800207a:	4689      	mov	r9, r1
 800207c:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002080:	f00a fe66 	bl	800cd50 <cos>
 8002084:	ec53 2b10 	vmov	r2, r3, d0
 8002088:	4640      	mov	r0, r8
 800208a:	4649      	mov	r1, r9
 800208c:	f7fe fabc 	bl	8000608 <__aeabi_dmul>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4620      	mov	r0, r4
 8002096:	4629      	mov	r1, r5
 8002098:	f7fe f900 	bl	800029c <__adddf3>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4690      	mov	r8, r2
 80020a2:	4699      	mov	r9, r3
 80020a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	3388      	adds	r3, #136	; 0x88
 80020aa:	443b      	add	r3, r7
 80020ac:	3b78      	subs	r3, #120	; 0x78
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fa51 	bl	8000558 <__aeabi_f2d>
 80020b6:	4604      	mov	r4, r0
 80020b8:	460d      	mov	r5, r1
 80020ba:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80020be:	f00a fea7 	bl	800ce10 <sin>
 80020c2:	ec53 2b10 	vmov	r2, r3, d0
 80020c6:	4620      	mov	r0, r4
 80020c8:	4629      	mov	r1, r5
 80020ca:	f7fe fa9d 	bl	8000608 <__aeabi_dmul>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4640      	mov	r0, r8
 80020d4:	4649      	mov	r1, r9
 80020d6:	f7fe f8df 	bl	8000298 <__aeabi_dsub>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80020e6:	4613      	mov	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	441a      	add	r2, r3
 80020ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	18d4      	adds	r4, r2, r3
 80020f6:	f7fe fd7f 	bl	8000bf8 <__aeabi_d2f>
 80020fa:	4603      	mov	r3, r0
 80020fc:	6023      	str	r3, [r4, #0]
			outputs[i * 3 + j].y = origin->y + X[i] * dir * sin(angleValue) + Y[j] * cos(angleValue);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fa28 	bl	8000558 <__aeabi_f2d>
 8002108:	4604      	mov	r4, r0
 800210a:	460d      	mov	r5, r1
 800210c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	3388      	adds	r3, #136	; 0x88
 8002114:	443b      	add	r3, r7
 8002116:	3b6c      	subs	r3, #108	; 0x6c
 8002118:	ed93 7a00 	vldr	s14, [r3]
 800211c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002124:	ee17 0a90 	vmov	r0, s15
 8002128:	f7fe fa16 	bl	8000558 <__aeabi_f2d>
 800212c:	4680      	mov	r8, r0
 800212e:	4689      	mov	r9, r1
 8002130:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002134:	f00a fe6c 	bl	800ce10 <sin>
 8002138:	ec53 2b10 	vmov	r2, r3, d0
 800213c:	4640      	mov	r0, r8
 800213e:	4649      	mov	r1, r9
 8002140:	f7fe fa62 	bl	8000608 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe f8a6 	bl	800029c <__adddf3>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4690      	mov	r8, r2
 8002156:	4699      	mov	r9, r3
 8002158:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	3388      	adds	r3, #136	; 0x88
 800215e:	443b      	add	r3, r7
 8002160:	3b78      	subs	r3, #120	; 0x78
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f9f7 	bl	8000558 <__aeabi_f2d>
 800216a:	4604      	mov	r4, r0
 800216c:	460d      	mov	r5, r1
 800216e:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002172:	f00a fded 	bl	800cd50 <cos>
 8002176:	ec53 2b10 	vmov	r2, r3, d0
 800217a:	4620      	mov	r0, r4
 800217c:	4629      	mov	r1, r5
 800217e:	f7fe fa43 	bl	8000608 <__aeabi_dmul>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4640      	mov	r0, r8
 8002188:	4649      	mov	r1, r9
 800218a:	f7fe f887 	bl	800029c <__adddf3>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	441a      	add	r2, r3
 80021a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	18d4      	adds	r4, r2, r3
 80021aa:	f7fe fd25 	bl	8000bf8 <__aeabi_d2f>
 80021ae:	4603      	mov	r3, r0
 80021b0:	6063      	str	r3, [r4, #4]
		for (int j = 0; j < 3; j++) {
 80021b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021b4:	3301      	adds	r3, #1
 80021b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	f77f af3c 	ble.w	8002038 <localize+0x608>
	for (int i = 0; i < 3; i++) {
 80021c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021c4:	3301      	adds	r3, #1
 80021c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	f77f af19 	ble.w	8002006 <localize+0x5d6>
		}
	}

	// dirty fix for angle error
	if (dir < 0){
 80021d4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80021d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e0:	d400      	bmi.n	80021e4 <localize+0x7b4>
		*angle = *angle - M_PI;
	}
}
 80021e2:	e012      	b.n	800220a <localize+0x7da>
		*angle = *angle - M_PI;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f9b5 	bl	8000558 <__aeabi_f2d>
 80021ee:	a30a      	add	r3, pc, #40	; (adr r3, 8002218 <localize+0x7e8>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	f7fe f850 	bl	8000298 <__aeabi_dsub>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	f7fe fcfa 	bl	8000bf8 <__aeabi_d2f>
 8002204:	4602      	mov	r2, r0
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	601a      	str	r2, [r3, #0]
}
 800220a:	bf00      	nop
 800220c:	3788      	adds	r7, #136	; 0x88
 800220e:	46bd      	mov	sp, r7
 8002210:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002214:	f3af 8000 	nop.w
 8002218:	54442d18 	.word	0x54442d18
 800221c:	400921fb 	.word	0x400921fb

08002220 <subtractCoordinates>:

Coordinate subtractCoordinates(Coordinate coord1, Coordinate coord2) {
 8002220:	b480      	push	{r7}
 8002222:	b08b      	sub	sp, #44	; 0x2c
 8002224:	af00      	add	r7, sp, #0
 8002226:	eeb0 6a40 	vmov.f32	s12, s0
 800222a:	eef0 6a60 	vmov.f32	s13, s1
 800222e:	eeb0 7a41 	vmov.f32	s14, s2
 8002232:	eef0 7a61 	vmov.f32	s15, s3
 8002236:	ed87 6a04 	vstr	s12, [r7, #16]
 800223a:	edc7 6a05 	vstr	s13, [r7, #20]
 800223e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002242:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = coord1.x - coord2.x;
 8002246:	ed97 7a04 	vldr	s14, [r7, #16]
 800224a:	edd7 7a02 	vldr	s15, [r7, #8]
 800224e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002252:	edc7 7a06 	vstr	s15, [r7, #24]
	result.y = coord1.y - coord2.y;
 8002256:	ed97 7a05 	vldr	s14, [r7, #20]
 800225a:	edd7 7a03 	vldr	s15, [r7, #12]
 800225e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002262:	edc7 7a07 	vstr	s15, [r7, #28]
	return result;
 8002266:	f107 0320 	add.w	r3, r7, #32
 800226a:	f107 0218 	add.w	r2, r7, #24
 800226e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002272:	e883 0003 	stmia.w	r3, {r0, r1}
 8002276:	6a3a      	ldr	r2, [r7, #32]
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	ee07 2a10 	vmov	s14, r2
 800227e:	ee07 3a90 	vmov	s15, r3
}
 8002282:	eeb0 0a47 	vmov.f32	s0, s14
 8002286:	eef0 0a67 	vmov.f32	s1, s15
 800228a:	372c      	adds	r7, #44	; 0x2c
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <calculateNorm>:

float calculateNorm(Coordinate coord) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	eeb0 7a40 	vmov.f32	s14, s0
 800229e:	eef0 7a60 	vmov.f32	s15, s1
 80022a2:	ed87 7a00 	vstr	s14, [r7]
 80022a6:	edc7 7a01 	vstr	s15, [r7, #4]
	float norm = sqrt(coord.x * coord.x + coord.y * coord.y);
 80022aa:	ed97 7a00 	vldr	s14, [r7]
 80022ae:	edd7 7a00 	vldr	s15, [r7]
 80022b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b6:	edd7 6a01 	vldr	s13, [r7, #4]
 80022ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80022be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c6:	ee17 0a90 	vmov	r0, s15
 80022ca:	f7fe f945 	bl	8000558 <__aeabi_f2d>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	ec43 2b10 	vmov	d0, r2, r3
 80022d6:	f00a fdf3 	bl	800cec0 <sqrt>
 80022da:	ec53 2b10 	vmov	r2, r3, d0
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	f7fe fc89 	bl	8000bf8 <__aeabi_d2f>
 80022e6:	4603      	mov	r3, r0
 80022e8:	60fb      	str	r3, [r7, #12]
	return norm;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	ee07 3a90 	vmov	s15, r3
}
 80022f0:	eeb0 0a67 	vmov.f32	s0, s15
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <negateCoordinate>:

Coordinate negateCoordinate(Coordinate coord) {
 80022fa:	b480      	push	{r7}
 80022fc:	b089      	sub	sp, #36	; 0x24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	eeb0 7a40 	vmov.f32	s14, s0
 8002304:	eef0 7a60 	vmov.f32	s15, s1
 8002308:	ed87 7a02 	vstr	s14, [r7, #8]
 800230c:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = -coord.x;
 8002310:	edd7 7a02 	vldr	s15, [r7, #8]
 8002314:	eef1 7a67 	vneg.f32	s15, s15
 8002318:	edc7 7a04 	vstr	s15, [r7, #16]
	result.y = -coord.y;
 800231c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002320:	eef1 7a67 	vneg.f32	s15, s15
 8002324:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 8002328:	f107 0318 	add.w	r3, r7, #24
 800232c:	f107 0210 	add.w	r2, r7, #16
 8002330:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002334:	e883 0003 	stmia.w	r3, {r0, r1}
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	ee07 2a10 	vmov	s14, r2
 8002340:	ee07 3a90 	vmov	s15, r3
}
 8002344:	eeb0 0a47 	vmov.f32	s0, s14
 8002348:	eef0 0a67 	vmov.f32	s1, s15
 800234c:	3724      	adds	r7, #36	; 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <modbus_heartbeat_handler>:
void modbus_heartbeat_handler(u16u8_t *registerFrame, MB *variables);
void modbus_data_sync(u16u8_t *registerFrame, MB *variables);

// USER CODE ======================================================================================

void modbus_heartbeat_handler(u16u8_t *registerFrame, MB *variables) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
	static int8_t fail = 0;
	static uint32_t timestamp = 0;
	if (HAL_GetTick() >= timestamp) {
 8002362:	f000 ffa1 	bl	80032a8 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <modbus_heartbeat_handler+0x7c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d32c      	bcc.n	80023ca <modbus_heartbeat_handler+0x72>
		timestamp = HAL_GetTick() + 200;
 8002370:	f000 ff9a 	bl	80032a8 <HAL_GetTick>
 8002374:	4603      	mov	r3, r0
 8002376:	33c8      	adds	r3, #200	; 0xc8
 8002378:	4a16      	ldr	r2, [pc, #88]	; (80023d4 <modbus_heartbeat_handler+0x7c>)
 800237a:	6013      	str	r3, [r2, #0]

		// check if the base system send heartbeat
		if (registerFrame[0].U16 == 18537) {
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	f644 0269 	movw	r2, #18537	; 0x4869
 8002384:	4293      	cmp	r3, r2
 8002386:	d106      	bne.n	8002396 <modbus_heartbeat_handler+0x3e>
			// success
			variables->heartbeat = 1;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2201      	movs	r2, #1
 800238c:	849a      	strh	r2, [r3, #36]	; 0x24
			fail = 0;
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <modbus_heartbeat_handler+0x80>)
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	e015      	b.n	80023c2 <modbus_heartbeat_handler+0x6a>
		} else {
			// fail, count failure
			if (fail < 126) {
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <modbus_heartbeat_handler+0x80>)
 8002398:	f993 3000 	ldrsb.w	r3, [r3]
 800239c:	2b7d      	cmp	r3, #125	; 0x7d
 800239e:	dc08      	bgt.n	80023b2 <modbus_heartbeat_handler+0x5a>
				fail++;
 80023a0:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <modbus_heartbeat_handler+0x80>)
 80023a2:	f993 3000 	ldrsb.w	r3, [r3]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	3301      	adds	r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	b25a      	sxtb	r2, r3
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <modbus_heartbeat_handler+0x80>)
 80023b0:	701a      	strb	r2, [r3, #0]
			}
			// if fail is too high then system is disconnected
			if (fail > 9) {
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <modbus_heartbeat_handler+0x80>)
 80023b4:	f993 3000 	ldrsb.w	r3, [r3]
 80023b8:	2b09      	cmp	r3, #9
 80023ba:	dd02      	ble.n	80023c2 <modbus_heartbeat_handler+0x6a>
				variables->heartbeat = 0;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	849a      	strh	r2, [r3, #36]	; 0x24
			}
		}

		// set heartbeat for base system to see
		registerFrame[0].U16 = 22881;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f645 1261 	movw	r2, #22881	; 0x5961
 80023c8:	801a      	strh	r2, [r3, #0]
	}
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000a9c 	.word	0x20000a9c
 80023d8:	20000aa0 	.word	0x20000aa0

080023dc <modbus_data_sync>:

void modbus_data_sync(u16u8_t *registerFrame, MB *variables) {
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
	// report data back to base system
	registerFrame[0x10].U16 = variables->y_moving_status;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3320      	adds	r3, #32
 80023f0:	b292      	uxth	r2, r2
 80023f2:	801a      	strh	r2, [r3, #0]
	registerFrame[0x11].U16 = variables->y_actual_position;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3322      	adds	r3, #34	; 0x22
 80023fe:	b292      	uxth	r2, r2
 8002400:	801a      	strh	r2, [r3, #0]
	registerFrame[0x12].U16 = variables->y_actual_speed;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3324      	adds	r3, #36	; 0x24
 800240c:	b292      	uxth	r2, r2
 800240e:	801a      	strh	r2, [r3, #0]
	registerFrame[0x13].U16 = variables->y_actual_acceleration;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3326      	adds	r3, #38	; 0x26
 800241a:	b292      	uxth	r2, r2
 800241c:	801a      	strh	r2, [r3, #0]
	registerFrame[0x20].U16 = variables->pick_tray_origin_x;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3340      	adds	r3, #64	; 0x40
 8002428:	b292      	uxth	r2, r2
 800242a:	801a      	strh	r2, [r3, #0]
	registerFrame[0x21].U16 = variables->pick_tray_origin_y;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3342      	adds	r3, #66	; 0x42
 8002436:	b292      	uxth	r2, r2
 8002438:	801a      	strh	r2, [r3, #0]
	registerFrame[0x22].U16 = variables->pick_tray_orientation;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3344      	adds	r3, #68	; 0x44
 8002444:	b292      	uxth	r2, r2
 8002446:	801a      	strh	r2, [r3, #0]
	registerFrame[0x23].U16 = variables->place_tray_origin_x;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3346      	adds	r3, #70	; 0x46
 8002452:	b292      	uxth	r2, r2
 8002454:	801a      	strh	r2, [r3, #0]
	registerFrame[0x24].U16 = variables->place_tray_origin_y;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3348      	adds	r3, #72	; 0x48
 8002460:	b292      	uxth	r2, r2
 8002462:	801a      	strh	r2, [r3, #0]
	registerFrame[0x25].U16 = variables->place_tray_orientation;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	334a      	adds	r3, #74	; 0x4a
 800246e:	b292      	uxth	r2, r2
 8002470:	801a      	strh	r2, [r3, #0]
	registerFrame[0x41].U16 = variables->x_target_position;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3382      	adds	r3, #130	; 0x82
 800247c:	b292      	uxth	r2, r2
 800247e:	801a      	strh	r2, [r3, #0]
	registerFrame[0x42].U16 = variables->x_target_speed;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3384      	adds	r3, #132	; 0x84
 800248a:	b292      	uxth	r2, r2
 800248c:	801a      	strh	r2, [r3, #0]
	registerFrame[0x43].U16 = variables->x_target_acceleration_time;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3386      	adds	r3, #134	; 0x86
 8002498:	b292      	uxth	r2, r2
 800249a:	801a      	strh	r2, [r3, #0]

	// get data from base system
	variables->goal_point_x = registerFrame[0x30].U16;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3360      	adds	r3, #96	; 0x60
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	b21a      	sxth	r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	805a      	strh	r2, [r3, #2]
	variables->goal_point_y = registerFrame[0x31].U16;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3362      	adds	r3, #98	; 0x62
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b21a      	sxth	r2, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	809a      	strh	r2, [r3, #4]
	variables->x_actual_position = registerFrame[0x44].U16;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3388      	adds	r3, #136	; 0x88
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b21a      	sxth	r2, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	80da      	strh	r2, [r3, #6]
	variables->x_actual_speed = registerFrame[0x45].U16;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	338a      	adds	r3, #138	; 0x8a
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	811a      	strh	r2, [r3, #8]

	static int16_t base_system_status_master_temp;
	if (base_system_status_master_temp != registerFrame[0x01].U16) {
 80024cc:	4b3f      	ldr	r3, [pc, #252]	; (80025cc <modbus_data_sync+0x1f0>)
 80024ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024d2:	461a      	mov	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3302      	adds	r3, #2
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d00a      	beq.n	80024f4 <modbus_data_sync+0x118>
		variables->base_system_status = registerFrame[0x01].U16;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3302      	adds	r3, #2
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	b21a      	sxth	r2, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	801a      	strh	r2, [r3, #0]
		base_system_status_master_temp = variables->base_system_status;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024f0:	4b36      	ldr	r3, [pc, #216]	; (80025cc <modbus_data_sync+0x1f0>)
 80024f2:	801a      	strh	r2, [r3, #0]
	}

	// update read/write variable
	static int16_t end_effector_status_slave_temp;
	static int16_t end_effector_status_master_temp;
	if (end_effector_status_master_temp != registerFrame[0x02].U16) {
 80024f4:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <modbus_data_sync+0x1f4>)
 80024f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024fa:	461a      	mov	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3304      	adds	r3, #4
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d010      	beq.n	8002528 <modbus_data_sync+0x14c>
		// there is an update from master
		variables->end_effector_status = registerFrame[0x02].U16;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3304      	adds	r3, #4
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b21a      	sxth	r2, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	84da      	strh	r2, [r3, #38]	; 0x26
		end_effector_status_master_temp = variables->end_effector_status;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002518:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <modbus_data_sync+0x1f4>)
 800251a:	801a      	strh	r2, [r3, #0]
		end_effector_status_slave_temp = variables->end_effector_status;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002522:	4b2c      	ldr	r3, [pc, #176]	; (80025d4 <modbus_data_sync+0x1f8>)
 8002524:	801a      	strh	r2, [r3, #0]
 8002526:	e018      	b.n	800255a <modbus_data_sync+0x17e>
	} else if (end_effector_status_slave_temp != variables->end_effector_status) {
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800252e:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <modbus_data_sync+0x1f8>)
 8002530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002534:	429a      	cmp	r2, r3
 8002536:	d010      	beq.n	800255a <modbus_data_sync+0x17e>
		// there is an update locally
		registerFrame[0x02].U16 = variables->end_effector_status;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3304      	adds	r3, #4
 8002542:	b292      	uxth	r2, r2
 8002544:	801a      	strh	r2, [r3, #0]
		end_effector_status_slave_temp = variables->end_effector_status;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800254c:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <modbus_data_sync+0x1f8>)
 800254e:	801a      	strh	r2, [r3, #0]
		end_effector_status_master_temp = variables->end_effector_status;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002556:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <modbus_data_sync+0x1f4>)
 8002558:	801a      	strh	r2, [r3, #0]
	}
	static int16_t x_moving_status_slave_temp;
	static int16_t x_moving_status_master_temp;
	if (x_moving_status_master_temp != registerFrame[0x40].U16) {
 800255a:	4b1f      	ldr	r3, [pc, #124]	; (80025d8 <modbus_data_sync+0x1fc>)
 800255c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002560:	461a      	mov	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3380      	adds	r3, #128	; 0x80
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d010      	beq.n	800258e <modbus_data_sync+0x1b2>
		// there is an update from master
		variables->x_moving_status = registerFrame[0x40].U16;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3380      	adds	r3, #128	; 0x80
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b21a      	sxth	r2, r3
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	851a      	strh	r2, [r3, #40]	; 0x28
		x_moving_status_master_temp = variables->x_moving_status;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800257e:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <modbus_data_sync+0x1fc>)
 8002580:	801a      	strh	r2, [r3, #0]
		x_moving_status_slave_temp = variables->x_moving_status;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <modbus_data_sync+0x200>)
 800258a:	801a      	strh	r2, [r3, #0]
		// there is an update locally
		registerFrame[0x40].U16 = variables->x_moving_status;
		x_moving_status_slave_temp = variables->x_moving_status;
		x_moving_status_master_temp = variables->x_moving_status;
	}
}
 800258c:	e018      	b.n	80025c0 <modbus_data_sync+0x1e4>
	} else if (x_moving_status_slave_temp != variables->x_moving_status) {
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <modbus_data_sync+0x200>)
 8002596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259a:	429a      	cmp	r2, r3
 800259c:	d010      	beq.n	80025c0 <modbus_data_sync+0x1e4>
		registerFrame[0x40].U16 = variables->x_moving_status;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3380      	adds	r3, #128	; 0x80
 80025a8:	b292      	uxth	r2, r2
 80025aa:	801a      	strh	r2, [r3, #0]
		x_moving_status_slave_temp = variables->x_moving_status;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80025b2:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <modbus_data_sync+0x200>)
 80025b4:	801a      	strh	r2, [r3, #0]
		x_moving_status_master_temp = variables->x_moving_status;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <modbus_data_sync+0x1fc>)
 80025be:	801a      	strh	r2, [r3, #0]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	20000aa2 	.word	0x20000aa2
 80025d0:	20000aa4 	.word	0x20000aa4
 80025d4:	20000aa6 	.word	0x20000aa6
 80025d8:	20000aa8 	.word	0x20000aa8
 80025dc:	20000aaa 	.word	0x20000aaa

080025e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	corners[0].x = -68.0;
 80025e4:	4b2e      	ldr	r3, [pc, #184]	; (80026a0 <main+0xc0>)
 80025e6:	4a2f      	ldr	r2, [pc, #188]	; (80026a4 <main+0xc4>)
 80025e8:	601a      	str	r2, [r3, #0]
	corners[0].y = 7.1;
 80025ea:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <main+0xc0>)
 80025ec:	4a2e      	ldr	r2, [pc, #184]	; (80026a8 <main+0xc8>)
 80025ee:	605a      	str	r2, [r3, #4]
	corners[1].x = -29.4;
 80025f0:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <main+0xc0>)
 80025f2:	4a2e      	ldr	r2, [pc, #184]	; (80026ac <main+0xcc>)
 80025f4:	609a      	str	r2, [r3, #8]
	corners[1].y = 52.7;
 80025f6:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <main+0xc0>)
 80025f8:	4a2d      	ldr	r2, [pc, #180]	; (80026b0 <main+0xd0>)
 80025fa:	60da      	str	r2, [r3, #12]
	corners[2].x = 8.2;
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <main+0xc0>)
 80025fe:	4a2d      	ldr	r2, [pc, #180]	; (80026b4 <main+0xd4>)
 8002600:	611a      	str	r2, [r3, #16]
	corners[2].y = 21.2;
 8002602:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <main+0xc0>)
 8002604:	4a2c      	ldr	r2, [pc, #176]	; (80026b8 <main+0xd8>)
 8002606:	615a      	str	r2, [r3, #20]
	localize(corners, pick, &origin, &angle);
 8002608:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <main+0xdc>)
 800260a:	4a2d      	ldr	r2, [pc, #180]	; (80026c0 <main+0xe0>)
 800260c:	492d      	ldr	r1, [pc, #180]	; (80026c4 <main+0xe4>)
 800260e:	4824      	ldr	r0, [pc, #144]	; (80026a0 <main+0xc0>)
 8002610:	f7ff fa0e 	bl	8001a30 <localize>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002614:	f000 fde2 	bl	80031dc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002618:	f000 f868 	bl	80026ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800261c:	f7ff f906 	bl	800182c <MX_GPIO_Init>
	MX_DMA_Init();
 8002620:	f7ff f8e4 	bl	80017ec <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002624:	f000 fcce 	bl	8002fc4 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8002628:	f7ff f98c 	bl	8001944 <MX_I2C1_Init>
	MX_TIM1_Init();
 800262c:	f000 fa32 	bl	8002a94 <MX_TIM1_Init>
	MX_TIM2_Init();
 8002630:	f000 fad0 	bl	8002bd4 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8002634:	f000 fc9c 	bl	8002f70 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8002638:	f7ff f842 	bl	80016c0 <MX_ADC1_Init>
	MX_TIM9_Init();
 800263c:	f000 fb1e 	bl	8002c7c <MX_TIM9_Init>
	MX_TIM11_Init();
 8002640:	f000 fb56 	bl	8002cf0 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */

	// start timer 1 in PWM for motor
	HAL_TIM_Base_Start(&htim1);
 8002644:	4820      	ldr	r0, [pc, #128]	; (80026c8 <main+0xe8>)
 8002646:	f002 fda3 	bl	8005190 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800264a:	2100      	movs	r1, #0
 800264c:	481e      	ldr	r0, [pc, #120]	; (80026c8 <main+0xe8>)
 800264e:	f002 ff27 	bl	80054a0 <HAL_TIM_PWM_Start>

	// Start timer in encoder mode
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8002652:	2104      	movs	r1, #4
 8002654:	481d      	ldr	r0, [pc, #116]	; (80026cc <main+0xec>)
 8002656:	f003 f955 	bl	8005904 <HAL_TIM_Encoder_Start>

	// Timer 9 Timer Interrupt (1000Hz)
	HAL_TIM_Base_Start_IT(&htim9);
 800265a:	481d      	ldr	r0, [pc, #116]	; (80026d0 <main+0xf0>)
 800265c:	f002 fdf2 	bl	8005244 <HAL_TIM_Base_Start_IT>

	// Initialize modbus
	hmodbus.huart = &huart2;
 8002660:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <main+0xf4>)
 8002662:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <main+0xf8>)
 8002664:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <main+0xf4>)
 8002668:	4a1c      	ldr	r2, [pc, #112]	; (80026dc <main+0xfc>)
 800266a:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <main+0xf4>)
 800266e:	2215      	movs	r2, #21
 8002670:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <main+0xf4>)
 8002674:	2246      	movs	r2, #70	; 0x46
 8002676:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, MBregisterFrame);
 8002678:	4919      	ldr	r1, [pc, #100]	; (80026e0 <main+0x100>)
 800267a:	4816      	ldr	r0, [pc, #88]	; (80026d4 <main+0xf4>)
 800267c:	f7fe fd16 	bl	80010ac <Modbus_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Modbus_Protocal_Worker();
 8002680:	f7fe fda0 	bl	80011c4 <Modbus_Protocal_Worker>
		modbus_heartbeat_handler(MBregisterFrame, &MBvariables);
 8002684:	4917      	ldr	r1, [pc, #92]	; (80026e4 <main+0x104>)
 8002686:	4816      	ldr	r0, [pc, #88]	; (80026e0 <main+0x100>)
 8002688:	f7ff fe66 	bl	8002358 <modbus_heartbeat_handler>
		modbus_data_sync(MBregisterFrame, &MBvariables);
 800268c:	4915      	ldr	r1, [pc, #84]	; (80026e4 <main+0x104>)
 800268e:	4814      	ldr	r0, [pc, #80]	; (80026e0 <main+0x100>)
 8002690:	f7ff fea4 	bl	80023dc <modbus_data_sync>
		QEIReadRaw = getRawPosition();
 8002694:	f000 f892 	bl	80027bc <getRawPosition>
 8002698:	4603      	mov	r3, r0
 800269a:	4a13      	ldr	r2, [pc, #76]	; (80026e8 <main+0x108>)
 800269c:	6013      	str	r3, [r2, #0]
		Modbus_Protocal_Worker();
 800269e:	e7ef      	b.n	8002680 <main+0xa0>
 80026a0:	200004a0 	.word	0x200004a0
 80026a4:	c2880000 	.word	0xc2880000
 80026a8:	40e33333 	.word	0x40e33333
 80026ac:	c1eb3333 	.word	0xc1eb3333
 80026b0:	4252cccd 	.word	0x4252cccd
 80026b4:	41033333 	.word	0x41033333
 80026b8:	41a9999a 	.word	0x41a9999a
 80026bc:	20000508 	.word	0x20000508
 80026c0:	20000500 	.word	0x20000500
 80026c4:	200004b8 	.word	0x200004b8
 80026c8:	20000ab0 	.word	0x20000ab0
 80026cc:	20000b64 	.word	0x20000b64
 80026d0:	20000c18 	.word	0x20000c18
 80026d4:	2000050c 	.word	0x2000050c
 80026d8:	20000df4 	.word	0x20000df4
 80026dc:	20000ccc 	.word	0x20000ccc
 80026e0:	200009e4 	.word	0x200009e4
 80026e4:	20000a70 	.word	0x20000a70
 80026e8:	2000049c 	.word	0x2000049c

080026ec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b094      	sub	sp, #80	; 0x50
 80026f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80026f2:	f107 0320 	add.w	r3, r7, #32
 80026f6:	2230      	movs	r2, #48	; 0x30
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f005 fd20 	bl	8008140 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <SystemClock_Config+0xc8>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <SystemClock_Config+0xc8>)
 800271a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271e:	6413      	str	r3, [r2, #64]	; 0x40
 8002720:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <SystemClock_Config+0xc8>)
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800272c:	2300      	movs	r3, #0
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <SystemClock_Config+0xcc>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a20      	ldr	r2, [pc, #128]	; (80027b8 <SystemClock_Config+0xcc>)
 8002736:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <SystemClock_Config+0xcc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002748:	2302      	movs	r3, #2
 800274a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800274c:	2301      	movs	r3, #1
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002750:	2310      	movs	r3, #16
 8002752:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002754:	2302      	movs	r3, #2
 8002756:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002758:	2300      	movs	r3, #0
 800275a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800275c:	2308      	movs	r3, #8
 800275e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8002760:	2364      	movs	r3, #100	; 0x64
 8002762:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002764:	2302      	movs	r3, #2
 8002766:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002768:	2304      	movs	r3, #4
 800276a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800276c:	f107 0320 	add.w	r3, r7, #32
 8002770:	4618      	mov	r0, r3
 8002772:	f002 f819 	bl	80047a8 <HAL_RCC_OscConfig>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <SystemClock_Config+0x94>
		Error_Handler();
 800277c:	f000 f82a 	bl	80027d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002780:	230f      	movs	r3, #15
 8002782:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002784:	2302      	movs	r3, #2
 8002786:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800278c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002790:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8002796:	f107 030c 	add.w	r3, r7, #12
 800279a:	2103      	movs	r1, #3
 800279c:	4618      	mov	r0, r3
 800279e:	f002 fa7b 	bl	8004c98 <HAL_RCC_ClockConfig>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <SystemClock_Config+0xc0>
		Error_Handler();
 80027a8:	f000 f814 	bl	80027d4 <Error_Handler>
	}
}
 80027ac:	bf00      	nop
 80027ae:	3750      	adds	r7, #80	; 0x50
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40007000 	.word	0x40007000

080027bc <getRawPosition>:
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, voltage * 25000.0 / 12.0);
}

int32_t getRawPosition() {
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <getRawPosition+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	20000b64 	.word	0x20000b64

080027d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d8:	b672      	cpsid	i
}
 80027da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80027dc:	e7fe      	b.n	80027dc <Error_Handler+0x8>
	...

080027e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <HAL_MspInit+0x4c>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	4a0f      	ldr	r2, [pc, #60]	; (800282c <HAL_MspInit+0x4c>)
 80027f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f4:	6453      	str	r3, [r2, #68]	; 0x44
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <HAL_MspInit+0x4c>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_MspInit+0x4c>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a08      	ldr	r2, [pc, #32]	; (800282c <HAL_MspInit+0x4c>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_MspInit+0x4c>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800281e:	2007      	movs	r0, #7
 8002820:	f001 f890 	bl	8003944 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40023800 	.word	0x40023800

08002830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002834:	e7fe      	b.n	8002834 <NMI_Handler+0x4>

08002836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800283a:	e7fe      	b.n	800283a <HardFault_Handler+0x4>

0800283c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002840:	e7fe      	b.n	8002840 <MemManage_Handler+0x4>

08002842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002846:	e7fe      	b.n	8002846 <BusFault_Handler+0x4>

08002848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800284c:	e7fe      	b.n	800284c <UsageFault_Handler+0x4>

0800284e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800287c:	f000 fd00 	bl	8003280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002880:	bf00      	nop
 8002882:	bd80      	pop	{r7, pc}

08002884 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <DMA1_Stream6_IRQHandler+0x10>)
 800288a:	f001 fa35 	bl	8003cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000e68 	.word	0x20000e68

08002898 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800289c:	4803      	ldr	r0, [pc, #12]	; (80028ac <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800289e:	f003 f8bf 	bl	8005a20 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80028a2:	4803      	ldr	r0, [pc, #12]	; (80028b0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80028a4:	f003 f8bc 	bl	8005a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80028a8:	bf00      	nop
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000ab0 	.word	0x20000ab0
 80028b0:	20000c18 	.word	0x20000c18

080028b4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028b8:	4803      	ldr	r0, [pc, #12]	; (80028c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80028ba:	f003 f8b1 	bl	8005a20 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80028be:	4803      	ldr	r0, [pc, #12]	; (80028cc <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80028c0:	f003 f8ae 	bl	8005a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000ab0 	.word	0x20000ab0
 80028cc:	20000ccc 	.word	0x20000ccc

080028d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <USART2_IRQHandler+0x10>)
 80028d6:	f004 fbb5 	bl	8007044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000df4 	.word	0x20000df4

080028e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return 1;
 80028e8:	2301      	movs	r3, #1
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <_kill>:

int _kill(int pid, int sig)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028fe:	f005 fbe7 	bl	80080d0 <__errno>
 8002902:	4603      	mov	r3, r0
 8002904:	2216      	movs	r2, #22
 8002906:	601a      	str	r2, [r3, #0]
  return -1;
 8002908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <_exit>:

void _exit (int status)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800291c:	f04f 31ff 	mov.w	r1, #4294967295
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ffe7 	bl	80028f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002926:	e7fe      	b.n	8002926 <_exit+0x12>

08002928 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	e00a      	b.n	8002950 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800293a:	f3af 8000 	nop.w
 800293e:	4601      	mov	r1, r0
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	60ba      	str	r2, [r7, #8]
 8002946:	b2ca      	uxtb	r2, r1
 8002948:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3301      	adds	r3, #1
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	dbf0      	blt.n	800293a <_read+0x12>
  }

  return len;
 8002958:	687b      	ldr	r3, [r7, #4]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b086      	sub	sp, #24
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e009      	b.n	8002988 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	60ba      	str	r2, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	3301      	adds	r3, #1
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	429a      	cmp	r2, r3
 800298e:	dbf1      	blt.n	8002974 <_write+0x12>
  }
  return len;
 8002990:	687b      	ldr	r3, [r7, #4]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <_close>:

int _close(int file)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029c2:	605a      	str	r2, [r3, #4]
  return 0;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <_isatty>:

int _isatty(int file)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a0c:	4a14      	ldr	r2, [pc, #80]	; (8002a60 <_sbrk+0x5c>)
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <_sbrk+0x60>)
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <_sbrk+0x64>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <_sbrk+0x64>)
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <_sbrk+0x68>)
 8002a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <_sbrk+0x64>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d207      	bcs.n	8002a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a34:	f005 fb4c 	bl	80080d0 <__errno>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	e009      	b.n	8002a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <_sbrk+0x64>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <_sbrk+0x64>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	4a05      	ldr	r2, [pc, #20]	; (8002a68 <_sbrk+0x64>)
 8002a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a56:	68fb      	ldr	r3, [r7, #12]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20020000 	.word	0x20020000
 8002a64:	00000400 	.word	0x00000400
 8002a68:	20000aac 	.word	0x20000aac
 8002a6c:	20000ee0 	.word	0x20000ee0

08002a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <SystemInit+0x20>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	4a05      	ldr	r2, [pc, #20]	; (8002a90 <SystemInit+0x20>)
 8002a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b096      	sub	sp, #88	; 0x58
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]
 8002ac0:	611a      	str	r2, [r3, #16]
 8002ac2:	615a      	str	r2, [r3, #20]
 8002ac4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ac6:	1d3b      	adds	r3, r7, #4
 8002ac8:	2220      	movs	r2, #32
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f005 fb37 	bl	8008140 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ad2:	4b3e      	ldr	r3, [pc, #248]	; (8002bcc <MX_TIM1_Init+0x138>)
 8002ad4:	4a3e      	ldr	r2, [pc, #248]	; (8002bd0 <MX_TIM1_Init+0x13c>)
 8002ad6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8002ad8:	4b3c      	ldr	r3, [pc, #240]	; (8002bcc <MX_TIM1_Init+0x138>)
 8002ada:	2204      	movs	r2, #4
 8002adc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ade:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <MX_TIM1_Init+0x138>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25000-1;
 8002ae4:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <MX_TIM1_Init+0x138>)
 8002ae6:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8002aea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aec:	4b37      	ldr	r3, [pc, #220]	; (8002bcc <MX_TIM1_Init+0x138>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002af2:	4b36      	ldr	r3, [pc, #216]	; (8002bcc <MX_TIM1_Init+0x138>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af8:	4b34      	ldr	r3, [pc, #208]	; (8002bcc <MX_TIM1_Init+0x138>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002afe:	4833      	ldr	r0, [pc, #204]	; (8002bcc <MX_TIM1_Init+0x138>)
 8002b00:	f002 faea 	bl	80050d8 <HAL_TIM_Base_Init>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002b0a:	f7ff fe63 	bl	80027d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b12:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b18:	4619      	mov	r1, r3
 8002b1a:	482c      	ldr	r0, [pc, #176]	; (8002bcc <MX_TIM1_Init+0x138>)
 8002b1c:	f003 f9c6 	bl	8005eac <HAL_TIM_ConfigClockSource>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002b26:	f7ff fe55 	bl	80027d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b2a:	4828      	ldr	r0, [pc, #160]	; (8002bcc <MX_TIM1_Init+0x138>)
 8002b2c:	f002 fc52 	bl	80053d4 <HAL_TIM_PWM_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002b36:	f7ff fe4d 	bl	80027d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b46:	4619      	mov	r1, r3
 8002b48:	4820      	ldr	r0, [pc, #128]	; (8002bcc <MX_TIM1_Init+0x138>)
 8002b4a:	f003 ff49 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002b54:	f7ff fe3e 	bl	80027d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b58:	2360      	movs	r3, #96	; 0x60
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b64:	2300      	movs	r3, #0
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b70:	2300      	movs	r3, #0
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b78:	2200      	movs	r2, #0
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4813      	ldr	r0, [pc, #76]	; (8002bcc <MX_TIM1_Init+0x138>)
 8002b7e:	f003 f8d3 	bl	8005d28 <HAL_TIM_PWM_ConfigChannel>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002b88:	f7ff fe24 	bl	80027d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ba4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	4619      	mov	r1, r3
 8002bae:	4807      	ldr	r0, [pc, #28]	; (8002bcc <MX_TIM1_Init+0x138>)
 8002bb0:	f003 ff84 	bl	8006abc <HAL_TIMEx_ConfigBreakDeadTime>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002bba:	f7ff fe0b 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002bbe:	4803      	ldr	r0, [pc, #12]	; (8002bcc <MX_TIM1_Init+0x138>)
 8002bc0:	f000 f99c 	bl	8002efc <HAL_TIM_MspPostInit>

}
 8002bc4:	bf00      	nop
 8002bc6:	3758      	adds	r7, #88	; 0x58
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000ab0 	.word	0x20000ab0
 8002bd0:	40010000 	.word	0x40010000

08002bd4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08c      	sub	sp, #48	; 0x30
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bda:	f107 030c 	add.w	r3, r7, #12
 8002bde:	2224      	movs	r2, #36	; 0x24
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f005 faac 	bl	8008140 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bf0:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <MX_TIM2_Init+0xa4>)
 8002bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002bf8:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <MX_TIM2_Init+0xa4>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfe:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <MX_TIM2_Init+0xa4>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002c04:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <MX_TIM2_Init+0xa4>)
 8002c06:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <MX_TIM2_Init+0xa4>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c12:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <MX_TIM2_Init+0xa4>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c20:	2301      	movs	r3, #1
 8002c22:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c30:	2301      	movs	r3, #1
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c34:	2300      	movs	r3, #0
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002c3c:	f107 030c 	add.w	r3, r7, #12
 8002c40:	4619      	mov	r1, r3
 8002c42:	480d      	ldr	r0, [pc, #52]	; (8002c78 <MX_TIM2_Init+0xa4>)
 8002c44:	f002 fdaa 	bl	800579c <HAL_TIM_Encoder_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002c4e:	f7ff fdc1 	bl	80027d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4806      	ldr	r0, [pc, #24]	; (8002c78 <MX_TIM2_Init+0xa4>)
 8002c60:	f003 febe 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002c6a:	f7ff fdb3 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c6e:	bf00      	nop
 8002c70:	3730      	adds	r7, #48	; 0x30
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000b64 	.word	0x20000b64

08002c7c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c82:	463b      	mov	r3, r7
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002c8e:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <MX_TIM9_Init+0x6c>)
 8002c90:	4a16      	ldr	r2, [pc, #88]	; (8002cec <MX_TIM9_Init+0x70>)
 8002c92:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8002c94:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <MX_TIM9_Init+0x6c>)
 8002c96:	2263      	movs	r2, #99	; 0x63
 8002c98:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c9a:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <MX_TIM9_Init+0x6c>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <MX_TIM9_Init+0x6c>)
 8002ca2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ca6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <MX_TIM9_Init+0x6c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cae:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <MX_TIM9_Init+0x6c>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002cb4:	480c      	ldr	r0, [pc, #48]	; (8002ce8 <MX_TIM9_Init+0x6c>)
 8002cb6:	f002 fa0f 	bl	80050d8 <HAL_TIM_Base_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002cc0:	f7ff fd88 	bl	80027d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cc8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002cca:	463b      	mov	r3, r7
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4806      	ldr	r0, [pc, #24]	; (8002ce8 <MX_TIM9_Init+0x6c>)
 8002cd0:	f003 f8ec 	bl	8005eac <HAL_TIM_ConfigClockSource>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002cda:	f7ff fd7b 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000c18 	.word	0x20000c18
 8002cec:	40014000 	.word	0x40014000

08002cf0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
 8002d04:	615a      	str	r2, [r3, #20]
 8002d06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002d08:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <MX_TIM11_Init+0xa0>)
 8002d0a:	4a22      	ldr	r2, [pc, #136]	; (8002d94 <MX_TIM11_Init+0xa4>)
 8002d0c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002d0e:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <MX_TIM11_Init+0xa0>)
 8002d10:	2263      	movs	r2, #99	; 0x63
 8002d12:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d14:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <MX_TIM11_Init+0xa0>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8002d1a:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <MX_TIM11_Init+0xa0>)
 8002d1c:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8002d20:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d22:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <MX_TIM11_Init+0xa0>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <MX_TIM11_Init+0xa0>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002d2e:	4818      	ldr	r0, [pc, #96]	; (8002d90 <MX_TIM11_Init+0xa0>)
 8002d30:	f002 f9d2 	bl	80050d8 <HAL_TIM_Base_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002d3a:	f7ff fd4b 	bl	80027d4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8002d3e:	4814      	ldr	r0, [pc, #80]	; (8002d90 <MX_TIM11_Init+0xa0>)
 8002d40:	f002 fae2 	bl	8005308 <HAL_TIM_OC_Init>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002d4a:	f7ff fd43 	bl	80027d4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8002d4e:	2108      	movs	r1, #8
 8002d50:	480f      	ldr	r0, [pc, #60]	; (8002d90 <MX_TIM11_Init+0xa0>)
 8002d52:	f002 fc55 	bl	8005600 <HAL_TIM_OnePulse_Init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8002d5c:	f7ff fd3a 	bl	80027d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002d60:	2310      	movs	r3, #16
 8002d62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8002d64:	f240 5399 	movw	r3, #1433	; 0x599
 8002d68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d72:	1d3b      	adds	r3, r7, #4
 8002d74:	2200      	movs	r2, #0
 8002d76:	4619      	mov	r1, r3
 8002d78:	4805      	ldr	r0, [pc, #20]	; (8002d90 <MX_TIM11_Init+0xa0>)
 8002d7a:	f002 ff79 	bl	8005c70 <HAL_TIM_OC_ConfigChannel>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8002d84:	f7ff fd26 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002d88:	bf00      	nop
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000ccc 	.word	0x20000ccc
 8002d94:	40014800 	.word	0x40014800

08002d98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a2e      	ldr	r2, [pc, #184]	; (8002e60 <HAL_TIM_Base_MspInit+0xc8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d11e      	bne.n	8002de8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	4b2d      	ldr	r3, [pc, #180]	; (8002e64 <HAL_TIM_Base_MspInit+0xcc>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	4a2c      	ldr	r2, [pc, #176]	; (8002e64 <HAL_TIM_Base_MspInit+0xcc>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dba:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <HAL_TIM_Base_MspInit+0xcc>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2018      	movs	r0, #24
 8002dcc:	f000 fdc5 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002dd0:	2018      	movs	r0, #24
 8002dd2:	f000 fdde 	bl	8003992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2100      	movs	r1, #0
 8002dda:	201a      	movs	r0, #26
 8002ddc:	f000 fdbd 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002de0:	201a      	movs	r0, #26
 8002de2:	f000 fdd6 	bl	8003992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002de6:	e036      	b.n	8002e56 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM9)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <HAL_TIM_Base_MspInit+0xd0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d116      	bne.n	8002e20 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_TIM_Base_MspInit+0xcc>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	4a1a      	ldr	r2, [pc, #104]	; (8002e64 <HAL_TIM_Base_MspInit+0xcc>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	6453      	str	r3, [r2, #68]	; 0x44
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <HAL_TIM_Base_MspInit+0xcc>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2100      	movs	r1, #0
 8002e12:	2018      	movs	r0, #24
 8002e14:	f000 fda1 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002e18:	2018      	movs	r0, #24
 8002e1a:	f000 fdba 	bl	8003992 <HAL_NVIC_EnableIRQ>
}
 8002e1e:	e01a      	b.n	8002e56 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM11)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a11      	ldr	r2, [pc, #68]	; (8002e6c <HAL_TIM_Base_MspInit+0xd4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d115      	bne.n	8002e56 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <HAL_TIM_Base_MspInit+0xcc>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	4a0c      	ldr	r2, [pc, #48]	; (8002e64 <HAL_TIM_Base_MspInit+0xcc>)
 8002e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e38:	6453      	str	r3, [r2, #68]	; 0x44
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <HAL_TIM_Base_MspInit+0xcc>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	2100      	movs	r1, #0
 8002e4a:	201a      	movs	r0, #26
 8002e4c:	f000 fd85 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002e50:	201a      	movs	r0, #26
 8002e52:	f000 fd9e 	bl	8003992 <HAL_NVIC_EnableIRQ>
}
 8002e56:	bf00      	nop
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40010000 	.word	0x40010000
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40014000 	.word	0x40014000
 8002e6c:	40014800 	.word	0x40014800

08002e70 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	; 0x28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e90:	d12b      	bne.n	8002eea <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea2:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eda:	2301      	movs	r3, #1
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ede:	f107 0314 	add.w	r3, r7, #20
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4804      	ldr	r0, [pc, #16]	; (8002ef8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ee6:	f001 f97d 	bl	80041e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002eea:	bf00      	nop
 8002eec:	3728      	adds	r7, #40	; 0x28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40020000 	.word	0x40020000

08002efc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <HAL_TIM_MspPostInit+0x68>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d11e      	bne.n	8002f5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_TIM_MspPostInit+0x6c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <HAL_TIM_MspPostInit+0x6c>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_TIM_MspPostInit+0x6c>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f50:	f107 030c 	add.w	r3, r7, #12
 8002f54:	4619      	mov	r1, r3
 8002f56:	4805      	ldr	r0, [pc, #20]	; (8002f6c <HAL_TIM_MspPostInit+0x70>)
 8002f58:	f001 f944 	bl	80041e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f5c:	bf00      	nop
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40010000 	.word	0x40010000
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40020000 	.word	0x40020000

08002f70 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f76:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <MX_USART1_UART_Init+0x50>)
 8002f78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f82:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f94:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f96:	220c      	movs	r2, #12
 8002f98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fa6:	4805      	ldr	r0, [pc, #20]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002fa8:	f003 fdf8 	bl	8006b9c <HAL_UART_Init>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fb2:	f7ff fc0f 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000d80 	.word	0x20000d80
 8002fc0:	40011000 	.word	0x40011000

08002fc4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fc8:	4b12      	ldr	r3, [pc, #72]	; (8003014 <MX_USART2_UART_Init+0x50>)
 8002fca:	4a13      	ldr	r2, [pc, #76]	; (8003018 <MX_USART2_UART_Init+0x54>)
 8002fcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <MX_USART2_UART_Init+0x50>)
 8002fd0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002fd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <MX_USART2_UART_Init+0x50>)
 8002fd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fdc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fde:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <MX_USART2_UART_Init+0x50>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <MX_USART2_UART_Init+0x50>)
 8002fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fec:	4b09      	ldr	r3, [pc, #36]	; (8003014 <MX_USART2_UART_Init+0x50>)
 8002fee:	220c      	movs	r2, #12
 8002ff0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <MX_USART2_UART_Init+0x50>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <MX_USART2_UART_Init+0x50>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ffe:	4805      	ldr	r0, [pc, #20]	; (8003014 <MX_USART2_UART_Init+0x50>)
 8003000:	f003 fdcc 	bl	8006b9c <HAL_UART_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800300a:	f7ff fbe3 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000df4 	.word	0x20000df4
 8003018:	40004400 	.word	0x40004400

0800301c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	; 0x30
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 031c 	add.w	r3, r7, #28
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a4d      	ldr	r2, [pc, #308]	; (8003170 <HAL_UART_MspInit+0x154>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d12d      	bne.n	800309a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	4b4c      	ldr	r3, [pc, #304]	; (8003174 <HAL_UART_MspInit+0x158>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	4a4b      	ldr	r2, [pc, #300]	; (8003174 <HAL_UART_MspInit+0x158>)
 8003048:	f043 0310 	orr.w	r3, r3, #16
 800304c:	6453      	str	r3, [r2, #68]	; 0x44
 800304e:	4b49      	ldr	r3, [pc, #292]	; (8003174 <HAL_UART_MspInit+0x158>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	4b45      	ldr	r3, [pc, #276]	; (8003174 <HAL_UART_MspInit+0x158>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a44      	ldr	r2, [pc, #272]	; (8003174 <HAL_UART_MspInit+0x158>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b42      	ldr	r3, [pc, #264]	; (8003174 <HAL_UART_MspInit+0x158>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003076:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800307a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307c:	2302      	movs	r3, #2
 800307e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003080:	2300      	movs	r3, #0
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003084:	2303      	movs	r3, #3
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003088:	2307      	movs	r3, #7
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308c:	f107 031c 	add.w	r3, r7, #28
 8003090:	4619      	mov	r1, r3
 8003092:	4839      	ldr	r0, [pc, #228]	; (8003178 <HAL_UART_MspInit+0x15c>)
 8003094:	f001 f8a6 	bl	80041e4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003098:	e066      	b.n	8003168 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a37      	ldr	r2, [pc, #220]	; (800317c <HAL_UART_MspInit+0x160>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d161      	bne.n	8003168 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	4b32      	ldr	r3, [pc, #200]	; (8003174 <HAL_UART_MspInit+0x158>)
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	4a31      	ldr	r2, [pc, #196]	; (8003174 <HAL_UART_MspInit+0x158>)
 80030ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b2:	6413      	str	r3, [r2, #64]	; 0x40
 80030b4:	4b2f      	ldr	r3, [pc, #188]	; (8003174 <HAL_UART_MspInit+0x158>)
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <HAL_UART_MspInit+0x158>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	4a2a      	ldr	r2, [pc, #168]	; (8003174 <HAL_UART_MspInit+0x158>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6313      	str	r3, [r2, #48]	; 0x30
 80030d0:	4b28      	ldr	r3, [pc, #160]	; (8003174 <HAL_UART_MspInit+0x158>)
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80030dc:	230c      	movs	r3, #12
 80030de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e0:	2302      	movs	r3, #2
 80030e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e8:	2303      	movs	r3, #3
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030ec:	2307      	movs	r3, #7
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f0:	f107 031c 	add.w	r3, r7, #28
 80030f4:	4619      	mov	r1, r3
 80030f6:	4820      	ldr	r0, [pc, #128]	; (8003178 <HAL_UART_MspInit+0x15c>)
 80030f8:	f001 f874 	bl	80041e4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80030fc:	4b20      	ldr	r3, [pc, #128]	; (8003180 <HAL_UART_MspInit+0x164>)
 80030fe:	4a21      	ldr	r2, [pc, #132]	; (8003184 <HAL_UART_MspInit+0x168>)
 8003100:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003102:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <HAL_UART_MspInit+0x164>)
 8003104:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003108:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800310a:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HAL_UART_MspInit+0x164>)
 800310c:	2240      	movs	r2, #64	; 0x40
 800310e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003110:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <HAL_UART_MspInit+0x164>)
 8003112:	2200      	movs	r2, #0
 8003114:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003116:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <HAL_UART_MspInit+0x164>)
 8003118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800311c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800311e:	4b18      	ldr	r3, [pc, #96]	; (8003180 <HAL_UART_MspInit+0x164>)
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003124:	4b16      	ldr	r3, [pc, #88]	; (8003180 <HAL_UART_MspInit+0x164>)
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <HAL_UART_MspInit+0x164>)
 800312c:	2200      	movs	r2, #0
 800312e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <HAL_UART_MspInit+0x164>)
 8003132:	2200      	movs	r2, #0
 8003134:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_UART_MspInit+0x164>)
 8003138:	2200      	movs	r2, #0
 800313a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800313c:	4810      	ldr	r0, [pc, #64]	; (8003180 <HAL_UART_MspInit+0x164>)
 800313e:	f000 fc43 	bl	80039c8 <HAL_DMA_Init>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_UART_MspInit+0x130>
      Error_Handler();
 8003148:	f7ff fb44 	bl	80027d4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <HAL_UART_MspInit+0x164>)
 8003150:	635a      	str	r2, [r3, #52]	; 0x34
 8003152:	4a0b      	ldr	r2, [pc, #44]	; (8003180 <HAL_UART_MspInit+0x164>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003158:	2200      	movs	r2, #0
 800315a:	2100      	movs	r1, #0
 800315c:	2026      	movs	r0, #38	; 0x26
 800315e:	f000 fbfc 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003162:	2026      	movs	r0, #38	; 0x26
 8003164:	f000 fc15 	bl	8003992 <HAL_NVIC_EnableIRQ>
}
 8003168:	bf00      	nop
 800316a:	3730      	adds	r7, #48	; 0x30
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40011000 	.word	0x40011000
 8003174:	40023800 	.word	0x40023800
 8003178:	40020000 	.word	0x40020000
 800317c:	40004400 	.word	0x40004400
 8003180:	20000e68 	.word	0x20000e68
 8003184:	400260a0 	.word	0x400260a0

08003188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800318c:	480d      	ldr	r0, [pc, #52]	; (80031c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800318e:	490e      	ldr	r1, [pc, #56]	; (80031c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003190:	4a0e      	ldr	r2, [pc, #56]	; (80031cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003194:	e002      	b.n	800319c <LoopCopyDataInit>

08003196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800319a:	3304      	adds	r3, #4

0800319c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800319c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800319e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031a0:	d3f9      	bcc.n	8003196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031a2:	4a0b      	ldr	r2, [pc, #44]	; (80031d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031a4:	4c0b      	ldr	r4, [pc, #44]	; (80031d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a8:	e001      	b.n	80031ae <LoopFillZerobss>

080031aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031ac:	3204      	adds	r2, #4

080031ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031b0:	d3fb      	bcc.n	80031aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031b2:	f7ff fc5d 	bl	8002a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031b6:	f004 ff91 	bl	80080dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031ba:	f7ff fa11 	bl	80025e0 <main>
  bx  lr    
 80031be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031c8:	200003e0 	.word	0x200003e0
  ldr r2, =_sidata
 80031cc:	0800e778 	.word	0x0800e778
  ldr r2, =_sbss
 80031d0:	200003e0 	.word	0x200003e0
  ldr r4, =_ebss
 80031d4:	20000edc 	.word	0x20000edc

080031d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031d8:	e7fe      	b.n	80031d8 <ADC_IRQHandler>
	...

080031dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_Init+0x40>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a0d      	ldr	r2, [pc, #52]	; (800321c <HAL_Init+0x40>)
 80031e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_Init+0x40>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0a      	ldr	r2, [pc, #40]	; (800321c <HAL_Init+0x40>)
 80031f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <HAL_Init+0x40>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a07      	ldr	r2, [pc, #28]	; (800321c <HAL_Init+0x40>)
 80031fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003204:	2003      	movs	r0, #3
 8003206:	f000 fb9d 	bl	8003944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800320a:	2000      	movs	r0, #0
 800320c:	f000 f808 	bl	8003220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003210:	f7ff fae6 	bl	80027e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40023c00 	.word	0x40023c00

08003220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003228:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_InitTick+0x54>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b12      	ldr	r3, [pc, #72]	; (8003278 <HAL_InitTick+0x58>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	4619      	mov	r1, r3
 8003232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003236:	fbb3 f3f1 	udiv	r3, r3, r1
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fbb5 	bl	80039ae <HAL_SYSTICK_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e00e      	b.n	800326c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b0f      	cmp	r3, #15
 8003252:	d80a      	bhi.n	800326a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003254:	2200      	movs	r2, #0
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	f04f 30ff 	mov.w	r0, #4294967295
 800325c:	f000 fb7d 	bl	800395a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003260:	4a06      	ldr	r2, [pc, #24]	; (800327c <HAL_InitTick+0x5c>)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e000      	b.n	800326c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
}
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20000200 	.word	0x20000200
 8003278:	20000208 	.word	0x20000208
 800327c:	20000204 	.word	0x20000204

08003280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_IncTick+0x20>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_IncTick+0x24>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4413      	add	r3, r2
 8003290:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <HAL_IncTick+0x24>)
 8003292:	6013      	str	r3, [r2, #0]
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000208 	.word	0x20000208
 80032a4:	20000ec8 	.word	0x20000ec8

080032a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return uwTick;
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <HAL_GetTick+0x14>)
 80032ae:	681b      	ldr	r3, [r3, #0]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000ec8 	.word	0x20000ec8

080032c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e033      	b.n	800333e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fe fa40 	bl	8001764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d118      	bne.n	8003330 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003306:	f023 0302 	bic.w	r3, r3, #2
 800330a:	f043 0202 	orr.w	r2, r3, #2
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f94a 	bl	80035ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f023 0303 	bic.w	r3, r3, #3
 8003326:	f043 0201 	orr.w	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
 800332e:	e001      	b.n	8003334 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800333c:	7bfb      	ldrb	r3, [r7, #15]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x1c>
 8003360:	2302      	movs	r3, #2
 8003362:	e113      	b.n	800358c <HAL_ADC_ConfigChannel+0x244>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b09      	cmp	r3, #9
 8003372:	d925      	bls.n	80033c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68d9      	ldr	r1, [r3, #12]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	4613      	mov	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4413      	add	r3, r2
 8003388:	3b1e      	subs	r3, #30
 800338a:	2207      	movs	r2, #7
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43da      	mvns	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	400a      	ands	r2, r1
 8003398:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68d9      	ldr	r1, [r3, #12]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	4618      	mov	r0, r3
 80033ac:	4603      	mov	r3, r0
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4403      	add	r3, r0
 80033b2:	3b1e      	subs	r3, #30
 80033b4:	409a      	lsls	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	e022      	b.n	8003406 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6919      	ldr	r1, [r3, #16]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	2207      	movs	r2, #7
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43da      	mvns	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	400a      	ands	r2, r1
 80033e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6919      	ldr	r1, [r3, #16]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	4618      	mov	r0, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4403      	add	r3, r0
 80033fc:	409a      	lsls	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b06      	cmp	r3, #6
 800340c:	d824      	bhi.n	8003458 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	3b05      	subs	r3, #5
 8003420:	221f      	movs	r2, #31
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43da      	mvns	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	400a      	ands	r2, r1
 800342e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	4618      	mov	r0, r3
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	3b05      	subs	r3, #5
 800344a:	fa00 f203 	lsl.w	r2, r0, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	635a      	str	r2, [r3, #52]	; 0x34
 8003456:	e04c      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b0c      	cmp	r3, #12
 800345e:	d824      	bhi.n	80034aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	3b23      	subs	r3, #35	; 0x23
 8003472:	221f      	movs	r2, #31
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43da      	mvns	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	400a      	ands	r2, r1
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	b29b      	uxth	r3, r3
 800348e:	4618      	mov	r0, r3
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	3b23      	subs	r3, #35	; 0x23
 800349c:	fa00 f203 	lsl.w	r2, r0, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
 80034a8:	e023      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	3b41      	subs	r3, #65	; 0x41
 80034bc:	221f      	movs	r2, #31
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43da      	mvns	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	400a      	ands	r2, r1
 80034ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	4618      	mov	r0, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	3b41      	subs	r3, #65	; 0x41
 80034e6:	fa00 f203 	lsl.w	r2, r0, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034f2:	4b29      	ldr	r3, [pc, #164]	; (8003598 <HAL_ADC_ConfigChannel+0x250>)
 80034f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a28      	ldr	r2, [pc, #160]	; (800359c <HAL_ADC_ConfigChannel+0x254>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d10f      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x1d8>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b12      	cmp	r3, #18
 8003506:	d10b      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1d      	ldr	r2, [pc, #116]	; (800359c <HAL_ADC_ConfigChannel+0x254>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d12b      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x23a>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <HAL_ADC_ConfigChannel+0x258>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d003      	beq.n	800353c <HAL_ADC_ConfigChannel+0x1f4>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b11      	cmp	r3, #17
 800353a:	d122      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a11      	ldr	r2, [pc, #68]	; (80035a0 <HAL_ADC_ConfigChannel+0x258>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d111      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_ADC_ConfigChannel+0x25c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <HAL_ADC_ConfigChannel+0x260>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	0c9a      	lsrs	r2, r3, #18
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003574:	e002      	b.n	800357c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	3b01      	subs	r3, #1
 800357a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f9      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	40012300 	.word	0x40012300
 800359c:	40012000 	.word	0x40012000
 80035a0:	10000012 	.word	0x10000012
 80035a4:	20000200 	.word	0x20000200
 80035a8:	431bde83 	.word	0x431bde83

080035ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035b4:	4b79      	ldr	r3, [pc, #484]	; (800379c <ADC_Init+0x1f0>)
 80035b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	021a      	lsls	r2, r3, #8
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6859      	ldr	r1, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6899      	ldr	r1, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	4a58      	ldr	r2, [pc, #352]	; (80037a0 <ADC_Init+0x1f4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d022      	beq.n	800368a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003652:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6899      	ldr	r1, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6899      	ldr	r1, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	e00f      	b.n	80036aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0202 	bic.w	r2, r2, #2
 80036b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6899      	ldr	r1, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	7e1b      	ldrb	r3, [r3, #24]
 80036c4:	005a      	lsls	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01b      	beq.n	8003710 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6859      	ldr	r1, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	3b01      	subs	r3, #1
 8003704:	035a      	lsls	r2, r3, #13
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	e007      	b.n	8003720 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800371e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800372e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	3b01      	subs	r3, #1
 800373c:	051a      	lsls	r2, r3, #20
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6899      	ldr	r1, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003762:	025a      	lsls	r2, r3, #9
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6899      	ldr	r1, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	029a      	lsls	r2, r3, #10
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	609a      	str	r2, [r3, #8]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40012300 	.word	0x40012300
 80037a0:	0f000001 	.word	0x0f000001

080037a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c0:	4013      	ands	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d6:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	60d3      	str	r3, [r2, #12]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <__NVIC_GetPriorityGrouping+0x18>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	f003 0307 	and.w	r3, r3, #7
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	2b00      	cmp	r3, #0
 8003818:	db0b      	blt.n	8003832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4907      	ldr	r1, [pc, #28]	; (8003840 <__NVIC_EnableIRQ+0x38>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2001      	movs	r0, #1
 800382a:	fa00 f202 	lsl.w	r2, r0, r2
 800382e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000e100 	.word	0xe000e100

08003844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	2b00      	cmp	r3, #0
 8003856:	db0a      	blt.n	800386e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	490c      	ldr	r1, [pc, #48]	; (8003890 <__NVIC_SetPriority+0x4c>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	440b      	add	r3, r1
 8003868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800386c:	e00a      	b.n	8003884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4908      	ldr	r1, [pc, #32]	; (8003894 <__NVIC_SetPriority+0x50>)
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3b04      	subs	r3, #4
 800387c:	0112      	lsls	r2, r2, #4
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	440b      	add	r3, r1
 8003882:	761a      	strb	r2, [r3, #24]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000e100 	.word	0xe000e100
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f1c3 0307 	rsb	r3, r3, #7
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	bf28      	it	cs
 80038b6:	2304      	movcs	r3, #4
 80038b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3304      	adds	r3, #4
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d902      	bls.n	80038c8 <NVIC_EncodePriority+0x30>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3b03      	subs	r3, #3
 80038c6:	e000      	b.n	80038ca <NVIC_EncodePriority+0x32>
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	401a      	ands	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e0:	f04f 31ff 	mov.w	r1, #4294967295
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43d9      	mvns	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f0:	4313      	orrs	r3, r2
         );
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3724      	adds	r7, #36	; 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003910:	d301      	bcc.n	8003916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003912:	2301      	movs	r3, #1
 8003914:	e00f      	b.n	8003936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003916:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <SysTick_Config+0x40>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800391e:	210f      	movs	r1, #15
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	f7ff ff8e 	bl	8003844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <SysTick_Config+0x40>)
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800392e:	4b04      	ldr	r3, [pc, #16]	; (8003940 <SysTick_Config+0x40>)
 8003930:	2207      	movs	r2, #7
 8003932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	e000e010 	.word	0xe000e010

08003944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff29 	bl	80037a4 <__NVIC_SetPriorityGrouping>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	4603      	mov	r3, r0
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800396c:	f7ff ff3e 	bl	80037ec <__NVIC_GetPriorityGrouping>
 8003970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	6978      	ldr	r0, [r7, #20]
 8003978:	f7ff ff8e 	bl	8003898 <NVIC_EncodePriority>
 800397c:	4602      	mov	r2, r0
 800397e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ff5d 	bl	8003844 <__NVIC_SetPriority>
}
 800398a:	bf00      	nop
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	4603      	mov	r3, r0
 800399a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800399c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff31 	bl	8003808 <__NVIC_EnableIRQ>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ffa2 	bl	8003900 <SysTick_Config>
 80039bc:	4603      	mov	r3, r0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039d4:	f7ff fc68 	bl	80032a8 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e099      	b.n	8003b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a04:	e00f      	b.n	8003a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a06:	f7ff fc4f 	bl	80032a8 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b05      	cmp	r3, #5
 8003a12:	d908      	bls.n	8003a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e078      	b.n	8003b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e8      	bne.n	8003a06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4b38      	ldr	r3, [pc, #224]	; (8003b20 <HAL_DMA_Init+0x158>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d107      	bne.n	8003a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f023 0307 	bic.w	r3, r3, #7
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d117      	bne.n	8003aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00e      	beq.n	8003aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fb0d 	bl	80040ec <DMA_CheckFifoParam>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2240      	movs	r2, #64	; 0x40
 8003adc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e016      	b.n	8003b18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fac4 	bl	8004080 <DMA_CalcBaseAndBitshift>
 8003af8:	4603      	mov	r3, r0
 8003afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b00:	223f      	movs	r2, #63	; 0x3f
 8003b02:	409a      	lsls	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	f010803f 	.word	0xf010803f

08003b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_DMA_Start_IT+0x26>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e040      	b.n	8003bcc <HAL_DMA_Start_IT+0xa8>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d12f      	bne.n	8003bbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2202      	movs	r2, #2
 8003b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 fa56 	bl	8004024 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	223f      	movs	r2, #63	; 0x3f
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0216 	orr.w	r2, r2, #22
 8003b92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d007      	beq.n	8003bac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0208 	orr.w	r2, r2, #8
 8003baa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e005      	b.n	8003bca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003be2:	f7ff fb61 	bl	80032a8 <HAL_GetTick>
 8003be6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d008      	beq.n	8003c06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2280      	movs	r2, #128	; 0x80
 8003bf8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e052      	b.n	8003cac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0216 	bic.w	r2, r2, #22
 8003c14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d103      	bne.n	8003c36 <HAL_DMA_Abort+0x62>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0208 	bic.w	r2, r2, #8
 8003c44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c56:	e013      	b.n	8003c80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c58:	f7ff fb26 	bl	80032a8 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b05      	cmp	r3, #5
 8003c64:	d90c      	bls.n	8003c80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2203      	movs	r2, #3
 8003c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e015      	b.n	8003cac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e4      	bne.n	8003c58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c92:	223f      	movs	r2, #63	; 0x3f
 8003c94:	409a      	lsls	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2280      	movs	r2, #128	; 0x80
 8003ccc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e00c      	b.n	8003cec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2205      	movs	r2, #5
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d04:	4b8e      	ldr	r3, [pc, #568]	; (8003f40 <HAL_DMA_IRQHandler+0x248>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a8e      	ldr	r2, [pc, #568]	; (8003f44 <HAL_DMA_IRQHandler+0x24c>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	0a9b      	lsrs	r3, r3, #10
 8003d10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d22:	2208      	movs	r2, #8
 8003d24:	409a      	lsls	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d01a      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0204 	bic.w	r2, r2, #4
 8003d4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	2208      	movs	r2, #8
 8003d52:	409a      	lsls	r2, r3
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	f043 0201 	orr.w	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	2201      	movs	r2, #1
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d012      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d86:	2201      	movs	r2, #1
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d92:	f043 0202 	orr.w	r2, r3, #2
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	2204      	movs	r2, #4
 8003da0:	409a      	lsls	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d012      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00b      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	f043 0204 	orr.w	r2, r3, #4
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd4:	2210      	movs	r2, #16
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d043      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d03c      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	2210      	movs	r2, #16
 8003df4:	409a      	lsls	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d018      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d108      	bne.n	8003e28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d024      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	4798      	blx	r3
 8003e26:	e01f      	b.n	8003e68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01b      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	4798      	blx	r3
 8003e38:	e016      	b.n	8003e68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d107      	bne.n	8003e58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0208 	bic.w	r2, r2, #8
 8003e56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 808f 	beq.w	8003f98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8087 	beq.w	8003f98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	2220      	movs	r2, #32
 8003e90:	409a      	lsls	r2, r3
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d136      	bne.n	8003f10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0216 	bic.w	r2, r2, #22
 8003eb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <HAL_DMA_IRQHandler+0x1da>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0208 	bic.w	r2, r2, #8
 8003ee0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	223f      	movs	r2, #63	; 0x3f
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d07e      	beq.n	8004004 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
        }
        return;
 8003f0e:	e079      	b.n	8004004 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d01d      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10d      	bne.n	8003f48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d031      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	4798      	blx	r3
 8003f3c:	e02c      	b.n	8003f98 <HAL_DMA_IRQHandler+0x2a0>
 8003f3e:	bf00      	nop
 8003f40:	20000200 	.word	0x20000200
 8003f44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d023      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
 8003f58:	e01e      	b.n	8003f98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10f      	bne.n	8003f88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0210 	bic.w	r2, r2, #16
 8003f76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d032      	beq.n	8004006 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d022      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2205      	movs	r2, #5
 8003fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d307      	bcc.n	8003fe0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f2      	bne.n	8003fc4 <HAL_DMA_IRQHandler+0x2cc>
 8003fde:	e000      	b.n	8003fe2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fe0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	4798      	blx	r3
 8004002:	e000      	b.n	8004006 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004004:	bf00      	nop
    }
  }
}
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004040:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b40      	cmp	r3, #64	; 0x40
 8004050:	d108      	bne.n	8004064 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004062:	e007      	b.n	8004074 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	60da      	str	r2, [r3, #12]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	3b10      	subs	r3, #16
 8004090:	4a14      	ldr	r2, [pc, #80]	; (80040e4 <DMA_CalcBaseAndBitshift+0x64>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	091b      	lsrs	r3, r3, #4
 8004098:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800409a:	4a13      	ldr	r2, [pc, #76]	; (80040e8 <DMA_CalcBaseAndBitshift+0x68>)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d909      	bls.n	80040c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040b6:	f023 0303 	bic.w	r3, r3, #3
 80040ba:	1d1a      	adds	r2, r3, #4
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	659a      	str	r2, [r3, #88]	; 0x58
 80040c0:	e007      	b.n	80040d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ca:	f023 0303 	bic.w	r3, r3, #3
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	aaaaaaab 	.word	0xaaaaaaab
 80040e8:	0800e0a0 	.word	0x0800e0a0

080040ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d11f      	bne.n	8004146 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b03      	cmp	r3, #3
 800410a:	d856      	bhi.n	80041ba <DMA_CheckFifoParam+0xce>
 800410c:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <DMA_CheckFifoParam+0x28>)
 800410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004112:	bf00      	nop
 8004114:	08004125 	.word	0x08004125
 8004118:	08004137 	.word	0x08004137
 800411c:	08004125 	.word	0x08004125
 8004120:	080041bb 	.word	0x080041bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d046      	beq.n	80041be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004134:	e043      	b.n	80041be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800413e:	d140      	bne.n	80041c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004144:	e03d      	b.n	80041c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414e:	d121      	bne.n	8004194 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d837      	bhi.n	80041c6 <DMA_CheckFifoParam+0xda>
 8004156:	a201      	add	r2, pc, #4	; (adr r2, 800415c <DMA_CheckFifoParam+0x70>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	0800416d 	.word	0x0800416d
 8004160:	08004173 	.word	0x08004173
 8004164:	0800416d 	.word	0x0800416d
 8004168:	08004185 	.word	0x08004185
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
      break;
 8004170:	e030      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d025      	beq.n	80041ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004182:	e022      	b.n	80041ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800418c:	d11f      	bne.n	80041ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004192:	e01c      	b.n	80041ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d903      	bls.n	80041a2 <DMA_CheckFifoParam+0xb6>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b03      	cmp	r3, #3
 800419e:	d003      	beq.n	80041a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041a0:	e018      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
      break;
 80041a6:	e015      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00e      	beq.n	80041d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
      break;
 80041b8:	e00b      	b.n	80041d2 <DMA_CheckFifoParam+0xe6>
      break;
 80041ba:	bf00      	nop
 80041bc:	e00a      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;
 80041be:	bf00      	nop
 80041c0:	e008      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;
 80041c2:	bf00      	nop
 80041c4:	e006      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;
 80041c6:	bf00      	nop
 80041c8:	e004      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;
 80041ca:	bf00      	nop
 80041cc:	e002      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80041ce:	bf00      	nop
 80041d0:	e000      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;
 80041d2:	bf00      	nop
    }
  } 
  
  return status; 
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop

080041e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b089      	sub	sp, #36	; 0x24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	e159      	b.n	80044b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004200:	2201      	movs	r2, #1
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4013      	ands	r3, r2
 8004212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	429a      	cmp	r2, r3
 800421a:	f040 8148 	bne.w	80044ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	2b01      	cmp	r3, #1
 8004228:	d005      	beq.n	8004236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004232:	2b02      	cmp	r3, #2
 8004234:	d130      	bne.n	8004298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	2203      	movs	r2, #3
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43db      	mvns	r3, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4013      	ands	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4313      	orrs	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800426c:	2201      	movs	r2, #1
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	f003 0201 	and.w	r2, r3, #1
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d017      	beq.n	80042d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	2203      	movs	r2, #3
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	43db      	mvns	r3, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4013      	ands	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d123      	bne.n	8004328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	08da      	lsrs	r2, r3, #3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3208      	adds	r2, #8
 80042e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	220f      	movs	r2, #15
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	43db      	mvns	r3, r3
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4013      	ands	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4313      	orrs	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	08da      	lsrs	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3208      	adds	r2, #8
 8004322:	69b9      	ldr	r1, [r7, #24]
 8004324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	2203      	movs	r2, #3
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 0203 	and.w	r2, r3, #3
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 80a2 	beq.w	80044ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	4b57      	ldr	r3, [pc, #348]	; (80044cc <HAL_GPIO_Init+0x2e8>)
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	4a56      	ldr	r2, [pc, #344]	; (80044cc <HAL_GPIO_Init+0x2e8>)
 8004374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004378:	6453      	str	r3, [r2, #68]	; 0x44
 800437a:	4b54      	ldr	r3, [pc, #336]	; (80044cc <HAL_GPIO_Init+0x2e8>)
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004386:	4a52      	ldr	r2, [pc, #328]	; (80044d0 <HAL_GPIO_Init+0x2ec>)
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	089b      	lsrs	r3, r3, #2
 800438c:	3302      	adds	r3, #2
 800438e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	220f      	movs	r2, #15
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43db      	mvns	r3, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4013      	ands	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a49      	ldr	r2, [pc, #292]	; (80044d4 <HAL_GPIO_Init+0x2f0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d019      	beq.n	80043e6 <HAL_GPIO_Init+0x202>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a48      	ldr	r2, [pc, #288]	; (80044d8 <HAL_GPIO_Init+0x2f4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d013      	beq.n	80043e2 <HAL_GPIO_Init+0x1fe>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a47      	ldr	r2, [pc, #284]	; (80044dc <HAL_GPIO_Init+0x2f8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00d      	beq.n	80043de <HAL_GPIO_Init+0x1fa>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a46      	ldr	r2, [pc, #280]	; (80044e0 <HAL_GPIO_Init+0x2fc>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d007      	beq.n	80043da <HAL_GPIO_Init+0x1f6>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a45      	ldr	r2, [pc, #276]	; (80044e4 <HAL_GPIO_Init+0x300>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d101      	bne.n	80043d6 <HAL_GPIO_Init+0x1f2>
 80043d2:	2304      	movs	r3, #4
 80043d4:	e008      	b.n	80043e8 <HAL_GPIO_Init+0x204>
 80043d6:	2307      	movs	r3, #7
 80043d8:	e006      	b.n	80043e8 <HAL_GPIO_Init+0x204>
 80043da:	2303      	movs	r3, #3
 80043dc:	e004      	b.n	80043e8 <HAL_GPIO_Init+0x204>
 80043de:	2302      	movs	r3, #2
 80043e0:	e002      	b.n	80043e8 <HAL_GPIO_Init+0x204>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_GPIO_Init+0x204>
 80043e6:	2300      	movs	r3, #0
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	f002 0203 	and.w	r2, r2, #3
 80043ee:	0092      	lsls	r2, r2, #2
 80043f0:	4093      	lsls	r3, r2
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043f8:	4935      	ldr	r1, [pc, #212]	; (80044d0 <HAL_GPIO_Init+0x2ec>)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	089b      	lsrs	r3, r3, #2
 80043fe:	3302      	adds	r3, #2
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004406:	4b38      	ldr	r3, [pc, #224]	; (80044e8 <HAL_GPIO_Init+0x304>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	43db      	mvns	r3, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4013      	ands	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800442a:	4a2f      	ldr	r2, [pc, #188]	; (80044e8 <HAL_GPIO_Init+0x304>)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004430:	4b2d      	ldr	r3, [pc, #180]	; (80044e8 <HAL_GPIO_Init+0x304>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004454:	4a24      	ldr	r2, [pc, #144]	; (80044e8 <HAL_GPIO_Init+0x304>)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800445a:	4b23      	ldr	r3, [pc, #140]	; (80044e8 <HAL_GPIO_Init+0x304>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	43db      	mvns	r3, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4013      	ands	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800447e:	4a1a      	ldr	r2, [pc, #104]	; (80044e8 <HAL_GPIO_Init+0x304>)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004484:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <HAL_GPIO_Init+0x304>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	43db      	mvns	r3, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044a8:	4a0f      	ldr	r2, [pc, #60]	; (80044e8 <HAL_GPIO_Init+0x304>)
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	3301      	adds	r3, #1
 80044b2:	61fb      	str	r3, [r7, #28]
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2b0f      	cmp	r3, #15
 80044b8:	f67f aea2 	bls.w	8004200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
 80044c0:	3724      	adds	r7, #36	; 0x24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40013800 	.word	0x40013800
 80044d4:	40020000 	.word	0x40020000
 80044d8:	40020400 	.word	0x40020400
 80044dc:	40020800 	.word	0x40020800
 80044e0:	40020c00 	.word	0x40020c00
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40013c00 	.word	0x40013c00

080044ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	807b      	strh	r3, [r7, #2]
 80044f8:	4613      	mov	r3, r2
 80044fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044fc:	787b      	ldrb	r3, [r7, #1]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004502:	887a      	ldrh	r2, [r7, #2]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004508:	e003      	b.n	8004512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800450a:	887b      	ldrh	r3, [r7, #2]
 800450c:	041a      	lsls	r2, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	619a      	str	r2, [r3, #24]
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e12b      	b.n	800478a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fd fa2a 	bl	80019a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2224      	movs	r2, #36	; 0x24
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004584:	f000 fd80 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8004588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4a81      	ldr	r2, [pc, #516]	; (8004794 <HAL_I2C_Init+0x274>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d807      	bhi.n	80045a4 <HAL_I2C_Init+0x84>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a80      	ldr	r2, [pc, #512]	; (8004798 <HAL_I2C_Init+0x278>)
 8004598:	4293      	cmp	r3, r2
 800459a:	bf94      	ite	ls
 800459c:	2301      	movls	r3, #1
 800459e:	2300      	movhi	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	e006      	b.n	80045b2 <HAL_I2C_Init+0x92>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a7d      	ldr	r2, [pc, #500]	; (800479c <HAL_I2C_Init+0x27c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	bf94      	ite	ls
 80045ac:	2301      	movls	r3, #1
 80045ae:	2300      	movhi	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e0e7      	b.n	800478a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4a78      	ldr	r2, [pc, #480]	; (80047a0 <HAL_I2C_Init+0x280>)
 80045be:	fba2 2303 	umull	r2, r3, r2, r3
 80045c2:	0c9b      	lsrs	r3, r3, #18
 80045c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4a6a      	ldr	r2, [pc, #424]	; (8004794 <HAL_I2C_Init+0x274>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d802      	bhi.n	80045f4 <HAL_I2C_Init+0xd4>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	3301      	adds	r3, #1
 80045f2:	e009      	b.n	8004608 <HAL_I2C_Init+0xe8>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045fa:	fb02 f303 	mul.w	r3, r2, r3
 80045fe:	4a69      	ldr	r2, [pc, #420]	; (80047a4 <HAL_I2C_Init+0x284>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	099b      	lsrs	r3, r3, #6
 8004606:	3301      	adds	r3, #1
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	430b      	orrs	r3, r1
 800460e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800461a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	495c      	ldr	r1, [pc, #368]	; (8004794 <HAL_I2C_Init+0x274>)
 8004624:	428b      	cmp	r3, r1
 8004626:	d819      	bhi.n	800465c <HAL_I2C_Init+0x13c>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	1e59      	subs	r1, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	fbb1 f3f3 	udiv	r3, r1, r3
 8004636:	1c59      	adds	r1, r3, #1
 8004638:	f640 73fc 	movw	r3, #4092	; 0xffc
 800463c:	400b      	ands	r3, r1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_I2C_Init+0x138>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1e59      	subs	r1, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004650:	3301      	adds	r3, #1
 8004652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004656:	e051      	b.n	80046fc <HAL_I2C_Init+0x1dc>
 8004658:	2304      	movs	r3, #4
 800465a:	e04f      	b.n	80046fc <HAL_I2C_Init+0x1dc>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d111      	bne.n	8004688 <HAL_I2C_Init+0x168>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1e58      	subs	r0, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6859      	ldr	r1, [r3, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	440b      	add	r3, r1
 8004672:	fbb0 f3f3 	udiv	r3, r0, r3
 8004676:	3301      	adds	r3, #1
 8004678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	e012      	b.n	80046ae <HAL_I2C_Init+0x18e>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	1e58      	subs	r0, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6859      	ldr	r1, [r3, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	0099      	lsls	r1, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	fbb0 f3f3 	udiv	r3, r0, r3
 800469e:	3301      	adds	r3, #1
 80046a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bf0c      	ite	eq
 80046a8:	2301      	moveq	r3, #1
 80046aa:	2300      	movne	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_I2C_Init+0x196>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e022      	b.n	80046fc <HAL_I2C_Init+0x1dc>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10e      	bne.n	80046dc <HAL_I2C_Init+0x1bc>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1e58      	subs	r0, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6859      	ldr	r1, [r3, #4]
 80046c6:	460b      	mov	r3, r1
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	440b      	add	r3, r1
 80046cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d0:	3301      	adds	r3, #1
 80046d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046da:	e00f      	b.n	80046fc <HAL_I2C_Init+0x1dc>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1e58      	subs	r0, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6859      	ldr	r1, [r3, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	0099      	lsls	r1, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80046f2:	3301      	adds	r3, #1
 80046f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	6809      	ldr	r1, [r1, #0]
 8004700:	4313      	orrs	r3, r2
 8004702:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69da      	ldr	r2, [r3, #28]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800472a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6911      	ldr	r1, [r2, #16]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	68d2      	ldr	r2, [r2, #12]
 8004736:	4311      	orrs	r1, r2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	430b      	orrs	r3, r1
 800473e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	000186a0 	.word	0x000186a0
 8004798:	001e847f 	.word	0x001e847f
 800479c:	003d08ff 	.word	0x003d08ff
 80047a0:	431bde83 	.word	0x431bde83
 80047a4:	10624dd3 	.word	0x10624dd3

080047a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e267      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d075      	beq.n	80048b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047c6:	4b88      	ldr	r3, [pc, #544]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d00c      	beq.n	80047ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047d2:	4b85      	ldr	r3, [pc, #532]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d112      	bne.n	8004804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047de:	4b82      	ldr	r3, [pc, #520]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ea:	d10b      	bne.n	8004804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ec:	4b7e      	ldr	r3, [pc, #504]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d05b      	beq.n	80048b0 <HAL_RCC_OscConfig+0x108>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d157      	bne.n	80048b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e242      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800480c:	d106      	bne.n	800481c <HAL_RCC_OscConfig+0x74>
 800480e:	4b76      	ldr	r3, [pc, #472]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a75      	ldr	r2, [pc, #468]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e01d      	b.n	8004858 <HAL_RCC_OscConfig+0xb0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004824:	d10c      	bne.n	8004840 <HAL_RCC_OscConfig+0x98>
 8004826:	4b70      	ldr	r3, [pc, #448]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a6f      	ldr	r2, [pc, #444]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 800482c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	4b6d      	ldr	r3, [pc, #436]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a6c      	ldr	r2, [pc, #432]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	e00b      	b.n	8004858 <HAL_RCC_OscConfig+0xb0>
 8004840:	4b69      	ldr	r3, [pc, #420]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a68      	ldr	r2, [pc, #416]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	4b66      	ldr	r3, [pc, #408]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a65      	ldr	r2, [pc, #404]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d013      	beq.n	8004888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7fe fd22 	bl	80032a8 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004868:	f7fe fd1e 	bl	80032a8 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	; 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e207      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487a:	4b5b      	ldr	r3, [pc, #364]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0xc0>
 8004886:	e014      	b.n	80048b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004888:	f7fe fd0e 	bl	80032a8 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004890:	f7fe fd0a 	bl	80032a8 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	; 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e1f3      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a2:	4b51      	ldr	r3, [pc, #324]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0xe8>
 80048ae:	e000      	b.n	80048b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d063      	beq.n	8004986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048be:	4b4a      	ldr	r3, [pc, #296]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00b      	beq.n	80048e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ca:	4b47      	ldr	r3, [pc, #284]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d11c      	bne.n	8004910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048d6:	4b44      	ldr	r3, [pc, #272]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d116      	bne.n	8004910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e2:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <HAL_RCC_OscConfig+0x152>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d001      	beq.n	80048fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e1c7      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fa:	4b3b      	ldr	r3, [pc, #236]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	4937      	ldr	r1, [pc, #220]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490e:	e03a      	b.n	8004986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d020      	beq.n	800495a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004918:	4b34      	ldr	r3, [pc, #208]	; (80049ec <HAL_RCC_OscConfig+0x244>)
 800491a:	2201      	movs	r2, #1
 800491c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491e:	f7fe fcc3 	bl	80032a8 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004926:	f7fe fcbf 	bl	80032a8 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e1a8      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004938:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0f0      	beq.n	8004926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004944:	4b28      	ldr	r3, [pc, #160]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	4925      	ldr	r1, [pc, #148]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004954:	4313      	orrs	r3, r2
 8004956:	600b      	str	r3, [r1, #0]
 8004958:	e015      	b.n	8004986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800495a:	4b24      	ldr	r3, [pc, #144]	; (80049ec <HAL_RCC_OscConfig+0x244>)
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7fe fca2 	bl	80032a8 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004968:	f7fe fc9e 	bl	80032a8 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e187      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800497a:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d036      	beq.n	8004a00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d016      	beq.n	80049c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800499a:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <HAL_RCC_OscConfig+0x248>)
 800499c:	2201      	movs	r2, #1
 800499e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a0:	f7fe fc82 	bl	80032a8 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049a8:	f7fe fc7e 	bl	80032a8 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e167      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ba:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80049bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0x200>
 80049c6:	e01b      	b.n	8004a00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049c8:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <HAL_RCC_OscConfig+0x248>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ce:	f7fe fc6b 	bl	80032a8 <HAL_GetTick>
 80049d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d4:	e00e      	b.n	80049f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049d6:	f7fe fc67 	bl	80032a8 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d907      	bls.n	80049f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e150      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
 80049e8:	40023800 	.word	0x40023800
 80049ec:	42470000 	.word	0x42470000
 80049f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f4:	4b88      	ldr	r3, [pc, #544]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 80049f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1ea      	bne.n	80049d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8097 	beq.w	8004b3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a12:	4b81      	ldr	r3, [pc, #516]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10f      	bne.n	8004a3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	4b7d      	ldr	r3, [pc, #500]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	4a7c      	ldr	r2, [pc, #496]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a2e:	4b7a      	ldr	r3, [pc, #488]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3e:	4b77      	ldr	r3, [pc, #476]	; (8004c1c <HAL_RCC_OscConfig+0x474>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d118      	bne.n	8004a7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a4a:	4b74      	ldr	r3, [pc, #464]	; (8004c1c <HAL_RCC_OscConfig+0x474>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a73      	ldr	r2, [pc, #460]	; (8004c1c <HAL_RCC_OscConfig+0x474>)
 8004a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a56:	f7fe fc27 	bl	80032a8 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a5e:	f7fe fc23 	bl	80032a8 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e10c      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a70:	4b6a      	ldr	r3, [pc, #424]	; (8004c1c <HAL_RCC_OscConfig+0x474>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d106      	bne.n	8004a92 <HAL_RCC_OscConfig+0x2ea>
 8004a84:	4b64      	ldr	r3, [pc, #400]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a88:	4a63      	ldr	r2, [pc, #396]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a90:	e01c      	b.n	8004acc <HAL_RCC_OscConfig+0x324>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b05      	cmp	r3, #5
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x30c>
 8004a9a:	4b5f      	ldr	r3, [pc, #380]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	4a5e      	ldr	r2, [pc, #376]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004aa0:	f043 0304 	orr.w	r3, r3, #4
 8004aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa6:	4b5c      	ldr	r3, [pc, #368]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	4a5b      	ldr	r2, [pc, #364]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab2:	e00b      	b.n	8004acc <HAL_RCC_OscConfig+0x324>
 8004ab4:	4b58      	ldr	r3, [pc, #352]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	4a57      	ldr	r2, [pc, #348]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac0:	4b55      	ldr	r3, [pc, #340]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	4a54      	ldr	r2, [pc, #336]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004ac6:	f023 0304 	bic.w	r3, r3, #4
 8004aca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d015      	beq.n	8004b00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad4:	f7fe fbe8 	bl	80032a8 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ada:	e00a      	b.n	8004af2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004adc:	f7fe fbe4 	bl	80032a8 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e0cb      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af2:	4b49      	ldr	r3, [pc, #292]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0ee      	beq.n	8004adc <HAL_RCC_OscConfig+0x334>
 8004afe:	e014      	b.n	8004b2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b00:	f7fe fbd2 	bl	80032a8 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b06:	e00a      	b.n	8004b1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b08:	f7fe fbce 	bl	80032a8 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e0b5      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b1e:	4b3e      	ldr	r3, [pc, #248]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1ee      	bne.n	8004b08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b2a:	7dfb      	ldrb	r3, [r7, #23]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d105      	bne.n	8004b3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b30:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	4a38      	ldr	r2, [pc, #224]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80a1 	beq.w	8004c88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b46:	4b34      	ldr	r3, [pc, #208]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d05c      	beq.n	8004c0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d141      	bne.n	8004bde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5a:	4b31      	ldr	r3, [pc, #196]	; (8004c20 <HAL_RCC_OscConfig+0x478>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b60:	f7fe fba2 	bl	80032a8 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b68:	f7fe fb9e 	bl	80032a8 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e087      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7a:	4b27      	ldr	r3, [pc, #156]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69da      	ldr	r2, [r3, #28]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	019b      	lsls	r3, r3, #6
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9c:	085b      	lsrs	r3, r3, #1
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	041b      	lsls	r3, r3, #16
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	061b      	lsls	r3, r3, #24
 8004baa:	491b      	ldr	r1, [pc, #108]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <HAL_RCC_OscConfig+0x478>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb6:	f7fe fb77 	bl	80032a8 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bbe:	f7fe fb73 	bl	80032a8 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e05c      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x416>
 8004bdc:	e054      	b.n	8004c88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bde:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <HAL_RCC_OscConfig+0x478>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be4:	f7fe fb60 	bl	80032a8 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fe fb5c 	bl	80032a8 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e045      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfe:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x444>
 8004c0a:	e03d      	b.n	8004c88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d107      	bne.n	8004c24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e038      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40007000 	.word	0x40007000
 8004c20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c24:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <HAL_RCC_OscConfig+0x4ec>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d028      	beq.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d121      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d11a      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c54:	4013      	ands	r3, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d111      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d107      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d001      	beq.n	8004c88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40023800 	.word	0x40023800

08004c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0cc      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cac:	4b68      	ldr	r3, [pc, #416]	; (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d90c      	bls.n	8004cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b65      	ldr	r3, [pc, #404]	; (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	4b63      	ldr	r3, [pc, #396]	; (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0b8      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d020      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cec:	4b59      	ldr	r3, [pc, #356]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4a58      	ldr	r2, [pc, #352]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d04:	4b53      	ldr	r3, [pc, #332]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4a52      	ldr	r2, [pc, #328]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d10:	4b50      	ldr	r3, [pc, #320]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	494d      	ldr	r1, [pc, #308]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d044      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d107      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d36:	4b47      	ldr	r3, [pc, #284]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d119      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e07f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d003      	beq.n	8004d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d107      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d56:	4b3f      	ldr	r3, [pc, #252]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d109      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e06f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d66:	4b3b      	ldr	r3, [pc, #236]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e067      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d76:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f023 0203 	bic.w	r2, r3, #3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	4934      	ldr	r1, [pc, #208]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d88:	f7fe fa8e 	bl	80032a8 <HAL_GetTick>
 8004d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8e:	e00a      	b.n	8004da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d90:	f7fe fa8a 	bl	80032a8 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e04f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da6:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 020c 	and.w	r2, r3, #12
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d1eb      	bne.n	8004d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004db8:	4b25      	ldr	r3, [pc, #148]	; (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d20c      	bcs.n	8004de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b22      	ldr	r3, [pc, #136]	; (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dce:	4b20      	ldr	r3, [pc, #128]	; (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d001      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e032      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dec:	4b19      	ldr	r3, [pc, #100]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	4916      	ldr	r1, [pc, #88]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e0a:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	490e      	ldr	r1, [pc, #56]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e1e:	f000 f821 	bl	8004e64 <HAL_RCC_GetSysClockFreq>
 8004e22:	4602      	mov	r2, r0
 8004e24:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	091b      	lsrs	r3, r3, #4
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	490a      	ldr	r1, [pc, #40]	; (8004e58 <HAL_RCC_ClockConfig+0x1c0>)
 8004e30:	5ccb      	ldrb	r3, [r1, r3]
 8004e32:	fa22 f303 	lsr.w	r3, r2, r3
 8004e36:	4a09      	ldr	r2, [pc, #36]	; (8004e5c <HAL_RCC_ClockConfig+0x1c4>)
 8004e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e3a:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe f9ee 	bl	8003220 <HAL_InitTick>

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40023c00 	.word	0x40023c00
 8004e54:	40023800 	.word	0x40023800
 8004e58:	0800e088 	.word	0x0800e088
 8004e5c:	20000200 	.word	0x20000200
 8004e60:	20000204 	.word	0x20000204

08004e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e68:	b094      	sub	sp, #80	; 0x50
 8004e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e70:	2300      	movs	r3, #0
 8004e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e74:	2300      	movs	r3, #0
 8004e76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e7c:	4b79      	ldr	r3, [pc, #484]	; (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 030c 	and.w	r3, r3, #12
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d00d      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	f200 80e1 	bhi.w	8005050 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0x34>
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d003      	beq.n	8004e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e96:	e0db      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e98:	4b73      	ldr	r3, [pc, #460]	; (8005068 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e9c:	e0db      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e9e:	4b73      	ldr	r3, [pc, #460]	; (800506c <HAL_RCC_GetSysClockFreq+0x208>)
 8004ea0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ea2:	e0d8      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ea4:	4b6f      	ldr	r3, [pc, #444]	; (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eae:	4b6d      	ldr	r3, [pc, #436]	; (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d063      	beq.n	8004f82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eba:	4b6a      	ldr	r3, [pc, #424]	; (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	099b      	lsrs	r3, r3, #6
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ec4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ecc:	633b      	str	r3, [r7, #48]	; 0x30
 8004ece:	2300      	movs	r3, #0
 8004ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	462b      	mov	r3, r5
 8004eda:	f04f 0000 	mov.w	r0, #0
 8004ede:	f04f 0100 	mov.w	r1, #0
 8004ee2:	0159      	lsls	r1, r3, #5
 8004ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee8:	0150      	lsls	r0, r2, #5
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4621      	mov	r1, r4
 8004ef0:	1a51      	subs	r1, r2, r1
 8004ef2:	6139      	str	r1, [r7, #16]
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f08:	4659      	mov	r1, fp
 8004f0a:	018b      	lsls	r3, r1, #6
 8004f0c:	4651      	mov	r1, sl
 8004f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f12:	4651      	mov	r1, sl
 8004f14:	018a      	lsls	r2, r1, #6
 8004f16:	4651      	mov	r1, sl
 8004f18:	ebb2 0801 	subs.w	r8, r2, r1
 8004f1c:	4659      	mov	r1, fp
 8004f1e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f36:	4690      	mov	r8, r2
 8004f38:	4699      	mov	r9, r3
 8004f3a:	4623      	mov	r3, r4
 8004f3c:	eb18 0303 	adds.w	r3, r8, r3
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	462b      	mov	r3, r5
 8004f44:	eb49 0303 	adc.w	r3, r9, r3
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f56:	4629      	mov	r1, r5
 8004f58:	024b      	lsls	r3, r1, #9
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f60:	4621      	mov	r1, r4
 8004f62:	024a      	lsls	r2, r1, #9
 8004f64:	4610      	mov	r0, r2
 8004f66:	4619      	mov	r1, r3
 8004f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f74:	f7fb fe90 	bl	8000c98 <__aeabi_uldivmod>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f80:	e058      	b.n	8005034 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f82:	4b38      	ldr	r3, [pc, #224]	; (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	099b      	lsrs	r3, r3, #6
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f92:	623b      	str	r3, [r7, #32]
 8004f94:	2300      	movs	r3, #0
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
 8004f98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	f04f 0000 	mov.w	r0, #0
 8004fa4:	f04f 0100 	mov.w	r1, #0
 8004fa8:	0159      	lsls	r1, r3, #5
 8004faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fae:	0150      	lsls	r0, r2, #5
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fba:	4649      	mov	r1, r9
 8004fbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fd4:	ebb2 040a 	subs.w	r4, r2, sl
 8004fd8:	eb63 050b 	sbc.w	r5, r3, fp
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	00eb      	lsls	r3, r5, #3
 8004fe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fea:	00e2      	lsls	r2, r4, #3
 8004fec:	4614      	mov	r4, r2
 8004fee:	461d      	mov	r5, r3
 8004ff0:	4643      	mov	r3, r8
 8004ff2:	18e3      	adds	r3, r4, r3
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	eb45 0303 	adc.w	r3, r5, r3
 8004ffc:	607b      	str	r3, [r7, #4]
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	e9d7 4500 	ldrd	r4, r5, [r7]
 800500a:	4629      	mov	r1, r5
 800500c:	028b      	lsls	r3, r1, #10
 800500e:	4621      	mov	r1, r4
 8005010:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005014:	4621      	mov	r1, r4
 8005016:	028a      	lsls	r2, r1, #10
 8005018:	4610      	mov	r0, r2
 800501a:	4619      	mov	r1, r3
 800501c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800501e:	2200      	movs	r2, #0
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	61fa      	str	r2, [r7, #28]
 8005024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005028:	f7fb fe36 	bl	8000c98 <__aeabi_uldivmod>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4613      	mov	r3, r2
 8005032:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	0c1b      	lsrs	r3, r3, #16
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	3301      	adds	r3, #1
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005044:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800504e:	e002      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <HAL_RCC_GetSysClockFreq+0x204>)
 8005052:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005058:	4618      	mov	r0, r3
 800505a:	3750      	adds	r7, #80	; 0x50
 800505c:	46bd      	mov	sp, r7
 800505e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005062:	bf00      	nop
 8005064:	40023800 	.word	0x40023800
 8005068:	00f42400 	.word	0x00f42400
 800506c:	007a1200 	.word	0x007a1200

08005070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005074:	4b03      	ldr	r3, [pc, #12]	; (8005084 <HAL_RCC_GetHCLKFreq+0x14>)
 8005076:	681b      	ldr	r3, [r3, #0]
}
 8005078:	4618      	mov	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000200 	.word	0x20000200

08005088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800508c:	f7ff fff0 	bl	8005070 <HAL_RCC_GetHCLKFreq>
 8005090:	4602      	mov	r2, r0
 8005092:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	0a9b      	lsrs	r3, r3, #10
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	4903      	ldr	r1, [pc, #12]	; (80050ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800509e:	5ccb      	ldrb	r3, [r1, r3]
 80050a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40023800 	.word	0x40023800
 80050ac:	0800e098 	.word	0x0800e098

080050b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050b4:	f7ff ffdc 	bl	8005070 <HAL_RCC_GetHCLKFreq>
 80050b8:	4602      	mov	r2, r0
 80050ba:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	0b5b      	lsrs	r3, r3, #13
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	4903      	ldr	r1, [pc, #12]	; (80050d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050c6:	5ccb      	ldrb	r3, [r1, r3]
 80050c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40023800 	.word	0x40023800
 80050d4:	0800e098 	.word	0x0800e098

080050d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e04c      	b.n	8005184 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d111      	bne.n	800511a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f001 fc16 	bl	8006930 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005108:	2b00      	cmp	r3, #0
 800510a:	d102      	bne.n	8005112 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a1f      	ldr	r2, [pc, #124]	; (800518c <HAL_TIM_Base_Init+0xb4>)
 8005110:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2202      	movs	r2, #2
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3304      	adds	r3, #4
 800512a:	4619      	mov	r1, r3
 800512c:	4610      	mov	r0, r2
 800512e:	f001 f933 	bl	8006398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	08002d99 	.word	0x08002d99

08005190 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d001      	beq.n	80051a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e03c      	b.n	8005222 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1e      	ldr	r2, [pc, #120]	; (8005230 <HAL_TIM_Base_Start+0xa0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d018      	beq.n	80051ec <HAL_TIM_Base_Start+0x5c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c2:	d013      	beq.n	80051ec <HAL_TIM_Base_Start+0x5c>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1a      	ldr	r2, [pc, #104]	; (8005234 <HAL_TIM_Base_Start+0xa4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00e      	beq.n	80051ec <HAL_TIM_Base_Start+0x5c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a19      	ldr	r2, [pc, #100]	; (8005238 <HAL_TIM_Base_Start+0xa8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d009      	beq.n	80051ec <HAL_TIM_Base_Start+0x5c>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a17      	ldr	r2, [pc, #92]	; (800523c <HAL_TIM_Base_Start+0xac>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d004      	beq.n	80051ec <HAL_TIM_Base_Start+0x5c>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a16      	ldr	r2, [pc, #88]	; (8005240 <HAL_TIM_Base_Start+0xb0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d111      	bne.n	8005210 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b06      	cmp	r3, #6
 80051fc:	d010      	beq.n	8005220 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0201 	orr.w	r2, r2, #1
 800520c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520e:	e007      	b.n	8005220 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40010000 	.word	0x40010000
 8005234:	40000400 	.word	0x40000400
 8005238:	40000800 	.word	0x40000800
 800523c:	40000c00 	.word	0x40000c00
 8005240:	40014000 	.word	0x40014000

08005244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	d001      	beq.n	800525c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e044      	b.n	80052e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d018      	beq.n	80052b0 <HAL_TIM_Base_Start_IT+0x6c>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005286:	d013      	beq.n	80052b0 <HAL_TIM_Base_Start_IT+0x6c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a1a      	ldr	r2, [pc, #104]	; (80052f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00e      	beq.n	80052b0 <HAL_TIM_Base_Start_IT+0x6c>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a19      	ldr	r2, [pc, #100]	; (80052fc <HAL_TIM_Base_Start_IT+0xb8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d009      	beq.n	80052b0 <HAL_TIM_Base_Start_IT+0x6c>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a17      	ldr	r2, [pc, #92]	; (8005300 <HAL_TIM_Base_Start_IT+0xbc>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d004      	beq.n	80052b0 <HAL_TIM_Base_Start_IT+0x6c>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a16      	ldr	r2, [pc, #88]	; (8005304 <HAL_TIM_Base_Start_IT+0xc0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d111      	bne.n	80052d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b06      	cmp	r3, #6
 80052c0:	d010      	beq.n	80052e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0201 	orr.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d2:	e007      	b.n	80052e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40010000 	.word	0x40010000
 80052f8:	40000400 	.word	0x40000400
 80052fc:	40000800 	.word	0x40000800
 8005300:	40000c00 	.word	0x40000c00
 8005304:	40014000 	.word	0x40014000

08005308 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e04c      	b.n	80053b4 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d111      	bne.n	800534a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f001 fafe 	bl	8006930 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a1f      	ldr	r2, [pc, #124]	; (80053bc <HAL_TIM_OC_Init+0xb4>)
 8005340:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2202      	movs	r2, #2
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3304      	adds	r3, #4
 800535a:	4619      	mov	r1, r3
 800535c:	4610      	mov	r0, r2
 800535e:	f001 f81b 	bl	8006398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	080053c1 	.word	0x080053c1

080053c0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e04c      	b.n	8005480 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d111      	bne.n	8005416 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 fa98 	bl	8006930 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a1f      	ldr	r2, [pc, #124]	; (8005488 <HAL_TIM_PWM_Init+0xb4>)
 800540c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2202      	movs	r2, #2
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3304      	adds	r3, #4
 8005426:	4619      	mov	r1, r3
 8005428:	4610      	mov	r0, r2
 800542a:	f000 ffb5 	bl	8006398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	0800548d 	.word	0x0800548d

0800548c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <HAL_TIM_PWM_Start+0x24>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	bf14      	ite	ne
 80054bc:	2301      	movne	r3, #1
 80054be:	2300      	moveq	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	e022      	b.n	800550a <HAL_TIM_PWM_Start+0x6a>
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d109      	bne.n	80054de <HAL_TIM_PWM_Start+0x3e>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	bf14      	ite	ne
 80054d6:	2301      	movne	r3, #1
 80054d8:	2300      	moveq	r3, #0
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	e015      	b.n	800550a <HAL_TIM_PWM_Start+0x6a>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d109      	bne.n	80054f8 <HAL_TIM_PWM_Start+0x58>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	bf14      	ite	ne
 80054f0:	2301      	movne	r3, #1
 80054f2:	2300      	moveq	r3, #0
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	e008      	b.n	800550a <HAL_TIM_PWM_Start+0x6a>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b01      	cmp	r3, #1
 8005502:	bf14      	ite	ne
 8005504:	2301      	movne	r3, #1
 8005506:	2300      	moveq	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e068      	b.n	80055e4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d104      	bne.n	8005522 <HAL_TIM_PWM_Start+0x82>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005520:	e013      	b.n	800554a <HAL_TIM_PWM_Start+0xaa>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b04      	cmp	r3, #4
 8005526:	d104      	bne.n	8005532 <HAL_TIM_PWM_Start+0x92>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005530:	e00b      	b.n	800554a <HAL_TIM_PWM_Start+0xaa>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b08      	cmp	r3, #8
 8005536:	d104      	bne.n	8005542 <HAL_TIM_PWM_Start+0xa2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005540:	e003      	b.n	800554a <HAL_TIM_PWM_Start+0xaa>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2202      	movs	r2, #2
 8005546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2201      	movs	r2, #1
 8005550:	6839      	ldr	r1, [r7, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f001 f9c6 	bl	80068e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a23      	ldr	r2, [pc, #140]	; (80055ec <HAL_TIM_PWM_Start+0x14c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d107      	bne.n	8005572 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005570:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1d      	ldr	r2, [pc, #116]	; (80055ec <HAL_TIM_PWM_Start+0x14c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d018      	beq.n	80055ae <HAL_TIM_PWM_Start+0x10e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005584:	d013      	beq.n	80055ae <HAL_TIM_PWM_Start+0x10e>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a19      	ldr	r2, [pc, #100]	; (80055f0 <HAL_TIM_PWM_Start+0x150>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00e      	beq.n	80055ae <HAL_TIM_PWM_Start+0x10e>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a17      	ldr	r2, [pc, #92]	; (80055f4 <HAL_TIM_PWM_Start+0x154>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d009      	beq.n	80055ae <HAL_TIM_PWM_Start+0x10e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a16      	ldr	r2, [pc, #88]	; (80055f8 <HAL_TIM_PWM_Start+0x158>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d004      	beq.n	80055ae <HAL_TIM_PWM_Start+0x10e>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a14      	ldr	r2, [pc, #80]	; (80055fc <HAL_TIM_PWM_Start+0x15c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d111      	bne.n	80055d2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b06      	cmp	r3, #6
 80055be:	d010      	beq.n	80055e2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d0:	e007      	b.n	80055e2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0201 	orr.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40010000 	.word	0x40010000
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40000800 	.word	0x40000800
 80055f8:	40000c00 	.word	0x40000c00
 80055fc:	40014000 	.word	0x40014000

08005600 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e04c      	b.n	80056ae <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d111      	bne.n	8005644 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f001 f981 	bl	8006930 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005632:	2b00      	cmp	r3, #0
 8005634:	d102      	bne.n	800563c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <HAL_TIM_OnePulse_Init+0xb8>)
 800563a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3304      	adds	r3, #4
 8005654:	4619      	mov	r1, r3
 8005656:	4610      	mov	r0, r2
 8005658:	f000 fe9e 	bl	8006398 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0208 	bic.w	r2, r2, #8
 800566a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6819      	ldr	r1, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	080056bd 	.word	0x080056bd

080056bc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056f8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d108      	bne.n	8005712 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005700:	7bbb      	ldrb	r3, [r7, #14]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d105      	bne.n	8005712 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005706:	7b7b      	ldrb	r3, [r7, #13]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d102      	bne.n	8005712 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800570c:	7b3b      	ldrb	r3, [r7, #12]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d001      	beq.n	8005716 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e03b      	b.n	800578e <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2202      	movs	r2, #2
 800571a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2202      	movs	r2, #2
 8005722:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2202      	movs	r2, #2
 800572a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2202      	movs	r2, #2
 8005732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0202 	orr.w	r2, r2, #2
 8005744:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0204 	orr.w	r2, r2, #4
 8005754:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2201      	movs	r2, #1
 800575c:	2100      	movs	r1, #0
 800575e:	4618      	mov	r0, r3
 8005760:	f001 f8c0 	bl	80068e4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2201      	movs	r2, #1
 800576a:	2104      	movs	r1, #4
 800576c:	4618      	mov	r0, r3
 800576e:	f001 f8b9 	bl	80068e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a08      	ldr	r2, [pc, #32]	; (8005798 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d107      	bne.n	800578c <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800578a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	40010000 	.word	0x40010000

0800579c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e0a2      	b.n	80058f6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d111      	bne.n	80057e0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f001 f8b3 	bl	8006930 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d102      	bne.n	80057d8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a4a      	ldr	r2, [pc, #296]	; (8005900 <HAL_TIM_Encoder_Init+0x164>)
 80057d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	6812      	ldr	r2, [r2, #0]
 80057f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057f6:	f023 0307 	bic.w	r3, r3, #7
 80057fa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f000 fdc6 	bl	8006398 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005834:	f023 0303 	bic.w	r3, r3, #3
 8005838:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	4313      	orrs	r3, r2
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005852:	f023 030c 	bic.w	r3, r3, #12
 8005856:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800585e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	4313      	orrs	r3, r2
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	011a      	lsls	r2, r3, #4
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	031b      	lsls	r3, r3, #12
 8005882:	4313      	orrs	r3, r2
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005890:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005898:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	4313      	orrs	r3, r2
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	08002e71 	.word	0x08002e71

08005904 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005914:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800591c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005924:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800592c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d110      	bne.n	8005956 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d102      	bne.n	8005940 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800593a:	7b7b      	ldrb	r3, [r7, #13]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d001      	beq.n	8005944 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e069      	b.n	8005a18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005954:	e031      	b.n	80059ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b04      	cmp	r3, #4
 800595a:	d110      	bne.n	800597e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800595c:	7bbb      	ldrb	r3, [r7, #14]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d102      	bne.n	8005968 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005962:	7b3b      	ldrb	r3, [r7, #12]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d001      	beq.n	800596c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e055      	b.n	8005a18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800597c:	e01d      	b.n	80059ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d108      	bne.n	8005996 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005984:	7bbb      	ldrb	r3, [r7, #14]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d105      	bne.n	8005996 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800598a:	7b7b      	ldrb	r3, [r7, #13]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d102      	bne.n	8005996 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005990:	7b3b      	ldrb	r3, [r7, #12]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d001      	beq.n	800599a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e03e      	b.n	8005a18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2202      	movs	r2, #2
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2202      	movs	r2, #2
 80059a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2202      	movs	r2, #2
 80059ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2202      	movs	r2, #2
 80059b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_TIM_Encoder_Start+0xc4>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d008      	beq.n	80059d8 <HAL_TIM_Encoder_Start+0xd4>
 80059c6:	e00f      	b.n	80059e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2201      	movs	r2, #1
 80059ce:	2100      	movs	r1, #0
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 ff87 	bl	80068e4 <TIM_CCxChannelCmd>
      break;
 80059d6:	e016      	b.n	8005a06 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2201      	movs	r2, #1
 80059de:	2104      	movs	r1, #4
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 ff7f 	bl	80068e4 <TIM_CCxChannelCmd>
      break;
 80059e6:	e00e      	b.n	8005a06 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2201      	movs	r2, #1
 80059ee:	2100      	movs	r1, #0
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 ff77 	bl	80068e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2201      	movs	r2, #1
 80059fc:	2104      	movs	r1, #4
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 ff70 	bl	80068e4 <TIM_CCxChannelCmd>
      break;
 8005a04:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0201 	orr.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d128      	bne.n	8005a88 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d121      	bne.n	8005a88 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0202 	mvn.w	r2, #2
 8005a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	4798      	blx	r3
 8005a6c:	e009      	b.n	8005a82 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d128      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	d121      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0204 	mvn.w	r2, #4
 8005aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d005      	beq.n	8005ace <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	4798      	blx	r3
 8005acc:	e009      	b.n	8005ae2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d128      	bne.n	8005b48 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d121      	bne.n	8005b48 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f06f 0208 	mvn.w	r2, #8
 8005b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2204      	movs	r2, #4
 8005b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
 8005b2c:	e009      	b.n	8005b42 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f003 0310 	and.w	r3, r3, #16
 8005b52:	2b10      	cmp	r3, #16
 8005b54:	d128      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f003 0310 	and.w	r3, r3, #16
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	d121      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f06f 0210 	mvn.w	r2, #16
 8005b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2208      	movs	r2, #8
 8005b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	4798      	blx	r3
 8005b8c:	e009      	b.n	8005ba2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d110      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d109      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f06f 0201 	mvn.w	r2, #1
 8005bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be2:	2b80      	cmp	r3, #128	; 0x80
 8005be4:	d110      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf0:	2b80      	cmp	r3, #128	; 0x80
 8005bf2:	d109      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c12:	2b40      	cmp	r3, #64	; 0x40
 8005c14:	d110      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c20:	2b40      	cmp	r3, #64	; 0x40
 8005c22:	d109      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d110      	bne.n	8005c68 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	d109      	bne.n	8005c68 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0220 	mvn.w	r2, #32
 8005c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c68:	bf00      	nop
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <HAL_TIM_OC_ConfigChannel+0x1e>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e048      	b.n	8005d20 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b0c      	cmp	r3, #12
 8005c9a:	d839      	bhi.n	8005d10 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005c9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca2:	bf00      	nop
 8005ca4:	08005cd9 	.word	0x08005cd9
 8005ca8:	08005d11 	.word	0x08005d11
 8005cac:	08005d11 	.word	0x08005d11
 8005cb0:	08005d11 	.word	0x08005d11
 8005cb4:	08005ce7 	.word	0x08005ce7
 8005cb8:	08005d11 	.word	0x08005d11
 8005cbc:	08005d11 	.word	0x08005d11
 8005cc0:	08005d11 	.word	0x08005d11
 8005cc4:	08005cf5 	.word	0x08005cf5
 8005cc8:	08005d11 	.word	0x08005d11
 8005ccc:	08005d11 	.word	0x08005d11
 8005cd0:	08005d11 	.word	0x08005d11
 8005cd4:	08005d03 	.word	0x08005d03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fbda 	bl	8006498 <TIM_OC1_SetConfig>
      break;
 8005ce4:	e017      	b.n	8005d16 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fc39 	bl	8006564 <TIM_OC2_SetConfig>
      break;
 8005cf2:	e010      	b.n	8005d16 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 fc9e 	bl	800663c <TIM_OC3_SetConfig>
      break;
 8005d00:	e009      	b.n	8005d16 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fd01 	bl	8006710 <TIM_OC4_SetConfig>
      break;
 8005d0e:	e002      	b.n	8005d16 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	75fb      	strb	r3, [r7, #23]
      break;
 8005d14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e0ae      	b.n	8005ea4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b0c      	cmp	r3, #12
 8005d52:	f200 809f 	bhi.w	8005e94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d56:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005d91 	.word	0x08005d91
 8005d60:	08005e95 	.word	0x08005e95
 8005d64:	08005e95 	.word	0x08005e95
 8005d68:	08005e95 	.word	0x08005e95
 8005d6c:	08005dd1 	.word	0x08005dd1
 8005d70:	08005e95 	.word	0x08005e95
 8005d74:	08005e95 	.word	0x08005e95
 8005d78:	08005e95 	.word	0x08005e95
 8005d7c:	08005e13 	.word	0x08005e13
 8005d80:	08005e95 	.word	0x08005e95
 8005d84:	08005e95 	.word	0x08005e95
 8005d88:	08005e95 	.word	0x08005e95
 8005d8c:	08005e53 	.word	0x08005e53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fb7e 	bl	8006498 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0208 	orr.w	r2, r2, #8
 8005daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0204 	bic.w	r2, r2, #4
 8005dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6999      	ldr	r1, [r3, #24]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	691a      	ldr	r2, [r3, #16]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	619a      	str	r2, [r3, #24]
      break;
 8005dce:	e064      	b.n	8005e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fbc4 	bl	8006564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6999      	ldr	r1, [r3, #24]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	021a      	lsls	r2, r3, #8
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	619a      	str	r2, [r3, #24]
      break;
 8005e10:	e043      	b.n	8005e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fc0f 	bl	800663c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0208 	orr.w	r2, r2, #8
 8005e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69da      	ldr	r2, [r3, #28]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0204 	bic.w	r2, r2, #4
 8005e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69d9      	ldr	r1, [r3, #28]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	61da      	str	r2, [r3, #28]
      break;
 8005e50:	e023      	b.n	8005e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68b9      	ldr	r1, [r7, #8]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fc59 	bl	8006710 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69da      	ldr	r2, [r3, #28]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69da      	ldr	r2, [r3, #28]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69d9      	ldr	r1, [r3, #28]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	021a      	lsls	r2, r3, #8
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	61da      	str	r2, [r3, #28]
      break;
 8005e92:	e002      	b.n	8005e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	75fb      	strb	r3, [r7, #23]
      break;
 8005e98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e0b4      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x186>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f00:	d03e      	beq.n	8005f80 <HAL_TIM_ConfigClockSource+0xd4>
 8005f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f06:	f200 8087 	bhi.w	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0e:	f000 8086 	beq.w	800601e <HAL_TIM_ConfigClockSource+0x172>
 8005f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f16:	d87f      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f18:	2b70      	cmp	r3, #112	; 0x70
 8005f1a:	d01a      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0xa6>
 8005f1c:	2b70      	cmp	r3, #112	; 0x70
 8005f1e:	d87b      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f20:	2b60      	cmp	r3, #96	; 0x60
 8005f22:	d050      	beq.n	8005fc6 <HAL_TIM_ConfigClockSource+0x11a>
 8005f24:	2b60      	cmp	r3, #96	; 0x60
 8005f26:	d877      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f28:	2b50      	cmp	r3, #80	; 0x50
 8005f2a:	d03c      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0xfa>
 8005f2c:	2b50      	cmp	r3, #80	; 0x50
 8005f2e:	d873      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f30:	2b40      	cmp	r3, #64	; 0x40
 8005f32:	d058      	beq.n	8005fe6 <HAL_TIM_ConfigClockSource+0x13a>
 8005f34:	2b40      	cmp	r3, #64	; 0x40
 8005f36:	d86f      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f38:	2b30      	cmp	r3, #48	; 0x30
 8005f3a:	d064      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x15a>
 8005f3c:	2b30      	cmp	r3, #48	; 0x30
 8005f3e:	d86b      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f40:	2b20      	cmp	r3, #32
 8005f42:	d060      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x15a>
 8005f44:	2b20      	cmp	r3, #32
 8005f46:	d867      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d05c      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x15a>
 8005f4c:	2b10      	cmp	r3, #16
 8005f4e:	d05a      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x15a>
 8005f50:	e062      	b.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	6899      	ldr	r1, [r3, #8]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f000 fc9f 	bl	80068a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	609a      	str	r2, [r3, #8]
      break;
 8005f7e:	e04f      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6818      	ldr	r0, [r3, #0]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	6899      	ldr	r1, [r3, #8]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f000 fc88 	bl	80068a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fa2:	609a      	str	r2, [r3, #8]
      break;
 8005fa4:	e03c      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	6859      	ldr	r1, [r3, #4]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f000 fbfc 	bl	80067b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2150      	movs	r1, #80	; 0x50
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fc55 	bl	800686e <TIM_ITRx_SetConfig>
      break;
 8005fc4:	e02c      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	6859      	ldr	r1, [r3, #4]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f000 fc1b 	bl	800680e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2160      	movs	r1, #96	; 0x60
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 fc45 	bl	800686e <TIM_ITRx_SetConfig>
      break;
 8005fe4:	e01c      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6818      	ldr	r0, [r3, #0]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	6859      	ldr	r1, [r3, #4]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f000 fbdc 	bl	80067b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2140      	movs	r1, #64	; 0x40
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fc35 	bl	800686e <TIM_ITRx_SetConfig>
      break;
 8006004:	e00c      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4619      	mov	r1, r3
 8006010:	4610      	mov	r0, r2
 8006012:	f000 fc2c 	bl	800686e <TIM_ITRx_SetConfig>
      break;
 8006016:	e003      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	73fb      	strb	r3, [r7, #15]
      break;
 800601c:	e000      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800601e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	460b      	mov	r3, r1
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e135      	b.n	800638c <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <HAL_TIM_RegisterCallback+0x2a>
 800612a:	2302      	movs	r3, #2
 800612c:	e12e      	b.n	800638c <HAL_TIM_RegisterCallback+0x288>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b01      	cmp	r3, #1
 8006140:	f040 80ba 	bne.w	80062b8 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8006144:	7afb      	ldrb	r3, [r7, #11]
 8006146:	2b1a      	cmp	r3, #26
 8006148:	f200 80b3 	bhi.w	80062b2 <HAL_TIM_RegisterCallback+0x1ae>
 800614c:	a201      	add	r2, pc, #4	; (adr r2, 8006154 <HAL_TIM_RegisterCallback+0x50>)
 800614e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006152:	bf00      	nop
 8006154:	080061c1 	.word	0x080061c1
 8006158:	080061c9 	.word	0x080061c9
 800615c:	080061d1 	.word	0x080061d1
 8006160:	080061d9 	.word	0x080061d9
 8006164:	080061e1 	.word	0x080061e1
 8006168:	080061e9 	.word	0x080061e9
 800616c:	080061f1 	.word	0x080061f1
 8006170:	080061f9 	.word	0x080061f9
 8006174:	08006201 	.word	0x08006201
 8006178:	08006209 	.word	0x08006209
 800617c:	08006211 	.word	0x08006211
 8006180:	08006219 	.word	0x08006219
 8006184:	08006221 	.word	0x08006221
 8006188:	08006229 	.word	0x08006229
 800618c:	08006231 	.word	0x08006231
 8006190:	0800623b 	.word	0x0800623b
 8006194:	08006245 	.word	0x08006245
 8006198:	0800624f 	.word	0x0800624f
 800619c:	08006259 	.word	0x08006259
 80061a0:	08006263 	.word	0x08006263
 80061a4:	0800626d 	.word	0x0800626d
 80061a8:	08006277 	.word	0x08006277
 80061ac:	08006281 	.word	0x08006281
 80061b0:	0800628b 	.word	0x0800628b
 80061b4:	08006295 	.word	0x08006295
 80061b8:	0800629f 	.word	0x0800629f
 80061bc:	080062a9 	.word	0x080062a9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80061c6:	e0dc      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80061ce:	e0d8      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80061d6:	e0d4      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80061de:	e0d0      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80061e6:	e0cc      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80061ee:	e0c8      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80061f6:	e0c4      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80061fe:	e0c0      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006206:	e0bc      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800620e:	e0b8      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006216:	e0b4      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800621e:	e0b0      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006226:	e0ac      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800622e:	e0a8      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8006238:	e0a3      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8006242:	e09e      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800624c:	e099      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8006256:	e094      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8006260:	e08f      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800626a:	e08a      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8006274:	e085      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800627e:	e080      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8006288:	e07b      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8006292:	e076      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800629c:	e071      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80062a6:	e06c      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80062b0:	e067      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	75fb      	strb	r3, [r7, #23]
        break;
 80062b6:	e064      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d15c      	bne.n	800637e <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 80062c4:	7afb      	ldrb	r3, [r7, #11]
 80062c6:	2b0d      	cmp	r3, #13
 80062c8:	d856      	bhi.n	8006378 <HAL_TIM_RegisterCallback+0x274>
 80062ca:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <HAL_TIM_RegisterCallback+0x1cc>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	08006309 	.word	0x08006309
 80062d4:	08006311 	.word	0x08006311
 80062d8:	08006319 	.word	0x08006319
 80062dc:	08006321 	.word	0x08006321
 80062e0:	08006329 	.word	0x08006329
 80062e4:	08006331 	.word	0x08006331
 80062e8:	08006339 	.word	0x08006339
 80062ec:	08006341 	.word	0x08006341
 80062f0:	08006349 	.word	0x08006349
 80062f4:	08006351 	.word	0x08006351
 80062f8:	08006359 	.word	0x08006359
 80062fc:	08006361 	.word	0x08006361
 8006300:	08006369 	.word	0x08006369
 8006304:	08006371 	.word	0x08006371
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800630e:	e038      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006316:	e034      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800631e:	e030      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006326:	e02c      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800632e:	e028      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006336:	e024      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800633e:	e020      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006346:	e01c      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800634e:	e018      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006356:	e014      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800635e:	e010      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006366:	e00c      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800636e:	e008      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006376:	e004      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	75fb      	strb	r3, [r7, #23]
        break;
 800637c:	e001      	b.n	8006382 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800638a:	7dfb      	ldrb	r3, [r7, #23]
}
 800638c:	4618      	mov	r0, r3
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a34      	ldr	r2, [pc, #208]	; (800647c <TIM_Base_SetConfig+0xe4>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00f      	beq.n	80063d0 <TIM_Base_SetConfig+0x38>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b6:	d00b      	beq.n	80063d0 <TIM_Base_SetConfig+0x38>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a31      	ldr	r2, [pc, #196]	; (8006480 <TIM_Base_SetConfig+0xe8>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d007      	beq.n	80063d0 <TIM_Base_SetConfig+0x38>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a30      	ldr	r2, [pc, #192]	; (8006484 <TIM_Base_SetConfig+0xec>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d003      	beq.n	80063d0 <TIM_Base_SetConfig+0x38>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a2f      	ldr	r2, [pc, #188]	; (8006488 <TIM_Base_SetConfig+0xf0>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d108      	bne.n	80063e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a25      	ldr	r2, [pc, #148]	; (800647c <TIM_Base_SetConfig+0xe4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d01b      	beq.n	8006422 <TIM_Base_SetConfig+0x8a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f0:	d017      	beq.n	8006422 <TIM_Base_SetConfig+0x8a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a22      	ldr	r2, [pc, #136]	; (8006480 <TIM_Base_SetConfig+0xe8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <TIM_Base_SetConfig+0x8a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a21      	ldr	r2, [pc, #132]	; (8006484 <TIM_Base_SetConfig+0xec>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00f      	beq.n	8006422 <TIM_Base_SetConfig+0x8a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a20      	ldr	r2, [pc, #128]	; (8006488 <TIM_Base_SetConfig+0xf0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00b      	beq.n	8006422 <TIM_Base_SetConfig+0x8a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a1f      	ldr	r2, [pc, #124]	; (800648c <TIM_Base_SetConfig+0xf4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d007      	beq.n	8006422 <TIM_Base_SetConfig+0x8a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a1e      	ldr	r2, [pc, #120]	; (8006490 <TIM_Base_SetConfig+0xf8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_Base_SetConfig+0x8a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a1d      	ldr	r2, [pc, #116]	; (8006494 <TIM_Base_SetConfig+0xfc>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d108      	bne.n	8006434 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a08      	ldr	r2, [pc, #32]	; (800647c <TIM_Base_SetConfig+0xe4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d103      	bne.n	8006468 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	615a      	str	r2, [r3, #20]
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40010000 	.word	0x40010000
 8006480:	40000400 	.word	0x40000400
 8006484:	40000800 	.word	0x40000800
 8006488:	40000c00 	.word	0x40000c00
 800648c:	40014000 	.word	0x40014000
 8006490:	40014400 	.word	0x40014400
 8006494:	40014800 	.word	0x40014800

08006498 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	f023 0201 	bic.w	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0303 	bic.w	r3, r3, #3
 80064ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f023 0302 	bic.w	r3, r3, #2
 80064e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a1c      	ldr	r2, [pc, #112]	; (8006560 <TIM_OC1_SetConfig+0xc8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d10c      	bne.n	800650e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f023 0308 	bic.w	r3, r3, #8
 80064fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	4313      	orrs	r3, r2
 8006504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f023 0304 	bic.w	r3, r3, #4
 800650c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a13      	ldr	r2, [pc, #76]	; (8006560 <TIM_OC1_SetConfig+0xc8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d111      	bne.n	800653a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800651c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	621a      	str	r2, [r3, #32]
}
 8006554:	bf00      	nop
 8006556:	371c      	adds	r7, #28
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	40010000 	.word	0x40010000

08006564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	f023 0210 	bic.w	r2, r3, #16
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	021b      	lsls	r3, r3, #8
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f023 0320 	bic.w	r3, r3, #32
 80065ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a1e      	ldr	r2, [pc, #120]	; (8006638 <TIM_OC2_SetConfig+0xd4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d10d      	bne.n	80065e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	011b      	lsls	r3, r3, #4
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a15      	ldr	r2, [pc, #84]	; (8006638 <TIM_OC2_SetConfig+0xd4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d113      	bne.n	8006610 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	4313      	orrs	r3, r2
 800660e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	621a      	str	r2, [r3, #32]
}
 800662a:	bf00      	nop
 800662c:	371c      	adds	r7, #28
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40010000 	.word	0x40010000

0800663c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0303 	bic.w	r3, r3, #3
 8006672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	021b      	lsls	r3, r3, #8
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a1d      	ldr	r2, [pc, #116]	; (800670c <TIM_OC3_SetConfig+0xd0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d10d      	bne.n	80066b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	021b      	lsls	r3, r3, #8
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a14      	ldr	r2, [pc, #80]	; (800670c <TIM_OC3_SetConfig+0xd0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d113      	bne.n	80066e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	621a      	str	r2, [r3, #32]
}
 8006700:	bf00      	nop
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	40010000 	.word	0x40010000

08006710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800673e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	021b      	lsls	r3, r3, #8
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	4313      	orrs	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800675a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	031b      	lsls	r3, r3, #12
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a10      	ldr	r2, [pc, #64]	; (80067ac <TIM_OC4_SetConfig+0x9c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d109      	bne.n	8006784 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006776:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	019b      	lsls	r3, r3, #6
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	621a      	str	r2, [r3, #32]
}
 800679e:	bf00      	nop
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40010000 	.word	0x40010000

080067b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f023 0201 	bic.w	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f023 030a 	bic.w	r3, r3, #10
 80067ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	621a      	str	r2, [r3, #32]
}
 8006802:	bf00      	nop
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800680e:	b480      	push	{r7}
 8006810:	b087      	sub	sp, #28
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	f023 0210 	bic.w	r2, r3, #16
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006838:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	031b      	lsls	r3, r3, #12
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	4313      	orrs	r3, r2
 8006842:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800684a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	621a      	str	r2, [r3, #32]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800686e:	b480      	push	{r7}
 8006870:	b085      	sub	sp, #20
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006884:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	f043 0307 	orr.w	r3, r3, #7
 8006890:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	609a      	str	r2, [r3, #8]
}
 8006898:	bf00      	nop
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	021a      	lsls	r2, r3, #8
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	609a      	str	r2, [r3, #8]
}
 80068d8:	bf00      	nop
 80068da:	371c      	adds	r7, #28
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f003 031f 	and.w	r3, r3, #31
 80068f6:	2201      	movs	r2, #1
 80068f8:	fa02 f303 	lsl.w	r3, r2, r3
 80068fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a1a      	ldr	r2, [r3, #32]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	43db      	mvns	r3, r3
 8006906:	401a      	ands	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a1a      	ldr	r2, [r3, #32]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f003 031f 	and.w	r3, r3, #31
 8006916:	6879      	ldr	r1, [r7, #4]
 8006918:	fa01 f303 	lsl.w	r3, r1, r3
 800691c:	431a      	orrs	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	621a      	str	r2, [r3, #32]
}
 8006922:	bf00      	nop
 8006924:	371c      	adds	r7, #28
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
	...

08006930 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a1c      	ldr	r2, [pc, #112]	; (80069ac <TIM_ResetCallback+0x7c>)
 800693c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a1b      	ldr	r2, [pc, #108]	; (80069b0 <TIM_ResetCallback+0x80>)
 8006944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a1a      	ldr	r2, [pc, #104]	; (80069b4 <TIM_ResetCallback+0x84>)
 800694c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a19      	ldr	r2, [pc, #100]	; (80069b8 <TIM_ResetCallback+0x88>)
 8006954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a18      	ldr	r2, [pc, #96]	; (80069bc <TIM_ResetCallback+0x8c>)
 800695c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a17      	ldr	r2, [pc, #92]	; (80069c0 <TIM_ResetCallback+0x90>)
 8006964:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a16      	ldr	r2, [pc, #88]	; (80069c4 <TIM_ResetCallback+0x94>)
 800696c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a15      	ldr	r2, [pc, #84]	; (80069c8 <TIM_ResetCallback+0x98>)
 8006974:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a14      	ldr	r2, [pc, #80]	; (80069cc <TIM_ResetCallback+0x9c>)
 800697c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a13      	ldr	r2, [pc, #76]	; (80069d0 <TIM_ResetCallback+0xa0>)
 8006984:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a12      	ldr	r2, [pc, #72]	; (80069d4 <TIM_ResetCallback+0xa4>)
 800698c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a11      	ldr	r2, [pc, #68]	; (80069d8 <TIM_ResetCallback+0xa8>)
 8006994:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a10      	ldr	r2, [pc, #64]	; (80069dc <TIM_ResetCallback+0xac>)
 800699c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	0800603b 	.word	0x0800603b
 80069b0:	0800604f 	.word	0x0800604f
 80069b4:	080060c7 	.word	0x080060c7
 80069b8:	080060db 	.word	0x080060db
 80069bc:	08006077 	.word	0x08006077
 80069c0:	0800608b 	.word	0x0800608b
 80069c4:	08006063 	.word	0x08006063
 80069c8:	0800609f 	.word	0x0800609f
 80069cc:	080060b3 	.word	0x080060b3
 80069d0:	080060ef 	.word	0x080060ef
 80069d4:	08006b61 	.word	0x08006b61
 80069d8:	08006b75 	.word	0x08006b75
 80069dc:	08006b89 	.word	0x08006b89

080069e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e050      	b.n	8006a9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a1c      	ldr	r2, [pc, #112]	; (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d018      	beq.n	8006a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a44:	d013      	beq.n	8006a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a18      	ldr	r2, [pc, #96]	; (8006aac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00e      	beq.n	8006a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a16      	ldr	r2, [pc, #88]	; (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d009      	beq.n	8006a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d004      	beq.n	8006a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a13      	ldr	r2, [pc, #76]	; (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d10c      	bne.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40000400 	.word	0x40000400
 8006ab0:	40000800 	.word	0x40000800
 8006ab4:	40000c00 	.word	0x40000c00
 8006ab8:	40014000 	.word	0x40014000

08006abc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d101      	bne.n	8006ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e03d      	b.n	8006b54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e04a      	b.n	8006c44 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d111      	bne.n	8006bde <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fd2c 	bl	8007620 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d102      	bne.n	8006bd6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a1e      	ldr	r2, [pc, #120]	; (8006c4c <HAL_UART_Init+0xb0>)
 8006bd4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2224      	movs	r2, #36	; 0x24
 8006be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bf4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fff6 	bl	8007be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	691a      	ldr	r2, [r3, #16]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695a      	ldr	r2, [r3, #20]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c1a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c2a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	0800301d 	.word	0x0800301d

08006c50 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d107      	bne.n	8006c78 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6c:	f043 0220 	orr.w	r2, r3, #32
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e08c      	b.n	8006d92 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d101      	bne.n	8006c86 <HAL_UART_RegisterCallback+0x36>
 8006c82:	2302      	movs	r3, #2
 8006c84:	e085      	b.n	8006d92 <HAL_UART_RegisterCallback+0x142>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b20      	cmp	r3, #32
 8006c98:	d151      	bne.n	8006d3e <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8006c9a:	7afb      	ldrb	r3, [r7, #11]
 8006c9c:	2b0c      	cmp	r3, #12
 8006c9e:	d845      	bhi.n	8006d2c <HAL_UART_RegisterCallback+0xdc>
 8006ca0:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <HAL_UART_RegisterCallback+0x58>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006cdd 	.word	0x08006cdd
 8006cac:	08006ce5 	.word	0x08006ce5
 8006cb0:	08006ced 	.word	0x08006ced
 8006cb4:	08006cf5 	.word	0x08006cf5
 8006cb8:	08006cfd 	.word	0x08006cfd
 8006cbc:	08006d05 	.word	0x08006d05
 8006cc0:	08006d0d 	.word	0x08006d0d
 8006cc4:	08006d15 	.word	0x08006d15
 8006cc8:	08006d2d 	.word	0x08006d2d
 8006ccc:	08006d2d 	.word	0x08006d2d
 8006cd0:	08006d2d 	.word	0x08006d2d
 8006cd4:	08006d1d 	.word	0x08006d1d
 8006cd8:	08006d25 	.word	0x08006d25
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8006ce2:	e051      	b.n	8006d88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006cea:	e04d      	b.n	8006d88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006cf2:	e049      	b.n	8006d88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006cfa:	e045      	b.n	8006d88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006d02:	e041      	b.n	8006d88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006d0a:	e03d      	b.n	8006d88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006d12:	e039      	b.n	8006d88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006d1a:	e035      	b.n	8006d88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006d22:	e031      	b.n	8006d88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006d2a:	e02d      	b.n	8006d88 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	f043 0220 	orr.w	r2, r3, #32
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	75fb      	strb	r3, [r7, #23]
        break;
 8006d3c:	e024      	b.n	8006d88 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d116      	bne.n	8006d78 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8006d4a:	7afb      	ldrb	r3, [r7, #11]
 8006d4c:	2b0b      	cmp	r3, #11
 8006d4e:	d002      	beq.n	8006d56 <HAL_UART_RegisterCallback+0x106>
 8006d50:	2b0c      	cmp	r3, #12
 8006d52:	d004      	beq.n	8006d5e <HAL_UART_RegisterCallback+0x10e>
 8006d54:	e007      	b.n	8006d66 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006d5c:	e014      	b.n	8006d88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006d64:	e010      	b.n	8006d88 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	f043 0220 	orr.w	r2, r3, #32
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	75fb      	strb	r3, [r7, #23]
        break;
 8006d76:	e007      	b.n	8006d88 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7c:	f043 0220 	orr.w	r2, r3, #32
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop

08006da0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	4613      	mov	r3, r2
 8006dac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d11d      	bne.n	8006df6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_UART_Receive_IT+0x26>
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e016      	b.n	8006df8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <HAL_UART_Receive_IT+0x38>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e00f      	b.n	8006df8 <HAL_UART_Receive_IT+0x58>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	461a      	mov	r2, r3
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 fcf7 	bl	80077e0 <UART_Start_Receive_IT>
 8006df2:	4603      	mov	r3, r0
 8006df4:	e000      	b.n	8006df8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006df6:	2302      	movs	r3, #2
  }
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08c      	sub	sp, #48	; 0x30
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	d165      	bne.n	8006ee6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <HAL_UART_Transmit_DMA+0x26>
 8006e20:	88fb      	ldrh	r3, [r7, #6]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e05e      	b.n	8006ee8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_UART_Transmit_DMA+0x38>
 8006e34:	2302      	movs	r3, #2
 8006e36:	e057      	b.n	8006ee8 <HAL_UART_Transmit_DMA+0xe8>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	88fa      	ldrh	r2, [r7, #6]
 8006e4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	88fa      	ldrh	r2, [r7, #6]
 8006e50:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2221      	movs	r2, #33	; 0x21
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e64:	4a22      	ldr	r2, [pc, #136]	; (8006ef0 <HAL_UART_Transmit_DMA+0xf0>)
 8006e66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6c:	4a21      	ldr	r2, [pc, #132]	; (8006ef4 <HAL_UART_Transmit_DMA+0xf4>)
 8006e6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e74:	4a20      	ldr	r2, [pc, #128]	; (8006ef8 <HAL_UART_Transmit_DMA+0xf8>)
 8006e76:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006e80:	f107 0308 	add.w	r3, r7, #8
 8006e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8c:	6819      	ldr	r1, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3304      	adds	r3, #4
 8006e94:	461a      	mov	r2, r3
 8006e96:	88fb      	ldrh	r3, [r7, #6]
 8006e98:	f7fc fe44 	bl	8003b24 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ea4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3314      	adds	r3, #20
 8006eb4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3314      	adds	r3, #20
 8006ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ece:	627a      	str	r2, [r7, #36]	; 0x24
 8006ed0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed2:	6a39      	ldr	r1, [r7, #32]
 8006ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e5      	bne.n	8006eae <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e000      	b.n	8006ee8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006ee6:	2302      	movs	r3, #2
  }
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3730      	adds	r7, #48	; 0x30
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	08007691 	.word	0x08007691
 8006ef4:	0800772d 	.word	0x0800772d
 8006ef8:	0800774b 	.word	0x0800774b

08006efc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b09a      	sub	sp, #104	; 0x68
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	330c      	adds	r3, #12
 8006f0a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f1a:	667b      	str	r3, [r7, #100]	; 0x64
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	330c      	adds	r3, #12
 8006f22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f24:	657a      	str	r2, [r7, #84]	; 0x54
 8006f26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f2c:	e841 2300 	strex	r3, r2, [r1]
 8006f30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e5      	bne.n	8006f04 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3314      	adds	r3, #20
 8006f3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4a:	f023 0301 	bic.w	r3, r3, #1
 8006f4e:	663b      	str	r3, [r7, #96]	; 0x60
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3314      	adds	r3, #20
 8006f56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f58:	643a      	str	r2, [r7, #64]	; 0x40
 8006f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e5      	bne.n	8006f38 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d119      	bne.n	8006fa8 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	f023 0310 	bic.w	r3, r3, #16
 8006f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	330c      	adds	r3, #12
 8006f92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e5      	bne.n	8006f74 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb2:	2b40      	cmp	r3, #64	; 0x40
 8006fb4:	d136      	bne.n	8007024 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3314      	adds	r3, #20
 8006fbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3314      	adds	r3, #20
 8006fd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fd6:	61ba      	str	r2, [r7, #24]
 8006fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	6979      	ldr	r1, [r7, #20]
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e5      	bne.n	8006fb6 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d018      	beq.n	8007024 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fc fde8 	bl	8003bd4 <HAL_DMA_Abort>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00c      	beq.n	8007024 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	4618      	mov	r0, r3
 8007010:	f7fc fffc 	bl	800400c <HAL_DMA_GetError>
 8007014:	4603      	mov	r3, r0
 8007016:	2b20      	cmp	r3, #32
 8007018:	d104      	bne.n	8007024 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2210      	movs	r2, #16
 800701e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e00a      	b.n	800703a <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2220      	movs	r2, #32
 800702e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3768      	adds	r7, #104	; 0x68
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b0ba      	sub	sp, #232	; 0xe8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800706a:	2300      	movs	r3, #0
 800706c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007070:	2300      	movs	r3, #0
 8007072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10f      	bne.n	80070aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800708a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	2b00      	cmp	r3, #0
 8007094:	d009      	beq.n	80070aa <HAL_UART_IRQHandler+0x66>
 8007096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fce3 	bl	8007a6e <UART_Receive_IT>
      return;
 80070a8:	e25b      	b.n	8007562 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 80e1 	beq.w	8007276 <HAL_UART_IRQHandler+0x232>
 80070b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d106      	bne.n	80070ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 80d4 	beq.w	8007276 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00b      	beq.n	80070f2 <HAL_UART_IRQHandler+0xae>
 80070da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d005      	beq.n	80070f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	f043 0201 	orr.w	r2, r3, #1
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f6:	f003 0304 	and.w	r3, r3, #4
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00b      	beq.n	8007116 <HAL_UART_IRQHandler+0xd2>
 80070fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d005      	beq.n	8007116 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	f043 0202 	orr.w	r2, r3, #2
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00b      	beq.n	800713a <HAL_UART_IRQHandler+0xf6>
 8007122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	f043 0204 	orr.w	r2, r3, #4
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800713a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800713e:	f003 0308 	and.w	r3, r3, #8
 8007142:	2b00      	cmp	r3, #0
 8007144:	d011      	beq.n	800716a <HAL_UART_IRQHandler+0x126>
 8007146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b00      	cmp	r3, #0
 8007150:	d105      	bne.n	800715e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	f043 0208 	orr.w	r2, r3, #8
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 81f2 	beq.w	8007558 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007178:	f003 0320 	and.w	r3, r3, #32
 800717c:	2b00      	cmp	r3, #0
 800717e:	d008      	beq.n	8007192 <HAL_UART_IRQHandler+0x14e>
 8007180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007184:	f003 0320 	and.w	r3, r3, #32
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fc6e 	bl	8007a6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719c:	2b40      	cmp	r3, #64	; 0x40
 800719e:	bf0c      	ite	eq
 80071a0:	2301      	moveq	r3, #1
 80071a2:	2300      	movne	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	f003 0308 	and.w	r3, r3, #8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d103      	bne.n	80071be <HAL_UART_IRQHandler+0x17a>
 80071b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d051      	beq.n	8007262 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fb74 	bl	80078ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ce:	2b40      	cmp	r3, #64	; 0x40
 80071d0:	d142      	bne.n	8007258 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3314      	adds	r3, #20
 80071d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3314      	adds	r3, #20
 80071fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80071fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800720a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1d9      	bne.n	80071d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007222:	2b00      	cmp	r3, #0
 8007224:	d013      	beq.n	800724e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	4a7f      	ldr	r2, [pc, #508]	; (8007428 <HAL_UART_IRQHandler+0x3e4>)
 800722c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	4618      	mov	r0, r3
 8007234:	f7fc fd3e 	bl	8003cb4 <HAL_DMA_Abort_IT>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d019      	beq.n	8007272 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007248:	4610      	mov	r0, r2
 800724a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724c:	e011      	b.n	8007272 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007256:	e00c      	b.n	8007272 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007260:	e007      	b.n	8007272 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007270:	e172      	b.n	8007558 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007272:	bf00      	nop
    return;
 8007274:	e170      	b.n	8007558 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727a:	2b01      	cmp	r3, #1
 800727c:	f040 814c 	bne.w	8007518 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007284:	f003 0310 	and.w	r3, r3, #16
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 8145 	beq.w	8007518 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800728e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007292:	f003 0310 	and.w	r3, r3, #16
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 813e 	beq.w	8007518 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800729c:	2300      	movs	r3, #0
 800729e:	60bb      	str	r3, [r7, #8]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60bb      	str	r3, [r7, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	60bb      	str	r3, [r7, #8]
 80072b0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072bc:	2b40      	cmp	r3, #64	; 0x40
 80072be:	f040 80b5 	bne.w	800742c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f000 8142 	beq.w	800755c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072e0:	429a      	cmp	r2, r3
 80072e2:	f080 813b 	bcs.w	800755c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072ec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f8:	f000 8088 	beq.w	800740c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	330c      	adds	r3, #12
 8007302:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007306:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007312:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800731a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	330c      	adds	r3, #12
 8007324:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007328:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800732c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007334:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007338:	e841 2300 	strex	r3, r2, [r1]
 800733c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1d9      	bne.n	80072fc <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3314      	adds	r3, #20
 800734e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007352:	e853 3f00 	ldrex	r3, [r3]
 8007356:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007358:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800735a:	f023 0301 	bic.w	r3, r3, #1
 800735e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3314      	adds	r3, #20
 8007368:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800736c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007370:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007374:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800737e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e1      	bne.n	8007348 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3314      	adds	r3, #20
 800738a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800738e:	e853 3f00 	ldrex	r3, [r3]
 8007392:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800739a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3314      	adds	r3, #20
 80073a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073b0:	e841 2300 	strex	r3, r2, [r1]
 80073b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e3      	bne.n	8007384 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2220      	movs	r2, #32
 80073c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	330c      	adds	r3, #12
 80073d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073dc:	f023 0310 	bic.w	r3, r3, #16
 80073e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	330c      	adds	r3, #12
 80073ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80073ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80073f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e3      	bne.n	80073ca <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	4618      	mov	r0, r3
 8007408:	f7fc fbe4 	bl	8003bd4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007418:	b292      	uxth	r2, r2
 800741a:	1a8a      	subs	r2, r1, r2
 800741c:	b292      	uxth	r2, r2
 800741e:	4611      	mov	r1, r2
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007424:	e09a      	b.n	800755c <HAL_UART_IRQHandler+0x518>
 8007426:	bf00      	nop
 8007428:	08007973 	.word	0x08007973
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007434:	b29b      	uxth	r3, r3
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 808c 	beq.w	8007560 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007448:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8087 	beq.w	8007560 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	330c      	adds	r3, #12
 8007458:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007464:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007468:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	330c      	adds	r3, #12
 8007472:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007476:	647a      	str	r2, [r7, #68]	; 0x44
 8007478:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800747c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e3      	bne.n	8007452 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3314      	adds	r3, #20
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	623b      	str	r3, [r7, #32]
   return(result);
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	f023 0301 	bic.w	r3, r3, #1
 80074a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3314      	adds	r3, #20
 80074aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074ae:	633a      	str	r2, [r7, #48]	; 0x30
 80074b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e3      	bne.n	800748a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	330c      	adds	r3, #12
 80074d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	60fb      	str	r3, [r7, #12]
   return(result);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0310 	bic.w	r3, r3, #16
 80074e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	330c      	adds	r3, #12
 80074f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80074f4:	61fa      	str	r2, [r7, #28]
 80074f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	69b9      	ldr	r1, [r7, #24]
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	617b      	str	r3, [r7, #20]
   return(result);
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e3      	bne.n	80074d0 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800750c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8007510:	4611      	mov	r1, r2
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007516:	e023      	b.n	8007560 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800751c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007520:	2b00      	cmp	r3, #0
 8007522:	d009      	beq.n	8007538 <HAL_UART_IRQHandler+0x4f4>
 8007524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fa33 	bl	800799c <UART_Transmit_IT>
    return;
 8007536:	e014      	b.n	8007562 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800753c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00e      	beq.n	8007562 <HAL_UART_IRQHandler+0x51e>
 8007544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754c:	2b00      	cmp	r3, #0
 800754e:	d008      	beq.n	8007562 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fa73 	bl	8007a3c <UART_EndTransmit_IT>
    return;
 8007556:	e004      	b.n	8007562 <HAL_UART_IRQHandler+0x51e>
    return;
 8007558:	bf00      	nop
 800755a:	e002      	b.n	8007562 <HAL_UART_IRQHandler+0x51e>
      return;
 800755c:	bf00      	nop
 800755e:	e000      	b.n	8007562 <HAL_UART_IRQHandler+0x51e>
      return;
 8007560:	bf00      	nop
  }
}
 8007562:	37e8      	adds	r7, #232	; 0xe8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a10      	ldr	r2, [pc, #64]	; (800766c <UART_InitCallbacksToDefault+0x4c>)
 800762c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a0f      	ldr	r2, [pc, #60]	; (8007670 <UART_InitCallbacksToDefault+0x50>)
 8007632:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a0f      	ldr	r2, [pc, #60]	; (8007674 <UART_InitCallbacksToDefault+0x54>)
 8007638:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a0e      	ldr	r2, [pc, #56]	; (8007678 <UART_InitCallbacksToDefault+0x58>)
 800763e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a0e      	ldr	r2, [pc, #56]	; (800767c <UART_InitCallbacksToDefault+0x5c>)
 8007644:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a0d      	ldr	r2, [pc, #52]	; (8007680 <UART_InitCallbacksToDefault+0x60>)
 800764a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a0d      	ldr	r2, [pc, #52]	; (8007684 <UART_InitCallbacksToDefault+0x64>)
 8007650:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a0c      	ldr	r2, [pc, #48]	; (8007688 <UART_InitCallbacksToDefault+0x68>)
 8007656:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a0c      	ldr	r2, [pc, #48]	; (800768c <UART_InitCallbacksToDefault+0x6c>)
 800765c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	0800757d 	.word	0x0800757d
 8007670:	08007569 	.word	0x08007569
 8007674:	080075a5 	.word	0x080075a5
 8007678:	08007591 	.word	0x08007591
 800767c:	080075b9 	.word	0x080075b9
 8007680:	080075cd 	.word	0x080075cd
 8007684:	080075e1 	.word	0x080075e1
 8007688:	080075f5 	.word	0x080075f5
 800768c:	08007609 	.word	0x08007609

08007690 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b090      	sub	sp, #64	; 0x40
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d137      	bne.n	800771c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80076ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ae:	2200      	movs	r2, #0
 80076b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3314      	adds	r3, #20
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	623b      	str	r3, [r7, #32]
   return(result);
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80076ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3314      	adds	r3, #20
 80076d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076d2:	633a      	str	r2, [r7, #48]	; 0x30
 80076d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e5      	bne.n	80076b2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	330c      	adds	r3, #12
 80076ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076fc:	637b      	str	r3, [r7, #52]	; 0x34
 80076fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	330c      	adds	r3, #12
 8007704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007706:	61fa      	str	r2, [r7, #28]
 8007708:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	69b9      	ldr	r1, [r7, #24]
 800770c:	69fa      	ldr	r2, [r7, #28]
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	617b      	str	r3, [r7, #20]
   return(result);
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e5      	bne.n	80076e6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800771a:	e003      	b.n	8007724 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800771c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800771e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007720:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007722:	4798      	blx	r3
}
 8007724:	bf00      	nop
 8007726:	3740      	adds	r7, #64	; 0x40
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007742:	bf00      	nop
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007766:	2b80      	cmp	r3, #128	; 0x80
 8007768:	bf0c      	ite	eq
 800776a:	2301      	moveq	r3, #1
 800776c:	2300      	movne	r3, #0
 800776e:	b2db      	uxtb	r3, r3
 8007770:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b21      	cmp	r3, #33	; 0x21
 800777c:	d108      	bne.n	8007790 <UART_DMAError+0x46>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2200      	movs	r2, #0
 8007788:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800778a:	68b8      	ldr	r0, [r7, #8]
 800778c:	f000 f866 	bl	800785c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779a:	2b40      	cmp	r3, #64	; 0x40
 800779c:	bf0c      	ite	eq
 800779e:	2301      	moveq	r3, #1
 80077a0:	2300      	movne	r3, #0
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b22      	cmp	r3, #34	; 0x22
 80077b0:	d108      	bne.n	80077c4 <UART_DMAError+0x7a>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d005      	beq.n	80077c4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2200      	movs	r2, #0
 80077bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80077be:	68b8      	ldr	r0, [r7, #8]
 80077c0:	f000 f874 	bl	80078ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c8:	f043 0210 	orr.w	r2, r3, #16
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d4:	68b8      	ldr	r0, [r7, #8]
 80077d6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077d8:	bf00      	nop
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	4613      	mov	r3, r2
 80077ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	88fa      	ldrh	r2, [r7, #6]
 80077f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	88fa      	ldrh	r2, [r7, #6]
 80077fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2222      	movs	r2, #34	; 0x22
 800780a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d007      	beq.n	800782e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68da      	ldr	r2, [r3, #12]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800782c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	695a      	ldr	r2, [r3, #20]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f042 0201 	orr.w	r2, r2, #1
 800783c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68da      	ldr	r2, [r3, #12]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f042 0220 	orr.w	r2, r2, #32
 800784c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800785c:	b480      	push	{r7}
 800785e:	b089      	sub	sp, #36	; 0x24
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	330c      	adds	r3, #12
 800786a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	e853 3f00 	ldrex	r3, [r3]
 8007872:	60bb      	str	r3, [r7, #8]
   return(result);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800787a:	61fb      	str	r3, [r7, #28]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	330c      	adds	r3, #12
 8007882:	69fa      	ldr	r2, [r7, #28]
 8007884:	61ba      	str	r2, [r7, #24]
 8007886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	6979      	ldr	r1, [r7, #20]
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	e841 2300 	strex	r3, r2, [r1]
 8007890:	613b      	str	r3, [r7, #16]
   return(result);
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e5      	bne.n	8007864 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80078a0:	bf00      	nop
 80078a2:	3724      	adds	r7, #36	; 0x24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b095      	sub	sp, #84	; 0x54
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	330c      	adds	r3, #12
 80078ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	330c      	adds	r3, #12
 80078d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078d4:	643a      	str	r2, [r7, #64]	; 0x40
 80078d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078dc:	e841 2300 	strex	r3, r2, [r1]
 80078e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e5      	bne.n	80078b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3314      	adds	r3, #20
 80078ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	e853 3f00 	ldrex	r3, [r3]
 80078f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	f023 0301 	bic.w	r3, r3, #1
 80078fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3314      	adds	r3, #20
 8007906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007908:	62fa      	str	r2, [r7, #44]	; 0x2c
 800790a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800790e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007910:	e841 2300 	strex	r3, r2, [r1]
 8007914:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1e5      	bne.n	80078e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007920:	2b01      	cmp	r3, #1
 8007922:	d119      	bne.n	8007958 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	330c      	adds	r3, #12
 800792a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	60bb      	str	r3, [r7, #8]
   return(result);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f023 0310 	bic.w	r3, r3, #16
 800793a:	647b      	str	r3, [r7, #68]	; 0x44
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	330c      	adds	r3, #12
 8007942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007944:	61ba      	str	r2, [r7, #24]
 8007946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	6979      	ldr	r1, [r7, #20]
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	613b      	str	r3, [r7, #16]
   return(result);
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e5      	bne.n	8007924 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2220      	movs	r2, #32
 800795c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007966:	bf00      	nop
 8007968:	3754      	adds	r7, #84	; 0x54
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007994:	bf00      	nop
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b21      	cmp	r3, #33	; 0x21
 80079ae:	d13e      	bne.n	8007a2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b8:	d114      	bne.n	80079e4 <UART_Transmit_IT+0x48>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d110      	bne.n	80079e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	461a      	mov	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	1c9a      	adds	r2, r3, #2
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	621a      	str	r2, [r3, #32]
 80079e2:	e008      	b.n	80079f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	1c59      	adds	r1, r3, #1
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	6211      	str	r1, [r2, #32]
 80079ee:	781a      	ldrb	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	3b01      	subs	r3, #1
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	4619      	mov	r1, r3
 8007a04:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10f      	bne.n	8007a2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68da      	ldr	r2, [r3, #12]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e000      	b.n	8007a30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a2e:	2302      	movs	r3, #2
  }
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68da      	ldr	r2, [r3, #12]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2220      	movs	r2, #32
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b08c      	sub	sp, #48	; 0x30
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b22      	cmp	r3, #34	; 0x22
 8007a80:	f040 80ad 	bne.w	8007bde <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8c:	d117      	bne.n	8007abe <UART_Receive_IT+0x50>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d113      	bne.n	8007abe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a96:	2300      	movs	r3, #0
 8007a98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab6:	1c9a      	adds	r2, r3, #2
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	629a      	str	r2, [r3, #40]	; 0x28
 8007abc:	e026      	b.n	8007b0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad0:	d007      	beq.n	8007ae2 <UART_Receive_IT+0x74>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <UART_Receive_IT+0x82>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d106      	bne.n	8007af0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	e008      	b.n	8007b02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	3b01      	subs	r3, #1
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d15c      	bne.n	8007bda <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f022 0220 	bic.w	r2, r2, #32
 8007b2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695a      	ldr	r2, [r3, #20]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0201 	bic.w	r2, r2, #1
 8007b4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d136      	bne.n	8007bce <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	330c      	adds	r3, #12
 8007b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	613b      	str	r3, [r7, #16]
   return(result);
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f023 0310 	bic.w	r3, r3, #16
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	330c      	adds	r3, #12
 8007b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b86:	623a      	str	r2, [r7, #32]
 8007b88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	69f9      	ldr	r1, [r7, #28]
 8007b8c:	6a3a      	ldr	r2, [r7, #32]
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e5      	bne.n	8007b66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0310 	and.w	r3, r3, #16
 8007ba4:	2b10      	cmp	r3, #16
 8007ba6:	d10a      	bne.n	8007bbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	4798      	blx	r3
 8007bcc:	e003      	b.n	8007bd6 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	e002      	b.n	8007be0 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	e000      	b.n	8007be0 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8007bde:	2302      	movs	r3, #2
  }
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3730      	adds	r7, #48	; 0x30
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bec:	b0c0      	sub	sp, #256	; 0x100
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c04:	68d9      	ldr	r1, [r3, #12]
 8007c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	ea40 0301 	orr.w	r3, r0, r1
 8007c10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c16:	689a      	ldr	r2, [r3, #8]
 8007c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	431a      	orrs	r2, r3
 8007c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c40:	f021 010c 	bic.w	r1, r1, #12
 8007c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c4e:	430b      	orrs	r3, r1
 8007c50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c62:	6999      	ldr	r1, [r3, #24]
 8007c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	ea40 0301 	orr.w	r3, r0, r1
 8007c6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	4b8f      	ldr	r3, [pc, #572]	; (8007eb4 <UART_SetConfig+0x2cc>)
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d005      	beq.n	8007c88 <UART_SetConfig+0xa0>
 8007c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	4b8d      	ldr	r3, [pc, #564]	; (8007eb8 <UART_SetConfig+0x2d0>)
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d104      	bne.n	8007c92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c88:	f7fd fa12 	bl	80050b0 <HAL_RCC_GetPCLK2Freq>
 8007c8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c90:	e003      	b.n	8007c9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c92:	f7fd f9f9 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8007c96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c9e:	69db      	ldr	r3, [r3, #28]
 8007ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ca4:	f040 810c 	bne.w	8007ec0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cac:	2200      	movs	r2, #0
 8007cae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007cb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007cba:	4622      	mov	r2, r4
 8007cbc:	462b      	mov	r3, r5
 8007cbe:	1891      	adds	r1, r2, r2
 8007cc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8007cc2:	415b      	adcs	r3, r3
 8007cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007cca:	4621      	mov	r1, r4
 8007ccc:	eb12 0801 	adds.w	r8, r2, r1
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	eb43 0901 	adc.w	r9, r3, r1
 8007cd6:	f04f 0200 	mov.w	r2, #0
 8007cda:	f04f 0300 	mov.w	r3, #0
 8007cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007cea:	4690      	mov	r8, r2
 8007cec:	4699      	mov	r9, r3
 8007cee:	4623      	mov	r3, r4
 8007cf0:	eb18 0303 	adds.w	r3, r8, r3
 8007cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007cf8:	462b      	mov	r3, r5
 8007cfa:	eb49 0303 	adc.w	r3, r9, r3
 8007cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d16:	460b      	mov	r3, r1
 8007d18:	18db      	adds	r3, r3, r3
 8007d1a:	653b      	str	r3, [r7, #80]	; 0x50
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	eb42 0303 	adc.w	r3, r2, r3
 8007d22:	657b      	str	r3, [r7, #84]	; 0x54
 8007d24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d2c:	f7f8 ffb4 	bl	8000c98 <__aeabi_uldivmod>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	4b61      	ldr	r3, [pc, #388]	; (8007ebc <UART_SetConfig+0x2d4>)
 8007d36:	fba3 2302 	umull	r2, r3, r3, r2
 8007d3a:	095b      	lsrs	r3, r3, #5
 8007d3c:	011c      	lsls	r4, r3, #4
 8007d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d42:	2200      	movs	r2, #0
 8007d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007d4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007d50:	4642      	mov	r2, r8
 8007d52:	464b      	mov	r3, r9
 8007d54:	1891      	adds	r1, r2, r2
 8007d56:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d58:	415b      	adcs	r3, r3
 8007d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d60:	4641      	mov	r1, r8
 8007d62:	eb12 0a01 	adds.w	sl, r2, r1
 8007d66:	4649      	mov	r1, r9
 8007d68:	eb43 0b01 	adc.w	fp, r3, r1
 8007d6c:	f04f 0200 	mov.w	r2, #0
 8007d70:	f04f 0300 	mov.w	r3, #0
 8007d74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d80:	4692      	mov	sl, r2
 8007d82:	469b      	mov	fp, r3
 8007d84:	4643      	mov	r3, r8
 8007d86:	eb1a 0303 	adds.w	r3, sl, r3
 8007d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d8e:	464b      	mov	r3, r9
 8007d90:	eb4b 0303 	adc.w	r3, fp, r3
 8007d94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007da4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007da8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007dac:	460b      	mov	r3, r1
 8007dae:	18db      	adds	r3, r3, r3
 8007db0:	643b      	str	r3, [r7, #64]	; 0x40
 8007db2:	4613      	mov	r3, r2
 8007db4:	eb42 0303 	adc.w	r3, r2, r3
 8007db8:	647b      	str	r3, [r7, #68]	; 0x44
 8007dba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007dbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007dc2:	f7f8 ff69 	bl	8000c98 <__aeabi_uldivmod>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	4611      	mov	r1, r2
 8007dcc:	4b3b      	ldr	r3, [pc, #236]	; (8007ebc <UART_SetConfig+0x2d4>)
 8007dce:	fba3 2301 	umull	r2, r3, r3, r1
 8007dd2:	095b      	lsrs	r3, r3, #5
 8007dd4:	2264      	movs	r2, #100	; 0x64
 8007dd6:	fb02 f303 	mul.w	r3, r2, r3
 8007dda:	1acb      	subs	r3, r1, r3
 8007ddc:	00db      	lsls	r3, r3, #3
 8007dde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007de2:	4b36      	ldr	r3, [pc, #216]	; (8007ebc <UART_SetConfig+0x2d4>)
 8007de4:	fba3 2302 	umull	r2, r3, r3, r2
 8007de8:	095b      	lsrs	r3, r3, #5
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007df0:	441c      	add	r4, r3
 8007df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dfc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e04:	4642      	mov	r2, r8
 8007e06:	464b      	mov	r3, r9
 8007e08:	1891      	adds	r1, r2, r2
 8007e0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e0c:	415b      	adcs	r3, r3
 8007e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e14:	4641      	mov	r1, r8
 8007e16:	1851      	adds	r1, r2, r1
 8007e18:	6339      	str	r1, [r7, #48]	; 0x30
 8007e1a:	4649      	mov	r1, r9
 8007e1c:	414b      	adcs	r3, r1
 8007e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e20:	f04f 0200 	mov.w	r2, #0
 8007e24:	f04f 0300 	mov.w	r3, #0
 8007e28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e2c:	4659      	mov	r1, fp
 8007e2e:	00cb      	lsls	r3, r1, #3
 8007e30:	4651      	mov	r1, sl
 8007e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e36:	4651      	mov	r1, sl
 8007e38:	00ca      	lsls	r2, r1, #3
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	4603      	mov	r3, r0
 8007e40:	4642      	mov	r2, r8
 8007e42:	189b      	adds	r3, r3, r2
 8007e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e48:	464b      	mov	r3, r9
 8007e4a:	460a      	mov	r2, r1
 8007e4c:	eb42 0303 	adc.w	r3, r2, r3
 8007e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e68:	460b      	mov	r3, r1
 8007e6a:	18db      	adds	r3, r3, r3
 8007e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e6e:	4613      	mov	r3, r2
 8007e70:	eb42 0303 	adc.w	r3, r2, r3
 8007e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e7e:	f7f8 ff0b 	bl	8000c98 <__aeabi_uldivmod>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	4b0d      	ldr	r3, [pc, #52]	; (8007ebc <UART_SetConfig+0x2d4>)
 8007e88:	fba3 1302 	umull	r1, r3, r3, r2
 8007e8c:	095b      	lsrs	r3, r3, #5
 8007e8e:	2164      	movs	r1, #100	; 0x64
 8007e90:	fb01 f303 	mul.w	r3, r1, r3
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	3332      	adds	r3, #50	; 0x32
 8007e9a:	4a08      	ldr	r2, [pc, #32]	; (8007ebc <UART_SetConfig+0x2d4>)
 8007e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea0:	095b      	lsrs	r3, r3, #5
 8007ea2:	f003 0207 	and.w	r2, r3, #7
 8007ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4422      	add	r2, r4
 8007eae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007eb0:	e105      	b.n	80080be <UART_SetConfig+0x4d6>
 8007eb2:	bf00      	nop
 8007eb4:	40011000 	.word	0x40011000
 8007eb8:	40011400 	.word	0x40011400
 8007ebc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007eca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007ece:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007ed2:	4642      	mov	r2, r8
 8007ed4:	464b      	mov	r3, r9
 8007ed6:	1891      	adds	r1, r2, r2
 8007ed8:	6239      	str	r1, [r7, #32]
 8007eda:	415b      	adcs	r3, r3
 8007edc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ede:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ee2:	4641      	mov	r1, r8
 8007ee4:	1854      	adds	r4, r2, r1
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	eb43 0501 	adc.w	r5, r3, r1
 8007eec:	f04f 0200 	mov.w	r2, #0
 8007ef0:	f04f 0300 	mov.w	r3, #0
 8007ef4:	00eb      	lsls	r3, r5, #3
 8007ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007efa:	00e2      	lsls	r2, r4, #3
 8007efc:	4614      	mov	r4, r2
 8007efe:	461d      	mov	r5, r3
 8007f00:	4643      	mov	r3, r8
 8007f02:	18e3      	adds	r3, r4, r3
 8007f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f08:	464b      	mov	r3, r9
 8007f0a:	eb45 0303 	adc.w	r3, r5, r3
 8007f0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f22:	f04f 0200 	mov.w	r2, #0
 8007f26:	f04f 0300 	mov.w	r3, #0
 8007f2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f2e:	4629      	mov	r1, r5
 8007f30:	008b      	lsls	r3, r1, #2
 8007f32:	4621      	mov	r1, r4
 8007f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f38:	4621      	mov	r1, r4
 8007f3a:	008a      	lsls	r2, r1, #2
 8007f3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f40:	f7f8 feaa 	bl	8000c98 <__aeabi_uldivmod>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4b60      	ldr	r3, [pc, #384]	; (80080cc <UART_SetConfig+0x4e4>)
 8007f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8007f4e:	095b      	lsrs	r3, r3, #5
 8007f50:	011c      	lsls	r4, r3, #4
 8007f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f64:	4642      	mov	r2, r8
 8007f66:	464b      	mov	r3, r9
 8007f68:	1891      	adds	r1, r2, r2
 8007f6a:	61b9      	str	r1, [r7, #24]
 8007f6c:	415b      	adcs	r3, r3
 8007f6e:	61fb      	str	r3, [r7, #28]
 8007f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f74:	4641      	mov	r1, r8
 8007f76:	1851      	adds	r1, r2, r1
 8007f78:	6139      	str	r1, [r7, #16]
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	414b      	adcs	r3, r1
 8007f7e:	617b      	str	r3, [r7, #20]
 8007f80:	f04f 0200 	mov.w	r2, #0
 8007f84:	f04f 0300 	mov.w	r3, #0
 8007f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f8c:	4659      	mov	r1, fp
 8007f8e:	00cb      	lsls	r3, r1, #3
 8007f90:	4651      	mov	r1, sl
 8007f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f96:	4651      	mov	r1, sl
 8007f98:	00ca      	lsls	r2, r1, #3
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	4642      	mov	r2, r8
 8007fa2:	189b      	adds	r3, r3, r2
 8007fa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fa8:	464b      	mov	r3, r9
 8007faa:	460a      	mov	r2, r1
 8007fac:	eb42 0303 	adc.w	r3, r2, r3
 8007fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007fc0:	f04f 0200 	mov.w	r2, #0
 8007fc4:	f04f 0300 	mov.w	r3, #0
 8007fc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007fcc:	4649      	mov	r1, r9
 8007fce:	008b      	lsls	r3, r1, #2
 8007fd0:	4641      	mov	r1, r8
 8007fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fd6:	4641      	mov	r1, r8
 8007fd8:	008a      	lsls	r2, r1, #2
 8007fda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007fde:	f7f8 fe5b 	bl	8000c98 <__aeabi_uldivmod>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	4b39      	ldr	r3, [pc, #228]	; (80080cc <UART_SetConfig+0x4e4>)
 8007fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8007fec:	095b      	lsrs	r3, r3, #5
 8007fee:	2164      	movs	r1, #100	; 0x64
 8007ff0:	fb01 f303 	mul.w	r3, r1, r3
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	011b      	lsls	r3, r3, #4
 8007ff8:	3332      	adds	r3, #50	; 0x32
 8007ffa:	4a34      	ldr	r2, [pc, #208]	; (80080cc <UART_SetConfig+0x4e4>)
 8007ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8008000:	095b      	lsrs	r3, r3, #5
 8008002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008006:	441c      	add	r4, r3
 8008008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800800c:	2200      	movs	r2, #0
 800800e:	673b      	str	r3, [r7, #112]	; 0x70
 8008010:	677a      	str	r2, [r7, #116]	; 0x74
 8008012:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008016:	4642      	mov	r2, r8
 8008018:	464b      	mov	r3, r9
 800801a:	1891      	adds	r1, r2, r2
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	415b      	adcs	r3, r3
 8008020:	60fb      	str	r3, [r7, #12]
 8008022:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008026:	4641      	mov	r1, r8
 8008028:	1851      	adds	r1, r2, r1
 800802a:	6039      	str	r1, [r7, #0]
 800802c:	4649      	mov	r1, r9
 800802e:	414b      	adcs	r3, r1
 8008030:	607b      	str	r3, [r7, #4]
 8008032:	f04f 0200 	mov.w	r2, #0
 8008036:	f04f 0300 	mov.w	r3, #0
 800803a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800803e:	4659      	mov	r1, fp
 8008040:	00cb      	lsls	r3, r1, #3
 8008042:	4651      	mov	r1, sl
 8008044:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008048:	4651      	mov	r1, sl
 800804a:	00ca      	lsls	r2, r1, #3
 800804c:	4610      	mov	r0, r2
 800804e:	4619      	mov	r1, r3
 8008050:	4603      	mov	r3, r0
 8008052:	4642      	mov	r2, r8
 8008054:	189b      	adds	r3, r3, r2
 8008056:	66bb      	str	r3, [r7, #104]	; 0x68
 8008058:	464b      	mov	r3, r9
 800805a:	460a      	mov	r2, r1
 800805c:	eb42 0303 	adc.w	r3, r2, r3
 8008060:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	663b      	str	r3, [r7, #96]	; 0x60
 800806c:	667a      	str	r2, [r7, #100]	; 0x64
 800806e:	f04f 0200 	mov.w	r2, #0
 8008072:	f04f 0300 	mov.w	r3, #0
 8008076:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800807a:	4649      	mov	r1, r9
 800807c:	008b      	lsls	r3, r1, #2
 800807e:	4641      	mov	r1, r8
 8008080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008084:	4641      	mov	r1, r8
 8008086:	008a      	lsls	r2, r1, #2
 8008088:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800808c:	f7f8 fe04 	bl	8000c98 <__aeabi_uldivmod>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	4b0d      	ldr	r3, [pc, #52]	; (80080cc <UART_SetConfig+0x4e4>)
 8008096:	fba3 1302 	umull	r1, r3, r3, r2
 800809a:	095b      	lsrs	r3, r3, #5
 800809c:	2164      	movs	r1, #100	; 0x64
 800809e:	fb01 f303 	mul.w	r3, r1, r3
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	011b      	lsls	r3, r3, #4
 80080a6:	3332      	adds	r3, #50	; 0x32
 80080a8:	4a08      	ldr	r2, [pc, #32]	; (80080cc <UART_SetConfig+0x4e4>)
 80080aa:	fba2 2303 	umull	r2, r3, r2, r3
 80080ae:	095b      	lsrs	r3, r3, #5
 80080b0:	f003 020f 	and.w	r2, r3, #15
 80080b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4422      	add	r2, r4
 80080bc:	609a      	str	r2, [r3, #8]
}
 80080be:	bf00      	nop
 80080c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80080c4:	46bd      	mov	sp, r7
 80080c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080ca:	bf00      	nop
 80080cc:	51eb851f 	.word	0x51eb851f

080080d0 <__errno>:
 80080d0:	4b01      	ldr	r3, [pc, #4]	; (80080d8 <__errno+0x8>)
 80080d2:	6818      	ldr	r0, [r3, #0]
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	2000020c 	.word	0x2000020c

080080dc <__libc_init_array>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	4d0d      	ldr	r5, [pc, #52]	; (8008114 <__libc_init_array+0x38>)
 80080e0:	4c0d      	ldr	r4, [pc, #52]	; (8008118 <__libc_init_array+0x3c>)
 80080e2:	1b64      	subs	r4, r4, r5
 80080e4:	10a4      	asrs	r4, r4, #2
 80080e6:	2600      	movs	r6, #0
 80080e8:	42a6      	cmp	r6, r4
 80080ea:	d109      	bne.n	8008100 <__libc_init_array+0x24>
 80080ec:	4d0b      	ldr	r5, [pc, #44]	; (800811c <__libc_init_array+0x40>)
 80080ee:	4c0c      	ldr	r4, [pc, #48]	; (8008120 <__libc_init_array+0x44>)
 80080f0:	f005 ffb0 	bl	800e054 <_init>
 80080f4:	1b64      	subs	r4, r4, r5
 80080f6:	10a4      	asrs	r4, r4, #2
 80080f8:	2600      	movs	r6, #0
 80080fa:	42a6      	cmp	r6, r4
 80080fc:	d105      	bne.n	800810a <__libc_init_array+0x2e>
 80080fe:	bd70      	pop	{r4, r5, r6, pc}
 8008100:	f855 3b04 	ldr.w	r3, [r5], #4
 8008104:	4798      	blx	r3
 8008106:	3601      	adds	r6, #1
 8008108:	e7ee      	b.n	80080e8 <__libc_init_array+0xc>
 800810a:	f855 3b04 	ldr.w	r3, [r5], #4
 800810e:	4798      	blx	r3
 8008110:	3601      	adds	r6, #1
 8008112:	e7f2      	b.n	80080fa <__libc_init_array+0x1e>
 8008114:	0800e770 	.word	0x0800e770
 8008118:	0800e770 	.word	0x0800e770
 800811c:	0800e770 	.word	0x0800e770
 8008120:	0800e774 	.word	0x0800e774

08008124 <memcpy>:
 8008124:	440a      	add	r2, r1
 8008126:	4291      	cmp	r1, r2
 8008128:	f100 33ff 	add.w	r3, r0, #4294967295
 800812c:	d100      	bne.n	8008130 <memcpy+0xc>
 800812e:	4770      	bx	lr
 8008130:	b510      	push	{r4, lr}
 8008132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800813a:	4291      	cmp	r1, r2
 800813c:	d1f9      	bne.n	8008132 <memcpy+0xe>
 800813e:	bd10      	pop	{r4, pc}

08008140 <memset>:
 8008140:	4402      	add	r2, r0
 8008142:	4603      	mov	r3, r0
 8008144:	4293      	cmp	r3, r2
 8008146:	d100      	bne.n	800814a <memset+0xa>
 8008148:	4770      	bx	lr
 800814a:	f803 1b01 	strb.w	r1, [r3], #1
 800814e:	e7f9      	b.n	8008144 <memset+0x4>

08008150 <__cvt>:
 8008150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008154:	ec55 4b10 	vmov	r4, r5, d0
 8008158:	2d00      	cmp	r5, #0
 800815a:	460e      	mov	r6, r1
 800815c:	4619      	mov	r1, r3
 800815e:	462b      	mov	r3, r5
 8008160:	bfbb      	ittet	lt
 8008162:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008166:	461d      	movlt	r5, r3
 8008168:	2300      	movge	r3, #0
 800816a:	232d      	movlt	r3, #45	; 0x2d
 800816c:	700b      	strb	r3, [r1, #0]
 800816e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008170:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008174:	4691      	mov	r9, r2
 8008176:	f023 0820 	bic.w	r8, r3, #32
 800817a:	bfbc      	itt	lt
 800817c:	4622      	movlt	r2, r4
 800817e:	4614      	movlt	r4, r2
 8008180:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008184:	d005      	beq.n	8008192 <__cvt+0x42>
 8008186:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800818a:	d100      	bne.n	800818e <__cvt+0x3e>
 800818c:	3601      	adds	r6, #1
 800818e:	2102      	movs	r1, #2
 8008190:	e000      	b.n	8008194 <__cvt+0x44>
 8008192:	2103      	movs	r1, #3
 8008194:	ab03      	add	r3, sp, #12
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	ab02      	add	r3, sp, #8
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	ec45 4b10 	vmov	d0, r4, r5
 80081a0:	4653      	mov	r3, sl
 80081a2:	4632      	mov	r2, r6
 80081a4:	f001 fdac 	bl	8009d00 <_dtoa_r>
 80081a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80081ac:	4607      	mov	r7, r0
 80081ae:	d102      	bne.n	80081b6 <__cvt+0x66>
 80081b0:	f019 0f01 	tst.w	r9, #1
 80081b4:	d022      	beq.n	80081fc <__cvt+0xac>
 80081b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081ba:	eb07 0906 	add.w	r9, r7, r6
 80081be:	d110      	bne.n	80081e2 <__cvt+0x92>
 80081c0:	783b      	ldrb	r3, [r7, #0]
 80081c2:	2b30      	cmp	r3, #48	; 0x30
 80081c4:	d10a      	bne.n	80081dc <__cvt+0x8c>
 80081c6:	2200      	movs	r2, #0
 80081c8:	2300      	movs	r3, #0
 80081ca:	4620      	mov	r0, r4
 80081cc:	4629      	mov	r1, r5
 80081ce:	f7f8 fc83 	bl	8000ad8 <__aeabi_dcmpeq>
 80081d2:	b918      	cbnz	r0, 80081dc <__cvt+0x8c>
 80081d4:	f1c6 0601 	rsb	r6, r6, #1
 80081d8:	f8ca 6000 	str.w	r6, [sl]
 80081dc:	f8da 3000 	ldr.w	r3, [sl]
 80081e0:	4499      	add	r9, r3
 80081e2:	2200      	movs	r2, #0
 80081e4:	2300      	movs	r3, #0
 80081e6:	4620      	mov	r0, r4
 80081e8:	4629      	mov	r1, r5
 80081ea:	f7f8 fc75 	bl	8000ad8 <__aeabi_dcmpeq>
 80081ee:	b108      	cbz	r0, 80081f4 <__cvt+0xa4>
 80081f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80081f4:	2230      	movs	r2, #48	; 0x30
 80081f6:	9b03      	ldr	r3, [sp, #12]
 80081f8:	454b      	cmp	r3, r9
 80081fa:	d307      	bcc.n	800820c <__cvt+0xbc>
 80081fc:	9b03      	ldr	r3, [sp, #12]
 80081fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008200:	1bdb      	subs	r3, r3, r7
 8008202:	4638      	mov	r0, r7
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	b004      	add	sp, #16
 8008208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800820c:	1c59      	adds	r1, r3, #1
 800820e:	9103      	str	r1, [sp, #12]
 8008210:	701a      	strb	r2, [r3, #0]
 8008212:	e7f0      	b.n	80081f6 <__cvt+0xa6>

08008214 <__exponent>:
 8008214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008216:	4603      	mov	r3, r0
 8008218:	2900      	cmp	r1, #0
 800821a:	bfb8      	it	lt
 800821c:	4249      	neglt	r1, r1
 800821e:	f803 2b02 	strb.w	r2, [r3], #2
 8008222:	bfb4      	ite	lt
 8008224:	222d      	movlt	r2, #45	; 0x2d
 8008226:	222b      	movge	r2, #43	; 0x2b
 8008228:	2909      	cmp	r1, #9
 800822a:	7042      	strb	r2, [r0, #1]
 800822c:	dd2a      	ble.n	8008284 <__exponent+0x70>
 800822e:	f10d 0407 	add.w	r4, sp, #7
 8008232:	46a4      	mov	ip, r4
 8008234:	270a      	movs	r7, #10
 8008236:	46a6      	mov	lr, r4
 8008238:	460a      	mov	r2, r1
 800823a:	fb91 f6f7 	sdiv	r6, r1, r7
 800823e:	fb07 1516 	mls	r5, r7, r6, r1
 8008242:	3530      	adds	r5, #48	; 0x30
 8008244:	2a63      	cmp	r2, #99	; 0x63
 8008246:	f104 34ff 	add.w	r4, r4, #4294967295
 800824a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800824e:	4631      	mov	r1, r6
 8008250:	dcf1      	bgt.n	8008236 <__exponent+0x22>
 8008252:	3130      	adds	r1, #48	; 0x30
 8008254:	f1ae 0502 	sub.w	r5, lr, #2
 8008258:	f804 1c01 	strb.w	r1, [r4, #-1]
 800825c:	1c44      	adds	r4, r0, #1
 800825e:	4629      	mov	r1, r5
 8008260:	4561      	cmp	r1, ip
 8008262:	d30a      	bcc.n	800827a <__exponent+0x66>
 8008264:	f10d 0209 	add.w	r2, sp, #9
 8008268:	eba2 020e 	sub.w	r2, r2, lr
 800826c:	4565      	cmp	r5, ip
 800826e:	bf88      	it	hi
 8008270:	2200      	movhi	r2, #0
 8008272:	4413      	add	r3, r2
 8008274:	1a18      	subs	r0, r3, r0
 8008276:	b003      	add	sp, #12
 8008278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800827a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800827e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008282:	e7ed      	b.n	8008260 <__exponent+0x4c>
 8008284:	2330      	movs	r3, #48	; 0x30
 8008286:	3130      	adds	r1, #48	; 0x30
 8008288:	7083      	strb	r3, [r0, #2]
 800828a:	70c1      	strb	r1, [r0, #3]
 800828c:	1d03      	adds	r3, r0, #4
 800828e:	e7f1      	b.n	8008274 <__exponent+0x60>

08008290 <_printf_float>:
 8008290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008294:	ed2d 8b02 	vpush	{d8}
 8008298:	b08d      	sub	sp, #52	; 0x34
 800829a:	460c      	mov	r4, r1
 800829c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80082a0:	4616      	mov	r6, r2
 80082a2:	461f      	mov	r7, r3
 80082a4:	4605      	mov	r5, r0
 80082a6:	f002 fe89 	bl	800afbc <_localeconv_r>
 80082aa:	f8d0 a000 	ldr.w	sl, [r0]
 80082ae:	4650      	mov	r0, sl
 80082b0:	f7f7 ff96 	bl	80001e0 <strlen>
 80082b4:	2300      	movs	r3, #0
 80082b6:	930a      	str	r3, [sp, #40]	; 0x28
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	9305      	str	r3, [sp, #20]
 80082bc:	f8d8 3000 	ldr.w	r3, [r8]
 80082c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80082c4:	3307      	adds	r3, #7
 80082c6:	f023 0307 	bic.w	r3, r3, #7
 80082ca:	f103 0208 	add.w	r2, r3, #8
 80082ce:	f8c8 2000 	str.w	r2, [r8]
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80082da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80082de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082e2:	9307      	str	r3, [sp, #28]
 80082e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80082e8:	ee08 0a10 	vmov	s16, r0
 80082ec:	4b9f      	ldr	r3, [pc, #636]	; (800856c <_printf_float+0x2dc>)
 80082ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082f2:	f04f 32ff 	mov.w	r2, #4294967295
 80082f6:	f7f8 fc21 	bl	8000b3c <__aeabi_dcmpun>
 80082fa:	bb88      	cbnz	r0, 8008360 <_printf_float+0xd0>
 80082fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008300:	4b9a      	ldr	r3, [pc, #616]	; (800856c <_printf_float+0x2dc>)
 8008302:	f04f 32ff 	mov.w	r2, #4294967295
 8008306:	f7f8 fbfb 	bl	8000b00 <__aeabi_dcmple>
 800830a:	bb48      	cbnz	r0, 8008360 <_printf_float+0xd0>
 800830c:	2200      	movs	r2, #0
 800830e:	2300      	movs	r3, #0
 8008310:	4640      	mov	r0, r8
 8008312:	4649      	mov	r1, r9
 8008314:	f7f8 fbea 	bl	8000aec <__aeabi_dcmplt>
 8008318:	b110      	cbz	r0, 8008320 <_printf_float+0x90>
 800831a:	232d      	movs	r3, #45	; 0x2d
 800831c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008320:	4b93      	ldr	r3, [pc, #588]	; (8008570 <_printf_float+0x2e0>)
 8008322:	4894      	ldr	r0, [pc, #592]	; (8008574 <_printf_float+0x2e4>)
 8008324:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008328:	bf94      	ite	ls
 800832a:	4698      	movls	r8, r3
 800832c:	4680      	movhi	r8, r0
 800832e:	2303      	movs	r3, #3
 8008330:	6123      	str	r3, [r4, #16]
 8008332:	9b05      	ldr	r3, [sp, #20]
 8008334:	f023 0204 	bic.w	r2, r3, #4
 8008338:	6022      	str	r2, [r4, #0]
 800833a:	f04f 0900 	mov.w	r9, #0
 800833e:	9700      	str	r7, [sp, #0]
 8008340:	4633      	mov	r3, r6
 8008342:	aa0b      	add	r2, sp, #44	; 0x2c
 8008344:	4621      	mov	r1, r4
 8008346:	4628      	mov	r0, r5
 8008348:	f000 f9d8 	bl	80086fc <_printf_common>
 800834c:	3001      	adds	r0, #1
 800834e:	f040 8090 	bne.w	8008472 <_printf_float+0x1e2>
 8008352:	f04f 30ff 	mov.w	r0, #4294967295
 8008356:	b00d      	add	sp, #52	; 0x34
 8008358:	ecbd 8b02 	vpop	{d8}
 800835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008360:	4642      	mov	r2, r8
 8008362:	464b      	mov	r3, r9
 8008364:	4640      	mov	r0, r8
 8008366:	4649      	mov	r1, r9
 8008368:	f7f8 fbe8 	bl	8000b3c <__aeabi_dcmpun>
 800836c:	b140      	cbz	r0, 8008380 <_printf_float+0xf0>
 800836e:	464b      	mov	r3, r9
 8008370:	2b00      	cmp	r3, #0
 8008372:	bfbc      	itt	lt
 8008374:	232d      	movlt	r3, #45	; 0x2d
 8008376:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800837a:	487f      	ldr	r0, [pc, #508]	; (8008578 <_printf_float+0x2e8>)
 800837c:	4b7f      	ldr	r3, [pc, #508]	; (800857c <_printf_float+0x2ec>)
 800837e:	e7d1      	b.n	8008324 <_printf_float+0x94>
 8008380:	6863      	ldr	r3, [r4, #4]
 8008382:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008386:	9206      	str	r2, [sp, #24]
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	d13f      	bne.n	800840c <_printf_float+0x17c>
 800838c:	2306      	movs	r3, #6
 800838e:	6063      	str	r3, [r4, #4]
 8008390:	9b05      	ldr	r3, [sp, #20]
 8008392:	6861      	ldr	r1, [r4, #4]
 8008394:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008398:	2300      	movs	r3, #0
 800839a:	9303      	str	r3, [sp, #12]
 800839c:	ab0a      	add	r3, sp, #40	; 0x28
 800839e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80083a2:	ab09      	add	r3, sp, #36	; 0x24
 80083a4:	ec49 8b10 	vmov	d0, r8, r9
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	6022      	str	r2, [r4, #0]
 80083ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80083b0:	4628      	mov	r0, r5
 80083b2:	f7ff fecd 	bl	8008150 <__cvt>
 80083b6:	9b06      	ldr	r3, [sp, #24]
 80083b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083ba:	2b47      	cmp	r3, #71	; 0x47
 80083bc:	4680      	mov	r8, r0
 80083be:	d108      	bne.n	80083d2 <_printf_float+0x142>
 80083c0:	1cc8      	adds	r0, r1, #3
 80083c2:	db02      	blt.n	80083ca <_printf_float+0x13a>
 80083c4:	6863      	ldr	r3, [r4, #4]
 80083c6:	4299      	cmp	r1, r3
 80083c8:	dd41      	ble.n	800844e <_printf_float+0x1be>
 80083ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80083ce:	fa5f fb8b 	uxtb.w	fp, fp
 80083d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083d6:	d820      	bhi.n	800841a <_printf_float+0x18a>
 80083d8:	3901      	subs	r1, #1
 80083da:	465a      	mov	r2, fp
 80083dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80083e0:	9109      	str	r1, [sp, #36]	; 0x24
 80083e2:	f7ff ff17 	bl	8008214 <__exponent>
 80083e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083e8:	1813      	adds	r3, r2, r0
 80083ea:	2a01      	cmp	r2, #1
 80083ec:	4681      	mov	r9, r0
 80083ee:	6123      	str	r3, [r4, #16]
 80083f0:	dc02      	bgt.n	80083f8 <_printf_float+0x168>
 80083f2:	6822      	ldr	r2, [r4, #0]
 80083f4:	07d2      	lsls	r2, r2, #31
 80083f6:	d501      	bpl.n	80083fc <_printf_float+0x16c>
 80083f8:	3301      	adds	r3, #1
 80083fa:	6123      	str	r3, [r4, #16]
 80083fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008400:	2b00      	cmp	r3, #0
 8008402:	d09c      	beq.n	800833e <_printf_float+0xae>
 8008404:	232d      	movs	r3, #45	; 0x2d
 8008406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800840a:	e798      	b.n	800833e <_printf_float+0xae>
 800840c:	9a06      	ldr	r2, [sp, #24]
 800840e:	2a47      	cmp	r2, #71	; 0x47
 8008410:	d1be      	bne.n	8008390 <_printf_float+0x100>
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1bc      	bne.n	8008390 <_printf_float+0x100>
 8008416:	2301      	movs	r3, #1
 8008418:	e7b9      	b.n	800838e <_printf_float+0xfe>
 800841a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800841e:	d118      	bne.n	8008452 <_printf_float+0x1c2>
 8008420:	2900      	cmp	r1, #0
 8008422:	6863      	ldr	r3, [r4, #4]
 8008424:	dd0b      	ble.n	800843e <_printf_float+0x1ae>
 8008426:	6121      	str	r1, [r4, #16]
 8008428:	b913      	cbnz	r3, 8008430 <_printf_float+0x1a0>
 800842a:	6822      	ldr	r2, [r4, #0]
 800842c:	07d0      	lsls	r0, r2, #31
 800842e:	d502      	bpl.n	8008436 <_printf_float+0x1a6>
 8008430:	3301      	adds	r3, #1
 8008432:	440b      	add	r3, r1
 8008434:	6123      	str	r3, [r4, #16]
 8008436:	65a1      	str	r1, [r4, #88]	; 0x58
 8008438:	f04f 0900 	mov.w	r9, #0
 800843c:	e7de      	b.n	80083fc <_printf_float+0x16c>
 800843e:	b913      	cbnz	r3, 8008446 <_printf_float+0x1b6>
 8008440:	6822      	ldr	r2, [r4, #0]
 8008442:	07d2      	lsls	r2, r2, #31
 8008444:	d501      	bpl.n	800844a <_printf_float+0x1ba>
 8008446:	3302      	adds	r3, #2
 8008448:	e7f4      	b.n	8008434 <_printf_float+0x1a4>
 800844a:	2301      	movs	r3, #1
 800844c:	e7f2      	b.n	8008434 <_printf_float+0x1a4>
 800844e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008454:	4299      	cmp	r1, r3
 8008456:	db05      	blt.n	8008464 <_printf_float+0x1d4>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	6121      	str	r1, [r4, #16]
 800845c:	07d8      	lsls	r0, r3, #31
 800845e:	d5ea      	bpl.n	8008436 <_printf_float+0x1a6>
 8008460:	1c4b      	adds	r3, r1, #1
 8008462:	e7e7      	b.n	8008434 <_printf_float+0x1a4>
 8008464:	2900      	cmp	r1, #0
 8008466:	bfd4      	ite	le
 8008468:	f1c1 0202 	rsble	r2, r1, #2
 800846c:	2201      	movgt	r2, #1
 800846e:	4413      	add	r3, r2
 8008470:	e7e0      	b.n	8008434 <_printf_float+0x1a4>
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	055a      	lsls	r2, r3, #21
 8008476:	d407      	bmi.n	8008488 <_printf_float+0x1f8>
 8008478:	6923      	ldr	r3, [r4, #16]
 800847a:	4642      	mov	r2, r8
 800847c:	4631      	mov	r1, r6
 800847e:	4628      	mov	r0, r5
 8008480:	47b8      	blx	r7
 8008482:	3001      	adds	r0, #1
 8008484:	d12c      	bne.n	80084e0 <_printf_float+0x250>
 8008486:	e764      	b.n	8008352 <_printf_float+0xc2>
 8008488:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800848c:	f240 80e0 	bls.w	8008650 <_printf_float+0x3c0>
 8008490:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008494:	2200      	movs	r2, #0
 8008496:	2300      	movs	r3, #0
 8008498:	f7f8 fb1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800849c:	2800      	cmp	r0, #0
 800849e:	d034      	beq.n	800850a <_printf_float+0x27a>
 80084a0:	4a37      	ldr	r2, [pc, #220]	; (8008580 <_printf_float+0x2f0>)
 80084a2:	2301      	movs	r3, #1
 80084a4:	4631      	mov	r1, r6
 80084a6:	4628      	mov	r0, r5
 80084a8:	47b8      	blx	r7
 80084aa:	3001      	adds	r0, #1
 80084ac:	f43f af51 	beq.w	8008352 <_printf_float+0xc2>
 80084b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084b4:	429a      	cmp	r2, r3
 80084b6:	db02      	blt.n	80084be <_printf_float+0x22e>
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	07d8      	lsls	r0, r3, #31
 80084bc:	d510      	bpl.n	80084e0 <_printf_float+0x250>
 80084be:	ee18 3a10 	vmov	r3, s16
 80084c2:	4652      	mov	r2, sl
 80084c4:	4631      	mov	r1, r6
 80084c6:	4628      	mov	r0, r5
 80084c8:	47b8      	blx	r7
 80084ca:	3001      	adds	r0, #1
 80084cc:	f43f af41 	beq.w	8008352 <_printf_float+0xc2>
 80084d0:	f04f 0800 	mov.w	r8, #0
 80084d4:	f104 091a 	add.w	r9, r4, #26
 80084d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084da:	3b01      	subs	r3, #1
 80084dc:	4543      	cmp	r3, r8
 80084de:	dc09      	bgt.n	80084f4 <_printf_float+0x264>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	079b      	lsls	r3, r3, #30
 80084e4:	f100 8105 	bmi.w	80086f2 <_printf_float+0x462>
 80084e8:	68e0      	ldr	r0, [r4, #12]
 80084ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ec:	4298      	cmp	r0, r3
 80084ee:	bfb8      	it	lt
 80084f0:	4618      	movlt	r0, r3
 80084f2:	e730      	b.n	8008356 <_printf_float+0xc6>
 80084f4:	2301      	movs	r3, #1
 80084f6:	464a      	mov	r2, r9
 80084f8:	4631      	mov	r1, r6
 80084fa:	4628      	mov	r0, r5
 80084fc:	47b8      	blx	r7
 80084fe:	3001      	adds	r0, #1
 8008500:	f43f af27 	beq.w	8008352 <_printf_float+0xc2>
 8008504:	f108 0801 	add.w	r8, r8, #1
 8008508:	e7e6      	b.n	80084d8 <_printf_float+0x248>
 800850a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800850c:	2b00      	cmp	r3, #0
 800850e:	dc39      	bgt.n	8008584 <_printf_float+0x2f4>
 8008510:	4a1b      	ldr	r2, [pc, #108]	; (8008580 <_printf_float+0x2f0>)
 8008512:	2301      	movs	r3, #1
 8008514:	4631      	mov	r1, r6
 8008516:	4628      	mov	r0, r5
 8008518:	47b8      	blx	r7
 800851a:	3001      	adds	r0, #1
 800851c:	f43f af19 	beq.w	8008352 <_printf_float+0xc2>
 8008520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008524:	4313      	orrs	r3, r2
 8008526:	d102      	bne.n	800852e <_printf_float+0x29e>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	07d9      	lsls	r1, r3, #31
 800852c:	d5d8      	bpl.n	80084e0 <_printf_float+0x250>
 800852e:	ee18 3a10 	vmov	r3, s16
 8008532:	4652      	mov	r2, sl
 8008534:	4631      	mov	r1, r6
 8008536:	4628      	mov	r0, r5
 8008538:	47b8      	blx	r7
 800853a:	3001      	adds	r0, #1
 800853c:	f43f af09 	beq.w	8008352 <_printf_float+0xc2>
 8008540:	f04f 0900 	mov.w	r9, #0
 8008544:	f104 0a1a 	add.w	sl, r4, #26
 8008548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800854a:	425b      	negs	r3, r3
 800854c:	454b      	cmp	r3, r9
 800854e:	dc01      	bgt.n	8008554 <_printf_float+0x2c4>
 8008550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008552:	e792      	b.n	800847a <_printf_float+0x1ea>
 8008554:	2301      	movs	r3, #1
 8008556:	4652      	mov	r2, sl
 8008558:	4631      	mov	r1, r6
 800855a:	4628      	mov	r0, r5
 800855c:	47b8      	blx	r7
 800855e:	3001      	adds	r0, #1
 8008560:	f43f aef7 	beq.w	8008352 <_printf_float+0xc2>
 8008564:	f109 0901 	add.w	r9, r9, #1
 8008568:	e7ee      	b.n	8008548 <_printf_float+0x2b8>
 800856a:	bf00      	nop
 800856c:	7fefffff 	.word	0x7fefffff
 8008570:	0800e0ac 	.word	0x0800e0ac
 8008574:	0800e0b0 	.word	0x0800e0b0
 8008578:	0800e0b8 	.word	0x0800e0b8
 800857c:	0800e0b4 	.word	0x0800e0b4
 8008580:	0800e0bc 	.word	0x0800e0bc
 8008584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008586:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008588:	429a      	cmp	r2, r3
 800858a:	bfa8      	it	ge
 800858c:	461a      	movge	r2, r3
 800858e:	2a00      	cmp	r2, #0
 8008590:	4691      	mov	r9, r2
 8008592:	dc37      	bgt.n	8008604 <_printf_float+0x374>
 8008594:	f04f 0b00 	mov.w	fp, #0
 8008598:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800859c:	f104 021a 	add.w	r2, r4, #26
 80085a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085a2:	9305      	str	r3, [sp, #20]
 80085a4:	eba3 0309 	sub.w	r3, r3, r9
 80085a8:	455b      	cmp	r3, fp
 80085aa:	dc33      	bgt.n	8008614 <_printf_float+0x384>
 80085ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085b0:	429a      	cmp	r2, r3
 80085b2:	db3b      	blt.n	800862c <_printf_float+0x39c>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	07da      	lsls	r2, r3, #31
 80085b8:	d438      	bmi.n	800862c <_printf_float+0x39c>
 80085ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085bc:	9a05      	ldr	r2, [sp, #20]
 80085be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085c0:	1a9a      	subs	r2, r3, r2
 80085c2:	eba3 0901 	sub.w	r9, r3, r1
 80085c6:	4591      	cmp	r9, r2
 80085c8:	bfa8      	it	ge
 80085ca:	4691      	movge	r9, r2
 80085cc:	f1b9 0f00 	cmp.w	r9, #0
 80085d0:	dc35      	bgt.n	800863e <_printf_float+0x3ae>
 80085d2:	f04f 0800 	mov.w	r8, #0
 80085d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085da:	f104 0a1a 	add.w	sl, r4, #26
 80085de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085e2:	1a9b      	subs	r3, r3, r2
 80085e4:	eba3 0309 	sub.w	r3, r3, r9
 80085e8:	4543      	cmp	r3, r8
 80085ea:	f77f af79 	ble.w	80084e0 <_printf_float+0x250>
 80085ee:	2301      	movs	r3, #1
 80085f0:	4652      	mov	r2, sl
 80085f2:	4631      	mov	r1, r6
 80085f4:	4628      	mov	r0, r5
 80085f6:	47b8      	blx	r7
 80085f8:	3001      	adds	r0, #1
 80085fa:	f43f aeaa 	beq.w	8008352 <_printf_float+0xc2>
 80085fe:	f108 0801 	add.w	r8, r8, #1
 8008602:	e7ec      	b.n	80085de <_printf_float+0x34e>
 8008604:	4613      	mov	r3, r2
 8008606:	4631      	mov	r1, r6
 8008608:	4642      	mov	r2, r8
 800860a:	4628      	mov	r0, r5
 800860c:	47b8      	blx	r7
 800860e:	3001      	adds	r0, #1
 8008610:	d1c0      	bne.n	8008594 <_printf_float+0x304>
 8008612:	e69e      	b.n	8008352 <_printf_float+0xc2>
 8008614:	2301      	movs	r3, #1
 8008616:	4631      	mov	r1, r6
 8008618:	4628      	mov	r0, r5
 800861a:	9205      	str	r2, [sp, #20]
 800861c:	47b8      	blx	r7
 800861e:	3001      	adds	r0, #1
 8008620:	f43f ae97 	beq.w	8008352 <_printf_float+0xc2>
 8008624:	9a05      	ldr	r2, [sp, #20]
 8008626:	f10b 0b01 	add.w	fp, fp, #1
 800862a:	e7b9      	b.n	80085a0 <_printf_float+0x310>
 800862c:	ee18 3a10 	vmov	r3, s16
 8008630:	4652      	mov	r2, sl
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	47b8      	blx	r7
 8008638:	3001      	adds	r0, #1
 800863a:	d1be      	bne.n	80085ba <_printf_float+0x32a>
 800863c:	e689      	b.n	8008352 <_printf_float+0xc2>
 800863e:	9a05      	ldr	r2, [sp, #20]
 8008640:	464b      	mov	r3, r9
 8008642:	4442      	add	r2, r8
 8008644:	4631      	mov	r1, r6
 8008646:	4628      	mov	r0, r5
 8008648:	47b8      	blx	r7
 800864a:	3001      	adds	r0, #1
 800864c:	d1c1      	bne.n	80085d2 <_printf_float+0x342>
 800864e:	e680      	b.n	8008352 <_printf_float+0xc2>
 8008650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008652:	2a01      	cmp	r2, #1
 8008654:	dc01      	bgt.n	800865a <_printf_float+0x3ca>
 8008656:	07db      	lsls	r3, r3, #31
 8008658:	d538      	bpl.n	80086cc <_printf_float+0x43c>
 800865a:	2301      	movs	r3, #1
 800865c:	4642      	mov	r2, r8
 800865e:	4631      	mov	r1, r6
 8008660:	4628      	mov	r0, r5
 8008662:	47b8      	blx	r7
 8008664:	3001      	adds	r0, #1
 8008666:	f43f ae74 	beq.w	8008352 <_printf_float+0xc2>
 800866a:	ee18 3a10 	vmov	r3, s16
 800866e:	4652      	mov	r2, sl
 8008670:	4631      	mov	r1, r6
 8008672:	4628      	mov	r0, r5
 8008674:	47b8      	blx	r7
 8008676:	3001      	adds	r0, #1
 8008678:	f43f ae6b 	beq.w	8008352 <_printf_float+0xc2>
 800867c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008680:	2200      	movs	r2, #0
 8008682:	2300      	movs	r3, #0
 8008684:	f7f8 fa28 	bl	8000ad8 <__aeabi_dcmpeq>
 8008688:	b9d8      	cbnz	r0, 80086c2 <_printf_float+0x432>
 800868a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800868c:	f108 0201 	add.w	r2, r8, #1
 8008690:	3b01      	subs	r3, #1
 8008692:	4631      	mov	r1, r6
 8008694:	4628      	mov	r0, r5
 8008696:	47b8      	blx	r7
 8008698:	3001      	adds	r0, #1
 800869a:	d10e      	bne.n	80086ba <_printf_float+0x42a>
 800869c:	e659      	b.n	8008352 <_printf_float+0xc2>
 800869e:	2301      	movs	r3, #1
 80086a0:	4652      	mov	r2, sl
 80086a2:	4631      	mov	r1, r6
 80086a4:	4628      	mov	r0, r5
 80086a6:	47b8      	blx	r7
 80086a8:	3001      	adds	r0, #1
 80086aa:	f43f ae52 	beq.w	8008352 <_printf_float+0xc2>
 80086ae:	f108 0801 	add.w	r8, r8, #1
 80086b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b4:	3b01      	subs	r3, #1
 80086b6:	4543      	cmp	r3, r8
 80086b8:	dcf1      	bgt.n	800869e <_printf_float+0x40e>
 80086ba:	464b      	mov	r3, r9
 80086bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80086c0:	e6dc      	b.n	800847c <_printf_float+0x1ec>
 80086c2:	f04f 0800 	mov.w	r8, #0
 80086c6:	f104 0a1a 	add.w	sl, r4, #26
 80086ca:	e7f2      	b.n	80086b2 <_printf_float+0x422>
 80086cc:	2301      	movs	r3, #1
 80086ce:	4642      	mov	r2, r8
 80086d0:	e7df      	b.n	8008692 <_printf_float+0x402>
 80086d2:	2301      	movs	r3, #1
 80086d4:	464a      	mov	r2, r9
 80086d6:	4631      	mov	r1, r6
 80086d8:	4628      	mov	r0, r5
 80086da:	47b8      	blx	r7
 80086dc:	3001      	adds	r0, #1
 80086de:	f43f ae38 	beq.w	8008352 <_printf_float+0xc2>
 80086e2:	f108 0801 	add.w	r8, r8, #1
 80086e6:	68e3      	ldr	r3, [r4, #12]
 80086e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086ea:	1a5b      	subs	r3, r3, r1
 80086ec:	4543      	cmp	r3, r8
 80086ee:	dcf0      	bgt.n	80086d2 <_printf_float+0x442>
 80086f0:	e6fa      	b.n	80084e8 <_printf_float+0x258>
 80086f2:	f04f 0800 	mov.w	r8, #0
 80086f6:	f104 0919 	add.w	r9, r4, #25
 80086fa:	e7f4      	b.n	80086e6 <_printf_float+0x456>

080086fc <_printf_common>:
 80086fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008700:	4616      	mov	r6, r2
 8008702:	4699      	mov	r9, r3
 8008704:	688a      	ldr	r2, [r1, #8]
 8008706:	690b      	ldr	r3, [r1, #16]
 8008708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800870c:	4293      	cmp	r3, r2
 800870e:	bfb8      	it	lt
 8008710:	4613      	movlt	r3, r2
 8008712:	6033      	str	r3, [r6, #0]
 8008714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008718:	4607      	mov	r7, r0
 800871a:	460c      	mov	r4, r1
 800871c:	b10a      	cbz	r2, 8008722 <_printf_common+0x26>
 800871e:	3301      	adds	r3, #1
 8008720:	6033      	str	r3, [r6, #0]
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	0699      	lsls	r1, r3, #26
 8008726:	bf42      	ittt	mi
 8008728:	6833      	ldrmi	r3, [r6, #0]
 800872a:	3302      	addmi	r3, #2
 800872c:	6033      	strmi	r3, [r6, #0]
 800872e:	6825      	ldr	r5, [r4, #0]
 8008730:	f015 0506 	ands.w	r5, r5, #6
 8008734:	d106      	bne.n	8008744 <_printf_common+0x48>
 8008736:	f104 0a19 	add.w	sl, r4, #25
 800873a:	68e3      	ldr	r3, [r4, #12]
 800873c:	6832      	ldr	r2, [r6, #0]
 800873e:	1a9b      	subs	r3, r3, r2
 8008740:	42ab      	cmp	r3, r5
 8008742:	dc26      	bgt.n	8008792 <_printf_common+0x96>
 8008744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008748:	1e13      	subs	r3, r2, #0
 800874a:	6822      	ldr	r2, [r4, #0]
 800874c:	bf18      	it	ne
 800874e:	2301      	movne	r3, #1
 8008750:	0692      	lsls	r2, r2, #26
 8008752:	d42b      	bmi.n	80087ac <_printf_common+0xb0>
 8008754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008758:	4649      	mov	r1, r9
 800875a:	4638      	mov	r0, r7
 800875c:	47c0      	blx	r8
 800875e:	3001      	adds	r0, #1
 8008760:	d01e      	beq.n	80087a0 <_printf_common+0xa4>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	68e5      	ldr	r5, [r4, #12]
 8008766:	6832      	ldr	r2, [r6, #0]
 8008768:	f003 0306 	and.w	r3, r3, #6
 800876c:	2b04      	cmp	r3, #4
 800876e:	bf08      	it	eq
 8008770:	1aad      	subeq	r5, r5, r2
 8008772:	68a3      	ldr	r3, [r4, #8]
 8008774:	6922      	ldr	r2, [r4, #16]
 8008776:	bf0c      	ite	eq
 8008778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800877c:	2500      	movne	r5, #0
 800877e:	4293      	cmp	r3, r2
 8008780:	bfc4      	itt	gt
 8008782:	1a9b      	subgt	r3, r3, r2
 8008784:	18ed      	addgt	r5, r5, r3
 8008786:	2600      	movs	r6, #0
 8008788:	341a      	adds	r4, #26
 800878a:	42b5      	cmp	r5, r6
 800878c:	d11a      	bne.n	80087c4 <_printf_common+0xc8>
 800878e:	2000      	movs	r0, #0
 8008790:	e008      	b.n	80087a4 <_printf_common+0xa8>
 8008792:	2301      	movs	r3, #1
 8008794:	4652      	mov	r2, sl
 8008796:	4649      	mov	r1, r9
 8008798:	4638      	mov	r0, r7
 800879a:	47c0      	blx	r8
 800879c:	3001      	adds	r0, #1
 800879e:	d103      	bne.n	80087a8 <_printf_common+0xac>
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295
 80087a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a8:	3501      	adds	r5, #1
 80087aa:	e7c6      	b.n	800873a <_printf_common+0x3e>
 80087ac:	18e1      	adds	r1, r4, r3
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	2030      	movs	r0, #48	; 0x30
 80087b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087b6:	4422      	add	r2, r4
 80087b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087c0:	3302      	adds	r3, #2
 80087c2:	e7c7      	b.n	8008754 <_printf_common+0x58>
 80087c4:	2301      	movs	r3, #1
 80087c6:	4622      	mov	r2, r4
 80087c8:	4649      	mov	r1, r9
 80087ca:	4638      	mov	r0, r7
 80087cc:	47c0      	blx	r8
 80087ce:	3001      	adds	r0, #1
 80087d0:	d0e6      	beq.n	80087a0 <_printf_common+0xa4>
 80087d2:	3601      	adds	r6, #1
 80087d4:	e7d9      	b.n	800878a <_printf_common+0x8e>
	...

080087d8 <_printf_i>:
 80087d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087dc:	7e0f      	ldrb	r7, [r1, #24]
 80087de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087e0:	2f78      	cmp	r7, #120	; 0x78
 80087e2:	4691      	mov	r9, r2
 80087e4:	4680      	mov	r8, r0
 80087e6:	460c      	mov	r4, r1
 80087e8:	469a      	mov	sl, r3
 80087ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087ee:	d807      	bhi.n	8008800 <_printf_i+0x28>
 80087f0:	2f62      	cmp	r7, #98	; 0x62
 80087f2:	d80a      	bhi.n	800880a <_printf_i+0x32>
 80087f4:	2f00      	cmp	r7, #0
 80087f6:	f000 80d8 	beq.w	80089aa <_printf_i+0x1d2>
 80087fa:	2f58      	cmp	r7, #88	; 0x58
 80087fc:	f000 80a3 	beq.w	8008946 <_printf_i+0x16e>
 8008800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008808:	e03a      	b.n	8008880 <_printf_i+0xa8>
 800880a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800880e:	2b15      	cmp	r3, #21
 8008810:	d8f6      	bhi.n	8008800 <_printf_i+0x28>
 8008812:	a101      	add	r1, pc, #4	; (adr r1, 8008818 <_printf_i+0x40>)
 8008814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008818:	08008871 	.word	0x08008871
 800881c:	08008885 	.word	0x08008885
 8008820:	08008801 	.word	0x08008801
 8008824:	08008801 	.word	0x08008801
 8008828:	08008801 	.word	0x08008801
 800882c:	08008801 	.word	0x08008801
 8008830:	08008885 	.word	0x08008885
 8008834:	08008801 	.word	0x08008801
 8008838:	08008801 	.word	0x08008801
 800883c:	08008801 	.word	0x08008801
 8008840:	08008801 	.word	0x08008801
 8008844:	08008991 	.word	0x08008991
 8008848:	080088b5 	.word	0x080088b5
 800884c:	08008973 	.word	0x08008973
 8008850:	08008801 	.word	0x08008801
 8008854:	08008801 	.word	0x08008801
 8008858:	080089b3 	.word	0x080089b3
 800885c:	08008801 	.word	0x08008801
 8008860:	080088b5 	.word	0x080088b5
 8008864:	08008801 	.word	0x08008801
 8008868:	08008801 	.word	0x08008801
 800886c:	0800897b 	.word	0x0800897b
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	1d1a      	adds	r2, r3, #4
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	602a      	str	r2, [r5, #0]
 8008878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800887c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008880:	2301      	movs	r3, #1
 8008882:	e0a3      	b.n	80089cc <_printf_i+0x1f4>
 8008884:	6820      	ldr	r0, [r4, #0]
 8008886:	6829      	ldr	r1, [r5, #0]
 8008888:	0606      	lsls	r6, r0, #24
 800888a:	f101 0304 	add.w	r3, r1, #4
 800888e:	d50a      	bpl.n	80088a6 <_printf_i+0xce>
 8008890:	680e      	ldr	r6, [r1, #0]
 8008892:	602b      	str	r3, [r5, #0]
 8008894:	2e00      	cmp	r6, #0
 8008896:	da03      	bge.n	80088a0 <_printf_i+0xc8>
 8008898:	232d      	movs	r3, #45	; 0x2d
 800889a:	4276      	negs	r6, r6
 800889c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088a0:	485e      	ldr	r0, [pc, #376]	; (8008a1c <_printf_i+0x244>)
 80088a2:	230a      	movs	r3, #10
 80088a4:	e019      	b.n	80088da <_printf_i+0x102>
 80088a6:	680e      	ldr	r6, [r1, #0]
 80088a8:	602b      	str	r3, [r5, #0]
 80088aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088ae:	bf18      	it	ne
 80088b0:	b236      	sxthne	r6, r6
 80088b2:	e7ef      	b.n	8008894 <_printf_i+0xbc>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	6820      	ldr	r0, [r4, #0]
 80088b8:	1d19      	adds	r1, r3, #4
 80088ba:	6029      	str	r1, [r5, #0]
 80088bc:	0601      	lsls	r1, r0, #24
 80088be:	d501      	bpl.n	80088c4 <_printf_i+0xec>
 80088c0:	681e      	ldr	r6, [r3, #0]
 80088c2:	e002      	b.n	80088ca <_printf_i+0xf2>
 80088c4:	0646      	lsls	r6, r0, #25
 80088c6:	d5fb      	bpl.n	80088c0 <_printf_i+0xe8>
 80088c8:	881e      	ldrh	r6, [r3, #0]
 80088ca:	4854      	ldr	r0, [pc, #336]	; (8008a1c <_printf_i+0x244>)
 80088cc:	2f6f      	cmp	r7, #111	; 0x6f
 80088ce:	bf0c      	ite	eq
 80088d0:	2308      	moveq	r3, #8
 80088d2:	230a      	movne	r3, #10
 80088d4:	2100      	movs	r1, #0
 80088d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088da:	6865      	ldr	r5, [r4, #4]
 80088dc:	60a5      	str	r5, [r4, #8]
 80088de:	2d00      	cmp	r5, #0
 80088e0:	bfa2      	ittt	ge
 80088e2:	6821      	ldrge	r1, [r4, #0]
 80088e4:	f021 0104 	bicge.w	r1, r1, #4
 80088e8:	6021      	strge	r1, [r4, #0]
 80088ea:	b90e      	cbnz	r6, 80088f0 <_printf_i+0x118>
 80088ec:	2d00      	cmp	r5, #0
 80088ee:	d04d      	beq.n	800898c <_printf_i+0x1b4>
 80088f0:	4615      	mov	r5, r2
 80088f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80088f6:	fb03 6711 	mls	r7, r3, r1, r6
 80088fa:	5dc7      	ldrb	r7, [r0, r7]
 80088fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008900:	4637      	mov	r7, r6
 8008902:	42bb      	cmp	r3, r7
 8008904:	460e      	mov	r6, r1
 8008906:	d9f4      	bls.n	80088f2 <_printf_i+0x11a>
 8008908:	2b08      	cmp	r3, #8
 800890a:	d10b      	bne.n	8008924 <_printf_i+0x14c>
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	07de      	lsls	r6, r3, #31
 8008910:	d508      	bpl.n	8008924 <_printf_i+0x14c>
 8008912:	6923      	ldr	r3, [r4, #16]
 8008914:	6861      	ldr	r1, [r4, #4]
 8008916:	4299      	cmp	r1, r3
 8008918:	bfde      	ittt	le
 800891a:	2330      	movle	r3, #48	; 0x30
 800891c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008920:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008924:	1b52      	subs	r2, r2, r5
 8008926:	6122      	str	r2, [r4, #16]
 8008928:	f8cd a000 	str.w	sl, [sp]
 800892c:	464b      	mov	r3, r9
 800892e:	aa03      	add	r2, sp, #12
 8008930:	4621      	mov	r1, r4
 8008932:	4640      	mov	r0, r8
 8008934:	f7ff fee2 	bl	80086fc <_printf_common>
 8008938:	3001      	adds	r0, #1
 800893a:	d14c      	bne.n	80089d6 <_printf_i+0x1fe>
 800893c:	f04f 30ff 	mov.w	r0, #4294967295
 8008940:	b004      	add	sp, #16
 8008942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008946:	4835      	ldr	r0, [pc, #212]	; (8008a1c <_printf_i+0x244>)
 8008948:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800894c:	6829      	ldr	r1, [r5, #0]
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	f851 6b04 	ldr.w	r6, [r1], #4
 8008954:	6029      	str	r1, [r5, #0]
 8008956:	061d      	lsls	r5, r3, #24
 8008958:	d514      	bpl.n	8008984 <_printf_i+0x1ac>
 800895a:	07df      	lsls	r7, r3, #31
 800895c:	bf44      	itt	mi
 800895e:	f043 0320 	orrmi.w	r3, r3, #32
 8008962:	6023      	strmi	r3, [r4, #0]
 8008964:	b91e      	cbnz	r6, 800896e <_printf_i+0x196>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	f023 0320 	bic.w	r3, r3, #32
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	2310      	movs	r3, #16
 8008970:	e7b0      	b.n	80088d4 <_printf_i+0xfc>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	f043 0320 	orr.w	r3, r3, #32
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	2378      	movs	r3, #120	; 0x78
 800897c:	4828      	ldr	r0, [pc, #160]	; (8008a20 <_printf_i+0x248>)
 800897e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008982:	e7e3      	b.n	800894c <_printf_i+0x174>
 8008984:	0659      	lsls	r1, r3, #25
 8008986:	bf48      	it	mi
 8008988:	b2b6      	uxthmi	r6, r6
 800898a:	e7e6      	b.n	800895a <_printf_i+0x182>
 800898c:	4615      	mov	r5, r2
 800898e:	e7bb      	b.n	8008908 <_printf_i+0x130>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	6826      	ldr	r6, [r4, #0]
 8008994:	6961      	ldr	r1, [r4, #20]
 8008996:	1d18      	adds	r0, r3, #4
 8008998:	6028      	str	r0, [r5, #0]
 800899a:	0635      	lsls	r5, r6, #24
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	d501      	bpl.n	80089a4 <_printf_i+0x1cc>
 80089a0:	6019      	str	r1, [r3, #0]
 80089a2:	e002      	b.n	80089aa <_printf_i+0x1d2>
 80089a4:	0670      	lsls	r0, r6, #25
 80089a6:	d5fb      	bpl.n	80089a0 <_printf_i+0x1c8>
 80089a8:	8019      	strh	r1, [r3, #0]
 80089aa:	2300      	movs	r3, #0
 80089ac:	6123      	str	r3, [r4, #16]
 80089ae:	4615      	mov	r5, r2
 80089b0:	e7ba      	b.n	8008928 <_printf_i+0x150>
 80089b2:	682b      	ldr	r3, [r5, #0]
 80089b4:	1d1a      	adds	r2, r3, #4
 80089b6:	602a      	str	r2, [r5, #0]
 80089b8:	681d      	ldr	r5, [r3, #0]
 80089ba:	6862      	ldr	r2, [r4, #4]
 80089bc:	2100      	movs	r1, #0
 80089be:	4628      	mov	r0, r5
 80089c0:	f7f7 fc16 	bl	80001f0 <memchr>
 80089c4:	b108      	cbz	r0, 80089ca <_printf_i+0x1f2>
 80089c6:	1b40      	subs	r0, r0, r5
 80089c8:	6060      	str	r0, [r4, #4]
 80089ca:	6863      	ldr	r3, [r4, #4]
 80089cc:	6123      	str	r3, [r4, #16]
 80089ce:	2300      	movs	r3, #0
 80089d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089d4:	e7a8      	b.n	8008928 <_printf_i+0x150>
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	462a      	mov	r2, r5
 80089da:	4649      	mov	r1, r9
 80089dc:	4640      	mov	r0, r8
 80089de:	47d0      	blx	sl
 80089e0:	3001      	adds	r0, #1
 80089e2:	d0ab      	beq.n	800893c <_printf_i+0x164>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	079b      	lsls	r3, r3, #30
 80089e8:	d413      	bmi.n	8008a12 <_printf_i+0x23a>
 80089ea:	68e0      	ldr	r0, [r4, #12]
 80089ec:	9b03      	ldr	r3, [sp, #12]
 80089ee:	4298      	cmp	r0, r3
 80089f0:	bfb8      	it	lt
 80089f2:	4618      	movlt	r0, r3
 80089f4:	e7a4      	b.n	8008940 <_printf_i+0x168>
 80089f6:	2301      	movs	r3, #1
 80089f8:	4632      	mov	r2, r6
 80089fa:	4649      	mov	r1, r9
 80089fc:	4640      	mov	r0, r8
 80089fe:	47d0      	blx	sl
 8008a00:	3001      	adds	r0, #1
 8008a02:	d09b      	beq.n	800893c <_printf_i+0x164>
 8008a04:	3501      	adds	r5, #1
 8008a06:	68e3      	ldr	r3, [r4, #12]
 8008a08:	9903      	ldr	r1, [sp, #12]
 8008a0a:	1a5b      	subs	r3, r3, r1
 8008a0c:	42ab      	cmp	r3, r5
 8008a0e:	dcf2      	bgt.n	80089f6 <_printf_i+0x21e>
 8008a10:	e7eb      	b.n	80089ea <_printf_i+0x212>
 8008a12:	2500      	movs	r5, #0
 8008a14:	f104 0619 	add.w	r6, r4, #25
 8008a18:	e7f5      	b.n	8008a06 <_printf_i+0x22e>
 8008a1a:	bf00      	nop
 8008a1c:	0800e0be 	.word	0x0800e0be
 8008a20:	0800e0cf 	.word	0x0800e0cf

08008a24 <_scanf_float>:
 8008a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a28:	b087      	sub	sp, #28
 8008a2a:	4617      	mov	r7, r2
 8008a2c:	9303      	str	r3, [sp, #12]
 8008a2e:	688b      	ldr	r3, [r1, #8]
 8008a30:	1e5a      	subs	r2, r3, #1
 8008a32:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008a36:	bf83      	ittte	hi
 8008a38:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008a3c:	195b      	addhi	r3, r3, r5
 8008a3e:	9302      	strhi	r3, [sp, #8]
 8008a40:	2300      	movls	r3, #0
 8008a42:	bf86      	itte	hi
 8008a44:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008a48:	608b      	strhi	r3, [r1, #8]
 8008a4a:	9302      	strls	r3, [sp, #8]
 8008a4c:	680b      	ldr	r3, [r1, #0]
 8008a4e:	468b      	mov	fp, r1
 8008a50:	2500      	movs	r5, #0
 8008a52:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008a56:	f84b 3b1c 	str.w	r3, [fp], #28
 8008a5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008a5e:	4680      	mov	r8, r0
 8008a60:	460c      	mov	r4, r1
 8008a62:	465e      	mov	r6, fp
 8008a64:	46aa      	mov	sl, r5
 8008a66:	46a9      	mov	r9, r5
 8008a68:	9501      	str	r5, [sp, #4]
 8008a6a:	68a2      	ldr	r2, [r4, #8]
 8008a6c:	b152      	cbz	r2, 8008a84 <_scanf_float+0x60>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2b4e      	cmp	r3, #78	; 0x4e
 8008a74:	d864      	bhi.n	8008b40 <_scanf_float+0x11c>
 8008a76:	2b40      	cmp	r3, #64	; 0x40
 8008a78:	d83c      	bhi.n	8008af4 <_scanf_float+0xd0>
 8008a7a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008a7e:	b2c8      	uxtb	r0, r1
 8008a80:	280e      	cmp	r0, #14
 8008a82:	d93a      	bls.n	8008afa <_scanf_float+0xd6>
 8008a84:	f1b9 0f00 	cmp.w	r9, #0
 8008a88:	d003      	beq.n	8008a92 <_scanf_float+0x6e>
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a96:	f1ba 0f01 	cmp.w	sl, #1
 8008a9a:	f200 8113 	bhi.w	8008cc4 <_scanf_float+0x2a0>
 8008a9e:	455e      	cmp	r6, fp
 8008aa0:	f200 8105 	bhi.w	8008cae <_scanf_float+0x28a>
 8008aa4:	2501      	movs	r5, #1
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	b007      	add	sp, #28
 8008aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008ab2:	2a0d      	cmp	r2, #13
 8008ab4:	d8e6      	bhi.n	8008a84 <_scanf_float+0x60>
 8008ab6:	a101      	add	r1, pc, #4	; (adr r1, 8008abc <_scanf_float+0x98>)
 8008ab8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008abc:	08008bfb 	.word	0x08008bfb
 8008ac0:	08008a85 	.word	0x08008a85
 8008ac4:	08008a85 	.word	0x08008a85
 8008ac8:	08008a85 	.word	0x08008a85
 8008acc:	08008c5b 	.word	0x08008c5b
 8008ad0:	08008c33 	.word	0x08008c33
 8008ad4:	08008a85 	.word	0x08008a85
 8008ad8:	08008a85 	.word	0x08008a85
 8008adc:	08008c09 	.word	0x08008c09
 8008ae0:	08008a85 	.word	0x08008a85
 8008ae4:	08008a85 	.word	0x08008a85
 8008ae8:	08008a85 	.word	0x08008a85
 8008aec:	08008a85 	.word	0x08008a85
 8008af0:	08008bc1 	.word	0x08008bc1
 8008af4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008af8:	e7db      	b.n	8008ab2 <_scanf_float+0x8e>
 8008afa:	290e      	cmp	r1, #14
 8008afc:	d8c2      	bhi.n	8008a84 <_scanf_float+0x60>
 8008afe:	a001      	add	r0, pc, #4	; (adr r0, 8008b04 <_scanf_float+0xe0>)
 8008b00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008b04:	08008bb3 	.word	0x08008bb3
 8008b08:	08008a85 	.word	0x08008a85
 8008b0c:	08008bb3 	.word	0x08008bb3
 8008b10:	08008c47 	.word	0x08008c47
 8008b14:	08008a85 	.word	0x08008a85
 8008b18:	08008b61 	.word	0x08008b61
 8008b1c:	08008b9d 	.word	0x08008b9d
 8008b20:	08008b9d 	.word	0x08008b9d
 8008b24:	08008b9d 	.word	0x08008b9d
 8008b28:	08008b9d 	.word	0x08008b9d
 8008b2c:	08008b9d 	.word	0x08008b9d
 8008b30:	08008b9d 	.word	0x08008b9d
 8008b34:	08008b9d 	.word	0x08008b9d
 8008b38:	08008b9d 	.word	0x08008b9d
 8008b3c:	08008b9d 	.word	0x08008b9d
 8008b40:	2b6e      	cmp	r3, #110	; 0x6e
 8008b42:	d809      	bhi.n	8008b58 <_scanf_float+0x134>
 8008b44:	2b60      	cmp	r3, #96	; 0x60
 8008b46:	d8b2      	bhi.n	8008aae <_scanf_float+0x8a>
 8008b48:	2b54      	cmp	r3, #84	; 0x54
 8008b4a:	d077      	beq.n	8008c3c <_scanf_float+0x218>
 8008b4c:	2b59      	cmp	r3, #89	; 0x59
 8008b4e:	d199      	bne.n	8008a84 <_scanf_float+0x60>
 8008b50:	2d07      	cmp	r5, #7
 8008b52:	d197      	bne.n	8008a84 <_scanf_float+0x60>
 8008b54:	2508      	movs	r5, #8
 8008b56:	e029      	b.n	8008bac <_scanf_float+0x188>
 8008b58:	2b74      	cmp	r3, #116	; 0x74
 8008b5a:	d06f      	beq.n	8008c3c <_scanf_float+0x218>
 8008b5c:	2b79      	cmp	r3, #121	; 0x79
 8008b5e:	e7f6      	b.n	8008b4e <_scanf_float+0x12a>
 8008b60:	6821      	ldr	r1, [r4, #0]
 8008b62:	05c8      	lsls	r0, r1, #23
 8008b64:	d51a      	bpl.n	8008b9c <_scanf_float+0x178>
 8008b66:	9b02      	ldr	r3, [sp, #8]
 8008b68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008b6c:	6021      	str	r1, [r4, #0]
 8008b6e:	f109 0901 	add.w	r9, r9, #1
 8008b72:	b11b      	cbz	r3, 8008b7c <_scanf_float+0x158>
 8008b74:	3b01      	subs	r3, #1
 8008b76:	3201      	adds	r2, #1
 8008b78:	9302      	str	r3, [sp, #8]
 8008b7a:	60a2      	str	r2, [r4, #8]
 8008b7c:	68a3      	ldr	r3, [r4, #8]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	60a3      	str	r3, [r4, #8]
 8008b82:	6923      	ldr	r3, [r4, #16]
 8008b84:	3301      	adds	r3, #1
 8008b86:	6123      	str	r3, [r4, #16]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	607b      	str	r3, [r7, #4]
 8008b90:	f340 8084 	ble.w	8008c9c <_scanf_float+0x278>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	3301      	adds	r3, #1
 8008b98:	603b      	str	r3, [r7, #0]
 8008b9a:	e766      	b.n	8008a6a <_scanf_float+0x46>
 8008b9c:	eb1a 0f05 	cmn.w	sl, r5
 8008ba0:	f47f af70 	bne.w	8008a84 <_scanf_float+0x60>
 8008ba4:	6822      	ldr	r2, [r4, #0]
 8008ba6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008baa:	6022      	str	r2, [r4, #0]
 8008bac:	f806 3b01 	strb.w	r3, [r6], #1
 8008bb0:	e7e4      	b.n	8008b7c <_scanf_float+0x158>
 8008bb2:	6822      	ldr	r2, [r4, #0]
 8008bb4:	0610      	lsls	r0, r2, #24
 8008bb6:	f57f af65 	bpl.w	8008a84 <_scanf_float+0x60>
 8008bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bbe:	e7f4      	b.n	8008baa <_scanf_float+0x186>
 8008bc0:	f1ba 0f00 	cmp.w	sl, #0
 8008bc4:	d10e      	bne.n	8008be4 <_scanf_float+0x1c0>
 8008bc6:	f1b9 0f00 	cmp.w	r9, #0
 8008bca:	d10e      	bne.n	8008bea <_scanf_float+0x1c6>
 8008bcc:	6822      	ldr	r2, [r4, #0]
 8008bce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008bd2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008bd6:	d108      	bne.n	8008bea <_scanf_float+0x1c6>
 8008bd8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008bdc:	6022      	str	r2, [r4, #0]
 8008bde:	f04f 0a01 	mov.w	sl, #1
 8008be2:	e7e3      	b.n	8008bac <_scanf_float+0x188>
 8008be4:	f1ba 0f02 	cmp.w	sl, #2
 8008be8:	d055      	beq.n	8008c96 <_scanf_float+0x272>
 8008bea:	2d01      	cmp	r5, #1
 8008bec:	d002      	beq.n	8008bf4 <_scanf_float+0x1d0>
 8008bee:	2d04      	cmp	r5, #4
 8008bf0:	f47f af48 	bne.w	8008a84 <_scanf_float+0x60>
 8008bf4:	3501      	adds	r5, #1
 8008bf6:	b2ed      	uxtb	r5, r5
 8008bf8:	e7d8      	b.n	8008bac <_scanf_float+0x188>
 8008bfa:	f1ba 0f01 	cmp.w	sl, #1
 8008bfe:	f47f af41 	bne.w	8008a84 <_scanf_float+0x60>
 8008c02:	f04f 0a02 	mov.w	sl, #2
 8008c06:	e7d1      	b.n	8008bac <_scanf_float+0x188>
 8008c08:	b97d      	cbnz	r5, 8008c2a <_scanf_float+0x206>
 8008c0a:	f1b9 0f00 	cmp.w	r9, #0
 8008c0e:	f47f af3c 	bne.w	8008a8a <_scanf_float+0x66>
 8008c12:	6822      	ldr	r2, [r4, #0]
 8008c14:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008c18:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008c1c:	f47f af39 	bne.w	8008a92 <_scanf_float+0x6e>
 8008c20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008c24:	6022      	str	r2, [r4, #0]
 8008c26:	2501      	movs	r5, #1
 8008c28:	e7c0      	b.n	8008bac <_scanf_float+0x188>
 8008c2a:	2d03      	cmp	r5, #3
 8008c2c:	d0e2      	beq.n	8008bf4 <_scanf_float+0x1d0>
 8008c2e:	2d05      	cmp	r5, #5
 8008c30:	e7de      	b.n	8008bf0 <_scanf_float+0x1cc>
 8008c32:	2d02      	cmp	r5, #2
 8008c34:	f47f af26 	bne.w	8008a84 <_scanf_float+0x60>
 8008c38:	2503      	movs	r5, #3
 8008c3a:	e7b7      	b.n	8008bac <_scanf_float+0x188>
 8008c3c:	2d06      	cmp	r5, #6
 8008c3e:	f47f af21 	bne.w	8008a84 <_scanf_float+0x60>
 8008c42:	2507      	movs	r5, #7
 8008c44:	e7b2      	b.n	8008bac <_scanf_float+0x188>
 8008c46:	6822      	ldr	r2, [r4, #0]
 8008c48:	0591      	lsls	r1, r2, #22
 8008c4a:	f57f af1b 	bpl.w	8008a84 <_scanf_float+0x60>
 8008c4e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008c52:	6022      	str	r2, [r4, #0]
 8008c54:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c58:	e7a8      	b.n	8008bac <_scanf_float+0x188>
 8008c5a:	6822      	ldr	r2, [r4, #0]
 8008c5c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008c60:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008c64:	d006      	beq.n	8008c74 <_scanf_float+0x250>
 8008c66:	0550      	lsls	r0, r2, #21
 8008c68:	f57f af0c 	bpl.w	8008a84 <_scanf_float+0x60>
 8008c6c:	f1b9 0f00 	cmp.w	r9, #0
 8008c70:	f43f af0f 	beq.w	8008a92 <_scanf_float+0x6e>
 8008c74:	0591      	lsls	r1, r2, #22
 8008c76:	bf58      	it	pl
 8008c78:	9901      	ldrpl	r1, [sp, #4]
 8008c7a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008c7e:	bf58      	it	pl
 8008c80:	eba9 0101 	subpl.w	r1, r9, r1
 8008c84:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008c88:	bf58      	it	pl
 8008c8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008c8e:	6022      	str	r2, [r4, #0]
 8008c90:	f04f 0900 	mov.w	r9, #0
 8008c94:	e78a      	b.n	8008bac <_scanf_float+0x188>
 8008c96:	f04f 0a03 	mov.w	sl, #3
 8008c9a:	e787      	b.n	8008bac <_scanf_float+0x188>
 8008c9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008ca0:	4639      	mov	r1, r7
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	4798      	blx	r3
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	f43f aedf 	beq.w	8008a6a <_scanf_float+0x46>
 8008cac:	e6ea      	b.n	8008a84 <_scanf_float+0x60>
 8008cae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cb6:	463a      	mov	r2, r7
 8008cb8:	4640      	mov	r0, r8
 8008cba:	4798      	blx	r3
 8008cbc:	6923      	ldr	r3, [r4, #16]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	6123      	str	r3, [r4, #16]
 8008cc2:	e6ec      	b.n	8008a9e <_scanf_float+0x7a>
 8008cc4:	1e6b      	subs	r3, r5, #1
 8008cc6:	2b06      	cmp	r3, #6
 8008cc8:	d825      	bhi.n	8008d16 <_scanf_float+0x2f2>
 8008cca:	2d02      	cmp	r5, #2
 8008ccc:	d836      	bhi.n	8008d3c <_scanf_float+0x318>
 8008cce:	455e      	cmp	r6, fp
 8008cd0:	f67f aee8 	bls.w	8008aa4 <_scanf_float+0x80>
 8008cd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cd8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cdc:	463a      	mov	r2, r7
 8008cde:	4640      	mov	r0, r8
 8008ce0:	4798      	blx	r3
 8008ce2:	6923      	ldr	r3, [r4, #16]
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	6123      	str	r3, [r4, #16]
 8008ce8:	e7f1      	b.n	8008cce <_scanf_float+0x2aa>
 8008cea:	9802      	ldr	r0, [sp, #8]
 8008cec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cf0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008cf4:	9002      	str	r0, [sp, #8]
 8008cf6:	463a      	mov	r2, r7
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	4798      	blx	r3
 8008cfc:	6923      	ldr	r3, [r4, #16]
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	6123      	str	r3, [r4, #16]
 8008d02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d06:	fa5f fa8a 	uxtb.w	sl, sl
 8008d0a:	f1ba 0f02 	cmp.w	sl, #2
 8008d0e:	d1ec      	bne.n	8008cea <_scanf_float+0x2c6>
 8008d10:	3d03      	subs	r5, #3
 8008d12:	b2ed      	uxtb	r5, r5
 8008d14:	1b76      	subs	r6, r6, r5
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	05da      	lsls	r2, r3, #23
 8008d1a:	d52f      	bpl.n	8008d7c <_scanf_float+0x358>
 8008d1c:	055b      	lsls	r3, r3, #21
 8008d1e:	d510      	bpl.n	8008d42 <_scanf_float+0x31e>
 8008d20:	455e      	cmp	r6, fp
 8008d22:	f67f aebf 	bls.w	8008aa4 <_scanf_float+0x80>
 8008d26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d2e:	463a      	mov	r2, r7
 8008d30:	4640      	mov	r0, r8
 8008d32:	4798      	blx	r3
 8008d34:	6923      	ldr	r3, [r4, #16]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	6123      	str	r3, [r4, #16]
 8008d3a:	e7f1      	b.n	8008d20 <_scanf_float+0x2fc>
 8008d3c:	46aa      	mov	sl, r5
 8008d3e:	9602      	str	r6, [sp, #8]
 8008d40:	e7df      	b.n	8008d02 <_scanf_float+0x2de>
 8008d42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008d46:	6923      	ldr	r3, [r4, #16]
 8008d48:	2965      	cmp	r1, #101	; 0x65
 8008d4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d4e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008d52:	6123      	str	r3, [r4, #16]
 8008d54:	d00c      	beq.n	8008d70 <_scanf_float+0x34c>
 8008d56:	2945      	cmp	r1, #69	; 0x45
 8008d58:	d00a      	beq.n	8008d70 <_scanf_float+0x34c>
 8008d5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d5e:	463a      	mov	r2, r7
 8008d60:	4640      	mov	r0, r8
 8008d62:	4798      	blx	r3
 8008d64:	6923      	ldr	r3, [r4, #16]
 8008d66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	1eb5      	subs	r5, r6, #2
 8008d6e:	6123      	str	r3, [r4, #16]
 8008d70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d74:	463a      	mov	r2, r7
 8008d76:	4640      	mov	r0, r8
 8008d78:	4798      	blx	r3
 8008d7a:	462e      	mov	r6, r5
 8008d7c:	6825      	ldr	r5, [r4, #0]
 8008d7e:	f015 0510 	ands.w	r5, r5, #16
 8008d82:	d159      	bne.n	8008e38 <_scanf_float+0x414>
 8008d84:	7035      	strb	r5, [r6, #0]
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d90:	d11b      	bne.n	8008dca <_scanf_float+0x3a6>
 8008d92:	9b01      	ldr	r3, [sp, #4]
 8008d94:	454b      	cmp	r3, r9
 8008d96:	eba3 0209 	sub.w	r2, r3, r9
 8008d9a:	d123      	bne.n	8008de4 <_scanf_float+0x3c0>
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4659      	mov	r1, fp
 8008da0:	4640      	mov	r0, r8
 8008da2:	f000 fe97 	bl	8009ad4 <_strtod_r>
 8008da6:	6822      	ldr	r2, [r4, #0]
 8008da8:	9b03      	ldr	r3, [sp, #12]
 8008daa:	f012 0f02 	tst.w	r2, #2
 8008dae:	ec57 6b10 	vmov	r6, r7, d0
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	d021      	beq.n	8008dfa <_scanf_float+0x3d6>
 8008db6:	9903      	ldr	r1, [sp, #12]
 8008db8:	1d1a      	adds	r2, r3, #4
 8008dba:	600a      	str	r2, [r1, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	e9c3 6700 	strd	r6, r7, [r3]
 8008dc2:	68e3      	ldr	r3, [r4, #12]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	60e3      	str	r3, [r4, #12]
 8008dc8:	e66d      	b.n	8008aa6 <_scanf_float+0x82>
 8008dca:	9b04      	ldr	r3, [sp, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d0e5      	beq.n	8008d9c <_scanf_float+0x378>
 8008dd0:	9905      	ldr	r1, [sp, #20]
 8008dd2:	230a      	movs	r3, #10
 8008dd4:	462a      	mov	r2, r5
 8008dd6:	3101      	adds	r1, #1
 8008dd8:	4640      	mov	r0, r8
 8008dda:	f000 ff03 	bl	8009be4 <_strtol_r>
 8008dde:	9b04      	ldr	r3, [sp, #16]
 8008de0:	9e05      	ldr	r6, [sp, #20]
 8008de2:	1ac2      	subs	r2, r0, r3
 8008de4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008de8:	429e      	cmp	r6, r3
 8008dea:	bf28      	it	cs
 8008dec:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008df0:	4912      	ldr	r1, [pc, #72]	; (8008e3c <_scanf_float+0x418>)
 8008df2:	4630      	mov	r0, r6
 8008df4:	f000 f82c 	bl	8008e50 <siprintf>
 8008df8:	e7d0      	b.n	8008d9c <_scanf_float+0x378>
 8008dfa:	9903      	ldr	r1, [sp, #12]
 8008dfc:	f012 0f04 	tst.w	r2, #4
 8008e00:	f103 0204 	add.w	r2, r3, #4
 8008e04:	600a      	str	r2, [r1, #0]
 8008e06:	d1d9      	bne.n	8008dbc <_scanf_float+0x398>
 8008e08:	f8d3 8000 	ldr.w	r8, [r3]
 8008e0c:	ee10 2a10 	vmov	r2, s0
 8008e10:	ee10 0a10 	vmov	r0, s0
 8008e14:	463b      	mov	r3, r7
 8008e16:	4639      	mov	r1, r7
 8008e18:	f7f7 fe90 	bl	8000b3c <__aeabi_dcmpun>
 8008e1c:	b128      	cbz	r0, 8008e2a <_scanf_float+0x406>
 8008e1e:	4808      	ldr	r0, [pc, #32]	; (8008e40 <_scanf_float+0x41c>)
 8008e20:	f000 f810 	bl	8008e44 <nanf>
 8008e24:	ed88 0a00 	vstr	s0, [r8]
 8008e28:	e7cb      	b.n	8008dc2 <_scanf_float+0x39e>
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	f7f7 fee3 	bl	8000bf8 <__aeabi_d2f>
 8008e32:	f8c8 0000 	str.w	r0, [r8]
 8008e36:	e7c4      	b.n	8008dc2 <_scanf_float+0x39e>
 8008e38:	2500      	movs	r5, #0
 8008e3a:	e634      	b.n	8008aa6 <_scanf_float+0x82>
 8008e3c:	0800e0e0 	.word	0x0800e0e0
 8008e40:	0800e4e8 	.word	0x0800e4e8

08008e44 <nanf>:
 8008e44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e4c <nanf+0x8>
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	7fc00000 	.word	0x7fc00000

08008e50 <siprintf>:
 8008e50:	b40e      	push	{r1, r2, r3}
 8008e52:	b500      	push	{lr}
 8008e54:	b09c      	sub	sp, #112	; 0x70
 8008e56:	ab1d      	add	r3, sp, #116	; 0x74
 8008e58:	9002      	str	r0, [sp, #8]
 8008e5a:	9006      	str	r0, [sp, #24]
 8008e5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e60:	4809      	ldr	r0, [pc, #36]	; (8008e88 <siprintf+0x38>)
 8008e62:	9107      	str	r1, [sp, #28]
 8008e64:	9104      	str	r1, [sp, #16]
 8008e66:	4909      	ldr	r1, [pc, #36]	; (8008e8c <siprintf+0x3c>)
 8008e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e6c:	9105      	str	r1, [sp, #20]
 8008e6e:	6800      	ldr	r0, [r0, #0]
 8008e70:	9301      	str	r3, [sp, #4]
 8008e72:	a902      	add	r1, sp, #8
 8008e74:	f002 fed4 	bl	800bc20 <_svfiprintf_r>
 8008e78:	9b02      	ldr	r3, [sp, #8]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	701a      	strb	r2, [r3, #0]
 8008e7e:	b01c      	add	sp, #112	; 0x70
 8008e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e84:	b003      	add	sp, #12
 8008e86:	4770      	bx	lr
 8008e88:	2000020c 	.word	0x2000020c
 8008e8c:	ffff0208 	.word	0xffff0208

08008e90 <sulp>:
 8008e90:	b570      	push	{r4, r5, r6, lr}
 8008e92:	4604      	mov	r4, r0
 8008e94:	460d      	mov	r5, r1
 8008e96:	ec45 4b10 	vmov	d0, r4, r5
 8008e9a:	4616      	mov	r6, r2
 8008e9c:	f002 fc1e 	bl	800b6dc <__ulp>
 8008ea0:	ec51 0b10 	vmov	r0, r1, d0
 8008ea4:	b17e      	cbz	r6, 8008ec6 <sulp+0x36>
 8008ea6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008eaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	dd09      	ble.n	8008ec6 <sulp+0x36>
 8008eb2:	051b      	lsls	r3, r3, #20
 8008eb4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008eb8:	2400      	movs	r4, #0
 8008eba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	462b      	mov	r3, r5
 8008ec2:	f7f7 fba1 	bl	8000608 <__aeabi_dmul>
 8008ec6:	bd70      	pop	{r4, r5, r6, pc}

08008ec8 <_strtod_l>:
 8008ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	ed2d 8b02 	vpush	{d8}
 8008ed0:	b09d      	sub	sp, #116	; 0x74
 8008ed2:	461f      	mov	r7, r3
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	9318      	str	r3, [sp, #96]	; 0x60
 8008ed8:	4ba2      	ldr	r3, [pc, #648]	; (8009164 <_strtod_l+0x29c>)
 8008eda:	9213      	str	r2, [sp, #76]	; 0x4c
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	9305      	str	r3, [sp, #20]
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	4688      	mov	r8, r1
 8008ee6:	f7f7 f97b 	bl	80001e0 <strlen>
 8008eea:	f04f 0a00 	mov.w	sl, #0
 8008eee:	4605      	mov	r5, r0
 8008ef0:	f04f 0b00 	mov.w	fp, #0
 8008ef4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008ef8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008efa:	781a      	ldrb	r2, [r3, #0]
 8008efc:	2a2b      	cmp	r2, #43	; 0x2b
 8008efe:	d04e      	beq.n	8008f9e <_strtod_l+0xd6>
 8008f00:	d83b      	bhi.n	8008f7a <_strtod_l+0xb2>
 8008f02:	2a0d      	cmp	r2, #13
 8008f04:	d834      	bhi.n	8008f70 <_strtod_l+0xa8>
 8008f06:	2a08      	cmp	r2, #8
 8008f08:	d834      	bhi.n	8008f74 <_strtod_l+0xac>
 8008f0a:	2a00      	cmp	r2, #0
 8008f0c:	d03e      	beq.n	8008f8c <_strtod_l+0xc4>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	930a      	str	r3, [sp, #40]	; 0x28
 8008f12:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008f14:	7833      	ldrb	r3, [r6, #0]
 8008f16:	2b30      	cmp	r3, #48	; 0x30
 8008f18:	f040 80b0 	bne.w	800907c <_strtod_l+0x1b4>
 8008f1c:	7873      	ldrb	r3, [r6, #1]
 8008f1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f22:	2b58      	cmp	r3, #88	; 0x58
 8008f24:	d168      	bne.n	8008ff8 <_strtod_l+0x130>
 8008f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f28:	9301      	str	r3, [sp, #4]
 8008f2a:	ab18      	add	r3, sp, #96	; 0x60
 8008f2c:	9702      	str	r7, [sp, #8]
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	4a8d      	ldr	r2, [pc, #564]	; (8009168 <_strtod_l+0x2a0>)
 8008f32:	ab19      	add	r3, sp, #100	; 0x64
 8008f34:	a917      	add	r1, sp, #92	; 0x5c
 8008f36:	4620      	mov	r0, r4
 8008f38:	f001 fd38 	bl	800a9ac <__gethex>
 8008f3c:	f010 0707 	ands.w	r7, r0, #7
 8008f40:	4605      	mov	r5, r0
 8008f42:	d005      	beq.n	8008f50 <_strtod_l+0x88>
 8008f44:	2f06      	cmp	r7, #6
 8008f46:	d12c      	bne.n	8008fa2 <_strtod_l+0xda>
 8008f48:	3601      	adds	r6, #1
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	9617      	str	r6, [sp, #92]	; 0x5c
 8008f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f040 8590 	bne.w	8009a78 <_strtod_l+0xbb0>
 8008f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f5a:	b1eb      	cbz	r3, 8008f98 <_strtod_l+0xd0>
 8008f5c:	4652      	mov	r2, sl
 8008f5e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f62:	ec43 2b10 	vmov	d0, r2, r3
 8008f66:	b01d      	add	sp, #116	; 0x74
 8008f68:	ecbd 8b02 	vpop	{d8}
 8008f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f70:	2a20      	cmp	r2, #32
 8008f72:	d1cc      	bne.n	8008f0e <_strtod_l+0x46>
 8008f74:	3301      	adds	r3, #1
 8008f76:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f78:	e7be      	b.n	8008ef8 <_strtod_l+0x30>
 8008f7a:	2a2d      	cmp	r2, #45	; 0x2d
 8008f7c:	d1c7      	bne.n	8008f0e <_strtod_l+0x46>
 8008f7e:	2201      	movs	r2, #1
 8008f80:	920a      	str	r2, [sp, #40]	; 0x28
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f86:	785b      	ldrb	r3, [r3, #1]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1c2      	bne.n	8008f12 <_strtod_l+0x4a>
 8008f8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f8e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f040 856e 	bne.w	8009a74 <_strtod_l+0xbac>
 8008f98:	4652      	mov	r2, sl
 8008f9a:	465b      	mov	r3, fp
 8008f9c:	e7e1      	b.n	8008f62 <_strtod_l+0x9a>
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	e7ee      	b.n	8008f80 <_strtod_l+0xb8>
 8008fa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008fa4:	b13a      	cbz	r2, 8008fb6 <_strtod_l+0xee>
 8008fa6:	2135      	movs	r1, #53	; 0x35
 8008fa8:	a81a      	add	r0, sp, #104	; 0x68
 8008faa:	f002 fca2 	bl	800b8f2 <__copybits>
 8008fae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f002 f861 	bl	800b078 <_Bfree>
 8008fb6:	3f01      	subs	r7, #1
 8008fb8:	2f04      	cmp	r7, #4
 8008fba:	d806      	bhi.n	8008fca <_strtod_l+0x102>
 8008fbc:	e8df f007 	tbb	[pc, r7]
 8008fc0:	1714030a 	.word	0x1714030a
 8008fc4:	0a          	.byte	0x0a
 8008fc5:	00          	.byte	0x00
 8008fc6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008fca:	0728      	lsls	r0, r5, #28
 8008fcc:	d5c0      	bpl.n	8008f50 <_strtod_l+0x88>
 8008fce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008fd2:	e7bd      	b.n	8008f50 <_strtod_l+0x88>
 8008fd4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008fd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008fda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008fde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008fe2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008fe6:	e7f0      	b.n	8008fca <_strtod_l+0x102>
 8008fe8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800916c <_strtod_l+0x2a4>
 8008fec:	e7ed      	b.n	8008fca <_strtod_l+0x102>
 8008fee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008ff2:	f04f 3aff 	mov.w	sl, #4294967295
 8008ff6:	e7e8      	b.n	8008fca <_strtod_l+0x102>
 8008ff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ffa:	1c5a      	adds	r2, r3, #1
 8008ffc:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ffe:	785b      	ldrb	r3, [r3, #1]
 8009000:	2b30      	cmp	r3, #48	; 0x30
 8009002:	d0f9      	beq.n	8008ff8 <_strtod_l+0x130>
 8009004:	2b00      	cmp	r3, #0
 8009006:	d0a3      	beq.n	8008f50 <_strtod_l+0x88>
 8009008:	2301      	movs	r3, #1
 800900a:	f04f 0900 	mov.w	r9, #0
 800900e:	9304      	str	r3, [sp, #16]
 8009010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009012:	9308      	str	r3, [sp, #32]
 8009014:	f8cd 901c 	str.w	r9, [sp, #28]
 8009018:	464f      	mov	r7, r9
 800901a:	220a      	movs	r2, #10
 800901c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800901e:	7806      	ldrb	r6, [r0, #0]
 8009020:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009024:	b2d9      	uxtb	r1, r3
 8009026:	2909      	cmp	r1, #9
 8009028:	d92a      	bls.n	8009080 <_strtod_l+0x1b8>
 800902a:	9905      	ldr	r1, [sp, #20]
 800902c:	462a      	mov	r2, r5
 800902e:	f002 ff0f 	bl	800be50 <strncmp>
 8009032:	b398      	cbz	r0, 800909c <_strtod_l+0x1d4>
 8009034:	2000      	movs	r0, #0
 8009036:	4632      	mov	r2, r6
 8009038:	463d      	mov	r5, r7
 800903a:	9005      	str	r0, [sp, #20]
 800903c:	4603      	mov	r3, r0
 800903e:	2a65      	cmp	r2, #101	; 0x65
 8009040:	d001      	beq.n	8009046 <_strtod_l+0x17e>
 8009042:	2a45      	cmp	r2, #69	; 0x45
 8009044:	d118      	bne.n	8009078 <_strtod_l+0x1b0>
 8009046:	b91d      	cbnz	r5, 8009050 <_strtod_l+0x188>
 8009048:	9a04      	ldr	r2, [sp, #16]
 800904a:	4302      	orrs	r2, r0
 800904c:	d09e      	beq.n	8008f8c <_strtod_l+0xc4>
 800904e:	2500      	movs	r5, #0
 8009050:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009054:	f108 0201 	add.w	r2, r8, #1
 8009058:	9217      	str	r2, [sp, #92]	; 0x5c
 800905a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800905e:	2a2b      	cmp	r2, #43	; 0x2b
 8009060:	d075      	beq.n	800914e <_strtod_l+0x286>
 8009062:	2a2d      	cmp	r2, #45	; 0x2d
 8009064:	d07b      	beq.n	800915e <_strtod_l+0x296>
 8009066:	f04f 0c00 	mov.w	ip, #0
 800906a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800906e:	2909      	cmp	r1, #9
 8009070:	f240 8082 	bls.w	8009178 <_strtod_l+0x2b0>
 8009074:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009078:	2600      	movs	r6, #0
 800907a:	e09d      	b.n	80091b8 <_strtod_l+0x2f0>
 800907c:	2300      	movs	r3, #0
 800907e:	e7c4      	b.n	800900a <_strtod_l+0x142>
 8009080:	2f08      	cmp	r7, #8
 8009082:	bfd8      	it	le
 8009084:	9907      	ldrle	r1, [sp, #28]
 8009086:	f100 0001 	add.w	r0, r0, #1
 800908a:	bfda      	itte	le
 800908c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009090:	9307      	strle	r3, [sp, #28]
 8009092:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009096:	3701      	adds	r7, #1
 8009098:	9017      	str	r0, [sp, #92]	; 0x5c
 800909a:	e7bf      	b.n	800901c <_strtod_l+0x154>
 800909c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800909e:	195a      	adds	r2, r3, r5
 80090a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80090a2:	5d5a      	ldrb	r2, [r3, r5]
 80090a4:	2f00      	cmp	r7, #0
 80090a6:	d037      	beq.n	8009118 <_strtod_l+0x250>
 80090a8:	9005      	str	r0, [sp, #20]
 80090aa:	463d      	mov	r5, r7
 80090ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80090b0:	2b09      	cmp	r3, #9
 80090b2:	d912      	bls.n	80090da <_strtod_l+0x212>
 80090b4:	2301      	movs	r3, #1
 80090b6:	e7c2      	b.n	800903e <_strtod_l+0x176>
 80090b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80090be:	785a      	ldrb	r2, [r3, #1]
 80090c0:	3001      	adds	r0, #1
 80090c2:	2a30      	cmp	r2, #48	; 0x30
 80090c4:	d0f8      	beq.n	80090b8 <_strtod_l+0x1f0>
 80090c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80090ca:	2b08      	cmp	r3, #8
 80090cc:	f200 84d9 	bhi.w	8009a82 <_strtod_l+0xbba>
 80090d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090d2:	9005      	str	r0, [sp, #20]
 80090d4:	2000      	movs	r0, #0
 80090d6:	9308      	str	r3, [sp, #32]
 80090d8:	4605      	mov	r5, r0
 80090da:	3a30      	subs	r2, #48	; 0x30
 80090dc:	f100 0301 	add.w	r3, r0, #1
 80090e0:	d014      	beq.n	800910c <_strtod_l+0x244>
 80090e2:	9905      	ldr	r1, [sp, #20]
 80090e4:	4419      	add	r1, r3
 80090e6:	9105      	str	r1, [sp, #20]
 80090e8:	462b      	mov	r3, r5
 80090ea:	eb00 0e05 	add.w	lr, r0, r5
 80090ee:	210a      	movs	r1, #10
 80090f0:	4573      	cmp	r3, lr
 80090f2:	d113      	bne.n	800911c <_strtod_l+0x254>
 80090f4:	182b      	adds	r3, r5, r0
 80090f6:	2b08      	cmp	r3, #8
 80090f8:	f105 0501 	add.w	r5, r5, #1
 80090fc:	4405      	add	r5, r0
 80090fe:	dc1c      	bgt.n	800913a <_strtod_l+0x272>
 8009100:	9907      	ldr	r1, [sp, #28]
 8009102:	230a      	movs	r3, #10
 8009104:	fb03 2301 	mla	r3, r3, r1, r2
 8009108:	9307      	str	r3, [sp, #28]
 800910a:	2300      	movs	r3, #0
 800910c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800910e:	1c51      	adds	r1, r2, #1
 8009110:	9117      	str	r1, [sp, #92]	; 0x5c
 8009112:	7852      	ldrb	r2, [r2, #1]
 8009114:	4618      	mov	r0, r3
 8009116:	e7c9      	b.n	80090ac <_strtod_l+0x1e4>
 8009118:	4638      	mov	r0, r7
 800911a:	e7d2      	b.n	80090c2 <_strtod_l+0x1fa>
 800911c:	2b08      	cmp	r3, #8
 800911e:	dc04      	bgt.n	800912a <_strtod_l+0x262>
 8009120:	9e07      	ldr	r6, [sp, #28]
 8009122:	434e      	muls	r6, r1
 8009124:	9607      	str	r6, [sp, #28]
 8009126:	3301      	adds	r3, #1
 8009128:	e7e2      	b.n	80090f0 <_strtod_l+0x228>
 800912a:	f103 0c01 	add.w	ip, r3, #1
 800912e:	f1bc 0f10 	cmp.w	ip, #16
 8009132:	bfd8      	it	le
 8009134:	fb01 f909 	mulle.w	r9, r1, r9
 8009138:	e7f5      	b.n	8009126 <_strtod_l+0x25e>
 800913a:	2d10      	cmp	r5, #16
 800913c:	bfdc      	itt	le
 800913e:	230a      	movle	r3, #10
 8009140:	fb03 2909 	mlale	r9, r3, r9, r2
 8009144:	e7e1      	b.n	800910a <_strtod_l+0x242>
 8009146:	2300      	movs	r3, #0
 8009148:	9305      	str	r3, [sp, #20]
 800914a:	2301      	movs	r3, #1
 800914c:	e77c      	b.n	8009048 <_strtod_l+0x180>
 800914e:	f04f 0c00 	mov.w	ip, #0
 8009152:	f108 0202 	add.w	r2, r8, #2
 8009156:	9217      	str	r2, [sp, #92]	; 0x5c
 8009158:	f898 2002 	ldrb.w	r2, [r8, #2]
 800915c:	e785      	b.n	800906a <_strtod_l+0x1a2>
 800915e:	f04f 0c01 	mov.w	ip, #1
 8009162:	e7f6      	b.n	8009152 <_strtod_l+0x28a>
 8009164:	0800e330 	.word	0x0800e330
 8009168:	0800e0e8 	.word	0x0800e0e8
 800916c:	7ff00000 	.word	0x7ff00000
 8009170:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009172:	1c51      	adds	r1, r2, #1
 8009174:	9117      	str	r1, [sp, #92]	; 0x5c
 8009176:	7852      	ldrb	r2, [r2, #1]
 8009178:	2a30      	cmp	r2, #48	; 0x30
 800917a:	d0f9      	beq.n	8009170 <_strtod_l+0x2a8>
 800917c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009180:	2908      	cmp	r1, #8
 8009182:	f63f af79 	bhi.w	8009078 <_strtod_l+0x1b0>
 8009186:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800918a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800918c:	9206      	str	r2, [sp, #24]
 800918e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009190:	1c51      	adds	r1, r2, #1
 8009192:	9117      	str	r1, [sp, #92]	; 0x5c
 8009194:	7852      	ldrb	r2, [r2, #1]
 8009196:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800919a:	2e09      	cmp	r6, #9
 800919c:	d937      	bls.n	800920e <_strtod_l+0x346>
 800919e:	9e06      	ldr	r6, [sp, #24]
 80091a0:	1b89      	subs	r1, r1, r6
 80091a2:	2908      	cmp	r1, #8
 80091a4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80091a8:	dc02      	bgt.n	80091b0 <_strtod_l+0x2e8>
 80091aa:	4576      	cmp	r6, lr
 80091ac:	bfa8      	it	ge
 80091ae:	4676      	movge	r6, lr
 80091b0:	f1bc 0f00 	cmp.w	ip, #0
 80091b4:	d000      	beq.n	80091b8 <_strtod_l+0x2f0>
 80091b6:	4276      	negs	r6, r6
 80091b8:	2d00      	cmp	r5, #0
 80091ba:	d14d      	bne.n	8009258 <_strtod_l+0x390>
 80091bc:	9904      	ldr	r1, [sp, #16]
 80091be:	4301      	orrs	r1, r0
 80091c0:	f47f aec6 	bne.w	8008f50 <_strtod_l+0x88>
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f47f aee1 	bne.w	8008f8c <_strtod_l+0xc4>
 80091ca:	2a69      	cmp	r2, #105	; 0x69
 80091cc:	d027      	beq.n	800921e <_strtod_l+0x356>
 80091ce:	dc24      	bgt.n	800921a <_strtod_l+0x352>
 80091d0:	2a49      	cmp	r2, #73	; 0x49
 80091d2:	d024      	beq.n	800921e <_strtod_l+0x356>
 80091d4:	2a4e      	cmp	r2, #78	; 0x4e
 80091d6:	f47f aed9 	bne.w	8008f8c <_strtod_l+0xc4>
 80091da:	499f      	ldr	r1, [pc, #636]	; (8009458 <_strtod_l+0x590>)
 80091dc:	a817      	add	r0, sp, #92	; 0x5c
 80091de:	f001 fe3d 	bl	800ae5c <__match>
 80091e2:	2800      	cmp	r0, #0
 80091e4:	f43f aed2 	beq.w	8008f8c <_strtod_l+0xc4>
 80091e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b28      	cmp	r3, #40	; 0x28
 80091ee:	d12d      	bne.n	800924c <_strtod_l+0x384>
 80091f0:	499a      	ldr	r1, [pc, #616]	; (800945c <_strtod_l+0x594>)
 80091f2:	aa1a      	add	r2, sp, #104	; 0x68
 80091f4:	a817      	add	r0, sp, #92	; 0x5c
 80091f6:	f001 fe45 	bl	800ae84 <__hexnan>
 80091fa:	2805      	cmp	r0, #5
 80091fc:	d126      	bne.n	800924c <_strtod_l+0x384>
 80091fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009200:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009204:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009208:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800920c:	e6a0      	b.n	8008f50 <_strtod_l+0x88>
 800920e:	210a      	movs	r1, #10
 8009210:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009214:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009218:	e7b9      	b.n	800918e <_strtod_l+0x2c6>
 800921a:	2a6e      	cmp	r2, #110	; 0x6e
 800921c:	e7db      	b.n	80091d6 <_strtod_l+0x30e>
 800921e:	4990      	ldr	r1, [pc, #576]	; (8009460 <_strtod_l+0x598>)
 8009220:	a817      	add	r0, sp, #92	; 0x5c
 8009222:	f001 fe1b 	bl	800ae5c <__match>
 8009226:	2800      	cmp	r0, #0
 8009228:	f43f aeb0 	beq.w	8008f8c <_strtod_l+0xc4>
 800922c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800922e:	498d      	ldr	r1, [pc, #564]	; (8009464 <_strtod_l+0x59c>)
 8009230:	3b01      	subs	r3, #1
 8009232:	a817      	add	r0, sp, #92	; 0x5c
 8009234:	9317      	str	r3, [sp, #92]	; 0x5c
 8009236:	f001 fe11 	bl	800ae5c <__match>
 800923a:	b910      	cbnz	r0, 8009242 <_strtod_l+0x37a>
 800923c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800923e:	3301      	adds	r3, #1
 8009240:	9317      	str	r3, [sp, #92]	; 0x5c
 8009242:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009474 <_strtod_l+0x5ac>
 8009246:	f04f 0a00 	mov.w	sl, #0
 800924a:	e681      	b.n	8008f50 <_strtod_l+0x88>
 800924c:	4886      	ldr	r0, [pc, #536]	; (8009468 <_strtod_l+0x5a0>)
 800924e:	f002 fde7 	bl	800be20 <nan>
 8009252:	ec5b ab10 	vmov	sl, fp, d0
 8009256:	e67b      	b.n	8008f50 <_strtod_l+0x88>
 8009258:	9b05      	ldr	r3, [sp, #20]
 800925a:	9807      	ldr	r0, [sp, #28]
 800925c:	1af3      	subs	r3, r6, r3
 800925e:	2f00      	cmp	r7, #0
 8009260:	bf08      	it	eq
 8009262:	462f      	moveq	r7, r5
 8009264:	2d10      	cmp	r5, #16
 8009266:	9306      	str	r3, [sp, #24]
 8009268:	46a8      	mov	r8, r5
 800926a:	bfa8      	it	ge
 800926c:	f04f 0810 	movge.w	r8, #16
 8009270:	f7f7 f950 	bl	8000514 <__aeabi_ui2d>
 8009274:	2d09      	cmp	r5, #9
 8009276:	4682      	mov	sl, r0
 8009278:	468b      	mov	fp, r1
 800927a:	dd13      	ble.n	80092a4 <_strtod_l+0x3dc>
 800927c:	4b7b      	ldr	r3, [pc, #492]	; (800946c <_strtod_l+0x5a4>)
 800927e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009282:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009286:	f7f7 f9bf 	bl	8000608 <__aeabi_dmul>
 800928a:	4682      	mov	sl, r0
 800928c:	4648      	mov	r0, r9
 800928e:	468b      	mov	fp, r1
 8009290:	f7f7 f940 	bl	8000514 <__aeabi_ui2d>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4650      	mov	r0, sl
 800929a:	4659      	mov	r1, fp
 800929c:	f7f6 fffe 	bl	800029c <__adddf3>
 80092a0:	4682      	mov	sl, r0
 80092a2:	468b      	mov	fp, r1
 80092a4:	2d0f      	cmp	r5, #15
 80092a6:	dc38      	bgt.n	800931a <_strtod_l+0x452>
 80092a8:	9b06      	ldr	r3, [sp, #24]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f43f ae50 	beq.w	8008f50 <_strtod_l+0x88>
 80092b0:	dd24      	ble.n	80092fc <_strtod_l+0x434>
 80092b2:	2b16      	cmp	r3, #22
 80092b4:	dc0b      	bgt.n	80092ce <_strtod_l+0x406>
 80092b6:	496d      	ldr	r1, [pc, #436]	; (800946c <_strtod_l+0x5a4>)
 80092b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092c0:	4652      	mov	r2, sl
 80092c2:	465b      	mov	r3, fp
 80092c4:	f7f7 f9a0 	bl	8000608 <__aeabi_dmul>
 80092c8:	4682      	mov	sl, r0
 80092ca:	468b      	mov	fp, r1
 80092cc:	e640      	b.n	8008f50 <_strtod_l+0x88>
 80092ce:	9a06      	ldr	r2, [sp, #24]
 80092d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80092d4:	4293      	cmp	r3, r2
 80092d6:	db20      	blt.n	800931a <_strtod_l+0x452>
 80092d8:	4c64      	ldr	r4, [pc, #400]	; (800946c <_strtod_l+0x5a4>)
 80092da:	f1c5 050f 	rsb	r5, r5, #15
 80092de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80092e2:	4652      	mov	r2, sl
 80092e4:	465b      	mov	r3, fp
 80092e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092ea:	f7f7 f98d 	bl	8000608 <__aeabi_dmul>
 80092ee:	9b06      	ldr	r3, [sp, #24]
 80092f0:	1b5d      	subs	r5, r3, r5
 80092f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80092f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80092fa:	e7e3      	b.n	80092c4 <_strtod_l+0x3fc>
 80092fc:	9b06      	ldr	r3, [sp, #24]
 80092fe:	3316      	adds	r3, #22
 8009300:	db0b      	blt.n	800931a <_strtod_l+0x452>
 8009302:	9b05      	ldr	r3, [sp, #20]
 8009304:	1b9e      	subs	r6, r3, r6
 8009306:	4b59      	ldr	r3, [pc, #356]	; (800946c <_strtod_l+0x5a4>)
 8009308:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800930c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009310:	4650      	mov	r0, sl
 8009312:	4659      	mov	r1, fp
 8009314:	f7f7 faa2 	bl	800085c <__aeabi_ddiv>
 8009318:	e7d6      	b.n	80092c8 <_strtod_l+0x400>
 800931a:	9b06      	ldr	r3, [sp, #24]
 800931c:	eba5 0808 	sub.w	r8, r5, r8
 8009320:	4498      	add	r8, r3
 8009322:	f1b8 0f00 	cmp.w	r8, #0
 8009326:	dd74      	ble.n	8009412 <_strtod_l+0x54a>
 8009328:	f018 030f 	ands.w	r3, r8, #15
 800932c:	d00a      	beq.n	8009344 <_strtod_l+0x47c>
 800932e:	494f      	ldr	r1, [pc, #316]	; (800946c <_strtod_l+0x5a4>)
 8009330:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009334:	4652      	mov	r2, sl
 8009336:	465b      	mov	r3, fp
 8009338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800933c:	f7f7 f964 	bl	8000608 <__aeabi_dmul>
 8009340:	4682      	mov	sl, r0
 8009342:	468b      	mov	fp, r1
 8009344:	f038 080f 	bics.w	r8, r8, #15
 8009348:	d04f      	beq.n	80093ea <_strtod_l+0x522>
 800934a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800934e:	dd22      	ble.n	8009396 <_strtod_l+0x4ce>
 8009350:	2500      	movs	r5, #0
 8009352:	462e      	mov	r6, r5
 8009354:	9507      	str	r5, [sp, #28]
 8009356:	9505      	str	r5, [sp, #20]
 8009358:	2322      	movs	r3, #34	; 0x22
 800935a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009474 <_strtod_l+0x5ac>
 800935e:	6023      	str	r3, [r4, #0]
 8009360:	f04f 0a00 	mov.w	sl, #0
 8009364:	9b07      	ldr	r3, [sp, #28]
 8009366:	2b00      	cmp	r3, #0
 8009368:	f43f adf2 	beq.w	8008f50 <_strtod_l+0x88>
 800936c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800936e:	4620      	mov	r0, r4
 8009370:	f001 fe82 	bl	800b078 <_Bfree>
 8009374:	9905      	ldr	r1, [sp, #20]
 8009376:	4620      	mov	r0, r4
 8009378:	f001 fe7e 	bl	800b078 <_Bfree>
 800937c:	4631      	mov	r1, r6
 800937e:	4620      	mov	r0, r4
 8009380:	f001 fe7a 	bl	800b078 <_Bfree>
 8009384:	9907      	ldr	r1, [sp, #28]
 8009386:	4620      	mov	r0, r4
 8009388:	f001 fe76 	bl	800b078 <_Bfree>
 800938c:	4629      	mov	r1, r5
 800938e:	4620      	mov	r0, r4
 8009390:	f001 fe72 	bl	800b078 <_Bfree>
 8009394:	e5dc      	b.n	8008f50 <_strtod_l+0x88>
 8009396:	4b36      	ldr	r3, [pc, #216]	; (8009470 <_strtod_l+0x5a8>)
 8009398:	9304      	str	r3, [sp, #16]
 800939a:	2300      	movs	r3, #0
 800939c:	ea4f 1828 	mov.w	r8, r8, asr #4
 80093a0:	4650      	mov	r0, sl
 80093a2:	4659      	mov	r1, fp
 80093a4:	4699      	mov	r9, r3
 80093a6:	f1b8 0f01 	cmp.w	r8, #1
 80093aa:	dc21      	bgt.n	80093f0 <_strtod_l+0x528>
 80093ac:	b10b      	cbz	r3, 80093b2 <_strtod_l+0x4ea>
 80093ae:	4682      	mov	sl, r0
 80093b0:	468b      	mov	fp, r1
 80093b2:	4b2f      	ldr	r3, [pc, #188]	; (8009470 <_strtod_l+0x5a8>)
 80093b4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80093b8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80093bc:	4652      	mov	r2, sl
 80093be:	465b      	mov	r3, fp
 80093c0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80093c4:	f7f7 f920 	bl	8000608 <__aeabi_dmul>
 80093c8:	4b2a      	ldr	r3, [pc, #168]	; (8009474 <_strtod_l+0x5ac>)
 80093ca:	460a      	mov	r2, r1
 80093cc:	400b      	ands	r3, r1
 80093ce:	492a      	ldr	r1, [pc, #168]	; (8009478 <_strtod_l+0x5b0>)
 80093d0:	428b      	cmp	r3, r1
 80093d2:	4682      	mov	sl, r0
 80093d4:	d8bc      	bhi.n	8009350 <_strtod_l+0x488>
 80093d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80093da:	428b      	cmp	r3, r1
 80093dc:	bf86      	itte	hi
 80093de:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800947c <_strtod_l+0x5b4>
 80093e2:	f04f 3aff 	movhi.w	sl, #4294967295
 80093e6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80093ea:	2300      	movs	r3, #0
 80093ec:	9304      	str	r3, [sp, #16]
 80093ee:	e084      	b.n	80094fa <_strtod_l+0x632>
 80093f0:	f018 0f01 	tst.w	r8, #1
 80093f4:	d005      	beq.n	8009402 <_strtod_l+0x53a>
 80093f6:	9b04      	ldr	r3, [sp, #16]
 80093f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fc:	f7f7 f904 	bl	8000608 <__aeabi_dmul>
 8009400:	2301      	movs	r3, #1
 8009402:	9a04      	ldr	r2, [sp, #16]
 8009404:	3208      	adds	r2, #8
 8009406:	f109 0901 	add.w	r9, r9, #1
 800940a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800940e:	9204      	str	r2, [sp, #16]
 8009410:	e7c9      	b.n	80093a6 <_strtod_l+0x4de>
 8009412:	d0ea      	beq.n	80093ea <_strtod_l+0x522>
 8009414:	f1c8 0800 	rsb	r8, r8, #0
 8009418:	f018 020f 	ands.w	r2, r8, #15
 800941c:	d00a      	beq.n	8009434 <_strtod_l+0x56c>
 800941e:	4b13      	ldr	r3, [pc, #76]	; (800946c <_strtod_l+0x5a4>)
 8009420:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009424:	4650      	mov	r0, sl
 8009426:	4659      	mov	r1, fp
 8009428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942c:	f7f7 fa16 	bl	800085c <__aeabi_ddiv>
 8009430:	4682      	mov	sl, r0
 8009432:	468b      	mov	fp, r1
 8009434:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009438:	d0d7      	beq.n	80093ea <_strtod_l+0x522>
 800943a:	f1b8 0f1f 	cmp.w	r8, #31
 800943e:	dd1f      	ble.n	8009480 <_strtod_l+0x5b8>
 8009440:	2500      	movs	r5, #0
 8009442:	462e      	mov	r6, r5
 8009444:	9507      	str	r5, [sp, #28]
 8009446:	9505      	str	r5, [sp, #20]
 8009448:	2322      	movs	r3, #34	; 0x22
 800944a:	f04f 0a00 	mov.w	sl, #0
 800944e:	f04f 0b00 	mov.w	fp, #0
 8009452:	6023      	str	r3, [r4, #0]
 8009454:	e786      	b.n	8009364 <_strtod_l+0x49c>
 8009456:	bf00      	nop
 8009458:	0800e0b9 	.word	0x0800e0b9
 800945c:	0800e0fc 	.word	0x0800e0fc
 8009460:	0800e0b1 	.word	0x0800e0b1
 8009464:	0800e23c 	.word	0x0800e23c
 8009468:	0800e4e8 	.word	0x0800e4e8
 800946c:	0800e3c8 	.word	0x0800e3c8
 8009470:	0800e3a0 	.word	0x0800e3a0
 8009474:	7ff00000 	.word	0x7ff00000
 8009478:	7ca00000 	.word	0x7ca00000
 800947c:	7fefffff 	.word	0x7fefffff
 8009480:	f018 0310 	ands.w	r3, r8, #16
 8009484:	bf18      	it	ne
 8009486:	236a      	movne	r3, #106	; 0x6a
 8009488:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009838 <_strtod_l+0x970>
 800948c:	9304      	str	r3, [sp, #16]
 800948e:	4650      	mov	r0, sl
 8009490:	4659      	mov	r1, fp
 8009492:	2300      	movs	r3, #0
 8009494:	f018 0f01 	tst.w	r8, #1
 8009498:	d004      	beq.n	80094a4 <_strtod_l+0x5dc>
 800949a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800949e:	f7f7 f8b3 	bl	8000608 <__aeabi_dmul>
 80094a2:	2301      	movs	r3, #1
 80094a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80094a8:	f109 0908 	add.w	r9, r9, #8
 80094ac:	d1f2      	bne.n	8009494 <_strtod_l+0x5cc>
 80094ae:	b10b      	cbz	r3, 80094b4 <_strtod_l+0x5ec>
 80094b0:	4682      	mov	sl, r0
 80094b2:	468b      	mov	fp, r1
 80094b4:	9b04      	ldr	r3, [sp, #16]
 80094b6:	b1c3      	cbz	r3, 80094ea <_strtod_l+0x622>
 80094b8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80094bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	4659      	mov	r1, fp
 80094c4:	dd11      	ble.n	80094ea <_strtod_l+0x622>
 80094c6:	2b1f      	cmp	r3, #31
 80094c8:	f340 8124 	ble.w	8009714 <_strtod_l+0x84c>
 80094cc:	2b34      	cmp	r3, #52	; 0x34
 80094ce:	bfde      	ittt	le
 80094d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80094d4:	f04f 33ff 	movle.w	r3, #4294967295
 80094d8:	fa03 f202 	lslle.w	r2, r3, r2
 80094dc:	f04f 0a00 	mov.w	sl, #0
 80094e0:	bfcc      	ite	gt
 80094e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80094e6:	ea02 0b01 	andle.w	fp, r2, r1
 80094ea:	2200      	movs	r2, #0
 80094ec:	2300      	movs	r3, #0
 80094ee:	4650      	mov	r0, sl
 80094f0:	4659      	mov	r1, fp
 80094f2:	f7f7 faf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d1a2      	bne.n	8009440 <_strtod_l+0x578>
 80094fa:	9b07      	ldr	r3, [sp, #28]
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	9908      	ldr	r1, [sp, #32]
 8009500:	462b      	mov	r3, r5
 8009502:	463a      	mov	r2, r7
 8009504:	4620      	mov	r0, r4
 8009506:	f001 fe1f 	bl	800b148 <__s2b>
 800950a:	9007      	str	r0, [sp, #28]
 800950c:	2800      	cmp	r0, #0
 800950e:	f43f af1f 	beq.w	8009350 <_strtod_l+0x488>
 8009512:	9b05      	ldr	r3, [sp, #20]
 8009514:	1b9e      	subs	r6, r3, r6
 8009516:	9b06      	ldr	r3, [sp, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	bfb4      	ite	lt
 800951c:	4633      	movlt	r3, r6
 800951e:	2300      	movge	r3, #0
 8009520:	930c      	str	r3, [sp, #48]	; 0x30
 8009522:	9b06      	ldr	r3, [sp, #24]
 8009524:	2500      	movs	r5, #0
 8009526:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800952a:	9312      	str	r3, [sp, #72]	; 0x48
 800952c:	462e      	mov	r6, r5
 800952e:	9b07      	ldr	r3, [sp, #28]
 8009530:	4620      	mov	r0, r4
 8009532:	6859      	ldr	r1, [r3, #4]
 8009534:	f001 fd60 	bl	800aff8 <_Balloc>
 8009538:	9005      	str	r0, [sp, #20]
 800953a:	2800      	cmp	r0, #0
 800953c:	f43f af0c 	beq.w	8009358 <_strtod_l+0x490>
 8009540:	9b07      	ldr	r3, [sp, #28]
 8009542:	691a      	ldr	r2, [r3, #16]
 8009544:	3202      	adds	r2, #2
 8009546:	f103 010c 	add.w	r1, r3, #12
 800954a:	0092      	lsls	r2, r2, #2
 800954c:	300c      	adds	r0, #12
 800954e:	f7fe fde9 	bl	8008124 <memcpy>
 8009552:	ec4b ab10 	vmov	d0, sl, fp
 8009556:	aa1a      	add	r2, sp, #104	; 0x68
 8009558:	a919      	add	r1, sp, #100	; 0x64
 800955a:	4620      	mov	r0, r4
 800955c:	f002 f93a 	bl	800b7d4 <__d2b>
 8009560:	ec4b ab18 	vmov	d8, sl, fp
 8009564:	9018      	str	r0, [sp, #96]	; 0x60
 8009566:	2800      	cmp	r0, #0
 8009568:	f43f aef6 	beq.w	8009358 <_strtod_l+0x490>
 800956c:	2101      	movs	r1, #1
 800956e:	4620      	mov	r0, r4
 8009570:	f001 fe84 	bl	800b27c <__i2b>
 8009574:	4606      	mov	r6, r0
 8009576:	2800      	cmp	r0, #0
 8009578:	f43f aeee 	beq.w	8009358 <_strtod_l+0x490>
 800957c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800957e:	9904      	ldr	r1, [sp, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	bfab      	itete	ge
 8009584:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009586:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009588:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800958a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800958e:	bfac      	ite	ge
 8009590:	eb03 0902 	addge.w	r9, r3, r2
 8009594:	1ad7      	sublt	r7, r2, r3
 8009596:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009598:	eba3 0801 	sub.w	r8, r3, r1
 800959c:	4490      	add	r8, r2
 800959e:	4ba1      	ldr	r3, [pc, #644]	; (8009824 <_strtod_l+0x95c>)
 80095a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80095a4:	4598      	cmp	r8, r3
 80095a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80095aa:	f280 80c7 	bge.w	800973c <_strtod_l+0x874>
 80095ae:	eba3 0308 	sub.w	r3, r3, r8
 80095b2:	2b1f      	cmp	r3, #31
 80095b4:	eba2 0203 	sub.w	r2, r2, r3
 80095b8:	f04f 0101 	mov.w	r1, #1
 80095bc:	f300 80b1 	bgt.w	8009722 <_strtod_l+0x85a>
 80095c0:	fa01 f303 	lsl.w	r3, r1, r3
 80095c4:	930d      	str	r3, [sp, #52]	; 0x34
 80095c6:	2300      	movs	r3, #0
 80095c8:	9308      	str	r3, [sp, #32]
 80095ca:	eb09 0802 	add.w	r8, r9, r2
 80095ce:	9b04      	ldr	r3, [sp, #16]
 80095d0:	45c1      	cmp	r9, r8
 80095d2:	4417      	add	r7, r2
 80095d4:	441f      	add	r7, r3
 80095d6:	464b      	mov	r3, r9
 80095d8:	bfa8      	it	ge
 80095da:	4643      	movge	r3, r8
 80095dc:	42bb      	cmp	r3, r7
 80095de:	bfa8      	it	ge
 80095e0:	463b      	movge	r3, r7
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	bfc2      	ittt	gt
 80095e6:	eba8 0803 	subgt.w	r8, r8, r3
 80095ea:	1aff      	subgt	r7, r7, r3
 80095ec:	eba9 0903 	subgt.w	r9, r9, r3
 80095f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	dd17      	ble.n	8009626 <_strtod_l+0x75e>
 80095f6:	4631      	mov	r1, r6
 80095f8:	461a      	mov	r2, r3
 80095fa:	4620      	mov	r0, r4
 80095fc:	f001 fefe 	bl	800b3fc <__pow5mult>
 8009600:	4606      	mov	r6, r0
 8009602:	2800      	cmp	r0, #0
 8009604:	f43f aea8 	beq.w	8009358 <_strtod_l+0x490>
 8009608:	4601      	mov	r1, r0
 800960a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800960c:	4620      	mov	r0, r4
 800960e:	f001 fe4b 	bl	800b2a8 <__multiply>
 8009612:	900b      	str	r0, [sp, #44]	; 0x2c
 8009614:	2800      	cmp	r0, #0
 8009616:	f43f ae9f 	beq.w	8009358 <_strtod_l+0x490>
 800961a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800961c:	4620      	mov	r0, r4
 800961e:	f001 fd2b 	bl	800b078 <_Bfree>
 8009622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009624:	9318      	str	r3, [sp, #96]	; 0x60
 8009626:	f1b8 0f00 	cmp.w	r8, #0
 800962a:	f300 808c 	bgt.w	8009746 <_strtod_l+0x87e>
 800962e:	9b06      	ldr	r3, [sp, #24]
 8009630:	2b00      	cmp	r3, #0
 8009632:	dd08      	ble.n	8009646 <_strtod_l+0x77e>
 8009634:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009636:	9905      	ldr	r1, [sp, #20]
 8009638:	4620      	mov	r0, r4
 800963a:	f001 fedf 	bl	800b3fc <__pow5mult>
 800963e:	9005      	str	r0, [sp, #20]
 8009640:	2800      	cmp	r0, #0
 8009642:	f43f ae89 	beq.w	8009358 <_strtod_l+0x490>
 8009646:	2f00      	cmp	r7, #0
 8009648:	dd08      	ble.n	800965c <_strtod_l+0x794>
 800964a:	9905      	ldr	r1, [sp, #20]
 800964c:	463a      	mov	r2, r7
 800964e:	4620      	mov	r0, r4
 8009650:	f001 ff2e 	bl	800b4b0 <__lshift>
 8009654:	9005      	str	r0, [sp, #20]
 8009656:	2800      	cmp	r0, #0
 8009658:	f43f ae7e 	beq.w	8009358 <_strtod_l+0x490>
 800965c:	f1b9 0f00 	cmp.w	r9, #0
 8009660:	dd08      	ble.n	8009674 <_strtod_l+0x7ac>
 8009662:	4631      	mov	r1, r6
 8009664:	464a      	mov	r2, r9
 8009666:	4620      	mov	r0, r4
 8009668:	f001 ff22 	bl	800b4b0 <__lshift>
 800966c:	4606      	mov	r6, r0
 800966e:	2800      	cmp	r0, #0
 8009670:	f43f ae72 	beq.w	8009358 <_strtod_l+0x490>
 8009674:	9a05      	ldr	r2, [sp, #20]
 8009676:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009678:	4620      	mov	r0, r4
 800967a:	f001 ffa5 	bl	800b5c8 <__mdiff>
 800967e:	4605      	mov	r5, r0
 8009680:	2800      	cmp	r0, #0
 8009682:	f43f ae69 	beq.w	8009358 <_strtod_l+0x490>
 8009686:	68c3      	ldr	r3, [r0, #12]
 8009688:	930b      	str	r3, [sp, #44]	; 0x2c
 800968a:	2300      	movs	r3, #0
 800968c:	60c3      	str	r3, [r0, #12]
 800968e:	4631      	mov	r1, r6
 8009690:	f001 ff7e 	bl	800b590 <__mcmp>
 8009694:	2800      	cmp	r0, #0
 8009696:	da60      	bge.n	800975a <_strtod_l+0x892>
 8009698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800969a:	ea53 030a 	orrs.w	r3, r3, sl
 800969e:	f040 8082 	bne.w	80097a6 <_strtod_l+0x8de>
 80096a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d17d      	bne.n	80097a6 <_strtod_l+0x8de>
 80096aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096ae:	0d1b      	lsrs	r3, r3, #20
 80096b0:	051b      	lsls	r3, r3, #20
 80096b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80096b6:	d976      	bls.n	80097a6 <_strtod_l+0x8de>
 80096b8:	696b      	ldr	r3, [r5, #20]
 80096ba:	b913      	cbnz	r3, 80096c2 <_strtod_l+0x7fa>
 80096bc:	692b      	ldr	r3, [r5, #16]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	dd71      	ble.n	80097a6 <_strtod_l+0x8de>
 80096c2:	4629      	mov	r1, r5
 80096c4:	2201      	movs	r2, #1
 80096c6:	4620      	mov	r0, r4
 80096c8:	f001 fef2 	bl	800b4b0 <__lshift>
 80096cc:	4631      	mov	r1, r6
 80096ce:	4605      	mov	r5, r0
 80096d0:	f001 ff5e 	bl	800b590 <__mcmp>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	dd66      	ble.n	80097a6 <_strtod_l+0x8de>
 80096d8:	9904      	ldr	r1, [sp, #16]
 80096da:	4a53      	ldr	r2, [pc, #332]	; (8009828 <_strtod_l+0x960>)
 80096dc:	465b      	mov	r3, fp
 80096de:	2900      	cmp	r1, #0
 80096e0:	f000 8081 	beq.w	80097e6 <_strtod_l+0x91e>
 80096e4:	ea02 010b 	and.w	r1, r2, fp
 80096e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80096ec:	dc7b      	bgt.n	80097e6 <_strtod_l+0x91e>
 80096ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80096f2:	f77f aea9 	ble.w	8009448 <_strtod_l+0x580>
 80096f6:	4b4d      	ldr	r3, [pc, #308]	; (800982c <_strtod_l+0x964>)
 80096f8:	4650      	mov	r0, sl
 80096fa:	4659      	mov	r1, fp
 80096fc:	2200      	movs	r2, #0
 80096fe:	f7f6 ff83 	bl	8000608 <__aeabi_dmul>
 8009702:	460b      	mov	r3, r1
 8009704:	4303      	orrs	r3, r0
 8009706:	bf08      	it	eq
 8009708:	2322      	moveq	r3, #34	; 0x22
 800970a:	4682      	mov	sl, r0
 800970c:	468b      	mov	fp, r1
 800970e:	bf08      	it	eq
 8009710:	6023      	streq	r3, [r4, #0]
 8009712:	e62b      	b.n	800936c <_strtod_l+0x4a4>
 8009714:	f04f 32ff 	mov.w	r2, #4294967295
 8009718:	fa02 f303 	lsl.w	r3, r2, r3
 800971c:	ea03 0a0a 	and.w	sl, r3, sl
 8009720:	e6e3      	b.n	80094ea <_strtod_l+0x622>
 8009722:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009726:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800972a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800972e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009732:	fa01 f308 	lsl.w	r3, r1, r8
 8009736:	9308      	str	r3, [sp, #32]
 8009738:	910d      	str	r1, [sp, #52]	; 0x34
 800973a:	e746      	b.n	80095ca <_strtod_l+0x702>
 800973c:	2300      	movs	r3, #0
 800973e:	9308      	str	r3, [sp, #32]
 8009740:	2301      	movs	r3, #1
 8009742:	930d      	str	r3, [sp, #52]	; 0x34
 8009744:	e741      	b.n	80095ca <_strtod_l+0x702>
 8009746:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009748:	4642      	mov	r2, r8
 800974a:	4620      	mov	r0, r4
 800974c:	f001 feb0 	bl	800b4b0 <__lshift>
 8009750:	9018      	str	r0, [sp, #96]	; 0x60
 8009752:	2800      	cmp	r0, #0
 8009754:	f47f af6b 	bne.w	800962e <_strtod_l+0x766>
 8009758:	e5fe      	b.n	8009358 <_strtod_l+0x490>
 800975a:	465f      	mov	r7, fp
 800975c:	d16e      	bne.n	800983c <_strtod_l+0x974>
 800975e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009760:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009764:	b342      	cbz	r2, 80097b8 <_strtod_l+0x8f0>
 8009766:	4a32      	ldr	r2, [pc, #200]	; (8009830 <_strtod_l+0x968>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d128      	bne.n	80097be <_strtod_l+0x8f6>
 800976c:	9b04      	ldr	r3, [sp, #16]
 800976e:	4651      	mov	r1, sl
 8009770:	b1eb      	cbz	r3, 80097ae <_strtod_l+0x8e6>
 8009772:	4b2d      	ldr	r3, [pc, #180]	; (8009828 <_strtod_l+0x960>)
 8009774:	403b      	ands	r3, r7
 8009776:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800977a:	f04f 32ff 	mov.w	r2, #4294967295
 800977e:	d819      	bhi.n	80097b4 <_strtod_l+0x8ec>
 8009780:	0d1b      	lsrs	r3, r3, #20
 8009782:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009786:	fa02 f303 	lsl.w	r3, r2, r3
 800978a:	4299      	cmp	r1, r3
 800978c:	d117      	bne.n	80097be <_strtod_l+0x8f6>
 800978e:	4b29      	ldr	r3, [pc, #164]	; (8009834 <_strtod_l+0x96c>)
 8009790:	429f      	cmp	r7, r3
 8009792:	d102      	bne.n	800979a <_strtod_l+0x8d2>
 8009794:	3101      	adds	r1, #1
 8009796:	f43f addf 	beq.w	8009358 <_strtod_l+0x490>
 800979a:	4b23      	ldr	r3, [pc, #140]	; (8009828 <_strtod_l+0x960>)
 800979c:	403b      	ands	r3, r7
 800979e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80097a2:	f04f 0a00 	mov.w	sl, #0
 80097a6:	9b04      	ldr	r3, [sp, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1a4      	bne.n	80096f6 <_strtod_l+0x82e>
 80097ac:	e5de      	b.n	800936c <_strtod_l+0x4a4>
 80097ae:	f04f 33ff 	mov.w	r3, #4294967295
 80097b2:	e7ea      	b.n	800978a <_strtod_l+0x8c2>
 80097b4:	4613      	mov	r3, r2
 80097b6:	e7e8      	b.n	800978a <_strtod_l+0x8c2>
 80097b8:	ea53 030a 	orrs.w	r3, r3, sl
 80097bc:	d08c      	beq.n	80096d8 <_strtod_l+0x810>
 80097be:	9b08      	ldr	r3, [sp, #32]
 80097c0:	b1db      	cbz	r3, 80097fa <_strtod_l+0x932>
 80097c2:	423b      	tst	r3, r7
 80097c4:	d0ef      	beq.n	80097a6 <_strtod_l+0x8de>
 80097c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097c8:	9a04      	ldr	r2, [sp, #16]
 80097ca:	4650      	mov	r0, sl
 80097cc:	4659      	mov	r1, fp
 80097ce:	b1c3      	cbz	r3, 8009802 <_strtod_l+0x93a>
 80097d0:	f7ff fb5e 	bl	8008e90 <sulp>
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	ec51 0b18 	vmov	r0, r1, d8
 80097dc:	f7f6 fd5e 	bl	800029c <__adddf3>
 80097e0:	4682      	mov	sl, r0
 80097e2:	468b      	mov	fp, r1
 80097e4:	e7df      	b.n	80097a6 <_strtod_l+0x8de>
 80097e6:	4013      	ands	r3, r2
 80097e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80097ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80097f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80097f4:	f04f 3aff 	mov.w	sl, #4294967295
 80097f8:	e7d5      	b.n	80097a6 <_strtod_l+0x8de>
 80097fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097fc:	ea13 0f0a 	tst.w	r3, sl
 8009800:	e7e0      	b.n	80097c4 <_strtod_l+0x8fc>
 8009802:	f7ff fb45 	bl	8008e90 <sulp>
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	ec51 0b18 	vmov	r0, r1, d8
 800980e:	f7f6 fd43 	bl	8000298 <__aeabi_dsub>
 8009812:	2200      	movs	r2, #0
 8009814:	2300      	movs	r3, #0
 8009816:	4682      	mov	sl, r0
 8009818:	468b      	mov	fp, r1
 800981a:	f7f7 f95d 	bl	8000ad8 <__aeabi_dcmpeq>
 800981e:	2800      	cmp	r0, #0
 8009820:	d0c1      	beq.n	80097a6 <_strtod_l+0x8de>
 8009822:	e611      	b.n	8009448 <_strtod_l+0x580>
 8009824:	fffffc02 	.word	0xfffffc02
 8009828:	7ff00000 	.word	0x7ff00000
 800982c:	39500000 	.word	0x39500000
 8009830:	000fffff 	.word	0x000fffff
 8009834:	7fefffff 	.word	0x7fefffff
 8009838:	0800e110 	.word	0x0800e110
 800983c:	4631      	mov	r1, r6
 800983e:	4628      	mov	r0, r5
 8009840:	f002 f824 	bl	800b88c <__ratio>
 8009844:	ec59 8b10 	vmov	r8, r9, d0
 8009848:	ee10 0a10 	vmov	r0, s0
 800984c:	2200      	movs	r2, #0
 800984e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009852:	4649      	mov	r1, r9
 8009854:	f7f7 f954 	bl	8000b00 <__aeabi_dcmple>
 8009858:	2800      	cmp	r0, #0
 800985a:	d07a      	beq.n	8009952 <_strtod_l+0xa8a>
 800985c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800985e:	2b00      	cmp	r3, #0
 8009860:	d04a      	beq.n	80098f8 <_strtod_l+0xa30>
 8009862:	4b95      	ldr	r3, [pc, #596]	; (8009ab8 <_strtod_l+0xbf0>)
 8009864:	2200      	movs	r2, #0
 8009866:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800986a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009ab8 <_strtod_l+0xbf0>
 800986e:	f04f 0800 	mov.w	r8, #0
 8009872:	4b92      	ldr	r3, [pc, #584]	; (8009abc <_strtod_l+0xbf4>)
 8009874:	403b      	ands	r3, r7
 8009876:	930d      	str	r3, [sp, #52]	; 0x34
 8009878:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800987a:	4b91      	ldr	r3, [pc, #580]	; (8009ac0 <_strtod_l+0xbf8>)
 800987c:	429a      	cmp	r2, r3
 800987e:	f040 80b0 	bne.w	80099e2 <_strtod_l+0xb1a>
 8009882:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009886:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800988a:	ec4b ab10 	vmov	d0, sl, fp
 800988e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009892:	f001 ff23 	bl	800b6dc <__ulp>
 8009896:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800989a:	ec53 2b10 	vmov	r2, r3, d0
 800989e:	f7f6 feb3 	bl	8000608 <__aeabi_dmul>
 80098a2:	4652      	mov	r2, sl
 80098a4:	465b      	mov	r3, fp
 80098a6:	f7f6 fcf9 	bl	800029c <__adddf3>
 80098aa:	460b      	mov	r3, r1
 80098ac:	4983      	ldr	r1, [pc, #524]	; (8009abc <_strtod_l+0xbf4>)
 80098ae:	4a85      	ldr	r2, [pc, #532]	; (8009ac4 <_strtod_l+0xbfc>)
 80098b0:	4019      	ands	r1, r3
 80098b2:	4291      	cmp	r1, r2
 80098b4:	4682      	mov	sl, r0
 80098b6:	d960      	bls.n	800997a <_strtod_l+0xab2>
 80098b8:	ee18 3a90 	vmov	r3, s17
 80098bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d104      	bne.n	80098ce <_strtod_l+0xa06>
 80098c4:	ee18 3a10 	vmov	r3, s16
 80098c8:	3301      	adds	r3, #1
 80098ca:	f43f ad45 	beq.w	8009358 <_strtod_l+0x490>
 80098ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009ad0 <_strtod_l+0xc08>
 80098d2:	f04f 3aff 	mov.w	sl, #4294967295
 80098d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80098d8:	4620      	mov	r0, r4
 80098da:	f001 fbcd 	bl	800b078 <_Bfree>
 80098de:	9905      	ldr	r1, [sp, #20]
 80098e0:	4620      	mov	r0, r4
 80098e2:	f001 fbc9 	bl	800b078 <_Bfree>
 80098e6:	4631      	mov	r1, r6
 80098e8:	4620      	mov	r0, r4
 80098ea:	f001 fbc5 	bl	800b078 <_Bfree>
 80098ee:	4629      	mov	r1, r5
 80098f0:	4620      	mov	r0, r4
 80098f2:	f001 fbc1 	bl	800b078 <_Bfree>
 80098f6:	e61a      	b.n	800952e <_strtod_l+0x666>
 80098f8:	f1ba 0f00 	cmp.w	sl, #0
 80098fc:	d11b      	bne.n	8009936 <_strtod_l+0xa6e>
 80098fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009902:	b9f3      	cbnz	r3, 8009942 <_strtod_l+0xa7a>
 8009904:	4b6c      	ldr	r3, [pc, #432]	; (8009ab8 <_strtod_l+0xbf0>)
 8009906:	2200      	movs	r2, #0
 8009908:	4640      	mov	r0, r8
 800990a:	4649      	mov	r1, r9
 800990c:	f7f7 f8ee 	bl	8000aec <__aeabi_dcmplt>
 8009910:	b9d0      	cbnz	r0, 8009948 <_strtod_l+0xa80>
 8009912:	4640      	mov	r0, r8
 8009914:	4649      	mov	r1, r9
 8009916:	4b6c      	ldr	r3, [pc, #432]	; (8009ac8 <_strtod_l+0xc00>)
 8009918:	2200      	movs	r2, #0
 800991a:	f7f6 fe75 	bl	8000608 <__aeabi_dmul>
 800991e:	4680      	mov	r8, r0
 8009920:	4689      	mov	r9, r1
 8009922:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009926:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800992a:	9315      	str	r3, [sp, #84]	; 0x54
 800992c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009930:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009934:	e79d      	b.n	8009872 <_strtod_l+0x9aa>
 8009936:	f1ba 0f01 	cmp.w	sl, #1
 800993a:	d102      	bne.n	8009942 <_strtod_l+0xa7a>
 800993c:	2f00      	cmp	r7, #0
 800993e:	f43f ad83 	beq.w	8009448 <_strtod_l+0x580>
 8009942:	4b62      	ldr	r3, [pc, #392]	; (8009acc <_strtod_l+0xc04>)
 8009944:	2200      	movs	r2, #0
 8009946:	e78e      	b.n	8009866 <_strtod_l+0x99e>
 8009948:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009ac8 <_strtod_l+0xc00>
 800994c:	f04f 0800 	mov.w	r8, #0
 8009950:	e7e7      	b.n	8009922 <_strtod_l+0xa5a>
 8009952:	4b5d      	ldr	r3, [pc, #372]	; (8009ac8 <_strtod_l+0xc00>)
 8009954:	4640      	mov	r0, r8
 8009956:	4649      	mov	r1, r9
 8009958:	2200      	movs	r2, #0
 800995a:	f7f6 fe55 	bl	8000608 <__aeabi_dmul>
 800995e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009960:	4680      	mov	r8, r0
 8009962:	4689      	mov	r9, r1
 8009964:	b933      	cbnz	r3, 8009974 <_strtod_l+0xaac>
 8009966:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800996a:	900e      	str	r0, [sp, #56]	; 0x38
 800996c:	930f      	str	r3, [sp, #60]	; 0x3c
 800996e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009972:	e7dd      	b.n	8009930 <_strtod_l+0xa68>
 8009974:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009978:	e7f9      	b.n	800996e <_strtod_l+0xaa6>
 800997a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800997e:	9b04      	ldr	r3, [sp, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1a8      	bne.n	80098d6 <_strtod_l+0xa0e>
 8009984:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009988:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800998a:	0d1b      	lsrs	r3, r3, #20
 800998c:	051b      	lsls	r3, r3, #20
 800998e:	429a      	cmp	r2, r3
 8009990:	d1a1      	bne.n	80098d6 <_strtod_l+0xa0e>
 8009992:	4640      	mov	r0, r8
 8009994:	4649      	mov	r1, r9
 8009996:	f7f7 f997 	bl	8000cc8 <__aeabi_d2lz>
 800999a:	f7f6 fe07 	bl	80005ac <__aeabi_l2d>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	4640      	mov	r0, r8
 80099a4:	4649      	mov	r1, r9
 80099a6:	f7f6 fc77 	bl	8000298 <__aeabi_dsub>
 80099aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099b0:	ea43 030a 	orr.w	r3, r3, sl
 80099b4:	4313      	orrs	r3, r2
 80099b6:	4680      	mov	r8, r0
 80099b8:	4689      	mov	r9, r1
 80099ba:	d055      	beq.n	8009a68 <_strtod_l+0xba0>
 80099bc:	a336      	add	r3, pc, #216	; (adr r3, 8009a98 <_strtod_l+0xbd0>)
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	f7f7 f893 	bl	8000aec <__aeabi_dcmplt>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	f47f acd0 	bne.w	800936c <_strtod_l+0x4a4>
 80099cc:	a334      	add	r3, pc, #208	; (adr r3, 8009aa0 <_strtod_l+0xbd8>)
 80099ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d2:	4640      	mov	r0, r8
 80099d4:	4649      	mov	r1, r9
 80099d6:	f7f7 f8a7 	bl	8000b28 <__aeabi_dcmpgt>
 80099da:	2800      	cmp	r0, #0
 80099dc:	f43f af7b 	beq.w	80098d6 <_strtod_l+0xa0e>
 80099e0:	e4c4      	b.n	800936c <_strtod_l+0x4a4>
 80099e2:	9b04      	ldr	r3, [sp, #16]
 80099e4:	b333      	cbz	r3, 8009a34 <_strtod_l+0xb6c>
 80099e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80099ec:	d822      	bhi.n	8009a34 <_strtod_l+0xb6c>
 80099ee:	a32e      	add	r3, pc, #184	; (adr r3, 8009aa8 <_strtod_l+0xbe0>)
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	4640      	mov	r0, r8
 80099f6:	4649      	mov	r1, r9
 80099f8:	f7f7 f882 	bl	8000b00 <__aeabi_dcmple>
 80099fc:	b1a0      	cbz	r0, 8009a28 <_strtod_l+0xb60>
 80099fe:	4649      	mov	r1, r9
 8009a00:	4640      	mov	r0, r8
 8009a02:	f7f7 f8d9 	bl	8000bb8 <__aeabi_d2uiz>
 8009a06:	2801      	cmp	r0, #1
 8009a08:	bf38      	it	cc
 8009a0a:	2001      	movcc	r0, #1
 8009a0c:	f7f6 fd82 	bl	8000514 <__aeabi_ui2d>
 8009a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a12:	4680      	mov	r8, r0
 8009a14:	4689      	mov	r9, r1
 8009a16:	bb23      	cbnz	r3, 8009a62 <_strtod_l+0xb9a>
 8009a18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a1c:	9010      	str	r0, [sp, #64]	; 0x40
 8009a1e:	9311      	str	r3, [sp, #68]	; 0x44
 8009a20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a24:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a2c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009a30:	1a9b      	subs	r3, r3, r2
 8009a32:	9309      	str	r3, [sp, #36]	; 0x24
 8009a34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a38:	eeb0 0a48 	vmov.f32	s0, s16
 8009a3c:	eef0 0a68 	vmov.f32	s1, s17
 8009a40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009a44:	f001 fe4a 	bl	800b6dc <__ulp>
 8009a48:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a4c:	ec53 2b10 	vmov	r2, r3, d0
 8009a50:	f7f6 fdda 	bl	8000608 <__aeabi_dmul>
 8009a54:	ec53 2b18 	vmov	r2, r3, d8
 8009a58:	f7f6 fc20 	bl	800029c <__adddf3>
 8009a5c:	4682      	mov	sl, r0
 8009a5e:	468b      	mov	fp, r1
 8009a60:	e78d      	b.n	800997e <_strtod_l+0xab6>
 8009a62:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009a66:	e7db      	b.n	8009a20 <_strtod_l+0xb58>
 8009a68:	a311      	add	r3, pc, #68	; (adr r3, 8009ab0 <_strtod_l+0xbe8>)
 8009a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6e:	f7f7 f83d 	bl	8000aec <__aeabi_dcmplt>
 8009a72:	e7b2      	b.n	80099da <_strtod_l+0xb12>
 8009a74:	2300      	movs	r3, #0
 8009a76:	930a      	str	r3, [sp, #40]	; 0x28
 8009a78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a7c:	6013      	str	r3, [r2, #0]
 8009a7e:	f7ff ba6b 	b.w	8008f58 <_strtod_l+0x90>
 8009a82:	2a65      	cmp	r2, #101	; 0x65
 8009a84:	f43f ab5f 	beq.w	8009146 <_strtod_l+0x27e>
 8009a88:	2a45      	cmp	r2, #69	; 0x45
 8009a8a:	f43f ab5c 	beq.w	8009146 <_strtod_l+0x27e>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	f7ff bb94 	b.w	80091bc <_strtod_l+0x2f4>
 8009a94:	f3af 8000 	nop.w
 8009a98:	94a03595 	.word	0x94a03595
 8009a9c:	3fdfffff 	.word	0x3fdfffff
 8009aa0:	35afe535 	.word	0x35afe535
 8009aa4:	3fe00000 	.word	0x3fe00000
 8009aa8:	ffc00000 	.word	0xffc00000
 8009aac:	41dfffff 	.word	0x41dfffff
 8009ab0:	94a03595 	.word	0x94a03595
 8009ab4:	3fcfffff 	.word	0x3fcfffff
 8009ab8:	3ff00000 	.word	0x3ff00000
 8009abc:	7ff00000 	.word	0x7ff00000
 8009ac0:	7fe00000 	.word	0x7fe00000
 8009ac4:	7c9fffff 	.word	0x7c9fffff
 8009ac8:	3fe00000 	.word	0x3fe00000
 8009acc:	bff00000 	.word	0xbff00000
 8009ad0:	7fefffff 	.word	0x7fefffff

08009ad4 <_strtod_r>:
 8009ad4:	4b01      	ldr	r3, [pc, #4]	; (8009adc <_strtod_r+0x8>)
 8009ad6:	f7ff b9f7 	b.w	8008ec8 <_strtod_l>
 8009ada:	bf00      	nop
 8009adc:	20000274 	.word	0x20000274

08009ae0 <_strtol_l.constprop.0>:
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae6:	d001      	beq.n	8009aec <_strtol_l.constprop.0+0xc>
 8009ae8:	2b24      	cmp	r3, #36	; 0x24
 8009aea:	d906      	bls.n	8009afa <_strtol_l.constprop.0+0x1a>
 8009aec:	f7fe faf0 	bl	80080d0 <__errno>
 8009af0:	2316      	movs	r3, #22
 8009af2:	6003      	str	r3, [r0, #0]
 8009af4:	2000      	movs	r0, #0
 8009af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009afa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009be0 <_strtol_l.constprop.0+0x100>
 8009afe:	460d      	mov	r5, r1
 8009b00:	462e      	mov	r6, r5
 8009b02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b06:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009b0a:	f017 0708 	ands.w	r7, r7, #8
 8009b0e:	d1f7      	bne.n	8009b00 <_strtol_l.constprop.0+0x20>
 8009b10:	2c2d      	cmp	r4, #45	; 0x2d
 8009b12:	d132      	bne.n	8009b7a <_strtol_l.constprop.0+0x9a>
 8009b14:	782c      	ldrb	r4, [r5, #0]
 8009b16:	2701      	movs	r7, #1
 8009b18:	1cb5      	adds	r5, r6, #2
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d05b      	beq.n	8009bd6 <_strtol_l.constprop.0+0xf6>
 8009b1e:	2b10      	cmp	r3, #16
 8009b20:	d109      	bne.n	8009b36 <_strtol_l.constprop.0+0x56>
 8009b22:	2c30      	cmp	r4, #48	; 0x30
 8009b24:	d107      	bne.n	8009b36 <_strtol_l.constprop.0+0x56>
 8009b26:	782c      	ldrb	r4, [r5, #0]
 8009b28:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009b2c:	2c58      	cmp	r4, #88	; 0x58
 8009b2e:	d14d      	bne.n	8009bcc <_strtol_l.constprop.0+0xec>
 8009b30:	786c      	ldrb	r4, [r5, #1]
 8009b32:	2310      	movs	r3, #16
 8009b34:	3502      	adds	r5, #2
 8009b36:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009b3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b3e:	f04f 0c00 	mov.w	ip, #0
 8009b42:	fbb8 f9f3 	udiv	r9, r8, r3
 8009b46:	4666      	mov	r6, ip
 8009b48:	fb03 8a19 	mls	sl, r3, r9, r8
 8009b4c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009b50:	f1be 0f09 	cmp.w	lr, #9
 8009b54:	d816      	bhi.n	8009b84 <_strtol_l.constprop.0+0xa4>
 8009b56:	4674      	mov	r4, lr
 8009b58:	42a3      	cmp	r3, r4
 8009b5a:	dd24      	ble.n	8009ba6 <_strtol_l.constprop.0+0xc6>
 8009b5c:	f1bc 0f00 	cmp.w	ip, #0
 8009b60:	db1e      	blt.n	8009ba0 <_strtol_l.constprop.0+0xc0>
 8009b62:	45b1      	cmp	r9, r6
 8009b64:	d31c      	bcc.n	8009ba0 <_strtol_l.constprop.0+0xc0>
 8009b66:	d101      	bne.n	8009b6c <_strtol_l.constprop.0+0x8c>
 8009b68:	45a2      	cmp	sl, r4
 8009b6a:	db19      	blt.n	8009ba0 <_strtol_l.constprop.0+0xc0>
 8009b6c:	fb06 4603 	mla	r6, r6, r3, r4
 8009b70:	f04f 0c01 	mov.w	ip, #1
 8009b74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b78:	e7e8      	b.n	8009b4c <_strtol_l.constprop.0+0x6c>
 8009b7a:	2c2b      	cmp	r4, #43	; 0x2b
 8009b7c:	bf04      	itt	eq
 8009b7e:	782c      	ldrbeq	r4, [r5, #0]
 8009b80:	1cb5      	addeq	r5, r6, #2
 8009b82:	e7ca      	b.n	8009b1a <_strtol_l.constprop.0+0x3a>
 8009b84:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009b88:	f1be 0f19 	cmp.w	lr, #25
 8009b8c:	d801      	bhi.n	8009b92 <_strtol_l.constprop.0+0xb2>
 8009b8e:	3c37      	subs	r4, #55	; 0x37
 8009b90:	e7e2      	b.n	8009b58 <_strtol_l.constprop.0+0x78>
 8009b92:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009b96:	f1be 0f19 	cmp.w	lr, #25
 8009b9a:	d804      	bhi.n	8009ba6 <_strtol_l.constprop.0+0xc6>
 8009b9c:	3c57      	subs	r4, #87	; 0x57
 8009b9e:	e7db      	b.n	8009b58 <_strtol_l.constprop.0+0x78>
 8009ba0:	f04f 3cff 	mov.w	ip, #4294967295
 8009ba4:	e7e6      	b.n	8009b74 <_strtol_l.constprop.0+0x94>
 8009ba6:	f1bc 0f00 	cmp.w	ip, #0
 8009baa:	da05      	bge.n	8009bb8 <_strtol_l.constprop.0+0xd8>
 8009bac:	2322      	movs	r3, #34	; 0x22
 8009bae:	6003      	str	r3, [r0, #0]
 8009bb0:	4646      	mov	r6, r8
 8009bb2:	b942      	cbnz	r2, 8009bc6 <_strtol_l.constprop.0+0xe6>
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	e79e      	b.n	8009af6 <_strtol_l.constprop.0+0x16>
 8009bb8:	b107      	cbz	r7, 8009bbc <_strtol_l.constprop.0+0xdc>
 8009bba:	4276      	negs	r6, r6
 8009bbc:	2a00      	cmp	r2, #0
 8009bbe:	d0f9      	beq.n	8009bb4 <_strtol_l.constprop.0+0xd4>
 8009bc0:	f1bc 0f00 	cmp.w	ip, #0
 8009bc4:	d000      	beq.n	8009bc8 <_strtol_l.constprop.0+0xe8>
 8009bc6:	1e69      	subs	r1, r5, #1
 8009bc8:	6011      	str	r1, [r2, #0]
 8009bca:	e7f3      	b.n	8009bb4 <_strtol_l.constprop.0+0xd4>
 8009bcc:	2430      	movs	r4, #48	; 0x30
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1b1      	bne.n	8009b36 <_strtol_l.constprop.0+0x56>
 8009bd2:	2308      	movs	r3, #8
 8009bd4:	e7af      	b.n	8009b36 <_strtol_l.constprop.0+0x56>
 8009bd6:	2c30      	cmp	r4, #48	; 0x30
 8009bd8:	d0a5      	beq.n	8009b26 <_strtol_l.constprop.0+0x46>
 8009bda:	230a      	movs	r3, #10
 8009bdc:	e7ab      	b.n	8009b36 <_strtol_l.constprop.0+0x56>
 8009bde:	bf00      	nop
 8009be0:	0800e139 	.word	0x0800e139

08009be4 <_strtol_r>:
 8009be4:	f7ff bf7c 	b.w	8009ae0 <_strtol_l.constprop.0>

08009be8 <quorem>:
 8009be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bec:	6903      	ldr	r3, [r0, #16]
 8009bee:	690c      	ldr	r4, [r1, #16]
 8009bf0:	42a3      	cmp	r3, r4
 8009bf2:	4607      	mov	r7, r0
 8009bf4:	f2c0 8081 	blt.w	8009cfa <quorem+0x112>
 8009bf8:	3c01      	subs	r4, #1
 8009bfa:	f101 0814 	add.w	r8, r1, #20
 8009bfe:	f100 0514 	add.w	r5, r0, #20
 8009c02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c06:	9301      	str	r3, [sp, #4]
 8009c08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c10:	3301      	adds	r3, #1
 8009c12:	429a      	cmp	r2, r3
 8009c14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c20:	d331      	bcc.n	8009c86 <quorem+0x9e>
 8009c22:	f04f 0e00 	mov.w	lr, #0
 8009c26:	4640      	mov	r0, r8
 8009c28:	46ac      	mov	ip, r5
 8009c2a:	46f2      	mov	sl, lr
 8009c2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c30:	b293      	uxth	r3, r2
 8009c32:	fb06 e303 	mla	r3, r6, r3, lr
 8009c36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	ebaa 0303 	sub.w	r3, sl, r3
 8009c40:	f8dc a000 	ldr.w	sl, [ip]
 8009c44:	0c12      	lsrs	r2, r2, #16
 8009c46:	fa13 f38a 	uxtah	r3, r3, sl
 8009c4a:	fb06 e202 	mla	r2, r6, r2, lr
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	9b00      	ldr	r3, [sp, #0]
 8009c52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c56:	b292      	uxth	r2, r2
 8009c58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009c5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c60:	f8bd 3000 	ldrh.w	r3, [sp]
 8009c64:	4581      	cmp	r9, r0
 8009c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c6a:	f84c 3b04 	str.w	r3, [ip], #4
 8009c6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c72:	d2db      	bcs.n	8009c2c <quorem+0x44>
 8009c74:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c78:	b92b      	cbnz	r3, 8009c86 <quorem+0x9e>
 8009c7a:	9b01      	ldr	r3, [sp, #4]
 8009c7c:	3b04      	subs	r3, #4
 8009c7e:	429d      	cmp	r5, r3
 8009c80:	461a      	mov	r2, r3
 8009c82:	d32e      	bcc.n	8009ce2 <quorem+0xfa>
 8009c84:	613c      	str	r4, [r7, #16]
 8009c86:	4638      	mov	r0, r7
 8009c88:	f001 fc82 	bl	800b590 <__mcmp>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	db24      	blt.n	8009cda <quorem+0xf2>
 8009c90:	3601      	adds	r6, #1
 8009c92:	4628      	mov	r0, r5
 8009c94:	f04f 0c00 	mov.w	ip, #0
 8009c98:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c9c:	f8d0 e000 	ldr.w	lr, [r0]
 8009ca0:	b293      	uxth	r3, r2
 8009ca2:	ebac 0303 	sub.w	r3, ip, r3
 8009ca6:	0c12      	lsrs	r2, r2, #16
 8009ca8:	fa13 f38e 	uxtah	r3, r3, lr
 8009cac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009cb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cba:	45c1      	cmp	r9, r8
 8009cbc:	f840 3b04 	str.w	r3, [r0], #4
 8009cc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009cc4:	d2e8      	bcs.n	8009c98 <quorem+0xb0>
 8009cc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cce:	b922      	cbnz	r2, 8009cda <quorem+0xf2>
 8009cd0:	3b04      	subs	r3, #4
 8009cd2:	429d      	cmp	r5, r3
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	d30a      	bcc.n	8009cee <quorem+0x106>
 8009cd8:	613c      	str	r4, [r7, #16]
 8009cda:	4630      	mov	r0, r6
 8009cdc:	b003      	add	sp, #12
 8009cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce2:	6812      	ldr	r2, [r2, #0]
 8009ce4:	3b04      	subs	r3, #4
 8009ce6:	2a00      	cmp	r2, #0
 8009ce8:	d1cc      	bne.n	8009c84 <quorem+0x9c>
 8009cea:	3c01      	subs	r4, #1
 8009cec:	e7c7      	b.n	8009c7e <quorem+0x96>
 8009cee:	6812      	ldr	r2, [r2, #0]
 8009cf0:	3b04      	subs	r3, #4
 8009cf2:	2a00      	cmp	r2, #0
 8009cf4:	d1f0      	bne.n	8009cd8 <quorem+0xf0>
 8009cf6:	3c01      	subs	r4, #1
 8009cf8:	e7eb      	b.n	8009cd2 <quorem+0xea>
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	e7ee      	b.n	8009cdc <quorem+0xf4>
	...

08009d00 <_dtoa_r>:
 8009d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	ed2d 8b04 	vpush	{d8-d9}
 8009d08:	ec57 6b10 	vmov	r6, r7, d0
 8009d0c:	b093      	sub	sp, #76	; 0x4c
 8009d0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009d10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009d14:	9106      	str	r1, [sp, #24]
 8009d16:	ee10 aa10 	vmov	sl, s0
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d1e:	930c      	str	r3, [sp, #48]	; 0x30
 8009d20:	46bb      	mov	fp, r7
 8009d22:	b975      	cbnz	r5, 8009d42 <_dtoa_r+0x42>
 8009d24:	2010      	movs	r0, #16
 8009d26:	f001 f94d 	bl	800afc4 <malloc>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	6260      	str	r0, [r4, #36]	; 0x24
 8009d2e:	b920      	cbnz	r0, 8009d3a <_dtoa_r+0x3a>
 8009d30:	4ba7      	ldr	r3, [pc, #668]	; (8009fd0 <_dtoa_r+0x2d0>)
 8009d32:	21ea      	movs	r1, #234	; 0xea
 8009d34:	48a7      	ldr	r0, [pc, #668]	; (8009fd4 <_dtoa_r+0x2d4>)
 8009d36:	f002 f8ad 	bl	800be94 <__assert_func>
 8009d3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d3e:	6005      	str	r5, [r0, #0]
 8009d40:	60c5      	str	r5, [r0, #12]
 8009d42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d44:	6819      	ldr	r1, [r3, #0]
 8009d46:	b151      	cbz	r1, 8009d5e <_dtoa_r+0x5e>
 8009d48:	685a      	ldr	r2, [r3, #4]
 8009d4a:	604a      	str	r2, [r1, #4]
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	4093      	lsls	r3, r2
 8009d50:	608b      	str	r3, [r1, #8]
 8009d52:	4620      	mov	r0, r4
 8009d54:	f001 f990 	bl	800b078 <_Bfree>
 8009d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]
 8009d5e:	1e3b      	subs	r3, r7, #0
 8009d60:	bfaa      	itet	ge
 8009d62:	2300      	movge	r3, #0
 8009d64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009d68:	f8c8 3000 	strge.w	r3, [r8]
 8009d6c:	4b9a      	ldr	r3, [pc, #616]	; (8009fd8 <_dtoa_r+0x2d8>)
 8009d6e:	bfbc      	itt	lt
 8009d70:	2201      	movlt	r2, #1
 8009d72:	f8c8 2000 	strlt.w	r2, [r8]
 8009d76:	ea33 030b 	bics.w	r3, r3, fp
 8009d7a:	d11b      	bne.n	8009db4 <_dtoa_r+0xb4>
 8009d7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d82:	6013      	str	r3, [r2, #0]
 8009d84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d88:	4333      	orrs	r3, r6
 8009d8a:	f000 8592 	beq.w	800a8b2 <_dtoa_r+0xbb2>
 8009d8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d90:	b963      	cbnz	r3, 8009dac <_dtoa_r+0xac>
 8009d92:	4b92      	ldr	r3, [pc, #584]	; (8009fdc <_dtoa_r+0x2dc>)
 8009d94:	e022      	b.n	8009ddc <_dtoa_r+0xdc>
 8009d96:	4b92      	ldr	r3, [pc, #584]	; (8009fe0 <_dtoa_r+0x2e0>)
 8009d98:	9301      	str	r3, [sp, #4]
 8009d9a:	3308      	adds	r3, #8
 8009d9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	9801      	ldr	r0, [sp, #4]
 8009da2:	b013      	add	sp, #76	; 0x4c
 8009da4:	ecbd 8b04 	vpop	{d8-d9}
 8009da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dac:	4b8b      	ldr	r3, [pc, #556]	; (8009fdc <_dtoa_r+0x2dc>)
 8009dae:	9301      	str	r3, [sp, #4]
 8009db0:	3303      	adds	r3, #3
 8009db2:	e7f3      	b.n	8009d9c <_dtoa_r+0x9c>
 8009db4:	2200      	movs	r2, #0
 8009db6:	2300      	movs	r3, #0
 8009db8:	4650      	mov	r0, sl
 8009dba:	4659      	mov	r1, fp
 8009dbc:	f7f6 fe8c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009dc0:	ec4b ab19 	vmov	d9, sl, fp
 8009dc4:	4680      	mov	r8, r0
 8009dc6:	b158      	cbz	r0, 8009de0 <_dtoa_r+0xe0>
 8009dc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dca:	2301      	movs	r3, #1
 8009dcc:	6013      	str	r3, [r2, #0]
 8009dce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f000 856b 	beq.w	800a8ac <_dtoa_r+0xbac>
 8009dd6:	4883      	ldr	r0, [pc, #524]	; (8009fe4 <_dtoa_r+0x2e4>)
 8009dd8:	6018      	str	r0, [r3, #0]
 8009dda:	1e43      	subs	r3, r0, #1
 8009ddc:	9301      	str	r3, [sp, #4]
 8009dde:	e7df      	b.n	8009da0 <_dtoa_r+0xa0>
 8009de0:	ec4b ab10 	vmov	d0, sl, fp
 8009de4:	aa10      	add	r2, sp, #64	; 0x40
 8009de6:	a911      	add	r1, sp, #68	; 0x44
 8009de8:	4620      	mov	r0, r4
 8009dea:	f001 fcf3 	bl	800b7d4 <__d2b>
 8009dee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009df2:	ee08 0a10 	vmov	s16, r0
 8009df6:	2d00      	cmp	r5, #0
 8009df8:	f000 8084 	beq.w	8009f04 <_dtoa_r+0x204>
 8009dfc:	ee19 3a90 	vmov	r3, s19
 8009e00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009e08:	4656      	mov	r6, sl
 8009e0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009e0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009e16:	4b74      	ldr	r3, [pc, #464]	; (8009fe8 <_dtoa_r+0x2e8>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	f7f6 fa3b 	bl	8000298 <__aeabi_dsub>
 8009e22:	a365      	add	r3, pc, #404	; (adr r3, 8009fb8 <_dtoa_r+0x2b8>)
 8009e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e28:	f7f6 fbee 	bl	8000608 <__aeabi_dmul>
 8009e2c:	a364      	add	r3, pc, #400	; (adr r3, 8009fc0 <_dtoa_r+0x2c0>)
 8009e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e32:	f7f6 fa33 	bl	800029c <__adddf3>
 8009e36:	4606      	mov	r6, r0
 8009e38:	4628      	mov	r0, r5
 8009e3a:	460f      	mov	r7, r1
 8009e3c:	f7f6 fb7a 	bl	8000534 <__aeabi_i2d>
 8009e40:	a361      	add	r3, pc, #388	; (adr r3, 8009fc8 <_dtoa_r+0x2c8>)
 8009e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e46:	f7f6 fbdf 	bl	8000608 <__aeabi_dmul>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	4630      	mov	r0, r6
 8009e50:	4639      	mov	r1, r7
 8009e52:	f7f6 fa23 	bl	800029c <__adddf3>
 8009e56:	4606      	mov	r6, r0
 8009e58:	460f      	mov	r7, r1
 8009e5a:	f7f6 fe85 	bl	8000b68 <__aeabi_d2iz>
 8009e5e:	2200      	movs	r2, #0
 8009e60:	9000      	str	r0, [sp, #0]
 8009e62:	2300      	movs	r3, #0
 8009e64:	4630      	mov	r0, r6
 8009e66:	4639      	mov	r1, r7
 8009e68:	f7f6 fe40 	bl	8000aec <__aeabi_dcmplt>
 8009e6c:	b150      	cbz	r0, 8009e84 <_dtoa_r+0x184>
 8009e6e:	9800      	ldr	r0, [sp, #0]
 8009e70:	f7f6 fb60 	bl	8000534 <__aeabi_i2d>
 8009e74:	4632      	mov	r2, r6
 8009e76:	463b      	mov	r3, r7
 8009e78:	f7f6 fe2e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e7c:	b910      	cbnz	r0, 8009e84 <_dtoa_r+0x184>
 8009e7e:	9b00      	ldr	r3, [sp, #0]
 8009e80:	3b01      	subs	r3, #1
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	9b00      	ldr	r3, [sp, #0]
 8009e86:	2b16      	cmp	r3, #22
 8009e88:	d85a      	bhi.n	8009f40 <_dtoa_r+0x240>
 8009e8a:	9a00      	ldr	r2, [sp, #0]
 8009e8c:	4b57      	ldr	r3, [pc, #348]	; (8009fec <_dtoa_r+0x2ec>)
 8009e8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	ec51 0b19 	vmov	r0, r1, d9
 8009e9a:	f7f6 fe27 	bl	8000aec <__aeabi_dcmplt>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d050      	beq.n	8009f44 <_dtoa_r+0x244>
 8009ea2:	9b00      	ldr	r3, [sp, #0]
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009eae:	1b5d      	subs	r5, r3, r5
 8009eb0:	1e6b      	subs	r3, r5, #1
 8009eb2:	9305      	str	r3, [sp, #20]
 8009eb4:	bf45      	ittet	mi
 8009eb6:	f1c5 0301 	rsbmi	r3, r5, #1
 8009eba:	9304      	strmi	r3, [sp, #16]
 8009ebc:	2300      	movpl	r3, #0
 8009ebe:	2300      	movmi	r3, #0
 8009ec0:	bf4c      	ite	mi
 8009ec2:	9305      	strmi	r3, [sp, #20]
 8009ec4:	9304      	strpl	r3, [sp, #16]
 8009ec6:	9b00      	ldr	r3, [sp, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	db3d      	blt.n	8009f48 <_dtoa_r+0x248>
 8009ecc:	9b05      	ldr	r3, [sp, #20]
 8009ece:	9a00      	ldr	r2, [sp, #0]
 8009ed0:	920a      	str	r2, [sp, #40]	; 0x28
 8009ed2:	4413      	add	r3, r2
 8009ed4:	9305      	str	r3, [sp, #20]
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	9307      	str	r3, [sp, #28]
 8009eda:	9b06      	ldr	r3, [sp, #24]
 8009edc:	2b09      	cmp	r3, #9
 8009ede:	f200 8089 	bhi.w	8009ff4 <_dtoa_r+0x2f4>
 8009ee2:	2b05      	cmp	r3, #5
 8009ee4:	bfc4      	itt	gt
 8009ee6:	3b04      	subgt	r3, #4
 8009ee8:	9306      	strgt	r3, [sp, #24]
 8009eea:	9b06      	ldr	r3, [sp, #24]
 8009eec:	f1a3 0302 	sub.w	r3, r3, #2
 8009ef0:	bfcc      	ite	gt
 8009ef2:	2500      	movgt	r5, #0
 8009ef4:	2501      	movle	r5, #1
 8009ef6:	2b03      	cmp	r3, #3
 8009ef8:	f200 8087 	bhi.w	800a00a <_dtoa_r+0x30a>
 8009efc:	e8df f003 	tbb	[pc, r3]
 8009f00:	59383a2d 	.word	0x59383a2d
 8009f04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009f08:	441d      	add	r5, r3
 8009f0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009f0e:	2b20      	cmp	r3, #32
 8009f10:	bfc1      	itttt	gt
 8009f12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009f1a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009f1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009f22:	bfda      	itte	le
 8009f24:	f1c3 0320 	rsble	r3, r3, #32
 8009f28:	fa06 f003 	lslle.w	r0, r6, r3
 8009f2c:	4318      	orrgt	r0, r3
 8009f2e:	f7f6 faf1 	bl	8000514 <__aeabi_ui2d>
 8009f32:	2301      	movs	r3, #1
 8009f34:	4606      	mov	r6, r0
 8009f36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009f3a:	3d01      	subs	r5, #1
 8009f3c:	930e      	str	r3, [sp, #56]	; 0x38
 8009f3e:	e76a      	b.n	8009e16 <_dtoa_r+0x116>
 8009f40:	2301      	movs	r3, #1
 8009f42:	e7b2      	b.n	8009eaa <_dtoa_r+0x1aa>
 8009f44:	900b      	str	r0, [sp, #44]	; 0x2c
 8009f46:	e7b1      	b.n	8009eac <_dtoa_r+0x1ac>
 8009f48:	9b04      	ldr	r3, [sp, #16]
 8009f4a:	9a00      	ldr	r2, [sp, #0]
 8009f4c:	1a9b      	subs	r3, r3, r2
 8009f4e:	9304      	str	r3, [sp, #16]
 8009f50:	4253      	negs	r3, r2
 8009f52:	9307      	str	r3, [sp, #28]
 8009f54:	2300      	movs	r3, #0
 8009f56:	930a      	str	r3, [sp, #40]	; 0x28
 8009f58:	e7bf      	b.n	8009eda <_dtoa_r+0x1da>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	9308      	str	r3, [sp, #32]
 8009f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	dc55      	bgt.n	800a010 <_dtoa_r+0x310>
 8009f64:	2301      	movs	r3, #1
 8009f66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f6e:	e00c      	b.n	8009f8a <_dtoa_r+0x28a>
 8009f70:	2301      	movs	r3, #1
 8009f72:	e7f3      	b.n	8009f5c <_dtoa_r+0x25c>
 8009f74:	2300      	movs	r3, #0
 8009f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f78:	9308      	str	r3, [sp, #32]
 8009f7a:	9b00      	ldr	r3, [sp, #0]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	9302      	str	r3, [sp, #8]
 8009f80:	3301      	adds	r3, #1
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	9303      	str	r3, [sp, #12]
 8009f86:	bfb8      	it	lt
 8009f88:	2301      	movlt	r3, #1
 8009f8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	6042      	str	r2, [r0, #4]
 8009f90:	2204      	movs	r2, #4
 8009f92:	f102 0614 	add.w	r6, r2, #20
 8009f96:	429e      	cmp	r6, r3
 8009f98:	6841      	ldr	r1, [r0, #4]
 8009f9a:	d93d      	bls.n	800a018 <_dtoa_r+0x318>
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f001 f82b 	bl	800aff8 <_Balloc>
 8009fa2:	9001      	str	r0, [sp, #4]
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d13b      	bne.n	800a020 <_dtoa_r+0x320>
 8009fa8:	4b11      	ldr	r3, [pc, #68]	; (8009ff0 <_dtoa_r+0x2f0>)
 8009faa:	4602      	mov	r2, r0
 8009fac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009fb0:	e6c0      	b.n	8009d34 <_dtoa_r+0x34>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e7df      	b.n	8009f76 <_dtoa_r+0x276>
 8009fb6:	bf00      	nop
 8009fb8:	636f4361 	.word	0x636f4361
 8009fbc:	3fd287a7 	.word	0x3fd287a7
 8009fc0:	8b60c8b3 	.word	0x8b60c8b3
 8009fc4:	3fc68a28 	.word	0x3fc68a28
 8009fc8:	509f79fb 	.word	0x509f79fb
 8009fcc:	3fd34413 	.word	0x3fd34413
 8009fd0:	0800e246 	.word	0x0800e246
 8009fd4:	0800e25d 	.word	0x0800e25d
 8009fd8:	7ff00000 	.word	0x7ff00000
 8009fdc:	0800e242 	.word	0x0800e242
 8009fe0:	0800e239 	.word	0x0800e239
 8009fe4:	0800e0bd 	.word	0x0800e0bd
 8009fe8:	3ff80000 	.word	0x3ff80000
 8009fec:	0800e3c8 	.word	0x0800e3c8
 8009ff0:	0800e2b8 	.word	0x0800e2b8
 8009ff4:	2501      	movs	r5, #1
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	9306      	str	r3, [sp, #24]
 8009ffa:	9508      	str	r5, [sp, #32]
 8009ffc:	f04f 33ff 	mov.w	r3, #4294967295
 800a000:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a004:	2200      	movs	r2, #0
 800a006:	2312      	movs	r3, #18
 800a008:	e7b0      	b.n	8009f6c <_dtoa_r+0x26c>
 800a00a:	2301      	movs	r3, #1
 800a00c:	9308      	str	r3, [sp, #32]
 800a00e:	e7f5      	b.n	8009ffc <_dtoa_r+0x2fc>
 800a010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a012:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a016:	e7b8      	b.n	8009f8a <_dtoa_r+0x28a>
 800a018:	3101      	adds	r1, #1
 800a01a:	6041      	str	r1, [r0, #4]
 800a01c:	0052      	lsls	r2, r2, #1
 800a01e:	e7b8      	b.n	8009f92 <_dtoa_r+0x292>
 800a020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a022:	9a01      	ldr	r2, [sp, #4]
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	9b03      	ldr	r3, [sp, #12]
 800a028:	2b0e      	cmp	r3, #14
 800a02a:	f200 809d 	bhi.w	800a168 <_dtoa_r+0x468>
 800a02e:	2d00      	cmp	r5, #0
 800a030:	f000 809a 	beq.w	800a168 <_dtoa_r+0x468>
 800a034:	9b00      	ldr	r3, [sp, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	dd32      	ble.n	800a0a0 <_dtoa_r+0x3a0>
 800a03a:	4ab7      	ldr	r2, [pc, #732]	; (800a318 <_dtoa_r+0x618>)
 800a03c:	f003 030f 	and.w	r3, r3, #15
 800a040:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a044:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a048:	9b00      	ldr	r3, [sp, #0]
 800a04a:	05d8      	lsls	r0, r3, #23
 800a04c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a050:	d516      	bpl.n	800a080 <_dtoa_r+0x380>
 800a052:	4bb2      	ldr	r3, [pc, #712]	; (800a31c <_dtoa_r+0x61c>)
 800a054:	ec51 0b19 	vmov	r0, r1, d9
 800a058:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a05c:	f7f6 fbfe 	bl	800085c <__aeabi_ddiv>
 800a060:	f007 070f 	and.w	r7, r7, #15
 800a064:	4682      	mov	sl, r0
 800a066:	468b      	mov	fp, r1
 800a068:	2503      	movs	r5, #3
 800a06a:	4eac      	ldr	r6, [pc, #688]	; (800a31c <_dtoa_r+0x61c>)
 800a06c:	b957      	cbnz	r7, 800a084 <_dtoa_r+0x384>
 800a06e:	4642      	mov	r2, r8
 800a070:	464b      	mov	r3, r9
 800a072:	4650      	mov	r0, sl
 800a074:	4659      	mov	r1, fp
 800a076:	f7f6 fbf1 	bl	800085c <__aeabi_ddiv>
 800a07a:	4682      	mov	sl, r0
 800a07c:	468b      	mov	fp, r1
 800a07e:	e028      	b.n	800a0d2 <_dtoa_r+0x3d2>
 800a080:	2502      	movs	r5, #2
 800a082:	e7f2      	b.n	800a06a <_dtoa_r+0x36a>
 800a084:	07f9      	lsls	r1, r7, #31
 800a086:	d508      	bpl.n	800a09a <_dtoa_r+0x39a>
 800a088:	4640      	mov	r0, r8
 800a08a:	4649      	mov	r1, r9
 800a08c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a090:	f7f6 faba 	bl	8000608 <__aeabi_dmul>
 800a094:	3501      	adds	r5, #1
 800a096:	4680      	mov	r8, r0
 800a098:	4689      	mov	r9, r1
 800a09a:	107f      	asrs	r7, r7, #1
 800a09c:	3608      	adds	r6, #8
 800a09e:	e7e5      	b.n	800a06c <_dtoa_r+0x36c>
 800a0a0:	f000 809b 	beq.w	800a1da <_dtoa_r+0x4da>
 800a0a4:	9b00      	ldr	r3, [sp, #0]
 800a0a6:	4f9d      	ldr	r7, [pc, #628]	; (800a31c <_dtoa_r+0x61c>)
 800a0a8:	425e      	negs	r6, r3
 800a0aa:	4b9b      	ldr	r3, [pc, #620]	; (800a318 <_dtoa_r+0x618>)
 800a0ac:	f006 020f 	and.w	r2, r6, #15
 800a0b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b8:	ec51 0b19 	vmov	r0, r1, d9
 800a0bc:	f7f6 faa4 	bl	8000608 <__aeabi_dmul>
 800a0c0:	1136      	asrs	r6, r6, #4
 800a0c2:	4682      	mov	sl, r0
 800a0c4:	468b      	mov	fp, r1
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	2502      	movs	r5, #2
 800a0ca:	2e00      	cmp	r6, #0
 800a0cc:	d17a      	bne.n	800a1c4 <_dtoa_r+0x4c4>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1d3      	bne.n	800a07a <_dtoa_r+0x37a>
 800a0d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f000 8082 	beq.w	800a1de <_dtoa_r+0x4de>
 800a0da:	4b91      	ldr	r3, [pc, #580]	; (800a320 <_dtoa_r+0x620>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	4650      	mov	r0, sl
 800a0e0:	4659      	mov	r1, fp
 800a0e2:	f7f6 fd03 	bl	8000aec <__aeabi_dcmplt>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d079      	beq.n	800a1de <_dtoa_r+0x4de>
 800a0ea:	9b03      	ldr	r3, [sp, #12]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d076      	beq.n	800a1de <_dtoa_r+0x4de>
 800a0f0:	9b02      	ldr	r3, [sp, #8]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	dd36      	ble.n	800a164 <_dtoa_r+0x464>
 800a0f6:	9b00      	ldr	r3, [sp, #0]
 800a0f8:	4650      	mov	r0, sl
 800a0fa:	4659      	mov	r1, fp
 800a0fc:	1e5f      	subs	r7, r3, #1
 800a0fe:	2200      	movs	r2, #0
 800a100:	4b88      	ldr	r3, [pc, #544]	; (800a324 <_dtoa_r+0x624>)
 800a102:	f7f6 fa81 	bl	8000608 <__aeabi_dmul>
 800a106:	9e02      	ldr	r6, [sp, #8]
 800a108:	4682      	mov	sl, r0
 800a10a:	468b      	mov	fp, r1
 800a10c:	3501      	adds	r5, #1
 800a10e:	4628      	mov	r0, r5
 800a110:	f7f6 fa10 	bl	8000534 <__aeabi_i2d>
 800a114:	4652      	mov	r2, sl
 800a116:	465b      	mov	r3, fp
 800a118:	f7f6 fa76 	bl	8000608 <__aeabi_dmul>
 800a11c:	4b82      	ldr	r3, [pc, #520]	; (800a328 <_dtoa_r+0x628>)
 800a11e:	2200      	movs	r2, #0
 800a120:	f7f6 f8bc 	bl	800029c <__adddf3>
 800a124:	46d0      	mov	r8, sl
 800a126:	46d9      	mov	r9, fp
 800a128:	4682      	mov	sl, r0
 800a12a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a12e:	2e00      	cmp	r6, #0
 800a130:	d158      	bne.n	800a1e4 <_dtoa_r+0x4e4>
 800a132:	4b7e      	ldr	r3, [pc, #504]	; (800a32c <_dtoa_r+0x62c>)
 800a134:	2200      	movs	r2, #0
 800a136:	4640      	mov	r0, r8
 800a138:	4649      	mov	r1, r9
 800a13a:	f7f6 f8ad 	bl	8000298 <__aeabi_dsub>
 800a13e:	4652      	mov	r2, sl
 800a140:	465b      	mov	r3, fp
 800a142:	4680      	mov	r8, r0
 800a144:	4689      	mov	r9, r1
 800a146:	f7f6 fcef 	bl	8000b28 <__aeabi_dcmpgt>
 800a14a:	2800      	cmp	r0, #0
 800a14c:	f040 8295 	bne.w	800a67a <_dtoa_r+0x97a>
 800a150:	4652      	mov	r2, sl
 800a152:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a156:	4640      	mov	r0, r8
 800a158:	4649      	mov	r1, r9
 800a15a:	f7f6 fcc7 	bl	8000aec <__aeabi_dcmplt>
 800a15e:	2800      	cmp	r0, #0
 800a160:	f040 8289 	bne.w	800a676 <_dtoa_r+0x976>
 800a164:	ec5b ab19 	vmov	sl, fp, d9
 800a168:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f2c0 8148 	blt.w	800a400 <_dtoa_r+0x700>
 800a170:	9a00      	ldr	r2, [sp, #0]
 800a172:	2a0e      	cmp	r2, #14
 800a174:	f300 8144 	bgt.w	800a400 <_dtoa_r+0x700>
 800a178:	4b67      	ldr	r3, [pc, #412]	; (800a318 <_dtoa_r+0x618>)
 800a17a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a17e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a184:	2b00      	cmp	r3, #0
 800a186:	f280 80d5 	bge.w	800a334 <_dtoa_r+0x634>
 800a18a:	9b03      	ldr	r3, [sp, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f300 80d1 	bgt.w	800a334 <_dtoa_r+0x634>
 800a192:	f040 826f 	bne.w	800a674 <_dtoa_r+0x974>
 800a196:	4b65      	ldr	r3, [pc, #404]	; (800a32c <_dtoa_r+0x62c>)
 800a198:	2200      	movs	r2, #0
 800a19a:	4640      	mov	r0, r8
 800a19c:	4649      	mov	r1, r9
 800a19e:	f7f6 fa33 	bl	8000608 <__aeabi_dmul>
 800a1a2:	4652      	mov	r2, sl
 800a1a4:	465b      	mov	r3, fp
 800a1a6:	f7f6 fcb5 	bl	8000b14 <__aeabi_dcmpge>
 800a1aa:	9e03      	ldr	r6, [sp, #12]
 800a1ac:	4637      	mov	r7, r6
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	f040 8245 	bne.w	800a63e <_dtoa_r+0x93e>
 800a1b4:	9d01      	ldr	r5, [sp, #4]
 800a1b6:	2331      	movs	r3, #49	; 0x31
 800a1b8:	f805 3b01 	strb.w	r3, [r5], #1
 800a1bc:	9b00      	ldr	r3, [sp, #0]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	e240      	b.n	800a646 <_dtoa_r+0x946>
 800a1c4:	07f2      	lsls	r2, r6, #31
 800a1c6:	d505      	bpl.n	800a1d4 <_dtoa_r+0x4d4>
 800a1c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1cc:	f7f6 fa1c 	bl	8000608 <__aeabi_dmul>
 800a1d0:	3501      	adds	r5, #1
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	1076      	asrs	r6, r6, #1
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	e777      	b.n	800a0ca <_dtoa_r+0x3ca>
 800a1da:	2502      	movs	r5, #2
 800a1dc:	e779      	b.n	800a0d2 <_dtoa_r+0x3d2>
 800a1de:	9f00      	ldr	r7, [sp, #0]
 800a1e0:	9e03      	ldr	r6, [sp, #12]
 800a1e2:	e794      	b.n	800a10e <_dtoa_r+0x40e>
 800a1e4:	9901      	ldr	r1, [sp, #4]
 800a1e6:	4b4c      	ldr	r3, [pc, #304]	; (800a318 <_dtoa_r+0x618>)
 800a1e8:	4431      	add	r1, r6
 800a1ea:	910d      	str	r1, [sp, #52]	; 0x34
 800a1ec:	9908      	ldr	r1, [sp, #32]
 800a1ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a1f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1f6:	2900      	cmp	r1, #0
 800a1f8:	d043      	beq.n	800a282 <_dtoa_r+0x582>
 800a1fa:	494d      	ldr	r1, [pc, #308]	; (800a330 <_dtoa_r+0x630>)
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	f7f6 fb2d 	bl	800085c <__aeabi_ddiv>
 800a202:	4652      	mov	r2, sl
 800a204:	465b      	mov	r3, fp
 800a206:	f7f6 f847 	bl	8000298 <__aeabi_dsub>
 800a20a:	9d01      	ldr	r5, [sp, #4]
 800a20c:	4682      	mov	sl, r0
 800a20e:	468b      	mov	fp, r1
 800a210:	4649      	mov	r1, r9
 800a212:	4640      	mov	r0, r8
 800a214:	f7f6 fca8 	bl	8000b68 <__aeabi_d2iz>
 800a218:	4606      	mov	r6, r0
 800a21a:	f7f6 f98b 	bl	8000534 <__aeabi_i2d>
 800a21e:	4602      	mov	r2, r0
 800a220:	460b      	mov	r3, r1
 800a222:	4640      	mov	r0, r8
 800a224:	4649      	mov	r1, r9
 800a226:	f7f6 f837 	bl	8000298 <__aeabi_dsub>
 800a22a:	3630      	adds	r6, #48	; 0x30
 800a22c:	f805 6b01 	strb.w	r6, [r5], #1
 800a230:	4652      	mov	r2, sl
 800a232:	465b      	mov	r3, fp
 800a234:	4680      	mov	r8, r0
 800a236:	4689      	mov	r9, r1
 800a238:	f7f6 fc58 	bl	8000aec <__aeabi_dcmplt>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d163      	bne.n	800a308 <_dtoa_r+0x608>
 800a240:	4642      	mov	r2, r8
 800a242:	464b      	mov	r3, r9
 800a244:	4936      	ldr	r1, [pc, #216]	; (800a320 <_dtoa_r+0x620>)
 800a246:	2000      	movs	r0, #0
 800a248:	f7f6 f826 	bl	8000298 <__aeabi_dsub>
 800a24c:	4652      	mov	r2, sl
 800a24e:	465b      	mov	r3, fp
 800a250:	f7f6 fc4c 	bl	8000aec <__aeabi_dcmplt>
 800a254:	2800      	cmp	r0, #0
 800a256:	f040 80b5 	bne.w	800a3c4 <_dtoa_r+0x6c4>
 800a25a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a25c:	429d      	cmp	r5, r3
 800a25e:	d081      	beq.n	800a164 <_dtoa_r+0x464>
 800a260:	4b30      	ldr	r3, [pc, #192]	; (800a324 <_dtoa_r+0x624>)
 800a262:	2200      	movs	r2, #0
 800a264:	4650      	mov	r0, sl
 800a266:	4659      	mov	r1, fp
 800a268:	f7f6 f9ce 	bl	8000608 <__aeabi_dmul>
 800a26c:	4b2d      	ldr	r3, [pc, #180]	; (800a324 <_dtoa_r+0x624>)
 800a26e:	4682      	mov	sl, r0
 800a270:	468b      	mov	fp, r1
 800a272:	4640      	mov	r0, r8
 800a274:	4649      	mov	r1, r9
 800a276:	2200      	movs	r2, #0
 800a278:	f7f6 f9c6 	bl	8000608 <__aeabi_dmul>
 800a27c:	4680      	mov	r8, r0
 800a27e:	4689      	mov	r9, r1
 800a280:	e7c6      	b.n	800a210 <_dtoa_r+0x510>
 800a282:	4650      	mov	r0, sl
 800a284:	4659      	mov	r1, fp
 800a286:	f7f6 f9bf 	bl	8000608 <__aeabi_dmul>
 800a28a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a28c:	9d01      	ldr	r5, [sp, #4]
 800a28e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a290:	4682      	mov	sl, r0
 800a292:	468b      	mov	fp, r1
 800a294:	4649      	mov	r1, r9
 800a296:	4640      	mov	r0, r8
 800a298:	f7f6 fc66 	bl	8000b68 <__aeabi_d2iz>
 800a29c:	4606      	mov	r6, r0
 800a29e:	f7f6 f949 	bl	8000534 <__aeabi_i2d>
 800a2a2:	3630      	adds	r6, #48	; 0x30
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4640      	mov	r0, r8
 800a2aa:	4649      	mov	r1, r9
 800a2ac:	f7f5 fff4 	bl	8000298 <__aeabi_dsub>
 800a2b0:	f805 6b01 	strb.w	r6, [r5], #1
 800a2b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2b6:	429d      	cmp	r5, r3
 800a2b8:	4680      	mov	r8, r0
 800a2ba:	4689      	mov	r9, r1
 800a2bc:	f04f 0200 	mov.w	r2, #0
 800a2c0:	d124      	bne.n	800a30c <_dtoa_r+0x60c>
 800a2c2:	4b1b      	ldr	r3, [pc, #108]	; (800a330 <_dtoa_r+0x630>)
 800a2c4:	4650      	mov	r0, sl
 800a2c6:	4659      	mov	r1, fp
 800a2c8:	f7f5 ffe8 	bl	800029c <__adddf3>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4640      	mov	r0, r8
 800a2d2:	4649      	mov	r1, r9
 800a2d4:	f7f6 fc28 	bl	8000b28 <__aeabi_dcmpgt>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d173      	bne.n	800a3c4 <_dtoa_r+0x6c4>
 800a2dc:	4652      	mov	r2, sl
 800a2de:	465b      	mov	r3, fp
 800a2e0:	4913      	ldr	r1, [pc, #76]	; (800a330 <_dtoa_r+0x630>)
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	f7f5 ffd8 	bl	8000298 <__aeabi_dsub>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4640      	mov	r0, r8
 800a2ee:	4649      	mov	r1, r9
 800a2f0:	f7f6 fbfc 	bl	8000aec <__aeabi_dcmplt>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	f43f af35 	beq.w	800a164 <_dtoa_r+0x464>
 800a2fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a2fc:	1e6b      	subs	r3, r5, #1
 800a2fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a300:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a304:	2b30      	cmp	r3, #48	; 0x30
 800a306:	d0f8      	beq.n	800a2fa <_dtoa_r+0x5fa>
 800a308:	9700      	str	r7, [sp, #0]
 800a30a:	e049      	b.n	800a3a0 <_dtoa_r+0x6a0>
 800a30c:	4b05      	ldr	r3, [pc, #20]	; (800a324 <_dtoa_r+0x624>)
 800a30e:	f7f6 f97b 	bl	8000608 <__aeabi_dmul>
 800a312:	4680      	mov	r8, r0
 800a314:	4689      	mov	r9, r1
 800a316:	e7bd      	b.n	800a294 <_dtoa_r+0x594>
 800a318:	0800e3c8 	.word	0x0800e3c8
 800a31c:	0800e3a0 	.word	0x0800e3a0
 800a320:	3ff00000 	.word	0x3ff00000
 800a324:	40240000 	.word	0x40240000
 800a328:	401c0000 	.word	0x401c0000
 800a32c:	40140000 	.word	0x40140000
 800a330:	3fe00000 	.word	0x3fe00000
 800a334:	9d01      	ldr	r5, [sp, #4]
 800a336:	4656      	mov	r6, sl
 800a338:	465f      	mov	r7, fp
 800a33a:	4642      	mov	r2, r8
 800a33c:	464b      	mov	r3, r9
 800a33e:	4630      	mov	r0, r6
 800a340:	4639      	mov	r1, r7
 800a342:	f7f6 fa8b 	bl	800085c <__aeabi_ddiv>
 800a346:	f7f6 fc0f 	bl	8000b68 <__aeabi_d2iz>
 800a34a:	4682      	mov	sl, r0
 800a34c:	f7f6 f8f2 	bl	8000534 <__aeabi_i2d>
 800a350:	4642      	mov	r2, r8
 800a352:	464b      	mov	r3, r9
 800a354:	f7f6 f958 	bl	8000608 <__aeabi_dmul>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4630      	mov	r0, r6
 800a35e:	4639      	mov	r1, r7
 800a360:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a364:	f7f5 ff98 	bl	8000298 <__aeabi_dsub>
 800a368:	f805 6b01 	strb.w	r6, [r5], #1
 800a36c:	9e01      	ldr	r6, [sp, #4]
 800a36e:	9f03      	ldr	r7, [sp, #12]
 800a370:	1bae      	subs	r6, r5, r6
 800a372:	42b7      	cmp	r7, r6
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	d135      	bne.n	800a3e6 <_dtoa_r+0x6e6>
 800a37a:	f7f5 ff8f 	bl	800029c <__adddf3>
 800a37e:	4642      	mov	r2, r8
 800a380:	464b      	mov	r3, r9
 800a382:	4606      	mov	r6, r0
 800a384:	460f      	mov	r7, r1
 800a386:	f7f6 fbcf 	bl	8000b28 <__aeabi_dcmpgt>
 800a38a:	b9d0      	cbnz	r0, 800a3c2 <_dtoa_r+0x6c2>
 800a38c:	4642      	mov	r2, r8
 800a38e:	464b      	mov	r3, r9
 800a390:	4630      	mov	r0, r6
 800a392:	4639      	mov	r1, r7
 800a394:	f7f6 fba0 	bl	8000ad8 <__aeabi_dcmpeq>
 800a398:	b110      	cbz	r0, 800a3a0 <_dtoa_r+0x6a0>
 800a39a:	f01a 0f01 	tst.w	sl, #1
 800a39e:	d110      	bne.n	800a3c2 <_dtoa_r+0x6c2>
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	ee18 1a10 	vmov	r1, s16
 800a3a6:	f000 fe67 	bl	800b078 <_Bfree>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	9800      	ldr	r0, [sp, #0]
 800a3ae:	702b      	strb	r3, [r5, #0]
 800a3b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	6018      	str	r0, [r3, #0]
 800a3b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f43f acf1 	beq.w	8009da0 <_dtoa_r+0xa0>
 800a3be:	601d      	str	r5, [r3, #0]
 800a3c0:	e4ee      	b.n	8009da0 <_dtoa_r+0xa0>
 800a3c2:	9f00      	ldr	r7, [sp, #0]
 800a3c4:	462b      	mov	r3, r5
 800a3c6:	461d      	mov	r5, r3
 800a3c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3cc:	2a39      	cmp	r2, #57	; 0x39
 800a3ce:	d106      	bne.n	800a3de <_dtoa_r+0x6de>
 800a3d0:	9a01      	ldr	r2, [sp, #4]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d1f7      	bne.n	800a3c6 <_dtoa_r+0x6c6>
 800a3d6:	9901      	ldr	r1, [sp, #4]
 800a3d8:	2230      	movs	r2, #48	; 0x30
 800a3da:	3701      	adds	r7, #1
 800a3dc:	700a      	strb	r2, [r1, #0]
 800a3de:	781a      	ldrb	r2, [r3, #0]
 800a3e0:	3201      	adds	r2, #1
 800a3e2:	701a      	strb	r2, [r3, #0]
 800a3e4:	e790      	b.n	800a308 <_dtoa_r+0x608>
 800a3e6:	4ba6      	ldr	r3, [pc, #664]	; (800a680 <_dtoa_r+0x980>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f7f6 f90d 	bl	8000608 <__aeabi_dmul>
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	460f      	mov	r7, r1
 800a3f6:	f7f6 fb6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	d09d      	beq.n	800a33a <_dtoa_r+0x63a>
 800a3fe:	e7cf      	b.n	800a3a0 <_dtoa_r+0x6a0>
 800a400:	9a08      	ldr	r2, [sp, #32]
 800a402:	2a00      	cmp	r2, #0
 800a404:	f000 80d7 	beq.w	800a5b6 <_dtoa_r+0x8b6>
 800a408:	9a06      	ldr	r2, [sp, #24]
 800a40a:	2a01      	cmp	r2, #1
 800a40c:	f300 80ba 	bgt.w	800a584 <_dtoa_r+0x884>
 800a410:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a412:	2a00      	cmp	r2, #0
 800a414:	f000 80b2 	beq.w	800a57c <_dtoa_r+0x87c>
 800a418:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a41c:	9e07      	ldr	r6, [sp, #28]
 800a41e:	9d04      	ldr	r5, [sp, #16]
 800a420:	9a04      	ldr	r2, [sp, #16]
 800a422:	441a      	add	r2, r3
 800a424:	9204      	str	r2, [sp, #16]
 800a426:	9a05      	ldr	r2, [sp, #20]
 800a428:	2101      	movs	r1, #1
 800a42a:	441a      	add	r2, r3
 800a42c:	4620      	mov	r0, r4
 800a42e:	9205      	str	r2, [sp, #20]
 800a430:	f000 ff24 	bl	800b27c <__i2b>
 800a434:	4607      	mov	r7, r0
 800a436:	2d00      	cmp	r5, #0
 800a438:	dd0c      	ble.n	800a454 <_dtoa_r+0x754>
 800a43a:	9b05      	ldr	r3, [sp, #20]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	dd09      	ble.n	800a454 <_dtoa_r+0x754>
 800a440:	42ab      	cmp	r3, r5
 800a442:	9a04      	ldr	r2, [sp, #16]
 800a444:	bfa8      	it	ge
 800a446:	462b      	movge	r3, r5
 800a448:	1ad2      	subs	r2, r2, r3
 800a44a:	9204      	str	r2, [sp, #16]
 800a44c:	9a05      	ldr	r2, [sp, #20]
 800a44e:	1aed      	subs	r5, r5, r3
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	9305      	str	r3, [sp, #20]
 800a454:	9b07      	ldr	r3, [sp, #28]
 800a456:	b31b      	cbz	r3, 800a4a0 <_dtoa_r+0x7a0>
 800a458:	9b08      	ldr	r3, [sp, #32]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 80af 	beq.w	800a5be <_dtoa_r+0x8be>
 800a460:	2e00      	cmp	r6, #0
 800a462:	dd13      	ble.n	800a48c <_dtoa_r+0x78c>
 800a464:	4639      	mov	r1, r7
 800a466:	4632      	mov	r2, r6
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 ffc7 	bl	800b3fc <__pow5mult>
 800a46e:	ee18 2a10 	vmov	r2, s16
 800a472:	4601      	mov	r1, r0
 800a474:	4607      	mov	r7, r0
 800a476:	4620      	mov	r0, r4
 800a478:	f000 ff16 	bl	800b2a8 <__multiply>
 800a47c:	ee18 1a10 	vmov	r1, s16
 800a480:	4680      	mov	r8, r0
 800a482:	4620      	mov	r0, r4
 800a484:	f000 fdf8 	bl	800b078 <_Bfree>
 800a488:	ee08 8a10 	vmov	s16, r8
 800a48c:	9b07      	ldr	r3, [sp, #28]
 800a48e:	1b9a      	subs	r2, r3, r6
 800a490:	d006      	beq.n	800a4a0 <_dtoa_r+0x7a0>
 800a492:	ee18 1a10 	vmov	r1, s16
 800a496:	4620      	mov	r0, r4
 800a498:	f000 ffb0 	bl	800b3fc <__pow5mult>
 800a49c:	ee08 0a10 	vmov	s16, r0
 800a4a0:	2101      	movs	r1, #1
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f000 feea 	bl	800b27c <__i2b>
 800a4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	4606      	mov	r6, r0
 800a4ae:	f340 8088 	ble.w	800a5c2 <_dtoa_r+0x8c2>
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	4601      	mov	r1, r0
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f000 ffa0 	bl	800b3fc <__pow5mult>
 800a4bc:	9b06      	ldr	r3, [sp, #24]
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	4606      	mov	r6, r0
 800a4c2:	f340 8081 	ble.w	800a5c8 <_dtoa_r+0x8c8>
 800a4c6:	f04f 0800 	mov.w	r8, #0
 800a4ca:	6933      	ldr	r3, [r6, #16]
 800a4cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a4d0:	6918      	ldr	r0, [r3, #16]
 800a4d2:	f000 fe83 	bl	800b1dc <__hi0bits>
 800a4d6:	f1c0 0020 	rsb	r0, r0, #32
 800a4da:	9b05      	ldr	r3, [sp, #20]
 800a4dc:	4418      	add	r0, r3
 800a4de:	f010 001f 	ands.w	r0, r0, #31
 800a4e2:	f000 8092 	beq.w	800a60a <_dtoa_r+0x90a>
 800a4e6:	f1c0 0320 	rsb	r3, r0, #32
 800a4ea:	2b04      	cmp	r3, #4
 800a4ec:	f340 808a 	ble.w	800a604 <_dtoa_r+0x904>
 800a4f0:	f1c0 001c 	rsb	r0, r0, #28
 800a4f4:	9b04      	ldr	r3, [sp, #16]
 800a4f6:	4403      	add	r3, r0
 800a4f8:	9304      	str	r3, [sp, #16]
 800a4fa:	9b05      	ldr	r3, [sp, #20]
 800a4fc:	4403      	add	r3, r0
 800a4fe:	4405      	add	r5, r0
 800a500:	9305      	str	r3, [sp, #20]
 800a502:	9b04      	ldr	r3, [sp, #16]
 800a504:	2b00      	cmp	r3, #0
 800a506:	dd07      	ble.n	800a518 <_dtoa_r+0x818>
 800a508:	ee18 1a10 	vmov	r1, s16
 800a50c:	461a      	mov	r2, r3
 800a50e:	4620      	mov	r0, r4
 800a510:	f000 ffce 	bl	800b4b0 <__lshift>
 800a514:	ee08 0a10 	vmov	s16, r0
 800a518:	9b05      	ldr	r3, [sp, #20]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	dd05      	ble.n	800a52a <_dtoa_r+0x82a>
 800a51e:	4631      	mov	r1, r6
 800a520:	461a      	mov	r2, r3
 800a522:	4620      	mov	r0, r4
 800a524:	f000 ffc4 	bl	800b4b0 <__lshift>
 800a528:	4606      	mov	r6, r0
 800a52a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d06e      	beq.n	800a60e <_dtoa_r+0x90e>
 800a530:	ee18 0a10 	vmov	r0, s16
 800a534:	4631      	mov	r1, r6
 800a536:	f001 f82b 	bl	800b590 <__mcmp>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	da67      	bge.n	800a60e <_dtoa_r+0x90e>
 800a53e:	9b00      	ldr	r3, [sp, #0]
 800a540:	3b01      	subs	r3, #1
 800a542:	ee18 1a10 	vmov	r1, s16
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	220a      	movs	r2, #10
 800a54a:	2300      	movs	r3, #0
 800a54c:	4620      	mov	r0, r4
 800a54e:	f000 fdb5 	bl	800b0bc <__multadd>
 800a552:	9b08      	ldr	r3, [sp, #32]
 800a554:	ee08 0a10 	vmov	s16, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 81b1 	beq.w	800a8c0 <_dtoa_r+0xbc0>
 800a55e:	2300      	movs	r3, #0
 800a560:	4639      	mov	r1, r7
 800a562:	220a      	movs	r2, #10
 800a564:	4620      	mov	r0, r4
 800a566:	f000 fda9 	bl	800b0bc <__multadd>
 800a56a:	9b02      	ldr	r3, [sp, #8]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	4607      	mov	r7, r0
 800a570:	f300 808e 	bgt.w	800a690 <_dtoa_r+0x990>
 800a574:	9b06      	ldr	r3, [sp, #24]
 800a576:	2b02      	cmp	r3, #2
 800a578:	dc51      	bgt.n	800a61e <_dtoa_r+0x91e>
 800a57a:	e089      	b.n	800a690 <_dtoa_r+0x990>
 800a57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a57e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a582:	e74b      	b.n	800a41c <_dtoa_r+0x71c>
 800a584:	9b03      	ldr	r3, [sp, #12]
 800a586:	1e5e      	subs	r6, r3, #1
 800a588:	9b07      	ldr	r3, [sp, #28]
 800a58a:	42b3      	cmp	r3, r6
 800a58c:	bfbf      	itttt	lt
 800a58e:	9b07      	ldrlt	r3, [sp, #28]
 800a590:	9607      	strlt	r6, [sp, #28]
 800a592:	1af2      	sublt	r2, r6, r3
 800a594:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a596:	bfb6      	itet	lt
 800a598:	189b      	addlt	r3, r3, r2
 800a59a:	1b9e      	subge	r6, r3, r6
 800a59c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a59e:	9b03      	ldr	r3, [sp, #12]
 800a5a0:	bfb8      	it	lt
 800a5a2:	2600      	movlt	r6, #0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	bfb7      	itett	lt
 800a5a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a5ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a5b0:	1a9d      	sublt	r5, r3, r2
 800a5b2:	2300      	movlt	r3, #0
 800a5b4:	e734      	b.n	800a420 <_dtoa_r+0x720>
 800a5b6:	9e07      	ldr	r6, [sp, #28]
 800a5b8:	9d04      	ldr	r5, [sp, #16]
 800a5ba:	9f08      	ldr	r7, [sp, #32]
 800a5bc:	e73b      	b.n	800a436 <_dtoa_r+0x736>
 800a5be:	9a07      	ldr	r2, [sp, #28]
 800a5c0:	e767      	b.n	800a492 <_dtoa_r+0x792>
 800a5c2:	9b06      	ldr	r3, [sp, #24]
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	dc18      	bgt.n	800a5fa <_dtoa_r+0x8fa>
 800a5c8:	f1ba 0f00 	cmp.w	sl, #0
 800a5cc:	d115      	bne.n	800a5fa <_dtoa_r+0x8fa>
 800a5ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5d2:	b993      	cbnz	r3, 800a5fa <_dtoa_r+0x8fa>
 800a5d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a5d8:	0d1b      	lsrs	r3, r3, #20
 800a5da:	051b      	lsls	r3, r3, #20
 800a5dc:	b183      	cbz	r3, 800a600 <_dtoa_r+0x900>
 800a5de:	9b04      	ldr	r3, [sp, #16]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	9304      	str	r3, [sp, #16]
 800a5e4:	9b05      	ldr	r3, [sp, #20]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	9305      	str	r3, [sp, #20]
 800a5ea:	f04f 0801 	mov.w	r8, #1
 800a5ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f47f af6a 	bne.w	800a4ca <_dtoa_r+0x7ca>
 800a5f6:	2001      	movs	r0, #1
 800a5f8:	e76f      	b.n	800a4da <_dtoa_r+0x7da>
 800a5fa:	f04f 0800 	mov.w	r8, #0
 800a5fe:	e7f6      	b.n	800a5ee <_dtoa_r+0x8ee>
 800a600:	4698      	mov	r8, r3
 800a602:	e7f4      	b.n	800a5ee <_dtoa_r+0x8ee>
 800a604:	f43f af7d 	beq.w	800a502 <_dtoa_r+0x802>
 800a608:	4618      	mov	r0, r3
 800a60a:	301c      	adds	r0, #28
 800a60c:	e772      	b.n	800a4f4 <_dtoa_r+0x7f4>
 800a60e:	9b03      	ldr	r3, [sp, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	dc37      	bgt.n	800a684 <_dtoa_r+0x984>
 800a614:	9b06      	ldr	r3, [sp, #24]
 800a616:	2b02      	cmp	r3, #2
 800a618:	dd34      	ble.n	800a684 <_dtoa_r+0x984>
 800a61a:	9b03      	ldr	r3, [sp, #12]
 800a61c:	9302      	str	r3, [sp, #8]
 800a61e:	9b02      	ldr	r3, [sp, #8]
 800a620:	b96b      	cbnz	r3, 800a63e <_dtoa_r+0x93e>
 800a622:	4631      	mov	r1, r6
 800a624:	2205      	movs	r2, #5
 800a626:	4620      	mov	r0, r4
 800a628:	f000 fd48 	bl	800b0bc <__multadd>
 800a62c:	4601      	mov	r1, r0
 800a62e:	4606      	mov	r6, r0
 800a630:	ee18 0a10 	vmov	r0, s16
 800a634:	f000 ffac 	bl	800b590 <__mcmp>
 800a638:	2800      	cmp	r0, #0
 800a63a:	f73f adbb 	bgt.w	800a1b4 <_dtoa_r+0x4b4>
 800a63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a640:	9d01      	ldr	r5, [sp, #4]
 800a642:	43db      	mvns	r3, r3
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	f04f 0800 	mov.w	r8, #0
 800a64a:	4631      	mov	r1, r6
 800a64c:	4620      	mov	r0, r4
 800a64e:	f000 fd13 	bl	800b078 <_Bfree>
 800a652:	2f00      	cmp	r7, #0
 800a654:	f43f aea4 	beq.w	800a3a0 <_dtoa_r+0x6a0>
 800a658:	f1b8 0f00 	cmp.w	r8, #0
 800a65c:	d005      	beq.n	800a66a <_dtoa_r+0x96a>
 800a65e:	45b8      	cmp	r8, r7
 800a660:	d003      	beq.n	800a66a <_dtoa_r+0x96a>
 800a662:	4641      	mov	r1, r8
 800a664:	4620      	mov	r0, r4
 800a666:	f000 fd07 	bl	800b078 <_Bfree>
 800a66a:	4639      	mov	r1, r7
 800a66c:	4620      	mov	r0, r4
 800a66e:	f000 fd03 	bl	800b078 <_Bfree>
 800a672:	e695      	b.n	800a3a0 <_dtoa_r+0x6a0>
 800a674:	2600      	movs	r6, #0
 800a676:	4637      	mov	r7, r6
 800a678:	e7e1      	b.n	800a63e <_dtoa_r+0x93e>
 800a67a:	9700      	str	r7, [sp, #0]
 800a67c:	4637      	mov	r7, r6
 800a67e:	e599      	b.n	800a1b4 <_dtoa_r+0x4b4>
 800a680:	40240000 	.word	0x40240000
 800a684:	9b08      	ldr	r3, [sp, #32]
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 80ca 	beq.w	800a820 <_dtoa_r+0xb20>
 800a68c:	9b03      	ldr	r3, [sp, #12]
 800a68e:	9302      	str	r3, [sp, #8]
 800a690:	2d00      	cmp	r5, #0
 800a692:	dd05      	ble.n	800a6a0 <_dtoa_r+0x9a0>
 800a694:	4639      	mov	r1, r7
 800a696:	462a      	mov	r2, r5
 800a698:	4620      	mov	r0, r4
 800a69a:	f000 ff09 	bl	800b4b0 <__lshift>
 800a69e:	4607      	mov	r7, r0
 800a6a0:	f1b8 0f00 	cmp.w	r8, #0
 800a6a4:	d05b      	beq.n	800a75e <_dtoa_r+0xa5e>
 800a6a6:	6879      	ldr	r1, [r7, #4]
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f000 fca5 	bl	800aff8 <_Balloc>
 800a6ae:	4605      	mov	r5, r0
 800a6b0:	b928      	cbnz	r0, 800a6be <_dtoa_r+0x9be>
 800a6b2:	4b87      	ldr	r3, [pc, #540]	; (800a8d0 <_dtoa_r+0xbd0>)
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a6ba:	f7ff bb3b 	b.w	8009d34 <_dtoa_r+0x34>
 800a6be:	693a      	ldr	r2, [r7, #16]
 800a6c0:	3202      	adds	r2, #2
 800a6c2:	0092      	lsls	r2, r2, #2
 800a6c4:	f107 010c 	add.w	r1, r7, #12
 800a6c8:	300c      	adds	r0, #12
 800a6ca:	f7fd fd2b 	bl	8008124 <memcpy>
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 feec 	bl	800b4b0 <__lshift>
 800a6d8:	9b01      	ldr	r3, [sp, #4]
 800a6da:	f103 0901 	add.w	r9, r3, #1
 800a6de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	9305      	str	r3, [sp, #20]
 800a6e6:	f00a 0301 	and.w	r3, sl, #1
 800a6ea:	46b8      	mov	r8, r7
 800a6ec:	9304      	str	r3, [sp, #16]
 800a6ee:	4607      	mov	r7, r0
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	ee18 0a10 	vmov	r0, s16
 800a6f6:	f7ff fa77 	bl	8009be8 <quorem>
 800a6fa:	4641      	mov	r1, r8
 800a6fc:	9002      	str	r0, [sp, #8]
 800a6fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a702:	ee18 0a10 	vmov	r0, s16
 800a706:	f000 ff43 	bl	800b590 <__mcmp>
 800a70a:	463a      	mov	r2, r7
 800a70c:	9003      	str	r0, [sp, #12]
 800a70e:	4631      	mov	r1, r6
 800a710:	4620      	mov	r0, r4
 800a712:	f000 ff59 	bl	800b5c8 <__mdiff>
 800a716:	68c2      	ldr	r2, [r0, #12]
 800a718:	f109 3bff 	add.w	fp, r9, #4294967295
 800a71c:	4605      	mov	r5, r0
 800a71e:	bb02      	cbnz	r2, 800a762 <_dtoa_r+0xa62>
 800a720:	4601      	mov	r1, r0
 800a722:	ee18 0a10 	vmov	r0, s16
 800a726:	f000 ff33 	bl	800b590 <__mcmp>
 800a72a:	4602      	mov	r2, r0
 800a72c:	4629      	mov	r1, r5
 800a72e:	4620      	mov	r0, r4
 800a730:	9207      	str	r2, [sp, #28]
 800a732:	f000 fca1 	bl	800b078 <_Bfree>
 800a736:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a73a:	ea43 0102 	orr.w	r1, r3, r2
 800a73e:	9b04      	ldr	r3, [sp, #16]
 800a740:	430b      	orrs	r3, r1
 800a742:	464d      	mov	r5, r9
 800a744:	d10f      	bne.n	800a766 <_dtoa_r+0xa66>
 800a746:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a74a:	d02a      	beq.n	800a7a2 <_dtoa_r+0xaa2>
 800a74c:	9b03      	ldr	r3, [sp, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	dd02      	ble.n	800a758 <_dtoa_r+0xa58>
 800a752:	9b02      	ldr	r3, [sp, #8]
 800a754:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a758:	f88b a000 	strb.w	sl, [fp]
 800a75c:	e775      	b.n	800a64a <_dtoa_r+0x94a>
 800a75e:	4638      	mov	r0, r7
 800a760:	e7ba      	b.n	800a6d8 <_dtoa_r+0x9d8>
 800a762:	2201      	movs	r2, #1
 800a764:	e7e2      	b.n	800a72c <_dtoa_r+0xa2c>
 800a766:	9b03      	ldr	r3, [sp, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	db04      	blt.n	800a776 <_dtoa_r+0xa76>
 800a76c:	9906      	ldr	r1, [sp, #24]
 800a76e:	430b      	orrs	r3, r1
 800a770:	9904      	ldr	r1, [sp, #16]
 800a772:	430b      	orrs	r3, r1
 800a774:	d122      	bne.n	800a7bc <_dtoa_r+0xabc>
 800a776:	2a00      	cmp	r2, #0
 800a778:	ddee      	ble.n	800a758 <_dtoa_r+0xa58>
 800a77a:	ee18 1a10 	vmov	r1, s16
 800a77e:	2201      	movs	r2, #1
 800a780:	4620      	mov	r0, r4
 800a782:	f000 fe95 	bl	800b4b0 <__lshift>
 800a786:	4631      	mov	r1, r6
 800a788:	ee08 0a10 	vmov	s16, r0
 800a78c:	f000 ff00 	bl	800b590 <__mcmp>
 800a790:	2800      	cmp	r0, #0
 800a792:	dc03      	bgt.n	800a79c <_dtoa_r+0xa9c>
 800a794:	d1e0      	bne.n	800a758 <_dtoa_r+0xa58>
 800a796:	f01a 0f01 	tst.w	sl, #1
 800a79a:	d0dd      	beq.n	800a758 <_dtoa_r+0xa58>
 800a79c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a7a0:	d1d7      	bne.n	800a752 <_dtoa_r+0xa52>
 800a7a2:	2339      	movs	r3, #57	; 0x39
 800a7a4:	f88b 3000 	strb.w	r3, [fp]
 800a7a8:	462b      	mov	r3, r5
 800a7aa:	461d      	mov	r5, r3
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a7b2:	2a39      	cmp	r2, #57	; 0x39
 800a7b4:	d071      	beq.n	800a89a <_dtoa_r+0xb9a>
 800a7b6:	3201      	adds	r2, #1
 800a7b8:	701a      	strb	r2, [r3, #0]
 800a7ba:	e746      	b.n	800a64a <_dtoa_r+0x94a>
 800a7bc:	2a00      	cmp	r2, #0
 800a7be:	dd07      	ble.n	800a7d0 <_dtoa_r+0xad0>
 800a7c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a7c4:	d0ed      	beq.n	800a7a2 <_dtoa_r+0xaa2>
 800a7c6:	f10a 0301 	add.w	r3, sl, #1
 800a7ca:	f88b 3000 	strb.w	r3, [fp]
 800a7ce:	e73c      	b.n	800a64a <_dtoa_r+0x94a>
 800a7d0:	9b05      	ldr	r3, [sp, #20]
 800a7d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a7d6:	4599      	cmp	r9, r3
 800a7d8:	d047      	beq.n	800a86a <_dtoa_r+0xb6a>
 800a7da:	ee18 1a10 	vmov	r1, s16
 800a7de:	2300      	movs	r3, #0
 800a7e0:	220a      	movs	r2, #10
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 fc6a 	bl	800b0bc <__multadd>
 800a7e8:	45b8      	cmp	r8, r7
 800a7ea:	ee08 0a10 	vmov	s16, r0
 800a7ee:	f04f 0300 	mov.w	r3, #0
 800a7f2:	f04f 020a 	mov.w	r2, #10
 800a7f6:	4641      	mov	r1, r8
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	d106      	bne.n	800a80a <_dtoa_r+0xb0a>
 800a7fc:	f000 fc5e 	bl	800b0bc <__multadd>
 800a800:	4680      	mov	r8, r0
 800a802:	4607      	mov	r7, r0
 800a804:	f109 0901 	add.w	r9, r9, #1
 800a808:	e772      	b.n	800a6f0 <_dtoa_r+0x9f0>
 800a80a:	f000 fc57 	bl	800b0bc <__multadd>
 800a80e:	4639      	mov	r1, r7
 800a810:	4680      	mov	r8, r0
 800a812:	2300      	movs	r3, #0
 800a814:	220a      	movs	r2, #10
 800a816:	4620      	mov	r0, r4
 800a818:	f000 fc50 	bl	800b0bc <__multadd>
 800a81c:	4607      	mov	r7, r0
 800a81e:	e7f1      	b.n	800a804 <_dtoa_r+0xb04>
 800a820:	9b03      	ldr	r3, [sp, #12]
 800a822:	9302      	str	r3, [sp, #8]
 800a824:	9d01      	ldr	r5, [sp, #4]
 800a826:	ee18 0a10 	vmov	r0, s16
 800a82a:	4631      	mov	r1, r6
 800a82c:	f7ff f9dc 	bl	8009be8 <quorem>
 800a830:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a834:	9b01      	ldr	r3, [sp, #4]
 800a836:	f805 ab01 	strb.w	sl, [r5], #1
 800a83a:	1aea      	subs	r2, r5, r3
 800a83c:	9b02      	ldr	r3, [sp, #8]
 800a83e:	4293      	cmp	r3, r2
 800a840:	dd09      	ble.n	800a856 <_dtoa_r+0xb56>
 800a842:	ee18 1a10 	vmov	r1, s16
 800a846:	2300      	movs	r3, #0
 800a848:	220a      	movs	r2, #10
 800a84a:	4620      	mov	r0, r4
 800a84c:	f000 fc36 	bl	800b0bc <__multadd>
 800a850:	ee08 0a10 	vmov	s16, r0
 800a854:	e7e7      	b.n	800a826 <_dtoa_r+0xb26>
 800a856:	9b02      	ldr	r3, [sp, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	bfc8      	it	gt
 800a85c:	461d      	movgt	r5, r3
 800a85e:	9b01      	ldr	r3, [sp, #4]
 800a860:	bfd8      	it	le
 800a862:	2501      	movle	r5, #1
 800a864:	441d      	add	r5, r3
 800a866:	f04f 0800 	mov.w	r8, #0
 800a86a:	ee18 1a10 	vmov	r1, s16
 800a86e:	2201      	movs	r2, #1
 800a870:	4620      	mov	r0, r4
 800a872:	f000 fe1d 	bl	800b4b0 <__lshift>
 800a876:	4631      	mov	r1, r6
 800a878:	ee08 0a10 	vmov	s16, r0
 800a87c:	f000 fe88 	bl	800b590 <__mcmp>
 800a880:	2800      	cmp	r0, #0
 800a882:	dc91      	bgt.n	800a7a8 <_dtoa_r+0xaa8>
 800a884:	d102      	bne.n	800a88c <_dtoa_r+0xb8c>
 800a886:	f01a 0f01 	tst.w	sl, #1
 800a88a:	d18d      	bne.n	800a7a8 <_dtoa_r+0xaa8>
 800a88c:	462b      	mov	r3, r5
 800a88e:	461d      	mov	r5, r3
 800a890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a894:	2a30      	cmp	r2, #48	; 0x30
 800a896:	d0fa      	beq.n	800a88e <_dtoa_r+0xb8e>
 800a898:	e6d7      	b.n	800a64a <_dtoa_r+0x94a>
 800a89a:	9a01      	ldr	r2, [sp, #4]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d184      	bne.n	800a7aa <_dtoa_r+0xaaa>
 800a8a0:	9b00      	ldr	r3, [sp, #0]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	2331      	movs	r3, #49	; 0x31
 800a8a8:	7013      	strb	r3, [r2, #0]
 800a8aa:	e6ce      	b.n	800a64a <_dtoa_r+0x94a>
 800a8ac:	4b09      	ldr	r3, [pc, #36]	; (800a8d4 <_dtoa_r+0xbd4>)
 800a8ae:	f7ff ba95 	b.w	8009ddc <_dtoa_r+0xdc>
 800a8b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f47f aa6e 	bne.w	8009d96 <_dtoa_r+0x96>
 800a8ba:	4b07      	ldr	r3, [pc, #28]	; (800a8d8 <_dtoa_r+0xbd8>)
 800a8bc:	f7ff ba8e 	b.w	8009ddc <_dtoa_r+0xdc>
 800a8c0:	9b02      	ldr	r3, [sp, #8]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	dcae      	bgt.n	800a824 <_dtoa_r+0xb24>
 800a8c6:	9b06      	ldr	r3, [sp, #24]
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	f73f aea8 	bgt.w	800a61e <_dtoa_r+0x91e>
 800a8ce:	e7a9      	b.n	800a824 <_dtoa_r+0xb24>
 800a8d0:	0800e2b8 	.word	0x0800e2b8
 800a8d4:	0800e0bc 	.word	0x0800e0bc
 800a8d8:	0800e239 	.word	0x0800e239

0800a8dc <rshift>:
 800a8dc:	6903      	ldr	r3, [r0, #16]
 800a8de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a8e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a8ea:	f100 0414 	add.w	r4, r0, #20
 800a8ee:	dd45      	ble.n	800a97c <rshift+0xa0>
 800a8f0:	f011 011f 	ands.w	r1, r1, #31
 800a8f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a8f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a8fc:	d10c      	bne.n	800a918 <rshift+0x3c>
 800a8fe:	f100 0710 	add.w	r7, r0, #16
 800a902:	4629      	mov	r1, r5
 800a904:	42b1      	cmp	r1, r6
 800a906:	d334      	bcc.n	800a972 <rshift+0x96>
 800a908:	1a9b      	subs	r3, r3, r2
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	1eea      	subs	r2, r5, #3
 800a90e:	4296      	cmp	r6, r2
 800a910:	bf38      	it	cc
 800a912:	2300      	movcc	r3, #0
 800a914:	4423      	add	r3, r4
 800a916:	e015      	b.n	800a944 <rshift+0x68>
 800a918:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a91c:	f1c1 0820 	rsb	r8, r1, #32
 800a920:	40cf      	lsrs	r7, r1
 800a922:	f105 0e04 	add.w	lr, r5, #4
 800a926:	46a1      	mov	r9, r4
 800a928:	4576      	cmp	r6, lr
 800a92a:	46f4      	mov	ip, lr
 800a92c:	d815      	bhi.n	800a95a <rshift+0x7e>
 800a92e:	1a9a      	subs	r2, r3, r2
 800a930:	0092      	lsls	r2, r2, #2
 800a932:	3a04      	subs	r2, #4
 800a934:	3501      	adds	r5, #1
 800a936:	42ae      	cmp	r6, r5
 800a938:	bf38      	it	cc
 800a93a:	2200      	movcc	r2, #0
 800a93c:	18a3      	adds	r3, r4, r2
 800a93e:	50a7      	str	r7, [r4, r2]
 800a940:	b107      	cbz	r7, 800a944 <rshift+0x68>
 800a942:	3304      	adds	r3, #4
 800a944:	1b1a      	subs	r2, r3, r4
 800a946:	42a3      	cmp	r3, r4
 800a948:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a94c:	bf08      	it	eq
 800a94e:	2300      	moveq	r3, #0
 800a950:	6102      	str	r2, [r0, #16]
 800a952:	bf08      	it	eq
 800a954:	6143      	streq	r3, [r0, #20]
 800a956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a95a:	f8dc c000 	ldr.w	ip, [ip]
 800a95e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a962:	ea4c 0707 	orr.w	r7, ip, r7
 800a966:	f849 7b04 	str.w	r7, [r9], #4
 800a96a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a96e:	40cf      	lsrs	r7, r1
 800a970:	e7da      	b.n	800a928 <rshift+0x4c>
 800a972:	f851 cb04 	ldr.w	ip, [r1], #4
 800a976:	f847 cf04 	str.w	ip, [r7, #4]!
 800a97a:	e7c3      	b.n	800a904 <rshift+0x28>
 800a97c:	4623      	mov	r3, r4
 800a97e:	e7e1      	b.n	800a944 <rshift+0x68>

0800a980 <__hexdig_fun>:
 800a980:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a984:	2b09      	cmp	r3, #9
 800a986:	d802      	bhi.n	800a98e <__hexdig_fun+0xe>
 800a988:	3820      	subs	r0, #32
 800a98a:	b2c0      	uxtb	r0, r0
 800a98c:	4770      	bx	lr
 800a98e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a992:	2b05      	cmp	r3, #5
 800a994:	d801      	bhi.n	800a99a <__hexdig_fun+0x1a>
 800a996:	3847      	subs	r0, #71	; 0x47
 800a998:	e7f7      	b.n	800a98a <__hexdig_fun+0xa>
 800a99a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a99e:	2b05      	cmp	r3, #5
 800a9a0:	d801      	bhi.n	800a9a6 <__hexdig_fun+0x26>
 800a9a2:	3827      	subs	r0, #39	; 0x27
 800a9a4:	e7f1      	b.n	800a98a <__hexdig_fun+0xa>
 800a9a6:	2000      	movs	r0, #0
 800a9a8:	4770      	bx	lr
	...

0800a9ac <__gethex>:
 800a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b0:	ed2d 8b02 	vpush	{d8}
 800a9b4:	b089      	sub	sp, #36	; 0x24
 800a9b6:	ee08 0a10 	vmov	s16, r0
 800a9ba:	9304      	str	r3, [sp, #16]
 800a9bc:	4bb4      	ldr	r3, [pc, #720]	; (800ac90 <__gethex+0x2e4>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	9301      	str	r3, [sp, #4]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	468b      	mov	fp, r1
 800a9c6:	4690      	mov	r8, r2
 800a9c8:	f7f5 fc0a 	bl	80001e0 <strlen>
 800a9cc:	9b01      	ldr	r3, [sp, #4]
 800a9ce:	f8db 2000 	ldr.w	r2, [fp]
 800a9d2:	4403      	add	r3, r0
 800a9d4:	4682      	mov	sl, r0
 800a9d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a9da:	9305      	str	r3, [sp, #20]
 800a9dc:	1c93      	adds	r3, r2, #2
 800a9de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a9e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a9e6:	32fe      	adds	r2, #254	; 0xfe
 800a9e8:	18d1      	adds	r1, r2, r3
 800a9ea:	461f      	mov	r7, r3
 800a9ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a9f0:	9100      	str	r1, [sp, #0]
 800a9f2:	2830      	cmp	r0, #48	; 0x30
 800a9f4:	d0f8      	beq.n	800a9e8 <__gethex+0x3c>
 800a9f6:	f7ff ffc3 	bl	800a980 <__hexdig_fun>
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	d13a      	bne.n	800aa76 <__gethex+0xca>
 800aa00:	9901      	ldr	r1, [sp, #4]
 800aa02:	4652      	mov	r2, sl
 800aa04:	4638      	mov	r0, r7
 800aa06:	f001 fa23 	bl	800be50 <strncmp>
 800aa0a:	4605      	mov	r5, r0
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	d168      	bne.n	800aae2 <__gethex+0x136>
 800aa10:	f817 000a 	ldrb.w	r0, [r7, sl]
 800aa14:	eb07 060a 	add.w	r6, r7, sl
 800aa18:	f7ff ffb2 	bl	800a980 <__hexdig_fun>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d062      	beq.n	800aae6 <__gethex+0x13a>
 800aa20:	4633      	mov	r3, r6
 800aa22:	7818      	ldrb	r0, [r3, #0]
 800aa24:	2830      	cmp	r0, #48	; 0x30
 800aa26:	461f      	mov	r7, r3
 800aa28:	f103 0301 	add.w	r3, r3, #1
 800aa2c:	d0f9      	beq.n	800aa22 <__gethex+0x76>
 800aa2e:	f7ff ffa7 	bl	800a980 <__hexdig_fun>
 800aa32:	2301      	movs	r3, #1
 800aa34:	fab0 f480 	clz	r4, r0
 800aa38:	0964      	lsrs	r4, r4, #5
 800aa3a:	4635      	mov	r5, r6
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	463a      	mov	r2, r7
 800aa40:	4616      	mov	r6, r2
 800aa42:	3201      	adds	r2, #1
 800aa44:	7830      	ldrb	r0, [r6, #0]
 800aa46:	f7ff ff9b 	bl	800a980 <__hexdig_fun>
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d1f8      	bne.n	800aa40 <__gethex+0x94>
 800aa4e:	9901      	ldr	r1, [sp, #4]
 800aa50:	4652      	mov	r2, sl
 800aa52:	4630      	mov	r0, r6
 800aa54:	f001 f9fc 	bl	800be50 <strncmp>
 800aa58:	b980      	cbnz	r0, 800aa7c <__gethex+0xd0>
 800aa5a:	b94d      	cbnz	r5, 800aa70 <__gethex+0xc4>
 800aa5c:	eb06 050a 	add.w	r5, r6, sl
 800aa60:	462a      	mov	r2, r5
 800aa62:	4616      	mov	r6, r2
 800aa64:	3201      	adds	r2, #1
 800aa66:	7830      	ldrb	r0, [r6, #0]
 800aa68:	f7ff ff8a 	bl	800a980 <__hexdig_fun>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d1f8      	bne.n	800aa62 <__gethex+0xb6>
 800aa70:	1bad      	subs	r5, r5, r6
 800aa72:	00ad      	lsls	r5, r5, #2
 800aa74:	e004      	b.n	800aa80 <__gethex+0xd4>
 800aa76:	2400      	movs	r4, #0
 800aa78:	4625      	mov	r5, r4
 800aa7a:	e7e0      	b.n	800aa3e <__gethex+0x92>
 800aa7c:	2d00      	cmp	r5, #0
 800aa7e:	d1f7      	bne.n	800aa70 <__gethex+0xc4>
 800aa80:	7833      	ldrb	r3, [r6, #0]
 800aa82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa86:	2b50      	cmp	r3, #80	; 0x50
 800aa88:	d13b      	bne.n	800ab02 <__gethex+0x156>
 800aa8a:	7873      	ldrb	r3, [r6, #1]
 800aa8c:	2b2b      	cmp	r3, #43	; 0x2b
 800aa8e:	d02c      	beq.n	800aaea <__gethex+0x13e>
 800aa90:	2b2d      	cmp	r3, #45	; 0x2d
 800aa92:	d02e      	beq.n	800aaf2 <__gethex+0x146>
 800aa94:	1c71      	adds	r1, r6, #1
 800aa96:	f04f 0900 	mov.w	r9, #0
 800aa9a:	7808      	ldrb	r0, [r1, #0]
 800aa9c:	f7ff ff70 	bl	800a980 <__hexdig_fun>
 800aaa0:	1e43      	subs	r3, r0, #1
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	2b18      	cmp	r3, #24
 800aaa6:	d82c      	bhi.n	800ab02 <__gethex+0x156>
 800aaa8:	f1a0 0210 	sub.w	r2, r0, #16
 800aaac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aab0:	f7ff ff66 	bl	800a980 <__hexdig_fun>
 800aab4:	1e43      	subs	r3, r0, #1
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b18      	cmp	r3, #24
 800aaba:	d91d      	bls.n	800aaf8 <__gethex+0x14c>
 800aabc:	f1b9 0f00 	cmp.w	r9, #0
 800aac0:	d000      	beq.n	800aac4 <__gethex+0x118>
 800aac2:	4252      	negs	r2, r2
 800aac4:	4415      	add	r5, r2
 800aac6:	f8cb 1000 	str.w	r1, [fp]
 800aaca:	b1e4      	cbz	r4, 800ab06 <__gethex+0x15a>
 800aacc:	9b00      	ldr	r3, [sp, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	bf14      	ite	ne
 800aad2:	2700      	movne	r7, #0
 800aad4:	2706      	moveq	r7, #6
 800aad6:	4638      	mov	r0, r7
 800aad8:	b009      	add	sp, #36	; 0x24
 800aada:	ecbd 8b02 	vpop	{d8}
 800aade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae2:	463e      	mov	r6, r7
 800aae4:	4625      	mov	r5, r4
 800aae6:	2401      	movs	r4, #1
 800aae8:	e7ca      	b.n	800aa80 <__gethex+0xd4>
 800aaea:	f04f 0900 	mov.w	r9, #0
 800aaee:	1cb1      	adds	r1, r6, #2
 800aaf0:	e7d3      	b.n	800aa9a <__gethex+0xee>
 800aaf2:	f04f 0901 	mov.w	r9, #1
 800aaf6:	e7fa      	b.n	800aaee <__gethex+0x142>
 800aaf8:	230a      	movs	r3, #10
 800aafa:	fb03 0202 	mla	r2, r3, r2, r0
 800aafe:	3a10      	subs	r2, #16
 800ab00:	e7d4      	b.n	800aaac <__gethex+0x100>
 800ab02:	4631      	mov	r1, r6
 800ab04:	e7df      	b.n	800aac6 <__gethex+0x11a>
 800ab06:	1bf3      	subs	r3, r6, r7
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	2b07      	cmp	r3, #7
 800ab0e:	dc0b      	bgt.n	800ab28 <__gethex+0x17c>
 800ab10:	ee18 0a10 	vmov	r0, s16
 800ab14:	f000 fa70 	bl	800aff8 <_Balloc>
 800ab18:	4604      	mov	r4, r0
 800ab1a:	b940      	cbnz	r0, 800ab2e <__gethex+0x182>
 800ab1c:	4b5d      	ldr	r3, [pc, #372]	; (800ac94 <__gethex+0x2e8>)
 800ab1e:	4602      	mov	r2, r0
 800ab20:	21de      	movs	r1, #222	; 0xde
 800ab22:	485d      	ldr	r0, [pc, #372]	; (800ac98 <__gethex+0x2ec>)
 800ab24:	f001 f9b6 	bl	800be94 <__assert_func>
 800ab28:	3101      	adds	r1, #1
 800ab2a:	105b      	asrs	r3, r3, #1
 800ab2c:	e7ee      	b.n	800ab0c <__gethex+0x160>
 800ab2e:	f100 0914 	add.w	r9, r0, #20
 800ab32:	f04f 0b00 	mov.w	fp, #0
 800ab36:	f1ca 0301 	rsb	r3, sl, #1
 800ab3a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ab3e:	f8cd b000 	str.w	fp, [sp]
 800ab42:	9306      	str	r3, [sp, #24]
 800ab44:	42b7      	cmp	r7, r6
 800ab46:	d340      	bcc.n	800abca <__gethex+0x21e>
 800ab48:	9802      	ldr	r0, [sp, #8]
 800ab4a:	9b00      	ldr	r3, [sp, #0]
 800ab4c:	f840 3b04 	str.w	r3, [r0], #4
 800ab50:	eba0 0009 	sub.w	r0, r0, r9
 800ab54:	1080      	asrs	r0, r0, #2
 800ab56:	0146      	lsls	r6, r0, #5
 800ab58:	6120      	str	r0, [r4, #16]
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f000 fb3e 	bl	800b1dc <__hi0bits>
 800ab60:	1a30      	subs	r0, r6, r0
 800ab62:	f8d8 6000 	ldr.w	r6, [r8]
 800ab66:	42b0      	cmp	r0, r6
 800ab68:	dd63      	ble.n	800ac32 <__gethex+0x286>
 800ab6a:	1b87      	subs	r7, r0, r6
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f000 fee2 	bl	800b938 <__any_on>
 800ab74:	4682      	mov	sl, r0
 800ab76:	b1a8      	cbz	r0, 800aba4 <__gethex+0x1f8>
 800ab78:	1e7b      	subs	r3, r7, #1
 800ab7a:	1159      	asrs	r1, r3, #5
 800ab7c:	f003 021f 	and.w	r2, r3, #31
 800ab80:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ab84:	f04f 0a01 	mov.w	sl, #1
 800ab88:	fa0a f202 	lsl.w	r2, sl, r2
 800ab8c:	420a      	tst	r2, r1
 800ab8e:	d009      	beq.n	800aba4 <__gethex+0x1f8>
 800ab90:	4553      	cmp	r3, sl
 800ab92:	dd05      	ble.n	800aba0 <__gethex+0x1f4>
 800ab94:	1eb9      	subs	r1, r7, #2
 800ab96:	4620      	mov	r0, r4
 800ab98:	f000 fece 	bl	800b938 <__any_on>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	d145      	bne.n	800ac2c <__gethex+0x280>
 800aba0:	f04f 0a02 	mov.w	sl, #2
 800aba4:	4639      	mov	r1, r7
 800aba6:	4620      	mov	r0, r4
 800aba8:	f7ff fe98 	bl	800a8dc <rshift>
 800abac:	443d      	add	r5, r7
 800abae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abb2:	42ab      	cmp	r3, r5
 800abb4:	da4c      	bge.n	800ac50 <__gethex+0x2a4>
 800abb6:	ee18 0a10 	vmov	r0, s16
 800abba:	4621      	mov	r1, r4
 800abbc:	f000 fa5c 	bl	800b078 <_Bfree>
 800abc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800abc2:	2300      	movs	r3, #0
 800abc4:	6013      	str	r3, [r2, #0]
 800abc6:	27a3      	movs	r7, #163	; 0xa3
 800abc8:	e785      	b.n	800aad6 <__gethex+0x12a>
 800abca:	1e73      	subs	r3, r6, #1
 800abcc:	9a05      	ldr	r2, [sp, #20]
 800abce:	9303      	str	r3, [sp, #12]
 800abd0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d019      	beq.n	800ac0c <__gethex+0x260>
 800abd8:	f1bb 0f20 	cmp.w	fp, #32
 800abdc:	d107      	bne.n	800abee <__gethex+0x242>
 800abde:	9b02      	ldr	r3, [sp, #8]
 800abe0:	9a00      	ldr	r2, [sp, #0]
 800abe2:	f843 2b04 	str.w	r2, [r3], #4
 800abe6:	9302      	str	r3, [sp, #8]
 800abe8:	2300      	movs	r3, #0
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	469b      	mov	fp, r3
 800abee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800abf2:	f7ff fec5 	bl	800a980 <__hexdig_fun>
 800abf6:	9b00      	ldr	r3, [sp, #0]
 800abf8:	f000 000f 	and.w	r0, r0, #15
 800abfc:	fa00 f00b 	lsl.w	r0, r0, fp
 800ac00:	4303      	orrs	r3, r0
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	f10b 0b04 	add.w	fp, fp, #4
 800ac08:	9b03      	ldr	r3, [sp, #12]
 800ac0a:	e00d      	b.n	800ac28 <__gethex+0x27c>
 800ac0c:	9b03      	ldr	r3, [sp, #12]
 800ac0e:	9a06      	ldr	r2, [sp, #24]
 800ac10:	4413      	add	r3, r2
 800ac12:	42bb      	cmp	r3, r7
 800ac14:	d3e0      	bcc.n	800abd8 <__gethex+0x22c>
 800ac16:	4618      	mov	r0, r3
 800ac18:	9901      	ldr	r1, [sp, #4]
 800ac1a:	9307      	str	r3, [sp, #28]
 800ac1c:	4652      	mov	r2, sl
 800ac1e:	f001 f917 	bl	800be50 <strncmp>
 800ac22:	9b07      	ldr	r3, [sp, #28]
 800ac24:	2800      	cmp	r0, #0
 800ac26:	d1d7      	bne.n	800abd8 <__gethex+0x22c>
 800ac28:	461e      	mov	r6, r3
 800ac2a:	e78b      	b.n	800ab44 <__gethex+0x198>
 800ac2c:	f04f 0a03 	mov.w	sl, #3
 800ac30:	e7b8      	b.n	800aba4 <__gethex+0x1f8>
 800ac32:	da0a      	bge.n	800ac4a <__gethex+0x29e>
 800ac34:	1a37      	subs	r7, r6, r0
 800ac36:	4621      	mov	r1, r4
 800ac38:	ee18 0a10 	vmov	r0, s16
 800ac3c:	463a      	mov	r2, r7
 800ac3e:	f000 fc37 	bl	800b4b0 <__lshift>
 800ac42:	1bed      	subs	r5, r5, r7
 800ac44:	4604      	mov	r4, r0
 800ac46:	f100 0914 	add.w	r9, r0, #20
 800ac4a:	f04f 0a00 	mov.w	sl, #0
 800ac4e:	e7ae      	b.n	800abae <__gethex+0x202>
 800ac50:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ac54:	42a8      	cmp	r0, r5
 800ac56:	dd72      	ble.n	800ad3e <__gethex+0x392>
 800ac58:	1b45      	subs	r5, r0, r5
 800ac5a:	42ae      	cmp	r6, r5
 800ac5c:	dc36      	bgt.n	800accc <__gethex+0x320>
 800ac5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d02a      	beq.n	800acbc <__gethex+0x310>
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	d02c      	beq.n	800acc4 <__gethex+0x318>
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d11c      	bne.n	800aca8 <__gethex+0x2fc>
 800ac6e:	42ae      	cmp	r6, r5
 800ac70:	d11a      	bne.n	800aca8 <__gethex+0x2fc>
 800ac72:	2e01      	cmp	r6, #1
 800ac74:	d112      	bne.n	800ac9c <__gethex+0x2f0>
 800ac76:	9a04      	ldr	r2, [sp, #16]
 800ac78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac7c:	6013      	str	r3, [r2, #0]
 800ac7e:	2301      	movs	r3, #1
 800ac80:	6123      	str	r3, [r4, #16]
 800ac82:	f8c9 3000 	str.w	r3, [r9]
 800ac86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac88:	2762      	movs	r7, #98	; 0x62
 800ac8a:	601c      	str	r4, [r3, #0]
 800ac8c:	e723      	b.n	800aad6 <__gethex+0x12a>
 800ac8e:	bf00      	nop
 800ac90:	0800e330 	.word	0x0800e330
 800ac94:	0800e2b8 	.word	0x0800e2b8
 800ac98:	0800e2c9 	.word	0x0800e2c9
 800ac9c:	1e71      	subs	r1, r6, #1
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f000 fe4a 	bl	800b938 <__any_on>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	d1e6      	bne.n	800ac76 <__gethex+0x2ca>
 800aca8:	ee18 0a10 	vmov	r0, s16
 800acac:	4621      	mov	r1, r4
 800acae:	f000 f9e3 	bl	800b078 <_Bfree>
 800acb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800acb4:	2300      	movs	r3, #0
 800acb6:	6013      	str	r3, [r2, #0]
 800acb8:	2750      	movs	r7, #80	; 0x50
 800acba:	e70c      	b.n	800aad6 <__gethex+0x12a>
 800acbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1f2      	bne.n	800aca8 <__gethex+0x2fc>
 800acc2:	e7d8      	b.n	800ac76 <__gethex+0x2ca>
 800acc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1d5      	bne.n	800ac76 <__gethex+0x2ca>
 800acca:	e7ed      	b.n	800aca8 <__gethex+0x2fc>
 800accc:	1e6f      	subs	r7, r5, #1
 800acce:	f1ba 0f00 	cmp.w	sl, #0
 800acd2:	d131      	bne.n	800ad38 <__gethex+0x38c>
 800acd4:	b127      	cbz	r7, 800ace0 <__gethex+0x334>
 800acd6:	4639      	mov	r1, r7
 800acd8:	4620      	mov	r0, r4
 800acda:	f000 fe2d 	bl	800b938 <__any_on>
 800acde:	4682      	mov	sl, r0
 800ace0:	117b      	asrs	r3, r7, #5
 800ace2:	2101      	movs	r1, #1
 800ace4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ace8:	f007 071f 	and.w	r7, r7, #31
 800acec:	fa01 f707 	lsl.w	r7, r1, r7
 800acf0:	421f      	tst	r7, r3
 800acf2:	4629      	mov	r1, r5
 800acf4:	4620      	mov	r0, r4
 800acf6:	bf18      	it	ne
 800acf8:	f04a 0a02 	orrne.w	sl, sl, #2
 800acfc:	1b76      	subs	r6, r6, r5
 800acfe:	f7ff fded 	bl	800a8dc <rshift>
 800ad02:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ad06:	2702      	movs	r7, #2
 800ad08:	f1ba 0f00 	cmp.w	sl, #0
 800ad0c:	d048      	beq.n	800ada0 <__gethex+0x3f4>
 800ad0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d015      	beq.n	800ad42 <__gethex+0x396>
 800ad16:	2b03      	cmp	r3, #3
 800ad18:	d017      	beq.n	800ad4a <__gethex+0x39e>
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d109      	bne.n	800ad32 <__gethex+0x386>
 800ad1e:	f01a 0f02 	tst.w	sl, #2
 800ad22:	d006      	beq.n	800ad32 <__gethex+0x386>
 800ad24:	f8d9 0000 	ldr.w	r0, [r9]
 800ad28:	ea4a 0a00 	orr.w	sl, sl, r0
 800ad2c:	f01a 0f01 	tst.w	sl, #1
 800ad30:	d10e      	bne.n	800ad50 <__gethex+0x3a4>
 800ad32:	f047 0710 	orr.w	r7, r7, #16
 800ad36:	e033      	b.n	800ada0 <__gethex+0x3f4>
 800ad38:	f04f 0a01 	mov.w	sl, #1
 800ad3c:	e7d0      	b.n	800ace0 <__gethex+0x334>
 800ad3e:	2701      	movs	r7, #1
 800ad40:	e7e2      	b.n	800ad08 <__gethex+0x35c>
 800ad42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad44:	f1c3 0301 	rsb	r3, r3, #1
 800ad48:	9315      	str	r3, [sp, #84]	; 0x54
 800ad4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d0f0      	beq.n	800ad32 <__gethex+0x386>
 800ad50:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ad54:	f104 0314 	add.w	r3, r4, #20
 800ad58:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ad5c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ad60:	f04f 0c00 	mov.w	ip, #0
 800ad64:	4618      	mov	r0, r3
 800ad66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad6a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ad6e:	d01c      	beq.n	800adaa <__gethex+0x3fe>
 800ad70:	3201      	adds	r2, #1
 800ad72:	6002      	str	r2, [r0, #0]
 800ad74:	2f02      	cmp	r7, #2
 800ad76:	f104 0314 	add.w	r3, r4, #20
 800ad7a:	d13f      	bne.n	800adfc <__gethex+0x450>
 800ad7c:	f8d8 2000 	ldr.w	r2, [r8]
 800ad80:	3a01      	subs	r2, #1
 800ad82:	42b2      	cmp	r2, r6
 800ad84:	d10a      	bne.n	800ad9c <__gethex+0x3f0>
 800ad86:	1171      	asrs	r1, r6, #5
 800ad88:	2201      	movs	r2, #1
 800ad8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad8e:	f006 061f 	and.w	r6, r6, #31
 800ad92:	fa02 f606 	lsl.w	r6, r2, r6
 800ad96:	421e      	tst	r6, r3
 800ad98:	bf18      	it	ne
 800ad9a:	4617      	movne	r7, r2
 800ad9c:	f047 0720 	orr.w	r7, r7, #32
 800ada0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ada2:	601c      	str	r4, [r3, #0]
 800ada4:	9b04      	ldr	r3, [sp, #16]
 800ada6:	601d      	str	r5, [r3, #0]
 800ada8:	e695      	b.n	800aad6 <__gethex+0x12a>
 800adaa:	4299      	cmp	r1, r3
 800adac:	f843 cc04 	str.w	ip, [r3, #-4]
 800adb0:	d8d8      	bhi.n	800ad64 <__gethex+0x3b8>
 800adb2:	68a3      	ldr	r3, [r4, #8]
 800adb4:	459b      	cmp	fp, r3
 800adb6:	db19      	blt.n	800adec <__gethex+0x440>
 800adb8:	6861      	ldr	r1, [r4, #4]
 800adba:	ee18 0a10 	vmov	r0, s16
 800adbe:	3101      	adds	r1, #1
 800adc0:	f000 f91a 	bl	800aff8 <_Balloc>
 800adc4:	4681      	mov	r9, r0
 800adc6:	b918      	cbnz	r0, 800add0 <__gethex+0x424>
 800adc8:	4b1a      	ldr	r3, [pc, #104]	; (800ae34 <__gethex+0x488>)
 800adca:	4602      	mov	r2, r0
 800adcc:	2184      	movs	r1, #132	; 0x84
 800adce:	e6a8      	b.n	800ab22 <__gethex+0x176>
 800add0:	6922      	ldr	r2, [r4, #16]
 800add2:	3202      	adds	r2, #2
 800add4:	f104 010c 	add.w	r1, r4, #12
 800add8:	0092      	lsls	r2, r2, #2
 800adda:	300c      	adds	r0, #12
 800addc:	f7fd f9a2 	bl	8008124 <memcpy>
 800ade0:	4621      	mov	r1, r4
 800ade2:	ee18 0a10 	vmov	r0, s16
 800ade6:	f000 f947 	bl	800b078 <_Bfree>
 800adea:	464c      	mov	r4, r9
 800adec:	6923      	ldr	r3, [r4, #16]
 800adee:	1c5a      	adds	r2, r3, #1
 800adf0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800adf4:	6122      	str	r2, [r4, #16]
 800adf6:	2201      	movs	r2, #1
 800adf8:	615a      	str	r2, [r3, #20]
 800adfa:	e7bb      	b.n	800ad74 <__gethex+0x3c8>
 800adfc:	6922      	ldr	r2, [r4, #16]
 800adfe:	455a      	cmp	r2, fp
 800ae00:	dd0b      	ble.n	800ae1a <__gethex+0x46e>
 800ae02:	2101      	movs	r1, #1
 800ae04:	4620      	mov	r0, r4
 800ae06:	f7ff fd69 	bl	800a8dc <rshift>
 800ae0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae0e:	3501      	adds	r5, #1
 800ae10:	42ab      	cmp	r3, r5
 800ae12:	f6ff aed0 	blt.w	800abb6 <__gethex+0x20a>
 800ae16:	2701      	movs	r7, #1
 800ae18:	e7c0      	b.n	800ad9c <__gethex+0x3f0>
 800ae1a:	f016 061f 	ands.w	r6, r6, #31
 800ae1e:	d0fa      	beq.n	800ae16 <__gethex+0x46a>
 800ae20:	4453      	add	r3, sl
 800ae22:	f1c6 0620 	rsb	r6, r6, #32
 800ae26:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae2a:	f000 f9d7 	bl	800b1dc <__hi0bits>
 800ae2e:	42b0      	cmp	r0, r6
 800ae30:	dbe7      	blt.n	800ae02 <__gethex+0x456>
 800ae32:	e7f0      	b.n	800ae16 <__gethex+0x46a>
 800ae34:	0800e2b8 	.word	0x0800e2b8

0800ae38 <L_shift>:
 800ae38:	f1c2 0208 	rsb	r2, r2, #8
 800ae3c:	0092      	lsls	r2, r2, #2
 800ae3e:	b570      	push	{r4, r5, r6, lr}
 800ae40:	f1c2 0620 	rsb	r6, r2, #32
 800ae44:	6843      	ldr	r3, [r0, #4]
 800ae46:	6804      	ldr	r4, [r0, #0]
 800ae48:	fa03 f506 	lsl.w	r5, r3, r6
 800ae4c:	432c      	orrs	r4, r5
 800ae4e:	40d3      	lsrs	r3, r2
 800ae50:	6004      	str	r4, [r0, #0]
 800ae52:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae56:	4288      	cmp	r0, r1
 800ae58:	d3f4      	bcc.n	800ae44 <L_shift+0xc>
 800ae5a:	bd70      	pop	{r4, r5, r6, pc}

0800ae5c <__match>:
 800ae5c:	b530      	push	{r4, r5, lr}
 800ae5e:	6803      	ldr	r3, [r0, #0]
 800ae60:	3301      	adds	r3, #1
 800ae62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae66:	b914      	cbnz	r4, 800ae6e <__match+0x12>
 800ae68:	6003      	str	r3, [r0, #0]
 800ae6a:	2001      	movs	r0, #1
 800ae6c:	bd30      	pop	{r4, r5, pc}
 800ae6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ae76:	2d19      	cmp	r5, #25
 800ae78:	bf98      	it	ls
 800ae7a:	3220      	addls	r2, #32
 800ae7c:	42a2      	cmp	r2, r4
 800ae7e:	d0f0      	beq.n	800ae62 <__match+0x6>
 800ae80:	2000      	movs	r0, #0
 800ae82:	e7f3      	b.n	800ae6c <__match+0x10>

0800ae84 <__hexnan>:
 800ae84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae88:	680b      	ldr	r3, [r1, #0]
 800ae8a:	115e      	asrs	r6, r3, #5
 800ae8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae90:	f013 031f 	ands.w	r3, r3, #31
 800ae94:	b087      	sub	sp, #28
 800ae96:	bf18      	it	ne
 800ae98:	3604      	addne	r6, #4
 800ae9a:	2500      	movs	r5, #0
 800ae9c:	1f37      	subs	r7, r6, #4
 800ae9e:	4690      	mov	r8, r2
 800aea0:	6802      	ldr	r2, [r0, #0]
 800aea2:	9301      	str	r3, [sp, #4]
 800aea4:	4682      	mov	sl, r0
 800aea6:	f846 5c04 	str.w	r5, [r6, #-4]
 800aeaa:	46b9      	mov	r9, r7
 800aeac:	463c      	mov	r4, r7
 800aeae:	9502      	str	r5, [sp, #8]
 800aeb0:	46ab      	mov	fp, r5
 800aeb2:	7851      	ldrb	r1, [r2, #1]
 800aeb4:	1c53      	adds	r3, r2, #1
 800aeb6:	9303      	str	r3, [sp, #12]
 800aeb8:	b341      	cbz	r1, 800af0c <__hexnan+0x88>
 800aeba:	4608      	mov	r0, r1
 800aebc:	9205      	str	r2, [sp, #20]
 800aebe:	9104      	str	r1, [sp, #16]
 800aec0:	f7ff fd5e 	bl	800a980 <__hexdig_fun>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d14f      	bne.n	800af68 <__hexnan+0xe4>
 800aec8:	9904      	ldr	r1, [sp, #16]
 800aeca:	9a05      	ldr	r2, [sp, #20]
 800aecc:	2920      	cmp	r1, #32
 800aece:	d818      	bhi.n	800af02 <__hexnan+0x7e>
 800aed0:	9b02      	ldr	r3, [sp, #8]
 800aed2:	459b      	cmp	fp, r3
 800aed4:	dd13      	ble.n	800aefe <__hexnan+0x7a>
 800aed6:	454c      	cmp	r4, r9
 800aed8:	d206      	bcs.n	800aee8 <__hexnan+0x64>
 800aeda:	2d07      	cmp	r5, #7
 800aedc:	dc04      	bgt.n	800aee8 <__hexnan+0x64>
 800aede:	462a      	mov	r2, r5
 800aee0:	4649      	mov	r1, r9
 800aee2:	4620      	mov	r0, r4
 800aee4:	f7ff ffa8 	bl	800ae38 <L_shift>
 800aee8:	4544      	cmp	r4, r8
 800aeea:	d950      	bls.n	800af8e <__hexnan+0x10a>
 800aeec:	2300      	movs	r3, #0
 800aeee:	f1a4 0904 	sub.w	r9, r4, #4
 800aef2:	f844 3c04 	str.w	r3, [r4, #-4]
 800aef6:	f8cd b008 	str.w	fp, [sp, #8]
 800aefa:	464c      	mov	r4, r9
 800aefc:	461d      	mov	r5, r3
 800aefe:	9a03      	ldr	r2, [sp, #12]
 800af00:	e7d7      	b.n	800aeb2 <__hexnan+0x2e>
 800af02:	2929      	cmp	r1, #41	; 0x29
 800af04:	d156      	bne.n	800afb4 <__hexnan+0x130>
 800af06:	3202      	adds	r2, #2
 800af08:	f8ca 2000 	str.w	r2, [sl]
 800af0c:	f1bb 0f00 	cmp.w	fp, #0
 800af10:	d050      	beq.n	800afb4 <__hexnan+0x130>
 800af12:	454c      	cmp	r4, r9
 800af14:	d206      	bcs.n	800af24 <__hexnan+0xa0>
 800af16:	2d07      	cmp	r5, #7
 800af18:	dc04      	bgt.n	800af24 <__hexnan+0xa0>
 800af1a:	462a      	mov	r2, r5
 800af1c:	4649      	mov	r1, r9
 800af1e:	4620      	mov	r0, r4
 800af20:	f7ff ff8a 	bl	800ae38 <L_shift>
 800af24:	4544      	cmp	r4, r8
 800af26:	d934      	bls.n	800af92 <__hexnan+0x10e>
 800af28:	f1a8 0204 	sub.w	r2, r8, #4
 800af2c:	4623      	mov	r3, r4
 800af2e:	f853 1b04 	ldr.w	r1, [r3], #4
 800af32:	f842 1f04 	str.w	r1, [r2, #4]!
 800af36:	429f      	cmp	r7, r3
 800af38:	d2f9      	bcs.n	800af2e <__hexnan+0xaa>
 800af3a:	1b3b      	subs	r3, r7, r4
 800af3c:	f023 0303 	bic.w	r3, r3, #3
 800af40:	3304      	adds	r3, #4
 800af42:	3401      	adds	r4, #1
 800af44:	3e03      	subs	r6, #3
 800af46:	42b4      	cmp	r4, r6
 800af48:	bf88      	it	hi
 800af4a:	2304      	movhi	r3, #4
 800af4c:	4443      	add	r3, r8
 800af4e:	2200      	movs	r2, #0
 800af50:	f843 2b04 	str.w	r2, [r3], #4
 800af54:	429f      	cmp	r7, r3
 800af56:	d2fb      	bcs.n	800af50 <__hexnan+0xcc>
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	b91b      	cbnz	r3, 800af64 <__hexnan+0xe0>
 800af5c:	4547      	cmp	r7, r8
 800af5e:	d127      	bne.n	800afb0 <__hexnan+0x12c>
 800af60:	2301      	movs	r3, #1
 800af62:	603b      	str	r3, [r7, #0]
 800af64:	2005      	movs	r0, #5
 800af66:	e026      	b.n	800afb6 <__hexnan+0x132>
 800af68:	3501      	adds	r5, #1
 800af6a:	2d08      	cmp	r5, #8
 800af6c:	f10b 0b01 	add.w	fp, fp, #1
 800af70:	dd06      	ble.n	800af80 <__hexnan+0xfc>
 800af72:	4544      	cmp	r4, r8
 800af74:	d9c3      	bls.n	800aefe <__hexnan+0x7a>
 800af76:	2300      	movs	r3, #0
 800af78:	f844 3c04 	str.w	r3, [r4, #-4]
 800af7c:	2501      	movs	r5, #1
 800af7e:	3c04      	subs	r4, #4
 800af80:	6822      	ldr	r2, [r4, #0]
 800af82:	f000 000f 	and.w	r0, r0, #15
 800af86:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800af8a:	6022      	str	r2, [r4, #0]
 800af8c:	e7b7      	b.n	800aefe <__hexnan+0x7a>
 800af8e:	2508      	movs	r5, #8
 800af90:	e7b5      	b.n	800aefe <__hexnan+0x7a>
 800af92:	9b01      	ldr	r3, [sp, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d0df      	beq.n	800af58 <__hexnan+0xd4>
 800af98:	f04f 32ff 	mov.w	r2, #4294967295
 800af9c:	f1c3 0320 	rsb	r3, r3, #32
 800afa0:	fa22 f303 	lsr.w	r3, r2, r3
 800afa4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800afa8:	401a      	ands	r2, r3
 800afaa:	f846 2c04 	str.w	r2, [r6, #-4]
 800afae:	e7d3      	b.n	800af58 <__hexnan+0xd4>
 800afb0:	3f04      	subs	r7, #4
 800afb2:	e7d1      	b.n	800af58 <__hexnan+0xd4>
 800afb4:	2004      	movs	r0, #4
 800afb6:	b007      	add	sp, #28
 800afb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800afbc <_localeconv_r>:
 800afbc:	4800      	ldr	r0, [pc, #0]	; (800afc0 <_localeconv_r+0x4>)
 800afbe:	4770      	bx	lr
 800afc0:	20000364 	.word	0x20000364

0800afc4 <malloc>:
 800afc4:	4b02      	ldr	r3, [pc, #8]	; (800afd0 <malloc+0xc>)
 800afc6:	4601      	mov	r1, r0
 800afc8:	6818      	ldr	r0, [r3, #0]
 800afca:	f000 bd59 	b.w	800ba80 <_malloc_r>
 800afce:	bf00      	nop
 800afd0:	2000020c 	.word	0x2000020c

0800afd4 <__ascii_mbtowc>:
 800afd4:	b082      	sub	sp, #8
 800afd6:	b901      	cbnz	r1, 800afda <__ascii_mbtowc+0x6>
 800afd8:	a901      	add	r1, sp, #4
 800afda:	b142      	cbz	r2, 800afee <__ascii_mbtowc+0x1a>
 800afdc:	b14b      	cbz	r3, 800aff2 <__ascii_mbtowc+0x1e>
 800afde:	7813      	ldrb	r3, [r2, #0]
 800afe0:	600b      	str	r3, [r1, #0]
 800afe2:	7812      	ldrb	r2, [r2, #0]
 800afe4:	1e10      	subs	r0, r2, #0
 800afe6:	bf18      	it	ne
 800afe8:	2001      	movne	r0, #1
 800afea:	b002      	add	sp, #8
 800afec:	4770      	bx	lr
 800afee:	4610      	mov	r0, r2
 800aff0:	e7fb      	b.n	800afea <__ascii_mbtowc+0x16>
 800aff2:	f06f 0001 	mvn.w	r0, #1
 800aff6:	e7f8      	b.n	800afea <__ascii_mbtowc+0x16>

0800aff8 <_Balloc>:
 800aff8:	b570      	push	{r4, r5, r6, lr}
 800affa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800affc:	4604      	mov	r4, r0
 800affe:	460d      	mov	r5, r1
 800b000:	b976      	cbnz	r6, 800b020 <_Balloc+0x28>
 800b002:	2010      	movs	r0, #16
 800b004:	f7ff ffde 	bl	800afc4 <malloc>
 800b008:	4602      	mov	r2, r0
 800b00a:	6260      	str	r0, [r4, #36]	; 0x24
 800b00c:	b920      	cbnz	r0, 800b018 <_Balloc+0x20>
 800b00e:	4b18      	ldr	r3, [pc, #96]	; (800b070 <_Balloc+0x78>)
 800b010:	4818      	ldr	r0, [pc, #96]	; (800b074 <_Balloc+0x7c>)
 800b012:	2166      	movs	r1, #102	; 0x66
 800b014:	f000 ff3e 	bl	800be94 <__assert_func>
 800b018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b01c:	6006      	str	r6, [r0, #0]
 800b01e:	60c6      	str	r6, [r0, #12]
 800b020:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b022:	68f3      	ldr	r3, [r6, #12]
 800b024:	b183      	cbz	r3, 800b048 <_Balloc+0x50>
 800b026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b02e:	b9b8      	cbnz	r0, 800b060 <_Balloc+0x68>
 800b030:	2101      	movs	r1, #1
 800b032:	fa01 f605 	lsl.w	r6, r1, r5
 800b036:	1d72      	adds	r2, r6, #5
 800b038:	0092      	lsls	r2, r2, #2
 800b03a:	4620      	mov	r0, r4
 800b03c:	f000 fc9d 	bl	800b97a <_calloc_r>
 800b040:	b160      	cbz	r0, 800b05c <_Balloc+0x64>
 800b042:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b046:	e00e      	b.n	800b066 <_Balloc+0x6e>
 800b048:	2221      	movs	r2, #33	; 0x21
 800b04a:	2104      	movs	r1, #4
 800b04c:	4620      	mov	r0, r4
 800b04e:	f000 fc94 	bl	800b97a <_calloc_r>
 800b052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b054:	60f0      	str	r0, [r6, #12]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1e4      	bne.n	800b026 <_Balloc+0x2e>
 800b05c:	2000      	movs	r0, #0
 800b05e:	bd70      	pop	{r4, r5, r6, pc}
 800b060:	6802      	ldr	r2, [r0, #0]
 800b062:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b066:	2300      	movs	r3, #0
 800b068:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b06c:	e7f7      	b.n	800b05e <_Balloc+0x66>
 800b06e:	bf00      	nop
 800b070:	0800e246 	.word	0x0800e246
 800b074:	0800e344 	.word	0x0800e344

0800b078 <_Bfree>:
 800b078:	b570      	push	{r4, r5, r6, lr}
 800b07a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b07c:	4605      	mov	r5, r0
 800b07e:	460c      	mov	r4, r1
 800b080:	b976      	cbnz	r6, 800b0a0 <_Bfree+0x28>
 800b082:	2010      	movs	r0, #16
 800b084:	f7ff ff9e 	bl	800afc4 <malloc>
 800b088:	4602      	mov	r2, r0
 800b08a:	6268      	str	r0, [r5, #36]	; 0x24
 800b08c:	b920      	cbnz	r0, 800b098 <_Bfree+0x20>
 800b08e:	4b09      	ldr	r3, [pc, #36]	; (800b0b4 <_Bfree+0x3c>)
 800b090:	4809      	ldr	r0, [pc, #36]	; (800b0b8 <_Bfree+0x40>)
 800b092:	218a      	movs	r1, #138	; 0x8a
 800b094:	f000 fefe 	bl	800be94 <__assert_func>
 800b098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b09c:	6006      	str	r6, [r0, #0]
 800b09e:	60c6      	str	r6, [r0, #12]
 800b0a0:	b13c      	cbz	r4, 800b0b2 <_Bfree+0x3a>
 800b0a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b0a4:	6862      	ldr	r2, [r4, #4]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0ac:	6021      	str	r1, [r4, #0]
 800b0ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0b2:	bd70      	pop	{r4, r5, r6, pc}
 800b0b4:	0800e246 	.word	0x0800e246
 800b0b8:	0800e344 	.word	0x0800e344

0800b0bc <__multadd>:
 800b0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c0:	690d      	ldr	r5, [r1, #16]
 800b0c2:	4607      	mov	r7, r0
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	461e      	mov	r6, r3
 800b0c8:	f101 0c14 	add.w	ip, r1, #20
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	f8dc 3000 	ldr.w	r3, [ip]
 800b0d2:	b299      	uxth	r1, r3
 800b0d4:	fb02 6101 	mla	r1, r2, r1, r6
 800b0d8:	0c1e      	lsrs	r6, r3, #16
 800b0da:	0c0b      	lsrs	r3, r1, #16
 800b0dc:	fb02 3306 	mla	r3, r2, r6, r3
 800b0e0:	b289      	uxth	r1, r1
 800b0e2:	3001      	adds	r0, #1
 800b0e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b0e8:	4285      	cmp	r5, r0
 800b0ea:	f84c 1b04 	str.w	r1, [ip], #4
 800b0ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b0f2:	dcec      	bgt.n	800b0ce <__multadd+0x12>
 800b0f4:	b30e      	cbz	r6, 800b13a <__multadd+0x7e>
 800b0f6:	68a3      	ldr	r3, [r4, #8]
 800b0f8:	42ab      	cmp	r3, r5
 800b0fa:	dc19      	bgt.n	800b130 <__multadd+0x74>
 800b0fc:	6861      	ldr	r1, [r4, #4]
 800b0fe:	4638      	mov	r0, r7
 800b100:	3101      	adds	r1, #1
 800b102:	f7ff ff79 	bl	800aff8 <_Balloc>
 800b106:	4680      	mov	r8, r0
 800b108:	b928      	cbnz	r0, 800b116 <__multadd+0x5a>
 800b10a:	4602      	mov	r2, r0
 800b10c:	4b0c      	ldr	r3, [pc, #48]	; (800b140 <__multadd+0x84>)
 800b10e:	480d      	ldr	r0, [pc, #52]	; (800b144 <__multadd+0x88>)
 800b110:	21b5      	movs	r1, #181	; 0xb5
 800b112:	f000 febf 	bl	800be94 <__assert_func>
 800b116:	6922      	ldr	r2, [r4, #16]
 800b118:	3202      	adds	r2, #2
 800b11a:	f104 010c 	add.w	r1, r4, #12
 800b11e:	0092      	lsls	r2, r2, #2
 800b120:	300c      	adds	r0, #12
 800b122:	f7fc ffff 	bl	8008124 <memcpy>
 800b126:	4621      	mov	r1, r4
 800b128:	4638      	mov	r0, r7
 800b12a:	f7ff ffa5 	bl	800b078 <_Bfree>
 800b12e:	4644      	mov	r4, r8
 800b130:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b134:	3501      	adds	r5, #1
 800b136:	615e      	str	r6, [r3, #20]
 800b138:	6125      	str	r5, [r4, #16]
 800b13a:	4620      	mov	r0, r4
 800b13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b140:	0800e2b8 	.word	0x0800e2b8
 800b144:	0800e344 	.word	0x0800e344

0800b148 <__s2b>:
 800b148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b14c:	460c      	mov	r4, r1
 800b14e:	4615      	mov	r5, r2
 800b150:	461f      	mov	r7, r3
 800b152:	2209      	movs	r2, #9
 800b154:	3308      	adds	r3, #8
 800b156:	4606      	mov	r6, r0
 800b158:	fb93 f3f2 	sdiv	r3, r3, r2
 800b15c:	2100      	movs	r1, #0
 800b15e:	2201      	movs	r2, #1
 800b160:	429a      	cmp	r2, r3
 800b162:	db09      	blt.n	800b178 <__s2b+0x30>
 800b164:	4630      	mov	r0, r6
 800b166:	f7ff ff47 	bl	800aff8 <_Balloc>
 800b16a:	b940      	cbnz	r0, 800b17e <__s2b+0x36>
 800b16c:	4602      	mov	r2, r0
 800b16e:	4b19      	ldr	r3, [pc, #100]	; (800b1d4 <__s2b+0x8c>)
 800b170:	4819      	ldr	r0, [pc, #100]	; (800b1d8 <__s2b+0x90>)
 800b172:	21ce      	movs	r1, #206	; 0xce
 800b174:	f000 fe8e 	bl	800be94 <__assert_func>
 800b178:	0052      	lsls	r2, r2, #1
 800b17a:	3101      	adds	r1, #1
 800b17c:	e7f0      	b.n	800b160 <__s2b+0x18>
 800b17e:	9b08      	ldr	r3, [sp, #32]
 800b180:	6143      	str	r3, [r0, #20]
 800b182:	2d09      	cmp	r5, #9
 800b184:	f04f 0301 	mov.w	r3, #1
 800b188:	6103      	str	r3, [r0, #16]
 800b18a:	dd16      	ble.n	800b1ba <__s2b+0x72>
 800b18c:	f104 0909 	add.w	r9, r4, #9
 800b190:	46c8      	mov	r8, r9
 800b192:	442c      	add	r4, r5
 800b194:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b198:	4601      	mov	r1, r0
 800b19a:	3b30      	subs	r3, #48	; 0x30
 800b19c:	220a      	movs	r2, #10
 800b19e:	4630      	mov	r0, r6
 800b1a0:	f7ff ff8c 	bl	800b0bc <__multadd>
 800b1a4:	45a0      	cmp	r8, r4
 800b1a6:	d1f5      	bne.n	800b194 <__s2b+0x4c>
 800b1a8:	f1a5 0408 	sub.w	r4, r5, #8
 800b1ac:	444c      	add	r4, r9
 800b1ae:	1b2d      	subs	r5, r5, r4
 800b1b0:	1963      	adds	r3, r4, r5
 800b1b2:	42bb      	cmp	r3, r7
 800b1b4:	db04      	blt.n	800b1c0 <__s2b+0x78>
 800b1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ba:	340a      	adds	r4, #10
 800b1bc:	2509      	movs	r5, #9
 800b1be:	e7f6      	b.n	800b1ae <__s2b+0x66>
 800b1c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b1c4:	4601      	mov	r1, r0
 800b1c6:	3b30      	subs	r3, #48	; 0x30
 800b1c8:	220a      	movs	r2, #10
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	f7ff ff76 	bl	800b0bc <__multadd>
 800b1d0:	e7ee      	b.n	800b1b0 <__s2b+0x68>
 800b1d2:	bf00      	nop
 800b1d4:	0800e2b8 	.word	0x0800e2b8
 800b1d8:	0800e344 	.word	0x0800e344

0800b1dc <__hi0bits>:
 800b1dc:	0c03      	lsrs	r3, r0, #16
 800b1de:	041b      	lsls	r3, r3, #16
 800b1e0:	b9d3      	cbnz	r3, 800b218 <__hi0bits+0x3c>
 800b1e2:	0400      	lsls	r0, r0, #16
 800b1e4:	2310      	movs	r3, #16
 800b1e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b1ea:	bf04      	itt	eq
 800b1ec:	0200      	lsleq	r0, r0, #8
 800b1ee:	3308      	addeq	r3, #8
 800b1f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b1f4:	bf04      	itt	eq
 800b1f6:	0100      	lsleq	r0, r0, #4
 800b1f8:	3304      	addeq	r3, #4
 800b1fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b1fe:	bf04      	itt	eq
 800b200:	0080      	lsleq	r0, r0, #2
 800b202:	3302      	addeq	r3, #2
 800b204:	2800      	cmp	r0, #0
 800b206:	db05      	blt.n	800b214 <__hi0bits+0x38>
 800b208:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b20c:	f103 0301 	add.w	r3, r3, #1
 800b210:	bf08      	it	eq
 800b212:	2320      	moveq	r3, #32
 800b214:	4618      	mov	r0, r3
 800b216:	4770      	bx	lr
 800b218:	2300      	movs	r3, #0
 800b21a:	e7e4      	b.n	800b1e6 <__hi0bits+0xa>

0800b21c <__lo0bits>:
 800b21c:	6803      	ldr	r3, [r0, #0]
 800b21e:	f013 0207 	ands.w	r2, r3, #7
 800b222:	4601      	mov	r1, r0
 800b224:	d00b      	beq.n	800b23e <__lo0bits+0x22>
 800b226:	07da      	lsls	r2, r3, #31
 800b228:	d423      	bmi.n	800b272 <__lo0bits+0x56>
 800b22a:	0798      	lsls	r0, r3, #30
 800b22c:	bf49      	itett	mi
 800b22e:	085b      	lsrmi	r3, r3, #1
 800b230:	089b      	lsrpl	r3, r3, #2
 800b232:	2001      	movmi	r0, #1
 800b234:	600b      	strmi	r3, [r1, #0]
 800b236:	bf5c      	itt	pl
 800b238:	600b      	strpl	r3, [r1, #0]
 800b23a:	2002      	movpl	r0, #2
 800b23c:	4770      	bx	lr
 800b23e:	b298      	uxth	r0, r3
 800b240:	b9a8      	cbnz	r0, 800b26e <__lo0bits+0x52>
 800b242:	0c1b      	lsrs	r3, r3, #16
 800b244:	2010      	movs	r0, #16
 800b246:	b2da      	uxtb	r2, r3
 800b248:	b90a      	cbnz	r2, 800b24e <__lo0bits+0x32>
 800b24a:	3008      	adds	r0, #8
 800b24c:	0a1b      	lsrs	r3, r3, #8
 800b24e:	071a      	lsls	r2, r3, #28
 800b250:	bf04      	itt	eq
 800b252:	091b      	lsreq	r3, r3, #4
 800b254:	3004      	addeq	r0, #4
 800b256:	079a      	lsls	r2, r3, #30
 800b258:	bf04      	itt	eq
 800b25a:	089b      	lsreq	r3, r3, #2
 800b25c:	3002      	addeq	r0, #2
 800b25e:	07da      	lsls	r2, r3, #31
 800b260:	d403      	bmi.n	800b26a <__lo0bits+0x4e>
 800b262:	085b      	lsrs	r3, r3, #1
 800b264:	f100 0001 	add.w	r0, r0, #1
 800b268:	d005      	beq.n	800b276 <__lo0bits+0x5a>
 800b26a:	600b      	str	r3, [r1, #0]
 800b26c:	4770      	bx	lr
 800b26e:	4610      	mov	r0, r2
 800b270:	e7e9      	b.n	800b246 <__lo0bits+0x2a>
 800b272:	2000      	movs	r0, #0
 800b274:	4770      	bx	lr
 800b276:	2020      	movs	r0, #32
 800b278:	4770      	bx	lr
	...

0800b27c <__i2b>:
 800b27c:	b510      	push	{r4, lr}
 800b27e:	460c      	mov	r4, r1
 800b280:	2101      	movs	r1, #1
 800b282:	f7ff feb9 	bl	800aff8 <_Balloc>
 800b286:	4602      	mov	r2, r0
 800b288:	b928      	cbnz	r0, 800b296 <__i2b+0x1a>
 800b28a:	4b05      	ldr	r3, [pc, #20]	; (800b2a0 <__i2b+0x24>)
 800b28c:	4805      	ldr	r0, [pc, #20]	; (800b2a4 <__i2b+0x28>)
 800b28e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b292:	f000 fdff 	bl	800be94 <__assert_func>
 800b296:	2301      	movs	r3, #1
 800b298:	6144      	str	r4, [r0, #20]
 800b29a:	6103      	str	r3, [r0, #16]
 800b29c:	bd10      	pop	{r4, pc}
 800b29e:	bf00      	nop
 800b2a0:	0800e2b8 	.word	0x0800e2b8
 800b2a4:	0800e344 	.word	0x0800e344

0800b2a8 <__multiply>:
 800b2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ac:	4691      	mov	r9, r2
 800b2ae:	690a      	ldr	r2, [r1, #16]
 800b2b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	bfb8      	it	lt
 800b2b8:	460b      	movlt	r3, r1
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	bfbc      	itt	lt
 800b2be:	464c      	movlt	r4, r9
 800b2c0:	4699      	movlt	r9, r3
 800b2c2:	6927      	ldr	r7, [r4, #16]
 800b2c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b2c8:	68a3      	ldr	r3, [r4, #8]
 800b2ca:	6861      	ldr	r1, [r4, #4]
 800b2cc:	eb07 060a 	add.w	r6, r7, sl
 800b2d0:	42b3      	cmp	r3, r6
 800b2d2:	b085      	sub	sp, #20
 800b2d4:	bfb8      	it	lt
 800b2d6:	3101      	addlt	r1, #1
 800b2d8:	f7ff fe8e 	bl	800aff8 <_Balloc>
 800b2dc:	b930      	cbnz	r0, 800b2ec <__multiply+0x44>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	4b44      	ldr	r3, [pc, #272]	; (800b3f4 <__multiply+0x14c>)
 800b2e2:	4845      	ldr	r0, [pc, #276]	; (800b3f8 <__multiply+0x150>)
 800b2e4:	f240 115d 	movw	r1, #349	; 0x15d
 800b2e8:	f000 fdd4 	bl	800be94 <__assert_func>
 800b2ec:	f100 0514 	add.w	r5, r0, #20
 800b2f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b2f4:	462b      	mov	r3, r5
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	4543      	cmp	r3, r8
 800b2fa:	d321      	bcc.n	800b340 <__multiply+0x98>
 800b2fc:	f104 0314 	add.w	r3, r4, #20
 800b300:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b304:	f109 0314 	add.w	r3, r9, #20
 800b308:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b30c:	9202      	str	r2, [sp, #8]
 800b30e:	1b3a      	subs	r2, r7, r4
 800b310:	3a15      	subs	r2, #21
 800b312:	f022 0203 	bic.w	r2, r2, #3
 800b316:	3204      	adds	r2, #4
 800b318:	f104 0115 	add.w	r1, r4, #21
 800b31c:	428f      	cmp	r7, r1
 800b31e:	bf38      	it	cc
 800b320:	2204      	movcc	r2, #4
 800b322:	9201      	str	r2, [sp, #4]
 800b324:	9a02      	ldr	r2, [sp, #8]
 800b326:	9303      	str	r3, [sp, #12]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d80c      	bhi.n	800b346 <__multiply+0x9e>
 800b32c:	2e00      	cmp	r6, #0
 800b32e:	dd03      	ble.n	800b338 <__multiply+0x90>
 800b330:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b334:	2b00      	cmp	r3, #0
 800b336:	d05a      	beq.n	800b3ee <__multiply+0x146>
 800b338:	6106      	str	r6, [r0, #16]
 800b33a:	b005      	add	sp, #20
 800b33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b340:	f843 2b04 	str.w	r2, [r3], #4
 800b344:	e7d8      	b.n	800b2f8 <__multiply+0x50>
 800b346:	f8b3 a000 	ldrh.w	sl, [r3]
 800b34a:	f1ba 0f00 	cmp.w	sl, #0
 800b34e:	d024      	beq.n	800b39a <__multiply+0xf2>
 800b350:	f104 0e14 	add.w	lr, r4, #20
 800b354:	46a9      	mov	r9, r5
 800b356:	f04f 0c00 	mov.w	ip, #0
 800b35a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b35e:	f8d9 1000 	ldr.w	r1, [r9]
 800b362:	fa1f fb82 	uxth.w	fp, r2
 800b366:	b289      	uxth	r1, r1
 800b368:	fb0a 110b 	mla	r1, sl, fp, r1
 800b36c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b370:	f8d9 2000 	ldr.w	r2, [r9]
 800b374:	4461      	add	r1, ip
 800b376:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b37a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b37e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b382:	b289      	uxth	r1, r1
 800b384:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b388:	4577      	cmp	r7, lr
 800b38a:	f849 1b04 	str.w	r1, [r9], #4
 800b38e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b392:	d8e2      	bhi.n	800b35a <__multiply+0xb2>
 800b394:	9a01      	ldr	r2, [sp, #4]
 800b396:	f845 c002 	str.w	ip, [r5, r2]
 800b39a:	9a03      	ldr	r2, [sp, #12]
 800b39c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	f1b9 0f00 	cmp.w	r9, #0
 800b3a6:	d020      	beq.n	800b3ea <__multiply+0x142>
 800b3a8:	6829      	ldr	r1, [r5, #0]
 800b3aa:	f104 0c14 	add.w	ip, r4, #20
 800b3ae:	46ae      	mov	lr, r5
 800b3b0:	f04f 0a00 	mov.w	sl, #0
 800b3b4:	f8bc b000 	ldrh.w	fp, [ip]
 800b3b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b3bc:	fb09 220b 	mla	r2, r9, fp, r2
 800b3c0:	4492      	add	sl, r2
 800b3c2:	b289      	uxth	r1, r1
 800b3c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b3c8:	f84e 1b04 	str.w	r1, [lr], #4
 800b3cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b3d0:	f8be 1000 	ldrh.w	r1, [lr]
 800b3d4:	0c12      	lsrs	r2, r2, #16
 800b3d6:	fb09 1102 	mla	r1, r9, r2, r1
 800b3da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b3de:	4567      	cmp	r7, ip
 800b3e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b3e4:	d8e6      	bhi.n	800b3b4 <__multiply+0x10c>
 800b3e6:	9a01      	ldr	r2, [sp, #4]
 800b3e8:	50a9      	str	r1, [r5, r2]
 800b3ea:	3504      	adds	r5, #4
 800b3ec:	e79a      	b.n	800b324 <__multiply+0x7c>
 800b3ee:	3e01      	subs	r6, #1
 800b3f0:	e79c      	b.n	800b32c <__multiply+0x84>
 800b3f2:	bf00      	nop
 800b3f4:	0800e2b8 	.word	0x0800e2b8
 800b3f8:	0800e344 	.word	0x0800e344

0800b3fc <__pow5mult>:
 800b3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b400:	4615      	mov	r5, r2
 800b402:	f012 0203 	ands.w	r2, r2, #3
 800b406:	4606      	mov	r6, r0
 800b408:	460f      	mov	r7, r1
 800b40a:	d007      	beq.n	800b41c <__pow5mult+0x20>
 800b40c:	4c25      	ldr	r4, [pc, #148]	; (800b4a4 <__pow5mult+0xa8>)
 800b40e:	3a01      	subs	r2, #1
 800b410:	2300      	movs	r3, #0
 800b412:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b416:	f7ff fe51 	bl	800b0bc <__multadd>
 800b41a:	4607      	mov	r7, r0
 800b41c:	10ad      	asrs	r5, r5, #2
 800b41e:	d03d      	beq.n	800b49c <__pow5mult+0xa0>
 800b420:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b422:	b97c      	cbnz	r4, 800b444 <__pow5mult+0x48>
 800b424:	2010      	movs	r0, #16
 800b426:	f7ff fdcd 	bl	800afc4 <malloc>
 800b42a:	4602      	mov	r2, r0
 800b42c:	6270      	str	r0, [r6, #36]	; 0x24
 800b42e:	b928      	cbnz	r0, 800b43c <__pow5mult+0x40>
 800b430:	4b1d      	ldr	r3, [pc, #116]	; (800b4a8 <__pow5mult+0xac>)
 800b432:	481e      	ldr	r0, [pc, #120]	; (800b4ac <__pow5mult+0xb0>)
 800b434:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b438:	f000 fd2c 	bl	800be94 <__assert_func>
 800b43c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b440:	6004      	str	r4, [r0, #0]
 800b442:	60c4      	str	r4, [r0, #12]
 800b444:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b448:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b44c:	b94c      	cbnz	r4, 800b462 <__pow5mult+0x66>
 800b44e:	f240 2171 	movw	r1, #625	; 0x271
 800b452:	4630      	mov	r0, r6
 800b454:	f7ff ff12 	bl	800b27c <__i2b>
 800b458:	2300      	movs	r3, #0
 800b45a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b45e:	4604      	mov	r4, r0
 800b460:	6003      	str	r3, [r0, #0]
 800b462:	f04f 0900 	mov.w	r9, #0
 800b466:	07eb      	lsls	r3, r5, #31
 800b468:	d50a      	bpl.n	800b480 <__pow5mult+0x84>
 800b46a:	4639      	mov	r1, r7
 800b46c:	4622      	mov	r2, r4
 800b46e:	4630      	mov	r0, r6
 800b470:	f7ff ff1a 	bl	800b2a8 <__multiply>
 800b474:	4639      	mov	r1, r7
 800b476:	4680      	mov	r8, r0
 800b478:	4630      	mov	r0, r6
 800b47a:	f7ff fdfd 	bl	800b078 <_Bfree>
 800b47e:	4647      	mov	r7, r8
 800b480:	106d      	asrs	r5, r5, #1
 800b482:	d00b      	beq.n	800b49c <__pow5mult+0xa0>
 800b484:	6820      	ldr	r0, [r4, #0]
 800b486:	b938      	cbnz	r0, 800b498 <__pow5mult+0x9c>
 800b488:	4622      	mov	r2, r4
 800b48a:	4621      	mov	r1, r4
 800b48c:	4630      	mov	r0, r6
 800b48e:	f7ff ff0b 	bl	800b2a8 <__multiply>
 800b492:	6020      	str	r0, [r4, #0]
 800b494:	f8c0 9000 	str.w	r9, [r0]
 800b498:	4604      	mov	r4, r0
 800b49a:	e7e4      	b.n	800b466 <__pow5mult+0x6a>
 800b49c:	4638      	mov	r0, r7
 800b49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4a2:	bf00      	nop
 800b4a4:	0800e490 	.word	0x0800e490
 800b4a8:	0800e246 	.word	0x0800e246
 800b4ac:	0800e344 	.word	0x0800e344

0800b4b0 <__lshift>:
 800b4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	6849      	ldr	r1, [r1, #4]
 800b4b8:	6923      	ldr	r3, [r4, #16]
 800b4ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b4be:	68a3      	ldr	r3, [r4, #8]
 800b4c0:	4607      	mov	r7, r0
 800b4c2:	4691      	mov	r9, r2
 800b4c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b4c8:	f108 0601 	add.w	r6, r8, #1
 800b4cc:	42b3      	cmp	r3, r6
 800b4ce:	db0b      	blt.n	800b4e8 <__lshift+0x38>
 800b4d0:	4638      	mov	r0, r7
 800b4d2:	f7ff fd91 	bl	800aff8 <_Balloc>
 800b4d6:	4605      	mov	r5, r0
 800b4d8:	b948      	cbnz	r0, 800b4ee <__lshift+0x3e>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	4b2a      	ldr	r3, [pc, #168]	; (800b588 <__lshift+0xd8>)
 800b4de:	482b      	ldr	r0, [pc, #172]	; (800b58c <__lshift+0xdc>)
 800b4e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b4e4:	f000 fcd6 	bl	800be94 <__assert_func>
 800b4e8:	3101      	adds	r1, #1
 800b4ea:	005b      	lsls	r3, r3, #1
 800b4ec:	e7ee      	b.n	800b4cc <__lshift+0x1c>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	f100 0114 	add.w	r1, r0, #20
 800b4f4:	f100 0210 	add.w	r2, r0, #16
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	4553      	cmp	r3, sl
 800b4fc:	db37      	blt.n	800b56e <__lshift+0xbe>
 800b4fe:	6920      	ldr	r0, [r4, #16]
 800b500:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b504:	f104 0314 	add.w	r3, r4, #20
 800b508:	f019 091f 	ands.w	r9, r9, #31
 800b50c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b510:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b514:	d02f      	beq.n	800b576 <__lshift+0xc6>
 800b516:	f1c9 0e20 	rsb	lr, r9, #32
 800b51a:	468a      	mov	sl, r1
 800b51c:	f04f 0c00 	mov.w	ip, #0
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	fa02 f209 	lsl.w	r2, r2, r9
 800b526:	ea42 020c 	orr.w	r2, r2, ip
 800b52a:	f84a 2b04 	str.w	r2, [sl], #4
 800b52e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b532:	4298      	cmp	r0, r3
 800b534:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b538:	d8f2      	bhi.n	800b520 <__lshift+0x70>
 800b53a:	1b03      	subs	r3, r0, r4
 800b53c:	3b15      	subs	r3, #21
 800b53e:	f023 0303 	bic.w	r3, r3, #3
 800b542:	3304      	adds	r3, #4
 800b544:	f104 0215 	add.w	r2, r4, #21
 800b548:	4290      	cmp	r0, r2
 800b54a:	bf38      	it	cc
 800b54c:	2304      	movcc	r3, #4
 800b54e:	f841 c003 	str.w	ip, [r1, r3]
 800b552:	f1bc 0f00 	cmp.w	ip, #0
 800b556:	d001      	beq.n	800b55c <__lshift+0xac>
 800b558:	f108 0602 	add.w	r6, r8, #2
 800b55c:	3e01      	subs	r6, #1
 800b55e:	4638      	mov	r0, r7
 800b560:	612e      	str	r6, [r5, #16]
 800b562:	4621      	mov	r1, r4
 800b564:	f7ff fd88 	bl	800b078 <_Bfree>
 800b568:	4628      	mov	r0, r5
 800b56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b56e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b572:	3301      	adds	r3, #1
 800b574:	e7c1      	b.n	800b4fa <__lshift+0x4a>
 800b576:	3904      	subs	r1, #4
 800b578:	f853 2b04 	ldr.w	r2, [r3], #4
 800b57c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b580:	4298      	cmp	r0, r3
 800b582:	d8f9      	bhi.n	800b578 <__lshift+0xc8>
 800b584:	e7ea      	b.n	800b55c <__lshift+0xac>
 800b586:	bf00      	nop
 800b588:	0800e2b8 	.word	0x0800e2b8
 800b58c:	0800e344 	.word	0x0800e344

0800b590 <__mcmp>:
 800b590:	b530      	push	{r4, r5, lr}
 800b592:	6902      	ldr	r2, [r0, #16]
 800b594:	690c      	ldr	r4, [r1, #16]
 800b596:	1b12      	subs	r2, r2, r4
 800b598:	d10e      	bne.n	800b5b8 <__mcmp+0x28>
 800b59a:	f100 0314 	add.w	r3, r0, #20
 800b59e:	3114      	adds	r1, #20
 800b5a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b5a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b5a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b5ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b5b0:	42a5      	cmp	r5, r4
 800b5b2:	d003      	beq.n	800b5bc <__mcmp+0x2c>
 800b5b4:	d305      	bcc.n	800b5c2 <__mcmp+0x32>
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	bd30      	pop	{r4, r5, pc}
 800b5bc:	4283      	cmp	r3, r0
 800b5be:	d3f3      	bcc.n	800b5a8 <__mcmp+0x18>
 800b5c0:	e7fa      	b.n	800b5b8 <__mcmp+0x28>
 800b5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c6:	e7f7      	b.n	800b5b8 <__mcmp+0x28>

0800b5c8 <__mdiff>:
 800b5c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	4606      	mov	r6, r0
 800b5d0:	4611      	mov	r1, r2
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	4690      	mov	r8, r2
 800b5d6:	f7ff ffdb 	bl	800b590 <__mcmp>
 800b5da:	1e05      	subs	r5, r0, #0
 800b5dc:	d110      	bne.n	800b600 <__mdiff+0x38>
 800b5de:	4629      	mov	r1, r5
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f7ff fd09 	bl	800aff8 <_Balloc>
 800b5e6:	b930      	cbnz	r0, 800b5f6 <__mdiff+0x2e>
 800b5e8:	4b3a      	ldr	r3, [pc, #232]	; (800b6d4 <__mdiff+0x10c>)
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	f240 2132 	movw	r1, #562	; 0x232
 800b5f0:	4839      	ldr	r0, [pc, #228]	; (800b6d8 <__mdiff+0x110>)
 800b5f2:	f000 fc4f 	bl	800be94 <__assert_func>
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b600:	bfa4      	itt	ge
 800b602:	4643      	movge	r3, r8
 800b604:	46a0      	movge	r8, r4
 800b606:	4630      	mov	r0, r6
 800b608:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b60c:	bfa6      	itte	ge
 800b60e:	461c      	movge	r4, r3
 800b610:	2500      	movge	r5, #0
 800b612:	2501      	movlt	r5, #1
 800b614:	f7ff fcf0 	bl	800aff8 <_Balloc>
 800b618:	b920      	cbnz	r0, 800b624 <__mdiff+0x5c>
 800b61a:	4b2e      	ldr	r3, [pc, #184]	; (800b6d4 <__mdiff+0x10c>)
 800b61c:	4602      	mov	r2, r0
 800b61e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b622:	e7e5      	b.n	800b5f0 <__mdiff+0x28>
 800b624:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b628:	6926      	ldr	r6, [r4, #16]
 800b62a:	60c5      	str	r5, [r0, #12]
 800b62c:	f104 0914 	add.w	r9, r4, #20
 800b630:	f108 0514 	add.w	r5, r8, #20
 800b634:	f100 0e14 	add.w	lr, r0, #20
 800b638:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b63c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b640:	f108 0210 	add.w	r2, r8, #16
 800b644:	46f2      	mov	sl, lr
 800b646:	2100      	movs	r1, #0
 800b648:	f859 3b04 	ldr.w	r3, [r9], #4
 800b64c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b650:	fa1f f883 	uxth.w	r8, r3
 800b654:	fa11 f18b 	uxtah	r1, r1, fp
 800b658:	0c1b      	lsrs	r3, r3, #16
 800b65a:	eba1 0808 	sub.w	r8, r1, r8
 800b65e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b662:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b666:	fa1f f888 	uxth.w	r8, r8
 800b66a:	1419      	asrs	r1, r3, #16
 800b66c:	454e      	cmp	r6, r9
 800b66e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b672:	f84a 3b04 	str.w	r3, [sl], #4
 800b676:	d8e7      	bhi.n	800b648 <__mdiff+0x80>
 800b678:	1b33      	subs	r3, r6, r4
 800b67a:	3b15      	subs	r3, #21
 800b67c:	f023 0303 	bic.w	r3, r3, #3
 800b680:	3304      	adds	r3, #4
 800b682:	3415      	adds	r4, #21
 800b684:	42a6      	cmp	r6, r4
 800b686:	bf38      	it	cc
 800b688:	2304      	movcc	r3, #4
 800b68a:	441d      	add	r5, r3
 800b68c:	4473      	add	r3, lr
 800b68e:	469e      	mov	lr, r3
 800b690:	462e      	mov	r6, r5
 800b692:	4566      	cmp	r6, ip
 800b694:	d30e      	bcc.n	800b6b4 <__mdiff+0xec>
 800b696:	f10c 0203 	add.w	r2, ip, #3
 800b69a:	1b52      	subs	r2, r2, r5
 800b69c:	f022 0203 	bic.w	r2, r2, #3
 800b6a0:	3d03      	subs	r5, #3
 800b6a2:	45ac      	cmp	ip, r5
 800b6a4:	bf38      	it	cc
 800b6a6:	2200      	movcc	r2, #0
 800b6a8:	441a      	add	r2, r3
 800b6aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b6ae:	b17b      	cbz	r3, 800b6d0 <__mdiff+0x108>
 800b6b0:	6107      	str	r7, [r0, #16]
 800b6b2:	e7a3      	b.n	800b5fc <__mdiff+0x34>
 800b6b4:	f856 8b04 	ldr.w	r8, [r6], #4
 800b6b8:	fa11 f288 	uxtah	r2, r1, r8
 800b6bc:	1414      	asrs	r4, r2, #16
 800b6be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b6c2:	b292      	uxth	r2, r2
 800b6c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b6c8:	f84e 2b04 	str.w	r2, [lr], #4
 800b6cc:	1421      	asrs	r1, r4, #16
 800b6ce:	e7e0      	b.n	800b692 <__mdiff+0xca>
 800b6d0:	3f01      	subs	r7, #1
 800b6d2:	e7ea      	b.n	800b6aa <__mdiff+0xe2>
 800b6d4:	0800e2b8 	.word	0x0800e2b8
 800b6d8:	0800e344 	.word	0x0800e344

0800b6dc <__ulp>:
 800b6dc:	b082      	sub	sp, #8
 800b6de:	ed8d 0b00 	vstr	d0, [sp]
 800b6e2:	9b01      	ldr	r3, [sp, #4]
 800b6e4:	4912      	ldr	r1, [pc, #72]	; (800b730 <__ulp+0x54>)
 800b6e6:	4019      	ands	r1, r3
 800b6e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b6ec:	2900      	cmp	r1, #0
 800b6ee:	dd05      	ble.n	800b6fc <__ulp+0x20>
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	ec43 2b10 	vmov	d0, r2, r3
 800b6f8:	b002      	add	sp, #8
 800b6fa:	4770      	bx	lr
 800b6fc:	4249      	negs	r1, r1
 800b6fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b702:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b706:	f04f 0200 	mov.w	r2, #0
 800b70a:	f04f 0300 	mov.w	r3, #0
 800b70e:	da04      	bge.n	800b71a <__ulp+0x3e>
 800b710:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b714:	fa41 f300 	asr.w	r3, r1, r0
 800b718:	e7ec      	b.n	800b6f4 <__ulp+0x18>
 800b71a:	f1a0 0114 	sub.w	r1, r0, #20
 800b71e:	291e      	cmp	r1, #30
 800b720:	bfda      	itte	le
 800b722:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b726:	fa20 f101 	lsrle.w	r1, r0, r1
 800b72a:	2101      	movgt	r1, #1
 800b72c:	460a      	mov	r2, r1
 800b72e:	e7e1      	b.n	800b6f4 <__ulp+0x18>
 800b730:	7ff00000 	.word	0x7ff00000

0800b734 <__b2d>:
 800b734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b736:	6905      	ldr	r5, [r0, #16]
 800b738:	f100 0714 	add.w	r7, r0, #20
 800b73c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b740:	1f2e      	subs	r6, r5, #4
 800b742:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b746:	4620      	mov	r0, r4
 800b748:	f7ff fd48 	bl	800b1dc <__hi0bits>
 800b74c:	f1c0 0320 	rsb	r3, r0, #32
 800b750:	280a      	cmp	r0, #10
 800b752:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b7d0 <__b2d+0x9c>
 800b756:	600b      	str	r3, [r1, #0]
 800b758:	dc14      	bgt.n	800b784 <__b2d+0x50>
 800b75a:	f1c0 0e0b 	rsb	lr, r0, #11
 800b75e:	fa24 f10e 	lsr.w	r1, r4, lr
 800b762:	42b7      	cmp	r7, r6
 800b764:	ea41 030c 	orr.w	r3, r1, ip
 800b768:	bf34      	ite	cc
 800b76a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b76e:	2100      	movcs	r1, #0
 800b770:	3015      	adds	r0, #21
 800b772:	fa04 f000 	lsl.w	r0, r4, r0
 800b776:	fa21 f10e 	lsr.w	r1, r1, lr
 800b77a:	ea40 0201 	orr.w	r2, r0, r1
 800b77e:	ec43 2b10 	vmov	d0, r2, r3
 800b782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b784:	42b7      	cmp	r7, r6
 800b786:	bf3a      	itte	cc
 800b788:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b78c:	f1a5 0608 	subcc.w	r6, r5, #8
 800b790:	2100      	movcs	r1, #0
 800b792:	380b      	subs	r0, #11
 800b794:	d017      	beq.n	800b7c6 <__b2d+0x92>
 800b796:	f1c0 0c20 	rsb	ip, r0, #32
 800b79a:	fa04 f500 	lsl.w	r5, r4, r0
 800b79e:	42be      	cmp	r6, r7
 800b7a0:	fa21 f40c 	lsr.w	r4, r1, ip
 800b7a4:	ea45 0504 	orr.w	r5, r5, r4
 800b7a8:	bf8c      	ite	hi
 800b7aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b7ae:	2400      	movls	r4, #0
 800b7b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b7b4:	fa01 f000 	lsl.w	r0, r1, r0
 800b7b8:	fa24 f40c 	lsr.w	r4, r4, ip
 800b7bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b7c0:	ea40 0204 	orr.w	r2, r0, r4
 800b7c4:	e7db      	b.n	800b77e <__b2d+0x4a>
 800b7c6:	ea44 030c 	orr.w	r3, r4, ip
 800b7ca:	460a      	mov	r2, r1
 800b7cc:	e7d7      	b.n	800b77e <__b2d+0x4a>
 800b7ce:	bf00      	nop
 800b7d0:	3ff00000 	.word	0x3ff00000

0800b7d4 <__d2b>:
 800b7d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7d8:	4689      	mov	r9, r1
 800b7da:	2101      	movs	r1, #1
 800b7dc:	ec57 6b10 	vmov	r6, r7, d0
 800b7e0:	4690      	mov	r8, r2
 800b7e2:	f7ff fc09 	bl	800aff8 <_Balloc>
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	b930      	cbnz	r0, 800b7f8 <__d2b+0x24>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	4b25      	ldr	r3, [pc, #148]	; (800b884 <__d2b+0xb0>)
 800b7ee:	4826      	ldr	r0, [pc, #152]	; (800b888 <__d2b+0xb4>)
 800b7f0:	f240 310a 	movw	r1, #778	; 0x30a
 800b7f4:	f000 fb4e 	bl	800be94 <__assert_func>
 800b7f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b7fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b800:	bb35      	cbnz	r5, 800b850 <__d2b+0x7c>
 800b802:	2e00      	cmp	r6, #0
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	d028      	beq.n	800b85a <__d2b+0x86>
 800b808:	4668      	mov	r0, sp
 800b80a:	9600      	str	r6, [sp, #0]
 800b80c:	f7ff fd06 	bl	800b21c <__lo0bits>
 800b810:	9900      	ldr	r1, [sp, #0]
 800b812:	b300      	cbz	r0, 800b856 <__d2b+0x82>
 800b814:	9a01      	ldr	r2, [sp, #4]
 800b816:	f1c0 0320 	rsb	r3, r0, #32
 800b81a:	fa02 f303 	lsl.w	r3, r2, r3
 800b81e:	430b      	orrs	r3, r1
 800b820:	40c2      	lsrs	r2, r0
 800b822:	6163      	str	r3, [r4, #20]
 800b824:	9201      	str	r2, [sp, #4]
 800b826:	9b01      	ldr	r3, [sp, #4]
 800b828:	61a3      	str	r3, [r4, #24]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	bf14      	ite	ne
 800b82e:	2202      	movne	r2, #2
 800b830:	2201      	moveq	r2, #1
 800b832:	6122      	str	r2, [r4, #16]
 800b834:	b1d5      	cbz	r5, 800b86c <__d2b+0x98>
 800b836:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b83a:	4405      	add	r5, r0
 800b83c:	f8c9 5000 	str.w	r5, [r9]
 800b840:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b844:	f8c8 0000 	str.w	r0, [r8]
 800b848:	4620      	mov	r0, r4
 800b84a:	b003      	add	sp, #12
 800b84c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b854:	e7d5      	b.n	800b802 <__d2b+0x2e>
 800b856:	6161      	str	r1, [r4, #20]
 800b858:	e7e5      	b.n	800b826 <__d2b+0x52>
 800b85a:	a801      	add	r0, sp, #4
 800b85c:	f7ff fcde 	bl	800b21c <__lo0bits>
 800b860:	9b01      	ldr	r3, [sp, #4]
 800b862:	6163      	str	r3, [r4, #20]
 800b864:	2201      	movs	r2, #1
 800b866:	6122      	str	r2, [r4, #16]
 800b868:	3020      	adds	r0, #32
 800b86a:	e7e3      	b.n	800b834 <__d2b+0x60>
 800b86c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b870:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b874:	f8c9 0000 	str.w	r0, [r9]
 800b878:	6918      	ldr	r0, [r3, #16]
 800b87a:	f7ff fcaf 	bl	800b1dc <__hi0bits>
 800b87e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b882:	e7df      	b.n	800b844 <__d2b+0x70>
 800b884:	0800e2b8 	.word	0x0800e2b8
 800b888:	0800e344 	.word	0x0800e344

0800b88c <__ratio>:
 800b88c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b890:	4688      	mov	r8, r1
 800b892:	4669      	mov	r1, sp
 800b894:	4681      	mov	r9, r0
 800b896:	f7ff ff4d 	bl	800b734 <__b2d>
 800b89a:	a901      	add	r1, sp, #4
 800b89c:	4640      	mov	r0, r8
 800b89e:	ec55 4b10 	vmov	r4, r5, d0
 800b8a2:	f7ff ff47 	bl	800b734 <__b2d>
 800b8a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b8ae:	eba3 0c02 	sub.w	ip, r3, r2
 800b8b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b8b6:	1a9b      	subs	r3, r3, r2
 800b8b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b8bc:	ec51 0b10 	vmov	r0, r1, d0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	bfd6      	itet	le
 800b8c4:	460a      	movle	r2, r1
 800b8c6:	462a      	movgt	r2, r5
 800b8c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b8cc:	468b      	mov	fp, r1
 800b8ce:	462f      	mov	r7, r5
 800b8d0:	bfd4      	ite	le
 800b8d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b8d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b8da:	4620      	mov	r0, r4
 800b8dc:	ee10 2a10 	vmov	r2, s0
 800b8e0:	465b      	mov	r3, fp
 800b8e2:	4639      	mov	r1, r7
 800b8e4:	f7f4 ffba 	bl	800085c <__aeabi_ddiv>
 800b8e8:	ec41 0b10 	vmov	d0, r0, r1
 800b8ec:	b003      	add	sp, #12
 800b8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b8f2 <__copybits>:
 800b8f2:	3901      	subs	r1, #1
 800b8f4:	b570      	push	{r4, r5, r6, lr}
 800b8f6:	1149      	asrs	r1, r1, #5
 800b8f8:	6914      	ldr	r4, [r2, #16]
 800b8fa:	3101      	adds	r1, #1
 800b8fc:	f102 0314 	add.w	r3, r2, #20
 800b900:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b904:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b908:	1f05      	subs	r5, r0, #4
 800b90a:	42a3      	cmp	r3, r4
 800b90c:	d30c      	bcc.n	800b928 <__copybits+0x36>
 800b90e:	1aa3      	subs	r3, r4, r2
 800b910:	3b11      	subs	r3, #17
 800b912:	f023 0303 	bic.w	r3, r3, #3
 800b916:	3211      	adds	r2, #17
 800b918:	42a2      	cmp	r2, r4
 800b91a:	bf88      	it	hi
 800b91c:	2300      	movhi	r3, #0
 800b91e:	4418      	add	r0, r3
 800b920:	2300      	movs	r3, #0
 800b922:	4288      	cmp	r0, r1
 800b924:	d305      	bcc.n	800b932 <__copybits+0x40>
 800b926:	bd70      	pop	{r4, r5, r6, pc}
 800b928:	f853 6b04 	ldr.w	r6, [r3], #4
 800b92c:	f845 6f04 	str.w	r6, [r5, #4]!
 800b930:	e7eb      	b.n	800b90a <__copybits+0x18>
 800b932:	f840 3b04 	str.w	r3, [r0], #4
 800b936:	e7f4      	b.n	800b922 <__copybits+0x30>

0800b938 <__any_on>:
 800b938:	f100 0214 	add.w	r2, r0, #20
 800b93c:	6900      	ldr	r0, [r0, #16]
 800b93e:	114b      	asrs	r3, r1, #5
 800b940:	4298      	cmp	r0, r3
 800b942:	b510      	push	{r4, lr}
 800b944:	db11      	blt.n	800b96a <__any_on+0x32>
 800b946:	dd0a      	ble.n	800b95e <__any_on+0x26>
 800b948:	f011 011f 	ands.w	r1, r1, #31
 800b94c:	d007      	beq.n	800b95e <__any_on+0x26>
 800b94e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b952:	fa24 f001 	lsr.w	r0, r4, r1
 800b956:	fa00 f101 	lsl.w	r1, r0, r1
 800b95a:	428c      	cmp	r4, r1
 800b95c:	d10b      	bne.n	800b976 <__any_on+0x3e>
 800b95e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b962:	4293      	cmp	r3, r2
 800b964:	d803      	bhi.n	800b96e <__any_on+0x36>
 800b966:	2000      	movs	r0, #0
 800b968:	bd10      	pop	{r4, pc}
 800b96a:	4603      	mov	r3, r0
 800b96c:	e7f7      	b.n	800b95e <__any_on+0x26>
 800b96e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b972:	2900      	cmp	r1, #0
 800b974:	d0f5      	beq.n	800b962 <__any_on+0x2a>
 800b976:	2001      	movs	r0, #1
 800b978:	e7f6      	b.n	800b968 <__any_on+0x30>

0800b97a <_calloc_r>:
 800b97a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b97c:	fba1 2402 	umull	r2, r4, r1, r2
 800b980:	b94c      	cbnz	r4, 800b996 <_calloc_r+0x1c>
 800b982:	4611      	mov	r1, r2
 800b984:	9201      	str	r2, [sp, #4]
 800b986:	f000 f87b 	bl	800ba80 <_malloc_r>
 800b98a:	9a01      	ldr	r2, [sp, #4]
 800b98c:	4605      	mov	r5, r0
 800b98e:	b930      	cbnz	r0, 800b99e <_calloc_r+0x24>
 800b990:	4628      	mov	r0, r5
 800b992:	b003      	add	sp, #12
 800b994:	bd30      	pop	{r4, r5, pc}
 800b996:	220c      	movs	r2, #12
 800b998:	6002      	str	r2, [r0, #0]
 800b99a:	2500      	movs	r5, #0
 800b99c:	e7f8      	b.n	800b990 <_calloc_r+0x16>
 800b99e:	4621      	mov	r1, r4
 800b9a0:	f7fc fbce 	bl	8008140 <memset>
 800b9a4:	e7f4      	b.n	800b990 <_calloc_r+0x16>
	...

0800b9a8 <_free_r>:
 800b9a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9aa:	2900      	cmp	r1, #0
 800b9ac:	d044      	beq.n	800ba38 <_free_r+0x90>
 800b9ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9b2:	9001      	str	r0, [sp, #4]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f1a1 0404 	sub.w	r4, r1, #4
 800b9ba:	bfb8      	it	lt
 800b9bc:	18e4      	addlt	r4, r4, r3
 800b9be:	f000 fab3 	bl	800bf28 <__malloc_lock>
 800b9c2:	4a1e      	ldr	r2, [pc, #120]	; (800ba3c <_free_r+0x94>)
 800b9c4:	9801      	ldr	r0, [sp, #4]
 800b9c6:	6813      	ldr	r3, [r2, #0]
 800b9c8:	b933      	cbnz	r3, 800b9d8 <_free_r+0x30>
 800b9ca:	6063      	str	r3, [r4, #4]
 800b9cc:	6014      	str	r4, [r2, #0]
 800b9ce:	b003      	add	sp, #12
 800b9d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9d4:	f000 baae 	b.w	800bf34 <__malloc_unlock>
 800b9d8:	42a3      	cmp	r3, r4
 800b9da:	d908      	bls.n	800b9ee <_free_r+0x46>
 800b9dc:	6825      	ldr	r5, [r4, #0]
 800b9de:	1961      	adds	r1, r4, r5
 800b9e0:	428b      	cmp	r3, r1
 800b9e2:	bf01      	itttt	eq
 800b9e4:	6819      	ldreq	r1, [r3, #0]
 800b9e6:	685b      	ldreq	r3, [r3, #4]
 800b9e8:	1949      	addeq	r1, r1, r5
 800b9ea:	6021      	streq	r1, [r4, #0]
 800b9ec:	e7ed      	b.n	800b9ca <_free_r+0x22>
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	b10b      	cbz	r3, 800b9f8 <_free_r+0x50>
 800b9f4:	42a3      	cmp	r3, r4
 800b9f6:	d9fa      	bls.n	800b9ee <_free_r+0x46>
 800b9f8:	6811      	ldr	r1, [r2, #0]
 800b9fa:	1855      	adds	r5, r2, r1
 800b9fc:	42a5      	cmp	r5, r4
 800b9fe:	d10b      	bne.n	800ba18 <_free_r+0x70>
 800ba00:	6824      	ldr	r4, [r4, #0]
 800ba02:	4421      	add	r1, r4
 800ba04:	1854      	adds	r4, r2, r1
 800ba06:	42a3      	cmp	r3, r4
 800ba08:	6011      	str	r1, [r2, #0]
 800ba0a:	d1e0      	bne.n	800b9ce <_free_r+0x26>
 800ba0c:	681c      	ldr	r4, [r3, #0]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	6053      	str	r3, [r2, #4]
 800ba12:	4421      	add	r1, r4
 800ba14:	6011      	str	r1, [r2, #0]
 800ba16:	e7da      	b.n	800b9ce <_free_r+0x26>
 800ba18:	d902      	bls.n	800ba20 <_free_r+0x78>
 800ba1a:	230c      	movs	r3, #12
 800ba1c:	6003      	str	r3, [r0, #0]
 800ba1e:	e7d6      	b.n	800b9ce <_free_r+0x26>
 800ba20:	6825      	ldr	r5, [r4, #0]
 800ba22:	1961      	adds	r1, r4, r5
 800ba24:	428b      	cmp	r3, r1
 800ba26:	bf04      	itt	eq
 800ba28:	6819      	ldreq	r1, [r3, #0]
 800ba2a:	685b      	ldreq	r3, [r3, #4]
 800ba2c:	6063      	str	r3, [r4, #4]
 800ba2e:	bf04      	itt	eq
 800ba30:	1949      	addeq	r1, r1, r5
 800ba32:	6021      	streq	r1, [r4, #0]
 800ba34:	6054      	str	r4, [r2, #4]
 800ba36:	e7ca      	b.n	800b9ce <_free_r+0x26>
 800ba38:	b003      	add	sp, #12
 800ba3a:	bd30      	pop	{r4, r5, pc}
 800ba3c:	20000ecc 	.word	0x20000ecc

0800ba40 <sbrk_aligned>:
 800ba40:	b570      	push	{r4, r5, r6, lr}
 800ba42:	4e0e      	ldr	r6, [pc, #56]	; (800ba7c <sbrk_aligned+0x3c>)
 800ba44:	460c      	mov	r4, r1
 800ba46:	6831      	ldr	r1, [r6, #0]
 800ba48:	4605      	mov	r5, r0
 800ba4a:	b911      	cbnz	r1, 800ba52 <sbrk_aligned+0x12>
 800ba4c:	f000 f9f0 	bl	800be30 <_sbrk_r>
 800ba50:	6030      	str	r0, [r6, #0]
 800ba52:	4621      	mov	r1, r4
 800ba54:	4628      	mov	r0, r5
 800ba56:	f000 f9eb 	bl	800be30 <_sbrk_r>
 800ba5a:	1c43      	adds	r3, r0, #1
 800ba5c:	d00a      	beq.n	800ba74 <sbrk_aligned+0x34>
 800ba5e:	1cc4      	adds	r4, r0, #3
 800ba60:	f024 0403 	bic.w	r4, r4, #3
 800ba64:	42a0      	cmp	r0, r4
 800ba66:	d007      	beq.n	800ba78 <sbrk_aligned+0x38>
 800ba68:	1a21      	subs	r1, r4, r0
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	f000 f9e0 	bl	800be30 <_sbrk_r>
 800ba70:	3001      	adds	r0, #1
 800ba72:	d101      	bne.n	800ba78 <sbrk_aligned+0x38>
 800ba74:	f04f 34ff 	mov.w	r4, #4294967295
 800ba78:	4620      	mov	r0, r4
 800ba7a:	bd70      	pop	{r4, r5, r6, pc}
 800ba7c:	20000ed0 	.word	0x20000ed0

0800ba80 <_malloc_r>:
 800ba80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba84:	1ccd      	adds	r5, r1, #3
 800ba86:	f025 0503 	bic.w	r5, r5, #3
 800ba8a:	3508      	adds	r5, #8
 800ba8c:	2d0c      	cmp	r5, #12
 800ba8e:	bf38      	it	cc
 800ba90:	250c      	movcc	r5, #12
 800ba92:	2d00      	cmp	r5, #0
 800ba94:	4607      	mov	r7, r0
 800ba96:	db01      	blt.n	800ba9c <_malloc_r+0x1c>
 800ba98:	42a9      	cmp	r1, r5
 800ba9a:	d905      	bls.n	800baa8 <_malloc_r+0x28>
 800ba9c:	230c      	movs	r3, #12
 800ba9e:	603b      	str	r3, [r7, #0]
 800baa0:	2600      	movs	r6, #0
 800baa2:	4630      	mov	r0, r6
 800baa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa8:	4e2e      	ldr	r6, [pc, #184]	; (800bb64 <_malloc_r+0xe4>)
 800baaa:	f000 fa3d 	bl	800bf28 <__malloc_lock>
 800baae:	6833      	ldr	r3, [r6, #0]
 800bab0:	461c      	mov	r4, r3
 800bab2:	bb34      	cbnz	r4, 800bb02 <_malloc_r+0x82>
 800bab4:	4629      	mov	r1, r5
 800bab6:	4638      	mov	r0, r7
 800bab8:	f7ff ffc2 	bl	800ba40 <sbrk_aligned>
 800babc:	1c43      	adds	r3, r0, #1
 800babe:	4604      	mov	r4, r0
 800bac0:	d14d      	bne.n	800bb5e <_malloc_r+0xde>
 800bac2:	6834      	ldr	r4, [r6, #0]
 800bac4:	4626      	mov	r6, r4
 800bac6:	2e00      	cmp	r6, #0
 800bac8:	d140      	bne.n	800bb4c <_malloc_r+0xcc>
 800baca:	6823      	ldr	r3, [r4, #0]
 800bacc:	4631      	mov	r1, r6
 800bace:	4638      	mov	r0, r7
 800bad0:	eb04 0803 	add.w	r8, r4, r3
 800bad4:	f000 f9ac 	bl	800be30 <_sbrk_r>
 800bad8:	4580      	cmp	r8, r0
 800bada:	d13a      	bne.n	800bb52 <_malloc_r+0xd2>
 800badc:	6821      	ldr	r1, [r4, #0]
 800bade:	3503      	adds	r5, #3
 800bae0:	1a6d      	subs	r5, r5, r1
 800bae2:	f025 0503 	bic.w	r5, r5, #3
 800bae6:	3508      	adds	r5, #8
 800bae8:	2d0c      	cmp	r5, #12
 800baea:	bf38      	it	cc
 800baec:	250c      	movcc	r5, #12
 800baee:	4629      	mov	r1, r5
 800baf0:	4638      	mov	r0, r7
 800baf2:	f7ff ffa5 	bl	800ba40 <sbrk_aligned>
 800baf6:	3001      	adds	r0, #1
 800baf8:	d02b      	beq.n	800bb52 <_malloc_r+0xd2>
 800bafa:	6823      	ldr	r3, [r4, #0]
 800bafc:	442b      	add	r3, r5
 800bafe:	6023      	str	r3, [r4, #0]
 800bb00:	e00e      	b.n	800bb20 <_malloc_r+0xa0>
 800bb02:	6822      	ldr	r2, [r4, #0]
 800bb04:	1b52      	subs	r2, r2, r5
 800bb06:	d41e      	bmi.n	800bb46 <_malloc_r+0xc6>
 800bb08:	2a0b      	cmp	r2, #11
 800bb0a:	d916      	bls.n	800bb3a <_malloc_r+0xba>
 800bb0c:	1961      	adds	r1, r4, r5
 800bb0e:	42a3      	cmp	r3, r4
 800bb10:	6025      	str	r5, [r4, #0]
 800bb12:	bf18      	it	ne
 800bb14:	6059      	strne	r1, [r3, #4]
 800bb16:	6863      	ldr	r3, [r4, #4]
 800bb18:	bf08      	it	eq
 800bb1a:	6031      	streq	r1, [r6, #0]
 800bb1c:	5162      	str	r2, [r4, r5]
 800bb1e:	604b      	str	r3, [r1, #4]
 800bb20:	4638      	mov	r0, r7
 800bb22:	f104 060b 	add.w	r6, r4, #11
 800bb26:	f000 fa05 	bl	800bf34 <__malloc_unlock>
 800bb2a:	f026 0607 	bic.w	r6, r6, #7
 800bb2e:	1d23      	adds	r3, r4, #4
 800bb30:	1af2      	subs	r2, r6, r3
 800bb32:	d0b6      	beq.n	800baa2 <_malloc_r+0x22>
 800bb34:	1b9b      	subs	r3, r3, r6
 800bb36:	50a3      	str	r3, [r4, r2]
 800bb38:	e7b3      	b.n	800baa2 <_malloc_r+0x22>
 800bb3a:	6862      	ldr	r2, [r4, #4]
 800bb3c:	42a3      	cmp	r3, r4
 800bb3e:	bf0c      	ite	eq
 800bb40:	6032      	streq	r2, [r6, #0]
 800bb42:	605a      	strne	r2, [r3, #4]
 800bb44:	e7ec      	b.n	800bb20 <_malloc_r+0xa0>
 800bb46:	4623      	mov	r3, r4
 800bb48:	6864      	ldr	r4, [r4, #4]
 800bb4a:	e7b2      	b.n	800bab2 <_malloc_r+0x32>
 800bb4c:	4634      	mov	r4, r6
 800bb4e:	6876      	ldr	r6, [r6, #4]
 800bb50:	e7b9      	b.n	800bac6 <_malloc_r+0x46>
 800bb52:	230c      	movs	r3, #12
 800bb54:	603b      	str	r3, [r7, #0]
 800bb56:	4638      	mov	r0, r7
 800bb58:	f000 f9ec 	bl	800bf34 <__malloc_unlock>
 800bb5c:	e7a1      	b.n	800baa2 <_malloc_r+0x22>
 800bb5e:	6025      	str	r5, [r4, #0]
 800bb60:	e7de      	b.n	800bb20 <_malloc_r+0xa0>
 800bb62:	bf00      	nop
 800bb64:	20000ecc 	.word	0x20000ecc

0800bb68 <__ssputs_r>:
 800bb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb6c:	688e      	ldr	r6, [r1, #8]
 800bb6e:	429e      	cmp	r6, r3
 800bb70:	4682      	mov	sl, r0
 800bb72:	460c      	mov	r4, r1
 800bb74:	4690      	mov	r8, r2
 800bb76:	461f      	mov	r7, r3
 800bb78:	d838      	bhi.n	800bbec <__ssputs_r+0x84>
 800bb7a:	898a      	ldrh	r2, [r1, #12]
 800bb7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb80:	d032      	beq.n	800bbe8 <__ssputs_r+0x80>
 800bb82:	6825      	ldr	r5, [r4, #0]
 800bb84:	6909      	ldr	r1, [r1, #16]
 800bb86:	eba5 0901 	sub.w	r9, r5, r1
 800bb8a:	6965      	ldr	r5, [r4, #20]
 800bb8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb94:	3301      	adds	r3, #1
 800bb96:	444b      	add	r3, r9
 800bb98:	106d      	asrs	r5, r5, #1
 800bb9a:	429d      	cmp	r5, r3
 800bb9c:	bf38      	it	cc
 800bb9e:	461d      	movcc	r5, r3
 800bba0:	0553      	lsls	r3, r2, #21
 800bba2:	d531      	bpl.n	800bc08 <__ssputs_r+0xa0>
 800bba4:	4629      	mov	r1, r5
 800bba6:	f7ff ff6b 	bl	800ba80 <_malloc_r>
 800bbaa:	4606      	mov	r6, r0
 800bbac:	b950      	cbnz	r0, 800bbc4 <__ssputs_r+0x5c>
 800bbae:	230c      	movs	r3, #12
 800bbb0:	f8ca 3000 	str.w	r3, [sl]
 800bbb4:	89a3      	ldrh	r3, [r4, #12]
 800bbb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbba:	81a3      	strh	r3, [r4, #12]
 800bbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbc4:	6921      	ldr	r1, [r4, #16]
 800bbc6:	464a      	mov	r2, r9
 800bbc8:	f7fc faac 	bl	8008124 <memcpy>
 800bbcc:	89a3      	ldrh	r3, [r4, #12]
 800bbce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bbd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbd6:	81a3      	strh	r3, [r4, #12]
 800bbd8:	6126      	str	r6, [r4, #16]
 800bbda:	6165      	str	r5, [r4, #20]
 800bbdc:	444e      	add	r6, r9
 800bbde:	eba5 0509 	sub.w	r5, r5, r9
 800bbe2:	6026      	str	r6, [r4, #0]
 800bbe4:	60a5      	str	r5, [r4, #8]
 800bbe6:	463e      	mov	r6, r7
 800bbe8:	42be      	cmp	r6, r7
 800bbea:	d900      	bls.n	800bbee <__ssputs_r+0x86>
 800bbec:	463e      	mov	r6, r7
 800bbee:	6820      	ldr	r0, [r4, #0]
 800bbf0:	4632      	mov	r2, r6
 800bbf2:	4641      	mov	r1, r8
 800bbf4:	f000 f97e 	bl	800bef4 <memmove>
 800bbf8:	68a3      	ldr	r3, [r4, #8]
 800bbfa:	1b9b      	subs	r3, r3, r6
 800bbfc:	60a3      	str	r3, [r4, #8]
 800bbfe:	6823      	ldr	r3, [r4, #0]
 800bc00:	4433      	add	r3, r6
 800bc02:	6023      	str	r3, [r4, #0]
 800bc04:	2000      	movs	r0, #0
 800bc06:	e7db      	b.n	800bbc0 <__ssputs_r+0x58>
 800bc08:	462a      	mov	r2, r5
 800bc0a:	f000 f999 	bl	800bf40 <_realloc_r>
 800bc0e:	4606      	mov	r6, r0
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d1e1      	bne.n	800bbd8 <__ssputs_r+0x70>
 800bc14:	6921      	ldr	r1, [r4, #16]
 800bc16:	4650      	mov	r0, sl
 800bc18:	f7ff fec6 	bl	800b9a8 <_free_r>
 800bc1c:	e7c7      	b.n	800bbae <__ssputs_r+0x46>
	...

0800bc20 <_svfiprintf_r>:
 800bc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc24:	4698      	mov	r8, r3
 800bc26:	898b      	ldrh	r3, [r1, #12]
 800bc28:	061b      	lsls	r3, r3, #24
 800bc2a:	b09d      	sub	sp, #116	; 0x74
 800bc2c:	4607      	mov	r7, r0
 800bc2e:	460d      	mov	r5, r1
 800bc30:	4614      	mov	r4, r2
 800bc32:	d50e      	bpl.n	800bc52 <_svfiprintf_r+0x32>
 800bc34:	690b      	ldr	r3, [r1, #16]
 800bc36:	b963      	cbnz	r3, 800bc52 <_svfiprintf_r+0x32>
 800bc38:	2140      	movs	r1, #64	; 0x40
 800bc3a:	f7ff ff21 	bl	800ba80 <_malloc_r>
 800bc3e:	6028      	str	r0, [r5, #0]
 800bc40:	6128      	str	r0, [r5, #16]
 800bc42:	b920      	cbnz	r0, 800bc4e <_svfiprintf_r+0x2e>
 800bc44:	230c      	movs	r3, #12
 800bc46:	603b      	str	r3, [r7, #0]
 800bc48:	f04f 30ff 	mov.w	r0, #4294967295
 800bc4c:	e0d1      	b.n	800bdf2 <_svfiprintf_r+0x1d2>
 800bc4e:	2340      	movs	r3, #64	; 0x40
 800bc50:	616b      	str	r3, [r5, #20]
 800bc52:	2300      	movs	r3, #0
 800bc54:	9309      	str	r3, [sp, #36]	; 0x24
 800bc56:	2320      	movs	r3, #32
 800bc58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc60:	2330      	movs	r3, #48	; 0x30
 800bc62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800be0c <_svfiprintf_r+0x1ec>
 800bc66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc6a:	f04f 0901 	mov.w	r9, #1
 800bc6e:	4623      	mov	r3, r4
 800bc70:	469a      	mov	sl, r3
 800bc72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc76:	b10a      	cbz	r2, 800bc7c <_svfiprintf_r+0x5c>
 800bc78:	2a25      	cmp	r2, #37	; 0x25
 800bc7a:	d1f9      	bne.n	800bc70 <_svfiprintf_r+0x50>
 800bc7c:	ebba 0b04 	subs.w	fp, sl, r4
 800bc80:	d00b      	beq.n	800bc9a <_svfiprintf_r+0x7a>
 800bc82:	465b      	mov	r3, fp
 800bc84:	4622      	mov	r2, r4
 800bc86:	4629      	mov	r1, r5
 800bc88:	4638      	mov	r0, r7
 800bc8a:	f7ff ff6d 	bl	800bb68 <__ssputs_r>
 800bc8e:	3001      	adds	r0, #1
 800bc90:	f000 80aa 	beq.w	800bde8 <_svfiprintf_r+0x1c8>
 800bc94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc96:	445a      	add	r2, fp
 800bc98:	9209      	str	r2, [sp, #36]	; 0x24
 800bc9a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f000 80a2 	beq.w	800bde8 <_svfiprintf_r+0x1c8>
 800bca4:	2300      	movs	r3, #0
 800bca6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcae:	f10a 0a01 	add.w	sl, sl, #1
 800bcb2:	9304      	str	r3, [sp, #16]
 800bcb4:	9307      	str	r3, [sp, #28]
 800bcb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcba:	931a      	str	r3, [sp, #104]	; 0x68
 800bcbc:	4654      	mov	r4, sl
 800bcbe:	2205      	movs	r2, #5
 800bcc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcc4:	4851      	ldr	r0, [pc, #324]	; (800be0c <_svfiprintf_r+0x1ec>)
 800bcc6:	f7f4 fa93 	bl	80001f0 <memchr>
 800bcca:	9a04      	ldr	r2, [sp, #16]
 800bccc:	b9d8      	cbnz	r0, 800bd06 <_svfiprintf_r+0xe6>
 800bcce:	06d0      	lsls	r0, r2, #27
 800bcd0:	bf44      	itt	mi
 800bcd2:	2320      	movmi	r3, #32
 800bcd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcd8:	0711      	lsls	r1, r2, #28
 800bcda:	bf44      	itt	mi
 800bcdc:	232b      	movmi	r3, #43	; 0x2b
 800bcde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bce2:	f89a 3000 	ldrb.w	r3, [sl]
 800bce6:	2b2a      	cmp	r3, #42	; 0x2a
 800bce8:	d015      	beq.n	800bd16 <_svfiprintf_r+0xf6>
 800bcea:	9a07      	ldr	r2, [sp, #28]
 800bcec:	4654      	mov	r4, sl
 800bcee:	2000      	movs	r0, #0
 800bcf0:	f04f 0c0a 	mov.w	ip, #10
 800bcf4:	4621      	mov	r1, r4
 800bcf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcfa:	3b30      	subs	r3, #48	; 0x30
 800bcfc:	2b09      	cmp	r3, #9
 800bcfe:	d94e      	bls.n	800bd9e <_svfiprintf_r+0x17e>
 800bd00:	b1b0      	cbz	r0, 800bd30 <_svfiprintf_r+0x110>
 800bd02:	9207      	str	r2, [sp, #28]
 800bd04:	e014      	b.n	800bd30 <_svfiprintf_r+0x110>
 800bd06:	eba0 0308 	sub.w	r3, r0, r8
 800bd0a:	fa09 f303 	lsl.w	r3, r9, r3
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	9304      	str	r3, [sp, #16]
 800bd12:	46a2      	mov	sl, r4
 800bd14:	e7d2      	b.n	800bcbc <_svfiprintf_r+0x9c>
 800bd16:	9b03      	ldr	r3, [sp, #12]
 800bd18:	1d19      	adds	r1, r3, #4
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	9103      	str	r1, [sp, #12]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	bfbb      	ittet	lt
 800bd22:	425b      	neglt	r3, r3
 800bd24:	f042 0202 	orrlt.w	r2, r2, #2
 800bd28:	9307      	strge	r3, [sp, #28]
 800bd2a:	9307      	strlt	r3, [sp, #28]
 800bd2c:	bfb8      	it	lt
 800bd2e:	9204      	strlt	r2, [sp, #16]
 800bd30:	7823      	ldrb	r3, [r4, #0]
 800bd32:	2b2e      	cmp	r3, #46	; 0x2e
 800bd34:	d10c      	bne.n	800bd50 <_svfiprintf_r+0x130>
 800bd36:	7863      	ldrb	r3, [r4, #1]
 800bd38:	2b2a      	cmp	r3, #42	; 0x2a
 800bd3a:	d135      	bne.n	800bda8 <_svfiprintf_r+0x188>
 800bd3c:	9b03      	ldr	r3, [sp, #12]
 800bd3e:	1d1a      	adds	r2, r3, #4
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	9203      	str	r2, [sp, #12]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	bfb8      	it	lt
 800bd48:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd4c:	3402      	adds	r4, #2
 800bd4e:	9305      	str	r3, [sp, #20]
 800bd50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800be1c <_svfiprintf_r+0x1fc>
 800bd54:	7821      	ldrb	r1, [r4, #0]
 800bd56:	2203      	movs	r2, #3
 800bd58:	4650      	mov	r0, sl
 800bd5a:	f7f4 fa49 	bl	80001f0 <memchr>
 800bd5e:	b140      	cbz	r0, 800bd72 <_svfiprintf_r+0x152>
 800bd60:	2340      	movs	r3, #64	; 0x40
 800bd62:	eba0 000a 	sub.w	r0, r0, sl
 800bd66:	fa03 f000 	lsl.w	r0, r3, r0
 800bd6a:	9b04      	ldr	r3, [sp, #16]
 800bd6c:	4303      	orrs	r3, r0
 800bd6e:	3401      	adds	r4, #1
 800bd70:	9304      	str	r3, [sp, #16]
 800bd72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd76:	4826      	ldr	r0, [pc, #152]	; (800be10 <_svfiprintf_r+0x1f0>)
 800bd78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd7c:	2206      	movs	r2, #6
 800bd7e:	f7f4 fa37 	bl	80001f0 <memchr>
 800bd82:	2800      	cmp	r0, #0
 800bd84:	d038      	beq.n	800bdf8 <_svfiprintf_r+0x1d8>
 800bd86:	4b23      	ldr	r3, [pc, #140]	; (800be14 <_svfiprintf_r+0x1f4>)
 800bd88:	bb1b      	cbnz	r3, 800bdd2 <_svfiprintf_r+0x1b2>
 800bd8a:	9b03      	ldr	r3, [sp, #12]
 800bd8c:	3307      	adds	r3, #7
 800bd8e:	f023 0307 	bic.w	r3, r3, #7
 800bd92:	3308      	adds	r3, #8
 800bd94:	9303      	str	r3, [sp, #12]
 800bd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd98:	4433      	add	r3, r6
 800bd9a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd9c:	e767      	b.n	800bc6e <_svfiprintf_r+0x4e>
 800bd9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bda2:	460c      	mov	r4, r1
 800bda4:	2001      	movs	r0, #1
 800bda6:	e7a5      	b.n	800bcf4 <_svfiprintf_r+0xd4>
 800bda8:	2300      	movs	r3, #0
 800bdaa:	3401      	adds	r4, #1
 800bdac:	9305      	str	r3, [sp, #20]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	f04f 0c0a 	mov.w	ip, #10
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdba:	3a30      	subs	r2, #48	; 0x30
 800bdbc:	2a09      	cmp	r2, #9
 800bdbe:	d903      	bls.n	800bdc8 <_svfiprintf_r+0x1a8>
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d0c5      	beq.n	800bd50 <_svfiprintf_r+0x130>
 800bdc4:	9105      	str	r1, [sp, #20]
 800bdc6:	e7c3      	b.n	800bd50 <_svfiprintf_r+0x130>
 800bdc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdcc:	4604      	mov	r4, r0
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e7f0      	b.n	800bdb4 <_svfiprintf_r+0x194>
 800bdd2:	ab03      	add	r3, sp, #12
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	462a      	mov	r2, r5
 800bdd8:	4b0f      	ldr	r3, [pc, #60]	; (800be18 <_svfiprintf_r+0x1f8>)
 800bdda:	a904      	add	r1, sp, #16
 800bddc:	4638      	mov	r0, r7
 800bdde:	f7fc fa57 	bl	8008290 <_printf_float>
 800bde2:	1c42      	adds	r2, r0, #1
 800bde4:	4606      	mov	r6, r0
 800bde6:	d1d6      	bne.n	800bd96 <_svfiprintf_r+0x176>
 800bde8:	89ab      	ldrh	r3, [r5, #12]
 800bdea:	065b      	lsls	r3, r3, #25
 800bdec:	f53f af2c 	bmi.w	800bc48 <_svfiprintf_r+0x28>
 800bdf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdf2:	b01d      	add	sp, #116	; 0x74
 800bdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf8:	ab03      	add	r3, sp, #12
 800bdfa:	9300      	str	r3, [sp, #0]
 800bdfc:	462a      	mov	r2, r5
 800bdfe:	4b06      	ldr	r3, [pc, #24]	; (800be18 <_svfiprintf_r+0x1f8>)
 800be00:	a904      	add	r1, sp, #16
 800be02:	4638      	mov	r0, r7
 800be04:	f7fc fce8 	bl	80087d8 <_printf_i>
 800be08:	e7eb      	b.n	800bde2 <_svfiprintf_r+0x1c2>
 800be0a:	bf00      	nop
 800be0c:	0800e49c 	.word	0x0800e49c
 800be10:	0800e4a6 	.word	0x0800e4a6
 800be14:	08008291 	.word	0x08008291
 800be18:	0800bb69 	.word	0x0800bb69
 800be1c:	0800e4a2 	.word	0x0800e4a2

0800be20 <nan>:
 800be20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800be28 <nan+0x8>
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	00000000 	.word	0x00000000
 800be2c:	7ff80000 	.word	0x7ff80000

0800be30 <_sbrk_r>:
 800be30:	b538      	push	{r3, r4, r5, lr}
 800be32:	4d06      	ldr	r5, [pc, #24]	; (800be4c <_sbrk_r+0x1c>)
 800be34:	2300      	movs	r3, #0
 800be36:	4604      	mov	r4, r0
 800be38:	4608      	mov	r0, r1
 800be3a:	602b      	str	r3, [r5, #0]
 800be3c:	f7f6 fde2 	bl	8002a04 <_sbrk>
 800be40:	1c43      	adds	r3, r0, #1
 800be42:	d102      	bne.n	800be4a <_sbrk_r+0x1a>
 800be44:	682b      	ldr	r3, [r5, #0]
 800be46:	b103      	cbz	r3, 800be4a <_sbrk_r+0x1a>
 800be48:	6023      	str	r3, [r4, #0]
 800be4a:	bd38      	pop	{r3, r4, r5, pc}
 800be4c:	20000ed4 	.word	0x20000ed4

0800be50 <strncmp>:
 800be50:	b510      	push	{r4, lr}
 800be52:	b17a      	cbz	r2, 800be74 <strncmp+0x24>
 800be54:	4603      	mov	r3, r0
 800be56:	3901      	subs	r1, #1
 800be58:	1884      	adds	r4, r0, r2
 800be5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800be5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800be62:	4290      	cmp	r0, r2
 800be64:	d101      	bne.n	800be6a <strncmp+0x1a>
 800be66:	42a3      	cmp	r3, r4
 800be68:	d101      	bne.n	800be6e <strncmp+0x1e>
 800be6a:	1a80      	subs	r0, r0, r2
 800be6c:	bd10      	pop	{r4, pc}
 800be6e:	2800      	cmp	r0, #0
 800be70:	d1f3      	bne.n	800be5a <strncmp+0xa>
 800be72:	e7fa      	b.n	800be6a <strncmp+0x1a>
 800be74:	4610      	mov	r0, r2
 800be76:	e7f9      	b.n	800be6c <strncmp+0x1c>

0800be78 <__ascii_wctomb>:
 800be78:	b149      	cbz	r1, 800be8e <__ascii_wctomb+0x16>
 800be7a:	2aff      	cmp	r2, #255	; 0xff
 800be7c:	bf85      	ittet	hi
 800be7e:	238a      	movhi	r3, #138	; 0x8a
 800be80:	6003      	strhi	r3, [r0, #0]
 800be82:	700a      	strbls	r2, [r1, #0]
 800be84:	f04f 30ff 	movhi.w	r0, #4294967295
 800be88:	bf98      	it	ls
 800be8a:	2001      	movls	r0, #1
 800be8c:	4770      	bx	lr
 800be8e:	4608      	mov	r0, r1
 800be90:	4770      	bx	lr
	...

0800be94 <__assert_func>:
 800be94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be96:	4614      	mov	r4, r2
 800be98:	461a      	mov	r2, r3
 800be9a:	4b09      	ldr	r3, [pc, #36]	; (800bec0 <__assert_func+0x2c>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4605      	mov	r5, r0
 800bea0:	68d8      	ldr	r0, [r3, #12]
 800bea2:	b14c      	cbz	r4, 800beb8 <__assert_func+0x24>
 800bea4:	4b07      	ldr	r3, [pc, #28]	; (800bec4 <__assert_func+0x30>)
 800bea6:	9100      	str	r1, [sp, #0]
 800bea8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800beac:	4906      	ldr	r1, [pc, #24]	; (800bec8 <__assert_func+0x34>)
 800beae:	462b      	mov	r3, r5
 800beb0:	f000 f80e 	bl	800bed0 <fiprintf>
 800beb4:	f000 fa8c 	bl	800c3d0 <abort>
 800beb8:	4b04      	ldr	r3, [pc, #16]	; (800becc <__assert_func+0x38>)
 800beba:	461c      	mov	r4, r3
 800bebc:	e7f3      	b.n	800bea6 <__assert_func+0x12>
 800bebe:	bf00      	nop
 800bec0:	2000020c 	.word	0x2000020c
 800bec4:	0800e4ad 	.word	0x0800e4ad
 800bec8:	0800e4ba 	.word	0x0800e4ba
 800becc:	0800e4e8 	.word	0x0800e4e8

0800bed0 <fiprintf>:
 800bed0:	b40e      	push	{r1, r2, r3}
 800bed2:	b503      	push	{r0, r1, lr}
 800bed4:	4601      	mov	r1, r0
 800bed6:	ab03      	add	r3, sp, #12
 800bed8:	4805      	ldr	r0, [pc, #20]	; (800bef0 <fiprintf+0x20>)
 800beda:	f853 2b04 	ldr.w	r2, [r3], #4
 800bede:	6800      	ldr	r0, [r0, #0]
 800bee0:	9301      	str	r3, [sp, #4]
 800bee2:	f000 f885 	bl	800bff0 <_vfiprintf_r>
 800bee6:	b002      	add	sp, #8
 800bee8:	f85d eb04 	ldr.w	lr, [sp], #4
 800beec:	b003      	add	sp, #12
 800beee:	4770      	bx	lr
 800bef0:	2000020c 	.word	0x2000020c

0800bef4 <memmove>:
 800bef4:	4288      	cmp	r0, r1
 800bef6:	b510      	push	{r4, lr}
 800bef8:	eb01 0402 	add.w	r4, r1, r2
 800befc:	d902      	bls.n	800bf04 <memmove+0x10>
 800befe:	4284      	cmp	r4, r0
 800bf00:	4623      	mov	r3, r4
 800bf02:	d807      	bhi.n	800bf14 <memmove+0x20>
 800bf04:	1e43      	subs	r3, r0, #1
 800bf06:	42a1      	cmp	r1, r4
 800bf08:	d008      	beq.n	800bf1c <memmove+0x28>
 800bf0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf12:	e7f8      	b.n	800bf06 <memmove+0x12>
 800bf14:	4402      	add	r2, r0
 800bf16:	4601      	mov	r1, r0
 800bf18:	428a      	cmp	r2, r1
 800bf1a:	d100      	bne.n	800bf1e <memmove+0x2a>
 800bf1c:	bd10      	pop	{r4, pc}
 800bf1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf26:	e7f7      	b.n	800bf18 <memmove+0x24>

0800bf28 <__malloc_lock>:
 800bf28:	4801      	ldr	r0, [pc, #4]	; (800bf30 <__malloc_lock+0x8>)
 800bf2a:	f000 bc11 	b.w	800c750 <__retarget_lock_acquire_recursive>
 800bf2e:	bf00      	nop
 800bf30:	20000ed8 	.word	0x20000ed8

0800bf34 <__malloc_unlock>:
 800bf34:	4801      	ldr	r0, [pc, #4]	; (800bf3c <__malloc_unlock+0x8>)
 800bf36:	f000 bc0c 	b.w	800c752 <__retarget_lock_release_recursive>
 800bf3a:	bf00      	nop
 800bf3c:	20000ed8 	.word	0x20000ed8

0800bf40 <_realloc_r>:
 800bf40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf44:	4680      	mov	r8, r0
 800bf46:	4614      	mov	r4, r2
 800bf48:	460e      	mov	r6, r1
 800bf4a:	b921      	cbnz	r1, 800bf56 <_realloc_r+0x16>
 800bf4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf50:	4611      	mov	r1, r2
 800bf52:	f7ff bd95 	b.w	800ba80 <_malloc_r>
 800bf56:	b92a      	cbnz	r2, 800bf64 <_realloc_r+0x24>
 800bf58:	f7ff fd26 	bl	800b9a8 <_free_r>
 800bf5c:	4625      	mov	r5, r4
 800bf5e:	4628      	mov	r0, r5
 800bf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf64:	f000 fc5c 	bl	800c820 <_malloc_usable_size_r>
 800bf68:	4284      	cmp	r4, r0
 800bf6a:	4607      	mov	r7, r0
 800bf6c:	d802      	bhi.n	800bf74 <_realloc_r+0x34>
 800bf6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf72:	d812      	bhi.n	800bf9a <_realloc_r+0x5a>
 800bf74:	4621      	mov	r1, r4
 800bf76:	4640      	mov	r0, r8
 800bf78:	f7ff fd82 	bl	800ba80 <_malloc_r>
 800bf7c:	4605      	mov	r5, r0
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d0ed      	beq.n	800bf5e <_realloc_r+0x1e>
 800bf82:	42bc      	cmp	r4, r7
 800bf84:	4622      	mov	r2, r4
 800bf86:	4631      	mov	r1, r6
 800bf88:	bf28      	it	cs
 800bf8a:	463a      	movcs	r2, r7
 800bf8c:	f7fc f8ca 	bl	8008124 <memcpy>
 800bf90:	4631      	mov	r1, r6
 800bf92:	4640      	mov	r0, r8
 800bf94:	f7ff fd08 	bl	800b9a8 <_free_r>
 800bf98:	e7e1      	b.n	800bf5e <_realloc_r+0x1e>
 800bf9a:	4635      	mov	r5, r6
 800bf9c:	e7df      	b.n	800bf5e <_realloc_r+0x1e>

0800bf9e <__sfputc_r>:
 800bf9e:	6893      	ldr	r3, [r2, #8]
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	b410      	push	{r4}
 800bfa6:	6093      	str	r3, [r2, #8]
 800bfa8:	da08      	bge.n	800bfbc <__sfputc_r+0x1e>
 800bfaa:	6994      	ldr	r4, [r2, #24]
 800bfac:	42a3      	cmp	r3, r4
 800bfae:	db01      	blt.n	800bfb4 <__sfputc_r+0x16>
 800bfb0:	290a      	cmp	r1, #10
 800bfb2:	d103      	bne.n	800bfbc <__sfputc_r+0x1e>
 800bfb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfb8:	f000 b94a 	b.w	800c250 <__swbuf_r>
 800bfbc:	6813      	ldr	r3, [r2, #0]
 800bfbe:	1c58      	adds	r0, r3, #1
 800bfc0:	6010      	str	r0, [r2, #0]
 800bfc2:	7019      	strb	r1, [r3, #0]
 800bfc4:	4608      	mov	r0, r1
 800bfc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <__sfputs_r>:
 800bfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfce:	4606      	mov	r6, r0
 800bfd0:	460f      	mov	r7, r1
 800bfd2:	4614      	mov	r4, r2
 800bfd4:	18d5      	adds	r5, r2, r3
 800bfd6:	42ac      	cmp	r4, r5
 800bfd8:	d101      	bne.n	800bfde <__sfputs_r+0x12>
 800bfda:	2000      	movs	r0, #0
 800bfdc:	e007      	b.n	800bfee <__sfputs_r+0x22>
 800bfde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfe2:	463a      	mov	r2, r7
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	f7ff ffda 	bl	800bf9e <__sfputc_r>
 800bfea:	1c43      	adds	r3, r0, #1
 800bfec:	d1f3      	bne.n	800bfd6 <__sfputs_r+0xa>
 800bfee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bff0 <_vfiprintf_r>:
 800bff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff4:	460d      	mov	r5, r1
 800bff6:	b09d      	sub	sp, #116	; 0x74
 800bff8:	4614      	mov	r4, r2
 800bffa:	4698      	mov	r8, r3
 800bffc:	4606      	mov	r6, r0
 800bffe:	b118      	cbz	r0, 800c008 <_vfiprintf_r+0x18>
 800c000:	6983      	ldr	r3, [r0, #24]
 800c002:	b90b      	cbnz	r3, 800c008 <_vfiprintf_r+0x18>
 800c004:	f000 fb06 	bl	800c614 <__sinit>
 800c008:	4b89      	ldr	r3, [pc, #548]	; (800c230 <_vfiprintf_r+0x240>)
 800c00a:	429d      	cmp	r5, r3
 800c00c:	d11b      	bne.n	800c046 <_vfiprintf_r+0x56>
 800c00e:	6875      	ldr	r5, [r6, #4]
 800c010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c012:	07d9      	lsls	r1, r3, #31
 800c014:	d405      	bmi.n	800c022 <_vfiprintf_r+0x32>
 800c016:	89ab      	ldrh	r3, [r5, #12]
 800c018:	059a      	lsls	r2, r3, #22
 800c01a:	d402      	bmi.n	800c022 <_vfiprintf_r+0x32>
 800c01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c01e:	f000 fb97 	bl	800c750 <__retarget_lock_acquire_recursive>
 800c022:	89ab      	ldrh	r3, [r5, #12]
 800c024:	071b      	lsls	r3, r3, #28
 800c026:	d501      	bpl.n	800c02c <_vfiprintf_r+0x3c>
 800c028:	692b      	ldr	r3, [r5, #16]
 800c02a:	b9eb      	cbnz	r3, 800c068 <_vfiprintf_r+0x78>
 800c02c:	4629      	mov	r1, r5
 800c02e:	4630      	mov	r0, r6
 800c030:	f000 f960 	bl	800c2f4 <__swsetup_r>
 800c034:	b1c0      	cbz	r0, 800c068 <_vfiprintf_r+0x78>
 800c036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c038:	07dc      	lsls	r4, r3, #31
 800c03a:	d50e      	bpl.n	800c05a <_vfiprintf_r+0x6a>
 800c03c:	f04f 30ff 	mov.w	r0, #4294967295
 800c040:	b01d      	add	sp, #116	; 0x74
 800c042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c046:	4b7b      	ldr	r3, [pc, #492]	; (800c234 <_vfiprintf_r+0x244>)
 800c048:	429d      	cmp	r5, r3
 800c04a:	d101      	bne.n	800c050 <_vfiprintf_r+0x60>
 800c04c:	68b5      	ldr	r5, [r6, #8]
 800c04e:	e7df      	b.n	800c010 <_vfiprintf_r+0x20>
 800c050:	4b79      	ldr	r3, [pc, #484]	; (800c238 <_vfiprintf_r+0x248>)
 800c052:	429d      	cmp	r5, r3
 800c054:	bf08      	it	eq
 800c056:	68f5      	ldreq	r5, [r6, #12]
 800c058:	e7da      	b.n	800c010 <_vfiprintf_r+0x20>
 800c05a:	89ab      	ldrh	r3, [r5, #12]
 800c05c:	0598      	lsls	r0, r3, #22
 800c05e:	d4ed      	bmi.n	800c03c <_vfiprintf_r+0x4c>
 800c060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c062:	f000 fb76 	bl	800c752 <__retarget_lock_release_recursive>
 800c066:	e7e9      	b.n	800c03c <_vfiprintf_r+0x4c>
 800c068:	2300      	movs	r3, #0
 800c06a:	9309      	str	r3, [sp, #36]	; 0x24
 800c06c:	2320      	movs	r3, #32
 800c06e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c072:	f8cd 800c 	str.w	r8, [sp, #12]
 800c076:	2330      	movs	r3, #48	; 0x30
 800c078:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c23c <_vfiprintf_r+0x24c>
 800c07c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c080:	f04f 0901 	mov.w	r9, #1
 800c084:	4623      	mov	r3, r4
 800c086:	469a      	mov	sl, r3
 800c088:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c08c:	b10a      	cbz	r2, 800c092 <_vfiprintf_r+0xa2>
 800c08e:	2a25      	cmp	r2, #37	; 0x25
 800c090:	d1f9      	bne.n	800c086 <_vfiprintf_r+0x96>
 800c092:	ebba 0b04 	subs.w	fp, sl, r4
 800c096:	d00b      	beq.n	800c0b0 <_vfiprintf_r+0xc0>
 800c098:	465b      	mov	r3, fp
 800c09a:	4622      	mov	r2, r4
 800c09c:	4629      	mov	r1, r5
 800c09e:	4630      	mov	r0, r6
 800c0a0:	f7ff ff94 	bl	800bfcc <__sfputs_r>
 800c0a4:	3001      	adds	r0, #1
 800c0a6:	f000 80aa 	beq.w	800c1fe <_vfiprintf_r+0x20e>
 800c0aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0ac:	445a      	add	r2, fp
 800c0ae:	9209      	str	r2, [sp, #36]	; 0x24
 800c0b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	f000 80a2 	beq.w	800c1fe <_vfiprintf_r+0x20e>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0c4:	f10a 0a01 	add.w	sl, sl, #1
 800c0c8:	9304      	str	r3, [sp, #16]
 800c0ca:	9307      	str	r3, [sp, #28]
 800c0cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0d0:	931a      	str	r3, [sp, #104]	; 0x68
 800c0d2:	4654      	mov	r4, sl
 800c0d4:	2205      	movs	r2, #5
 800c0d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0da:	4858      	ldr	r0, [pc, #352]	; (800c23c <_vfiprintf_r+0x24c>)
 800c0dc:	f7f4 f888 	bl	80001f0 <memchr>
 800c0e0:	9a04      	ldr	r2, [sp, #16]
 800c0e2:	b9d8      	cbnz	r0, 800c11c <_vfiprintf_r+0x12c>
 800c0e4:	06d1      	lsls	r1, r2, #27
 800c0e6:	bf44      	itt	mi
 800c0e8:	2320      	movmi	r3, #32
 800c0ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0ee:	0713      	lsls	r3, r2, #28
 800c0f0:	bf44      	itt	mi
 800c0f2:	232b      	movmi	r3, #43	; 0x2b
 800c0f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c0fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c0fe:	d015      	beq.n	800c12c <_vfiprintf_r+0x13c>
 800c100:	9a07      	ldr	r2, [sp, #28]
 800c102:	4654      	mov	r4, sl
 800c104:	2000      	movs	r0, #0
 800c106:	f04f 0c0a 	mov.w	ip, #10
 800c10a:	4621      	mov	r1, r4
 800c10c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c110:	3b30      	subs	r3, #48	; 0x30
 800c112:	2b09      	cmp	r3, #9
 800c114:	d94e      	bls.n	800c1b4 <_vfiprintf_r+0x1c4>
 800c116:	b1b0      	cbz	r0, 800c146 <_vfiprintf_r+0x156>
 800c118:	9207      	str	r2, [sp, #28]
 800c11a:	e014      	b.n	800c146 <_vfiprintf_r+0x156>
 800c11c:	eba0 0308 	sub.w	r3, r0, r8
 800c120:	fa09 f303 	lsl.w	r3, r9, r3
 800c124:	4313      	orrs	r3, r2
 800c126:	9304      	str	r3, [sp, #16]
 800c128:	46a2      	mov	sl, r4
 800c12a:	e7d2      	b.n	800c0d2 <_vfiprintf_r+0xe2>
 800c12c:	9b03      	ldr	r3, [sp, #12]
 800c12e:	1d19      	adds	r1, r3, #4
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	9103      	str	r1, [sp, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	bfbb      	ittet	lt
 800c138:	425b      	neglt	r3, r3
 800c13a:	f042 0202 	orrlt.w	r2, r2, #2
 800c13e:	9307      	strge	r3, [sp, #28]
 800c140:	9307      	strlt	r3, [sp, #28]
 800c142:	bfb8      	it	lt
 800c144:	9204      	strlt	r2, [sp, #16]
 800c146:	7823      	ldrb	r3, [r4, #0]
 800c148:	2b2e      	cmp	r3, #46	; 0x2e
 800c14a:	d10c      	bne.n	800c166 <_vfiprintf_r+0x176>
 800c14c:	7863      	ldrb	r3, [r4, #1]
 800c14e:	2b2a      	cmp	r3, #42	; 0x2a
 800c150:	d135      	bne.n	800c1be <_vfiprintf_r+0x1ce>
 800c152:	9b03      	ldr	r3, [sp, #12]
 800c154:	1d1a      	adds	r2, r3, #4
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	9203      	str	r2, [sp, #12]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	bfb8      	it	lt
 800c15e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c162:	3402      	adds	r4, #2
 800c164:	9305      	str	r3, [sp, #20]
 800c166:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c24c <_vfiprintf_r+0x25c>
 800c16a:	7821      	ldrb	r1, [r4, #0]
 800c16c:	2203      	movs	r2, #3
 800c16e:	4650      	mov	r0, sl
 800c170:	f7f4 f83e 	bl	80001f0 <memchr>
 800c174:	b140      	cbz	r0, 800c188 <_vfiprintf_r+0x198>
 800c176:	2340      	movs	r3, #64	; 0x40
 800c178:	eba0 000a 	sub.w	r0, r0, sl
 800c17c:	fa03 f000 	lsl.w	r0, r3, r0
 800c180:	9b04      	ldr	r3, [sp, #16]
 800c182:	4303      	orrs	r3, r0
 800c184:	3401      	adds	r4, #1
 800c186:	9304      	str	r3, [sp, #16]
 800c188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c18c:	482c      	ldr	r0, [pc, #176]	; (800c240 <_vfiprintf_r+0x250>)
 800c18e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c192:	2206      	movs	r2, #6
 800c194:	f7f4 f82c 	bl	80001f0 <memchr>
 800c198:	2800      	cmp	r0, #0
 800c19a:	d03f      	beq.n	800c21c <_vfiprintf_r+0x22c>
 800c19c:	4b29      	ldr	r3, [pc, #164]	; (800c244 <_vfiprintf_r+0x254>)
 800c19e:	bb1b      	cbnz	r3, 800c1e8 <_vfiprintf_r+0x1f8>
 800c1a0:	9b03      	ldr	r3, [sp, #12]
 800c1a2:	3307      	adds	r3, #7
 800c1a4:	f023 0307 	bic.w	r3, r3, #7
 800c1a8:	3308      	adds	r3, #8
 800c1aa:	9303      	str	r3, [sp, #12]
 800c1ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ae:	443b      	add	r3, r7
 800c1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b2:	e767      	b.n	800c084 <_vfiprintf_r+0x94>
 800c1b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1b8:	460c      	mov	r4, r1
 800c1ba:	2001      	movs	r0, #1
 800c1bc:	e7a5      	b.n	800c10a <_vfiprintf_r+0x11a>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	3401      	adds	r4, #1
 800c1c2:	9305      	str	r3, [sp, #20]
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	f04f 0c0a 	mov.w	ip, #10
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1d0:	3a30      	subs	r2, #48	; 0x30
 800c1d2:	2a09      	cmp	r2, #9
 800c1d4:	d903      	bls.n	800c1de <_vfiprintf_r+0x1ee>
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d0c5      	beq.n	800c166 <_vfiprintf_r+0x176>
 800c1da:	9105      	str	r1, [sp, #20]
 800c1dc:	e7c3      	b.n	800c166 <_vfiprintf_r+0x176>
 800c1de:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e7f0      	b.n	800c1ca <_vfiprintf_r+0x1da>
 800c1e8:	ab03      	add	r3, sp, #12
 800c1ea:	9300      	str	r3, [sp, #0]
 800c1ec:	462a      	mov	r2, r5
 800c1ee:	4b16      	ldr	r3, [pc, #88]	; (800c248 <_vfiprintf_r+0x258>)
 800c1f0:	a904      	add	r1, sp, #16
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	f7fc f84c 	bl	8008290 <_printf_float>
 800c1f8:	4607      	mov	r7, r0
 800c1fa:	1c78      	adds	r0, r7, #1
 800c1fc:	d1d6      	bne.n	800c1ac <_vfiprintf_r+0x1bc>
 800c1fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c200:	07d9      	lsls	r1, r3, #31
 800c202:	d405      	bmi.n	800c210 <_vfiprintf_r+0x220>
 800c204:	89ab      	ldrh	r3, [r5, #12]
 800c206:	059a      	lsls	r2, r3, #22
 800c208:	d402      	bmi.n	800c210 <_vfiprintf_r+0x220>
 800c20a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c20c:	f000 faa1 	bl	800c752 <__retarget_lock_release_recursive>
 800c210:	89ab      	ldrh	r3, [r5, #12]
 800c212:	065b      	lsls	r3, r3, #25
 800c214:	f53f af12 	bmi.w	800c03c <_vfiprintf_r+0x4c>
 800c218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c21a:	e711      	b.n	800c040 <_vfiprintf_r+0x50>
 800c21c:	ab03      	add	r3, sp, #12
 800c21e:	9300      	str	r3, [sp, #0]
 800c220:	462a      	mov	r2, r5
 800c222:	4b09      	ldr	r3, [pc, #36]	; (800c248 <_vfiprintf_r+0x258>)
 800c224:	a904      	add	r1, sp, #16
 800c226:	4630      	mov	r0, r6
 800c228:	f7fc fad6 	bl	80087d8 <_printf_i>
 800c22c:	e7e4      	b.n	800c1f8 <_vfiprintf_r+0x208>
 800c22e:	bf00      	nop
 800c230:	0800e50c 	.word	0x0800e50c
 800c234:	0800e52c 	.word	0x0800e52c
 800c238:	0800e4ec 	.word	0x0800e4ec
 800c23c:	0800e49c 	.word	0x0800e49c
 800c240:	0800e4a6 	.word	0x0800e4a6
 800c244:	08008291 	.word	0x08008291
 800c248:	0800bfcd 	.word	0x0800bfcd
 800c24c:	0800e4a2 	.word	0x0800e4a2

0800c250 <__swbuf_r>:
 800c250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c252:	460e      	mov	r6, r1
 800c254:	4614      	mov	r4, r2
 800c256:	4605      	mov	r5, r0
 800c258:	b118      	cbz	r0, 800c262 <__swbuf_r+0x12>
 800c25a:	6983      	ldr	r3, [r0, #24]
 800c25c:	b90b      	cbnz	r3, 800c262 <__swbuf_r+0x12>
 800c25e:	f000 f9d9 	bl	800c614 <__sinit>
 800c262:	4b21      	ldr	r3, [pc, #132]	; (800c2e8 <__swbuf_r+0x98>)
 800c264:	429c      	cmp	r4, r3
 800c266:	d12b      	bne.n	800c2c0 <__swbuf_r+0x70>
 800c268:	686c      	ldr	r4, [r5, #4]
 800c26a:	69a3      	ldr	r3, [r4, #24]
 800c26c:	60a3      	str	r3, [r4, #8]
 800c26e:	89a3      	ldrh	r3, [r4, #12]
 800c270:	071a      	lsls	r2, r3, #28
 800c272:	d52f      	bpl.n	800c2d4 <__swbuf_r+0x84>
 800c274:	6923      	ldr	r3, [r4, #16]
 800c276:	b36b      	cbz	r3, 800c2d4 <__swbuf_r+0x84>
 800c278:	6923      	ldr	r3, [r4, #16]
 800c27a:	6820      	ldr	r0, [r4, #0]
 800c27c:	1ac0      	subs	r0, r0, r3
 800c27e:	6963      	ldr	r3, [r4, #20]
 800c280:	b2f6      	uxtb	r6, r6
 800c282:	4283      	cmp	r3, r0
 800c284:	4637      	mov	r7, r6
 800c286:	dc04      	bgt.n	800c292 <__swbuf_r+0x42>
 800c288:	4621      	mov	r1, r4
 800c28a:	4628      	mov	r0, r5
 800c28c:	f000 f92e 	bl	800c4ec <_fflush_r>
 800c290:	bb30      	cbnz	r0, 800c2e0 <__swbuf_r+0x90>
 800c292:	68a3      	ldr	r3, [r4, #8]
 800c294:	3b01      	subs	r3, #1
 800c296:	60a3      	str	r3, [r4, #8]
 800c298:	6823      	ldr	r3, [r4, #0]
 800c29a:	1c5a      	adds	r2, r3, #1
 800c29c:	6022      	str	r2, [r4, #0]
 800c29e:	701e      	strb	r6, [r3, #0]
 800c2a0:	6963      	ldr	r3, [r4, #20]
 800c2a2:	3001      	adds	r0, #1
 800c2a4:	4283      	cmp	r3, r0
 800c2a6:	d004      	beq.n	800c2b2 <__swbuf_r+0x62>
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	07db      	lsls	r3, r3, #31
 800c2ac:	d506      	bpl.n	800c2bc <__swbuf_r+0x6c>
 800c2ae:	2e0a      	cmp	r6, #10
 800c2b0:	d104      	bne.n	800c2bc <__swbuf_r+0x6c>
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	f000 f919 	bl	800c4ec <_fflush_r>
 800c2ba:	b988      	cbnz	r0, 800c2e0 <__swbuf_r+0x90>
 800c2bc:	4638      	mov	r0, r7
 800c2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2c0:	4b0a      	ldr	r3, [pc, #40]	; (800c2ec <__swbuf_r+0x9c>)
 800c2c2:	429c      	cmp	r4, r3
 800c2c4:	d101      	bne.n	800c2ca <__swbuf_r+0x7a>
 800c2c6:	68ac      	ldr	r4, [r5, #8]
 800c2c8:	e7cf      	b.n	800c26a <__swbuf_r+0x1a>
 800c2ca:	4b09      	ldr	r3, [pc, #36]	; (800c2f0 <__swbuf_r+0xa0>)
 800c2cc:	429c      	cmp	r4, r3
 800c2ce:	bf08      	it	eq
 800c2d0:	68ec      	ldreq	r4, [r5, #12]
 800c2d2:	e7ca      	b.n	800c26a <__swbuf_r+0x1a>
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	f000 f80c 	bl	800c2f4 <__swsetup_r>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	d0cb      	beq.n	800c278 <__swbuf_r+0x28>
 800c2e0:	f04f 37ff 	mov.w	r7, #4294967295
 800c2e4:	e7ea      	b.n	800c2bc <__swbuf_r+0x6c>
 800c2e6:	bf00      	nop
 800c2e8:	0800e50c 	.word	0x0800e50c
 800c2ec:	0800e52c 	.word	0x0800e52c
 800c2f0:	0800e4ec 	.word	0x0800e4ec

0800c2f4 <__swsetup_r>:
 800c2f4:	4b32      	ldr	r3, [pc, #200]	; (800c3c0 <__swsetup_r+0xcc>)
 800c2f6:	b570      	push	{r4, r5, r6, lr}
 800c2f8:	681d      	ldr	r5, [r3, #0]
 800c2fa:	4606      	mov	r6, r0
 800c2fc:	460c      	mov	r4, r1
 800c2fe:	b125      	cbz	r5, 800c30a <__swsetup_r+0x16>
 800c300:	69ab      	ldr	r3, [r5, #24]
 800c302:	b913      	cbnz	r3, 800c30a <__swsetup_r+0x16>
 800c304:	4628      	mov	r0, r5
 800c306:	f000 f985 	bl	800c614 <__sinit>
 800c30a:	4b2e      	ldr	r3, [pc, #184]	; (800c3c4 <__swsetup_r+0xd0>)
 800c30c:	429c      	cmp	r4, r3
 800c30e:	d10f      	bne.n	800c330 <__swsetup_r+0x3c>
 800c310:	686c      	ldr	r4, [r5, #4]
 800c312:	89a3      	ldrh	r3, [r4, #12]
 800c314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c318:	0719      	lsls	r1, r3, #28
 800c31a:	d42c      	bmi.n	800c376 <__swsetup_r+0x82>
 800c31c:	06dd      	lsls	r5, r3, #27
 800c31e:	d411      	bmi.n	800c344 <__swsetup_r+0x50>
 800c320:	2309      	movs	r3, #9
 800c322:	6033      	str	r3, [r6, #0]
 800c324:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c328:	81a3      	strh	r3, [r4, #12]
 800c32a:	f04f 30ff 	mov.w	r0, #4294967295
 800c32e:	e03e      	b.n	800c3ae <__swsetup_r+0xba>
 800c330:	4b25      	ldr	r3, [pc, #148]	; (800c3c8 <__swsetup_r+0xd4>)
 800c332:	429c      	cmp	r4, r3
 800c334:	d101      	bne.n	800c33a <__swsetup_r+0x46>
 800c336:	68ac      	ldr	r4, [r5, #8]
 800c338:	e7eb      	b.n	800c312 <__swsetup_r+0x1e>
 800c33a:	4b24      	ldr	r3, [pc, #144]	; (800c3cc <__swsetup_r+0xd8>)
 800c33c:	429c      	cmp	r4, r3
 800c33e:	bf08      	it	eq
 800c340:	68ec      	ldreq	r4, [r5, #12]
 800c342:	e7e6      	b.n	800c312 <__swsetup_r+0x1e>
 800c344:	0758      	lsls	r0, r3, #29
 800c346:	d512      	bpl.n	800c36e <__swsetup_r+0x7a>
 800c348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c34a:	b141      	cbz	r1, 800c35e <__swsetup_r+0x6a>
 800c34c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c350:	4299      	cmp	r1, r3
 800c352:	d002      	beq.n	800c35a <__swsetup_r+0x66>
 800c354:	4630      	mov	r0, r6
 800c356:	f7ff fb27 	bl	800b9a8 <_free_r>
 800c35a:	2300      	movs	r3, #0
 800c35c:	6363      	str	r3, [r4, #52]	; 0x34
 800c35e:	89a3      	ldrh	r3, [r4, #12]
 800c360:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c364:	81a3      	strh	r3, [r4, #12]
 800c366:	2300      	movs	r3, #0
 800c368:	6063      	str	r3, [r4, #4]
 800c36a:	6923      	ldr	r3, [r4, #16]
 800c36c:	6023      	str	r3, [r4, #0]
 800c36e:	89a3      	ldrh	r3, [r4, #12]
 800c370:	f043 0308 	orr.w	r3, r3, #8
 800c374:	81a3      	strh	r3, [r4, #12]
 800c376:	6923      	ldr	r3, [r4, #16]
 800c378:	b94b      	cbnz	r3, 800c38e <__swsetup_r+0x9a>
 800c37a:	89a3      	ldrh	r3, [r4, #12]
 800c37c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c384:	d003      	beq.n	800c38e <__swsetup_r+0x9a>
 800c386:	4621      	mov	r1, r4
 800c388:	4630      	mov	r0, r6
 800c38a:	f000 fa09 	bl	800c7a0 <__smakebuf_r>
 800c38e:	89a0      	ldrh	r0, [r4, #12]
 800c390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c394:	f010 0301 	ands.w	r3, r0, #1
 800c398:	d00a      	beq.n	800c3b0 <__swsetup_r+0xbc>
 800c39a:	2300      	movs	r3, #0
 800c39c:	60a3      	str	r3, [r4, #8]
 800c39e:	6963      	ldr	r3, [r4, #20]
 800c3a0:	425b      	negs	r3, r3
 800c3a2:	61a3      	str	r3, [r4, #24]
 800c3a4:	6923      	ldr	r3, [r4, #16]
 800c3a6:	b943      	cbnz	r3, 800c3ba <__swsetup_r+0xc6>
 800c3a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c3ac:	d1ba      	bne.n	800c324 <__swsetup_r+0x30>
 800c3ae:	bd70      	pop	{r4, r5, r6, pc}
 800c3b0:	0781      	lsls	r1, r0, #30
 800c3b2:	bf58      	it	pl
 800c3b4:	6963      	ldrpl	r3, [r4, #20]
 800c3b6:	60a3      	str	r3, [r4, #8]
 800c3b8:	e7f4      	b.n	800c3a4 <__swsetup_r+0xb0>
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	e7f7      	b.n	800c3ae <__swsetup_r+0xba>
 800c3be:	bf00      	nop
 800c3c0:	2000020c 	.word	0x2000020c
 800c3c4:	0800e50c 	.word	0x0800e50c
 800c3c8:	0800e52c 	.word	0x0800e52c
 800c3cc:	0800e4ec 	.word	0x0800e4ec

0800c3d0 <abort>:
 800c3d0:	b508      	push	{r3, lr}
 800c3d2:	2006      	movs	r0, #6
 800c3d4:	f000 fa54 	bl	800c880 <raise>
 800c3d8:	2001      	movs	r0, #1
 800c3da:	f7f6 fa9b 	bl	8002914 <_exit>
	...

0800c3e0 <__sflush_r>:
 800c3e0:	898a      	ldrh	r2, [r1, #12]
 800c3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e6:	4605      	mov	r5, r0
 800c3e8:	0710      	lsls	r0, r2, #28
 800c3ea:	460c      	mov	r4, r1
 800c3ec:	d458      	bmi.n	800c4a0 <__sflush_r+0xc0>
 800c3ee:	684b      	ldr	r3, [r1, #4]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	dc05      	bgt.n	800c400 <__sflush_r+0x20>
 800c3f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	dc02      	bgt.n	800c400 <__sflush_r+0x20>
 800c3fa:	2000      	movs	r0, #0
 800c3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c402:	2e00      	cmp	r6, #0
 800c404:	d0f9      	beq.n	800c3fa <__sflush_r+0x1a>
 800c406:	2300      	movs	r3, #0
 800c408:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c40c:	682f      	ldr	r7, [r5, #0]
 800c40e:	602b      	str	r3, [r5, #0]
 800c410:	d032      	beq.n	800c478 <__sflush_r+0x98>
 800c412:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c414:	89a3      	ldrh	r3, [r4, #12]
 800c416:	075a      	lsls	r2, r3, #29
 800c418:	d505      	bpl.n	800c426 <__sflush_r+0x46>
 800c41a:	6863      	ldr	r3, [r4, #4]
 800c41c:	1ac0      	subs	r0, r0, r3
 800c41e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c420:	b10b      	cbz	r3, 800c426 <__sflush_r+0x46>
 800c422:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c424:	1ac0      	subs	r0, r0, r3
 800c426:	2300      	movs	r3, #0
 800c428:	4602      	mov	r2, r0
 800c42a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c42c:	6a21      	ldr	r1, [r4, #32]
 800c42e:	4628      	mov	r0, r5
 800c430:	47b0      	blx	r6
 800c432:	1c43      	adds	r3, r0, #1
 800c434:	89a3      	ldrh	r3, [r4, #12]
 800c436:	d106      	bne.n	800c446 <__sflush_r+0x66>
 800c438:	6829      	ldr	r1, [r5, #0]
 800c43a:	291d      	cmp	r1, #29
 800c43c:	d82c      	bhi.n	800c498 <__sflush_r+0xb8>
 800c43e:	4a2a      	ldr	r2, [pc, #168]	; (800c4e8 <__sflush_r+0x108>)
 800c440:	40ca      	lsrs	r2, r1
 800c442:	07d6      	lsls	r6, r2, #31
 800c444:	d528      	bpl.n	800c498 <__sflush_r+0xb8>
 800c446:	2200      	movs	r2, #0
 800c448:	6062      	str	r2, [r4, #4]
 800c44a:	04d9      	lsls	r1, r3, #19
 800c44c:	6922      	ldr	r2, [r4, #16]
 800c44e:	6022      	str	r2, [r4, #0]
 800c450:	d504      	bpl.n	800c45c <__sflush_r+0x7c>
 800c452:	1c42      	adds	r2, r0, #1
 800c454:	d101      	bne.n	800c45a <__sflush_r+0x7a>
 800c456:	682b      	ldr	r3, [r5, #0]
 800c458:	b903      	cbnz	r3, 800c45c <__sflush_r+0x7c>
 800c45a:	6560      	str	r0, [r4, #84]	; 0x54
 800c45c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c45e:	602f      	str	r7, [r5, #0]
 800c460:	2900      	cmp	r1, #0
 800c462:	d0ca      	beq.n	800c3fa <__sflush_r+0x1a>
 800c464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c468:	4299      	cmp	r1, r3
 800c46a:	d002      	beq.n	800c472 <__sflush_r+0x92>
 800c46c:	4628      	mov	r0, r5
 800c46e:	f7ff fa9b 	bl	800b9a8 <_free_r>
 800c472:	2000      	movs	r0, #0
 800c474:	6360      	str	r0, [r4, #52]	; 0x34
 800c476:	e7c1      	b.n	800c3fc <__sflush_r+0x1c>
 800c478:	6a21      	ldr	r1, [r4, #32]
 800c47a:	2301      	movs	r3, #1
 800c47c:	4628      	mov	r0, r5
 800c47e:	47b0      	blx	r6
 800c480:	1c41      	adds	r1, r0, #1
 800c482:	d1c7      	bne.n	800c414 <__sflush_r+0x34>
 800c484:	682b      	ldr	r3, [r5, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d0c4      	beq.n	800c414 <__sflush_r+0x34>
 800c48a:	2b1d      	cmp	r3, #29
 800c48c:	d001      	beq.n	800c492 <__sflush_r+0xb2>
 800c48e:	2b16      	cmp	r3, #22
 800c490:	d101      	bne.n	800c496 <__sflush_r+0xb6>
 800c492:	602f      	str	r7, [r5, #0]
 800c494:	e7b1      	b.n	800c3fa <__sflush_r+0x1a>
 800c496:	89a3      	ldrh	r3, [r4, #12]
 800c498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c49c:	81a3      	strh	r3, [r4, #12]
 800c49e:	e7ad      	b.n	800c3fc <__sflush_r+0x1c>
 800c4a0:	690f      	ldr	r7, [r1, #16]
 800c4a2:	2f00      	cmp	r7, #0
 800c4a4:	d0a9      	beq.n	800c3fa <__sflush_r+0x1a>
 800c4a6:	0793      	lsls	r3, r2, #30
 800c4a8:	680e      	ldr	r6, [r1, #0]
 800c4aa:	bf08      	it	eq
 800c4ac:	694b      	ldreq	r3, [r1, #20]
 800c4ae:	600f      	str	r7, [r1, #0]
 800c4b0:	bf18      	it	ne
 800c4b2:	2300      	movne	r3, #0
 800c4b4:	eba6 0807 	sub.w	r8, r6, r7
 800c4b8:	608b      	str	r3, [r1, #8]
 800c4ba:	f1b8 0f00 	cmp.w	r8, #0
 800c4be:	dd9c      	ble.n	800c3fa <__sflush_r+0x1a>
 800c4c0:	6a21      	ldr	r1, [r4, #32]
 800c4c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4c4:	4643      	mov	r3, r8
 800c4c6:	463a      	mov	r2, r7
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	47b0      	blx	r6
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	dc06      	bgt.n	800c4de <__sflush_r+0xfe>
 800c4d0:	89a3      	ldrh	r3, [r4, #12]
 800c4d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4d6:	81a3      	strh	r3, [r4, #12]
 800c4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4dc:	e78e      	b.n	800c3fc <__sflush_r+0x1c>
 800c4de:	4407      	add	r7, r0
 800c4e0:	eba8 0800 	sub.w	r8, r8, r0
 800c4e4:	e7e9      	b.n	800c4ba <__sflush_r+0xda>
 800c4e6:	bf00      	nop
 800c4e8:	20400001 	.word	0x20400001

0800c4ec <_fflush_r>:
 800c4ec:	b538      	push	{r3, r4, r5, lr}
 800c4ee:	690b      	ldr	r3, [r1, #16]
 800c4f0:	4605      	mov	r5, r0
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	b913      	cbnz	r3, 800c4fc <_fflush_r+0x10>
 800c4f6:	2500      	movs	r5, #0
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	bd38      	pop	{r3, r4, r5, pc}
 800c4fc:	b118      	cbz	r0, 800c506 <_fflush_r+0x1a>
 800c4fe:	6983      	ldr	r3, [r0, #24]
 800c500:	b90b      	cbnz	r3, 800c506 <_fflush_r+0x1a>
 800c502:	f000 f887 	bl	800c614 <__sinit>
 800c506:	4b14      	ldr	r3, [pc, #80]	; (800c558 <_fflush_r+0x6c>)
 800c508:	429c      	cmp	r4, r3
 800c50a:	d11b      	bne.n	800c544 <_fflush_r+0x58>
 800c50c:	686c      	ldr	r4, [r5, #4]
 800c50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d0ef      	beq.n	800c4f6 <_fflush_r+0xa>
 800c516:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c518:	07d0      	lsls	r0, r2, #31
 800c51a:	d404      	bmi.n	800c526 <_fflush_r+0x3a>
 800c51c:	0599      	lsls	r1, r3, #22
 800c51e:	d402      	bmi.n	800c526 <_fflush_r+0x3a>
 800c520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c522:	f000 f915 	bl	800c750 <__retarget_lock_acquire_recursive>
 800c526:	4628      	mov	r0, r5
 800c528:	4621      	mov	r1, r4
 800c52a:	f7ff ff59 	bl	800c3e0 <__sflush_r>
 800c52e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c530:	07da      	lsls	r2, r3, #31
 800c532:	4605      	mov	r5, r0
 800c534:	d4e0      	bmi.n	800c4f8 <_fflush_r+0xc>
 800c536:	89a3      	ldrh	r3, [r4, #12]
 800c538:	059b      	lsls	r3, r3, #22
 800c53a:	d4dd      	bmi.n	800c4f8 <_fflush_r+0xc>
 800c53c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c53e:	f000 f908 	bl	800c752 <__retarget_lock_release_recursive>
 800c542:	e7d9      	b.n	800c4f8 <_fflush_r+0xc>
 800c544:	4b05      	ldr	r3, [pc, #20]	; (800c55c <_fflush_r+0x70>)
 800c546:	429c      	cmp	r4, r3
 800c548:	d101      	bne.n	800c54e <_fflush_r+0x62>
 800c54a:	68ac      	ldr	r4, [r5, #8]
 800c54c:	e7df      	b.n	800c50e <_fflush_r+0x22>
 800c54e:	4b04      	ldr	r3, [pc, #16]	; (800c560 <_fflush_r+0x74>)
 800c550:	429c      	cmp	r4, r3
 800c552:	bf08      	it	eq
 800c554:	68ec      	ldreq	r4, [r5, #12]
 800c556:	e7da      	b.n	800c50e <_fflush_r+0x22>
 800c558:	0800e50c 	.word	0x0800e50c
 800c55c:	0800e52c 	.word	0x0800e52c
 800c560:	0800e4ec 	.word	0x0800e4ec

0800c564 <std>:
 800c564:	2300      	movs	r3, #0
 800c566:	b510      	push	{r4, lr}
 800c568:	4604      	mov	r4, r0
 800c56a:	e9c0 3300 	strd	r3, r3, [r0]
 800c56e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c572:	6083      	str	r3, [r0, #8]
 800c574:	8181      	strh	r1, [r0, #12]
 800c576:	6643      	str	r3, [r0, #100]	; 0x64
 800c578:	81c2      	strh	r2, [r0, #14]
 800c57a:	6183      	str	r3, [r0, #24]
 800c57c:	4619      	mov	r1, r3
 800c57e:	2208      	movs	r2, #8
 800c580:	305c      	adds	r0, #92	; 0x5c
 800c582:	f7fb fddd 	bl	8008140 <memset>
 800c586:	4b05      	ldr	r3, [pc, #20]	; (800c59c <std+0x38>)
 800c588:	6263      	str	r3, [r4, #36]	; 0x24
 800c58a:	4b05      	ldr	r3, [pc, #20]	; (800c5a0 <std+0x3c>)
 800c58c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c58e:	4b05      	ldr	r3, [pc, #20]	; (800c5a4 <std+0x40>)
 800c590:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c592:	4b05      	ldr	r3, [pc, #20]	; (800c5a8 <std+0x44>)
 800c594:	6224      	str	r4, [r4, #32]
 800c596:	6323      	str	r3, [r4, #48]	; 0x30
 800c598:	bd10      	pop	{r4, pc}
 800c59a:	bf00      	nop
 800c59c:	0800c8b9 	.word	0x0800c8b9
 800c5a0:	0800c8db 	.word	0x0800c8db
 800c5a4:	0800c913 	.word	0x0800c913
 800c5a8:	0800c937 	.word	0x0800c937

0800c5ac <_cleanup_r>:
 800c5ac:	4901      	ldr	r1, [pc, #4]	; (800c5b4 <_cleanup_r+0x8>)
 800c5ae:	f000 b8af 	b.w	800c710 <_fwalk_reent>
 800c5b2:	bf00      	nop
 800c5b4:	0800c4ed 	.word	0x0800c4ed

0800c5b8 <__sfmoreglue>:
 800c5b8:	b570      	push	{r4, r5, r6, lr}
 800c5ba:	2268      	movs	r2, #104	; 0x68
 800c5bc:	1e4d      	subs	r5, r1, #1
 800c5be:	4355      	muls	r5, r2
 800c5c0:	460e      	mov	r6, r1
 800c5c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c5c6:	f7ff fa5b 	bl	800ba80 <_malloc_r>
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	b140      	cbz	r0, 800c5e0 <__sfmoreglue+0x28>
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	e9c0 1600 	strd	r1, r6, [r0]
 800c5d4:	300c      	adds	r0, #12
 800c5d6:	60a0      	str	r0, [r4, #8]
 800c5d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c5dc:	f7fb fdb0 	bl	8008140 <memset>
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}

0800c5e4 <__sfp_lock_acquire>:
 800c5e4:	4801      	ldr	r0, [pc, #4]	; (800c5ec <__sfp_lock_acquire+0x8>)
 800c5e6:	f000 b8b3 	b.w	800c750 <__retarget_lock_acquire_recursive>
 800c5ea:	bf00      	nop
 800c5ec:	20000ed9 	.word	0x20000ed9

0800c5f0 <__sfp_lock_release>:
 800c5f0:	4801      	ldr	r0, [pc, #4]	; (800c5f8 <__sfp_lock_release+0x8>)
 800c5f2:	f000 b8ae 	b.w	800c752 <__retarget_lock_release_recursive>
 800c5f6:	bf00      	nop
 800c5f8:	20000ed9 	.word	0x20000ed9

0800c5fc <__sinit_lock_acquire>:
 800c5fc:	4801      	ldr	r0, [pc, #4]	; (800c604 <__sinit_lock_acquire+0x8>)
 800c5fe:	f000 b8a7 	b.w	800c750 <__retarget_lock_acquire_recursive>
 800c602:	bf00      	nop
 800c604:	20000eda 	.word	0x20000eda

0800c608 <__sinit_lock_release>:
 800c608:	4801      	ldr	r0, [pc, #4]	; (800c610 <__sinit_lock_release+0x8>)
 800c60a:	f000 b8a2 	b.w	800c752 <__retarget_lock_release_recursive>
 800c60e:	bf00      	nop
 800c610:	20000eda 	.word	0x20000eda

0800c614 <__sinit>:
 800c614:	b510      	push	{r4, lr}
 800c616:	4604      	mov	r4, r0
 800c618:	f7ff fff0 	bl	800c5fc <__sinit_lock_acquire>
 800c61c:	69a3      	ldr	r3, [r4, #24]
 800c61e:	b11b      	cbz	r3, 800c628 <__sinit+0x14>
 800c620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c624:	f7ff bff0 	b.w	800c608 <__sinit_lock_release>
 800c628:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c62c:	6523      	str	r3, [r4, #80]	; 0x50
 800c62e:	4b13      	ldr	r3, [pc, #76]	; (800c67c <__sinit+0x68>)
 800c630:	4a13      	ldr	r2, [pc, #76]	; (800c680 <__sinit+0x6c>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	62a2      	str	r2, [r4, #40]	; 0x28
 800c636:	42a3      	cmp	r3, r4
 800c638:	bf04      	itt	eq
 800c63a:	2301      	moveq	r3, #1
 800c63c:	61a3      	streq	r3, [r4, #24]
 800c63e:	4620      	mov	r0, r4
 800c640:	f000 f820 	bl	800c684 <__sfp>
 800c644:	6060      	str	r0, [r4, #4]
 800c646:	4620      	mov	r0, r4
 800c648:	f000 f81c 	bl	800c684 <__sfp>
 800c64c:	60a0      	str	r0, [r4, #8]
 800c64e:	4620      	mov	r0, r4
 800c650:	f000 f818 	bl	800c684 <__sfp>
 800c654:	2200      	movs	r2, #0
 800c656:	60e0      	str	r0, [r4, #12]
 800c658:	2104      	movs	r1, #4
 800c65a:	6860      	ldr	r0, [r4, #4]
 800c65c:	f7ff ff82 	bl	800c564 <std>
 800c660:	68a0      	ldr	r0, [r4, #8]
 800c662:	2201      	movs	r2, #1
 800c664:	2109      	movs	r1, #9
 800c666:	f7ff ff7d 	bl	800c564 <std>
 800c66a:	68e0      	ldr	r0, [r4, #12]
 800c66c:	2202      	movs	r2, #2
 800c66e:	2112      	movs	r1, #18
 800c670:	f7ff ff78 	bl	800c564 <std>
 800c674:	2301      	movs	r3, #1
 800c676:	61a3      	str	r3, [r4, #24]
 800c678:	e7d2      	b.n	800c620 <__sinit+0xc>
 800c67a:	bf00      	nop
 800c67c:	0800e0a8 	.word	0x0800e0a8
 800c680:	0800c5ad 	.word	0x0800c5ad

0800c684 <__sfp>:
 800c684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c686:	4607      	mov	r7, r0
 800c688:	f7ff ffac 	bl	800c5e4 <__sfp_lock_acquire>
 800c68c:	4b1e      	ldr	r3, [pc, #120]	; (800c708 <__sfp+0x84>)
 800c68e:	681e      	ldr	r6, [r3, #0]
 800c690:	69b3      	ldr	r3, [r6, #24]
 800c692:	b913      	cbnz	r3, 800c69a <__sfp+0x16>
 800c694:	4630      	mov	r0, r6
 800c696:	f7ff ffbd 	bl	800c614 <__sinit>
 800c69a:	3648      	adds	r6, #72	; 0x48
 800c69c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c6a0:	3b01      	subs	r3, #1
 800c6a2:	d503      	bpl.n	800c6ac <__sfp+0x28>
 800c6a4:	6833      	ldr	r3, [r6, #0]
 800c6a6:	b30b      	cbz	r3, 800c6ec <__sfp+0x68>
 800c6a8:	6836      	ldr	r6, [r6, #0]
 800c6aa:	e7f7      	b.n	800c69c <__sfp+0x18>
 800c6ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c6b0:	b9d5      	cbnz	r5, 800c6e8 <__sfp+0x64>
 800c6b2:	4b16      	ldr	r3, [pc, #88]	; (800c70c <__sfp+0x88>)
 800c6b4:	60e3      	str	r3, [r4, #12]
 800c6b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c6ba:	6665      	str	r5, [r4, #100]	; 0x64
 800c6bc:	f000 f847 	bl	800c74e <__retarget_lock_init_recursive>
 800c6c0:	f7ff ff96 	bl	800c5f0 <__sfp_lock_release>
 800c6c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c6c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c6cc:	6025      	str	r5, [r4, #0]
 800c6ce:	61a5      	str	r5, [r4, #24]
 800c6d0:	2208      	movs	r2, #8
 800c6d2:	4629      	mov	r1, r5
 800c6d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c6d8:	f7fb fd32 	bl	8008140 <memset>
 800c6dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c6e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6e8:	3468      	adds	r4, #104	; 0x68
 800c6ea:	e7d9      	b.n	800c6a0 <__sfp+0x1c>
 800c6ec:	2104      	movs	r1, #4
 800c6ee:	4638      	mov	r0, r7
 800c6f0:	f7ff ff62 	bl	800c5b8 <__sfmoreglue>
 800c6f4:	4604      	mov	r4, r0
 800c6f6:	6030      	str	r0, [r6, #0]
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	d1d5      	bne.n	800c6a8 <__sfp+0x24>
 800c6fc:	f7ff ff78 	bl	800c5f0 <__sfp_lock_release>
 800c700:	230c      	movs	r3, #12
 800c702:	603b      	str	r3, [r7, #0]
 800c704:	e7ee      	b.n	800c6e4 <__sfp+0x60>
 800c706:	bf00      	nop
 800c708:	0800e0a8 	.word	0x0800e0a8
 800c70c:	ffff0001 	.word	0xffff0001

0800c710 <_fwalk_reent>:
 800c710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c714:	4606      	mov	r6, r0
 800c716:	4688      	mov	r8, r1
 800c718:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c71c:	2700      	movs	r7, #0
 800c71e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c722:	f1b9 0901 	subs.w	r9, r9, #1
 800c726:	d505      	bpl.n	800c734 <_fwalk_reent+0x24>
 800c728:	6824      	ldr	r4, [r4, #0]
 800c72a:	2c00      	cmp	r4, #0
 800c72c:	d1f7      	bne.n	800c71e <_fwalk_reent+0xe>
 800c72e:	4638      	mov	r0, r7
 800c730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c734:	89ab      	ldrh	r3, [r5, #12]
 800c736:	2b01      	cmp	r3, #1
 800c738:	d907      	bls.n	800c74a <_fwalk_reent+0x3a>
 800c73a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c73e:	3301      	adds	r3, #1
 800c740:	d003      	beq.n	800c74a <_fwalk_reent+0x3a>
 800c742:	4629      	mov	r1, r5
 800c744:	4630      	mov	r0, r6
 800c746:	47c0      	blx	r8
 800c748:	4307      	orrs	r7, r0
 800c74a:	3568      	adds	r5, #104	; 0x68
 800c74c:	e7e9      	b.n	800c722 <_fwalk_reent+0x12>

0800c74e <__retarget_lock_init_recursive>:
 800c74e:	4770      	bx	lr

0800c750 <__retarget_lock_acquire_recursive>:
 800c750:	4770      	bx	lr

0800c752 <__retarget_lock_release_recursive>:
 800c752:	4770      	bx	lr

0800c754 <__swhatbuf_r>:
 800c754:	b570      	push	{r4, r5, r6, lr}
 800c756:	460e      	mov	r6, r1
 800c758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c75c:	2900      	cmp	r1, #0
 800c75e:	b096      	sub	sp, #88	; 0x58
 800c760:	4614      	mov	r4, r2
 800c762:	461d      	mov	r5, r3
 800c764:	da08      	bge.n	800c778 <__swhatbuf_r+0x24>
 800c766:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c76a:	2200      	movs	r2, #0
 800c76c:	602a      	str	r2, [r5, #0]
 800c76e:	061a      	lsls	r2, r3, #24
 800c770:	d410      	bmi.n	800c794 <__swhatbuf_r+0x40>
 800c772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c776:	e00e      	b.n	800c796 <__swhatbuf_r+0x42>
 800c778:	466a      	mov	r2, sp
 800c77a:	f000 f903 	bl	800c984 <_fstat_r>
 800c77e:	2800      	cmp	r0, #0
 800c780:	dbf1      	blt.n	800c766 <__swhatbuf_r+0x12>
 800c782:	9a01      	ldr	r2, [sp, #4]
 800c784:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c788:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c78c:	425a      	negs	r2, r3
 800c78e:	415a      	adcs	r2, r3
 800c790:	602a      	str	r2, [r5, #0]
 800c792:	e7ee      	b.n	800c772 <__swhatbuf_r+0x1e>
 800c794:	2340      	movs	r3, #64	; 0x40
 800c796:	2000      	movs	r0, #0
 800c798:	6023      	str	r3, [r4, #0]
 800c79a:	b016      	add	sp, #88	; 0x58
 800c79c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c7a0 <__smakebuf_r>:
 800c7a0:	898b      	ldrh	r3, [r1, #12]
 800c7a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7a4:	079d      	lsls	r5, r3, #30
 800c7a6:	4606      	mov	r6, r0
 800c7a8:	460c      	mov	r4, r1
 800c7aa:	d507      	bpl.n	800c7bc <__smakebuf_r+0x1c>
 800c7ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	6123      	str	r3, [r4, #16]
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	6163      	str	r3, [r4, #20]
 800c7b8:	b002      	add	sp, #8
 800c7ba:	bd70      	pop	{r4, r5, r6, pc}
 800c7bc:	ab01      	add	r3, sp, #4
 800c7be:	466a      	mov	r2, sp
 800c7c0:	f7ff ffc8 	bl	800c754 <__swhatbuf_r>
 800c7c4:	9900      	ldr	r1, [sp, #0]
 800c7c6:	4605      	mov	r5, r0
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	f7ff f959 	bl	800ba80 <_malloc_r>
 800c7ce:	b948      	cbnz	r0, 800c7e4 <__smakebuf_r+0x44>
 800c7d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7d4:	059a      	lsls	r2, r3, #22
 800c7d6:	d4ef      	bmi.n	800c7b8 <__smakebuf_r+0x18>
 800c7d8:	f023 0303 	bic.w	r3, r3, #3
 800c7dc:	f043 0302 	orr.w	r3, r3, #2
 800c7e0:	81a3      	strh	r3, [r4, #12]
 800c7e2:	e7e3      	b.n	800c7ac <__smakebuf_r+0xc>
 800c7e4:	4b0d      	ldr	r3, [pc, #52]	; (800c81c <__smakebuf_r+0x7c>)
 800c7e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c7e8:	89a3      	ldrh	r3, [r4, #12]
 800c7ea:	6020      	str	r0, [r4, #0]
 800c7ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7f0:	81a3      	strh	r3, [r4, #12]
 800c7f2:	9b00      	ldr	r3, [sp, #0]
 800c7f4:	6163      	str	r3, [r4, #20]
 800c7f6:	9b01      	ldr	r3, [sp, #4]
 800c7f8:	6120      	str	r0, [r4, #16]
 800c7fa:	b15b      	cbz	r3, 800c814 <__smakebuf_r+0x74>
 800c7fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c800:	4630      	mov	r0, r6
 800c802:	f000 f8d1 	bl	800c9a8 <_isatty_r>
 800c806:	b128      	cbz	r0, 800c814 <__smakebuf_r+0x74>
 800c808:	89a3      	ldrh	r3, [r4, #12]
 800c80a:	f023 0303 	bic.w	r3, r3, #3
 800c80e:	f043 0301 	orr.w	r3, r3, #1
 800c812:	81a3      	strh	r3, [r4, #12]
 800c814:	89a0      	ldrh	r0, [r4, #12]
 800c816:	4305      	orrs	r5, r0
 800c818:	81a5      	strh	r5, [r4, #12]
 800c81a:	e7cd      	b.n	800c7b8 <__smakebuf_r+0x18>
 800c81c:	0800c5ad 	.word	0x0800c5ad

0800c820 <_malloc_usable_size_r>:
 800c820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c824:	1f18      	subs	r0, r3, #4
 800c826:	2b00      	cmp	r3, #0
 800c828:	bfbc      	itt	lt
 800c82a:	580b      	ldrlt	r3, [r1, r0]
 800c82c:	18c0      	addlt	r0, r0, r3
 800c82e:	4770      	bx	lr

0800c830 <_raise_r>:
 800c830:	291f      	cmp	r1, #31
 800c832:	b538      	push	{r3, r4, r5, lr}
 800c834:	4604      	mov	r4, r0
 800c836:	460d      	mov	r5, r1
 800c838:	d904      	bls.n	800c844 <_raise_r+0x14>
 800c83a:	2316      	movs	r3, #22
 800c83c:	6003      	str	r3, [r0, #0]
 800c83e:	f04f 30ff 	mov.w	r0, #4294967295
 800c842:	bd38      	pop	{r3, r4, r5, pc}
 800c844:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c846:	b112      	cbz	r2, 800c84e <_raise_r+0x1e>
 800c848:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c84c:	b94b      	cbnz	r3, 800c862 <_raise_r+0x32>
 800c84e:	4620      	mov	r0, r4
 800c850:	f000 f830 	bl	800c8b4 <_getpid_r>
 800c854:	462a      	mov	r2, r5
 800c856:	4601      	mov	r1, r0
 800c858:	4620      	mov	r0, r4
 800c85a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c85e:	f000 b817 	b.w	800c890 <_kill_r>
 800c862:	2b01      	cmp	r3, #1
 800c864:	d00a      	beq.n	800c87c <_raise_r+0x4c>
 800c866:	1c59      	adds	r1, r3, #1
 800c868:	d103      	bne.n	800c872 <_raise_r+0x42>
 800c86a:	2316      	movs	r3, #22
 800c86c:	6003      	str	r3, [r0, #0]
 800c86e:	2001      	movs	r0, #1
 800c870:	e7e7      	b.n	800c842 <_raise_r+0x12>
 800c872:	2400      	movs	r4, #0
 800c874:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c878:	4628      	mov	r0, r5
 800c87a:	4798      	blx	r3
 800c87c:	2000      	movs	r0, #0
 800c87e:	e7e0      	b.n	800c842 <_raise_r+0x12>

0800c880 <raise>:
 800c880:	4b02      	ldr	r3, [pc, #8]	; (800c88c <raise+0xc>)
 800c882:	4601      	mov	r1, r0
 800c884:	6818      	ldr	r0, [r3, #0]
 800c886:	f7ff bfd3 	b.w	800c830 <_raise_r>
 800c88a:	bf00      	nop
 800c88c:	2000020c 	.word	0x2000020c

0800c890 <_kill_r>:
 800c890:	b538      	push	{r3, r4, r5, lr}
 800c892:	4d07      	ldr	r5, [pc, #28]	; (800c8b0 <_kill_r+0x20>)
 800c894:	2300      	movs	r3, #0
 800c896:	4604      	mov	r4, r0
 800c898:	4608      	mov	r0, r1
 800c89a:	4611      	mov	r1, r2
 800c89c:	602b      	str	r3, [r5, #0]
 800c89e:	f7f6 f829 	bl	80028f4 <_kill>
 800c8a2:	1c43      	adds	r3, r0, #1
 800c8a4:	d102      	bne.n	800c8ac <_kill_r+0x1c>
 800c8a6:	682b      	ldr	r3, [r5, #0]
 800c8a8:	b103      	cbz	r3, 800c8ac <_kill_r+0x1c>
 800c8aa:	6023      	str	r3, [r4, #0]
 800c8ac:	bd38      	pop	{r3, r4, r5, pc}
 800c8ae:	bf00      	nop
 800c8b0:	20000ed4 	.word	0x20000ed4

0800c8b4 <_getpid_r>:
 800c8b4:	f7f6 b816 	b.w	80028e4 <_getpid>

0800c8b8 <__sread>:
 800c8b8:	b510      	push	{r4, lr}
 800c8ba:	460c      	mov	r4, r1
 800c8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8c0:	f000 f894 	bl	800c9ec <_read_r>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	bfab      	itete	ge
 800c8c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c8ca:	89a3      	ldrhlt	r3, [r4, #12]
 800c8cc:	181b      	addge	r3, r3, r0
 800c8ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c8d2:	bfac      	ite	ge
 800c8d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c8d6:	81a3      	strhlt	r3, [r4, #12]
 800c8d8:	bd10      	pop	{r4, pc}

0800c8da <__swrite>:
 800c8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8de:	461f      	mov	r7, r3
 800c8e0:	898b      	ldrh	r3, [r1, #12]
 800c8e2:	05db      	lsls	r3, r3, #23
 800c8e4:	4605      	mov	r5, r0
 800c8e6:	460c      	mov	r4, r1
 800c8e8:	4616      	mov	r6, r2
 800c8ea:	d505      	bpl.n	800c8f8 <__swrite+0x1e>
 800c8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8f0:	2302      	movs	r3, #2
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f000 f868 	bl	800c9c8 <_lseek_r>
 800c8f8:	89a3      	ldrh	r3, [r4, #12]
 800c8fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c902:	81a3      	strh	r3, [r4, #12]
 800c904:	4632      	mov	r2, r6
 800c906:	463b      	mov	r3, r7
 800c908:	4628      	mov	r0, r5
 800c90a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c90e:	f000 b817 	b.w	800c940 <_write_r>

0800c912 <__sseek>:
 800c912:	b510      	push	{r4, lr}
 800c914:	460c      	mov	r4, r1
 800c916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c91a:	f000 f855 	bl	800c9c8 <_lseek_r>
 800c91e:	1c43      	adds	r3, r0, #1
 800c920:	89a3      	ldrh	r3, [r4, #12]
 800c922:	bf15      	itete	ne
 800c924:	6560      	strne	r0, [r4, #84]	; 0x54
 800c926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c92a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c92e:	81a3      	strheq	r3, [r4, #12]
 800c930:	bf18      	it	ne
 800c932:	81a3      	strhne	r3, [r4, #12]
 800c934:	bd10      	pop	{r4, pc}

0800c936 <__sclose>:
 800c936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c93a:	f000 b813 	b.w	800c964 <_close_r>
	...

0800c940 <_write_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	4d07      	ldr	r5, [pc, #28]	; (800c960 <_write_r+0x20>)
 800c944:	4604      	mov	r4, r0
 800c946:	4608      	mov	r0, r1
 800c948:	4611      	mov	r1, r2
 800c94a:	2200      	movs	r2, #0
 800c94c:	602a      	str	r2, [r5, #0]
 800c94e:	461a      	mov	r2, r3
 800c950:	f7f6 f807 	bl	8002962 <_write>
 800c954:	1c43      	adds	r3, r0, #1
 800c956:	d102      	bne.n	800c95e <_write_r+0x1e>
 800c958:	682b      	ldr	r3, [r5, #0]
 800c95a:	b103      	cbz	r3, 800c95e <_write_r+0x1e>
 800c95c:	6023      	str	r3, [r4, #0]
 800c95e:	bd38      	pop	{r3, r4, r5, pc}
 800c960:	20000ed4 	.word	0x20000ed4

0800c964 <_close_r>:
 800c964:	b538      	push	{r3, r4, r5, lr}
 800c966:	4d06      	ldr	r5, [pc, #24]	; (800c980 <_close_r+0x1c>)
 800c968:	2300      	movs	r3, #0
 800c96a:	4604      	mov	r4, r0
 800c96c:	4608      	mov	r0, r1
 800c96e:	602b      	str	r3, [r5, #0]
 800c970:	f7f6 f813 	bl	800299a <_close>
 800c974:	1c43      	adds	r3, r0, #1
 800c976:	d102      	bne.n	800c97e <_close_r+0x1a>
 800c978:	682b      	ldr	r3, [r5, #0]
 800c97a:	b103      	cbz	r3, 800c97e <_close_r+0x1a>
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	bd38      	pop	{r3, r4, r5, pc}
 800c980:	20000ed4 	.word	0x20000ed4

0800c984 <_fstat_r>:
 800c984:	b538      	push	{r3, r4, r5, lr}
 800c986:	4d07      	ldr	r5, [pc, #28]	; (800c9a4 <_fstat_r+0x20>)
 800c988:	2300      	movs	r3, #0
 800c98a:	4604      	mov	r4, r0
 800c98c:	4608      	mov	r0, r1
 800c98e:	4611      	mov	r1, r2
 800c990:	602b      	str	r3, [r5, #0]
 800c992:	f7f6 f80e 	bl	80029b2 <_fstat>
 800c996:	1c43      	adds	r3, r0, #1
 800c998:	d102      	bne.n	800c9a0 <_fstat_r+0x1c>
 800c99a:	682b      	ldr	r3, [r5, #0]
 800c99c:	b103      	cbz	r3, 800c9a0 <_fstat_r+0x1c>
 800c99e:	6023      	str	r3, [r4, #0]
 800c9a0:	bd38      	pop	{r3, r4, r5, pc}
 800c9a2:	bf00      	nop
 800c9a4:	20000ed4 	.word	0x20000ed4

0800c9a8 <_isatty_r>:
 800c9a8:	b538      	push	{r3, r4, r5, lr}
 800c9aa:	4d06      	ldr	r5, [pc, #24]	; (800c9c4 <_isatty_r+0x1c>)
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	4608      	mov	r0, r1
 800c9b2:	602b      	str	r3, [r5, #0]
 800c9b4:	f7f6 f80d 	bl	80029d2 <_isatty>
 800c9b8:	1c43      	adds	r3, r0, #1
 800c9ba:	d102      	bne.n	800c9c2 <_isatty_r+0x1a>
 800c9bc:	682b      	ldr	r3, [r5, #0]
 800c9be:	b103      	cbz	r3, 800c9c2 <_isatty_r+0x1a>
 800c9c0:	6023      	str	r3, [r4, #0]
 800c9c2:	bd38      	pop	{r3, r4, r5, pc}
 800c9c4:	20000ed4 	.word	0x20000ed4

0800c9c8 <_lseek_r>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	4d07      	ldr	r5, [pc, #28]	; (800c9e8 <_lseek_r+0x20>)
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	4608      	mov	r0, r1
 800c9d0:	4611      	mov	r1, r2
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	602a      	str	r2, [r5, #0]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	f7f6 f806 	bl	80029e8 <_lseek>
 800c9dc:	1c43      	adds	r3, r0, #1
 800c9de:	d102      	bne.n	800c9e6 <_lseek_r+0x1e>
 800c9e0:	682b      	ldr	r3, [r5, #0]
 800c9e2:	b103      	cbz	r3, 800c9e6 <_lseek_r+0x1e>
 800c9e4:	6023      	str	r3, [r4, #0]
 800c9e6:	bd38      	pop	{r3, r4, r5, pc}
 800c9e8:	20000ed4 	.word	0x20000ed4

0800c9ec <_read_r>:
 800c9ec:	b538      	push	{r3, r4, r5, lr}
 800c9ee:	4d07      	ldr	r5, [pc, #28]	; (800ca0c <_read_r+0x20>)
 800c9f0:	4604      	mov	r4, r0
 800c9f2:	4608      	mov	r0, r1
 800c9f4:	4611      	mov	r1, r2
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	602a      	str	r2, [r5, #0]
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	f7f5 ff94 	bl	8002928 <_read>
 800ca00:	1c43      	adds	r3, r0, #1
 800ca02:	d102      	bne.n	800ca0a <_read_r+0x1e>
 800ca04:	682b      	ldr	r3, [r5, #0]
 800ca06:	b103      	cbz	r3, 800ca0a <_read_r+0x1e>
 800ca08:	6023      	str	r3, [r4, #0]
 800ca0a:	bd38      	pop	{r3, r4, r5, pc}
 800ca0c:	20000ed4 	.word	0x20000ed4

0800ca10 <atan>:
 800ca10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca14:	ec55 4b10 	vmov	r4, r5, d0
 800ca18:	4bc3      	ldr	r3, [pc, #780]	; (800cd28 <atan+0x318>)
 800ca1a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ca1e:	429e      	cmp	r6, r3
 800ca20:	46ab      	mov	fp, r5
 800ca22:	dd18      	ble.n	800ca56 <atan+0x46>
 800ca24:	4bc1      	ldr	r3, [pc, #772]	; (800cd2c <atan+0x31c>)
 800ca26:	429e      	cmp	r6, r3
 800ca28:	dc01      	bgt.n	800ca2e <atan+0x1e>
 800ca2a:	d109      	bne.n	800ca40 <atan+0x30>
 800ca2c:	b144      	cbz	r4, 800ca40 <atan+0x30>
 800ca2e:	4622      	mov	r2, r4
 800ca30:	462b      	mov	r3, r5
 800ca32:	4620      	mov	r0, r4
 800ca34:	4629      	mov	r1, r5
 800ca36:	f7f3 fc31 	bl	800029c <__adddf3>
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	460d      	mov	r5, r1
 800ca3e:	e006      	b.n	800ca4e <atan+0x3e>
 800ca40:	f1bb 0f00 	cmp.w	fp, #0
 800ca44:	f300 8131 	bgt.w	800ccaa <atan+0x29a>
 800ca48:	a59b      	add	r5, pc, #620	; (adr r5, 800ccb8 <atan+0x2a8>)
 800ca4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ca4e:	ec45 4b10 	vmov	d0, r4, r5
 800ca52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca56:	4bb6      	ldr	r3, [pc, #728]	; (800cd30 <atan+0x320>)
 800ca58:	429e      	cmp	r6, r3
 800ca5a:	dc14      	bgt.n	800ca86 <atan+0x76>
 800ca5c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ca60:	429e      	cmp	r6, r3
 800ca62:	dc0d      	bgt.n	800ca80 <atan+0x70>
 800ca64:	a396      	add	r3, pc, #600	; (adr r3, 800ccc0 <atan+0x2b0>)
 800ca66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6a:	ee10 0a10 	vmov	r0, s0
 800ca6e:	4629      	mov	r1, r5
 800ca70:	f7f3 fc14 	bl	800029c <__adddf3>
 800ca74:	4baf      	ldr	r3, [pc, #700]	; (800cd34 <atan+0x324>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	f7f4 f856 	bl	8000b28 <__aeabi_dcmpgt>
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	d1e6      	bne.n	800ca4e <atan+0x3e>
 800ca80:	f04f 3aff 	mov.w	sl, #4294967295
 800ca84:	e02b      	b.n	800cade <atan+0xce>
 800ca86:	f000 f9b7 	bl	800cdf8 <fabs>
 800ca8a:	4bab      	ldr	r3, [pc, #684]	; (800cd38 <atan+0x328>)
 800ca8c:	429e      	cmp	r6, r3
 800ca8e:	ec55 4b10 	vmov	r4, r5, d0
 800ca92:	f300 80bf 	bgt.w	800cc14 <atan+0x204>
 800ca96:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ca9a:	429e      	cmp	r6, r3
 800ca9c:	f300 80a0 	bgt.w	800cbe0 <atan+0x1d0>
 800caa0:	ee10 2a10 	vmov	r2, s0
 800caa4:	ee10 0a10 	vmov	r0, s0
 800caa8:	462b      	mov	r3, r5
 800caaa:	4629      	mov	r1, r5
 800caac:	f7f3 fbf6 	bl	800029c <__adddf3>
 800cab0:	4ba0      	ldr	r3, [pc, #640]	; (800cd34 <atan+0x324>)
 800cab2:	2200      	movs	r2, #0
 800cab4:	f7f3 fbf0 	bl	8000298 <__aeabi_dsub>
 800cab8:	2200      	movs	r2, #0
 800caba:	4606      	mov	r6, r0
 800cabc:	460f      	mov	r7, r1
 800cabe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cac2:	4620      	mov	r0, r4
 800cac4:	4629      	mov	r1, r5
 800cac6:	f7f3 fbe9 	bl	800029c <__adddf3>
 800caca:	4602      	mov	r2, r0
 800cacc:	460b      	mov	r3, r1
 800cace:	4630      	mov	r0, r6
 800cad0:	4639      	mov	r1, r7
 800cad2:	f7f3 fec3 	bl	800085c <__aeabi_ddiv>
 800cad6:	f04f 0a00 	mov.w	sl, #0
 800cada:	4604      	mov	r4, r0
 800cadc:	460d      	mov	r5, r1
 800cade:	4622      	mov	r2, r4
 800cae0:	462b      	mov	r3, r5
 800cae2:	4620      	mov	r0, r4
 800cae4:	4629      	mov	r1, r5
 800cae6:	f7f3 fd8f 	bl	8000608 <__aeabi_dmul>
 800caea:	4602      	mov	r2, r0
 800caec:	460b      	mov	r3, r1
 800caee:	4680      	mov	r8, r0
 800caf0:	4689      	mov	r9, r1
 800caf2:	f7f3 fd89 	bl	8000608 <__aeabi_dmul>
 800caf6:	a374      	add	r3, pc, #464	; (adr r3, 800ccc8 <atan+0x2b8>)
 800caf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafc:	4606      	mov	r6, r0
 800cafe:	460f      	mov	r7, r1
 800cb00:	f7f3 fd82 	bl	8000608 <__aeabi_dmul>
 800cb04:	a372      	add	r3, pc, #456	; (adr r3, 800ccd0 <atan+0x2c0>)
 800cb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0a:	f7f3 fbc7 	bl	800029c <__adddf3>
 800cb0e:	4632      	mov	r2, r6
 800cb10:	463b      	mov	r3, r7
 800cb12:	f7f3 fd79 	bl	8000608 <__aeabi_dmul>
 800cb16:	a370      	add	r3, pc, #448	; (adr r3, 800ccd8 <atan+0x2c8>)
 800cb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1c:	f7f3 fbbe 	bl	800029c <__adddf3>
 800cb20:	4632      	mov	r2, r6
 800cb22:	463b      	mov	r3, r7
 800cb24:	f7f3 fd70 	bl	8000608 <__aeabi_dmul>
 800cb28:	a36d      	add	r3, pc, #436	; (adr r3, 800cce0 <atan+0x2d0>)
 800cb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2e:	f7f3 fbb5 	bl	800029c <__adddf3>
 800cb32:	4632      	mov	r2, r6
 800cb34:	463b      	mov	r3, r7
 800cb36:	f7f3 fd67 	bl	8000608 <__aeabi_dmul>
 800cb3a:	a36b      	add	r3, pc, #428	; (adr r3, 800cce8 <atan+0x2d8>)
 800cb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb40:	f7f3 fbac 	bl	800029c <__adddf3>
 800cb44:	4632      	mov	r2, r6
 800cb46:	463b      	mov	r3, r7
 800cb48:	f7f3 fd5e 	bl	8000608 <__aeabi_dmul>
 800cb4c:	a368      	add	r3, pc, #416	; (adr r3, 800ccf0 <atan+0x2e0>)
 800cb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb52:	f7f3 fba3 	bl	800029c <__adddf3>
 800cb56:	4642      	mov	r2, r8
 800cb58:	464b      	mov	r3, r9
 800cb5a:	f7f3 fd55 	bl	8000608 <__aeabi_dmul>
 800cb5e:	a366      	add	r3, pc, #408	; (adr r3, 800ccf8 <atan+0x2e8>)
 800cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb64:	4680      	mov	r8, r0
 800cb66:	4689      	mov	r9, r1
 800cb68:	4630      	mov	r0, r6
 800cb6a:	4639      	mov	r1, r7
 800cb6c:	f7f3 fd4c 	bl	8000608 <__aeabi_dmul>
 800cb70:	a363      	add	r3, pc, #396	; (adr r3, 800cd00 <atan+0x2f0>)
 800cb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb76:	f7f3 fb8f 	bl	8000298 <__aeabi_dsub>
 800cb7a:	4632      	mov	r2, r6
 800cb7c:	463b      	mov	r3, r7
 800cb7e:	f7f3 fd43 	bl	8000608 <__aeabi_dmul>
 800cb82:	a361      	add	r3, pc, #388	; (adr r3, 800cd08 <atan+0x2f8>)
 800cb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb88:	f7f3 fb86 	bl	8000298 <__aeabi_dsub>
 800cb8c:	4632      	mov	r2, r6
 800cb8e:	463b      	mov	r3, r7
 800cb90:	f7f3 fd3a 	bl	8000608 <__aeabi_dmul>
 800cb94:	a35e      	add	r3, pc, #376	; (adr r3, 800cd10 <atan+0x300>)
 800cb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9a:	f7f3 fb7d 	bl	8000298 <__aeabi_dsub>
 800cb9e:	4632      	mov	r2, r6
 800cba0:	463b      	mov	r3, r7
 800cba2:	f7f3 fd31 	bl	8000608 <__aeabi_dmul>
 800cba6:	a35c      	add	r3, pc, #368	; (adr r3, 800cd18 <atan+0x308>)
 800cba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbac:	f7f3 fb74 	bl	8000298 <__aeabi_dsub>
 800cbb0:	4632      	mov	r2, r6
 800cbb2:	463b      	mov	r3, r7
 800cbb4:	f7f3 fd28 	bl	8000608 <__aeabi_dmul>
 800cbb8:	4602      	mov	r2, r0
 800cbba:	460b      	mov	r3, r1
 800cbbc:	4640      	mov	r0, r8
 800cbbe:	4649      	mov	r1, r9
 800cbc0:	f7f3 fb6c 	bl	800029c <__adddf3>
 800cbc4:	4622      	mov	r2, r4
 800cbc6:	462b      	mov	r3, r5
 800cbc8:	f7f3 fd1e 	bl	8000608 <__aeabi_dmul>
 800cbcc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	d14b      	bne.n	800cc6e <atan+0x25e>
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	4629      	mov	r1, r5
 800cbda:	f7f3 fb5d 	bl	8000298 <__aeabi_dsub>
 800cbde:	e72c      	b.n	800ca3a <atan+0x2a>
 800cbe0:	ee10 0a10 	vmov	r0, s0
 800cbe4:	4b53      	ldr	r3, [pc, #332]	; (800cd34 <atan+0x324>)
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	4629      	mov	r1, r5
 800cbea:	f7f3 fb55 	bl	8000298 <__aeabi_dsub>
 800cbee:	4b51      	ldr	r3, [pc, #324]	; (800cd34 <atan+0x324>)
 800cbf0:	4606      	mov	r6, r0
 800cbf2:	460f      	mov	r7, r1
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	4629      	mov	r1, r5
 800cbfa:	f7f3 fb4f 	bl	800029c <__adddf3>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	460b      	mov	r3, r1
 800cc02:	4630      	mov	r0, r6
 800cc04:	4639      	mov	r1, r7
 800cc06:	f7f3 fe29 	bl	800085c <__aeabi_ddiv>
 800cc0a:	f04f 0a01 	mov.w	sl, #1
 800cc0e:	4604      	mov	r4, r0
 800cc10:	460d      	mov	r5, r1
 800cc12:	e764      	b.n	800cade <atan+0xce>
 800cc14:	4b49      	ldr	r3, [pc, #292]	; (800cd3c <atan+0x32c>)
 800cc16:	429e      	cmp	r6, r3
 800cc18:	da1d      	bge.n	800cc56 <atan+0x246>
 800cc1a:	ee10 0a10 	vmov	r0, s0
 800cc1e:	4b48      	ldr	r3, [pc, #288]	; (800cd40 <atan+0x330>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	4629      	mov	r1, r5
 800cc24:	f7f3 fb38 	bl	8000298 <__aeabi_dsub>
 800cc28:	4b45      	ldr	r3, [pc, #276]	; (800cd40 <atan+0x330>)
 800cc2a:	4606      	mov	r6, r0
 800cc2c:	460f      	mov	r7, r1
 800cc2e:	2200      	movs	r2, #0
 800cc30:	4620      	mov	r0, r4
 800cc32:	4629      	mov	r1, r5
 800cc34:	f7f3 fce8 	bl	8000608 <__aeabi_dmul>
 800cc38:	4b3e      	ldr	r3, [pc, #248]	; (800cd34 <atan+0x324>)
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f7f3 fb2e 	bl	800029c <__adddf3>
 800cc40:	4602      	mov	r2, r0
 800cc42:	460b      	mov	r3, r1
 800cc44:	4630      	mov	r0, r6
 800cc46:	4639      	mov	r1, r7
 800cc48:	f7f3 fe08 	bl	800085c <__aeabi_ddiv>
 800cc4c:	f04f 0a02 	mov.w	sl, #2
 800cc50:	4604      	mov	r4, r0
 800cc52:	460d      	mov	r5, r1
 800cc54:	e743      	b.n	800cade <atan+0xce>
 800cc56:	462b      	mov	r3, r5
 800cc58:	ee10 2a10 	vmov	r2, s0
 800cc5c:	4939      	ldr	r1, [pc, #228]	; (800cd44 <atan+0x334>)
 800cc5e:	2000      	movs	r0, #0
 800cc60:	f7f3 fdfc 	bl	800085c <__aeabi_ddiv>
 800cc64:	f04f 0a03 	mov.w	sl, #3
 800cc68:	4604      	mov	r4, r0
 800cc6a:	460d      	mov	r5, r1
 800cc6c:	e737      	b.n	800cade <atan+0xce>
 800cc6e:	4b36      	ldr	r3, [pc, #216]	; (800cd48 <atan+0x338>)
 800cc70:	4e36      	ldr	r6, [pc, #216]	; (800cd4c <atan+0x33c>)
 800cc72:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cc76:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800cc7a:	e9da 2300 	ldrd	r2, r3, [sl]
 800cc7e:	f7f3 fb0b 	bl	8000298 <__aeabi_dsub>
 800cc82:	4622      	mov	r2, r4
 800cc84:	462b      	mov	r3, r5
 800cc86:	f7f3 fb07 	bl	8000298 <__aeabi_dsub>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cc92:	f7f3 fb01 	bl	8000298 <__aeabi_dsub>
 800cc96:	f1bb 0f00 	cmp.w	fp, #0
 800cc9a:	4604      	mov	r4, r0
 800cc9c:	460d      	mov	r5, r1
 800cc9e:	f6bf aed6 	bge.w	800ca4e <atan+0x3e>
 800cca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cca6:	461d      	mov	r5, r3
 800cca8:	e6d1      	b.n	800ca4e <atan+0x3e>
 800ccaa:	a51d      	add	r5, pc, #116	; (adr r5, 800cd20 <atan+0x310>)
 800ccac:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ccb0:	e6cd      	b.n	800ca4e <atan+0x3e>
 800ccb2:	bf00      	nop
 800ccb4:	f3af 8000 	nop.w
 800ccb8:	54442d18 	.word	0x54442d18
 800ccbc:	bff921fb 	.word	0xbff921fb
 800ccc0:	8800759c 	.word	0x8800759c
 800ccc4:	7e37e43c 	.word	0x7e37e43c
 800ccc8:	e322da11 	.word	0xe322da11
 800cccc:	3f90ad3a 	.word	0x3f90ad3a
 800ccd0:	24760deb 	.word	0x24760deb
 800ccd4:	3fa97b4b 	.word	0x3fa97b4b
 800ccd8:	a0d03d51 	.word	0xa0d03d51
 800ccdc:	3fb10d66 	.word	0x3fb10d66
 800cce0:	c54c206e 	.word	0xc54c206e
 800cce4:	3fb745cd 	.word	0x3fb745cd
 800cce8:	920083ff 	.word	0x920083ff
 800ccec:	3fc24924 	.word	0x3fc24924
 800ccf0:	5555550d 	.word	0x5555550d
 800ccf4:	3fd55555 	.word	0x3fd55555
 800ccf8:	2c6a6c2f 	.word	0x2c6a6c2f
 800ccfc:	bfa2b444 	.word	0xbfa2b444
 800cd00:	52defd9a 	.word	0x52defd9a
 800cd04:	3fadde2d 	.word	0x3fadde2d
 800cd08:	af749a6d 	.word	0xaf749a6d
 800cd0c:	3fb3b0f2 	.word	0x3fb3b0f2
 800cd10:	fe231671 	.word	0xfe231671
 800cd14:	3fbc71c6 	.word	0x3fbc71c6
 800cd18:	9998ebc4 	.word	0x9998ebc4
 800cd1c:	3fc99999 	.word	0x3fc99999
 800cd20:	54442d18 	.word	0x54442d18
 800cd24:	3ff921fb 	.word	0x3ff921fb
 800cd28:	440fffff 	.word	0x440fffff
 800cd2c:	7ff00000 	.word	0x7ff00000
 800cd30:	3fdbffff 	.word	0x3fdbffff
 800cd34:	3ff00000 	.word	0x3ff00000
 800cd38:	3ff2ffff 	.word	0x3ff2ffff
 800cd3c:	40038000 	.word	0x40038000
 800cd40:	3ff80000 	.word	0x3ff80000
 800cd44:	bff00000 	.word	0xbff00000
 800cd48:	0800e570 	.word	0x0800e570
 800cd4c:	0800e550 	.word	0x0800e550

0800cd50 <cos>:
 800cd50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd52:	ec53 2b10 	vmov	r2, r3, d0
 800cd56:	4826      	ldr	r0, [pc, #152]	; (800cdf0 <cos+0xa0>)
 800cd58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cd5c:	4281      	cmp	r1, r0
 800cd5e:	dc06      	bgt.n	800cd6e <cos+0x1e>
 800cd60:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800cde8 <cos+0x98>
 800cd64:	b005      	add	sp, #20
 800cd66:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd6a:	f000 bb95 	b.w	800d498 <__kernel_cos>
 800cd6e:	4821      	ldr	r0, [pc, #132]	; (800cdf4 <cos+0xa4>)
 800cd70:	4281      	cmp	r1, r0
 800cd72:	dd09      	ble.n	800cd88 <cos+0x38>
 800cd74:	ee10 0a10 	vmov	r0, s0
 800cd78:	4619      	mov	r1, r3
 800cd7a:	f7f3 fa8d 	bl	8000298 <__aeabi_dsub>
 800cd7e:	ec41 0b10 	vmov	d0, r0, r1
 800cd82:	b005      	add	sp, #20
 800cd84:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd88:	4668      	mov	r0, sp
 800cd8a:	f000 f8c5 	bl	800cf18 <__ieee754_rem_pio2>
 800cd8e:	f000 0003 	and.w	r0, r0, #3
 800cd92:	2801      	cmp	r0, #1
 800cd94:	d00b      	beq.n	800cdae <cos+0x5e>
 800cd96:	2802      	cmp	r0, #2
 800cd98:	d016      	beq.n	800cdc8 <cos+0x78>
 800cd9a:	b9e0      	cbnz	r0, 800cdd6 <cos+0x86>
 800cd9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cda0:	ed9d 0b00 	vldr	d0, [sp]
 800cda4:	f000 fb78 	bl	800d498 <__kernel_cos>
 800cda8:	ec51 0b10 	vmov	r0, r1, d0
 800cdac:	e7e7      	b.n	800cd7e <cos+0x2e>
 800cdae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cdb2:	ed9d 0b00 	vldr	d0, [sp]
 800cdb6:	f000 ff87 	bl	800dcc8 <__kernel_sin>
 800cdba:	ec53 2b10 	vmov	r2, r3, d0
 800cdbe:	ee10 0a10 	vmov	r0, s0
 800cdc2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cdc6:	e7da      	b.n	800cd7e <cos+0x2e>
 800cdc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cdcc:	ed9d 0b00 	vldr	d0, [sp]
 800cdd0:	f000 fb62 	bl	800d498 <__kernel_cos>
 800cdd4:	e7f1      	b.n	800cdba <cos+0x6a>
 800cdd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cdda:	ed9d 0b00 	vldr	d0, [sp]
 800cdde:	2001      	movs	r0, #1
 800cde0:	f000 ff72 	bl	800dcc8 <__kernel_sin>
 800cde4:	e7e0      	b.n	800cda8 <cos+0x58>
 800cde6:	bf00      	nop
	...
 800cdf0:	3fe921fb 	.word	0x3fe921fb
 800cdf4:	7fefffff 	.word	0x7fefffff

0800cdf8 <fabs>:
 800cdf8:	ec51 0b10 	vmov	r0, r1, d0
 800cdfc:	ee10 2a10 	vmov	r2, s0
 800ce00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce04:	ec43 2b10 	vmov	d0, r2, r3
 800ce08:	4770      	bx	lr
 800ce0a:	0000      	movs	r0, r0
 800ce0c:	0000      	movs	r0, r0
	...

0800ce10 <sin>:
 800ce10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce12:	ec53 2b10 	vmov	r2, r3, d0
 800ce16:	4828      	ldr	r0, [pc, #160]	; (800ceb8 <sin+0xa8>)
 800ce18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ce1c:	4281      	cmp	r1, r0
 800ce1e:	dc07      	bgt.n	800ce30 <sin+0x20>
 800ce20:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ceb0 <sin+0xa0>
 800ce24:	2000      	movs	r0, #0
 800ce26:	b005      	add	sp, #20
 800ce28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce2c:	f000 bf4c 	b.w	800dcc8 <__kernel_sin>
 800ce30:	4822      	ldr	r0, [pc, #136]	; (800cebc <sin+0xac>)
 800ce32:	4281      	cmp	r1, r0
 800ce34:	dd09      	ble.n	800ce4a <sin+0x3a>
 800ce36:	ee10 0a10 	vmov	r0, s0
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	f7f3 fa2c 	bl	8000298 <__aeabi_dsub>
 800ce40:	ec41 0b10 	vmov	d0, r0, r1
 800ce44:	b005      	add	sp, #20
 800ce46:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce4a:	4668      	mov	r0, sp
 800ce4c:	f000 f864 	bl	800cf18 <__ieee754_rem_pio2>
 800ce50:	f000 0003 	and.w	r0, r0, #3
 800ce54:	2801      	cmp	r0, #1
 800ce56:	d00c      	beq.n	800ce72 <sin+0x62>
 800ce58:	2802      	cmp	r0, #2
 800ce5a:	d011      	beq.n	800ce80 <sin+0x70>
 800ce5c:	b9f0      	cbnz	r0, 800ce9c <sin+0x8c>
 800ce5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce62:	ed9d 0b00 	vldr	d0, [sp]
 800ce66:	2001      	movs	r0, #1
 800ce68:	f000 ff2e 	bl	800dcc8 <__kernel_sin>
 800ce6c:	ec51 0b10 	vmov	r0, r1, d0
 800ce70:	e7e6      	b.n	800ce40 <sin+0x30>
 800ce72:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce76:	ed9d 0b00 	vldr	d0, [sp]
 800ce7a:	f000 fb0d 	bl	800d498 <__kernel_cos>
 800ce7e:	e7f5      	b.n	800ce6c <sin+0x5c>
 800ce80:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce84:	ed9d 0b00 	vldr	d0, [sp]
 800ce88:	2001      	movs	r0, #1
 800ce8a:	f000 ff1d 	bl	800dcc8 <__kernel_sin>
 800ce8e:	ec53 2b10 	vmov	r2, r3, d0
 800ce92:	ee10 0a10 	vmov	r0, s0
 800ce96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ce9a:	e7d1      	b.n	800ce40 <sin+0x30>
 800ce9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cea0:	ed9d 0b00 	vldr	d0, [sp]
 800cea4:	f000 faf8 	bl	800d498 <__kernel_cos>
 800cea8:	e7f1      	b.n	800ce8e <sin+0x7e>
 800ceaa:	bf00      	nop
 800ceac:	f3af 8000 	nop.w
	...
 800ceb8:	3fe921fb 	.word	0x3fe921fb
 800cebc:	7fefffff 	.word	0x7fefffff

0800cec0 <sqrt>:
 800cec0:	b538      	push	{r3, r4, r5, lr}
 800cec2:	ed2d 8b02 	vpush	{d8}
 800cec6:	ec55 4b10 	vmov	r4, r5, d0
 800ceca:	f000 fa31 	bl	800d330 <__ieee754_sqrt>
 800cece:	4622      	mov	r2, r4
 800ced0:	462b      	mov	r3, r5
 800ced2:	4620      	mov	r0, r4
 800ced4:	4629      	mov	r1, r5
 800ced6:	eeb0 8a40 	vmov.f32	s16, s0
 800ceda:	eef0 8a60 	vmov.f32	s17, s1
 800cede:	f7f3 fe2d 	bl	8000b3c <__aeabi_dcmpun>
 800cee2:	b990      	cbnz	r0, 800cf0a <sqrt+0x4a>
 800cee4:	2200      	movs	r2, #0
 800cee6:	2300      	movs	r3, #0
 800cee8:	4620      	mov	r0, r4
 800ceea:	4629      	mov	r1, r5
 800ceec:	f7f3 fdfe 	bl	8000aec <__aeabi_dcmplt>
 800cef0:	b158      	cbz	r0, 800cf0a <sqrt+0x4a>
 800cef2:	f7fb f8ed 	bl	80080d0 <__errno>
 800cef6:	2321      	movs	r3, #33	; 0x21
 800cef8:	6003      	str	r3, [r0, #0]
 800cefa:	2200      	movs	r2, #0
 800cefc:	2300      	movs	r3, #0
 800cefe:	4610      	mov	r0, r2
 800cf00:	4619      	mov	r1, r3
 800cf02:	f7f3 fcab 	bl	800085c <__aeabi_ddiv>
 800cf06:	ec41 0b18 	vmov	d8, r0, r1
 800cf0a:	eeb0 0a48 	vmov.f32	s0, s16
 800cf0e:	eef0 0a68 	vmov.f32	s1, s17
 800cf12:	ecbd 8b02 	vpop	{d8}
 800cf16:	bd38      	pop	{r3, r4, r5, pc}

0800cf18 <__ieee754_rem_pio2>:
 800cf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf1c:	ed2d 8b02 	vpush	{d8}
 800cf20:	ec55 4b10 	vmov	r4, r5, d0
 800cf24:	4bca      	ldr	r3, [pc, #808]	; (800d250 <__ieee754_rem_pio2+0x338>)
 800cf26:	b08b      	sub	sp, #44	; 0x2c
 800cf28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cf2c:	4598      	cmp	r8, r3
 800cf2e:	4682      	mov	sl, r0
 800cf30:	9502      	str	r5, [sp, #8]
 800cf32:	dc08      	bgt.n	800cf46 <__ieee754_rem_pio2+0x2e>
 800cf34:	2200      	movs	r2, #0
 800cf36:	2300      	movs	r3, #0
 800cf38:	ed80 0b00 	vstr	d0, [r0]
 800cf3c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cf40:	f04f 0b00 	mov.w	fp, #0
 800cf44:	e028      	b.n	800cf98 <__ieee754_rem_pio2+0x80>
 800cf46:	4bc3      	ldr	r3, [pc, #780]	; (800d254 <__ieee754_rem_pio2+0x33c>)
 800cf48:	4598      	cmp	r8, r3
 800cf4a:	dc78      	bgt.n	800d03e <__ieee754_rem_pio2+0x126>
 800cf4c:	9b02      	ldr	r3, [sp, #8]
 800cf4e:	4ec2      	ldr	r6, [pc, #776]	; (800d258 <__ieee754_rem_pio2+0x340>)
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	ee10 0a10 	vmov	r0, s0
 800cf56:	a3b0      	add	r3, pc, #704	; (adr r3, 800d218 <__ieee754_rem_pio2+0x300>)
 800cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5c:	4629      	mov	r1, r5
 800cf5e:	dd39      	ble.n	800cfd4 <__ieee754_rem_pio2+0xbc>
 800cf60:	f7f3 f99a 	bl	8000298 <__aeabi_dsub>
 800cf64:	45b0      	cmp	r8, r6
 800cf66:	4604      	mov	r4, r0
 800cf68:	460d      	mov	r5, r1
 800cf6a:	d01b      	beq.n	800cfa4 <__ieee754_rem_pio2+0x8c>
 800cf6c:	a3ac      	add	r3, pc, #688	; (adr r3, 800d220 <__ieee754_rem_pio2+0x308>)
 800cf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf72:	f7f3 f991 	bl	8000298 <__aeabi_dsub>
 800cf76:	4602      	mov	r2, r0
 800cf78:	460b      	mov	r3, r1
 800cf7a:	e9ca 2300 	strd	r2, r3, [sl]
 800cf7e:	4620      	mov	r0, r4
 800cf80:	4629      	mov	r1, r5
 800cf82:	f7f3 f989 	bl	8000298 <__aeabi_dsub>
 800cf86:	a3a6      	add	r3, pc, #664	; (adr r3, 800d220 <__ieee754_rem_pio2+0x308>)
 800cf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8c:	f7f3 f984 	bl	8000298 <__aeabi_dsub>
 800cf90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cf94:	f04f 0b01 	mov.w	fp, #1
 800cf98:	4658      	mov	r0, fp
 800cf9a:	b00b      	add	sp, #44	; 0x2c
 800cf9c:	ecbd 8b02 	vpop	{d8}
 800cfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfa4:	a3a0      	add	r3, pc, #640	; (adr r3, 800d228 <__ieee754_rem_pio2+0x310>)
 800cfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfaa:	f7f3 f975 	bl	8000298 <__aeabi_dsub>
 800cfae:	a3a0      	add	r3, pc, #640	; (adr r3, 800d230 <__ieee754_rem_pio2+0x318>)
 800cfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	460d      	mov	r5, r1
 800cfb8:	f7f3 f96e 	bl	8000298 <__aeabi_dsub>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	e9ca 2300 	strd	r2, r3, [sl]
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	4629      	mov	r1, r5
 800cfc8:	f7f3 f966 	bl	8000298 <__aeabi_dsub>
 800cfcc:	a398      	add	r3, pc, #608	; (adr r3, 800d230 <__ieee754_rem_pio2+0x318>)
 800cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd2:	e7db      	b.n	800cf8c <__ieee754_rem_pio2+0x74>
 800cfd4:	f7f3 f962 	bl	800029c <__adddf3>
 800cfd8:	45b0      	cmp	r8, r6
 800cfda:	4604      	mov	r4, r0
 800cfdc:	460d      	mov	r5, r1
 800cfde:	d016      	beq.n	800d00e <__ieee754_rem_pio2+0xf6>
 800cfe0:	a38f      	add	r3, pc, #572	; (adr r3, 800d220 <__ieee754_rem_pio2+0x308>)
 800cfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe6:	f7f3 f959 	bl	800029c <__adddf3>
 800cfea:	4602      	mov	r2, r0
 800cfec:	460b      	mov	r3, r1
 800cfee:	e9ca 2300 	strd	r2, r3, [sl]
 800cff2:	4620      	mov	r0, r4
 800cff4:	4629      	mov	r1, r5
 800cff6:	f7f3 f94f 	bl	8000298 <__aeabi_dsub>
 800cffa:	a389      	add	r3, pc, #548	; (adr r3, 800d220 <__ieee754_rem_pio2+0x308>)
 800cffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d000:	f7f3 f94c 	bl	800029c <__adddf3>
 800d004:	f04f 3bff 	mov.w	fp, #4294967295
 800d008:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d00c:	e7c4      	b.n	800cf98 <__ieee754_rem_pio2+0x80>
 800d00e:	a386      	add	r3, pc, #536	; (adr r3, 800d228 <__ieee754_rem_pio2+0x310>)
 800d010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d014:	f7f3 f942 	bl	800029c <__adddf3>
 800d018:	a385      	add	r3, pc, #532	; (adr r3, 800d230 <__ieee754_rem_pio2+0x318>)
 800d01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01e:	4604      	mov	r4, r0
 800d020:	460d      	mov	r5, r1
 800d022:	f7f3 f93b 	bl	800029c <__adddf3>
 800d026:	4602      	mov	r2, r0
 800d028:	460b      	mov	r3, r1
 800d02a:	e9ca 2300 	strd	r2, r3, [sl]
 800d02e:	4620      	mov	r0, r4
 800d030:	4629      	mov	r1, r5
 800d032:	f7f3 f931 	bl	8000298 <__aeabi_dsub>
 800d036:	a37e      	add	r3, pc, #504	; (adr r3, 800d230 <__ieee754_rem_pio2+0x318>)
 800d038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03c:	e7e0      	b.n	800d000 <__ieee754_rem_pio2+0xe8>
 800d03e:	4b87      	ldr	r3, [pc, #540]	; (800d25c <__ieee754_rem_pio2+0x344>)
 800d040:	4598      	cmp	r8, r3
 800d042:	f300 80d9 	bgt.w	800d1f8 <__ieee754_rem_pio2+0x2e0>
 800d046:	f7ff fed7 	bl	800cdf8 <fabs>
 800d04a:	ec55 4b10 	vmov	r4, r5, d0
 800d04e:	ee10 0a10 	vmov	r0, s0
 800d052:	a379      	add	r3, pc, #484	; (adr r3, 800d238 <__ieee754_rem_pio2+0x320>)
 800d054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d058:	4629      	mov	r1, r5
 800d05a:	f7f3 fad5 	bl	8000608 <__aeabi_dmul>
 800d05e:	4b80      	ldr	r3, [pc, #512]	; (800d260 <__ieee754_rem_pio2+0x348>)
 800d060:	2200      	movs	r2, #0
 800d062:	f7f3 f91b 	bl	800029c <__adddf3>
 800d066:	f7f3 fd7f 	bl	8000b68 <__aeabi_d2iz>
 800d06a:	4683      	mov	fp, r0
 800d06c:	f7f3 fa62 	bl	8000534 <__aeabi_i2d>
 800d070:	4602      	mov	r2, r0
 800d072:	460b      	mov	r3, r1
 800d074:	ec43 2b18 	vmov	d8, r2, r3
 800d078:	a367      	add	r3, pc, #412	; (adr r3, 800d218 <__ieee754_rem_pio2+0x300>)
 800d07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07e:	f7f3 fac3 	bl	8000608 <__aeabi_dmul>
 800d082:	4602      	mov	r2, r0
 800d084:	460b      	mov	r3, r1
 800d086:	4620      	mov	r0, r4
 800d088:	4629      	mov	r1, r5
 800d08a:	f7f3 f905 	bl	8000298 <__aeabi_dsub>
 800d08e:	a364      	add	r3, pc, #400	; (adr r3, 800d220 <__ieee754_rem_pio2+0x308>)
 800d090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d094:	4606      	mov	r6, r0
 800d096:	460f      	mov	r7, r1
 800d098:	ec51 0b18 	vmov	r0, r1, d8
 800d09c:	f7f3 fab4 	bl	8000608 <__aeabi_dmul>
 800d0a0:	f1bb 0f1f 	cmp.w	fp, #31
 800d0a4:	4604      	mov	r4, r0
 800d0a6:	460d      	mov	r5, r1
 800d0a8:	dc0d      	bgt.n	800d0c6 <__ieee754_rem_pio2+0x1ae>
 800d0aa:	4b6e      	ldr	r3, [pc, #440]	; (800d264 <__ieee754_rem_pio2+0x34c>)
 800d0ac:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0b4:	4543      	cmp	r3, r8
 800d0b6:	d006      	beq.n	800d0c6 <__ieee754_rem_pio2+0x1ae>
 800d0b8:	4622      	mov	r2, r4
 800d0ba:	462b      	mov	r3, r5
 800d0bc:	4630      	mov	r0, r6
 800d0be:	4639      	mov	r1, r7
 800d0c0:	f7f3 f8ea 	bl	8000298 <__aeabi_dsub>
 800d0c4:	e00f      	b.n	800d0e6 <__ieee754_rem_pio2+0x1ce>
 800d0c6:	462b      	mov	r3, r5
 800d0c8:	4622      	mov	r2, r4
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	4639      	mov	r1, r7
 800d0ce:	f7f3 f8e3 	bl	8000298 <__aeabi_dsub>
 800d0d2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d0d6:	9303      	str	r3, [sp, #12]
 800d0d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d0dc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d0e0:	f1b8 0f10 	cmp.w	r8, #16
 800d0e4:	dc02      	bgt.n	800d0ec <__ieee754_rem_pio2+0x1d4>
 800d0e6:	e9ca 0100 	strd	r0, r1, [sl]
 800d0ea:	e039      	b.n	800d160 <__ieee754_rem_pio2+0x248>
 800d0ec:	a34e      	add	r3, pc, #312	; (adr r3, 800d228 <__ieee754_rem_pio2+0x310>)
 800d0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f2:	ec51 0b18 	vmov	r0, r1, d8
 800d0f6:	f7f3 fa87 	bl	8000608 <__aeabi_dmul>
 800d0fa:	4604      	mov	r4, r0
 800d0fc:	460d      	mov	r5, r1
 800d0fe:	4602      	mov	r2, r0
 800d100:	460b      	mov	r3, r1
 800d102:	4630      	mov	r0, r6
 800d104:	4639      	mov	r1, r7
 800d106:	f7f3 f8c7 	bl	8000298 <__aeabi_dsub>
 800d10a:	4602      	mov	r2, r0
 800d10c:	460b      	mov	r3, r1
 800d10e:	4680      	mov	r8, r0
 800d110:	4689      	mov	r9, r1
 800d112:	4630      	mov	r0, r6
 800d114:	4639      	mov	r1, r7
 800d116:	f7f3 f8bf 	bl	8000298 <__aeabi_dsub>
 800d11a:	4622      	mov	r2, r4
 800d11c:	462b      	mov	r3, r5
 800d11e:	f7f3 f8bb 	bl	8000298 <__aeabi_dsub>
 800d122:	a343      	add	r3, pc, #268	; (adr r3, 800d230 <__ieee754_rem_pio2+0x318>)
 800d124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d128:	4604      	mov	r4, r0
 800d12a:	460d      	mov	r5, r1
 800d12c:	ec51 0b18 	vmov	r0, r1, d8
 800d130:	f7f3 fa6a 	bl	8000608 <__aeabi_dmul>
 800d134:	4622      	mov	r2, r4
 800d136:	462b      	mov	r3, r5
 800d138:	f7f3 f8ae 	bl	8000298 <__aeabi_dsub>
 800d13c:	4602      	mov	r2, r0
 800d13e:	460b      	mov	r3, r1
 800d140:	4604      	mov	r4, r0
 800d142:	460d      	mov	r5, r1
 800d144:	4640      	mov	r0, r8
 800d146:	4649      	mov	r1, r9
 800d148:	f7f3 f8a6 	bl	8000298 <__aeabi_dsub>
 800d14c:	9a03      	ldr	r2, [sp, #12]
 800d14e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d152:	1ad3      	subs	r3, r2, r3
 800d154:	2b31      	cmp	r3, #49	; 0x31
 800d156:	dc24      	bgt.n	800d1a2 <__ieee754_rem_pio2+0x28a>
 800d158:	e9ca 0100 	strd	r0, r1, [sl]
 800d15c:	4646      	mov	r6, r8
 800d15e:	464f      	mov	r7, r9
 800d160:	e9da 8900 	ldrd	r8, r9, [sl]
 800d164:	4630      	mov	r0, r6
 800d166:	4642      	mov	r2, r8
 800d168:	464b      	mov	r3, r9
 800d16a:	4639      	mov	r1, r7
 800d16c:	f7f3 f894 	bl	8000298 <__aeabi_dsub>
 800d170:	462b      	mov	r3, r5
 800d172:	4622      	mov	r2, r4
 800d174:	f7f3 f890 	bl	8000298 <__aeabi_dsub>
 800d178:	9b02      	ldr	r3, [sp, #8]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d180:	f6bf af0a 	bge.w	800cf98 <__ieee754_rem_pio2+0x80>
 800d184:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d188:	f8ca 3004 	str.w	r3, [sl, #4]
 800d18c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d190:	f8ca 8000 	str.w	r8, [sl]
 800d194:	f8ca 0008 	str.w	r0, [sl, #8]
 800d198:	f8ca 300c 	str.w	r3, [sl, #12]
 800d19c:	f1cb 0b00 	rsb	fp, fp, #0
 800d1a0:	e6fa      	b.n	800cf98 <__ieee754_rem_pio2+0x80>
 800d1a2:	a327      	add	r3, pc, #156	; (adr r3, 800d240 <__ieee754_rem_pio2+0x328>)
 800d1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a8:	ec51 0b18 	vmov	r0, r1, d8
 800d1ac:	f7f3 fa2c 	bl	8000608 <__aeabi_dmul>
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	460d      	mov	r5, r1
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	460b      	mov	r3, r1
 800d1b8:	4640      	mov	r0, r8
 800d1ba:	4649      	mov	r1, r9
 800d1bc:	f7f3 f86c 	bl	8000298 <__aeabi_dsub>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	460b      	mov	r3, r1
 800d1c4:	4606      	mov	r6, r0
 800d1c6:	460f      	mov	r7, r1
 800d1c8:	4640      	mov	r0, r8
 800d1ca:	4649      	mov	r1, r9
 800d1cc:	f7f3 f864 	bl	8000298 <__aeabi_dsub>
 800d1d0:	4622      	mov	r2, r4
 800d1d2:	462b      	mov	r3, r5
 800d1d4:	f7f3 f860 	bl	8000298 <__aeabi_dsub>
 800d1d8:	a31b      	add	r3, pc, #108	; (adr r3, 800d248 <__ieee754_rem_pio2+0x330>)
 800d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1de:	4604      	mov	r4, r0
 800d1e0:	460d      	mov	r5, r1
 800d1e2:	ec51 0b18 	vmov	r0, r1, d8
 800d1e6:	f7f3 fa0f 	bl	8000608 <__aeabi_dmul>
 800d1ea:	4622      	mov	r2, r4
 800d1ec:	462b      	mov	r3, r5
 800d1ee:	f7f3 f853 	bl	8000298 <__aeabi_dsub>
 800d1f2:	4604      	mov	r4, r0
 800d1f4:	460d      	mov	r5, r1
 800d1f6:	e75f      	b.n	800d0b8 <__ieee754_rem_pio2+0x1a0>
 800d1f8:	4b1b      	ldr	r3, [pc, #108]	; (800d268 <__ieee754_rem_pio2+0x350>)
 800d1fa:	4598      	cmp	r8, r3
 800d1fc:	dd36      	ble.n	800d26c <__ieee754_rem_pio2+0x354>
 800d1fe:	ee10 2a10 	vmov	r2, s0
 800d202:	462b      	mov	r3, r5
 800d204:	4620      	mov	r0, r4
 800d206:	4629      	mov	r1, r5
 800d208:	f7f3 f846 	bl	8000298 <__aeabi_dsub>
 800d20c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d210:	e9ca 0100 	strd	r0, r1, [sl]
 800d214:	e694      	b.n	800cf40 <__ieee754_rem_pio2+0x28>
 800d216:	bf00      	nop
 800d218:	54400000 	.word	0x54400000
 800d21c:	3ff921fb 	.word	0x3ff921fb
 800d220:	1a626331 	.word	0x1a626331
 800d224:	3dd0b461 	.word	0x3dd0b461
 800d228:	1a600000 	.word	0x1a600000
 800d22c:	3dd0b461 	.word	0x3dd0b461
 800d230:	2e037073 	.word	0x2e037073
 800d234:	3ba3198a 	.word	0x3ba3198a
 800d238:	6dc9c883 	.word	0x6dc9c883
 800d23c:	3fe45f30 	.word	0x3fe45f30
 800d240:	2e000000 	.word	0x2e000000
 800d244:	3ba3198a 	.word	0x3ba3198a
 800d248:	252049c1 	.word	0x252049c1
 800d24c:	397b839a 	.word	0x397b839a
 800d250:	3fe921fb 	.word	0x3fe921fb
 800d254:	4002d97b 	.word	0x4002d97b
 800d258:	3ff921fb 	.word	0x3ff921fb
 800d25c:	413921fb 	.word	0x413921fb
 800d260:	3fe00000 	.word	0x3fe00000
 800d264:	0800e590 	.word	0x0800e590
 800d268:	7fefffff 	.word	0x7fefffff
 800d26c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d270:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d274:	ee10 0a10 	vmov	r0, s0
 800d278:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d27c:	ee10 6a10 	vmov	r6, s0
 800d280:	460f      	mov	r7, r1
 800d282:	f7f3 fc71 	bl	8000b68 <__aeabi_d2iz>
 800d286:	f7f3 f955 	bl	8000534 <__aeabi_i2d>
 800d28a:	4602      	mov	r2, r0
 800d28c:	460b      	mov	r3, r1
 800d28e:	4630      	mov	r0, r6
 800d290:	4639      	mov	r1, r7
 800d292:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d296:	f7f2 ffff 	bl	8000298 <__aeabi_dsub>
 800d29a:	4b23      	ldr	r3, [pc, #140]	; (800d328 <__ieee754_rem_pio2+0x410>)
 800d29c:	2200      	movs	r2, #0
 800d29e:	f7f3 f9b3 	bl	8000608 <__aeabi_dmul>
 800d2a2:	460f      	mov	r7, r1
 800d2a4:	4606      	mov	r6, r0
 800d2a6:	f7f3 fc5f 	bl	8000b68 <__aeabi_d2iz>
 800d2aa:	f7f3 f943 	bl	8000534 <__aeabi_i2d>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	4630      	mov	r0, r6
 800d2b4:	4639      	mov	r1, r7
 800d2b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d2ba:	f7f2 ffed 	bl	8000298 <__aeabi_dsub>
 800d2be:	4b1a      	ldr	r3, [pc, #104]	; (800d328 <__ieee754_rem_pio2+0x410>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f7f3 f9a1 	bl	8000608 <__aeabi_dmul>
 800d2c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d2ca:	ad04      	add	r5, sp, #16
 800d2cc:	f04f 0803 	mov.w	r8, #3
 800d2d0:	46a9      	mov	r9, r5
 800d2d2:	2600      	movs	r6, #0
 800d2d4:	2700      	movs	r7, #0
 800d2d6:	4632      	mov	r2, r6
 800d2d8:	463b      	mov	r3, r7
 800d2da:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d2de:	46c3      	mov	fp, r8
 800d2e0:	3d08      	subs	r5, #8
 800d2e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d2e6:	f7f3 fbf7 	bl	8000ad8 <__aeabi_dcmpeq>
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	d1f3      	bne.n	800d2d6 <__ieee754_rem_pio2+0x3be>
 800d2ee:	4b0f      	ldr	r3, [pc, #60]	; (800d32c <__ieee754_rem_pio2+0x414>)
 800d2f0:	9301      	str	r3, [sp, #4]
 800d2f2:	2302      	movs	r3, #2
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	4622      	mov	r2, r4
 800d2f8:	465b      	mov	r3, fp
 800d2fa:	4651      	mov	r1, sl
 800d2fc:	4648      	mov	r0, r9
 800d2fe:	f000 f993 	bl	800d628 <__kernel_rem_pio2>
 800d302:	9b02      	ldr	r3, [sp, #8]
 800d304:	2b00      	cmp	r3, #0
 800d306:	4683      	mov	fp, r0
 800d308:	f6bf ae46 	bge.w	800cf98 <__ieee754_rem_pio2+0x80>
 800d30c:	e9da 2100 	ldrd	r2, r1, [sl]
 800d310:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d314:	e9ca 2300 	strd	r2, r3, [sl]
 800d318:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d31c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d320:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d324:	e73a      	b.n	800d19c <__ieee754_rem_pio2+0x284>
 800d326:	bf00      	nop
 800d328:	41700000 	.word	0x41700000
 800d32c:	0800e610 	.word	0x0800e610

0800d330 <__ieee754_sqrt>:
 800d330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d334:	ec55 4b10 	vmov	r4, r5, d0
 800d338:	4e55      	ldr	r6, [pc, #340]	; (800d490 <__ieee754_sqrt+0x160>)
 800d33a:	43ae      	bics	r6, r5
 800d33c:	ee10 0a10 	vmov	r0, s0
 800d340:	ee10 3a10 	vmov	r3, s0
 800d344:	462a      	mov	r2, r5
 800d346:	4629      	mov	r1, r5
 800d348:	d110      	bne.n	800d36c <__ieee754_sqrt+0x3c>
 800d34a:	ee10 2a10 	vmov	r2, s0
 800d34e:	462b      	mov	r3, r5
 800d350:	f7f3 f95a 	bl	8000608 <__aeabi_dmul>
 800d354:	4602      	mov	r2, r0
 800d356:	460b      	mov	r3, r1
 800d358:	4620      	mov	r0, r4
 800d35a:	4629      	mov	r1, r5
 800d35c:	f7f2 ff9e 	bl	800029c <__adddf3>
 800d360:	4604      	mov	r4, r0
 800d362:	460d      	mov	r5, r1
 800d364:	ec45 4b10 	vmov	d0, r4, r5
 800d368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d36c:	2d00      	cmp	r5, #0
 800d36e:	dc10      	bgt.n	800d392 <__ieee754_sqrt+0x62>
 800d370:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d374:	4330      	orrs	r0, r6
 800d376:	d0f5      	beq.n	800d364 <__ieee754_sqrt+0x34>
 800d378:	b15d      	cbz	r5, 800d392 <__ieee754_sqrt+0x62>
 800d37a:	ee10 2a10 	vmov	r2, s0
 800d37e:	462b      	mov	r3, r5
 800d380:	ee10 0a10 	vmov	r0, s0
 800d384:	f7f2 ff88 	bl	8000298 <__aeabi_dsub>
 800d388:	4602      	mov	r2, r0
 800d38a:	460b      	mov	r3, r1
 800d38c:	f7f3 fa66 	bl	800085c <__aeabi_ddiv>
 800d390:	e7e6      	b.n	800d360 <__ieee754_sqrt+0x30>
 800d392:	1512      	asrs	r2, r2, #20
 800d394:	d074      	beq.n	800d480 <__ieee754_sqrt+0x150>
 800d396:	07d4      	lsls	r4, r2, #31
 800d398:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d39c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d3a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d3a4:	bf5e      	ittt	pl
 800d3a6:	0fda      	lsrpl	r2, r3, #31
 800d3a8:	005b      	lslpl	r3, r3, #1
 800d3aa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d3ae:	2400      	movs	r4, #0
 800d3b0:	0fda      	lsrs	r2, r3, #31
 800d3b2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d3b6:	107f      	asrs	r7, r7, #1
 800d3b8:	005b      	lsls	r3, r3, #1
 800d3ba:	2516      	movs	r5, #22
 800d3bc:	4620      	mov	r0, r4
 800d3be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d3c2:	1886      	adds	r6, r0, r2
 800d3c4:	428e      	cmp	r6, r1
 800d3c6:	bfde      	ittt	le
 800d3c8:	1b89      	suble	r1, r1, r6
 800d3ca:	18b0      	addle	r0, r6, r2
 800d3cc:	18a4      	addle	r4, r4, r2
 800d3ce:	0049      	lsls	r1, r1, #1
 800d3d0:	3d01      	subs	r5, #1
 800d3d2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d3d6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d3da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d3de:	d1f0      	bne.n	800d3c2 <__ieee754_sqrt+0x92>
 800d3e0:	462a      	mov	r2, r5
 800d3e2:	f04f 0e20 	mov.w	lr, #32
 800d3e6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d3ea:	4281      	cmp	r1, r0
 800d3ec:	eb06 0c05 	add.w	ip, r6, r5
 800d3f0:	dc02      	bgt.n	800d3f8 <__ieee754_sqrt+0xc8>
 800d3f2:	d113      	bne.n	800d41c <__ieee754_sqrt+0xec>
 800d3f4:	459c      	cmp	ip, r3
 800d3f6:	d811      	bhi.n	800d41c <__ieee754_sqrt+0xec>
 800d3f8:	f1bc 0f00 	cmp.w	ip, #0
 800d3fc:	eb0c 0506 	add.w	r5, ip, r6
 800d400:	da43      	bge.n	800d48a <__ieee754_sqrt+0x15a>
 800d402:	2d00      	cmp	r5, #0
 800d404:	db41      	blt.n	800d48a <__ieee754_sqrt+0x15a>
 800d406:	f100 0801 	add.w	r8, r0, #1
 800d40a:	1a09      	subs	r1, r1, r0
 800d40c:	459c      	cmp	ip, r3
 800d40e:	bf88      	it	hi
 800d410:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d414:	eba3 030c 	sub.w	r3, r3, ip
 800d418:	4432      	add	r2, r6
 800d41a:	4640      	mov	r0, r8
 800d41c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d420:	f1be 0e01 	subs.w	lr, lr, #1
 800d424:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d428:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d42c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d430:	d1db      	bne.n	800d3ea <__ieee754_sqrt+0xba>
 800d432:	430b      	orrs	r3, r1
 800d434:	d006      	beq.n	800d444 <__ieee754_sqrt+0x114>
 800d436:	1c50      	adds	r0, r2, #1
 800d438:	bf13      	iteet	ne
 800d43a:	3201      	addne	r2, #1
 800d43c:	3401      	addeq	r4, #1
 800d43e:	4672      	moveq	r2, lr
 800d440:	f022 0201 	bicne.w	r2, r2, #1
 800d444:	1063      	asrs	r3, r4, #1
 800d446:	0852      	lsrs	r2, r2, #1
 800d448:	07e1      	lsls	r1, r4, #31
 800d44a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d44e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d452:	bf48      	it	mi
 800d454:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d458:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d45c:	4614      	mov	r4, r2
 800d45e:	e781      	b.n	800d364 <__ieee754_sqrt+0x34>
 800d460:	0ad9      	lsrs	r1, r3, #11
 800d462:	3815      	subs	r0, #21
 800d464:	055b      	lsls	r3, r3, #21
 800d466:	2900      	cmp	r1, #0
 800d468:	d0fa      	beq.n	800d460 <__ieee754_sqrt+0x130>
 800d46a:	02cd      	lsls	r5, r1, #11
 800d46c:	d50a      	bpl.n	800d484 <__ieee754_sqrt+0x154>
 800d46e:	f1c2 0420 	rsb	r4, r2, #32
 800d472:	fa23 f404 	lsr.w	r4, r3, r4
 800d476:	1e55      	subs	r5, r2, #1
 800d478:	4093      	lsls	r3, r2
 800d47a:	4321      	orrs	r1, r4
 800d47c:	1b42      	subs	r2, r0, r5
 800d47e:	e78a      	b.n	800d396 <__ieee754_sqrt+0x66>
 800d480:	4610      	mov	r0, r2
 800d482:	e7f0      	b.n	800d466 <__ieee754_sqrt+0x136>
 800d484:	0049      	lsls	r1, r1, #1
 800d486:	3201      	adds	r2, #1
 800d488:	e7ef      	b.n	800d46a <__ieee754_sqrt+0x13a>
 800d48a:	4680      	mov	r8, r0
 800d48c:	e7bd      	b.n	800d40a <__ieee754_sqrt+0xda>
 800d48e:	bf00      	nop
 800d490:	7ff00000 	.word	0x7ff00000
 800d494:	00000000 	.word	0x00000000

0800d498 <__kernel_cos>:
 800d498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d49c:	ec57 6b10 	vmov	r6, r7, d0
 800d4a0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d4a4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d4a8:	ed8d 1b00 	vstr	d1, [sp]
 800d4ac:	da07      	bge.n	800d4be <__kernel_cos+0x26>
 800d4ae:	ee10 0a10 	vmov	r0, s0
 800d4b2:	4639      	mov	r1, r7
 800d4b4:	f7f3 fb58 	bl	8000b68 <__aeabi_d2iz>
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	f000 8088 	beq.w	800d5ce <__kernel_cos+0x136>
 800d4be:	4632      	mov	r2, r6
 800d4c0:	463b      	mov	r3, r7
 800d4c2:	4630      	mov	r0, r6
 800d4c4:	4639      	mov	r1, r7
 800d4c6:	f7f3 f89f 	bl	8000608 <__aeabi_dmul>
 800d4ca:	4b51      	ldr	r3, [pc, #324]	; (800d610 <__kernel_cos+0x178>)
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	4604      	mov	r4, r0
 800d4d0:	460d      	mov	r5, r1
 800d4d2:	f7f3 f899 	bl	8000608 <__aeabi_dmul>
 800d4d6:	a340      	add	r3, pc, #256	; (adr r3, 800d5d8 <__kernel_cos+0x140>)
 800d4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4dc:	4682      	mov	sl, r0
 800d4de:	468b      	mov	fp, r1
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	4629      	mov	r1, r5
 800d4e4:	f7f3 f890 	bl	8000608 <__aeabi_dmul>
 800d4e8:	a33d      	add	r3, pc, #244	; (adr r3, 800d5e0 <__kernel_cos+0x148>)
 800d4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ee:	f7f2 fed5 	bl	800029c <__adddf3>
 800d4f2:	4622      	mov	r2, r4
 800d4f4:	462b      	mov	r3, r5
 800d4f6:	f7f3 f887 	bl	8000608 <__aeabi_dmul>
 800d4fa:	a33b      	add	r3, pc, #236	; (adr r3, 800d5e8 <__kernel_cos+0x150>)
 800d4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d500:	f7f2 feca 	bl	8000298 <__aeabi_dsub>
 800d504:	4622      	mov	r2, r4
 800d506:	462b      	mov	r3, r5
 800d508:	f7f3 f87e 	bl	8000608 <__aeabi_dmul>
 800d50c:	a338      	add	r3, pc, #224	; (adr r3, 800d5f0 <__kernel_cos+0x158>)
 800d50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d512:	f7f2 fec3 	bl	800029c <__adddf3>
 800d516:	4622      	mov	r2, r4
 800d518:	462b      	mov	r3, r5
 800d51a:	f7f3 f875 	bl	8000608 <__aeabi_dmul>
 800d51e:	a336      	add	r3, pc, #216	; (adr r3, 800d5f8 <__kernel_cos+0x160>)
 800d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d524:	f7f2 feb8 	bl	8000298 <__aeabi_dsub>
 800d528:	4622      	mov	r2, r4
 800d52a:	462b      	mov	r3, r5
 800d52c:	f7f3 f86c 	bl	8000608 <__aeabi_dmul>
 800d530:	a333      	add	r3, pc, #204	; (adr r3, 800d600 <__kernel_cos+0x168>)
 800d532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d536:	f7f2 feb1 	bl	800029c <__adddf3>
 800d53a:	4622      	mov	r2, r4
 800d53c:	462b      	mov	r3, r5
 800d53e:	f7f3 f863 	bl	8000608 <__aeabi_dmul>
 800d542:	4622      	mov	r2, r4
 800d544:	462b      	mov	r3, r5
 800d546:	f7f3 f85f 	bl	8000608 <__aeabi_dmul>
 800d54a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d54e:	4604      	mov	r4, r0
 800d550:	460d      	mov	r5, r1
 800d552:	4630      	mov	r0, r6
 800d554:	4639      	mov	r1, r7
 800d556:	f7f3 f857 	bl	8000608 <__aeabi_dmul>
 800d55a:	460b      	mov	r3, r1
 800d55c:	4602      	mov	r2, r0
 800d55e:	4629      	mov	r1, r5
 800d560:	4620      	mov	r0, r4
 800d562:	f7f2 fe99 	bl	8000298 <__aeabi_dsub>
 800d566:	4b2b      	ldr	r3, [pc, #172]	; (800d614 <__kernel_cos+0x17c>)
 800d568:	4598      	cmp	r8, r3
 800d56a:	4606      	mov	r6, r0
 800d56c:	460f      	mov	r7, r1
 800d56e:	dc10      	bgt.n	800d592 <__kernel_cos+0xfa>
 800d570:	4602      	mov	r2, r0
 800d572:	460b      	mov	r3, r1
 800d574:	4650      	mov	r0, sl
 800d576:	4659      	mov	r1, fp
 800d578:	f7f2 fe8e 	bl	8000298 <__aeabi_dsub>
 800d57c:	460b      	mov	r3, r1
 800d57e:	4926      	ldr	r1, [pc, #152]	; (800d618 <__kernel_cos+0x180>)
 800d580:	4602      	mov	r2, r0
 800d582:	2000      	movs	r0, #0
 800d584:	f7f2 fe88 	bl	8000298 <__aeabi_dsub>
 800d588:	ec41 0b10 	vmov	d0, r0, r1
 800d58c:	b003      	add	sp, #12
 800d58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d592:	4b22      	ldr	r3, [pc, #136]	; (800d61c <__kernel_cos+0x184>)
 800d594:	4920      	ldr	r1, [pc, #128]	; (800d618 <__kernel_cos+0x180>)
 800d596:	4598      	cmp	r8, r3
 800d598:	bfcc      	ite	gt
 800d59a:	4d21      	ldrgt	r5, [pc, #132]	; (800d620 <__kernel_cos+0x188>)
 800d59c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d5a0:	2400      	movs	r4, #0
 800d5a2:	4622      	mov	r2, r4
 800d5a4:	462b      	mov	r3, r5
 800d5a6:	2000      	movs	r0, #0
 800d5a8:	f7f2 fe76 	bl	8000298 <__aeabi_dsub>
 800d5ac:	4622      	mov	r2, r4
 800d5ae:	4680      	mov	r8, r0
 800d5b0:	4689      	mov	r9, r1
 800d5b2:	462b      	mov	r3, r5
 800d5b4:	4650      	mov	r0, sl
 800d5b6:	4659      	mov	r1, fp
 800d5b8:	f7f2 fe6e 	bl	8000298 <__aeabi_dsub>
 800d5bc:	4632      	mov	r2, r6
 800d5be:	463b      	mov	r3, r7
 800d5c0:	f7f2 fe6a 	bl	8000298 <__aeabi_dsub>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	4640      	mov	r0, r8
 800d5ca:	4649      	mov	r1, r9
 800d5cc:	e7da      	b.n	800d584 <__kernel_cos+0xec>
 800d5ce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d608 <__kernel_cos+0x170>
 800d5d2:	e7db      	b.n	800d58c <__kernel_cos+0xf4>
 800d5d4:	f3af 8000 	nop.w
 800d5d8:	be8838d4 	.word	0xbe8838d4
 800d5dc:	bda8fae9 	.word	0xbda8fae9
 800d5e0:	bdb4b1c4 	.word	0xbdb4b1c4
 800d5e4:	3e21ee9e 	.word	0x3e21ee9e
 800d5e8:	809c52ad 	.word	0x809c52ad
 800d5ec:	3e927e4f 	.word	0x3e927e4f
 800d5f0:	19cb1590 	.word	0x19cb1590
 800d5f4:	3efa01a0 	.word	0x3efa01a0
 800d5f8:	16c15177 	.word	0x16c15177
 800d5fc:	3f56c16c 	.word	0x3f56c16c
 800d600:	5555554c 	.word	0x5555554c
 800d604:	3fa55555 	.word	0x3fa55555
 800d608:	00000000 	.word	0x00000000
 800d60c:	3ff00000 	.word	0x3ff00000
 800d610:	3fe00000 	.word	0x3fe00000
 800d614:	3fd33332 	.word	0x3fd33332
 800d618:	3ff00000 	.word	0x3ff00000
 800d61c:	3fe90000 	.word	0x3fe90000
 800d620:	3fd20000 	.word	0x3fd20000
 800d624:	00000000 	.word	0x00000000

0800d628 <__kernel_rem_pio2>:
 800d628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d62c:	ed2d 8b02 	vpush	{d8}
 800d630:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d634:	f112 0f14 	cmn.w	r2, #20
 800d638:	9308      	str	r3, [sp, #32]
 800d63a:	9101      	str	r1, [sp, #4]
 800d63c:	4bc4      	ldr	r3, [pc, #784]	; (800d950 <__kernel_rem_pio2+0x328>)
 800d63e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d640:	900b      	str	r0, [sp, #44]	; 0x2c
 800d642:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d646:	9302      	str	r3, [sp, #8]
 800d648:	9b08      	ldr	r3, [sp, #32]
 800d64a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d64e:	bfa8      	it	ge
 800d650:	1ed4      	subge	r4, r2, #3
 800d652:	9306      	str	r3, [sp, #24]
 800d654:	bfb2      	itee	lt
 800d656:	2400      	movlt	r4, #0
 800d658:	2318      	movge	r3, #24
 800d65a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d65e:	f06f 0317 	mvn.w	r3, #23
 800d662:	fb04 3303 	mla	r3, r4, r3, r3
 800d666:	eb03 0a02 	add.w	sl, r3, r2
 800d66a:	9b02      	ldr	r3, [sp, #8]
 800d66c:	9a06      	ldr	r2, [sp, #24]
 800d66e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800d940 <__kernel_rem_pio2+0x318>
 800d672:	eb03 0802 	add.w	r8, r3, r2
 800d676:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d678:	1aa7      	subs	r7, r4, r2
 800d67a:	ae22      	add	r6, sp, #136	; 0x88
 800d67c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d680:	2500      	movs	r5, #0
 800d682:	4545      	cmp	r5, r8
 800d684:	dd13      	ble.n	800d6ae <__kernel_rem_pio2+0x86>
 800d686:	9b08      	ldr	r3, [sp, #32]
 800d688:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800d940 <__kernel_rem_pio2+0x318>
 800d68c:	aa22      	add	r2, sp, #136	; 0x88
 800d68e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d692:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d696:	f04f 0800 	mov.w	r8, #0
 800d69a:	9b02      	ldr	r3, [sp, #8]
 800d69c:	4598      	cmp	r8, r3
 800d69e:	dc2f      	bgt.n	800d700 <__kernel_rem_pio2+0xd8>
 800d6a0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d6a4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d6a8:	462f      	mov	r7, r5
 800d6aa:	2600      	movs	r6, #0
 800d6ac:	e01b      	b.n	800d6e6 <__kernel_rem_pio2+0xbe>
 800d6ae:	42ef      	cmn	r7, r5
 800d6b0:	d407      	bmi.n	800d6c2 <__kernel_rem_pio2+0x9a>
 800d6b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d6b6:	f7f2 ff3d 	bl	8000534 <__aeabi_i2d>
 800d6ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d6be:	3501      	adds	r5, #1
 800d6c0:	e7df      	b.n	800d682 <__kernel_rem_pio2+0x5a>
 800d6c2:	ec51 0b18 	vmov	r0, r1, d8
 800d6c6:	e7f8      	b.n	800d6ba <__kernel_rem_pio2+0x92>
 800d6c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d6d0:	f7f2 ff9a 	bl	8000608 <__aeabi_dmul>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6dc:	f7f2 fdde 	bl	800029c <__adddf3>
 800d6e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6e4:	3601      	adds	r6, #1
 800d6e6:	9b06      	ldr	r3, [sp, #24]
 800d6e8:	429e      	cmp	r6, r3
 800d6ea:	f1a7 0708 	sub.w	r7, r7, #8
 800d6ee:	ddeb      	ble.n	800d6c8 <__kernel_rem_pio2+0xa0>
 800d6f0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d6f4:	f108 0801 	add.w	r8, r8, #1
 800d6f8:	ecab 7b02 	vstmia	fp!, {d7}
 800d6fc:	3508      	adds	r5, #8
 800d6fe:	e7cc      	b.n	800d69a <__kernel_rem_pio2+0x72>
 800d700:	9b02      	ldr	r3, [sp, #8]
 800d702:	aa0e      	add	r2, sp, #56	; 0x38
 800d704:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d708:	930d      	str	r3, [sp, #52]	; 0x34
 800d70a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d70c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d710:	9c02      	ldr	r4, [sp, #8]
 800d712:	930c      	str	r3, [sp, #48]	; 0x30
 800d714:	00e3      	lsls	r3, r4, #3
 800d716:	930a      	str	r3, [sp, #40]	; 0x28
 800d718:	ab9a      	add	r3, sp, #616	; 0x268
 800d71a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d71e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d722:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d726:	ab72      	add	r3, sp, #456	; 0x1c8
 800d728:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d72c:	46c3      	mov	fp, r8
 800d72e:	46a1      	mov	r9, r4
 800d730:	f1b9 0f00 	cmp.w	r9, #0
 800d734:	f1a5 0508 	sub.w	r5, r5, #8
 800d738:	dc77      	bgt.n	800d82a <__kernel_rem_pio2+0x202>
 800d73a:	ec47 6b10 	vmov	d0, r6, r7
 800d73e:	4650      	mov	r0, sl
 800d740:	f000 fc02 	bl	800df48 <scalbn>
 800d744:	ec57 6b10 	vmov	r6, r7, d0
 800d748:	2200      	movs	r2, #0
 800d74a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d74e:	ee10 0a10 	vmov	r0, s0
 800d752:	4639      	mov	r1, r7
 800d754:	f7f2 ff58 	bl	8000608 <__aeabi_dmul>
 800d758:	ec41 0b10 	vmov	d0, r0, r1
 800d75c:	f000 fb74 	bl	800de48 <floor>
 800d760:	4b7c      	ldr	r3, [pc, #496]	; (800d954 <__kernel_rem_pio2+0x32c>)
 800d762:	ec51 0b10 	vmov	r0, r1, d0
 800d766:	2200      	movs	r2, #0
 800d768:	f7f2 ff4e 	bl	8000608 <__aeabi_dmul>
 800d76c:	4602      	mov	r2, r0
 800d76e:	460b      	mov	r3, r1
 800d770:	4630      	mov	r0, r6
 800d772:	4639      	mov	r1, r7
 800d774:	f7f2 fd90 	bl	8000298 <__aeabi_dsub>
 800d778:	460f      	mov	r7, r1
 800d77a:	4606      	mov	r6, r0
 800d77c:	f7f3 f9f4 	bl	8000b68 <__aeabi_d2iz>
 800d780:	9004      	str	r0, [sp, #16]
 800d782:	f7f2 fed7 	bl	8000534 <__aeabi_i2d>
 800d786:	4602      	mov	r2, r0
 800d788:	460b      	mov	r3, r1
 800d78a:	4630      	mov	r0, r6
 800d78c:	4639      	mov	r1, r7
 800d78e:	f7f2 fd83 	bl	8000298 <__aeabi_dsub>
 800d792:	f1ba 0f00 	cmp.w	sl, #0
 800d796:	4606      	mov	r6, r0
 800d798:	460f      	mov	r7, r1
 800d79a:	dd6d      	ble.n	800d878 <__kernel_rem_pio2+0x250>
 800d79c:	1e62      	subs	r2, r4, #1
 800d79e:	ab0e      	add	r3, sp, #56	; 0x38
 800d7a0:	9d04      	ldr	r5, [sp, #16]
 800d7a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d7a6:	f1ca 0118 	rsb	r1, sl, #24
 800d7aa:	fa40 f301 	asr.w	r3, r0, r1
 800d7ae:	441d      	add	r5, r3
 800d7b0:	408b      	lsls	r3, r1
 800d7b2:	1ac0      	subs	r0, r0, r3
 800d7b4:	ab0e      	add	r3, sp, #56	; 0x38
 800d7b6:	9504      	str	r5, [sp, #16]
 800d7b8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d7bc:	f1ca 0317 	rsb	r3, sl, #23
 800d7c0:	fa40 fb03 	asr.w	fp, r0, r3
 800d7c4:	f1bb 0f00 	cmp.w	fp, #0
 800d7c8:	dd65      	ble.n	800d896 <__kernel_rem_pio2+0x26e>
 800d7ca:	9b04      	ldr	r3, [sp, #16]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	9304      	str	r3, [sp, #16]
 800d7d2:	4615      	mov	r5, r2
 800d7d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d7d8:	4294      	cmp	r4, r2
 800d7da:	f300 809c 	bgt.w	800d916 <__kernel_rem_pio2+0x2ee>
 800d7de:	f1ba 0f00 	cmp.w	sl, #0
 800d7e2:	dd07      	ble.n	800d7f4 <__kernel_rem_pio2+0x1cc>
 800d7e4:	f1ba 0f01 	cmp.w	sl, #1
 800d7e8:	f000 80c0 	beq.w	800d96c <__kernel_rem_pio2+0x344>
 800d7ec:	f1ba 0f02 	cmp.w	sl, #2
 800d7f0:	f000 80c6 	beq.w	800d980 <__kernel_rem_pio2+0x358>
 800d7f4:	f1bb 0f02 	cmp.w	fp, #2
 800d7f8:	d14d      	bne.n	800d896 <__kernel_rem_pio2+0x26e>
 800d7fa:	4632      	mov	r2, r6
 800d7fc:	463b      	mov	r3, r7
 800d7fe:	4956      	ldr	r1, [pc, #344]	; (800d958 <__kernel_rem_pio2+0x330>)
 800d800:	2000      	movs	r0, #0
 800d802:	f7f2 fd49 	bl	8000298 <__aeabi_dsub>
 800d806:	4606      	mov	r6, r0
 800d808:	460f      	mov	r7, r1
 800d80a:	2d00      	cmp	r5, #0
 800d80c:	d043      	beq.n	800d896 <__kernel_rem_pio2+0x26e>
 800d80e:	4650      	mov	r0, sl
 800d810:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800d948 <__kernel_rem_pio2+0x320>
 800d814:	f000 fb98 	bl	800df48 <scalbn>
 800d818:	4630      	mov	r0, r6
 800d81a:	4639      	mov	r1, r7
 800d81c:	ec53 2b10 	vmov	r2, r3, d0
 800d820:	f7f2 fd3a 	bl	8000298 <__aeabi_dsub>
 800d824:	4606      	mov	r6, r0
 800d826:	460f      	mov	r7, r1
 800d828:	e035      	b.n	800d896 <__kernel_rem_pio2+0x26e>
 800d82a:	4b4c      	ldr	r3, [pc, #304]	; (800d95c <__kernel_rem_pio2+0x334>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	4630      	mov	r0, r6
 800d830:	4639      	mov	r1, r7
 800d832:	f7f2 fee9 	bl	8000608 <__aeabi_dmul>
 800d836:	f7f3 f997 	bl	8000b68 <__aeabi_d2iz>
 800d83a:	f7f2 fe7b 	bl	8000534 <__aeabi_i2d>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	ec43 2b18 	vmov	d8, r2, r3
 800d846:	4b46      	ldr	r3, [pc, #280]	; (800d960 <__kernel_rem_pio2+0x338>)
 800d848:	2200      	movs	r2, #0
 800d84a:	f7f2 fedd 	bl	8000608 <__aeabi_dmul>
 800d84e:	4602      	mov	r2, r0
 800d850:	460b      	mov	r3, r1
 800d852:	4630      	mov	r0, r6
 800d854:	4639      	mov	r1, r7
 800d856:	f7f2 fd1f 	bl	8000298 <__aeabi_dsub>
 800d85a:	f7f3 f985 	bl	8000b68 <__aeabi_d2iz>
 800d85e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d862:	f84b 0b04 	str.w	r0, [fp], #4
 800d866:	ec51 0b18 	vmov	r0, r1, d8
 800d86a:	f7f2 fd17 	bl	800029c <__adddf3>
 800d86e:	f109 39ff 	add.w	r9, r9, #4294967295
 800d872:	4606      	mov	r6, r0
 800d874:	460f      	mov	r7, r1
 800d876:	e75b      	b.n	800d730 <__kernel_rem_pio2+0x108>
 800d878:	d106      	bne.n	800d888 <__kernel_rem_pio2+0x260>
 800d87a:	1e63      	subs	r3, r4, #1
 800d87c:	aa0e      	add	r2, sp, #56	; 0x38
 800d87e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d882:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800d886:	e79d      	b.n	800d7c4 <__kernel_rem_pio2+0x19c>
 800d888:	4b36      	ldr	r3, [pc, #216]	; (800d964 <__kernel_rem_pio2+0x33c>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	f7f3 f942 	bl	8000b14 <__aeabi_dcmpge>
 800d890:	2800      	cmp	r0, #0
 800d892:	d13d      	bne.n	800d910 <__kernel_rem_pio2+0x2e8>
 800d894:	4683      	mov	fp, r0
 800d896:	2200      	movs	r2, #0
 800d898:	2300      	movs	r3, #0
 800d89a:	4630      	mov	r0, r6
 800d89c:	4639      	mov	r1, r7
 800d89e:	f7f3 f91b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d8a2:	2800      	cmp	r0, #0
 800d8a4:	f000 80c0 	beq.w	800da28 <__kernel_rem_pio2+0x400>
 800d8a8:	1e65      	subs	r5, r4, #1
 800d8aa:	462b      	mov	r3, r5
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	9902      	ldr	r1, [sp, #8]
 800d8b0:	428b      	cmp	r3, r1
 800d8b2:	da6c      	bge.n	800d98e <__kernel_rem_pio2+0x366>
 800d8b4:	2a00      	cmp	r2, #0
 800d8b6:	f000 8089 	beq.w	800d9cc <__kernel_rem_pio2+0x3a4>
 800d8ba:	ab0e      	add	r3, sp, #56	; 0x38
 800d8bc:	f1aa 0a18 	sub.w	sl, sl, #24
 800d8c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f000 80ad 	beq.w	800da24 <__kernel_rem_pio2+0x3fc>
 800d8ca:	4650      	mov	r0, sl
 800d8cc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800d948 <__kernel_rem_pio2+0x320>
 800d8d0:	f000 fb3a 	bl	800df48 <scalbn>
 800d8d4:	ab9a      	add	r3, sp, #616	; 0x268
 800d8d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d8da:	ec57 6b10 	vmov	r6, r7, d0
 800d8de:	00ec      	lsls	r4, r5, #3
 800d8e0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800d8e4:	46aa      	mov	sl, r5
 800d8e6:	f1ba 0f00 	cmp.w	sl, #0
 800d8ea:	f280 80d6 	bge.w	800da9a <__kernel_rem_pio2+0x472>
 800d8ee:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800d940 <__kernel_rem_pio2+0x318>
 800d8f2:	462e      	mov	r6, r5
 800d8f4:	2e00      	cmp	r6, #0
 800d8f6:	f2c0 8104 	blt.w	800db02 <__kernel_rem_pio2+0x4da>
 800d8fa:	ab72      	add	r3, sp, #456	; 0x1c8
 800d8fc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d900:	f8df a064 	ldr.w	sl, [pc, #100]	; 800d968 <__kernel_rem_pio2+0x340>
 800d904:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800d908:	f04f 0800 	mov.w	r8, #0
 800d90c:	1baf      	subs	r7, r5, r6
 800d90e:	e0ea      	b.n	800dae6 <__kernel_rem_pio2+0x4be>
 800d910:	f04f 0b02 	mov.w	fp, #2
 800d914:	e759      	b.n	800d7ca <__kernel_rem_pio2+0x1a2>
 800d916:	f8d8 3000 	ldr.w	r3, [r8]
 800d91a:	b955      	cbnz	r5, 800d932 <__kernel_rem_pio2+0x30a>
 800d91c:	b123      	cbz	r3, 800d928 <__kernel_rem_pio2+0x300>
 800d91e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d922:	f8c8 3000 	str.w	r3, [r8]
 800d926:	2301      	movs	r3, #1
 800d928:	3201      	adds	r2, #1
 800d92a:	f108 0804 	add.w	r8, r8, #4
 800d92e:	461d      	mov	r5, r3
 800d930:	e752      	b.n	800d7d8 <__kernel_rem_pio2+0x1b0>
 800d932:	1acb      	subs	r3, r1, r3
 800d934:	f8c8 3000 	str.w	r3, [r8]
 800d938:	462b      	mov	r3, r5
 800d93a:	e7f5      	b.n	800d928 <__kernel_rem_pio2+0x300>
 800d93c:	f3af 8000 	nop.w
	...
 800d94c:	3ff00000 	.word	0x3ff00000
 800d950:	0800e758 	.word	0x0800e758
 800d954:	40200000 	.word	0x40200000
 800d958:	3ff00000 	.word	0x3ff00000
 800d95c:	3e700000 	.word	0x3e700000
 800d960:	41700000 	.word	0x41700000
 800d964:	3fe00000 	.word	0x3fe00000
 800d968:	0800e718 	.word	0x0800e718
 800d96c:	1e62      	subs	r2, r4, #1
 800d96e:	ab0e      	add	r3, sp, #56	; 0x38
 800d970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d974:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d978:	a90e      	add	r1, sp, #56	; 0x38
 800d97a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d97e:	e739      	b.n	800d7f4 <__kernel_rem_pio2+0x1cc>
 800d980:	1e62      	subs	r2, r4, #1
 800d982:	ab0e      	add	r3, sp, #56	; 0x38
 800d984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d988:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d98c:	e7f4      	b.n	800d978 <__kernel_rem_pio2+0x350>
 800d98e:	a90e      	add	r1, sp, #56	; 0x38
 800d990:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d994:	3b01      	subs	r3, #1
 800d996:	430a      	orrs	r2, r1
 800d998:	e789      	b.n	800d8ae <__kernel_rem_pio2+0x286>
 800d99a:	3301      	adds	r3, #1
 800d99c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d9a0:	2900      	cmp	r1, #0
 800d9a2:	d0fa      	beq.n	800d99a <__kernel_rem_pio2+0x372>
 800d9a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9a6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800d9aa:	446a      	add	r2, sp
 800d9ac:	3a98      	subs	r2, #152	; 0x98
 800d9ae:	920a      	str	r2, [sp, #40]	; 0x28
 800d9b0:	9a08      	ldr	r2, [sp, #32]
 800d9b2:	18e3      	adds	r3, r4, r3
 800d9b4:	18a5      	adds	r5, r4, r2
 800d9b6:	aa22      	add	r2, sp, #136	; 0x88
 800d9b8:	f104 0801 	add.w	r8, r4, #1
 800d9bc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d9c0:	9304      	str	r3, [sp, #16]
 800d9c2:	9b04      	ldr	r3, [sp, #16]
 800d9c4:	4543      	cmp	r3, r8
 800d9c6:	da04      	bge.n	800d9d2 <__kernel_rem_pio2+0x3aa>
 800d9c8:	461c      	mov	r4, r3
 800d9ca:	e6a3      	b.n	800d714 <__kernel_rem_pio2+0xec>
 800d9cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e7e4      	b.n	800d99c <__kernel_rem_pio2+0x374>
 800d9d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9d4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d9d8:	f7f2 fdac 	bl	8000534 <__aeabi_i2d>
 800d9dc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d9e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9e2:	46ab      	mov	fp, r5
 800d9e4:	461c      	mov	r4, r3
 800d9e6:	f04f 0900 	mov.w	r9, #0
 800d9ea:	2600      	movs	r6, #0
 800d9ec:	2700      	movs	r7, #0
 800d9ee:	9b06      	ldr	r3, [sp, #24]
 800d9f0:	4599      	cmp	r9, r3
 800d9f2:	dd06      	ble.n	800da02 <__kernel_rem_pio2+0x3da>
 800d9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9f6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d9fa:	f108 0801 	add.w	r8, r8, #1
 800d9fe:	930a      	str	r3, [sp, #40]	; 0x28
 800da00:	e7df      	b.n	800d9c2 <__kernel_rem_pio2+0x39a>
 800da02:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800da06:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800da0a:	f7f2 fdfd 	bl	8000608 <__aeabi_dmul>
 800da0e:	4602      	mov	r2, r0
 800da10:	460b      	mov	r3, r1
 800da12:	4630      	mov	r0, r6
 800da14:	4639      	mov	r1, r7
 800da16:	f7f2 fc41 	bl	800029c <__adddf3>
 800da1a:	f109 0901 	add.w	r9, r9, #1
 800da1e:	4606      	mov	r6, r0
 800da20:	460f      	mov	r7, r1
 800da22:	e7e4      	b.n	800d9ee <__kernel_rem_pio2+0x3c6>
 800da24:	3d01      	subs	r5, #1
 800da26:	e748      	b.n	800d8ba <__kernel_rem_pio2+0x292>
 800da28:	ec47 6b10 	vmov	d0, r6, r7
 800da2c:	f1ca 0000 	rsb	r0, sl, #0
 800da30:	f000 fa8a 	bl	800df48 <scalbn>
 800da34:	ec57 6b10 	vmov	r6, r7, d0
 800da38:	4ba0      	ldr	r3, [pc, #640]	; (800dcbc <__kernel_rem_pio2+0x694>)
 800da3a:	ee10 0a10 	vmov	r0, s0
 800da3e:	2200      	movs	r2, #0
 800da40:	4639      	mov	r1, r7
 800da42:	f7f3 f867 	bl	8000b14 <__aeabi_dcmpge>
 800da46:	b1f8      	cbz	r0, 800da88 <__kernel_rem_pio2+0x460>
 800da48:	4b9d      	ldr	r3, [pc, #628]	; (800dcc0 <__kernel_rem_pio2+0x698>)
 800da4a:	2200      	movs	r2, #0
 800da4c:	4630      	mov	r0, r6
 800da4e:	4639      	mov	r1, r7
 800da50:	f7f2 fdda 	bl	8000608 <__aeabi_dmul>
 800da54:	f7f3 f888 	bl	8000b68 <__aeabi_d2iz>
 800da58:	4680      	mov	r8, r0
 800da5a:	f7f2 fd6b 	bl	8000534 <__aeabi_i2d>
 800da5e:	4b97      	ldr	r3, [pc, #604]	; (800dcbc <__kernel_rem_pio2+0x694>)
 800da60:	2200      	movs	r2, #0
 800da62:	f7f2 fdd1 	bl	8000608 <__aeabi_dmul>
 800da66:	460b      	mov	r3, r1
 800da68:	4602      	mov	r2, r0
 800da6a:	4639      	mov	r1, r7
 800da6c:	4630      	mov	r0, r6
 800da6e:	f7f2 fc13 	bl	8000298 <__aeabi_dsub>
 800da72:	f7f3 f879 	bl	8000b68 <__aeabi_d2iz>
 800da76:	1c65      	adds	r5, r4, #1
 800da78:	ab0e      	add	r3, sp, #56	; 0x38
 800da7a:	f10a 0a18 	add.w	sl, sl, #24
 800da7e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800da82:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800da86:	e720      	b.n	800d8ca <__kernel_rem_pio2+0x2a2>
 800da88:	4630      	mov	r0, r6
 800da8a:	4639      	mov	r1, r7
 800da8c:	f7f3 f86c 	bl	8000b68 <__aeabi_d2iz>
 800da90:	ab0e      	add	r3, sp, #56	; 0x38
 800da92:	4625      	mov	r5, r4
 800da94:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800da98:	e717      	b.n	800d8ca <__kernel_rem_pio2+0x2a2>
 800da9a:	ab0e      	add	r3, sp, #56	; 0x38
 800da9c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800daa0:	f7f2 fd48 	bl	8000534 <__aeabi_i2d>
 800daa4:	4632      	mov	r2, r6
 800daa6:	463b      	mov	r3, r7
 800daa8:	f7f2 fdae 	bl	8000608 <__aeabi_dmul>
 800daac:	4b84      	ldr	r3, [pc, #528]	; (800dcc0 <__kernel_rem_pio2+0x698>)
 800daae:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800dab2:	2200      	movs	r2, #0
 800dab4:	4630      	mov	r0, r6
 800dab6:	4639      	mov	r1, r7
 800dab8:	f7f2 fda6 	bl	8000608 <__aeabi_dmul>
 800dabc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dac0:	4606      	mov	r6, r0
 800dac2:	460f      	mov	r7, r1
 800dac4:	e70f      	b.n	800d8e6 <__kernel_rem_pio2+0x2be>
 800dac6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800daca:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800dace:	f7f2 fd9b 	bl	8000608 <__aeabi_dmul>
 800dad2:	4602      	mov	r2, r0
 800dad4:	460b      	mov	r3, r1
 800dad6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dada:	f7f2 fbdf 	bl	800029c <__adddf3>
 800dade:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dae2:	f108 0801 	add.w	r8, r8, #1
 800dae6:	9b02      	ldr	r3, [sp, #8]
 800dae8:	4598      	cmp	r8, r3
 800daea:	dc01      	bgt.n	800daf0 <__kernel_rem_pio2+0x4c8>
 800daec:	45b8      	cmp	r8, r7
 800daee:	ddea      	ble.n	800dac6 <__kernel_rem_pio2+0x49e>
 800daf0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800daf4:	ab4a      	add	r3, sp, #296	; 0x128
 800daf6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800dafa:	ed87 7b00 	vstr	d7, [r7]
 800dafe:	3e01      	subs	r6, #1
 800db00:	e6f8      	b.n	800d8f4 <__kernel_rem_pio2+0x2cc>
 800db02:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800db04:	2b02      	cmp	r3, #2
 800db06:	dc0b      	bgt.n	800db20 <__kernel_rem_pio2+0x4f8>
 800db08:	2b00      	cmp	r3, #0
 800db0a:	dc35      	bgt.n	800db78 <__kernel_rem_pio2+0x550>
 800db0c:	d059      	beq.n	800dbc2 <__kernel_rem_pio2+0x59a>
 800db0e:	9b04      	ldr	r3, [sp, #16]
 800db10:	f003 0007 	and.w	r0, r3, #7
 800db14:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800db18:	ecbd 8b02 	vpop	{d8}
 800db1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db20:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800db22:	2b03      	cmp	r3, #3
 800db24:	d1f3      	bne.n	800db0e <__kernel_rem_pio2+0x4e6>
 800db26:	ab4a      	add	r3, sp, #296	; 0x128
 800db28:	4423      	add	r3, r4
 800db2a:	9306      	str	r3, [sp, #24]
 800db2c:	461c      	mov	r4, r3
 800db2e:	469a      	mov	sl, r3
 800db30:	9502      	str	r5, [sp, #8]
 800db32:	9b02      	ldr	r3, [sp, #8]
 800db34:	2b00      	cmp	r3, #0
 800db36:	f1aa 0a08 	sub.w	sl, sl, #8
 800db3a:	dc6b      	bgt.n	800dc14 <__kernel_rem_pio2+0x5ec>
 800db3c:	46aa      	mov	sl, r5
 800db3e:	f1ba 0f01 	cmp.w	sl, #1
 800db42:	f1a4 0408 	sub.w	r4, r4, #8
 800db46:	f300 8085 	bgt.w	800dc54 <__kernel_rem_pio2+0x62c>
 800db4a:	9c06      	ldr	r4, [sp, #24]
 800db4c:	2000      	movs	r0, #0
 800db4e:	3408      	adds	r4, #8
 800db50:	2100      	movs	r1, #0
 800db52:	2d01      	cmp	r5, #1
 800db54:	f300 809d 	bgt.w	800dc92 <__kernel_rem_pio2+0x66a>
 800db58:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800db5c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800db60:	f1bb 0f00 	cmp.w	fp, #0
 800db64:	f040 809b 	bne.w	800dc9e <__kernel_rem_pio2+0x676>
 800db68:	9b01      	ldr	r3, [sp, #4]
 800db6a:	e9c3 5600 	strd	r5, r6, [r3]
 800db6e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800db72:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800db76:	e7ca      	b.n	800db0e <__kernel_rem_pio2+0x4e6>
 800db78:	3408      	adds	r4, #8
 800db7a:	ab4a      	add	r3, sp, #296	; 0x128
 800db7c:	441c      	add	r4, r3
 800db7e:	462e      	mov	r6, r5
 800db80:	2000      	movs	r0, #0
 800db82:	2100      	movs	r1, #0
 800db84:	2e00      	cmp	r6, #0
 800db86:	da36      	bge.n	800dbf6 <__kernel_rem_pio2+0x5ce>
 800db88:	f1bb 0f00 	cmp.w	fp, #0
 800db8c:	d039      	beq.n	800dc02 <__kernel_rem_pio2+0x5da>
 800db8e:	4602      	mov	r2, r0
 800db90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db94:	9c01      	ldr	r4, [sp, #4]
 800db96:	e9c4 2300 	strd	r2, r3, [r4]
 800db9a:	4602      	mov	r2, r0
 800db9c:	460b      	mov	r3, r1
 800db9e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800dba2:	f7f2 fb79 	bl	8000298 <__aeabi_dsub>
 800dba6:	ae4c      	add	r6, sp, #304	; 0x130
 800dba8:	2401      	movs	r4, #1
 800dbaa:	42a5      	cmp	r5, r4
 800dbac:	da2c      	bge.n	800dc08 <__kernel_rem_pio2+0x5e0>
 800dbae:	f1bb 0f00 	cmp.w	fp, #0
 800dbb2:	d002      	beq.n	800dbba <__kernel_rem_pio2+0x592>
 800dbb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbb8:	4619      	mov	r1, r3
 800dbba:	9b01      	ldr	r3, [sp, #4]
 800dbbc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dbc0:	e7a5      	b.n	800db0e <__kernel_rem_pio2+0x4e6>
 800dbc2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800dbc6:	eb0d 0403 	add.w	r4, sp, r3
 800dbca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800dbce:	2000      	movs	r0, #0
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	2d00      	cmp	r5, #0
 800dbd4:	da09      	bge.n	800dbea <__kernel_rem_pio2+0x5c2>
 800dbd6:	f1bb 0f00 	cmp.w	fp, #0
 800dbda:	d002      	beq.n	800dbe2 <__kernel_rem_pio2+0x5ba>
 800dbdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	9b01      	ldr	r3, [sp, #4]
 800dbe4:	e9c3 0100 	strd	r0, r1, [r3]
 800dbe8:	e791      	b.n	800db0e <__kernel_rem_pio2+0x4e6>
 800dbea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dbee:	f7f2 fb55 	bl	800029c <__adddf3>
 800dbf2:	3d01      	subs	r5, #1
 800dbf4:	e7ed      	b.n	800dbd2 <__kernel_rem_pio2+0x5aa>
 800dbf6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dbfa:	f7f2 fb4f 	bl	800029c <__adddf3>
 800dbfe:	3e01      	subs	r6, #1
 800dc00:	e7c0      	b.n	800db84 <__kernel_rem_pio2+0x55c>
 800dc02:	4602      	mov	r2, r0
 800dc04:	460b      	mov	r3, r1
 800dc06:	e7c5      	b.n	800db94 <__kernel_rem_pio2+0x56c>
 800dc08:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800dc0c:	f7f2 fb46 	bl	800029c <__adddf3>
 800dc10:	3401      	adds	r4, #1
 800dc12:	e7ca      	b.n	800dbaa <__kernel_rem_pio2+0x582>
 800dc14:	e9da 8900 	ldrd	r8, r9, [sl]
 800dc18:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800dc1c:	9b02      	ldr	r3, [sp, #8]
 800dc1e:	3b01      	subs	r3, #1
 800dc20:	9302      	str	r3, [sp, #8]
 800dc22:	4632      	mov	r2, r6
 800dc24:	463b      	mov	r3, r7
 800dc26:	4640      	mov	r0, r8
 800dc28:	4649      	mov	r1, r9
 800dc2a:	f7f2 fb37 	bl	800029c <__adddf3>
 800dc2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dc32:	4602      	mov	r2, r0
 800dc34:	460b      	mov	r3, r1
 800dc36:	4640      	mov	r0, r8
 800dc38:	4649      	mov	r1, r9
 800dc3a:	f7f2 fb2d 	bl	8000298 <__aeabi_dsub>
 800dc3e:	4632      	mov	r2, r6
 800dc40:	463b      	mov	r3, r7
 800dc42:	f7f2 fb2b 	bl	800029c <__adddf3>
 800dc46:	ed9d 7b08 	vldr	d7, [sp, #32]
 800dc4a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dc4e:	ed8a 7b00 	vstr	d7, [sl]
 800dc52:	e76e      	b.n	800db32 <__kernel_rem_pio2+0x50a>
 800dc54:	e9d4 8900 	ldrd	r8, r9, [r4]
 800dc58:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800dc5c:	4640      	mov	r0, r8
 800dc5e:	4632      	mov	r2, r6
 800dc60:	463b      	mov	r3, r7
 800dc62:	4649      	mov	r1, r9
 800dc64:	f7f2 fb1a 	bl	800029c <__adddf3>
 800dc68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	460b      	mov	r3, r1
 800dc70:	4640      	mov	r0, r8
 800dc72:	4649      	mov	r1, r9
 800dc74:	f7f2 fb10 	bl	8000298 <__aeabi_dsub>
 800dc78:	4632      	mov	r2, r6
 800dc7a:	463b      	mov	r3, r7
 800dc7c:	f7f2 fb0e 	bl	800029c <__adddf3>
 800dc80:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dc88:	ed84 7b00 	vstr	d7, [r4]
 800dc8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc90:	e755      	b.n	800db3e <__kernel_rem_pio2+0x516>
 800dc92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dc96:	f7f2 fb01 	bl	800029c <__adddf3>
 800dc9a:	3d01      	subs	r5, #1
 800dc9c:	e759      	b.n	800db52 <__kernel_rem_pio2+0x52a>
 800dc9e:	9b01      	ldr	r3, [sp, #4]
 800dca0:	9a01      	ldr	r2, [sp, #4]
 800dca2:	601d      	str	r5, [r3, #0]
 800dca4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800dca8:	605c      	str	r4, [r3, #4]
 800dcaa:	609f      	str	r7, [r3, #8]
 800dcac:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800dcb0:	60d3      	str	r3, [r2, #12]
 800dcb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dcb6:	6110      	str	r0, [r2, #16]
 800dcb8:	6153      	str	r3, [r2, #20]
 800dcba:	e728      	b.n	800db0e <__kernel_rem_pio2+0x4e6>
 800dcbc:	41700000 	.word	0x41700000
 800dcc0:	3e700000 	.word	0x3e700000
 800dcc4:	00000000 	.word	0x00000000

0800dcc8 <__kernel_sin>:
 800dcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dccc:	ed2d 8b04 	vpush	{d8-d9}
 800dcd0:	eeb0 8a41 	vmov.f32	s16, s2
 800dcd4:	eef0 8a61 	vmov.f32	s17, s3
 800dcd8:	ec55 4b10 	vmov	r4, r5, d0
 800dcdc:	b083      	sub	sp, #12
 800dcde:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dce2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dce6:	9001      	str	r0, [sp, #4]
 800dce8:	da06      	bge.n	800dcf8 <__kernel_sin+0x30>
 800dcea:	ee10 0a10 	vmov	r0, s0
 800dcee:	4629      	mov	r1, r5
 800dcf0:	f7f2 ff3a 	bl	8000b68 <__aeabi_d2iz>
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	d051      	beq.n	800dd9c <__kernel_sin+0xd4>
 800dcf8:	4622      	mov	r2, r4
 800dcfa:	462b      	mov	r3, r5
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	4629      	mov	r1, r5
 800dd00:	f7f2 fc82 	bl	8000608 <__aeabi_dmul>
 800dd04:	4682      	mov	sl, r0
 800dd06:	468b      	mov	fp, r1
 800dd08:	4602      	mov	r2, r0
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	4629      	mov	r1, r5
 800dd10:	f7f2 fc7a 	bl	8000608 <__aeabi_dmul>
 800dd14:	a341      	add	r3, pc, #260	; (adr r3, 800de1c <__kernel_sin+0x154>)
 800dd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1a:	4680      	mov	r8, r0
 800dd1c:	4689      	mov	r9, r1
 800dd1e:	4650      	mov	r0, sl
 800dd20:	4659      	mov	r1, fp
 800dd22:	f7f2 fc71 	bl	8000608 <__aeabi_dmul>
 800dd26:	a33f      	add	r3, pc, #252	; (adr r3, 800de24 <__kernel_sin+0x15c>)
 800dd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2c:	f7f2 fab4 	bl	8000298 <__aeabi_dsub>
 800dd30:	4652      	mov	r2, sl
 800dd32:	465b      	mov	r3, fp
 800dd34:	f7f2 fc68 	bl	8000608 <__aeabi_dmul>
 800dd38:	a33c      	add	r3, pc, #240	; (adr r3, 800de2c <__kernel_sin+0x164>)
 800dd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3e:	f7f2 faad 	bl	800029c <__adddf3>
 800dd42:	4652      	mov	r2, sl
 800dd44:	465b      	mov	r3, fp
 800dd46:	f7f2 fc5f 	bl	8000608 <__aeabi_dmul>
 800dd4a:	a33a      	add	r3, pc, #232	; (adr r3, 800de34 <__kernel_sin+0x16c>)
 800dd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd50:	f7f2 faa2 	bl	8000298 <__aeabi_dsub>
 800dd54:	4652      	mov	r2, sl
 800dd56:	465b      	mov	r3, fp
 800dd58:	f7f2 fc56 	bl	8000608 <__aeabi_dmul>
 800dd5c:	a337      	add	r3, pc, #220	; (adr r3, 800de3c <__kernel_sin+0x174>)
 800dd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd62:	f7f2 fa9b 	bl	800029c <__adddf3>
 800dd66:	9b01      	ldr	r3, [sp, #4]
 800dd68:	4606      	mov	r6, r0
 800dd6a:	460f      	mov	r7, r1
 800dd6c:	b9eb      	cbnz	r3, 800ddaa <__kernel_sin+0xe2>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	460b      	mov	r3, r1
 800dd72:	4650      	mov	r0, sl
 800dd74:	4659      	mov	r1, fp
 800dd76:	f7f2 fc47 	bl	8000608 <__aeabi_dmul>
 800dd7a:	a325      	add	r3, pc, #148	; (adr r3, 800de10 <__kernel_sin+0x148>)
 800dd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd80:	f7f2 fa8a 	bl	8000298 <__aeabi_dsub>
 800dd84:	4642      	mov	r2, r8
 800dd86:	464b      	mov	r3, r9
 800dd88:	f7f2 fc3e 	bl	8000608 <__aeabi_dmul>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	460b      	mov	r3, r1
 800dd90:	4620      	mov	r0, r4
 800dd92:	4629      	mov	r1, r5
 800dd94:	f7f2 fa82 	bl	800029c <__adddf3>
 800dd98:	4604      	mov	r4, r0
 800dd9a:	460d      	mov	r5, r1
 800dd9c:	ec45 4b10 	vmov	d0, r4, r5
 800dda0:	b003      	add	sp, #12
 800dda2:	ecbd 8b04 	vpop	{d8-d9}
 800dda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddaa:	4b1b      	ldr	r3, [pc, #108]	; (800de18 <__kernel_sin+0x150>)
 800ddac:	ec51 0b18 	vmov	r0, r1, d8
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	f7f2 fc29 	bl	8000608 <__aeabi_dmul>
 800ddb6:	4632      	mov	r2, r6
 800ddb8:	ec41 0b19 	vmov	d9, r0, r1
 800ddbc:	463b      	mov	r3, r7
 800ddbe:	4640      	mov	r0, r8
 800ddc0:	4649      	mov	r1, r9
 800ddc2:	f7f2 fc21 	bl	8000608 <__aeabi_dmul>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	460b      	mov	r3, r1
 800ddca:	ec51 0b19 	vmov	r0, r1, d9
 800ddce:	f7f2 fa63 	bl	8000298 <__aeabi_dsub>
 800ddd2:	4652      	mov	r2, sl
 800ddd4:	465b      	mov	r3, fp
 800ddd6:	f7f2 fc17 	bl	8000608 <__aeabi_dmul>
 800ddda:	ec53 2b18 	vmov	r2, r3, d8
 800ddde:	f7f2 fa5b 	bl	8000298 <__aeabi_dsub>
 800dde2:	a30b      	add	r3, pc, #44	; (adr r3, 800de10 <__kernel_sin+0x148>)
 800dde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde8:	4606      	mov	r6, r0
 800ddea:	460f      	mov	r7, r1
 800ddec:	4640      	mov	r0, r8
 800ddee:	4649      	mov	r1, r9
 800ddf0:	f7f2 fc0a 	bl	8000608 <__aeabi_dmul>
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	4639      	mov	r1, r7
 800ddfc:	f7f2 fa4e 	bl	800029c <__adddf3>
 800de00:	4602      	mov	r2, r0
 800de02:	460b      	mov	r3, r1
 800de04:	4620      	mov	r0, r4
 800de06:	4629      	mov	r1, r5
 800de08:	f7f2 fa46 	bl	8000298 <__aeabi_dsub>
 800de0c:	e7c4      	b.n	800dd98 <__kernel_sin+0xd0>
 800de0e:	bf00      	nop
 800de10:	55555549 	.word	0x55555549
 800de14:	3fc55555 	.word	0x3fc55555
 800de18:	3fe00000 	.word	0x3fe00000
 800de1c:	5acfd57c 	.word	0x5acfd57c
 800de20:	3de5d93a 	.word	0x3de5d93a
 800de24:	8a2b9ceb 	.word	0x8a2b9ceb
 800de28:	3e5ae5e6 	.word	0x3e5ae5e6
 800de2c:	57b1fe7d 	.word	0x57b1fe7d
 800de30:	3ec71de3 	.word	0x3ec71de3
 800de34:	19c161d5 	.word	0x19c161d5
 800de38:	3f2a01a0 	.word	0x3f2a01a0
 800de3c:	1110f8a6 	.word	0x1110f8a6
 800de40:	3f811111 	.word	0x3f811111
 800de44:	00000000 	.word	0x00000000

0800de48 <floor>:
 800de48:	ec51 0b10 	vmov	r0, r1, d0
 800de4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800de54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800de58:	2e13      	cmp	r6, #19
 800de5a:	ee10 5a10 	vmov	r5, s0
 800de5e:	ee10 8a10 	vmov	r8, s0
 800de62:	460c      	mov	r4, r1
 800de64:	dc32      	bgt.n	800decc <floor+0x84>
 800de66:	2e00      	cmp	r6, #0
 800de68:	da14      	bge.n	800de94 <floor+0x4c>
 800de6a:	a333      	add	r3, pc, #204	; (adr r3, 800df38 <floor+0xf0>)
 800de6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de70:	f7f2 fa14 	bl	800029c <__adddf3>
 800de74:	2200      	movs	r2, #0
 800de76:	2300      	movs	r3, #0
 800de78:	f7f2 fe56 	bl	8000b28 <__aeabi_dcmpgt>
 800de7c:	b138      	cbz	r0, 800de8e <floor+0x46>
 800de7e:	2c00      	cmp	r4, #0
 800de80:	da57      	bge.n	800df32 <floor+0xea>
 800de82:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800de86:	431d      	orrs	r5, r3
 800de88:	d001      	beq.n	800de8e <floor+0x46>
 800de8a:	4c2d      	ldr	r4, [pc, #180]	; (800df40 <floor+0xf8>)
 800de8c:	2500      	movs	r5, #0
 800de8e:	4621      	mov	r1, r4
 800de90:	4628      	mov	r0, r5
 800de92:	e025      	b.n	800dee0 <floor+0x98>
 800de94:	4f2b      	ldr	r7, [pc, #172]	; (800df44 <floor+0xfc>)
 800de96:	4137      	asrs	r7, r6
 800de98:	ea01 0307 	and.w	r3, r1, r7
 800de9c:	4303      	orrs	r3, r0
 800de9e:	d01f      	beq.n	800dee0 <floor+0x98>
 800dea0:	a325      	add	r3, pc, #148	; (adr r3, 800df38 <floor+0xf0>)
 800dea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea6:	f7f2 f9f9 	bl	800029c <__adddf3>
 800deaa:	2200      	movs	r2, #0
 800deac:	2300      	movs	r3, #0
 800deae:	f7f2 fe3b 	bl	8000b28 <__aeabi_dcmpgt>
 800deb2:	2800      	cmp	r0, #0
 800deb4:	d0eb      	beq.n	800de8e <floor+0x46>
 800deb6:	2c00      	cmp	r4, #0
 800deb8:	bfbe      	ittt	lt
 800deba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800debe:	fa43 f606 	asrlt.w	r6, r3, r6
 800dec2:	19a4      	addlt	r4, r4, r6
 800dec4:	ea24 0407 	bic.w	r4, r4, r7
 800dec8:	2500      	movs	r5, #0
 800deca:	e7e0      	b.n	800de8e <floor+0x46>
 800decc:	2e33      	cmp	r6, #51	; 0x33
 800dece:	dd0b      	ble.n	800dee8 <floor+0xa0>
 800ded0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ded4:	d104      	bne.n	800dee0 <floor+0x98>
 800ded6:	ee10 2a10 	vmov	r2, s0
 800deda:	460b      	mov	r3, r1
 800dedc:	f7f2 f9de 	bl	800029c <__adddf3>
 800dee0:	ec41 0b10 	vmov	d0, r0, r1
 800dee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800deec:	f04f 33ff 	mov.w	r3, #4294967295
 800def0:	fa23 f707 	lsr.w	r7, r3, r7
 800def4:	4207      	tst	r7, r0
 800def6:	d0f3      	beq.n	800dee0 <floor+0x98>
 800def8:	a30f      	add	r3, pc, #60	; (adr r3, 800df38 <floor+0xf0>)
 800defa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defe:	f7f2 f9cd 	bl	800029c <__adddf3>
 800df02:	2200      	movs	r2, #0
 800df04:	2300      	movs	r3, #0
 800df06:	f7f2 fe0f 	bl	8000b28 <__aeabi_dcmpgt>
 800df0a:	2800      	cmp	r0, #0
 800df0c:	d0bf      	beq.n	800de8e <floor+0x46>
 800df0e:	2c00      	cmp	r4, #0
 800df10:	da02      	bge.n	800df18 <floor+0xd0>
 800df12:	2e14      	cmp	r6, #20
 800df14:	d103      	bne.n	800df1e <floor+0xd6>
 800df16:	3401      	adds	r4, #1
 800df18:	ea25 0507 	bic.w	r5, r5, r7
 800df1c:	e7b7      	b.n	800de8e <floor+0x46>
 800df1e:	2301      	movs	r3, #1
 800df20:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800df24:	fa03 f606 	lsl.w	r6, r3, r6
 800df28:	4435      	add	r5, r6
 800df2a:	4545      	cmp	r5, r8
 800df2c:	bf38      	it	cc
 800df2e:	18e4      	addcc	r4, r4, r3
 800df30:	e7f2      	b.n	800df18 <floor+0xd0>
 800df32:	2500      	movs	r5, #0
 800df34:	462c      	mov	r4, r5
 800df36:	e7aa      	b.n	800de8e <floor+0x46>
 800df38:	8800759c 	.word	0x8800759c
 800df3c:	7e37e43c 	.word	0x7e37e43c
 800df40:	bff00000 	.word	0xbff00000
 800df44:	000fffff 	.word	0x000fffff

0800df48 <scalbn>:
 800df48:	b570      	push	{r4, r5, r6, lr}
 800df4a:	ec55 4b10 	vmov	r4, r5, d0
 800df4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800df52:	4606      	mov	r6, r0
 800df54:	462b      	mov	r3, r5
 800df56:	b99a      	cbnz	r2, 800df80 <scalbn+0x38>
 800df58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800df5c:	4323      	orrs	r3, r4
 800df5e:	d036      	beq.n	800dfce <scalbn+0x86>
 800df60:	4b39      	ldr	r3, [pc, #228]	; (800e048 <scalbn+0x100>)
 800df62:	4629      	mov	r1, r5
 800df64:	ee10 0a10 	vmov	r0, s0
 800df68:	2200      	movs	r2, #0
 800df6a:	f7f2 fb4d 	bl	8000608 <__aeabi_dmul>
 800df6e:	4b37      	ldr	r3, [pc, #220]	; (800e04c <scalbn+0x104>)
 800df70:	429e      	cmp	r6, r3
 800df72:	4604      	mov	r4, r0
 800df74:	460d      	mov	r5, r1
 800df76:	da10      	bge.n	800df9a <scalbn+0x52>
 800df78:	a32b      	add	r3, pc, #172	; (adr r3, 800e028 <scalbn+0xe0>)
 800df7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7e:	e03a      	b.n	800dff6 <scalbn+0xae>
 800df80:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800df84:	428a      	cmp	r2, r1
 800df86:	d10c      	bne.n	800dfa2 <scalbn+0x5a>
 800df88:	ee10 2a10 	vmov	r2, s0
 800df8c:	4620      	mov	r0, r4
 800df8e:	4629      	mov	r1, r5
 800df90:	f7f2 f984 	bl	800029c <__adddf3>
 800df94:	4604      	mov	r4, r0
 800df96:	460d      	mov	r5, r1
 800df98:	e019      	b.n	800dfce <scalbn+0x86>
 800df9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800df9e:	460b      	mov	r3, r1
 800dfa0:	3a36      	subs	r2, #54	; 0x36
 800dfa2:	4432      	add	r2, r6
 800dfa4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dfa8:	428a      	cmp	r2, r1
 800dfaa:	dd08      	ble.n	800dfbe <scalbn+0x76>
 800dfac:	2d00      	cmp	r5, #0
 800dfae:	a120      	add	r1, pc, #128	; (adr r1, 800e030 <scalbn+0xe8>)
 800dfb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfb4:	da1c      	bge.n	800dff0 <scalbn+0xa8>
 800dfb6:	a120      	add	r1, pc, #128	; (adr r1, 800e038 <scalbn+0xf0>)
 800dfb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfbc:	e018      	b.n	800dff0 <scalbn+0xa8>
 800dfbe:	2a00      	cmp	r2, #0
 800dfc0:	dd08      	ble.n	800dfd4 <scalbn+0x8c>
 800dfc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dfc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dfca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dfce:	ec45 4b10 	vmov	d0, r4, r5
 800dfd2:	bd70      	pop	{r4, r5, r6, pc}
 800dfd4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dfd8:	da19      	bge.n	800e00e <scalbn+0xc6>
 800dfda:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dfde:	429e      	cmp	r6, r3
 800dfe0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800dfe4:	dd0a      	ble.n	800dffc <scalbn+0xb4>
 800dfe6:	a112      	add	r1, pc, #72	; (adr r1, 800e030 <scalbn+0xe8>)
 800dfe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d1e2      	bne.n	800dfb6 <scalbn+0x6e>
 800dff0:	a30f      	add	r3, pc, #60	; (adr r3, 800e030 <scalbn+0xe8>)
 800dff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff6:	f7f2 fb07 	bl	8000608 <__aeabi_dmul>
 800dffa:	e7cb      	b.n	800df94 <scalbn+0x4c>
 800dffc:	a10a      	add	r1, pc, #40	; (adr r1, 800e028 <scalbn+0xe0>)
 800dffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d0b8      	beq.n	800df78 <scalbn+0x30>
 800e006:	a10e      	add	r1, pc, #56	; (adr r1, 800e040 <scalbn+0xf8>)
 800e008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e00c:	e7b4      	b.n	800df78 <scalbn+0x30>
 800e00e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e012:	3236      	adds	r2, #54	; 0x36
 800e014:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e018:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e01c:	4620      	mov	r0, r4
 800e01e:	4b0c      	ldr	r3, [pc, #48]	; (800e050 <scalbn+0x108>)
 800e020:	2200      	movs	r2, #0
 800e022:	e7e8      	b.n	800dff6 <scalbn+0xae>
 800e024:	f3af 8000 	nop.w
 800e028:	c2f8f359 	.word	0xc2f8f359
 800e02c:	01a56e1f 	.word	0x01a56e1f
 800e030:	8800759c 	.word	0x8800759c
 800e034:	7e37e43c 	.word	0x7e37e43c
 800e038:	8800759c 	.word	0x8800759c
 800e03c:	fe37e43c 	.word	0xfe37e43c
 800e040:	c2f8f359 	.word	0xc2f8f359
 800e044:	81a56e1f 	.word	0x81a56e1f
 800e048:	43500000 	.word	0x43500000
 800e04c:	ffff3cb0 	.word	0xffff3cb0
 800e050:	3c900000 	.word	0x3c900000

0800e054 <_init>:
 800e054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e056:	bf00      	nop
 800e058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e05a:	bc08      	pop	{r3}
 800e05c:	469e      	mov	lr, r3
 800e05e:	4770      	bx	lr

0800e060 <_fini>:
 800e060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e062:	bf00      	nop
 800e064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e066:	bc08      	pop	{r3}
 800e068:	469e      	mov	lr, r3
 800e06a:	4770      	bx	lr
