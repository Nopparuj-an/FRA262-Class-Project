
FRA262-G6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011504  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  080116a8  080116a8  000216a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011db0  08011db0  00030408  2**0
                  CONTENTS
  4 .ARM          00000008  08011db0  08011db0  00021db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011db8  08011db8  00030408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011db8  08011db8  00021db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011dbc  08011dbc  00021dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000408  20000000  08011dc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ab8  20000408  080121c8  00030408  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ec0  080121c8  00031ec0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030408  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c35  00000000  00000000  00030438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000363d  00000000  00000000  0004906d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  0004c6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0004daa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a874  00000000  00000000  0004ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a66b  00000000  00000000  00069594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0a45  00000000  00000000  00083bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124644  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c08  00000000  00000000  00124694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000408 	.word	0x20000408
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801168c 	.word	0x0801168c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000040c 	.word	0x2000040c
 80001dc:	0801168c 	.word	0x0801168c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <ENDEFF_TEST_MODE>:
		timestamp = HAL_GetTick();
		complete = 1;
		return;
	}
}
void ENDEFF_TEST_MODE(I2C_HandleTypeDef *hi2c) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x11 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001010:	f004 faf8 	bl	8005604 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <ENDEFF_TEST_MODE+0x44>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b09      	cmp	r3, #9
 800101e:	d911      	bls.n	8001044 <ENDEFF_TEST_MODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2302      	movs	r3, #2
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <ENDEFF_TEST_MODE+0x48>)
 800102a:	212a      	movs	r1, #42	; 0x2a
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f005 fdbd 	bl	8006bac <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001032:	f004 fae7 	bl	8005604 <HAL_GetTick>
 8001036:	4603      	mov	r3, r0
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <ENDEFF_TEST_MODE+0x44>)
 800103a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <ENDEFF_TEST_MODE+0x4c>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]
		return;
 8001042:	bf00      	nop
	}
}
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000424 	.word	0x20000424
 8001050:	20000000 	.word	0x20000000
 8001054:	20000428 	.word	0x20000428

08001058 <ENDEFF_TEST_MODE_QUIT>:
void ENDEFF_TEST_MODE_QUIT(I2C_HandleTypeDef *hi2c) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
 800105e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x00 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001060:	f004 fad0 	bl	8005604 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <ENDEFF_TEST_MODE_QUIT+0x44>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b09      	cmp	r3, #9
 800106e:	d911      	bls.n	8001094 <ENDEFF_TEST_MODE_QUIT+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2302      	movs	r3, #2
 8001078:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <ENDEFF_TEST_MODE_QUIT+0x48>)
 800107a:	212a      	movs	r1, #42	; 0x2a
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f005 fd95 	bl	8006bac <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001082:	f004 fabf 	bl	8005604 <HAL_GetTick>
 8001086:	4603      	mov	r3, r0
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <ENDEFF_TEST_MODE_QUIT+0x44>)
 800108a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <ENDEFF_TEST_MODE_QUIT+0x4c>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
		return;
 8001092:	bf00      	nop
	}
}
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000424 	.word	0x20000424
 80010a0:	20000004 	.word	0x20000004
 80010a4:	20000428 	.word	0x20000428

080010a8 <ENDEFF_GRIPPER_RUNMODE>:
void ENDEFF_GRIPPER_RUNMODE(I2C_HandleTypeDef *hi2c) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x13 };
	if (HAL_GetTick() - timestamp >= 10) {
 80010b0:	f004 faa8 	bl	8005604 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <ENDEFF_GRIPPER_RUNMODE+0x44>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b09      	cmp	r3, #9
 80010be:	d911      	bls.n	80010e4 <ENDEFF_GRIPPER_RUNMODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2302      	movs	r3, #2
 80010c8:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <ENDEFF_GRIPPER_RUNMODE+0x48>)
 80010ca:	212a      	movs	r1, #42	; 0x2a
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f005 fd6d 	bl	8006bac <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80010d2:	f004 fa97 	bl	8005604 <HAL_GetTick>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <ENDEFF_GRIPPER_RUNMODE+0x44>)
 80010da:	6013      	str	r3, [r2, #0]
		complete = 1;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <ENDEFF_GRIPPER_RUNMODE+0x4c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
		return;
 80010e2:	bf00      	nop
	}
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000424 	.word	0x20000424
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000428 	.word	0x20000428

080010f8 <ENDEFF_GRIPPER_IDLE>:
void ENDEFF_GRIPPER_IDLE(I2C_HandleTypeDef *hi2c) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x8C };
	if (HAL_GetTick() - timestamp >= 10) {
 8001100:	f004 fa80 	bl	8005604 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <ENDEFF_GRIPPER_IDLE+0x44>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b09      	cmp	r3, #9
 800110e:	d911      	bls.n	8001134 <ENDEFF_GRIPPER_IDLE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2302      	movs	r3, #2
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <ENDEFF_GRIPPER_IDLE+0x48>)
 800111a:	212a      	movs	r1, #42	; 0x2a
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f005 fd45 	bl	8006bac <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001122:	f004 fa6f 	bl	8005604 <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <ENDEFF_GRIPPER_IDLE+0x44>)
 800112a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <ENDEFF_GRIPPER_IDLE+0x4c>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]
		return;
 8001132:	bf00      	nop
	}
}
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000424 	.word	0x20000424
 8001140:	2000000c 	.word	0x2000000c
 8001144:	20000428 	.word	0x20000428

08001148 <ENDEFF_GRIPPER_PICK>:
void ENDEFF_GRIPPER_PICK(I2C_HandleTypeDef *hi2c) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x5A };
	if (HAL_GetTick() - timestamp >= 2000) {
 8001150:	f004 fa58 	bl	8005604 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <ENDEFF_GRIPPER_PICK+0x44>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001160:	d311      	bcc.n	8001186 <ENDEFF_GRIPPER_PICK+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2302      	movs	r3, #2
 800116a:	4a09      	ldr	r2, [pc, #36]	; (8001190 <ENDEFF_GRIPPER_PICK+0x48>)
 800116c:	212a      	movs	r1, #42	; 0x2a
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f005 fd1c 	bl	8006bac <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001174:	f004 fa46 	bl	8005604 <HAL_GetTick>
 8001178:	4603      	mov	r3, r0
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <ENDEFF_GRIPPER_PICK+0x44>)
 800117c:	6013      	str	r3, [r2, #0]
		complete = 1;
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <ENDEFF_GRIPPER_PICK+0x4c>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
		return;
 8001184:	bf00      	nop
	}
}
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000424 	.word	0x20000424
 8001190:	20000010 	.word	0x20000010
 8001194:	20000428 	.word	0x20000428

08001198 <ENDEFF_GRIPPER_PLACE>:
void ENDEFF_GRIPPER_PLACE(I2C_HandleTypeDef *hi2c) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x69 };
	if (HAL_GetTick() - timestamp >= 2000) {
 80011a0:	f004 fa30 	bl	8005604 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <ENDEFF_GRIPPER_PLACE+0x44>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011b0:	d311      	bcc.n	80011d6 <ENDEFF_GRIPPER_PLACE+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2302      	movs	r3, #2
 80011ba:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <ENDEFF_GRIPPER_PLACE+0x48>)
 80011bc:	212a      	movs	r1, #42	; 0x2a
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f005 fcf4 	bl	8006bac <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80011c4:	f004 fa1e 	bl	8005604 <HAL_GetTick>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <ENDEFF_GRIPPER_PLACE+0x44>)
 80011cc:	6013      	str	r3, [r2, #0]
		complete = 1;
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <ENDEFF_GRIPPER_PLACE+0x4c>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]
		return;
 80011d4:	bf00      	nop
	}
}
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000424 	.word	0x20000424
 80011e0:	20000014 	.word	0x20000014
 80011e4:	20000428 	.word	0x20000428

080011e8 <ENE_I2C_UPDATE>:


void ENE_I2C_UPDATE(int16_t *DataFrame, I2C_HandleTypeDef *hi2c) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
	static int picked;
	static enum {
		INIT, TEST, RUNMODE, PICKED
	} END_EFFECTOR_STATE = INIT;
	switch (END_EFFECTOR_STATE) {
 80011f2:	4b96      	ldr	r3, [pc, #600]	; (800144c <ENE_I2C_UPDATE+0x264>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	f200 8123 	bhi.w	8001442 <ENE_I2C_UPDATE+0x25a>
 80011fc:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <ENE_I2C_UPDATE+0x1c>)
 80011fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001202:	bf00      	nop
 8001204:	08001215 	.word	0x08001215
 8001208:	08001273 	.word	0x08001273
 800120c:	080012d7 	.word	0x080012d7
 8001210:	080013a5 	.word	0x080013a5
	case (INIT):
		if ((*DataFrame & 0b0001) == 1) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121a:	b29b      	uxth	r3, r3
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00e      	beq.n	8001242 <ENE_I2C_UPDATE+0x5a>
			ENDEFF_TEST_MODE(hi2c);
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f7ff feef 	bl	8001008 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 800122a:	4b89      	ldr	r3, [pc, #548]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	f040 8100 	bne.w	8001434 <ENE_I2C_UPDATE+0x24c>
				END_EFFECTOR_STATE = TEST;
 8001234:	4b85      	ldr	r3, [pc, #532]	; (800144c <ENE_I2C_UPDATE+0x264>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800123a:	4b85      	ldr	r3, [pc, #532]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 8001240:	e0f8      	b.n	8001434 <ENE_I2C_UPDATE+0x24c>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001248:	b29b      	uxth	r3, r3
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80f0 	beq.w	8001434 <ENE_I2C_UPDATE+0x24c>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 8001254:	6838      	ldr	r0, [r7, #0]
 8001256:	f7ff ff27 	bl	80010a8 <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 800125a:	4b7d      	ldr	r3, [pc, #500]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b01      	cmp	r3, #1
 8001260:	f040 80e8 	bne.w	8001434 <ENE_I2C_UPDATE+0x24c>
				END_EFFECTOR_STATE = RUNMODE;
 8001264:	4b79      	ldr	r3, [pc, #484]	; (800144c <ENE_I2C_UPDATE+0x264>)
 8001266:	2202      	movs	r2, #2
 8001268:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800126a:	4b79      	ldr	r3, [pc, #484]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
		break;
 8001270:	e0e0      	b.n	8001434 <ENE_I2C_UPDATE+0x24c>
	case (TEST):
		if ((*DataFrame & 0b0001) == 0) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001278:	b29b      	uxth	r3, r3
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10e      	bne.n	80012a0 <ENE_I2C_UPDATE+0xb8>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 8001282:	6838      	ldr	r0, [r7, #0]
 8001284:	f7ff fee8 	bl	8001058 <ENDEFF_TEST_MODE_QUIT>
			if (complete == 1) {
 8001288:	4b71      	ldr	r3, [pc, #452]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	f040 80d3 	bne.w	8001438 <ENE_I2C_UPDATE+0x250>
				END_EFFECTOR_STATE = INIT;
 8001292:	4b6e      	ldr	r3, [pc, #440]	; (800144c <ENE_I2C_UPDATE+0x264>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001298:	4b6d      	ldr	r3, [pc, #436]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 800129e:	e0cb      	b.n	8001438 <ENE_I2C_UPDATE+0x250>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80c3 	beq.w	8001438 <ENE_I2C_UPDATE+0x250>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 80012b2:	6838      	ldr	r0, [r7, #0]
 80012b4:	f7ff fed0 	bl	8001058 <ENDEFF_TEST_MODE_QUIT>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 80012b8:	6838      	ldr	r0, [r7, #0]
 80012ba:	f7ff fef5 	bl	80010a8 <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 80012be:	4b64      	ldr	r3, [pc, #400]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	f040 80b8 	bne.w	8001438 <ENE_I2C_UPDATE+0x250>
				END_EFFECTOR_STATE = RUNMODE;
 80012c8:	4b60      	ldr	r3, [pc, #384]	; (800144c <ENE_I2C_UPDATE+0x264>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80012ce:	4b60      	ldr	r3, [pc, #384]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
		break;
 80012d4:	e0b0      	b.n	8001438 <ENE_I2C_UPDATE+0x250>
	case (RUNMODE):
		if ((*DataFrame & 0b0010) == 0) {
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10e      	bne.n	8001304 <ENE_I2C_UPDATE+0x11c>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80012e6:	6838      	ldr	r0, [r7, #0]
 80012e8:	f7ff ff06 	bl	80010f8 <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80012ec:	4b58      	ldr	r3, [pc, #352]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	f040 80a3 	bne.w	800143c <ENE_I2C_UPDATE+0x254>
				END_EFFECTOR_STATE = INIT;
 80012f6:	4b55      	ldr	r3, [pc, #340]	; (800144c <ENE_I2C_UPDATE+0x264>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80012fc:	4b54      	ldr	r3, [pc, #336]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
					complete = 0;
					picked = 0;
				}
			}
		}
		break;
 8001302:	e09b      	b.n	800143c <ENE_I2C_UPDATE+0x254>
		} else if ((*DataFrame & 0b0001) == 1) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130a:	b29b      	uxth	r3, r3
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00e      	beq.n	8001332 <ENE_I2C_UPDATE+0x14a>
			ENDEFF_TEST_MODE(hi2c);
 8001314:	6838      	ldr	r0, [r7, #0]
 8001316:	f7ff fe77 	bl	8001008 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 800131a:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	f040 808c 	bne.w	800143c <ENE_I2C_UPDATE+0x254>
				END_EFFECTOR_STATE = TEST;
 8001324:	4b49      	ldr	r3, [pc, #292]	; (800144c <ENE_I2C_UPDATE+0x264>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800132a:	4b49      	ldr	r3, [pc, #292]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
		break;
 8001330:	e084      	b.n	800143c <ENE_I2C_UPDATE+0x254>
		} else if ((*DataFrame & 0b0100) == 0b100) {
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	b29b      	uxth	r3, r3
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	2b00      	cmp	r3, #0
 8001340:	d013      	beq.n	800136a <ENE_I2C_UPDATE+0x182>
			ENDEFF_GRIPPER_PICK(hi2c);
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f7ff ff00 	bl	8001148 <ENDEFF_GRIPPER_PICK>
			if (complete == 1) {
 8001348:	4b41      	ldr	r3, [pc, #260]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d175      	bne.n	800143c <ENE_I2C_UPDATE+0x254>
				*DataFrame = 0b0010;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2202      	movs	r2, #2
 8001354:	801a      	strh	r2, [r3, #0]
				END_EFFECTOR_STATE = PICKED;
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <ENE_I2C_UPDATE+0x264>)
 8001358:	2203      	movs	r2, #3
 800135a:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800135c:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
				picked = 1;
 8001362:	4b3c      	ldr	r3, [pc, #240]	; (8001454 <ENE_I2C_UPDATE+0x26c>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
		break;
 8001368:	e068      	b.n	800143c <ENE_I2C_UPDATE+0x254>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001370:	b29b      	uxth	r3, r3
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d060      	beq.n	800143c <ENE_I2C_UPDATE+0x254>
			if (picked == 1) {
 800137a:	4b36      	ldr	r3, [pc, #216]	; (8001454 <ENE_I2C_UPDATE+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d15c      	bne.n	800143c <ENE_I2C_UPDATE+0x254>
				ENDEFF_GRIPPER_PLACE(hi2c);
 8001382:	6838      	ldr	r0, [r7, #0]
 8001384:	f7ff ff08 	bl	8001198 <ENDEFF_GRIPPER_PLACE>
				if (complete == 1) {
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d155      	bne.n	800143c <ENE_I2C_UPDATE+0x254>
					*DataFrame = 0b0010;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2202      	movs	r2, #2
 8001394:	801a      	strh	r2, [r3, #0]
					complete = 0;
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
					picked = 0;
 800139c:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <ENE_I2C_UPDATE+0x26c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
		break;
 80013a2:	e04b      	b.n	800143c <ENE_I2C_UPDATE+0x254>
	case (PICKED):
		if ((*DataFrame & 0b0010) == 0) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10d      	bne.n	80013d0 <ENE_I2C_UPDATE+0x1e8>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80013b4:	6838      	ldr	r0, [r7, #0]
 80013b6:	f7ff fe9f 	bl	80010f8 <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d13e      	bne.n	8001440 <ENE_I2C_UPDATE+0x258>
				END_EFFECTOR_STATE = INIT;
 80013c2:	4b22      	ldr	r3, [pc, #136]	; (800144c <ENE_I2C_UPDATE+0x264>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
				picked = 0;
			}
		}
		break;
 80013ce:	e037      	b.n	8001440 <ENE_I2C_UPDATE+0x258>
		} else if ((*DataFrame & 0b0001) == 1) {
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00d      	beq.n	80013fc <ENE_I2C_UPDATE+0x214>
			ENDEFF_TEST_MODE(hi2c);
 80013e0:	6838      	ldr	r0, [r7, #0]
 80013e2:	f7ff fe11 	bl	8001008 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d128      	bne.n	8001440 <ENE_I2C_UPDATE+0x258>
				END_EFFECTOR_STATE = TEST;
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <ENE_I2C_UPDATE+0x264>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
		break;
 80013fa:	e021      	b.n	8001440 <ENE_I2C_UPDATE+0x258>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001402:	b29b      	uxth	r3, r3
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d019      	beq.n	8001440 <ENE_I2C_UPDATE+0x258>
			ENDEFF_GRIPPER_PLACE(hi2c);
 800140c:	6838      	ldr	r0, [r7, #0]
 800140e:	f7ff fec3 	bl	8001198 <ENDEFF_GRIPPER_PLACE>
			if (complete == 1) {
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d112      	bne.n	8001440 <ENE_I2C_UPDATE+0x258>
				*DataFrame = 0b0010;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2202      	movs	r2, #2
 800141e:	801a      	strh	r2, [r3, #0]
				END_EFFECTOR_STATE = RUNMODE;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <ENE_I2C_UPDATE+0x264>)
 8001422:	2202      	movs	r2, #2
 8001424:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <ENE_I2C_UPDATE+0x268>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
				picked = 0;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <ENE_I2C_UPDATE+0x26c>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
		break;
 8001432:	e005      	b.n	8001440 <ENE_I2C_UPDATE+0x258>
		break;
 8001434:	bf00      	nop
 8001436:	e004      	b.n	8001442 <ENE_I2C_UPDATE+0x25a>
		break;
 8001438:	bf00      	nop
 800143a:	e002      	b.n	8001442 <ENE_I2C_UPDATE+0x25a>
		break;
 800143c:	bf00      	nop
 800143e:	e000      	b.n	8001442 <ENE_I2C_UPDATE+0x25a>
		break;
 8001440:	bf00      	nop
	}
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000042c 	.word	0x2000042c
 8001450:	20000428 	.word	0x20000428
 8001454:	20000430 	.word	0x20000430

08001458 <UARTInterruptConfig>:
#include "Joystick.h"
#include "usart.h"

uint8_t RxBuffer[1];

void UARTInterruptConfig() {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 800145c:	2201      	movs	r2, #1
 800145e:	4903      	ldr	r1, [pc, #12]	; (800146c <UARTInterruptConfig+0x14>)
 8001460:	4803      	ldr	r0, [pc, #12]	; (8001470 <UARTInterruptConfig+0x18>)
 8001462:	f008 fce1 	bl	8009e28 <HAL_UART_Receive_IT>
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000434 	.word	0x20000434
 8001470:	20001d64 	.word	0x20001d64

08001474 <Joystick_Received>:

void Joystick_Received(int *receivedByte) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	static int count;
	static uint8_t tempData[6];
	static enum {
		START, COUNT
	} Joy_State = START;
	switch (Joy_State) {
 800147c:	4b4e      	ldr	r3, [pc, #312]	; (80015b8 <Joystick_Received+0x144>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d002      	beq.n	800148a <Joystick_Received+0x16>
 8001484:	2b01      	cmp	r3, #1
 8001486:	d009      	beq.n	800149c <Joystick_Received+0x28>
 8001488:	e08d      	b.n	80015a6 <Joystick_Received+0x132>
	case (START):
		if (RxBuffer[0] == 69) {
 800148a:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <Joystick_Received+0x148>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b45      	cmp	r3, #69	; 0x45
 8001490:	f040 8088 	bne.w	80015a4 <Joystick_Received+0x130>
			Joy_State = COUNT;
 8001494:	4b48      	ldr	r3, [pc, #288]	; (80015b8 <Joystick_Received+0x144>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
		}
		break;
 800149a:	e083      	b.n	80015a4 <Joystick_Received+0x130>

	case (COUNT):
		if (RxBuffer[0] == 69) {
 800149c:	4b47      	ldr	r3, [pc, #284]	; (80015bc <Joystick_Received+0x148>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b45      	cmp	r3, #69	; 0x45
 80014a2:	d111      	bne.n	80014c8 <Joystick_Received+0x54>
			for (int i = 0; i < sizeof(tempData); i++) {
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	e007      	b.n	80014ba <Joystick_Received+0x46>
				tempData[i] = 0;
 80014aa:	4a45      	ldr	r2, [pc, #276]	; (80015c0 <Joystick_Received+0x14c>)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(tempData); i++) {
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3301      	adds	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b05      	cmp	r3, #5
 80014be:	d9f4      	bls.n	80014aa <Joystick_Received+0x36>
			}
			count = 0;
 80014c0:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <Joystick_Received+0x150>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
			joystick_callback();
		} else {
			tempData[count] = RxBuffer[0];
			count++;
		}
		break;
 80014c6:	e06e      	b.n	80015a6 <Joystick_Received+0x132>
		} else if (RxBuffer[0] == 71 && count < sizeof(tempData)) {
 80014c8:	4b3c      	ldr	r3, [pc, #240]	; (80015bc <Joystick_Received+0x148>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b47      	cmp	r3, #71	; 0x47
 80014ce:	d115      	bne.n	80014fc <Joystick_Received+0x88>
 80014d0:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <Joystick_Received+0x150>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b05      	cmp	r3, #5
 80014d6:	d811      	bhi.n	80014fc <Joystick_Received+0x88>
			for (int i = 0; i < sizeof(tempData); i++) {
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	e007      	b.n	80014ee <Joystick_Received+0x7a>
				tempData[i] = 0;
 80014de:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <Joystick_Received+0x14c>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4413      	add	r3, r2
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(tempData); i++) {
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	3301      	adds	r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	d9f4      	bls.n	80014de <Joystick_Received+0x6a>
			count = 0;
 80014f4:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <Joystick_Received+0x150>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e052      	b.n	80015a2 <Joystick_Received+0x12e>
		} else if (RxBuffer[0] == 71 && count == 6) {
 80014fc:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <Joystick_Received+0x148>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b47      	cmp	r3, #71	; 0x47
 8001502:	d142      	bne.n	800158a <Joystick_Received+0x116>
 8001504:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <Joystick_Received+0x150>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b06      	cmp	r3, #6
 800150a:	d13e      	bne.n	800158a <Joystick_Received+0x116>
			count = 0;
 800150c:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <Joystick_Received+0x150>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
			receivedByte[0] = (tempData[1] << 8) | tempData[0];
 8001512:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <Joystick_Received+0x14c>)
 8001514:	785b      	ldrb	r3, [r3, #1]
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	4a29      	ldr	r2, [pc, #164]	; (80015c0 <Joystick_Received+0x14c>)
 800151a:	7812      	ldrb	r2, [r2, #0]
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	601a      	str	r2, [r3, #0]
			receivedByte[1] = (tempData[3] << 8) | tempData[2];
 8001522:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <Joystick_Received+0x14c>)
 8001524:	78db      	ldrb	r3, [r3, #3]
 8001526:	021a      	lsls	r2, r3, #8
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <Joystick_Received+0x14c>)
 800152a:	789b      	ldrb	r3, [r3, #2]
 800152c:	4619      	mov	r1, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3304      	adds	r3, #4
 8001532:	430a      	orrs	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
			receivedByte[2] = tempData[4];
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <Joystick_Received+0x14c>)
 8001538:	791a      	ldrb	r2, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3308      	adds	r3, #8
 800153e:	601a      	str	r2, [r3, #0]
			receivedByte[3] = tempData[5];
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <Joystick_Received+0x14c>)
 8001542:	795a      	ldrb	r2, [r3, #5]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	330c      	adds	r3, #12
 8001548:	601a      	str	r2, [r3, #0]
			if (receivedByte[0] > UINT16_MAX / 2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001552:	db06      	blt.n	8001562 <Joystick_Received+0xee>
				receivedByte[0] -= UINT16_MAX + 1;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e00d      	b.n	800157e <Joystick_Received+0x10a>
			else if (receivedByte[1] > UINT16_MAX / 2)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3304      	adds	r3, #4
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800156c:	db07      	blt.n	800157e <Joystick_Received+0x10a>
				receivedByte[1] -= UINT16_MAX + 1;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3304      	adds	r3, #4
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3304      	adds	r3, #4
 8001578:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800157c:	601a      	str	r2, [r3, #0]
			Joy_State = START;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <Joystick_Received+0x144>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
			joystick_callback();
 8001584:	f001 ffe0 	bl	8003548 <joystick_callback>
		} else if (RxBuffer[0] == 71 && count == 6) {
 8001588:	e00b      	b.n	80015a2 <Joystick_Received+0x12e>
			tempData[count] = RxBuffer[0];
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <Joystick_Received+0x150>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <Joystick_Received+0x148>)
 8001590:	7811      	ldrb	r1, [r2, #0]
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <Joystick_Received+0x14c>)
 8001594:	54d1      	strb	r1, [r2, r3]
			count++;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <Joystick_Received+0x150>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	3301      	adds	r3, #1
 800159c:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <Joystick_Received+0x150>)
 800159e:	6013      	str	r3, [r2, #0]
		break;
 80015a0:	e001      	b.n	80015a6 <Joystick_Received+0x132>
 80015a2:	e000      	b.n	80015a6 <Joystick_Received+0x132>
		break;
 80015a4:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 80015a6:	2201      	movs	r2, #1
 80015a8:	4904      	ldr	r1, [pc, #16]	; (80015bc <Joystick_Received+0x148>)
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <Joystick_Received+0x154>)
 80015ac:	f008 fc3c 	bl	8009e28 <HAL_UART_Receive_IT>
}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000435 	.word	0x20000435
 80015bc:	20000434 	.word	0x20000434
 80015c0:	20000438 	.word	0x20000438
 80015c4:	20000440 	.word	0x20000440
 80015c8:	20001d64 	.word	0x20001d64

080015cc <modbus_1t5_Timeout>:
void modbusRead1Register(); // function 03
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();

// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim) {
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <modbus_1t5_Timeout+0x1c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2201      	movs	r2, #1
 80015da:	751a      	strb	r2, [r3, #20]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	20000444 	.word	0x20000444

080015ec <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <modbus_3t5_Timeout+0x1c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2201      	movs	r2, #1
 80015fa:	755a      	strb	r2, [r3, #21]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	20000444 	.word	0x20000444

0800160c <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart, uint32_t pos) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev = 1;
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <modbus_UART_Recived+0x60>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2201      	movs	r2, #1
 800161c:	759a      	strb	r2, [r3, #22]
	if (hModbus->modbusUartStructure.RxTail++ < MODBUS_MESSAGEBUFFER_SIZE) {
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <modbus_UART_Recived+0x60>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001626:	1c59      	adds	r1, r3, #1
 8001628:	b289      	uxth	r1, r1
 800162a:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800162e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001632:	d210      	bcs.n	8001656 <modbus_UART_Recived+0x4a>

		HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001634:	4b0d      	ldr	r3, [pc, #52]	; (800166c <modbus_UART_Recived+0x60>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68d8      	ldr	r0, [r3, #12]
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <modbus_UART_Recived+0x60>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <modbus_UART_Recived+0x60>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001646:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800164a:	4413      	add	r3, r2
 800164c:	3302      	adds	r3, #2
 800164e:	2201      	movs	r2, #1
 8001650:	4619      	mov	r1, r3
 8001652:	f008 fbe9 	bl	8009e28 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <modbus_UART_Recived+0x60>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000444 	.word	0x20000444

08001670 <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800167a:	4a24      	ldr	r2, [pc, #144]	; (800170c <Modbus_init+0x9c>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <Modbus_init+0x9c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, (void*) modbus_1t5_Timeout);
 8001688:	4b20      	ldr	r3, [pc, #128]	; (800170c <Modbus_init+0x9c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	4a20      	ldr	r2, [pc, #128]	; (8001710 <Modbus_init+0xa0>)
 8001690:	2114      	movs	r1, #20
 8001692:	4618      	mov	r0, r3
 8001694:	f007 fca2 	bl	8008fdc <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID, (void*) modbus_3t5_Timeout);
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <Modbus_init+0x9c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <Modbus_init+0xa4>)
 80016a0:	210e      	movs	r1, #14
 80016a2:	4618      	mov	r0, r3
 80016a4:	f007 fc9a 	bl	8008fdc <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart, HAL_UART_RX_COMPLETE_CB_ID, (void*) modbus_UART_Recived);
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <Modbus_init+0x9c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <Modbus_init+0xa8>)
 80016b0:	2103      	movs	r1, #3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f008 fb10 	bl	8009cd8 <HAL_UART_RegisterCallback>
	//start Receive
	HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <Modbus_init+0x9c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68d8      	ldr	r0, [r3, #12]
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <Modbus_init+0x9c>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <Modbus_init+0x9c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80016ca:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80016ce:	4413      	add	r3, r2
 80016d0:	3302      	adds	r3, #2
 80016d2:	2201      	movs	r2, #1
 80016d4:	4619      	mov	r1, r3
 80016d6:	f008 fba7 	bl	8009e28 <HAL_UART_Receive_IT>

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <Modbus_init+0x9c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d10c      	bne.n	8001704 <Modbus_init+0x94>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <Modbus_init+0x9c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f006 fab1 	bl	8007c58 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <Modbus_init+0x9c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f006 ff66 	bl	80085d0 <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000444 	.word	0x20000444
 8001710:	080015cd 	.word	0x080015cd
 8001714:	080015ed 	.word	0x080015ed
 8001718:	0800160d 	.word	0x0800160d

0800171c <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8001728:	23ff      	movs	r3, #255	; 0xff
 800172a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 800172c:	23ff      	movs	r3, #255	; 0xff
 800172e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001730:	e013      	b.n	800175a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	7bbb      	ldrb	r3, [r7, #14]
 800173c:	4053      	eors	r3, r2
 800173e:	b2db      	uxtb	r3, r3
 8001740:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 8001742:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <CRC16+0x64>)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4413      	add	r3, r2
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	4053      	eors	r3, r2
 800174e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 8001750:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <CRC16+0x68>)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800175a:	883b      	ldrh	r3, [r7, #0]
 800175c:	1e5a      	subs	r2, r3, #1
 800175e:	803a      	strh	r2, [r7, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1e6      	bne.n	8001732 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b21a      	sxth	r2, r3
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	b21b      	sxth	r3, r3
 800176e:	4313      	orrs	r3, r2
 8001770:	b21b      	sxth	r3, r3
 8001772:	b29b      	uxth	r3, r3
}
 8001774:	4618      	mov	r0, r3
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	20000118 	.word	0x20000118
 8001784:	20000018 	.word	0x20000018

08001788 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
	switch (hModbus->Mstatus) {
 800178e:	4b81      	ldr	r3, [pc, #516]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	7e1b      	ldrb	r3, [r3, #24]
 8001794:	3b01      	subs	r3, #1
 8001796:	2b03      	cmp	r3, #3
 8001798:	d80a      	bhi.n	80017b0 <Modbus_Protocal_Worker+0x28>
 800179a:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <Modbus_Protocal_Worker+0x18>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	080017bb 	.word	0x080017bb
 80017a4:	0800195b 	.word	0x0800195b
 80017a8:	08001847 	.word	0x08001847
 80017ac:	0800186d 	.word	0x0800186d
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80017b0:	4b78      	ldr	r3, [pc, #480]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	761a      	strb	r2, [r3, #24]
		break;
 80017b8:	e0e8      	b.n	800198c <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 80017ba:	4b76      	ldr	r3, [pc, #472]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <Modbus_Protocal_Worker+0x44>
			Modbus_Emission();
 80017c6:	f000 f9dd 	bl	8001b84 <Modbus_Emission>
 80017ca:	e01c      	b.n	8001806 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if (hModbus->Flag_URev) {
 80017cc:	4b71      	ldr	r3, [pc, #452]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	7d9b      	ldrb	r3, [r3, #22]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d017      	beq.n	8001806 <Modbus_Protocal_Worker+0x7e>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80017d6:	4b6f      	ldr	r3, [pc, #444]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2200      	movs	r2, #0
 80017dc:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80017de:	4b6d      	ldr	r3, [pc, #436]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2200      	movs	r2, #0
 80017e4:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80017e6:	4b6b      	ldr	r3, [pc, #428]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b68      	ldr	r3, [pc, #416]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f042 0201 	orr.w	r2, r2, #1
 80017fc:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 80017fe:	4b65      	ldr	r3, [pc, #404]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2203      	movs	r2, #3
 8001804:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 8001806:	4b63      	ldr	r3, [pc, #396]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b20      	cmp	r3, #32
 8001814:	f040 80b3 	bne.w	800197e <Modbus_Protocal_Worker+0x1f6>
			hModbus->modbusUartStructure.RxTail = 0;
 8001818:	4b5e      	ldr	r3, [pc, #376]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2200      	movs	r2, #0
 800181e:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001822:	4b5c      	ldr	r3, [pc, #368]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68d8      	ldr	r0, [r3, #12]
 8001828:	4b5a      	ldr	r3, [pc, #360]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001834:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001838:	4413      	add	r3, r2
 800183a:	3302      	adds	r3, #2
 800183c:	2201      	movs	r2, #1
 800183e:	4619      	mov	r1, r3
 8001840:	f008 faf2 	bl	8009e28 <HAL_UART_Receive_IT>
		}
		break;
 8001844:	e09b      	b.n	800197e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 8001846:	4b53      	ldr	r3, [pc, #332]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	7d1b      	ldrb	r3, [r3, #20]
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 8098 	beq.w	8001982 <Modbus_Protocal_Worker+0x1fa>
			/*reset recived flag*/
			hModbus->Flag_URev = 0;
 8001852:	4b50      	ldr	r3, [pc, #320]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2200      	movs	r2, #0
 8001858:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800185a:	4b4e      	ldr	r3, [pc, #312]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	22fe      	movs	r2, #254	; 0xfe
 8001860:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001862:	4b4c      	ldr	r3, [pc, #304]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2204      	movs	r2, #4
 8001868:	761a      	strb	r2, [r3, #24]
		}
		break;
 800186a:	e08a      	b.n	8001982 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if (hModbus->Flag_URev) {
 800186c:	4b49      	ldr	r3, [pc, #292]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	7d9b      	ldrb	r3, [r3, #22]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d009      	beq.n	800188a <Modbus_Protocal_Worker+0x102>

			if (!hModbus->RecvStatus) {
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d103      	bne.n	800188a <Modbus_Protocal_Worker+0x102>
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001882:	4b44      	ldr	r3, [pc, #272]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	22ff      	movs	r2, #255	; 0xff
 8001888:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 800188a:	4b42      	ldr	r3, [pc, #264]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001892:	f113 0f02 	cmn.w	r3, #2
 8001896:	d150      	bne.n	800193a <Modbus_Protocal_Worker+0x1b2>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001898:	4b3e      	ldr	r3, [pc, #248]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2200      	movs	r2, #0
 800189e:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx, hModbus->modbusUartStructure.RxTail - 2);
 80018a0:	4b3c      	ldr	r3, [pc, #240]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f203 2272 	addw	r2, r3, #626	; 0x272
 80018a8:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80018b0:	3b02      	subs	r3, #2
 80018b2:	4619      	mov	r1, r3
 80018b4:	4610      	mov	r0, r2
 80018b6:	f7ff ff31 	bl	800171c <CRC16>
 80018ba:	4603      	mov	r3, r0
 80018bc:	80bb      	strh	r3, [r7, #4]

			if (!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80018be:	793a      	ldrb	r2, [r7, #4]
 80018c0:	4b34      	ldr	r3, [pc, #208]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 80018c2:	6819      	ldr	r1, [r3, #0]
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80018cc:	3b02      	subs	r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d10c      	bne.n	80018f2 <Modbus_Protocal_Worker+0x16a>
					&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 1])) {
 80018d8:	797a      	ldrb	r2, [r7, #5]
 80018da:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 80018dc:	6819      	ldr	r1, [r3, #0]
 80018de:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80018e6:	3b01      	subs	r3, #1
 80018e8:	440b      	add	r3, r1
 80018ea:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if (!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d004      	beq.n	80018fc <Modbus_Protocal_Worker+0x174>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80018f2:	4b28      	ldr	r3, [pc, #160]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	22ff      	movs	r2, #255	; 0xff
 80018f8:	75da      	strb	r2, [r3, #23]
				break;
 80018fa:	e047      	b.n	800198c <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80018fc:	4b25      	ldr	r3, [pc, #148]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001904:	4b23      	ldr	r3, [pc, #140]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d113      	bne.n	8001936 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe, hModbus->modbusUartStructure.MessageBufferRx + 1, hModbus->modbusUartStructure.RxTail - 3);
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f103 0019 	add.w	r0, r3, #25
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f203 2372 	addw	r3, r3, #626	; 0x272
 800191e:	1c59      	adds	r1, r3, #1
 8001920:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001928:	3b03      	subs	r3, #3
 800192a:	461a      	mov	r2, r3
 800192c:	f009 fc34 	bl	800b198 <memcpy>

			//execute command
			Modbus_frame_response();
 8001930:	f000 f910 	bl	8001b54 <Modbus_frame_response>
 8001934:	e001      	b.n	800193a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001936:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 8001938:	e028      	b.n	800198c <Modbus_Protocal_Worker+0x204>
		if (hModbus->Flag_T35TimeOut) {
 800193a:	4b16      	ldr	r3, [pc, #88]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	7d5b      	ldrb	r3, [r3, #21]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2201      	movs	r2, #1
 800194a:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	4618      	mov	r0, r3
 8001954:	f008 fb16 	bl	8009f84 <HAL_UART_AbortReceive>
		break;
 8001958:	e015      	b.n	8001986 <Modbus_Protocal_Worker+0x1fe>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b20      	cmp	r3, #32
 8001968:	d10f      	bne.n	800198a <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount = 0;
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <Modbus_Protocal_Worker+0x20c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2201      	movs	r2, #1
 800197a:	761a      	strb	r2, [r3, #24]
		break;
 800197c:	e005      	b.n	800198a <Modbus_Protocal_Worker+0x202>
		break;
 800197e:	bf00      	nop
 8001980:	e004      	b.n	800198c <Modbus_Protocal_Worker+0x204>
		break;
 8001982:	bf00      	nop
 8001984:	e002      	b.n	800198c <Modbus_Protocal_Worker+0x204>
		break;
 8001986:	bf00      	nop
 8001988:	e000      	b.n	800198c <Modbus_Protocal_Worker+0x204>
		break;
 800198a:	bf00      	nop
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000444 	.word	0x20000444

08001998 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <modbusWrite1Register+0x80>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	7e9b      	ldrb	r3, [r3, #26]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <modbusWrite1Register+0x80>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	7edb      	ldrb	r3, [r3, #27]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 80019b6:	88fa      	ldrh	r2, [r7, #6]
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <modbusWrite1Register+0x80>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d903      	bls.n	80019ca <modbusWrite1Register+0x32>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80019c2:	2002      	movs	r0, #2
 80019c4:	f000 f8a4 	bl	8001b10 <ModbusErrorReply>
		return;
 80019c8:	e023      	b.n	8001a12 <modbusWrite1Register+0x7a>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <modbusWrite1Register+0x80>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <modbusWrite1Register+0x80>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	440b      	add	r3, r1
 80019da:	7f12      	ldrb	r2, [r2, #28]
 80019dc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <modbusWrite1Register+0x80>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <modbusWrite1Register+0x80>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6859      	ldr	r1, [r3, #4]
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	440b      	add	r3, r1
 80019ee:	7f52      	ldrb	r2, [r2, #29]
 80019f0:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <modbusWrite1Register+0x80>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f203 1045 	addw	r0, r3, #325	; 0x145
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <modbusWrite1Register+0x80>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3319      	adds	r3, #25
 8001a00:	2208      	movs	r2, #8
 8001a02:	4619      	mov	r1, r3
 8001a04:	f009 fbc8 	bl	800b198 <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <modbusWrite1Register+0x80>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2205      	movs	r2, #5
 8001a0e:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000444 	.word	0x20000444

08001a1c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8) + (hModbus->Rxframe[4]));
 8001a22:	4b3a      	ldr	r3, [pc, #232]	; (8001b0c <modbusRead1Register+0xf0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	7f1b      	ldrb	r3, [r3, #28]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <modbusRead1Register+0xf0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	7f5b      	ldrb	r3, [r3, #29]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 8001a3a:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <modbusRead1Register+0xf0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	7e9b      	ldrb	r3, [r3, #26]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <modbusRead1Register+0xf0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	7edb      	ldrb	r3, [r3, #27]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <modbusRead1Register+0x42>
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	2b7d      	cmp	r3, #125	; 0x7d
 8001a5c:	d903      	bls.n	8001a66 <modbusRead1Register+0x4a>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001a5e:	2003      	movs	r0, #3
 8001a60:	f000 f856 	bl	8001b10 <ModbusErrorReply>
		return;
 8001a64:	e04e      	b.n	8001b04 <modbusRead1Register+0xe8>
	}

	if (startAddress > hModbus->RegisterSize || (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 8001a66:	88ba      	ldrh	r2, [r7, #4]
 8001a68:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <modbusRead1Register+0xf0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d808      	bhi.n	8001a84 <modbusRead1Register+0x68>
 8001a72:	88ba      	ldrh	r2, [r7, #4]
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	4413      	add	r3, r2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <modbusRead1Register+0xf0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d903      	bls.n	8001a8c <modbusRead1Register+0x70>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001a84:	2002      	movs	r0, #2
 8001a86:	f000 f843 	bl	8001b10 <ModbusErrorReply>
		return;
 8001a8a:	e03b      	b.n	8001b04 <modbusRead1Register+0xe8>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <modbusRead1Register+0xf0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2203      	movs	r2, #3
 8001a92:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <modbusRead1Register+0xf0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	0052      	lsls	r2, r2, #1
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 8001aa6:	2400      	movs	r4, #0
 8001aa8:	e020      	b.n	8001aec <modbusRead1Register+0xd0>
		hModbus->Txframe[2 * i + 2] = hModbus->RegisterAddress[startAddress + i].U8[1];
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <modbusRead1Register+0xf0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	88bb      	ldrh	r3, [r7, #4]
 8001ab2:	4423      	add	r3, r4
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	18d1      	adds	r1, r2, r3
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <modbusRead1Register+0xf0>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	1c63      	adds	r3, r4, #1
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	7849      	ldrb	r1, [r1, #1]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	460a      	mov	r2, r1
 8001ac6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2 * i + 3] = hModbus->RegisterAddress[startAddress + i].U8[0];
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <modbusRead1Register+0xf0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	88bb      	ldrh	r3, [r7, #4]
 8001ad2:	4423      	add	r3, r4
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	18d1      	adds	r1, r2, r3
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <modbusRead1Register+0xf0>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	0063      	lsls	r3, r4, #1
 8001ade:	3303      	adds	r3, #3
 8001ae0:	7809      	ldrb	r1, [r1, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	460a      	mov	r2, r1
 8001ae6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for (i = 0; i < numberOfDataToRead; i++) {
 8001aea:	3401      	adds	r4, #1
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	429c      	cmp	r4, r3
 8001af0:	dbdb      	blt.n	8001aaa <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	3301      	adds	r3, #1
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <modbusRead1Register+0xf0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0052      	lsls	r2, r2, #1
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000444 	.word	0x20000444

08001b10 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <ModbusErrorReply+0x40>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	7e5a      	ldrb	r2, [r3, #25]
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <ModbusErrorReply+0x40>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <ModbusErrorReply+0x40>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	79fa      	ldrb	r2, [r7, #7]
 8001b34:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <ModbusErrorReply+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000444 	.word	0x20000444

08001b54 <Modbus_frame_response>:

void Modbus_frame_response() {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <Modbus_frame_response+0x2c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	7e5b      	ldrb	r3, [r3, #25]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d004      	beq.n	8001b6c <Modbus_frame_response+0x18>
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d105      	bne.n	8001b72 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001b66:	f7ff ff17 	bl	8001998 <modbusWrite1Register>
		break;
 8001b6a:	e006      	b.n	8001b7a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001b6c:	f7ff ff56 	bl	8001a1c <modbusRead1Register>
		break;
 8001b70:	e003      	b.n	8001b7a <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001b72:	2001      	movs	r0, #1
 8001b74:	f7ff ffcc 	bl	8001b10 <ModbusErrorReply>
		break;
 8001b78:	bf00      	nop

	}
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000444 	.word	0x20000444

08001b84 <Modbus_Emission>:

void Modbus_Emission() {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <Modbus_Emission+0xfc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	d15e      	bne.n	8001c58 <Modbus_Emission+0xd4>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001b9a:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <Modbus_Emission+0xfc>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <Modbus_Emission+0xfc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	7812      	ldrb	r2, [r2, #0]
 8001ba4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1, hModbus->Txframe, hModbus->TxCount);
 8001ba8:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <Modbus_Emission+0xfc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8001bb0:	1c58      	adds	r0, r3, #1
 8001bb2:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <Modbus_Emission+0xfc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f203 1145 	addw	r1, r3, #325	; 0x145
 8001bba:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <Modbus_Emission+0xfc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f009 fae8 	bl	800b198 <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <Modbus_Emission+0xfc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <Modbus_Emission+0xfc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3203      	adds	r2, #3
 8001bd8:	b292      	uxth	r2, r2
 8001bda:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx, hModbus->modbusUartStructure.TxTail - 2);
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <Modbus_Emission+0xfc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
 8001be6:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <Modbus_Emission+0xfc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001bee:	3b02      	subs	r3, #2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f7ff fd92 	bl	800171c <CRC16>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail - 2] = CalculateCRC.U8[0];
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <Modbus_Emission+0xfc>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <Modbus_Emission+0xfc>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001c08:	3b02      	subs	r3, #2
 8001c0a:	7939      	ldrb	r1, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	460a      	mov	r2, r1
 8001c10:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail - 1] = CalculateCRC.U8[1];
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <Modbus_Emission+0xfc>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <Modbus_Emission+0xfc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001c20:	3b01      	subs	r3, #1
 8001c22:	7979      	ldrb	r1, [r7, #5]
 8001c24:	4413      	add	r3, r2
 8001c26:	460a      	mov	r2, r1
 8001c28:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		//sent modbus
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001c2c:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <Modbus_Emission+0xfc>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b20      	cmp	r3, #32
 8001c3a:	d10d      	bne.n	8001c58 <Modbus_Emission+0xd4>
			HAL_UART_Transmit_DMA(hModbus->huart, hModbus->modbusUartStructure.MessageBufferTx, hModbus->modbusUartStructure.TxTail);
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <Modbus_Emission+0xfc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68d8      	ldr	r0, [r3, #12]
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <Modbus_Emission+0xfc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <Modbus_Emission+0xfc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001c52:	461a      	mov	r2, r3
 8001c54:	f008 f918 	bl	8009e88 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <Modbus_Emission+0xfc>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001c60:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <Modbus_Emission+0xfc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2200      	movs	r2, #0
 8001c66:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev = 0;
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <Modbus_Emission+0xfc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus = Modbus_state_Emission;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <Modbus_Emission+0xfc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2202      	movs	r2, #2
 8001c76:	761a      	strb	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000444 	.word	0x20000444

08001c84 <PositionControlPID>:

// PRIVATE TYPEDEF ================================================================================

// USER CODE ======================================================================================

void PositionControlPID(float trajectory_setpoint, float final_setpoint, float position_now, float Kp, float Ki, float Kd, float *PID_out) {
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	ed87 0a07 	vstr	s0, [r7, #28]
 8001c8e:	edc7 0a06 	vstr	s1, [r7, #24]
 8001c92:	ed87 1a05 	vstr	s2, [r7, #20]
 8001c96:	edc7 1a04 	vstr	s3, [r7, #16]
 8001c9a:	ed87 2a03 	vstr	s4, [r7, #12]
 8001c9e:	edc7 2a02 	vstr	s5, [r7, #8]
 8001ca2:	6078      	str	r0, [r7, #4]
	static float first = 0;
	static float second = 0;
	static float third = 0;

	// error position
	error_first = trajectory_setpoint - position_now;
 8001ca4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ca8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb0:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <PositionControlPID+0x100>)
 8001cb2:	edc3 7a00 	vstr	s15, [r3]
	//Position.error[0] = PID_position - QEIReadRaw_now;

	// first error
	first = (Kp + Ki + Kd) * error_first;
 8001cb6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cba:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cca:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <PositionControlPID+0x100>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd4:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <PositionControlPID+0x104>)
 8001cd6:	edc3 7a00 	vstr	s15, [r3]

	// second error
	second = (Kp + (2 * Kd)) * error_second;
 8001cda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cde:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ce2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cea:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <PositionControlPID+0x108>)
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <PositionControlPID+0x10c>)
 8001cf6:	edc3 7a00 	vstr	s15, [r3]

	// third error
	third = Kd * error_third;
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <PositionControlPID+0x110>)
 8001cfc:	ed93 7a00 	vldr	s14, [r3]
 8001d00:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <PositionControlPID+0x114>)
 8001d0a:	edc3 7a00 	vstr	s15, [r3]

	// voltage
	*PID_out += first - second + third;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	ed93 7a00 	vldr	s14, [r3]
 8001d14:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <PositionControlPID+0x104>)
 8001d16:	edd3 6a00 	vldr	s13, [r3]
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <PositionControlPID+0x10c>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d24:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <PositionControlPID+0x114>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	edc3 7a00 	vstr	s15, [r3]

	if (error_first == 0 && (final_setpoint - trajectory_setpoint) == 0) {
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <PositionControlPID+0x100>)
 8001d3a:	edd3 7a00 	vldr	s15, [r3]
 8001d3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	d10e      	bne.n	8001d66 <PositionControlPID+0xe2>
 8001d48:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d54:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5c:	d103      	bne.n	8001d66 <PositionControlPID+0xe2>
		*PID_out = 0; // Reset voltage to 0
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
	}

	// set present to past
	error_third = error_second;
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <PositionControlPID+0x108>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <PositionControlPID+0x110>)
 8001d6c:	6013      	str	r3, [r2, #0]
	error_second = error_first;
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <PositionControlPID+0x100>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <PositionControlPID+0x108>)
 8001d74:	6013      	str	r3, [r2, #0]

}
 8001d76:	bf00      	nop
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000448 	.word	0x20000448
 8001d88:	2000044c 	.word	0x2000044c
 8001d8c:	20000450 	.word	0x20000450
 8001d90:	20000454 	.word	0x20000454
 8001d94:	20000458 	.word	0x20000458
 8001d98:	2000045c 	.word	0x2000045c

08001d9c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001da2:	463b      	mov	r3, r7
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dae:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <MX_ADC1_Init+0x98>)
 8001db0:	4a21      	ldr	r2, [pc, #132]	; (8001e38 <MX_ADC1_Init+0x9c>)
 8001db2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <MX_ADC1_Init+0x98>)
 8001db6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <MX_ADC1_Init+0x98>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <MX_ADC1_Init+0x98>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <MX_ADC1_Init+0x98>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dce:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <MX_ADC1_Init+0x98>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <MX_ADC1_Init+0x98>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <MX_ADC1_Init+0x98>)
 8001dde:	4a17      	ldr	r2, [pc, #92]	; (8001e3c <MX_ADC1_Init+0xa0>)
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001de2:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <MX_ADC1_Init+0x98>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <MX_ADC1_Init+0x98>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <MX_ADC1_Init+0x98>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <MX_ADC1_Init+0x98>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dfc:	480d      	ldr	r0, [pc, #52]	; (8001e34 <MX_ADC1_Init+0x98>)
 8001dfe:	f003 fc31 	bl	8005664 <HAL_ADC_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e08:	f002 fa2e 	bl	8004268 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001e0c:	230a      	movs	r3, #10
 8001e0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e10:	2301      	movs	r3, #1
 8001e12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e18:	463b      	mov	r3, r7
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_ADC1_Init+0x98>)
 8001e1e:	f003 fc65 	bl	80056ec <HAL_ADC_ConfigChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e28:	f002 fa1e 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000460 	.word	0x20000460
 8001e38:	40012000 	.word	0x40012000
 8001e3c:	0f000001 	.word	0x0f000001

08001e40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a17      	ldr	r2, [pc, #92]	; (8001ebc <HAL_ADC_MspInit+0x7c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d127      	bne.n	8001eb2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <HAL_ADC_MspInit+0x80>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	4a15      	ldr	r2, [pc, #84]	; (8001ec0 <HAL_ADC_MspInit+0x80>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	6453      	str	r3, [r2, #68]	; 0x44
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <HAL_ADC_MspInit+0x80>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <HAL_ADC_MspInit+0x80>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a0e      	ldr	r2, [pc, #56]	; (8001ec0 <HAL_ADC_MspInit+0x80>)
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <HAL_ADC_MspInit+0x80>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <HAL_ADC_MspInit+0x84>)
 8001eae:	f004 fb6b 	bl	8006588 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	3728      	adds	r7, #40	; 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40012000 	.word	0x40012000
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020800 	.word	0x40020800

08001ec8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <MX_DMA_Init+0x4c>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <MX_DMA_Init+0x4c>)
 8001ed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <MX_DMA_Init+0x4c>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	200f      	movs	r0, #15
 8001ef0:	f003 ff05 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001ef4:	200f      	movs	r0, #15
 8001ef6:	f003 ff1e 	bl	8005d36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	2011      	movs	r0, #17
 8001f00:	f003 fefd 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001f04:	2011      	movs	r0, #17
 8001f06:	f003 ff16 	bl	8005d36 <HAL_NVIC_EnableIRQ>

}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800

08001f18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	4b46      	ldr	r3, [pc, #280]	; (800204c <MX_GPIO_Init+0x134>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a45      	ldr	r2, [pc, #276]	; (800204c <MX_GPIO_Init+0x134>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b43      	ldr	r3, [pc, #268]	; (800204c <MX_GPIO_Init+0x134>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b3f      	ldr	r3, [pc, #252]	; (800204c <MX_GPIO_Init+0x134>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a3e      	ldr	r2, [pc, #248]	; (800204c <MX_GPIO_Init+0x134>)
 8001f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b3c      	ldr	r3, [pc, #240]	; (800204c <MX_GPIO_Init+0x134>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b38      	ldr	r3, [pc, #224]	; (800204c <MX_GPIO_Init+0x134>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a37      	ldr	r2, [pc, #220]	; (800204c <MX_GPIO_Init+0x134>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b35      	ldr	r3, [pc, #212]	; (800204c <MX_GPIO_Init+0x134>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	4b31      	ldr	r3, [pc, #196]	; (800204c <MX_GPIO_Init+0x134>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a30      	ldr	r2, [pc, #192]	; (800204c <MX_GPIO_Init+0x134>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b2e      	ldr	r3, [pc, #184]	; (800204c <MX_GPIO_Init+0x134>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8001fa4:	482a      	ldr	r0, [pc, #168]	; (8002050 <MX_GPIO_Init+0x138>)
 8001fa6:	f004 fc8b 	bl	80068c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fb0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4824      	ldr	r0, [pc, #144]	; (8002054 <MX_GPIO_Init+0x13c>)
 8001fc2:	f004 fae1 	bl	8006588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4619      	mov	r1, r3
 8001fda:	481e      	ldr	r0, [pc, #120]	; (8002054 <MX_GPIO_Init+0x13c>)
 8001fdc:	f004 fad4 	bl	8006588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fe4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fea:	2301      	movs	r3, #1
 8001fec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4817      	ldr	r0, [pc, #92]	; (8002054 <MX_GPIO_Init+0x13c>)
 8001ff6:	f004 fac7 	bl	8006588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 8001ffa:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002000:	2301      	movs	r3, #1
 8002002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	480f      	ldr	r0, [pc, #60]	; (8002050 <MX_GPIO_Init+0x138>)
 8002014:	f004 fab8 	bl	8006588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	480a      	ldr	r0, [pc, #40]	; (8002058 <MX_GPIO_Init+0x140>)
 800202e:	f004 faab 	bl	8006588 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	2009      	movs	r0, #9
 8002038:	f003 fe61 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800203c:	2009      	movs	r0, #9
 800203e:	f003 fe7a 	bl	8005d36 <HAL_NVIC_EnableIRQ>

}
 8002042:	bf00      	nop
 8002044:	3728      	adds	r7, #40	; 0x28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40020000 	.word	0x40020000
 8002054:	40020800 	.word	0x40020800
 8002058:	40020400 	.word	0x40020400

0800205c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <MX_I2C1_Init+0x50>)
 8002062:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <MX_I2C1_Init+0x54>)
 8002064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <MX_I2C1_Init+0x50>)
 8002068:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <MX_I2C1_Init+0x58>)
 800206a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <MX_I2C1_Init+0x50>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <MX_I2C1_Init+0x50>)
 8002074:	2200      	movs	r2, #0
 8002076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <MX_I2C1_Init+0x50>)
 800207a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800207e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <MX_I2C1_Init+0x50>)
 8002082:	2200      	movs	r2, #0
 8002084:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <MX_I2C1_Init+0x50>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <MX_I2C1_Init+0x50>)
 800208e:	2200      	movs	r2, #0
 8002090:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <MX_I2C1_Init+0x50>)
 8002094:	2200      	movs	r2, #0
 8002096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002098:	4804      	ldr	r0, [pc, #16]	; (80020ac <MX_I2C1_Init+0x50>)
 800209a:	f004 fc43 	bl	8006924 <HAL_I2C_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020a4:	f002 f8e0 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200004a8 	.word	0x200004a8
 80020b0:	40005400 	.word	0x40005400
 80020b4:	000186a0 	.word	0x000186a0

080020b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a19      	ldr	r2, [pc, #100]	; (800213c <HAL_I2C_MspInit+0x84>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d12b      	bne.n	8002132 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	4b18      	ldr	r3, [pc, #96]	; (8002140 <HAL_I2C_MspInit+0x88>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a17      	ldr	r2, [pc, #92]	; (8002140 <HAL_I2C_MspInit+0x88>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <HAL_I2C_MspInit+0x88>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020f6:	23c0      	movs	r3, #192	; 0xc0
 80020f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020fa:	2312      	movs	r3, #18
 80020fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002106:	2304      	movs	r3, #4
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	4619      	mov	r1, r3
 8002110:	480c      	ldr	r0, [pc, #48]	; (8002144 <HAL_I2C_MspInit+0x8c>)
 8002112:	f004 fa39 	bl	8006588 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_I2C_MspInit+0x88>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a08      	ldr	r2, [pc, #32]	; (8002140 <HAL_I2C_MspInit+0x88>)
 8002120:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_I2C_MspInit+0x88>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002132:	bf00      	nop
 8002134:	3728      	adds	r7, #40	; 0x28
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40005400 	.word	0x40005400
 8002140:	40023800 	.word	0x40023800
 8002144:	40020400 	.word	0x40020400

08002148 <motor>:
int32_t getLocalPosition();
int32_t getRawPosition();

// USER CODE ======================================================================================

void motor(float voltage) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage > 0) {
 8002152:	edd7 7a01 	vldr	s15, [r7, #4]
 8002156:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215e:	dd11      	ble.n	8002184 <motor+0x3c>
		// forward
		if (voltage > 25000) {
 8002160:	edd7 7a01 	vldr	s15, [r7, #4]
 8002164:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80021f8 <motor+0xb0>
 8002168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002170:	dd01      	ble.n	8002176 <motor+0x2e>
			voltage = 25000;
 8002172:	4b22      	ldr	r3, [pc, #136]	; (80021fc <motor+0xb4>)
 8002174:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800217c:	4820      	ldr	r0, [pc, #128]	; (8002200 <motor+0xb8>)
 800217e:	f004 fb9f 	bl	80068c0 <HAL_GPIO_WritePin>
 8002182:	e02b      	b.n	80021dc <motor+0x94>
	} else if (voltage < 0) {
 8002184:	edd7 7a01 	vldr	s15, [r7, #4]
 8002188:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002190:	d521      	bpl.n	80021d6 <motor+0x8e>
		// backward
		voltage *= -1.0;
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe f9e0 	bl	8000558 <__aeabi_f2d>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	f7fe fd2a 	bl	8000bf8 <__aeabi_d2f>
 80021a4:	4603      	mov	r3, r0
 80021a6:	ee07 3a90 	vmov	s15, r3
 80021aa:	eef1 7a67 	vneg.f32	s15, s15
 80021ae:	edc7 7a01 	vstr	s15, [r7, #4]
		if (voltage > 25000) {
 80021b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80021b6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80021f8 <motor+0xb0>
 80021ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c2:	dd01      	ble.n	80021c8 <motor+0x80>
			voltage = 25000;
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <motor+0xb4>)
 80021c6:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
 80021c8:	2201      	movs	r2, #1
 80021ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021ce:	480c      	ldr	r0, [pc, #48]	; (8002200 <motor+0xb8>)
 80021d0:	f004 fb76 	bl	80068c0 <HAL_GPIO_WritePin>
 80021d4:	e002      	b.n	80021dc <motor+0x94>
	} else {
		// stop
		voltage = 0;
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, voltage);
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <motor+0xbc>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80021e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021e8:	ee17 2a90 	vmov	r2, s15
 80021ec:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	46c35000 	.word	0x46c35000
 80021fc:	46c35000 	.word	0x46c35000
 8002200:	40020000 	.word	0x40020000
 8002204:	2000193c 	.word	0x2000193c

08002208 <getLocalPosition>:

int32_t getLocalPosition() {
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2) - homeoffset;
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <getLocalPosition+0x1c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	4a05      	ldr	r2, [pc, #20]	; (8002228 <getLocalPosition+0x20>)
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	1a9b      	subs	r3, r3, r2
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	200019f0 	.word	0x200019f0
 8002228:	200018d0 	.word	0x200018d0

0800222c <getRawPosition>:

int32_t getRawPosition() {
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <getRawPosition+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	200019f0 	.word	0x200019f0
 8002244:	00000000 	.word	0x00000000

08002248 <localize>:
float calculateNorm(Coordinate coord);
Coordinate negateCoordinate(Coordinate coord);

// USER CODE ======================================================================================

void localize(Coordinate *inputs, Coordinate *outputs, Coordinate *origin, float *angle) {
 8002248:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800224c:	b0a2      	sub	sp, #136	; 0x88
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	603b      	str	r3, [r7, #0]
	Coordinate point1 = inputs[0];
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800225e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002262:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point2 = inputs[1];
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800226c:	3208      	adds	r2, #8
 800226e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002272:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point3 = inputs[2];
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800227c:	3210      	adds	r2, #16
 800227e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002282:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate vectA = subtractCoordinates(point2, point1);
 8002286:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 800228a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800228e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002292:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002296:	eeb0 1a46 	vmov.f32	s2, s12
 800229a:	eef0 1a66 	vmov.f32	s3, s13
 800229e:	eeb0 0a47 	vmov.f32	s0, s14
 80022a2:	eef0 0a67 	vmov.f32	s1, s15
 80022a6:	f000 fbc7 	bl	8002a38 <subtractCoordinates>
 80022aa:	eeb0 7a40 	vmov.f32	s14, s0
 80022ae:	eef0 7a60 	vmov.f32	s15, s1
 80022b2:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 80022b6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	Coordinate vectB = subtractCoordinates(point3, point2);
 80022ba:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 80022be:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80022c2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80022c6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80022ca:	eeb0 1a46 	vmov.f32	s2, s12
 80022ce:	eef0 1a66 	vmov.f32	s3, s13
 80022d2:	eeb0 0a47 	vmov.f32	s0, s14
 80022d6:	eef0 0a67 	vmov.f32	s1, s15
 80022da:	f000 fbad 	bl	8002a38 <subtractCoordinates>
 80022de:	eeb0 7a40 	vmov.f32	s14, s0
 80022e2:	eef0 7a60 	vmov.f32	s15, s1
 80022e6:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 80022ea:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	Coordinate vectC = subtractCoordinates(point3, point1);
 80022ee:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 80022f2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80022f6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80022fa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80022fe:	eeb0 1a46 	vmov.f32	s2, s12
 8002302:	eef0 1a66 	vmov.f32	s3, s13
 8002306:	eeb0 0a47 	vmov.f32	s0, s14
 800230a:	eef0 0a67 	vmov.f32	s1, s15
 800230e:	f000 fb93 	bl	8002a38 <subtractCoordinates>
 8002312:	eeb0 7a40 	vmov.f32	s14, s0
 8002316:	eef0 7a60 	vmov.f32	s15, s1
 800231a:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800231e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float lenA = calculateNorm(vectA);
 8002322:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002326:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800232a:	eeb0 0a47 	vmov.f32	s0, s14
 800232e:	eef0 0a67 	vmov.f32	s1, s15
 8002332:	f000 fbbb 	bl	8002aac <calculateNorm>
 8002336:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
	float lenB = calculateNorm(vectB);
 800233a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800233e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002342:	eeb0 0a47 	vmov.f32	s0, s14
 8002346:	eef0 0a67 	vmov.f32	s1, s15
 800234a:	f000 fbaf 	bl	8002aac <calculateNorm>
 800234e:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	float lenC = calculateNorm(vectC);
 8002352:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002356:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800235a:	eeb0 0a47 	vmov.f32	s0, s14
 800235e:	eef0 0a67 	vmov.f32	s1, s15
 8002362:	f000 fba3 	bl	8002aac <calculateNorm>
 8002366:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	Coordinate vector1;
	Coordinate vector2;

	if (lenA < lenB && lenB < lenC && lenA < lenC) {
 800236a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800236e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002372:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237a:	d534      	bpl.n	80023e6 <localize+0x19e>
 800237c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002380:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238c:	d52b      	bpl.n	80023e6 <localize+0x19e>
 800238e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002392:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002396:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800239a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239e:	d522      	bpl.n	80023e6 <localize+0x19e>
		// CASE 1
		*origin = point2;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023ac:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectB;
 80023b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023b4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80023b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023bc:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = negateCoordinate(vectA);
 80023c0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80023c4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80023c8:	eeb0 0a47 	vmov.f32	s0, s14
 80023cc:	eef0 0a67 	vmov.f32	s1, s15
 80023d0:	f000 fb9f 	bl	8002b12 <negateCoordinate>
 80023d4:	eeb0 7a40 	vmov.f32	s14, s0
 80023d8:	eef0 7a60 	vmov.f32	s15, s1
 80023dc:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80023e0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80023e4:	e134      	b.n	8002650 <localize+0x408>
	} else if (lenC < lenB && lenB < lenA && lenC < lenA) {
 80023e6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80023ea:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80023ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f6:	d53e      	bpl.n	8002476 <localize+0x22e>
 80023f8:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80023fc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002400:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002408:	d535      	bpl.n	8002476 <localize+0x22e>
 800240a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800240e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241a:	d52c      	bpl.n	8002476 <localize+0x22e>
		// CASE 2
		*origin = point3;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	461a      	mov	r2, r3
 8002420:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002424:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002428:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectB);
 800242c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002430:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002434:	eeb0 0a47 	vmov.f32	s0, s14
 8002438:	eef0 0a67 	vmov.f32	s1, s15
 800243c:	f000 fb69 	bl	8002b12 <negateCoordinate>
 8002440:	eeb0 7a40 	vmov.f32	s14, s0
 8002444:	eef0 7a60 	vmov.f32	s15, s1
 8002448:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800244c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectC);
 8002450:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002454:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002458:	eeb0 0a47 	vmov.f32	s0, s14
 800245c:	eef0 0a67 	vmov.f32	s1, s15
 8002460:	f000 fb57 	bl	8002b12 <negateCoordinate>
 8002464:	eeb0 7a40 	vmov.f32	s14, s0
 8002468:	eef0 7a60 	vmov.f32	s15, s1
 800246c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8002470:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8002474:	e0ec      	b.n	8002650 <localize+0x408>
	} else if (lenA < lenC && lenC < lenB && lenA < lenB) {
 8002476:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800247a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800247e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002486:	d52a      	bpl.n	80024de <localize+0x296>
 8002488:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800248c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002498:	d521      	bpl.n	80024de <localize+0x296>
 800249a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800249e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80024a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024aa:	d518      	bpl.n	80024de <localize+0x296>
		// CASE 3
		*origin = point1;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	461a      	mov	r2, r3
 80024b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024b8:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectC;
 80024bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024c8:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectA;
 80024cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80024d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80024dc:	e0b8      	b.n	8002650 <localize+0x408>
	} else if (lenC < lenA && lenA < lenB && lenC < lenB) {
 80024de:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80024e2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80024e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ee:	d52a      	bpl.n	8002546 <localize+0x2fe>
 80024f0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80024f4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80024f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002500:	d521      	bpl.n	8002546 <localize+0x2fe>
 8002502:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002506:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800250a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002512:	d518      	bpl.n	8002546 <localize+0x2fe>
		// CASE 4
		*origin = point1;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	461a      	mov	r2, r3
 8002518:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800251c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002520:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectA;
 8002524:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002528:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800252c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002530:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectC;
 8002534:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002538:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800253c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002540:	e883 0003 	stmia.w	r3, {r0, r1}
 8002544:	e084      	b.n	8002650 <localize+0x408>
	} else if (lenB < lenC && lenC < lenA && lenB < lenA) {
 8002546:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800254a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800254e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002556:	d53e      	bpl.n	80025d6 <localize+0x38e>
 8002558:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800255c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002560:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002568:	d535      	bpl.n	80025d6 <localize+0x38e>
 800256a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800256e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257a:	d52c      	bpl.n	80025d6 <localize+0x38e>
		// CASE 5
		*origin = point3;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	461a      	mov	r2, r3
 8002580:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002584:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002588:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectC);
 800258c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002590:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002594:	eeb0 0a47 	vmov.f32	s0, s14
 8002598:	eef0 0a67 	vmov.f32	s1, s15
 800259c:	f000 fab9 	bl	8002b12 <negateCoordinate>
 80025a0:	eeb0 7a40 	vmov.f32	s14, s0
 80025a4:	eef0 7a60 	vmov.f32	s15, s1
 80025a8:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80025ac:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectB);
 80025b0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80025b4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80025b8:	eeb0 0a47 	vmov.f32	s0, s14
 80025bc:	eef0 0a67 	vmov.f32	s1, s15
 80025c0:	f000 faa7 	bl	8002b12 <negateCoordinate>
 80025c4:	eeb0 7a40 	vmov.f32	s14, s0
 80025c8:	eef0 7a60 	vmov.f32	s15, s1
 80025cc:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80025d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80025d4:	e03c      	b.n	8002650 <localize+0x408>
	} else if (lenB < lenA && lenA < lenC && lenB < lenC) {
 80025d6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80025da:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80025de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e6:	d533      	bpl.n	8002650 <localize+0x408>
 80025e8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80025ec:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80025f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f8:	d52a      	bpl.n	8002650 <localize+0x408>
 80025fa:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80025fe:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002602:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260a:	d521      	bpl.n	8002650 <localize+0x408>
		// CASE 6
		*origin = point2;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	461a      	mov	r2, r3
 8002610:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002614:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002618:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectA);
 800261c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002620:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002624:	eeb0 0a47 	vmov.f32	s0, s14
 8002628:	eef0 0a67 	vmov.f32	s1, s15
 800262c:	f000 fa71 	bl	8002b12 <negateCoordinate>
 8002630:	eeb0 7a40 	vmov.f32	s14, s0
 8002634:	eef0 7a60 	vmov.f32	s15, s1
 8002638:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800263c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = vectB;
 8002640:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002644:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002648:	e892 0003 	ldmia.w	r2, {r0, r1}
 800264c:	e883 0003 	stmia.w	r3, {r0, r1}
	}

	// calculate vector angle
	if (vector1.x == 0) {
 8002650:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002654:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265c:	d10e      	bne.n	800267c <localize+0x434>
		if (vector1.y > 0) {
 800265e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002662:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266a:	dd03      	ble.n	8002674 <localize+0x42c>
			*angle = M_PI / 2.0;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4a72      	ldr	r2, [pc, #456]	; (8002838 <localize+0x5f0>)
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	e092      	b.n	800279a <localize+0x552>
		} else {
			*angle = 1.5 * M_PI;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	4a71      	ldr	r2, [pc, #452]	; (800283c <localize+0x5f4>)
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	e08e      	b.n	800279a <localize+0x552>
		}
	} else if (vector1.y == 0) {
 800267c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002680:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002688:	d10f      	bne.n	80026aa <localize+0x462>
		if (vector1.x >= 0) {
 800268a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800268e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002696:	db04      	blt.n	80026a2 <localize+0x45a>
			*angle = 0;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e07b      	b.n	800279a <localize+0x552>
		} else {
			*angle = M_PI;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	4a66      	ldr	r2, [pc, #408]	; (8002840 <localize+0x5f8>)
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	e077      	b.n	800279a <localize+0x552>
		}
	} else {
		*angle = fabs(atan(vector1.y / vector1.x));
 80026aa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80026ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80026b6:	ee16 0a90 	vmov	r0, s13
 80026ba:	f7fd ff4d 	bl	8000558 <__aeabi_f2d>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	ec43 2b10 	vmov	d0, r2, r3
 80026c6:	f00d f9df 	bl	800fa88 <atan>
 80026ca:	ec53 2b10 	vmov	r2, r3, d0
 80026ce:	4610      	mov	r0, r2
 80026d0:	4619      	mov	r1, r3
 80026d2:	f7fe fa91 	bl	8000bf8 <__aeabi_d2f>
 80026d6:	ee07 0a90 	vmov	s15, r0
 80026da:	eef0 7ae7 	vabs.f32	s15, s15
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	edc3 7a00 	vstr	s15, [r3]
		if (vector1.x < 0 && vector1.y < 0) {
 80026e4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f0:	d51a      	bpl.n	8002728 <localize+0x4e0>
 80026f2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80026f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fe:	d513      	bpl.n	8002728 <localize+0x4e0>
			*angle = M_PI + *angle;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd ff27 	bl	8000558 <__aeabi_f2d>
 800270a:	a347      	add	r3, pc, #284	; (adr r3, 8002828 <localize+0x5e0>)
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f7fd fdc4 	bl	800029c <__adddf3>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe fa6c 	bl	8000bf8 <__aeabi_d2f>
 8002720:	4602      	mov	r2, r0
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e038      	b.n	800279a <localize+0x552>
		} else if (vector1.x < 0) {
 8002728:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800272c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002734:	d515      	bpl.n	8002762 <localize+0x51a>
			*angle = M_PI - *angle;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7fd ff0c 	bl	8000558 <__aeabi_f2d>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	a138      	add	r1, pc, #224	; (adr r1, 8002828 <localize+0x5e0>)
 8002746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800274a:	f7fd fda5 	bl	8000298 <__aeabi_dsub>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f7fe fa4f 	bl	8000bf8 <__aeabi_d2f>
 800275a:	4602      	mov	r2, r0
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e01b      	b.n	800279a <localize+0x552>
		} else if (vector1.y < 0) {
 8002762:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002766:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800276a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276e:	d514      	bpl.n	800279a <localize+0x552>
			*angle = 2.0 * M_PI - *angle;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd feef 	bl	8000558 <__aeabi_f2d>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	a12c      	add	r1, pc, #176	; (adr r1, 8002830 <localize+0x5e8>)
 8002780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002784:	f7fd fd88 	bl	8000298 <__aeabi_dsub>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4610      	mov	r0, r2
 800278e:	4619      	mov	r1, r3
 8002790:	f7fe fa32 	bl	8000bf8 <__aeabi_d2f>
 8002794:	4602      	mov	r2, r0
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	601a      	str	r2, [r3, #0]
		}
	}

	// calculate for matrix directions
	float dir = vector1.x * vector2.y - vector1.y * vector2.x;
 800279a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800279e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80027a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a6:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80027aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80027ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	if (dir < 0) {
 80027ba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80027be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c6:	d516      	bpl.n	80027f6 <localize+0x5ae>
		*angle = *angle + M_PI;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd fec3 	bl	8000558 <__aeabi_f2d>
 80027d2:	a315      	add	r3, pc, #84	; (adr r3, 8002828 <localize+0x5e0>)
 80027d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d8:	f7fd fd60 	bl	800029c <__adddf3>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	f7fe fa08 	bl	8000bf8 <__aeabi_d2f>
 80027e8:	4602      	mov	r2, r0
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	601a      	str	r2, [r3, #0]
		dir = -1.0;
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <localize+0x5fc>)
 80027f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027f4:	e003      	b.n	80027fe <localize+0x5b6>
	} else {
		dir = 1.0;
 80027f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80027fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	}

	// create 9 points
	float X[] = { 10.0, 30.0, 50.0 };
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <localize+0x600>)
 8002800:	f107 031c 	add.w	r3, r7, #28
 8002804:	ca07      	ldmia	r2, {r0, r1, r2}
 8002806:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float Y[] = { 10.0, 25.0, 40.0 };
 800280a:	4a10      	ldr	r2, [pc, #64]	; (800284c <localize+0x604>)
 800280c:	f107 0310 	add.w	r3, r7, #16
 8002810:	ca07      	ldmia	r2, {r0, r1, r2}
 8002812:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < 3; i++) {
 8002816:	2300      	movs	r3, #0
 8002818:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800281c:	e0e1      	b.n	80029e2 <localize+0x79a>
		for (int j = 0; j < 3; j++) {
 800281e:	2300      	movs	r3, #0
 8002820:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002822:	e0d5      	b.n	80029d0 <localize+0x788>
 8002824:	f3af 8000 	nop.w
 8002828:	54442d18 	.word	0x54442d18
 800282c:	400921fb 	.word	0x400921fb
 8002830:	54442d18 	.word	0x54442d18
 8002834:	401921fb 	.word	0x401921fb
 8002838:	3fc90fdb 	.word	0x3fc90fdb
 800283c:	4096cbe4 	.word	0x4096cbe4
 8002840:	40490fdb 	.word	0x40490fdb
 8002844:	bf800000 	.word	0xbf800000
 8002848:	080116a8 	.word	0x080116a8
 800284c:	080116b4 	.word	0x080116b4
			double angleValue = (double) (*angle);  // Dereference and convert to double
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd fe7f 	bl	8000558 <__aeabi_f2d>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			outputs[i * 3 + j].x = origin->x + X[i] * dir * cos(angleValue) - Y[j] * sin(angleValue);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fe76 	bl	8000558 <__aeabi_f2d>
 800286c:	4604      	mov	r4, r0
 800286e:	460d      	mov	r5, r1
 8002870:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	3388      	adds	r3, #136	; 0x88
 8002878:	443b      	add	r3, r7
 800287a:	3b6c      	subs	r3, #108	; 0x6c
 800287c:	ed93 7a00 	vldr	s14, [r3]
 8002880:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002888:	ee17 0a90 	vmov	r0, s15
 800288c:	f7fd fe64 	bl	8000558 <__aeabi_f2d>
 8002890:	4680      	mov	r8, r0
 8002892:	4689      	mov	r9, r1
 8002894:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002898:	f00d fa96 	bl	800fdc8 <cos>
 800289c:	ec53 2b10 	vmov	r2, r3, d0
 80028a0:	4640      	mov	r0, r8
 80028a2:	4649      	mov	r1, r9
 80028a4:	f7fd feb0 	bl	8000608 <__aeabi_dmul>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4620      	mov	r0, r4
 80028ae:	4629      	mov	r1, r5
 80028b0:	f7fd fcf4 	bl	800029c <__adddf3>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4690      	mov	r8, r2
 80028ba:	4699      	mov	r9, r3
 80028bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	3388      	adds	r3, #136	; 0x88
 80028c2:	443b      	add	r3, r7
 80028c4:	3b78      	subs	r3, #120	; 0x78
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fd fe45 	bl	8000558 <__aeabi_f2d>
 80028ce:	4604      	mov	r4, r0
 80028d0:	460d      	mov	r5, r1
 80028d2:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80028d6:	f00d fad7 	bl	800fe88 <sin>
 80028da:	ec53 2b10 	vmov	r2, r3, d0
 80028de:	4620      	mov	r0, r4
 80028e0:	4629      	mov	r1, r5
 80028e2:	f7fd fe91 	bl	8000608 <__aeabi_dmul>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4640      	mov	r0, r8
 80028ec:	4649      	mov	r1, r9
 80028ee:	f7fd fcd3 	bl	8000298 <__aeabi_dsub>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028fe:	4613      	mov	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	441a      	add	r2, r3
 8002904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	18d4      	adds	r4, r2, r3
 800290e:	f7fe f973 	bl	8000bf8 <__aeabi_d2f>
 8002912:	4603      	mov	r3, r0
 8002914:	6023      	str	r3, [r4, #0]
			outputs[i * 3 + j].y = origin->y + X[i] * dir * sin(angleValue) + Y[j] * cos(angleValue);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fd fe1c 	bl	8000558 <__aeabi_f2d>
 8002920:	4604      	mov	r4, r0
 8002922:	460d      	mov	r5, r1
 8002924:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	3388      	adds	r3, #136	; 0x88
 800292c:	443b      	add	r3, r7
 800292e:	3b6c      	subs	r3, #108	; 0x6c
 8002930:	ed93 7a00 	vldr	s14, [r3]
 8002934:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293c:	ee17 0a90 	vmov	r0, s15
 8002940:	f7fd fe0a 	bl	8000558 <__aeabi_f2d>
 8002944:	4680      	mov	r8, r0
 8002946:	4689      	mov	r9, r1
 8002948:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800294c:	f00d fa9c 	bl	800fe88 <sin>
 8002950:	ec53 2b10 	vmov	r2, r3, d0
 8002954:	4640      	mov	r0, r8
 8002956:	4649      	mov	r1, r9
 8002958:	f7fd fe56 	bl	8000608 <__aeabi_dmul>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4620      	mov	r0, r4
 8002962:	4629      	mov	r1, r5
 8002964:	f7fd fc9a 	bl	800029c <__adddf3>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4690      	mov	r8, r2
 800296e:	4699      	mov	r9, r3
 8002970:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	3388      	adds	r3, #136	; 0x88
 8002976:	443b      	add	r3, r7
 8002978:	3b78      	subs	r3, #120	; 0x78
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fdeb 	bl	8000558 <__aeabi_f2d>
 8002982:	4604      	mov	r4, r0
 8002984:	460d      	mov	r5, r1
 8002986:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800298a:	f00d fa1d 	bl	800fdc8 <cos>
 800298e:	ec53 2b10 	vmov	r2, r3, d0
 8002992:	4620      	mov	r0, r4
 8002994:	4629      	mov	r1, r5
 8002996:	f7fd fe37 	bl	8000608 <__aeabi_dmul>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4640      	mov	r0, r8
 80029a0:	4649      	mov	r1, r9
 80029a2:	f7fd fc7b 	bl	800029c <__adddf3>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029b2:	4613      	mov	r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	441a      	add	r2, r3
 80029b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029ba:	4413      	add	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	18d4      	adds	r4, r2, r3
 80029c2:	f7fe f919 	bl	8000bf8 <__aeabi_d2f>
 80029c6:	4603      	mov	r3, r0
 80029c8:	6063      	str	r3, [r4, #4]
		for (int j = 0; j < 3; j++) {
 80029ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029cc:	3301      	adds	r3, #1
 80029ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	f77f af3c 	ble.w	8002850 <localize+0x608>
	for (int i = 0; i < 3; i++) {
 80029d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029dc:	3301      	adds	r3, #1
 80029de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	f77f af19 	ble.w	800281e <localize+0x5d6>
		}
	}

	// dirty fix for angle error
	if (dir < 0){
 80029ec:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80029f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f8:	d400      	bmi.n	80029fc <localize+0x7b4>
		*angle = *angle - M_PI;
	}
}
 80029fa:	e012      	b.n	8002a22 <localize+0x7da>
		*angle = *angle - M_PI;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fda9 	bl	8000558 <__aeabi_f2d>
 8002a06:	a30a      	add	r3, pc, #40	; (adr r3, 8002a30 <localize+0x7e8>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fc44 	bl	8000298 <__aeabi_dsub>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7fe f8ee 	bl	8000bf8 <__aeabi_d2f>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	601a      	str	r2, [r3, #0]
}
 8002a22:	bf00      	nop
 8002a24:	3788      	adds	r7, #136	; 0x88
 8002a26:	46bd      	mov	sp, r7
 8002a28:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a2c:	f3af 8000 	nop.w
 8002a30:	54442d18 	.word	0x54442d18
 8002a34:	400921fb 	.word	0x400921fb

08002a38 <subtractCoordinates>:

Coordinate subtractCoordinates(Coordinate coord1, Coordinate coord2) {
 8002a38:	b480      	push	{r7}
 8002a3a:	b08b      	sub	sp, #44	; 0x2c
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	eeb0 6a40 	vmov.f32	s12, s0
 8002a42:	eef0 6a60 	vmov.f32	s13, s1
 8002a46:	eeb0 7a41 	vmov.f32	s14, s2
 8002a4a:	eef0 7a61 	vmov.f32	s15, s3
 8002a4e:	ed87 6a04 	vstr	s12, [r7, #16]
 8002a52:	edc7 6a05 	vstr	s13, [r7, #20]
 8002a56:	ed87 7a02 	vstr	s14, [r7, #8]
 8002a5a:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = coord1.x - coord2.x;
 8002a5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a62:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a6a:	edc7 7a06 	vstr	s15, [r7, #24]
	result.y = coord1.y - coord2.y;
 8002a6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a72:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7a:	edc7 7a07 	vstr	s15, [r7, #28]
	return result;
 8002a7e:	f107 0320 	add.w	r3, r7, #32
 8002a82:	f107 0218 	add.w	r2, r7, #24
 8002a86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a8e:	6a3a      	ldr	r2, [r7, #32]
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	ee07 2a10 	vmov	s14, r2
 8002a96:	ee07 3a90 	vmov	s15, r3
}
 8002a9a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a9e:	eef0 0a67 	vmov.f32	s1, s15
 8002aa2:	372c      	adds	r7, #44	; 0x2c
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <calculateNorm>:

float calculateNorm(Coordinate coord) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	eeb0 7a40 	vmov.f32	s14, s0
 8002ab6:	eef0 7a60 	vmov.f32	s15, s1
 8002aba:	ed87 7a00 	vstr	s14, [r7]
 8002abe:	edc7 7a01 	vstr	s15, [r7, #4]
	float norm = sqrt(coord.x * coord.x + coord.y * coord.y);
 8002ac2:	ed97 7a00 	vldr	s14, [r7]
 8002ac6:	edd7 7a00 	vldr	s15, [r7]
 8002aca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ace:	edd7 6a01 	vldr	s13, [r7, #4]
 8002ad2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ade:	ee17 0a90 	vmov	r0, s15
 8002ae2:	f7fd fd39 	bl	8000558 <__aeabi_f2d>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	ec43 2b10 	vmov	d0, r2, r3
 8002aee:	f00d fa57 	bl	800ffa0 <sqrt>
 8002af2:	ec53 2b10 	vmov	r2, r3, d0
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	f7fe f87d 	bl	8000bf8 <__aeabi_d2f>
 8002afe:	4603      	mov	r3, r0
 8002b00:	60fb      	str	r3, [r7, #12]
	return norm;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	ee07 3a90 	vmov	s15, r3
}
 8002b08:	eeb0 0a67 	vmov.f32	s0, s15
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <negateCoordinate>:

Coordinate negateCoordinate(Coordinate coord) {
 8002b12:	b480      	push	{r7}
 8002b14:	b089      	sub	sp, #36	; 0x24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	eeb0 7a40 	vmov.f32	s14, s0
 8002b1c:	eef0 7a60 	vmov.f32	s15, s1
 8002b20:	ed87 7a02 	vstr	s14, [r7, #8]
 8002b24:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = -coord.x;
 8002b28:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b2c:	eef1 7a67 	vneg.f32	s15, s15
 8002b30:	edc7 7a04 	vstr	s15, [r7, #16]
	result.y = -coord.y;
 8002b34:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b38:	eef1 7a67 	vneg.f32	s15, s15
 8002b3c:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 8002b40:	f107 0318 	add.w	r3, r7, #24
 8002b44:	f107 0210 	add.w	r2, r7, #16
 8002b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b4c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	ee07 2a10 	vmov	s14, r2
 8002b58:	ee07 3a90 	vmov	s15, r3
}
 8002b5c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b60:	eef0 0a67 	vmov.f32	s1, s15
 8002b64:	3724      	adds	r7, #36	; 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <modbus_init>:
void modbus_data_sync(MB *variables);
void modbus_init();

// USER CODE ======================================================================================

void modbus_init() {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
	hmodbus.huart = &huart2;
 8002b74:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <modbus_init+0x28>)
 8002b76:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <modbus_init+0x2c>)
 8002b78:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <modbus_init+0x28>)
 8002b7c:	4a08      	ldr	r2, [pc, #32]	; (8002ba0 <modbus_init+0x30>)
 8002b7e:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <modbus_init+0x28>)
 8002b82:	2215      	movs	r2, #21
 8002b84:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 8002b86:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <modbus_init+0x28>)
 8002b88:	2246      	movs	r2, #70	; 0x46
 8002b8a:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, MBregisterFrame);
 8002b8c:	4905      	ldr	r1, [pc, #20]	; (8002ba4 <modbus_init+0x34>)
 8002b8e:	4802      	ldr	r0, [pc, #8]	; (8002b98 <modbus_init+0x28>)
 8002b90:	f7fe fd6e 	bl	8001670 <Modbus_init>
}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	200004fc 	.word	0x200004fc
 8002b9c:	20001dd8 	.word	0x20001dd8
 8002ba0:	20001c0c 	.word	0x20001c0c
 8002ba4:	200009d4 	.word	0x200009d4

08002ba8 <modbus_heartbeat_handler>:

void modbus_heartbeat_handler(MB *variables) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	static int8_t fail = 0;
	static uint32_t timestamp = 0;
	if (HAL_GetTick() >= timestamp) {
 8002bb0:	f002 fd28 	bl	8005604 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <modbus_heartbeat_handler+0x78>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d32c      	bcc.n	8002c18 <modbus_heartbeat_handler+0x70>
		timestamp = HAL_GetTick() + 200;
 8002bbe:	f002 fd21 	bl	8005604 <HAL_GetTick>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	33c8      	adds	r3, #200	; 0xc8
 8002bc6:	4a16      	ldr	r2, [pc, #88]	; (8002c20 <modbus_heartbeat_handler+0x78>)
 8002bc8:	6013      	str	r3, [r2, #0]

		// check if the base system send heartbeat
		if (MBregisterFrame[0].U16 == 18537) {
 8002bca:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <modbus_heartbeat_handler+0x7c>)
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	f644 0269 	movw	r2, #18537	; 0x4869
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d106      	bne.n	8002be4 <modbus_heartbeat_handler+0x3c>
			// success
			variables->heartbeat = 1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	849a      	strh	r2, [r3, #36]	; 0x24
			fail = 0;
 8002bdc:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <modbus_heartbeat_handler+0x80>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e015      	b.n	8002c10 <modbus_heartbeat_handler+0x68>
		} else {
			// fail, count failure
			if (fail < 126) {
 8002be4:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <modbus_heartbeat_handler+0x80>)
 8002be6:	f993 3000 	ldrsb.w	r3, [r3]
 8002bea:	2b7d      	cmp	r3, #125	; 0x7d
 8002bec:	dc08      	bgt.n	8002c00 <modbus_heartbeat_handler+0x58>
				fail++;
 8002bee:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <modbus_heartbeat_handler+0x80>)
 8002bf0:	f993 3000 	ldrsb.w	r3, [r3]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	b25a      	sxtb	r2, r3
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <modbus_heartbeat_handler+0x80>)
 8002bfe:	701a      	strb	r2, [r3, #0]
			}
			// if fail is too high then system is disconnected
			if (fail > 9) {
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <modbus_heartbeat_handler+0x80>)
 8002c02:	f993 3000 	ldrsb.w	r3, [r3]
 8002c06:	2b09      	cmp	r3, #9
 8002c08:	dd02      	ble.n	8002c10 <modbus_heartbeat_handler+0x68>
				variables->heartbeat = 0;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	849a      	strh	r2, [r3, #36]	; 0x24
			}
		}

		// set heartbeat for base system to see
		MBregisterFrame[0].U16 = 22881;
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <modbus_heartbeat_handler+0x7c>)
 8002c12:	f645 1261 	movw	r2, #22881	; 0x5961
 8002c16:	801a      	strh	r2, [r3, #0]
	}
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20001914 	.word	0x20001914
 8002c24:	200009d4 	.word	0x200009d4
 8002c28:	20001918 	.word	0x20001918

08002c2c <modbus_data_sync>:

void modbus_data_sync(MB *variables) {
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	// report data back to base system
	MBregisterFrame[0x10].U16 = variables->y_moving_status;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	4b81      	ldr	r3, [pc, #516]	; (8002e44 <modbus_data_sync+0x218>)
 8002c3e:	841a      	strh	r2, [r3, #32]
	MBregisterFrame[0x11].U16 = variables->y_actual_position;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	4b7e      	ldr	r3, [pc, #504]	; (8002e44 <modbus_data_sync+0x218>)
 8002c4a:	845a      	strh	r2, [r3, #34]	; 0x22
	MBregisterFrame[0x12].U16 = variables->y_actual_speed;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	4b7b      	ldr	r3, [pc, #492]	; (8002e44 <modbus_data_sync+0x218>)
 8002c56:	849a      	strh	r2, [r3, #36]	; 0x24
	MBregisterFrame[0x13].U16 = variables->y_actual_acceleration;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	4b78      	ldr	r3, [pc, #480]	; (8002e44 <modbus_data_sync+0x218>)
 8002c62:	84da      	strh	r2, [r3, #38]	; 0x26
	MBregisterFrame[0x20].U16 = variables->pick_tray_origin_x;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	4b75      	ldr	r3, [pc, #468]	; (8002e44 <modbus_data_sync+0x218>)
 8002c6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	MBregisterFrame[0x21].U16 = variables->pick_tray_origin_y;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	4b72      	ldr	r3, [pc, #456]	; (8002e44 <modbus_data_sync+0x218>)
 8002c7c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	MBregisterFrame[0x22].U16 = variables->pick_tray_orientation;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	4b6e      	ldr	r3, [pc, #440]	; (8002e44 <modbus_data_sync+0x218>)
 8002c8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	MBregisterFrame[0x23].U16 = variables->place_tray_origin_x;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	4b6b      	ldr	r3, [pc, #428]	; (8002e44 <modbus_data_sync+0x218>)
 8002c98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	MBregisterFrame[0x24].U16 = variables->place_tray_origin_y;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	4b67      	ldr	r3, [pc, #412]	; (8002e44 <modbus_data_sync+0x218>)
 8002ca6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	MBregisterFrame[0x25].U16 = variables->place_tray_orientation;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	4b64      	ldr	r3, [pc, #400]	; (8002e44 <modbus_data_sync+0x218>)
 8002cb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	MBregisterFrame[0x41].U16 = variables->x_target_position;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	4b60      	ldr	r3, [pc, #384]	; (8002e44 <modbus_data_sync+0x218>)
 8002cc2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	MBregisterFrame[0x42].U16 = variables->x_target_speed;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	4b5d      	ldr	r3, [pc, #372]	; (8002e44 <modbus_data_sync+0x218>)
 8002cd0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	MBregisterFrame[0x43].U16 = variables->x_target_acceleration_time;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	4b59      	ldr	r3, [pc, #356]	; (8002e44 <modbus_data_sync+0x218>)
 8002cde:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

	// get data from base system
	variables->goal_point_x = MBregisterFrame[0x30].U16;
 8002ce2:	4b58      	ldr	r3, [pc, #352]	; (8002e44 <modbus_data_sync+0x218>)
 8002ce4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002ce8:	b21a      	sxth	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	805a      	strh	r2, [r3, #2]
	variables->goal_point_y = MBregisterFrame[0x31].U16;
 8002cee:	4b55      	ldr	r3, [pc, #340]	; (8002e44 <modbus_data_sync+0x218>)
 8002cf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002cf4:	b21a      	sxth	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	809a      	strh	r2, [r3, #4]
	variables->x_actual_position = MBregisterFrame[0x44].U16;
 8002cfa:	4b52      	ldr	r3, [pc, #328]	; (8002e44 <modbus_data_sync+0x218>)
 8002cfc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002d00:	b21a      	sxth	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	80da      	strh	r2, [r3, #6]
	variables->x_actual_speed = MBregisterFrame[0x45].U16;
 8002d06:	4b4f      	ldr	r3, [pc, #316]	; (8002e44 <modbus_data_sync+0x218>)
 8002d08:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002d0c:	b21a      	sxth	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	811a      	strh	r2, [r3, #8]

	static int16_t base_system_status_slave_temp;
	static int16_t base_system_status_master_temp;
	if (base_system_status_master_temp != MBregisterFrame[0x01].U16) {
 8002d12:	4b4d      	ldr	r3, [pc, #308]	; (8002e48 <modbus_data_sync+0x21c>)
 8002d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <modbus_data_sync+0x218>)
 8002d1c:	885b      	ldrh	r3, [r3, #2]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d00f      	beq.n	8002d42 <modbus_data_sync+0x116>
		variables->base_system_status = MBregisterFrame[0x01].U16;
 8002d22:	4b48      	ldr	r3, [pc, #288]	; (8002e44 <modbus_data_sync+0x218>)
 8002d24:	885b      	ldrh	r3, [r3, #2]
 8002d26:	b21a      	sxth	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	801a      	strh	r2, [r3, #0]
		base_system_status_master_temp = variables->base_system_status;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d32:	4b45      	ldr	r3, [pc, #276]	; (8002e48 <modbus_data_sync+0x21c>)
 8002d34:	801a      	strh	r2, [r3, #0]
		base_system_status_slave_temp = variables->base_system_status;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d3c:	4b43      	ldr	r3, [pc, #268]	; (8002e4c <modbus_data_sync+0x220>)
 8002d3e:	801a      	strh	r2, [r3, #0]
 8002d40:	e017      	b.n	8002d72 <modbus_data_sync+0x146>
	} else if (base_system_status_slave_temp != variables->base_system_status) {
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d48:	4b40      	ldr	r3, [pc, #256]	; (8002e4c <modbus_data_sync+0x220>)
 8002d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d00f      	beq.n	8002d72 <modbus_data_sync+0x146>
		MBregisterFrame[0x01].U16 = variables->base_system_status;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	4b3a      	ldr	r3, [pc, #232]	; (8002e44 <modbus_data_sync+0x218>)
 8002d5c:	805a      	strh	r2, [r3, #2]
		base_system_status_master_temp = variables->base_system_status;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d64:	4b38      	ldr	r3, [pc, #224]	; (8002e48 <modbus_data_sync+0x21c>)
 8002d66:	801a      	strh	r2, [r3, #0]
		base_system_status_slave_temp = variables->base_system_status;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d6e:	4b37      	ldr	r3, [pc, #220]	; (8002e4c <modbus_data_sync+0x220>)
 8002d70:	801a      	strh	r2, [r3, #0]
	}

	// update read/write variable
	static int16_t end_effector_status_slave_temp;
	static int16_t end_effector_status_master_temp;
	if (end_effector_status_master_temp != MBregisterFrame[0x02].U16) {
 8002d72:	4b37      	ldr	r3, [pc, #220]	; (8002e50 <modbus_data_sync+0x224>)
 8002d74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b32      	ldr	r3, [pc, #200]	; (8002e44 <modbus_data_sync+0x218>)
 8002d7c:	889b      	ldrh	r3, [r3, #4]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d00f      	beq.n	8002da2 <modbus_data_sync+0x176>
		// there is an update from master
		variables->end_effector_status = MBregisterFrame[0x02].U16;
 8002d82:	4b30      	ldr	r3, [pc, #192]	; (8002e44 <modbus_data_sync+0x218>)
 8002d84:	889b      	ldrh	r3, [r3, #4]
 8002d86:	b21a      	sxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	84da      	strh	r2, [r3, #38]	; 0x26
		end_effector_status_master_temp = variables->end_effector_status;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002d92:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <modbus_data_sync+0x224>)
 8002d94:	801a      	strh	r2, [r3, #0]
		end_effector_status_slave_temp = variables->end_effector_status;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002d9c:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <modbus_data_sync+0x228>)
 8002d9e:	801a      	strh	r2, [r3, #0]
 8002da0:	e017      	b.n	8002dd2 <modbus_data_sync+0x1a6>
	} else if (end_effector_status_slave_temp != variables->end_effector_status) {
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002da8:	4b2a      	ldr	r3, [pc, #168]	; (8002e54 <modbus_data_sync+0x228>)
 8002daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d00f      	beq.n	8002dd2 <modbus_data_sync+0x1a6>
		// there is an update locally
		MBregisterFrame[0x02].U16 = variables->end_effector_status;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <modbus_data_sync+0x218>)
 8002dbc:	809a      	strh	r2, [r3, #4]
		end_effector_status_slave_temp = variables->end_effector_status;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002dc4:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <modbus_data_sync+0x228>)
 8002dc6:	801a      	strh	r2, [r3, #0]
		end_effector_status_master_temp = variables->end_effector_status;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002dce:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <modbus_data_sync+0x224>)
 8002dd0:	801a      	strh	r2, [r3, #0]
	}
	static int16_t x_moving_status_slave_temp;
	static int16_t x_moving_status_master_temp;
	if (x_moving_status_master_temp != MBregisterFrame[0x40].U16) {
 8002dd2:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <modbus_data_sync+0x22c>)
 8002dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <modbus_data_sync+0x218>)
 8002ddc:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d010      	beq.n	8002e06 <modbus_data_sync+0x1da>
		// there is an update from master
		variables->x_moving_status = MBregisterFrame[0x40].U16;
 8002de4:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <modbus_data_sync+0x218>)
 8002de6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002dea:	b21a      	sxth	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	851a      	strh	r2, [r3, #40]	; 0x28
		x_moving_status_master_temp = variables->x_moving_status;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002df6:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <modbus_data_sync+0x22c>)
 8002df8:	801a      	strh	r2, [r3, #0]
		x_moving_status_slave_temp = variables->x_moving_status;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002e00:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <modbus_data_sync+0x230>)
 8002e02:	801a      	strh	r2, [r3, #0]
		// there is an update locally
		MBregisterFrame[0x40].U16 = variables->x_moving_status;
		x_moving_status_slave_temp = variables->x_moving_status;
		x_moving_status_master_temp = variables->x_moving_status;
	}
}
 8002e04:	e018      	b.n	8002e38 <modbus_data_sync+0x20c>
	} else if (x_moving_status_slave_temp != variables->x_moving_status) {
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002e0c:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <modbus_data_sync+0x230>)
 8002e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d010      	beq.n	8002e38 <modbus_data_sync+0x20c>
		MBregisterFrame[0x40].U16 = variables->x_moving_status;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <modbus_data_sync+0x218>)
 8002e20:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		x_moving_status_slave_temp = variables->x_moving_status;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <modbus_data_sync+0x230>)
 8002e2c:	801a      	strh	r2, [r3, #0]
		x_moving_status_master_temp = variables->x_moving_status;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <modbus_data_sync+0x22c>)
 8002e36:	801a      	strh	r2, [r3, #0]
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	200009d4 	.word	0x200009d4
 8002e48:	2000191a 	.word	0x2000191a
 8002e4c:	2000191c 	.word	0x2000191c
 8002e50:	2000191e 	.word	0x2000191e
 8002e54:	20001920 	.word	0x20001920
 8002e58:	20001922 	.word	0x20001922
 8002e5c:	20001924 	.word	0x20001924

08002e60 <main_logic>:
void preset_data_y_only();
void preset_data_xy();

// USER CODE ======================================================================================

void main_logic(MB *variables) {
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	ENE_I2C_UPDATE(&variables->end_effector_status, &hi2c1);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3326      	adds	r3, #38	; 0x26
 8002e6c:	49b0      	ldr	r1, [pc, #704]	; (8003130 <main_logic+0x2d0>)
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe f9ba 	bl	80011e8 <ENE_I2C_UPDATE>
	RGB_logic();
 8002e74:	f000 ff76 	bl	8003d64 <RGB_logic>
	data_report(variables);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 faf9 	bl	8003470 <data_report>

	static uint32_t wait_timer;
	switch (state) {
 8002e7e:	4bad      	ldr	r3, [pc, #692]	; (8003134 <main_logic+0x2d4>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	f200 81e7 	bhi.w	8003256 <main_logic+0x3f6>
 8002e88:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <main_logic+0x30>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002eb5 	.word	0x08002eb5
 8002e94:	08002ed3 	.word	0x08002ed3
 8002e98:	08002fb9 	.word	0x08002fb9
 8002e9c:	08002fb9 	.word	0x08002fb9
 8002ea0:	08002fcb 	.word	0x08002fcb
 8002ea4:	08002fe9 	.word	0x08002fe9
 8002ea8:	080031d7 	.word	0x080031d7
 8002eac:	0800322d 	.word	0x0800322d
 8002eb0:	08003239 	.word	0x08003239
	case MSwait:
		if (HAL_GetTick() - wait_timer > 1500) {
 8002eb4:	f002 fba6 	bl	8005604 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b9f      	ldr	r3, [pc, #636]	; (8003138 <main_logic+0x2d8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	f240 81bd 	bls.w	8003244 <main_logic+0x3e4>
			state = MSidle;
 8002eca:	4b9a      	ldr	r3, [pc, #616]	; (8003134 <main_logic+0x2d4>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002ed0:	e1b8      	b.n	8003244 <main_logic+0x3e4>
	case MSidle:
		wait_timer = HAL_GetTick();
 8002ed2:	f002 fb97 	bl	8005604 <HAL_GetTick>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4a97      	ldr	r2, [pc, #604]	; (8003138 <main_logic+0x2d8>)
 8002eda:	6013      	str	r3, [r2, #0]
		variables->y_moving_status = 0;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	815a      	strh	r2, [r3, #10]
		jog_enable = 0;
 8002ee2:	4b96      	ldr	r3, [pc, #600]	; (800313c <main_logic+0x2dc>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]

		if (variables->base_system_status & 0b1) {
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00b      	beq.n	8002f10 <main_logic+0xb0>
			// pick mode
			variables->base_system_status = 0;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	801a      	strh	r2, [r3, #0]
			state = MSpick;
 8002efe:	4b8d      	ldr	r3, [pc, #564]	; (8003134 <main_logic+0x2d4>)
 8002f00:	2202      	movs	r2, #2
 8002f02:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 1;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	815a      	strh	r2, [r3, #10]
			jog_enable = 1;
 8002f0a:	4b8c      	ldr	r3, [pc, #560]	; (800313c <main_logic+0x2dc>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
		}

		if (variables->base_system_status & 0b10) {
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00b      	beq.n	8002f38 <main_logic+0xd8>
			// place mode
			variables->base_system_status = 0;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	801a      	strh	r2, [r3, #0]
			state = MSplace;
 8002f26:	4b83      	ldr	r3, [pc, #524]	; (8003134 <main_logic+0x2d4>)
 8002f28:	2203      	movs	r2, #3
 8002f2a:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	815a      	strh	r2, [r3, #10]
			jog_enable = 1;
 8002f32:	4b82      	ldr	r3, [pc, #520]	; (800313c <main_logic+0x2dc>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
		}

		if (variables->base_system_status & 0b100) {
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00e      	beq.n	8002f66 <main_logic+0x106>
			// home mode
			variables->base_system_status = 0;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	801a      	strh	r2, [r3, #0]
			state = MShome;
 8002f4e:	4b79      	ldr	r3, [pc, #484]	; (8003134 <main_logic+0x2d4>)
 8002f50:	2204      	movs	r2, #4
 8002f52:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 4;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2204      	movs	r2, #4
 8002f58:	815a      	strh	r2, [r3, #10]
			variables->x_target_position = 0;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	83da      	strh	r2, [r3, #30]
			variables->x_moving_status = 2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	851a      	strh	r2, [r3, #40]	; 0x28
			//variables->x_moving_status = 1;
		}

		if (variables->base_system_status & 0b1000) {
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <main_logic+0x132>
			// start tray mode
			variables->base_system_status = 0;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	801a      	strh	r2, [r3, #0]
			state = MStray;
 8002f7c:	4b6d      	ldr	r3, [pc, #436]	; (8003134 <main_logic+0x2d4>)
 8002f7e:	2205      	movs	r2, #5
 8002f80:	701a      	strb	r2, [r3, #0]
			tray_point_n = 0;
 8002f82:	4b6f      	ldr	r3, [pc, #444]	; (8003140 <main_logic+0x2e0>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
			tray_delay = HAL_GetTick();
 8002f88:	f002 fb3c 	bl	8005604 <HAL_GetTick>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4a6d      	ldr	r2, [pc, #436]	; (8003144 <main_logic+0x2e4>)
 8002f90:	6013      	str	r3, [r2, #0]
		}

		if (variables->base_system_status & 0b10000) {
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8152 	beq.w	8003248 <main_logic+0x3e8>
			// point mode
			variables->base_system_status = 0;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	801a      	strh	r2, [r3, #0]
			state = MSpoint;
 8002faa:	4b62      	ldr	r3, [pc, #392]	; (8003134 <main_logic+0x2d4>)
 8002fac:	2206      	movs	r2, #6
 8002fae:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 32;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	815a      	strh	r2, [r3, #10]
		}
		break;
 8002fb6:	e147      	b.n	8003248 <main_logic+0x3e8>
	case MSpick: // MSpick or MSplace
	case MSplace:
		variables->x_target_position = setpoint_x;
 8002fb8:	4b63      	ldr	r3, [pc, #396]	; (8003148 <main_logic+0x2e8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	b21a      	sxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	83da      	strh	r2, [r3, #30]
		x_spam_position(variables);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 faa4 	bl	8003510 <x_spam_position>
		break;
 8002fc8:	e145      	b.n	8003256 <main_logic+0x3f6>
	case MShome:
		if (!home_status) {
 8002fca:	4b60      	ldr	r3, [pc, #384]	; (800314c <main_logic+0x2ec>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f040 813c 	bne.w	800324c <main_logic+0x3ec>
			home_status = 1;
 8002fd4:	4b5d      	ldr	r3, [pc, #372]	; (800314c <main_logic+0x2ec>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
			PID_enable = 0;
 8002fda:	4b5d      	ldr	r3, [pc, #372]	; (8003150 <main_logic+0x2f0>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
			voltage = -13000;
 8002fe0:	4b5c      	ldr	r3, [pc, #368]	; (8003154 <main_logic+0x2f4>)
 8002fe2:	4a5d      	ldr	r2, [pc, #372]	; (8003158 <main_logic+0x2f8>)
 8002fe4:	601a      	str	r2, [r3, #0]
		}
		break;
 8002fe6:	e131      	b.n	800324c <main_logic+0x3ec>
	case MStray:
		variables->x_target_position = variables->goal_point_x;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	83da      	strh	r2, [r3, #30]
		x_spam_position(variables);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fa8c 	bl	8003510 <x_spam_position>
		switch (tray_wait_mode) {
 8002ff8:	4b58      	ldr	r3, [pc, #352]	; (800315c <main_logic+0x2fc>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	f200 80e2 	bhi.w	80031c6 <main_logic+0x366>
 8003002:	a201      	add	r2, pc, #4	; (adr r2, 8003008 <main_logic+0x1a8>)
 8003004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003008:	0800301d 	.word	0x0800301d
 800300c:	08003083 	.word	0x08003083
 8003010:	080030af 	.word	0x080030af
 8003014:	0800316d 	.word	0x0800316d
 8003018:	08003197 	.word	0x08003197
		case 0:
			// move to pick
			variables->y_moving_status = 8;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2208      	movs	r2, #8
 8003020:	815a      	strh	r2, [r3, #10]
			setpoint_x = pick[tray_point_n].x * 10;
 8003022:	4b47      	ldr	r3, [pc, #284]	; (8003140 <main_logic+0x2e0>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	4a4e      	ldr	r2, [pc, #312]	; (8003160 <main_logic+0x300>)
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4413      	add	r3, r2
 800302c:	edd3 7a00 	vldr	s15, [r3]
 8003030:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003034:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800303c:	ee17 2a90 	vmov	r2, s15
 8003040:	4b41      	ldr	r3, [pc, #260]	; (8003148 <main_logic+0x2e8>)
 8003042:	601a      	str	r2, [r3, #0]
			setpoint_y = pick[tray_point_n].y / 0.03;
 8003044:	4b3e      	ldr	r3, [pc, #248]	; (8003140 <main_logic+0x2e0>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	4a45      	ldr	r2, [pc, #276]	; (8003160 <main_logic+0x300>)
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	3304      	adds	r3, #4
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd fa80 	bl	8000558 <__aeabi_f2d>
 8003058:	a333      	add	r3, pc, #204	; (adr r3, 8003128 <main_logic+0x2c8>)
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	f7fd fbfd 	bl	800085c <__aeabi_ddiv>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	f7fd fd7d 	bl	8000b68 <__aeabi_d2iz>
 800306e:	4603      	mov	r3, r0
 8003070:	4a3c      	ldr	r2, [pc, #240]	; (8003164 <main_logic+0x304>)
 8003072:	6013      	str	r3, [r2, #0]
			variables->x_moving_status = 2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	851a      	strh	r2, [r3, #40]	; 0x28
			tray_wait_mode = 1;
 800307a:	4b38      	ldr	r3, [pc, #224]	; (800315c <main_logic+0x2fc>)
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
			break;
 8003080:	e0a1      	b.n	80031c6 <main_logic+0x366>
		case 1:
			// wait for move to finish then pick
			if (move_finished(10)) {
 8003082:	200a      	movs	r0, #10
 8003084:	f000 fbb8 	bl	80037f8 <move_finished>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 8094 	beq.w	80031b8 <main_logic+0x358>
				end_effector_gripper(variables, 0);
 8003090:	2100      	movs	r1, #0
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f966 	bl	8003364 <end_effector_gripper>
				tray_wait_mode = 2;
 8003098:	4b30      	ldr	r3, [pc, #192]	; (800315c <main_logic+0x2fc>)
 800309a:	2202      	movs	r2, #2
 800309c:	701a      	strb	r2, [r3, #0]
				tray_delay = HAL_GetTick() + 2000;
 800309e:	f002 fab1 	bl	8005604 <HAL_GetTick>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80030a8:	4a26      	ldr	r2, [pc, #152]	; (8003144 <main_logic+0x2e4>)
 80030aa:	6013      	str	r3, [r2, #0]
			}
			break;
 80030ac:	e084      	b.n	80031b8 <main_logic+0x358>
		case 2:
			// wait for pick to finish then move to place
			if (HAL_GetTick() >= tray_delay) {
 80030ae:	f002 faa9 	bl	8005604 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b23      	ldr	r3, [pc, #140]	; (8003144 <main_logic+0x2e4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d37f      	bcc.n	80031bc <main_logic+0x35c>
				variables->y_moving_status = 16;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2210      	movs	r2, #16
 80030c0:	815a      	strh	r2, [r3, #10]
				setpoint_x = place[tray_point_n].x * 10;
 80030c2:	4b1f      	ldr	r3, [pc, #124]	; (8003140 <main_logic+0x2e0>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	4a28      	ldr	r2, [pc, #160]	; (8003168 <main_logic+0x308>)
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	edd3 7a00 	vldr	s15, [r3]
 80030d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030dc:	ee17 2a90 	vmov	r2, s15
 80030e0:	4b19      	ldr	r3, [pc, #100]	; (8003148 <main_logic+0x2e8>)
 80030e2:	601a      	str	r2, [r3, #0]
				setpoint_y = place[tray_point_n].y / 0.03;
 80030e4:	4b16      	ldr	r3, [pc, #88]	; (8003140 <main_logic+0x2e0>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	4a1f      	ldr	r2, [pc, #124]	; (8003168 <main_logic+0x308>)
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	3304      	adds	r3, #4
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd fa30 	bl	8000558 <__aeabi_f2d>
 80030f8:	a30b      	add	r3, pc, #44	; (adr r3, 8003128 <main_logic+0x2c8>)
 80030fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fe:	f7fd fbad 	bl	800085c <__aeabi_ddiv>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4610      	mov	r0, r2
 8003108:	4619      	mov	r1, r3
 800310a:	f7fd fd2d 	bl	8000b68 <__aeabi_d2iz>
 800310e:	4603      	mov	r3, r0
 8003110:	4a14      	ldr	r2, [pc, #80]	; (8003164 <main_logic+0x304>)
 8003112:	6013      	str	r3, [r2, #0]
				variables->x_moving_status = 2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	851a      	strh	r2, [r3, #40]	; 0x28
				tray_wait_mode = 3;
 800311a:	4b10      	ldr	r3, [pc, #64]	; (800315c <main_logic+0x2fc>)
 800311c:	2203      	movs	r2, #3
 800311e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003120:	e04c      	b.n	80031bc <main_logic+0x35c>
 8003122:	bf00      	nop
 8003124:	f3af 8000 	nop.w
 8003128:	eb851eb8 	.word	0xeb851eb8
 800312c:	3f9eb851 	.word	0x3f9eb851
 8003130:	200004a8 	.word	0x200004a8
 8003134:	20000218 	.word	0x20000218
 8003138:	20001928 	.word	0x20001928
 800313c:	20000a61 	.word	0x20000a61
 8003140:	20000a63 	.word	0x20000a63
 8003144:	20000a68 	.word	0x20000a68
 8003148:	200018c8 	.word	0x200018c8
 800314c:	20000a60 	.word	0x20000a60
 8003150:	20000219 	.word	0x20000219
 8003154:	20000a6c 	.word	0x20000a6c
 8003158:	c64b2000 	.word	0xc64b2000
 800315c:	20000a64 	.word	0x20000a64
 8003160:	20000a90 	.word	0x20000a90
 8003164:	200018c4 	.word	0x200018c4
 8003168:	20000ad8 	.word	0x20000ad8
		case 3:
			// wait for move to place then place
			if (move_finished(10)) {
 800316c:	200a      	movs	r0, #10
 800316e:	f000 fb43 	bl	80037f8 <move_finished>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d023      	beq.n	80031c0 <main_logic+0x360>
				end_effector_gripper(variables, 1);
 8003178:	2101      	movs	r1, #1
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f8f2 	bl	8003364 <end_effector_gripper>
				tray_wait_mode = 4;
 8003180:	4b39      	ldr	r3, [pc, #228]	; (8003268 <main_logic+0x408>)
 8003182:	2204      	movs	r2, #4
 8003184:	701a      	strb	r2, [r3, #0]
				tray_delay = HAL_GetTick() + 2000;
 8003186:	f002 fa3d 	bl	8005604 <HAL_GetTick>
 800318a:	4603      	mov	r3, r0
 800318c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003190:	4a36      	ldr	r2, [pc, #216]	; (800326c <main_logic+0x40c>)
 8003192:	6013      	str	r3, [r2, #0]
			}
			break;
 8003194:	e014      	b.n	80031c0 <main_logic+0x360>
		case 4:
			// wait for place to finish then reset to state 0
			if (HAL_GetTick() >= tray_delay) {
 8003196:	f002 fa35 	bl	8005604 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	4b33      	ldr	r3, [pc, #204]	; (800326c <main_logic+0x40c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d30f      	bcc.n	80031c4 <main_logic+0x364>
				tray_wait_mode = 0;
 80031a4:	4b30      	ldr	r3, [pc, #192]	; (8003268 <main_logic+0x408>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
				tray_point_n++;
 80031aa:	4b31      	ldr	r3, [pc, #196]	; (8003270 <main_logic+0x410>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	3301      	adds	r3, #1
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4b2f      	ldr	r3, [pc, #188]	; (8003270 <main_logic+0x410>)
 80031b4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80031b6:	e005      	b.n	80031c4 <main_logic+0x364>
			break;
 80031b8:	bf00      	nop
 80031ba:	e004      	b.n	80031c6 <main_logic+0x366>
			break;
 80031bc:	bf00      	nop
 80031be:	e002      	b.n	80031c6 <main_logic+0x366>
			break;
 80031c0:	bf00      	nop
 80031c2:	e000      	b.n	80031c6 <main_logic+0x366>
			break;
 80031c4:	bf00      	nop
		}
		if (tray_point_n >= 8) {
 80031c6:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <main_logic+0x410>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b07      	cmp	r3, #7
 80031cc:	d940      	bls.n	8003250 <main_logic+0x3f0>
			state = MSwait;
 80031ce:	4b29      	ldr	r3, [pc, #164]	; (8003274 <main_logic+0x414>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80031d4:	e03c      	b.n	8003250 <main_logic+0x3f0>
	case MSpoint:
		setpoint_y = variables->goal_point_y / 0.3;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd f9a9 	bl	8000534 <__aeabi_i2d>
 80031e2:	a31f      	add	r3, pc, #124	; (adr r3, 8003260 <main_logic+0x400>)
 80031e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e8:	f7fd fb38 	bl	800085c <__aeabi_ddiv>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	f7fd fcb8 	bl	8000b68 <__aeabi_d2iz>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4a1f      	ldr	r2, [pc, #124]	; (8003278 <main_logic+0x418>)
 80031fc:	6013      	str	r3, [r2, #0]
		variables->x_target_position = variables->goal_point_x;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	83da      	strh	r2, [r3, #30]
		variables->x_moving_status = 2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	851a      	strh	r2, [r3, #40]	; 0x28

		if (abs(setpoint_y - getLocalPosition()) < 10) {
 800320e:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <main_logic+0x418>)
 8003210:	681c      	ldr	r4, [r3, #0]
 8003212:	f7fe fff9 	bl	8002208 <getLocalPosition>
 8003216:	4603      	mov	r3, r0
 8003218:	1ae3      	subs	r3, r4, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	bfb8      	it	lt
 800321e:	425b      	neglt	r3, r3
 8003220:	2b09      	cmp	r3, #9
 8003222:	dc17      	bgt.n	8003254 <main_logic+0x3f4>
			state = MSwait;
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <main_logic+0x414>)
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
		}
		break;
 800322a:	e013      	b.n	8003254 <main_logic+0x3f4>
	case MStestY:
		preset_data_y_only();
 800322c:	f000 fb10 	bl	8003850 <preset_data_y_only>
		state = MSidle;
 8003230:	4b10      	ldr	r3, [pc, #64]	; (8003274 <main_logic+0x414>)
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
		break;
 8003236:	e00e      	b.n	8003256 <main_logic+0x3f6>
	case MStestXY:
		preset_data_xy();
 8003238:	f000 fb62 	bl	8003900 <preset_data_xy>
		state = MSidle;
 800323c:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <main_logic+0x414>)
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]
		break;
 8003242:	e008      	b.n	8003256 <main_logic+0x3f6>
		break;
 8003244:	bf00      	nop
 8003246:	e006      	b.n	8003256 <main_logic+0x3f6>
		break;
 8003248:	bf00      	nop
 800324a:	e004      	b.n	8003256 <main_logic+0x3f6>
		break;
 800324c:	bf00      	nop
 800324e:	e002      	b.n	8003256 <main_logic+0x3f6>
		break;
 8003250:	bf00      	nop
 8003252:	e000      	b.n	8003256 <main_logic+0x3f6>
		break;
 8003254:	bf00      	nop
	}
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bd90      	pop	{r4, r7, pc}
 800325e:	bf00      	nop
 8003260:	33333333 	.word	0x33333333
 8003264:	3fd33333 	.word	0x3fd33333
 8003268:	20000a64 	.word	0x20000a64
 800326c:	20000a68 	.word	0x20000a68
 8003270:	20000a63 	.word	0x20000a63
 8003274:	20000218 	.word	0x20000218
 8003278:	200018c4 	.word	0x200018c4

0800327c <interrupt_logic>:

void interrupt_logic() {
 800327c:	b580      	push	{r7, lr}
 800327e:	ed2d 8b02 	vpush	{d8}
 8003282:	af00      	add	r7, sp, #0
	// Call trajectory function
	Trajectory(setpoint_y, 34000, 80000, (int*) &setpointtraj_y, (float*) &traj_velocity, (float*) &traj_acceleration, 0);
 8003284:	4b2b      	ldr	r3, [pc, #172]	; (8003334 <interrupt_logic+0xb8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	ee07 3a90 	vmov	s15, r3
 800328c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003290:	2300      	movs	r3, #0
 8003292:	4a29      	ldr	r2, [pc, #164]	; (8003338 <interrupt_logic+0xbc>)
 8003294:	4929      	ldr	r1, [pc, #164]	; (800333c <interrupt_logic+0xc0>)
 8003296:	482a      	ldr	r0, [pc, #168]	; (8003340 <interrupt_logic+0xc4>)
 8003298:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8003344 <interrupt_logic+0xc8>
 800329c:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8003348 <interrupt_logic+0xcc>
 80032a0:	eeb0 0a67 	vmov.f32	s0, s15
 80032a4:	f001 fcb8 	bl	8004c18 <Trajectory>

	// Call PID function
	if (PID_enable) {
 80032a8:	4b28      	ldr	r3, [pc, #160]	; (800334c <interrupt_logic+0xd0>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d035      	beq.n	800331c <interrupt_logic+0xa0>
		static int count = 0;
		count++;
 80032b0:	4b27      	ldr	r3, [pc, #156]	; (8003350 <interrupt_logic+0xd4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	4a26      	ldr	r2, [pc, #152]	; (8003350 <interrupt_logic+0xd4>)
 80032b8:	6013      	str	r3, [r2, #0]
		if (count >= 5) {
 80032ba:	4b25      	ldr	r3, [pc, #148]	; (8003350 <interrupt_logic+0xd4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	dd2c      	ble.n	800331c <interrupt_logic+0xa0>
			PositionControlPID(setpointtraj_y, setpoint_y, getLocalPosition(), KP, KI, KD, &voltage);
 80032c2:	4b1f      	ldr	r3, [pc, #124]	; (8003340 <interrupt_logic+0xc4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80032ce:	4b19      	ldr	r3, [pc, #100]	; (8003334 <interrupt_logic+0xb8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80032da:	f7fe ff95 	bl	8002208 <getLocalPosition>
 80032de:	ee07 0a90 	vmov	s15, r0
 80032e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e6:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <interrupt_logic+0xd8>)
 80032e8:	ed93 7a00 	vldr	s14, [r3]
 80032ec:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <interrupt_logic+0xdc>)
 80032ee:	edd3 6a00 	vldr	s13, [r3]
 80032f2:	4b1a      	ldr	r3, [pc, #104]	; (800335c <interrupt_logic+0xe0>)
 80032f4:	ed93 6a00 	vldr	s12, [r3]
 80032f8:	4819      	ldr	r0, [pc, #100]	; (8003360 <interrupt_logic+0xe4>)
 80032fa:	eef0 2a46 	vmov.f32	s5, s12
 80032fe:	eeb0 2a66 	vmov.f32	s4, s13
 8003302:	eef0 1a47 	vmov.f32	s3, s14
 8003306:	eeb0 1a67 	vmov.f32	s2, s15
 800330a:	eef0 0a68 	vmov.f32	s1, s17
 800330e:	eeb0 0a48 	vmov.f32	s0, s16
 8003312:	f7fe fcb7 	bl	8001c84 <PositionControlPID>
			count = 0;
 8003316:	4b0e      	ldr	r3, [pc, #56]	; (8003350 <interrupt_logic+0xd4>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
		}
	}

	// Call motor function
	motor(voltage);
 800331c:	4b10      	ldr	r3, [pc, #64]	; (8003360 <interrupt_logic+0xe4>)
 800331e:	edd3 7a00 	vldr	s15, [r3]
 8003322:	eeb0 0a67 	vmov.f32	s0, s15
 8003326:	f7fe ff0f 	bl	8002148 <motor>
}
 800332a:	bf00      	nop
 800332c:	46bd      	mov	sp, r7
 800332e:	ecbd 8b02 	vpop	{d8}
 8003332:	bd80      	pop	{r7, pc}
 8003334:	200018c4 	.word	0x200018c4
 8003338:	20000a74 	.word	0x20000a74
 800333c:	20000a70 	.word	0x20000a70
 8003340:	200018cc 	.word	0x200018cc
 8003344:	479c4000 	.word	0x479c4000
 8003348:	4704d000 	.word	0x4704d000
 800334c:	20000219 	.word	0x20000219
 8003350:	2000192c 	.word	0x2000192c
 8003354:	2000021c 	.word	0x2000021c
 8003358:	20000220 	.word	0x20000220
 800335c:	20000224 	.word	0x20000224
 8003360:	20000a6c 	.word	0x20000a6c

08003364 <end_effector_gripper>:

void end_effector_gripper(MB *variables, uint8_t mode) {
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	70fb      	strb	r3, [r7, #3]
	if ((variables->end_effector_status & 0b0010) == 0) {
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003376:	b29b      	uxth	r3, r3
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d014      	beq.n	80033aa <end_effector_gripper+0x46>
		return;
	}

	if (!mode) {
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d108      	bne.n	8003398 <end_effector_gripper+0x34>
		// pick
		variables->end_effector_status |= 0b0100;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	b21a      	sxth	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	84da      	strh	r2, [r3, #38]	; 0x26
 8003396:	e009      	b.n	80033ac <end_effector_gripper+0x48>
	} else {
		// place
		variables->end_effector_status |= 0b1000;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800339e:	f043 0308 	orr.w	r3, r3, #8
 80033a2:	b21a      	sxth	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	84da      	strh	r2, [r3, #38]	; 0x26
 80033a8:	e000      	b.n	80033ac <end_effector_gripper+0x48>
		return;
 80033aa:	bf00      	nop
	}
}
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <home_handler>:
		// on
		variables->end_effector_status |= 0b0001;
	}
}

void home_handler() {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
	if (!home_status) {
 80033bc:	4b1f      	ldr	r3, [pc, #124]	; (800343c <home_handler+0x84>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d037      	beq.n	8003434 <home_handler+0x7c>
		return;
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_SET) {
 80033c4:	2108      	movs	r1, #8
 80033c6:	481e      	ldr	r0, [pc, #120]	; (8003440 <home_handler+0x88>)
 80033c8:	f003 fa62 	bl	8006890 <HAL_GPIO_ReadPin>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d032      	beq.n	8003438 <home_handler+0x80>
		return;
	}
	motor(0);
 80033d2:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8003444 <home_handler+0x8c>
 80033d6:	f7fe feb7 	bl	8002148 <motor>
	homeoffset = getRawPosition() + 11500;
 80033da:	f7fe ff27 	bl	800222c <getRawPosition>
 80033de:	4603      	mov	r3, r0
 80033e0:	f503 5333 	add.w	r3, r3, #11456	; 0x2cc0
 80033e4:	332c      	adds	r3, #44	; 0x2c
 80033e6:	4a18      	ldr	r2, [pc, #96]	; (8003448 <home_handler+0x90>)
 80033e8:	6013      	str	r3, [r2, #0]
	setpointtraj_y = -11500;
 80033ea:	4b18      	ldr	r3, [pc, #96]	; (800344c <home_handler+0x94>)
 80033ec:	4a18      	ldr	r2, [pc, #96]	; (8003450 <home_handler+0x98>)
 80033ee:	601a      	str	r2, [r3, #0]
	setpoint_y = -11500;
 80033f0:	4b18      	ldr	r3, [pc, #96]	; (8003454 <home_handler+0x9c>)
 80033f2:	4a17      	ldr	r2, [pc, #92]	; (8003450 <home_handler+0x98>)
 80033f4:	601a      	str	r2, [r3, #0]
	Trajectory(setpoint_y, 34000, 80000, (int*) &setpointtraj_y, (float*) &traj_velocity, (float*) &traj_acceleration, 1);
 80033f6:	4b17      	ldr	r3, [pc, #92]	; (8003454 <home_handler+0x9c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003402:	2301      	movs	r3, #1
 8003404:	4a14      	ldr	r2, [pc, #80]	; (8003458 <home_handler+0xa0>)
 8003406:	4915      	ldr	r1, [pc, #84]	; (800345c <home_handler+0xa4>)
 8003408:	4810      	ldr	r0, [pc, #64]	; (800344c <home_handler+0x94>)
 800340a:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8003460 <home_handler+0xa8>
 800340e:	eddf 0a15 	vldr	s1, [pc, #84]	; 8003464 <home_handler+0xac>
 8003412:	eeb0 0a67 	vmov.f32	s0, s15
 8003416:	f001 fbff 	bl	8004c18 <Trajectory>
	home_status = 0;
 800341a:	4b08      	ldr	r3, [pc, #32]	; (800343c <home_handler+0x84>)
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
	PID_enable = 1;
 8003420:	4b11      	ldr	r3, [pc, #68]	; (8003468 <home_handler+0xb0>)
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
	state = MSwait;
 8003426:	4b11      	ldr	r3, [pc, #68]	; (800346c <home_handler+0xb4>)
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
	setpoint_y = 0;
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <home_handler+0x9c>)
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e002      	b.n	800343a <home_handler+0x82>
		return;
 8003434:	bf00      	nop
 8003436:	e000      	b.n	800343a <home_handler+0x82>
		return;
 8003438:	bf00      	nop
}
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000a60 	.word	0x20000a60
 8003440:	40020800 	.word	0x40020800
 8003444:	00000000 	.word	0x00000000
 8003448:	200018d0 	.word	0x200018d0
 800344c:	200018cc 	.word	0x200018cc
 8003450:	ffffd314 	.word	0xffffd314
 8003454:	200018c4 	.word	0x200018c4
 8003458:	20000a74 	.word	0x20000a74
 800345c:	20000a70 	.word	0x20000a70
 8003460:	479c4000 	.word	0x479c4000
 8003464:	4704d000 	.word	0x4704d000
 8003468:	20000219 	.word	0x20000219
 800346c:	20000218 	.word	0x20000218

08003470 <data_report>:

void data_report(MB *variables) {
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	variables->y_actual_position = getLocalPosition() * 0.3;
 8003478:	f7fe fec6 	bl	8002208 <getLocalPosition>
 800347c:	4603      	mov	r3, r0
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd f858 	bl	8000534 <__aeabi_i2d>
 8003484:	a31e      	add	r3, pc, #120	; (adr r3, 8003500 <data_report+0x90>)
 8003486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348a:	f7fd f8bd 	bl	8000608 <__aeabi_dmul>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4610      	mov	r0, r2
 8003494:	4619      	mov	r1, r3
 8003496:	f7fd fb67 	bl	8000b68 <__aeabi_d2iz>
 800349a:	4603      	mov	r3, r0
 800349c:	b21a      	sxth	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	819a      	strh	r2, [r3, #12]
	variables->y_actual_speed = traj_velocity * 0.3;
 80034a2:	4b19      	ldr	r3, [pc, #100]	; (8003508 <data_report+0x98>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd f844 	bl	8000534 <__aeabi_i2d>
 80034ac:	a314      	add	r3, pc, #80	; (adr r3, 8003500 <data_report+0x90>)
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	f7fd f8a9 	bl	8000608 <__aeabi_dmul>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	f7fd fb53 	bl	8000b68 <__aeabi_d2iz>
 80034c2:	4603      	mov	r3, r0
 80034c4:	b21a      	sxth	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	81da      	strh	r2, [r3, #14]
	variables->y_actual_acceleration = traj_acceleration * 0.3;
 80034ca:	4b10      	ldr	r3, [pc, #64]	; (800350c <data_report+0x9c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd f830 	bl	8000534 <__aeabi_i2d>
 80034d4:	a30a      	add	r3, pc, #40	; (adr r3, 8003500 <data_report+0x90>)
 80034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034da:	f7fd f895 	bl	8000608 <__aeabi_dmul>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4610      	mov	r0, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	f7fd fb3f 	bl	8000b68 <__aeabi_d2iz>
 80034ea:	4603      	mov	r3, r0
 80034ec:	b21a      	sxth	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	821a      	strh	r2, [r3, #16]
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	f3af 8000 	nop.w
 8003500:	33333333 	.word	0x33333333
 8003504:	3fd33333 	.word	0x3fd33333
 8003508:	20000a70 	.word	0x20000a70
 800350c:	20000a74 	.word	0x20000a74

08003510 <x_spam_position>:

void x_spam_position(MB *variables) {
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	if ((variables->x_actual_position - variables->x_target_position) != 0 && variables->x_moving_status == 0) {
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003524:	429a      	cmp	r2, r3
 8003526:	d007      	beq.n	8003538 <x_spam_position+0x28>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <x_spam_position+0x28>
		variables->x_moving_status = 2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2202      	movs	r2, #2
 8003536:	851a      	strh	r2, [r3, #40]	; 0x28
	}
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	0000      	movs	r0, r0
	...

08003548 <joystick_callback>:

void joystick_callback() {
 8003548:	b598      	push	{r3, r4, r7, lr}
 800354a:	af00      	add	r7, sp, #0
	if (!jog_enable) {
 800354c:	4b96      	ldr	r3, [pc, #600]	; (80037a8 <joystick_callback+0x260>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 811d 	beq.w	8003790 <joystick_callback+0x248>
		return;
	}

	setpoint_x += receivedByte[0];
 8003556:	4b95      	ldr	r3, [pc, #596]	; (80037ac <joystick_callback+0x264>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4b95      	ldr	r3, [pc, #596]	; (80037b0 <joystick_callback+0x268>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4413      	add	r3, r2
 8003560:	4a93      	ldr	r2, [pc, #588]	; (80037b0 <joystick_callback+0x268>)
 8003562:	6013      	str	r3, [r2, #0]
	setpoint_y += receivedByte[1];
 8003564:	4b91      	ldr	r3, [pc, #580]	; (80037ac <joystick_callback+0x264>)
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	4b92      	ldr	r3, [pc, #584]	; (80037b4 <joystick_callback+0x26c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4413      	add	r3, r2
 800356e:	4a91      	ldr	r2, [pc, #580]	; (80037b4 <joystick_callback+0x26c>)
 8003570:	6013      	str	r3, [r2, #0]

	if (setpoint_x > 1400) {
 8003572:	4b8f      	ldr	r3, [pc, #572]	; (80037b0 <joystick_callback+0x268>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800357a:	dd04      	ble.n	8003586 <joystick_callback+0x3e>
		setpoint_x = 1400;
 800357c:	4b8c      	ldr	r3, [pc, #560]	; (80037b0 <joystick_callback+0x268>)
 800357e:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e007      	b.n	8003596 <joystick_callback+0x4e>
	} else if (setpoint_x < -1400) {
 8003586:	4b8a      	ldr	r3, [pc, #552]	; (80037b0 <joystick_callback+0x268>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f513 6faf 	cmn.w	r3, #1400	; 0x578
 800358e:	da02      	bge.n	8003596 <joystick_callback+0x4e>
		setpoint_x = -1400;
 8003590:	4b87      	ldr	r3, [pc, #540]	; (80037b0 <joystick_callback+0x268>)
 8003592:	4a89      	ldr	r2, [pc, #548]	; (80037b8 <joystick_callback+0x270>)
 8003594:	601a      	str	r2, [r3, #0]
	}

	if (setpoint_y > 11667) {
 8003596:	4b87      	ldr	r3, [pc, #540]	; (80037b4 <joystick_callback+0x26c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f642 5293 	movw	r2, #11667	; 0x2d93
 800359e:	4293      	cmp	r3, r2
 80035a0:	dd04      	ble.n	80035ac <joystick_callback+0x64>
		setpoint_y = 11667;
 80035a2:	4b84      	ldr	r3, [pc, #528]	; (80037b4 <joystick_callback+0x26c>)
 80035a4:	f642 5293 	movw	r2, #11667	; 0x2d93
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e007      	b.n	80035bc <joystick_callback+0x74>
	} else if (setpoint_y < -11667) {
 80035ac:	4b81      	ldr	r3, [pc, #516]	; (80037b4 <joystick_callback+0x26c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a82      	ldr	r2, [pc, #520]	; (80037bc <joystick_callback+0x274>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	da02      	bge.n	80035bc <joystick_callback+0x74>
		setpoint_y = -11667;
 80035b6:	4b7f      	ldr	r3, [pc, #508]	; (80037b4 <joystick_callback+0x26c>)
 80035b8:	4a80      	ldr	r2, [pc, #512]	; (80037bc <joystick_callback+0x274>)
 80035ba:	601a      	str	r2, [r3, #0]
	}

	if (receivedByte[2]) {
 80035bc:	4b7b      	ldr	r3, [pc, #492]	; (80037ac <joystick_callback+0x264>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d036      	beq.n	8003632 <joystick_callback+0xea>
		corners[jog_point_n].x = setpoint_x / 10.0;
 80035c4:	4b7a      	ldr	r3, [pc, #488]	; (80037b0 <joystick_callback+0x268>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fc ffb3 	bl	8000534 <__aeabi_i2d>
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	4b7b      	ldr	r3, [pc, #492]	; (80037c0 <joystick_callback+0x278>)
 80035d4:	f7fd f942 	bl	800085c <__aeabi_ddiv>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4979      	ldr	r1, [pc, #484]	; (80037c4 <joystick_callback+0x27c>)
 80035de:	7809      	ldrb	r1, [r1, #0]
 80035e0:	460c      	mov	r4, r1
 80035e2:	4610      	mov	r0, r2
 80035e4:	4619      	mov	r1, r3
 80035e6:	f7fd fb07 	bl	8000bf8 <__aeabi_d2f>
 80035ea:	4602      	mov	r2, r0
 80035ec:	4976      	ldr	r1, [pc, #472]	; (80037c8 <joystick_callback+0x280>)
 80035ee:	00e3      	lsls	r3, r4, #3
 80035f0:	440b      	add	r3, r1
 80035f2:	601a      	str	r2, [r3, #0]
		corners[jog_point_n].y = setpoint_y * 0.03;
 80035f4:	4b6f      	ldr	r3, [pc, #444]	; (80037b4 <joystick_callback+0x26c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fc ff9b 	bl	8000534 <__aeabi_i2d>
 80035fe:	a366      	add	r3, pc, #408	; (adr r3, 8003798 <joystick_callback+0x250>)
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	f7fd f800 	bl	8000608 <__aeabi_dmul>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	496d      	ldr	r1, [pc, #436]	; (80037c4 <joystick_callback+0x27c>)
 800360e:	7809      	ldrb	r1, [r1, #0]
 8003610:	460c      	mov	r4, r1
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	f7fd faef 	bl	8000bf8 <__aeabi_d2f>
 800361a:	4602      	mov	r2, r0
 800361c:	496a      	ldr	r1, [pc, #424]	; (80037c8 <joystick_callback+0x280>)
 800361e:	00e3      	lsls	r3, r4, #3
 8003620:	440b      	add	r3, r1
 8003622:	3304      	adds	r3, #4
 8003624:	601a      	str	r2, [r3, #0]
		jog_point_n++;
 8003626:	4b67      	ldr	r3, [pc, #412]	; (80037c4 <joystick_callback+0x27c>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	3301      	adds	r3, #1
 800362c:	b2da      	uxtb	r2, r3
 800362e:	4b65      	ldr	r3, [pc, #404]	; (80037c4 <joystick_callback+0x27c>)
 8003630:	701a      	strb	r2, [r3, #0]
	}
	if (jog_point_n >= 3) {
 8003632:	4b64      	ldr	r3, [pc, #400]	; (80037c4 <joystick_callback+0x27c>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b02      	cmp	r3, #2
 8003638:	f240 80ab 	bls.w	8003792 <joystick_callback+0x24a>
		if (state == MSpick) {
 800363c:	4b63      	ldr	r3, [pc, #396]	; (80037cc <joystick_callback+0x284>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d14f      	bne.n	80036e4 <joystick_callback+0x19c>
			localize(corners, pick, &origin_pick, &angle_pick);
 8003644:	4b62      	ldr	r3, [pc, #392]	; (80037d0 <joystick_callback+0x288>)
 8003646:	4a63      	ldr	r2, [pc, #396]	; (80037d4 <joystick_callback+0x28c>)
 8003648:	4963      	ldr	r1, [pc, #396]	; (80037d8 <joystick_callback+0x290>)
 800364a:	485f      	ldr	r0, [pc, #380]	; (80037c8 <joystick_callback+0x280>)
 800364c:	f7fe fdfc 	bl	8002248 <localize>
			MBvariables.pick_tray_orientation = (360.0 - (angle_pick * 180.0 / M_PI)) * 100.0;
 8003650:	4b5f      	ldr	r3, [pc, #380]	; (80037d0 <joystick_callback+0x288>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fc ff7f 	bl	8000558 <__aeabi_f2d>
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	4b5f      	ldr	r3, [pc, #380]	; (80037dc <joystick_callback+0x294>)
 8003660:	f7fc ffd2 	bl	8000608 <__aeabi_dmul>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	a34c      	add	r3, pc, #304	; (adr r3, 80037a0 <joystick_callback+0x258>)
 800366e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003672:	f7fd f8f3 	bl	800085c <__aeabi_ddiv>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	f04f 0000 	mov.w	r0, #0
 800367e:	4958      	ldr	r1, [pc, #352]	; (80037e0 <joystick_callback+0x298>)
 8003680:	f7fc fe0a 	bl	8000298 <__aeabi_dsub>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4610      	mov	r0, r2
 800368a:	4619      	mov	r1, r3
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	4b54      	ldr	r3, [pc, #336]	; (80037e4 <joystick_callback+0x29c>)
 8003692:	f7fc ffb9 	bl	8000608 <__aeabi_dmul>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	f7fd fa63 	bl	8000b68 <__aeabi_d2iz>
 80036a2:	4603      	mov	r3, r0
 80036a4:	b21a      	sxth	r2, r3
 80036a6:	4b50      	ldr	r3, [pc, #320]	; (80037e8 <joystick_callback+0x2a0>)
 80036a8:	82da      	strh	r2, [r3, #22]
			MBvariables.pick_tray_origin_x = origin_pick.x * 10;
 80036aa:	4b4a      	ldr	r3, [pc, #296]	; (80037d4 <joystick_callback+0x28c>)
 80036ac:	edd3 7a00 	vldr	s15, [r3]
 80036b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80036b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036bc:	ee17 3a90 	vmov	r3, s15
 80036c0:	b21a      	sxth	r2, r3
 80036c2:	4b49      	ldr	r3, [pc, #292]	; (80037e8 <joystick_callback+0x2a0>)
 80036c4:	825a      	strh	r2, [r3, #18]
			MBvariables.pick_tray_origin_y = origin_pick.y * 10;
 80036c6:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <joystick_callback+0x28c>)
 80036c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80036cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80036d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036d8:	ee17 3a90 	vmov	r3, s15
 80036dc:	b21a      	sxth	r2, r3
 80036de:	4b42      	ldr	r3, [pc, #264]	; (80037e8 <joystick_callback+0x2a0>)
 80036e0:	829a      	strh	r2, [r3, #20]
 80036e2:	e04e      	b.n	8003782 <joystick_callback+0x23a>
		} else {
			localize(corners, place, &origin_place, &angle_place);
 80036e4:	4b41      	ldr	r3, [pc, #260]	; (80037ec <joystick_callback+0x2a4>)
 80036e6:	4a42      	ldr	r2, [pc, #264]	; (80037f0 <joystick_callback+0x2a8>)
 80036e8:	4942      	ldr	r1, [pc, #264]	; (80037f4 <joystick_callback+0x2ac>)
 80036ea:	4837      	ldr	r0, [pc, #220]	; (80037c8 <joystick_callback+0x280>)
 80036ec:	f7fe fdac 	bl	8002248 <localize>
			MBvariables.place_tray_orientation = (360.0 - (angle_place * 180.0 / M_PI)) * 100.0;
 80036f0:	4b3e      	ldr	r3, [pc, #248]	; (80037ec <joystick_callback+0x2a4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fc ff2f 	bl	8000558 <__aeabi_f2d>
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	4b37      	ldr	r3, [pc, #220]	; (80037dc <joystick_callback+0x294>)
 8003700:	f7fc ff82 	bl	8000608 <__aeabi_dmul>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	a324      	add	r3, pc, #144	; (adr r3, 80037a0 <joystick_callback+0x258>)
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	f7fd f8a3 	bl	800085c <__aeabi_ddiv>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	f04f 0000 	mov.w	r0, #0
 800371e:	4930      	ldr	r1, [pc, #192]	; (80037e0 <joystick_callback+0x298>)
 8003720:	f7fc fdba 	bl	8000298 <__aeabi_dsub>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	4b2c      	ldr	r3, [pc, #176]	; (80037e4 <joystick_callback+0x29c>)
 8003732:	f7fc ff69 	bl	8000608 <__aeabi_dmul>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4610      	mov	r0, r2
 800373c:	4619      	mov	r1, r3
 800373e:	f7fd fa13 	bl	8000b68 <__aeabi_d2iz>
 8003742:	4603      	mov	r3, r0
 8003744:	b21a      	sxth	r2, r3
 8003746:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <joystick_callback+0x2a0>)
 8003748:	839a      	strh	r2, [r3, #28]
			MBvariables.place_tray_origin_x = origin_place.x * 10;
 800374a:	4b29      	ldr	r3, [pc, #164]	; (80037f0 <joystick_callback+0x2a8>)
 800374c:	edd3 7a00 	vldr	s15, [r3]
 8003750:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003758:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800375c:	ee17 3a90 	vmov	r3, s15
 8003760:	b21a      	sxth	r2, r3
 8003762:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <joystick_callback+0x2a0>)
 8003764:	831a      	strh	r2, [r3, #24]
			MBvariables.place_tray_origin_y = origin_place.y * 10;
 8003766:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <joystick_callback+0x2a8>)
 8003768:	edd3 7a01 	vldr	s15, [r3, #4]
 800376c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003778:	ee17 3a90 	vmov	r3, s15
 800377c:	b21a      	sxth	r2, r3
 800377e:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <joystick_callback+0x2a0>)
 8003780:	835a      	strh	r2, [r3, #26]
		}
		state = MSwait;
 8003782:	4b12      	ldr	r3, [pc, #72]	; (80037cc <joystick_callback+0x284>)
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
		jog_point_n = 0;
 8003788:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <joystick_callback+0x27c>)
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	e000      	b.n	8003792 <joystick_callback+0x24a>
		return;
 8003790:	bf00      	nop
	}
}
 8003792:	bd98      	pop	{r3, r4, r7, pc}
 8003794:	f3af 8000 	nop.w
 8003798:	eb851eb8 	.word	0xeb851eb8
 800379c:	3f9eb851 	.word	0x3f9eb851
 80037a0:	54442d18 	.word	0x54442d18
 80037a4:	400921fb 	.word	0x400921fb
 80037a8:	20000a61 	.word	0x20000a61
 80037ac:	20001900 	.word	0x20001900
 80037b0:	200018c8 	.word	0x200018c8
 80037b4:	200018c4 	.word	0x200018c4
 80037b8:	fffffa88 	.word	0xfffffa88
 80037bc:	ffffd26d 	.word	0xffffd26d
 80037c0:	40240000 	.word	0x40240000
 80037c4:	20000a62 	.word	0x20000a62
 80037c8:	20000a78 	.word	0x20000a78
 80037cc:	20000218 	.word	0x20000218
 80037d0:	20000b28 	.word	0x20000b28
 80037d4:	20000b20 	.word	0x20000b20
 80037d8:	20000a90 	.word	0x20000a90
 80037dc:	40668000 	.word	0x40668000
 80037e0:	40768000 	.word	0x40768000
 80037e4:	40590000 	.word	0x40590000
 80037e8:	200018d4 	.word	0x200018d4
 80037ec:	20000b34 	.word	0x20000b34
 80037f0:	20000b2c 	.word	0x20000b2c
 80037f4:	20000ad8 	.word	0x20000ad8

080037f8 <move_finished>:

uint8_t move_finished(uint32_t tolerance) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	if (abs(getLocalPosition() - setpoint_y) < tolerance && abs(MBvariables.x_actual_position - setpoint_x) < tolerance) {
 8003800:	f7fe fd02 	bl	8002208 <getLocalPosition>
 8003804:	4602      	mov	r2, r0
 8003806:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <move_finished+0x4c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	bfb8      	it	lt
 8003810:	425b      	neglt	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4293      	cmp	r3, r2
 8003818:	d90f      	bls.n	800383a <move_finished+0x42>
 800381a:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <move_finished+0x50>)
 800381c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003820:	461a      	mov	r2, r3
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <move_finished+0x54>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	bfb8      	it	lt
 800382c:	425b      	neglt	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <move_finished+0x42>
		return 1;
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <move_finished+0x44>
	}
	return 0;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	200018c4 	.word	0x200018c4
 8003848:	200018d4 	.word	0x200018d4
 800384c:	200018c8 	.word	0x200018c8

08003850 <preset_data_y_only>:

void preset_data_y_only() {
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
	for (int i = 0; i < 9; i++) {
 8003856:	2300      	movs	r3, #0
 8003858:	607b      	str	r3, [r7, #4]
 800385a:	e043      	b.n	80038e4 <preset_data_y_only+0x94>
		pick[i].y = 38.0 + 38.0 * i;
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7fc fe69 	bl	8000534 <__aeabi_i2d>
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	4b23      	ldr	r3, [pc, #140]	; (80038f4 <preset_data_y_only+0xa4>)
 8003868:	f7fc fece 	bl	8000608 <__aeabi_dmul>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4610      	mov	r0, r2
 8003872:	4619      	mov	r1, r3
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	4b1e      	ldr	r3, [pc, #120]	; (80038f4 <preset_data_y_only+0xa4>)
 800387a:	f7fc fd0f 	bl	800029c <__adddf3>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	f7fd f9b7 	bl	8000bf8 <__aeabi_d2f>
 800388a:	4602      	mov	r2, r0
 800388c:	491a      	ldr	r1, [pc, #104]	; (80038f8 <preset_data_y_only+0xa8>)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	440b      	add	r3, r1
 8003894:	3304      	adds	r3, #4
 8003896:	601a      	str	r2, [r3, #0]
		place[i].y = -(38.0 + 38.0 * i);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7fc fe4b 	bl	8000534 <__aeabi_i2d>
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <preset_data_y_only+0xa4>)
 80038a4:	f7fc feb0 	bl	8000608 <__aeabi_dmul>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4610      	mov	r0, r2
 80038ae:	4619      	mov	r1, r3
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <preset_data_y_only+0xa4>)
 80038b6:	f7fc fcf1 	bl	800029c <__adddf3>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4610      	mov	r0, r2
 80038c0:	4619      	mov	r1, r3
 80038c2:	f7fd f999 	bl	8000bf8 <__aeabi_d2f>
 80038c6:	4603      	mov	r3, r0
 80038c8:	ee07 3a90 	vmov	s15, r3
 80038cc:	eef1 7a67 	vneg.f32	s15, s15
 80038d0:	4a0a      	ldr	r2, [pc, #40]	; (80038fc <preset_data_y_only+0xac>)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4413      	add	r3, r2
 80038d8:	3304      	adds	r3, #4
 80038da:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 9; i++) {
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3301      	adds	r3, #1
 80038e2:	607b      	str	r3, [r7, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	ddb8      	ble.n	800385c <preset_data_y_only+0xc>
	}
}
 80038ea:	bf00      	nop
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40430000 	.word	0x40430000
 80038f8:	20000a90 	.word	0x20000a90
 80038fc:	20000ad8 	.word	0x20000ad8

08003900 <preset_data_xy>:

void preset_data_xy() {
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
	corners[0].x = -68.0;
 8003904:	4b64      	ldr	r3, [pc, #400]	; (8003a98 <preset_data_xy+0x198>)
 8003906:	4a65      	ldr	r2, [pc, #404]	; (8003a9c <preset_data_xy+0x19c>)
 8003908:	601a      	str	r2, [r3, #0]
	corners[0].y = 7.1;
 800390a:	4b63      	ldr	r3, [pc, #396]	; (8003a98 <preset_data_xy+0x198>)
 800390c:	4a64      	ldr	r2, [pc, #400]	; (8003aa0 <preset_data_xy+0x1a0>)
 800390e:	605a      	str	r2, [r3, #4]
	corners[1].x = -29.4;
 8003910:	4b61      	ldr	r3, [pc, #388]	; (8003a98 <preset_data_xy+0x198>)
 8003912:	4a64      	ldr	r2, [pc, #400]	; (8003aa4 <preset_data_xy+0x1a4>)
 8003914:	609a      	str	r2, [r3, #8]
	corners[1].y = 52.7;
 8003916:	4b60      	ldr	r3, [pc, #384]	; (8003a98 <preset_data_xy+0x198>)
 8003918:	4a63      	ldr	r2, [pc, #396]	; (8003aa8 <preset_data_xy+0x1a8>)
 800391a:	60da      	str	r2, [r3, #12]
	corners[2].x = 8.2;
 800391c:	4b5e      	ldr	r3, [pc, #376]	; (8003a98 <preset_data_xy+0x198>)
 800391e:	4a63      	ldr	r2, [pc, #396]	; (8003aac <preset_data_xy+0x1ac>)
 8003920:	611a      	str	r2, [r3, #16]
	corners[2].y = 21.2;
 8003922:	4b5d      	ldr	r3, [pc, #372]	; (8003a98 <preset_data_xy+0x198>)
 8003924:	4a62      	ldr	r2, [pc, #392]	; (8003ab0 <preset_data_xy+0x1b0>)
 8003926:	615a      	str	r2, [r3, #20]
	localize(corners, pick, &origin_pick, &angle_pick);
 8003928:	4b62      	ldr	r3, [pc, #392]	; (8003ab4 <preset_data_xy+0x1b4>)
 800392a:	4a63      	ldr	r2, [pc, #396]	; (8003ab8 <preset_data_xy+0x1b8>)
 800392c:	4963      	ldr	r1, [pc, #396]	; (8003abc <preset_data_xy+0x1bc>)
 800392e:	485a      	ldr	r0, [pc, #360]	; (8003a98 <preset_data_xy+0x198>)
 8003930:	f7fe fc8a 	bl	8002248 <localize>
	MBvariables.pick_tray_orientation = (360.0 - (angle_pick * 180.0 / M_PI)) * 100.0;
 8003934:	4b5f      	ldr	r3, [pc, #380]	; (8003ab4 <preset_data_xy+0x1b4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7fc fe0d 	bl	8000558 <__aeabi_f2d>
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	4b5f      	ldr	r3, [pc, #380]	; (8003ac0 <preset_data_xy+0x1c0>)
 8003944:	f7fc fe60 	bl	8000608 <__aeabi_dmul>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4610      	mov	r0, r2
 800394e:	4619      	mov	r1, r3
 8003950:	a34f      	add	r3, pc, #316	; (adr r3, 8003a90 <preset_data_xy+0x190>)
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f7fc ff81 	bl	800085c <__aeabi_ddiv>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	f04f 0000 	mov.w	r0, #0
 8003962:	4958      	ldr	r1, [pc, #352]	; (8003ac4 <preset_data_xy+0x1c4>)
 8003964:	f7fc fc98 	bl	8000298 <__aeabi_dsub>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4610      	mov	r0, r2
 800396e:	4619      	mov	r1, r3
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	4b54      	ldr	r3, [pc, #336]	; (8003ac8 <preset_data_xy+0x1c8>)
 8003976:	f7fc fe47 	bl	8000608 <__aeabi_dmul>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4610      	mov	r0, r2
 8003980:	4619      	mov	r1, r3
 8003982:	f7fd f8f1 	bl	8000b68 <__aeabi_d2iz>
 8003986:	4603      	mov	r3, r0
 8003988:	b21a      	sxth	r2, r3
 800398a:	4b50      	ldr	r3, [pc, #320]	; (8003acc <preset_data_xy+0x1cc>)
 800398c:	82da      	strh	r2, [r3, #22]
	MBvariables.pick_tray_origin_x = origin_pick.x * 10;
 800398e:	4b4a      	ldr	r3, [pc, #296]	; (8003ab8 <preset_data_xy+0x1b8>)
 8003990:	edd3 7a00 	vldr	s15, [r3]
 8003994:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003998:	ee67 7a87 	vmul.f32	s15, s15, s14
 800399c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039a0:	ee17 3a90 	vmov	r3, s15
 80039a4:	b21a      	sxth	r2, r3
 80039a6:	4b49      	ldr	r3, [pc, #292]	; (8003acc <preset_data_xy+0x1cc>)
 80039a8:	825a      	strh	r2, [r3, #18]
	MBvariables.pick_tray_origin_y = origin_pick.y * 10;
 80039aa:	4b43      	ldr	r3, [pc, #268]	; (8003ab8 <preset_data_xy+0x1b8>)
 80039ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80039b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80039b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039bc:	ee17 3a90 	vmov	r3, s15
 80039c0:	b21a      	sxth	r2, r3
 80039c2:	4b42      	ldr	r3, [pc, #264]	; (8003acc <preset_data_xy+0x1cc>)
 80039c4:	829a      	strh	r2, [r3, #20]

	corners[0].x = -170.0;
 80039c6:	4b34      	ldr	r3, [pc, #208]	; (8003a98 <preset_data_xy+0x198>)
 80039c8:	4a41      	ldr	r2, [pc, #260]	; (8003ad0 <preset_data_xy+0x1d0>)
 80039ca:	601a      	str	r2, [r3, #0]
	corners[0].y = -90.3;
 80039cc:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <preset_data_xy+0x198>)
 80039ce:	4a41      	ldr	r2, [pc, #260]	; (8003ad4 <preset_data_xy+0x1d4>)
 80039d0:	605a      	str	r2, [r3, #4]
	corners[1].x = -149.4;
 80039d2:	4b31      	ldr	r3, [pc, #196]	; (8003a98 <preset_data_xy+0x198>)
 80039d4:	4a40      	ldr	r2, [pc, #256]	; (8003ad8 <preset_data_xy+0x1d8>)
 80039d6:	609a      	str	r2, [r3, #8]
	corners[1].y = -46.1;
 80039d8:	4b2f      	ldr	r3, [pc, #188]	; (8003a98 <preset_data_xy+0x198>)
 80039da:	4a40      	ldr	r2, [pc, #256]	; (8003adc <preset_data_xy+0x1dc>)
 80039dc:	60da      	str	r2, [r3, #12]
	corners[2].x = -95.3;
 80039de:	4b2e      	ldr	r3, [pc, #184]	; (8003a98 <preset_data_xy+0x198>)
 80039e0:	4a3f      	ldr	r2, [pc, #252]	; (8003ae0 <preset_data_xy+0x1e0>)
 80039e2:	611a      	str	r2, [r3, #16]
	corners[2].y = -69.6;
 80039e4:	4b2c      	ldr	r3, [pc, #176]	; (8003a98 <preset_data_xy+0x198>)
 80039e6:	4a3f      	ldr	r2, [pc, #252]	; (8003ae4 <preset_data_xy+0x1e4>)
 80039e8:	615a      	str	r2, [r3, #20]
	localize(corners, place, &origin_place, &angle_place);
 80039ea:	4b3f      	ldr	r3, [pc, #252]	; (8003ae8 <preset_data_xy+0x1e8>)
 80039ec:	4a3f      	ldr	r2, [pc, #252]	; (8003aec <preset_data_xy+0x1ec>)
 80039ee:	4940      	ldr	r1, [pc, #256]	; (8003af0 <preset_data_xy+0x1f0>)
 80039f0:	4829      	ldr	r0, [pc, #164]	; (8003a98 <preset_data_xy+0x198>)
 80039f2:	f7fe fc29 	bl	8002248 <localize>
	MBvariables.place_tray_orientation = (360.0 - (angle_place * 180.0 / M_PI)) * 100.0;
 80039f6:	4b3c      	ldr	r3, [pc, #240]	; (8003ae8 <preset_data_xy+0x1e8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fc fdac 	bl	8000558 <__aeabi_f2d>
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	4b2e      	ldr	r3, [pc, #184]	; (8003ac0 <preset_data_xy+0x1c0>)
 8003a06:	f7fc fdff 	bl	8000608 <__aeabi_dmul>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4619      	mov	r1, r3
 8003a12:	a31f      	add	r3, pc, #124	; (adr r3, 8003a90 <preset_data_xy+0x190>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f7fc ff20 	bl	800085c <__aeabi_ddiv>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	f04f 0000 	mov.w	r0, #0
 8003a24:	4927      	ldr	r1, [pc, #156]	; (8003ac4 <preset_data_xy+0x1c4>)
 8003a26:	f7fc fc37 	bl	8000298 <__aeabi_dsub>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4610      	mov	r0, r2
 8003a30:	4619      	mov	r1, r3
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <preset_data_xy+0x1c8>)
 8003a38:	f7fc fde6 	bl	8000608 <__aeabi_dmul>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4610      	mov	r0, r2
 8003a42:	4619      	mov	r1, r3
 8003a44:	f7fd f890 	bl	8000b68 <__aeabi_d2iz>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	b21a      	sxth	r2, r3
 8003a4c:	4b1f      	ldr	r3, [pc, #124]	; (8003acc <preset_data_xy+0x1cc>)
 8003a4e:	839a      	strh	r2, [r3, #28]
	MBvariables.place_tray_origin_x = origin_place.x * 10;
 8003a50:	4b26      	ldr	r3, [pc, #152]	; (8003aec <preset_data_xy+0x1ec>)
 8003a52:	edd3 7a00 	vldr	s15, [r3]
 8003a56:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a62:	ee17 3a90 	vmov	r3, s15
 8003a66:	b21a      	sxth	r2, r3
 8003a68:	4b18      	ldr	r3, [pc, #96]	; (8003acc <preset_data_xy+0x1cc>)
 8003a6a:	831a      	strh	r2, [r3, #24]
	MBvariables.place_tray_origin_y = origin_place.y * 10;
 8003a6c:	4b1f      	ldr	r3, [pc, #124]	; (8003aec <preset_data_xy+0x1ec>)
 8003a6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a72:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a7e:	ee17 3a90 	vmov	r3, s15
 8003a82:	b21a      	sxth	r2, r3
 8003a84:	4b11      	ldr	r3, [pc, #68]	; (8003acc <preset_data_xy+0x1cc>)
 8003a86:	835a      	strh	r2, [r3, #26]
}
 8003a88:	bf00      	nop
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	f3af 8000 	nop.w
 8003a90:	54442d18 	.word	0x54442d18
 8003a94:	400921fb 	.word	0x400921fb
 8003a98:	20000a78 	.word	0x20000a78
 8003a9c:	c2880000 	.word	0xc2880000
 8003aa0:	40e33333 	.word	0x40e33333
 8003aa4:	c1eb3333 	.word	0xc1eb3333
 8003aa8:	4252cccd 	.word	0x4252cccd
 8003aac:	41033333 	.word	0x41033333
 8003ab0:	41a9999a 	.word	0x41a9999a
 8003ab4:	20000b28 	.word	0x20000b28
 8003ab8:	20000b20 	.word	0x20000b20
 8003abc:	20000a90 	.word	0x20000a90
 8003ac0:	40668000 	.word	0x40668000
 8003ac4:	40768000 	.word	0x40768000
 8003ac8:	40590000 	.word	0x40590000
 8003acc:	200018d4 	.word	0x200018d4
 8003ad0:	c32a0000 	.word	0xc32a0000
 8003ad4:	c2b4999a 	.word	0xc2b4999a
 8003ad8:	c3156666 	.word	0xc3156666
 8003adc:	c2386666 	.word	0xc2386666
 8003ae0:	c2be999a 	.word	0xc2be999a
 8003ae4:	c28b3333 	.word	0xc28b3333
 8003ae8:	20000b34 	.word	0x20000b34
 8003aec:	20000b2c 	.word	0x20000b2c
 8003af0:	20000ad8 	.word	0x20000ad8

08003af4 <Set_LED>:
void Set_LED(int LEDnum, int Red, int Green, int Blue);
void Set_Brightness(int brightness);
void WS2812_Send(void);
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim);

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	b2d9      	uxtb	r1, r3
 8003b06:	4a11      	ldr	r2, [pc, #68]	; (8003b4c <Set_LED+0x58>)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	b2d9      	uxtb	r1, r3
 8003b12:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <Set_LED+0x58>)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	460a      	mov	r2, r1
 8003b1c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	b2d9      	uxtb	r1, r3
 8003b22:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <Set_LED+0x58>)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	460a      	mov	r2, r1
 8003b2c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	b2d9      	uxtb	r1, r3
 8003b32:	4a06      	ldr	r2, [pc, #24]	; (8003b4c <Set_LED+0x58>)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	460a      	mov	r2, r1
 8003b3c:	70da      	strb	r2, [r3, #3]
}
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20000b38 	.word	0x20000b38

08003b50 <Set_Brightness>:

void Set_Brightness(int brightness)  // 0-45
{
 8003b50:	b5b0      	push	{r4, r5, r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
	if (brightness > 45)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b2d      	cmp	r3, #45	; 0x2d
 8003b5c:	dd01      	ble.n	8003b62 <Set_Brightness+0x12>
		brightness = 45;
 8003b5e:	232d      	movs	r3, #45	; 0x2d
 8003b60:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	e060      	b.n	8003c2a <Set_Brightness+0xda>
		LED_Mod[i][0] = LED_Data[i][0];
 8003b68:	4a37      	ldr	r2, [pc, #220]	; (8003c48 <Set_Brightness+0xf8>)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8003b70:	4a36      	ldr	r2, [pc, #216]	; (8003c4c <Set_Brightness+0xfc>)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 8003b78:	2301      	movs	r3, #1
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	e04f      	b.n	8003c1e <Set_Brightness+0xce>
			float angle = 90 - brightness;  // in degrees
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8003b84:	ee07 3a90 	vmov	s15, r3
 8003b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b8c:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle * 3.14159265 / 180;  // in rad
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7fc fce1 	bl	8000558 <__aeabi_f2d>
 8003b96:	a32a      	add	r3, pc, #168	; (adr r3, 8003c40 <Set_Brightness+0xf0>)
 8003b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9c:	f7fc fd34 	bl	8000608 <__aeabi_dmul>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	4b28      	ldr	r3, [pc, #160]	; (8003c50 <Set_Brightness+0x100>)
 8003bae:	f7fc fe55 	bl	800085c <__aeabi_ddiv>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f7fd f81d 	bl	8000bf8 <__aeabi_d2f>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / tan(angle);
 8003bc2:	4a21      	ldr	r2, [pc, #132]	; (8003c48 <Set_Brightness+0xf8>)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	441a      	add	r2, r3
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4413      	add	r3, r2
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fc fcaf 	bl	8000534 <__aeabi_i2d>
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	460d      	mov	r5, r1
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f7fc fcbc 	bl	8000558 <__aeabi_f2d>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	ec43 2b10 	vmov	d0, r2, r3
 8003be8:	f00c f9a6 	bl	800ff38 <tan>
 8003bec:	ec53 2b10 	vmov	r2, r3, d0
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	f7fc fe32 	bl	800085c <__aeabi_ddiv>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4619      	mov	r1, r3
 8003c00:	f7fc ffda 	bl	8000bb8 <__aeabi_d2uiz>
 8003c04:	4603      	mov	r3, r0
 8003c06:	b2d9      	uxtb	r1, r3
 8003c08:	4a10      	ldr	r2, [pc, #64]	; (8003c4c <Set_Brightness+0xfc>)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	441a      	add	r2, r3
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4413      	add	r3, r2
 8003c14:	460a      	mov	r2, r1
 8003c16:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	ddac      	ble.n	8003b7e <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	3301      	adds	r3, #1
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b3b      	cmp	r3, #59	; 0x3b
 8003c2e:	dd9b      	ble.n	8003b68 <Set_Brightness+0x18>
		}
	}
#endif
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bdb0      	pop	{r4, r5, r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	f3af 8000 	nop.w
 8003c40:	53c8d4f1 	.word	0x53c8d4f1
 8003c44:	400921fb 	.word	0x400921fb
 8003c48:	20000b38 	.word	0x20000b38
 8003c4c:	20000c28 	.word	0x20000c28
 8003c50:	40668000 	.word	0x40668000

08003c54 <WS2812_Send>:

void WS2812_Send(void) {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
	if (!datasentflag) {
 8003c5a:	4b32      	ldr	r3, [pc, #200]	; (8003d24 <WS2812_Send+0xd0>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d05a      	beq.n	8003d1a <WS2812_Send+0xc6>
		return;
	}
	uint32_t indx = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	e036      	b.n	8003cdc <WS2812_Send+0x88>
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8003c6e:	4a2e      	ldr	r2, [pc, #184]	; (8003d28 <WS2812_Send+0xd4>)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	785b      	ldrb	r3, [r3, #1]
 8003c78:	041a      	lsls	r2, r3, #16
 8003c7a:	492b      	ldr	r1, [pc, #172]	; (8003d28 <WS2812_Send+0xd4>)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	789b      	ldrb	r3, [r3, #2]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	431a      	orrs	r2, r3
 8003c88:	4927      	ldr	r1, [pc, #156]	; (8003d28 <WS2812_Send+0xd4>)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	78db      	ldrb	r3, [r3, #3]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1] << 16) | (LED_Data[i][2] << 8) | (LED_Data[i][3]));
#endif

		for (int i = 23; i >= 0; i--) {
 8003c96:	2317      	movs	r3, #23
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e019      	b.n	8003cd0 <WS2812_Send+0x7c>
			if (color & (1 << i)) {
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <WS2812_Send+0x66>
				pwmData[indx] = 83;  // 2/3 of 125
 8003cae:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <WS2812_Send+0xd8>)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2153      	movs	r1, #83	; 0x53
 8003cb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003cb8:	e004      	b.n	8003cc4 <WS2812_Send+0x70>
			} else {
				pwmData[indx] = 42;  // 1/3 of 125
 8003cba:	4a1c      	ldr	r2, [pc, #112]	; (8003d2c <WS2812_Send+0xd8>)
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	212a      	movs	r1, #42	; 0x2a
 8003cc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			indx++;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	dae2      	bge.n	8003c9c <WS2812_Send+0x48>
	for (int i = 0; i < MAX_LED; i++) {
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2b3b      	cmp	r3, #59	; 0x3b
 8003ce0:	ddc5      	ble.n	8003c6e <WS2812_Send+0x1a>
		}
	}

	for (int i = 0; i < 50; i++) {
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	e00a      	b.n	8003cfe <WS2812_Send+0xaa>
		pwmData[indx] = 0;
 8003ce8:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <WS2812_Send+0xd8>)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2100      	movs	r1, #0
 8003cee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) {
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b31      	cmp	r3, #49	; 0x31
 8003d02:	ddf1      	ble.n	8003ce8 <WS2812_Send+0x94>
	}

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	4a08      	ldr	r2, [pc, #32]	; (8003d2c <WS2812_Send+0xd8>)
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4808      	ldr	r0, [pc, #32]	; (8003d30 <WS2812_Send+0xdc>)
 8003d0e:	f004 f981 	bl	8008014 <HAL_TIM_PWM_Start_DMA>
	datasentflag = 0;
 8003d12:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <WS2812_Send+0xd0>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]
 8003d18:	e000      	b.n	8003d1c <WS2812_Send+0xc8>
		return;
 8003d1a:	bf00      	nop
}
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	2000021a 	.word	0x2000021a
 8003d28:	20000c28 	.word	0x20000c28
 8003d2c:	20000d18 	.word	0x20000d18
 8003d30:	20001aa4 	.word	0x20001aa4

08003d34 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a07      	ldr	r2, [pc, #28]	; (8003d5c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d106      	bne.n	8003d52 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8003d44:	2100      	movs	r1, #0
 8003d46:	4805      	ldr	r0, [pc, #20]	; (8003d5c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8003d48:	f004 fb14 	bl	8008374 <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	701a      	strb	r2, [r3, #0]
	}
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20001aa4 	.word	0x20001aa4
 8003d60:	2000021a 	.word	0x2000021a

08003d64 <RGB_logic>:
void RGB_logic(MachineState state, uint8_t point);
void RGB_Bootup();

// USER CODE ======================================================================================

void RGB_logic(MachineState state, uint8_t point) {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	460a      	mov	r2, r1
 8003d6e:	71fb      	strb	r3, [r7, #7]
 8003d70:	4613      	mov	r3, r2
 8003d72:	71bb      	strb	r3, [r7, #6]
	// Run on 200 Hz
	static uint32_t timestamp;
	if (HAL_GetTick() - timestamp < 5) {
 8003d74:	f001 fc46 	bl	8005604 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <RGB_logic+0x64>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d91c      	bls.n	8003dbe <RGB_logic+0x5a>
		return;
	}
	timestamp = HAL_GetTick() + 5;
 8003d84:	f001 fc3e 	bl	8005604 <HAL_GetTick>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	3305      	adds	r3, #5
 8003d8c:	4a0e      	ldr	r2, [pc, #56]	; (8003dc8 <RGB_logic+0x64>)
 8003d8e:	6013      	str	r3, [r2, #0]

	// Main logic here
	RGB_Rainbow();
 8003d90:	f000 f81c 	bl	8003dcc <RGB_Rainbow>

	for(int i = 16; i < 24; i++){
 8003d94:	2310      	movs	r3, #16
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	e008      	b.n	8003dac <RGB_logic+0x48>
		Set_LED(i, 0, 0, 0);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2100      	movs	r1, #0
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f7ff fea7 	bl	8003af4 <Set_LED>
	for(int i = 16; i < 24; i++){
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3301      	adds	r3, #1
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b17      	cmp	r3, #23
 8003db0:	ddf3      	ble.n	8003d9a <RGB_logic+0x36>
	}

	WS2812_Send();
 8003db2:	f7ff ff4f 	bl	8003c54 <WS2812_Send>
	Set_Brightness(45);
 8003db6:	202d      	movs	r0, #45	; 0x2d
 8003db8:	f7ff feca 	bl	8003b50 <Set_Brightness>
 8003dbc:	e000      	b.n	8003dc0 <RGB_logic+0x5c>
		return;
 8003dbe:	bf00      	nop
}
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20001930 	.word	0x20001930

08003dcc <RGB_Rainbow>:

void RGB_Rainbow() {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08e      	sub	sp, #56	; 0x38
 8003dd0:	af00      	add	r7, sp, #0
	static uint32_t startTime = 0;
	static const uint32_t transitionDuration = 5000; // Transition duration in milliseconds

	if (HAL_GetTick() - startTime >= transitionDuration) {
 8003dd2:	f001 fc17 	bl	8005604 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	4b90      	ldr	r3, [pc, #576]	; (800401c <RGB_Rainbow+0x250>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	1ad2      	subs	r2, r2, r3
 8003dde:	4b90      	ldr	r3, [pc, #576]	; (8004020 <RGB_Rainbow+0x254>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d304      	bcc.n	8003df0 <RGB_Rainbow+0x24>
		startTime = HAL_GetTick();
 8003de6:	f001 fc0d 	bl	8005604 <HAL_GetTick>
 8003dea:	4603      	mov	r3, r0
 8003dec:	4a8b      	ldr	r2, [pc, #556]	; (800401c <RGB_Rainbow+0x250>)
 8003dee:	6013      	str	r3, [r2, #0]
	}

	// Calculate time elapsed in the current transition
	uint32_t elapsed = HAL_GetTick() - startTime;
 8003df0:	f001 fc08 	bl	8005604 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b89      	ldr	r3, [pc, #548]	; (800401c <RGB_Rainbow+0x250>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculate the normalized progress (0.0 to 1.0) within the transition
	float progress = (float) elapsed / transitionDuration;
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	ee07 3a90 	vmov	s15, r3
 8003e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e08:	4b85      	ldr	r3, [pc, #532]	; (8004020 <RGB_Rainbow+0x254>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e18:	edc7 7a08 	vstr	s15, [r7, #32]

	// Calculate the hue angle based on the progress
	float hueAngle = 360.0f * progress;
 8003e1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e20:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8004024 <RGB_Rainbow+0x258>
 8003e24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e28:	edc7 7a07 	vstr	s15, [r7, #28]

	// Set LED colors based on the hue angle
	for (int i = 0; i < MAX_LED; i++) {
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e30:	e0eb      	b.n	800400a <RGB_Rainbow+0x23e>
		// Calculate the hue value for the current LED
		float ledHue = hueAngle + (i * (360.0f / MAX_LED));
 8003e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e34:	ee07 3a90 	vmov	s15, r3
 8003e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e3c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003e40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e44:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e4c:	edc7 7a06 	vstr	s15, [r7, #24]

		// Convert hue to RGB using HSV color model
		float huePrime = fmodf(ledHue / 60.0f, 6.0f);
 8003e50:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e54:	eddf 6a74 	vldr	s13, [pc, #464]	; 8004028 <RGB_Rainbow+0x25c>
 8003e58:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003e5c:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8003e60:	eeb0 0a47 	vmov.f32	s0, s14
 8003e64:	f00c f8c8 	bl	800fff8 <fmodf>
 8003e68:	ed87 0a05 	vstr	s0, [r7, #20]
		float chroma = 1.0f;
 8003e6c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003e70:	613b      	str	r3, [r7, #16]
		float x = chroma * (1.0f - fabsf(fmodf(huePrime, 2.0f) - 1.0f));
 8003e72:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003e76:	ed97 0a05 	vldr	s0, [r7, #20]
 8003e7a:	f00c f8bd 	bl	800fff8 <fmodf>
 8003e7e:	eef0 7a40 	vmov.f32	s15, s0
 8003e82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e8a:	eef0 7ae7 	vabs.f32	s15, s15
 8003e8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e96:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9e:	edc7 7a03 	vstr	s15, [r7, #12]

		float red, green, blue;

		if (huePrime >= 0.0f && huePrime < 1.0f) {
 8003ea2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ea6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eae:	db10      	blt.n	8003ed2 <RGB_Rainbow+0x106>
 8003eb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003eb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec0:	d507      	bpl.n	8003ed2 <RGB_Rainbow+0x106>
			red = chroma;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	633b      	str	r3, [r7, #48]	; 0x30
			green = x;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
			blue = 0.0f;
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed0:	e06e      	b.n	8003fb0 <RGB_Rainbow+0x1e4>
		} else if (huePrime >= 1.0f && huePrime < 2.0f) {
 8003ed2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ed6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee2:	db10      	blt.n	8003f06 <RGB_Rainbow+0x13a>
 8003ee4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ee8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef4:	d507      	bpl.n	8003f06 <RGB_Rainbow+0x13a>
			red = x;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	633b      	str	r3, [r7, #48]	; 0x30
			green = chroma;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
			blue = 0.0f;
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f04:	e054      	b.n	8003fb0 <RGB_Rainbow+0x1e4>
		} else if (huePrime >= 2.0f && huePrime < 3.0f) {
 8003f06:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f0a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f16:	db10      	blt.n	8003f3a <RGB_Rainbow+0x16e>
 8003f18:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f1c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003f20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f28:	d507      	bpl.n	8003f3a <RGB_Rainbow+0x16e>
			red = 0.0f;
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	633b      	str	r3, [r7, #48]	; 0x30
			green = chroma;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	62fb      	str	r3, [r7, #44]	; 0x2c
			blue = x;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f38:	e03a      	b.n	8003fb0 <RGB_Rainbow+0x1e4>
		} else if (huePrime >= 3.0f && huePrime < 4.0f) {
 8003f3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f3e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4a:	db10      	blt.n	8003f6e <RGB_Rainbow+0x1a2>
 8003f4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f50:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5c:	d507      	bpl.n	8003f6e <RGB_Rainbow+0x1a2>
			red = 0.0f;
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	633b      	str	r3, [r7, #48]	; 0x30
			green = x;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c
			blue = chroma;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f6c:	e020      	b.n	8003fb0 <RGB_Rainbow+0x1e4>
		} else if (huePrime >= 4.0f && huePrime < 5.0f) {
 8003f6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f72:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f7e:	db10      	blt.n	8003fa2 <RGB_Rainbow+0x1d6>
 8003f80:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f84:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f90:	d507      	bpl.n	8003fa2 <RGB_Rainbow+0x1d6>
			red = x;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	633b      	str	r3, [r7, #48]	; 0x30
			green = 0.0f;
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			blue = chroma;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa0:	e006      	b.n	8003fb0 <RGB_Rainbow+0x1e4>
		} else {
			red = chroma;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	633b      	str	r3, [r7, #48]	; 0x30
			green = 0.0f;
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	62fb      	str	r3, [r7, #44]	; 0x2c
			blue = x;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		// Scale RGB values to 0-255 range
		uint8_t r = (uint8_t) (red * 255);
 8003fb0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003fb4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800402c <RGB_Rainbow+0x260>
 8003fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fc0:	edc7 7a01 	vstr	s15, [r7, #4]
 8003fc4:	793b      	ldrb	r3, [r7, #4]
 8003fc6:	72fb      	strb	r3, [r7, #11]
		uint8_t g = (uint8_t) (green * 255);
 8003fc8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003fcc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800402c <RGB_Rainbow+0x260>
 8003fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd8:	edc7 7a01 	vstr	s15, [r7, #4]
 8003fdc:	793b      	ldrb	r3, [r7, #4]
 8003fde:	72bb      	strb	r3, [r7, #10]
		uint8_t b = (uint8_t) (blue * 255);
 8003fe0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003fe4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800402c <RGB_Rainbow+0x260>
 8003fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ff0:	edc7 7a01 	vstr	s15, [r7, #4]
 8003ff4:	793b      	ldrb	r3, [r7, #4]
 8003ff6:	727b      	strb	r3, [r7, #9]

		// Set LED color
		Set_LED(i, r, g, b);
 8003ff8:	7af9      	ldrb	r1, [r7, #11]
 8003ffa:	7aba      	ldrb	r2, [r7, #10]
 8003ffc:	7a7b      	ldrb	r3, [r7, #9]
 8003ffe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004000:	f7ff fd78 	bl	8003af4 <Set_LED>
	for (int i = 0; i < MAX_LED; i++) {
 8004004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004006:	3301      	adds	r3, #1
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
 800400a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400c:	2b3b      	cmp	r3, #59	; 0x3b
 800400e:	f77f af10 	ble.w	8003e32 <RGB_Rainbow+0x66>
	}
}
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	3738      	adds	r7, #56	; 0x38
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20001934 	.word	0x20001934
 8004020:	080116c0 	.word	0x080116c0
 8004024:	43b40000 	.word	0x43b40000
 8004028:	42700000 	.word	0x42700000
 800402c:	437f0000 	.word	0x437f0000

08004030 <RGB_Bootup>:

void RGB_Bootup(void) {
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
	for (int i = 0; i < 60; i++) {
 8004036:	2300      	movs	r3, #0
 8004038:	607b      	str	r3, [r7, #4]
 800403a:	e010      	b.n	800405e <RGB_Bootup+0x2e>
		Set_LED(i, 255, 0, 0);
 800403c:	2300      	movs	r3, #0
 800403e:	2200      	movs	r2, #0
 8004040:	21ff      	movs	r1, #255	; 0xff
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff fd56 	bl	8003af4 <Set_LED>
		HAL_Delay(10);
 8004048:	200a      	movs	r0, #10
 800404a:	f001 fae7 	bl	800561c <HAL_Delay>
		Set_Brightness(45);
 800404e:	202d      	movs	r0, #45	; 0x2d
 8004050:	f7ff fd7e 	bl	8003b50 <Set_Brightness>
		WS2812_Send();
 8004054:	f7ff fdfe 	bl	8003c54 <WS2812_Send>
	for (int i = 0; i < 60; i++) {
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3301      	adds	r3, #1
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b3b      	cmp	r3, #59	; 0x3b
 8004062:	ddeb      	ble.n	800403c <RGB_Bootup+0xc>
	}
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	MBvariables.x_target_acceleration_time = 1;
 8004074:	4b25      	ldr	r3, [pc, #148]	; (800410c <main+0x9c>)
 8004076:	2201      	movs	r2, #1
 8004078:	845a      	strh	r2, [r3, #34]	; 0x22
	MBvariables.x_target_speed = 1000;
 800407a:	4b24      	ldr	r3, [pc, #144]	; (800410c <main+0x9c>)
 800407c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004080:	841a      	strh	r2, [r3, #32]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004082:	f001 fa59 	bl	8005538 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004086:	f000 f84d 	bl	8004124 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800408a:	f7fd ff45 	bl	8001f18 <MX_GPIO_Init>
	MX_DMA_Init();
 800408e:	f7fd ff1b 	bl	8001ec8 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8004092:	f001 f93d 	bl	8005310 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8004096:	f7fd ffe1 	bl	800205c <MX_I2C1_Init>
	MX_TIM1_Init();
 800409a:	f000 fa61 	bl	8004560 <MX_TIM1_Init>
	MX_TIM2_Init();
 800409e:	f000 faff 	bl	80046a0 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 80040a2:	f001 f90b 	bl	80052bc <MX_USART1_UART_Init>
	MX_ADC1_Init();
 80040a6:	f7fd fe79 	bl	8001d9c <MX_ADC1_Init>
	MX_TIM9_Init();
 80040aa:	f000 fbc3 	bl	8004834 <MX_TIM9_Init>
	MX_TIM11_Init();
 80040ae:	f000 fbfb 	bl	80048a8 <MX_TIM11_Init>
	MX_TIM3_Init();
 80040b2:	f000 fb49 	bl	8004748 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	// start timer 1 in PWM for motor
	HAL_TIM_Base_Start(&htim1);
 80040b6:	4816      	ldr	r0, [pc, #88]	; (8004110 <main+0xa0>)
 80040b8:	f003 fd74 	bl	8007ba4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80040bc:	2100      	movs	r1, #0
 80040be:	4814      	ldr	r0, [pc, #80]	; (8004110 <main+0xa0>)
 80040c0:	f003 fef8 	bl	8007eb4 <HAL_TIM_PWM_Start>

	// Start timer in encoder mode
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80040c4:	2104      	movs	r1, #4
 80040c6:	4813      	ldr	r0, [pc, #76]	; (8004114 <main+0xa4>)
 80040c8:	f004 fb9c 	bl	8008804 <HAL_TIM_Encoder_Start>

	// Timer 9 Timer Interrupt (1000Hz)
	HAL_TIM_Base_Start_IT(&htim9);
 80040cc:	4812      	ldr	r0, [pc, #72]	; (8004118 <main+0xa8>)
 80040ce:	f003 fdc3 	bl	8007c58 <HAL_TIM_Base_Start_IT>

	// Initialize modbus
	modbus_init();
 80040d2:	f7fe fd4d 	bl	8002b70 <modbus_init>

	// Initialize UART1
	UARTInterruptConfig();
 80040d6:	f7fd f9bf 	bl	8001458 <UARTInterruptConfig>

	RGB_Bootup();
 80040da:	f7ff ffa9 	bl	8004030 <RGB_Bootup>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Modbus_Protocal_Worker();
 80040de:	f7fd fb53 	bl	8001788 <Modbus_Protocal_Worker>
		modbus_heartbeat_handler(&MBvariables);
 80040e2:	480a      	ldr	r0, [pc, #40]	; (800410c <main+0x9c>)
 80040e4:	f7fe fd60 	bl	8002ba8 <modbus_heartbeat_handler>
		modbus_data_sync(&MBvariables);
 80040e8:	4808      	ldr	r0, [pc, #32]	; (800410c <main+0x9c>)
 80040ea:	f7fe fd9f 	bl	8002c2c <modbus_data_sync>
		QEIReadHome = getLocalPosition();
 80040ee:	f7fe f88b 	bl	8002208 <getLocalPosition>
 80040f2:	4603      	mov	r3, r0
 80040f4:	4a09      	ldr	r2, [pc, #36]	; (800411c <main+0xac>)
 80040f6:	6013      	str	r3, [r2, #0]
		QEIReadRaw = getRawPosition();
 80040f8:	f7fe f898 	bl	800222c <getRawPosition>
 80040fc:	4603      	mov	r3, r0
 80040fe:	4a08      	ldr	r2, [pc, #32]	; (8004120 <main+0xb0>)
 8004100:	6013      	str	r3, [r2, #0]
		main_logic(&MBvariables);
 8004102:	4802      	ldr	r0, [pc, #8]	; (800410c <main+0x9c>)
 8004104:	f7fe feac 	bl	8002e60 <main_logic>
		Modbus_Protocal_Worker();
 8004108:	e7e9      	b.n	80040de <main+0x6e>
 800410a:	bf00      	nop
 800410c:	200018d4 	.word	0x200018d4
 8004110:	2000193c 	.word	0x2000193c
 8004114:	200019f0 	.word	0x200019f0
 8004118:	20001b58 	.word	0x20001b58
 800411c:	200018c0 	.word	0x200018c0
 8004120:	200018bc 	.word	0x200018bc

08004124 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004124:	b580      	push	{r7, lr}
 8004126:	b094      	sub	sp, #80	; 0x50
 8004128:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800412a:	f107 0320 	add.w	r3, r7, #32
 800412e:	2230      	movs	r2, #48	; 0x30
 8004130:	2100      	movs	r1, #0
 8004132:	4618      	mov	r0, r3
 8004134:	f007 f83e 	bl	800b1b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004138:	f107 030c 	add.w	r3, r7, #12
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004148:	2300      	movs	r3, #0
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	4b27      	ldr	r3, [pc, #156]	; (80041ec <SystemClock_Config+0xc8>)
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	4a26      	ldr	r2, [pc, #152]	; (80041ec <SystemClock_Config+0xc8>)
 8004152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004156:	6413      	str	r3, [r2, #64]	; 0x40
 8004158:	4b24      	ldr	r3, [pc, #144]	; (80041ec <SystemClock_Config+0xc8>)
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004164:	2300      	movs	r3, #0
 8004166:	607b      	str	r3, [r7, #4]
 8004168:	4b21      	ldr	r3, [pc, #132]	; (80041f0 <SystemClock_Config+0xcc>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a20      	ldr	r2, [pc, #128]	; (80041f0 <SystemClock_Config+0xcc>)
 800416e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b1e      	ldr	r3, [pc, #120]	; (80041f0 <SystemClock_Config+0xcc>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004180:	2302      	movs	r3, #2
 8004182:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004184:	2301      	movs	r3, #1
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004188:	2310      	movs	r3, #16
 800418a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800418c:	2302      	movs	r3, #2
 800418e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004190:	2300      	movs	r3, #0
 8004192:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004194:	2308      	movs	r3, #8
 8004196:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8004198:	2364      	movs	r3, #100	; 0x64
 800419a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800419c:	2302      	movs	r3, #2
 800419e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80041a0:	2304      	movs	r3, #4
 80041a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80041a4:	f107 0320 	add.w	r3, r7, #32
 80041a8:	4618      	mov	r0, r3
 80041aa:	f003 f807 	bl	80071bc <HAL_RCC_OscConfig>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <SystemClock_Config+0x94>
		Error_Handler();
 80041b4:	f000 f858 	bl	8004268 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041b8:	230f      	movs	r3, #15
 80041ba:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041bc:	2302      	movs	r3, #2
 80041be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80041c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041c8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80041ce:	f107 030c 	add.w	r3, r7, #12
 80041d2:	2103      	movs	r1, #3
 80041d4:	4618      	mov	r0, r3
 80041d6:	f003 fa69 	bl	80076ac <HAL_RCC_ClockConfig>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <SystemClock_Config+0xc0>
		Error_Handler();
 80041e0:	f000 f842 	bl	8004268 <Error_Handler>
	}
}
 80041e4:	bf00      	nop
 80041e6:	3750      	adds	r7, #80	; 0x50
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40007000 	.word	0x40007000

080041f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	if (htim == &htim9) {
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a04      	ldr	r2, [pc, #16]	; (8004210 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d101      	bne.n	8004208 <HAL_TIM_PeriodElapsedCallback+0x14>
		interrupt_logic();
 8004204:	f7ff f83a 	bl	800327c <interrupt_logic>
	}
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20001b58 	.word	0x20001b58

08004214 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a05      	ldr	r2, [pc, #20]	; (8004234 <HAL_UART_RxCpltCallback+0x20>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d102      	bne.n	800422a <HAL_UART_RxCpltCallback+0x16>
		Joystick_Received((int*) &receivedByte);
 8004224:	4804      	ldr	r0, [pc, #16]	; (8004238 <HAL_UART_RxCpltCallback+0x24>)
 8004226:	f7fd f925 	bl	8001474 <Joystick_Received>
	}
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20001d64 	.word	0x20001d64
 8004238:	20001900 	.word	0x20001900

0800423c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8004246:	88fb      	ldrh	r3, [r7, #6]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d106      	bne.n	800425a <HAL_GPIO_EXTI_Callback+0x1e>
		home_handler();
 800424c:	f7ff f8b4 	bl	80033b8 <home_handler>
		interrupt_count++;
 8004250:	4b04      	ldr	r3, [pc, #16]	; (8004264 <HAL_GPIO_EXTI_Callback+0x28>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3301      	adds	r3, #1
 8004256:	4a03      	ldr	r2, [pc, #12]	; (8004264 <HAL_GPIO_EXTI_Callback+0x28>)
 8004258:	6013      	str	r3, [r2, #0]
	}
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20001910 	.word	0x20001910

08004268 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800426c:	b672      	cpsid	i
}
 800426e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004270:	e7fe      	b.n	8004270 <Error_Handler+0x8>
	...

08004274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <HAL_MspInit+0x4c>)
 8004280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004282:	4a0f      	ldr	r2, [pc, #60]	; (80042c0 <HAL_MspInit+0x4c>)
 8004284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004288:	6453      	str	r3, [r2, #68]	; 0x44
 800428a:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <HAL_MspInit+0x4c>)
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <HAL_MspInit+0x4c>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <HAL_MspInit+0x4c>)
 80042a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a4:	6413      	str	r3, [r2, #64]	; 0x40
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <HAL_MspInit+0x4c>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80042b2:	2007      	movs	r0, #7
 80042b4:	f001 fd18 	bl	8005ce8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40023800 	.word	0x40023800

080042c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042c8:	e7fe      	b.n	80042c8 <NMI_Handler+0x4>

080042ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ca:	b480      	push	{r7}
 80042cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042ce:	e7fe      	b.n	80042ce <HardFault_Handler+0x4>

080042d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042d4:	e7fe      	b.n	80042d4 <MemManage_Handler+0x4>

080042d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042d6:	b480      	push	{r7}
 80042d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042da:	e7fe      	b.n	80042da <BusFault_Handler+0x4>

080042dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042e0:	e7fe      	b.n	80042e0 <UsageFault_Handler+0x4>

080042e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042e2:	b480      	push	{r7}
 80042e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042e6:	bf00      	nop
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042fe:	b480      	push	{r7}
 8004300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004310:	f001 f964 	bl	80055dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004314:	bf00      	nop
 8004316:	bd80      	pop	{r7, pc}

08004318 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800431c:	2008      	movs	r0, #8
 800431e:	f002 fae9 	bl	80068f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800432c:	4802      	ldr	r0, [pc, #8]	; (8004338 <DMA1_Stream4_IRQHandler+0x10>)
 800432e:	f001 feb5 	bl	800609c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004332:	bf00      	nop
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20001cc0 	.word	0x20001cc0

0800433c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004340:	4802      	ldr	r0, [pc, #8]	; (800434c <DMA1_Stream6_IRQHandler+0x10>)
 8004342:	f001 feab 	bl	800609c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004346:	bf00      	nop
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20001e4c 	.word	0x20001e4c

08004350 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004354:	4803      	ldr	r0, [pc, #12]	; (8004364 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004356:	f004 fae3 	bl	8008920 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800435a:	4803      	ldr	r0, [pc, #12]	; (8004368 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800435c:	f004 fae0 	bl	8008920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004360:	bf00      	nop
 8004362:	bd80      	pop	{r7, pc}
 8004364:	2000193c 	.word	0x2000193c
 8004368:	20001b58 	.word	0x20001b58

0800436c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004370:	4803      	ldr	r0, [pc, #12]	; (8004380 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004372:	f004 fad5 	bl	8008920 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004376:	4803      	ldr	r0, [pc, #12]	; (8004384 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004378:	f004 fad2 	bl	8008920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800437c:	bf00      	nop
 800437e:	bd80      	pop	{r7, pc}
 8004380:	2000193c 	.word	0x2000193c
 8004384:	20001c0c 	.word	0x20001c0c

08004388 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800438c:	4802      	ldr	r0, [pc, #8]	; (8004398 <USART1_IRQHandler+0x10>)
 800438e:	f005 fe9d 	bl	800a0cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004392:	bf00      	nop
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20001d64 	.word	0x20001d64

0800439c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80043a0:	4802      	ldr	r0, [pc, #8]	; (80043ac <USART2_IRQHandler+0x10>)
 80043a2:	f005 fe93 	bl	800a0cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20001dd8 	.word	0x20001dd8

080043b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return 1;
 80043b4:	2301      	movs	r3, #1
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <_kill>:

int _kill(int pid, int sig)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80043ca:	f006 febb 	bl	800b144 <__errno>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2216      	movs	r2, #22
 80043d2:	601a      	str	r2, [r3, #0]
  return -1;
 80043d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <_exit>:

void _exit (int status)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043e8:	f04f 31ff 	mov.w	r1, #4294967295
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff ffe7 	bl	80043c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80043f2:	e7fe      	b.n	80043f2 <_exit+0x12>

080043f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	e00a      	b.n	800441c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004406:	f3af 8000 	nop.w
 800440a:	4601      	mov	r1, r0
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	60ba      	str	r2, [r7, #8]
 8004412:	b2ca      	uxtb	r2, r1
 8004414:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	3301      	adds	r3, #1
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	429a      	cmp	r2, r3
 8004422:	dbf0      	blt.n	8004406 <_read+0x12>
  }

  return len;
 8004424:	687b      	ldr	r3, [r7, #4]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b086      	sub	sp, #24
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	e009      	b.n	8004454 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	60ba      	str	r2, [r7, #8]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	3301      	adds	r3, #1
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	429a      	cmp	r2, r3
 800445a:	dbf1      	blt.n	8004440 <_write+0x12>
  }
  return len;
 800445c:	687b      	ldr	r3, [r7, #4]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <_close>:

int _close(int file)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800446e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004472:	4618      	mov	r0, r3
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800448e:	605a      	str	r2, [r3, #4]
  return 0;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <_isatty>:

int _isatty(int file)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044a6:	2301      	movs	r3, #1
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044d8:	4a14      	ldr	r2, [pc, #80]	; (800452c <_sbrk+0x5c>)
 80044da:	4b15      	ldr	r3, [pc, #84]	; (8004530 <_sbrk+0x60>)
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044e4:	4b13      	ldr	r3, [pc, #76]	; (8004534 <_sbrk+0x64>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d102      	bne.n	80044f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044ec:	4b11      	ldr	r3, [pc, #68]	; (8004534 <_sbrk+0x64>)
 80044ee:	4a12      	ldr	r2, [pc, #72]	; (8004538 <_sbrk+0x68>)
 80044f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044f2:	4b10      	ldr	r3, [pc, #64]	; (8004534 <_sbrk+0x64>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4413      	add	r3, r2
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d207      	bcs.n	8004510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004500:	f006 fe20 	bl	800b144 <__errno>
 8004504:	4603      	mov	r3, r0
 8004506:	220c      	movs	r2, #12
 8004508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800450a:	f04f 33ff 	mov.w	r3, #4294967295
 800450e:	e009      	b.n	8004524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004510:	4b08      	ldr	r3, [pc, #32]	; (8004534 <_sbrk+0x64>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004516:	4b07      	ldr	r3, [pc, #28]	; (8004534 <_sbrk+0x64>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4413      	add	r3, r2
 800451e:	4a05      	ldr	r2, [pc, #20]	; (8004534 <_sbrk+0x64>)
 8004520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004522:	68fb      	ldr	r3, [r7, #12]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20020000 	.word	0x20020000
 8004530:	00000400 	.word	0x00000400
 8004534:	20001938 	.word	0x20001938
 8004538:	20001ec0 	.word	0x20001ec0

0800453c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <SystemInit+0x20>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004546:	4a05      	ldr	r2, [pc, #20]	; (800455c <SystemInit+0x20>)
 8004548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800454c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	e000ed00 	.word	0xe000ed00

08004560 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b096      	sub	sp, #88	; 0x58
 8004564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004566:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	605a      	str	r2, [r3, #4]
 8004570:	609a      	str	r2, [r3, #8]
 8004572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004574:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800457e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	605a      	str	r2, [r3, #4]
 8004588:	609a      	str	r2, [r3, #8]
 800458a:	60da      	str	r2, [r3, #12]
 800458c:	611a      	str	r2, [r3, #16]
 800458e:	615a      	str	r2, [r3, #20]
 8004590:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004592:	1d3b      	adds	r3, r7, #4
 8004594:	2220      	movs	r2, #32
 8004596:	2100      	movs	r1, #0
 8004598:	4618      	mov	r0, r3
 800459a:	f006 fe0b 	bl	800b1b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800459e:	4b3e      	ldr	r3, [pc, #248]	; (8004698 <MX_TIM1_Init+0x138>)
 80045a0:	4a3e      	ldr	r2, [pc, #248]	; (800469c <MX_TIM1_Init+0x13c>)
 80045a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 80045a4:	4b3c      	ldr	r3, [pc, #240]	; (8004698 <MX_TIM1_Init+0x138>)
 80045a6:	2204      	movs	r2, #4
 80045a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045aa:	4b3b      	ldr	r3, [pc, #236]	; (8004698 <MX_TIM1_Init+0x138>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25000-1;
 80045b0:	4b39      	ldr	r3, [pc, #228]	; (8004698 <MX_TIM1_Init+0x138>)
 80045b2:	f246 12a7 	movw	r2, #24999	; 0x61a7
 80045b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045b8:	4b37      	ldr	r3, [pc, #220]	; (8004698 <MX_TIM1_Init+0x138>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80045be:	4b36      	ldr	r3, [pc, #216]	; (8004698 <MX_TIM1_Init+0x138>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045c4:	4b34      	ldr	r3, [pc, #208]	; (8004698 <MX_TIM1_Init+0x138>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80045ca:	4833      	ldr	r0, [pc, #204]	; (8004698 <MX_TIM1_Init+0x138>)
 80045cc:	f003 fa8e 	bl	8007aec <HAL_TIM_Base_Init>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80045d6:	f7ff fe47 	bl	8004268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80045e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045e4:	4619      	mov	r1, r3
 80045e6:	482c      	ldr	r0, [pc, #176]	; (8004698 <MX_TIM1_Init+0x138>)
 80045e8:	f004 fbe0 	bl	8008dac <HAL_TIM_ConfigClockSource>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80045f2:	f7ff fe39 	bl	8004268 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80045f6:	4828      	ldr	r0, [pc, #160]	; (8004698 <MX_TIM1_Init+0x138>)
 80045f8:	f003 fbf6 	bl	8007de8 <HAL_TIM_PWM_Init>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004602:	f7ff fe31 	bl	8004268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004606:	2300      	movs	r3, #0
 8004608:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800460a:	2300      	movs	r3, #0
 800460c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800460e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004612:	4619      	mov	r1, r3
 8004614:	4820      	ldr	r0, [pc, #128]	; (8004698 <MX_TIM1_Init+0x138>)
 8004616:	f005 fa27 	bl	8009a68 <HAL_TIMEx_MasterConfigSynchronization>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004620:	f7ff fe22 	bl	8004268 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004624:	2360      	movs	r3, #96	; 0x60
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800462c:	2300      	movs	r3, #0
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004630:	2300      	movs	r3, #0
 8004632:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004634:	2300      	movs	r3, #0
 8004636:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004638:	2300      	movs	r3, #0
 800463a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800463c:	2300      	movs	r3, #0
 800463e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004644:	2200      	movs	r2, #0
 8004646:	4619      	mov	r1, r3
 8004648:	4813      	ldr	r0, [pc, #76]	; (8004698 <MX_TIM1_Init+0x138>)
 800464a:	f004 faed 	bl	8008c28 <HAL_TIM_PWM_ConfigChannel>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004654:	f7ff fe08 	bl	8004268 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004658:	2300      	movs	r3, #0
 800465a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800465c:	2300      	movs	r3, #0
 800465e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800466c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004670:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004672:	2300      	movs	r3, #0
 8004674:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004676:	1d3b      	adds	r3, r7, #4
 8004678:	4619      	mov	r1, r3
 800467a:	4807      	ldr	r0, [pc, #28]	; (8004698 <MX_TIM1_Init+0x138>)
 800467c:	f005 fa62 	bl	8009b44 <HAL_TIMEx_ConfigBreakDeadTime>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8004686:	f7ff fdef 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800468a:	4803      	ldr	r0, [pc, #12]	; (8004698 <MX_TIM1_Init+0x138>)
 800468c:	f000 fa62 	bl	8004b54 <HAL_TIM_MspPostInit>

}
 8004690:	bf00      	nop
 8004692:	3758      	adds	r7, #88	; 0x58
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	2000193c 	.word	0x2000193c
 800469c:	40010000 	.word	0x40010000

080046a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08c      	sub	sp, #48	; 0x30
 80046a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80046a6:	f107 030c 	add.w	r3, r7, #12
 80046aa:	2224      	movs	r2, #36	; 0x24
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f006 fd80 	bl	800b1b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046b4:	1d3b      	adds	r3, r7, #4
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80046bc:	4b21      	ldr	r3, [pc, #132]	; (8004744 <MX_TIM2_Init+0xa4>)
 80046be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80046c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80046c4:	4b1f      	ldr	r3, [pc, #124]	; (8004744 <MX_TIM2_Init+0xa4>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046ca:	4b1e      	ldr	r3, [pc, #120]	; (8004744 <MX_TIM2_Init+0xa4>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80046d0:	4b1c      	ldr	r3, [pc, #112]	; (8004744 <MX_TIM2_Init+0xa4>)
 80046d2:	f04f 32ff 	mov.w	r2, #4294967295
 80046d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046d8:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <MX_TIM2_Init+0xa4>)
 80046da:	2200      	movs	r2, #0
 80046dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046de:	4b19      	ldr	r3, [pc, #100]	; (8004744 <MX_TIM2_Init+0xa4>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80046e4:	2303      	movs	r3, #3
 80046e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80046e8:	2300      	movs	r3, #0
 80046ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80046ec:	2301      	movs	r3, #1
 80046ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80046f8:	2300      	movs	r3, #0
 80046fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80046fc:	2301      	movs	r3, #1
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004700:	2300      	movs	r3, #0
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004708:	f107 030c 	add.w	r3, r7, #12
 800470c:	4619      	mov	r1, r3
 800470e:	480d      	ldr	r0, [pc, #52]	; (8004744 <MX_TIM2_Init+0xa4>)
 8004710:	f003 ffc4 	bl	800869c <HAL_TIM_Encoder_Init>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800471a:	f7ff fda5 	bl	8004268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800471e:	2300      	movs	r3, #0
 8004720:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004722:	2300      	movs	r3, #0
 8004724:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004726:	1d3b      	adds	r3, r7, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4806      	ldr	r0, [pc, #24]	; (8004744 <MX_TIM2_Init+0xa4>)
 800472c:	f005 f99c 	bl	8009a68 <HAL_TIMEx_MasterConfigSynchronization>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004736:	f7ff fd97 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800473a:	bf00      	nop
 800473c:	3730      	adds	r7, #48	; 0x30
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	200019f0 	.word	0x200019f0

08004748 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08e      	sub	sp, #56	; 0x38
 800474c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800474e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	609a      	str	r2, [r3, #8]
 800475a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800475c:	f107 0320 	add.w	r3, r7, #32
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004766:	1d3b      	adds	r3, r7, #4
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	605a      	str	r2, [r3, #4]
 800476e:	609a      	str	r2, [r3, #8]
 8004770:	60da      	str	r2, [r3, #12]
 8004772:	611a      	str	r2, [r3, #16]
 8004774:	615a      	str	r2, [r3, #20]
 8004776:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004778:	4b2c      	ldr	r3, [pc, #176]	; (800482c <MX_TIM3_Init+0xe4>)
 800477a:	4a2d      	ldr	r2, [pc, #180]	; (8004830 <MX_TIM3_Init+0xe8>)
 800477c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800477e:	4b2b      	ldr	r3, [pc, #172]	; (800482c <MX_TIM3_Init+0xe4>)
 8004780:	2200      	movs	r2, #0
 8004782:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004784:	4b29      	ldr	r3, [pc, #164]	; (800482c <MX_TIM3_Init+0xe4>)
 8004786:	2200      	movs	r2, #0
 8004788:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 125-1;
 800478a:	4b28      	ldr	r3, [pc, #160]	; (800482c <MX_TIM3_Init+0xe4>)
 800478c:	227c      	movs	r2, #124	; 0x7c
 800478e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004790:	4b26      	ldr	r3, [pc, #152]	; (800482c <MX_TIM3_Init+0xe4>)
 8004792:	2200      	movs	r2, #0
 8004794:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004796:	4b25      	ldr	r3, [pc, #148]	; (800482c <MX_TIM3_Init+0xe4>)
 8004798:	2200      	movs	r2, #0
 800479a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800479c:	4823      	ldr	r0, [pc, #140]	; (800482c <MX_TIM3_Init+0xe4>)
 800479e:	f003 f9a5 	bl	8007aec <HAL_TIM_Base_Init>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80047a8:	f7ff fd5e 	bl	8004268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80047b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047b6:	4619      	mov	r1, r3
 80047b8:	481c      	ldr	r0, [pc, #112]	; (800482c <MX_TIM3_Init+0xe4>)
 80047ba:	f004 faf7 	bl	8008dac <HAL_TIM_ConfigClockSource>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80047c4:	f7ff fd50 	bl	8004268 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80047c8:	4818      	ldr	r0, [pc, #96]	; (800482c <MX_TIM3_Init+0xe4>)
 80047ca:	f003 fb0d 	bl	8007de8 <HAL_TIM_PWM_Init>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80047d4:	f7ff fd48 	bl	8004268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047d8:	2300      	movs	r3, #0
 80047da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047dc:	2300      	movs	r3, #0
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80047e0:	f107 0320 	add.w	r3, r7, #32
 80047e4:	4619      	mov	r1, r3
 80047e6:	4811      	ldr	r0, [pc, #68]	; (800482c <MX_TIM3_Init+0xe4>)
 80047e8:	f005 f93e 	bl	8009a68 <HAL_TIMEx_MasterConfigSynchronization>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80047f2:	f7ff fd39 	bl	8004268 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047f6:	2360      	movs	r3, #96	; 0x60
 80047f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004802:	2300      	movs	r3, #0
 8004804:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004806:	1d3b      	adds	r3, r7, #4
 8004808:	2200      	movs	r2, #0
 800480a:	4619      	mov	r1, r3
 800480c:	4807      	ldr	r0, [pc, #28]	; (800482c <MX_TIM3_Init+0xe4>)
 800480e:	f004 fa0b 	bl	8008c28 <HAL_TIM_PWM_ConfigChannel>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8004818:	f7ff fd26 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800481c:	4803      	ldr	r0, [pc, #12]	; (800482c <MX_TIM3_Init+0xe4>)
 800481e:	f000 f999 	bl	8004b54 <HAL_TIM_MspPostInit>

}
 8004822:	bf00      	nop
 8004824:	3738      	adds	r7, #56	; 0x38
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20001aa4 	.word	0x20001aa4
 8004830:	40000400 	.word	0x40000400

08004834 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800483a:	463b      	mov	r3, r7
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	609a      	str	r2, [r3, #8]
 8004844:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8004846:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <MX_TIM9_Init+0x6c>)
 8004848:	4a16      	ldr	r2, [pc, #88]	; (80048a4 <MX_TIM9_Init+0x70>)
 800484a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10-1;
 800484c:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <MX_TIM9_Init+0x6c>)
 800484e:	2209      	movs	r2, #9
 8004850:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004852:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <MX_TIM9_Init+0x6c>)
 8004854:	2200      	movs	r2, #0
 8004856:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8004858:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <MX_TIM9_Init+0x6c>)
 800485a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800485e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <MX_TIM9_Init+0x6c>)
 8004862:	2200      	movs	r2, #0
 8004864:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004866:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <MX_TIM9_Init+0x6c>)
 8004868:	2200      	movs	r2, #0
 800486a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800486c:	480c      	ldr	r0, [pc, #48]	; (80048a0 <MX_TIM9_Init+0x6c>)
 800486e:	f003 f93d 	bl	8007aec <HAL_TIM_Base_Init>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8004878:	f7ff fcf6 	bl	8004268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800487c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004880:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8004882:	463b      	mov	r3, r7
 8004884:	4619      	mov	r1, r3
 8004886:	4806      	ldr	r0, [pc, #24]	; (80048a0 <MX_TIM9_Init+0x6c>)
 8004888:	f004 fa90 	bl	8008dac <HAL_TIM_ConfigClockSource>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8004892:	f7ff fce9 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8004896:	bf00      	nop
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20001b58 	.word	0x20001b58
 80048a4:	40014000 	.word	0x40014000

080048a8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80048ae:	1d3b      	adds	r3, r7, #4
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	605a      	str	r2, [r3, #4]
 80048b6:	609a      	str	r2, [r3, #8]
 80048b8:	60da      	str	r2, [r3, #12]
 80048ba:	611a      	str	r2, [r3, #16]
 80048bc:	615a      	str	r2, [r3, #20]
 80048be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80048c0:	4b21      	ldr	r3, [pc, #132]	; (8004948 <MX_TIM11_Init+0xa0>)
 80048c2:	4a22      	ldr	r2, [pc, #136]	; (800494c <MX_TIM11_Init+0xa4>)
 80048c4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80048c6:	4b20      	ldr	r3, [pc, #128]	; (8004948 <MX_TIM11_Init+0xa0>)
 80048c8:	2263      	movs	r2, #99	; 0x63
 80048ca:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048cc:	4b1e      	ldr	r3, [pc, #120]	; (8004948 <MX_TIM11_Init+0xa0>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 80048d2:	4b1d      	ldr	r3, [pc, #116]	; (8004948 <MX_TIM11_Init+0xa0>)
 80048d4:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80048d8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048da:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <MX_TIM11_Init+0xa0>)
 80048dc:	2200      	movs	r2, #0
 80048de:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048e0:	4b19      	ldr	r3, [pc, #100]	; (8004948 <MX_TIM11_Init+0xa0>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80048e6:	4818      	ldr	r0, [pc, #96]	; (8004948 <MX_TIM11_Init+0xa0>)
 80048e8:	f003 f900 	bl	8007aec <HAL_TIM_Base_Init>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80048f2:	f7ff fcb9 	bl	8004268 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80048f6:	4814      	ldr	r0, [pc, #80]	; (8004948 <MX_TIM11_Init+0xa0>)
 80048f8:	f003 fa10 	bl	8007d1c <HAL_TIM_OC_Init>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8004902:	f7ff fcb1 	bl	8004268 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8004906:	2108      	movs	r1, #8
 8004908:	480f      	ldr	r0, [pc, #60]	; (8004948 <MX_TIM11_Init+0xa0>)
 800490a:	f003 fdf9 	bl	8008500 <HAL_TIM_OnePulse_Init>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8004914:	f7ff fca8 	bl	8004268 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8004918:	2310      	movs	r3, #16
 800491a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 800491c:	f240 5399 	movw	r3, #1433	; 0x599
 8004920:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800492a:	1d3b      	adds	r3, r7, #4
 800492c:	2200      	movs	r2, #0
 800492e:	4619      	mov	r1, r3
 8004930:	4805      	ldr	r0, [pc, #20]	; (8004948 <MX_TIM11_Init+0xa0>)
 8004932:	f004 f91d 	bl	8008b70 <HAL_TIM_OC_ConfigChannel>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 800493c:	f7ff fc94 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004940:	bf00      	nop
 8004942:	3720      	adds	r7, #32
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20001c0c 	.word	0x20001c0c
 800494c:	40014800 	.word	0x40014800

08004950 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a53      	ldr	r2, [pc, #332]	; (8004aac <HAL_TIM_Base_MspInit+0x15c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d11e      	bne.n	80049a0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004962:	2300      	movs	r3, #0
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	4b52      	ldr	r3, [pc, #328]	; (8004ab0 <HAL_TIM_Base_MspInit+0x160>)
 8004968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496a:	4a51      	ldr	r2, [pc, #324]	; (8004ab0 <HAL_TIM_Base_MspInit+0x160>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	6453      	str	r3, [r2, #68]	; 0x44
 8004972:	4b4f      	ldr	r3, [pc, #316]	; (8004ab0 <HAL_TIM_Base_MspInit+0x160>)
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800497e:	2200      	movs	r2, #0
 8004980:	2100      	movs	r1, #0
 8004982:	2018      	movs	r0, #24
 8004984:	f001 f9bb 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004988:	2018      	movs	r0, #24
 800498a:	f001 f9d4 	bl	8005d36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800498e:	2200      	movs	r2, #0
 8004990:	2100      	movs	r1, #0
 8004992:	201a      	movs	r0, #26
 8004994:	f001 f9b3 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004998:	201a      	movs	r0, #26
 800499a:	f001 f9cc 	bl	8005d36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800499e:	e080      	b.n	8004aa2 <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM3)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a43      	ldr	r2, [pc, #268]	; (8004ab4 <HAL_TIM_Base_MspInit+0x164>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d144      	bne.n	8004a34 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	4b40      	ldr	r3, [pc, #256]	; (8004ab0 <HAL_TIM_Base_MspInit+0x160>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	4a3f      	ldr	r2, [pc, #252]	; (8004ab0 <HAL_TIM_Base_MspInit+0x160>)
 80049b4:	f043 0302 	orr.w	r3, r3, #2
 80049b8:	6413      	str	r3, [r2, #64]	; 0x40
 80049ba:	4b3d      	ldr	r3, [pc, #244]	; (8004ab0 <HAL_TIM_Base_MspInit+0x160>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80049c6:	4b3c      	ldr	r3, [pc, #240]	; (8004ab8 <HAL_TIM_Base_MspInit+0x168>)
 80049c8:	4a3c      	ldr	r2, [pc, #240]	; (8004abc <HAL_TIM_Base_MspInit+0x16c>)
 80049ca:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80049cc:	4b3a      	ldr	r3, [pc, #232]	; (8004ab8 <HAL_TIM_Base_MspInit+0x168>)
 80049ce:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80049d2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049d4:	4b38      	ldr	r3, [pc, #224]	; (8004ab8 <HAL_TIM_Base_MspInit+0x168>)
 80049d6:	2240      	movs	r2, #64	; 0x40
 80049d8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80049da:	4b37      	ldr	r3, [pc, #220]	; (8004ab8 <HAL_TIM_Base_MspInit+0x168>)
 80049dc:	2200      	movs	r2, #0
 80049de:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80049e0:	4b35      	ldr	r3, [pc, #212]	; (8004ab8 <HAL_TIM_Base_MspInit+0x168>)
 80049e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049e6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049e8:	4b33      	ldr	r3, [pc, #204]	; (8004ab8 <HAL_TIM_Base_MspInit+0x168>)
 80049ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049ee:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049f0:	4b31      	ldr	r3, [pc, #196]	; (8004ab8 <HAL_TIM_Base_MspInit+0x168>)
 80049f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049f6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80049f8:	4b2f      	ldr	r3, [pc, #188]	; (8004ab8 <HAL_TIM_Base_MspInit+0x168>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80049fe:	4b2e      	ldr	r3, [pc, #184]	; (8004ab8 <HAL_TIM_Base_MspInit+0x168>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a04:	4b2c      	ldr	r3, [pc, #176]	; (8004ab8 <HAL_TIM_Base_MspInit+0x168>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8004a0a:	482b      	ldr	r0, [pc, #172]	; (8004ab8 <HAL_TIM_Base_MspInit+0x168>)
 8004a0c:	f001 f9ae 	bl	8005d6c <HAL_DMA_Init>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_TIM_Base_MspInit+0xca>
      Error_Handler();
 8004a16:	f7ff fc27 	bl	8004268 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a26      	ldr	r2, [pc, #152]	; (8004ab8 <HAL_TIM_Base_MspInit+0x168>)
 8004a1e:	625a      	str	r2, [r3, #36]	; 0x24
 8004a20:	4a25      	ldr	r2, [pc, #148]	; (8004ab8 <HAL_TIM_Base_MspInit+0x168>)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a23      	ldr	r2, [pc, #140]	; (8004ab8 <HAL_TIM_Base_MspInit+0x168>)
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38
 8004a2c:	4a22      	ldr	r2, [pc, #136]	; (8004ab8 <HAL_TIM_Base_MspInit+0x168>)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004a32:	e036      	b.n	8004aa2 <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM9)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a21      	ldr	r2, [pc, #132]	; (8004ac0 <HAL_TIM_Base_MspInit+0x170>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d116      	bne.n	8004a6c <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <HAL_TIM_Base_MspInit+0x160>)
 8004a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a46:	4a1a      	ldr	r2, [pc, #104]	; (8004ab0 <HAL_TIM_Base_MspInit+0x160>)
 8004a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a4e:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <HAL_TIM_Base_MspInit+0x160>)
 8004a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	2018      	movs	r0, #24
 8004a60:	f001 f94d 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004a64:	2018      	movs	r0, #24
 8004a66:	f001 f966 	bl	8005d36 <HAL_NVIC_EnableIRQ>
}
 8004a6a:	e01a      	b.n	8004aa2 <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM11)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a14      	ldr	r2, [pc, #80]	; (8004ac4 <HAL_TIM_Base_MspInit+0x174>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d115      	bne.n	8004aa2 <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <HAL_TIM_Base_MspInit+0x160>)
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	4a0c      	ldr	r2, [pc, #48]	; (8004ab0 <HAL_TIM_Base_MspInit+0x160>)
 8004a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a84:	6453      	str	r3, [r2, #68]	; 0x44
 8004a86:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <HAL_TIM_Base_MspInit+0x160>)
 8004a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004a92:	2200      	movs	r2, #0
 8004a94:	2100      	movs	r1, #0
 8004a96:	201a      	movs	r0, #26
 8004a98:	f001 f931 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004a9c:	201a      	movs	r0, #26
 8004a9e:	f001 f94a 	bl	8005d36 <HAL_NVIC_EnableIRQ>
}
 8004aa2:	bf00      	nop
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40010000 	.word	0x40010000
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	20001cc0 	.word	0x20001cc0
 8004abc:	40026070 	.word	0x40026070
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	40014800 	.word	0x40014800

08004ac8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	; 0x28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ad0:	f107 0314 	add.w	r3, r7, #20
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	605a      	str	r2, [r3, #4]
 8004ada:	609a      	str	r2, [r3, #8]
 8004adc:	60da      	str	r2, [r3, #12]
 8004ade:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae8:	d12b      	bne.n	8004b42 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004aea:	2300      	movs	r3, #0
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	4b17      	ldr	r3, [pc, #92]	; (8004b4c <HAL_TIM_Encoder_MspInit+0x84>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	4a16      	ldr	r2, [pc, #88]	; (8004b4c <HAL_TIM_Encoder_MspInit+0x84>)
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	6413      	str	r3, [r2, #64]	; 0x40
 8004afa:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <HAL_TIM_Encoder_MspInit+0x84>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <HAL_TIM_Encoder_MspInit+0x84>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	4a0f      	ldr	r2, [pc, #60]	; (8004b4c <HAL_TIM_Encoder_MspInit+0x84>)
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	6313      	str	r3, [r2, #48]	; 0x30
 8004b16:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <HAL_TIM_Encoder_MspInit+0x84>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004b22:	2303      	movs	r3, #3
 8004b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b26:	2302      	movs	r3, #2
 8004b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b32:	2301      	movs	r3, #1
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b36:	f107 0314 	add.w	r3, r7, #20
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4804      	ldr	r0, [pc, #16]	; (8004b50 <HAL_TIM_Encoder_MspInit+0x88>)
 8004b3e:	f001 fd23 	bl	8006588 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004b42:	bf00      	nop
 8004b44:	3728      	adds	r7, #40	; 0x28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	40020000 	.word	0x40020000

08004b54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08a      	sub	sp, #40	; 0x28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b5c:	f107 0314 	add.w	r3, r7, #20
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	609a      	str	r2, [r3, #8]
 8004b68:	60da      	str	r2, [r3, #12]
 8004b6a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a24      	ldr	r2, [pc, #144]	; (8004c04 <HAL_TIM_MspPostInit+0xb0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d11f      	bne.n	8004bb6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b76:	2300      	movs	r3, #0
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <HAL_TIM_MspPostInit+0xb4>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	4a22      	ldr	r2, [pc, #136]	; (8004c08 <HAL_TIM_MspPostInit+0xb4>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	6313      	str	r3, [r2, #48]	; 0x30
 8004b86:	4b20      	ldr	r3, [pc, #128]	; (8004c08 <HAL_TIM_MspPostInit+0xb4>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba8:	f107 0314 	add.w	r3, r7, #20
 8004bac:	4619      	mov	r1, r3
 8004bae:	4817      	ldr	r0, [pc, #92]	; (8004c0c <HAL_TIM_MspPostInit+0xb8>)
 8004bb0:	f001 fcea 	bl	8006588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004bb4:	e022      	b.n	8004bfc <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a15      	ldr	r2, [pc, #84]	; (8004c10 <HAL_TIM_MspPostInit+0xbc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d11d      	bne.n	8004bfc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <HAL_TIM_MspPostInit+0xb4>)
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	4a0f      	ldr	r2, [pc, #60]	; (8004c08 <HAL_TIM_MspPostInit+0xb4>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd0:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <HAL_TIM_MspPostInit+0xb4>)
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004bdc:	2340      	movs	r3, #64	; 0x40
 8004bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be0:	2302      	movs	r3, #2
 8004be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be8:	2300      	movs	r3, #0
 8004bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004bec:	2302      	movs	r3, #2
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf0:	f107 0314 	add.w	r3, r7, #20
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4805      	ldr	r0, [pc, #20]	; (8004c0c <HAL_TIM_MspPostInit+0xb8>)
 8004bf8:	f001 fcc6 	bl	8006588 <HAL_GPIO_Init>
}
 8004bfc:	bf00      	nop
 8004bfe:	3728      	adds	r7, #40	; 0x28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40010000 	.word	0x40010000
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	40020000 	.word	0x40020000
 8004c10:	40000400 	.word	0x40000400
 8004c14:	00000000 	.word	0x00000000

08004c18 <Trajectory>:
float setpoint_now = 0;
float target = 0;

// USER CODE ======================================================================================

void Trajectory(float setpoint_now_input, float velocity_max, float acceleration_max, int *position_out, float *velocity_out, float *acceleration_out, int homemode) {
 8004c18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c1c:	b088      	sub	sp, #32
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	ed87 0a07 	vstr	s0, [r7, #28]
 8004c24:	edc7 0a06 	vstr	s1, [r7, #24]
 8004c28:	ed87 1a05 	vstr	s2, [r7, #20]
 8004c2c:	6138      	str	r0, [r7, #16]
 8004c2e:	60f9      	str	r1, [r7, #12]
 8004c30:	60ba      	str	r2, [r7, #8]
 8004c32:	607b      	str	r3, [r7, #4]
	static float time_err = 0;

	static float setpoint_past = 0;
	static float distance = 0;

	if(homemode == 1){
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d115      	bne.n	8004c66 <Trajectory+0x4e>
		setpoint_past = setpoint_now_input;
 8004c3a:	4a6c      	ldr	r2, [pc, #432]	; (8004dec <Trajectory+0x1d4>)
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	6013      	str	r3, [r2, #0]
		time_trajectory = 0;
 8004c40:	4b6b      	ldr	r3, [pc, #428]	; (8004df0 <Trajectory+0x1d8>)
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
		abs_distance = 0;
 8004c48:	4b6a      	ldr	r3, [pc, #424]	; (8004df4 <Trajectory+0x1dc>)
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
		distance = 0;
 8004c50:	4b69      	ldr	r3, [pc, #420]	; (8004df8 <Trajectory+0x1e0>)
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
		position = setpoint_now_input;
 8004c58:	4a68      	ldr	r2, [pc, #416]	; (8004dfc <Trajectory+0x1e4>)
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	6013      	str	r3, [r2, #0]
		initial_position = setpoint_now_input;
 8004c5e:	4a68      	ldr	r2, [pc, #416]	; (8004e00 <Trajectory+0x1e8>)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	6013      	str	r3, [r2, #0]
		return;
 8004c64:	e302      	b.n	800526c <Trajectory+0x654>
	}

	else if(homemode == 0)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f040 82ee 	bne.w	800524a <Trajectory+0x632>
	{
		// distance and +-(sign)
		if (setpoint_past != setpoint_now_input && time_trajectory == 0) {
 8004c6e:	4b5f      	ldr	r3, [pc, #380]	; (8004dec <Trajectory+0x1d4>)
 8004c70:	edd3 7a00 	vldr	s15, [r3]
 8004c74:	ed97 7a07 	vldr	s14, [r7, #28]
 8004c78:	eeb4 7a67 	vcmp.f32	s14, s15
 8004c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c80:	d03f      	beq.n	8004d02 <Trajectory+0xea>
 8004c82:	4b5b      	ldr	r3, [pc, #364]	; (8004df0 <Trajectory+0x1d8>)
 8004c84:	edd3 7a00 	vldr	s15, [r3]
 8004c88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c90:	d137      	bne.n	8004d02 <Trajectory+0xea>
			setpoint_now = setpoint_now_input;
 8004c92:	4a5c      	ldr	r2, [pc, #368]	; (8004e04 <Trajectory+0x1ec>)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	6013      	str	r3, [r2, #0]
			distance = setpoint_now - initial_position;
 8004c98:	4b5a      	ldr	r3, [pc, #360]	; (8004e04 <Trajectory+0x1ec>)
 8004c9a:	ed93 7a00 	vldr	s14, [r3]
 8004c9e:	4b58      	ldr	r3, [pc, #352]	; (8004e00 <Trajectory+0x1e8>)
 8004ca0:	edd3 7a00 	vldr	s15, [r3]
 8004ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ca8:	4b53      	ldr	r3, [pc, #332]	; (8004df8 <Trajectory+0x1e0>)
 8004caa:	edc3 7a00 	vstr	s15, [r3]
			setpoint_past = setpoint_now;
 8004cae:	4b55      	ldr	r3, [pc, #340]	; (8004e04 <Trajectory+0x1ec>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a4e      	ldr	r2, [pc, #312]	; (8004dec <Trajectory+0x1d4>)
 8004cb4:	6013      	str	r3, [r2, #0]
			if (distance >= 0) {
 8004cb6:	4b50      	ldr	r3, [pc, #320]	; (8004df8 <Trajectory+0x1e0>)
 8004cb8:	edd3 7a00 	vldr	s15, [r3]
 8004cbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc4:	db07      	blt.n	8004cd6 <Trajectory+0xbe>
				sign = 1;
 8004cc6:	4b50      	ldr	r3, [pc, #320]	; (8004e08 <Trajectory+0x1f0>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
				abs_distance = distance;
 8004ccc:	4b4a      	ldr	r3, [pc, #296]	; (8004df8 <Trajectory+0x1e0>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a48      	ldr	r2, [pc, #288]	; (8004df4 <Trajectory+0x1dc>)
 8004cd2:	6013      	str	r3, [r2, #0]
			if (distance >= 0) {
 8004cd4:	e019      	b.n	8004d0a <Trajectory+0xf2>
			} else if (distance < 0) {
 8004cd6:	4b48      	ldr	r3, [pc, #288]	; (8004df8 <Trajectory+0x1e0>)
 8004cd8:	edd3 7a00 	vldr	s15, [r3]
 8004cdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce4:	d400      	bmi.n	8004ce8 <Trajectory+0xd0>
			if (distance >= 0) {
 8004ce6:	e010      	b.n	8004d0a <Trajectory+0xf2>
				sign = -1;
 8004ce8:	4b47      	ldr	r3, [pc, #284]	; (8004e08 <Trajectory+0x1f0>)
 8004cea:	f04f 32ff 	mov.w	r2, #4294967295
 8004cee:	601a      	str	r2, [r3, #0]
				abs_distance = distance * (-1);
 8004cf0:	4b41      	ldr	r3, [pc, #260]	; (8004df8 <Trajectory+0x1e0>)
 8004cf2:	edd3 7a00 	vldr	s15, [r3]
 8004cf6:	eef1 7a67 	vneg.f32	s15, s15
 8004cfa:	4b3e      	ldr	r3, [pc, #248]	; (8004df4 <Trajectory+0x1dc>)
 8004cfc:	edc3 7a00 	vstr	s15, [r3]
			if (distance >= 0) {
 8004d00:	e003      	b.n	8004d0a <Trajectory+0xf2>
			}
		} else {
			setpoint_past = setpoint_now;
 8004d02:	4b40      	ldr	r3, [pc, #256]	; (8004e04 <Trajectory+0x1ec>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a39      	ldr	r2, [pc, #228]	; (8004dec <Trajectory+0x1d4>)
 8004d08:	6013      	str	r3, [r2, #0]
		}

	// Define pattern of trapezoidal_trajectory
	if (abs_distance > ((velocity_max * velocity_max) / acceleration_max)) {
 8004d0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d0e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8004d12:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d1a:	4b36      	ldr	r3, [pc, #216]	; (8004df4 <Trajectory+0x1dc>)
 8004d1c:	edd3 7a00 	vldr	s15, [r3]
 8004d20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d28:	d57a      	bpl.n	8004e20 <Trajectory+0x208>
		time_acc = ((velocity_max - 0) / acceleration_max);
 8004d2a:	edd7 6a06 	vldr	s13, [r7, #24]
 8004d2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d36:	4b35      	ldr	r3, [pc, #212]	; (8004e0c <Trajectory+0x1f4>)
 8004d38:	edc3 7a00 	vstr	s15, [r3]
		time_const = ((1.0 / velocity_max) * ((abs_distance) - ((velocity_max * velocity_max) / acceleration_max)));
 8004d3c:	69b8      	ldr	r0, [r7, #24]
 8004d3e:	f7fb fc0b 	bl	8000558 <__aeabi_f2d>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	f04f 0000 	mov.w	r0, #0
 8004d4a:	4931      	ldr	r1, [pc, #196]	; (8004e10 <Trajectory+0x1f8>)
 8004d4c:	f7fb fd86 	bl	800085c <__aeabi_ddiv>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4614      	mov	r4, r2
 8004d56:	461d      	mov	r5, r3
 8004d58:	4b26      	ldr	r3, [pc, #152]	; (8004df4 <Trajectory+0x1dc>)
 8004d5a:	ed93 7a00 	vldr	s14, [r3]
 8004d5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d62:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8004d66:	edd7 6a05 	vldr	s13, [r7, #20]
 8004d6a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d72:	ee17 0a90 	vmov	r0, s15
 8004d76:	f7fb fbef 	bl	8000558 <__aeabi_f2d>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4620      	mov	r0, r4
 8004d80:	4629      	mov	r1, r5
 8004d82:	f7fb fc41 	bl	8000608 <__aeabi_dmul>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	f7fb ff33 	bl	8000bf8 <__aeabi_d2f>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4a1f      	ldr	r2, [pc, #124]	; (8004e14 <Trajectory+0x1fc>)
 8004d96:	6013      	str	r3, [r2, #0]
		time_total = (2 * time_acc) + (abs_distance - (velocity_max * velocity_max) / acceleration_max) / velocity_max;
 8004d98:	4b1c      	ldr	r3, [pc, #112]	; (8004e0c <Trajectory+0x1f4>)
 8004d9a:	edd3 7a00 	vldr	s15, [r3]
 8004d9e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004da2:	4b14      	ldr	r3, [pc, #80]	; (8004df4 <Trajectory+0x1dc>)
 8004da4:	edd3 6a00 	vldr	s13, [r3]
 8004da8:	edd7 7a06 	vldr	s15, [r7, #24]
 8004dac:	ee67 5aa7 	vmul.f32	s11, s15, s15
 8004db0:	ed97 6a05 	vldr	s12, [r7, #20]
 8004db4:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004db8:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004dbc:	edd7 6a06 	vldr	s13, [r7, #24]
 8004dc0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dc8:	4b13      	ldr	r3, [pc, #76]	; (8004e18 <Trajectory+0x200>)
 8004dca:	edc3 7a00 	vstr	s15, [r3]
		max_velocity = velocity_max * sign;
 8004dce:	4b0e      	ldr	r3, [pc, #56]	; (8004e08 <Trajectory+0x1f0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dda:	edd7 7a06 	vldr	s15, [r7, #24]
 8004dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de2:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <Trajectory+0x204>)
 8004de4:	edc3 7a00 	vstr	s15, [r3]
 8004de8:	e056      	b.n	8004e98 <Trajectory+0x280>
 8004dea:	bf00      	nop
 8004dec:	20001d3c 	.word	0x20001d3c
 8004df0:	20001d40 	.word	0x20001d40
 8004df4:	20001d20 	.word	0x20001d20
 8004df8:	20001d44 	.word	0x20001d44
 8004dfc:	20001d28 	.word	0x20001d28
 8004e00:	20001d24 	.word	0x20001d24
 8004e04:	20001d38 	.word	0x20001d38
 8004e08:	20001d34 	.word	0x20001d34
 8004e0c:	20001d48 	.word	0x20001d48
 8004e10:	3ff00000 	.word	0x3ff00000
 8004e14:	20001d4c 	.word	0x20001d4c
 8004e18:	20001d50 	.word	0x20001d50
 8004e1c:	20001d54 	.word	0x20001d54
	}

	else {
		time_acc = sqrt(abs_distance / acceleration_max);
 8004e20:	4b8d      	ldr	r3, [pc, #564]	; (8005058 <Trajectory+0x440>)
 8004e22:	ed93 7a00 	vldr	s14, [r3]
 8004e26:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e2e:	ee16 0a90 	vmov	r0, s13
 8004e32:	f7fb fb91 	bl	8000558 <__aeabi_f2d>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	ec43 2b10 	vmov	d0, r2, r3
 8004e3e:	f00b f8af 	bl	800ffa0 <sqrt>
 8004e42:	ec53 2b10 	vmov	r2, r3, d0
 8004e46:	4610      	mov	r0, r2
 8004e48:	4619      	mov	r1, r3
 8004e4a:	f7fb fed5 	bl	8000bf8 <__aeabi_d2f>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4a82      	ldr	r2, [pc, #520]	; (800505c <Trajectory+0x444>)
 8004e52:	6013      	str	r3, [r2, #0]
		time_total = time_acc * 2;
 8004e54:	4b81      	ldr	r3, [pc, #516]	; (800505c <Trajectory+0x444>)
 8004e56:	edd3 7a00 	vldr	s15, [r3]
 8004e5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004e5e:	4b80      	ldr	r3, [pc, #512]	; (8005060 <Trajectory+0x448>)
 8004e60:	edc3 7a00 	vstr	s15, [r3]
		time_const = 0;
 8004e64:	4b7f      	ldr	r3, [pc, #508]	; (8005064 <Trajectory+0x44c>)
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
		position_const = 0;
 8004e6c:	4b7e      	ldr	r3, [pc, #504]	; (8005068 <Trajectory+0x450>)
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]
		max_velocity = acceleration_max * time_acc * sign;
 8004e74:	4b79      	ldr	r3, [pc, #484]	; (800505c <Trajectory+0x444>)
 8004e76:	ed93 7a00 	vldr	s14, [r3]
 8004e7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e82:	4b7a      	ldr	r3, [pc, #488]	; (800506c <Trajectory+0x454>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e92:	4b77      	ldr	r3, [pc, #476]	; (8005070 <Trajectory+0x458>)
 8004e94:	edc3 7a00 	vstr	s15, [r3]
	}

	//acceleration segment
	if ((0 <= time_trajectory) && (time_trajectory < time_acc)) {
 8004e98:	4b76      	ldr	r3, [pc, #472]	; (8005074 <Trajectory+0x45c>)
 8004e9a:	edd3 7a00 	vldr	s15, [r3]
 8004e9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea6:	f2c0 8085 	blt.w	8004fb4 <Trajectory+0x39c>
 8004eaa:	4b72      	ldr	r3, [pc, #456]	; (8005074 <Trajectory+0x45c>)
 8004eac:	ed93 7a00 	vldr	s14, [r3]
 8004eb0:	4b6a      	ldr	r3, [pc, #424]	; (800505c <Trajectory+0x444>)
 8004eb2:	edd3 7a00 	vldr	s15, [r3]
 8004eb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ebe:	d579      	bpl.n	8004fb4 <Trajectory+0x39c>
		time_trajectory += 0.0001;
 8004ec0:	4b6c      	ldr	r3, [pc, #432]	; (8005074 <Trajectory+0x45c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fb fb47 	bl	8000558 <__aeabi_f2d>
 8004eca:	a361      	add	r3, pc, #388	; (adr r3, 8005050 <Trajectory+0x438>)
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	f7fb f9e4 	bl	800029c <__adddf3>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	f7fb fe8c 	bl	8000bf8 <__aeabi_d2f>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	4a64      	ldr	r2, [pc, #400]	; (8005074 <Trajectory+0x45c>)
 8004ee4:	6013      	str	r3, [r2, #0]
		position = initial_position + (0.5 * acceleration_max * (time_trajectory * time_trajectory) * sign);
 8004ee6:	4b64      	ldr	r3, [pc, #400]	; (8005078 <Trajectory+0x460>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fb fb34 	bl	8000558 <__aeabi_f2d>
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	460d      	mov	r5, r1
 8004ef4:	6978      	ldr	r0, [r7, #20]
 8004ef6:	f7fb fb2f 	bl	8000558 <__aeabi_f2d>
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	4b5f      	ldr	r3, [pc, #380]	; (800507c <Trajectory+0x464>)
 8004f00:	f7fb fb82 	bl	8000608 <__aeabi_dmul>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4690      	mov	r8, r2
 8004f0a:	4699      	mov	r9, r3
 8004f0c:	4b59      	ldr	r3, [pc, #356]	; (8005074 <Trajectory+0x45c>)
 8004f0e:	ed93 7a00 	vldr	s14, [r3]
 8004f12:	4b58      	ldr	r3, [pc, #352]	; (8005074 <Trajectory+0x45c>)
 8004f14:	edd3 7a00 	vldr	s15, [r3]
 8004f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1c:	ee17 0a90 	vmov	r0, s15
 8004f20:	f7fb fb1a 	bl	8000558 <__aeabi_f2d>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4640      	mov	r0, r8
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	f7fb fb6c 	bl	8000608 <__aeabi_dmul>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4690      	mov	r8, r2
 8004f36:	4699      	mov	r9, r3
 8004f38:	4b4c      	ldr	r3, [pc, #304]	; (800506c <Trajectory+0x454>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fb faf9 	bl	8000534 <__aeabi_i2d>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4640      	mov	r0, r8
 8004f48:	4649      	mov	r1, r9
 8004f4a:	f7fb fb5d 	bl	8000608 <__aeabi_dmul>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4620      	mov	r0, r4
 8004f54:	4629      	mov	r1, r5
 8004f56:	f7fb f9a1 	bl	800029c <__adddf3>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4610      	mov	r0, r2
 8004f60:	4619      	mov	r1, r3
 8004f62:	f7fb fe49 	bl	8000bf8 <__aeabi_d2f>
 8004f66:	4603      	mov	r3, r0
 8004f68:	4a45      	ldr	r2, [pc, #276]	; (8005080 <Trajectory+0x468>)
 8004f6a:	6013      	str	r3, [r2, #0]
		velocity = (acceleration_max * time_trajectory * sign);
 8004f6c:	4b41      	ldr	r3, [pc, #260]	; (8005074 <Trajectory+0x45c>)
 8004f6e:	ed93 7a00 	vldr	s14, [r3]
 8004f72:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f7a:	4b3c      	ldr	r3, [pc, #240]	; (800506c <Trajectory+0x454>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f8a:	4b3e      	ldr	r3, [pc, #248]	; (8005084 <Trajectory+0x46c>)
 8004f8c:	edc3 7a00 	vstr	s15, [r3]
		position_acc = position;
 8004f90:	4b3b      	ldr	r3, [pc, #236]	; (8005080 <Trajectory+0x468>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a3c      	ldr	r2, [pc, #240]	; (8005088 <Trajectory+0x470>)
 8004f96:	6013      	str	r3, [r2, #0]
		acceleration = acceleration_max * sign;
 8004f98:	4b34      	ldr	r3, [pc, #208]	; (800506c <Trajectory+0x454>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	ee07 3a90 	vmov	s15, r3
 8004fa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fa4:	edd7 7a05 	vldr	s15, [r7, #20]
 8004fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fac:	4b37      	ldr	r3, [pc, #220]	; (800508c <Trajectory+0x474>)
 8004fae:	edc3 7a00 	vstr	s15, [r3]
 8004fb2:	e12d      	b.n	8005210 <Trajectory+0x5f8>
	}

	//constant segment
	else if ((time_trajectory) < (time_total - time_acc)) {
 8004fb4:	4b2a      	ldr	r3, [pc, #168]	; (8005060 <Trajectory+0x448>)
 8004fb6:	ed93 7a00 	vldr	s14, [r3]
 8004fba:	4b28      	ldr	r3, [pc, #160]	; (800505c <Trajectory+0x444>)
 8004fbc:	edd3 7a00 	vldr	s15, [r3]
 8004fc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004fc4:	4b2b      	ldr	r3, [pc, #172]	; (8005074 <Trajectory+0x45c>)
 8004fc6:	edd3 7a00 	vldr	s15, [r3]
 8004fca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd2:	dd5d      	ble.n	8005090 <Trajectory+0x478>
		time_trajectory += 0.0001;
 8004fd4:	4b27      	ldr	r3, [pc, #156]	; (8005074 <Trajectory+0x45c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fb fabd 	bl	8000558 <__aeabi_f2d>
 8004fde:	a31c      	add	r3, pc, #112	; (adr r3, 8005050 <Trajectory+0x438>)
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	f7fb f95a 	bl	800029c <__adddf3>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4610      	mov	r0, r2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f7fb fe02 	bl	8000bf8 <__aeabi_d2f>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	4a1f      	ldr	r2, [pc, #124]	; (8005074 <Trajectory+0x45c>)
 8004ff8:	6013      	str	r3, [r2, #0]
		position = position_acc + (max_velocity * (time_trajectory - time_acc));
 8004ffa:	4b1e      	ldr	r3, [pc, #120]	; (8005074 <Trajectory+0x45c>)
 8004ffc:	ed93 7a00 	vldr	s14, [r3]
 8005000:	4b16      	ldr	r3, [pc, #88]	; (800505c <Trajectory+0x444>)
 8005002:	edd3 7a00 	vldr	s15, [r3]
 8005006:	ee37 7a67 	vsub.f32	s14, s14, s15
 800500a:	4b19      	ldr	r3, [pc, #100]	; (8005070 <Trajectory+0x458>)
 800500c:	edd3 7a00 	vldr	s15, [r3]
 8005010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005014:	4b1c      	ldr	r3, [pc, #112]	; (8005088 <Trajectory+0x470>)
 8005016:	edd3 7a00 	vldr	s15, [r3]
 800501a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800501e:	4b18      	ldr	r3, [pc, #96]	; (8005080 <Trajectory+0x468>)
 8005020:	edc3 7a00 	vstr	s15, [r3]
		position_const = position - position_acc;
 8005024:	4b16      	ldr	r3, [pc, #88]	; (8005080 <Trajectory+0x468>)
 8005026:	ed93 7a00 	vldr	s14, [r3]
 800502a:	4b17      	ldr	r3, [pc, #92]	; (8005088 <Trajectory+0x470>)
 800502c:	edd3 7a00 	vldr	s15, [r3]
 8005030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005034:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <Trajectory+0x450>)
 8005036:	edc3 7a00 	vstr	s15, [r3]
		velocity = (max_velocity);
 800503a:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <Trajectory+0x458>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a11      	ldr	r2, [pc, #68]	; (8005084 <Trajectory+0x46c>)
 8005040:	6013      	str	r3, [r2, #0]
		acceleration = 0;
 8005042:	4b12      	ldr	r3, [pc, #72]	; (800508c <Trajectory+0x474>)
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e0e1      	b.n	8005210 <Trajectory+0x5f8>
 800504c:	f3af 8000 	nop.w
 8005050:	eb1c432d 	.word	0xeb1c432d
 8005054:	3f1a36e2 	.word	0x3f1a36e2
 8005058:	20001d20 	.word	0x20001d20
 800505c:	20001d48 	.word	0x20001d48
 8005060:	20001d50 	.word	0x20001d50
 8005064:	20001d4c 	.word	0x20001d4c
 8005068:	20001d58 	.word	0x20001d58
 800506c:	20001d34 	.word	0x20001d34
 8005070:	20001d54 	.word	0x20001d54
 8005074:	20001d40 	.word	0x20001d40
 8005078:	20001d24 	.word	0x20001d24
 800507c:	3fe00000 	.word	0x3fe00000
 8005080:	20001d28 	.word	0x20001d28
 8005084:	20001d2c 	.word	0x20001d2c
 8005088:	20001d5c 	.word	0x20001d5c
 800508c:	20001d30 	.word	0x20001d30
	}

	//deceleration segment
	else if (((time_total - time_acc) <= time_trajectory) && (time_trajectory < time_total)) {
 8005090:	4b7b      	ldr	r3, [pc, #492]	; (8005280 <Trajectory+0x668>)
 8005092:	ed93 7a00 	vldr	s14, [r3]
 8005096:	4b7b      	ldr	r3, [pc, #492]	; (8005284 <Trajectory+0x66c>)
 8005098:	edd3 7a00 	vldr	s15, [r3]
 800509c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050a0:	4b79      	ldr	r3, [pc, #484]	; (8005288 <Trajectory+0x670>)
 80050a2:	edd3 7a00 	vldr	s15, [r3]
 80050a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ae:	f200 80af 	bhi.w	8005210 <Trajectory+0x5f8>
 80050b2:	4b75      	ldr	r3, [pc, #468]	; (8005288 <Trajectory+0x670>)
 80050b4:	ed93 7a00 	vldr	s14, [r3]
 80050b8:	4b71      	ldr	r3, [pc, #452]	; (8005280 <Trajectory+0x668>)
 80050ba:	edd3 7a00 	vldr	s15, [r3]
 80050be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c6:	f140 80a3 	bpl.w	8005210 <Trajectory+0x5f8>
		time_trajectory += 0.0001;
 80050ca:	4b6f      	ldr	r3, [pc, #444]	; (8005288 <Trajectory+0x670>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fb fa42 	bl	8000558 <__aeabi_f2d>
 80050d4:	a368      	add	r3, pc, #416	; (adr r3, 8005278 <Trajectory+0x660>)
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	f7fb f8df 	bl	800029c <__adddf3>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	4610      	mov	r0, r2
 80050e4:	4619      	mov	r1, r3
 80050e6:	f7fb fd87 	bl	8000bf8 <__aeabi_d2f>
 80050ea:	4603      	mov	r3, r0
 80050ec:	4a66      	ldr	r2, [pc, #408]	; (8005288 <Trajectory+0x670>)
 80050ee:	6013      	str	r3, [r2, #0]
		time_err = (time_trajectory - (time_acc + time_const));
 80050f0:	4b65      	ldr	r3, [pc, #404]	; (8005288 <Trajectory+0x670>)
 80050f2:	ed93 7a00 	vldr	s14, [r3]
 80050f6:	4b63      	ldr	r3, [pc, #396]	; (8005284 <Trajectory+0x66c>)
 80050f8:	edd3 6a00 	vldr	s13, [r3]
 80050fc:	4b63      	ldr	r3, [pc, #396]	; (800528c <Trajectory+0x674>)
 80050fe:	edd3 7a00 	vldr	s15, [r3]
 8005102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800510a:	4b61      	ldr	r3, [pc, #388]	; (8005290 <Trajectory+0x678>)
 800510c:	edc3 7a00 	vstr	s15, [r3]
		position = position_acc + position_const + (max_velocity * time_err) + (0.5 * (-1) * acceleration_max * (time_err * time_err) * sign);
 8005110:	4b60      	ldr	r3, [pc, #384]	; (8005294 <Trajectory+0x67c>)
 8005112:	ed93 7a00 	vldr	s14, [r3]
 8005116:	4b60      	ldr	r3, [pc, #384]	; (8005298 <Trajectory+0x680>)
 8005118:	edd3 7a00 	vldr	s15, [r3]
 800511c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005120:	4b5e      	ldr	r3, [pc, #376]	; (800529c <Trajectory+0x684>)
 8005122:	edd3 6a00 	vldr	s13, [r3]
 8005126:	4b5a      	ldr	r3, [pc, #360]	; (8005290 <Trajectory+0x678>)
 8005128:	edd3 7a00 	vldr	s15, [r3]
 800512c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005134:	ee17 0a90 	vmov	r0, s15
 8005138:	f7fb fa0e 	bl	8000558 <__aeabi_f2d>
 800513c:	4604      	mov	r4, r0
 800513e:	460d      	mov	r5, r1
 8005140:	6978      	ldr	r0, [r7, #20]
 8005142:	f7fb fa09 	bl	8000558 <__aeabi_f2d>
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	4b55      	ldr	r3, [pc, #340]	; (80052a0 <Trajectory+0x688>)
 800514c:	f7fb fa5c 	bl	8000608 <__aeabi_dmul>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4690      	mov	r8, r2
 8005156:	4699      	mov	r9, r3
 8005158:	4b4d      	ldr	r3, [pc, #308]	; (8005290 <Trajectory+0x678>)
 800515a:	ed93 7a00 	vldr	s14, [r3]
 800515e:	4b4c      	ldr	r3, [pc, #304]	; (8005290 <Trajectory+0x678>)
 8005160:	edd3 7a00 	vldr	s15, [r3]
 8005164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005168:	ee17 0a90 	vmov	r0, s15
 800516c:	f7fb f9f4 	bl	8000558 <__aeabi_f2d>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4640      	mov	r0, r8
 8005176:	4649      	mov	r1, r9
 8005178:	f7fb fa46 	bl	8000608 <__aeabi_dmul>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4690      	mov	r8, r2
 8005182:	4699      	mov	r9, r3
 8005184:	4b47      	ldr	r3, [pc, #284]	; (80052a4 <Trajectory+0x68c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f7fb f9d3 	bl	8000534 <__aeabi_i2d>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4640      	mov	r0, r8
 8005194:	4649      	mov	r1, r9
 8005196:	f7fb fa37 	bl	8000608 <__aeabi_dmul>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4620      	mov	r0, r4
 80051a0:	4629      	mov	r1, r5
 80051a2:	f7fb f87b 	bl	800029c <__adddf3>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4610      	mov	r0, r2
 80051ac:	4619      	mov	r1, r3
 80051ae:	f7fb fd23 	bl	8000bf8 <__aeabi_d2f>
 80051b2:	4603      	mov	r3, r0
 80051b4:	4a3c      	ldr	r2, [pc, #240]	; (80052a8 <Trajectory+0x690>)
 80051b6:	6013      	str	r3, [r2, #0]
		velocity = (-acceleration_max * sign * time_err) + (max_velocity);
 80051b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80051bc:	eeb1 7a67 	vneg.f32	s14, s15
 80051c0:	4b38      	ldr	r3, [pc, #224]	; (80052a4 <Trajectory+0x68c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	ee07 3a90 	vmov	s15, r3
 80051c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051d0:	4b2f      	ldr	r3, [pc, #188]	; (8005290 <Trajectory+0x678>)
 80051d2:	edd3 7a00 	vldr	s15, [r3]
 80051d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051da:	4b30      	ldr	r3, [pc, #192]	; (800529c <Trajectory+0x684>)
 80051dc:	edd3 7a00 	vldr	s15, [r3]
 80051e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051e4:	4b31      	ldr	r3, [pc, #196]	; (80052ac <Trajectory+0x694>)
 80051e6:	edc3 7a00 	vstr	s15, [r3]
		acceleration = -acceleration_max * sign;
 80051ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80051ee:	eeb1 7a67 	vneg.f32	s14, s15
 80051f2:	4b2c      	ldr	r3, [pc, #176]	; (80052a4 <Trajectory+0x68c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005202:	4b2b      	ldr	r3, [pc, #172]	; (80052b0 <Trajectory+0x698>)
 8005204:	edc3 7a00 	vstr	s15, [r3]
		initial_position = position;
 8005208:	4b27      	ldr	r3, [pc, #156]	; (80052a8 <Trajectory+0x690>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a29      	ldr	r2, [pc, #164]	; (80052b4 <Trajectory+0x69c>)
 800520e:	6013      	str	r3, [r2, #0]
	}

	position = (int) position;
 8005210:	4b25      	ldr	r3, [pc, #148]	; (80052a8 <Trajectory+0x690>)
 8005212:	edd3 7a00 	vldr	s15, [r3]
 8005216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800521a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800521e:	4b22      	ldr	r3, [pc, #136]	; (80052a8 <Trajectory+0x690>)
 8005220:	edc3 7a00 	vstr	s15, [r3]

	if (setpoint_now == position) {
 8005224:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <Trajectory+0x6a0>)
 8005226:	ed93 7a00 	vldr	s14, [r3]
 800522a:	4b1f      	ldr	r3, [pc, #124]	; (80052a8 <Trajectory+0x690>)
 800522c:	edd3 7a00 	vldr	s15, [r3]
 8005230:	eeb4 7a67 	vcmp.f32	s14, s15
 8005234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005238:	d107      	bne.n	800524a <Trajectory+0x632>
		time_trajectory = 0;
 800523a:	4b13      	ldr	r3, [pc, #76]	; (8005288 <Trajectory+0x670>)
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
		acceleration = 0;
 8005242:	4b1b      	ldr	r3, [pc, #108]	; (80052b0 <Trajectory+0x698>)
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
	}
	}

	*position_out = position;
 800524a:	4b17      	ldr	r3, [pc, #92]	; (80052a8 <Trajectory+0x690>)
 800524c:	edd3 7a00 	vldr	s15, [r3]
 8005250:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005254:	ee17 2a90 	vmov	r2, s15
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	601a      	str	r2, [r3, #0]
	*velocity_out = velocity;
 800525c:	4b13      	ldr	r3, [pc, #76]	; (80052ac <Trajectory+0x694>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	601a      	str	r2, [r3, #0]
	*acceleration_out = acceleration;
 8005264:	4b12      	ldr	r3, [pc, #72]	; (80052b0 <Trajectory+0x698>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	601a      	str	r2, [r3, #0]
}
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005274:	f3af 8000 	nop.w
 8005278:	eb1c432d 	.word	0xeb1c432d
 800527c:	3f1a36e2 	.word	0x3f1a36e2
 8005280:	20001d50 	.word	0x20001d50
 8005284:	20001d48 	.word	0x20001d48
 8005288:	20001d40 	.word	0x20001d40
 800528c:	20001d4c 	.word	0x20001d4c
 8005290:	20001d60 	.word	0x20001d60
 8005294:	20001d5c 	.word	0x20001d5c
 8005298:	20001d58 	.word	0x20001d58
 800529c:	20001d54 	.word	0x20001d54
 80052a0:	bfe00000 	.word	0xbfe00000
 80052a4:	20001d34 	.word	0x20001d34
 80052a8:	20001d28 	.word	0x20001d28
 80052ac:	20001d2c 	.word	0x20001d2c
 80052b0:	20001d30 	.word	0x20001d30
 80052b4:	20001d24 	.word	0x20001d24
 80052b8:	20001d38 	.word	0x20001d38

080052bc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80052c0:	4b11      	ldr	r3, [pc, #68]	; (8005308 <MX_USART1_UART_Init+0x4c>)
 80052c2:	4a12      	ldr	r2, [pc, #72]	; (800530c <MX_USART1_UART_Init+0x50>)
 80052c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80052c6:	4b10      	ldr	r3, [pc, #64]	; (8005308 <MX_USART1_UART_Init+0x4c>)
 80052c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80052ce:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <MX_USART1_UART_Init+0x4c>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <MX_USART1_UART_Init+0x4c>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80052da:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <MX_USART1_UART_Init+0x4c>)
 80052dc:	2200      	movs	r2, #0
 80052de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80052e0:	4b09      	ldr	r3, [pc, #36]	; (8005308 <MX_USART1_UART_Init+0x4c>)
 80052e2:	220c      	movs	r2, #12
 80052e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052e6:	4b08      	ldr	r3, [pc, #32]	; (8005308 <MX_USART1_UART_Init+0x4c>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80052ec:	4b06      	ldr	r3, [pc, #24]	; (8005308 <MX_USART1_UART_Init+0x4c>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80052f2:	4805      	ldr	r0, [pc, #20]	; (8005308 <MX_USART1_UART_Init+0x4c>)
 80052f4:	f004 fc96 	bl	8009c24 <HAL_UART_Init>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80052fe:	f7fe ffb3 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005302:	bf00      	nop
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20001d64 	.word	0x20001d64
 800530c:	40011000 	.word	0x40011000

08005310 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005314:	4b12      	ldr	r3, [pc, #72]	; (8005360 <MX_USART2_UART_Init+0x50>)
 8005316:	4a13      	ldr	r2, [pc, #76]	; (8005364 <MX_USART2_UART_Init+0x54>)
 8005318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800531a:	4b11      	ldr	r3, [pc, #68]	; (8005360 <MX_USART2_UART_Init+0x50>)
 800531c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8005320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8005322:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <MX_USART2_UART_Init+0x50>)
 8005324:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005328:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <MX_USART2_UART_Init+0x50>)
 800532c:	2200      	movs	r2, #0
 800532e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <MX_USART2_UART_Init+0x50>)
 8005332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005338:	4b09      	ldr	r3, [pc, #36]	; (8005360 <MX_USART2_UART_Init+0x50>)
 800533a:	220c      	movs	r2, #12
 800533c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800533e:	4b08      	ldr	r3, [pc, #32]	; (8005360 <MX_USART2_UART_Init+0x50>)
 8005340:	2200      	movs	r2, #0
 8005342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005344:	4b06      	ldr	r3, [pc, #24]	; (8005360 <MX_USART2_UART_Init+0x50>)
 8005346:	2200      	movs	r2, #0
 8005348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800534a:	4805      	ldr	r0, [pc, #20]	; (8005360 <MX_USART2_UART_Init+0x50>)
 800534c:	f004 fc6a 	bl	8009c24 <HAL_UART_Init>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8005356:	f7fe ff87 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800535a:	bf00      	nop
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20001dd8 	.word	0x20001dd8
 8005364:	40004400 	.word	0x40004400

08005368 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08c      	sub	sp, #48	; 0x30
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005370:	f107 031c 	add.w	r3, r7, #28
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	609a      	str	r2, [r3, #8]
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a51      	ldr	r2, [pc, #324]	; (80054cc <HAL_UART_MspInit+0x164>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d135      	bne.n	80053f6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800538a:	2300      	movs	r3, #0
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	4b50      	ldr	r3, [pc, #320]	; (80054d0 <HAL_UART_MspInit+0x168>)
 8005390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005392:	4a4f      	ldr	r2, [pc, #316]	; (80054d0 <HAL_UART_MspInit+0x168>)
 8005394:	f043 0310 	orr.w	r3, r3, #16
 8005398:	6453      	str	r3, [r2, #68]	; 0x44
 800539a:	4b4d      	ldr	r3, [pc, #308]	; (80054d0 <HAL_UART_MspInit+0x168>)
 800539c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	61bb      	str	r3, [r7, #24]
 80053a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	4b49      	ldr	r3, [pc, #292]	; (80054d0 <HAL_UART_MspInit+0x168>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	4a48      	ldr	r2, [pc, #288]	; (80054d0 <HAL_UART_MspInit+0x168>)
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	6313      	str	r3, [r2, #48]	; 0x30
 80053b6:	4b46      	ldr	r3, [pc, #280]	; (80054d0 <HAL_UART_MspInit+0x168>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80053c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80053c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c8:	2302      	movs	r3, #2
 80053ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053cc:	2300      	movs	r3, #0
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053d0:	2303      	movs	r3, #3
 80053d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053d4:	2307      	movs	r3, #7
 80053d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053d8:	f107 031c 	add.w	r3, r7, #28
 80053dc:	4619      	mov	r1, r3
 80053de:	483d      	ldr	r0, [pc, #244]	; (80054d4 <HAL_UART_MspInit+0x16c>)
 80053e0:	f001 f8d2 	bl	8006588 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80053e4:	2200      	movs	r2, #0
 80053e6:	2100      	movs	r1, #0
 80053e8:	2025      	movs	r0, #37	; 0x25
 80053ea:	f000 fc88 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80053ee:	2025      	movs	r0, #37	; 0x25
 80053f0:	f000 fca1 	bl	8005d36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80053f4:	e066      	b.n	80054c4 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART2)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a37      	ldr	r2, [pc, #220]	; (80054d8 <HAL_UART_MspInit+0x170>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d161      	bne.n	80054c4 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005400:	2300      	movs	r3, #0
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	4b32      	ldr	r3, [pc, #200]	; (80054d0 <HAL_UART_MspInit+0x168>)
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	4a31      	ldr	r2, [pc, #196]	; (80054d0 <HAL_UART_MspInit+0x168>)
 800540a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800540e:	6413      	str	r3, [r2, #64]	; 0x40
 8005410:	4b2f      	ldr	r3, [pc, #188]	; (80054d0 <HAL_UART_MspInit+0x168>)
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	4b2b      	ldr	r3, [pc, #172]	; (80054d0 <HAL_UART_MspInit+0x168>)
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	4a2a      	ldr	r2, [pc, #168]	; (80054d0 <HAL_UART_MspInit+0x168>)
 8005426:	f043 0301 	orr.w	r3, r3, #1
 800542a:	6313      	str	r3, [r2, #48]	; 0x30
 800542c:	4b28      	ldr	r3, [pc, #160]	; (80054d0 <HAL_UART_MspInit+0x168>)
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005438:	230c      	movs	r3, #12
 800543a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800543c:	2302      	movs	r3, #2
 800543e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005440:	2300      	movs	r3, #0
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005444:	2303      	movs	r3, #3
 8005446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005448:	2307      	movs	r3, #7
 800544a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800544c:	f107 031c 	add.w	r3, r7, #28
 8005450:	4619      	mov	r1, r3
 8005452:	4820      	ldr	r0, [pc, #128]	; (80054d4 <HAL_UART_MspInit+0x16c>)
 8005454:	f001 f898 	bl	8006588 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005458:	4b20      	ldr	r3, [pc, #128]	; (80054dc <HAL_UART_MspInit+0x174>)
 800545a:	4a21      	ldr	r2, [pc, #132]	; (80054e0 <HAL_UART_MspInit+0x178>)
 800545c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800545e:	4b1f      	ldr	r3, [pc, #124]	; (80054dc <HAL_UART_MspInit+0x174>)
 8005460:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005464:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005466:	4b1d      	ldr	r3, [pc, #116]	; (80054dc <HAL_UART_MspInit+0x174>)
 8005468:	2240      	movs	r2, #64	; 0x40
 800546a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800546c:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <HAL_UART_MspInit+0x174>)
 800546e:	2200      	movs	r2, #0
 8005470:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005472:	4b1a      	ldr	r3, [pc, #104]	; (80054dc <HAL_UART_MspInit+0x174>)
 8005474:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005478:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800547a:	4b18      	ldr	r3, [pc, #96]	; (80054dc <HAL_UART_MspInit+0x174>)
 800547c:	2200      	movs	r2, #0
 800547e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005480:	4b16      	ldr	r3, [pc, #88]	; (80054dc <HAL_UART_MspInit+0x174>)
 8005482:	2200      	movs	r2, #0
 8005484:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005486:	4b15      	ldr	r3, [pc, #84]	; (80054dc <HAL_UART_MspInit+0x174>)
 8005488:	2200      	movs	r2, #0
 800548a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800548c:	4b13      	ldr	r3, [pc, #76]	; (80054dc <HAL_UART_MspInit+0x174>)
 800548e:	2200      	movs	r2, #0
 8005490:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005492:	4b12      	ldr	r3, [pc, #72]	; (80054dc <HAL_UART_MspInit+0x174>)
 8005494:	2200      	movs	r2, #0
 8005496:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005498:	4810      	ldr	r0, [pc, #64]	; (80054dc <HAL_UART_MspInit+0x174>)
 800549a:	f000 fc67 	bl	8005d6c <HAL_DMA_Init>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <HAL_UART_MspInit+0x140>
      Error_Handler();
 80054a4:	f7fe fee0 	bl	8004268 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a0c      	ldr	r2, [pc, #48]	; (80054dc <HAL_UART_MspInit+0x174>)
 80054ac:	635a      	str	r2, [r3, #52]	; 0x34
 80054ae:	4a0b      	ldr	r2, [pc, #44]	; (80054dc <HAL_UART_MspInit+0x174>)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80054b4:	2200      	movs	r2, #0
 80054b6:	2100      	movs	r1, #0
 80054b8:	2026      	movs	r0, #38	; 0x26
 80054ba:	f000 fc20 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80054be:	2026      	movs	r0, #38	; 0x26
 80054c0:	f000 fc39 	bl	8005d36 <HAL_NVIC_EnableIRQ>
}
 80054c4:	bf00      	nop
 80054c6:	3730      	adds	r7, #48	; 0x30
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40011000 	.word	0x40011000
 80054d0:	40023800 	.word	0x40023800
 80054d4:	40020000 	.word	0x40020000
 80054d8:	40004400 	.word	0x40004400
 80054dc:	20001e4c 	.word	0x20001e4c
 80054e0:	400260a0 	.word	0x400260a0

080054e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80054e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800551c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80054e8:	480d      	ldr	r0, [pc, #52]	; (8005520 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80054ea:	490e      	ldr	r1, [pc, #56]	; (8005524 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80054ec:	4a0e      	ldr	r2, [pc, #56]	; (8005528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80054ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054f0:	e002      	b.n	80054f8 <LoopCopyDataInit>

080054f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054f6:	3304      	adds	r3, #4

080054f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054fc:	d3f9      	bcc.n	80054f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054fe:	4a0b      	ldr	r2, [pc, #44]	; (800552c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005500:	4c0b      	ldr	r4, [pc, #44]	; (8005530 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005504:	e001      	b.n	800550a <LoopFillZerobss>

08005506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005508:	3204      	adds	r2, #4

0800550a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800550a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800550c:	d3fb      	bcc.n	8005506 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800550e:	f7ff f815 	bl	800453c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005512:	f005 fe1d 	bl	800b150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005516:	f7fe fdab 	bl	8004070 <main>
  bx  lr    
 800551a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800551c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005524:	20000408 	.word	0x20000408
  ldr r2, =_sidata
 8005528:	08011dc0 	.word	0x08011dc0
  ldr r2, =_sbss
 800552c:	20000408 	.word	0x20000408
  ldr r4, =_ebss
 8005530:	20001ec0 	.word	0x20001ec0

08005534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005534:	e7fe      	b.n	8005534 <ADC_IRQHandler>
	...

08005538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800553c:	4b0e      	ldr	r3, [pc, #56]	; (8005578 <HAL_Init+0x40>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a0d      	ldr	r2, [pc, #52]	; (8005578 <HAL_Init+0x40>)
 8005542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005548:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <HAL_Init+0x40>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a0a      	ldr	r2, [pc, #40]	; (8005578 <HAL_Init+0x40>)
 800554e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005554:	4b08      	ldr	r3, [pc, #32]	; (8005578 <HAL_Init+0x40>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a07      	ldr	r2, [pc, #28]	; (8005578 <HAL_Init+0x40>)
 800555a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005560:	2003      	movs	r0, #3
 8005562:	f000 fbc1 	bl	8005ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005566:	2000      	movs	r0, #0
 8005568:	f000 f808 	bl	800557c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800556c:	f7fe fe82 	bl	8004274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40023c00 	.word	0x40023c00

0800557c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005584:	4b12      	ldr	r3, [pc, #72]	; (80055d0 <HAL_InitTick+0x54>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <HAL_InitTick+0x58>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	4619      	mov	r1, r3
 800558e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005592:	fbb3 f3f1 	udiv	r3, r3, r1
 8005596:	fbb2 f3f3 	udiv	r3, r2, r3
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fbd9 	bl	8005d52 <HAL_SYSTICK_Config>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e00e      	b.n	80055c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b0f      	cmp	r3, #15
 80055ae:	d80a      	bhi.n	80055c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055b0:	2200      	movs	r2, #0
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295
 80055b8:	f000 fba1 	bl	8005cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055bc:	4a06      	ldr	r2, [pc, #24]	; (80055d8 <HAL_InitTick+0x5c>)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e000      	b.n	80055c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20000228 	.word	0x20000228
 80055d4:	20000230 	.word	0x20000230
 80055d8:	2000022c 	.word	0x2000022c

080055dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055e0:	4b06      	ldr	r3, [pc, #24]	; (80055fc <HAL_IncTick+0x20>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	4b06      	ldr	r3, [pc, #24]	; (8005600 <HAL_IncTick+0x24>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4413      	add	r3, r2
 80055ec:	4a04      	ldr	r2, [pc, #16]	; (8005600 <HAL_IncTick+0x24>)
 80055ee:	6013      	str	r3, [r2, #0]
}
 80055f0:	bf00      	nop
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	20000230 	.word	0x20000230
 8005600:	20001eac 	.word	0x20001eac

08005604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
  return uwTick;
 8005608:	4b03      	ldr	r3, [pc, #12]	; (8005618 <HAL_GetTick+0x14>)
 800560a:	681b      	ldr	r3, [r3, #0]
}
 800560c:	4618      	mov	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	20001eac 	.word	0x20001eac

0800561c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005624:	f7ff ffee 	bl	8005604 <HAL_GetTick>
 8005628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005634:	d005      	beq.n	8005642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005636:	4b0a      	ldr	r3, [pc, #40]	; (8005660 <HAL_Delay+0x44>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005642:	bf00      	nop
 8005644:	f7ff ffde 	bl	8005604 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	429a      	cmp	r2, r3
 8005652:	d8f7      	bhi.n	8005644 <HAL_Delay+0x28>
  {
  }
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000230 	.word	0x20000230

08005664 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e033      	b.n	80056e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fc fbdc 	bl	8001e40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	f003 0310 	and.w	r3, r3, #16
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d118      	bne.n	80056d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80056aa:	f023 0302 	bic.w	r3, r3, #2
 80056ae:	f043 0202 	orr.w	r2, r3, #2
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f94a 	bl	8005950 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f023 0303 	bic.w	r3, r3, #3
 80056ca:	f043 0201 	orr.w	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	641a      	str	r2, [r3, #64]	; 0x40
 80056d2:	e001      	b.n	80056d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_ADC_ConfigChannel+0x1c>
 8005704:	2302      	movs	r3, #2
 8005706:	e113      	b.n	8005930 <HAL_ADC_ConfigChannel+0x244>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b09      	cmp	r3, #9
 8005716:	d925      	bls.n	8005764 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68d9      	ldr	r1, [r3, #12]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	461a      	mov	r2, r3
 8005726:	4613      	mov	r3, r2
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	4413      	add	r3, r2
 800572c:	3b1e      	subs	r3, #30
 800572e:	2207      	movs	r2, #7
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	43da      	mvns	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	400a      	ands	r2, r1
 800573c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68d9      	ldr	r1, [r3, #12]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	4618      	mov	r0, r3
 8005750:	4603      	mov	r3, r0
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	4403      	add	r3, r0
 8005756:	3b1e      	subs	r3, #30
 8005758:	409a      	lsls	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	60da      	str	r2, [r3, #12]
 8005762:	e022      	b.n	80057aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6919      	ldr	r1, [r3, #16]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	b29b      	uxth	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	4613      	mov	r3, r2
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	4413      	add	r3, r2
 8005778:	2207      	movs	r2, #7
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	43da      	mvns	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	400a      	ands	r2, r1
 8005786:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6919      	ldr	r1, [r3, #16]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	4618      	mov	r0, r3
 800579a:	4603      	mov	r3, r0
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	4403      	add	r3, r0
 80057a0:	409a      	lsls	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b06      	cmp	r3, #6
 80057b0:	d824      	bhi.n	80057fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	3b05      	subs	r3, #5
 80057c4:	221f      	movs	r2, #31
 80057c6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ca:	43da      	mvns	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	400a      	ands	r2, r1
 80057d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	4618      	mov	r0, r3
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	3b05      	subs	r3, #5
 80057ee:	fa00 f203 	lsl.w	r2, r0, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	635a      	str	r2, [r3, #52]	; 0x34
 80057fa:	e04c      	b.n	8005896 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b0c      	cmp	r3, #12
 8005802:	d824      	bhi.n	800584e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	3b23      	subs	r3, #35	; 0x23
 8005816:	221f      	movs	r2, #31
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	43da      	mvns	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	400a      	ands	r2, r1
 8005824:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	b29b      	uxth	r3, r3
 8005832:	4618      	mov	r0, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	3b23      	subs	r3, #35	; 0x23
 8005840:	fa00 f203 	lsl.w	r2, r0, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
 800584c:	e023      	b.n	8005896 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	4613      	mov	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4413      	add	r3, r2
 800585e:	3b41      	subs	r3, #65	; 0x41
 8005860:	221f      	movs	r2, #31
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	43da      	mvns	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	400a      	ands	r2, r1
 800586e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	b29b      	uxth	r3, r3
 800587c:	4618      	mov	r0, r3
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	3b41      	subs	r3, #65	; 0x41
 800588a:	fa00 f203 	lsl.w	r2, r0, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005896:	4b29      	ldr	r3, [pc, #164]	; (800593c <HAL_ADC_ConfigChannel+0x250>)
 8005898:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a28      	ldr	r2, [pc, #160]	; (8005940 <HAL_ADC_ConfigChannel+0x254>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d10f      	bne.n	80058c4 <HAL_ADC_ConfigChannel+0x1d8>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b12      	cmp	r3, #18
 80058aa:	d10b      	bne.n	80058c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1d      	ldr	r2, [pc, #116]	; (8005940 <HAL_ADC_ConfigChannel+0x254>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d12b      	bne.n	8005926 <HAL_ADC_ConfigChannel+0x23a>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <HAL_ADC_ConfigChannel+0x258>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <HAL_ADC_ConfigChannel+0x1f4>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b11      	cmp	r3, #17
 80058de:	d122      	bne.n	8005926 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a11      	ldr	r2, [pc, #68]	; (8005944 <HAL_ADC_ConfigChannel+0x258>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d111      	bne.n	8005926 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005902:	4b11      	ldr	r3, [pc, #68]	; (8005948 <HAL_ADC_ConfigChannel+0x25c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a11      	ldr	r2, [pc, #68]	; (800594c <HAL_ADC_ConfigChannel+0x260>)
 8005908:	fba2 2303 	umull	r2, r3, r2, r3
 800590c:	0c9a      	lsrs	r2, r3, #18
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005918:	e002      	b.n	8005920 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	3b01      	subs	r3, #1
 800591e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f9      	bne.n	800591a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	40012300 	.word	0x40012300
 8005940:	40012000 	.word	0x40012000
 8005944:	10000012 	.word	0x10000012
 8005948:	20000228 	.word	0x20000228
 800594c:	431bde83 	.word	0x431bde83

08005950 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005958:	4b79      	ldr	r3, [pc, #484]	; (8005b40 <ADC_Init+0x1f0>)
 800595a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	431a      	orrs	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005984:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6859      	ldr	r1, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	021a      	lsls	r2, r3, #8
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80059a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6859      	ldr	r1, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6899      	ldr	r1, [r3, #8]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e2:	4a58      	ldr	r2, [pc, #352]	; (8005b44 <ADC_Init+0x1f4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d022      	beq.n	8005a2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6899      	ldr	r1, [r3, #8]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6899      	ldr	r1, [r3, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	609a      	str	r2, [r3, #8]
 8005a2c:	e00f      	b.n	8005a4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0202 	bic.w	r2, r2, #2
 8005a5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6899      	ldr	r1, [r3, #8]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	7e1b      	ldrb	r3, [r3, #24]
 8005a68:	005a      	lsls	r2, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01b      	beq.n	8005ab4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005a9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6859      	ldr	r1, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	035a      	lsls	r2, r3, #13
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
 8005ab2:	e007      	b.n	8005ac4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ac2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	051a      	lsls	r2, r3, #20
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005af8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6899      	ldr	r1, [r3, #8]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b06:	025a      	lsls	r2, r3, #9
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6899      	ldr	r1, [r3, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	029a      	lsls	r2, r3, #10
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	609a      	str	r2, [r3, #8]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	40012300 	.word	0x40012300
 8005b44:	0f000001 	.word	0x0f000001

08005b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b58:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <__NVIC_SetPriorityGrouping+0x44>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b64:	4013      	ands	r3, r2
 8005b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b7a:	4a04      	ldr	r2, [pc, #16]	; (8005b8c <__NVIC_SetPriorityGrouping+0x44>)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	60d3      	str	r3, [r2, #12]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	e000ed00 	.word	0xe000ed00

08005b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b94:	4b04      	ldr	r3, [pc, #16]	; (8005ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	0a1b      	lsrs	r3, r3, #8
 8005b9a:	f003 0307 	and.w	r3, r3, #7
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	e000ed00 	.word	0xe000ed00

08005bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	db0b      	blt.n	8005bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	f003 021f 	and.w	r2, r3, #31
 8005bc4:	4907      	ldr	r1, [pc, #28]	; (8005be4 <__NVIC_EnableIRQ+0x38>)
 8005bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	2001      	movs	r0, #1
 8005bce:	fa00 f202 	lsl.w	r2, r0, r2
 8005bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	e000e100 	.word	0xe000e100

08005be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	6039      	str	r1, [r7, #0]
 8005bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	db0a      	blt.n	8005c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	490c      	ldr	r1, [pc, #48]	; (8005c34 <__NVIC_SetPriority+0x4c>)
 8005c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c06:	0112      	lsls	r2, r2, #4
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c10:	e00a      	b.n	8005c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	4908      	ldr	r1, [pc, #32]	; (8005c38 <__NVIC_SetPriority+0x50>)
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	3b04      	subs	r3, #4
 8005c20:	0112      	lsls	r2, r2, #4
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	440b      	add	r3, r1
 8005c26:	761a      	strb	r2, [r3, #24]
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	e000e100 	.word	0xe000e100
 8005c38:	e000ed00 	.word	0xe000ed00

08005c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b089      	sub	sp, #36	; 0x24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f1c3 0307 	rsb	r3, r3, #7
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	bf28      	it	cs
 8005c5a:	2304      	movcs	r3, #4
 8005c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	3304      	adds	r3, #4
 8005c62:	2b06      	cmp	r3, #6
 8005c64:	d902      	bls.n	8005c6c <NVIC_EncodePriority+0x30>
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	3b03      	subs	r3, #3
 8005c6a:	e000      	b.n	8005c6e <NVIC_EncodePriority+0x32>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c70:	f04f 32ff 	mov.w	r2, #4294967295
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	43da      	mvns	r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	401a      	ands	r2, r3
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c84:	f04f 31ff 	mov.w	r1, #4294967295
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8e:	43d9      	mvns	r1, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c94:	4313      	orrs	r3, r2
         );
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3724      	adds	r7, #36	; 0x24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
	...

08005ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cb4:	d301      	bcc.n	8005cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e00f      	b.n	8005cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cba:	4a0a      	ldr	r2, [pc, #40]	; (8005ce4 <SysTick_Config+0x40>)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cc2:	210f      	movs	r1, #15
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc8:	f7ff ff8e 	bl	8005be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ccc:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <SysTick_Config+0x40>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cd2:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <SysTick_Config+0x40>)
 8005cd4:	2207      	movs	r2, #7
 8005cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	e000e010 	.word	0xe000e010

08005ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ff29 	bl	8005b48 <__NVIC_SetPriorityGrouping>
}
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b086      	sub	sp, #24
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	4603      	mov	r3, r0
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
 8005d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d10:	f7ff ff3e 	bl	8005b90 <__NVIC_GetPriorityGrouping>
 8005d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	6978      	ldr	r0, [r7, #20]
 8005d1c:	f7ff ff8e 	bl	8005c3c <NVIC_EncodePriority>
 8005d20:	4602      	mov	r2, r0
 8005d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d26:	4611      	mov	r1, r2
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff ff5d 	bl	8005be8 <__NVIC_SetPriority>
}
 8005d2e:	bf00      	nop
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b082      	sub	sp, #8
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff ff31 	bl	8005bac <__NVIC_EnableIRQ>
}
 8005d4a:	bf00      	nop
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b082      	sub	sp, #8
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff ffa2 	bl	8005ca4 <SysTick_Config>
 8005d60:	4603      	mov	r3, r0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005d78:	f7ff fc44 	bl	8005604 <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e099      	b.n	8005ebc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0201 	bic.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005da8:	e00f      	b.n	8005dca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005daa:	f7ff fc2b 	bl	8005604 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b05      	cmp	r3, #5
 8005db6:	d908      	bls.n	8005dca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2203      	movs	r2, #3
 8005dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e078      	b.n	8005ebc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e8      	bne.n	8005daa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4b38      	ldr	r3, [pc, #224]	; (8005ec4 <HAL_DMA_Init+0x158>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d107      	bne.n	8005e34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f023 0307 	bic.w	r3, r3, #7
 8005e4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d117      	bne.n	8005e8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00e      	beq.n	8005e8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fb0d 	bl	8006490 <DMA_CheckFifoParam>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d008      	beq.n	8005e8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2240      	movs	r2, #64	; 0x40
 8005e80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e016      	b.n	8005ebc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fac4 	bl	8006424 <DMA_CalcBaseAndBitshift>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea4:	223f      	movs	r2, #63	; 0x3f
 8005ea6:	409a      	lsls	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	f010803f 	.word	0xf010803f

08005ec8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ede:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <HAL_DMA_Start_IT+0x26>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e040      	b.n	8005f70 <HAL_DMA_Start_IT+0xa8>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d12f      	bne.n	8005f62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2202      	movs	r2, #2
 8005f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	68b9      	ldr	r1, [r7, #8]
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 fa56 	bl	80063c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f20:	223f      	movs	r2, #63	; 0x3f
 8005f22:	409a      	lsls	r2, r3
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0216 	orr.w	r2, r2, #22
 8005f36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d007      	beq.n	8005f50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0208 	orr.w	r2, r2, #8
 8005f4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0201 	orr.w	r2, r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	e005      	b.n	8005f6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005f86:	f7ff fb3d 	bl	8005604 <HAL_GetTick>
 8005f8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d008      	beq.n	8005faa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2280      	movs	r2, #128	; 0x80
 8005f9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e052      	b.n	8006050 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0216 	bic.w	r2, r2, #22
 8005fb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	695a      	ldr	r2, [r3, #20]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d103      	bne.n	8005fda <HAL_DMA_Abort+0x62>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d007      	beq.n	8005fea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0208 	bic.w	r2, r2, #8
 8005fe8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0201 	bic.w	r2, r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ffa:	e013      	b.n	8006024 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ffc:	f7ff fb02 	bl	8005604 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b05      	cmp	r3, #5
 8006008:	d90c      	bls.n	8006024 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2220      	movs	r2, #32
 800600e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2203      	movs	r2, #3
 8006014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e015      	b.n	8006050 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e4      	bne.n	8005ffc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006036:	223f      	movs	r2, #63	; 0x3f
 8006038:	409a      	lsls	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d004      	beq.n	8006076 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2280      	movs	r2, #128	; 0x80
 8006070:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e00c      	b.n	8006090 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2205      	movs	r2, #5
 800607a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0201 	bic.w	r2, r2, #1
 800608c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060a8:	4b8e      	ldr	r3, [pc, #568]	; (80062e4 <HAL_DMA_IRQHandler+0x248>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a8e      	ldr	r2, [pc, #568]	; (80062e8 <HAL_DMA_IRQHandler+0x24c>)
 80060ae:	fba2 2303 	umull	r2, r3, r2, r3
 80060b2:	0a9b      	lsrs	r3, r3, #10
 80060b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c6:	2208      	movs	r2, #8
 80060c8:	409a      	lsls	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4013      	ands	r3, r2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d01a      	beq.n	8006108 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d013      	beq.n	8006108 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0204 	bic.w	r2, r2, #4
 80060ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f4:	2208      	movs	r2, #8
 80060f6:	409a      	lsls	r2, r3
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006100:	f043 0201 	orr.w	r2, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800610c:	2201      	movs	r2, #1
 800610e:	409a      	lsls	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4013      	ands	r3, r2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d012      	beq.n	800613e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00b      	beq.n	800613e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800612a:	2201      	movs	r2, #1
 800612c:	409a      	lsls	r2, r3
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006136:	f043 0202 	orr.w	r2, r3, #2
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006142:	2204      	movs	r2, #4
 8006144:	409a      	lsls	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4013      	ands	r3, r2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d012      	beq.n	8006174 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00b      	beq.n	8006174 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006160:	2204      	movs	r2, #4
 8006162:	409a      	lsls	r2, r3
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616c:	f043 0204 	orr.w	r2, r3, #4
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006178:	2210      	movs	r2, #16
 800617a:	409a      	lsls	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4013      	ands	r3, r2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d043      	beq.n	800620c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d03c      	beq.n	800620c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006196:	2210      	movs	r2, #16
 8006198:	409a      	lsls	r2, r3
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d018      	beq.n	80061de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d108      	bne.n	80061cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d024      	beq.n	800620c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	4798      	blx	r3
 80061ca:	e01f      	b.n	800620c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01b      	beq.n	800620c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	4798      	blx	r3
 80061dc:	e016      	b.n	800620c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d107      	bne.n	80061fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0208 	bic.w	r2, r2, #8
 80061fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d003      	beq.n	800620c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006210:	2220      	movs	r2, #32
 8006212:	409a      	lsls	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4013      	ands	r3, r2
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 808f 	beq.w	800633c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0310 	and.w	r3, r3, #16
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 8087 	beq.w	800633c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006232:	2220      	movs	r2, #32
 8006234:	409a      	lsls	r2, r3
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b05      	cmp	r3, #5
 8006244:	d136      	bne.n	80062b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0216 	bic.w	r2, r2, #22
 8006254:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695a      	ldr	r2, [r3, #20]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006264:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d103      	bne.n	8006276 <HAL_DMA_IRQHandler+0x1da>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006272:	2b00      	cmp	r3, #0
 8006274:	d007      	beq.n	8006286 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0208 	bic.w	r2, r2, #8
 8006284:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628a:	223f      	movs	r2, #63	; 0x3f
 800628c:	409a      	lsls	r2, r3
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d07e      	beq.n	80063a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	4798      	blx	r3
        }
        return;
 80062b2:	e079      	b.n	80063a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d01d      	beq.n	80062fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10d      	bne.n	80062ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d031      	beq.n	800633c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	4798      	blx	r3
 80062e0:	e02c      	b.n	800633c <HAL_DMA_IRQHandler+0x2a0>
 80062e2:	bf00      	nop
 80062e4:	20000228 	.word	0x20000228
 80062e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d023      	beq.n	800633c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	4798      	blx	r3
 80062fc:	e01e      	b.n	800633c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10f      	bne.n	800632c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0210 	bic.w	r2, r2, #16
 800631a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006340:	2b00      	cmp	r3, #0
 8006342:	d032      	beq.n	80063aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d022      	beq.n	8006396 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2205      	movs	r2, #5
 8006354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0201 	bic.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	3301      	adds	r3, #1
 800636c:	60bb      	str	r3, [r7, #8]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	429a      	cmp	r2, r3
 8006372:	d307      	bcc.n	8006384 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1f2      	bne.n	8006368 <HAL_DMA_IRQHandler+0x2cc>
 8006382:	e000      	b.n	8006386 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006384:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	4798      	blx	r3
 80063a6:	e000      	b.n	80063aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80063a8:	bf00      	nop
    }
  }
}
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
 80063d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2b40      	cmp	r3, #64	; 0x40
 80063f4:	d108      	bne.n	8006408 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006406:	e007      	b.n	8006418 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	60da      	str	r2, [r3, #12]
}
 8006418:	bf00      	nop
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	3b10      	subs	r3, #16
 8006434:	4a14      	ldr	r2, [pc, #80]	; (8006488 <DMA_CalcBaseAndBitshift+0x64>)
 8006436:	fba2 2303 	umull	r2, r3, r2, r3
 800643a:	091b      	lsrs	r3, r3, #4
 800643c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800643e:	4a13      	ldr	r2, [pc, #76]	; (800648c <DMA_CalcBaseAndBitshift+0x68>)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b03      	cmp	r3, #3
 8006450:	d909      	bls.n	8006466 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800645a:	f023 0303 	bic.w	r3, r3, #3
 800645e:	1d1a      	adds	r2, r3, #4
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	659a      	str	r2, [r3, #88]	; 0x58
 8006464:	e007      	b.n	8006476 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800646e:	f023 0303 	bic.w	r3, r3, #3
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	aaaaaaab 	.word	0xaaaaaaab
 800648c:	080116dc 	.word	0x080116dc

08006490 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d11f      	bne.n	80064ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d856      	bhi.n	800655e <DMA_CheckFifoParam+0xce>
 80064b0:	a201      	add	r2, pc, #4	; (adr r2, 80064b8 <DMA_CheckFifoParam+0x28>)
 80064b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b6:	bf00      	nop
 80064b8:	080064c9 	.word	0x080064c9
 80064bc:	080064db 	.word	0x080064db
 80064c0:	080064c9 	.word	0x080064c9
 80064c4:	0800655f 	.word	0x0800655f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d046      	beq.n	8006562 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064d8:	e043      	b.n	8006562 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064e2:	d140      	bne.n	8006566 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064e8:	e03d      	b.n	8006566 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f2:	d121      	bne.n	8006538 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d837      	bhi.n	800656a <DMA_CheckFifoParam+0xda>
 80064fa:	a201      	add	r2, pc, #4	; (adr r2, 8006500 <DMA_CheckFifoParam+0x70>)
 80064fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006500:	08006511 	.word	0x08006511
 8006504:	08006517 	.word	0x08006517
 8006508:	08006511 	.word	0x08006511
 800650c:	08006529 	.word	0x08006529
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	73fb      	strb	r3, [r7, #15]
      break;
 8006514:	e030      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d025      	beq.n	800656e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006526:	e022      	b.n	800656e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006530:	d11f      	bne.n	8006572 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006536:	e01c      	b.n	8006572 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d903      	bls.n	8006546 <DMA_CheckFifoParam+0xb6>
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b03      	cmp	r3, #3
 8006542:	d003      	beq.n	800654c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006544:	e018      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	73fb      	strb	r3, [r7, #15]
      break;
 800654a:	e015      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00e      	beq.n	8006576 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	73fb      	strb	r3, [r7, #15]
      break;
 800655c:	e00b      	b.n	8006576 <DMA_CheckFifoParam+0xe6>
      break;
 800655e:	bf00      	nop
 8006560:	e00a      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
      break;
 8006562:	bf00      	nop
 8006564:	e008      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
      break;
 8006566:	bf00      	nop
 8006568:	e006      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
      break;
 800656a:	bf00      	nop
 800656c:	e004      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
      break;
 800656e:	bf00      	nop
 8006570:	e002      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
      break;   
 8006572:	bf00      	nop
 8006574:	e000      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
      break;
 8006576:	bf00      	nop
    }
  } 
  
  return status; 
 8006578:	7bfb      	ldrb	r3, [r7, #15]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop

08006588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006588:	b480      	push	{r7}
 800658a:	b089      	sub	sp, #36	; 0x24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006592:	2300      	movs	r3, #0
 8006594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006596:	2300      	movs	r3, #0
 8006598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800659a:	2300      	movs	r3, #0
 800659c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800659e:	2300      	movs	r3, #0
 80065a0:	61fb      	str	r3, [r7, #28]
 80065a2:	e159      	b.n	8006858 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065a4:	2201      	movs	r2, #1
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4013      	ands	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	429a      	cmp	r2, r3
 80065be:	f040 8148 	bne.w	8006852 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d005      	beq.n	80065da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d130      	bne.n	800663c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	2203      	movs	r2, #3
 80065e6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ea:	43db      	mvns	r3, r3
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	4013      	ands	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	4313      	orrs	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006610:	2201      	movs	r2, #1
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	43db      	mvns	r3, r3
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	4013      	ands	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	091b      	lsrs	r3, r3, #4
 8006626:	f003 0201 	and.w	r2, r3, #1
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	fa02 f303 	lsl.w	r3, r2, r3
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	4313      	orrs	r3, r2
 8006634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	2b03      	cmp	r3, #3
 8006646:	d017      	beq.n	8006678 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	2203      	movs	r2, #3
 8006654:	fa02 f303 	lsl.w	r3, r2, r3
 8006658:	43db      	mvns	r3, r3
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	4013      	ands	r3, r2
 800665e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	fa02 f303 	lsl.w	r3, r2, r3
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	4313      	orrs	r3, r2
 8006670:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f003 0303 	and.w	r3, r3, #3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d123      	bne.n	80066cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	08da      	lsrs	r2, r3, #3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3208      	adds	r2, #8
 800668c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006690:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	f003 0307 	and.w	r3, r3, #7
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	220f      	movs	r2, #15
 800669c:	fa02 f303 	lsl.w	r3, r2, r3
 80066a0:	43db      	mvns	r3, r3
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	4013      	ands	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	691a      	ldr	r2, [r3, #16]
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	fa02 f303 	lsl.w	r3, r2, r3
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	08da      	lsrs	r2, r3, #3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3208      	adds	r2, #8
 80066c6:	69b9      	ldr	r1, [r7, #24]
 80066c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	2203      	movs	r2, #3
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	43db      	mvns	r3, r3
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	4013      	ands	r3, r2
 80066e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f003 0203 	and.w	r2, r3, #3
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	fa02 f303 	lsl.w	r3, r2, r3
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 80a2 	beq.w	8006852 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	4b57      	ldr	r3, [pc, #348]	; (8006870 <HAL_GPIO_Init+0x2e8>)
 8006714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006716:	4a56      	ldr	r2, [pc, #344]	; (8006870 <HAL_GPIO_Init+0x2e8>)
 8006718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800671c:	6453      	str	r3, [r2, #68]	; 0x44
 800671e:	4b54      	ldr	r3, [pc, #336]	; (8006870 <HAL_GPIO_Init+0x2e8>)
 8006720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800672a:	4a52      	ldr	r2, [pc, #328]	; (8006874 <HAL_GPIO_Init+0x2ec>)
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	089b      	lsrs	r3, r3, #2
 8006730:	3302      	adds	r3, #2
 8006732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	220f      	movs	r2, #15
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	43db      	mvns	r3, r3
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	4013      	ands	r3, r2
 800674c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a49      	ldr	r2, [pc, #292]	; (8006878 <HAL_GPIO_Init+0x2f0>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d019      	beq.n	800678a <HAL_GPIO_Init+0x202>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a48      	ldr	r2, [pc, #288]	; (800687c <HAL_GPIO_Init+0x2f4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d013      	beq.n	8006786 <HAL_GPIO_Init+0x1fe>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a47      	ldr	r2, [pc, #284]	; (8006880 <HAL_GPIO_Init+0x2f8>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00d      	beq.n	8006782 <HAL_GPIO_Init+0x1fa>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a46      	ldr	r2, [pc, #280]	; (8006884 <HAL_GPIO_Init+0x2fc>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d007      	beq.n	800677e <HAL_GPIO_Init+0x1f6>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a45      	ldr	r2, [pc, #276]	; (8006888 <HAL_GPIO_Init+0x300>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d101      	bne.n	800677a <HAL_GPIO_Init+0x1f2>
 8006776:	2304      	movs	r3, #4
 8006778:	e008      	b.n	800678c <HAL_GPIO_Init+0x204>
 800677a:	2307      	movs	r3, #7
 800677c:	e006      	b.n	800678c <HAL_GPIO_Init+0x204>
 800677e:	2303      	movs	r3, #3
 8006780:	e004      	b.n	800678c <HAL_GPIO_Init+0x204>
 8006782:	2302      	movs	r3, #2
 8006784:	e002      	b.n	800678c <HAL_GPIO_Init+0x204>
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <HAL_GPIO_Init+0x204>
 800678a:	2300      	movs	r3, #0
 800678c:	69fa      	ldr	r2, [r7, #28]
 800678e:	f002 0203 	and.w	r2, r2, #3
 8006792:	0092      	lsls	r2, r2, #2
 8006794:	4093      	lsls	r3, r2
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	4313      	orrs	r3, r2
 800679a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800679c:	4935      	ldr	r1, [pc, #212]	; (8006874 <HAL_GPIO_Init+0x2ec>)
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	089b      	lsrs	r3, r3, #2
 80067a2:	3302      	adds	r3, #2
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067aa:	4b38      	ldr	r3, [pc, #224]	; (800688c <HAL_GPIO_Init+0x304>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	43db      	mvns	r3, r3
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	4013      	ands	r3, r2
 80067b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067ce:	4a2f      	ldr	r2, [pc, #188]	; (800688c <HAL_GPIO_Init+0x304>)
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067d4:	4b2d      	ldr	r3, [pc, #180]	; (800688c <HAL_GPIO_Init+0x304>)
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	43db      	mvns	r3, r3
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	4013      	ands	r3, r2
 80067e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d003      	beq.n	80067f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067f8:	4a24      	ldr	r2, [pc, #144]	; (800688c <HAL_GPIO_Init+0x304>)
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80067fe:	4b23      	ldr	r3, [pc, #140]	; (800688c <HAL_GPIO_Init+0x304>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	43db      	mvns	r3, r3
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	4013      	ands	r3, r2
 800680c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006822:	4a1a      	ldr	r2, [pc, #104]	; (800688c <HAL_GPIO_Init+0x304>)
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006828:	4b18      	ldr	r3, [pc, #96]	; (800688c <HAL_GPIO_Init+0x304>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	43db      	mvns	r3, r3
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	4013      	ands	r3, r2
 8006836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800684c:	4a0f      	ldr	r2, [pc, #60]	; (800688c <HAL_GPIO_Init+0x304>)
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	3301      	adds	r3, #1
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	2b0f      	cmp	r3, #15
 800685c:	f67f aea2 	bls.w	80065a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006860:	bf00      	nop
 8006862:	bf00      	nop
 8006864:	3724      	adds	r7, #36	; 0x24
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	40023800 	.word	0x40023800
 8006874:	40013800 	.word	0x40013800
 8006878:	40020000 	.word	0x40020000
 800687c:	40020400 	.word	0x40020400
 8006880:	40020800 	.word	0x40020800
 8006884:	40020c00 	.word	0x40020c00
 8006888:	40021000 	.word	0x40021000
 800688c:	40013c00 	.word	0x40013c00

08006890 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	887b      	ldrh	r3, [r7, #2]
 80068a2:	4013      	ands	r3, r2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068a8:	2301      	movs	r3, #1
 80068aa:	73fb      	strb	r3, [r7, #15]
 80068ac:	e001      	b.n	80068b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	807b      	strh	r3, [r7, #2]
 80068cc:	4613      	mov	r3, r2
 80068ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068d0:	787b      	ldrb	r3, [r7, #1]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068d6:	887a      	ldrh	r2, [r7, #2]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80068dc:	e003      	b.n	80068e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80068de:	887b      	ldrh	r3, [r7, #2]
 80068e0:	041a      	lsls	r2, r3, #16
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	619a      	str	r2, [r3, #24]
}
 80068e6:	bf00      	nop
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
	...

080068f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80068fe:	4b08      	ldr	r3, [pc, #32]	; (8006920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006900:	695a      	ldr	r2, [r3, #20]
 8006902:	88fb      	ldrh	r3, [r7, #6]
 8006904:	4013      	ands	r3, r2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d006      	beq.n	8006918 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800690a:	4a05      	ldr	r2, [pc, #20]	; (8006920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800690c:	88fb      	ldrh	r3, [r7, #6]
 800690e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006910:	88fb      	ldrh	r3, [r7, #6]
 8006912:	4618      	mov	r0, r3
 8006914:	f7fd fc92 	bl	800423c <HAL_GPIO_EXTI_Callback>
  }
}
 8006918:	bf00      	nop
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	40013c00 	.word	0x40013c00

08006924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e12b      	b.n	8006b8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fb fbb4 	bl	80020b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2224      	movs	r2, #36	; 0x24
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0201 	bic.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006976:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006986:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006988:	f001 f888 	bl	8007a9c <HAL_RCC_GetPCLK1Freq>
 800698c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	4a81      	ldr	r2, [pc, #516]	; (8006b98 <HAL_I2C_Init+0x274>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d807      	bhi.n	80069a8 <HAL_I2C_Init+0x84>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4a80      	ldr	r2, [pc, #512]	; (8006b9c <HAL_I2C_Init+0x278>)
 800699c:	4293      	cmp	r3, r2
 800699e:	bf94      	ite	ls
 80069a0:	2301      	movls	r3, #1
 80069a2:	2300      	movhi	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	e006      	b.n	80069b6 <HAL_I2C_Init+0x92>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4a7d      	ldr	r2, [pc, #500]	; (8006ba0 <HAL_I2C_Init+0x27c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	bf94      	ite	ls
 80069b0:	2301      	movls	r3, #1
 80069b2:	2300      	movhi	r3, #0
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e0e7      	b.n	8006b8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4a78      	ldr	r2, [pc, #480]	; (8006ba4 <HAL_I2C_Init+0x280>)
 80069c2:	fba2 2303 	umull	r2, r3, r2, r3
 80069c6:	0c9b      	lsrs	r3, r3, #18
 80069c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	4a6a      	ldr	r2, [pc, #424]	; (8006b98 <HAL_I2C_Init+0x274>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d802      	bhi.n	80069f8 <HAL_I2C_Init+0xd4>
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	3301      	adds	r3, #1
 80069f6:	e009      	b.n	8006a0c <HAL_I2C_Init+0xe8>
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80069fe:	fb02 f303 	mul.w	r3, r2, r3
 8006a02:	4a69      	ldr	r2, [pc, #420]	; (8006ba8 <HAL_I2C_Init+0x284>)
 8006a04:	fba2 2303 	umull	r2, r3, r2, r3
 8006a08:	099b      	lsrs	r3, r3, #6
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6812      	ldr	r2, [r2, #0]
 8006a10:	430b      	orrs	r3, r1
 8006a12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006a1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	495c      	ldr	r1, [pc, #368]	; (8006b98 <HAL_I2C_Init+0x274>)
 8006a28:	428b      	cmp	r3, r1
 8006a2a:	d819      	bhi.n	8006a60 <HAL_I2C_Init+0x13c>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	1e59      	subs	r1, r3, #1
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a3a:	1c59      	adds	r1, r3, #1
 8006a3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a40:	400b      	ands	r3, r1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <HAL_I2C_Init+0x138>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	1e59      	subs	r1, r3, #1
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a54:	3301      	adds	r3, #1
 8006a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a5a:	e051      	b.n	8006b00 <HAL_I2C_Init+0x1dc>
 8006a5c:	2304      	movs	r3, #4
 8006a5e:	e04f      	b.n	8006b00 <HAL_I2C_Init+0x1dc>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d111      	bne.n	8006a8c <HAL_I2C_Init+0x168>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	1e58      	subs	r0, r3, #1
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6859      	ldr	r1, [r3, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	440b      	add	r3, r1
 8006a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	bf0c      	ite	eq
 8006a84:	2301      	moveq	r3, #1
 8006a86:	2300      	movne	r3, #0
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	e012      	b.n	8006ab2 <HAL_I2C_Init+0x18e>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	1e58      	subs	r0, r3, #1
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6859      	ldr	r1, [r3, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	440b      	add	r3, r1
 8006a9a:	0099      	lsls	r1, r3, #2
 8006a9c:	440b      	add	r3, r1
 8006a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	bf0c      	ite	eq
 8006aac:	2301      	moveq	r3, #1
 8006aae:	2300      	movne	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <HAL_I2C_Init+0x196>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e022      	b.n	8006b00 <HAL_I2C_Init+0x1dc>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10e      	bne.n	8006ae0 <HAL_I2C_Init+0x1bc>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	1e58      	subs	r0, r3, #1
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6859      	ldr	r1, [r3, #4]
 8006aca:	460b      	mov	r3, r1
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	440b      	add	r3, r1
 8006ad0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ade:	e00f      	b.n	8006b00 <HAL_I2C_Init+0x1dc>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	1e58      	subs	r0, r3, #1
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6859      	ldr	r1, [r3, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	0099      	lsls	r1, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006af6:	3301      	adds	r3, #1
 8006af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b00:	6879      	ldr	r1, [r7, #4]
 8006b02:	6809      	ldr	r1, [r1, #0]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	69da      	ldr	r2, [r3, #28]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	6911      	ldr	r1, [r2, #16]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	68d2      	ldr	r2, [r2, #12]
 8006b3a:	4311      	orrs	r1, r2
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	6812      	ldr	r2, [r2, #0]
 8006b40:	430b      	orrs	r3, r1
 8006b42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	695a      	ldr	r2, [r3, #20]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0201 	orr.w	r2, r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	000186a0 	.word	0x000186a0
 8006b9c:	001e847f 	.word	0x001e847f
 8006ba0:	003d08ff 	.word	0x003d08ff
 8006ba4:	431bde83 	.word	0x431bde83
 8006ba8:	10624dd3 	.word	0x10624dd3

08006bac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b088      	sub	sp, #32
 8006bb0:	af02      	add	r7, sp, #8
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	607a      	str	r2, [r7, #4]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	460b      	mov	r3, r1
 8006bba:	817b      	strh	r3, [r7, #10]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bc0:	f7fe fd20 	bl	8005604 <HAL_GetTick>
 8006bc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b20      	cmp	r3, #32
 8006bd0:	f040 80e0 	bne.w	8006d94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	2319      	movs	r3, #25
 8006bda:	2201      	movs	r2, #1
 8006bdc:	4970      	ldr	r1, [pc, #448]	; (8006da0 <HAL_I2C_Master_Transmit+0x1f4>)
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 f964 	bl	8006eac <I2C_WaitOnFlagUntilTimeout>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006bea:	2302      	movs	r3, #2
 8006bec:	e0d3      	b.n	8006d96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d101      	bne.n	8006bfc <HAL_I2C_Master_Transmit+0x50>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e0cc      	b.n	8006d96 <HAL_I2C_Master_Transmit+0x1ea>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d007      	beq.n	8006c22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f042 0201 	orr.w	r2, r2, #1
 8006c20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2221      	movs	r2, #33	; 0x21
 8006c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2210      	movs	r2, #16
 8006c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	893a      	ldrh	r2, [r7, #8]
 8006c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4a50      	ldr	r2, [pc, #320]	; (8006da4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006c62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006c64:	8979      	ldrh	r1, [r7, #10]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	6a3a      	ldr	r2, [r7, #32]
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 f89c 	bl	8006da8 <I2C_MasterRequestWrite>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e08d      	b.n	8006d96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	613b      	str	r3, [r7, #16]
 8006c8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006c90:	e066      	b.n	8006d60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	6a39      	ldr	r1, [r7, #32]
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 f9de 	bl	8007058 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00d      	beq.n	8006cbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	d107      	bne.n	8006cba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e06b      	b.n	8006d96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	781a      	ldrb	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b04      	cmp	r3, #4
 8006cfa:	d11b      	bne.n	8006d34 <HAL_I2C_Master_Transmit+0x188>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d017      	beq.n	8006d34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	781a      	ldrb	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	6a39      	ldr	r1, [r7, #32]
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f9ce 	bl	80070da <I2C_WaitOnBTFFlagUntilTimeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00d      	beq.n	8006d60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	d107      	bne.n	8006d5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e01a      	b.n	8006d96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d194      	bne.n	8006c92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	e000      	b.n	8006d96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006d94:	2302      	movs	r3, #2
  }
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	00100002 	.word	0x00100002
 8006da4:	ffff0000 	.word	0xffff0000

08006da8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af02      	add	r7, sp, #8
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	607a      	str	r2, [r7, #4]
 8006db2:	603b      	str	r3, [r7, #0]
 8006db4:	460b      	mov	r3, r1
 8006db6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b08      	cmp	r3, #8
 8006dc2:	d006      	beq.n	8006dd2 <I2C_MasterRequestWrite+0x2a>
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d003      	beq.n	8006dd2 <I2C_MasterRequestWrite+0x2a>
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006dd0:	d108      	bne.n	8006de4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	e00b      	b.n	8006dfc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de8:	2b12      	cmp	r3, #18
 8006dea:	d107      	bne.n	8006dfc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 f84f 	bl	8006eac <I2C_WaitOnFlagUntilTimeout>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00d      	beq.n	8006e30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e22:	d103      	bne.n	8006e2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e035      	b.n	8006e9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e38:	d108      	bne.n	8006e4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e3a:	897b      	ldrh	r3, [r7, #10]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	461a      	mov	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e48:	611a      	str	r2, [r3, #16]
 8006e4a:	e01b      	b.n	8006e84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006e4c:	897b      	ldrh	r3, [r7, #10]
 8006e4e:	11db      	asrs	r3, r3, #7
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f003 0306 	and.w	r3, r3, #6
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	f063 030f 	orn	r3, r3, #15
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	490e      	ldr	r1, [pc, #56]	; (8006ea4 <I2C_MasterRequestWrite+0xfc>)
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 f875 	bl	8006f5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e010      	b.n	8006e9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006e7a:	897b      	ldrh	r3, [r7, #10]
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	4907      	ldr	r1, [pc, #28]	; (8006ea8 <I2C_MasterRequestWrite+0x100>)
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 f865 	bl	8006f5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e000      	b.n	8006e9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	00010008 	.word	0x00010008
 8006ea8:	00010002 	.word	0x00010002

08006eac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ebc:	e025      	b.n	8006f0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec4:	d021      	beq.n	8006f0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec6:	f7fe fb9d 	bl	8005604 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d302      	bcc.n	8006edc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d116      	bne.n	8006f0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	f043 0220 	orr.w	r2, r3, #32
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e023      	b.n	8006f52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	0c1b      	lsrs	r3, r3, #16
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d10d      	bne.n	8006f30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	43da      	mvns	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	bf0c      	ite	eq
 8006f26:	2301      	moveq	r3, #1
 8006f28:	2300      	movne	r3, #0
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	e00c      	b.n	8006f4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	43da      	mvns	r2, r3
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	bf0c      	ite	eq
 8006f42:	2301      	moveq	r3, #1
 8006f44:	2300      	movne	r3, #0
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	79fb      	ldrb	r3, [r7, #7]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d0b6      	beq.n	8006ebe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	60f8      	str	r0, [r7, #12]
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	607a      	str	r2, [r7, #4]
 8006f66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f68:	e051      	b.n	800700e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f78:	d123      	bne.n	8006fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	f043 0204 	orr.w	r2, r3, #4
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e046      	b.n	8007050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc8:	d021      	beq.n	800700e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fca:	f7fe fb1b 	bl	8005604 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d302      	bcc.n	8006fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d116      	bne.n	800700e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	f043 0220 	orr.w	r2, r3, #32
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e020      	b.n	8007050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	0c1b      	lsrs	r3, r3, #16
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b01      	cmp	r3, #1
 8007016:	d10c      	bne.n	8007032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	43da      	mvns	r2, r3
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4013      	ands	r3, r2
 8007024:	b29b      	uxth	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	bf14      	ite	ne
 800702a:	2301      	movne	r3, #1
 800702c:	2300      	moveq	r3, #0
 800702e:	b2db      	uxtb	r3, r3
 8007030:	e00b      	b.n	800704a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	43da      	mvns	r2, r3
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	4013      	ands	r3, r2
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	bf14      	ite	ne
 8007044:	2301      	movne	r3, #1
 8007046:	2300      	moveq	r3, #0
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d18d      	bne.n	8006f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007064:	e02d      	b.n	80070c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 f878 	bl	800715c <I2C_IsAcknowledgeFailed>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e02d      	b.n	80070d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707c:	d021      	beq.n	80070c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800707e:	f7fe fac1 	bl	8005604 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	429a      	cmp	r2, r3
 800708c:	d302      	bcc.n	8007094 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d116      	bne.n	80070c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	f043 0220 	orr.w	r2, r3, #32
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e007      	b.n	80070d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070cc:	2b80      	cmp	r3, #128	; 0x80
 80070ce:	d1ca      	bne.n	8007066 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070e6:	e02d      	b.n	8007144 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 f837 	bl	800715c <I2C_IsAcknowledgeFailed>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e02d      	b.n	8007154 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fe:	d021      	beq.n	8007144 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007100:	f7fe fa80 	bl	8005604 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	429a      	cmp	r2, r3
 800710e:	d302      	bcc.n	8007116 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d116      	bne.n	8007144 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2220      	movs	r2, #32
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007130:	f043 0220 	orr.w	r2, r3, #32
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e007      	b.n	8007154 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	2b04      	cmp	r3, #4
 8007150:	d1ca      	bne.n	80070e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800716e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007172:	d11b      	bne.n	80071ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800717c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007198:	f043 0204 	orr.w	r2, r3, #4
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e000      	b.n	80071ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
	...

080071bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e267      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d075      	beq.n	80072c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071da:	4b88      	ldr	r3, [pc, #544]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f003 030c 	and.w	r3, r3, #12
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	d00c      	beq.n	8007200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071e6:	4b85      	ldr	r3, [pc, #532]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071ee:	2b08      	cmp	r3, #8
 80071f0:	d112      	bne.n	8007218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071f2:	4b82      	ldr	r3, [pc, #520]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071fe:	d10b      	bne.n	8007218 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007200:	4b7e      	ldr	r3, [pc, #504]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d05b      	beq.n	80072c4 <HAL_RCC_OscConfig+0x108>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d157      	bne.n	80072c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e242      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007220:	d106      	bne.n	8007230 <HAL_RCC_OscConfig+0x74>
 8007222:	4b76      	ldr	r3, [pc, #472]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a75      	ldr	r2, [pc, #468]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 8007228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800722c:	6013      	str	r3, [r2, #0]
 800722e:	e01d      	b.n	800726c <HAL_RCC_OscConfig+0xb0>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007238:	d10c      	bne.n	8007254 <HAL_RCC_OscConfig+0x98>
 800723a:	4b70      	ldr	r3, [pc, #448]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a6f      	ldr	r2, [pc, #444]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 8007240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	4b6d      	ldr	r3, [pc, #436]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a6c      	ldr	r2, [pc, #432]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 800724c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	e00b      	b.n	800726c <HAL_RCC_OscConfig+0xb0>
 8007254:	4b69      	ldr	r3, [pc, #420]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a68      	ldr	r2, [pc, #416]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 800725a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	4b66      	ldr	r3, [pc, #408]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a65      	ldr	r2, [pc, #404]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 8007266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800726a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d013      	beq.n	800729c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007274:	f7fe f9c6 	bl	8005604 <HAL_GetTick>
 8007278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800727a:	e008      	b.n	800728e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800727c:	f7fe f9c2 	bl	8005604 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b64      	cmp	r3, #100	; 0x64
 8007288:	d901      	bls.n	800728e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e207      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800728e:	4b5b      	ldr	r3, [pc, #364]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d0f0      	beq.n	800727c <HAL_RCC_OscConfig+0xc0>
 800729a:	e014      	b.n	80072c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800729c:	f7fe f9b2 	bl	8005604 <HAL_GetTick>
 80072a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072a2:	e008      	b.n	80072b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072a4:	f7fe f9ae 	bl	8005604 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b64      	cmp	r3, #100	; 0x64
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e1f3      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072b6:	4b51      	ldr	r3, [pc, #324]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1f0      	bne.n	80072a4 <HAL_RCC_OscConfig+0xe8>
 80072c2:	e000      	b.n	80072c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d063      	beq.n	800739a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072d2:	4b4a      	ldr	r3, [pc, #296]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 030c 	and.w	r3, r3, #12
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00b      	beq.n	80072f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072de:	4b47      	ldr	r3, [pc, #284]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072e6:	2b08      	cmp	r3, #8
 80072e8:	d11c      	bne.n	8007324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072ea:	4b44      	ldr	r3, [pc, #272]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d116      	bne.n	8007324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072f6:	4b41      	ldr	r3, [pc, #260]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d005      	beq.n	800730e <HAL_RCC_OscConfig+0x152>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d001      	beq.n	800730e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e1c7      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800730e:	4b3b      	ldr	r3, [pc, #236]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	4937      	ldr	r1, [pc, #220]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 800731e:	4313      	orrs	r3, r2
 8007320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007322:	e03a      	b.n	800739a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d020      	beq.n	800736e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800732c:	4b34      	ldr	r3, [pc, #208]	; (8007400 <HAL_RCC_OscConfig+0x244>)
 800732e:	2201      	movs	r2, #1
 8007330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007332:	f7fe f967 	bl	8005604 <HAL_GetTick>
 8007336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007338:	e008      	b.n	800734c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800733a:	f7fe f963 	bl	8005604 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d901      	bls.n	800734c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e1a8      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800734c:	4b2b      	ldr	r3, [pc, #172]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b00      	cmp	r3, #0
 8007356:	d0f0      	beq.n	800733a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007358:	4b28      	ldr	r3, [pc, #160]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	4925      	ldr	r1, [pc, #148]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 8007368:	4313      	orrs	r3, r2
 800736a:	600b      	str	r3, [r1, #0]
 800736c:	e015      	b.n	800739a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800736e:	4b24      	ldr	r3, [pc, #144]	; (8007400 <HAL_RCC_OscConfig+0x244>)
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007374:	f7fe f946 	bl	8005604 <HAL_GetTick>
 8007378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800737a:	e008      	b.n	800738e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800737c:	f7fe f942 	bl	8005604 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d901      	bls.n	800738e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e187      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800738e:	4b1b      	ldr	r3, [pc, #108]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1f0      	bne.n	800737c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d036      	beq.n	8007414 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d016      	beq.n	80073dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073ae:	4b15      	ldr	r3, [pc, #84]	; (8007404 <HAL_RCC_OscConfig+0x248>)
 80073b0:	2201      	movs	r2, #1
 80073b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b4:	f7fe f926 	bl	8005604 <HAL_GetTick>
 80073b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ba:	e008      	b.n	80073ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073bc:	f7fe f922 	bl	8005604 <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d901      	bls.n	80073ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e167      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ce:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <HAL_RCC_OscConfig+0x240>)
 80073d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d0f0      	beq.n	80073bc <HAL_RCC_OscConfig+0x200>
 80073da:	e01b      	b.n	8007414 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073dc:	4b09      	ldr	r3, [pc, #36]	; (8007404 <HAL_RCC_OscConfig+0x248>)
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073e2:	f7fe f90f 	bl	8005604 <HAL_GetTick>
 80073e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073e8:	e00e      	b.n	8007408 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073ea:	f7fe f90b 	bl	8005604 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d907      	bls.n	8007408 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e150      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
 80073fc:	40023800 	.word	0x40023800
 8007400:	42470000 	.word	0x42470000
 8007404:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007408:	4b88      	ldr	r3, [pc, #544]	; (800762c <HAL_RCC_OscConfig+0x470>)
 800740a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1ea      	bne.n	80073ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 8097 	beq.w	8007550 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007422:	2300      	movs	r3, #0
 8007424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007426:	4b81      	ldr	r3, [pc, #516]	; (800762c <HAL_RCC_OscConfig+0x470>)
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10f      	bne.n	8007452 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007432:	2300      	movs	r3, #0
 8007434:	60bb      	str	r3, [r7, #8]
 8007436:	4b7d      	ldr	r3, [pc, #500]	; (800762c <HAL_RCC_OscConfig+0x470>)
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	4a7c      	ldr	r2, [pc, #496]	; (800762c <HAL_RCC_OscConfig+0x470>)
 800743c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007440:	6413      	str	r3, [r2, #64]	; 0x40
 8007442:	4b7a      	ldr	r3, [pc, #488]	; (800762c <HAL_RCC_OscConfig+0x470>)
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744a:	60bb      	str	r3, [r7, #8]
 800744c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800744e:	2301      	movs	r3, #1
 8007450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007452:	4b77      	ldr	r3, [pc, #476]	; (8007630 <HAL_RCC_OscConfig+0x474>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745a:	2b00      	cmp	r3, #0
 800745c:	d118      	bne.n	8007490 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800745e:	4b74      	ldr	r3, [pc, #464]	; (8007630 <HAL_RCC_OscConfig+0x474>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a73      	ldr	r2, [pc, #460]	; (8007630 <HAL_RCC_OscConfig+0x474>)
 8007464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800746a:	f7fe f8cb 	bl	8005604 <HAL_GetTick>
 800746e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007470:	e008      	b.n	8007484 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007472:	f7fe f8c7 	bl	8005604 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	2b02      	cmp	r3, #2
 800747e:	d901      	bls.n	8007484 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e10c      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007484:	4b6a      	ldr	r3, [pc, #424]	; (8007630 <HAL_RCC_OscConfig+0x474>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0f0      	beq.n	8007472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d106      	bne.n	80074a6 <HAL_RCC_OscConfig+0x2ea>
 8007498:	4b64      	ldr	r3, [pc, #400]	; (800762c <HAL_RCC_OscConfig+0x470>)
 800749a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749c:	4a63      	ldr	r2, [pc, #396]	; (800762c <HAL_RCC_OscConfig+0x470>)
 800749e:	f043 0301 	orr.w	r3, r3, #1
 80074a2:	6713      	str	r3, [r2, #112]	; 0x70
 80074a4:	e01c      	b.n	80074e0 <HAL_RCC_OscConfig+0x324>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	2b05      	cmp	r3, #5
 80074ac:	d10c      	bne.n	80074c8 <HAL_RCC_OscConfig+0x30c>
 80074ae:	4b5f      	ldr	r3, [pc, #380]	; (800762c <HAL_RCC_OscConfig+0x470>)
 80074b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b2:	4a5e      	ldr	r2, [pc, #376]	; (800762c <HAL_RCC_OscConfig+0x470>)
 80074b4:	f043 0304 	orr.w	r3, r3, #4
 80074b8:	6713      	str	r3, [r2, #112]	; 0x70
 80074ba:	4b5c      	ldr	r3, [pc, #368]	; (800762c <HAL_RCC_OscConfig+0x470>)
 80074bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074be:	4a5b      	ldr	r2, [pc, #364]	; (800762c <HAL_RCC_OscConfig+0x470>)
 80074c0:	f043 0301 	orr.w	r3, r3, #1
 80074c4:	6713      	str	r3, [r2, #112]	; 0x70
 80074c6:	e00b      	b.n	80074e0 <HAL_RCC_OscConfig+0x324>
 80074c8:	4b58      	ldr	r3, [pc, #352]	; (800762c <HAL_RCC_OscConfig+0x470>)
 80074ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074cc:	4a57      	ldr	r2, [pc, #348]	; (800762c <HAL_RCC_OscConfig+0x470>)
 80074ce:	f023 0301 	bic.w	r3, r3, #1
 80074d2:	6713      	str	r3, [r2, #112]	; 0x70
 80074d4:	4b55      	ldr	r3, [pc, #340]	; (800762c <HAL_RCC_OscConfig+0x470>)
 80074d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d8:	4a54      	ldr	r2, [pc, #336]	; (800762c <HAL_RCC_OscConfig+0x470>)
 80074da:	f023 0304 	bic.w	r3, r3, #4
 80074de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d015      	beq.n	8007514 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e8:	f7fe f88c 	bl	8005604 <HAL_GetTick>
 80074ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ee:	e00a      	b.n	8007506 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074f0:	f7fe f888 	bl	8005604 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80074fe:	4293      	cmp	r3, r2
 8007500:	d901      	bls.n	8007506 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e0cb      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007506:	4b49      	ldr	r3, [pc, #292]	; (800762c <HAL_RCC_OscConfig+0x470>)
 8007508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0ee      	beq.n	80074f0 <HAL_RCC_OscConfig+0x334>
 8007512:	e014      	b.n	800753e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007514:	f7fe f876 	bl	8005604 <HAL_GetTick>
 8007518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800751a:	e00a      	b.n	8007532 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800751c:	f7fe f872 	bl	8005604 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	f241 3288 	movw	r2, #5000	; 0x1388
 800752a:	4293      	cmp	r3, r2
 800752c:	d901      	bls.n	8007532 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e0b5      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007532:	4b3e      	ldr	r3, [pc, #248]	; (800762c <HAL_RCC_OscConfig+0x470>)
 8007534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1ee      	bne.n	800751c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800753e:	7dfb      	ldrb	r3, [r7, #23]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d105      	bne.n	8007550 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007544:	4b39      	ldr	r3, [pc, #228]	; (800762c <HAL_RCC_OscConfig+0x470>)
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	4a38      	ldr	r2, [pc, #224]	; (800762c <HAL_RCC_OscConfig+0x470>)
 800754a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800754e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 80a1 	beq.w	800769c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800755a:	4b34      	ldr	r3, [pc, #208]	; (800762c <HAL_RCC_OscConfig+0x470>)
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f003 030c 	and.w	r3, r3, #12
 8007562:	2b08      	cmp	r3, #8
 8007564:	d05c      	beq.n	8007620 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	2b02      	cmp	r3, #2
 800756c:	d141      	bne.n	80075f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800756e:	4b31      	ldr	r3, [pc, #196]	; (8007634 <HAL_RCC_OscConfig+0x478>)
 8007570:	2200      	movs	r2, #0
 8007572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007574:	f7fe f846 	bl	8005604 <HAL_GetTick>
 8007578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800757a:	e008      	b.n	800758e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800757c:	f7fe f842 	bl	8005604 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b02      	cmp	r3, #2
 8007588:	d901      	bls.n	800758e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e087      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800758e:	4b27      	ldr	r3, [pc, #156]	; (800762c <HAL_RCC_OscConfig+0x470>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1f0      	bne.n	800757c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69da      	ldr	r2, [r3, #28]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	019b      	lsls	r3, r3, #6
 80075aa:	431a      	orrs	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b0:	085b      	lsrs	r3, r3, #1
 80075b2:	3b01      	subs	r3, #1
 80075b4:	041b      	lsls	r3, r3, #16
 80075b6:	431a      	orrs	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075bc:	061b      	lsls	r3, r3, #24
 80075be:	491b      	ldr	r1, [pc, #108]	; (800762c <HAL_RCC_OscConfig+0x470>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075c4:	4b1b      	ldr	r3, [pc, #108]	; (8007634 <HAL_RCC_OscConfig+0x478>)
 80075c6:	2201      	movs	r2, #1
 80075c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ca:	f7fe f81b 	bl	8005604 <HAL_GetTick>
 80075ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075d0:	e008      	b.n	80075e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075d2:	f7fe f817 	bl	8005604 <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d901      	bls.n	80075e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e05c      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075e4:	4b11      	ldr	r3, [pc, #68]	; (800762c <HAL_RCC_OscConfig+0x470>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d0f0      	beq.n	80075d2 <HAL_RCC_OscConfig+0x416>
 80075f0:	e054      	b.n	800769c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075f2:	4b10      	ldr	r3, [pc, #64]	; (8007634 <HAL_RCC_OscConfig+0x478>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075f8:	f7fe f804 	bl	8005604 <HAL_GetTick>
 80075fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075fe:	e008      	b.n	8007612 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007600:	f7fe f800 	bl	8005604 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b02      	cmp	r3, #2
 800760c:	d901      	bls.n	8007612 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e045      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007612:	4b06      	ldr	r3, [pc, #24]	; (800762c <HAL_RCC_OscConfig+0x470>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1f0      	bne.n	8007600 <HAL_RCC_OscConfig+0x444>
 800761e:	e03d      	b.n	800769c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d107      	bne.n	8007638 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e038      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
 800762c:	40023800 	.word	0x40023800
 8007630:	40007000 	.word	0x40007000
 8007634:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007638:	4b1b      	ldr	r3, [pc, #108]	; (80076a8 <HAL_RCC_OscConfig+0x4ec>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d028      	beq.n	8007698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007650:	429a      	cmp	r2, r3
 8007652:	d121      	bne.n	8007698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800765e:	429a      	cmp	r2, r3
 8007660:	d11a      	bne.n	8007698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007668:	4013      	ands	r3, r2
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800766e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007670:	4293      	cmp	r3, r2
 8007672:	d111      	bne.n	8007698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767e:	085b      	lsrs	r3, r3, #1
 8007680:	3b01      	subs	r3, #1
 8007682:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007684:	429a      	cmp	r2, r3
 8007686:	d107      	bne.n	8007698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007692:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007694:	429a      	cmp	r2, r3
 8007696:	d001      	beq.n	800769c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e000      	b.n	800769e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	40023800 	.word	0x40023800

080076ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e0cc      	b.n	800785a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076c0:	4b68      	ldr	r3, [pc, #416]	; (8007864 <HAL_RCC_ClockConfig+0x1b8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d90c      	bls.n	80076e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ce:	4b65      	ldr	r3, [pc, #404]	; (8007864 <HAL_RCC_ClockConfig+0x1b8>)
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	b2d2      	uxtb	r2, r2
 80076d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d6:	4b63      	ldr	r3, [pc, #396]	; (8007864 <HAL_RCC_ClockConfig+0x1b8>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0307 	and.w	r3, r3, #7
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d001      	beq.n	80076e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e0b8      	b.n	800785a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0302 	and.w	r3, r3, #2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d020      	beq.n	8007736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0304 	and.w	r3, r3, #4
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d005      	beq.n	800770c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007700:	4b59      	ldr	r3, [pc, #356]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	4a58      	ldr	r2, [pc, #352]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 8007706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800770a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0308 	and.w	r3, r3, #8
 8007714:	2b00      	cmp	r3, #0
 8007716:	d005      	beq.n	8007724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007718:	4b53      	ldr	r3, [pc, #332]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	4a52      	ldr	r2, [pc, #328]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 800771e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007724:	4b50      	ldr	r3, [pc, #320]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	494d      	ldr	r1, [pc, #308]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 8007732:	4313      	orrs	r3, r2
 8007734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d044      	beq.n	80077cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d107      	bne.n	800775a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800774a:	4b47      	ldr	r3, [pc, #284]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d119      	bne.n	800778a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e07f      	b.n	800785a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b02      	cmp	r3, #2
 8007760:	d003      	beq.n	800776a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007766:	2b03      	cmp	r3, #3
 8007768:	d107      	bne.n	800777a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800776a:	4b3f      	ldr	r3, [pc, #252]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d109      	bne.n	800778a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e06f      	b.n	800785a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800777a:	4b3b      	ldr	r3, [pc, #236]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e067      	b.n	800785a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800778a:	4b37      	ldr	r3, [pc, #220]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f023 0203 	bic.w	r2, r3, #3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	4934      	ldr	r1, [pc, #208]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 8007798:	4313      	orrs	r3, r2
 800779a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800779c:	f7fd ff32 	bl	8005604 <HAL_GetTick>
 80077a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077a2:	e00a      	b.n	80077ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077a4:	f7fd ff2e 	bl	8005604 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d901      	bls.n	80077ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e04f      	b.n	800785a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ba:	4b2b      	ldr	r3, [pc, #172]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f003 020c 	and.w	r2, r3, #12
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d1eb      	bne.n	80077a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077cc:	4b25      	ldr	r3, [pc, #148]	; (8007864 <HAL_RCC_ClockConfig+0x1b8>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0307 	and.w	r3, r3, #7
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d20c      	bcs.n	80077f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077da:	4b22      	ldr	r3, [pc, #136]	; (8007864 <HAL_RCC_ClockConfig+0x1b8>)
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	b2d2      	uxtb	r2, r2
 80077e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077e2:	4b20      	ldr	r3, [pc, #128]	; (8007864 <HAL_RCC_ClockConfig+0x1b8>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d001      	beq.n	80077f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e032      	b.n	800785a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d008      	beq.n	8007812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007800:	4b19      	ldr	r3, [pc, #100]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	4916      	ldr	r1, [pc, #88]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 800780e:	4313      	orrs	r3, r2
 8007810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0308 	and.w	r3, r3, #8
 800781a:	2b00      	cmp	r3, #0
 800781c:	d009      	beq.n	8007832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800781e:	4b12      	ldr	r3, [pc, #72]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	490e      	ldr	r1, [pc, #56]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 800782e:	4313      	orrs	r3, r2
 8007830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007832:	f000 f821 	bl	8007878 <HAL_RCC_GetSysClockFreq>
 8007836:	4602      	mov	r2, r0
 8007838:	4b0b      	ldr	r3, [pc, #44]	; (8007868 <HAL_RCC_ClockConfig+0x1bc>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	091b      	lsrs	r3, r3, #4
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	490a      	ldr	r1, [pc, #40]	; (800786c <HAL_RCC_ClockConfig+0x1c0>)
 8007844:	5ccb      	ldrb	r3, [r1, r3]
 8007846:	fa22 f303 	lsr.w	r3, r2, r3
 800784a:	4a09      	ldr	r2, [pc, #36]	; (8007870 <HAL_RCC_ClockConfig+0x1c4>)
 800784c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800784e:	4b09      	ldr	r3, [pc, #36]	; (8007874 <HAL_RCC_ClockConfig+0x1c8>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4618      	mov	r0, r3
 8007854:	f7fd fe92 	bl	800557c <HAL_InitTick>

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	40023c00 	.word	0x40023c00
 8007868:	40023800 	.word	0x40023800
 800786c:	080116c4 	.word	0x080116c4
 8007870:	20000228 	.word	0x20000228
 8007874:	2000022c 	.word	0x2000022c

08007878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800787c:	b094      	sub	sp, #80	; 0x50
 800787e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	647b      	str	r3, [r7, #68]	; 0x44
 8007884:	2300      	movs	r3, #0
 8007886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007888:	2300      	movs	r3, #0
 800788a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007890:	4b79      	ldr	r3, [pc, #484]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f003 030c 	and.w	r3, r3, #12
 8007898:	2b08      	cmp	r3, #8
 800789a:	d00d      	beq.n	80078b8 <HAL_RCC_GetSysClockFreq+0x40>
 800789c:	2b08      	cmp	r3, #8
 800789e:	f200 80e1 	bhi.w	8007a64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <HAL_RCC_GetSysClockFreq+0x34>
 80078a6:	2b04      	cmp	r3, #4
 80078a8:	d003      	beq.n	80078b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80078aa:	e0db      	b.n	8007a64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078ac:	4b73      	ldr	r3, [pc, #460]	; (8007a7c <HAL_RCC_GetSysClockFreq+0x204>)
 80078ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80078b0:	e0db      	b.n	8007a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078b2:	4b73      	ldr	r3, [pc, #460]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x208>)
 80078b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078b6:	e0d8      	b.n	8007a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078b8:	4b6f      	ldr	r3, [pc, #444]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078c2:	4b6d      	ldr	r3, [pc, #436]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d063      	beq.n	8007996 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078ce:	4b6a      	ldr	r3, [pc, #424]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	099b      	lsrs	r3, r3, #6
 80078d4:	2200      	movs	r2, #0
 80078d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80078d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80078da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e0:	633b      	str	r3, [r7, #48]	; 0x30
 80078e2:	2300      	movs	r3, #0
 80078e4:	637b      	str	r3, [r7, #52]	; 0x34
 80078e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80078ea:	4622      	mov	r2, r4
 80078ec:	462b      	mov	r3, r5
 80078ee:	f04f 0000 	mov.w	r0, #0
 80078f2:	f04f 0100 	mov.w	r1, #0
 80078f6:	0159      	lsls	r1, r3, #5
 80078f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078fc:	0150      	lsls	r0, r2, #5
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4621      	mov	r1, r4
 8007904:	1a51      	subs	r1, r2, r1
 8007906:	6139      	str	r1, [r7, #16]
 8007908:	4629      	mov	r1, r5
 800790a:	eb63 0301 	sbc.w	r3, r3, r1
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	f04f 0200 	mov.w	r2, #0
 8007914:	f04f 0300 	mov.w	r3, #0
 8007918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800791c:	4659      	mov	r1, fp
 800791e:	018b      	lsls	r3, r1, #6
 8007920:	4651      	mov	r1, sl
 8007922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007926:	4651      	mov	r1, sl
 8007928:	018a      	lsls	r2, r1, #6
 800792a:	4651      	mov	r1, sl
 800792c:	ebb2 0801 	subs.w	r8, r2, r1
 8007930:	4659      	mov	r1, fp
 8007932:	eb63 0901 	sbc.w	r9, r3, r1
 8007936:	f04f 0200 	mov.w	r2, #0
 800793a:	f04f 0300 	mov.w	r3, #0
 800793e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800794a:	4690      	mov	r8, r2
 800794c:	4699      	mov	r9, r3
 800794e:	4623      	mov	r3, r4
 8007950:	eb18 0303 	adds.w	r3, r8, r3
 8007954:	60bb      	str	r3, [r7, #8]
 8007956:	462b      	mov	r3, r5
 8007958:	eb49 0303 	adc.w	r3, r9, r3
 800795c:	60fb      	str	r3, [r7, #12]
 800795e:	f04f 0200 	mov.w	r2, #0
 8007962:	f04f 0300 	mov.w	r3, #0
 8007966:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800796a:	4629      	mov	r1, r5
 800796c:	024b      	lsls	r3, r1, #9
 800796e:	4621      	mov	r1, r4
 8007970:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007974:	4621      	mov	r1, r4
 8007976:	024a      	lsls	r2, r1, #9
 8007978:	4610      	mov	r0, r2
 800797a:	4619      	mov	r1, r3
 800797c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800797e:	2200      	movs	r2, #0
 8007980:	62bb      	str	r3, [r7, #40]	; 0x28
 8007982:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007984:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007988:	f7f9 f986 	bl	8000c98 <__aeabi_uldivmod>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4613      	mov	r3, r2
 8007992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007994:	e058      	b.n	8007a48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007996:	4b38      	ldr	r3, [pc, #224]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	099b      	lsrs	r3, r3, #6
 800799c:	2200      	movs	r2, #0
 800799e:	4618      	mov	r0, r3
 80079a0:	4611      	mov	r1, r2
 80079a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80079a6:	623b      	str	r3, [r7, #32]
 80079a8:	2300      	movs	r3, #0
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
 80079ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80079b0:	4642      	mov	r2, r8
 80079b2:	464b      	mov	r3, r9
 80079b4:	f04f 0000 	mov.w	r0, #0
 80079b8:	f04f 0100 	mov.w	r1, #0
 80079bc:	0159      	lsls	r1, r3, #5
 80079be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079c2:	0150      	lsls	r0, r2, #5
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4641      	mov	r1, r8
 80079ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80079ce:	4649      	mov	r1, r9
 80079d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80079e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80079e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80079e8:	ebb2 040a 	subs.w	r4, r2, sl
 80079ec:	eb63 050b 	sbc.w	r5, r3, fp
 80079f0:	f04f 0200 	mov.w	r2, #0
 80079f4:	f04f 0300 	mov.w	r3, #0
 80079f8:	00eb      	lsls	r3, r5, #3
 80079fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079fe:	00e2      	lsls	r2, r4, #3
 8007a00:	4614      	mov	r4, r2
 8007a02:	461d      	mov	r5, r3
 8007a04:	4643      	mov	r3, r8
 8007a06:	18e3      	adds	r3, r4, r3
 8007a08:	603b      	str	r3, [r7, #0]
 8007a0a:	464b      	mov	r3, r9
 8007a0c:	eb45 0303 	adc.w	r3, r5, r3
 8007a10:	607b      	str	r3, [r7, #4]
 8007a12:	f04f 0200 	mov.w	r2, #0
 8007a16:	f04f 0300 	mov.w	r3, #0
 8007a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a1e:	4629      	mov	r1, r5
 8007a20:	028b      	lsls	r3, r1, #10
 8007a22:	4621      	mov	r1, r4
 8007a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a28:	4621      	mov	r1, r4
 8007a2a:	028a      	lsls	r2, r1, #10
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a32:	2200      	movs	r2, #0
 8007a34:	61bb      	str	r3, [r7, #24]
 8007a36:	61fa      	str	r2, [r7, #28]
 8007a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a3c:	f7f9 f92c 	bl	8000c98 <__aeabi_uldivmod>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	4613      	mov	r3, r2
 8007a46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a48:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	0c1b      	lsrs	r3, r3, #16
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	3301      	adds	r3, #1
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007a58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a62:	e002      	b.n	8007a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a64:	4b05      	ldr	r3, [pc, #20]	; (8007a7c <HAL_RCC_GetSysClockFreq+0x204>)
 8007a66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3750      	adds	r7, #80	; 0x50
 8007a70:	46bd      	mov	sp, r7
 8007a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a76:	bf00      	nop
 8007a78:	40023800 	.word	0x40023800
 8007a7c:	00f42400 	.word	0x00f42400
 8007a80:	007a1200 	.word	0x007a1200

08007a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a88:	4b03      	ldr	r3, [pc, #12]	; (8007a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	20000228 	.word	0x20000228

08007a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007aa0:	f7ff fff0 	bl	8007a84 <HAL_RCC_GetHCLKFreq>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	4b05      	ldr	r3, [pc, #20]	; (8007abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	0a9b      	lsrs	r3, r3, #10
 8007aac:	f003 0307 	and.w	r3, r3, #7
 8007ab0:	4903      	ldr	r1, [pc, #12]	; (8007ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ab2:	5ccb      	ldrb	r3, [r1, r3]
 8007ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	40023800 	.word	0x40023800
 8007ac0:	080116d4 	.word	0x080116d4

08007ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ac8:	f7ff ffdc 	bl	8007a84 <HAL_RCC_GetHCLKFreq>
 8007acc:	4602      	mov	r2, r0
 8007ace:	4b05      	ldr	r3, [pc, #20]	; (8007ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	0b5b      	lsrs	r3, r3, #13
 8007ad4:	f003 0307 	and.w	r3, r3, #7
 8007ad8:	4903      	ldr	r1, [pc, #12]	; (8007ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ada:	5ccb      	ldrb	r3, [r1, r3]
 8007adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	40023800 	.word	0x40023800
 8007ae8:	080116d4 	.word	0x080116d4

08007aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e04c      	b.n	8007b98 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d111      	bne.n	8007b2e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f001 ff50 	bl	80099b8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d102      	bne.n	8007b26 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a1f      	ldr	r2, [pc, #124]	; (8007ba0 <HAL_TIM_Base_Init+0xb4>)
 8007b24:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2202      	movs	r2, #2
 8007b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4610      	mov	r0, r2
 8007b42:	f001 fc6d 	bl	8009420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	08004951 	.word	0x08004951

08007ba4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d001      	beq.n	8007bbc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e03c      	b.n	8007c36 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a1e      	ldr	r2, [pc, #120]	; (8007c44 <HAL_TIM_Base_Start+0xa0>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d018      	beq.n	8007c00 <HAL_TIM_Base_Start+0x5c>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd6:	d013      	beq.n	8007c00 <HAL_TIM_Base_Start+0x5c>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a1a      	ldr	r2, [pc, #104]	; (8007c48 <HAL_TIM_Base_Start+0xa4>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d00e      	beq.n	8007c00 <HAL_TIM_Base_Start+0x5c>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a19      	ldr	r2, [pc, #100]	; (8007c4c <HAL_TIM_Base_Start+0xa8>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d009      	beq.n	8007c00 <HAL_TIM_Base_Start+0x5c>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a17      	ldr	r2, [pc, #92]	; (8007c50 <HAL_TIM_Base_Start+0xac>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d004      	beq.n	8007c00 <HAL_TIM_Base_Start+0x5c>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a16      	ldr	r2, [pc, #88]	; (8007c54 <HAL_TIM_Base_Start+0xb0>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d111      	bne.n	8007c24 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f003 0307 	and.w	r3, r3, #7
 8007c0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b06      	cmp	r3, #6
 8007c10:	d010      	beq.n	8007c34 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f042 0201 	orr.w	r2, r2, #1
 8007c20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c22:	e007      	b.n	8007c34 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f042 0201 	orr.w	r2, r2, #1
 8007c32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	40010000 	.word	0x40010000
 8007c48:	40000400 	.word	0x40000400
 8007c4c:	40000800 	.word	0x40000800
 8007c50:	40000c00 	.word	0x40000c00
 8007c54:	40014000 	.word	0x40014000

08007c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d001      	beq.n	8007c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e044      	b.n	8007cfa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f042 0201 	orr.w	r2, r2, #1
 8007c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a1e      	ldr	r2, [pc, #120]	; (8007d08 <HAL_TIM_Base_Start_IT+0xb0>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d018      	beq.n	8007cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c9a:	d013      	beq.n	8007cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a1a      	ldr	r2, [pc, #104]	; (8007d0c <HAL_TIM_Base_Start_IT+0xb4>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d00e      	beq.n	8007cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a19      	ldr	r2, [pc, #100]	; (8007d10 <HAL_TIM_Base_Start_IT+0xb8>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d009      	beq.n	8007cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a17      	ldr	r2, [pc, #92]	; (8007d14 <HAL_TIM_Base_Start_IT+0xbc>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d004      	beq.n	8007cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a16      	ldr	r2, [pc, #88]	; (8007d18 <HAL_TIM_Base_Start_IT+0xc0>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d111      	bne.n	8007ce8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f003 0307 	and.w	r3, r3, #7
 8007cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b06      	cmp	r3, #6
 8007cd4:	d010      	beq.n	8007cf8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f042 0201 	orr.w	r2, r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce6:	e007      	b.n	8007cf8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0201 	orr.w	r2, r2, #1
 8007cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	40010000 	.word	0x40010000
 8007d0c:	40000400 	.word	0x40000400
 8007d10:	40000800 	.word	0x40000800
 8007d14:	40000c00 	.word	0x40000c00
 8007d18:	40014000 	.word	0x40014000

08007d1c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e04c      	b.n	8007dc8 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d111      	bne.n	8007d5e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f001 fe38 	bl	80099b8 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a1f      	ldr	r2, [pc, #124]	; (8007dd0 <HAL_TIM_OC_Init+0xb4>)
 8007d54:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2202      	movs	r2, #2
 8007d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	4619      	mov	r1, r3
 8007d70:	4610      	mov	r0, r2
 8007d72:	f001 fb55 	bl	8009420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	08007dd5 	.word	0x08007dd5

08007dd4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e04c      	b.n	8007e94 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d111      	bne.n	8007e2a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f001 fdd2 	bl	80099b8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d102      	bne.n	8007e22 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a1f      	ldr	r2, [pc, #124]	; (8007e9c <HAL_TIM_PWM_Init+0xb4>)
 8007e20:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	f001 faef 	bl	8009420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	08007ea1 	.word	0x08007ea1

08007ea0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d109      	bne.n	8007ed8 <HAL_TIM_PWM_Start+0x24>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	bf14      	ite	ne
 8007ed0:	2301      	movne	r3, #1
 8007ed2:	2300      	moveq	r3, #0
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	e022      	b.n	8007f1e <HAL_TIM_PWM_Start+0x6a>
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d109      	bne.n	8007ef2 <HAL_TIM_PWM_Start+0x3e>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	bf14      	ite	ne
 8007eea:	2301      	movne	r3, #1
 8007eec:	2300      	moveq	r3, #0
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	e015      	b.n	8007f1e <HAL_TIM_PWM_Start+0x6a>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b08      	cmp	r3, #8
 8007ef6:	d109      	bne.n	8007f0c <HAL_TIM_PWM_Start+0x58>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	bf14      	ite	ne
 8007f04:	2301      	movne	r3, #1
 8007f06:	2300      	moveq	r3, #0
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	e008      	b.n	8007f1e <HAL_TIM_PWM_Start+0x6a>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	bf14      	ite	ne
 8007f18:	2301      	movne	r3, #1
 8007f1a:	2300      	moveq	r3, #0
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e068      	b.n	8007ff8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d104      	bne.n	8007f36 <HAL_TIM_PWM_Start+0x82>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f34:	e013      	b.n	8007f5e <HAL_TIM_PWM_Start+0xaa>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	d104      	bne.n	8007f46 <HAL_TIM_PWM_Start+0x92>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f44:	e00b      	b.n	8007f5e <HAL_TIM_PWM_Start+0xaa>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b08      	cmp	r3, #8
 8007f4a:	d104      	bne.n	8007f56 <HAL_TIM_PWM_Start+0xa2>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f54:	e003      	b.n	8007f5e <HAL_TIM_PWM_Start+0xaa>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2202      	movs	r2, #2
 8007f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2201      	movs	r2, #1
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f001 fd00 	bl	800996c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a23      	ldr	r2, [pc, #140]	; (8008000 <HAL_TIM_PWM_Start+0x14c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d107      	bne.n	8007f86 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a1d      	ldr	r2, [pc, #116]	; (8008000 <HAL_TIM_PWM_Start+0x14c>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d018      	beq.n	8007fc2 <HAL_TIM_PWM_Start+0x10e>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f98:	d013      	beq.n	8007fc2 <HAL_TIM_PWM_Start+0x10e>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a19      	ldr	r2, [pc, #100]	; (8008004 <HAL_TIM_PWM_Start+0x150>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d00e      	beq.n	8007fc2 <HAL_TIM_PWM_Start+0x10e>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a17      	ldr	r2, [pc, #92]	; (8008008 <HAL_TIM_PWM_Start+0x154>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d009      	beq.n	8007fc2 <HAL_TIM_PWM_Start+0x10e>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a16      	ldr	r2, [pc, #88]	; (800800c <HAL_TIM_PWM_Start+0x158>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d004      	beq.n	8007fc2 <HAL_TIM_PWM_Start+0x10e>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a14      	ldr	r2, [pc, #80]	; (8008010 <HAL_TIM_PWM_Start+0x15c>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d111      	bne.n	8007fe6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f003 0307 	and.w	r3, r3, #7
 8007fcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b06      	cmp	r3, #6
 8007fd2:	d010      	beq.n	8007ff6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f042 0201 	orr.w	r2, r2, #1
 8007fe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fe4:	e007      	b.n	8007ff6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f042 0201 	orr.w	r2, r2, #1
 8007ff4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	40010000 	.word	0x40010000
 8008004:	40000400 	.word	0x40000400
 8008008:	40000800 	.word	0x40000800
 800800c:	40000c00 	.word	0x40000c00
 8008010:	40014000 	.word	0x40014000

08008014 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d109      	bne.n	8008040 <HAL_TIM_PWM_Start_DMA+0x2c>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b02      	cmp	r3, #2
 8008036:	bf0c      	ite	eq
 8008038:	2301      	moveq	r3, #1
 800803a:	2300      	movne	r3, #0
 800803c:	b2db      	uxtb	r3, r3
 800803e:	e022      	b.n	8008086 <HAL_TIM_PWM_Start_DMA+0x72>
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2b04      	cmp	r3, #4
 8008044:	d109      	bne.n	800805a <HAL_TIM_PWM_Start_DMA+0x46>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	bf0c      	ite	eq
 8008052:	2301      	moveq	r3, #1
 8008054:	2300      	movne	r3, #0
 8008056:	b2db      	uxtb	r3, r3
 8008058:	e015      	b.n	8008086 <HAL_TIM_PWM_Start_DMA+0x72>
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b08      	cmp	r3, #8
 800805e:	d109      	bne.n	8008074 <HAL_TIM_PWM_Start_DMA+0x60>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b02      	cmp	r3, #2
 800806a:	bf0c      	ite	eq
 800806c:	2301      	moveq	r3, #1
 800806e:	2300      	movne	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	e008      	b.n	8008086 <HAL_TIM_PWM_Start_DMA+0x72>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b02      	cmp	r3, #2
 800807e:	bf0c      	ite	eq
 8008080:	2301      	moveq	r3, #1
 8008082:	2300      	movne	r3, #0
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800808a:	2302      	movs	r3, #2
 800808c:	e15d      	b.n	800834a <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d109      	bne.n	80080a8 <HAL_TIM_PWM_Start_DMA+0x94>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b01      	cmp	r3, #1
 800809e:	bf0c      	ite	eq
 80080a0:	2301      	moveq	r3, #1
 80080a2:	2300      	movne	r3, #0
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	e022      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0xda>
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d109      	bne.n	80080c2 <HAL_TIM_PWM_Start_DMA+0xae>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	bf0c      	ite	eq
 80080ba:	2301      	moveq	r3, #1
 80080bc:	2300      	movne	r3, #0
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	e015      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0xda>
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	d109      	bne.n	80080dc <HAL_TIM_PWM_Start_DMA+0xc8>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	bf0c      	ite	eq
 80080d4:	2301      	moveq	r3, #1
 80080d6:	2300      	movne	r3, #0
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	e008      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0xda>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	bf0c      	ite	eq
 80080e8:	2301      	moveq	r3, #1
 80080ea:	2300      	movne	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d024      	beq.n	800813c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d104      	bne.n	8008102 <HAL_TIM_PWM_Start_DMA+0xee>
 80080f8:	887b      	ldrh	r3, [r7, #2]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e123      	b.n	800834a <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d104      	bne.n	8008112 <HAL_TIM_PWM_Start_DMA+0xfe>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008110:	e016      	b.n	8008140 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2b04      	cmp	r3, #4
 8008116:	d104      	bne.n	8008122 <HAL_TIM_PWM_Start_DMA+0x10e>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008120:	e00e      	b.n	8008140 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b08      	cmp	r3, #8
 8008126:	d104      	bne.n	8008132 <HAL_TIM_PWM_Start_DMA+0x11e>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2202      	movs	r2, #2
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008130:	e006      	b.n	8008140 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2202      	movs	r2, #2
 8008136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800813a:	e001      	b.n	8008140 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e104      	b.n	800834a <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2b0c      	cmp	r3, #12
 8008144:	f200 80ae 	bhi.w	80082a4 <HAL_TIM_PWM_Start_DMA+0x290>
 8008148:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800814a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814e:	bf00      	nop
 8008150:	08008185 	.word	0x08008185
 8008154:	080082a5 	.word	0x080082a5
 8008158:	080082a5 	.word	0x080082a5
 800815c:	080082a5 	.word	0x080082a5
 8008160:	080081cd 	.word	0x080081cd
 8008164:	080082a5 	.word	0x080082a5
 8008168:	080082a5 	.word	0x080082a5
 800816c:	080082a5 	.word	0x080082a5
 8008170:	08008215 	.word	0x08008215
 8008174:	080082a5 	.word	0x080082a5
 8008178:	080082a5 	.word	0x080082a5
 800817c:	080082a5 	.word	0x080082a5
 8008180:	0800825d 	.word	0x0800825d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	4a72      	ldr	r2, [pc, #456]	; (8008354 <HAL_TIM_PWM_Start_DMA+0x340>)
 800818a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	4a71      	ldr	r2, [pc, #452]	; (8008358 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008192:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008198:	4a70      	ldr	r2, [pc, #448]	; (800835c <HAL_TIM_PWM_Start_DMA+0x348>)
 800819a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3334      	adds	r3, #52	; 0x34
 80081a8:	461a      	mov	r2, r3
 80081aa:	887b      	ldrh	r3, [r7, #2]
 80081ac:	f7fd fe8c 	bl	8005ec8 <HAL_DMA_Start_IT>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e0c7      	b.n	800834a <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68da      	ldr	r2, [r3, #12]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081c8:	60da      	str	r2, [r3, #12]
      break;
 80081ca:	e06e      	b.n	80082aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	4a60      	ldr	r2, [pc, #384]	; (8008354 <HAL_TIM_PWM_Start_DMA+0x340>)
 80081d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d8:	4a5f      	ldr	r2, [pc, #380]	; (8008358 <HAL_TIM_PWM_Start_DMA+0x344>)
 80081da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e0:	4a5e      	ldr	r2, [pc, #376]	; (800835c <HAL_TIM_PWM_Start_DMA+0x348>)
 80081e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3338      	adds	r3, #56	; 0x38
 80081f0:	461a      	mov	r2, r3
 80081f2:	887b      	ldrh	r3, [r7, #2]
 80081f4:	f7fd fe68 	bl	8005ec8 <HAL_DMA_Start_IT>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e0a3      	b.n	800834a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008210:	60da      	str	r2, [r3, #12]
      break;
 8008212:	e04a      	b.n	80082aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008218:	4a4e      	ldr	r2, [pc, #312]	; (8008354 <HAL_TIM_PWM_Start_DMA+0x340>)
 800821a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	4a4d      	ldr	r2, [pc, #308]	; (8008358 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008222:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008228:	4a4c      	ldr	r2, [pc, #304]	; (800835c <HAL_TIM_PWM_Start_DMA+0x348>)
 800822a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	333c      	adds	r3, #60	; 0x3c
 8008238:	461a      	mov	r2, r3
 800823a:	887b      	ldrh	r3, [r7, #2]
 800823c:	f7fd fe44 	bl	8005ec8 <HAL_DMA_Start_IT>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e07f      	b.n	800834a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68da      	ldr	r2, [r3, #12]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008258:	60da      	str	r2, [r3, #12]
      break;
 800825a:	e026      	b.n	80082aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008260:	4a3c      	ldr	r2, [pc, #240]	; (8008354 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008262:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008268:	4a3b      	ldr	r2, [pc, #236]	; (8008358 <HAL_TIM_PWM_Start_DMA+0x344>)
 800826a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	4a3a      	ldr	r2, [pc, #232]	; (800835c <HAL_TIM_PWM_Start_DMA+0x348>)
 8008272:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008278:	6879      	ldr	r1, [r7, #4]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3340      	adds	r3, #64	; 0x40
 8008280:	461a      	mov	r2, r3
 8008282:	887b      	ldrh	r3, [r7, #2]
 8008284:	f7fd fe20 	bl	8005ec8 <HAL_DMA_Start_IT>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e05b      	b.n	800834a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80082a0:	60da      	str	r2, [r3, #12]
      break;
 80082a2:	e002      	b.n	80082aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	75fb      	strb	r3, [r7, #23]
      break;
 80082a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80082aa:	7dfb      	ldrb	r3, [r7, #23]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d14b      	bne.n	8008348 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2201      	movs	r2, #1
 80082b6:	68b9      	ldr	r1, [r7, #8]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 fb57 	bl	800996c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a27      	ldr	r2, [pc, #156]	; (8008360 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d107      	bne.n	80082d8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a20      	ldr	r2, [pc, #128]	; (8008360 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d018      	beq.n	8008314 <HAL_TIM_PWM_Start_DMA+0x300>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ea:	d013      	beq.n	8008314 <HAL_TIM_PWM_Start_DMA+0x300>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a1c      	ldr	r2, [pc, #112]	; (8008364 <HAL_TIM_PWM_Start_DMA+0x350>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d00e      	beq.n	8008314 <HAL_TIM_PWM_Start_DMA+0x300>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a1b      	ldr	r2, [pc, #108]	; (8008368 <HAL_TIM_PWM_Start_DMA+0x354>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d009      	beq.n	8008314 <HAL_TIM_PWM_Start_DMA+0x300>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a19      	ldr	r2, [pc, #100]	; (800836c <HAL_TIM_PWM_Start_DMA+0x358>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d004      	beq.n	8008314 <HAL_TIM_PWM_Start_DMA+0x300>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a18      	ldr	r2, [pc, #96]	; (8008370 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d111      	bne.n	8008338 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f003 0307 	and.w	r3, r3, #7
 800831e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	2b06      	cmp	r3, #6
 8008324:	d010      	beq.n	8008348 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f042 0201 	orr.w	r2, r2, #1
 8008334:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008336:	e007      	b.n	8008348 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f042 0201 	orr.w	r2, r2, #1
 8008346:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008348:	7dfb      	ldrb	r3, [r7, #23]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	08009307 	.word	0x08009307
 8008358:	080093b3 	.word	0x080093b3
 800835c:	08009271 	.word	0x08009271
 8008360:	40010000 	.word	0x40010000
 8008364:	40000400 	.word	0x40000400
 8008368:	40000800 	.word	0x40000800
 800836c:	40000c00 	.word	0x40000c00
 8008370:	40014000 	.word	0x40014000

08008374 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b0c      	cmp	r3, #12
 8008386:	d855      	bhi.n	8008434 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008388:	a201      	add	r2, pc, #4	; (adr r2, 8008390 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800838a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838e:	bf00      	nop
 8008390:	080083c5 	.word	0x080083c5
 8008394:	08008435 	.word	0x08008435
 8008398:	08008435 	.word	0x08008435
 800839c:	08008435 	.word	0x08008435
 80083a0:	080083e1 	.word	0x080083e1
 80083a4:	08008435 	.word	0x08008435
 80083a8:	08008435 	.word	0x08008435
 80083ac:	08008435 	.word	0x08008435
 80083b0:	080083fd 	.word	0x080083fd
 80083b4:	08008435 	.word	0x08008435
 80083b8:	08008435 	.word	0x08008435
 80083bc:	08008435 	.word	0x08008435
 80083c0:	08008419 	.word	0x08008419
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68da      	ldr	r2, [r3, #12]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80083d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fd fe3d 	bl	8006058 <HAL_DMA_Abort_IT>
      break;
 80083de:	e02c      	b.n	800843a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fd fe2f 	bl	8006058 <HAL_DMA_Abort_IT>
      break;
 80083fa:	e01e      	b.n	800843a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68da      	ldr	r2, [r3, #12]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800840a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008410:	4618      	mov	r0, r3
 8008412:	f7fd fe21 	bl	8006058 <HAL_DMA_Abort_IT>
      break;
 8008416:	e010      	b.n	800843a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68da      	ldr	r2, [r3, #12]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008426:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842c:	4618      	mov	r0, r3
 800842e:	f7fd fe13 	bl	8006058 <HAL_DMA_Abort_IT>
      break;
 8008432:	e002      	b.n	800843a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	73fb      	strb	r3, [r7, #15]
      break;
 8008438:	bf00      	nop
  }

  if (status == HAL_OK)
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d157      	bne.n	80084f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2200      	movs	r2, #0
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	4618      	mov	r0, r3
 800844a:	f001 fa8f 	bl	800996c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a2a      	ldr	r2, [pc, #168]	; (80084fc <HAL_TIM_PWM_Stop_DMA+0x188>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d117      	bne.n	8008488 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6a1a      	ldr	r2, [r3, #32]
 800845e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008462:	4013      	ands	r3, r2
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10f      	bne.n	8008488 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6a1a      	ldr	r2, [r3, #32]
 800846e:	f240 4344 	movw	r3, #1092	; 0x444
 8008472:	4013      	ands	r3, r2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d107      	bne.n	8008488 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008486:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6a1a      	ldr	r2, [r3, #32]
 800848e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008492:	4013      	ands	r3, r2
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10f      	bne.n	80084b8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6a1a      	ldr	r2, [r3, #32]
 800849e:	f240 4344 	movw	r3, #1092	; 0x444
 80084a2:	4013      	ands	r3, r2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d107      	bne.n	80084b8 <HAL_TIM_PWM_Stop_DMA+0x144>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f022 0201 	bic.w	r2, r2, #1
 80084b6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d104      	bne.n	80084c8 <HAL_TIM_PWM_Stop_DMA+0x154>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084c6:	e013      	b.n	80084f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	d104      	bne.n	80084d8 <HAL_TIM_PWM_Stop_DMA+0x164>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084d6:	e00b      	b.n	80084f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2b08      	cmp	r3, #8
 80084dc:	d104      	bne.n	80084e8 <HAL_TIM_PWM_Stop_DMA+0x174>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084e6:	e003      	b.n	80084f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	40010000 	.word	0x40010000

08008500 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e04c      	b.n	80085ae <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d111      	bne.n	8008544 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f001 fa45 	bl	80099b8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008532:	2b00      	cmp	r3, #0
 8008534:	d102      	bne.n	800853c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a1f      	ldr	r2, [pc, #124]	; (80085b8 <HAL_TIM_OnePulse_Init+0xb8>)
 800853a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3304      	adds	r3, #4
 8008554:	4619      	mov	r1, r3
 8008556:	4610      	mov	r0, r2
 8008558:	f000 ff62 	bl	8009420 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 0208 	bic.w	r2, r2, #8
 800856a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6819      	ldr	r1, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	430a      	orrs	r2, r1
 800857a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	080085bd 	.word	0x080085bd

080085bc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80085e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80085f8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d108      	bne.n	8008612 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d105      	bne.n	8008612 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008606:	7b7b      	ldrb	r3, [r7, #13]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d102      	bne.n	8008612 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800860c:	7b3b      	ldrb	r3, [r7, #12]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d001      	beq.n	8008616 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e03b      	b.n	800868e <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2202      	movs	r2, #2
 800861a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2202      	movs	r2, #2
 8008622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2202      	movs	r2, #2
 800862a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2202      	movs	r2, #2
 8008632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68da      	ldr	r2, [r3, #12]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f042 0202 	orr.w	r2, r2, #2
 8008644:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68da      	ldr	r2, [r3, #12]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f042 0204 	orr.w	r2, r2, #4
 8008654:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2201      	movs	r2, #1
 800865c:	2100      	movs	r1, #0
 800865e:	4618      	mov	r0, r3
 8008660:	f001 f984 	bl	800996c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2201      	movs	r2, #1
 800866a:	2104      	movs	r1, #4
 800866c:	4618      	mov	r0, r3
 800866e:	f001 f97d 	bl	800996c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a08      	ldr	r2, [pc, #32]	; (8008698 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d107      	bne.n	800868c <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800868a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	40010000 	.word	0x40010000

0800869c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e0a2      	b.n	80087f6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d111      	bne.n	80086e0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 f977 	bl	80099b8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d102      	bne.n	80086d8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a4a      	ldr	r2, [pc, #296]	; (8008800 <HAL_TIM_Encoder_Init+0x164>)
 80086d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2202      	movs	r2, #2
 80086e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	6812      	ldr	r2, [r2, #0]
 80086f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086f6:	f023 0307 	bic.w	r3, r3, #7
 80086fa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	3304      	adds	r3, #4
 8008704:	4619      	mov	r1, r3
 8008706:	4610      	mov	r0, r2
 8008708:	f000 fe8a 	bl	8009420 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	4313      	orrs	r3, r2
 800872c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008734:	f023 0303 	bic.w	r3, r3, #3
 8008738:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	689a      	ldr	r2, [r3, #8]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	021b      	lsls	r3, r3, #8
 8008744:	4313      	orrs	r3, r2
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	4313      	orrs	r3, r2
 800874a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008752:	f023 030c 	bic.w	r3, r3, #12
 8008756:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800875e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	68da      	ldr	r2, [r3, #12]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	021b      	lsls	r3, r3, #8
 800876e:	4313      	orrs	r3, r2
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	4313      	orrs	r3, r2
 8008774:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	011a      	lsls	r2, r3, #4
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	6a1b      	ldr	r3, [r3, #32]
 8008780:	031b      	lsls	r3, r3, #12
 8008782:	4313      	orrs	r3, r2
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	4313      	orrs	r3, r2
 8008788:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008790:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008798:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	4313      	orrs	r3, r2
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3718      	adds	r7, #24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	08004ac9 	.word	0x08004ac9

08008804 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008814:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800881c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008824:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800882c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d110      	bne.n	8008856 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008834:	7bfb      	ldrb	r3, [r7, #15]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d102      	bne.n	8008840 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800883a:	7b7b      	ldrb	r3, [r7, #13]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d001      	beq.n	8008844 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e069      	b.n	8008918 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2202      	movs	r2, #2
 8008850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008854:	e031      	b.n	80088ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b04      	cmp	r3, #4
 800885a:	d110      	bne.n	800887e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d102      	bne.n	8008868 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008862:	7b3b      	ldrb	r3, [r7, #12]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d001      	beq.n	800886c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e055      	b.n	8008918 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2202      	movs	r2, #2
 8008870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2202      	movs	r2, #2
 8008878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800887c:	e01d      	b.n	80088ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800887e:	7bfb      	ldrb	r3, [r7, #15]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d108      	bne.n	8008896 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008884:	7bbb      	ldrb	r3, [r7, #14]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d105      	bne.n	8008896 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800888a:	7b7b      	ldrb	r3, [r7, #13]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d102      	bne.n	8008896 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008890:	7b3b      	ldrb	r3, [r7, #12]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d001      	beq.n	800889a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e03e      	b.n	8008918 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2202      	movs	r2, #2
 800889e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2202      	movs	r2, #2
 80088a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2202      	movs	r2, #2
 80088ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2202      	movs	r2, #2
 80088b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d003      	beq.n	80088c8 <HAL_TIM_Encoder_Start+0xc4>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	2b04      	cmp	r3, #4
 80088c4:	d008      	beq.n	80088d8 <HAL_TIM_Encoder_Start+0xd4>
 80088c6:	e00f      	b.n	80088e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2201      	movs	r2, #1
 80088ce:	2100      	movs	r1, #0
 80088d0:	4618      	mov	r0, r3
 80088d2:	f001 f84b 	bl	800996c <TIM_CCxChannelCmd>
      break;
 80088d6:	e016      	b.n	8008906 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2201      	movs	r2, #1
 80088de:	2104      	movs	r1, #4
 80088e0:	4618      	mov	r0, r3
 80088e2:	f001 f843 	bl	800996c <TIM_CCxChannelCmd>
      break;
 80088e6:	e00e      	b.n	8008906 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2201      	movs	r2, #1
 80088ee:	2100      	movs	r1, #0
 80088f0:	4618      	mov	r0, r3
 80088f2:	f001 f83b 	bl	800996c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2201      	movs	r2, #1
 80088fc:	2104      	movs	r1, #4
 80088fe:	4618      	mov	r0, r3
 8008900:	f001 f834 	bl	800996c <TIM_CCxChannelCmd>
      break;
 8008904:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f042 0201 	orr.w	r2, r2, #1
 8008914:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b02      	cmp	r3, #2
 8008934:	d128      	bne.n	8008988 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	f003 0302 	and.w	r3, r3, #2
 8008940:	2b02      	cmp	r3, #2
 8008942:	d121      	bne.n	8008988 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f06f 0202 	mvn.w	r2, #2
 800894c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	f003 0303 	and.w	r3, r3, #3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d005      	beq.n	800896e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	4798      	blx	r3
 800896c:	e009      	b.n	8008982 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	f003 0304 	and.w	r3, r3, #4
 8008992:	2b04      	cmp	r3, #4
 8008994:	d128      	bne.n	80089e8 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	f003 0304 	and.w	r3, r3, #4
 80089a0:	2b04      	cmp	r3, #4
 80089a2:	d121      	bne.n	80089e8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f06f 0204 	mvn.w	r2, #4
 80089ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2202      	movs	r2, #2
 80089b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d005      	beq.n	80089ce <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	4798      	blx	r3
 80089cc:	e009      	b.n	80089e2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	f003 0308 	and.w	r3, r3, #8
 80089f2:	2b08      	cmp	r3, #8
 80089f4:	d128      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f003 0308 	and.w	r3, r3, #8
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	d121      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f06f 0208 	mvn.w	r2, #8
 8008a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2204      	movs	r2, #4
 8008a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	f003 0303 	and.w	r3, r3, #3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d005      	beq.n	8008a2e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	4798      	blx	r3
 8008a2c:	e009      	b.n	8008a42 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f003 0310 	and.w	r3, r3, #16
 8008a52:	2b10      	cmp	r3, #16
 8008a54:	d128      	bne.n	8008aa8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f003 0310 	and.w	r3, r3, #16
 8008a60:	2b10      	cmp	r3, #16
 8008a62:	d121      	bne.n	8008aa8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f06f 0210 	mvn.w	r2, #16
 8008a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2208      	movs	r2, #8
 8008a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d005      	beq.n	8008a8e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	4798      	blx	r3
 8008a8c:	e009      	b.n	8008aa2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	f003 0301 	and.w	r3, r3, #1
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d110      	bne.n	8008ad8 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d109      	bne.n	8008ad8 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f06f 0201 	mvn.w	r2, #1
 8008acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae2:	2b80      	cmp	r3, #128	; 0x80
 8008ae4:	d110      	bne.n	8008b08 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af0:	2b80      	cmp	r3, #128	; 0x80
 8008af2:	d109      	bne.n	8008b08 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b12:	2b40      	cmp	r3, #64	; 0x40
 8008b14:	d110      	bne.n	8008b38 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b20:	2b40      	cmp	r3, #64	; 0x40
 8008b22:	d109      	bne.n	8008b38 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	f003 0320 	and.w	r3, r3, #32
 8008b42:	2b20      	cmp	r3, #32
 8008b44:	d110      	bne.n	8008b68 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f003 0320 	and.w	r3, r3, #32
 8008b50:	2b20      	cmp	r3, #32
 8008b52:	d109      	bne.n	8008b68 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f06f 0220 	mvn.w	r2, #32
 8008b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b68:	bf00      	nop
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d101      	bne.n	8008b8e <HAL_TIM_OC_ConfigChannel+0x1e>
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e048      	b.n	8008c20 <HAL_TIM_OC_ConfigChannel+0xb0>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b0c      	cmp	r3, #12
 8008b9a:	d839      	bhi.n	8008c10 <HAL_TIM_OC_ConfigChannel+0xa0>
 8008b9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ba4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba2:	bf00      	nop
 8008ba4:	08008bd9 	.word	0x08008bd9
 8008ba8:	08008c11 	.word	0x08008c11
 8008bac:	08008c11 	.word	0x08008c11
 8008bb0:	08008c11 	.word	0x08008c11
 8008bb4:	08008be7 	.word	0x08008be7
 8008bb8:	08008c11 	.word	0x08008c11
 8008bbc:	08008c11 	.word	0x08008c11
 8008bc0:	08008c11 	.word	0x08008c11
 8008bc4:	08008bf5 	.word	0x08008bf5
 8008bc8:	08008c11 	.word	0x08008c11
 8008bcc:	08008c11 	.word	0x08008c11
 8008bd0:	08008c11 	.word	0x08008c11
 8008bd4:	08008c03 	.word	0x08008c03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 fc9e 	bl	8009520 <TIM_OC1_SetConfig>
      break;
 8008be4:	e017      	b.n	8008c16 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68b9      	ldr	r1, [r7, #8]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 fcfd 	bl	80095ec <TIM_OC2_SetConfig>
      break;
 8008bf2:	e010      	b.n	8008c16 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68b9      	ldr	r1, [r7, #8]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 fd62 	bl	80096c4 <TIM_OC3_SetConfig>
      break;
 8008c00:	e009      	b.n	8008c16 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68b9      	ldr	r1, [r7, #8]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 fdc5 	bl	8009798 <TIM_OC4_SetConfig>
      break;
 8008c0e:	e002      	b.n	8008c16 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	75fb      	strb	r3, [r7, #23]
      break;
 8008c14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d101      	bne.n	8008c46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008c42:	2302      	movs	r3, #2
 8008c44:	e0ae      	b.n	8008da4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b0c      	cmp	r3, #12
 8008c52:	f200 809f 	bhi.w	8008d94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008c56:	a201      	add	r2, pc, #4	; (adr r2, 8008c5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5c:	08008c91 	.word	0x08008c91
 8008c60:	08008d95 	.word	0x08008d95
 8008c64:	08008d95 	.word	0x08008d95
 8008c68:	08008d95 	.word	0x08008d95
 8008c6c:	08008cd1 	.word	0x08008cd1
 8008c70:	08008d95 	.word	0x08008d95
 8008c74:	08008d95 	.word	0x08008d95
 8008c78:	08008d95 	.word	0x08008d95
 8008c7c:	08008d13 	.word	0x08008d13
 8008c80:	08008d95 	.word	0x08008d95
 8008c84:	08008d95 	.word	0x08008d95
 8008c88:	08008d95 	.word	0x08008d95
 8008c8c:	08008d53 	.word	0x08008d53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68b9      	ldr	r1, [r7, #8]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 fc42 	bl	8009520 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	699a      	ldr	r2, [r3, #24]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f042 0208 	orr.w	r2, r2, #8
 8008caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	699a      	ldr	r2, [r3, #24]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f022 0204 	bic.w	r2, r2, #4
 8008cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6999      	ldr	r1, [r3, #24]
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	691a      	ldr	r2, [r3, #16]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	619a      	str	r2, [r3, #24]
      break;
 8008cce:	e064      	b.n	8008d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68b9      	ldr	r1, [r7, #8]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 fc88 	bl	80095ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	699a      	ldr	r2, [r3, #24]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	699a      	ldr	r2, [r3, #24]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	6999      	ldr	r1, [r3, #24]
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	021a      	lsls	r2, r3, #8
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	619a      	str	r2, [r3, #24]
      break;
 8008d10:	e043      	b.n	8008d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68b9      	ldr	r1, [r7, #8]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 fcd3 	bl	80096c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	69da      	ldr	r2, [r3, #28]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f042 0208 	orr.w	r2, r2, #8
 8008d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	69da      	ldr	r2, [r3, #28]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f022 0204 	bic.w	r2, r2, #4
 8008d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	69d9      	ldr	r1, [r3, #28]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	691a      	ldr	r2, [r3, #16]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	61da      	str	r2, [r3, #28]
      break;
 8008d50:	e023      	b.n	8008d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68b9      	ldr	r1, [r7, #8]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 fd1d 	bl	8009798 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	69da      	ldr	r2, [r3, #28]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	69da      	ldr	r2, [r3, #28]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	69d9      	ldr	r1, [r3, #28]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	021a      	lsls	r2, r3, #8
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	61da      	str	r2, [r3, #28]
      break;
 8008d92:	e002      	b.n	8008d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	75fb      	strb	r3, [r7, #23]
      break;
 8008d98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d101      	bne.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1c>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	e0b4      	b.n	8008f32 <HAL_TIM_ConfigClockSource+0x186>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e00:	d03e      	beq.n	8008e80 <HAL_TIM_ConfigClockSource+0xd4>
 8008e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e06:	f200 8087 	bhi.w	8008f18 <HAL_TIM_ConfigClockSource+0x16c>
 8008e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e0e:	f000 8086 	beq.w	8008f1e <HAL_TIM_ConfigClockSource+0x172>
 8008e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e16:	d87f      	bhi.n	8008f18 <HAL_TIM_ConfigClockSource+0x16c>
 8008e18:	2b70      	cmp	r3, #112	; 0x70
 8008e1a:	d01a      	beq.n	8008e52 <HAL_TIM_ConfigClockSource+0xa6>
 8008e1c:	2b70      	cmp	r3, #112	; 0x70
 8008e1e:	d87b      	bhi.n	8008f18 <HAL_TIM_ConfigClockSource+0x16c>
 8008e20:	2b60      	cmp	r3, #96	; 0x60
 8008e22:	d050      	beq.n	8008ec6 <HAL_TIM_ConfigClockSource+0x11a>
 8008e24:	2b60      	cmp	r3, #96	; 0x60
 8008e26:	d877      	bhi.n	8008f18 <HAL_TIM_ConfigClockSource+0x16c>
 8008e28:	2b50      	cmp	r3, #80	; 0x50
 8008e2a:	d03c      	beq.n	8008ea6 <HAL_TIM_ConfigClockSource+0xfa>
 8008e2c:	2b50      	cmp	r3, #80	; 0x50
 8008e2e:	d873      	bhi.n	8008f18 <HAL_TIM_ConfigClockSource+0x16c>
 8008e30:	2b40      	cmp	r3, #64	; 0x40
 8008e32:	d058      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x13a>
 8008e34:	2b40      	cmp	r3, #64	; 0x40
 8008e36:	d86f      	bhi.n	8008f18 <HAL_TIM_ConfigClockSource+0x16c>
 8008e38:	2b30      	cmp	r3, #48	; 0x30
 8008e3a:	d064      	beq.n	8008f06 <HAL_TIM_ConfigClockSource+0x15a>
 8008e3c:	2b30      	cmp	r3, #48	; 0x30
 8008e3e:	d86b      	bhi.n	8008f18 <HAL_TIM_ConfigClockSource+0x16c>
 8008e40:	2b20      	cmp	r3, #32
 8008e42:	d060      	beq.n	8008f06 <HAL_TIM_ConfigClockSource+0x15a>
 8008e44:	2b20      	cmp	r3, #32
 8008e46:	d867      	bhi.n	8008f18 <HAL_TIM_ConfigClockSource+0x16c>
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d05c      	beq.n	8008f06 <HAL_TIM_ConfigClockSource+0x15a>
 8008e4c:	2b10      	cmp	r3, #16
 8008e4e:	d05a      	beq.n	8008f06 <HAL_TIM_ConfigClockSource+0x15a>
 8008e50:	e062      	b.n	8008f18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	6899      	ldr	r1, [r3, #8]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	f000 fd63 	bl	800992c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	609a      	str	r2, [r3, #8]
      break;
 8008e7e:	e04f      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6818      	ldr	r0, [r3, #0]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	6899      	ldr	r1, [r3, #8]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	f000 fd4c 	bl	800992c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	689a      	ldr	r2, [r3, #8]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ea2:	609a      	str	r2, [r3, #8]
      break;
 8008ea4:	e03c      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6818      	ldr	r0, [r3, #0]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	6859      	ldr	r1, [r3, #4]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f000 fcc0 	bl	8009838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2150      	movs	r1, #80	; 0x50
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 fd19 	bl	80098f6 <TIM_ITRx_SetConfig>
      break;
 8008ec4:	e02c      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6818      	ldr	r0, [r3, #0]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	6859      	ldr	r1, [r3, #4]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	f000 fcdf 	bl	8009896 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2160      	movs	r1, #96	; 0x60
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 fd09 	bl	80098f6 <TIM_ITRx_SetConfig>
      break;
 8008ee4:	e01c      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6818      	ldr	r0, [r3, #0]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	6859      	ldr	r1, [r3, #4]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	f000 fca0 	bl	8009838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2140      	movs	r1, #64	; 0x40
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 fcf9 	bl	80098f6 <TIM_ITRx_SetConfig>
      break;
 8008f04:	e00c      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	4610      	mov	r0, r2
 8008f12:	f000 fcf0 	bl	80098f6 <TIM_ITRx_SetConfig>
      break;
 8008f16:	e003      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f1c:	e000      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008f1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b083      	sub	sp, #12
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008f42:	bf00      	nop
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b083      	sub	sp, #12
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f56:	bf00      	nop
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b083      	sub	sp, #12
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f6a:	bf00      	nop
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008f7e:	bf00      	nop
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b083      	sub	sp, #12
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008f92:	bf00      	nop
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b083      	sub	sp, #12
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fa6:	bf00      	nop
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b083      	sub	sp, #12
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008fba:	bf00      	nop
 8008fbc:	370c      	adds	r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008fc6:	b480      	push	{r7}
 8008fc8:	b083      	sub	sp, #12
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008fce:	bf00      	nop
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
	...

08008fdc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b087      	sub	sp, #28
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e135      	b.n	8009264 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d101      	bne.n	8009006 <HAL_TIM_RegisterCallback+0x2a>
 8009002:	2302      	movs	r3, #2
 8009004:	e12e      	b.n	8009264 <HAL_TIM_RegisterCallback+0x288>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b01      	cmp	r3, #1
 8009018:	f040 80ba 	bne.w	8009190 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800901c:	7afb      	ldrb	r3, [r7, #11]
 800901e:	2b1a      	cmp	r3, #26
 8009020:	f200 80b3 	bhi.w	800918a <HAL_TIM_RegisterCallback+0x1ae>
 8009024:	a201      	add	r2, pc, #4	; (adr r2, 800902c <HAL_TIM_RegisterCallback+0x50>)
 8009026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902a:	bf00      	nop
 800902c:	08009099 	.word	0x08009099
 8009030:	080090a1 	.word	0x080090a1
 8009034:	080090a9 	.word	0x080090a9
 8009038:	080090b1 	.word	0x080090b1
 800903c:	080090b9 	.word	0x080090b9
 8009040:	080090c1 	.word	0x080090c1
 8009044:	080090c9 	.word	0x080090c9
 8009048:	080090d1 	.word	0x080090d1
 800904c:	080090d9 	.word	0x080090d9
 8009050:	080090e1 	.word	0x080090e1
 8009054:	080090e9 	.word	0x080090e9
 8009058:	080090f1 	.word	0x080090f1
 800905c:	080090f9 	.word	0x080090f9
 8009060:	08009101 	.word	0x08009101
 8009064:	08009109 	.word	0x08009109
 8009068:	08009113 	.word	0x08009113
 800906c:	0800911d 	.word	0x0800911d
 8009070:	08009127 	.word	0x08009127
 8009074:	08009131 	.word	0x08009131
 8009078:	0800913b 	.word	0x0800913b
 800907c:	08009145 	.word	0x08009145
 8009080:	0800914f 	.word	0x0800914f
 8009084:	08009159 	.word	0x08009159
 8009088:	08009163 	.word	0x08009163
 800908c:	0800916d 	.word	0x0800916d
 8009090:	08009177 	.word	0x08009177
 8009094:	08009181 	.word	0x08009181
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800909e:	e0dc      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80090a6:	e0d8      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80090ae:	e0d4      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80090b6:	e0d0      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80090be:	e0cc      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80090c6:	e0c8      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80090ce:	e0c4      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80090d6:	e0c0      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80090de:	e0bc      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80090e6:	e0b8      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80090ee:	e0b4      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80090f6:	e0b0      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80090fe:	e0ac      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009106:	e0a8      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009110:	e0a3      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800911a:	e09e      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8009124:	e099      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800912e:	e094      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8009138:	e08f      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8009142:	e08a      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800914c:	e085      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8009156:	e080      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8009160:	e07b      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800916a:	e076      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8009174:	e071      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800917e:	e06c      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009188:	e067      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	75fb      	strb	r3, [r7, #23]
        break;
 800918e:	e064      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009196:	b2db      	uxtb	r3, r3
 8009198:	2b00      	cmp	r3, #0
 800919a:	d15c      	bne.n	8009256 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800919c:	7afb      	ldrb	r3, [r7, #11]
 800919e:	2b0d      	cmp	r3, #13
 80091a0:	d856      	bhi.n	8009250 <HAL_TIM_RegisterCallback+0x274>
 80091a2:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <HAL_TIM_RegisterCallback+0x1cc>)
 80091a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a8:	080091e1 	.word	0x080091e1
 80091ac:	080091e9 	.word	0x080091e9
 80091b0:	080091f1 	.word	0x080091f1
 80091b4:	080091f9 	.word	0x080091f9
 80091b8:	08009201 	.word	0x08009201
 80091bc:	08009209 	.word	0x08009209
 80091c0:	08009211 	.word	0x08009211
 80091c4:	08009219 	.word	0x08009219
 80091c8:	08009221 	.word	0x08009221
 80091cc:	08009229 	.word	0x08009229
 80091d0:	08009231 	.word	0x08009231
 80091d4:	08009239 	.word	0x08009239
 80091d8:	08009241 	.word	0x08009241
 80091dc:	08009249 	.word	0x08009249
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80091e6:	e038      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80091ee:	e034      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80091f6:	e030      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80091fe:	e02c      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009206:	e028      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800920e:	e024      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009216:	e020      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800921e:	e01c      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009226:	e018      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800922e:	e014      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009236:	e010      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800923e:	e00c      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009246:	e008      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800924e:	e004      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	75fb      	strb	r3, [r7, #23]
        break;
 8009254:	e001      	b.n	800925a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009262:	7dfb      	ldrb	r3, [r7, #23]
}
 8009264:	4618      	mov	r0, r3
 8009266:	371c      	adds	r7, #28
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	429a      	cmp	r2, r3
 8009286:	d107      	bne.n	8009298 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2201      	movs	r2, #1
 800928c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009296:	e02a      	b.n	80092ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d107      	bne.n	80092b2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2202      	movs	r2, #2
 80092a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092b0:	e01d      	b.n	80092ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d107      	bne.n	80092cc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2204      	movs	r2, #4
 80092c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092ca:	e010      	b.n	80092ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d107      	bne.n	80092e6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2208      	movs	r2, #8
 80092da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092e4:	e003      	b.n	80092ee <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	4798      	blx	r3
#else
  HAL_TIM_ErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	771a      	strb	r2, [r3, #28]
}
 80092fe:	bf00      	nop
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	429a      	cmp	r2, r3
 800931c:	d10b      	bne.n	8009336 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2201      	movs	r2, #1
 8009322:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d136      	bne.n	800939a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009334:	e031      	b.n	800939a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	429a      	cmp	r2, r3
 800933e:	d10b      	bne.n	8009358 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2202      	movs	r2, #2
 8009344:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	69db      	ldr	r3, [r3, #28]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d125      	bne.n	800939a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009356:	e020      	b.n	800939a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	429a      	cmp	r2, r3
 8009360:	d10b      	bne.n	800937a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2204      	movs	r2, #4
 8009366:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	69db      	ldr	r3, [r3, #28]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d114      	bne.n	800939a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009378:	e00f      	b.n	800939a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	429a      	cmp	r2, r3
 8009382:	d10a      	bne.n	800939a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2208      	movs	r2, #8
 8009388:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d103      	bne.n	800939a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	771a      	strb	r2, [r3, #28]
}
 80093aa:	bf00      	nop
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093be:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d103      	bne.n	80093d2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2201      	movs	r2, #1
 80093ce:	771a      	strb	r2, [r3, #28]
 80093d0:	e019      	b.n	8009406 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d103      	bne.n	80093e4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2202      	movs	r2, #2
 80093e0:	771a      	strb	r2, [r3, #28]
 80093e2:	e010      	b.n	8009406 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d103      	bne.n	80093f6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2204      	movs	r2, #4
 80093f2:	771a      	strb	r2, [r3, #28]
 80093f4:	e007      	b.n	8009406 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d102      	bne.n	8009406 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2208      	movs	r2, #8
 8009404:	771a      	strb	r2, [r3, #28]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	771a      	strb	r2, [r3, #28]
}
 8009416:	bf00      	nop
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
	...

08009420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a34      	ldr	r2, [pc, #208]	; (8009504 <TIM_Base_SetConfig+0xe4>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d00f      	beq.n	8009458 <TIM_Base_SetConfig+0x38>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800943e:	d00b      	beq.n	8009458 <TIM_Base_SetConfig+0x38>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a31      	ldr	r2, [pc, #196]	; (8009508 <TIM_Base_SetConfig+0xe8>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d007      	beq.n	8009458 <TIM_Base_SetConfig+0x38>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a30      	ldr	r2, [pc, #192]	; (800950c <TIM_Base_SetConfig+0xec>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d003      	beq.n	8009458 <TIM_Base_SetConfig+0x38>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a2f      	ldr	r2, [pc, #188]	; (8009510 <TIM_Base_SetConfig+0xf0>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d108      	bne.n	800946a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800945e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	4313      	orrs	r3, r2
 8009468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a25      	ldr	r2, [pc, #148]	; (8009504 <TIM_Base_SetConfig+0xe4>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d01b      	beq.n	80094aa <TIM_Base_SetConfig+0x8a>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009478:	d017      	beq.n	80094aa <TIM_Base_SetConfig+0x8a>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a22      	ldr	r2, [pc, #136]	; (8009508 <TIM_Base_SetConfig+0xe8>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d013      	beq.n	80094aa <TIM_Base_SetConfig+0x8a>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a21      	ldr	r2, [pc, #132]	; (800950c <TIM_Base_SetConfig+0xec>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d00f      	beq.n	80094aa <TIM_Base_SetConfig+0x8a>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a20      	ldr	r2, [pc, #128]	; (8009510 <TIM_Base_SetConfig+0xf0>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d00b      	beq.n	80094aa <TIM_Base_SetConfig+0x8a>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a1f      	ldr	r2, [pc, #124]	; (8009514 <TIM_Base_SetConfig+0xf4>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d007      	beq.n	80094aa <TIM_Base_SetConfig+0x8a>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a1e      	ldr	r2, [pc, #120]	; (8009518 <TIM_Base_SetConfig+0xf8>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d003      	beq.n	80094aa <TIM_Base_SetConfig+0x8a>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a1d      	ldr	r2, [pc, #116]	; (800951c <TIM_Base_SetConfig+0xfc>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d108      	bne.n	80094bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a08      	ldr	r2, [pc, #32]	; (8009504 <TIM_Base_SetConfig+0xe4>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d103      	bne.n	80094f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	691a      	ldr	r2, [r3, #16]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	615a      	str	r2, [r3, #20]
}
 80094f6:	bf00      	nop
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	40010000 	.word	0x40010000
 8009508:	40000400 	.word	0x40000400
 800950c:	40000800 	.word	0x40000800
 8009510:	40000c00 	.word	0x40000c00
 8009514:	40014000 	.word	0x40014000
 8009518:	40014400 	.word	0x40014400
 800951c:	40014800 	.word	0x40014800

08009520 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009520:	b480      	push	{r7}
 8009522:	b087      	sub	sp, #28
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	f023 0201 	bic.w	r2, r3, #1
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800954e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f023 0303 	bic.w	r3, r3, #3
 8009556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	4313      	orrs	r3, r2
 8009560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f023 0302 	bic.w	r3, r3, #2
 8009568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	4313      	orrs	r3, r2
 8009572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a1c      	ldr	r2, [pc, #112]	; (80095e8 <TIM_OC1_SetConfig+0xc8>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d10c      	bne.n	8009596 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	f023 0308 	bic.w	r3, r3, #8
 8009582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	4313      	orrs	r3, r2
 800958c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f023 0304 	bic.w	r3, r3, #4
 8009594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a13      	ldr	r2, [pc, #76]	; (80095e8 <TIM_OC1_SetConfig+0xc8>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d111      	bne.n	80095c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	4313      	orrs	r3, r2
 80095c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	621a      	str	r2, [r3, #32]
}
 80095dc:	bf00      	nop
 80095de:	371c      	adds	r7, #28
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	40010000 	.word	0x40010000

080095ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b087      	sub	sp, #28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	f023 0210 	bic.w	r2, r3, #16
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800961a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	021b      	lsls	r3, r3, #8
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	4313      	orrs	r3, r2
 800962e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	f023 0320 	bic.w	r3, r3, #32
 8009636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	011b      	lsls	r3, r3, #4
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	4313      	orrs	r3, r2
 8009642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a1e      	ldr	r2, [pc, #120]	; (80096c0 <TIM_OC2_SetConfig+0xd4>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d10d      	bne.n	8009668 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	011b      	lsls	r3, r3, #4
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	4313      	orrs	r3, r2
 800965e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009666:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a15      	ldr	r2, [pc, #84]	; (80096c0 <TIM_OC2_SetConfig+0xd4>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d113      	bne.n	8009698 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800967e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	695b      	ldr	r3, [r3, #20]
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	4313      	orrs	r3, r2
 800968a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	4313      	orrs	r3, r2
 8009696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	693a      	ldr	r2, [r7, #16]
 800969c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	621a      	str	r2, [r3, #32]
}
 80096b2:	bf00      	nop
 80096b4:	371c      	adds	r7, #28
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	40010000 	.word	0x40010000

080096c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	69db      	ldr	r3, [r3, #28]
 80096ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f023 0303 	bic.w	r3, r3, #3
 80096fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	4313      	orrs	r3, r2
 8009704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800970c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	4313      	orrs	r3, r2
 8009718:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a1d      	ldr	r2, [pc, #116]	; (8009794 <TIM_OC3_SetConfig+0xd0>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d10d      	bne.n	800973e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009728:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	021b      	lsls	r3, r3, #8
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	4313      	orrs	r3, r2
 8009734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800973c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a14      	ldr	r2, [pc, #80]	; (8009794 <TIM_OC3_SetConfig+0xd0>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d113      	bne.n	800976e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800974c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	011b      	lsls	r3, r3, #4
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	4313      	orrs	r3, r2
 8009760:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	011b      	lsls	r3, r3, #4
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	4313      	orrs	r3, r2
 800976c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	685a      	ldr	r2, [r3, #4]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	621a      	str	r2, [r3, #32]
}
 8009788:	bf00      	nop
 800978a:	371c      	adds	r7, #28
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	40010000 	.word	0x40010000

08009798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009798:	b480      	push	{r7}
 800979a:	b087      	sub	sp, #28
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	021b      	lsls	r3, r3, #8
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	4313      	orrs	r3, r2
 80097da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	031b      	lsls	r3, r3, #12
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a10      	ldr	r2, [pc, #64]	; (8009834 <TIM_OC4_SetConfig+0x9c>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d109      	bne.n	800980c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	695b      	ldr	r3, [r3, #20]
 8009804:	019b      	lsls	r3, r3, #6
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	4313      	orrs	r3, r2
 800980a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	621a      	str	r2, [r3, #32]
}
 8009826:	bf00      	nop
 8009828:	371c      	adds	r7, #28
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	40010000 	.word	0x40010000

08009838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009838:	b480      	push	{r7}
 800983a:	b087      	sub	sp, #28
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6a1b      	ldr	r3, [r3, #32]
 8009848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6a1b      	ldr	r3, [r3, #32]
 800984e:	f023 0201 	bic.w	r2, r3, #1
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	011b      	lsls	r3, r3, #4
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	4313      	orrs	r3, r2
 800986c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f023 030a 	bic.w	r3, r3, #10
 8009874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	4313      	orrs	r3, r2
 800987c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	621a      	str	r2, [r3, #32]
}
 800988a:	bf00      	nop
 800988c:	371c      	adds	r7, #28
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009896:	b480      	push	{r7}
 8009898:	b087      	sub	sp, #28
 800989a:	af00      	add	r7, sp, #0
 800989c:	60f8      	str	r0, [r7, #12]
 800989e:	60b9      	str	r1, [r7, #8]
 80098a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	f023 0210 	bic.w	r2, r3, #16
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6a1b      	ldr	r3, [r3, #32]
 80098b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	031b      	lsls	r3, r3, #12
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	011b      	lsls	r3, r3, #4
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	4313      	orrs	r3, r2
 80098dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	693a      	ldr	r2, [r7, #16]
 80098e8:	621a      	str	r2, [r3, #32]
}
 80098ea:	bf00      	nop
 80098ec:	371c      	adds	r7, #28
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr

080098f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098f6:	b480      	push	{r7}
 80098f8:	b085      	sub	sp, #20
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800990c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4313      	orrs	r3, r2
 8009914:	f043 0307 	orr.w	r3, r3, #7
 8009918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	609a      	str	r2, [r3, #8]
}
 8009920:	bf00      	nop
 8009922:	3714      	adds	r7, #20
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800992c:	b480      	push	{r7}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
 8009938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	021a      	lsls	r2, r3, #8
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	431a      	orrs	r2, r3
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	4313      	orrs	r3, r2
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	4313      	orrs	r3, r2
 8009958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	609a      	str	r2, [r3, #8]
}
 8009960:	bf00      	nop
 8009962:	371c      	adds	r7, #28
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800996c:	b480      	push	{r7}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	f003 031f 	and.w	r3, r3, #31
 800997e:	2201      	movs	r2, #1
 8009980:	fa02 f303 	lsl.w	r3, r2, r3
 8009984:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6a1a      	ldr	r2, [r3, #32]
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	43db      	mvns	r3, r3
 800998e:	401a      	ands	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6a1a      	ldr	r2, [r3, #32]
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	f003 031f 	and.w	r3, r3, #31
 800999e:	6879      	ldr	r1, [r7, #4]
 80099a0:	fa01 f303 	lsl.w	r3, r1, r3
 80099a4:	431a      	orrs	r2, r3
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	621a      	str	r2, [r3, #32]
}
 80099aa:	bf00      	nop
 80099ac:	371c      	adds	r7, #28
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
	...

080099b8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a1c      	ldr	r2, [pc, #112]	; (8009a34 <TIM_ResetCallback+0x7c>)
 80099c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a1b      	ldr	r2, [pc, #108]	; (8009a38 <TIM_ResetCallback+0x80>)
 80099cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a1a      	ldr	r2, [pc, #104]	; (8009a3c <TIM_ResetCallback+0x84>)
 80099d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a19      	ldr	r2, [pc, #100]	; (8009a40 <TIM_ResetCallback+0x88>)
 80099dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a18      	ldr	r2, [pc, #96]	; (8009a44 <TIM_ResetCallback+0x8c>)
 80099e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a17      	ldr	r2, [pc, #92]	; (8009a48 <TIM_ResetCallback+0x90>)
 80099ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a16      	ldr	r2, [pc, #88]	; (8009a4c <TIM_ResetCallback+0x94>)
 80099f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a15      	ldr	r2, [pc, #84]	; (8009a50 <TIM_ResetCallback+0x98>)
 80099fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a14      	ldr	r2, [pc, #80]	; (8009a54 <TIM_ResetCallback+0x9c>)
 8009a04:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a13      	ldr	r2, [pc, #76]	; (8009a58 <TIM_ResetCallback+0xa0>)
 8009a0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a12      	ldr	r2, [pc, #72]	; (8009a5c <TIM_ResetCallback+0xa4>)
 8009a14:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a11      	ldr	r2, [pc, #68]	; (8009a60 <TIM_ResetCallback+0xa8>)
 8009a1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a10      	ldr	r2, [pc, #64]	; (8009a64 <TIM_ResetCallback+0xac>)
 8009a24:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	080041f5 	.word	0x080041f5
 8009a38:	08008f3b 	.word	0x08008f3b
 8009a3c:	08008f9f 	.word	0x08008f9f
 8009a40:	08008fb3 	.word	0x08008fb3
 8009a44:	08008f63 	.word	0x08008f63
 8009a48:	08008f77 	.word	0x08008f77
 8009a4c:	08008f4f 	.word	0x08008f4f
 8009a50:	08003d35 	.word	0x08003d35
 8009a54:	08008f8b 	.word	0x08008f8b
 8009a58:	08008fc7 	.word	0x08008fc7
 8009a5c:	08009be9 	.word	0x08009be9
 8009a60:	08009bfd 	.word	0x08009bfd
 8009a64:	08009c11 	.word	0x08009c11

08009a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d101      	bne.n	8009a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	e050      	b.n	8009b22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a1c      	ldr	r2, [pc, #112]	; (8009b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d018      	beq.n	8009af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009acc:	d013      	beq.n	8009af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a18      	ldr	r2, [pc, #96]	; (8009b34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d00e      	beq.n	8009af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a16      	ldr	r2, [pc, #88]	; (8009b38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d009      	beq.n	8009af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a15      	ldr	r2, [pc, #84]	; (8009b3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d004      	beq.n	8009af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a13      	ldr	r2, [pc, #76]	; (8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d10c      	bne.n	8009b10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	40010000 	.word	0x40010000
 8009b34:	40000400 	.word	0x40000400
 8009b38:	40000800 	.word	0x40000800
 8009b3c:	40000c00 	.word	0x40000c00
 8009b40:	40014000 	.word	0x40014000

08009b44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d101      	bne.n	8009b60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	e03d      	b.n	8009bdc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	695b      	ldr	r3, [r3, #20]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3714      	adds	r7, #20
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e04a      	b.n	8009ccc <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d111      	bne.n	8009c66 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fd22 	bl	800a694 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d102      	bne.n	8009c5e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a1e      	ldr	r2, [pc, #120]	; (8009cd4 <HAL_UART_Init+0xb0>)
 8009c5c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2224      	movs	r2, #36	; 0x24
 8009c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68da      	ldr	r2, [r3, #12]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c7c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 ffec 	bl	800ac5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	691a      	ldr	r2, [r3, #16]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c92:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	695a      	ldr	r2, [r3, #20]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ca2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68da      	ldr	r2, [r3, #12]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cb2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2220      	movs	r2, #32
 8009cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2220      	movs	r2, #32
 8009cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	08005369 	.word	0x08005369

08009cd8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	607a      	str	r2, [r7, #4]
 8009ce4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d107      	bne.n	8009d00 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf4:	f043 0220 	orr.w	r2, r3, #32
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e08c      	b.n	8009e1a <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d101      	bne.n	8009d0e <HAL_UART_RegisterCallback+0x36>
 8009d0a:	2302      	movs	r3, #2
 8009d0c:	e085      	b.n	8009e1a <HAL_UART_RegisterCallback+0x142>
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2201      	movs	r2, #1
 8009d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b20      	cmp	r3, #32
 8009d20:	d151      	bne.n	8009dc6 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8009d22:	7afb      	ldrb	r3, [r7, #11]
 8009d24:	2b0c      	cmp	r3, #12
 8009d26:	d845      	bhi.n	8009db4 <HAL_UART_RegisterCallback+0xdc>
 8009d28:	a201      	add	r2, pc, #4	; (adr r2, 8009d30 <HAL_UART_RegisterCallback+0x58>)
 8009d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2e:	bf00      	nop
 8009d30:	08009d65 	.word	0x08009d65
 8009d34:	08009d6d 	.word	0x08009d6d
 8009d38:	08009d75 	.word	0x08009d75
 8009d3c:	08009d7d 	.word	0x08009d7d
 8009d40:	08009d85 	.word	0x08009d85
 8009d44:	08009d8d 	.word	0x08009d8d
 8009d48:	08009d95 	.word	0x08009d95
 8009d4c:	08009d9d 	.word	0x08009d9d
 8009d50:	08009db5 	.word	0x08009db5
 8009d54:	08009db5 	.word	0x08009db5
 8009d58:	08009db5 	.word	0x08009db5
 8009d5c:	08009da5 	.word	0x08009da5
 8009d60:	08009dad 	.word	0x08009dad
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8009d6a:	e051      	b.n	8009e10 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009d72:	e04d      	b.n	8009e10 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009d7a:	e049      	b.n	8009e10 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009d82:	e045      	b.n	8009e10 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009d8a:	e041      	b.n	8009e10 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009d92:	e03d      	b.n	8009e10 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009d9a:	e039      	b.n	8009e10 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009da2:	e035      	b.n	8009e10 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009daa:	e031      	b.n	8009e10 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009db2:	e02d      	b.n	8009e10 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db8:	f043 0220 	orr.w	r2, r3, #32
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	75fb      	strb	r3, [r7, #23]
        break;
 8009dc4:	e024      	b.n	8009e10 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d116      	bne.n	8009e00 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8009dd2:	7afb      	ldrb	r3, [r7, #11]
 8009dd4:	2b0b      	cmp	r3, #11
 8009dd6:	d002      	beq.n	8009dde <HAL_UART_RegisterCallback+0x106>
 8009dd8:	2b0c      	cmp	r3, #12
 8009dda:	d004      	beq.n	8009de6 <HAL_UART_RegisterCallback+0x10e>
 8009ddc:	e007      	b.n	8009dee <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009de4:	e014      	b.n	8009e10 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009dec:	e010      	b.n	8009e10 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df2:	f043 0220 	orr.w	r2, r3, #32
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	75fb      	strb	r3, [r7, #23]
        break;
 8009dfe:	e007      	b.n	8009e10 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e04:	f043 0220 	orr.w	r2, r3, #32
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	371c      	adds	r7, #28
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop

08009e28 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	4613      	mov	r3, r2
 8009e34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b20      	cmp	r3, #32
 8009e40:	d11d      	bne.n	8009e7e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d002      	beq.n	8009e4e <HAL_UART_Receive_IT+0x26>
 8009e48:	88fb      	ldrh	r3, [r7, #6]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e016      	b.n	8009e80 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d101      	bne.n	8009e60 <HAL_UART_Receive_IT+0x38>
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	e00f      	b.n	8009e80 <HAL_UART_Receive_IT+0x58>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009e6e:	88fb      	ldrh	r3, [r7, #6]
 8009e70:	461a      	mov	r2, r3
 8009e72:	68b9      	ldr	r1, [r7, #8]
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	f000 fced 	bl	800a854 <UART_Start_Receive_IT>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	e000      	b.n	8009e80 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009e7e:	2302      	movs	r3, #2
  }
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b08c      	sub	sp, #48	; 0x30
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	4613      	mov	r3, r2
 8009e94:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b20      	cmp	r3, #32
 8009ea0:	d165      	bne.n	8009f6e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <HAL_UART_Transmit_DMA+0x26>
 8009ea8:	88fb      	ldrh	r3, [r7, #6]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e05e      	b.n	8009f70 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d101      	bne.n	8009ec0 <HAL_UART_Transmit_DMA+0x38>
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	e057      	b.n	8009f70 <HAL_UART_Transmit_DMA+0xe8>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009ec8:	68ba      	ldr	r2, [r7, #8]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	88fa      	ldrh	r2, [r7, #6]
 8009ed2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	88fa      	ldrh	r2, [r7, #6]
 8009ed8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2221      	movs	r2, #33	; 0x21
 8009ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eec:	4a22      	ldr	r2, [pc, #136]	; (8009f78 <HAL_UART_Transmit_DMA+0xf0>)
 8009eee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef4:	4a21      	ldr	r2, [pc, #132]	; (8009f7c <HAL_UART_Transmit_DMA+0xf4>)
 8009ef6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efc:	4a20      	ldr	r2, [pc, #128]	; (8009f80 <HAL_UART_Transmit_DMA+0xf8>)
 8009efe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f04:	2200      	movs	r2, #0
 8009f06:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009f08:	f107 0308 	add.w	r3, r7, #8
 8009f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f14:	6819      	ldr	r1, [r3, #0]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	88fb      	ldrh	r3, [r7, #6]
 8009f20:	f7fb ffd2 	bl	8005ec8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f2c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	3314      	adds	r3, #20
 8009f3c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	e853 3f00 	ldrex	r3, [r3]
 8009f44:	617b      	str	r3, [r7, #20]
   return(result);
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3314      	adds	r3, #20
 8009f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f56:	627a      	str	r2, [r7, #36]	; 0x24
 8009f58:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5a:	6a39      	ldr	r1, [r7, #32]
 8009f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f5e:	e841 2300 	strex	r3, r2, [r1]
 8009f62:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1e5      	bne.n	8009f36 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	e000      	b.n	8009f70 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009f6e:	2302      	movs	r3, #2
  }
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3730      	adds	r7, #48	; 0x30
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	0800a705 	.word	0x0800a705
 8009f7c:	0800a7a1 	.word	0x0800a7a1
 8009f80:	0800a7bf 	.word	0x0800a7bf

08009f84 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b09a      	sub	sp, #104	; 0x68
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	330c      	adds	r3, #12
 8009f92:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f96:	e853 3f00 	ldrex	r3, [r3]
 8009f9a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fa2:	667b      	str	r3, [r7, #100]	; 0x64
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	330c      	adds	r3, #12
 8009faa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009fac:	657a      	str	r2, [r7, #84]	; 0x54
 8009fae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009fb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009fb4:	e841 2300 	strex	r3, r2, [r1]
 8009fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1e5      	bne.n	8009f8c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3314      	adds	r3, #20
 8009fc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fca:	e853 3f00 	ldrex	r3, [r3]
 8009fce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd2:	f023 0301 	bic.w	r3, r3, #1
 8009fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	3314      	adds	r3, #20
 8009fde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fe0:	643a      	str	r2, [r7, #64]	; 0x40
 8009fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fe8:	e841 2300 	strex	r3, r2, [r1]
 8009fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1e5      	bne.n	8009fc0 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d119      	bne.n	800a030 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	330c      	adds	r3, #12
 800a002:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	6a3b      	ldr	r3, [r7, #32]
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	f023 0310 	bic.w	r3, r3, #16
 800a012:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	330c      	adds	r3, #12
 800a01a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a01c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a01e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a024:	e841 2300 	strex	r3, r2, [r1]
 800a028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e5      	bne.n	8009ffc <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a03a:	2b40      	cmp	r3, #64	; 0x40
 800a03c:	d136      	bne.n	800a0ac <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3314      	adds	r3, #20
 800a044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	e853 3f00 	ldrex	r3, [r3]
 800a04c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a054:	65bb      	str	r3, [r7, #88]	; 0x58
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3314      	adds	r3, #20
 800a05c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a05e:	61ba      	str	r2, [r7, #24]
 800a060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a062:	6979      	ldr	r1, [r7, #20]
 800a064:	69ba      	ldr	r2, [r7, #24]
 800a066:	e841 2300 	strex	r3, r2, [r1]
 800a06a:	613b      	str	r3, [r7, #16]
   return(result);
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1e5      	bne.n	800a03e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a076:	2b00      	cmp	r3, #0
 800a078:	d018      	beq.n	800a0ac <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07e:	2200      	movs	r2, #0
 800a080:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a086:	4618      	mov	r0, r3
 800a088:	f7fb ff76 	bl	8005f78 <HAL_DMA_Abort>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00c      	beq.n	800a0ac <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a096:	4618      	mov	r0, r3
 800a098:	f7fc f98a 	bl	80063b0 <HAL_DMA_GetError>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b20      	cmp	r3, #32
 800a0a0:	d104      	bne.n	800a0ac <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2210      	movs	r2, #16
 800a0a6:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e00a      	b.n	800a0c2 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2220      	movs	r2, #32
 800a0b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3768      	adds	r7, #104	; 0x68
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b0ba      	sub	sp, #232	; 0xe8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	695b      	ldr	r3, [r3, #20]
 800a0ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a0fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a102:	f003 030f 	and.w	r3, r3, #15
 800a106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a10a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10f      	bne.n	800a132 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a116:	f003 0320 	and.w	r3, r3, #32
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d009      	beq.n	800a132 <HAL_UART_IRQHandler+0x66>
 800a11e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a122:	f003 0320 	and.w	r3, r3, #32
 800a126:	2b00      	cmp	r3, #0
 800a128:	d003      	beq.n	800a132 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fcd9 	bl	800aae2 <UART_Receive_IT>
      return;
 800a130:	e25b      	b.n	800a5ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a136:	2b00      	cmp	r3, #0
 800a138:	f000 80e1 	beq.w	800a2fe <HAL_UART_IRQHandler+0x232>
 800a13c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	2b00      	cmp	r3, #0
 800a146:	d106      	bne.n	800a156 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a14c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a150:	2b00      	cmp	r3, #0
 800a152:	f000 80d4 	beq.w	800a2fe <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a15a:	f003 0301 	and.w	r3, r3, #1
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00b      	beq.n	800a17a <HAL_UART_IRQHandler+0xae>
 800a162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d005      	beq.n	800a17a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a172:	f043 0201 	orr.w	r2, r3, #1
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a17a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a17e:	f003 0304 	and.w	r3, r3, #4
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00b      	beq.n	800a19e <HAL_UART_IRQHandler+0xd2>
 800a186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d005      	beq.n	800a19e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a196:	f043 0202 	orr.w	r2, r3, #2
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1a2:	f003 0302 	and.w	r3, r3, #2
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00b      	beq.n	800a1c2 <HAL_UART_IRQHandler+0xf6>
 800a1aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d005      	beq.n	800a1c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ba:	f043 0204 	orr.w	r2, r3, #4
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a1c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1c6:	f003 0308 	and.w	r3, r3, #8
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d011      	beq.n	800a1f2 <HAL_UART_IRQHandler+0x126>
 800a1ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1d2:	f003 0320 	and.w	r3, r3, #32
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d105      	bne.n	800a1e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a1da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d005      	beq.n	800a1f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ea:	f043 0208 	orr.w	r2, r3, #8
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	f000 81f2 	beq.w	800a5e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a1fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a200:	f003 0320 	and.w	r3, r3, #32
 800a204:	2b00      	cmp	r3, #0
 800a206:	d008      	beq.n	800a21a <HAL_UART_IRQHandler+0x14e>
 800a208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a20c:	f003 0320 	and.w	r3, r3, #32
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fc64 	bl	800aae2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	695b      	ldr	r3, [r3, #20]
 800a220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a224:	2b40      	cmp	r3, #64	; 0x40
 800a226:	bf0c      	ite	eq
 800a228:	2301      	moveq	r3, #1
 800a22a:	2300      	movne	r3, #0
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a236:	f003 0308 	and.w	r3, r3, #8
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d103      	bne.n	800a246 <HAL_UART_IRQHandler+0x17a>
 800a23e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a242:	2b00      	cmp	r3, #0
 800a244:	d051      	beq.n	800a2ea <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fb6a 	bl	800a920 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a256:	2b40      	cmp	r3, #64	; 0x40
 800a258:	d142      	bne.n	800a2e0 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3314      	adds	r3, #20
 800a260:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a264:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a268:	e853 3f00 	ldrex	r3, [r3]
 800a26c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	3314      	adds	r3, #20
 800a282:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a286:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a28a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a292:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a296:	e841 2300 	strex	r3, r2, [r1]
 800a29a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a29e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1d9      	bne.n	800a25a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d013      	beq.n	800a2d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b2:	4a7f      	ldr	r2, [pc, #508]	; (800a4b0 <HAL_UART_IRQHandler+0x3e4>)
 800a2b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fb fecc 	bl	8006058 <HAL_DMA_Abort_IT>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d019      	beq.n	800a2fa <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2d4:	e011      	b.n	800a2fa <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2de:	e00c      	b.n	800a2fa <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2e8:	e007      	b.n	800a2fa <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a2f8:	e172      	b.n	800a5e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2fa:	bf00      	nop
    return;
 800a2fc:	e170      	b.n	800a5e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a302:	2b01      	cmp	r3, #1
 800a304:	f040 814c 	bne.w	800a5a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a30c:	f003 0310 	and.w	r3, r3, #16
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 8145 	beq.w	800a5a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a31a:	f003 0310 	and.w	r3, r3, #16
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 813e 	beq.w	800a5a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a324:	2300      	movs	r3, #0
 800a326:	60bb      	str	r3, [r7, #8]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	60bb      	str	r3, [r7, #8]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	60bb      	str	r3, [r7, #8]
 800a338:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	695b      	ldr	r3, [r3, #20]
 800a340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a344:	2b40      	cmp	r3, #64	; 0x40
 800a346:	f040 80b5 	bne.w	800a4b4 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a356:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 8142 	beq.w	800a5e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a364:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a368:	429a      	cmp	r2, r3
 800a36a:	f080 813b 	bcs.w	800a5e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a374:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a380:	f000 8088 	beq.w	800a494 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	330c      	adds	r3, #12
 800a38a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a392:	e853 3f00 	ldrex	r3, [r3]
 800a396:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a39a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a39e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	330c      	adds	r3, #12
 800a3ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a3b0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a3b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a3bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a3c0:	e841 2300 	strex	r3, r2, [r1]
 800a3c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a3c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1d9      	bne.n	800a384 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3314      	adds	r3, #20
 800a3d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3da:	e853 3f00 	ldrex	r3, [r3]
 800a3de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a3e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3e2:	f023 0301 	bic.w	r3, r3, #1
 800a3e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	3314      	adds	r3, #20
 800a3f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a3f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a3f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a3fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a400:	e841 2300 	strex	r3, r2, [r1]
 800a404:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1e1      	bne.n	800a3d0 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3314      	adds	r3, #20
 800a412:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a416:	e853 3f00 	ldrex	r3, [r3]
 800a41a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a41c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a41e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3314      	adds	r3, #20
 800a42c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a430:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a432:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a434:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a436:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a438:	e841 2300 	strex	r3, r2, [r1]
 800a43c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a43e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1e3      	bne.n	800a40c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2220      	movs	r2, #32
 800a448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	330c      	adds	r3, #12
 800a458:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a45c:	e853 3f00 	ldrex	r3, [r3]
 800a460:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a464:	f023 0310 	bic.w	r3, r3, #16
 800a468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	330c      	adds	r3, #12
 800a472:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a476:	65ba      	str	r2, [r7, #88]	; 0x58
 800a478:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a47c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a47e:	e841 2300 	strex	r3, r2, [r1]
 800a482:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1e3      	bne.n	800a452 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fb fd72 	bl	8005f78 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800a4a0:	b292      	uxth	r2, r2
 800a4a2:	1a8a      	subs	r2, r1, r2
 800a4a4:	b292      	uxth	r2, r2
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a4ac:	e09a      	b.n	800a5e4 <HAL_UART_IRQHandler+0x518>
 800a4ae:	bf00      	nop
 800a4b0:	0800a9e7 	.word	0x0800a9e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 808c 	beq.w	800a5e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a4d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f000 8087 	beq.w	800a5e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	330c      	adds	r3, #12
 800a4e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e4:	e853 3f00 	ldrex	r3, [r3]
 800a4e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	330c      	adds	r3, #12
 800a4fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a4fe:	647a      	str	r2, [r7, #68]	; 0x44
 800a500:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a502:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a504:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a506:	e841 2300 	strex	r3, r2, [r1]
 800a50a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1e3      	bne.n	800a4da <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3314      	adds	r3, #20
 800a518:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	e853 3f00 	ldrex	r3, [r3]
 800a520:	623b      	str	r3, [r7, #32]
   return(result);
 800a522:	6a3b      	ldr	r3, [r7, #32]
 800a524:	f023 0301 	bic.w	r3, r3, #1
 800a528:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	3314      	adds	r3, #20
 800a532:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a536:	633a      	str	r2, [r7, #48]	; 0x30
 800a538:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a53c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a53e:	e841 2300 	strex	r3, r2, [r1]
 800a542:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1e3      	bne.n	800a512 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2220      	movs	r2, #32
 800a54e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	330c      	adds	r3, #12
 800a55e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	e853 3f00 	ldrex	r3, [r3]
 800a566:	60fb      	str	r3, [r7, #12]
   return(result);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f023 0310 	bic.w	r3, r3, #16
 800a56e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	330c      	adds	r3, #12
 800a578:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a57c:	61fa      	str	r2, [r7, #28]
 800a57e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a580:	69b9      	ldr	r1, [r7, #24]
 800a582:	69fa      	ldr	r2, [r7, #28]
 800a584:	e841 2300 	strex	r3, r2, [r1]
 800a588:	617b      	str	r3, [r7, #20]
   return(result);
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1e3      	bne.n	800a558 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a594:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800a598:	4611      	mov	r1, r2
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a59e:	e023      	b.n	800a5e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a5a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d009      	beq.n	800a5c0 <HAL_UART_IRQHandler+0x4f4>
 800a5ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d003      	beq.n	800a5c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fa29 	bl	800aa10 <UART_Transmit_IT>
    return;
 800a5be:	e014      	b.n	800a5ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a5c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00e      	beq.n	800a5ea <HAL_UART_IRQHandler+0x51e>
 800a5cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d008      	beq.n	800a5ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 fa69 	bl	800aab0 <UART_EndTransmit_IT>
    return;
 800a5de:	e004      	b.n	800a5ea <HAL_UART_IRQHandler+0x51e>
    return;
 800a5e0:	bf00      	nop
 800a5e2:	e002      	b.n	800a5ea <HAL_UART_IRQHandler+0x51e>
      return;
 800a5e4:	bf00      	nop
 800a5e6:	e000      	b.n	800a5ea <HAL_UART_IRQHandler+0x51e>
      return;
 800a5e8:	bf00      	nop
  }
}
 800a5ea:	37e8      	adds	r7, #232	; 0xe8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a60c:	bf00      	nop
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a634:	bf00      	nop
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	460b      	mov	r3, r1
 800a686:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a10      	ldr	r2, [pc, #64]	; (800a6e0 <UART_InitCallbacksToDefault+0x4c>)
 800a6a0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a0f      	ldr	r2, [pc, #60]	; (800a6e4 <UART_InitCallbacksToDefault+0x50>)
 800a6a6:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a0f      	ldr	r2, [pc, #60]	; (800a6e8 <UART_InitCallbacksToDefault+0x54>)
 800a6ac:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a0e      	ldr	r2, [pc, #56]	; (800a6ec <UART_InitCallbacksToDefault+0x58>)
 800a6b2:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a0e      	ldr	r2, [pc, #56]	; (800a6f0 <UART_InitCallbacksToDefault+0x5c>)
 800a6b8:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4a0d      	ldr	r2, [pc, #52]	; (800a6f4 <UART_InitCallbacksToDefault+0x60>)
 800a6be:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a0d      	ldr	r2, [pc, #52]	; (800a6f8 <UART_InitCallbacksToDefault+0x64>)
 800a6c4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4a0c      	ldr	r2, [pc, #48]	; (800a6fc <UART_InitCallbacksToDefault+0x68>)
 800a6ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4a0c      	ldr	r2, [pc, #48]	; (800a700 <UART_InitCallbacksToDefault+0x6c>)
 800a6d0:	669a      	str	r2, [r3, #104]	; 0x68

}
 800a6d2:	bf00      	nop
 800a6d4:	370c      	adds	r7, #12
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	0800a605 	.word	0x0800a605
 800a6e4:	0800a5f1 	.word	0x0800a5f1
 800a6e8:	0800a619 	.word	0x0800a619
 800a6ec:	08004215 	.word	0x08004215
 800a6f0:	0800a62d 	.word	0x0800a62d
 800a6f4:	0800a641 	.word	0x0800a641
 800a6f8:	0800a655 	.word	0x0800a655
 800a6fc:	0800a669 	.word	0x0800a669
 800a700:	0800a67d 	.word	0x0800a67d

0800a704 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b090      	sub	sp, #64	; 0x40
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a710:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d137      	bne.n	800a790 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a722:	2200      	movs	r2, #0
 800a724:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3314      	adds	r3, #20
 800a72c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a730:	e853 3f00 	ldrex	r3, [r3]
 800a734:	623b      	str	r3, [r7, #32]
   return(result);
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a73c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a73e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3314      	adds	r3, #20
 800a744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a746:	633a      	str	r2, [r7, #48]	; 0x30
 800a748:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a74c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a74e:	e841 2300 	strex	r3, r2, [r1]
 800a752:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e5      	bne.n	800a726 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	330c      	adds	r3, #12
 800a760:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	e853 3f00 	ldrex	r3, [r3]
 800a768:	60fb      	str	r3, [r7, #12]
   return(result);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a770:	637b      	str	r3, [r7, #52]	; 0x34
 800a772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	330c      	adds	r3, #12
 800a778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a77a:	61fa      	str	r2, [r7, #28]
 800a77c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77e:	69b9      	ldr	r1, [r7, #24]
 800a780:	69fa      	ldr	r2, [r7, #28]
 800a782:	e841 2300 	strex	r3, r2, [r1]
 800a786:	617b      	str	r3, [r7, #20]
   return(result);
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d1e5      	bne.n	800a75a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a78e:	e003      	b.n	800a798 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800a790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a794:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a796:	4798      	blx	r3
}
 800a798:	bf00      	nop
 800a79a:	3740      	adds	r7, #64	; 0x40
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7b6:	bf00      	nop
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b084      	sub	sp, #16
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	695b      	ldr	r3, [r3, #20]
 800a7d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7da:	2b80      	cmp	r3, #128	; 0x80
 800a7dc:	bf0c      	ite	eq
 800a7de:	2301      	moveq	r3, #1
 800a7e0:	2300      	movne	r3, #0
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b21      	cmp	r3, #33	; 0x21
 800a7f0:	d108      	bne.n	800a804 <UART_DMAError+0x46>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d005      	beq.n	800a804 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a7fe:	68b8      	ldr	r0, [r7, #8]
 800a800:	f000 f866 	bl	800a8d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	695b      	ldr	r3, [r3, #20]
 800a80a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a80e:	2b40      	cmp	r3, #64	; 0x40
 800a810:	bf0c      	ite	eq
 800a812:	2301      	moveq	r3, #1
 800a814:	2300      	movne	r3, #0
 800a816:	b2db      	uxtb	r3, r3
 800a818:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b22      	cmp	r3, #34	; 0x22
 800a824:	d108      	bne.n	800a838 <UART_DMAError+0x7a>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d005      	beq.n	800a838 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	2200      	movs	r2, #0
 800a830:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a832:	68b8      	ldr	r0, [r7, #8]
 800a834:	f000 f874 	bl	800a920 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83c:	f043 0210 	orr.w	r2, r3, #16
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a848:	68b8      	ldr	r0, [r7, #8]
 800a84a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a84c:	bf00      	nop
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	4613      	mov	r3, r2
 800a860:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	88fa      	ldrh	r2, [r7, #6]
 800a86c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	88fa      	ldrh	r2, [r7, #6]
 800a872:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2200      	movs	r2, #0
 800a878:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2222      	movs	r2, #34	; 0x22
 800a87e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2200      	movs	r2, #0
 800a886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d007      	beq.n	800a8a2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	68da      	ldr	r2, [r3, #12]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	695a      	ldr	r2, [r3, #20]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f042 0201 	orr.w	r2, r2, #1
 800a8b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68da      	ldr	r2, [r3, #12]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f042 0220 	orr.w	r2, r2, #32
 800a8c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b089      	sub	sp, #36	; 0x24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	330c      	adds	r3, #12
 800a8de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	e853 3f00 	ldrex	r3, [r3]
 800a8e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a8ee:	61fb      	str	r3, [r7, #28]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	330c      	adds	r3, #12
 800a8f6:	69fa      	ldr	r2, [r7, #28]
 800a8f8:	61ba      	str	r2, [r7, #24]
 800a8fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fc:	6979      	ldr	r1, [r7, #20]
 800a8fe:	69ba      	ldr	r2, [r7, #24]
 800a900:	e841 2300 	strex	r3, r2, [r1]
 800a904:	613b      	str	r3, [r7, #16]
   return(result);
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1e5      	bne.n	800a8d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2220      	movs	r2, #32
 800a910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a914:	bf00      	nop
 800a916:	3724      	adds	r7, #36	; 0x24
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a920:	b480      	push	{r7}
 800a922:	b095      	sub	sp, #84	; 0x54
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	330c      	adds	r3, #12
 800a92e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a932:	e853 3f00 	ldrex	r3, [r3]
 800a936:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a93e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	330c      	adds	r3, #12
 800a946:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a948:	643a      	str	r2, [r7, #64]	; 0x40
 800a94a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a94e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a950:	e841 2300 	strex	r3, r2, [r1]
 800a954:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1e5      	bne.n	800a928 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	3314      	adds	r3, #20
 800a962:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	e853 3f00 	ldrex	r3, [r3]
 800a96a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	f023 0301 	bic.w	r3, r3, #1
 800a972:	64bb      	str	r3, [r7, #72]	; 0x48
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	3314      	adds	r3, #20
 800a97a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a97c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a97e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a984:	e841 2300 	strex	r3, r2, [r1]
 800a988:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d1e5      	bne.n	800a95c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a994:	2b01      	cmp	r3, #1
 800a996:	d119      	bne.n	800a9cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	330c      	adds	r3, #12
 800a99e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	e853 3f00 	ldrex	r3, [r3]
 800a9a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	f023 0310 	bic.w	r3, r3, #16
 800a9ae:	647b      	str	r3, [r7, #68]	; 0x44
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	330c      	adds	r3, #12
 800a9b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9b8:	61ba      	str	r2, [r7, #24]
 800a9ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9bc:	6979      	ldr	r1, [r7, #20]
 800a9be:	69ba      	ldr	r2, [r7, #24]
 800a9c0:	e841 2300 	strex	r3, r2, [r1]
 800a9c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1e5      	bne.n	800a998 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2220      	movs	r2, #32
 800a9d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a9da:	bf00      	nop
 800a9dc:	3754      	adds	r7, #84	; 0x54
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b084      	sub	sp, #16
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa08:	bf00      	nop
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b21      	cmp	r3, #33	; 0x21
 800aa22:	d13e      	bne.n	800aaa2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa2c:	d114      	bne.n	800aa58 <UART_Transmit_IT+0x48>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d110      	bne.n	800aa58 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a1b      	ldr	r3, [r3, #32]
 800aa3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	881b      	ldrh	r3, [r3, #0]
 800aa40:	461a      	mov	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa4a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	1c9a      	adds	r2, r3, #2
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	621a      	str	r2, [r3, #32]
 800aa56:	e008      	b.n	800aa6a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a1b      	ldr	r3, [r3, #32]
 800aa5c:	1c59      	adds	r1, r3, #1
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	6211      	str	r1, [r2, #32]
 800aa62:	781a      	ldrb	r2, [r3, #0]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	3b01      	subs	r3, #1
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	4619      	mov	r1, r3
 800aa78:	84d1      	strh	r1, [r2, #38]	; 0x26
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d10f      	bne.n	800aa9e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	68da      	ldr	r2, [r3, #12]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68da      	ldr	r2, [r3, #12]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	e000      	b.n	800aaa4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aaa2:	2302      	movs	r3, #2
  }
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3714      	adds	r7, #20
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68da      	ldr	r2, [r3, #12]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aac6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2220      	movs	r2, #32
 800aacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b08c      	sub	sp, #48	; 0x30
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b22      	cmp	r3, #34	; 0x22
 800aaf4:	f040 80ad 	bne.w	800ac52 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab00:	d117      	bne.n	800ab32 <UART_Receive_IT+0x50>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d113      	bne.n	800ab32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2a:	1c9a      	adds	r2, r3, #2
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	629a      	str	r2, [r3, #40]	; 0x28
 800ab30:	e026      	b.n	800ab80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab44:	d007      	beq.n	800ab56 <UART_Receive_IT+0x74>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10a      	bne.n	800ab64 <UART_Receive_IT+0x82>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d106      	bne.n	800ab64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	b2da      	uxtb	r2, r3
 800ab5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab60:	701a      	strb	r2, [r3, #0]
 800ab62:	e008      	b.n	800ab76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab70:	b2da      	uxtb	r2, r3
 800ab72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	3b01      	subs	r3, #1
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d15c      	bne.n	800ac4e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68da      	ldr	r2, [r3, #12]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f022 0220 	bic.w	r2, r2, #32
 800aba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68da      	ldr	r2, [r3, #12]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800abb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	695a      	ldr	r2, [r3, #20]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f022 0201 	bic.w	r2, r2, #1
 800abc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2220      	movs	r2, #32
 800abc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d136      	bne.n	800ac42 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	330c      	adds	r3, #12
 800abe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	e853 3f00 	ldrex	r3, [r3]
 800abe8:	613b      	str	r3, [r7, #16]
   return(result);
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	f023 0310 	bic.w	r3, r3, #16
 800abf0:	627b      	str	r3, [r7, #36]	; 0x24
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	330c      	adds	r3, #12
 800abf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abfa:	623a      	str	r2, [r7, #32]
 800abfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfe:	69f9      	ldr	r1, [r7, #28]
 800ac00:	6a3a      	ldr	r2, [r7, #32]
 800ac02:	e841 2300 	strex	r3, r2, [r1]
 800ac06:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1e5      	bne.n	800abda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0310 	and.w	r3, r3, #16
 800ac18:	2b10      	cmp	r3, #16
 800ac1a:	d10a      	bne.n	800ac32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	60fb      	str	r3, [r7, #12]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	60fb      	str	r3, [r7, #12]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	60fb      	str	r3, [r7, #12]
 800ac30:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	4798      	blx	r3
 800ac40:	e003      	b.n	800ac4a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	e002      	b.n	800ac54 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	e000      	b.n	800ac54 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800ac52:	2302      	movs	r3, #2
  }
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3730      	adds	r7, #48	; 0x30
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac60:	b0c0      	sub	sp, #256	; 0x100
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ac74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac78:	68d9      	ldr	r1, [r3, #12]
 800ac7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	ea40 0301 	orr.w	r3, r0, r1
 800ac84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ac86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac8a:	689a      	ldr	r2, [r3, #8]
 800ac8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	431a      	orrs	r2, r3
 800ac94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	431a      	orrs	r2, r3
 800ac9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aca0:	69db      	ldr	r3, [r3, #28]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800acb4:	f021 010c 	bic.w	r1, r1, #12
 800acb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800acc2:	430b      	orrs	r3, r1
 800acc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800acc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800acd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acd6:	6999      	ldr	r1, [r3, #24]
 800acd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	ea40 0301 	orr.w	r3, r0, r1
 800ace2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ace4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	4b8f      	ldr	r3, [pc, #572]	; (800af28 <UART_SetConfig+0x2cc>)
 800acec:	429a      	cmp	r2, r3
 800acee:	d005      	beq.n	800acfc <UART_SetConfig+0xa0>
 800acf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	4b8d      	ldr	r3, [pc, #564]	; (800af2c <UART_SetConfig+0x2d0>)
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d104      	bne.n	800ad06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800acfc:	f7fc fee2 	bl	8007ac4 <HAL_RCC_GetPCLK2Freq>
 800ad00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ad04:	e003      	b.n	800ad0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad06:	f7fc fec9 	bl	8007a9c <HAL_RCC_GetPCLK1Freq>
 800ad0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad12:	69db      	ldr	r3, [r3, #28]
 800ad14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad18:	f040 810c 	bne.w	800af34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad20:	2200      	movs	r2, #0
 800ad22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ad2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ad2e:	4622      	mov	r2, r4
 800ad30:	462b      	mov	r3, r5
 800ad32:	1891      	adds	r1, r2, r2
 800ad34:	65b9      	str	r1, [r7, #88]	; 0x58
 800ad36:	415b      	adcs	r3, r3
 800ad38:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ad3e:	4621      	mov	r1, r4
 800ad40:	eb12 0801 	adds.w	r8, r2, r1
 800ad44:	4629      	mov	r1, r5
 800ad46:	eb43 0901 	adc.w	r9, r3, r1
 800ad4a:	f04f 0200 	mov.w	r2, #0
 800ad4e:	f04f 0300 	mov.w	r3, #0
 800ad52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ad56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ad5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ad5e:	4690      	mov	r8, r2
 800ad60:	4699      	mov	r9, r3
 800ad62:	4623      	mov	r3, r4
 800ad64:	eb18 0303 	adds.w	r3, r8, r3
 800ad68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad6c:	462b      	mov	r3, r5
 800ad6e:	eb49 0303 	adc.w	r3, r9, r3
 800ad72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ad86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	18db      	adds	r3, r3, r3
 800ad8e:	653b      	str	r3, [r7, #80]	; 0x50
 800ad90:	4613      	mov	r3, r2
 800ad92:	eb42 0303 	adc.w	r3, r2, r3
 800ad96:	657b      	str	r3, [r7, #84]	; 0x54
 800ad98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ad9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ada0:	f7f5 ff7a 	bl	8000c98 <__aeabi_uldivmod>
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	4b61      	ldr	r3, [pc, #388]	; (800af30 <UART_SetConfig+0x2d4>)
 800adaa:	fba3 2302 	umull	r2, r3, r3, r2
 800adae:	095b      	lsrs	r3, r3, #5
 800adb0:	011c      	lsls	r4, r3, #4
 800adb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adb6:	2200      	movs	r2, #0
 800adb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800adbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800adc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800adc4:	4642      	mov	r2, r8
 800adc6:	464b      	mov	r3, r9
 800adc8:	1891      	adds	r1, r2, r2
 800adca:	64b9      	str	r1, [r7, #72]	; 0x48
 800adcc:	415b      	adcs	r3, r3
 800adce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800add0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800add4:	4641      	mov	r1, r8
 800add6:	eb12 0a01 	adds.w	sl, r2, r1
 800adda:	4649      	mov	r1, r9
 800addc:	eb43 0b01 	adc.w	fp, r3, r1
 800ade0:	f04f 0200 	mov.w	r2, #0
 800ade4:	f04f 0300 	mov.w	r3, #0
 800ade8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800adec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800adf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800adf4:	4692      	mov	sl, r2
 800adf6:	469b      	mov	fp, r3
 800adf8:	4643      	mov	r3, r8
 800adfa:	eb1a 0303 	adds.w	r3, sl, r3
 800adfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae02:	464b      	mov	r3, r9
 800ae04:	eb4b 0303 	adc.w	r3, fp, r3
 800ae08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ae0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ae1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ae20:	460b      	mov	r3, r1
 800ae22:	18db      	adds	r3, r3, r3
 800ae24:	643b      	str	r3, [r7, #64]	; 0x40
 800ae26:	4613      	mov	r3, r2
 800ae28:	eb42 0303 	adc.w	r3, r2, r3
 800ae2c:	647b      	str	r3, [r7, #68]	; 0x44
 800ae2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ae32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ae36:	f7f5 ff2f 	bl	8000c98 <__aeabi_uldivmod>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	4611      	mov	r1, r2
 800ae40:	4b3b      	ldr	r3, [pc, #236]	; (800af30 <UART_SetConfig+0x2d4>)
 800ae42:	fba3 2301 	umull	r2, r3, r3, r1
 800ae46:	095b      	lsrs	r3, r3, #5
 800ae48:	2264      	movs	r2, #100	; 0x64
 800ae4a:	fb02 f303 	mul.w	r3, r2, r3
 800ae4e:	1acb      	subs	r3, r1, r3
 800ae50:	00db      	lsls	r3, r3, #3
 800ae52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ae56:	4b36      	ldr	r3, [pc, #216]	; (800af30 <UART_SetConfig+0x2d4>)
 800ae58:	fba3 2302 	umull	r2, r3, r3, r2
 800ae5c:	095b      	lsrs	r3, r3, #5
 800ae5e:	005b      	lsls	r3, r3, #1
 800ae60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ae64:	441c      	add	r4, r3
 800ae66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ae74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ae78:	4642      	mov	r2, r8
 800ae7a:	464b      	mov	r3, r9
 800ae7c:	1891      	adds	r1, r2, r2
 800ae7e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ae80:	415b      	adcs	r3, r3
 800ae82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ae88:	4641      	mov	r1, r8
 800ae8a:	1851      	adds	r1, r2, r1
 800ae8c:	6339      	str	r1, [r7, #48]	; 0x30
 800ae8e:	4649      	mov	r1, r9
 800ae90:	414b      	adcs	r3, r1
 800ae92:	637b      	str	r3, [r7, #52]	; 0x34
 800ae94:	f04f 0200 	mov.w	r2, #0
 800ae98:	f04f 0300 	mov.w	r3, #0
 800ae9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800aea0:	4659      	mov	r1, fp
 800aea2:	00cb      	lsls	r3, r1, #3
 800aea4:	4651      	mov	r1, sl
 800aea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aeaa:	4651      	mov	r1, sl
 800aeac:	00ca      	lsls	r2, r1, #3
 800aeae:	4610      	mov	r0, r2
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	4642      	mov	r2, r8
 800aeb6:	189b      	adds	r3, r3, r2
 800aeb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aebc:	464b      	mov	r3, r9
 800aebe:	460a      	mov	r2, r1
 800aec0:	eb42 0303 	adc.w	r3, r2, r3
 800aec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aed4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aed8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aedc:	460b      	mov	r3, r1
 800aede:	18db      	adds	r3, r3, r3
 800aee0:	62bb      	str	r3, [r7, #40]	; 0x28
 800aee2:	4613      	mov	r3, r2
 800aee4:	eb42 0303 	adc.w	r3, r2, r3
 800aee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aeea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aeee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aef2:	f7f5 fed1 	bl	8000c98 <__aeabi_uldivmod>
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	4b0d      	ldr	r3, [pc, #52]	; (800af30 <UART_SetConfig+0x2d4>)
 800aefc:	fba3 1302 	umull	r1, r3, r3, r2
 800af00:	095b      	lsrs	r3, r3, #5
 800af02:	2164      	movs	r1, #100	; 0x64
 800af04:	fb01 f303 	mul.w	r3, r1, r3
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	00db      	lsls	r3, r3, #3
 800af0c:	3332      	adds	r3, #50	; 0x32
 800af0e:	4a08      	ldr	r2, [pc, #32]	; (800af30 <UART_SetConfig+0x2d4>)
 800af10:	fba2 2303 	umull	r2, r3, r2, r3
 800af14:	095b      	lsrs	r3, r3, #5
 800af16:	f003 0207 	and.w	r2, r3, #7
 800af1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4422      	add	r2, r4
 800af22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800af24:	e105      	b.n	800b132 <UART_SetConfig+0x4d6>
 800af26:	bf00      	nop
 800af28:	40011000 	.word	0x40011000
 800af2c:	40011400 	.word	0x40011400
 800af30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af38:	2200      	movs	r2, #0
 800af3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800af3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800af42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800af46:	4642      	mov	r2, r8
 800af48:	464b      	mov	r3, r9
 800af4a:	1891      	adds	r1, r2, r2
 800af4c:	6239      	str	r1, [r7, #32]
 800af4e:	415b      	adcs	r3, r3
 800af50:	627b      	str	r3, [r7, #36]	; 0x24
 800af52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800af56:	4641      	mov	r1, r8
 800af58:	1854      	adds	r4, r2, r1
 800af5a:	4649      	mov	r1, r9
 800af5c:	eb43 0501 	adc.w	r5, r3, r1
 800af60:	f04f 0200 	mov.w	r2, #0
 800af64:	f04f 0300 	mov.w	r3, #0
 800af68:	00eb      	lsls	r3, r5, #3
 800af6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800af6e:	00e2      	lsls	r2, r4, #3
 800af70:	4614      	mov	r4, r2
 800af72:	461d      	mov	r5, r3
 800af74:	4643      	mov	r3, r8
 800af76:	18e3      	adds	r3, r4, r3
 800af78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800af7c:	464b      	mov	r3, r9
 800af7e:	eb45 0303 	adc.w	r3, r5, r3
 800af82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800af86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800af96:	f04f 0200 	mov.w	r2, #0
 800af9a:	f04f 0300 	mov.w	r3, #0
 800af9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800afa2:	4629      	mov	r1, r5
 800afa4:	008b      	lsls	r3, r1, #2
 800afa6:	4621      	mov	r1, r4
 800afa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800afac:	4621      	mov	r1, r4
 800afae:	008a      	lsls	r2, r1, #2
 800afb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800afb4:	f7f5 fe70 	bl	8000c98 <__aeabi_uldivmod>
 800afb8:	4602      	mov	r2, r0
 800afba:	460b      	mov	r3, r1
 800afbc:	4b60      	ldr	r3, [pc, #384]	; (800b140 <UART_SetConfig+0x4e4>)
 800afbe:	fba3 2302 	umull	r2, r3, r3, r2
 800afc2:	095b      	lsrs	r3, r3, #5
 800afc4:	011c      	lsls	r4, r3, #4
 800afc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afca:	2200      	movs	r2, #0
 800afcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800afd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800afd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800afd8:	4642      	mov	r2, r8
 800afda:	464b      	mov	r3, r9
 800afdc:	1891      	adds	r1, r2, r2
 800afde:	61b9      	str	r1, [r7, #24]
 800afe0:	415b      	adcs	r3, r3
 800afe2:	61fb      	str	r3, [r7, #28]
 800afe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800afe8:	4641      	mov	r1, r8
 800afea:	1851      	adds	r1, r2, r1
 800afec:	6139      	str	r1, [r7, #16]
 800afee:	4649      	mov	r1, r9
 800aff0:	414b      	adcs	r3, r1
 800aff2:	617b      	str	r3, [r7, #20]
 800aff4:	f04f 0200 	mov.w	r2, #0
 800aff8:	f04f 0300 	mov.w	r3, #0
 800affc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b000:	4659      	mov	r1, fp
 800b002:	00cb      	lsls	r3, r1, #3
 800b004:	4651      	mov	r1, sl
 800b006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b00a:	4651      	mov	r1, sl
 800b00c:	00ca      	lsls	r2, r1, #3
 800b00e:	4610      	mov	r0, r2
 800b010:	4619      	mov	r1, r3
 800b012:	4603      	mov	r3, r0
 800b014:	4642      	mov	r2, r8
 800b016:	189b      	adds	r3, r3, r2
 800b018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b01c:	464b      	mov	r3, r9
 800b01e:	460a      	mov	r2, r1
 800b020:	eb42 0303 	adc.w	r3, r2, r3
 800b024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	67bb      	str	r3, [r7, #120]	; 0x78
 800b032:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b034:	f04f 0200 	mov.w	r2, #0
 800b038:	f04f 0300 	mov.w	r3, #0
 800b03c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b040:	4649      	mov	r1, r9
 800b042:	008b      	lsls	r3, r1, #2
 800b044:	4641      	mov	r1, r8
 800b046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b04a:	4641      	mov	r1, r8
 800b04c:	008a      	lsls	r2, r1, #2
 800b04e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b052:	f7f5 fe21 	bl	8000c98 <__aeabi_uldivmod>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	4b39      	ldr	r3, [pc, #228]	; (800b140 <UART_SetConfig+0x4e4>)
 800b05c:	fba3 1302 	umull	r1, r3, r3, r2
 800b060:	095b      	lsrs	r3, r3, #5
 800b062:	2164      	movs	r1, #100	; 0x64
 800b064:	fb01 f303 	mul.w	r3, r1, r3
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	011b      	lsls	r3, r3, #4
 800b06c:	3332      	adds	r3, #50	; 0x32
 800b06e:	4a34      	ldr	r2, [pc, #208]	; (800b140 <UART_SetConfig+0x4e4>)
 800b070:	fba2 2303 	umull	r2, r3, r2, r3
 800b074:	095b      	lsrs	r3, r3, #5
 800b076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b07a:	441c      	add	r4, r3
 800b07c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b080:	2200      	movs	r2, #0
 800b082:	673b      	str	r3, [r7, #112]	; 0x70
 800b084:	677a      	str	r2, [r7, #116]	; 0x74
 800b086:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b08a:	4642      	mov	r2, r8
 800b08c:	464b      	mov	r3, r9
 800b08e:	1891      	adds	r1, r2, r2
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	415b      	adcs	r3, r3
 800b094:	60fb      	str	r3, [r7, #12]
 800b096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b09a:	4641      	mov	r1, r8
 800b09c:	1851      	adds	r1, r2, r1
 800b09e:	6039      	str	r1, [r7, #0]
 800b0a0:	4649      	mov	r1, r9
 800b0a2:	414b      	adcs	r3, r1
 800b0a4:	607b      	str	r3, [r7, #4]
 800b0a6:	f04f 0200 	mov.w	r2, #0
 800b0aa:	f04f 0300 	mov.w	r3, #0
 800b0ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b0b2:	4659      	mov	r1, fp
 800b0b4:	00cb      	lsls	r3, r1, #3
 800b0b6:	4651      	mov	r1, sl
 800b0b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0bc:	4651      	mov	r1, sl
 800b0be:	00ca      	lsls	r2, r1, #3
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	4642      	mov	r2, r8
 800b0c8:	189b      	adds	r3, r3, r2
 800b0ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800b0cc:	464b      	mov	r3, r9
 800b0ce:	460a      	mov	r2, r1
 800b0d0:	eb42 0303 	adc.w	r3, r2, r3
 800b0d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b0d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	663b      	str	r3, [r7, #96]	; 0x60
 800b0e0:	667a      	str	r2, [r7, #100]	; 0x64
 800b0e2:	f04f 0200 	mov.w	r2, #0
 800b0e6:	f04f 0300 	mov.w	r3, #0
 800b0ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b0ee:	4649      	mov	r1, r9
 800b0f0:	008b      	lsls	r3, r1, #2
 800b0f2:	4641      	mov	r1, r8
 800b0f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b0f8:	4641      	mov	r1, r8
 800b0fa:	008a      	lsls	r2, r1, #2
 800b0fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b100:	f7f5 fdca 	bl	8000c98 <__aeabi_uldivmod>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4b0d      	ldr	r3, [pc, #52]	; (800b140 <UART_SetConfig+0x4e4>)
 800b10a:	fba3 1302 	umull	r1, r3, r3, r2
 800b10e:	095b      	lsrs	r3, r3, #5
 800b110:	2164      	movs	r1, #100	; 0x64
 800b112:	fb01 f303 	mul.w	r3, r1, r3
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	011b      	lsls	r3, r3, #4
 800b11a:	3332      	adds	r3, #50	; 0x32
 800b11c:	4a08      	ldr	r2, [pc, #32]	; (800b140 <UART_SetConfig+0x4e4>)
 800b11e:	fba2 2303 	umull	r2, r3, r2, r3
 800b122:	095b      	lsrs	r3, r3, #5
 800b124:	f003 020f 	and.w	r2, r3, #15
 800b128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4422      	add	r2, r4
 800b130:	609a      	str	r2, [r3, #8]
}
 800b132:	bf00      	nop
 800b134:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b138:	46bd      	mov	sp, r7
 800b13a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b13e:	bf00      	nop
 800b140:	51eb851f 	.word	0x51eb851f

0800b144 <__errno>:
 800b144:	4b01      	ldr	r3, [pc, #4]	; (800b14c <__errno+0x8>)
 800b146:	6818      	ldr	r0, [r3, #0]
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	20000234 	.word	0x20000234

0800b150 <__libc_init_array>:
 800b150:	b570      	push	{r4, r5, r6, lr}
 800b152:	4d0d      	ldr	r5, [pc, #52]	; (800b188 <__libc_init_array+0x38>)
 800b154:	4c0d      	ldr	r4, [pc, #52]	; (800b18c <__libc_init_array+0x3c>)
 800b156:	1b64      	subs	r4, r4, r5
 800b158:	10a4      	asrs	r4, r4, #2
 800b15a:	2600      	movs	r6, #0
 800b15c:	42a6      	cmp	r6, r4
 800b15e:	d109      	bne.n	800b174 <__libc_init_array+0x24>
 800b160:	4d0b      	ldr	r5, [pc, #44]	; (800b190 <__libc_init_array+0x40>)
 800b162:	4c0c      	ldr	r4, [pc, #48]	; (800b194 <__libc_init_array+0x44>)
 800b164:	f006 fa92 	bl	801168c <_init>
 800b168:	1b64      	subs	r4, r4, r5
 800b16a:	10a4      	asrs	r4, r4, #2
 800b16c:	2600      	movs	r6, #0
 800b16e:	42a6      	cmp	r6, r4
 800b170:	d105      	bne.n	800b17e <__libc_init_array+0x2e>
 800b172:	bd70      	pop	{r4, r5, r6, pc}
 800b174:	f855 3b04 	ldr.w	r3, [r5], #4
 800b178:	4798      	blx	r3
 800b17a:	3601      	adds	r6, #1
 800b17c:	e7ee      	b.n	800b15c <__libc_init_array+0xc>
 800b17e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b182:	4798      	blx	r3
 800b184:	3601      	adds	r6, #1
 800b186:	e7f2      	b.n	800b16e <__libc_init_array+0x1e>
 800b188:	08011db8 	.word	0x08011db8
 800b18c:	08011db8 	.word	0x08011db8
 800b190:	08011db8 	.word	0x08011db8
 800b194:	08011dbc 	.word	0x08011dbc

0800b198 <memcpy>:
 800b198:	440a      	add	r2, r1
 800b19a:	4291      	cmp	r1, r2
 800b19c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1a0:	d100      	bne.n	800b1a4 <memcpy+0xc>
 800b1a2:	4770      	bx	lr
 800b1a4:	b510      	push	{r4, lr}
 800b1a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1ae:	4291      	cmp	r1, r2
 800b1b0:	d1f9      	bne.n	800b1a6 <memcpy+0xe>
 800b1b2:	bd10      	pop	{r4, pc}

0800b1b4 <memset>:
 800b1b4:	4402      	add	r2, r0
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d100      	bne.n	800b1be <memset+0xa>
 800b1bc:	4770      	bx	lr
 800b1be:	f803 1b01 	strb.w	r1, [r3], #1
 800b1c2:	e7f9      	b.n	800b1b8 <memset+0x4>

0800b1c4 <__cvt>:
 800b1c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c8:	ec55 4b10 	vmov	r4, r5, d0
 800b1cc:	2d00      	cmp	r5, #0
 800b1ce:	460e      	mov	r6, r1
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	462b      	mov	r3, r5
 800b1d4:	bfbb      	ittet	lt
 800b1d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b1da:	461d      	movlt	r5, r3
 800b1dc:	2300      	movge	r3, #0
 800b1de:	232d      	movlt	r3, #45	; 0x2d
 800b1e0:	700b      	strb	r3, [r1, #0]
 800b1e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b1e8:	4691      	mov	r9, r2
 800b1ea:	f023 0820 	bic.w	r8, r3, #32
 800b1ee:	bfbc      	itt	lt
 800b1f0:	4622      	movlt	r2, r4
 800b1f2:	4614      	movlt	r4, r2
 800b1f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b1f8:	d005      	beq.n	800b206 <__cvt+0x42>
 800b1fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b1fe:	d100      	bne.n	800b202 <__cvt+0x3e>
 800b200:	3601      	adds	r6, #1
 800b202:	2102      	movs	r1, #2
 800b204:	e000      	b.n	800b208 <__cvt+0x44>
 800b206:	2103      	movs	r1, #3
 800b208:	ab03      	add	r3, sp, #12
 800b20a:	9301      	str	r3, [sp, #4]
 800b20c:	ab02      	add	r3, sp, #8
 800b20e:	9300      	str	r3, [sp, #0]
 800b210:	ec45 4b10 	vmov	d0, r4, r5
 800b214:	4653      	mov	r3, sl
 800b216:	4632      	mov	r2, r6
 800b218:	f001 fdae 	bl	800cd78 <_dtoa_r>
 800b21c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b220:	4607      	mov	r7, r0
 800b222:	d102      	bne.n	800b22a <__cvt+0x66>
 800b224:	f019 0f01 	tst.w	r9, #1
 800b228:	d022      	beq.n	800b270 <__cvt+0xac>
 800b22a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b22e:	eb07 0906 	add.w	r9, r7, r6
 800b232:	d110      	bne.n	800b256 <__cvt+0x92>
 800b234:	783b      	ldrb	r3, [r7, #0]
 800b236:	2b30      	cmp	r3, #48	; 0x30
 800b238:	d10a      	bne.n	800b250 <__cvt+0x8c>
 800b23a:	2200      	movs	r2, #0
 800b23c:	2300      	movs	r3, #0
 800b23e:	4620      	mov	r0, r4
 800b240:	4629      	mov	r1, r5
 800b242:	f7f5 fc49 	bl	8000ad8 <__aeabi_dcmpeq>
 800b246:	b918      	cbnz	r0, 800b250 <__cvt+0x8c>
 800b248:	f1c6 0601 	rsb	r6, r6, #1
 800b24c:	f8ca 6000 	str.w	r6, [sl]
 800b250:	f8da 3000 	ldr.w	r3, [sl]
 800b254:	4499      	add	r9, r3
 800b256:	2200      	movs	r2, #0
 800b258:	2300      	movs	r3, #0
 800b25a:	4620      	mov	r0, r4
 800b25c:	4629      	mov	r1, r5
 800b25e:	f7f5 fc3b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b262:	b108      	cbz	r0, 800b268 <__cvt+0xa4>
 800b264:	f8cd 900c 	str.w	r9, [sp, #12]
 800b268:	2230      	movs	r2, #48	; 0x30
 800b26a:	9b03      	ldr	r3, [sp, #12]
 800b26c:	454b      	cmp	r3, r9
 800b26e:	d307      	bcc.n	800b280 <__cvt+0xbc>
 800b270:	9b03      	ldr	r3, [sp, #12]
 800b272:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b274:	1bdb      	subs	r3, r3, r7
 800b276:	4638      	mov	r0, r7
 800b278:	6013      	str	r3, [r2, #0]
 800b27a:	b004      	add	sp, #16
 800b27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b280:	1c59      	adds	r1, r3, #1
 800b282:	9103      	str	r1, [sp, #12]
 800b284:	701a      	strb	r2, [r3, #0]
 800b286:	e7f0      	b.n	800b26a <__cvt+0xa6>

0800b288 <__exponent>:
 800b288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b28a:	4603      	mov	r3, r0
 800b28c:	2900      	cmp	r1, #0
 800b28e:	bfb8      	it	lt
 800b290:	4249      	neglt	r1, r1
 800b292:	f803 2b02 	strb.w	r2, [r3], #2
 800b296:	bfb4      	ite	lt
 800b298:	222d      	movlt	r2, #45	; 0x2d
 800b29a:	222b      	movge	r2, #43	; 0x2b
 800b29c:	2909      	cmp	r1, #9
 800b29e:	7042      	strb	r2, [r0, #1]
 800b2a0:	dd2a      	ble.n	800b2f8 <__exponent+0x70>
 800b2a2:	f10d 0407 	add.w	r4, sp, #7
 800b2a6:	46a4      	mov	ip, r4
 800b2a8:	270a      	movs	r7, #10
 800b2aa:	46a6      	mov	lr, r4
 800b2ac:	460a      	mov	r2, r1
 800b2ae:	fb91 f6f7 	sdiv	r6, r1, r7
 800b2b2:	fb07 1516 	mls	r5, r7, r6, r1
 800b2b6:	3530      	adds	r5, #48	; 0x30
 800b2b8:	2a63      	cmp	r2, #99	; 0x63
 800b2ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800b2be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b2c2:	4631      	mov	r1, r6
 800b2c4:	dcf1      	bgt.n	800b2aa <__exponent+0x22>
 800b2c6:	3130      	adds	r1, #48	; 0x30
 800b2c8:	f1ae 0502 	sub.w	r5, lr, #2
 800b2cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b2d0:	1c44      	adds	r4, r0, #1
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	4561      	cmp	r1, ip
 800b2d6:	d30a      	bcc.n	800b2ee <__exponent+0x66>
 800b2d8:	f10d 0209 	add.w	r2, sp, #9
 800b2dc:	eba2 020e 	sub.w	r2, r2, lr
 800b2e0:	4565      	cmp	r5, ip
 800b2e2:	bf88      	it	hi
 800b2e4:	2200      	movhi	r2, #0
 800b2e6:	4413      	add	r3, r2
 800b2e8:	1a18      	subs	r0, r3, r0
 800b2ea:	b003      	add	sp, #12
 800b2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b2f6:	e7ed      	b.n	800b2d4 <__exponent+0x4c>
 800b2f8:	2330      	movs	r3, #48	; 0x30
 800b2fa:	3130      	adds	r1, #48	; 0x30
 800b2fc:	7083      	strb	r3, [r0, #2]
 800b2fe:	70c1      	strb	r1, [r0, #3]
 800b300:	1d03      	adds	r3, r0, #4
 800b302:	e7f1      	b.n	800b2e8 <__exponent+0x60>

0800b304 <_printf_float>:
 800b304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b308:	ed2d 8b02 	vpush	{d8}
 800b30c:	b08d      	sub	sp, #52	; 0x34
 800b30e:	460c      	mov	r4, r1
 800b310:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b314:	4616      	mov	r6, r2
 800b316:	461f      	mov	r7, r3
 800b318:	4605      	mov	r5, r0
 800b31a:	f002 fe8b 	bl	800e034 <_localeconv_r>
 800b31e:	f8d0 a000 	ldr.w	sl, [r0]
 800b322:	4650      	mov	r0, sl
 800b324:	f7f4 ff5c 	bl	80001e0 <strlen>
 800b328:	2300      	movs	r3, #0
 800b32a:	930a      	str	r3, [sp, #40]	; 0x28
 800b32c:	6823      	ldr	r3, [r4, #0]
 800b32e:	9305      	str	r3, [sp, #20]
 800b330:	f8d8 3000 	ldr.w	r3, [r8]
 800b334:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b338:	3307      	adds	r3, #7
 800b33a:	f023 0307 	bic.w	r3, r3, #7
 800b33e:	f103 0208 	add.w	r2, r3, #8
 800b342:	f8c8 2000 	str.w	r2, [r8]
 800b346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b34e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b352:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b356:	9307      	str	r3, [sp, #28]
 800b358:	f8cd 8018 	str.w	r8, [sp, #24]
 800b35c:	ee08 0a10 	vmov	s16, r0
 800b360:	4b9f      	ldr	r3, [pc, #636]	; (800b5e0 <_printf_float+0x2dc>)
 800b362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b366:	f04f 32ff 	mov.w	r2, #4294967295
 800b36a:	f7f5 fbe7 	bl	8000b3c <__aeabi_dcmpun>
 800b36e:	bb88      	cbnz	r0, 800b3d4 <_printf_float+0xd0>
 800b370:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b374:	4b9a      	ldr	r3, [pc, #616]	; (800b5e0 <_printf_float+0x2dc>)
 800b376:	f04f 32ff 	mov.w	r2, #4294967295
 800b37a:	f7f5 fbc1 	bl	8000b00 <__aeabi_dcmple>
 800b37e:	bb48      	cbnz	r0, 800b3d4 <_printf_float+0xd0>
 800b380:	2200      	movs	r2, #0
 800b382:	2300      	movs	r3, #0
 800b384:	4640      	mov	r0, r8
 800b386:	4649      	mov	r1, r9
 800b388:	f7f5 fbb0 	bl	8000aec <__aeabi_dcmplt>
 800b38c:	b110      	cbz	r0, 800b394 <_printf_float+0x90>
 800b38e:	232d      	movs	r3, #45	; 0x2d
 800b390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b394:	4b93      	ldr	r3, [pc, #588]	; (800b5e4 <_printf_float+0x2e0>)
 800b396:	4894      	ldr	r0, [pc, #592]	; (800b5e8 <_printf_float+0x2e4>)
 800b398:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b39c:	bf94      	ite	ls
 800b39e:	4698      	movls	r8, r3
 800b3a0:	4680      	movhi	r8, r0
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	6123      	str	r3, [r4, #16]
 800b3a6:	9b05      	ldr	r3, [sp, #20]
 800b3a8:	f023 0204 	bic.w	r2, r3, #4
 800b3ac:	6022      	str	r2, [r4, #0]
 800b3ae:	f04f 0900 	mov.w	r9, #0
 800b3b2:	9700      	str	r7, [sp, #0]
 800b3b4:	4633      	mov	r3, r6
 800b3b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	f000 f9d8 	bl	800b770 <_printf_common>
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	f040 8090 	bne.w	800b4e6 <_printf_float+0x1e2>
 800b3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ca:	b00d      	add	sp, #52	; 0x34
 800b3cc:	ecbd 8b02 	vpop	{d8}
 800b3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d4:	4642      	mov	r2, r8
 800b3d6:	464b      	mov	r3, r9
 800b3d8:	4640      	mov	r0, r8
 800b3da:	4649      	mov	r1, r9
 800b3dc:	f7f5 fbae 	bl	8000b3c <__aeabi_dcmpun>
 800b3e0:	b140      	cbz	r0, 800b3f4 <_printf_float+0xf0>
 800b3e2:	464b      	mov	r3, r9
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	bfbc      	itt	lt
 800b3e8:	232d      	movlt	r3, #45	; 0x2d
 800b3ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b3ee:	487f      	ldr	r0, [pc, #508]	; (800b5ec <_printf_float+0x2e8>)
 800b3f0:	4b7f      	ldr	r3, [pc, #508]	; (800b5f0 <_printf_float+0x2ec>)
 800b3f2:	e7d1      	b.n	800b398 <_printf_float+0x94>
 800b3f4:	6863      	ldr	r3, [r4, #4]
 800b3f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b3fa:	9206      	str	r2, [sp, #24]
 800b3fc:	1c5a      	adds	r2, r3, #1
 800b3fe:	d13f      	bne.n	800b480 <_printf_float+0x17c>
 800b400:	2306      	movs	r3, #6
 800b402:	6063      	str	r3, [r4, #4]
 800b404:	9b05      	ldr	r3, [sp, #20]
 800b406:	6861      	ldr	r1, [r4, #4]
 800b408:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b40c:	2300      	movs	r3, #0
 800b40e:	9303      	str	r3, [sp, #12]
 800b410:	ab0a      	add	r3, sp, #40	; 0x28
 800b412:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b416:	ab09      	add	r3, sp, #36	; 0x24
 800b418:	ec49 8b10 	vmov	d0, r8, r9
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	6022      	str	r2, [r4, #0]
 800b420:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b424:	4628      	mov	r0, r5
 800b426:	f7ff fecd 	bl	800b1c4 <__cvt>
 800b42a:	9b06      	ldr	r3, [sp, #24]
 800b42c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b42e:	2b47      	cmp	r3, #71	; 0x47
 800b430:	4680      	mov	r8, r0
 800b432:	d108      	bne.n	800b446 <_printf_float+0x142>
 800b434:	1cc8      	adds	r0, r1, #3
 800b436:	db02      	blt.n	800b43e <_printf_float+0x13a>
 800b438:	6863      	ldr	r3, [r4, #4]
 800b43a:	4299      	cmp	r1, r3
 800b43c:	dd41      	ble.n	800b4c2 <_printf_float+0x1be>
 800b43e:	f1ab 0b02 	sub.w	fp, fp, #2
 800b442:	fa5f fb8b 	uxtb.w	fp, fp
 800b446:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b44a:	d820      	bhi.n	800b48e <_printf_float+0x18a>
 800b44c:	3901      	subs	r1, #1
 800b44e:	465a      	mov	r2, fp
 800b450:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b454:	9109      	str	r1, [sp, #36]	; 0x24
 800b456:	f7ff ff17 	bl	800b288 <__exponent>
 800b45a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b45c:	1813      	adds	r3, r2, r0
 800b45e:	2a01      	cmp	r2, #1
 800b460:	4681      	mov	r9, r0
 800b462:	6123      	str	r3, [r4, #16]
 800b464:	dc02      	bgt.n	800b46c <_printf_float+0x168>
 800b466:	6822      	ldr	r2, [r4, #0]
 800b468:	07d2      	lsls	r2, r2, #31
 800b46a:	d501      	bpl.n	800b470 <_printf_float+0x16c>
 800b46c:	3301      	adds	r3, #1
 800b46e:	6123      	str	r3, [r4, #16]
 800b470:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b474:	2b00      	cmp	r3, #0
 800b476:	d09c      	beq.n	800b3b2 <_printf_float+0xae>
 800b478:	232d      	movs	r3, #45	; 0x2d
 800b47a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b47e:	e798      	b.n	800b3b2 <_printf_float+0xae>
 800b480:	9a06      	ldr	r2, [sp, #24]
 800b482:	2a47      	cmp	r2, #71	; 0x47
 800b484:	d1be      	bne.n	800b404 <_printf_float+0x100>
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1bc      	bne.n	800b404 <_printf_float+0x100>
 800b48a:	2301      	movs	r3, #1
 800b48c:	e7b9      	b.n	800b402 <_printf_float+0xfe>
 800b48e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b492:	d118      	bne.n	800b4c6 <_printf_float+0x1c2>
 800b494:	2900      	cmp	r1, #0
 800b496:	6863      	ldr	r3, [r4, #4]
 800b498:	dd0b      	ble.n	800b4b2 <_printf_float+0x1ae>
 800b49a:	6121      	str	r1, [r4, #16]
 800b49c:	b913      	cbnz	r3, 800b4a4 <_printf_float+0x1a0>
 800b49e:	6822      	ldr	r2, [r4, #0]
 800b4a0:	07d0      	lsls	r0, r2, #31
 800b4a2:	d502      	bpl.n	800b4aa <_printf_float+0x1a6>
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	440b      	add	r3, r1
 800b4a8:	6123      	str	r3, [r4, #16]
 800b4aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800b4ac:	f04f 0900 	mov.w	r9, #0
 800b4b0:	e7de      	b.n	800b470 <_printf_float+0x16c>
 800b4b2:	b913      	cbnz	r3, 800b4ba <_printf_float+0x1b6>
 800b4b4:	6822      	ldr	r2, [r4, #0]
 800b4b6:	07d2      	lsls	r2, r2, #31
 800b4b8:	d501      	bpl.n	800b4be <_printf_float+0x1ba>
 800b4ba:	3302      	adds	r3, #2
 800b4bc:	e7f4      	b.n	800b4a8 <_printf_float+0x1a4>
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e7f2      	b.n	800b4a8 <_printf_float+0x1a4>
 800b4c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4c8:	4299      	cmp	r1, r3
 800b4ca:	db05      	blt.n	800b4d8 <_printf_float+0x1d4>
 800b4cc:	6823      	ldr	r3, [r4, #0]
 800b4ce:	6121      	str	r1, [r4, #16]
 800b4d0:	07d8      	lsls	r0, r3, #31
 800b4d2:	d5ea      	bpl.n	800b4aa <_printf_float+0x1a6>
 800b4d4:	1c4b      	adds	r3, r1, #1
 800b4d6:	e7e7      	b.n	800b4a8 <_printf_float+0x1a4>
 800b4d8:	2900      	cmp	r1, #0
 800b4da:	bfd4      	ite	le
 800b4dc:	f1c1 0202 	rsble	r2, r1, #2
 800b4e0:	2201      	movgt	r2, #1
 800b4e2:	4413      	add	r3, r2
 800b4e4:	e7e0      	b.n	800b4a8 <_printf_float+0x1a4>
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	055a      	lsls	r2, r3, #21
 800b4ea:	d407      	bmi.n	800b4fc <_printf_float+0x1f8>
 800b4ec:	6923      	ldr	r3, [r4, #16]
 800b4ee:	4642      	mov	r2, r8
 800b4f0:	4631      	mov	r1, r6
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	47b8      	blx	r7
 800b4f6:	3001      	adds	r0, #1
 800b4f8:	d12c      	bne.n	800b554 <_printf_float+0x250>
 800b4fa:	e764      	b.n	800b3c6 <_printf_float+0xc2>
 800b4fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b500:	f240 80e0 	bls.w	800b6c4 <_printf_float+0x3c0>
 800b504:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b508:	2200      	movs	r2, #0
 800b50a:	2300      	movs	r3, #0
 800b50c:	f7f5 fae4 	bl	8000ad8 <__aeabi_dcmpeq>
 800b510:	2800      	cmp	r0, #0
 800b512:	d034      	beq.n	800b57e <_printf_float+0x27a>
 800b514:	4a37      	ldr	r2, [pc, #220]	; (800b5f4 <_printf_float+0x2f0>)
 800b516:	2301      	movs	r3, #1
 800b518:	4631      	mov	r1, r6
 800b51a:	4628      	mov	r0, r5
 800b51c:	47b8      	blx	r7
 800b51e:	3001      	adds	r0, #1
 800b520:	f43f af51 	beq.w	800b3c6 <_printf_float+0xc2>
 800b524:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b528:	429a      	cmp	r2, r3
 800b52a:	db02      	blt.n	800b532 <_printf_float+0x22e>
 800b52c:	6823      	ldr	r3, [r4, #0]
 800b52e:	07d8      	lsls	r0, r3, #31
 800b530:	d510      	bpl.n	800b554 <_printf_float+0x250>
 800b532:	ee18 3a10 	vmov	r3, s16
 800b536:	4652      	mov	r2, sl
 800b538:	4631      	mov	r1, r6
 800b53a:	4628      	mov	r0, r5
 800b53c:	47b8      	blx	r7
 800b53e:	3001      	adds	r0, #1
 800b540:	f43f af41 	beq.w	800b3c6 <_printf_float+0xc2>
 800b544:	f04f 0800 	mov.w	r8, #0
 800b548:	f104 091a 	add.w	r9, r4, #26
 800b54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b54e:	3b01      	subs	r3, #1
 800b550:	4543      	cmp	r3, r8
 800b552:	dc09      	bgt.n	800b568 <_printf_float+0x264>
 800b554:	6823      	ldr	r3, [r4, #0]
 800b556:	079b      	lsls	r3, r3, #30
 800b558:	f100 8105 	bmi.w	800b766 <_printf_float+0x462>
 800b55c:	68e0      	ldr	r0, [r4, #12]
 800b55e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b560:	4298      	cmp	r0, r3
 800b562:	bfb8      	it	lt
 800b564:	4618      	movlt	r0, r3
 800b566:	e730      	b.n	800b3ca <_printf_float+0xc6>
 800b568:	2301      	movs	r3, #1
 800b56a:	464a      	mov	r2, r9
 800b56c:	4631      	mov	r1, r6
 800b56e:	4628      	mov	r0, r5
 800b570:	47b8      	blx	r7
 800b572:	3001      	adds	r0, #1
 800b574:	f43f af27 	beq.w	800b3c6 <_printf_float+0xc2>
 800b578:	f108 0801 	add.w	r8, r8, #1
 800b57c:	e7e6      	b.n	800b54c <_printf_float+0x248>
 800b57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b580:	2b00      	cmp	r3, #0
 800b582:	dc39      	bgt.n	800b5f8 <_printf_float+0x2f4>
 800b584:	4a1b      	ldr	r2, [pc, #108]	; (800b5f4 <_printf_float+0x2f0>)
 800b586:	2301      	movs	r3, #1
 800b588:	4631      	mov	r1, r6
 800b58a:	4628      	mov	r0, r5
 800b58c:	47b8      	blx	r7
 800b58e:	3001      	adds	r0, #1
 800b590:	f43f af19 	beq.w	800b3c6 <_printf_float+0xc2>
 800b594:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b598:	4313      	orrs	r3, r2
 800b59a:	d102      	bne.n	800b5a2 <_printf_float+0x29e>
 800b59c:	6823      	ldr	r3, [r4, #0]
 800b59e:	07d9      	lsls	r1, r3, #31
 800b5a0:	d5d8      	bpl.n	800b554 <_printf_float+0x250>
 800b5a2:	ee18 3a10 	vmov	r3, s16
 800b5a6:	4652      	mov	r2, sl
 800b5a8:	4631      	mov	r1, r6
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	47b8      	blx	r7
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	f43f af09 	beq.w	800b3c6 <_printf_float+0xc2>
 800b5b4:	f04f 0900 	mov.w	r9, #0
 800b5b8:	f104 0a1a 	add.w	sl, r4, #26
 800b5bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5be:	425b      	negs	r3, r3
 800b5c0:	454b      	cmp	r3, r9
 800b5c2:	dc01      	bgt.n	800b5c8 <_printf_float+0x2c4>
 800b5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5c6:	e792      	b.n	800b4ee <_printf_float+0x1ea>
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	4652      	mov	r2, sl
 800b5cc:	4631      	mov	r1, r6
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	47b8      	blx	r7
 800b5d2:	3001      	adds	r0, #1
 800b5d4:	f43f aef7 	beq.w	800b3c6 <_printf_float+0xc2>
 800b5d8:	f109 0901 	add.w	r9, r9, #1
 800b5dc:	e7ee      	b.n	800b5bc <_printf_float+0x2b8>
 800b5de:	bf00      	nop
 800b5e0:	7fefffff 	.word	0x7fefffff
 800b5e4:	080116e8 	.word	0x080116e8
 800b5e8:	080116ec 	.word	0x080116ec
 800b5ec:	080116f4 	.word	0x080116f4
 800b5f0:	080116f0 	.word	0x080116f0
 800b5f4:	080116f8 	.word	0x080116f8
 800b5f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	bfa8      	it	ge
 800b600:	461a      	movge	r2, r3
 800b602:	2a00      	cmp	r2, #0
 800b604:	4691      	mov	r9, r2
 800b606:	dc37      	bgt.n	800b678 <_printf_float+0x374>
 800b608:	f04f 0b00 	mov.w	fp, #0
 800b60c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b610:	f104 021a 	add.w	r2, r4, #26
 800b614:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b616:	9305      	str	r3, [sp, #20]
 800b618:	eba3 0309 	sub.w	r3, r3, r9
 800b61c:	455b      	cmp	r3, fp
 800b61e:	dc33      	bgt.n	800b688 <_printf_float+0x384>
 800b620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b624:	429a      	cmp	r2, r3
 800b626:	db3b      	blt.n	800b6a0 <_printf_float+0x39c>
 800b628:	6823      	ldr	r3, [r4, #0]
 800b62a:	07da      	lsls	r2, r3, #31
 800b62c:	d438      	bmi.n	800b6a0 <_printf_float+0x39c>
 800b62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b630:	9a05      	ldr	r2, [sp, #20]
 800b632:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b634:	1a9a      	subs	r2, r3, r2
 800b636:	eba3 0901 	sub.w	r9, r3, r1
 800b63a:	4591      	cmp	r9, r2
 800b63c:	bfa8      	it	ge
 800b63e:	4691      	movge	r9, r2
 800b640:	f1b9 0f00 	cmp.w	r9, #0
 800b644:	dc35      	bgt.n	800b6b2 <_printf_float+0x3ae>
 800b646:	f04f 0800 	mov.w	r8, #0
 800b64a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b64e:	f104 0a1a 	add.w	sl, r4, #26
 800b652:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b656:	1a9b      	subs	r3, r3, r2
 800b658:	eba3 0309 	sub.w	r3, r3, r9
 800b65c:	4543      	cmp	r3, r8
 800b65e:	f77f af79 	ble.w	800b554 <_printf_float+0x250>
 800b662:	2301      	movs	r3, #1
 800b664:	4652      	mov	r2, sl
 800b666:	4631      	mov	r1, r6
 800b668:	4628      	mov	r0, r5
 800b66a:	47b8      	blx	r7
 800b66c:	3001      	adds	r0, #1
 800b66e:	f43f aeaa 	beq.w	800b3c6 <_printf_float+0xc2>
 800b672:	f108 0801 	add.w	r8, r8, #1
 800b676:	e7ec      	b.n	800b652 <_printf_float+0x34e>
 800b678:	4613      	mov	r3, r2
 800b67a:	4631      	mov	r1, r6
 800b67c:	4642      	mov	r2, r8
 800b67e:	4628      	mov	r0, r5
 800b680:	47b8      	blx	r7
 800b682:	3001      	adds	r0, #1
 800b684:	d1c0      	bne.n	800b608 <_printf_float+0x304>
 800b686:	e69e      	b.n	800b3c6 <_printf_float+0xc2>
 800b688:	2301      	movs	r3, #1
 800b68a:	4631      	mov	r1, r6
 800b68c:	4628      	mov	r0, r5
 800b68e:	9205      	str	r2, [sp, #20]
 800b690:	47b8      	blx	r7
 800b692:	3001      	adds	r0, #1
 800b694:	f43f ae97 	beq.w	800b3c6 <_printf_float+0xc2>
 800b698:	9a05      	ldr	r2, [sp, #20]
 800b69a:	f10b 0b01 	add.w	fp, fp, #1
 800b69e:	e7b9      	b.n	800b614 <_printf_float+0x310>
 800b6a0:	ee18 3a10 	vmov	r3, s16
 800b6a4:	4652      	mov	r2, sl
 800b6a6:	4631      	mov	r1, r6
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	47b8      	blx	r7
 800b6ac:	3001      	adds	r0, #1
 800b6ae:	d1be      	bne.n	800b62e <_printf_float+0x32a>
 800b6b0:	e689      	b.n	800b3c6 <_printf_float+0xc2>
 800b6b2:	9a05      	ldr	r2, [sp, #20]
 800b6b4:	464b      	mov	r3, r9
 800b6b6:	4442      	add	r2, r8
 800b6b8:	4631      	mov	r1, r6
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	47b8      	blx	r7
 800b6be:	3001      	adds	r0, #1
 800b6c0:	d1c1      	bne.n	800b646 <_printf_float+0x342>
 800b6c2:	e680      	b.n	800b3c6 <_printf_float+0xc2>
 800b6c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6c6:	2a01      	cmp	r2, #1
 800b6c8:	dc01      	bgt.n	800b6ce <_printf_float+0x3ca>
 800b6ca:	07db      	lsls	r3, r3, #31
 800b6cc:	d538      	bpl.n	800b740 <_printf_float+0x43c>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	4642      	mov	r2, r8
 800b6d2:	4631      	mov	r1, r6
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	47b8      	blx	r7
 800b6d8:	3001      	adds	r0, #1
 800b6da:	f43f ae74 	beq.w	800b3c6 <_printf_float+0xc2>
 800b6de:	ee18 3a10 	vmov	r3, s16
 800b6e2:	4652      	mov	r2, sl
 800b6e4:	4631      	mov	r1, r6
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	47b8      	blx	r7
 800b6ea:	3001      	adds	r0, #1
 800b6ec:	f43f ae6b 	beq.w	800b3c6 <_printf_float+0xc2>
 800b6f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	f7f5 f9ee 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6fc:	b9d8      	cbnz	r0, 800b736 <_printf_float+0x432>
 800b6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b700:	f108 0201 	add.w	r2, r8, #1
 800b704:	3b01      	subs	r3, #1
 800b706:	4631      	mov	r1, r6
 800b708:	4628      	mov	r0, r5
 800b70a:	47b8      	blx	r7
 800b70c:	3001      	adds	r0, #1
 800b70e:	d10e      	bne.n	800b72e <_printf_float+0x42a>
 800b710:	e659      	b.n	800b3c6 <_printf_float+0xc2>
 800b712:	2301      	movs	r3, #1
 800b714:	4652      	mov	r2, sl
 800b716:	4631      	mov	r1, r6
 800b718:	4628      	mov	r0, r5
 800b71a:	47b8      	blx	r7
 800b71c:	3001      	adds	r0, #1
 800b71e:	f43f ae52 	beq.w	800b3c6 <_printf_float+0xc2>
 800b722:	f108 0801 	add.w	r8, r8, #1
 800b726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b728:	3b01      	subs	r3, #1
 800b72a:	4543      	cmp	r3, r8
 800b72c:	dcf1      	bgt.n	800b712 <_printf_float+0x40e>
 800b72e:	464b      	mov	r3, r9
 800b730:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b734:	e6dc      	b.n	800b4f0 <_printf_float+0x1ec>
 800b736:	f04f 0800 	mov.w	r8, #0
 800b73a:	f104 0a1a 	add.w	sl, r4, #26
 800b73e:	e7f2      	b.n	800b726 <_printf_float+0x422>
 800b740:	2301      	movs	r3, #1
 800b742:	4642      	mov	r2, r8
 800b744:	e7df      	b.n	800b706 <_printf_float+0x402>
 800b746:	2301      	movs	r3, #1
 800b748:	464a      	mov	r2, r9
 800b74a:	4631      	mov	r1, r6
 800b74c:	4628      	mov	r0, r5
 800b74e:	47b8      	blx	r7
 800b750:	3001      	adds	r0, #1
 800b752:	f43f ae38 	beq.w	800b3c6 <_printf_float+0xc2>
 800b756:	f108 0801 	add.w	r8, r8, #1
 800b75a:	68e3      	ldr	r3, [r4, #12]
 800b75c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b75e:	1a5b      	subs	r3, r3, r1
 800b760:	4543      	cmp	r3, r8
 800b762:	dcf0      	bgt.n	800b746 <_printf_float+0x442>
 800b764:	e6fa      	b.n	800b55c <_printf_float+0x258>
 800b766:	f04f 0800 	mov.w	r8, #0
 800b76a:	f104 0919 	add.w	r9, r4, #25
 800b76e:	e7f4      	b.n	800b75a <_printf_float+0x456>

0800b770 <_printf_common>:
 800b770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b774:	4616      	mov	r6, r2
 800b776:	4699      	mov	r9, r3
 800b778:	688a      	ldr	r2, [r1, #8]
 800b77a:	690b      	ldr	r3, [r1, #16]
 800b77c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b780:	4293      	cmp	r3, r2
 800b782:	bfb8      	it	lt
 800b784:	4613      	movlt	r3, r2
 800b786:	6033      	str	r3, [r6, #0]
 800b788:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b78c:	4607      	mov	r7, r0
 800b78e:	460c      	mov	r4, r1
 800b790:	b10a      	cbz	r2, 800b796 <_printf_common+0x26>
 800b792:	3301      	adds	r3, #1
 800b794:	6033      	str	r3, [r6, #0]
 800b796:	6823      	ldr	r3, [r4, #0]
 800b798:	0699      	lsls	r1, r3, #26
 800b79a:	bf42      	ittt	mi
 800b79c:	6833      	ldrmi	r3, [r6, #0]
 800b79e:	3302      	addmi	r3, #2
 800b7a0:	6033      	strmi	r3, [r6, #0]
 800b7a2:	6825      	ldr	r5, [r4, #0]
 800b7a4:	f015 0506 	ands.w	r5, r5, #6
 800b7a8:	d106      	bne.n	800b7b8 <_printf_common+0x48>
 800b7aa:	f104 0a19 	add.w	sl, r4, #25
 800b7ae:	68e3      	ldr	r3, [r4, #12]
 800b7b0:	6832      	ldr	r2, [r6, #0]
 800b7b2:	1a9b      	subs	r3, r3, r2
 800b7b4:	42ab      	cmp	r3, r5
 800b7b6:	dc26      	bgt.n	800b806 <_printf_common+0x96>
 800b7b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7bc:	1e13      	subs	r3, r2, #0
 800b7be:	6822      	ldr	r2, [r4, #0]
 800b7c0:	bf18      	it	ne
 800b7c2:	2301      	movne	r3, #1
 800b7c4:	0692      	lsls	r2, r2, #26
 800b7c6:	d42b      	bmi.n	800b820 <_printf_common+0xb0>
 800b7c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7cc:	4649      	mov	r1, r9
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	47c0      	blx	r8
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	d01e      	beq.n	800b814 <_printf_common+0xa4>
 800b7d6:	6823      	ldr	r3, [r4, #0]
 800b7d8:	68e5      	ldr	r5, [r4, #12]
 800b7da:	6832      	ldr	r2, [r6, #0]
 800b7dc:	f003 0306 	and.w	r3, r3, #6
 800b7e0:	2b04      	cmp	r3, #4
 800b7e2:	bf08      	it	eq
 800b7e4:	1aad      	subeq	r5, r5, r2
 800b7e6:	68a3      	ldr	r3, [r4, #8]
 800b7e8:	6922      	ldr	r2, [r4, #16]
 800b7ea:	bf0c      	ite	eq
 800b7ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7f0:	2500      	movne	r5, #0
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	bfc4      	itt	gt
 800b7f6:	1a9b      	subgt	r3, r3, r2
 800b7f8:	18ed      	addgt	r5, r5, r3
 800b7fa:	2600      	movs	r6, #0
 800b7fc:	341a      	adds	r4, #26
 800b7fe:	42b5      	cmp	r5, r6
 800b800:	d11a      	bne.n	800b838 <_printf_common+0xc8>
 800b802:	2000      	movs	r0, #0
 800b804:	e008      	b.n	800b818 <_printf_common+0xa8>
 800b806:	2301      	movs	r3, #1
 800b808:	4652      	mov	r2, sl
 800b80a:	4649      	mov	r1, r9
 800b80c:	4638      	mov	r0, r7
 800b80e:	47c0      	blx	r8
 800b810:	3001      	adds	r0, #1
 800b812:	d103      	bne.n	800b81c <_printf_common+0xac>
 800b814:	f04f 30ff 	mov.w	r0, #4294967295
 800b818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b81c:	3501      	adds	r5, #1
 800b81e:	e7c6      	b.n	800b7ae <_printf_common+0x3e>
 800b820:	18e1      	adds	r1, r4, r3
 800b822:	1c5a      	adds	r2, r3, #1
 800b824:	2030      	movs	r0, #48	; 0x30
 800b826:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b82a:	4422      	add	r2, r4
 800b82c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b830:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b834:	3302      	adds	r3, #2
 800b836:	e7c7      	b.n	800b7c8 <_printf_common+0x58>
 800b838:	2301      	movs	r3, #1
 800b83a:	4622      	mov	r2, r4
 800b83c:	4649      	mov	r1, r9
 800b83e:	4638      	mov	r0, r7
 800b840:	47c0      	blx	r8
 800b842:	3001      	adds	r0, #1
 800b844:	d0e6      	beq.n	800b814 <_printf_common+0xa4>
 800b846:	3601      	adds	r6, #1
 800b848:	e7d9      	b.n	800b7fe <_printf_common+0x8e>
	...

0800b84c <_printf_i>:
 800b84c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b850:	7e0f      	ldrb	r7, [r1, #24]
 800b852:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b854:	2f78      	cmp	r7, #120	; 0x78
 800b856:	4691      	mov	r9, r2
 800b858:	4680      	mov	r8, r0
 800b85a:	460c      	mov	r4, r1
 800b85c:	469a      	mov	sl, r3
 800b85e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b862:	d807      	bhi.n	800b874 <_printf_i+0x28>
 800b864:	2f62      	cmp	r7, #98	; 0x62
 800b866:	d80a      	bhi.n	800b87e <_printf_i+0x32>
 800b868:	2f00      	cmp	r7, #0
 800b86a:	f000 80d8 	beq.w	800ba1e <_printf_i+0x1d2>
 800b86e:	2f58      	cmp	r7, #88	; 0x58
 800b870:	f000 80a3 	beq.w	800b9ba <_printf_i+0x16e>
 800b874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b878:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b87c:	e03a      	b.n	800b8f4 <_printf_i+0xa8>
 800b87e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b882:	2b15      	cmp	r3, #21
 800b884:	d8f6      	bhi.n	800b874 <_printf_i+0x28>
 800b886:	a101      	add	r1, pc, #4	; (adr r1, 800b88c <_printf_i+0x40>)
 800b888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b88c:	0800b8e5 	.word	0x0800b8e5
 800b890:	0800b8f9 	.word	0x0800b8f9
 800b894:	0800b875 	.word	0x0800b875
 800b898:	0800b875 	.word	0x0800b875
 800b89c:	0800b875 	.word	0x0800b875
 800b8a0:	0800b875 	.word	0x0800b875
 800b8a4:	0800b8f9 	.word	0x0800b8f9
 800b8a8:	0800b875 	.word	0x0800b875
 800b8ac:	0800b875 	.word	0x0800b875
 800b8b0:	0800b875 	.word	0x0800b875
 800b8b4:	0800b875 	.word	0x0800b875
 800b8b8:	0800ba05 	.word	0x0800ba05
 800b8bc:	0800b929 	.word	0x0800b929
 800b8c0:	0800b9e7 	.word	0x0800b9e7
 800b8c4:	0800b875 	.word	0x0800b875
 800b8c8:	0800b875 	.word	0x0800b875
 800b8cc:	0800ba27 	.word	0x0800ba27
 800b8d0:	0800b875 	.word	0x0800b875
 800b8d4:	0800b929 	.word	0x0800b929
 800b8d8:	0800b875 	.word	0x0800b875
 800b8dc:	0800b875 	.word	0x0800b875
 800b8e0:	0800b9ef 	.word	0x0800b9ef
 800b8e4:	682b      	ldr	r3, [r5, #0]
 800b8e6:	1d1a      	adds	r2, r3, #4
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	602a      	str	r2, [r5, #0]
 800b8ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e0a3      	b.n	800ba40 <_printf_i+0x1f4>
 800b8f8:	6820      	ldr	r0, [r4, #0]
 800b8fa:	6829      	ldr	r1, [r5, #0]
 800b8fc:	0606      	lsls	r6, r0, #24
 800b8fe:	f101 0304 	add.w	r3, r1, #4
 800b902:	d50a      	bpl.n	800b91a <_printf_i+0xce>
 800b904:	680e      	ldr	r6, [r1, #0]
 800b906:	602b      	str	r3, [r5, #0]
 800b908:	2e00      	cmp	r6, #0
 800b90a:	da03      	bge.n	800b914 <_printf_i+0xc8>
 800b90c:	232d      	movs	r3, #45	; 0x2d
 800b90e:	4276      	negs	r6, r6
 800b910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b914:	485e      	ldr	r0, [pc, #376]	; (800ba90 <_printf_i+0x244>)
 800b916:	230a      	movs	r3, #10
 800b918:	e019      	b.n	800b94e <_printf_i+0x102>
 800b91a:	680e      	ldr	r6, [r1, #0]
 800b91c:	602b      	str	r3, [r5, #0]
 800b91e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b922:	bf18      	it	ne
 800b924:	b236      	sxthne	r6, r6
 800b926:	e7ef      	b.n	800b908 <_printf_i+0xbc>
 800b928:	682b      	ldr	r3, [r5, #0]
 800b92a:	6820      	ldr	r0, [r4, #0]
 800b92c:	1d19      	adds	r1, r3, #4
 800b92e:	6029      	str	r1, [r5, #0]
 800b930:	0601      	lsls	r1, r0, #24
 800b932:	d501      	bpl.n	800b938 <_printf_i+0xec>
 800b934:	681e      	ldr	r6, [r3, #0]
 800b936:	e002      	b.n	800b93e <_printf_i+0xf2>
 800b938:	0646      	lsls	r6, r0, #25
 800b93a:	d5fb      	bpl.n	800b934 <_printf_i+0xe8>
 800b93c:	881e      	ldrh	r6, [r3, #0]
 800b93e:	4854      	ldr	r0, [pc, #336]	; (800ba90 <_printf_i+0x244>)
 800b940:	2f6f      	cmp	r7, #111	; 0x6f
 800b942:	bf0c      	ite	eq
 800b944:	2308      	moveq	r3, #8
 800b946:	230a      	movne	r3, #10
 800b948:	2100      	movs	r1, #0
 800b94a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b94e:	6865      	ldr	r5, [r4, #4]
 800b950:	60a5      	str	r5, [r4, #8]
 800b952:	2d00      	cmp	r5, #0
 800b954:	bfa2      	ittt	ge
 800b956:	6821      	ldrge	r1, [r4, #0]
 800b958:	f021 0104 	bicge.w	r1, r1, #4
 800b95c:	6021      	strge	r1, [r4, #0]
 800b95e:	b90e      	cbnz	r6, 800b964 <_printf_i+0x118>
 800b960:	2d00      	cmp	r5, #0
 800b962:	d04d      	beq.n	800ba00 <_printf_i+0x1b4>
 800b964:	4615      	mov	r5, r2
 800b966:	fbb6 f1f3 	udiv	r1, r6, r3
 800b96a:	fb03 6711 	mls	r7, r3, r1, r6
 800b96e:	5dc7      	ldrb	r7, [r0, r7]
 800b970:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b974:	4637      	mov	r7, r6
 800b976:	42bb      	cmp	r3, r7
 800b978:	460e      	mov	r6, r1
 800b97a:	d9f4      	bls.n	800b966 <_printf_i+0x11a>
 800b97c:	2b08      	cmp	r3, #8
 800b97e:	d10b      	bne.n	800b998 <_printf_i+0x14c>
 800b980:	6823      	ldr	r3, [r4, #0]
 800b982:	07de      	lsls	r6, r3, #31
 800b984:	d508      	bpl.n	800b998 <_printf_i+0x14c>
 800b986:	6923      	ldr	r3, [r4, #16]
 800b988:	6861      	ldr	r1, [r4, #4]
 800b98a:	4299      	cmp	r1, r3
 800b98c:	bfde      	ittt	le
 800b98e:	2330      	movle	r3, #48	; 0x30
 800b990:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b994:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b998:	1b52      	subs	r2, r2, r5
 800b99a:	6122      	str	r2, [r4, #16]
 800b99c:	f8cd a000 	str.w	sl, [sp]
 800b9a0:	464b      	mov	r3, r9
 800b9a2:	aa03      	add	r2, sp, #12
 800b9a4:	4621      	mov	r1, r4
 800b9a6:	4640      	mov	r0, r8
 800b9a8:	f7ff fee2 	bl	800b770 <_printf_common>
 800b9ac:	3001      	adds	r0, #1
 800b9ae:	d14c      	bne.n	800ba4a <_printf_i+0x1fe>
 800b9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b4:	b004      	add	sp, #16
 800b9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ba:	4835      	ldr	r0, [pc, #212]	; (800ba90 <_printf_i+0x244>)
 800b9bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b9c0:	6829      	ldr	r1, [r5, #0]
 800b9c2:	6823      	ldr	r3, [r4, #0]
 800b9c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b9c8:	6029      	str	r1, [r5, #0]
 800b9ca:	061d      	lsls	r5, r3, #24
 800b9cc:	d514      	bpl.n	800b9f8 <_printf_i+0x1ac>
 800b9ce:	07df      	lsls	r7, r3, #31
 800b9d0:	bf44      	itt	mi
 800b9d2:	f043 0320 	orrmi.w	r3, r3, #32
 800b9d6:	6023      	strmi	r3, [r4, #0]
 800b9d8:	b91e      	cbnz	r6, 800b9e2 <_printf_i+0x196>
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	f023 0320 	bic.w	r3, r3, #32
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	2310      	movs	r3, #16
 800b9e4:	e7b0      	b.n	800b948 <_printf_i+0xfc>
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	f043 0320 	orr.w	r3, r3, #32
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	2378      	movs	r3, #120	; 0x78
 800b9f0:	4828      	ldr	r0, [pc, #160]	; (800ba94 <_printf_i+0x248>)
 800b9f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9f6:	e7e3      	b.n	800b9c0 <_printf_i+0x174>
 800b9f8:	0659      	lsls	r1, r3, #25
 800b9fa:	bf48      	it	mi
 800b9fc:	b2b6      	uxthmi	r6, r6
 800b9fe:	e7e6      	b.n	800b9ce <_printf_i+0x182>
 800ba00:	4615      	mov	r5, r2
 800ba02:	e7bb      	b.n	800b97c <_printf_i+0x130>
 800ba04:	682b      	ldr	r3, [r5, #0]
 800ba06:	6826      	ldr	r6, [r4, #0]
 800ba08:	6961      	ldr	r1, [r4, #20]
 800ba0a:	1d18      	adds	r0, r3, #4
 800ba0c:	6028      	str	r0, [r5, #0]
 800ba0e:	0635      	lsls	r5, r6, #24
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	d501      	bpl.n	800ba18 <_printf_i+0x1cc>
 800ba14:	6019      	str	r1, [r3, #0]
 800ba16:	e002      	b.n	800ba1e <_printf_i+0x1d2>
 800ba18:	0670      	lsls	r0, r6, #25
 800ba1a:	d5fb      	bpl.n	800ba14 <_printf_i+0x1c8>
 800ba1c:	8019      	strh	r1, [r3, #0]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	6123      	str	r3, [r4, #16]
 800ba22:	4615      	mov	r5, r2
 800ba24:	e7ba      	b.n	800b99c <_printf_i+0x150>
 800ba26:	682b      	ldr	r3, [r5, #0]
 800ba28:	1d1a      	adds	r2, r3, #4
 800ba2a:	602a      	str	r2, [r5, #0]
 800ba2c:	681d      	ldr	r5, [r3, #0]
 800ba2e:	6862      	ldr	r2, [r4, #4]
 800ba30:	2100      	movs	r1, #0
 800ba32:	4628      	mov	r0, r5
 800ba34:	f7f4 fbdc 	bl	80001f0 <memchr>
 800ba38:	b108      	cbz	r0, 800ba3e <_printf_i+0x1f2>
 800ba3a:	1b40      	subs	r0, r0, r5
 800ba3c:	6060      	str	r0, [r4, #4]
 800ba3e:	6863      	ldr	r3, [r4, #4]
 800ba40:	6123      	str	r3, [r4, #16]
 800ba42:	2300      	movs	r3, #0
 800ba44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba48:	e7a8      	b.n	800b99c <_printf_i+0x150>
 800ba4a:	6923      	ldr	r3, [r4, #16]
 800ba4c:	462a      	mov	r2, r5
 800ba4e:	4649      	mov	r1, r9
 800ba50:	4640      	mov	r0, r8
 800ba52:	47d0      	blx	sl
 800ba54:	3001      	adds	r0, #1
 800ba56:	d0ab      	beq.n	800b9b0 <_printf_i+0x164>
 800ba58:	6823      	ldr	r3, [r4, #0]
 800ba5a:	079b      	lsls	r3, r3, #30
 800ba5c:	d413      	bmi.n	800ba86 <_printf_i+0x23a>
 800ba5e:	68e0      	ldr	r0, [r4, #12]
 800ba60:	9b03      	ldr	r3, [sp, #12]
 800ba62:	4298      	cmp	r0, r3
 800ba64:	bfb8      	it	lt
 800ba66:	4618      	movlt	r0, r3
 800ba68:	e7a4      	b.n	800b9b4 <_printf_i+0x168>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	4632      	mov	r2, r6
 800ba6e:	4649      	mov	r1, r9
 800ba70:	4640      	mov	r0, r8
 800ba72:	47d0      	blx	sl
 800ba74:	3001      	adds	r0, #1
 800ba76:	d09b      	beq.n	800b9b0 <_printf_i+0x164>
 800ba78:	3501      	adds	r5, #1
 800ba7a:	68e3      	ldr	r3, [r4, #12]
 800ba7c:	9903      	ldr	r1, [sp, #12]
 800ba7e:	1a5b      	subs	r3, r3, r1
 800ba80:	42ab      	cmp	r3, r5
 800ba82:	dcf2      	bgt.n	800ba6a <_printf_i+0x21e>
 800ba84:	e7eb      	b.n	800ba5e <_printf_i+0x212>
 800ba86:	2500      	movs	r5, #0
 800ba88:	f104 0619 	add.w	r6, r4, #25
 800ba8c:	e7f5      	b.n	800ba7a <_printf_i+0x22e>
 800ba8e:	bf00      	nop
 800ba90:	080116fa 	.word	0x080116fa
 800ba94:	0801170b 	.word	0x0801170b

0800ba98 <_scanf_float>:
 800ba98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9c:	b087      	sub	sp, #28
 800ba9e:	4617      	mov	r7, r2
 800baa0:	9303      	str	r3, [sp, #12]
 800baa2:	688b      	ldr	r3, [r1, #8]
 800baa4:	1e5a      	subs	r2, r3, #1
 800baa6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800baaa:	bf83      	ittte	hi
 800baac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bab0:	195b      	addhi	r3, r3, r5
 800bab2:	9302      	strhi	r3, [sp, #8]
 800bab4:	2300      	movls	r3, #0
 800bab6:	bf86      	itte	hi
 800bab8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800babc:	608b      	strhi	r3, [r1, #8]
 800babe:	9302      	strls	r3, [sp, #8]
 800bac0:	680b      	ldr	r3, [r1, #0]
 800bac2:	468b      	mov	fp, r1
 800bac4:	2500      	movs	r5, #0
 800bac6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800baca:	f84b 3b1c 	str.w	r3, [fp], #28
 800bace:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bad2:	4680      	mov	r8, r0
 800bad4:	460c      	mov	r4, r1
 800bad6:	465e      	mov	r6, fp
 800bad8:	46aa      	mov	sl, r5
 800bada:	46a9      	mov	r9, r5
 800badc:	9501      	str	r5, [sp, #4]
 800bade:	68a2      	ldr	r2, [r4, #8]
 800bae0:	b152      	cbz	r2, 800baf8 <_scanf_float+0x60>
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	2b4e      	cmp	r3, #78	; 0x4e
 800bae8:	d864      	bhi.n	800bbb4 <_scanf_float+0x11c>
 800baea:	2b40      	cmp	r3, #64	; 0x40
 800baec:	d83c      	bhi.n	800bb68 <_scanf_float+0xd0>
 800baee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800baf2:	b2c8      	uxtb	r0, r1
 800baf4:	280e      	cmp	r0, #14
 800baf6:	d93a      	bls.n	800bb6e <_scanf_float+0xd6>
 800baf8:	f1b9 0f00 	cmp.w	r9, #0
 800bafc:	d003      	beq.n	800bb06 <_scanf_float+0x6e>
 800bafe:	6823      	ldr	r3, [r4, #0]
 800bb00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb04:	6023      	str	r3, [r4, #0]
 800bb06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb0a:	f1ba 0f01 	cmp.w	sl, #1
 800bb0e:	f200 8113 	bhi.w	800bd38 <_scanf_float+0x2a0>
 800bb12:	455e      	cmp	r6, fp
 800bb14:	f200 8105 	bhi.w	800bd22 <_scanf_float+0x28a>
 800bb18:	2501      	movs	r5, #1
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	b007      	add	sp, #28
 800bb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb22:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800bb26:	2a0d      	cmp	r2, #13
 800bb28:	d8e6      	bhi.n	800baf8 <_scanf_float+0x60>
 800bb2a:	a101      	add	r1, pc, #4	; (adr r1, 800bb30 <_scanf_float+0x98>)
 800bb2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bb30:	0800bc6f 	.word	0x0800bc6f
 800bb34:	0800baf9 	.word	0x0800baf9
 800bb38:	0800baf9 	.word	0x0800baf9
 800bb3c:	0800baf9 	.word	0x0800baf9
 800bb40:	0800bccf 	.word	0x0800bccf
 800bb44:	0800bca7 	.word	0x0800bca7
 800bb48:	0800baf9 	.word	0x0800baf9
 800bb4c:	0800baf9 	.word	0x0800baf9
 800bb50:	0800bc7d 	.word	0x0800bc7d
 800bb54:	0800baf9 	.word	0x0800baf9
 800bb58:	0800baf9 	.word	0x0800baf9
 800bb5c:	0800baf9 	.word	0x0800baf9
 800bb60:	0800baf9 	.word	0x0800baf9
 800bb64:	0800bc35 	.word	0x0800bc35
 800bb68:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bb6c:	e7db      	b.n	800bb26 <_scanf_float+0x8e>
 800bb6e:	290e      	cmp	r1, #14
 800bb70:	d8c2      	bhi.n	800baf8 <_scanf_float+0x60>
 800bb72:	a001      	add	r0, pc, #4	; (adr r0, 800bb78 <_scanf_float+0xe0>)
 800bb74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bb78:	0800bc27 	.word	0x0800bc27
 800bb7c:	0800baf9 	.word	0x0800baf9
 800bb80:	0800bc27 	.word	0x0800bc27
 800bb84:	0800bcbb 	.word	0x0800bcbb
 800bb88:	0800baf9 	.word	0x0800baf9
 800bb8c:	0800bbd5 	.word	0x0800bbd5
 800bb90:	0800bc11 	.word	0x0800bc11
 800bb94:	0800bc11 	.word	0x0800bc11
 800bb98:	0800bc11 	.word	0x0800bc11
 800bb9c:	0800bc11 	.word	0x0800bc11
 800bba0:	0800bc11 	.word	0x0800bc11
 800bba4:	0800bc11 	.word	0x0800bc11
 800bba8:	0800bc11 	.word	0x0800bc11
 800bbac:	0800bc11 	.word	0x0800bc11
 800bbb0:	0800bc11 	.word	0x0800bc11
 800bbb4:	2b6e      	cmp	r3, #110	; 0x6e
 800bbb6:	d809      	bhi.n	800bbcc <_scanf_float+0x134>
 800bbb8:	2b60      	cmp	r3, #96	; 0x60
 800bbba:	d8b2      	bhi.n	800bb22 <_scanf_float+0x8a>
 800bbbc:	2b54      	cmp	r3, #84	; 0x54
 800bbbe:	d077      	beq.n	800bcb0 <_scanf_float+0x218>
 800bbc0:	2b59      	cmp	r3, #89	; 0x59
 800bbc2:	d199      	bne.n	800baf8 <_scanf_float+0x60>
 800bbc4:	2d07      	cmp	r5, #7
 800bbc6:	d197      	bne.n	800baf8 <_scanf_float+0x60>
 800bbc8:	2508      	movs	r5, #8
 800bbca:	e029      	b.n	800bc20 <_scanf_float+0x188>
 800bbcc:	2b74      	cmp	r3, #116	; 0x74
 800bbce:	d06f      	beq.n	800bcb0 <_scanf_float+0x218>
 800bbd0:	2b79      	cmp	r3, #121	; 0x79
 800bbd2:	e7f6      	b.n	800bbc2 <_scanf_float+0x12a>
 800bbd4:	6821      	ldr	r1, [r4, #0]
 800bbd6:	05c8      	lsls	r0, r1, #23
 800bbd8:	d51a      	bpl.n	800bc10 <_scanf_float+0x178>
 800bbda:	9b02      	ldr	r3, [sp, #8]
 800bbdc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bbe0:	6021      	str	r1, [r4, #0]
 800bbe2:	f109 0901 	add.w	r9, r9, #1
 800bbe6:	b11b      	cbz	r3, 800bbf0 <_scanf_float+0x158>
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	3201      	adds	r2, #1
 800bbec:	9302      	str	r3, [sp, #8]
 800bbee:	60a2      	str	r2, [r4, #8]
 800bbf0:	68a3      	ldr	r3, [r4, #8]
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	60a3      	str	r3, [r4, #8]
 800bbf6:	6923      	ldr	r3, [r4, #16]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	6123      	str	r3, [r4, #16]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	607b      	str	r3, [r7, #4]
 800bc04:	f340 8084 	ble.w	800bd10 <_scanf_float+0x278>
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	603b      	str	r3, [r7, #0]
 800bc0e:	e766      	b.n	800bade <_scanf_float+0x46>
 800bc10:	eb1a 0f05 	cmn.w	sl, r5
 800bc14:	f47f af70 	bne.w	800baf8 <_scanf_float+0x60>
 800bc18:	6822      	ldr	r2, [r4, #0]
 800bc1a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bc1e:	6022      	str	r2, [r4, #0]
 800bc20:	f806 3b01 	strb.w	r3, [r6], #1
 800bc24:	e7e4      	b.n	800bbf0 <_scanf_float+0x158>
 800bc26:	6822      	ldr	r2, [r4, #0]
 800bc28:	0610      	lsls	r0, r2, #24
 800bc2a:	f57f af65 	bpl.w	800baf8 <_scanf_float+0x60>
 800bc2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc32:	e7f4      	b.n	800bc1e <_scanf_float+0x186>
 800bc34:	f1ba 0f00 	cmp.w	sl, #0
 800bc38:	d10e      	bne.n	800bc58 <_scanf_float+0x1c0>
 800bc3a:	f1b9 0f00 	cmp.w	r9, #0
 800bc3e:	d10e      	bne.n	800bc5e <_scanf_float+0x1c6>
 800bc40:	6822      	ldr	r2, [r4, #0]
 800bc42:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bc46:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bc4a:	d108      	bne.n	800bc5e <_scanf_float+0x1c6>
 800bc4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bc50:	6022      	str	r2, [r4, #0]
 800bc52:	f04f 0a01 	mov.w	sl, #1
 800bc56:	e7e3      	b.n	800bc20 <_scanf_float+0x188>
 800bc58:	f1ba 0f02 	cmp.w	sl, #2
 800bc5c:	d055      	beq.n	800bd0a <_scanf_float+0x272>
 800bc5e:	2d01      	cmp	r5, #1
 800bc60:	d002      	beq.n	800bc68 <_scanf_float+0x1d0>
 800bc62:	2d04      	cmp	r5, #4
 800bc64:	f47f af48 	bne.w	800baf8 <_scanf_float+0x60>
 800bc68:	3501      	adds	r5, #1
 800bc6a:	b2ed      	uxtb	r5, r5
 800bc6c:	e7d8      	b.n	800bc20 <_scanf_float+0x188>
 800bc6e:	f1ba 0f01 	cmp.w	sl, #1
 800bc72:	f47f af41 	bne.w	800baf8 <_scanf_float+0x60>
 800bc76:	f04f 0a02 	mov.w	sl, #2
 800bc7a:	e7d1      	b.n	800bc20 <_scanf_float+0x188>
 800bc7c:	b97d      	cbnz	r5, 800bc9e <_scanf_float+0x206>
 800bc7e:	f1b9 0f00 	cmp.w	r9, #0
 800bc82:	f47f af3c 	bne.w	800bafe <_scanf_float+0x66>
 800bc86:	6822      	ldr	r2, [r4, #0]
 800bc88:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bc8c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bc90:	f47f af39 	bne.w	800bb06 <_scanf_float+0x6e>
 800bc94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bc98:	6022      	str	r2, [r4, #0]
 800bc9a:	2501      	movs	r5, #1
 800bc9c:	e7c0      	b.n	800bc20 <_scanf_float+0x188>
 800bc9e:	2d03      	cmp	r5, #3
 800bca0:	d0e2      	beq.n	800bc68 <_scanf_float+0x1d0>
 800bca2:	2d05      	cmp	r5, #5
 800bca4:	e7de      	b.n	800bc64 <_scanf_float+0x1cc>
 800bca6:	2d02      	cmp	r5, #2
 800bca8:	f47f af26 	bne.w	800baf8 <_scanf_float+0x60>
 800bcac:	2503      	movs	r5, #3
 800bcae:	e7b7      	b.n	800bc20 <_scanf_float+0x188>
 800bcb0:	2d06      	cmp	r5, #6
 800bcb2:	f47f af21 	bne.w	800baf8 <_scanf_float+0x60>
 800bcb6:	2507      	movs	r5, #7
 800bcb8:	e7b2      	b.n	800bc20 <_scanf_float+0x188>
 800bcba:	6822      	ldr	r2, [r4, #0]
 800bcbc:	0591      	lsls	r1, r2, #22
 800bcbe:	f57f af1b 	bpl.w	800baf8 <_scanf_float+0x60>
 800bcc2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bcc6:	6022      	str	r2, [r4, #0]
 800bcc8:	f8cd 9004 	str.w	r9, [sp, #4]
 800bccc:	e7a8      	b.n	800bc20 <_scanf_float+0x188>
 800bcce:	6822      	ldr	r2, [r4, #0]
 800bcd0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bcd4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bcd8:	d006      	beq.n	800bce8 <_scanf_float+0x250>
 800bcda:	0550      	lsls	r0, r2, #21
 800bcdc:	f57f af0c 	bpl.w	800baf8 <_scanf_float+0x60>
 800bce0:	f1b9 0f00 	cmp.w	r9, #0
 800bce4:	f43f af0f 	beq.w	800bb06 <_scanf_float+0x6e>
 800bce8:	0591      	lsls	r1, r2, #22
 800bcea:	bf58      	it	pl
 800bcec:	9901      	ldrpl	r1, [sp, #4]
 800bcee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bcf2:	bf58      	it	pl
 800bcf4:	eba9 0101 	subpl.w	r1, r9, r1
 800bcf8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bcfc:	bf58      	it	pl
 800bcfe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bd02:	6022      	str	r2, [r4, #0]
 800bd04:	f04f 0900 	mov.w	r9, #0
 800bd08:	e78a      	b.n	800bc20 <_scanf_float+0x188>
 800bd0a:	f04f 0a03 	mov.w	sl, #3
 800bd0e:	e787      	b.n	800bc20 <_scanf_float+0x188>
 800bd10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bd14:	4639      	mov	r1, r7
 800bd16:	4640      	mov	r0, r8
 800bd18:	4798      	blx	r3
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	f43f aedf 	beq.w	800bade <_scanf_float+0x46>
 800bd20:	e6ea      	b.n	800baf8 <_scanf_float+0x60>
 800bd22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd2a:	463a      	mov	r2, r7
 800bd2c:	4640      	mov	r0, r8
 800bd2e:	4798      	blx	r3
 800bd30:	6923      	ldr	r3, [r4, #16]
 800bd32:	3b01      	subs	r3, #1
 800bd34:	6123      	str	r3, [r4, #16]
 800bd36:	e6ec      	b.n	800bb12 <_scanf_float+0x7a>
 800bd38:	1e6b      	subs	r3, r5, #1
 800bd3a:	2b06      	cmp	r3, #6
 800bd3c:	d825      	bhi.n	800bd8a <_scanf_float+0x2f2>
 800bd3e:	2d02      	cmp	r5, #2
 800bd40:	d836      	bhi.n	800bdb0 <_scanf_float+0x318>
 800bd42:	455e      	cmp	r6, fp
 800bd44:	f67f aee8 	bls.w	800bb18 <_scanf_float+0x80>
 800bd48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd50:	463a      	mov	r2, r7
 800bd52:	4640      	mov	r0, r8
 800bd54:	4798      	blx	r3
 800bd56:	6923      	ldr	r3, [r4, #16]
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	6123      	str	r3, [r4, #16]
 800bd5c:	e7f1      	b.n	800bd42 <_scanf_float+0x2aa>
 800bd5e:	9802      	ldr	r0, [sp, #8]
 800bd60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd64:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bd68:	9002      	str	r0, [sp, #8]
 800bd6a:	463a      	mov	r2, r7
 800bd6c:	4640      	mov	r0, r8
 800bd6e:	4798      	blx	r3
 800bd70:	6923      	ldr	r3, [r4, #16]
 800bd72:	3b01      	subs	r3, #1
 800bd74:	6123      	str	r3, [r4, #16]
 800bd76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd7a:	fa5f fa8a 	uxtb.w	sl, sl
 800bd7e:	f1ba 0f02 	cmp.w	sl, #2
 800bd82:	d1ec      	bne.n	800bd5e <_scanf_float+0x2c6>
 800bd84:	3d03      	subs	r5, #3
 800bd86:	b2ed      	uxtb	r5, r5
 800bd88:	1b76      	subs	r6, r6, r5
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	05da      	lsls	r2, r3, #23
 800bd8e:	d52f      	bpl.n	800bdf0 <_scanf_float+0x358>
 800bd90:	055b      	lsls	r3, r3, #21
 800bd92:	d510      	bpl.n	800bdb6 <_scanf_float+0x31e>
 800bd94:	455e      	cmp	r6, fp
 800bd96:	f67f aebf 	bls.w	800bb18 <_scanf_float+0x80>
 800bd9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bda2:	463a      	mov	r2, r7
 800bda4:	4640      	mov	r0, r8
 800bda6:	4798      	blx	r3
 800bda8:	6923      	ldr	r3, [r4, #16]
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	6123      	str	r3, [r4, #16]
 800bdae:	e7f1      	b.n	800bd94 <_scanf_float+0x2fc>
 800bdb0:	46aa      	mov	sl, r5
 800bdb2:	9602      	str	r6, [sp, #8]
 800bdb4:	e7df      	b.n	800bd76 <_scanf_float+0x2de>
 800bdb6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bdba:	6923      	ldr	r3, [r4, #16]
 800bdbc:	2965      	cmp	r1, #101	; 0x65
 800bdbe:	f103 33ff 	add.w	r3, r3, #4294967295
 800bdc2:	f106 35ff 	add.w	r5, r6, #4294967295
 800bdc6:	6123      	str	r3, [r4, #16]
 800bdc8:	d00c      	beq.n	800bde4 <_scanf_float+0x34c>
 800bdca:	2945      	cmp	r1, #69	; 0x45
 800bdcc:	d00a      	beq.n	800bde4 <_scanf_float+0x34c>
 800bdce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bdd2:	463a      	mov	r2, r7
 800bdd4:	4640      	mov	r0, r8
 800bdd6:	4798      	blx	r3
 800bdd8:	6923      	ldr	r3, [r4, #16]
 800bdda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bdde:	3b01      	subs	r3, #1
 800bde0:	1eb5      	subs	r5, r6, #2
 800bde2:	6123      	str	r3, [r4, #16]
 800bde4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bde8:	463a      	mov	r2, r7
 800bdea:	4640      	mov	r0, r8
 800bdec:	4798      	blx	r3
 800bdee:	462e      	mov	r6, r5
 800bdf0:	6825      	ldr	r5, [r4, #0]
 800bdf2:	f015 0510 	ands.w	r5, r5, #16
 800bdf6:	d159      	bne.n	800beac <_scanf_float+0x414>
 800bdf8:	7035      	strb	r5, [r6, #0]
 800bdfa:	6823      	ldr	r3, [r4, #0]
 800bdfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800be00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be04:	d11b      	bne.n	800be3e <_scanf_float+0x3a6>
 800be06:	9b01      	ldr	r3, [sp, #4]
 800be08:	454b      	cmp	r3, r9
 800be0a:	eba3 0209 	sub.w	r2, r3, r9
 800be0e:	d123      	bne.n	800be58 <_scanf_float+0x3c0>
 800be10:	2200      	movs	r2, #0
 800be12:	4659      	mov	r1, fp
 800be14:	4640      	mov	r0, r8
 800be16:	f000 fe99 	bl	800cb4c <_strtod_r>
 800be1a:	6822      	ldr	r2, [r4, #0]
 800be1c:	9b03      	ldr	r3, [sp, #12]
 800be1e:	f012 0f02 	tst.w	r2, #2
 800be22:	ec57 6b10 	vmov	r6, r7, d0
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	d021      	beq.n	800be6e <_scanf_float+0x3d6>
 800be2a:	9903      	ldr	r1, [sp, #12]
 800be2c:	1d1a      	adds	r2, r3, #4
 800be2e:	600a      	str	r2, [r1, #0]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	e9c3 6700 	strd	r6, r7, [r3]
 800be36:	68e3      	ldr	r3, [r4, #12]
 800be38:	3301      	adds	r3, #1
 800be3a:	60e3      	str	r3, [r4, #12]
 800be3c:	e66d      	b.n	800bb1a <_scanf_float+0x82>
 800be3e:	9b04      	ldr	r3, [sp, #16]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d0e5      	beq.n	800be10 <_scanf_float+0x378>
 800be44:	9905      	ldr	r1, [sp, #20]
 800be46:	230a      	movs	r3, #10
 800be48:	462a      	mov	r2, r5
 800be4a:	3101      	adds	r1, #1
 800be4c:	4640      	mov	r0, r8
 800be4e:	f000 ff05 	bl	800cc5c <_strtol_r>
 800be52:	9b04      	ldr	r3, [sp, #16]
 800be54:	9e05      	ldr	r6, [sp, #20]
 800be56:	1ac2      	subs	r2, r0, r3
 800be58:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800be5c:	429e      	cmp	r6, r3
 800be5e:	bf28      	it	cs
 800be60:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800be64:	4912      	ldr	r1, [pc, #72]	; (800beb0 <_scanf_float+0x418>)
 800be66:	4630      	mov	r0, r6
 800be68:	f000 f82c 	bl	800bec4 <siprintf>
 800be6c:	e7d0      	b.n	800be10 <_scanf_float+0x378>
 800be6e:	9903      	ldr	r1, [sp, #12]
 800be70:	f012 0f04 	tst.w	r2, #4
 800be74:	f103 0204 	add.w	r2, r3, #4
 800be78:	600a      	str	r2, [r1, #0]
 800be7a:	d1d9      	bne.n	800be30 <_scanf_float+0x398>
 800be7c:	f8d3 8000 	ldr.w	r8, [r3]
 800be80:	ee10 2a10 	vmov	r2, s0
 800be84:	ee10 0a10 	vmov	r0, s0
 800be88:	463b      	mov	r3, r7
 800be8a:	4639      	mov	r1, r7
 800be8c:	f7f4 fe56 	bl	8000b3c <__aeabi_dcmpun>
 800be90:	b128      	cbz	r0, 800be9e <_scanf_float+0x406>
 800be92:	4808      	ldr	r0, [pc, #32]	; (800beb4 <_scanf_float+0x41c>)
 800be94:	f000 f810 	bl	800beb8 <nanf>
 800be98:	ed88 0a00 	vstr	s0, [r8]
 800be9c:	e7cb      	b.n	800be36 <_scanf_float+0x39e>
 800be9e:	4630      	mov	r0, r6
 800bea0:	4639      	mov	r1, r7
 800bea2:	f7f4 fea9 	bl	8000bf8 <__aeabi_d2f>
 800bea6:	f8c8 0000 	str.w	r0, [r8]
 800beaa:	e7c4      	b.n	800be36 <_scanf_float+0x39e>
 800beac:	2500      	movs	r5, #0
 800beae:	e634      	b.n	800bb1a <_scanf_float+0x82>
 800beb0:	0801171c 	.word	0x0801171c
 800beb4:	08011b28 	.word	0x08011b28

0800beb8 <nanf>:
 800beb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bec0 <nanf+0x8>
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	7fc00000 	.word	0x7fc00000

0800bec4 <siprintf>:
 800bec4:	b40e      	push	{r1, r2, r3}
 800bec6:	b500      	push	{lr}
 800bec8:	b09c      	sub	sp, #112	; 0x70
 800beca:	ab1d      	add	r3, sp, #116	; 0x74
 800becc:	9002      	str	r0, [sp, #8]
 800bece:	9006      	str	r0, [sp, #24]
 800bed0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bed4:	4809      	ldr	r0, [pc, #36]	; (800befc <siprintf+0x38>)
 800bed6:	9107      	str	r1, [sp, #28]
 800bed8:	9104      	str	r1, [sp, #16]
 800beda:	4909      	ldr	r1, [pc, #36]	; (800bf00 <siprintf+0x3c>)
 800bedc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bee0:	9105      	str	r1, [sp, #20]
 800bee2:	6800      	ldr	r0, [r0, #0]
 800bee4:	9301      	str	r3, [sp, #4]
 800bee6:	a902      	add	r1, sp, #8
 800bee8:	f002 fed6 	bl	800ec98 <_svfiprintf_r>
 800beec:	9b02      	ldr	r3, [sp, #8]
 800beee:	2200      	movs	r2, #0
 800bef0:	701a      	strb	r2, [r3, #0]
 800bef2:	b01c      	add	sp, #112	; 0x70
 800bef4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bef8:	b003      	add	sp, #12
 800befa:	4770      	bx	lr
 800befc:	20000234 	.word	0x20000234
 800bf00:	ffff0208 	.word	0xffff0208

0800bf04 <sulp>:
 800bf04:	b570      	push	{r4, r5, r6, lr}
 800bf06:	4604      	mov	r4, r0
 800bf08:	460d      	mov	r5, r1
 800bf0a:	ec45 4b10 	vmov	d0, r4, r5
 800bf0e:	4616      	mov	r6, r2
 800bf10:	f002 fc20 	bl	800e754 <__ulp>
 800bf14:	ec51 0b10 	vmov	r0, r1, d0
 800bf18:	b17e      	cbz	r6, 800bf3a <sulp+0x36>
 800bf1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bf1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	dd09      	ble.n	800bf3a <sulp+0x36>
 800bf26:	051b      	lsls	r3, r3, #20
 800bf28:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bf2c:	2400      	movs	r4, #0
 800bf2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bf32:	4622      	mov	r2, r4
 800bf34:	462b      	mov	r3, r5
 800bf36:	f7f4 fb67 	bl	8000608 <__aeabi_dmul>
 800bf3a:	bd70      	pop	{r4, r5, r6, pc}
 800bf3c:	0000      	movs	r0, r0
	...

0800bf40 <_strtod_l>:
 800bf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf44:	ed2d 8b02 	vpush	{d8}
 800bf48:	b09d      	sub	sp, #116	; 0x74
 800bf4a:	461f      	mov	r7, r3
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	9318      	str	r3, [sp, #96]	; 0x60
 800bf50:	4ba2      	ldr	r3, [pc, #648]	; (800c1dc <_strtod_l+0x29c>)
 800bf52:	9213      	str	r2, [sp, #76]	; 0x4c
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	9305      	str	r3, [sp, #20]
 800bf58:	4604      	mov	r4, r0
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	4688      	mov	r8, r1
 800bf5e:	f7f4 f93f 	bl	80001e0 <strlen>
 800bf62:	f04f 0a00 	mov.w	sl, #0
 800bf66:	4605      	mov	r5, r0
 800bf68:	f04f 0b00 	mov.w	fp, #0
 800bf6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bf70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf72:	781a      	ldrb	r2, [r3, #0]
 800bf74:	2a2b      	cmp	r2, #43	; 0x2b
 800bf76:	d04e      	beq.n	800c016 <_strtod_l+0xd6>
 800bf78:	d83b      	bhi.n	800bff2 <_strtod_l+0xb2>
 800bf7a:	2a0d      	cmp	r2, #13
 800bf7c:	d834      	bhi.n	800bfe8 <_strtod_l+0xa8>
 800bf7e:	2a08      	cmp	r2, #8
 800bf80:	d834      	bhi.n	800bfec <_strtod_l+0xac>
 800bf82:	2a00      	cmp	r2, #0
 800bf84:	d03e      	beq.n	800c004 <_strtod_l+0xc4>
 800bf86:	2300      	movs	r3, #0
 800bf88:	930a      	str	r3, [sp, #40]	; 0x28
 800bf8a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bf8c:	7833      	ldrb	r3, [r6, #0]
 800bf8e:	2b30      	cmp	r3, #48	; 0x30
 800bf90:	f040 80b0 	bne.w	800c0f4 <_strtod_l+0x1b4>
 800bf94:	7873      	ldrb	r3, [r6, #1]
 800bf96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf9a:	2b58      	cmp	r3, #88	; 0x58
 800bf9c:	d168      	bne.n	800c070 <_strtod_l+0x130>
 800bf9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfa0:	9301      	str	r3, [sp, #4]
 800bfa2:	ab18      	add	r3, sp, #96	; 0x60
 800bfa4:	9702      	str	r7, [sp, #8]
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	4a8d      	ldr	r2, [pc, #564]	; (800c1e0 <_strtod_l+0x2a0>)
 800bfaa:	ab19      	add	r3, sp, #100	; 0x64
 800bfac:	a917      	add	r1, sp, #92	; 0x5c
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f001 fd38 	bl	800da24 <__gethex>
 800bfb4:	f010 0707 	ands.w	r7, r0, #7
 800bfb8:	4605      	mov	r5, r0
 800bfba:	d005      	beq.n	800bfc8 <_strtod_l+0x88>
 800bfbc:	2f06      	cmp	r7, #6
 800bfbe:	d12c      	bne.n	800c01a <_strtod_l+0xda>
 800bfc0:	3601      	adds	r6, #1
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	9617      	str	r6, [sp, #92]	; 0x5c
 800bfc6:	930a      	str	r3, [sp, #40]	; 0x28
 800bfc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f040 8590 	bne.w	800caf0 <_strtod_l+0xbb0>
 800bfd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfd2:	b1eb      	cbz	r3, 800c010 <_strtod_l+0xd0>
 800bfd4:	4652      	mov	r2, sl
 800bfd6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bfda:	ec43 2b10 	vmov	d0, r2, r3
 800bfde:	b01d      	add	sp, #116	; 0x74
 800bfe0:	ecbd 8b02 	vpop	{d8}
 800bfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe8:	2a20      	cmp	r2, #32
 800bfea:	d1cc      	bne.n	800bf86 <_strtod_l+0x46>
 800bfec:	3301      	adds	r3, #1
 800bfee:	9317      	str	r3, [sp, #92]	; 0x5c
 800bff0:	e7be      	b.n	800bf70 <_strtod_l+0x30>
 800bff2:	2a2d      	cmp	r2, #45	; 0x2d
 800bff4:	d1c7      	bne.n	800bf86 <_strtod_l+0x46>
 800bff6:	2201      	movs	r2, #1
 800bff8:	920a      	str	r2, [sp, #40]	; 0x28
 800bffa:	1c5a      	adds	r2, r3, #1
 800bffc:	9217      	str	r2, [sp, #92]	; 0x5c
 800bffe:	785b      	ldrb	r3, [r3, #1]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1c2      	bne.n	800bf8a <_strtod_l+0x4a>
 800c004:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c006:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f040 856e 	bne.w	800caec <_strtod_l+0xbac>
 800c010:	4652      	mov	r2, sl
 800c012:	465b      	mov	r3, fp
 800c014:	e7e1      	b.n	800bfda <_strtod_l+0x9a>
 800c016:	2200      	movs	r2, #0
 800c018:	e7ee      	b.n	800bff8 <_strtod_l+0xb8>
 800c01a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c01c:	b13a      	cbz	r2, 800c02e <_strtod_l+0xee>
 800c01e:	2135      	movs	r1, #53	; 0x35
 800c020:	a81a      	add	r0, sp, #104	; 0x68
 800c022:	f002 fca2 	bl	800e96a <__copybits>
 800c026:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c028:	4620      	mov	r0, r4
 800c02a:	f002 f861 	bl	800e0f0 <_Bfree>
 800c02e:	3f01      	subs	r7, #1
 800c030:	2f04      	cmp	r7, #4
 800c032:	d806      	bhi.n	800c042 <_strtod_l+0x102>
 800c034:	e8df f007 	tbb	[pc, r7]
 800c038:	1714030a 	.word	0x1714030a
 800c03c:	0a          	.byte	0x0a
 800c03d:	00          	.byte	0x00
 800c03e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c042:	0728      	lsls	r0, r5, #28
 800c044:	d5c0      	bpl.n	800bfc8 <_strtod_l+0x88>
 800c046:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c04a:	e7bd      	b.n	800bfc8 <_strtod_l+0x88>
 800c04c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c050:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c052:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c056:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c05a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c05e:	e7f0      	b.n	800c042 <_strtod_l+0x102>
 800c060:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c1e4 <_strtod_l+0x2a4>
 800c064:	e7ed      	b.n	800c042 <_strtod_l+0x102>
 800c066:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c06a:	f04f 3aff 	mov.w	sl, #4294967295
 800c06e:	e7e8      	b.n	800c042 <_strtod_l+0x102>
 800c070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c072:	1c5a      	adds	r2, r3, #1
 800c074:	9217      	str	r2, [sp, #92]	; 0x5c
 800c076:	785b      	ldrb	r3, [r3, #1]
 800c078:	2b30      	cmp	r3, #48	; 0x30
 800c07a:	d0f9      	beq.n	800c070 <_strtod_l+0x130>
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d0a3      	beq.n	800bfc8 <_strtod_l+0x88>
 800c080:	2301      	movs	r3, #1
 800c082:	f04f 0900 	mov.w	r9, #0
 800c086:	9304      	str	r3, [sp, #16]
 800c088:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c08a:	9308      	str	r3, [sp, #32]
 800c08c:	f8cd 901c 	str.w	r9, [sp, #28]
 800c090:	464f      	mov	r7, r9
 800c092:	220a      	movs	r2, #10
 800c094:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c096:	7806      	ldrb	r6, [r0, #0]
 800c098:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c09c:	b2d9      	uxtb	r1, r3
 800c09e:	2909      	cmp	r1, #9
 800c0a0:	d92a      	bls.n	800c0f8 <_strtod_l+0x1b8>
 800c0a2:	9905      	ldr	r1, [sp, #20]
 800c0a4:	462a      	mov	r2, r5
 800c0a6:	f002 ff0f 	bl	800eec8 <strncmp>
 800c0aa:	b398      	cbz	r0, 800c114 <_strtod_l+0x1d4>
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	4632      	mov	r2, r6
 800c0b0:	463d      	mov	r5, r7
 800c0b2:	9005      	str	r0, [sp, #20]
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2a65      	cmp	r2, #101	; 0x65
 800c0b8:	d001      	beq.n	800c0be <_strtod_l+0x17e>
 800c0ba:	2a45      	cmp	r2, #69	; 0x45
 800c0bc:	d118      	bne.n	800c0f0 <_strtod_l+0x1b0>
 800c0be:	b91d      	cbnz	r5, 800c0c8 <_strtod_l+0x188>
 800c0c0:	9a04      	ldr	r2, [sp, #16]
 800c0c2:	4302      	orrs	r2, r0
 800c0c4:	d09e      	beq.n	800c004 <_strtod_l+0xc4>
 800c0c6:	2500      	movs	r5, #0
 800c0c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c0cc:	f108 0201 	add.w	r2, r8, #1
 800c0d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c0d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c0d6:	2a2b      	cmp	r2, #43	; 0x2b
 800c0d8:	d075      	beq.n	800c1c6 <_strtod_l+0x286>
 800c0da:	2a2d      	cmp	r2, #45	; 0x2d
 800c0dc:	d07b      	beq.n	800c1d6 <_strtod_l+0x296>
 800c0de:	f04f 0c00 	mov.w	ip, #0
 800c0e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c0e6:	2909      	cmp	r1, #9
 800c0e8:	f240 8082 	bls.w	800c1f0 <_strtod_l+0x2b0>
 800c0ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c0f0:	2600      	movs	r6, #0
 800c0f2:	e09d      	b.n	800c230 <_strtod_l+0x2f0>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	e7c4      	b.n	800c082 <_strtod_l+0x142>
 800c0f8:	2f08      	cmp	r7, #8
 800c0fa:	bfd8      	it	le
 800c0fc:	9907      	ldrle	r1, [sp, #28]
 800c0fe:	f100 0001 	add.w	r0, r0, #1
 800c102:	bfda      	itte	le
 800c104:	fb02 3301 	mlale	r3, r2, r1, r3
 800c108:	9307      	strle	r3, [sp, #28]
 800c10a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c10e:	3701      	adds	r7, #1
 800c110:	9017      	str	r0, [sp, #92]	; 0x5c
 800c112:	e7bf      	b.n	800c094 <_strtod_l+0x154>
 800c114:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c116:	195a      	adds	r2, r3, r5
 800c118:	9217      	str	r2, [sp, #92]	; 0x5c
 800c11a:	5d5a      	ldrb	r2, [r3, r5]
 800c11c:	2f00      	cmp	r7, #0
 800c11e:	d037      	beq.n	800c190 <_strtod_l+0x250>
 800c120:	9005      	str	r0, [sp, #20]
 800c122:	463d      	mov	r5, r7
 800c124:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c128:	2b09      	cmp	r3, #9
 800c12a:	d912      	bls.n	800c152 <_strtod_l+0x212>
 800c12c:	2301      	movs	r3, #1
 800c12e:	e7c2      	b.n	800c0b6 <_strtod_l+0x176>
 800c130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c132:	1c5a      	adds	r2, r3, #1
 800c134:	9217      	str	r2, [sp, #92]	; 0x5c
 800c136:	785a      	ldrb	r2, [r3, #1]
 800c138:	3001      	adds	r0, #1
 800c13a:	2a30      	cmp	r2, #48	; 0x30
 800c13c:	d0f8      	beq.n	800c130 <_strtod_l+0x1f0>
 800c13e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c142:	2b08      	cmp	r3, #8
 800c144:	f200 84d9 	bhi.w	800cafa <_strtod_l+0xbba>
 800c148:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c14a:	9005      	str	r0, [sp, #20]
 800c14c:	2000      	movs	r0, #0
 800c14e:	9308      	str	r3, [sp, #32]
 800c150:	4605      	mov	r5, r0
 800c152:	3a30      	subs	r2, #48	; 0x30
 800c154:	f100 0301 	add.w	r3, r0, #1
 800c158:	d014      	beq.n	800c184 <_strtod_l+0x244>
 800c15a:	9905      	ldr	r1, [sp, #20]
 800c15c:	4419      	add	r1, r3
 800c15e:	9105      	str	r1, [sp, #20]
 800c160:	462b      	mov	r3, r5
 800c162:	eb00 0e05 	add.w	lr, r0, r5
 800c166:	210a      	movs	r1, #10
 800c168:	4573      	cmp	r3, lr
 800c16a:	d113      	bne.n	800c194 <_strtod_l+0x254>
 800c16c:	182b      	adds	r3, r5, r0
 800c16e:	2b08      	cmp	r3, #8
 800c170:	f105 0501 	add.w	r5, r5, #1
 800c174:	4405      	add	r5, r0
 800c176:	dc1c      	bgt.n	800c1b2 <_strtod_l+0x272>
 800c178:	9907      	ldr	r1, [sp, #28]
 800c17a:	230a      	movs	r3, #10
 800c17c:	fb03 2301 	mla	r3, r3, r1, r2
 800c180:	9307      	str	r3, [sp, #28]
 800c182:	2300      	movs	r3, #0
 800c184:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c186:	1c51      	adds	r1, r2, #1
 800c188:	9117      	str	r1, [sp, #92]	; 0x5c
 800c18a:	7852      	ldrb	r2, [r2, #1]
 800c18c:	4618      	mov	r0, r3
 800c18e:	e7c9      	b.n	800c124 <_strtod_l+0x1e4>
 800c190:	4638      	mov	r0, r7
 800c192:	e7d2      	b.n	800c13a <_strtod_l+0x1fa>
 800c194:	2b08      	cmp	r3, #8
 800c196:	dc04      	bgt.n	800c1a2 <_strtod_l+0x262>
 800c198:	9e07      	ldr	r6, [sp, #28]
 800c19a:	434e      	muls	r6, r1
 800c19c:	9607      	str	r6, [sp, #28]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	e7e2      	b.n	800c168 <_strtod_l+0x228>
 800c1a2:	f103 0c01 	add.w	ip, r3, #1
 800c1a6:	f1bc 0f10 	cmp.w	ip, #16
 800c1aa:	bfd8      	it	le
 800c1ac:	fb01 f909 	mulle.w	r9, r1, r9
 800c1b0:	e7f5      	b.n	800c19e <_strtod_l+0x25e>
 800c1b2:	2d10      	cmp	r5, #16
 800c1b4:	bfdc      	itt	le
 800c1b6:	230a      	movle	r3, #10
 800c1b8:	fb03 2909 	mlale	r9, r3, r9, r2
 800c1bc:	e7e1      	b.n	800c182 <_strtod_l+0x242>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	9305      	str	r3, [sp, #20]
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e77c      	b.n	800c0c0 <_strtod_l+0x180>
 800c1c6:	f04f 0c00 	mov.w	ip, #0
 800c1ca:	f108 0202 	add.w	r2, r8, #2
 800c1ce:	9217      	str	r2, [sp, #92]	; 0x5c
 800c1d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c1d4:	e785      	b.n	800c0e2 <_strtod_l+0x1a2>
 800c1d6:	f04f 0c01 	mov.w	ip, #1
 800c1da:	e7f6      	b.n	800c1ca <_strtod_l+0x28a>
 800c1dc:	08011970 	.word	0x08011970
 800c1e0:	08011724 	.word	0x08011724
 800c1e4:	7ff00000 	.word	0x7ff00000
 800c1e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c1ea:	1c51      	adds	r1, r2, #1
 800c1ec:	9117      	str	r1, [sp, #92]	; 0x5c
 800c1ee:	7852      	ldrb	r2, [r2, #1]
 800c1f0:	2a30      	cmp	r2, #48	; 0x30
 800c1f2:	d0f9      	beq.n	800c1e8 <_strtod_l+0x2a8>
 800c1f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c1f8:	2908      	cmp	r1, #8
 800c1fa:	f63f af79 	bhi.w	800c0f0 <_strtod_l+0x1b0>
 800c1fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c202:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c204:	9206      	str	r2, [sp, #24]
 800c206:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c208:	1c51      	adds	r1, r2, #1
 800c20a:	9117      	str	r1, [sp, #92]	; 0x5c
 800c20c:	7852      	ldrb	r2, [r2, #1]
 800c20e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c212:	2e09      	cmp	r6, #9
 800c214:	d937      	bls.n	800c286 <_strtod_l+0x346>
 800c216:	9e06      	ldr	r6, [sp, #24]
 800c218:	1b89      	subs	r1, r1, r6
 800c21a:	2908      	cmp	r1, #8
 800c21c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c220:	dc02      	bgt.n	800c228 <_strtod_l+0x2e8>
 800c222:	4576      	cmp	r6, lr
 800c224:	bfa8      	it	ge
 800c226:	4676      	movge	r6, lr
 800c228:	f1bc 0f00 	cmp.w	ip, #0
 800c22c:	d000      	beq.n	800c230 <_strtod_l+0x2f0>
 800c22e:	4276      	negs	r6, r6
 800c230:	2d00      	cmp	r5, #0
 800c232:	d14d      	bne.n	800c2d0 <_strtod_l+0x390>
 800c234:	9904      	ldr	r1, [sp, #16]
 800c236:	4301      	orrs	r1, r0
 800c238:	f47f aec6 	bne.w	800bfc8 <_strtod_l+0x88>
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f47f aee1 	bne.w	800c004 <_strtod_l+0xc4>
 800c242:	2a69      	cmp	r2, #105	; 0x69
 800c244:	d027      	beq.n	800c296 <_strtod_l+0x356>
 800c246:	dc24      	bgt.n	800c292 <_strtod_l+0x352>
 800c248:	2a49      	cmp	r2, #73	; 0x49
 800c24a:	d024      	beq.n	800c296 <_strtod_l+0x356>
 800c24c:	2a4e      	cmp	r2, #78	; 0x4e
 800c24e:	f47f aed9 	bne.w	800c004 <_strtod_l+0xc4>
 800c252:	499f      	ldr	r1, [pc, #636]	; (800c4d0 <_strtod_l+0x590>)
 800c254:	a817      	add	r0, sp, #92	; 0x5c
 800c256:	f001 fe3d 	bl	800ded4 <__match>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	f43f aed2 	beq.w	800c004 <_strtod_l+0xc4>
 800c260:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	2b28      	cmp	r3, #40	; 0x28
 800c266:	d12d      	bne.n	800c2c4 <_strtod_l+0x384>
 800c268:	499a      	ldr	r1, [pc, #616]	; (800c4d4 <_strtod_l+0x594>)
 800c26a:	aa1a      	add	r2, sp, #104	; 0x68
 800c26c:	a817      	add	r0, sp, #92	; 0x5c
 800c26e:	f001 fe45 	bl	800defc <__hexnan>
 800c272:	2805      	cmp	r0, #5
 800c274:	d126      	bne.n	800c2c4 <_strtod_l+0x384>
 800c276:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c278:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c27c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c280:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c284:	e6a0      	b.n	800bfc8 <_strtod_l+0x88>
 800c286:	210a      	movs	r1, #10
 800c288:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c28c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c290:	e7b9      	b.n	800c206 <_strtod_l+0x2c6>
 800c292:	2a6e      	cmp	r2, #110	; 0x6e
 800c294:	e7db      	b.n	800c24e <_strtod_l+0x30e>
 800c296:	4990      	ldr	r1, [pc, #576]	; (800c4d8 <_strtod_l+0x598>)
 800c298:	a817      	add	r0, sp, #92	; 0x5c
 800c29a:	f001 fe1b 	bl	800ded4 <__match>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	f43f aeb0 	beq.w	800c004 <_strtod_l+0xc4>
 800c2a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2a6:	498d      	ldr	r1, [pc, #564]	; (800c4dc <_strtod_l+0x59c>)
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	a817      	add	r0, sp, #92	; 0x5c
 800c2ac:	9317      	str	r3, [sp, #92]	; 0x5c
 800c2ae:	f001 fe11 	bl	800ded4 <__match>
 800c2b2:	b910      	cbnz	r0, 800c2ba <_strtod_l+0x37a>
 800c2b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c2ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c4ec <_strtod_l+0x5ac>
 800c2be:	f04f 0a00 	mov.w	sl, #0
 800c2c2:	e681      	b.n	800bfc8 <_strtod_l+0x88>
 800c2c4:	4886      	ldr	r0, [pc, #536]	; (800c4e0 <_strtod_l+0x5a0>)
 800c2c6:	f002 fde7 	bl	800ee98 <nan>
 800c2ca:	ec5b ab10 	vmov	sl, fp, d0
 800c2ce:	e67b      	b.n	800bfc8 <_strtod_l+0x88>
 800c2d0:	9b05      	ldr	r3, [sp, #20]
 800c2d2:	9807      	ldr	r0, [sp, #28]
 800c2d4:	1af3      	subs	r3, r6, r3
 800c2d6:	2f00      	cmp	r7, #0
 800c2d8:	bf08      	it	eq
 800c2da:	462f      	moveq	r7, r5
 800c2dc:	2d10      	cmp	r5, #16
 800c2de:	9306      	str	r3, [sp, #24]
 800c2e0:	46a8      	mov	r8, r5
 800c2e2:	bfa8      	it	ge
 800c2e4:	f04f 0810 	movge.w	r8, #16
 800c2e8:	f7f4 f914 	bl	8000514 <__aeabi_ui2d>
 800c2ec:	2d09      	cmp	r5, #9
 800c2ee:	4682      	mov	sl, r0
 800c2f0:	468b      	mov	fp, r1
 800c2f2:	dd13      	ble.n	800c31c <_strtod_l+0x3dc>
 800c2f4:	4b7b      	ldr	r3, [pc, #492]	; (800c4e4 <_strtod_l+0x5a4>)
 800c2f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c2fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c2fe:	f7f4 f983 	bl	8000608 <__aeabi_dmul>
 800c302:	4682      	mov	sl, r0
 800c304:	4648      	mov	r0, r9
 800c306:	468b      	mov	fp, r1
 800c308:	f7f4 f904 	bl	8000514 <__aeabi_ui2d>
 800c30c:	4602      	mov	r2, r0
 800c30e:	460b      	mov	r3, r1
 800c310:	4650      	mov	r0, sl
 800c312:	4659      	mov	r1, fp
 800c314:	f7f3 ffc2 	bl	800029c <__adddf3>
 800c318:	4682      	mov	sl, r0
 800c31a:	468b      	mov	fp, r1
 800c31c:	2d0f      	cmp	r5, #15
 800c31e:	dc38      	bgt.n	800c392 <_strtod_l+0x452>
 800c320:	9b06      	ldr	r3, [sp, #24]
 800c322:	2b00      	cmp	r3, #0
 800c324:	f43f ae50 	beq.w	800bfc8 <_strtod_l+0x88>
 800c328:	dd24      	ble.n	800c374 <_strtod_l+0x434>
 800c32a:	2b16      	cmp	r3, #22
 800c32c:	dc0b      	bgt.n	800c346 <_strtod_l+0x406>
 800c32e:	496d      	ldr	r1, [pc, #436]	; (800c4e4 <_strtod_l+0x5a4>)
 800c330:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c334:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c338:	4652      	mov	r2, sl
 800c33a:	465b      	mov	r3, fp
 800c33c:	f7f4 f964 	bl	8000608 <__aeabi_dmul>
 800c340:	4682      	mov	sl, r0
 800c342:	468b      	mov	fp, r1
 800c344:	e640      	b.n	800bfc8 <_strtod_l+0x88>
 800c346:	9a06      	ldr	r2, [sp, #24]
 800c348:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c34c:	4293      	cmp	r3, r2
 800c34e:	db20      	blt.n	800c392 <_strtod_l+0x452>
 800c350:	4c64      	ldr	r4, [pc, #400]	; (800c4e4 <_strtod_l+0x5a4>)
 800c352:	f1c5 050f 	rsb	r5, r5, #15
 800c356:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c35a:	4652      	mov	r2, sl
 800c35c:	465b      	mov	r3, fp
 800c35e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c362:	f7f4 f951 	bl	8000608 <__aeabi_dmul>
 800c366:	9b06      	ldr	r3, [sp, #24]
 800c368:	1b5d      	subs	r5, r3, r5
 800c36a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c36e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c372:	e7e3      	b.n	800c33c <_strtod_l+0x3fc>
 800c374:	9b06      	ldr	r3, [sp, #24]
 800c376:	3316      	adds	r3, #22
 800c378:	db0b      	blt.n	800c392 <_strtod_l+0x452>
 800c37a:	9b05      	ldr	r3, [sp, #20]
 800c37c:	1b9e      	subs	r6, r3, r6
 800c37e:	4b59      	ldr	r3, [pc, #356]	; (800c4e4 <_strtod_l+0x5a4>)
 800c380:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c384:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c388:	4650      	mov	r0, sl
 800c38a:	4659      	mov	r1, fp
 800c38c:	f7f4 fa66 	bl	800085c <__aeabi_ddiv>
 800c390:	e7d6      	b.n	800c340 <_strtod_l+0x400>
 800c392:	9b06      	ldr	r3, [sp, #24]
 800c394:	eba5 0808 	sub.w	r8, r5, r8
 800c398:	4498      	add	r8, r3
 800c39a:	f1b8 0f00 	cmp.w	r8, #0
 800c39e:	dd74      	ble.n	800c48a <_strtod_l+0x54a>
 800c3a0:	f018 030f 	ands.w	r3, r8, #15
 800c3a4:	d00a      	beq.n	800c3bc <_strtod_l+0x47c>
 800c3a6:	494f      	ldr	r1, [pc, #316]	; (800c4e4 <_strtod_l+0x5a4>)
 800c3a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c3ac:	4652      	mov	r2, sl
 800c3ae:	465b      	mov	r3, fp
 800c3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3b4:	f7f4 f928 	bl	8000608 <__aeabi_dmul>
 800c3b8:	4682      	mov	sl, r0
 800c3ba:	468b      	mov	fp, r1
 800c3bc:	f038 080f 	bics.w	r8, r8, #15
 800c3c0:	d04f      	beq.n	800c462 <_strtod_l+0x522>
 800c3c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c3c6:	dd22      	ble.n	800c40e <_strtod_l+0x4ce>
 800c3c8:	2500      	movs	r5, #0
 800c3ca:	462e      	mov	r6, r5
 800c3cc:	9507      	str	r5, [sp, #28]
 800c3ce:	9505      	str	r5, [sp, #20]
 800c3d0:	2322      	movs	r3, #34	; 0x22
 800c3d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c4ec <_strtod_l+0x5ac>
 800c3d6:	6023      	str	r3, [r4, #0]
 800c3d8:	f04f 0a00 	mov.w	sl, #0
 800c3dc:	9b07      	ldr	r3, [sp, #28]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f43f adf2 	beq.w	800bfc8 <_strtod_l+0x88>
 800c3e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f001 fe82 	bl	800e0f0 <_Bfree>
 800c3ec:	9905      	ldr	r1, [sp, #20]
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f001 fe7e 	bl	800e0f0 <_Bfree>
 800c3f4:	4631      	mov	r1, r6
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f001 fe7a 	bl	800e0f0 <_Bfree>
 800c3fc:	9907      	ldr	r1, [sp, #28]
 800c3fe:	4620      	mov	r0, r4
 800c400:	f001 fe76 	bl	800e0f0 <_Bfree>
 800c404:	4629      	mov	r1, r5
 800c406:	4620      	mov	r0, r4
 800c408:	f001 fe72 	bl	800e0f0 <_Bfree>
 800c40c:	e5dc      	b.n	800bfc8 <_strtod_l+0x88>
 800c40e:	4b36      	ldr	r3, [pc, #216]	; (800c4e8 <_strtod_l+0x5a8>)
 800c410:	9304      	str	r3, [sp, #16]
 800c412:	2300      	movs	r3, #0
 800c414:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c418:	4650      	mov	r0, sl
 800c41a:	4659      	mov	r1, fp
 800c41c:	4699      	mov	r9, r3
 800c41e:	f1b8 0f01 	cmp.w	r8, #1
 800c422:	dc21      	bgt.n	800c468 <_strtod_l+0x528>
 800c424:	b10b      	cbz	r3, 800c42a <_strtod_l+0x4ea>
 800c426:	4682      	mov	sl, r0
 800c428:	468b      	mov	fp, r1
 800c42a:	4b2f      	ldr	r3, [pc, #188]	; (800c4e8 <_strtod_l+0x5a8>)
 800c42c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c430:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c434:	4652      	mov	r2, sl
 800c436:	465b      	mov	r3, fp
 800c438:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c43c:	f7f4 f8e4 	bl	8000608 <__aeabi_dmul>
 800c440:	4b2a      	ldr	r3, [pc, #168]	; (800c4ec <_strtod_l+0x5ac>)
 800c442:	460a      	mov	r2, r1
 800c444:	400b      	ands	r3, r1
 800c446:	492a      	ldr	r1, [pc, #168]	; (800c4f0 <_strtod_l+0x5b0>)
 800c448:	428b      	cmp	r3, r1
 800c44a:	4682      	mov	sl, r0
 800c44c:	d8bc      	bhi.n	800c3c8 <_strtod_l+0x488>
 800c44e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c452:	428b      	cmp	r3, r1
 800c454:	bf86      	itte	hi
 800c456:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c4f4 <_strtod_l+0x5b4>
 800c45a:	f04f 3aff 	movhi.w	sl, #4294967295
 800c45e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c462:	2300      	movs	r3, #0
 800c464:	9304      	str	r3, [sp, #16]
 800c466:	e084      	b.n	800c572 <_strtod_l+0x632>
 800c468:	f018 0f01 	tst.w	r8, #1
 800c46c:	d005      	beq.n	800c47a <_strtod_l+0x53a>
 800c46e:	9b04      	ldr	r3, [sp, #16]
 800c470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c474:	f7f4 f8c8 	bl	8000608 <__aeabi_dmul>
 800c478:	2301      	movs	r3, #1
 800c47a:	9a04      	ldr	r2, [sp, #16]
 800c47c:	3208      	adds	r2, #8
 800c47e:	f109 0901 	add.w	r9, r9, #1
 800c482:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c486:	9204      	str	r2, [sp, #16]
 800c488:	e7c9      	b.n	800c41e <_strtod_l+0x4de>
 800c48a:	d0ea      	beq.n	800c462 <_strtod_l+0x522>
 800c48c:	f1c8 0800 	rsb	r8, r8, #0
 800c490:	f018 020f 	ands.w	r2, r8, #15
 800c494:	d00a      	beq.n	800c4ac <_strtod_l+0x56c>
 800c496:	4b13      	ldr	r3, [pc, #76]	; (800c4e4 <_strtod_l+0x5a4>)
 800c498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c49c:	4650      	mov	r0, sl
 800c49e:	4659      	mov	r1, fp
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	f7f4 f9da 	bl	800085c <__aeabi_ddiv>
 800c4a8:	4682      	mov	sl, r0
 800c4aa:	468b      	mov	fp, r1
 800c4ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c4b0:	d0d7      	beq.n	800c462 <_strtod_l+0x522>
 800c4b2:	f1b8 0f1f 	cmp.w	r8, #31
 800c4b6:	dd1f      	ble.n	800c4f8 <_strtod_l+0x5b8>
 800c4b8:	2500      	movs	r5, #0
 800c4ba:	462e      	mov	r6, r5
 800c4bc:	9507      	str	r5, [sp, #28]
 800c4be:	9505      	str	r5, [sp, #20]
 800c4c0:	2322      	movs	r3, #34	; 0x22
 800c4c2:	f04f 0a00 	mov.w	sl, #0
 800c4c6:	f04f 0b00 	mov.w	fp, #0
 800c4ca:	6023      	str	r3, [r4, #0]
 800c4cc:	e786      	b.n	800c3dc <_strtod_l+0x49c>
 800c4ce:	bf00      	nop
 800c4d0:	080116f5 	.word	0x080116f5
 800c4d4:	08011738 	.word	0x08011738
 800c4d8:	080116ed 	.word	0x080116ed
 800c4dc:	0801187c 	.word	0x0801187c
 800c4e0:	08011b28 	.word	0x08011b28
 800c4e4:	08011a08 	.word	0x08011a08
 800c4e8:	080119e0 	.word	0x080119e0
 800c4ec:	7ff00000 	.word	0x7ff00000
 800c4f0:	7ca00000 	.word	0x7ca00000
 800c4f4:	7fefffff 	.word	0x7fefffff
 800c4f8:	f018 0310 	ands.w	r3, r8, #16
 800c4fc:	bf18      	it	ne
 800c4fe:	236a      	movne	r3, #106	; 0x6a
 800c500:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c8b0 <_strtod_l+0x970>
 800c504:	9304      	str	r3, [sp, #16]
 800c506:	4650      	mov	r0, sl
 800c508:	4659      	mov	r1, fp
 800c50a:	2300      	movs	r3, #0
 800c50c:	f018 0f01 	tst.w	r8, #1
 800c510:	d004      	beq.n	800c51c <_strtod_l+0x5dc>
 800c512:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c516:	f7f4 f877 	bl	8000608 <__aeabi_dmul>
 800c51a:	2301      	movs	r3, #1
 800c51c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c520:	f109 0908 	add.w	r9, r9, #8
 800c524:	d1f2      	bne.n	800c50c <_strtod_l+0x5cc>
 800c526:	b10b      	cbz	r3, 800c52c <_strtod_l+0x5ec>
 800c528:	4682      	mov	sl, r0
 800c52a:	468b      	mov	fp, r1
 800c52c:	9b04      	ldr	r3, [sp, #16]
 800c52e:	b1c3      	cbz	r3, 800c562 <_strtod_l+0x622>
 800c530:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c534:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c538:	2b00      	cmp	r3, #0
 800c53a:	4659      	mov	r1, fp
 800c53c:	dd11      	ble.n	800c562 <_strtod_l+0x622>
 800c53e:	2b1f      	cmp	r3, #31
 800c540:	f340 8124 	ble.w	800c78c <_strtod_l+0x84c>
 800c544:	2b34      	cmp	r3, #52	; 0x34
 800c546:	bfde      	ittt	le
 800c548:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c54c:	f04f 33ff 	movle.w	r3, #4294967295
 800c550:	fa03 f202 	lslle.w	r2, r3, r2
 800c554:	f04f 0a00 	mov.w	sl, #0
 800c558:	bfcc      	ite	gt
 800c55a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c55e:	ea02 0b01 	andle.w	fp, r2, r1
 800c562:	2200      	movs	r2, #0
 800c564:	2300      	movs	r3, #0
 800c566:	4650      	mov	r0, sl
 800c568:	4659      	mov	r1, fp
 800c56a:	f7f4 fab5 	bl	8000ad8 <__aeabi_dcmpeq>
 800c56e:	2800      	cmp	r0, #0
 800c570:	d1a2      	bne.n	800c4b8 <_strtod_l+0x578>
 800c572:	9b07      	ldr	r3, [sp, #28]
 800c574:	9300      	str	r3, [sp, #0]
 800c576:	9908      	ldr	r1, [sp, #32]
 800c578:	462b      	mov	r3, r5
 800c57a:	463a      	mov	r2, r7
 800c57c:	4620      	mov	r0, r4
 800c57e:	f001 fe1f 	bl	800e1c0 <__s2b>
 800c582:	9007      	str	r0, [sp, #28]
 800c584:	2800      	cmp	r0, #0
 800c586:	f43f af1f 	beq.w	800c3c8 <_strtod_l+0x488>
 800c58a:	9b05      	ldr	r3, [sp, #20]
 800c58c:	1b9e      	subs	r6, r3, r6
 800c58e:	9b06      	ldr	r3, [sp, #24]
 800c590:	2b00      	cmp	r3, #0
 800c592:	bfb4      	ite	lt
 800c594:	4633      	movlt	r3, r6
 800c596:	2300      	movge	r3, #0
 800c598:	930c      	str	r3, [sp, #48]	; 0x30
 800c59a:	9b06      	ldr	r3, [sp, #24]
 800c59c:	2500      	movs	r5, #0
 800c59e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c5a2:	9312      	str	r3, [sp, #72]	; 0x48
 800c5a4:	462e      	mov	r6, r5
 800c5a6:	9b07      	ldr	r3, [sp, #28]
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	6859      	ldr	r1, [r3, #4]
 800c5ac:	f001 fd60 	bl	800e070 <_Balloc>
 800c5b0:	9005      	str	r0, [sp, #20]
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	f43f af0c 	beq.w	800c3d0 <_strtod_l+0x490>
 800c5b8:	9b07      	ldr	r3, [sp, #28]
 800c5ba:	691a      	ldr	r2, [r3, #16]
 800c5bc:	3202      	adds	r2, #2
 800c5be:	f103 010c 	add.w	r1, r3, #12
 800c5c2:	0092      	lsls	r2, r2, #2
 800c5c4:	300c      	adds	r0, #12
 800c5c6:	f7fe fde7 	bl	800b198 <memcpy>
 800c5ca:	ec4b ab10 	vmov	d0, sl, fp
 800c5ce:	aa1a      	add	r2, sp, #104	; 0x68
 800c5d0:	a919      	add	r1, sp, #100	; 0x64
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f002 f93a 	bl	800e84c <__d2b>
 800c5d8:	ec4b ab18 	vmov	d8, sl, fp
 800c5dc:	9018      	str	r0, [sp, #96]	; 0x60
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	f43f aef6 	beq.w	800c3d0 <_strtod_l+0x490>
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f001 fe84 	bl	800e2f4 <__i2b>
 800c5ec:	4606      	mov	r6, r0
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	f43f aeee 	beq.w	800c3d0 <_strtod_l+0x490>
 800c5f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c5f6:	9904      	ldr	r1, [sp, #16]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	bfab      	itete	ge
 800c5fc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c5fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c600:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c602:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c606:	bfac      	ite	ge
 800c608:	eb03 0902 	addge.w	r9, r3, r2
 800c60c:	1ad7      	sublt	r7, r2, r3
 800c60e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c610:	eba3 0801 	sub.w	r8, r3, r1
 800c614:	4490      	add	r8, r2
 800c616:	4ba1      	ldr	r3, [pc, #644]	; (800c89c <_strtod_l+0x95c>)
 800c618:	f108 38ff 	add.w	r8, r8, #4294967295
 800c61c:	4598      	cmp	r8, r3
 800c61e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c622:	f280 80c7 	bge.w	800c7b4 <_strtod_l+0x874>
 800c626:	eba3 0308 	sub.w	r3, r3, r8
 800c62a:	2b1f      	cmp	r3, #31
 800c62c:	eba2 0203 	sub.w	r2, r2, r3
 800c630:	f04f 0101 	mov.w	r1, #1
 800c634:	f300 80b1 	bgt.w	800c79a <_strtod_l+0x85a>
 800c638:	fa01 f303 	lsl.w	r3, r1, r3
 800c63c:	930d      	str	r3, [sp, #52]	; 0x34
 800c63e:	2300      	movs	r3, #0
 800c640:	9308      	str	r3, [sp, #32]
 800c642:	eb09 0802 	add.w	r8, r9, r2
 800c646:	9b04      	ldr	r3, [sp, #16]
 800c648:	45c1      	cmp	r9, r8
 800c64a:	4417      	add	r7, r2
 800c64c:	441f      	add	r7, r3
 800c64e:	464b      	mov	r3, r9
 800c650:	bfa8      	it	ge
 800c652:	4643      	movge	r3, r8
 800c654:	42bb      	cmp	r3, r7
 800c656:	bfa8      	it	ge
 800c658:	463b      	movge	r3, r7
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	bfc2      	ittt	gt
 800c65e:	eba8 0803 	subgt.w	r8, r8, r3
 800c662:	1aff      	subgt	r7, r7, r3
 800c664:	eba9 0903 	subgt.w	r9, r9, r3
 800c668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	dd17      	ble.n	800c69e <_strtod_l+0x75e>
 800c66e:	4631      	mov	r1, r6
 800c670:	461a      	mov	r2, r3
 800c672:	4620      	mov	r0, r4
 800c674:	f001 fefe 	bl	800e474 <__pow5mult>
 800c678:	4606      	mov	r6, r0
 800c67a:	2800      	cmp	r0, #0
 800c67c:	f43f aea8 	beq.w	800c3d0 <_strtod_l+0x490>
 800c680:	4601      	mov	r1, r0
 800c682:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c684:	4620      	mov	r0, r4
 800c686:	f001 fe4b 	bl	800e320 <__multiply>
 800c68a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c68c:	2800      	cmp	r0, #0
 800c68e:	f43f ae9f 	beq.w	800c3d0 <_strtod_l+0x490>
 800c692:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c694:	4620      	mov	r0, r4
 800c696:	f001 fd2b 	bl	800e0f0 <_Bfree>
 800c69a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c69c:	9318      	str	r3, [sp, #96]	; 0x60
 800c69e:	f1b8 0f00 	cmp.w	r8, #0
 800c6a2:	f300 808c 	bgt.w	800c7be <_strtod_l+0x87e>
 800c6a6:	9b06      	ldr	r3, [sp, #24]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	dd08      	ble.n	800c6be <_strtod_l+0x77e>
 800c6ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c6ae:	9905      	ldr	r1, [sp, #20]
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	f001 fedf 	bl	800e474 <__pow5mult>
 800c6b6:	9005      	str	r0, [sp, #20]
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	f43f ae89 	beq.w	800c3d0 <_strtod_l+0x490>
 800c6be:	2f00      	cmp	r7, #0
 800c6c0:	dd08      	ble.n	800c6d4 <_strtod_l+0x794>
 800c6c2:	9905      	ldr	r1, [sp, #20]
 800c6c4:	463a      	mov	r2, r7
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f001 ff2e 	bl	800e528 <__lshift>
 800c6cc:	9005      	str	r0, [sp, #20]
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	f43f ae7e 	beq.w	800c3d0 <_strtod_l+0x490>
 800c6d4:	f1b9 0f00 	cmp.w	r9, #0
 800c6d8:	dd08      	ble.n	800c6ec <_strtod_l+0x7ac>
 800c6da:	4631      	mov	r1, r6
 800c6dc:	464a      	mov	r2, r9
 800c6de:	4620      	mov	r0, r4
 800c6e0:	f001 ff22 	bl	800e528 <__lshift>
 800c6e4:	4606      	mov	r6, r0
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	f43f ae72 	beq.w	800c3d0 <_strtod_l+0x490>
 800c6ec:	9a05      	ldr	r2, [sp, #20]
 800c6ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f001 ffa5 	bl	800e640 <__mdiff>
 800c6f6:	4605      	mov	r5, r0
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	f43f ae69 	beq.w	800c3d0 <_strtod_l+0x490>
 800c6fe:	68c3      	ldr	r3, [r0, #12]
 800c700:	930b      	str	r3, [sp, #44]	; 0x2c
 800c702:	2300      	movs	r3, #0
 800c704:	60c3      	str	r3, [r0, #12]
 800c706:	4631      	mov	r1, r6
 800c708:	f001 ff7e 	bl	800e608 <__mcmp>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	da60      	bge.n	800c7d2 <_strtod_l+0x892>
 800c710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c712:	ea53 030a 	orrs.w	r3, r3, sl
 800c716:	f040 8082 	bne.w	800c81e <_strtod_l+0x8de>
 800c71a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d17d      	bne.n	800c81e <_strtod_l+0x8de>
 800c722:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c726:	0d1b      	lsrs	r3, r3, #20
 800c728:	051b      	lsls	r3, r3, #20
 800c72a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c72e:	d976      	bls.n	800c81e <_strtod_l+0x8de>
 800c730:	696b      	ldr	r3, [r5, #20]
 800c732:	b913      	cbnz	r3, 800c73a <_strtod_l+0x7fa>
 800c734:	692b      	ldr	r3, [r5, #16]
 800c736:	2b01      	cmp	r3, #1
 800c738:	dd71      	ble.n	800c81e <_strtod_l+0x8de>
 800c73a:	4629      	mov	r1, r5
 800c73c:	2201      	movs	r2, #1
 800c73e:	4620      	mov	r0, r4
 800c740:	f001 fef2 	bl	800e528 <__lshift>
 800c744:	4631      	mov	r1, r6
 800c746:	4605      	mov	r5, r0
 800c748:	f001 ff5e 	bl	800e608 <__mcmp>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	dd66      	ble.n	800c81e <_strtod_l+0x8de>
 800c750:	9904      	ldr	r1, [sp, #16]
 800c752:	4a53      	ldr	r2, [pc, #332]	; (800c8a0 <_strtod_l+0x960>)
 800c754:	465b      	mov	r3, fp
 800c756:	2900      	cmp	r1, #0
 800c758:	f000 8081 	beq.w	800c85e <_strtod_l+0x91e>
 800c75c:	ea02 010b 	and.w	r1, r2, fp
 800c760:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c764:	dc7b      	bgt.n	800c85e <_strtod_l+0x91e>
 800c766:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c76a:	f77f aea9 	ble.w	800c4c0 <_strtod_l+0x580>
 800c76e:	4b4d      	ldr	r3, [pc, #308]	; (800c8a4 <_strtod_l+0x964>)
 800c770:	4650      	mov	r0, sl
 800c772:	4659      	mov	r1, fp
 800c774:	2200      	movs	r2, #0
 800c776:	f7f3 ff47 	bl	8000608 <__aeabi_dmul>
 800c77a:	460b      	mov	r3, r1
 800c77c:	4303      	orrs	r3, r0
 800c77e:	bf08      	it	eq
 800c780:	2322      	moveq	r3, #34	; 0x22
 800c782:	4682      	mov	sl, r0
 800c784:	468b      	mov	fp, r1
 800c786:	bf08      	it	eq
 800c788:	6023      	streq	r3, [r4, #0]
 800c78a:	e62b      	b.n	800c3e4 <_strtod_l+0x4a4>
 800c78c:	f04f 32ff 	mov.w	r2, #4294967295
 800c790:	fa02 f303 	lsl.w	r3, r2, r3
 800c794:	ea03 0a0a 	and.w	sl, r3, sl
 800c798:	e6e3      	b.n	800c562 <_strtod_l+0x622>
 800c79a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c79e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c7a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c7a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c7aa:	fa01 f308 	lsl.w	r3, r1, r8
 800c7ae:	9308      	str	r3, [sp, #32]
 800c7b0:	910d      	str	r1, [sp, #52]	; 0x34
 800c7b2:	e746      	b.n	800c642 <_strtod_l+0x702>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	9308      	str	r3, [sp, #32]
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	930d      	str	r3, [sp, #52]	; 0x34
 800c7bc:	e741      	b.n	800c642 <_strtod_l+0x702>
 800c7be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c7c0:	4642      	mov	r2, r8
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f001 feb0 	bl	800e528 <__lshift>
 800c7c8:	9018      	str	r0, [sp, #96]	; 0x60
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	f47f af6b 	bne.w	800c6a6 <_strtod_l+0x766>
 800c7d0:	e5fe      	b.n	800c3d0 <_strtod_l+0x490>
 800c7d2:	465f      	mov	r7, fp
 800c7d4:	d16e      	bne.n	800c8b4 <_strtod_l+0x974>
 800c7d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7dc:	b342      	cbz	r2, 800c830 <_strtod_l+0x8f0>
 800c7de:	4a32      	ldr	r2, [pc, #200]	; (800c8a8 <_strtod_l+0x968>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d128      	bne.n	800c836 <_strtod_l+0x8f6>
 800c7e4:	9b04      	ldr	r3, [sp, #16]
 800c7e6:	4651      	mov	r1, sl
 800c7e8:	b1eb      	cbz	r3, 800c826 <_strtod_l+0x8e6>
 800c7ea:	4b2d      	ldr	r3, [pc, #180]	; (800c8a0 <_strtod_l+0x960>)
 800c7ec:	403b      	ands	r3, r7
 800c7ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c7f6:	d819      	bhi.n	800c82c <_strtod_l+0x8ec>
 800c7f8:	0d1b      	lsrs	r3, r3, #20
 800c7fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c802:	4299      	cmp	r1, r3
 800c804:	d117      	bne.n	800c836 <_strtod_l+0x8f6>
 800c806:	4b29      	ldr	r3, [pc, #164]	; (800c8ac <_strtod_l+0x96c>)
 800c808:	429f      	cmp	r7, r3
 800c80a:	d102      	bne.n	800c812 <_strtod_l+0x8d2>
 800c80c:	3101      	adds	r1, #1
 800c80e:	f43f addf 	beq.w	800c3d0 <_strtod_l+0x490>
 800c812:	4b23      	ldr	r3, [pc, #140]	; (800c8a0 <_strtod_l+0x960>)
 800c814:	403b      	ands	r3, r7
 800c816:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c81a:	f04f 0a00 	mov.w	sl, #0
 800c81e:	9b04      	ldr	r3, [sp, #16]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1a4      	bne.n	800c76e <_strtod_l+0x82e>
 800c824:	e5de      	b.n	800c3e4 <_strtod_l+0x4a4>
 800c826:	f04f 33ff 	mov.w	r3, #4294967295
 800c82a:	e7ea      	b.n	800c802 <_strtod_l+0x8c2>
 800c82c:	4613      	mov	r3, r2
 800c82e:	e7e8      	b.n	800c802 <_strtod_l+0x8c2>
 800c830:	ea53 030a 	orrs.w	r3, r3, sl
 800c834:	d08c      	beq.n	800c750 <_strtod_l+0x810>
 800c836:	9b08      	ldr	r3, [sp, #32]
 800c838:	b1db      	cbz	r3, 800c872 <_strtod_l+0x932>
 800c83a:	423b      	tst	r3, r7
 800c83c:	d0ef      	beq.n	800c81e <_strtod_l+0x8de>
 800c83e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c840:	9a04      	ldr	r2, [sp, #16]
 800c842:	4650      	mov	r0, sl
 800c844:	4659      	mov	r1, fp
 800c846:	b1c3      	cbz	r3, 800c87a <_strtod_l+0x93a>
 800c848:	f7ff fb5c 	bl	800bf04 <sulp>
 800c84c:	4602      	mov	r2, r0
 800c84e:	460b      	mov	r3, r1
 800c850:	ec51 0b18 	vmov	r0, r1, d8
 800c854:	f7f3 fd22 	bl	800029c <__adddf3>
 800c858:	4682      	mov	sl, r0
 800c85a:	468b      	mov	fp, r1
 800c85c:	e7df      	b.n	800c81e <_strtod_l+0x8de>
 800c85e:	4013      	ands	r3, r2
 800c860:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c864:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c868:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c86c:	f04f 3aff 	mov.w	sl, #4294967295
 800c870:	e7d5      	b.n	800c81e <_strtod_l+0x8de>
 800c872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c874:	ea13 0f0a 	tst.w	r3, sl
 800c878:	e7e0      	b.n	800c83c <_strtod_l+0x8fc>
 800c87a:	f7ff fb43 	bl	800bf04 <sulp>
 800c87e:	4602      	mov	r2, r0
 800c880:	460b      	mov	r3, r1
 800c882:	ec51 0b18 	vmov	r0, r1, d8
 800c886:	f7f3 fd07 	bl	8000298 <__aeabi_dsub>
 800c88a:	2200      	movs	r2, #0
 800c88c:	2300      	movs	r3, #0
 800c88e:	4682      	mov	sl, r0
 800c890:	468b      	mov	fp, r1
 800c892:	f7f4 f921 	bl	8000ad8 <__aeabi_dcmpeq>
 800c896:	2800      	cmp	r0, #0
 800c898:	d0c1      	beq.n	800c81e <_strtod_l+0x8de>
 800c89a:	e611      	b.n	800c4c0 <_strtod_l+0x580>
 800c89c:	fffffc02 	.word	0xfffffc02
 800c8a0:	7ff00000 	.word	0x7ff00000
 800c8a4:	39500000 	.word	0x39500000
 800c8a8:	000fffff 	.word	0x000fffff
 800c8ac:	7fefffff 	.word	0x7fefffff
 800c8b0:	08011750 	.word	0x08011750
 800c8b4:	4631      	mov	r1, r6
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	f002 f824 	bl	800e904 <__ratio>
 800c8bc:	ec59 8b10 	vmov	r8, r9, d0
 800c8c0:	ee10 0a10 	vmov	r0, s0
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8ca:	4649      	mov	r1, r9
 800c8cc:	f7f4 f918 	bl	8000b00 <__aeabi_dcmple>
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	d07a      	beq.n	800c9ca <_strtod_l+0xa8a>
 800c8d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d04a      	beq.n	800c970 <_strtod_l+0xa30>
 800c8da:	4b95      	ldr	r3, [pc, #596]	; (800cb30 <_strtod_l+0xbf0>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c8e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cb30 <_strtod_l+0xbf0>
 800c8e6:	f04f 0800 	mov.w	r8, #0
 800c8ea:	4b92      	ldr	r3, [pc, #584]	; (800cb34 <_strtod_l+0xbf4>)
 800c8ec:	403b      	ands	r3, r7
 800c8ee:	930d      	str	r3, [sp, #52]	; 0x34
 800c8f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8f2:	4b91      	ldr	r3, [pc, #580]	; (800cb38 <_strtod_l+0xbf8>)
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	f040 80b0 	bne.w	800ca5a <_strtod_l+0xb1a>
 800c8fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c902:	ec4b ab10 	vmov	d0, sl, fp
 800c906:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c90a:	f001 ff23 	bl	800e754 <__ulp>
 800c90e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c912:	ec53 2b10 	vmov	r2, r3, d0
 800c916:	f7f3 fe77 	bl	8000608 <__aeabi_dmul>
 800c91a:	4652      	mov	r2, sl
 800c91c:	465b      	mov	r3, fp
 800c91e:	f7f3 fcbd 	bl	800029c <__adddf3>
 800c922:	460b      	mov	r3, r1
 800c924:	4983      	ldr	r1, [pc, #524]	; (800cb34 <_strtod_l+0xbf4>)
 800c926:	4a85      	ldr	r2, [pc, #532]	; (800cb3c <_strtod_l+0xbfc>)
 800c928:	4019      	ands	r1, r3
 800c92a:	4291      	cmp	r1, r2
 800c92c:	4682      	mov	sl, r0
 800c92e:	d960      	bls.n	800c9f2 <_strtod_l+0xab2>
 800c930:	ee18 3a90 	vmov	r3, s17
 800c934:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c938:	4293      	cmp	r3, r2
 800c93a:	d104      	bne.n	800c946 <_strtod_l+0xa06>
 800c93c:	ee18 3a10 	vmov	r3, s16
 800c940:	3301      	adds	r3, #1
 800c942:	f43f ad45 	beq.w	800c3d0 <_strtod_l+0x490>
 800c946:	f8df b200 	ldr.w	fp, [pc, #512]	; 800cb48 <_strtod_l+0xc08>
 800c94a:	f04f 3aff 	mov.w	sl, #4294967295
 800c94e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c950:	4620      	mov	r0, r4
 800c952:	f001 fbcd 	bl	800e0f0 <_Bfree>
 800c956:	9905      	ldr	r1, [sp, #20]
 800c958:	4620      	mov	r0, r4
 800c95a:	f001 fbc9 	bl	800e0f0 <_Bfree>
 800c95e:	4631      	mov	r1, r6
 800c960:	4620      	mov	r0, r4
 800c962:	f001 fbc5 	bl	800e0f0 <_Bfree>
 800c966:	4629      	mov	r1, r5
 800c968:	4620      	mov	r0, r4
 800c96a:	f001 fbc1 	bl	800e0f0 <_Bfree>
 800c96e:	e61a      	b.n	800c5a6 <_strtod_l+0x666>
 800c970:	f1ba 0f00 	cmp.w	sl, #0
 800c974:	d11b      	bne.n	800c9ae <_strtod_l+0xa6e>
 800c976:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c97a:	b9f3      	cbnz	r3, 800c9ba <_strtod_l+0xa7a>
 800c97c:	4b6c      	ldr	r3, [pc, #432]	; (800cb30 <_strtod_l+0xbf0>)
 800c97e:	2200      	movs	r2, #0
 800c980:	4640      	mov	r0, r8
 800c982:	4649      	mov	r1, r9
 800c984:	f7f4 f8b2 	bl	8000aec <__aeabi_dcmplt>
 800c988:	b9d0      	cbnz	r0, 800c9c0 <_strtod_l+0xa80>
 800c98a:	4640      	mov	r0, r8
 800c98c:	4649      	mov	r1, r9
 800c98e:	4b6c      	ldr	r3, [pc, #432]	; (800cb40 <_strtod_l+0xc00>)
 800c990:	2200      	movs	r2, #0
 800c992:	f7f3 fe39 	bl	8000608 <__aeabi_dmul>
 800c996:	4680      	mov	r8, r0
 800c998:	4689      	mov	r9, r1
 800c99a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c99e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c9a2:	9315      	str	r3, [sp, #84]	; 0x54
 800c9a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c9a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c9ac:	e79d      	b.n	800c8ea <_strtod_l+0x9aa>
 800c9ae:	f1ba 0f01 	cmp.w	sl, #1
 800c9b2:	d102      	bne.n	800c9ba <_strtod_l+0xa7a>
 800c9b4:	2f00      	cmp	r7, #0
 800c9b6:	f43f ad83 	beq.w	800c4c0 <_strtod_l+0x580>
 800c9ba:	4b62      	ldr	r3, [pc, #392]	; (800cb44 <_strtod_l+0xc04>)
 800c9bc:	2200      	movs	r2, #0
 800c9be:	e78e      	b.n	800c8de <_strtod_l+0x99e>
 800c9c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800cb40 <_strtod_l+0xc00>
 800c9c4:	f04f 0800 	mov.w	r8, #0
 800c9c8:	e7e7      	b.n	800c99a <_strtod_l+0xa5a>
 800c9ca:	4b5d      	ldr	r3, [pc, #372]	; (800cb40 <_strtod_l+0xc00>)
 800c9cc:	4640      	mov	r0, r8
 800c9ce:	4649      	mov	r1, r9
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f7f3 fe19 	bl	8000608 <__aeabi_dmul>
 800c9d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9d8:	4680      	mov	r8, r0
 800c9da:	4689      	mov	r9, r1
 800c9dc:	b933      	cbnz	r3, 800c9ec <_strtod_l+0xaac>
 800c9de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9e2:	900e      	str	r0, [sp, #56]	; 0x38
 800c9e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c9ea:	e7dd      	b.n	800c9a8 <_strtod_l+0xa68>
 800c9ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c9f0:	e7f9      	b.n	800c9e6 <_strtod_l+0xaa6>
 800c9f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c9f6:	9b04      	ldr	r3, [sp, #16]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1a8      	bne.n	800c94e <_strtod_l+0xa0e>
 800c9fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ca00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca02:	0d1b      	lsrs	r3, r3, #20
 800ca04:	051b      	lsls	r3, r3, #20
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d1a1      	bne.n	800c94e <_strtod_l+0xa0e>
 800ca0a:	4640      	mov	r0, r8
 800ca0c:	4649      	mov	r1, r9
 800ca0e:	f7f4 f95b 	bl	8000cc8 <__aeabi_d2lz>
 800ca12:	f7f3 fdcb 	bl	80005ac <__aeabi_l2d>
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	4640      	mov	r0, r8
 800ca1c:	4649      	mov	r1, r9
 800ca1e:	f7f3 fc3b 	bl	8000298 <__aeabi_dsub>
 800ca22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca28:	ea43 030a 	orr.w	r3, r3, sl
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	4680      	mov	r8, r0
 800ca30:	4689      	mov	r9, r1
 800ca32:	d055      	beq.n	800cae0 <_strtod_l+0xba0>
 800ca34:	a336      	add	r3, pc, #216	; (adr r3, 800cb10 <_strtod_l+0xbd0>)
 800ca36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3a:	f7f4 f857 	bl	8000aec <__aeabi_dcmplt>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	f47f acd0 	bne.w	800c3e4 <_strtod_l+0x4a4>
 800ca44:	a334      	add	r3, pc, #208	; (adr r3, 800cb18 <_strtod_l+0xbd8>)
 800ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4a:	4640      	mov	r0, r8
 800ca4c:	4649      	mov	r1, r9
 800ca4e:	f7f4 f86b 	bl	8000b28 <__aeabi_dcmpgt>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	f43f af7b 	beq.w	800c94e <_strtod_l+0xa0e>
 800ca58:	e4c4      	b.n	800c3e4 <_strtod_l+0x4a4>
 800ca5a:	9b04      	ldr	r3, [sp, #16]
 800ca5c:	b333      	cbz	r3, 800caac <_strtod_l+0xb6c>
 800ca5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca60:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ca64:	d822      	bhi.n	800caac <_strtod_l+0xb6c>
 800ca66:	a32e      	add	r3, pc, #184	; (adr r3, 800cb20 <_strtod_l+0xbe0>)
 800ca68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6c:	4640      	mov	r0, r8
 800ca6e:	4649      	mov	r1, r9
 800ca70:	f7f4 f846 	bl	8000b00 <__aeabi_dcmple>
 800ca74:	b1a0      	cbz	r0, 800caa0 <_strtod_l+0xb60>
 800ca76:	4649      	mov	r1, r9
 800ca78:	4640      	mov	r0, r8
 800ca7a:	f7f4 f89d 	bl	8000bb8 <__aeabi_d2uiz>
 800ca7e:	2801      	cmp	r0, #1
 800ca80:	bf38      	it	cc
 800ca82:	2001      	movcc	r0, #1
 800ca84:	f7f3 fd46 	bl	8000514 <__aeabi_ui2d>
 800ca88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca8a:	4680      	mov	r8, r0
 800ca8c:	4689      	mov	r9, r1
 800ca8e:	bb23      	cbnz	r3, 800cada <_strtod_l+0xb9a>
 800ca90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca94:	9010      	str	r0, [sp, #64]	; 0x40
 800ca96:	9311      	str	r3, [sp, #68]	; 0x44
 800ca98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800caa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800caa4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800caa8:	1a9b      	subs	r3, r3, r2
 800caaa:	9309      	str	r3, [sp, #36]	; 0x24
 800caac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cab0:	eeb0 0a48 	vmov.f32	s0, s16
 800cab4:	eef0 0a68 	vmov.f32	s1, s17
 800cab8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cabc:	f001 fe4a 	bl	800e754 <__ulp>
 800cac0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cac4:	ec53 2b10 	vmov	r2, r3, d0
 800cac8:	f7f3 fd9e 	bl	8000608 <__aeabi_dmul>
 800cacc:	ec53 2b18 	vmov	r2, r3, d8
 800cad0:	f7f3 fbe4 	bl	800029c <__adddf3>
 800cad4:	4682      	mov	sl, r0
 800cad6:	468b      	mov	fp, r1
 800cad8:	e78d      	b.n	800c9f6 <_strtod_l+0xab6>
 800cada:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800cade:	e7db      	b.n	800ca98 <_strtod_l+0xb58>
 800cae0:	a311      	add	r3, pc, #68	; (adr r3, 800cb28 <_strtod_l+0xbe8>)
 800cae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae6:	f7f4 f801 	bl	8000aec <__aeabi_dcmplt>
 800caea:	e7b2      	b.n	800ca52 <_strtod_l+0xb12>
 800caec:	2300      	movs	r3, #0
 800caee:	930a      	str	r3, [sp, #40]	; 0x28
 800caf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800caf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800caf4:	6013      	str	r3, [r2, #0]
 800caf6:	f7ff ba6b 	b.w	800bfd0 <_strtod_l+0x90>
 800cafa:	2a65      	cmp	r2, #101	; 0x65
 800cafc:	f43f ab5f 	beq.w	800c1be <_strtod_l+0x27e>
 800cb00:	2a45      	cmp	r2, #69	; 0x45
 800cb02:	f43f ab5c 	beq.w	800c1be <_strtod_l+0x27e>
 800cb06:	2301      	movs	r3, #1
 800cb08:	f7ff bb94 	b.w	800c234 <_strtod_l+0x2f4>
 800cb0c:	f3af 8000 	nop.w
 800cb10:	94a03595 	.word	0x94a03595
 800cb14:	3fdfffff 	.word	0x3fdfffff
 800cb18:	35afe535 	.word	0x35afe535
 800cb1c:	3fe00000 	.word	0x3fe00000
 800cb20:	ffc00000 	.word	0xffc00000
 800cb24:	41dfffff 	.word	0x41dfffff
 800cb28:	94a03595 	.word	0x94a03595
 800cb2c:	3fcfffff 	.word	0x3fcfffff
 800cb30:	3ff00000 	.word	0x3ff00000
 800cb34:	7ff00000 	.word	0x7ff00000
 800cb38:	7fe00000 	.word	0x7fe00000
 800cb3c:	7c9fffff 	.word	0x7c9fffff
 800cb40:	3fe00000 	.word	0x3fe00000
 800cb44:	bff00000 	.word	0xbff00000
 800cb48:	7fefffff 	.word	0x7fefffff

0800cb4c <_strtod_r>:
 800cb4c:	4b01      	ldr	r3, [pc, #4]	; (800cb54 <_strtod_r+0x8>)
 800cb4e:	f7ff b9f7 	b.w	800bf40 <_strtod_l>
 800cb52:	bf00      	nop
 800cb54:	2000029c 	.word	0x2000029c

0800cb58 <_strtol_l.constprop.0>:
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb5e:	d001      	beq.n	800cb64 <_strtol_l.constprop.0+0xc>
 800cb60:	2b24      	cmp	r3, #36	; 0x24
 800cb62:	d906      	bls.n	800cb72 <_strtol_l.constprop.0+0x1a>
 800cb64:	f7fe faee 	bl	800b144 <__errno>
 800cb68:	2316      	movs	r3, #22
 800cb6a:	6003      	str	r3, [r0, #0]
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cc58 <_strtol_l.constprop.0+0x100>
 800cb76:	460d      	mov	r5, r1
 800cb78:	462e      	mov	r6, r5
 800cb7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb7e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cb82:	f017 0708 	ands.w	r7, r7, #8
 800cb86:	d1f7      	bne.n	800cb78 <_strtol_l.constprop.0+0x20>
 800cb88:	2c2d      	cmp	r4, #45	; 0x2d
 800cb8a:	d132      	bne.n	800cbf2 <_strtol_l.constprop.0+0x9a>
 800cb8c:	782c      	ldrb	r4, [r5, #0]
 800cb8e:	2701      	movs	r7, #1
 800cb90:	1cb5      	adds	r5, r6, #2
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d05b      	beq.n	800cc4e <_strtol_l.constprop.0+0xf6>
 800cb96:	2b10      	cmp	r3, #16
 800cb98:	d109      	bne.n	800cbae <_strtol_l.constprop.0+0x56>
 800cb9a:	2c30      	cmp	r4, #48	; 0x30
 800cb9c:	d107      	bne.n	800cbae <_strtol_l.constprop.0+0x56>
 800cb9e:	782c      	ldrb	r4, [r5, #0]
 800cba0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cba4:	2c58      	cmp	r4, #88	; 0x58
 800cba6:	d14d      	bne.n	800cc44 <_strtol_l.constprop.0+0xec>
 800cba8:	786c      	ldrb	r4, [r5, #1]
 800cbaa:	2310      	movs	r3, #16
 800cbac:	3502      	adds	r5, #2
 800cbae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cbb2:	f108 38ff 	add.w	r8, r8, #4294967295
 800cbb6:	f04f 0c00 	mov.w	ip, #0
 800cbba:	fbb8 f9f3 	udiv	r9, r8, r3
 800cbbe:	4666      	mov	r6, ip
 800cbc0:	fb03 8a19 	mls	sl, r3, r9, r8
 800cbc4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cbc8:	f1be 0f09 	cmp.w	lr, #9
 800cbcc:	d816      	bhi.n	800cbfc <_strtol_l.constprop.0+0xa4>
 800cbce:	4674      	mov	r4, lr
 800cbd0:	42a3      	cmp	r3, r4
 800cbd2:	dd24      	ble.n	800cc1e <_strtol_l.constprop.0+0xc6>
 800cbd4:	f1bc 0f00 	cmp.w	ip, #0
 800cbd8:	db1e      	blt.n	800cc18 <_strtol_l.constprop.0+0xc0>
 800cbda:	45b1      	cmp	r9, r6
 800cbdc:	d31c      	bcc.n	800cc18 <_strtol_l.constprop.0+0xc0>
 800cbde:	d101      	bne.n	800cbe4 <_strtol_l.constprop.0+0x8c>
 800cbe0:	45a2      	cmp	sl, r4
 800cbe2:	db19      	blt.n	800cc18 <_strtol_l.constprop.0+0xc0>
 800cbe4:	fb06 4603 	mla	r6, r6, r3, r4
 800cbe8:	f04f 0c01 	mov.w	ip, #1
 800cbec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbf0:	e7e8      	b.n	800cbc4 <_strtol_l.constprop.0+0x6c>
 800cbf2:	2c2b      	cmp	r4, #43	; 0x2b
 800cbf4:	bf04      	itt	eq
 800cbf6:	782c      	ldrbeq	r4, [r5, #0]
 800cbf8:	1cb5      	addeq	r5, r6, #2
 800cbfa:	e7ca      	b.n	800cb92 <_strtol_l.constprop.0+0x3a>
 800cbfc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cc00:	f1be 0f19 	cmp.w	lr, #25
 800cc04:	d801      	bhi.n	800cc0a <_strtol_l.constprop.0+0xb2>
 800cc06:	3c37      	subs	r4, #55	; 0x37
 800cc08:	e7e2      	b.n	800cbd0 <_strtol_l.constprop.0+0x78>
 800cc0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cc0e:	f1be 0f19 	cmp.w	lr, #25
 800cc12:	d804      	bhi.n	800cc1e <_strtol_l.constprop.0+0xc6>
 800cc14:	3c57      	subs	r4, #87	; 0x57
 800cc16:	e7db      	b.n	800cbd0 <_strtol_l.constprop.0+0x78>
 800cc18:	f04f 3cff 	mov.w	ip, #4294967295
 800cc1c:	e7e6      	b.n	800cbec <_strtol_l.constprop.0+0x94>
 800cc1e:	f1bc 0f00 	cmp.w	ip, #0
 800cc22:	da05      	bge.n	800cc30 <_strtol_l.constprop.0+0xd8>
 800cc24:	2322      	movs	r3, #34	; 0x22
 800cc26:	6003      	str	r3, [r0, #0]
 800cc28:	4646      	mov	r6, r8
 800cc2a:	b942      	cbnz	r2, 800cc3e <_strtol_l.constprop.0+0xe6>
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	e79e      	b.n	800cb6e <_strtol_l.constprop.0+0x16>
 800cc30:	b107      	cbz	r7, 800cc34 <_strtol_l.constprop.0+0xdc>
 800cc32:	4276      	negs	r6, r6
 800cc34:	2a00      	cmp	r2, #0
 800cc36:	d0f9      	beq.n	800cc2c <_strtol_l.constprop.0+0xd4>
 800cc38:	f1bc 0f00 	cmp.w	ip, #0
 800cc3c:	d000      	beq.n	800cc40 <_strtol_l.constprop.0+0xe8>
 800cc3e:	1e69      	subs	r1, r5, #1
 800cc40:	6011      	str	r1, [r2, #0]
 800cc42:	e7f3      	b.n	800cc2c <_strtol_l.constprop.0+0xd4>
 800cc44:	2430      	movs	r4, #48	; 0x30
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d1b1      	bne.n	800cbae <_strtol_l.constprop.0+0x56>
 800cc4a:	2308      	movs	r3, #8
 800cc4c:	e7af      	b.n	800cbae <_strtol_l.constprop.0+0x56>
 800cc4e:	2c30      	cmp	r4, #48	; 0x30
 800cc50:	d0a5      	beq.n	800cb9e <_strtol_l.constprop.0+0x46>
 800cc52:	230a      	movs	r3, #10
 800cc54:	e7ab      	b.n	800cbae <_strtol_l.constprop.0+0x56>
 800cc56:	bf00      	nop
 800cc58:	08011779 	.word	0x08011779

0800cc5c <_strtol_r>:
 800cc5c:	f7ff bf7c 	b.w	800cb58 <_strtol_l.constprop.0>

0800cc60 <quorem>:
 800cc60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc64:	6903      	ldr	r3, [r0, #16]
 800cc66:	690c      	ldr	r4, [r1, #16]
 800cc68:	42a3      	cmp	r3, r4
 800cc6a:	4607      	mov	r7, r0
 800cc6c:	f2c0 8081 	blt.w	800cd72 <quorem+0x112>
 800cc70:	3c01      	subs	r4, #1
 800cc72:	f101 0814 	add.w	r8, r1, #20
 800cc76:	f100 0514 	add.w	r5, r0, #20
 800cc7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc7e:	9301      	str	r3, [sp, #4]
 800cc80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cc84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cc90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cc94:	fbb2 f6f3 	udiv	r6, r2, r3
 800cc98:	d331      	bcc.n	800ccfe <quorem+0x9e>
 800cc9a:	f04f 0e00 	mov.w	lr, #0
 800cc9e:	4640      	mov	r0, r8
 800cca0:	46ac      	mov	ip, r5
 800cca2:	46f2      	mov	sl, lr
 800cca4:	f850 2b04 	ldr.w	r2, [r0], #4
 800cca8:	b293      	uxth	r3, r2
 800ccaa:	fb06 e303 	mla	r3, r6, r3, lr
 800ccae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	ebaa 0303 	sub.w	r3, sl, r3
 800ccb8:	f8dc a000 	ldr.w	sl, [ip]
 800ccbc:	0c12      	lsrs	r2, r2, #16
 800ccbe:	fa13 f38a 	uxtah	r3, r3, sl
 800ccc2:	fb06 e202 	mla	r2, r6, r2, lr
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	9b00      	ldr	r3, [sp, #0]
 800ccca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ccce:	b292      	uxth	r2, r2
 800ccd0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ccd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ccd8:	f8bd 3000 	ldrh.w	r3, [sp]
 800ccdc:	4581      	cmp	r9, r0
 800ccde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cce2:	f84c 3b04 	str.w	r3, [ip], #4
 800cce6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ccea:	d2db      	bcs.n	800cca4 <quorem+0x44>
 800ccec:	f855 300b 	ldr.w	r3, [r5, fp]
 800ccf0:	b92b      	cbnz	r3, 800ccfe <quorem+0x9e>
 800ccf2:	9b01      	ldr	r3, [sp, #4]
 800ccf4:	3b04      	subs	r3, #4
 800ccf6:	429d      	cmp	r5, r3
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	d32e      	bcc.n	800cd5a <quorem+0xfa>
 800ccfc:	613c      	str	r4, [r7, #16]
 800ccfe:	4638      	mov	r0, r7
 800cd00:	f001 fc82 	bl	800e608 <__mcmp>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	db24      	blt.n	800cd52 <quorem+0xf2>
 800cd08:	3601      	adds	r6, #1
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	f04f 0c00 	mov.w	ip, #0
 800cd10:	f858 2b04 	ldr.w	r2, [r8], #4
 800cd14:	f8d0 e000 	ldr.w	lr, [r0]
 800cd18:	b293      	uxth	r3, r2
 800cd1a:	ebac 0303 	sub.w	r3, ip, r3
 800cd1e:	0c12      	lsrs	r2, r2, #16
 800cd20:	fa13 f38e 	uxtah	r3, r3, lr
 800cd24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cd28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd32:	45c1      	cmp	r9, r8
 800cd34:	f840 3b04 	str.w	r3, [r0], #4
 800cd38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cd3c:	d2e8      	bcs.n	800cd10 <quorem+0xb0>
 800cd3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd46:	b922      	cbnz	r2, 800cd52 <quorem+0xf2>
 800cd48:	3b04      	subs	r3, #4
 800cd4a:	429d      	cmp	r5, r3
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	d30a      	bcc.n	800cd66 <quorem+0x106>
 800cd50:	613c      	str	r4, [r7, #16]
 800cd52:	4630      	mov	r0, r6
 800cd54:	b003      	add	sp, #12
 800cd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd5a:	6812      	ldr	r2, [r2, #0]
 800cd5c:	3b04      	subs	r3, #4
 800cd5e:	2a00      	cmp	r2, #0
 800cd60:	d1cc      	bne.n	800ccfc <quorem+0x9c>
 800cd62:	3c01      	subs	r4, #1
 800cd64:	e7c7      	b.n	800ccf6 <quorem+0x96>
 800cd66:	6812      	ldr	r2, [r2, #0]
 800cd68:	3b04      	subs	r3, #4
 800cd6a:	2a00      	cmp	r2, #0
 800cd6c:	d1f0      	bne.n	800cd50 <quorem+0xf0>
 800cd6e:	3c01      	subs	r4, #1
 800cd70:	e7eb      	b.n	800cd4a <quorem+0xea>
 800cd72:	2000      	movs	r0, #0
 800cd74:	e7ee      	b.n	800cd54 <quorem+0xf4>
	...

0800cd78 <_dtoa_r>:
 800cd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd7c:	ed2d 8b04 	vpush	{d8-d9}
 800cd80:	ec57 6b10 	vmov	r6, r7, d0
 800cd84:	b093      	sub	sp, #76	; 0x4c
 800cd86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cd88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cd8c:	9106      	str	r1, [sp, #24]
 800cd8e:	ee10 aa10 	vmov	sl, s0
 800cd92:	4604      	mov	r4, r0
 800cd94:	9209      	str	r2, [sp, #36]	; 0x24
 800cd96:	930c      	str	r3, [sp, #48]	; 0x30
 800cd98:	46bb      	mov	fp, r7
 800cd9a:	b975      	cbnz	r5, 800cdba <_dtoa_r+0x42>
 800cd9c:	2010      	movs	r0, #16
 800cd9e:	f001 f94d 	bl	800e03c <malloc>
 800cda2:	4602      	mov	r2, r0
 800cda4:	6260      	str	r0, [r4, #36]	; 0x24
 800cda6:	b920      	cbnz	r0, 800cdb2 <_dtoa_r+0x3a>
 800cda8:	4ba7      	ldr	r3, [pc, #668]	; (800d048 <_dtoa_r+0x2d0>)
 800cdaa:	21ea      	movs	r1, #234	; 0xea
 800cdac:	48a7      	ldr	r0, [pc, #668]	; (800d04c <_dtoa_r+0x2d4>)
 800cdae:	f002 f8ad 	bl	800ef0c <__assert_func>
 800cdb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cdb6:	6005      	str	r5, [r0, #0]
 800cdb8:	60c5      	str	r5, [r0, #12]
 800cdba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdbc:	6819      	ldr	r1, [r3, #0]
 800cdbe:	b151      	cbz	r1, 800cdd6 <_dtoa_r+0x5e>
 800cdc0:	685a      	ldr	r2, [r3, #4]
 800cdc2:	604a      	str	r2, [r1, #4]
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	4093      	lsls	r3, r2
 800cdc8:	608b      	str	r3, [r1, #8]
 800cdca:	4620      	mov	r0, r4
 800cdcc:	f001 f990 	bl	800e0f0 <_Bfree>
 800cdd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	601a      	str	r2, [r3, #0]
 800cdd6:	1e3b      	subs	r3, r7, #0
 800cdd8:	bfaa      	itet	ge
 800cdda:	2300      	movge	r3, #0
 800cddc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cde0:	f8c8 3000 	strge.w	r3, [r8]
 800cde4:	4b9a      	ldr	r3, [pc, #616]	; (800d050 <_dtoa_r+0x2d8>)
 800cde6:	bfbc      	itt	lt
 800cde8:	2201      	movlt	r2, #1
 800cdea:	f8c8 2000 	strlt.w	r2, [r8]
 800cdee:	ea33 030b 	bics.w	r3, r3, fp
 800cdf2:	d11b      	bne.n	800ce2c <_dtoa_r+0xb4>
 800cdf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdf6:	f242 730f 	movw	r3, #9999	; 0x270f
 800cdfa:	6013      	str	r3, [r2, #0]
 800cdfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce00:	4333      	orrs	r3, r6
 800ce02:	f000 8592 	beq.w	800d92a <_dtoa_r+0xbb2>
 800ce06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce08:	b963      	cbnz	r3, 800ce24 <_dtoa_r+0xac>
 800ce0a:	4b92      	ldr	r3, [pc, #584]	; (800d054 <_dtoa_r+0x2dc>)
 800ce0c:	e022      	b.n	800ce54 <_dtoa_r+0xdc>
 800ce0e:	4b92      	ldr	r3, [pc, #584]	; (800d058 <_dtoa_r+0x2e0>)
 800ce10:	9301      	str	r3, [sp, #4]
 800ce12:	3308      	adds	r3, #8
 800ce14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ce16:	6013      	str	r3, [r2, #0]
 800ce18:	9801      	ldr	r0, [sp, #4]
 800ce1a:	b013      	add	sp, #76	; 0x4c
 800ce1c:	ecbd 8b04 	vpop	{d8-d9}
 800ce20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce24:	4b8b      	ldr	r3, [pc, #556]	; (800d054 <_dtoa_r+0x2dc>)
 800ce26:	9301      	str	r3, [sp, #4]
 800ce28:	3303      	adds	r3, #3
 800ce2a:	e7f3      	b.n	800ce14 <_dtoa_r+0x9c>
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	2300      	movs	r3, #0
 800ce30:	4650      	mov	r0, sl
 800ce32:	4659      	mov	r1, fp
 800ce34:	f7f3 fe50 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce38:	ec4b ab19 	vmov	d9, sl, fp
 800ce3c:	4680      	mov	r8, r0
 800ce3e:	b158      	cbz	r0, 800ce58 <_dtoa_r+0xe0>
 800ce40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce42:	2301      	movs	r3, #1
 800ce44:	6013      	str	r3, [r2, #0]
 800ce46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f000 856b 	beq.w	800d924 <_dtoa_r+0xbac>
 800ce4e:	4883      	ldr	r0, [pc, #524]	; (800d05c <_dtoa_r+0x2e4>)
 800ce50:	6018      	str	r0, [r3, #0]
 800ce52:	1e43      	subs	r3, r0, #1
 800ce54:	9301      	str	r3, [sp, #4]
 800ce56:	e7df      	b.n	800ce18 <_dtoa_r+0xa0>
 800ce58:	ec4b ab10 	vmov	d0, sl, fp
 800ce5c:	aa10      	add	r2, sp, #64	; 0x40
 800ce5e:	a911      	add	r1, sp, #68	; 0x44
 800ce60:	4620      	mov	r0, r4
 800ce62:	f001 fcf3 	bl	800e84c <__d2b>
 800ce66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ce6a:	ee08 0a10 	vmov	s16, r0
 800ce6e:	2d00      	cmp	r5, #0
 800ce70:	f000 8084 	beq.w	800cf7c <_dtoa_r+0x204>
 800ce74:	ee19 3a90 	vmov	r3, s19
 800ce78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ce80:	4656      	mov	r6, sl
 800ce82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ce86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ce8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ce8e:	4b74      	ldr	r3, [pc, #464]	; (800d060 <_dtoa_r+0x2e8>)
 800ce90:	2200      	movs	r2, #0
 800ce92:	4630      	mov	r0, r6
 800ce94:	4639      	mov	r1, r7
 800ce96:	f7f3 f9ff 	bl	8000298 <__aeabi_dsub>
 800ce9a:	a365      	add	r3, pc, #404	; (adr r3, 800d030 <_dtoa_r+0x2b8>)
 800ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea0:	f7f3 fbb2 	bl	8000608 <__aeabi_dmul>
 800cea4:	a364      	add	r3, pc, #400	; (adr r3, 800d038 <_dtoa_r+0x2c0>)
 800cea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceaa:	f7f3 f9f7 	bl	800029c <__adddf3>
 800ceae:	4606      	mov	r6, r0
 800ceb0:	4628      	mov	r0, r5
 800ceb2:	460f      	mov	r7, r1
 800ceb4:	f7f3 fb3e 	bl	8000534 <__aeabi_i2d>
 800ceb8:	a361      	add	r3, pc, #388	; (adr r3, 800d040 <_dtoa_r+0x2c8>)
 800ceba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebe:	f7f3 fba3 	bl	8000608 <__aeabi_dmul>
 800cec2:	4602      	mov	r2, r0
 800cec4:	460b      	mov	r3, r1
 800cec6:	4630      	mov	r0, r6
 800cec8:	4639      	mov	r1, r7
 800ceca:	f7f3 f9e7 	bl	800029c <__adddf3>
 800cece:	4606      	mov	r6, r0
 800ced0:	460f      	mov	r7, r1
 800ced2:	f7f3 fe49 	bl	8000b68 <__aeabi_d2iz>
 800ced6:	2200      	movs	r2, #0
 800ced8:	9000      	str	r0, [sp, #0]
 800ceda:	2300      	movs	r3, #0
 800cedc:	4630      	mov	r0, r6
 800cede:	4639      	mov	r1, r7
 800cee0:	f7f3 fe04 	bl	8000aec <__aeabi_dcmplt>
 800cee4:	b150      	cbz	r0, 800cefc <_dtoa_r+0x184>
 800cee6:	9800      	ldr	r0, [sp, #0]
 800cee8:	f7f3 fb24 	bl	8000534 <__aeabi_i2d>
 800ceec:	4632      	mov	r2, r6
 800ceee:	463b      	mov	r3, r7
 800cef0:	f7f3 fdf2 	bl	8000ad8 <__aeabi_dcmpeq>
 800cef4:	b910      	cbnz	r0, 800cefc <_dtoa_r+0x184>
 800cef6:	9b00      	ldr	r3, [sp, #0]
 800cef8:	3b01      	subs	r3, #1
 800cefa:	9300      	str	r3, [sp, #0]
 800cefc:	9b00      	ldr	r3, [sp, #0]
 800cefe:	2b16      	cmp	r3, #22
 800cf00:	d85a      	bhi.n	800cfb8 <_dtoa_r+0x240>
 800cf02:	9a00      	ldr	r2, [sp, #0]
 800cf04:	4b57      	ldr	r3, [pc, #348]	; (800d064 <_dtoa_r+0x2ec>)
 800cf06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0e:	ec51 0b19 	vmov	r0, r1, d9
 800cf12:	f7f3 fdeb 	bl	8000aec <__aeabi_dcmplt>
 800cf16:	2800      	cmp	r0, #0
 800cf18:	d050      	beq.n	800cfbc <_dtoa_r+0x244>
 800cf1a:	9b00      	ldr	r3, [sp, #0]
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	9300      	str	r3, [sp, #0]
 800cf20:	2300      	movs	r3, #0
 800cf22:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf26:	1b5d      	subs	r5, r3, r5
 800cf28:	1e6b      	subs	r3, r5, #1
 800cf2a:	9305      	str	r3, [sp, #20]
 800cf2c:	bf45      	ittet	mi
 800cf2e:	f1c5 0301 	rsbmi	r3, r5, #1
 800cf32:	9304      	strmi	r3, [sp, #16]
 800cf34:	2300      	movpl	r3, #0
 800cf36:	2300      	movmi	r3, #0
 800cf38:	bf4c      	ite	mi
 800cf3a:	9305      	strmi	r3, [sp, #20]
 800cf3c:	9304      	strpl	r3, [sp, #16]
 800cf3e:	9b00      	ldr	r3, [sp, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	db3d      	blt.n	800cfc0 <_dtoa_r+0x248>
 800cf44:	9b05      	ldr	r3, [sp, #20]
 800cf46:	9a00      	ldr	r2, [sp, #0]
 800cf48:	920a      	str	r2, [sp, #40]	; 0x28
 800cf4a:	4413      	add	r3, r2
 800cf4c:	9305      	str	r3, [sp, #20]
 800cf4e:	2300      	movs	r3, #0
 800cf50:	9307      	str	r3, [sp, #28]
 800cf52:	9b06      	ldr	r3, [sp, #24]
 800cf54:	2b09      	cmp	r3, #9
 800cf56:	f200 8089 	bhi.w	800d06c <_dtoa_r+0x2f4>
 800cf5a:	2b05      	cmp	r3, #5
 800cf5c:	bfc4      	itt	gt
 800cf5e:	3b04      	subgt	r3, #4
 800cf60:	9306      	strgt	r3, [sp, #24]
 800cf62:	9b06      	ldr	r3, [sp, #24]
 800cf64:	f1a3 0302 	sub.w	r3, r3, #2
 800cf68:	bfcc      	ite	gt
 800cf6a:	2500      	movgt	r5, #0
 800cf6c:	2501      	movle	r5, #1
 800cf6e:	2b03      	cmp	r3, #3
 800cf70:	f200 8087 	bhi.w	800d082 <_dtoa_r+0x30a>
 800cf74:	e8df f003 	tbb	[pc, r3]
 800cf78:	59383a2d 	.word	0x59383a2d
 800cf7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cf80:	441d      	add	r5, r3
 800cf82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cf86:	2b20      	cmp	r3, #32
 800cf88:	bfc1      	itttt	gt
 800cf8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cf8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cf92:	fa0b f303 	lslgt.w	r3, fp, r3
 800cf96:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cf9a:	bfda      	itte	le
 800cf9c:	f1c3 0320 	rsble	r3, r3, #32
 800cfa0:	fa06 f003 	lslle.w	r0, r6, r3
 800cfa4:	4318      	orrgt	r0, r3
 800cfa6:	f7f3 fab5 	bl	8000514 <__aeabi_ui2d>
 800cfaa:	2301      	movs	r3, #1
 800cfac:	4606      	mov	r6, r0
 800cfae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cfb2:	3d01      	subs	r5, #1
 800cfb4:	930e      	str	r3, [sp, #56]	; 0x38
 800cfb6:	e76a      	b.n	800ce8e <_dtoa_r+0x116>
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e7b2      	b.n	800cf22 <_dtoa_r+0x1aa>
 800cfbc:	900b      	str	r0, [sp, #44]	; 0x2c
 800cfbe:	e7b1      	b.n	800cf24 <_dtoa_r+0x1ac>
 800cfc0:	9b04      	ldr	r3, [sp, #16]
 800cfc2:	9a00      	ldr	r2, [sp, #0]
 800cfc4:	1a9b      	subs	r3, r3, r2
 800cfc6:	9304      	str	r3, [sp, #16]
 800cfc8:	4253      	negs	r3, r2
 800cfca:	9307      	str	r3, [sp, #28]
 800cfcc:	2300      	movs	r3, #0
 800cfce:	930a      	str	r3, [sp, #40]	; 0x28
 800cfd0:	e7bf      	b.n	800cf52 <_dtoa_r+0x1da>
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	9308      	str	r3, [sp, #32]
 800cfd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	dc55      	bgt.n	800d088 <_dtoa_r+0x310>
 800cfdc:	2301      	movs	r3, #1
 800cfde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	9209      	str	r2, [sp, #36]	; 0x24
 800cfe6:	e00c      	b.n	800d002 <_dtoa_r+0x28a>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	e7f3      	b.n	800cfd4 <_dtoa_r+0x25c>
 800cfec:	2300      	movs	r3, #0
 800cfee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cff0:	9308      	str	r3, [sp, #32]
 800cff2:	9b00      	ldr	r3, [sp, #0]
 800cff4:	4413      	add	r3, r2
 800cff6:	9302      	str	r3, [sp, #8]
 800cff8:	3301      	adds	r3, #1
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	9303      	str	r3, [sp, #12]
 800cffe:	bfb8      	it	lt
 800d000:	2301      	movlt	r3, #1
 800d002:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d004:	2200      	movs	r2, #0
 800d006:	6042      	str	r2, [r0, #4]
 800d008:	2204      	movs	r2, #4
 800d00a:	f102 0614 	add.w	r6, r2, #20
 800d00e:	429e      	cmp	r6, r3
 800d010:	6841      	ldr	r1, [r0, #4]
 800d012:	d93d      	bls.n	800d090 <_dtoa_r+0x318>
 800d014:	4620      	mov	r0, r4
 800d016:	f001 f82b 	bl	800e070 <_Balloc>
 800d01a:	9001      	str	r0, [sp, #4]
 800d01c:	2800      	cmp	r0, #0
 800d01e:	d13b      	bne.n	800d098 <_dtoa_r+0x320>
 800d020:	4b11      	ldr	r3, [pc, #68]	; (800d068 <_dtoa_r+0x2f0>)
 800d022:	4602      	mov	r2, r0
 800d024:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d028:	e6c0      	b.n	800cdac <_dtoa_r+0x34>
 800d02a:	2301      	movs	r3, #1
 800d02c:	e7df      	b.n	800cfee <_dtoa_r+0x276>
 800d02e:	bf00      	nop
 800d030:	636f4361 	.word	0x636f4361
 800d034:	3fd287a7 	.word	0x3fd287a7
 800d038:	8b60c8b3 	.word	0x8b60c8b3
 800d03c:	3fc68a28 	.word	0x3fc68a28
 800d040:	509f79fb 	.word	0x509f79fb
 800d044:	3fd34413 	.word	0x3fd34413
 800d048:	08011886 	.word	0x08011886
 800d04c:	0801189d 	.word	0x0801189d
 800d050:	7ff00000 	.word	0x7ff00000
 800d054:	08011882 	.word	0x08011882
 800d058:	08011879 	.word	0x08011879
 800d05c:	080116f9 	.word	0x080116f9
 800d060:	3ff80000 	.word	0x3ff80000
 800d064:	08011a08 	.word	0x08011a08
 800d068:	080118f8 	.word	0x080118f8
 800d06c:	2501      	movs	r5, #1
 800d06e:	2300      	movs	r3, #0
 800d070:	9306      	str	r3, [sp, #24]
 800d072:	9508      	str	r5, [sp, #32]
 800d074:	f04f 33ff 	mov.w	r3, #4294967295
 800d078:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d07c:	2200      	movs	r2, #0
 800d07e:	2312      	movs	r3, #18
 800d080:	e7b0      	b.n	800cfe4 <_dtoa_r+0x26c>
 800d082:	2301      	movs	r3, #1
 800d084:	9308      	str	r3, [sp, #32]
 800d086:	e7f5      	b.n	800d074 <_dtoa_r+0x2fc>
 800d088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d08a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d08e:	e7b8      	b.n	800d002 <_dtoa_r+0x28a>
 800d090:	3101      	adds	r1, #1
 800d092:	6041      	str	r1, [r0, #4]
 800d094:	0052      	lsls	r2, r2, #1
 800d096:	e7b8      	b.n	800d00a <_dtoa_r+0x292>
 800d098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d09a:	9a01      	ldr	r2, [sp, #4]
 800d09c:	601a      	str	r2, [r3, #0]
 800d09e:	9b03      	ldr	r3, [sp, #12]
 800d0a0:	2b0e      	cmp	r3, #14
 800d0a2:	f200 809d 	bhi.w	800d1e0 <_dtoa_r+0x468>
 800d0a6:	2d00      	cmp	r5, #0
 800d0a8:	f000 809a 	beq.w	800d1e0 <_dtoa_r+0x468>
 800d0ac:	9b00      	ldr	r3, [sp, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	dd32      	ble.n	800d118 <_dtoa_r+0x3a0>
 800d0b2:	4ab7      	ldr	r2, [pc, #732]	; (800d390 <_dtoa_r+0x618>)
 800d0b4:	f003 030f 	and.w	r3, r3, #15
 800d0b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d0bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d0c0:	9b00      	ldr	r3, [sp, #0]
 800d0c2:	05d8      	lsls	r0, r3, #23
 800d0c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d0c8:	d516      	bpl.n	800d0f8 <_dtoa_r+0x380>
 800d0ca:	4bb2      	ldr	r3, [pc, #712]	; (800d394 <_dtoa_r+0x61c>)
 800d0cc:	ec51 0b19 	vmov	r0, r1, d9
 800d0d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d0d4:	f7f3 fbc2 	bl	800085c <__aeabi_ddiv>
 800d0d8:	f007 070f 	and.w	r7, r7, #15
 800d0dc:	4682      	mov	sl, r0
 800d0de:	468b      	mov	fp, r1
 800d0e0:	2503      	movs	r5, #3
 800d0e2:	4eac      	ldr	r6, [pc, #688]	; (800d394 <_dtoa_r+0x61c>)
 800d0e4:	b957      	cbnz	r7, 800d0fc <_dtoa_r+0x384>
 800d0e6:	4642      	mov	r2, r8
 800d0e8:	464b      	mov	r3, r9
 800d0ea:	4650      	mov	r0, sl
 800d0ec:	4659      	mov	r1, fp
 800d0ee:	f7f3 fbb5 	bl	800085c <__aeabi_ddiv>
 800d0f2:	4682      	mov	sl, r0
 800d0f4:	468b      	mov	fp, r1
 800d0f6:	e028      	b.n	800d14a <_dtoa_r+0x3d2>
 800d0f8:	2502      	movs	r5, #2
 800d0fa:	e7f2      	b.n	800d0e2 <_dtoa_r+0x36a>
 800d0fc:	07f9      	lsls	r1, r7, #31
 800d0fe:	d508      	bpl.n	800d112 <_dtoa_r+0x39a>
 800d100:	4640      	mov	r0, r8
 800d102:	4649      	mov	r1, r9
 800d104:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d108:	f7f3 fa7e 	bl	8000608 <__aeabi_dmul>
 800d10c:	3501      	adds	r5, #1
 800d10e:	4680      	mov	r8, r0
 800d110:	4689      	mov	r9, r1
 800d112:	107f      	asrs	r7, r7, #1
 800d114:	3608      	adds	r6, #8
 800d116:	e7e5      	b.n	800d0e4 <_dtoa_r+0x36c>
 800d118:	f000 809b 	beq.w	800d252 <_dtoa_r+0x4da>
 800d11c:	9b00      	ldr	r3, [sp, #0]
 800d11e:	4f9d      	ldr	r7, [pc, #628]	; (800d394 <_dtoa_r+0x61c>)
 800d120:	425e      	negs	r6, r3
 800d122:	4b9b      	ldr	r3, [pc, #620]	; (800d390 <_dtoa_r+0x618>)
 800d124:	f006 020f 	and.w	r2, r6, #15
 800d128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d130:	ec51 0b19 	vmov	r0, r1, d9
 800d134:	f7f3 fa68 	bl	8000608 <__aeabi_dmul>
 800d138:	1136      	asrs	r6, r6, #4
 800d13a:	4682      	mov	sl, r0
 800d13c:	468b      	mov	fp, r1
 800d13e:	2300      	movs	r3, #0
 800d140:	2502      	movs	r5, #2
 800d142:	2e00      	cmp	r6, #0
 800d144:	d17a      	bne.n	800d23c <_dtoa_r+0x4c4>
 800d146:	2b00      	cmp	r3, #0
 800d148:	d1d3      	bne.n	800d0f2 <_dtoa_r+0x37a>
 800d14a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f000 8082 	beq.w	800d256 <_dtoa_r+0x4de>
 800d152:	4b91      	ldr	r3, [pc, #580]	; (800d398 <_dtoa_r+0x620>)
 800d154:	2200      	movs	r2, #0
 800d156:	4650      	mov	r0, sl
 800d158:	4659      	mov	r1, fp
 800d15a:	f7f3 fcc7 	bl	8000aec <__aeabi_dcmplt>
 800d15e:	2800      	cmp	r0, #0
 800d160:	d079      	beq.n	800d256 <_dtoa_r+0x4de>
 800d162:	9b03      	ldr	r3, [sp, #12]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d076      	beq.n	800d256 <_dtoa_r+0x4de>
 800d168:	9b02      	ldr	r3, [sp, #8]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	dd36      	ble.n	800d1dc <_dtoa_r+0x464>
 800d16e:	9b00      	ldr	r3, [sp, #0]
 800d170:	4650      	mov	r0, sl
 800d172:	4659      	mov	r1, fp
 800d174:	1e5f      	subs	r7, r3, #1
 800d176:	2200      	movs	r2, #0
 800d178:	4b88      	ldr	r3, [pc, #544]	; (800d39c <_dtoa_r+0x624>)
 800d17a:	f7f3 fa45 	bl	8000608 <__aeabi_dmul>
 800d17e:	9e02      	ldr	r6, [sp, #8]
 800d180:	4682      	mov	sl, r0
 800d182:	468b      	mov	fp, r1
 800d184:	3501      	adds	r5, #1
 800d186:	4628      	mov	r0, r5
 800d188:	f7f3 f9d4 	bl	8000534 <__aeabi_i2d>
 800d18c:	4652      	mov	r2, sl
 800d18e:	465b      	mov	r3, fp
 800d190:	f7f3 fa3a 	bl	8000608 <__aeabi_dmul>
 800d194:	4b82      	ldr	r3, [pc, #520]	; (800d3a0 <_dtoa_r+0x628>)
 800d196:	2200      	movs	r2, #0
 800d198:	f7f3 f880 	bl	800029c <__adddf3>
 800d19c:	46d0      	mov	r8, sl
 800d19e:	46d9      	mov	r9, fp
 800d1a0:	4682      	mov	sl, r0
 800d1a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d1a6:	2e00      	cmp	r6, #0
 800d1a8:	d158      	bne.n	800d25c <_dtoa_r+0x4e4>
 800d1aa:	4b7e      	ldr	r3, [pc, #504]	; (800d3a4 <_dtoa_r+0x62c>)
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	4640      	mov	r0, r8
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	f7f3 f871 	bl	8000298 <__aeabi_dsub>
 800d1b6:	4652      	mov	r2, sl
 800d1b8:	465b      	mov	r3, fp
 800d1ba:	4680      	mov	r8, r0
 800d1bc:	4689      	mov	r9, r1
 800d1be:	f7f3 fcb3 	bl	8000b28 <__aeabi_dcmpgt>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	f040 8295 	bne.w	800d6f2 <_dtoa_r+0x97a>
 800d1c8:	4652      	mov	r2, sl
 800d1ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d1ce:	4640      	mov	r0, r8
 800d1d0:	4649      	mov	r1, r9
 800d1d2:	f7f3 fc8b 	bl	8000aec <__aeabi_dcmplt>
 800d1d6:	2800      	cmp	r0, #0
 800d1d8:	f040 8289 	bne.w	800d6ee <_dtoa_r+0x976>
 800d1dc:	ec5b ab19 	vmov	sl, fp, d9
 800d1e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	f2c0 8148 	blt.w	800d478 <_dtoa_r+0x700>
 800d1e8:	9a00      	ldr	r2, [sp, #0]
 800d1ea:	2a0e      	cmp	r2, #14
 800d1ec:	f300 8144 	bgt.w	800d478 <_dtoa_r+0x700>
 800d1f0:	4b67      	ldr	r3, [pc, #412]	; (800d390 <_dtoa_r+0x618>)
 800d1f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f280 80d5 	bge.w	800d3ac <_dtoa_r+0x634>
 800d202:	9b03      	ldr	r3, [sp, #12]
 800d204:	2b00      	cmp	r3, #0
 800d206:	f300 80d1 	bgt.w	800d3ac <_dtoa_r+0x634>
 800d20a:	f040 826f 	bne.w	800d6ec <_dtoa_r+0x974>
 800d20e:	4b65      	ldr	r3, [pc, #404]	; (800d3a4 <_dtoa_r+0x62c>)
 800d210:	2200      	movs	r2, #0
 800d212:	4640      	mov	r0, r8
 800d214:	4649      	mov	r1, r9
 800d216:	f7f3 f9f7 	bl	8000608 <__aeabi_dmul>
 800d21a:	4652      	mov	r2, sl
 800d21c:	465b      	mov	r3, fp
 800d21e:	f7f3 fc79 	bl	8000b14 <__aeabi_dcmpge>
 800d222:	9e03      	ldr	r6, [sp, #12]
 800d224:	4637      	mov	r7, r6
 800d226:	2800      	cmp	r0, #0
 800d228:	f040 8245 	bne.w	800d6b6 <_dtoa_r+0x93e>
 800d22c:	9d01      	ldr	r5, [sp, #4]
 800d22e:	2331      	movs	r3, #49	; 0x31
 800d230:	f805 3b01 	strb.w	r3, [r5], #1
 800d234:	9b00      	ldr	r3, [sp, #0]
 800d236:	3301      	adds	r3, #1
 800d238:	9300      	str	r3, [sp, #0]
 800d23a:	e240      	b.n	800d6be <_dtoa_r+0x946>
 800d23c:	07f2      	lsls	r2, r6, #31
 800d23e:	d505      	bpl.n	800d24c <_dtoa_r+0x4d4>
 800d240:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d244:	f7f3 f9e0 	bl	8000608 <__aeabi_dmul>
 800d248:	3501      	adds	r5, #1
 800d24a:	2301      	movs	r3, #1
 800d24c:	1076      	asrs	r6, r6, #1
 800d24e:	3708      	adds	r7, #8
 800d250:	e777      	b.n	800d142 <_dtoa_r+0x3ca>
 800d252:	2502      	movs	r5, #2
 800d254:	e779      	b.n	800d14a <_dtoa_r+0x3d2>
 800d256:	9f00      	ldr	r7, [sp, #0]
 800d258:	9e03      	ldr	r6, [sp, #12]
 800d25a:	e794      	b.n	800d186 <_dtoa_r+0x40e>
 800d25c:	9901      	ldr	r1, [sp, #4]
 800d25e:	4b4c      	ldr	r3, [pc, #304]	; (800d390 <_dtoa_r+0x618>)
 800d260:	4431      	add	r1, r6
 800d262:	910d      	str	r1, [sp, #52]	; 0x34
 800d264:	9908      	ldr	r1, [sp, #32]
 800d266:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d26a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d26e:	2900      	cmp	r1, #0
 800d270:	d043      	beq.n	800d2fa <_dtoa_r+0x582>
 800d272:	494d      	ldr	r1, [pc, #308]	; (800d3a8 <_dtoa_r+0x630>)
 800d274:	2000      	movs	r0, #0
 800d276:	f7f3 faf1 	bl	800085c <__aeabi_ddiv>
 800d27a:	4652      	mov	r2, sl
 800d27c:	465b      	mov	r3, fp
 800d27e:	f7f3 f80b 	bl	8000298 <__aeabi_dsub>
 800d282:	9d01      	ldr	r5, [sp, #4]
 800d284:	4682      	mov	sl, r0
 800d286:	468b      	mov	fp, r1
 800d288:	4649      	mov	r1, r9
 800d28a:	4640      	mov	r0, r8
 800d28c:	f7f3 fc6c 	bl	8000b68 <__aeabi_d2iz>
 800d290:	4606      	mov	r6, r0
 800d292:	f7f3 f94f 	bl	8000534 <__aeabi_i2d>
 800d296:	4602      	mov	r2, r0
 800d298:	460b      	mov	r3, r1
 800d29a:	4640      	mov	r0, r8
 800d29c:	4649      	mov	r1, r9
 800d29e:	f7f2 fffb 	bl	8000298 <__aeabi_dsub>
 800d2a2:	3630      	adds	r6, #48	; 0x30
 800d2a4:	f805 6b01 	strb.w	r6, [r5], #1
 800d2a8:	4652      	mov	r2, sl
 800d2aa:	465b      	mov	r3, fp
 800d2ac:	4680      	mov	r8, r0
 800d2ae:	4689      	mov	r9, r1
 800d2b0:	f7f3 fc1c 	bl	8000aec <__aeabi_dcmplt>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d163      	bne.n	800d380 <_dtoa_r+0x608>
 800d2b8:	4642      	mov	r2, r8
 800d2ba:	464b      	mov	r3, r9
 800d2bc:	4936      	ldr	r1, [pc, #216]	; (800d398 <_dtoa_r+0x620>)
 800d2be:	2000      	movs	r0, #0
 800d2c0:	f7f2 ffea 	bl	8000298 <__aeabi_dsub>
 800d2c4:	4652      	mov	r2, sl
 800d2c6:	465b      	mov	r3, fp
 800d2c8:	f7f3 fc10 	bl	8000aec <__aeabi_dcmplt>
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	f040 80b5 	bne.w	800d43c <_dtoa_r+0x6c4>
 800d2d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2d4:	429d      	cmp	r5, r3
 800d2d6:	d081      	beq.n	800d1dc <_dtoa_r+0x464>
 800d2d8:	4b30      	ldr	r3, [pc, #192]	; (800d39c <_dtoa_r+0x624>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	4650      	mov	r0, sl
 800d2de:	4659      	mov	r1, fp
 800d2e0:	f7f3 f992 	bl	8000608 <__aeabi_dmul>
 800d2e4:	4b2d      	ldr	r3, [pc, #180]	; (800d39c <_dtoa_r+0x624>)
 800d2e6:	4682      	mov	sl, r0
 800d2e8:	468b      	mov	fp, r1
 800d2ea:	4640      	mov	r0, r8
 800d2ec:	4649      	mov	r1, r9
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	f7f3 f98a 	bl	8000608 <__aeabi_dmul>
 800d2f4:	4680      	mov	r8, r0
 800d2f6:	4689      	mov	r9, r1
 800d2f8:	e7c6      	b.n	800d288 <_dtoa_r+0x510>
 800d2fa:	4650      	mov	r0, sl
 800d2fc:	4659      	mov	r1, fp
 800d2fe:	f7f3 f983 	bl	8000608 <__aeabi_dmul>
 800d302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d304:	9d01      	ldr	r5, [sp, #4]
 800d306:	930f      	str	r3, [sp, #60]	; 0x3c
 800d308:	4682      	mov	sl, r0
 800d30a:	468b      	mov	fp, r1
 800d30c:	4649      	mov	r1, r9
 800d30e:	4640      	mov	r0, r8
 800d310:	f7f3 fc2a 	bl	8000b68 <__aeabi_d2iz>
 800d314:	4606      	mov	r6, r0
 800d316:	f7f3 f90d 	bl	8000534 <__aeabi_i2d>
 800d31a:	3630      	adds	r6, #48	; 0x30
 800d31c:	4602      	mov	r2, r0
 800d31e:	460b      	mov	r3, r1
 800d320:	4640      	mov	r0, r8
 800d322:	4649      	mov	r1, r9
 800d324:	f7f2 ffb8 	bl	8000298 <__aeabi_dsub>
 800d328:	f805 6b01 	strb.w	r6, [r5], #1
 800d32c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d32e:	429d      	cmp	r5, r3
 800d330:	4680      	mov	r8, r0
 800d332:	4689      	mov	r9, r1
 800d334:	f04f 0200 	mov.w	r2, #0
 800d338:	d124      	bne.n	800d384 <_dtoa_r+0x60c>
 800d33a:	4b1b      	ldr	r3, [pc, #108]	; (800d3a8 <_dtoa_r+0x630>)
 800d33c:	4650      	mov	r0, sl
 800d33e:	4659      	mov	r1, fp
 800d340:	f7f2 ffac 	bl	800029c <__adddf3>
 800d344:	4602      	mov	r2, r0
 800d346:	460b      	mov	r3, r1
 800d348:	4640      	mov	r0, r8
 800d34a:	4649      	mov	r1, r9
 800d34c:	f7f3 fbec 	bl	8000b28 <__aeabi_dcmpgt>
 800d350:	2800      	cmp	r0, #0
 800d352:	d173      	bne.n	800d43c <_dtoa_r+0x6c4>
 800d354:	4652      	mov	r2, sl
 800d356:	465b      	mov	r3, fp
 800d358:	4913      	ldr	r1, [pc, #76]	; (800d3a8 <_dtoa_r+0x630>)
 800d35a:	2000      	movs	r0, #0
 800d35c:	f7f2 ff9c 	bl	8000298 <__aeabi_dsub>
 800d360:	4602      	mov	r2, r0
 800d362:	460b      	mov	r3, r1
 800d364:	4640      	mov	r0, r8
 800d366:	4649      	mov	r1, r9
 800d368:	f7f3 fbc0 	bl	8000aec <__aeabi_dcmplt>
 800d36c:	2800      	cmp	r0, #0
 800d36e:	f43f af35 	beq.w	800d1dc <_dtoa_r+0x464>
 800d372:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d374:	1e6b      	subs	r3, r5, #1
 800d376:	930f      	str	r3, [sp, #60]	; 0x3c
 800d378:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d37c:	2b30      	cmp	r3, #48	; 0x30
 800d37e:	d0f8      	beq.n	800d372 <_dtoa_r+0x5fa>
 800d380:	9700      	str	r7, [sp, #0]
 800d382:	e049      	b.n	800d418 <_dtoa_r+0x6a0>
 800d384:	4b05      	ldr	r3, [pc, #20]	; (800d39c <_dtoa_r+0x624>)
 800d386:	f7f3 f93f 	bl	8000608 <__aeabi_dmul>
 800d38a:	4680      	mov	r8, r0
 800d38c:	4689      	mov	r9, r1
 800d38e:	e7bd      	b.n	800d30c <_dtoa_r+0x594>
 800d390:	08011a08 	.word	0x08011a08
 800d394:	080119e0 	.word	0x080119e0
 800d398:	3ff00000 	.word	0x3ff00000
 800d39c:	40240000 	.word	0x40240000
 800d3a0:	401c0000 	.word	0x401c0000
 800d3a4:	40140000 	.word	0x40140000
 800d3a8:	3fe00000 	.word	0x3fe00000
 800d3ac:	9d01      	ldr	r5, [sp, #4]
 800d3ae:	4656      	mov	r6, sl
 800d3b0:	465f      	mov	r7, fp
 800d3b2:	4642      	mov	r2, r8
 800d3b4:	464b      	mov	r3, r9
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	4639      	mov	r1, r7
 800d3ba:	f7f3 fa4f 	bl	800085c <__aeabi_ddiv>
 800d3be:	f7f3 fbd3 	bl	8000b68 <__aeabi_d2iz>
 800d3c2:	4682      	mov	sl, r0
 800d3c4:	f7f3 f8b6 	bl	8000534 <__aeabi_i2d>
 800d3c8:	4642      	mov	r2, r8
 800d3ca:	464b      	mov	r3, r9
 800d3cc:	f7f3 f91c 	bl	8000608 <__aeabi_dmul>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	4639      	mov	r1, r7
 800d3d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d3dc:	f7f2 ff5c 	bl	8000298 <__aeabi_dsub>
 800d3e0:	f805 6b01 	strb.w	r6, [r5], #1
 800d3e4:	9e01      	ldr	r6, [sp, #4]
 800d3e6:	9f03      	ldr	r7, [sp, #12]
 800d3e8:	1bae      	subs	r6, r5, r6
 800d3ea:	42b7      	cmp	r7, r6
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	d135      	bne.n	800d45e <_dtoa_r+0x6e6>
 800d3f2:	f7f2 ff53 	bl	800029c <__adddf3>
 800d3f6:	4642      	mov	r2, r8
 800d3f8:	464b      	mov	r3, r9
 800d3fa:	4606      	mov	r6, r0
 800d3fc:	460f      	mov	r7, r1
 800d3fe:	f7f3 fb93 	bl	8000b28 <__aeabi_dcmpgt>
 800d402:	b9d0      	cbnz	r0, 800d43a <_dtoa_r+0x6c2>
 800d404:	4642      	mov	r2, r8
 800d406:	464b      	mov	r3, r9
 800d408:	4630      	mov	r0, r6
 800d40a:	4639      	mov	r1, r7
 800d40c:	f7f3 fb64 	bl	8000ad8 <__aeabi_dcmpeq>
 800d410:	b110      	cbz	r0, 800d418 <_dtoa_r+0x6a0>
 800d412:	f01a 0f01 	tst.w	sl, #1
 800d416:	d110      	bne.n	800d43a <_dtoa_r+0x6c2>
 800d418:	4620      	mov	r0, r4
 800d41a:	ee18 1a10 	vmov	r1, s16
 800d41e:	f000 fe67 	bl	800e0f0 <_Bfree>
 800d422:	2300      	movs	r3, #0
 800d424:	9800      	ldr	r0, [sp, #0]
 800d426:	702b      	strb	r3, [r5, #0]
 800d428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d42a:	3001      	adds	r0, #1
 800d42c:	6018      	str	r0, [r3, #0]
 800d42e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d430:	2b00      	cmp	r3, #0
 800d432:	f43f acf1 	beq.w	800ce18 <_dtoa_r+0xa0>
 800d436:	601d      	str	r5, [r3, #0]
 800d438:	e4ee      	b.n	800ce18 <_dtoa_r+0xa0>
 800d43a:	9f00      	ldr	r7, [sp, #0]
 800d43c:	462b      	mov	r3, r5
 800d43e:	461d      	mov	r5, r3
 800d440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d444:	2a39      	cmp	r2, #57	; 0x39
 800d446:	d106      	bne.n	800d456 <_dtoa_r+0x6de>
 800d448:	9a01      	ldr	r2, [sp, #4]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d1f7      	bne.n	800d43e <_dtoa_r+0x6c6>
 800d44e:	9901      	ldr	r1, [sp, #4]
 800d450:	2230      	movs	r2, #48	; 0x30
 800d452:	3701      	adds	r7, #1
 800d454:	700a      	strb	r2, [r1, #0]
 800d456:	781a      	ldrb	r2, [r3, #0]
 800d458:	3201      	adds	r2, #1
 800d45a:	701a      	strb	r2, [r3, #0]
 800d45c:	e790      	b.n	800d380 <_dtoa_r+0x608>
 800d45e:	4ba6      	ldr	r3, [pc, #664]	; (800d6f8 <_dtoa_r+0x980>)
 800d460:	2200      	movs	r2, #0
 800d462:	f7f3 f8d1 	bl	8000608 <__aeabi_dmul>
 800d466:	2200      	movs	r2, #0
 800d468:	2300      	movs	r3, #0
 800d46a:	4606      	mov	r6, r0
 800d46c:	460f      	mov	r7, r1
 800d46e:	f7f3 fb33 	bl	8000ad8 <__aeabi_dcmpeq>
 800d472:	2800      	cmp	r0, #0
 800d474:	d09d      	beq.n	800d3b2 <_dtoa_r+0x63a>
 800d476:	e7cf      	b.n	800d418 <_dtoa_r+0x6a0>
 800d478:	9a08      	ldr	r2, [sp, #32]
 800d47a:	2a00      	cmp	r2, #0
 800d47c:	f000 80d7 	beq.w	800d62e <_dtoa_r+0x8b6>
 800d480:	9a06      	ldr	r2, [sp, #24]
 800d482:	2a01      	cmp	r2, #1
 800d484:	f300 80ba 	bgt.w	800d5fc <_dtoa_r+0x884>
 800d488:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d48a:	2a00      	cmp	r2, #0
 800d48c:	f000 80b2 	beq.w	800d5f4 <_dtoa_r+0x87c>
 800d490:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d494:	9e07      	ldr	r6, [sp, #28]
 800d496:	9d04      	ldr	r5, [sp, #16]
 800d498:	9a04      	ldr	r2, [sp, #16]
 800d49a:	441a      	add	r2, r3
 800d49c:	9204      	str	r2, [sp, #16]
 800d49e:	9a05      	ldr	r2, [sp, #20]
 800d4a0:	2101      	movs	r1, #1
 800d4a2:	441a      	add	r2, r3
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	9205      	str	r2, [sp, #20]
 800d4a8:	f000 ff24 	bl	800e2f4 <__i2b>
 800d4ac:	4607      	mov	r7, r0
 800d4ae:	2d00      	cmp	r5, #0
 800d4b0:	dd0c      	ble.n	800d4cc <_dtoa_r+0x754>
 800d4b2:	9b05      	ldr	r3, [sp, #20]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	dd09      	ble.n	800d4cc <_dtoa_r+0x754>
 800d4b8:	42ab      	cmp	r3, r5
 800d4ba:	9a04      	ldr	r2, [sp, #16]
 800d4bc:	bfa8      	it	ge
 800d4be:	462b      	movge	r3, r5
 800d4c0:	1ad2      	subs	r2, r2, r3
 800d4c2:	9204      	str	r2, [sp, #16]
 800d4c4:	9a05      	ldr	r2, [sp, #20]
 800d4c6:	1aed      	subs	r5, r5, r3
 800d4c8:	1ad3      	subs	r3, r2, r3
 800d4ca:	9305      	str	r3, [sp, #20]
 800d4cc:	9b07      	ldr	r3, [sp, #28]
 800d4ce:	b31b      	cbz	r3, 800d518 <_dtoa_r+0x7a0>
 800d4d0:	9b08      	ldr	r3, [sp, #32]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	f000 80af 	beq.w	800d636 <_dtoa_r+0x8be>
 800d4d8:	2e00      	cmp	r6, #0
 800d4da:	dd13      	ble.n	800d504 <_dtoa_r+0x78c>
 800d4dc:	4639      	mov	r1, r7
 800d4de:	4632      	mov	r2, r6
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	f000 ffc7 	bl	800e474 <__pow5mult>
 800d4e6:	ee18 2a10 	vmov	r2, s16
 800d4ea:	4601      	mov	r1, r0
 800d4ec:	4607      	mov	r7, r0
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	f000 ff16 	bl	800e320 <__multiply>
 800d4f4:	ee18 1a10 	vmov	r1, s16
 800d4f8:	4680      	mov	r8, r0
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f000 fdf8 	bl	800e0f0 <_Bfree>
 800d500:	ee08 8a10 	vmov	s16, r8
 800d504:	9b07      	ldr	r3, [sp, #28]
 800d506:	1b9a      	subs	r2, r3, r6
 800d508:	d006      	beq.n	800d518 <_dtoa_r+0x7a0>
 800d50a:	ee18 1a10 	vmov	r1, s16
 800d50e:	4620      	mov	r0, r4
 800d510:	f000 ffb0 	bl	800e474 <__pow5mult>
 800d514:	ee08 0a10 	vmov	s16, r0
 800d518:	2101      	movs	r1, #1
 800d51a:	4620      	mov	r0, r4
 800d51c:	f000 feea 	bl	800e2f4 <__i2b>
 800d520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d522:	2b00      	cmp	r3, #0
 800d524:	4606      	mov	r6, r0
 800d526:	f340 8088 	ble.w	800d63a <_dtoa_r+0x8c2>
 800d52a:	461a      	mov	r2, r3
 800d52c:	4601      	mov	r1, r0
 800d52e:	4620      	mov	r0, r4
 800d530:	f000 ffa0 	bl	800e474 <__pow5mult>
 800d534:	9b06      	ldr	r3, [sp, #24]
 800d536:	2b01      	cmp	r3, #1
 800d538:	4606      	mov	r6, r0
 800d53a:	f340 8081 	ble.w	800d640 <_dtoa_r+0x8c8>
 800d53e:	f04f 0800 	mov.w	r8, #0
 800d542:	6933      	ldr	r3, [r6, #16]
 800d544:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d548:	6918      	ldr	r0, [r3, #16]
 800d54a:	f000 fe83 	bl	800e254 <__hi0bits>
 800d54e:	f1c0 0020 	rsb	r0, r0, #32
 800d552:	9b05      	ldr	r3, [sp, #20]
 800d554:	4418      	add	r0, r3
 800d556:	f010 001f 	ands.w	r0, r0, #31
 800d55a:	f000 8092 	beq.w	800d682 <_dtoa_r+0x90a>
 800d55e:	f1c0 0320 	rsb	r3, r0, #32
 800d562:	2b04      	cmp	r3, #4
 800d564:	f340 808a 	ble.w	800d67c <_dtoa_r+0x904>
 800d568:	f1c0 001c 	rsb	r0, r0, #28
 800d56c:	9b04      	ldr	r3, [sp, #16]
 800d56e:	4403      	add	r3, r0
 800d570:	9304      	str	r3, [sp, #16]
 800d572:	9b05      	ldr	r3, [sp, #20]
 800d574:	4403      	add	r3, r0
 800d576:	4405      	add	r5, r0
 800d578:	9305      	str	r3, [sp, #20]
 800d57a:	9b04      	ldr	r3, [sp, #16]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	dd07      	ble.n	800d590 <_dtoa_r+0x818>
 800d580:	ee18 1a10 	vmov	r1, s16
 800d584:	461a      	mov	r2, r3
 800d586:	4620      	mov	r0, r4
 800d588:	f000 ffce 	bl	800e528 <__lshift>
 800d58c:	ee08 0a10 	vmov	s16, r0
 800d590:	9b05      	ldr	r3, [sp, #20]
 800d592:	2b00      	cmp	r3, #0
 800d594:	dd05      	ble.n	800d5a2 <_dtoa_r+0x82a>
 800d596:	4631      	mov	r1, r6
 800d598:	461a      	mov	r2, r3
 800d59a:	4620      	mov	r0, r4
 800d59c:	f000 ffc4 	bl	800e528 <__lshift>
 800d5a0:	4606      	mov	r6, r0
 800d5a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d06e      	beq.n	800d686 <_dtoa_r+0x90e>
 800d5a8:	ee18 0a10 	vmov	r0, s16
 800d5ac:	4631      	mov	r1, r6
 800d5ae:	f001 f82b 	bl	800e608 <__mcmp>
 800d5b2:	2800      	cmp	r0, #0
 800d5b4:	da67      	bge.n	800d686 <_dtoa_r+0x90e>
 800d5b6:	9b00      	ldr	r3, [sp, #0]
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	ee18 1a10 	vmov	r1, s16
 800d5be:	9300      	str	r3, [sp, #0]
 800d5c0:	220a      	movs	r2, #10
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	f000 fdb5 	bl	800e134 <__multadd>
 800d5ca:	9b08      	ldr	r3, [sp, #32]
 800d5cc:	ee08 0a10 	vmov	s16, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	f000 81b1 	beq.w	800d938 <_dtoa_r+0xbc0>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	4639      	mov	r1, r7
 800d5da:	220a      	movs	r2, #10
 800d5dc:	4620      	mov	r0, r4
 800d5de:	f000 fda9 	bl	800e134 <__multadd>
 800d5e2:	9b02      	ldr	r3, [sp, #8]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	4607      	mov	r7, r0
 800d5e8:	f300 808e 	bgt.w	800d708 <_dtoa_r+0x990>
 800d5ec:	9b06      	ldr	r3, [sp, #24]
 800d5ee:	2b02      	cmp	r3, #2
 800d5f0:	dc51      	bgt.n	800d696 <_dtoa_r+0x91e>
 800d5f2:	e089      	b.n	800d708 <_dtoa_r+0x990>
 800d5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d5fa:	e74b      	b.n	800d494 <_dtoa_r+0x71c>
 800d5fc:	9b03      	ldr	r3, [sp, #12]
 800d5fe:	1e5e      	subs	r6, r3, #1
 800d600:	9b07      	ldr	r3, [sp, #28]
 800d602:	42b3      	cmp	r3, r6
 800d604:	bfbf      	itttt	lt
 800d606:	9b07      	ldrlt	r3, [sp, #28]
 800d608:	9607      	strlt	r6, [sp, #28]
 800d60a:	1af2      	sublt	r2, r6, r3
 800d60c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d60e:	bfb6      	itet	lt
 800d610:	189b      	addlt	r3, r3, r2
 800d612:	1b9e      	subge	r6, r3, r6
 800d614:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d616:	9b03      	ldr	r3, [sp, #12]
 800d618:	bfb8      	it	lt
 800d61a:	2600      	movlt	r6, #0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	bfb7      	itett	lt
 800d620:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d624:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d628:	1a9d      	sublt	r5, r3, r2
 800d62a:	2300      	movlt	r3, #0
 800d62c:	e734      	b.n	800d498 <_dtoa_r+0x720>
 800d62e:	9e07      	ldr	r6, [sp, #28]
 800d630:	9d04      	ldr	r5, [sp, #16]
 800d632:	9f08      	ldr	r7, [sp, #32]
 800d634:	e73b      	b.n	800d4ae <_dtoa_r+0x736>
 800d636:	9a07      	ldr	r2, [sp, #28]
 800d638:	e767      	b.n	800d50a <_dtoa_r+0x792>
 800d63a:	9b06      	ldr	r3, [sp, #24]
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	dc18      	bgt.n	800d672 <_dtoa_r+0x8fa>
 800d640:	f1ba 0f00 	cmp.w	sl, #0
 800d644:	d115      	bne.n	800d672 <_dtoa_r+0x8fa>
 800d646:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d64a:	b993      	cbnz	r3, 800d672 <_dtoa_r+0x8fa>
 800d64c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d650:	0d1b      	lsrs	r3, r3, #20
 800d652:	051b      	lsls	r3, r3, #20
 800d654:	b183      	cbz	r3, 800d678 <_dtoa_r+0x900>
 800d656:	9b04      	ldr	r3, [sp, #16]
 800d658:	3301      	adds	r3, #1
 800d65a:	9304      	str	r3, [sp, #16]
 800d65c:	9b05      	ldr	r3, [sp, #20]
 800d65e:	3301      	adds	r3, #1
 800d660:	9305      	str	r3, [sp, #20]
 800d662:	f04f 0801 	mov.w	r8, #1
 800d666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f47f af6a 	bne.w	800d542 <_dtoa_r+0x7ca>
 800d66e:	2001      	movs	r0, #1
 800d670:	e76f      	b.n	800d552 <_dtoa_r+0x7da>
 800d672:	f04f 0800 	mov.w	r8, #0
 800d676:	e7f6      	b.n	800d666 <_dtoa_r+0x8ee>
 800d678:	4698      	mov	r8, r3
 800d67a:	e7f4      	b.n	800d666 <_dtoa_r+0x8ee>
 800d67c:	f43f af7d 	beq.w	800d57a <_dtoa_r+0x802>
 800d680:	4618      	mov	r0, r3
 800d682:	301c      	adds	r0, #28
 800d684:	e772      	b.n	800d56c <_dtoa_r+0x7f4>
 800d686:	9b03      	ldr	r3, [sp, #12]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	dc37      	bgt.n	800d6fc <_dtoa_r+0x984>
 800d68c:	9b06      	ldr	r3, [sp, #24]
 800d68e:	2b02      	cmp	r3, #2
 800d690:	dd34      	ble.n	800d6fc <_dtoa_r+0x984>
 800d692:	9b03      	ldr	r3, [sp, #12]
 800d694:	9302      	str	r3, [sp, #8]
 800d696:	9b02      	ldr	r3, [sp, #8]
 800d698:	b96b      	cbnz	r3, 800d6b6 <_dtoa_r+0x93e>
 800d69a:	4631      	mov	r1, r6
 800d69c:	2205      	movs	r2, #5
 800d69e:	4620      	mov	r0, r4
 800d6a0:	f000 fd48 	bl	800e134 <__multadd>
 800d6a4:	4601      	mov	r1, r0
 800d6a6:	4606      	mov	r6, r0
 800d6a8:	ee18 0a10 	vmov	r0, s16
 800d6ac:	f000 ffac 	bl	800e608 <__mcmp>
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	f73f adbb 	bgt.w	800d22c <_dtoa_r+0x4b4>
 800d6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6b8:	9d01      	ldr	r5, [sp, #4]
 800d6ba:	43db      	mvns	r3, r3
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	f04f 0800 	mov.w	r8, #0
 800d6c2:	4631      	mov	r1, r6
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	f000 fd13 	bl	800e0f0 <_Bfree>
 800d6ca:	2f00      	cmp	r7, #0
 800d6cc:	f43f aea4 	beq.w	800d418 <_dtoa_r+0x6a0>
 800d6d0:	f1b8 0f00 	cmp.w	r8, #0
 800d6d4:	d005      	beq.n	800d6e2 <_dtoa_r+0x96a>
 800d6d6:	45b8      	cmp	r8, r7
 800d6d8:	d003      	beq.n	800d6e2 <_dtoa_r+0x96a>
 800d6da:	4641      	mov	r1, r8
 800d6dc:	4620      	mov	r0, r4
 800d6de:	f000 fd07 	bl	800e0f0 <_Bfree>
 800d6e2:	4639      	mov	r1, r7
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f000 fd03 	bl	800e0f0 <_Bfree>
 800d6ea:	e695      	b.n	800d418 <_dtoa_r+0x6a0>
 800d6ec:	2600      	movs	r6, #0
 800d6ee:	4637      	mov	r7, r6
 800d6f0:	e7e1      	b.n	800d6b6 <_dtoa_r+0x93e>
 800d6f2:	9700      	str	r7, [sp, #0]
 800d6f4:	4637      	mov	r7, r6
 800d6f6:	e599      	b.n	800d22c <_dtoa_r+0x4b4>
 800d6f8:	40240000 	.word	0x40240000
 800d6fc:	9b08      	ldr	r3, [sp, #32]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	f000 80ca 	beq.w	800d898 <_dtoa_r+0xb20>
 800d704:	9b03      	ldr	r3, [sp, #12]
 800d706:	9302      	str	r3, [sp, #8]
 800d708:	2d00      	cmp	r5, #0
 800d70a:	dd05      	ble.n	800d718 <_dtoa_r+0x9a0>
 800d70c:	4639      	mov	r1, r7
 800d70e:	462a      	mov	r2, r5
 800d710:	4620      	mov	r0, r4
 800d712:	f000 ff09 	bl	800e528 <__lshift>
 800d716:	4607      	mov	r7, r0
 800d718:	f1b8 0f00 	cmp.w	r8, #0
 800d71c:	d05b      	beq.n	800d7d6 <_dtoa_r+0xa5e>
 800d71e:	6879      	ldr	r1, [r7, #4]
 800d720:	4620      	mov	r0, r4
 800d722:	f000 fca5 	bl	800e070 <_Balloc>
 800d726:	4605      	mov	r5, r0
 800d728:	b928      	cbnz	r0, 800d736 <_dtoa_r+0x9be>
 800d72a:	4b87      	ldr	r3, [pc, #540]	; (800d948 <_dtoa_r+0xbd0>)
 800d72c:	4602      	mov	r2, r0
 800d72e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d732:	f7ff bb3b 	b.w	800cdac <_dtoa_r+0x34>
 800d736:	693a      	ldr	r2, [r7, #16]
 800d738:	3202      	adds	r2, #2
 800d73a:	0092      	lsls	r2, r2, #2
 800d73c:	f107 010c 	add.w	r1, r7, #12
 800d740:	300c      	adds	r0, #12
 800d742:	f7fd fd29 	bl	800b198 <memcpy>
 800d746:	2201      	movs	r2, #1
 800d748:	4629      	mov	r1, r5
 800d74a:	4620      	mov	r0, r4
 800d74c:	f000 feec 	bl	800e528 <__lshift>
 800d750:	9b01      	ldr	r3, [sp, #4]
 800d752:	f103 0901 	add.w	r9, r3, #1
 800d756:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d75a:	4413      	add	r3, r2
 800d75c:	9305      	str	r3, [sp, #20]
 800d75e:	f00a 0301 	and.w	r3, sl, #1
 800d762:	46b8      	mov	r8, r7
 800d764:	9304      	str	r3, [sp, #16]
 800d766:	4607      	mov	r7, r0
 800d768:	4631      	mov	r1, r6
 800d76a:	ee18 0a10 	vmov	r0, s16
 800d76e:	f7ff fa77 	bl	800cc60 <quorem>
 800d772:	4641      	mov	r1, r8
 800d774:	9002      	str	r0, [sp, #8]
 800d776:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d77a:	ee18 0a10 	vmov	r0, s16
 800d77e:	f000 ff43 	bl	800e608 <__mcmp>
 800d782:	463a      	mov	r2, r7
 800d784:	9003      	str	r0, [sp, #12]
 800d786:	4631      	mov	r1, r6
 800d788:	4620      	mov	r0, r4
 800d78a:	f000 ff59 	bl	800e640 <__mdiff>
 800d78e:	68c2      	ldr	r2, [r0, #12]
 800d790:	f109 3bff 	add.w	fp, r9, #4294967295
 800d794:	4605      	mov	r5, r0
 800d796:	bb02      	cbnz	r2, 800d7da <_dtoa_r+0xa62>
 800d798:	4601      	mov	r1, r0
 800d79a:	ee18 0a10 	vmov	r0, s16
 800d79e:	f000 ff33 	bl	800e608 <__mcmp>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	4629      	mov	r1, r5
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	9207      	str	r2, [sp, #28]
 800d7aa:	f000 fca1 	bl	800e0f0 <_Bfree>
 800d7ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d7b2:	ea43 0102 	orr.w	r1, r3, r2
 800d7b6:	9b04      	ldr	r3, [sp, #16]
 800d7b8:	430b      	orrs	r3, r1
 800d7ba:	464d      	mov	r5, r9
 800d7bc:	d10f      	bne.n	800d7de <_dtoa_r+0xa66>
 800d7be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d7c2:	d02a      	beq.n	800d81a <_dtoa_r+0xaa2>
 800d7c4:	9b03      	ldr	r3, [sp, #12]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	dd02      	ble.n	800d7d0 <_dtoa_r+0xa58>
 800d7ca:	9b02      	ldr	r3, [sp, #8]
 800d7cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d7d0:	f88b a000 	strb.w	sl, [fp]
 800d7d4:	e775      	b.n	800d6c2 <_dtoa_r+0x94a>
 800d7d6:	4638      	mov	r0, r7
 800d7d8:	e7ba      	b.n	800d750 <_dtoa_r+0x9d8>
 800d7da:	2201      	movs	r2, #1
 800d7dc:	e7e2      	b.n	800d7a4 <_dtoa_r+0xa2c>
 800d7de:	9b03      	ldr	r3, [sp, #12]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	db04      	blt.n	800d7ee <_dtoa_r+0xa76>
 800d7e4:	9906      	ldr	r1, [sp, #24]
 800d7e6:	430b      	orrs	r3, r1
 800d7e8:	9904      	ldr	r1, [sp, #16]
 800d7ea:	430b      	orrs	r3, r1
 800d7ec:	d122      	bne.n	800d834 <_dtoa_r+0xabc>
 800d7ee:	2a00      	cmp	r2, #0
 800d7f0:	ddee      	ble.n	800d7d0 <_dtoa_r+0xa58>
 800d7f2:	ee18 1a10 	vmov	r1, s16
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f000 fe95 	bl	800e528 <__lshift>
 800d7fe:	4631      	mov	r1, r6
 800d800:	ee08 0a10 	vmov	s16, r0
 800d804:	f000 ff00 	bl	800e608 <__mcmp>
 800d808:	2800      	cmp	r0, #0
 800d80a:	dc03      	bgt.n	800d814 <_dtoa_r+0xa9c>
 800d80c:	d1e0      	bne.n	800d7d0 <_dtoa_r+0xa58>
 800d80e:	f01a 0f01 	tst.w	sl, #1
 800d812:	d0dd      	beq.n	800d7d0 <_dtoa_r+0xa58>
 800d814:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d818:	d1d7      	bne.n	800d7ca <_dtoa_r+0xa52>
 800d81a:	2339      	movs	r3, #57	; 0x39
 800d81c:	f88b 3000 	strb.w	r3, [fp]
 800d820:	462b      	mov	r3, r5
 800d822:	461d      	mov	r5, r3
 800d824:	3b01      	subs	r3, #1
 800d826:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d82a:	2a39      	cmp	r2, #57	; 0x39
 800d82c:	d071      	beq.n	800d912 <_dtoa_r+0xb9a>
 800d82e:	3201      	adds	r2, #1
 800d830:	701a      	strb	r2, [r3, #0]
 800d832:	e746      	b.n	800d6c2 <_dtoa_r+0x94a>
 800d834:	2a00      	cmp	r2, #0
 800d836:	dd07      	ble.n	800d848 <_dtoa_r+0xad0>
 800d838:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d83c:	d0ed      	beq.n	800d81a <_dtoa_r+0xaa2>
 800d83e:	f10a 0301 	add.w	r3, sl, #1
 800d842:	f88b 3000 	strb.w	r3, [fp]
 800d846:	e73c      	b.n	800d6c2 <_dtoa_r+0x94a>
 800d848:	9b05      	ldr	r3, [sp, #20]
 800d84a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d84e:	4599      	cmp	r9, r3
 800d850:	d047      	beq.n	800d8e2 <_dtoa_r+0xb6a>
 800d852:	ee18 1a10 	vmov	r1, s16
 800d856:	2300      	movs	r3, #0
 800d858:	220a      	movs	r2, #10
 800d85a:	4620      	mov	r0, r4
 800d85c:	f000 fc6a 	bl	800e134 <__multadd>
 800d860:	45b8      	cmp	r8, r7
 800d862:	ee08 0a10 	vmov	s16, r0
 800d866:	f04f 0300 	mov.w	r3, #0
 800d86a:	f04f 020a 	mov.w	r2, #10
 800d86e:	4641      	mov	r1, r8
 800d870:	4620      	mov	r0, r4
 800d872:	d106      	bne.n	800d882 <_dtoa_r+0xb0a>
 800d874:	f000 fc5e 	bl	800e134 <__multadd>
 800d878:	4680      	mov	r8, r0
 800d87a:	4607      	mov	r7, r0
 800d87c:	f109 0901 	add.w	r9, r9, #1
 800d880:	e772      	b.n	800d768 <_dtoa_r+0x9f0>
 800d882:	f000 fc57 	bl	800e134 <__multadd>
 800d886:	4639      	mov	r1, r7
 800d888:	4680      	mov	r8, r0
 800d88a:	2300      	movs	r3, #0
 800d88c:	220a      	movs	r2, #10
 800d88e:	4620      	mov	r0, r4
 800d890:	f000 fc50 	bl	800e134 <__multadd>
 800d894:	4607      	mov	r7, r0
 800d896:	e7f1      	b.n	800d87c <_dtoa_r+0xb04>
 800d898:	9b03      	ldr	r3, [sp, #12]
 800d89a:	9302      	str	r3, [sp, #8]
 800d89c:	9d01      	ldr	r5, [sp, #4]
 800d89e:	ee18 0a10 	vmov	r0, s16
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	f7ff f9dc 	bl	800cc60 <quorem>
 800d8a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d8ac:	9b01      	ldr	r3, [sp, #4]
 800d8ae:	f805 ab01 	strb.w	sl, [r5], #1
 800d8b2:	1aea      	subs	r2, r5, r3
 800d8b4:	9b02      	ldr	r3, [sp, #8]
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	dd09      	ble.n	800d8ce <_dtoa_r+0xb56>
 800d8ba:	ee18 1a10 	vmov	r1, s16
 800d8be:	2300      	movs	r3, #0
 800d8c0:	220a      	movs	r2, #10
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	f000 fc36 	bl	800e134 <__multadd>
 800d8c8:	ee08 0a10 	vmov	s16, r0
 800d8cc:	e7e7      	b.n	800d89e <_dtoa_r+0xb26>
 800d8ce:	9b02      	ldr	r3, [sp, #8]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	bfc8      	it	gt
 800d8d4:	461d      	movgt	r5, r3
 800d8d6:	9b01      	ldr	r3, [sp, #4]
 800d8d8:	bfd8      	it	le
 800d8da:	2501      	movle	r5, #1
 800d8dc:	441d      	add	r5, r3
 800d8de:	f04f 0800 	mov.w	r8, #0
 800d8e2:	ee18 1a10 	vmov	r1, s16
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	f000 fe1d 	bl	800e528 <__lshift>
 800d8ee:	4631      	mov	r1, r6
 800d8f0:	ee08 0a10 	vmov	s16, r0
 800d8f4:	f000 fe88 	bl	800e608 <__mcmp>
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	dc91      	bgt.n	800d820 <_dtoa_r+0xaa8>
 800d8fc:	d102      	bne.n	800d904 <_dtoa_r+0xb8c>
 800d8fe:	f01a 0f01 	tst.w	sl, #1
 800d902:	d18d      	bne.n	800d820 <_dtoa_r+0xaa8>
 800d904:	462b      	mov	r3, r5
 800d906:	461d      	mov	r5, r3
 800d908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d90c:	2a30      	cmp	r2, #48	; 0x30
 800d90e:	d0fa      	beq.n	800d906 <_dtoa_r+0xb8e>
 800d910:	e6d7      	b.n	800d6c2 <_dtoa_r+0x94a>
 800d912:	9a01      	ldr	r2, [sp, #4]
 800d914:	429a      	cmp	r2, r3
 800d916:	d184      	bne.n	800d822 <_dtoa_r+0xaaa>
 800d918:	9b00      	ldr	r3, [sp, #0]
 800d91a:	3301      	adds	r3, #1
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	2331      	movs	r3, #49	; 0x31
 800d920:	7013      	strb	r3, [r2, #0]
 800d922:	e6ce      	b.n	800d6c2 <_dtoa_r+0x94a>
 800d924:	4b09      	ldr	r3, [pc, #36]	; (800d94c <_dtoa_r+0xbd4>)
 800d926:	f7ff ba95 	b.w	800ce54 <_dtoa_r+0xdc>
 800d92a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	f47f aa6e 	bne.w	800ce0e <_dtoa_r+0x96>
 800d932:	4b07      	ldr	r3, [pc, #28]	; (800d950 <_dtoa_r+0xbd8>)
 800d934:	f7ff ba8e 	b.w	800ce54 <_dtoa_r+0xdc>
 800d938:	9b02      	ldr	r3, [sp, #8]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	dcae      	bgt.n	800d89c <_dtoa_r+0xb24>
 800d93e:	9b06      	ldr	r3, [sp, #24]
 800d940:	2b02      	cmp	r3, #2
 800d942:	f73f aea8 	bgt.w	800d696 <_dtoa_r+0x91e>
 800d946:	e7a9      	b.n	800d89c <_dtoa_r+0xb24>
 800d948:	080118f8 	.word	0x080118f8
 800d94c:	080116f8 	.word	0x080116f8
 800d950:	08011879 	.word	0x08011879

0800d954 <rshift>:
 800d954:	6903      	ldr	r3, [r0, #16]
 800d956:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d95a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d95e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d962:	f100 0414 	add.w	r4, r0, #20
 800d966:	dd45      	ble.n	800d9f4 <rshift+0xa0>
 800d968:	f011 011f 	ands.w	r1, r1, #31
 800d96c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d970:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d974:	d10c      	bne.n	800d990 <rshift+0x3c>
 800d976:	f100 0710 	add.w	r7, r0, #16
 800d97a:	4629      	mov	r1, r5
 800d97c:	42b1      	cmp	r1, r6
 800d97e:	d334      	bcc.n	800d9ea <rshift+0x96>
 800d980:	1a9b      	subs	r3, r3, r2
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	1eea      	subs	r2, r5, #3
 800d986:	4296      	cmp	r6, r2
 800d988:	bf38      	it	cc
 800d98a:	2300      	movcc	r3, #0
 800d98c:	4423      	add	r3, r4
 800d98e:	e015      	b.n	800d9bc <rshift+0x68>
 800d990:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d994:	f1c1 0820 	rsb	r8, r1, #32
 800d998:	40cf      	lsrs	r7, r1
 800d99a:	f105 0e04 	add.w	lr, r5, #4
 800d99e:	46a1      	mov	r9, r4
 800d9a0:	4576      	cmp	r6, lr
 800d9a2:	46f4      	mov	ip, lr
 800d9a4:	d815      	bhi.n	800d9d2 <rshift+0x7e>
 800d9a6:	1a9a      	subs	r2, r3, r2
 800d9a8:	0092      	lsls	r2, r2, #2
 800d9aa:	3a04      	subs	r2, #4
 800d9ac:	3501      	adds	r5, #1
 800d9ae:	42ae      	cmp	r6, r5
 800d9b0:	bf38      	it	cc
 800d9b2:	2200      	movcc	r2, #0
 800d9b4:	18a3      	adds	r3, r4, r2
 800d9b6:	50a7      	str	r7, [r4, r2]
 800d9b8:	b107      	cbz	r7, 800d9bc <rshift+0x68>
 800d9ba:	3304      	adds	r3, #4
 800d9bc:	1b1a      	subs	r2, r3, r4
 800d9be:	42a3      	cmp	r3, r4
 800d9c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d9c4:	bf08      	it	eq
 800d9c6:	2300      	moveq	r3, #0
 800d9c8:	6102      	str	r2, [r0, #16]
 800d9ca:	bf08      	it	eq
 800d9cc:	6143      	streq	r3, [r0, #20]
 800d9ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9d2:	f8dc c000 	ldr.w	ip, [ip]
 800d9d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800d9da:	ea4c 0707 	orr.w	r7, ip, r7
 800d9de:	f849 7b04 	str.w	r7, [r9], #4
 800d9e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d9e6:	40cf      	lsrs	r7, r1
 800d9e8:	e7da      	b.n	800d9a0 <rshift+0x4c>
 800d9ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800d9ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800d9f2:	e7c3      	b.n	800d97c <rshift+0x28>
 800d9f4:	4623      	mov	r3, r4
 800d9f6:	e7e1      	b.n	800d9bc <rshift+0x68>

0800d9f8 <__hexdig_fun>:
 800d9f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d9fc:	2b09      	cmp	r3, #9
 800d9fe:	d802      	bhi.n	800da06 <__hexdig_fun+0xe>
 800da00:	3820      	subs	r0, #32
 800da02:	b2c0      	uxtb	r0, r0
 800da04:	4770      	bx	lr
 800da06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800da0a:	2b05      	cmp	r3, #5
 800da0c:	d801      	bhi.n	800da12 <__hexdig_fun+0x1a>
 800da0e:	3847      	subs	r0, #71	; 0x47
 800da10:	e7f7      	b.n	800da02 <__hexdig_fun+0xa>
 800da12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800da16:	2b05      	cmp	r3, #5
 800da18:	d801      	bhi.n	800da1e <__hexdig_fun+0x26>
 800da1a:	3827      	subs	r0, #39	; 0x27
 800da1c:	e7f1      	b.n	800da02 <__hexdig_fun+0xa>
 800da1e:	2000      	movs	r0, #0
 800da20:	4770      	bx	lr
	...

0800da24 <__gethex>:
 800da24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da28:	ed2d 8b02 	vpush	{d8}
 800da2c:	b089      	sub	sp, #36	; 0x24
 800da2e:	ee08 0a10 	vmov	s16, r0
 800da32:	9304      	str	r3, [sp, #16]
 800da34:	4bb4      	ldr	r3, [pc, #720]	; (800dd08 <__gethex+0x2e4>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	9301      	str	r3, [sp, #4]
 800da3a:	4618      	mov	r0, r3
 800da3c:	468b      	mov	fp, r1
 800da3e:	4690      	mov	r8, r2
 800da40:	f7f2 fbce 	bl	80001e0 <strlen>
 800da44:	9b01      	ldr	r3, [sp, #4]
 800da46:	f8db 2000 	ldr.w	r2, [fp]
 800da4a:	4403      	add	r3, r0
 800da4c:	4682      	mov	sl, r0
 800da4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800da52:	9305      	str	r3, [sp, #20]
 800da54:	1c93      	adds	r3, r2, #2
 800da56:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800da5a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800da5e:	32fe      	adds	r2, #254	; 0xfe
 800da60:	18d1      	adds	r1, r2, r3
 800da62:	461f      	mov	r7, r3
 800da64:	f813 0b01 	ldrb.w	r0, [r3], #1
 800da68:	9100      	str	r1, [sp, #0]
 800da6a:	2830      	cmp	r0, #48	; 0x30
 800da6c:	d0f8      	beq.n	800da60 <__gethex+0x3c>
 800da6e:	f7ff ffc3 	bl	800d9f8 <__hexdig_fun>
 800da72:	4604      	mov	r4, r0
 800da74:	2800      	cmp	r0, #0
 800da76:	d13a      	bne.n	800daee <__gethex+0xca>
 800da78:	9901      	ldr	r1, [sp, #4]
 800da7a:	4652      	mov	r2, sl
 800da7c:	4638      	mov	r0, r7
 800da7e:	f001 fa23 	bl	800eec8 <strncmp>
 800da82:	4605      	mov	r5, r0
 800da84:	2800      	cmp	r0, #0
 800da86:	d168      	bne.n	800db5a <__gethex+0x136>
 800da88:	f817 000a 	ldrb.w	r0, [r7, sl]
 800da8c:	eb07 060a 	add.w	r6, r7, sl
 800da90:	f7ff ffb2 	bl	800d9f8 <__hexdig_fun>
 800da94:	2800      	cmp	r0, #0
 800da96:	d062      	beq.n	800db5e <__gethex+0x13a>
 800da98:	4633      	mov	r3, r6
 800da9a:	7818      	ldrb	r0, [r3, #0]
 800da9c:	2830      	cmp	r0, #48	; 0x30
 800da9e:	461f      	mov	r7, r3
 800daa0:	f103 0301 	add.w	r3, r3, #1
 800daa4:	d0f9      	beq.n	800da9a <__gethex+0x76>
 800daa6:	f7ff ffa7 	bl	800d9f8 <__hexdig_fun>
 800daaa:	2301      	movs	r3, #1
 800daac:	fab0 f480 	clz	r4, r0
 800dab0:	0964      	lsrs	r4, r4, #5
 800dab2:	4635      	mov	r5, r6
 800dab4:	9300      	str	r3, [sp, #0]
 800dab6:	463a      	mov	r2, r7
 800dab8:	4616      	mov	r6, r2
 800daba:	3201      	adds	r2, #1
 800dabc:	7830      	ldrb	r0, [r6, #0]
 800dabe:	f7ff ff9b 	bl	800d9f8 <__hexdig_fun>
 800dac2:	2800      	cmp	r0, #0
 800dac4:	d1f8      	bne.n	800dab8 <__gethex+0x94>
 800dac6:	9901      	ldr	r1, [sp, #4]
 800dac8:	4652      	mov	r2, sl
 800daca:	4630      	mov	r0, r6
 800dacc:	f001 f9fc 	bl	800eec8 <strncmp>
 800dad0:	b980      	cbnz	r0, 800daf4 <__gethex+0xd0>
 800dad2:	b94d      	cbnz	r5, 800dae8 <__gethex+0xc4>
 800dad4:	eb06 050a 	add.w	r5, r6, sl
 800dad8:	462a      	mov	r2, r5
 800dada:	4616      	mov	r6, r2
 800dadc:	3201      	adds	r2, #1
 800dade:	7830      	ldrb	r0, [r6, #0]
 800dae0:	f7ff ff8a 	bl	800d9f8 <__hexdig_fun>
 800dae4:	2800      	cmp	r0, #0
 800dae6:	d1f8      	bne.n	800dada <__gethex+0xb6>
 800dae8:	1bad      	subs	r5, r5, r6
 800daea:	00ad      	lsls	r5, r5, #2
 800daec:	e004      	b.n	800daf8 <__gethex+0xd4>
 800daee:	2400      	movs	r4, #0
 800daf0:	4625      	mov	r5, r4
 800daf2:	e7e0      	b.n	800dab6 <__gethex+0x92>
 800daf4:	2d00      	cmp	r5, #0
 800daf6:	d1f7      	bne.n	800dae8 <__gethex+0xc4>
 800daf8:	7833      	ldrb	r3, [r6, #0]
 800dafa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dafe:	2b50      	cmp	r3, #80	; 0x50
 800db00:	d13b      	bne.n	800db7a <__gethex+0x156>
 800db02:	7873      	ldrb	r3, [r6, #1]
 800db04:	2b2b      	cmp	r3, #43	; 0x2b
 800db06:	d02c      	beq.n	800db62 <__gethex+0x13e>
 800db08:	2b2d      	cmp	r3, #45	; 0x2d
 800db0a:	d02e      	beq.n	800db6a <__gethex+0x146>
 800db0c:	1c71      	adds	r1, r6, #1
 800db0e:	f04f 0900 	mov.w	r9, #0
 800db12:	7808      	ldrb	r0, [r1, #0]
 800db14:	f7ff ff70 	bl	800d9f8 <__hexdig_fun>
 800db18:	1e43      	subs	r3, r0, #1
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	2b18      	cmp	r3, #24
 800db1e:	d82c      	bhi.n	800db7a <__gethex+0x156>
 800db20:	f1a0 0210 	sub.w	r2, r0, #16
 800db24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800db28:	f7ff ff66 	bl	800d9f8 <__hexdig_fun>
 800db2c:	1e43      	subs	r3, r0, #1
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	2b18      	cmp	r3, #24
 800db32:	d91d      	bls.n	800db70 <__gethex+0x14c>
 800db34:	f1b9 0f00 	cmp.w	r9, #0
 800db38:	d000      	beq.n	800db3c <__gethex+0x118>
 800db3a:	4252      	negs	r2, r2
 800db3c:	4415      	add	r5, r2
 800db3e:	f8cb 1000 	str.w	r1, [fp]
 800db42:	b1e4      	cbz	r4, 800db7e <__gethex+0x15a>
 800db44:	9b00      	ldr	r3, [sp, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	bf14      	ite	ne
 800db4a:	2700      	movne	r7, #0
 800db4c:	2706      	moveq	r7, #6
 800db4e:	4638      	mov	r0, r7
 800db50:	b009      	add	sp, #36	; 0x24
 800db52:	ecbd 8b02 	vpop	{d8}
 800db56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5a:	463e      	mov	r6, r7
 800db5c:	4625      	mov	r5, r4
 800db5e:	2401      	movs	r4, #1
 800db60:	e7ca      	b.n	800daf8 <__gethex+0xd4>
 800db62:	f04f 0900 	mov.w	r9, #0
 800db66:	1cb1      	adds	r1, r6, #2
 800db68:	e7d3      	b.n	800db12 <__gethex+0xee>
 800db6a:	f04f 0901 	mov.w	r9, #1
 800db6e:	e7fa      	b.n	800db66 <__gethex+0x142>
 800db70:	230a      	movs	r3, #10
 800db72:	fb03 0202 	mla	r2, r3, r2, r0
 800db76:	3a10      	subs	r2, #16
 800db78:	e7d4      	b.n	800db24 <__gethex+0x100>
 800db7a:	4631      	mov	r1, r6
 800db7c:	e7df      	b.n	800db3e <__gethex+0x11a>
 800db7e:	1bf3      	subs	r3, r6, r7
 800db80:	3b01      	subs	r3, #1
 800db82:	4621      	mov	r1, r4
 800db84:	2b07      	cmp	r3, #7
 800db86:	dc0b      	bgt.n	800dba0 <__gethex+0x17c>
 800db88:	ee18 0a10 	vmov	r0, s16
 800db8c:	f000 fa70 	bl	800e070 <_Balloc>
 800db90:	4604      	mov	r4, r0
 800db92:	b940      	cbnz	r0, 800dba6 <__gethex+0x182>
 800db94:	4b5d      	ldr	r3, [pc, #372]	; (800dd0c <__gethex+0x2e8>)
 800db96:	4602      	mov	r2, r0
 800db98:	21de      	movs	r1, #222	; 0xde
 800db9a:	485d      	ldr	r0, [pc, #372]	; (800dd10 <__gethex+0x2ec>)
 800db9c:	f001 f9b6 	bl	800ef0c <__assert_func>
 800dba0:	3101      	adds	r1, #1
 800dba2:	105b      	asrs	r3, r3, #1
 800dba4:	e7ee      	b.n	800db84 <__gethex+0x160>
 800dba6:	f100 0914 	add.w	r9, r0, #20
 800dbaa:	f04f 0b00 	mov.w	fp, #0
 800dbae:	f1ca 0301 	rsb	r3, sl, #1
 800dbb2:	f8cd 9008 	str.w	r9, [sp, #8]
 800dbb6:	f8cd b000 	str.w	fp, [sp]
 800dbba:	9306      	str	r3, [sp, #24]
 800dbbc:	42b7      	cmp	r7, r6
 800dbbe:	d340      	bcc.n	800dc42 <__gethex+0x21e>
 800dbc0:	9802      	ldr	r0, [sp, #8]
 800dbc2:	9b00      	ldr	r3, [sp, #0]
 800dbc4:	f840 3b04 	str.w	r3, [r0], #4
 800dbc8:	eba0 0009 	sub.w	r0, r0, r9
 800dbcc:	1080      	asrs	r0, r0, #2
 800dbce:	0146      	lsls	r6, r0, #5
 800dbd0:	6120      	str	r0, [r4, #16]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f000 fb3e 	bl	800e254 <__hi0bits>
 800dbd8:	1a30      	subs	r0, r6, r0
 800dbda:	f8d8 6000 	ldr.w	r6, [r8]
 800dbde:	42b0      	cmp	r0, r6
 800dbe0:	dd63      	ble.n	800dcaa <__gethex+0x286>
 800dbe2:	1b87      	subs	r7, r0, r6
 800dbe4:	4639      	mov	r1, r7
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	f000 fee2 	bl	800e9b0 <__any_on>
 800dbec:	4682      	mov	sl, r0
 800dbee:	b1a8      	cbz	r0, 800dc1c <__gethex+0x1f8>
 800dbf0:	1e7b      	subs	r3, r7, #1
 800dbf2:	1159      	asrs	r1, r3, #5
 800dbf4:	f003 021f 	and.w	r2, r3, #31
 800dbf8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dbfc:	f04f 0a01 	mov.w	sl, #1
 800dc00:	fa0a f202 	lsl.w	r2, sl, r2
 800dc04:	420a      	tst	r2, r1
 800dc06:	d009      	beq.n	800dc1c <__gethex+0x1f8>
 800dc08:	4553      	cmp	r3, sl
 800dc0a:	dd05      	ble.n	800dc18 <__gethex+0x1f4>
 800dc0c:	1eb9      	subs	r1, r7, #2
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f000 fece 	bl	800e9b0 <__any_on>
 800dc14:	2800      	cmp	r0, #0
 800dc16:	d145      	bne.n	800dca4 <__gethex+0x280>
 800dc18:	f04f 0a02 	mov.w	sl, #2
 800dc1c:	4639      	mov	r1, r7
 800dc1e:	4620      	mov	r0, r4
 800dc20:	f7ff fe98 	bl	800d954 <rshift>
 800dc24:	443d      	add	r5, r7
 800dc26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc2a:	42ab      	cmp	r3, r5
 800dc2c:	da4c      	bge.n	800dcc8 <__gethex+0x2a4>
 800dc2e:	ee18 0a10 	vmov	r0, s16
 800dc32:	4621      	mov	r1, r4
 800dc34:	f000 fa5c 	bl	800e0f0 <_Bfree>
 800dc38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	6013      	str	r3, [r2, #0]
 800dc3e:	27a3      	movs	r7, #163	; 0xa3
 800dc40:	e785      	b.n	800db4e <__gethex+0x12a>
 800dc42:	1e73      	subs	r3, r6, #1
 800dc44:	9a05      	ldr	r2, [sp, #20]
 800dc46:	9303      	str	r3, [sp, #12]
 800dc48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d019      	beq.n	800dc84 <__gethex+0x260>
 800dc50:	f1bb 0f20 	cmp.w	fp, #32
 800dc54:	d107      	bne.n	800dc66 <__gethex+0x242>
 800dc56:	9b02      	ldr	r3, [sp, #8]
 800dc58:	9a00      	ldr	r2, [sp, #0]
 800dc5a:	f843 2b04 	str.w	r2, [r3], #4
 800dc5e:	9302      	str	r3, [sp, #8]
 800dc60:	2300      	movs	r3, #0
 800dc62:	9300      	str	r3, [sp, #0]
 800dc64:	469b      	mov	fp, r3
 800dc66:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dc6a:	f7ff fec5 	bl	800d9f8 <__hexdig_fun>
 800dc6e:	9b00      	ldr	r3, [sp, #0]
 800dc70:	f000 000f 	and.w	r0, r0, #15
 800dc74:	fa00 f00b 	lsl.w	r0, r0, fp
 800dc78:	4303      	orrs	r3, r0
 800dc7a:	9300      	str	r3, [sp, #0]
 800dc7c:	f10b 0b04 	add.w	fp, fp, #4
 800dc80:	9b03      	ldr	r3, [sp, #12]
 800dc82:	e00d      	b.n	800dca0 <__gethex+0x27c>
 800dc84:	9b03      	ldr	r3, [sp, #12]
 800dc86:	9a06      	ldr	r2, [sp, #24]
 800dc88:	4413      	add	r3, r2
 800dc8a:	42bb      	cmp	r3, r7
 800dc8c:	d3e0      	bcc.n	800dc50 <__gethex+0x22c>
 800dc8e:	4618      	mov	r0, r3
 800dc90:	9901      	ldr	r1, [sp, #4]
 800dc92:	9307      	str	r3, [sp, #28]
 800dc94:	4652      	mov	r2, sl
 800dc96:	f001 f917 	bl	800eec8 <strncmp>
 800dc9a:	9b07      	ldr	r3, [sp, #28]
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d1d7      	bne.n	800dc50 <__gethex+0x22c>
 800dca0:	461e      	mov	r6, r3
 800dca2:	e78b      	b.n	800dbbc <__gethex+0x198>
 800dca4:	f04f 0a03 	mov.w	sl, #3
 800dca8:	e7b8      	b.n	800dc1c <__gethex+0x1f8>
 800dcaa:	da0a      	bge.n	800dcc2 <__gethex+0x29e>
 800dcac:	1a37      	subs	r7, r6, r0
 800dcae:	4621      	mov	r1, r4
 800dcb0:	ee18 0a10 	vmov	r0, s16
 800dcb4:	463a      	mov	r2, r7
 800dcb6:	f000 fc37 	bl	800e528 <__lshift>
 800dcba:	1bed      	subs	r5, r5, r7
 800dcbc:	4604      	mov	r4, r0
 800dcbe:	f100 0914 	add.w	r9, r0, #20
 800dcc2:	f04f 0a00 	mov.w	sl, #0
 800dcc6:	e7ae      	b.n	800dc26 <__gethex+0x202>
 800dcc8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dccc:	42a8      	cmp	r0, r5
 800dcce:	dd72      	ble.n	800ddb6 <__gethex+0x392>
 800dcd0:	1b45      	subs	r5, r0, r5
 800dcd2:	42ae      	cmp	r6, r5
 800dcd4:	dc36      	bgt.n	800dd44 <__gethex+0x320>
 800dcd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dcda:	2b02      	cmp	r3, #2
 800dcdc:	d02a      	beq.n	800dd34 <__gethex+0x310>
 800dcde:	2b03      	cmp	r3, #3
 800dce0:	d02c      	beq.n	800dd3c <__gethex+0x318>
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d11c      	bne.n	800dd20 <__gethex+0x2fc>
 800dce6:	42ae      	cmp	r6, r5
 800dce8:	d11a      	bne.n	800dd20 <__gethex+0x2fc>
 800dcea:	2e01      	cmp	r6, #1
 800dcec:	d112      	bne.n	800dd14 <__gethex+0x2f0>
 800dcee:	9a04      	ldr	r2, [sp, #16]
 800dcf0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dcf4:	6013      	str	r3, [r2, #0]
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	6123      	str	r3, [r4, #16]
 800dcfa:	f8c9 3000 	str.w	r3, [r9]
 800dcfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dd00:	2762      	movs	r7, #98	; 0x62
 800dd02:	601c      	str	r4, [r3, #0]
 800dd04:	e723      	b.n	800db4e <__gethex+0x12a>
 800dd06:	bf00      	nop
 800dd08:	08011970 	.word	0x08011970
 800dd0c:	080118f8 	.word	0x080118f8
 800dd10:	08011909 	.word	0x08011909
 800dd14:	1e71      	subs	r1, r6, #1
 800dd16:	4620      	mov	r0, r4
 800dd18:	f000 fe4a 	bl	800e9b0 <__any_on>
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	d1e6      	bne.n	800dcee <__gethex+0x2ca>
 800dd20:	ee18 0a10 	vmov	r0, s16
 800dd24:	4621      	mov	r1, r4
 800dd26:	f000 f9e3 	bl	800e0f0 <_Bfree>
 800dd2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	6013      	str	r3, [r2, #0]
 800dd30:	2750      	movs	r7, #80	; 0x50
 800dd32:	e70c      	b.n	800db4e <__gethex+0x12a>
 800dd34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d1f2      	bne.n	800dd20 <__gethex+0x2fc>
 800dd3a:	e7d8      	b.n	800dcee <__gethex+0x2ca>
 800dd3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d1d5      	bne.n	800dcee <__gethex+0x2ca>
 800dd42:	e7ed      	b.n	800dd20 <__gethex+0x2fc>
 800dd44:	1e6f      	subs	r7, r5, #1
 800dd46:	f1ba 0f00 	cmp.w	sl, #0
 800dd4a:	d131      	bne.n	800ddb0 <__gethex+0x38c>
 800dd4c:	b127      	cbz	r7, 800dd58 <__gethex+0x334>
 800dd4e:	4639      	mov	r1, r7
 800dd50:	4620      	mov	r0, r4
 800dd52:	f000 fe2d 	bl	800e9b0 <__any_on>
 800dd56:	4682      	mov	sl, r0
 800dd58:	117b      	asrs	r3, r7, #5
 800dd5a:	2101      	movs	r1, #1
 800dd5c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dd60:	f007 071f 	and.w	r7, r7, #31
 800dd64:	fa01 f707 	lsl.w	r7, r1, r7
 800dd68:	421f      	tst	r7, r3
 800dd6a:	4629      	mov	r1, r5
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	bf18      	it	ne
 800dd70:	f04a 0a02 	orrne.w	sl, sl, #2
 800dd74:	1b76      	subs	r6, r6, r5
 800dd76:	f7ff fded 	bl	800d954 <rshift>
 800dd7a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dd7e:	2702      	movs	r7, #2
 800dd80:	f1ba 0f00 	cmp.w	sl, #0
 800dd84:	d048      	beq.n	800de18 <__gethex+0x3f4>
 800dd86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	d015      	beq.n	800ddba <__gethex+0x396>
 800dd8e:	2b03      	cmp	r3, #3
 800dd90:	d017      	beq.n	800ddc2 <__gethex+0x39e>
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d109      	bne.n	800ddaa <__gethex+0x386>
 800dd96:	f01a 0f02 	tst.w	sl, #2
 800dd9a:	d006      	beq.n	800ddaa <__gethex+0x386>
 800dd9c:	f8d9 0000 	ldr.w	r0, [r9]
 800dda0:	ea4a 0a00 	orr.w	sl, sl, r0
 800dda4:	f01a 0f01 	tst.w	sl, #1
 800dda8:	d10e      	bne.n	800ddc8 <__gethex+0x3a4>
 800ddaa:	f047 0710 	orr.w	r7, r7, #16
 800ddae:	e033      	b.n	800de18 <__gethex+0x3f4>
 800ddb0:	f04f 0a01 	mov.w	sl, #1
 800ddb4:	e7d0      	b.n	800dd58 <__gethex+0x334>
 800ddb6:	2701      	movs	r7, #1
 800ddb8:	e7e2      	b.n	800dd80 <__gethex+0x35c>
 800ddba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddbc:	f1c3 0301 	rsb	r3, r3, #1
 800ddc0:	9315      	str	r3, [sp, #84]	; 0x54
 800ddc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d0f0      	beq.n	800ddaa <__gethex+0x386>
 800ddc8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ddcc:	f104 0314 	add.w	r3, r4, #20
 800ddd0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ddd4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ddd8:	f04f 0c00 	mov.w	ip, #0
 800dddc:	4618      	mov	r0, r3
 800ddde:	f853 2b04 	ldr.w	r2, [r3], #4
 800dde2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dde6:	d01c      	beq.n	800de22 <__gethex+0x3fe>
 800dde8:	3201      	adds	r2, #1
 800ddea:	6002      	str	r2, [r0, #0]
 800ddec:	2f02      	cmp	r7, #2
 800ddee:	f104 0314 	add.w	r3, r4, #20
 800ddf2:	d13f      	bne.n	800de74 <__gethex+0x450>
 800ddf4:	f8d8 2000 	ldr.w	r2, [r8]
 800ddf8:	3a01      	subs	r2, #1
 800ddfa:	42b2      	cmp	r2, r6
 800ddfc:	d10a      	bne.n	800de14 <__gethex+0x3f0>
 800ddfe:	1171      	asrs	r1, r6, #5
 800de00:	2201      	movs	r2, #1
 800de02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de06:	f006 061f 	and.w	r6, r6, #31
 800de0a:	fa02 f606 	lsl.w	r6, r2, r6
 800de0e:	421e      	tst	r6, r3
 800de10:	bf18      	it	ne
 800de12:	4617      	movne	r7, r2
 800de14:	f047 0720 	orr.w	r7, r7, #32
 800de18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de1a:	601c      	str	r4, [r3, #0]
 800de1c:	9b04      	ldr	r3, [sp, #16]
 800de1e:	601d      	str	r5, [r3, #0]
 800de20:	e695      	b.n	800db4e <__gethex+0x12a>
 800de22:	4299      	cmp	r1, r3
 800de24:	f843 cc04 	str.w	ip, [r3, #-4]
 800de28:	d8d8      	bhi.n	800dddc <__gethex+0x3b8>
 800de2a:	68a3      	ldr	r3, [r4, #8]
 800de2c:	459b      	cmp	fp, r3
 800de2e:	db19      	blt.n	800de64 <__gethex+0x440>
 800de30:	6861      	ldr	r1, [r4, #4]
 800de32:	ee18 0a10 	vmov	r0, s16
 800de36:	3101      	adds	r1, #1
 800de38:	f000 f91a 	bl	800e070 <_Balloc>
 800de3c:	4681      	mov	r9, r0
 800de3e:	b918      	cbnz	r0, 800de48 <__gethex+0x424>
 800de40:	4b1a      	ldr	r3, [pc, #104]	; (800deac <__gethex+0x488>)
 800de42:	4602      	mov	r2, r0
 800de44:	2184      	movs	r1, #132	; 0x84
 800de46:	e6a8      	b.n	800db9a <__gethex+0x176>
 800de48:	6922      	ldr	r2, [r4, #16]
 800de4a:	3202      	adds	r2, #2
 800de4c:	f104 010c 	add.w	r1, r4, #12
 800de50:	0092      	lsls	r2, r2, #2
 800de52:	300c      	adds	r0, #12
 800de54:	f7fd f9a0 	bl	800b198 <memcpy>
 800de58:	4621      	mov	r1, r4
 800de5a:	ee18 0a10 	vmov	r0, s16
 800de5e:	f000 f947 	bl	800e0f0 <_Bfree>
 800de62:	464c      	mov	r4, r9
 800de64:	6923      	ldr	r3, [r4, #16]
 800de66:	1c5a      	adds	r2, r3, #1
 800de68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800de6c:	6122      	str	r2, [r4, #16]
 800de6e:	2201      	movs	r2, #1
 800de70:	615a      	str	r2, [r3, #20]
 800de72:	e7bb      	b.n	800ddec <__gethex+0x3c8>
 800de74:	6922      	ldr	r2, [r4, #16]
 800de76:	455a      	cmp	r2, fp
 800de78:	dd0b      	ble.n	800de92 <__gethex+0x46e>
 800de7a:	2101      	movs	r1, #1
 800de7c:	4620      	mov	r0, r4
 800de7e:	f7ff fd69 	bl	800d954 <rshift>
 800de82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de86:	3501      	adds	r5, #1
 800de88:	42ab      	cmp	r3, r5
 800de8a:	f6ff aed0 	blt.w	800dc2e <__gethex+0x20a>
 800de8e:	2701      	movs	r7, #1
 800de90:	e7c0      	b.n	800de14 <__gethex+0x3f0>
 800de92:	f016 061f 	ands.w	r6, r6, #31
 800de96:	d0fa      	beq.n	800de8e <__gethex+0x46a>
 800de98:	4453      	add	r3, sl
 800de9a:	f1c6 0620 	rsb	r6, r6, #32
 800de9e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dea2:	f000 f9d7 	bl	800e254 <__hi0bits>
 800dea6:	42b0      	cmp	r0, r6
 800dea8:	dbe7      	blt.n	800de7a <__gethex+0x456>
 800deaa:	e7f0      	b.n	800de8e <__gethex+0x46a>
 800deac:	080118f8 	.word	0x080118f8

0800deb0 <L_shift>:
 800deb0:	f1c2 0208 	rsb	r2, r2, #8
 800deb4:	0092      	lsls	r2, r2, #2
 800deb6:	b570      	push	{r4, r5, r6, lr}
 800deb8:	f1c2 0620 	rsb	r6, r2, #32
 800debc:	6843      	ldr	r3, [r0, #4]
 800debe:	6804      	ldr	r4, [r0, #0]
 800dec0:	fa03 f506 	lsl.w	r5, r3, r6
 800dec4:	432c      	orrs	r4, r5
 800dec6:	40d3      	lsrs	r3, r2
 800dec8:	6004      	str	r4, [r0, #0]
 800deca:	f840 3f04 	str.w	r3, [r0, #4]!
 800dece:	4288      	cmp	r0, r1
 800ded0:	d3f4      	bcc.n	800debc <L_shift+0xc>
 800ded2:	bd70      	pop	{r4, r5, r6, pc}

0800ded4 <__match>:
 800ded4:	b530      	push	{r4, r5, lr}
 800ded6:	6803      	ldr	r3, [r0, #0]
 800ded8:	3301      	adds	r3, #1
 800deda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dede:	b914      	cbnz	r4, 800dee6 <__match+0x12>
 800dee0:	6003      	str	r3, [r0, #0]
 800dee2:	2001      	movs	r0, #1
 800dee4:	bd30      	pop	{r4, r5, pc}
 800dee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800deea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800deee:	2d19      	cmp	r5, #25
 800def0:	bf98      	it	ls
 800def2:	3220      	addls	r2, #32
 800def4:	42a2      	cmp	r2, r4
 800def6:	d0f0      	beq.n	800deda <__match+0x6>
 800def8:	2000      	movs	r0, #0
 800defa:	e7f3      	b.n	800dee4 <__match+0x10>

0800defc <__hexnan>:
 800defc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df00:	680b      	ldr	r3, [r1, #0]
 800df02:	115e      	asrs	r6, r3, #5
 800df04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800df08:	f013 031f 	ands.w	r3, r3, #31
 800df0c:	b087      	sub	sp, #28
 800df0e:	bf18      	it	ne
 800df10:	3604      	addne	r6, #4
 800df12:	2500      	movs	r5, #0
 800df14:	1f37      	subs	r7, r6, #4
 800df16:	4690      	mov	r8, r2
 800df18:	6802      	ldr	r2, [r0, #0]
 800df1a:	9301      	str	r3, [sp, #4]
 800df1c:	4682      	mov	sl, r0
 800df1e:	f846 5c04 	str.w	r5, [r6, #-4]
 800df22:	46b9      	mov	r9, r7
 800df24:	463c      	mov	r4, r7
 800df26:	9502      	str	r5, [sp, #8]
 800df28:	46ab      	mov	fp, r5
 800df2a:	7851      	ldrb	r1, [r2, #1]
 800df2c:	1c53      	adds	r3, r2, #1
 800df2e:	9303      	str	r3, [sp, #12]
 800df30:	b341      	cbz	r1, 800df84 <__hexnan+0x88>
 800df32:	4608      	mov	r0, r1
 800df34:	9205      	str	r2, [sp, #20]
 800df36:	9104      	str	r1, [sp, #16]
 800df38:	f7ff fd5e 	bl	800d9f8 <__hexdig_fun>
 800df3c:	2800      	cmp	r0, #0
 800df3e:	d14f      	bne.n	800dfe0 <__hexnan+0xe4>
 800df40:	9904      	ldr	r1, [sp, #16]
 800df42:	9a05      	ldr	r2, [sp, #20]
 800df44:	2920      	cmp	r1, #32
 800df46:	d818      	bhi.n	800df7a <__hexnan+0x7e>
 800df48:	9b02      	ldr	r3, [sp, #8]
 800df4a:	459b      	cmp	fp, r3
 800df4c:	dd13      	ble.n	800df76 <__hexnan+0x7a>
 800df4e:	454c      	cmp	r4, r9
 800df50:	d206      	bcs.n	800df60 <__hexnan+0x64>
 800df52:	2d07      	cmp	r5, #7
 800df54:	dc04      	bgt.n	800df60 <__hexnan+0x64>
 800df56:	462a      	mov	r2, r5
 800df58:	4649      	mov	r1, r9
 800df5a:	4620      	mov	r0, r4
 800df5c:	f7ff ffa8 	bl	800deb0 <L_shift>
 800df60:	4544      	cmp	r4, r8
 800df62:	d950      	bls.n	800e006 <__hexnan+0x10a>
 800df64:	2300      	movs	r3, #0
 800df66:	f1a4 0904 	sub.w	r9, r4, #4
 800df6a:	f844 3c04 	str.w	r3, [r4, #-4]
 800df6e:	f8cd b008 	str.w	fp, [sp, #8]
 800df72:	464c      	mov	r4, r9
 800df74:	461d      	mov	r5, r3
 800df76:	9a03      	ldr	r2, [sp, #12]
 800df78:	e7d7      	b.n	800df2a <__hexnan+0x2e>
 800df7a:	2929      	cmp	r1, #41	; 0x29
 800df7c:	d156      	bne.n	800e02c <__hexnan+0x130>
 800df7e:	3202      	adds	r2, #2
 800df80:	f8ca 2000 	str.w	r2, [sl]
 800df84:	f1bb 0f00 	cmp.w	fp, #0
 800df88:	d050      	beq.n	800e02c <__hexnan+0x130>
 800df8a:	454c      	cmp	r4, r9
 800df8c:	d206      	bcs.n	800df9c <__hexnan+0xa0>
 800df8e:	2d07      	cmp	r5, #7
 800df90:	dc04      	bgt.n	800df9c <__hexnan+0xa0>
 800df92:	462a      	mov	r2, r5
 800df94:	4649      	mov	r1, r9
 800df96:	4620      	mov	r0, r4
 800df98:	f7ff ff8a 	bl	800deb0 <L_shift>
 800df9c:	4544      	cmp	r4, r8
 800df9e:	d934      	bls.n	800e00a <__hexnan+0x10e>
 800dfa0:	f1a8 0204 	sub.w	r2, r8, #4
 800dfa4:	4623      	mov	r3, r4
 800dfa6:	f853 1b04 	ldr.w	r1, [r3], #4
 800dfaa:	f842 1f04 	str.w	r1, [r2, #4]!
 800dfae:	429f      	cmp	r7, r3
 800dfb0:	d2f9      	bcs.n	800dfa6 <__hexnan+0xaa>
 800dfb2:	1b3b      	subs	r3, r7, r4
 800dfb4:	f023 0303 	bic.w	r3, r3, #3
 800dfb8:	3304      	adds	r3, #4
 800dfba:	3401      	adds	r4, #1
 800dfbc:	3e03      	subs	r6, #3
 800dfbe:	42b4      	cmp	r4, r6
 800dfc0:	bf88      	it	hi
 800dfc2:	2304      	movhi	r3, #4
 800dfc4:	4443      	add	r3, r8
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	f843 2b04 	str.w	r2, [r3], #4
 800dfcc:	429f      	cmp	r7, r3
 800dfce:	d2fb      	bcs.n	800dfc8 <__hexnan+0xcc>
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	b91b      	cbnz	r3, 800dfdc <__hexnan+0xe0>
 800dfd4:	4547      	cmp	r7, r8
 800dfd6:	d127      	bne.n	800e028 <__hexnan+0x12c>
 800dfd8:	2301      	movs	r3, #1
 800dfda:	603b      	str	r3, [r7, #0]
 800dfdc:	2005      	movs	r0, #5
 800dfde:	e026      	b.n	800e02e <__hexnan+0x132>
 800dfe0:	3501      	adds	r5, #1
 800dfe2:	2d08      	cmp	r5, #8
 800dfe4:	f10b 0b01 	add.w	fp, fp, #1
 800dfe8:	dd06      	ble.n	800dff8 <__hexnan+0xfc>
 800dfea:	4544      	cmp	r4, r8
 800dfec:	d9c3      	bls.n	800df76 <__hexnan+0x7a>
 800dfee:	2300      	movs	r3, #0
 800dff0:	f844 3c04 	str.w	r3, [r4, #-4]
 800dff4:	2501      	movs	r5, #1
 800dff6:	3c04      	subs	r4, #4
 800dff8:	6822      	ldr	r2, [r4, #0]
 800dffa:	f000 000f 	and.w	r0, r0, #15
 800dffe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e002:	6022      	str	r2, [r4, #0]
 800e004:	e7b7      	b.n	800df76 <__hexnan+0x7a>
 800e006:	2508      	movs	r5, #8
 800e008:	e7b5      	b.n	800df76 <__hexnan+0x7a>
 800e00a:	9b01      	ldr	r3, [sp, #4]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d0df      	beq.n	800dfd0 <__hexnan+0xd4>
 800e010:	f04f 32ff 	mov.w	r2, #4294967295
 800e014:	f1c3 0320 	rsb	r3, r3, #32
 800e018:	fa22 f303 	lsr.w	r3, r2, r3
 800e01c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e020:	401a      	ands	r2, r3
 800e022:	f846 2c04 	str.w	r2, [r6, #-4]
 800e026:	e7d3      	b.n	800dfd0 <__hexnan+0xd4>
 800e028:	3f04      	subs	r7, #4
 800e02a:	e7d1      	b.n	800dfd0 <__hexnan+0xd4>
 800e02c:	2004      	movs	r0, #4
 800e02e:	b007      	add	sp, #28
 800e030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e034 <_localeconv_r>:
 800e034:	4800      	ldr	r0, [pc, #0]	; (800e038 <_localeconv_r+0x4>)
 800e036:	4770      	bx	lr
 800e038:	2000038c 	.word	0x2000038c

0800e03c <malloc>:
 800e03c:	4b02      	ldr	r3, [pc, #8]	; (800e048 <malloc+0xc>)
 800e03e:	4601      	mov	r1, r0
 800e040:	6818      	ldr	r0, [r3, #0]
 800e042:	f000 bd59 	b.w	800eaf8 <_malloc_r>
 800e046:	bf00      	nop
 800e048:	20000234 	.word	0x20000234

0800e04c <__ascii_mbtowc>:
 800e04c:	b082      	sub	sp, #8
 800e04e:	b901      	cbnz	r1, 800e052 <__ascii_mbtowc+0x6>
 800e050:	a901      	add	r1, sp, #4
 800e052:	b142      	cbz	r2, 800e066 <__ascii_mbtowc+0x1a>
 800e054:	b14b      	cbz	r3, 800e06a <__ascii_mbtowc+0x1e>
 800e056:	7813      	ldrb	r3, [r2, #0]
 800e058:	600b      	str	r3, [r1, #0]
 800e05a:	7812      	ldrb	r2, [r2, #0]
 800e05c:	1e10      	subs	r0, r2, #0
 800e05e:	bf18      	it	ne
 800e060:	2001      	movne	r0, #1
 800e062:	b002      	add	sp, #8
 800e064:	4770      	bx	lr
 800e066:	4610      	mov	r0, r2
 800e068:	e7fb      	b.n	800e062 <__ascii_mbtowc+0x16>
 800e06a:	f06f 0001 	mvn.w	r0, #1
 800e06e:	e7f8      	b.n	800e062 <__ascii_mbtowc+0x16>

0800e070 <_Balloc>:
 800e070:	b570      	push	{r4, r5, r6, lr}
 800e072:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e074:	4604      	mov	r4, r0
 800e076:	460d      	mov	r5, r1
 800e078:	b976      	cbnz	r6, 800e098 <_Balloc+0x28>
 800e07a:	2010      	movs	r0, #16
 800e07c:	f7ff ffde 	bl	800e03c <malloc>
 800e080:	4602      	mov	r2, r0
 800e082:	6260      	str	r0, [r4, #36]	; 0x24
 800e084:	b920      	cbnz	r0, 800e090 <_Balloc+0x20>
 800e086:	4b18      	ldr	r3, [pc, #96]	; (800e0e8 <_Balloc+0x78>)
 800e088:	4818      	ldr	r0, [pc, #96]	; (800e0ec <_Balloc+0x7c>)
 800e08a:	2166      	movs	r1, #102	; 0x66
 800e08c:	f000 ff3e 	bl	800ef0c <__assert_func>
 800e090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e094:	6006      	str	r6, [r0, #0]
 800e096:	60c6      	str	r6, [r0, #12]
 800e098:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e09a:	68f3      	ldr	r3, [r6, #12]
 800e09c:	b183      	cbz	r3, 800e0c0 <_Balloc+0x50>
 800e09e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0a0:	68db      	ldr	r3, [r3, #12]
 800e0a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0a6:	b9b8      	cbnz	r0, 800e0d8 <_Balloc+0x68>
 800e0a8:	2101      	movs	r1, #1
 800e0aa:	fa01 f605 	lsl.w	r6, r1, r5
 800e0ae:	1d72      	adds	r2, r6, #5
 800e0b0:	0092      	lsls	r2, r2, #2
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f000 fc9d 	bl	800e9f2 <_calloc_r>
 800e0b8:	b160      	cbz	r0, 800e0d4 <_Balloc+0x64>
 800e0ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e0be:	e00e      	b.n	800e0de <_Balloc+0x6e>
 800e0c0:	2221      	movs	r2, #33	; 0x21
 800e0c2:	2104      	movs	r1, #4
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f000 fc94 	bl	800e9f2 <_calloc_r>
 800e0ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0cc:	60f0      	str	r0, [r6, #12]
 800e0ce:	68db      	ldr	r3, [r3, #12]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d1e4      	bne.n	800e09e <_Balloc+0x2e>
 800e0d4:	2000      	movs	r0, #0
 800e0d6:	bd70      	pop	{r4, r5, r6, pc}
 800e0d8:	6802      	ldr	r2, [r0, #0]
 800e0da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e0de:	2300      	movs	r3, #0
 800e0e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e0e4:	e7f7      	b.n	800e0d6 <_Balloc+0x66>
 800e0e6:	bf00      	nop
 800e0e8:	08011886 	.word	0x08011886
 800e0ec:	08011984 	.word	0x08011984

0800e0f0 <_Bfree>:
 800e0f0:	b570      	push	{r4, r5, r6, lr}
 800e0f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e0f4:	4605      	mov	r5, r0
 800e0f6:	460c      	mov	r4, r1
 800e0f8:	b976      	cbnz	r6, 800e118 <_Bfree+0x28>
 800e0fa:	2010      	movs	r0, #16
 800e0fc:	f7ff ff9e 	bl	800e03c <malloc>
 800e100:	4602      	mov	r2, r0
 800e102:	6268      	str	r0, [r5, #36]	; 0x24
 800e104:	b920      	cbnz	r0, 800e110 <_Bfree+0x20>
 800e106:	4b09      	ldr	r3, [pc, #36]	; (800e12c <_Bfree+0x3c>)
 800e108:	4809      	ldr	r0, [pc, #36]	; (800e130 <_Bfree+0x40>)
 800e10a:	218a      	movs	r1, #138	; 0x8a
 800e10c:	f000 fefe 	bl	800ef0c <__assert_func>
 800e110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e114:	6006      	str	r6, [r0, #0]
 800e116:	60c6      	str	r6, [r0, #12]
 800e118:	b13c      	cbz	r4, 800e12a <_Bfree+0x3a>
 800e11a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e11c:	6862      	ldr	r2, [r4, #4]
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e124:	6021      	str	r1, [r4, #0]
 800e126:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e12a:	bd70      	pop	{r4, r5, r6, pc}
 800e12c:	08011886 	.word	0x08011886
 800e130:	08011984 	.word	0x08011984

0800e134 <__multadd>:
 800e134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e138:	690d      	ldr	r5, [r1, #16]
 800e13a:	4607      	mov	r7, r0
 800e13c:	460c      	mov	r4, r1
 800e13e:	461e      	mov	r6, r3
 800e140:	f101 0c14 	add.w	ip, r1, #20
 800e144:	2000      	movs	r0, #0
 800e146:	f8dc 3000 	ldr.w	r3, [ip]
 800e14a:	b299      	uxth	r1, r3
 800e14c:	fb02 6101 	mla	r1, r2, r1, r6
 800e150:	0c1e      	lsrs	r6, r3, #16
 800e152:	0c0b      	lsrs	r3, r1, #16
 800e154:	fb02 3306 	mla	r3, r2, r6, r3
 800e158:	b289      	uxth	r1, r1
 800e15a:	3001      	adds	r0, #1
 800e15c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e160:	4285      	cmp	r5, r0
 800e162:	f84c 1b04 	str.w	r1, [ip], #4
 800e166:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e16a:	dcec      	bgt.n	800e146 <__multadd+0x12>
 800e16c:	b30e      	cbz	r6, 800e1b2 <__multadd+0x7e>
 800e16e:	68a3      	ldr	r3, [r4, #8]
 800e170:	42ab      	cmp	r3, r5
 800e172:	dc19      	bgt.n	800e1a8 <__multadd+0x74>
 800e174:	6861      	ldr	r1, [r4, #4]
 800e176:	4638      	mov	r0, r7
 800e178:	3101      	adds	r1, #1
 800e17a:	f7ff ff79 	bl	800e070 <_Balloc>
 800e17e:	4680      	mov	r8, r0
 800e180:	b928      	cbnz	r0, 800e18e <__multadd+0x5a>
 800e182:	4602      	mov	r2, r0
 800e184:	4b0c      	ldr	r3, [pc, #48]	; (800e1b8 <__multadd+0x84>)
 800e186:	480d      	ldr	r0, [pc, #52]	; (800e1bc <__multadd+0x88>)
 800e188:	21b5      	movs	r1, #181	; 0xb5
 800e18a:	f000 febf 	bl	800ef0c <__assert_func>
 800e18e:	6922      	ldr	r2, [r4, #16]
 800e190:	3202      	adds	r2, #2
 800e192:	f104 010c 	add.w	r1, r4, #12
 800e196:	0092      	lsls	r2, r2, #2
 800e198:	300c      	adds	r0, #12
 800e19a:	f7fc fffd 	bl	800b198 <memcpy>
 800e19e:	4621      	mov	r1, r4
 800e1a0:	4638      	mov	r0, r7
 800e1a2:	f7ff ffa5 	bl	800e0f0 <_Bfree>
 800e1a6:	4644      	mov	r4, r8
 800e1a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1ac:	3501      	adds	r5, #1
 800e1ae:	615e      	str	r6, [r3, #20]
 800e1b0:	6125      	str	r5, [r4, #16]
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1b8:	080118f8 	.word	0x080118f8
 800e1bc:	08011984 	.word	0x08011984

0800e1c0 <__s2b>:
 800e1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1c4:	460c      	mov	r4, r1
 800e1c6:	4615      	mov	r5, r2
 800e1c8:	461f      	mov	r7, r3
 800e1ca:	2209      	movs	r2, #9
 800e1cc:	3308      	adds	r3, #8
 800e1ce:	4606      	mov	r6, r0
 800e1d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	db09      	blt.n	800e1f0 <__s2b+0x30>
 800e1dc:	4630      	mov	r0, r6
 800e1de:	f7ff ff47 	bl	800e070 <_Balloc>
 800e1e2:	b940      	cbnz	r0, 800e1f6 <__s2b+0x36>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	4b19      	ldr	r3, [pc, #100]	; (800e24c <__s2b+0x8c>)
 800e1e8:	4819      	ldr	r0, [pc, #100]	; (800e250 <__s2b+0x90>)
 800e1ea:	21ce      	movs	r1, #206	; 0xce
 800e1ec:	f000 fe8e 	bl	800ef0c <__assert_func>
 800e1f0:	0052      	lsls	r2, r2, #1
 800e1f2:	3101      	adds	r1, #1
 800e1f4:	e7f0      	b.n	800e1d8 <__s2b+0x18>
 800e1f6:	9b08      	ldr	r3, [sp, #32]
 800e1f8:	6143      	str	r3, [r0, #20]
 800e1fa:	2d09      	cmp	r5, #9
 800e1fc:	f04f 0301 	mov.w	r3, #1
 800e200:	6103      	str	r3, [r0, #16]
 800e202:	dd16      	ble.n	800e232 <__s2b+0x72>
 800e204:	f104 0909 	add.w	r9, r4, #9
 800e208:	46c8      	mov	r8, r9
 800e20a:	442c      	add	r4, r5
 800e20c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e210:	4601      	mov	r1, r0
 800e212:	3b30      	subs	r3, #48	; 0x30
 800e214:	220a      	movs	r2, #10
 800e216:	4630      	mov	r0, r6
 800e218:	f7ff ff8c 	bl	800e134 <__multadd>
 800e21c:	45a0      	cmp	r8, r4
 800e21e:	d1f5      	bne.n	800e20c <__s2b+0x4c>
 800e220:	f1a5 0408 	sub.w	r4, r5, #8
 800e224:	444c      	add	r4, r9
 800e226:	1b2d      	subs	r5, r5, r4
 800e228:	1963      	adds	r3, r4, r5
 800e22a:	42bb      	cmp	r3, r7
 800e22c:	db04      	blt.n	800e238 <__s2b+0x78>
 800e22e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e232:	340a      	adds	r4, #10
 800e234:	2509      	movs	r5, #9
 800e236:	e7f6      	b.n	800e226 <__s2b+0x66>
 800e238:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e23c:	4601      	mov	r1, r0
 800e23e:	3b30      	subs	r3, #48	; 0x30
 800e240:	220a      	movs	r2, #10
 800e242:	4630      	mov	r0, r6
 800e244:	f7ff ff76 	bl	800e134 <__multadd>
 800e248:	e7ee      	b.n	800e228 <__s2b+0x68>
 800e24a:	bf00      	nop
 800e24c:	080118f8 	.word	0x080118f8
 800e250:	08011984 	.word	0x08011984

0800e254 <__hi0bits>:
 800e254:	0c03      	lsrs	r3, r0, #16
 800e256:	041b      	lsls	r3, r3, #16
 800e258:	b9d3      	cbnz	r3, 800e290 <__hi0bits+0x3c>
 800e25a:	0400      	lsls	r0, r0, #16
 800e25c:	2310      	movs	r3, #16
 800e25e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e262:	bf04      	itt	eq
 800e264:	0200      	lsleq	r0, r0, #8
 800e266:	3308      	addeq	r3, #8
 800e268:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e26c:	bf04      	itt	eq
 800e26e:	0100      	lsleq	r0, r0, #4
 800e270:	3304      	addeq	r3, #4
 800e272:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e276:	bf04      	itt	eq
 800e278:	0080      	lsleq	r0, r0, #2
 800e27a:	3302      	addeq	r3, #2
 800e27c:	2800      	cmp	r0, #0
 800e27e:	db05      	blt.n	800e28c <__hi0bits+0x38>
 800e280:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e284:	f103 0301 	add.w	r3, r3, #1
 800e288:	bf08      	it	eq
 800e28a:	2320      	moveq	r3, #32
 800e28c:	4618      	mov	r0, r3
 800e28e:	4770      	bx	lr
 800e290:	2300      	movs	r3, #0
 800e292:	e7e4      	b.n	800e25e <__hi0bits+0xa>

0800e294 <__lo0bits>:
 800e294:	6803      	ldr	r3, [r0, #0]
 800e296:	f013 0207 	ands.w	r2, r3, #7
 800e29a:	4601      	mov	r1, r0
 800e29c:	d00b      	beq.n	800e2b6 <__lo0bits+0x22>
 800e29e:	07da      	lsls	r2, r3, #31
 800e2a0:	d423      	bmi.n	800e2ea <__lo0bits+0x56>
 800e2a2:	0798      	lsls	r0, r3, #30
 800e2a4:	bf49      	itett	mi
 800e2a6:	085b      	lsrmi	r3, r3, #1
 800e2a8:	089b      	lsrpl	r3, r3, #2
 800e2aa:	2001      	movmi	r0, #1
 800e2ac:	600b      	strmi	r3, [r1, #0]
 800e2ae:	bf5c      	itt	pl
 800e2b0:	600b      	strpl	r3, [r1, #0]
 800e2b2:	2002      	movpl	r0, #2
 800e2b4:	4770      	bx	lr
 800e2b6:	b298      	uxth	r0, r3
 800e2b8:	b9a8      	cbnz	r0, 800e2e6 <__lo0bits+0x52>
 800e2ba:	0c1b      	lsrs	r3, r3, #16
 800e2bc:	2010      	movs	r0, #16
 800e2be:	b2da      	uxtb	r2, r3
 800e2c0:	b90a      	cbnz	r2, 800e2c6 <__lo0bits+0x32>
 800e2c2:	3008      	adds	r0, #8
 800e2c4:	0a1b      	lsrs	r3, r3, #8
 800e2c6:	071a      	lsls	r2, r3, #28
 800e2c8:	bf04      	itt	eq
 800e2ca:	091b      	lsreq	r3, r3, #4
 800e2cc:	3004      	addeq	r0, #4
 800e2ce:	079a      	lsls	r2, r3, #30
 800e2d0:	bf04      	itt	eq
 800e2d2:	089b      	lsreq	r3, r3, #2
 800e2d4:	3002      	addeq	r0, #2
 800e2d6:	07da      	lsls	r2, r3, #31
 800e2d8:	d403      	bmi.n	800e2e2 <__lo0bits+0x4e>
 800e2da:	085b      	lsrs	r3, r3, #1
 800e2dc:	f100 0001 	add.w	r0, r0, #1
 800e2e0:	d005      	beq.n	800e2ee <__lo0bits+0x5a>
 800e2e2:	600b      	str	r3, [r1, #0]
 800e2e4:	4770      	bx	lr
 800e2e6:	4610      	mov	r0, r2
 800e2e8:	e7e9      	b.n	800e2be <__lo0bits+0x2a>
 800e2ea:	2000      	movs	r0, #0
 800e2ec:	4770      	bx	lr
 800e2ee:	2020      	movs	r0, #32
 800e2f0:	4770      	bx	lr
	...

0800e2f4 <__i2b>:
 800e2f4:	b510      	push	{r4, lr}
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	2101      	movs	r1, #1
 800e2fa:	f7ff feb9 	bl	800e070 <_Balloc>
 800e2fe:	4602      	mov	r2, r0
 800e300:	b928      	cbnz	r0, 800e30e <__i2b+0x1a>
 800e302:	4b05      	ldr	r3, [pc, #20]	; (800e318 <__i2b+0x24>)
 800e304:	4805      	ldr	r0, [pc, #20]	; (800e31c <__i2b+0x28>)
 800e306:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e30a:	f000 fdff 	bl	800ef0c <__assert_func>
 800e30e:	2301      	movs	r3, #1
 800e310:	6144      	str	r4, [r0, #20]
 800e312:	6103      	str	r3, [r0, #16]
 800e314:	bd10      	pop	{r4, pc}
 800e316:	bf00      	nop
 800e318:	080118f8 	.word	0x080118f8
 800e31c:	08011984 	.word	0x08011984

0800e320 <__multiply>:
 800e320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e324:	4691      	mov	r9, r2
 800e326:	690a      	ldr	r2, [r1, #16]
 800e328:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	bfb8      	it	lt
 800e330:	460b      	movlt	r3, r1
 800e332:	460c      	mov	r4, r1
 800e334:	bfbc      	itt	lt
 800e336:	464c      	movlt	r4, r9
 800e338:	4699      	movlt	r9, r3
 800e33a:	6927      	ldr	r7, [r4, #16]
 800e33c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e340:	68a3      	ldr	r3, [r4, #8]
 800e342:	6861      	ldr	r1, [r4, #4]
 800e344:	eb07 060a 	add.w	r6, r7, sl
 800e348:	42b3      	cmp	r3, r6
 800e34a:	b085      	sub	sp, #20
 800e34c:	bfb8      	it	lt
 800e34e:	3101      	addlt	r1, #1
 800e350:	f7ff fe8e 	bl	800e070 <_Balloc>
 800e354:	b930      	cbnz	r0, 800e364 <__multiply+0x44>
 800e356:	4602      	mov	r2, r0
 800e358:	4b44      	ldr	r3, [pc, #272]	; (800e46c <__multiply+0x14c>)
 800e35a:	4845      	ldr	r0, [pc, #276]	; (800e470 <__multiply+0x150>)
 800e35c:	f240 115d 	movw	r1, #349	; 0x15d
 800e360:	f000 fdd4 	bl	800ef0c <__assert_func>
 800e364:	f100 0514 	add.w	r5, r0, #20
 800e368:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e36c:	462b      	mov	r3, r5
 800e36e:	2200      	movs	r2, #0
 800e370:	4543      	cmp	r3, r8
 800e372:	d321      	bcc.n	800e3b8 <__multiply+0x98>
 800e374:	f104 0314 	add.w	r3, r4, #20
 800e378:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e37c:	f109 0314 	add.w	r3, r9, #20
 800e380:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e384:	9202      	str	r2, [sp, #8]
 800e386:	1b3a      	subs	r2, r7, r4
 800e388:	3a15      	subs	r2, #21
 800e38a:	f022 0203 	bic.w	r2, r2, #3
 800e38e:	3204      	adds	r2, #4
 800e390:	f104 0115 	add.w	r1, r4, #21
 800e394:	428f      	cmp	r7, r1
 800e396:	bf38      	it	cc
 800e398:	2204      	movcc	r2, #4
 800e39a:	9201      	str	r2, [sp, #4]
 800e39c:	9a02      	ldr	r2, [sp, #8]
 800e39e:	9303      	str	r3, [sp, #12]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d80c      	bhi.n	800e3be <__multiply+0x9e>
 800e3a4:	2e00      	cmp	r6, #0
 800e3a6:	dd03      	ble.n	800e3b0 <__multiply+0x90>
 800e3a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d05a      	beq.n	800e466 <__multiply+0x146>
 800e3b0:	6106      	str	r6, [r0, #16]
 800e3b2:	b005      	add	sp, #20
 800e3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b8:	f843 2b04 	str.w	r2, [r3], #4
 800e3bc:	e7d8      	b.n	800e370 <__multiply+0x50>
 800e3be:	f8b3 a000 	ldrh.w	sl, [r3]
 800e3c2:	f1ba 0f00 	cmp.w	sl, #0
 800e3c6:	d024      	beq.n	800e412 <__multiply+0xf2>
 800e3c8:	f104 0e14 	add.w	lr, r4, #20
 800e3cc:	46a9      	mov	r9, r5
 800e3ce:	f04f 0c00 	mov.w	ip, #0
 800e3d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e3d6:	f8d9 1000 	ldr.w	r1, [r9]
 800e3da:	fa1f fb82 	uxth.w	fp, r2
 800e3de:	b289      	uxth	r1, r1
 800e3e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e3e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e3e8:	f8d9 2000 	ldr.w	r2, [r9]
 800e3ec:	4461      	add	r1, ip
 800e3ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e3f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800e3f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e3fa:	b289      	uxth	r1, r1
 800e3fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e400:	4577      	cmp	r7, lr
 800e402:	f849 1b04 	str.w	r1, [r9], #4
 800e406:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e40a:	d8e2      	bhi.n	800e3d2 <__multiply+0xb2>
 800e40c:	9a01      	ldr	r2, [sp, #4]
 800e40e:	f845 c002 	str.w	ip, [r5, r2]
 800e412:	9a03      	ldr	r2, [sp, #12]
 800e414:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e418:	3304      	adds	r3, #4
 800e41a:	f1b9 0f00 	cmp.w	r9, #0
 800e41e:	d020      	beq.n	800e462 <__multiply+0x142>
 800e420:	6829      	ldr	r1, [r5, #0]
 800e422:	f104 0c14 	add.w	ip, r4, #20
 800e426:	46ae      	mov	lr, r5
 800e428:	f04f 0a00 	mov.w	sl, #0
 800e42c:	f8bc b000 	ldrh.w	fp, [ip]
 800e430:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e434:	fb09 220b 	mla	r2, r9, fp, r2
 800e438:	4492      	add	sl, r2
 800e43a:	b289      	uxth	r1, r1
 800e43c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e440:	f84e 1b04 	str.w	r1, [lr], #4
 800e444:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e448:	f8be 1000 	ldrh.w	r1, [lr]
 800e44c:	0c12      	lsrs	r2, r2, #16
 800e44e:	fb09 1102 	mla	r1, r9, r2, r1
 800e452:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e456:	4567      	cmp	r7, ip
 800e458:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e45c:	d8e6      	bhi.n	800e42c <__multiply+0x10c>
 800e45e:	9a01      	ldr	r2, [sp, #4]
 800e460:	50a9      	str	r1, [r5, r2]
 800e462:	3504      	adds	r5, #4
 800e464:	e79a      	b.n	800e39c <__multiply+0x7c>
 800e466:	3e01      	subs	r6, #1
 800e468:	e79c      	b.n	800e3a4 <__multiply+0x84>
 800e46a:	bf00      	nop
 800e46c:	080118f8 	.word	0x080118f8
 800e470:	08011984 	.word	0x08011984

0800e474 <__pow5mult>:
 800e474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e478:	4615      	mov	r5, r2
 800e47a:	f012 0203 	ands.w	r2, r2, #3
 800e47e:	4606      	mov	r6, r0
 800e480:	460f      	mov	r7, r1
 800e482:	d007      	beq.n	800e494 <__pow5mult+0x20>
 800e484:	4c25      	ldr	r4, [pc, #148]	; (800e51c <__pow5mult+0xa8>)
 800e486:	3a01      	subs	r2, #1
 800e488:	2300      	movs	r3, #0
 800e48a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e48e:	f7ff fe51 	bl	800e134 <__multadd>
 800e492:	4607      	mov	r7, r0
 800e494:	10ad      	asrs	r5, r5, #2
 800e496:	d03d      	beq.n	800e514 <__pow5mult+0xa0>
 800e498:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e49a:	b97c      	cbnz	r4, 800e4bc <__pow5mult+0x48>
 800e49c:	2010      	movs	r0, #16
 800e49e:	f7ff fdcd 	bl	800e03c <malloc>
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	6270      	str	r0, [r6, #36]	; 0x24
 800e4a6:	b928      	cbnz	r0, 800e4b4 <__pow5mult+0x40>
 800e4a8:	4b1d      	ldr	r3, [pc, #116]	; (800e520 <__pow5mult+0xac>)
 800e4aa:	481e      	ldr	r0, [pc, #120]	; (800e524 <__pow5mult+0xb0>)
 800e4ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e4b0:	f000 fd2c 	bl	800ef0c <__assert_func>
 800e4b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e4b8:	6004      	str	r4, [r0, #0]
 800e4ba:	60c4      	str	r4, [r0, #12]
 800e4bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e4c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e4c4:	b94c      	cbnz	r4, 800e4da <__pow5mult+0x66>
 800e4c6:	f240 2171 	movw	r1, #625	; 0x271
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	f7ff ff12 	bl	800e2f4 <__i2b>
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	6003      	str	r3, [r0, #0]
 800e4da:	f04f 0900 	mov.w	r9, #0
 800e4de:	07eb      	lsls	r3, r5, #31
 800e4e0:	d50a      	bpl.n	800e4f8 <__pow5mult+0x84>
 800e4e2:	4639      	mov	r1, r7
 800e4e4:	4622      	mov	r2, r4
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	f7ff ff1a 	bl	800e320 <__multiply>
 800e4ec:	4639      	mov	r1, r7
 800e4ee:	4680      	mov	r8, r0
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	f7ff fdfd 	bl	800e0f0 <_Bfree>
 800e4f6:	4647      	mov	r7, r8
 800e4f8:	106d      	asrs	r5, r5, #1
 800e4fa:	d00b      	beq.n	800e514 <__pow5mult+0xa0>
 800e4fc:	6820      	ldr	r0, [r4, #0]
 800e4fe:	b938      	cbnz	r0, 800e510 <__pow5mult+0x9c>
 800e500:	4622      	mov	r2, r4
 800e502:	4621      	mov	r1, r4
 800e504:	4630      	mov	r0, r6
 800e506:	f7ff ff0b 	bl	800e320 <__multiply>
 800e50a:	6020      	str	r0, [r4, #0]
 800e50c:	f8c0 9000 	str.w	r9, [r0]
 800e510:	4604      	mov	r4, r0
 800e512:	e7e4      	b.n	800e4de <__pow5mult+0x6a>
 800e514:	4638      	mov	r0, r7
 800e516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e51a:	bf00      	nop
 800e51c:	08011ad0 	.word	0x08011ad0
 800e520:	08011886 	.word	0x08011886
 800e524:	08011984 	.word	0x08011984

0800e528 <__lshift>:
 800e528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e52c:	460c      	mov	r4, r1
 800e52e:	6849      	ldr	r1, [r1, #4]
 800e530:	6923      	ldr	r3, [r4, #16]
 800e532:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e536:	68a3      	ldr	r3, [r4, #8]
 800e538:	4607      	mov	r7, r0
 800e53a:	4691      	mov	r9, r2
 800e53c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e540:	f108 0601 	add.w	r6, r8, #1
 800e544:	42b3      	cmp	r3, r6
 800e546:	db0b      	blt.n	800e560 <__lshift+0x38>
 800e548:	4638      	mov	r0, r7
 800e54a:	f7ff fd91 	bl	800e070 <_Balloc>
 800e54e:	4605      	mov	r5, r0
 800e550:	b948      	cbnz	r0, 800e566 <__lshift+0x3e>
 800e552:	4602      	mov	r2, r0
 800e554:	4b2a      	ldr	r3, [pc, #168]	; (800e600 <__lshift+0xd8>)
 800e556:	482b      	ldr	r0, [pc, #172]	; (800e604 <__lshift+0xdc>)
 800e558:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e55c:	f000 fcd6 	bl	800ef0c <__assert_func>
 800e560:	3101      	adds	r1, #1
 800e562:	005b      	lsls	r3, r3, #1
 800e564:	e7ee      	b.n	800e544 <__lshift+0x1c>
 800e566:	2300      	movs	r3, #0
 800e568:	f100 0114 	add.w	r1, r0, #20
 800e56c:	f100 0210 	add.w	r2, r0, #16
 800e570:	4618      	mov	r0, r3
 800e572:	4553      	cmp	r3, sl
 800e574:	db37      	blt.n	800e5e6 <__lshift+0xbe>
 800e576:	6920      	ldr	r0, [r4, #16]
 800e578:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e57c:	f104 0314 	add.w	r3, r4, #20
 800e580:	f019 091f 	ands.w	r9, r9, #31
 800e584:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e588:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e58c:	d02f      	beq.n	800e5ee <__lshift+0xc6>
 800e58e:	f1c9 0e20 	rsb	lr, r9, #32
 800e592:	468a      	mov	sl, r1
 800e594:	f04f 0c00 	mov.w	ip, #0
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	fa02 f209 	lsl.w	r2, r2, r9
 800e59e:	ea42 020c 	orr.w	r2, r2, ip
 800e5a2:	f84a 2b04 	str.w	r2, [sl], #4
 800e5a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5aa:	4298      	cmp	r0, r3
 800e5ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e5b0:	d8f2      	bhi.n	800e598 <__lshift+0x70>
 800e5b2:	1b03      	subs	r3, r0, r4
 800e5b4:	3b15      	subs	r3, #21
 800e5b6:	f023 0303 	bic.w	r3, r3, #3
 800e5ba:	3304      	adds	r3, #4
 800e5bc:	f104 0215 	add.w	r2, r4, #21
 800e5c0:	4290      	cmp	r0, r2
 800e5c2:	bf38      	it	cc
 800e5c4:	2304      	movcc	r3, #4
 800e5c6:	f841 c003 	str.w	ip, [r1, r3]
 800e5ca:	f1bc 0f00 	cmp.w	ip, #0
 800e5ce:	d001      	beq.n	800e5d4 <__lshift+0xac>
 800e5d0:	f108 0602 	add.w	r6, r8, #2
 800e5d4:	3e01      	subs	r6, #1
 800e5d6:	4638      	mov	r0, r7
 800e5d8:	612e      	str	r6, [r5, #16]
 800e5da:	4621      	mov	r1, r4
 800e5dc:	f7ff fd88 	bl	800e0f0 <_Bfree>
 800e5e0:	4628      	mov	r0, r5
 800e5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	e7c1      	b.n	800e572 <__lshift+0x4a>
 800e5ee:	3904      	subs	r1, #4
 800e5f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5f8:	4298      	cmp	r0, r3
 800e5fa:	d8f9      	bhi.n	800e5f0 <__lshift+0xc8>
 800e5fc:	e7ea      	b.n	800e5d4 <__lshift+0xac>
 800e5fe:	bf00      	nop
 800e600:	080118f8 	.word	0x080118f8
 800e604:	08011984 	.word	0x08011984

0800e608 <__mcmp>:
 800e608:	b530      	push	{r4, r5, lr}
 800e60a:	6902      	ldr	r2, [r0, #16]
 800e60c:	690c      	ldr	r4, [r1, #16]
 800e60e:	1b12      	subs	r2, r2, r4
 800e610:	d10e      	bne.n	800e630 <__mcmp+0x28>
 800e612:	f100 0314 	add.w	r3, r0, #20
 800e616:	3114      	adds	r1, #20
 800e618:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e61c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e620:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e624:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e628:	42a5      	cmp	r5, r4
 800e62a:	d003      	beq.n	800e634 <__mcmp+0x2c>
 800e62c:	d305      	bcc.n	800e63a <__mcmp+0x32>
 800e62e:	2201      	movs	r2, #1
 800e630:	4610      	mov	r0, r2
 800e632:	bd30      	pop	{r4, r5, pc}
 800e634:	4283      	cmp	r3, r0
 800e636:	d3f3      	bcc.n	800e620 <__mcmp+0x18>
 800e638:	e7fa      	b.n	800e630 <__mcmp+0x28>
 800e63a:	f04f 32ff 	mov.w	r2, #4294967295
 800e63e:	e7f7      	b.n	800e630 <__mcmp+0x28>

0800e640 <__mdiff>:
 800e640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e644:	460c      	mov	r4, r1
 800e646:	4606      	mov	r6, r0
 800e648:	4611      	mov	r1, r2
 800e64a:	4620      	mov	r0, r4
 800e64c:	4690      	mov	r8, r2
 800e64e:	f7ff ffdb 	bl	800e608 <__mcmp>
 800e652:	1e05      	subs	r5, r0, #0
 800e654:	d110      	bne.n	800e678 <__mdiff+0x38>
 800e656:	4629      	mov	r1, r5
 800e658:	4630      	mov	r0, r6
 800e65a:	f7ff fd09 	bl	800e070 <_Balloc>
 800e65e:	b930      	cbnz	r0, 800e66e <__mdiff+0x2e>
 800e660:	4b3a      	ldr	r3, [pc, #232]	; (800e74c <__mdiff+0x10c>)
 800e662:	4602      	mov	r2, r0
 800e664:	f240 2132 	movw	r1, #562	; 0x232
 800e668:	4839      	ldr	r0, [pc, #228]	; (800e750 <__mdiff+0x110>)
 800e66a:	f000 fc4f 	bl	800ef0c <__assert_func>
 800e66e:	2301      	movs	r3, #1
 800e670:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e674:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e678:	bfa4      	itt	ge
 800e67a:	4643      	movge	r3, r8
 800e67c:	46a0      	movge	r8, r4
 800e67e:	4630      	mov	r0, r6
 800e680:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e684:	bfa6      	itte	ge
 800e686:	461c      	movge	r4, r3
 800e688:	2500      	movge	r5, #0
 800e68a:	2501      	movlt	r5, #1
 800e68c:	f7ff fcf0 	bl	800e070 <_Balloc>
 800e690:	b920      	cbnz	r0, 800e69c <__mdiff+0x5c>
 800e692:	4b2e      	ldr	r3, [pc, #184]	; (800e74c <__mdiff+0x10c>)
 800e694:	4602      	mov	r2, r0
 800e696:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e69a:	e7e5      	b.n	800e668 <__mdiff+0x28>
 800e69c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e6a0:	6926      	ldr	r6, [r4, #16]
 800e6a2:	60c5      	str	r5, [r0, #12]
 800e6a4:	f104 0914 	add.w	r9, r4, #20
 800e6a8:	f108 0514 	add.w	r5, r8, #20
 800e6ac:	f100 0e14 	add.w	lr, r0, #20
 800e6b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e6b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e6b8:	f108 0210 	add.w	r2, r8, #16
 800e6bc:	46f2      	mov	sl, lr
 800e6be:	2100      	movs	r1, #0
 800e6c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800e6c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e6c8:	fa1f f883 	uxth.w	r8, r3
 800e6cc:	fa11 f18b 	uxtah	r1, r1, fp
 800e6d0:	0c1b      	lsrs	r3, r3, #16
 800e6d2:	eba1 0808 	sub.w	r8, r1, r8
 800e6d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e6da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e6de:	fa1f f888 	uxth.w	r8, r8
 800e6e2:	1419      	asrs	r1, r3, #16
 800e6e4:	454e      	cmp	r6, r9
 800e6e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e6ea:	f84a 3b04 	str.w	r3, [sl], #4
 800e6ee:	d8e7      	bhi.n	800e6c0 <__mdiff+0x80>
 800e6f0:	1b33      	subs	r3, r6, r4
 800e6f2:	3b15      	subs	r3, #21
 800e6f4:	f023 0303 	bic.w	r3, r3, #3
 800e6f8:	3304      	adds	r3, #4
 800e6fa:	3415      	adds	r4, #21
 800e6fc:	42a6      	cmp	r6, r4
 800e6fe:	bf38      	it	cc
 800e700:	2304      	movcc	r3, #4
 800e702:	441d      	add	r5, r3
 800e704:	4473      	add	r3, lr
 800e706:	469e      	mov	lr, r3
 800e708:	462e      	mov	r6, r5
 800e70a:	4566      	cmp	r6, ip
 800e70c:	d30e      	bcc.n	800e72c <__mdiff+0xec>
 800e70e:	f10c 0203 	add.w	r2, ip, #3
 800e712:	1b52      	subs	r2, r2, r5
 800e714:	f022 0203 	bic.w	r2, r2, #3
 800e718:	3d03      	subs	r5, #3
 800e71a:	45ac      	cmp	ip, r5
 800e71c:	bf38      	it	cc
 800e71e:	2200      	movcc	r2, #0
 800e720:	441a      	add	r2, r3
 800e722:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e726:	b17b      	cbz	r3, 800e748 <__mdiff+0x108>
 800e728:	6107      	str	r7, [r0, #16]
 800e72a:	e7a3      	b.n	800e674 <__mdiff+0x34>
 800e72c:	f856 8b04 	ldr.w	r8, [r6], #4
 800e730:	fa11 f288 	uxtah	r2, r1, r8
 800e734:	1414      	asrs	r4, r2, #16
 800e736:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e73a:	b292      	uxth	r2, r2
 800e73c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e740:	f84e 2b04 	str.w	r2, [lr], #4
 800e744:	1421      	asrs	r1, r4, #16
 800e746:	e7e0      	b.n	800e70a <__mdiff+0xca>
 800e748:	3f01      	subs	r7, #1
 800e74a:	e7ea      	b.n	800e722 <__mdiff+0xe2>
 800e74c:	080118f8 	.word	0x080118f8
 800e750:	08011984 	.word	0x08011984

0800e754 <__ulp>:
 800e754:	b082      	sub	sp, #8
 800e756:	ed8d 0b00 	vstr	d0, [sp]
 800e75a:	9b01      	ldr	r3, [sp, #4]
 800e75c:	4912      	ldr	r1, [pc, #72]	; (800e7a8 <__ulp+0x54>)
 800e75e:	4019      	ands	r1, r3
 800e760:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e764:	2900      	cmp	r1, #0
 800e766:	dd05      	ble.n	800e774 <__ulp+0x20>
 800e768:	2200      	movs	r2, #0
 800e76a:	460b      	mov	r3, r1
 800e76c:	ec43 2b10 	vmov	d0, r2, r3
 800e770:	b002      	add	sp, #8
 800e772:	4770      	bx	lr
 800e774:	4249      	negs	r1, r1
 800e776:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e77a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e77e:	f04f 0200 	mov.w	r2, #0
 800e782:	f04f 0300 	mov.w	r3, #0
 800e786:	da04      	bge.n	800e792 <__ulp+0x3e>
 800e788:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e78c:	fa41 f300 	asr.w	r3, r1, r0
 800e790:	e7ec      	b.n	800e76c <__ulp+0x18>
 800e792:	f1a0 0114 	sub.w	r1, r0, #20
 800e796:	291e      	cmp	r1, #30
 800e798:	bfda      	itte	le
 800e79a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e79e:	fa20 f101 	lsrle.w	r1, r0, r1
 800e7a2:	2101      	movgt	r1, #1
 800e7a4:	460a      	mov	r2, r1
 800e7a6:	e7e1      	b.n	800e76c <__ulp+0x18>
 800e7a8:	7ff00000 	.word	0x7ff00000

0800e7ac <__b2d>:
 800e7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ae:	6905      	ldr	r5, [r0, #16]
 800e7b0:	f100 0714 	add.w	r7, r0, #20
 800e7b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e7b8:	1f2e      	subs	r6, r5, #4
 800e7ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e7be:	4620      	mov	r0, r4
 800e7c0:	f7ff fd48 	bl	800e254 <__hi0bits>
 800e7c4:	f1c0 0320 	rsb	r3, r0, #32
 800e7c8:	280a      	cmp	r0, #10
 800e7ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e848 <__b2d+0x9c>
 800e7ce:	600b      	str	r3, [r1, #0]
 800e7d0:	dc14      	bgt.n	800e7fc <__b2d+0x50>
 800e7d2:	f1c0 0e0b 	rsb	lr, r0, #11
 800e7d6:	fa24 f10e 	lsr.w	r1, r4, lr
 800e7da:	42b7      	cmp	r7, r6
 800e7dc:	ea41 030c 	orr.w	r3, r1, ip
 800e7e0:	bf34      	ite	cc
 800e7e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e7e6:	2100      	movcs	r1, #0
 800e7e8:	3015      	adds	r0, #21
 800e7ea:	fa04 f000 	lsl.w	r0, r4, r0
 800e7ee:	fa21 f10e 	lsr.w	r1, r1, lr
 800e7f2:	ea40 0201 	orr.w	r2, r0, r1
 800e7f6:	ec43 2b10 	vmov	d0, r2, r3
 800e7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7fc:	42b7      	cmp	r7, r6
 800e7fe:	bf3a      	itte	cc
 800e800:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e804:	f1a5 0608 	subcc.w	r6, r5, #8
 800e808:	2100      	movcs	r1, #0
 800e80a:	380b      	subs	r0, #11
 800e80c:	d017      	beq.n	800e83e <__b2d+0x92>
 800e80e:	f1c0 0c20 	rsb	ip, r0, #32
 800e812:	fa04 f500 	lsl.w	r5, r4, r0
 800e816:	42be      	cmp	r6, r7
 800e818:	fa21 f40c 	lsr.w	r4, r1, ip
 800e81c:	ea45 0504 	orr.w	r5, r5, r4
 800e820:	bf8c      	ite	hi
 800e822:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e826:	2400      	movls	r4, #0
 800e828:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e82c:	fa01 f000 	lsl.w	r0, r1, r0
 800e830:	fa24 f40c 	lsr.w	r4, r4, ip
 800e834:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e838:	ea40 0204 	orr.w	r2, r0, r4
 800e83c:	e7db      	b.n	800e7f6 <__b2d+0x4a>
 800e83e:	ea44 030c 	orr.w	r3, r4, ip
 800e842:	460a      	mov	r2, r1
 800e844:	e7d7      	b.n	800e7f6 <__b2d+0x4a>
 800e846:	bf00      	nop
 800e848:	3ff00000 	.word	0x3ff00000

0800e84c <__d2b>:
 800e84c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e850:	4689      	mov	r9, r1
 800e852:	2101      	movs	r1, #1
 800e854:	ec57 6b10 	vmov	r6, r7, d0
 800e858:	4690      	mov	r8, r2
 800e85a:	f7ff fc09 	bl	800e070 <_Balloc>
 800e85e:	4604      	mov	r4, r0
 800e860:	b930      	cbnz	r0, 800e870 <__d2b+0x24>
 800e862:	4602      	mov	r2, r0
 800e864:	4b25      	ldr	r3, [pc, #148]	; (800e8fc <__d2b+0xb0>)
 800e866:	4826      	ldr	r0, [pc, #152]	; (800e900 <__d2b+0xb4>)
 800e868:	f240 310a 	movw	r1, #778	; 0x30a
 800e86c:	f000 fb4e 	bl	800ef0c <__assert_func>
 800e870:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e874:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e878:	bb35      	cbnz	r5, 800e8c8 <__d2b+0x7c>
 800e87a:	2e00      	cmp	r6, #0
 800e87c:	9301      	str	r3, [sp, #4]
 800e87e:	d028      	beq.n	800e8d2 <__d2b+0x86>
 800e880:	4668      	mov	r0, sp
 800e882:	9600      	str	r6, [sp, #0]
 800e884:	f7ff fd06 	bl	800e294 <__lo0bits>
 800e888:	9900      	ldr	r1, [sp, #0]
 800e88a:	b300      	cbz	r0, 800e8ce <__d2b+0x82>
 800e88c:	9a01      	ldr	r2, [sp, #4]
 800e88e:	f1c0 0320 	rsb	r3, r0, #32
 800e892:	fa02 f303 	lsl.w	r3, r2, r3
 800e896:	430b      	orrs	r3, r1
 800e898:	40c2      	lsrs	r2, r0
 800e89a:	6163      	str	r3, [r4, #20]
 800e89c:	9201      	str	r2, [sp, #4]
 800e89e:	9b01      	ldr	r3, [sp, #4]
 800e8a0:	61a3      	str	r3, [r4, #24]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	bf14      	ite	ne
 800e8a6:	2202      	movne	r2, #2
 800e8a8:	2201      	moveq	r2, #1
 800e8aa:	6122      	str	r2, [r4, #16]
 800e8ac:	b1d5      	cbz	r5, 800e8e4 <__d2b+0x98>
 800e8ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e8b2:	4405      	add	r5, r0
 800e8b4:	f8c9 5000 	str.w	r5, [r9]
 800e8b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e8bc:	f8c8 0000 	str.w	r0, [r8]
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	b003      	add	sp, #12
 800e8c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e8cc:	e7d5      	b.n	800e87a <__d2b+0x2e>
 800e8ce:	6161      	str	r1, [r4, #20]
 800e8d0:	e7e5      	b.n	800e89e <__d2b+0x52>
 800e8d2:	a801      	add	r0, sp, #4
 800e8d4:	f7ff fcde 	bl	800e294 <__lo0bits>
 800e8d8:	9b01      	ldr	r3, [sp, #4]
 800e8da:	6163      	str	r3, [r4, #20]
 800e8dc:	2201      	movs	r2, #1
 800e8de:	6122      	str	r2, [r4, #16]
 800e8e0:	3020      	adds	r0, #32
 800e8e2:	e7e3      	b.n	800e8ac <__d2b+0x60>
 800e8e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e8e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e8ec:	f8c9 0000 	str.w	r0, [r9]
 800e8f0:	6918      	ldr	r0, [r3, #16]
 800e8f2:	f7ff fcaf 	bl	800e254 <__hi0bits>
 800e8f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e8fa:	e7df      	b.n	800e8bc <__d2b+0x70>
 800e8fc:	080118f8 	.word	0x080118f8
 800e900:	08011984 	.word	0x08011984

0800e904 <__ratio>:
 800e904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e908:	4688      	mov	r8, r1
 800e90a:	4669      	mov	r1, sp
 800e90c:	4681      	mov	r9, r0
 800e90e:	f7ff ff4d 	bl	800e7ac <__b2d>
 800e912:	a901      	add	r1, sp, #4
 800e914:	4640      	mov	r0, r8
 800e916:	ec55 4b10 	vmov	r4, r5, d0
 800e91a:	f7ff ff47 	bl	800e7ac <__b2d>
 800e91e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e922:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e926:	eba3 0c02 	sub.w	ip, r3, r2
 800e92a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e92e:	1a9b      	subs	r3, r3, r2
 800e930:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e934:	ec51 0b10 	vmov	r0, r1, d0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	bfd6      	itet	le
 800e93c:	460a      	movle	r2, r1
 800e93e:	462a      	movgt	r2, r5
 800e940:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e944:	468b      	mov	fp, r1
 800e946:	462f      	mov	r7, r5
 800e948:	bfd4      	ite	le
 800e94a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e94e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e952:	4620      	mov	r0, r4
 800e954:	ee10 2a10 	vmov	r2, s0
 800e958:	465b      	mov	r3, fp
 800e95a:	4639      	mov	r1, r7
 800e95c:	f7f1 ff7e 	bl	800085c <__aeabi_ddiv>
 800e960:	ec41 0b10 	vmov	d0, r0, r1
 800e964:	b003      	add	sp, #12
 800e966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e96a <__copybits>:
 800e96a:	3901      	subs	r1, #1
 800e96c:	b570      	push	{r4, r5, r6, lr}
 800e96e:	1149      	asrs	r1, r1, #5
 800e970:	6914      	ldr	r4, [r2, #16]
 800e972:	3101      	adds	r1, #1
 800e974:	f102 0314 	add.w	r3, r2, #20
 800e978:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e97c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e980:	1f05      	subs	r5, r0, #4
 800e982:	42a3      	cmp	r3, r4
 800e984:	d30c      	bcc.n	800e9a0 <__copybits+0x36>
 800e986:	1aa3      	subs	r3, r4, r2
 800e988:	3b11      	subs	r3, #17
 800e98a:	f023 0303 	bic.w	r3, r3, #3
 800e98e:	3211      	adds	r2, #17
 800e990:	42a2      	cmp	r2, r4
 800e992:	bf88      	it	hi
 800e994:	2300      	movhi	r3, #0
 800e996:	4418      	add	r0, r3
 800e998:	2300      	movs	r3, #0
 800e99a:	4288      	cmp	r0, r1
 800e99c:	d305      	bcc.n	800e9aa <__copybits+0x40>
 800e99e:	bd70      	pop	{r4, r5, r6, pc}
 800e9a0:	f853 6b04 	ldr.w	r6, [r3], #4
 800e9a4:	f845 6f04 	str.w	r6, [r5, #4]!
 800e9a8:	e7eb      	b.n	800e982 <__copybits+0x18>
 800e9aa:	f840 3b04 	str.w	r3, [r0], #4
 800e9ae:	e7f4      	b.n	800e99a <__copybits+0x30>

0800e9b0 <__any_on>:
 800e9b0:	f100 0214 	add.w	r2, r0, #20
 800e9b4:	6900      	ldr	r0, [r0, #16]
 800e9b6:	114b      	asrs	r3, r1, #5
 800e9b8:	4298      	cmp	r0, r3
 800e9ba:	b510      	push	{r4, lr}
 800e9bc:	db11      	blt.n	800e9e2 <__any_on+0x32>
 800e9be:	dd0a      	ble.n	800e9d6 <__any_on+0x26>
 800e9c0:	f011 011f 	ands.w	r1, r1, #31
 800e9c4:	d007      	beq.n	800e9d6 <__any_on+0x26>
 800e9c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e9ca:	fa24 f001 	lsr.w	r0, r4, r1
 800e9ce:	fa00 f101 	lsl.w	r1, r0, r1
 800e9d2:	428c      	cmp	r4, r1
 800e9d4:	d10b      	bne.n	800e9ee <__any_on+0x3e>
 800e9d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d803      	bhi.n	800e9e6 <__any_on+0x36>
 800e9de:	2000      	movs	r0, #0
 800e9e0:	bd10      	pop	{r4, pc}
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	e7f7      	b.n	800e9d6 <__any_on+0x26>
 800e9e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e9ea:	2900      	cmp	r1, #0
 800e9ec:	d0f5      	beq.n	800e9da <__any_on+0x2a>
 800e9ee:	2001      	movs	r0, #1
 800e9f0:	e7f6      	b.n	800e9e0 <__any_on+0x30>

0800e9f2 <_calloc_r>:
 800e9f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9f4:	fba1 2402 	umull	r2, r4, r1, r2
 800e9f8:	b94c      	cbnz	r4, 800ea0e <_calloc_r+0x1c>
 800e9fa:	4611      	mov	r1, r2
 800e9fc:	9201      	str	r2, [sp, #4]
 800e9fe:	f000 f87b 	bl	800eaf8 <_malloc_r>
 800ea02:	9a01      	ldr	r2, [sp, #4]
 800ea04:	4605      	mov	r5, r0
 800ea06:	b930      	cbnz	r0, 800ea16 <_calloc_r+0x24>
 800ea08:	4628      	mov	r0, r5
 800ea0a:	b003      	add	sp, #12
 800ea0c:	bd30      	pop	{r4, r5, pc}
 800ea0e:	220c      	movs	r2, #12
 800ea10:	6002      	str	r2, [r0, #0]
 800ea12:	2500      	movs	r5, #0
 800ea14:	e7f8      	b.n	800ea08 <_calloc_r+0x16>
 800ea16:	4621      	mov	r1, r4
 800ea18:	f7fc fbcc 	bl	800b1b4 <memset>
 800ea1c:	e7f4      	b.n	800ea08 <_calloc_r+0x16>
	...

0800ea20 <_free_r>:
 800ea20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea22:	2900      	cmp	r1, #0
 800ea24:	d044      	beq.n	800eab0 <_free_r+0x90>
 800ea26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea2a:	9001      	str	r0, [sp, #4]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	f1a1 0404 	sub.w	r4, r1, #4
 800ea32:	bfb8      	it	lt
 800ea34:	18e4      	addlt	r4, r4, r3
 800ea36:	f000 fab3 	bl	800efa0 <__malloc_lock>
 800ea3a:	4a1e      	ldr	r2, [pc, #120]	; (800eab4 <_free_r+0x94>)
 800ea3c:	9801      	ldr	r0, [sp, #4]
 800ea3e:	6813      	ldr	r3, [r2, #0]
 800ea40:	b933      	cbnz	r3, 800ea50 <_free_r+0x30>
 800ea42:	6063      	str	r3, [r4, #4]
 800ea44:	6014      	str	r4, [r2, #0]
 800ea46:	b003      	add	sp, #12
 800ea48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea4c:	f000 baae 	b.w	800efac <__malloc_unlock>
 800ea50:	42a3      	cmp	r3, r4
 800ea52:	d908      	bls.n	800ea66 <_free_r+0x46>
 800ea54:	6825      	ldr	r5, [r4, #0]
 800ea56:	1961      	adds	r1, r4, r5
 800ea58:	428b      	cmp	r3, r1
 800ea5a:	bf01      	itttt	eq
 800ea5c:	6819      	ldreq	r1, [r3, #0]
 800ea5e:	685b      	ldreq	r3, [r3, #4]
 800ea60:	1949      	addeq	r1, r1, r5
 800ea62:	6021      	streq	r1, [r4, #0]
 800ea64:	e7ed      	b.n	800ea42 <_free_r+0x22>
 800ea66:	461a      	mov	r2, r3
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	b10b      	cbz	r3, 800ea70 <_free_r+0x50>
 800ea6c:	42a3      	cmp	r3, r4
 800ea6e:	d9fa      	bls.n	800ea66 <_free_r+0x46>
 800ea70:	6811      	ldr	r1, [r2, #0]
 800ea72:	1855      	adds	r5, r2, r1
 800ea74:	42a5      	cmp	r5, r4
 800ea76:	d10b      	bne.n	800ea90 <_free_r+0x70>
 800ea78:	6824      	ldr	r4, [r4, #0]
 800ea7a:	4421      	add	r1, r4
 800ea7c:	1854      	adds	r4, r2, r1
 800ea7e:	42a3      	cmp	r3, r4
 800ea80:	6011      	str	r1, [r2, #0]
 800ea82:	d1e0      	bne.n	800ea46 <_free_r+0x26>
 800ea84:	681c      	ldr	r4, [r3, #0]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	6053      	str	r3, [r2, #4]
 800ea8a:	4421      	add	r1, r4
 800ea8c:	6011      	str	r1, [r2, #0]
 800ea8e:	e7da      	b.n	800ea46 <_free_r+0x26>
 800ea90:	d902      	bls.n	800ea98 <_free_r+0x78>
 800ea92:	230c      	movs	r3, #12
 800ea94:	6003      	str	r3, [r0, #0]
 800ea96:	e7d6      	b.n	800ea46 <_free_r+0x26>
 800ea98:	6825      	ldr	r5, [r4, #0]
 800ea9a:	1961      	adds	r1, r4, r5
 800ea9c:	428b      	cmp	r3, r1
 800ea9e:	bf04      	itt	eq
 800eaa0:	6819      	ldreq	r1, [r3, #0]
 800eaa2:	685b      	ldreq	r3, [r3, #4]
 800eaa4:	6063      	str	r3, [r4, #4]
 800eaa6:	bf04      	itt	eq
 800eaa8:	1949      	addeq	r1, r1, r5
 800eaaa:	6021      	streq	r1, [r4, #0]
 800eaac:	6054      	str	r4, [r2, #4]
 800eaae:	e7ca      	b.n	800ea46 <_free_r+0x26>
 800eab0:	b003      	add	sp, #12
 800eab2:	bd30      	pop	{r4, r5, pc}
 800eab4:	20001eb0 	.word	0x20001eb0

0800eab8 <sbrk_aligned>:
 800eab8:	b570      	push	{r4, r5, r6, lr}
 800eaba:	4e0e      	ldr	r6, [pc, #56]	; (800eaf4 <sbrk_aligned+0x3c>)
 800eabc:	460c      	mov	r4, r1
 800eabe:	6831      	ldr	r1, [r6, #0]
 800eac0:	4605      	mov	r5, r0
 800eac2:	b911      	cbnz	r1, 800eaca <sbrk_aligned+0x12>
 800eac4:	f000 f9f0 	bl	800eea8 <_sbrk_r>
 800eac8:	6030      	str	r0, [r6, #0]
 800eaca:	4621      	mov	r1, r4
 800eacc:	4628      	mov	r0, r5
 800eace:	f000 f9eb 	bl	800eea8 <_sbrk_r>
 800ead2:	1c43      	adds	r3, r0, #1
 800ead4:	d00a      	beq.n	800eaec <sbrk_aligned+0x34>
 800ead6:	1cc4      	adds	r4, r0, #3
 800ead8:	f024 0403 	bic.w	r4, r4, #3
 800eadc:	42a0      	cmp	r0, r4
 800eade:	d007      	beq.n	800eaf0 <sbrk_aligned+0x38>
 800eae0:	1a21      	subs	r1, r4, r0
 800eae2:	4628      	mov	r0, r5
 800eae4:	f000 f9e0 	bl	800eea8 <_sbrk_r>
 800eae8:	3001      	adds	r0, #1
 800eaea:	d101      	bne.n	800eaf0 <sbrk_aligned+0x38>
 800eaec:	f04f 34ff 	mov.w	r4, #4294967295
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	bd70      	pop	{r4, r5, r6, pc}
 800eaf4:	20001eb4 	.word	0x20001eb4

0800eaf8 <_malloc_r>:
 800eaf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eafc:	1ccd      	adds	r5, r1, #3
 800eafe:	f025 0503 	bic.w	r5, r5, #3
 800eb02:	3508      	adds	r5, #8
 800eb04:	2d0c      	cmp	r5, #12
 800eb06:	bf38      	it	cc
 800eb08:	250c      	movcc	r5, #12
 800eb0a:	2d00      	cmp	r5, #0
 800eb0c:	4607      	mov	r7, r0
 800eb0e:	db01      	blt.n	800eb14 <_malloc_r+0x1c>
 800eb10:	42a9      	cmp	r1, r5
 800eb12:	d905      	bls.n	800eb20 <_malloc_r+0x28>
 800eb14:	230c      	movs	r3, #12
 800eb16:	603b      	str	r3, [r7, #0]
 800eb18:	2600      	movs	r6, #0
 800eb1a:	4630      	mov	r0, r6
 800eb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb20:	4e2e      	ldr	r6, [pc, #184]	; (800ebdc <_malloc_r+0xe4>)
 800eb22:	f000 fa3d 	bl	800efa0 <__malloc_lock>
 800eb26:	6833      	ldr	r3, [r6, #0]
 800eb28:	461c      	mov	r4, r3
 800eb2a:	bb34      	cbnz	r4, 800eb7a <_malloc_r+0x82>
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	4638      	mov	r0, r7
 800eb30:	f7ff ffc2 	bl	800eab8 <sbrk_aligned>
 800eb34:	1c43      	adds	r3, r0, #1
 800eb36:	4604      	mov	r4, r0
 800eb38:	d14d      	bne.n	800ebd6 <_malloc_r+0xde>
 800eb3a:	6834      	ldr	r4, [r6, #0]
 800eb3c:	4626      	mov	r6, r4
 800eb3e:	2e00      	cmp	r6, #0
 800eb40:	d140      	bne.n	800ebc4 <_malloc_r+0xcc>
 800eb42:	6823      	ldr	r3, [r4, #0]
 800eb44:	4631      	mov	r1, r6
 800eb46:	4638      	mov	r0, r7
 800eb48:	eb04 0803 	add.w	r8, r4, r3
 800eb4c:	f000 f9ac 	bl	800eea8 <_sbrk_r>
 800eb50:	4580      	cmp	r8, r0
 800eb52:	d13a      	bne.n	800ebca <_malloc_r+0xd2>
 800eb54:	6821      	ldr	r1, [r4, #0]
 800eb56:	3503      	adds	r5, #3
 800eb58:	1a6d      	subs	r5, r5, r1
 800eb5a:	f025 0503 	bic.w	r5, r5, #3
 800eb5e:	3508      	adds	r5, #8
 800eb60:	2d0c      	cmp	r5, #12
 800eb62:	bf38      	it	cc
 800eb64:	250c      	movcc	r5, #12
 800eb66:	4629      	mov	r1, r5
 800eb68:	4638      	mov	r0, r7
 800eb6a:	f7ff ffa5 	bl	800eab8 <sbrk_aligned>
 800eb6e:	3001      	adds	r0, #1
 800eb70:	d02b      	beq.n	800ebca <_malloc_r+0xd2>
 800eb72:	6823      	ldr	r3, [r4, #0]
 800eb74:	442b      	add	r3, r5
 800eb76:	6023      	str	r3, [r4, #0]
 800eb78:	e00e      	b.n	800eb98 <_malloc_r+0xa0>
 800eb7a:	6822      	ldr	r2, [r4, #0]
 800eb7c:	1b52      	subs	r2, r2, r5
 800eb7e:	d41e      	bmi.n	800ebbe <_malloc_r+0xc6>
 800eb80:	2a0b      	cmp	r2, #11
 800eb82:	d916      	bls.n	800ebb2 <_malloc_r+0xba>
 800eb84:	1961      	adds	r1, r4, r5
 800eb86:	42a3      	cmp	r3, r4
 800eb88:	6025      	str	r5, [r4, #0]
 800eb8a:	bf18      	it	ne
 800eb8c:	6059      	strne	r1, [r3, #4]
 800eb8e:	6863      	ldr	r3, [r4, #4]
 800eb90:	bf08      	it	eq
 800eb92:	6031      	streq	r1, [r6, #0]
 800eb94:	5162      	str	r2, [r4, r5]
 800eb96:	604b      	str	r3, [r1, #4]
 800eb98:	4638      	mov	r0, r7
 800eb9a:	f104 060b 	add.w	r6, r4, #11
 800eb9e:	f000 fa05 	bl	800efac <__malloc_unlock>
 800eba2:	f026 0607 	bic.w	r6, r6, #7
 800eba6:	1d23      	adds	r3, r4, #4
 800eba8:	1af2      	subs	r2, r6, r3
 800ebaa:	d0b6      	beq.n	800eb1a <_malloc_r+0x22>
 800ebac:	1b9b      	subs	r3, r3, r6
 800ebae:	50a3      	str	r3, [r4, r2]
 800ebb0:	e7b3      	b.n	800eb1a <_malloc_r+0x22>
 800ebb2:	6862      	ldr	r2, [r4, #4]
 800ebb4:	42a3      	cmp	r3, r4
 800ebb6:	bf0c      	ite	eq
 800ebb8:	6032      	streq	r2, [r6, #0]
 800ebba:	605a      	strne	r2, [r3, #4]
 800ebbc:	e7ec      	b.n	800eb98 <_malloc_r+0xa0>
 800ebbe:	4623      	mov	r3, r4
 800ebc0:	6864      	ldr	r4, [r4, #4]
 800ebc2:	e7b2      	b.n	800eb2a <_malloc_r+0x32>
 800ebc4:	4634      	mov	r4, r6
 800ebc6:	6876      	ldr	r6, [r6, #4]
 800ebc8:	e7b9      	b.n	800eb3e <_malloc_r+0x46>
 800ebca:	230c      	movs	r3, #12
 800ebcc:	603b      	str	r3, [r7, #0]
 800ebce:	4638      	mov	r0, r7
 800ebd0:	f000 f9ec 	bl	800efac <__malloc_unlock>
 800ebd4:	e7a1      	b.n	800eb1a <_malloc_r+0x22>
 800ebd6:	6025      	str	r5, [r4, #0]
 800ebd8:	e7de      	b.n	800eb98 <_malloc_r+0xa0>
 800ebda:	bf00      	nop
 800ebdc:	20001eb0 	.word	0x20001eb0

0800ebe0 <__ssputs_r>:
 800ebe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebe4:	688e      	ldr	r6, [r1, #8]
 800ebe6:	429e      	cmp	r6, r3
 800ebe8:	4682      	mov	sl, r0
 800ebea:	460c      	mov	r4, r1
 800ebec:	4690      	mov	r8, r2
 800ebee:	461f      	mov	r7, r3
 800ebf0:	d838      	bhi.n	800ec64 <__ssputs_r+0x84>
 800ebf2:	898a      	ldrh	r2, [r1, #12]
 800ebf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ebf8:	d032      	beq.n	800ec60 <__ssputs_r+0x80>
 800ebfa:	6825      	ldr	r5, [r4, #0]
 800ebfc:	6909      	ldr	r1, [r1, #16]
 800ebfe:	eba5 0901 	sub.w	r9, r5, r1
 800ec02:	6965      	ldr	r5, [r4, #20]
 800ec04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	444b      	add	r3, r9
 800ec10:	106d      	asrs	r5, r5, #1
 800ec12:	429d      	cmp	r5, r3
 800ec14:	bf38      	it	cc
 800ec16:	461d      	movcc	r5, r3
 800ec18:	0553      	lsls	r3, r2, #21
 800ec1a:	d531      	bpl.n	800ec80 <__ssputs_r+0xa0>
 800ec1c:	4629      	mov	r1, r5
 800ec1e:	f7ff ff6b 	bl	800eaf8 <_malloc_r>
 800ec22:	4606      	mov	r6, r0
 800ec24:	b950      	cbnz	r0, 800ec3c <__ssputs_r+0x5c>
 800ec26:	230c      	movs	r3, #12
 800ec28:	f8ca 3000 	str.w	r3, [sl]
 800ec2c:	89a3      	ldrh	r3, [r4, #12]
 800ec2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec32:	81a3      	strh	r3, [r4, #12]
 800ec34:	f04f 30ff 	mov.w	r0, #4294967295
 800ec38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec3c:	6921      	ldr	r1, [r4, #16]
 800ec3e:	464a      	mov	r2, r9
 800ec40:	f7fc faaa 	bl	800b198 <memcpy>
 800ec44:	89a3      	ldrh	r3, [r4, #12]
 800ec46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec4e:	81a3      	strh	r3, [r4, #12]
 800ec50:	6126      	str	r6, [r4, #16]
 800ec52:	6165      	str	r5, [r4, #20]
 800ec54:	444e      	add	r6, r9
 800ec56:	eba5 0509 	sub.w	r5, r5, r9
 800ec5a:	6026      	str	r6, [r4, #0]
 800ec5c:	60a5      	str	r5, [r4, #8]
 800ec5e:	463e      	mov	r6, r7
 800ec60:	42be      	cmp	r6, r7
 800ec62:	d900      	bls.n	800ec66 <__ssputs_r+0x86>
 800ec64:	463e      	mov	r6, r7
 800ec66:	6820      	ldr	r0, [r4, #0]
 800ec68:	4632      	mov	r2, r6
 800ec6a:	4641      	mov	r1, r8
 800ec6c:	f000 f97e 	bl	800ef6c <memmove>
 800ec70:	68a3      	ldr	r3, [r4, #8]
 800ec72:	1b9b      	subs	r3, r3, r6
 800ec74:	60a3      	str	r3, [r4, #8]
 800ec76:	6823      	ldr	r3, [r4, #0]
 800ec78:	4433      	add	r3, r6
 800ec7a:	6023      	str	r3, [r4, #0]
 800ec7c:	2000      	movs	r0, #0
 800ec7e:	e7db      	b.n	800ec38 <__ssputs_r+0x58>
 800ec80:	462a      	mov	r2, r5
 800ec82:	f000 f999 	bl	800efb8 <_realloc_r>
 800ec86:	4606      	mov	r6, r0
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	d1e1      	bne.n	800ec50 <__ssputs_r+0x70>
 800ec8c:	6921      	ldr	r1, [r4, #16]
 800ec8e:	4650      	mov	r0, sl
 800ec90:	f7ff fec6 	bl	800ea20 <_free_r>
 800ec94:	e7c7      	b.n	800ec26 <__ssputs_r+0x46>
	...

0800ec98 <_svfiprintf_r>:
 800ec98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec9c:	4698      	mov	r8, r3
 800ec9e:	898b      	ldrh	r3, [r1, #12]
 800eca0:	061b      	lsls	r3, r3, #24
 800eca2:	b09d      	sub	sp, #116	; 0x74
 800eca4:	4607      	mov	r7, r0
 800eca6:	460d      	mov	r5, r1
 800eca8:	4614      	mov	r4, r2
 800ecaa:	d50e      	bpl.n	800ecca <_svfiprintf_r+0x32>
 800ecac:	690b      	ldr	r3, [r1, #16]
 800ecae:	b963      	cbnz	r3, 800ecca <_svfiprintf_r+0x32>
 800ecb0:	2140      	movs	r1, #64	; 0x40
 800ecb2:	f7ff ff21 	bl	800eaf8 <_malloc_r>
 800ecb6:	6028      	str	r0, [r5, #0]
 800ecb8:	6128      	str	r0, [r5, #16]
 800ecba:	b920      	cbnz	r0, 800ecc6 <_svfiprintf_r+0x2e>
 800ecbc:	230c      	movs	r3, #12
 800ecbe:	603b      	str	r3, [r7, #0]
 800ecc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ecc4:	e0d1      	b.n	800ee6a <_svfiprintf_r+0x1d2>
 800ecc6:	2340      	movs	r3, #64	; 0x40
 800ecc8:	616b      	str	r3, [r5, #20]
 800ecca:	2300      	movs	r3, #0
 800eccc:	9309      	str	r3, [sp, #36]	; 0x24
 800ecce:	2320      	movs	r3, #32
 800ecd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ecd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecd8:	2330      	movs	r3, #48	; 0x30
 800ecda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ee84 <_svfiprintf_r+0x1ec>
 800ecde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ece2:	f04f 0901 	mov.w	r9, #1
 800ece6:	4623      	mov	r3, r4
 800ece8:	469a      	mov	sl, r3
 800ecea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecee:	b10a      	cbz	r2, 800ecf4 <_svfiprintf_r+0x5c>
 800ecf0:	2a25      	cmp	r2, #37	; 0x25
 800ecf2:	d1f9      	bne.n	800ece8 <_svfiprintf_r+0x50>
 800ecf4:	ebba 0b04 	subs.w	fp, sl, r4
 800ecf8:	d00b      	beq.n	800ed12 <_svfiprintf_r+0x7a>
 800ecfa:	465b      	mov	r3, fp
 800ecfc:	4622      	mov	r2, r4
 800ecfe:	4629      	mov	r1, r5
 800ed00:	4638      	mov	r0, r7
 800ed02:	f7ff ff6d 	bl	800ebe0 <__ssputs_r>
 800ed06:	3001      	adds	r0, #1
 800ed08:	f000 80aa 	beq.w	800ee60 <_svfiprintf_r+0x1c8>
 800ed0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed0e:	445a      	add	r2, fp
 800ed10:	9209      	str	r2, [sp, #36]	; 0x24
 800ed12:	f89a 3000 	ldrb.w	r3, [sl]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	f000 80a2 	beq.w	800ee60 <_svfiprintf_r+0x1c8>
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ed22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed26:	f10a 0a01 	add.w	sl, sl, #1
 800ed2a:	9304      	str	r3, [sp, #16]
 800ed2c:	9307      	str	r3, [sp, #28]
 800ed2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed32:	931a      	str	r3, [sp, #104]	; 0x68
 800ed34:	4654      	mov	r4, sl
 800ed36:	2205      	movs	r2, #5
 800ed38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed3c:	4851      	ldr	r0, [pc, #324]	; (800ee84 <_svfiprintf_r+0x1ec>)
 800ed3e:	f7f1 fa57 	bl	80001f0 <memchr>
 800ed42:	9a04      	ldr	r2, [sp, #16]
 800ed44:	b9d8      	cbnz	r0, 800ed7e <_svfiprintf_r+0xe6>
 800ed46:	06d0      	lsls	r0, r2, #27
 800ed48:	bf44      	itt	mi
 800ed4a:	2320      	movmi	r3, #32
 800ed4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed50:	0711      	lsls	r1, r2, #28
 800ed52:	bf44      	itt	mi
 800ed54:	232b      	movmi	r3, #43	; 0x2b
 800ed56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ed5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ed60:	d015      	beq.n	800ed8e <_svfiprintf_r+0xf6>
 800ed62:	9a07      	ldr	r2, [sp, #28]
 800ed64:	4654      	mov	r4, sl
 800ed66:	2000      	movs	r0, #0
 800ed68:	f04f 0c0a 	mov.w	ip, #10
 800ed6c:	4621      	mov	r1, r4
 800ed6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed72:	3b30      	subs	r3, #48	; 0x30
 800ed74:	2b09      	cmp	r3, #9
 800ed76:	d94e      	bls.n	800ee16 <_svfiprintf_r+0x17e>
 800ed78:	b1b0      	cbz	r0, 800eda8 <_svfiprintf_r+0x110>
 800ed7a:	9207      	str	r2, [sp, #28]
 800ed7c:	e014      	b.n	800eda8 <_svfiprintf_r+0x110>
 800ed7e:	eba0 0308 	sub.w	r3, r0, r8
 800ed82:	fa09 f303 	lsl.w	r3, r9, r3
 800ed86:	4313      	orrs	r3, r2
 800ed88:	9304      	str	r3, [sp, #16]
 800ed8a:	46a2      	mov	sl, r4
 800ed8c:	e7d2      	b.n	800ed34 <_svfiprintf_r+0x9c>
 800ed8e:	9b03      	ldr	r3, [sp, #12]
 800ed90:	1d19      	adds	r1, r3, #4
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	9103      	str	r1, [sp, #12]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	bfbb      	ittet	lt
 800ed9a:	425b      	neglt	r3, r3
 800ed9c:	f042 0202 	orrlt.w	r2, r2, #2
 800eda0:	9307      	strge	r3, [sp, #28]
 800eda2:	9307      	strlt	r3, [sp, #28]
 800eda4:	bfb8      	it	lt
 800eda6:	9204      	strlt	r2, [sp, #16]
 800eda8:	7823      	ldrb	r3, [r4, #0]
 800edaa:	2b2e      	cmp	r3, #46	; 0x2e
 800edac:	d10c      	bne.n	800edc8 <_svfiprintf_r+0x130>
 800edae:	7863      	ldrb	r3, [r4, #1]
 800edb0:	2b2a      	cmp	r3, #42	; 0x2a
 800edb2:	d135      	bne.n	800ee20 <_svfiprintf_r+0x188>
 800edb4:	9b03      	ldr	r3, [sp, #12]
 800edb6:	1d1a      	adds	r2, r3, #4
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	9203      	str	r2, [sp, #12]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	bfb8      	it	lt
 800edc0:	f04f 33ff 	movlt.w	r3, #4294967295
 800edc4:	3402      	adds	r4, #2
 800edc6:	9305      	str	r3, [sp, #20]
 800edc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ee94 <_svfiprintf_r+0x1fc>
 800edcc:	7821      	ldrb	r1, [r4, #0]
 800edce:	2203      	movs	r2, #3
 800edd0:	4650      	mov	r0, sl
 800edd2:	f7f1 fa0d 	bl	80001f0 <memchr>
 800edd6:	b140      	cbz	r0, 800edea <_svfiprintf_r+0x152>
 800edd8:	2340      	movs	r3, #64	; 0x40
 800edda:	eba0 000a 	sub.w	r0, r0, sl
 800edde:	fa03 f000 	lsl.w	r0, r3, r0
 800ede2:	9b04      	ldr	r3, [sp, #16]
 800ede4:	4303      	orrs	r3, r0
 800ede6:	3401      	adds	r4, #1
 800ede8:	9304      	str	r3, [sp, #16]
 800edea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edee:	4826      	ldr	r0, [pc, #152]	; (800ee88 <_svfiprintf_r+0x1f0>)
 800edf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800edf4:	2206      	movs	r2, #6
 800edf6:	f7f1 f9fb 	bl	80001f0 <memchr>
 800edfa:	2800      	cmp	r0, #0
 800edfc:	d038      	beq.n	800ee70 <_svfiprintf_r+0x1d8>
 800edfe:	4b23      	ldr	r3, [pc, #140]	; (800ee8c <_svfiprintf_r+0x1f4>)
 800ee00:	bb1b      	cbnz	r3, 800ee4a <_svfiprintf_r+0x1b2>
 800ee02:	9b03      	ldr	r3, [sp, #12]
 800ee04:	3307      	adds	r3, #7
 800ee06:	f023 0307 	bic.w	r3, r3, #7
 800ee0a:	3308      	adds	r3, #8
 800ee0c:	9303      	str	r3, [sp, #12]
 800ee0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee10:	4433      	add	r3, r6
 800ee12:	9309      	str	r3, [sp, #36]	; 0x24
 800ee14:	e767      	b.n	800ece6 <_svfiprintf_r+0x4e>
 800ee16:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee1a:	460c      	mov	r4, r1
 800ee1c:	2001      	movs	r0, #1
 800ee1e:	e7a5      	b.n	800ed6c <_svfiprintf_r+0xd4>
 800ee20:	2300      	movs	r3, #0
 800ee22:	3401      	adds	r4, #1
 800ee24:	9305      	str	r3, [sp, #20]
 800ee26:	4619      	mov	r1, r3
 800ee28:	f04f 0c0a 	mov.w	ip, #10
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee32:	3a30      	subs	r2, #48	; 0x30
 800ee34:	2a09      	cmp	r2, #9
 800ee36:	d903      	bls.n	800ee40 <_svfiprintf_r+0x1a8>
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d0c5      	beq.n	800edc8 <_svfiprintf_r+0x130>
 800ee3c:	9105      	str	r1, [sp, #20]
 800ee3e:	e7c3      	b.n	800edc8 <_svfiprintf_r+0x130>
 800ee40:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee44:	4604      	mov	r4, r0
 800ee46:	2301      	movs	r3, #1
 800ee48:	e7f0      	b.n	800ee2c <_svfiprintf_r+0x194>
 800ee4a:	ab03      	add	r3, sp, #12
 800ee4c:	9300      	str	r3, [sp, #0]
 800ee4e:	462a      	mov	r2, r5
 800ee50:	4b0f      	ldr	r3, [pc, #60]	; (800ee90 <_svfiprintf_r+0x1f8>)
 800ee52:	a904      	add	r1, sp, #16
 800ee54:	4638      	mov	r0, r7
 800ee56:	f7fc fa55 	bl	800b304 <_printf_float>
 800ee5a:	1c42      	adds	r2, r0, #1
 800ee5c:	4606      	mov	r6, r0
 800ee5e:	d1d6      	bne.n	800ee0e <_svfiprintf_r+0x176>
 800ee60:	89ab      	ldrh	r3, [r5, #12]
 800ee62:	065b      	lsls	r3, r3, #25
 800ee64:	f53f af2c 	bmi.w	800ecc0 <_svfiprintf_r+0x28>
 800ee68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee6a:	b01d      	add	sp, #116	; 0x74
 800ee6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee70:	ab03      	add	r3, sp, #12
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	462a      	mov	r2, r5
 800ee76:	4b06      	ldr	r3, [pc, #24]	; (800ee90 <_svfiprintf_r+0x1f8>)
 800ee78:	a904      	add	r1, sp, #16
 800ee7a:	4638      	mov	r0, r7
 800ee7c:	f7fc fce6 	bl	800b84c <_printf_i>
 800ee80:	e7eb      	b.n	800ee5a <_svfiprintf_r+0x1c2>
 800ee82:	bf00      	nop
 800ee84:	08011adc 	.word	0x08011adc
 800ee88:	08011ae6 	.word	0x08011ae6
 800ee8c:	0800b305 	.word	0x0800b305
 800ee90:	0800ebe1 	.word	0x0800ebe1
 800ee94:	08011ae2 	.word	0x08011ae2

0800ee98 <nan>:
 800ee98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eea0 <nan+0x8>
 800ee9c:	4770      	bx	lr
 800ee9e:	bf00      	nop
 800eea0:	00000000 	.word	0x00000000
 800eea4:	7ff80000 	.word	0x7ff80000

0800eea8 <_sbrk_r>:
 800eea8:	b538      	push	{r3, r4, r5, lr}
 800eeaa:	4d06      	ldr	r5, [pc, #24]	; (800eec4 <_sbrk_r+0x1c>)
 800eeac:	2300      	movs	r3, #0
 800eeae:	4604      	mov	r4, r0
 800eeb0:	4608      	mov	r0, r1
 800eeb2:	602b      	str	r3, [r5, #0]
 800eeb4:	f7f5 fb0c 	bl	80044d0 <_sbrk>
 800eeb8:	1c43      	adds	r3, r0, #1
 800eeba:	d102      	bne.n	800eec2 <_sbrk_r+0x1a>
 800eebc:	682b      	ldr	r3, [r5, #0]
 800eebe:	b103      	cbz	r3, 800eec2 <_sbrk_r+0x1a>
 800eec0:	6023      	str	r3, [r4, #0]
 800eec2:	bd38      	pop	{r3, r4, r5, pc}
 800eec4:	20001eb8 	.word	0x20001eb8

0800eec8 <strncmp>:
 800eec8:	b510      	push	{r4, lr}
 800eeca:	b17a      	cbz	r2, 800eeec <strncmp+0x24>
 800eecc:	4603      	mov	r3, r0
 800eece:	3901      	subs	r1, #1
 800eed0:	1884      	adds	r4, r0, r2
 800eed2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eed6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800eeda:	4290      	cmp	r0, r2
 800eedc:	d101      	bne.n	800eee2 <strncmp+0x1a>
 800eede:	42a3      	cmp	r3, r4
 800eee0:	d101      	bne.n	800eee6 <strncmp+0x1e>
 800eee2:	1a80      	subs	r0, r0, r2
 800eee4:	bd10      	pop	{r4, pc}
 800eee6:	2800      	cmp	r0, #0
 800eee8:	d1f3      	bne.n	800eed2 <strncmp+0xa>
 800eeea:	e7fa      	b.n	800eee2 <strncmp+0x1a>
 800eeec:	4610      	mov	r0, r2
 800eeee:	e7f9      	b.n	800eee4 <strncmp+0x1c>

0800eef0 <__ascii_wctomb>:
 800eef0:	b149      	cbz	r1, 800ef06 <__ascii_wctomb+0x16>
 800eef2:	2aff      	cmp	r2, #255	; 0xff
 800eef4:	bf85      	ittet	hi
 800eef6:	238a      	movhi	r3, #138	; 0x8a
 800eef8:	6003      	strhi	r3, [r0, #0]
 800eefa:	700a      	strbls	r2, [r1, #0]
 800eefc:	f04f 30ff 	movhi.w	r0, #4294967295
 800ef00:	bf98      	it	ls
 800ef02:	2001      	movls	r0, #1
 800ef04:	4770      	bx	lr
 800ef06:	4608      	mov	r0, r1
 800ef08:	4770      	bx	lr
	...

0800ef0c <__assert_func>:
 800ef0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef0e:	4614      	mov	r4, r2
 800ef10:	461a      	mov	r2, r3
 800ef12:	4b09      	ldr	r3, [pc, #36]	; (800ef38 <__assert_func+0x2c>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4605      	mov	r5, r0
 800ef18:	68d8      	ldr	r0, [r3, #12]
 800ef1a:	b14c      	cbz	r4, 800ef30 <__assert_func+0x24>
 800ef1c:	4b07      	ldr	r3, [pc, #28]	; (800ef3c <__assert_func+0x30>)
 800ef1e:	9100      	str	r1, [sp, #0]
 800ef20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef24:	4906      	ldr	r1, [pc, #24]	; (800ef40 <__assert_func+0x34>)
 800ef26:	462b      	mov	r3, r5
 800ef28:	f000 f80e 	bl	800ef48 <fiprintf>
 800ef2c:	f000 fa8c 	bl	800f448 <abort>
 800ef30:	4b04      	ldr	r3, [pc, #16]	; (800ef44 <__assert_func+0x38>)
 800ef32:	461c      	mov	r4, r3
 800ef34:	e7f3      	b.n	800ef1e <__assert_func+0x12>
 800ef36:	bf00      	nop
 800ef38:	20000234 	.word	0x20000234
 800ef3c:	08011aed 	.word	0x08011aed
 800ef40:	08011afa 	.word	0x08011afa
 800ef44:	08011b28 	.word	0x08011b28

0800ef48 <fiprintf>:
 800ef48:	b40e      	push	{r1, r2, r3}
 800ef4a:	b503      	push	{r0, r1, lr}
 800ef4c:	4601      	mov	r1, r0
 800ef4e:	ab03      	add	r3, sp, #12
 800ef50:	4805      	ldr	r0, [pc, #20]	; (800ef68 <fiprintf+0x20>)
 800ef52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef56:	6800      	ldr	r0, [r0, #0]
 800ef58:	9301      	str	r3, [sp, #4]
 800ef5a:	f000 f885 	bl	800f068 <_vfiprintf_r>
 800ef5e:	b002      	add	sp, #8
 800ef60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef64:	b003      	add	sp, #12
 800ef66:	4770      	bx	lr
 800ef68:	20000234 	.word	0x20000234

0800ef6c <memmove>:
 800ef6c:	4288      	cmp	r0, r1
 800ef6e:	b510      	push	{r4, lr}
 800ef70:	eb01 0402 	add.w	r4, r1, r2
 800ef74:	d902      	bls.n	800ef7c <memmove+0x10>
 800ef76:	4284      	cmp	r4, r0
 800ef78:	4623      	mov	r3, r4
 800ef7a:	d807      	bhi.n	800ef8c <memmove+0x20>
 800ef7c:	1e43      	subs	r3, r0, #1
 800ef7e:	42a1      	cmp	r1, r4
 800ef80:	d008      	beq.n	800ef94 <memmove+0x28>
 800ef82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef8a:	e7f8      	b.n	800ef7e <memmove+0x12>
 800ef8c:	4402      	add	r2, r0
 800ef8e:	4601      	mov	r1, r0
 800ef90:	428a      	cmp	r2, r1
 800ef92:	d100      	bne.n	800ef96 <memmove+0x2a>
 800ef94:	bd10      	pop	{r4, pc}
 800ef96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef9e:	e7f7      	b.n	800ef90 <memmove+0x24>

0800efa0 <__malloc_lock>:
 800efa0:	4801      	ldr	r0, [pc, #4]	; (800efa8 <__malloc_lock+0x8>)
 800efa2:	f000 bc11 	b.w	800f7c8 <__retarget_lock_acquire_recursive>
 800efa6:	bf00      	nop
 800efa8:	20001ebc 	.word	0x20001ebc

0800efac <__malloc_unlock>:
 800efac:	4801      	ldr	r0, [pc, #4]	; (800efb4 <__malloc_unlock+0x8>)
 800efae:	f000 bc0c 	b.w	800f7ca <__retarget_lock_release_recursive>
 800efb2:	bf00      	nop
 800efb4:	20001ebc 	.word	0x20001ebc

0800efb8 <_realloc_r>:
 800efb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efbc:	4680      	mov	r8, r0
 800efbe:	4614      	mov	r4, r2
 800efc0:	460e      	mov	r6, r1
 800efc2:	b921      	cbnz	r1, 800efce <_realloc_r+0x16>
 800efc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efc8:	4611      	mov	r1, r2
 800efca:	f7ff bd95 	b.w	800eaf8 <_malloc_r>
 800efce:	b92a      	cbnz	r2, 800efdc <_realloc_r+0x24>
 800efd0:	f7ff fd26 	bl	800ea20 <_free_r>
 800efd4:	4625      	mov	r5, r4
 800efd6:	4628      	mov	r0, r5
 800efd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efdc:	f000 fc5c 	bl	800f898 <_malloc_usable_size_r>
 800efe0:	4284      	cmp	r4, r0
 800efe2:	4607      	mov	r7, r0
 800efe4:	d802      	bhi.n	800efec <_realloc_r+0x34>
 800efe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800efea:	d812      	bhi.n	800f012 <_realloc_r+0x5a>
 800efec:	4621      	mov	r1, r4
 800efee:	4640      	mov	r0, r8
 800eff0:	f7ff fd82 	bl	800eaf8 <_malloc_r>
 800eff4:	4605      	mov	r5, r0
 800eff6:	2800      	cmp	r0, #0
 800eff8:	d0ed      	beq.n	800efd6 <_realloc_r+0x1e>
 800effa:	42bc      	cmp	r4, r7
 800effc:	4622      	mov	r2, r4
 800effe:	4631      	mov	r1, r6
 800f000:	bf28      	it	cs
 800f002:	463a      	movcs	r2, r7
 800f004:	f7fc f8c8 	bl	800b198 <memcpy>
 800f008:	4631      	mov	r1, r6
 800f00a:	4640      	mov	r0, r8
 800f00c:	f7ff fd08 	bl	800ea20 <_free_r>
 800f010:	e7e1      	b.n	800efd6 <_realloc_r+0x1e>
 800f012:	4635      	mov	r5, r6
 800f014:	e7df      	b.n	800efd6 <_realloc_r+0x1e>

0800f016 <__sfputc_r>:
 800f016:	6893      	ldr	r3, [r2, #8]
 800f018:	3b01      	subs	r3, #1
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	b410      	push	{r4}
 800f01e:	6093      	str	r3, [r2, #8]
 800f020:	da08      	bge.n	800f034 <__sfputc_r+0x1e>
 800f022:	6994      	ldr	r4, [r2, #24]
 800f024:	42a3      	cmp	r3, r4
 800f026:	db01      	blt.n	800f02c <__sfputc_r+0x16>
 800f028:	290a      	cmp	r1, #10
 800f02a:	d103      	bne.n	800f034 <__sfputc_r+0x1e>
 800f02c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f030:	f000 b94a 	b.w	800f2c8 <__swbuf_r>
 800f034:	6813      	ldr	r3, [r2, #0]
 800f036:	1c58      	adds	r0, r3, #1
 800f038:	6010      	str	r0, [r2, #0]
 800f03a:	7019      	strb	r1, [r3, #0]
 800f03c:	4608      	mov	r0, r1
 800f03e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f042:	4770      	bx	lr

0800f044 <__sfputs_r>:
 800f044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f046:	4606      	mov	r6, r0
 800f048:	460f      	mov	r7, r1
 800f04a:	4614      	mov	r4, r2
 800f04c:	18d5      	adds	r5, r2, r3
 800f04e:	42ac      	cmp	r4, r5
 800f050:	d101      	bne.n	800f056 <__sfputs_r+0x12>
 800f052:	2000      	movs	r0, #0
 800f054:	e007      	b.n	800f066 <__sfputs_r+0x22>
 800f056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f05a:	463a      	mov	r2, r7
 800f05c:	4630      	mov	r0, r6
 800f05e:	f7ff ffda 	bl	800f016 <__sfputc_r>
 800f062:	1c43      	adds	r3, r0, #1
 800f064:	d1f3      	bne.n	800f04e <__sfputs_r+0xa>
 800f066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f068 <_vfiprintf_r>:
 800f068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f06c:	460d      	mov	r5, r1
 800f06e:	b09d      	sub	sp, #116	; 0x74
 800f070:	4614      	mov	r4, r2
 800f072:	4698      	mov	r8, r3
 800f074:	4606      	mov	r6, r0
 800f076:	b118      	cbz	r0, 800f080 <_vfiprintf_r+0x18>
 800f078:	6983      	ldr	r3, [r0, #24]
 800f07a:	b90b      	cbnz	r3, 800f080 <_vfiprintf_r+0x18>
 800f07c:	f000 fb06 	bl	800f68c <__sinit>
 800f080:	4b89      	ldr	r3, [pc, #548]	; (800f2a8 <_vfiprintf_r+0x240>)
 800f082:	429d      	cmp	r5, r3
 800f084:	d11b      	bne.n	800f0be <_vfiprintf_r+0x56>
 800f086:	6875      	ldr	r5, [r6, #4]
 800f088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f08a:	07d9      	lsls	r1, r3, #31
 800f08c:	d405      	bmi.n	800f09a <_vfiprintf_r+0x32>
 800f08e:	89ab      	ldrh	r3, [r5, #12]
 800f090:	059a      	lsls	r2, r3, #22
 800f092:	d402      	bmi.n	800f09a <_vfiprintf_r+0x32>
 800f094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f096:	f000 fb97 	bl	800f7c8 <__retarget_lock_acquire_recursive>
 800f09a:	89ab      	ldrh	r3, [r5, #12]
 800f09c:	071b      	lsls	r3, r3, #28
 800f09e:	d501      	bpl.n	800f0a4 <_vfiprintf_r+0x3c>
 800f0a0:	692b      	ldr	r3, [r5, #16]
 800f0a2:	b9eb      	cbnz	r3, 800f0e0 <_vfiprintf_r+0x78>
 800f0a4:	4629      	mov	r1, r5
 800f0a6:	4630      	mov	r0, r6
 800f0a8:	f000 f960 	bl	800f36c <__swsetup_r>
 800f0ac:	b1c0      	cbz	r0, 800f0e0 <_vfiprintf_r+0x78>
 800f0ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0b0:	07dc      	lsls	r4, r3, #31
 800f0b2:	d50e      	bpl.n	800f0d2 <_vfiprintf_r+0x6a>
 800f0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b8:	b01d      	add	sp, #116	; 0x74
 800f0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0be:	4b7b      	ldr	r3, [pc, #492]	; (800f2ac <_vfiprintf_r+0x244>)
 800f0c0:	429d      	cmp	r5, r3
 800f0c2:	d101      	bne.n	800f0c8 <_vfiprintf_r+0x60>
 800f0c4:	68b5      	ldr	r5, [r6, #8]
 800f0c6:	e7df      	b.n	800f088 <_vfiprintf_r+0x20>
 800f0c8:	4b79      	ldr	r3, [pc, #484]	; (800f2b0 <_vfiprintf_r+0x248>)
 800f0ca:	429d      	cmp	r5, r3
 800f0cc:	bf08      	it	eq
 800f0ce:	68f5      	ldreq	r5, [r6, #12]
 800f0d0:	e7da      	b.n	800f088 <_vfiprintf_r+0x20>
 800f0d2:	89ab      	ldrh	r3, [r5, #12]
 800f0d4:	0598      	lsls	r0, r3, #22
 800f0d6:	d4ed      	bmi.n	800f0b4 <_vfiprintf_r+0x4c>
 800f0d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0da:	f000 fb76 	bl	800f7ca <__retarget_lock_release_recursive>
 800f0de:	e7e9      	b.n	800f0b4 <_vfiprintf_r+0x4c>
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	9309      	str	r3, [sp, #36]	; 0x24
 800f0e4:	2320      	movs	r3, #32
 800f0e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0ee:	2330      	movs	r3, #48	; 0x30
 800f0f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f2b4 <_vfiprintf_r+0x24c>
 800f0f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0f8:	f04f 0901 	mov.w	r9, #1
 800f0fc:	4623      	mov	r3, r4
 800f0fe:	469a      	mov	sl, r3
 800f100:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f104:	b10a      	cbz	r2, 800f10a <_vfiprintf_r+0xa2>
 800f106:	2a25      	cmp	r2, #37	; 0x25
 800f108:	d1f9      	bne.n	800f0fe <_vfiprintf_r+0x96>
 800f10a:	ebba 0b04 	subs.w	fp, sl, r4
 800f10e:	d00b      	beq.n	800f128 <_vfiprintf_r+0xc0>
 800f110:	465b      	mov	r3, fp
 800f112:	4622      	mov	r2, r4
 800f114:	4629      	mov	r1, r5
 800f116:	4630      	mov	r0, r6
 800f118:	f7ff ff94 	bl	800f044 <__sfputs_r>
 800f11c:	3001      	adds	r0, #1
 800f11e:	f000 80aa 	beq.w	800f276 <_vfiprintf_r+0x20e>
 800f122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f124:	445a      	add	r2, fp
 800f126:	9209      	str	r2, [sp, #36]	; 0x24
 800f128:	f89a 3000 	ldrb.w	r3, [sl]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	f000 80a2 	beq.w	800f276 <_vfiprintf_r+0x20e>
 800f132:	2300      	movs	r3, #0
 800f134:	f04f 32ff 	mov.w	r2, #4294967295
 800f138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f13c:	f10a 0a01 	add.w	sl, sl, #1
 800f140:	9304      	str	r3, [sp, #16]
 800f142:	9307      	str	r3, [sp, #28]
 800f144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f148:	931a      	str	r3, [sp, #104]	; 0x68
 800f14a:	4654      	mov	r4, sl
 800f14c:	2205      	movs	r2, #5
 800f14e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f152:	4858      	ldr	r0, [pc, #352]	; (800f2b4 <_vfiprintf_r+0x24c>)
 800f154:	f7f1 f84c 	bl	80001f0 <memchr>
 800f158:	9a04      	ldr	r2, [sp, #16]
 800f15a:	b9d8      	cbnz	r0, 800f194 <_vfiprintf_r+0x12c>
 800f15c:	06d1      	lsls	r1, r2, #27
 800f15e:	bf44      	itt	mi
 800f160:	2320      	movmi	r3, #32
 800f162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f166:	0713      	lsls	r3, r2, #28
 800f168:	bf44      	itt	mi
 800f16a:	232b      	movmi	r3, #43	; 0x2b
 800f16c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f170:	f89a 3000 	ldrb.w	r3, [sl]
 800f174:	2b2a      	cmp	r3, #42	; 0x2a
 800f176:	d015      	beq.n	800f1a4 <_vfiprintf_r+0x13c>
 800f178:	9a07      	ldr	r2, [sp, #28]
 800f17a:	4654      	mov	r4, sl
 800f17c:	2000      	movs	r0, #0
 800f17e:	f04f 0c0a 	mov.w	ip, #10
 800f182:	4621      	mov	r1, r4
 800f184:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f188:	3b30      	subs	r3, #48	; 0x30
 800f18a:	2b09      	cmp	r3, #9
 800f18c:	d94e      	bls.n	800f22c <_vfiprintf_r+0x1c4>
 800f18e:	b1b0      	cbz	r0, 800f1be <_vfiprintf_r+0x156>
 800f190:	9207      	str	r2, [sp, #28]
 800f192:	e014      	b.n	800f1be <_vfiprintf_r+0x156>
 800f194:	eba0 0308 	sub.w	r3, r0, r8
 800f198:	fa09 f303 	lsl.w	r3, r9, r3
 800f19c:	4313      	orrs	r3, r2
 800f19e:	9304      	str	r3, [sp, #16]
 800f1a0:	46a2      	mov	sl, r4
 800f1a2:	e7d2      	b.n	800f14a <_vfiprintf_r+0xe2>
 800f1a4:	9b03      	ldr	r3, [sp, #12]
 800f1a6:	1d19      	adds	r1, r3, #4
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	9103      	str	r1, [sp, #12]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	bfbb      	ittet	lt
 800f1b0:	425b      	neglt	r3, r3
 800f1b2:	f042 0202 	orrlt.w	r2, r2, #2
 800f1b6:	9307      	strge	r3, [sp, #28]
 800f1b8:	9307      	strlt	r3, [sp, #28]
 800f1ba:	bfb8      	it	lt
 800f1bc:	9204      	strlt	r2, [sp, #16]
 800f1be:	7823      	ldrb	r3, [r4, #0]
 800f1c0:	2b2e      	cmp	r3, #46	; 0x2e
 800f1c2:	d10c      	bne.n	800f1de <_vfiprintf_r+0x176>
 800f1c4:	7863      	ldrb	r3, [r4, #1]
 800f1c6:	2b2a      	cmp	r3, #42	; 0x2a
 800f1c8:	d135      	bne.n	800f236 <_vfiprintf_r+0x1ce>
 800f1ca:	9b03      	ldr	r3, [sp, #12]
 800f1cc:	1d1a      	adds	r2, r3, #4
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	9203      	str	r2, [sp, #12]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	bfb8      	it	lt
 800f1d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1da:	3402      	adds	r4, #2
 800f1dc:	9305      	str	r3, [sp, #20]
 800f1de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f2c4 <_vfiprintf_r+0x25c>
 800f1e2:	7821      	ldrb	r1, [r4, #0]
 800f1e4:	2203      	movs	r2, #3
 800f1e6:	4650      	mov	r0, sl
 800f1e8:	f7f1 f802 	bl	80001f0 <memchr>
 800f1ec:	b140      	cbz	r0, 800f200 <_vfiprintf_r+0x198>
 800f1ee:	2340      	movs	r3, #64	; 0x40
 800f1f0:	eba0 000a 	sub.w	r0, r0, sl
 800f1f4:	fa03 f000 	lsl.w	r0, r3, r0
 800f1f8:	9b04      	ldr	r3, [sp, #16]
 800f1fa:	4303      	orrs	r3, r0
 800f1fc:	3401      	adds	r4, #1
 800f1fe:	9304      	str	r3, [sp, #16]
 800f200:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f204:	482c      	ldr	r0, [pc, #176]	; (800f2b8 <_vfiprintf_r+0x250>)
 800f206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f20a:	2206      	movs	r2, #6
 800f20c:	f7f0 fff0 	bl	80001f0 <memchr>
 800f210:	2800      	cmp	r0, #0
 800f212:	d03f      	beq.n	800f294 <_vfiprintf_r+0x22c>
 800f214:	4b29      	ldr	r3, [pc, #164]	; (800f2bc <_vfiprintf_r+0x254>)
 800f216:	bb1b      	cbnz	r3, 800f260 <_vfiprintf_r+0x1f8>
 800f218:	9b03      	ldr	r3, [sp, #12]
 800f21a:	3307      	adds	r3, #7
 800f21c:	f023 0307 	bic.w	r3, r3, #7
 800f220:	3308      	adds	r3, #8
 800f222:	9303      	str	r3, [sp, #12]
 800f224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f226:	443b      	add	r3, r7
 800f228:	9309      	str	r3, [sp, #36]	; 0x24
 800f22a:	e767      	b.n	800f0fc <_vfiprintf_r+0x94>
 800f22c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f230:	460c      	mov	r4, r1
 800f232:	2001      	movs	r0, #1
 800f234:	e7a5      	b.n	800f182 <_vfiprintf_r+0x11a>
 800f236:	2300      	movs	r3, #0
 800f238:	3401      	adds	r4, #1
 800f23a:	9305      	str	r3, [sp, #20]
 800f23c:	4619      	mov	r1, r3
 800f23e:	f04f 0c0a 	mov.w	ip, #10
 800f242:	4620      	mov	r0, r4
 800f244:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f248:	3a30      	subs	r2, #48	; 0x30
 800f24a:	2a09      	cmp	r2, #9
 800f24c:	d903      	bls.n	800f256 <_vfiprintf_r+0x1ee>
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d0c5      	beq.n	800f1de <_vfiprintf_r+0x176>
 800f252:	9105      	str	r1, [sp, #20]
 800f254:	e7c3      	b.n	800f1de <_vfiprintf_r+0x176>
 800f256:	fb0c 2101 	mla	r1, ip, r1, r2
 800f25a:	4604      	mov	r4, r0
 800f25c:	2301      	movs	r3, #1
 800f25e:	e7f0      	b.n	800f242 <_vfiprintf_r+0x1da>
 800f260:	ab03      	add	r3, sp, #12
 800f262:	9300      	str	r3, [sp, #0]
 800f264:	462a      	mov	r2, r5
 800f266:	4b16      	ldr	r3, [pc, #88]	; (800f2c0 <_vfiprintf_r+0x258>)
 800f268:	a904      	add	r1, sp, #16
 800f26a:	4630      	mov	r0, r6
 800f26c:	f7fc f84a 	bl	800b304 <_printf_float>
 800f270:	4607      	mov	r7, r0
 800f272:	1c78      	adds	r0, r7, #1
 800f274:	d1d6      	bne.n	800f224 <_vfiprintf_r+0x1bc>
 800f276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f278:	07d9      	lsls	r1, r3, #31
 800f27a:	d405      	bmi.n	800f288 <_vfiprintf_r+0x220>
 800f27c:	89ab      	ldrh	r3, [r5, #12]
 800f27e:	059a      	lsls	r2, r3, #22
 800f280:	d402      	bmi.n	800f288 <_vfiprintf_r+0x220>
 800f282:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f284:	f000 faa1 	bl	800f7ca <__retarget_lock_release_recursive>
 800f288:	89ab      	ldrh	r3, [r5, #12]
 800f28a:	065b      	lsls	r3, r3, #25
 800f28c:	f53f af12 	bmi.w	800f0b4 <_vfiprintf_r+0x4c>
 800f290:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f292:	e711      	b.n	800f0b8 <_vfiprintf_r+0x50>
 800f294:	ab03      	add	r3, sp, #12
 800f296:	9300      	str	r3, [sp, #0]
 800f298:	462a      	mov	r2, r5
 800f29a:	4b09      	ldr	r3, [pc, #36]	; (800f2c0 <_vfiprintf_r+0x258>)
 800f29c:	a904      	add	r1, sp, #16
 800f29e:	4630      	mov	r0, r6
 800f2a0:	f7fc fad4 	bl	800b84c <_printf_i>
 800f2a4:	e7e4      	b.n	800f270 <_vfiprintf_r+0x208>
 800f2a6:	bf00      	nop
 800f2a8:	08011b4c 	.word	0x08011b4c
 800f2ac:	08011b6c 	.word	0x08011b6c
 800f2b0:	08011b2c 	.word	0x08011b2c
 800f2b4:	08011adc 	.word	0x08011adc
 800f2b8:	08011ae6 	.word	0x08011ae6
 800f2bc:	0800b305 	.word	0x0800b305
 800f2c0:	0800f045 	.word	0x0800f045
 800f2c4:	08011ae2 	.word	0x08011ae2

0800f2c8 <__swbuf_r>:
 800f2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ca:	460e      	mov	r6, r1
 800f2cc:	4614      	mov	r4, r2
 800f2ce:	4605      	mov	r5, r0
 800f2d0:	b118      	cbz	r0, 800f2da <__swbuf_r+0x12>
 800f2d2:	6983      	ldr	r3, [r0, #24]
 800f2d4:	b90b      	cbnz	r3, 800f2da <__swbuf_r+0x12>
 800f2d6:	f000 f9d9 	bl	800f68c <__sinit>
 800f2da:	4b21      	ldr	r3, [pc, #132]	; (800f360 <__swbuf_r+0x98>)
 800f2dc:	429c      	cmp	r4, r3
 800f2de:	d12b      	bne.n	800f338 <__swbuf_r+0x70>
 800f2e0:	686c      	ldr	r4, [r5, #4]
 800f2e2:	69a3      	ldr	r3, [r4, #24]
 800f2e4:	60a3      	str	r3, [r4, #8]
 800f2e6:	89a3      	ldrh	r3, [r4, #12]
 800f2e8:	071a      	lsls	r2, r3, #28
 800f2ea:	d52f      	bpl.n	800f34c <__swbuf_r+0x84>
 800f2ec:	6923      	ldr	r3, [r4, #16]
 800f2ee:	b36b      	cbz	r3, 800f34c <__swbuf_r+0x84>
 800f2f0:	6923      	ldr	r3, [r4, #16]
 800f2f2:	6820      	ldr	r0, [r4, #0]
 800f2f4:	1ac0      	subs	r0, r0, r3
 800f2f6:	6963      	ldr	r3, [r4, #20]
 800f2f8:	b2f6      	uxtb	r6, r6
 800f2fa:	4283      	cmp	r3, r0
 800f2fc:	4637      	mov	r7, r6
 800f2fe:	dc04      	bgt.n	800f30a <__swbuf_r+0x42>
 800f300:	4621      	mov	r1, r4
 800f302:	4628      	mov	r0, r5
 800f304:	f000 f92e 	bl	800f564 <_fflush_r>
 800f308:	bb30      	cbnz	r0, 800f358 <__swbuf_r+0x90>
 800f30a:	68a3      	ldr	r3, [r4, #8]
 800f30c:	3b01      	subs	r3, #1
 800f30e:	60a3      	str	r3, [r4, #8]
 800f310:	6823      	ldr	r3, [r4, #0]
 800f312:	1c5a      	adds	r2, r3, #1
 800f314:	6022      	str	r2, [r4, #0]
 800f316:	701e      	strb	r6, [r3, #0]
 800f318:	6963      	ldr	r3, [r4, #20]
 800f31a:	3001      	adds	r0, #1
 800f31c:	4283      	cmp	r3, r0
 800f31e:	d004      	beq.n	800f32a <__swbuf_r+0x62>
 800f320:	89a3      	ldrh	r3, [r4, #12]
 800f322:	07db      	lsls	r3, r3, #31
 800f324:	d506      	bpl.n	800f334 <__swbuf_r+0x6c>
 800f326:	2e0a      	cmp	r6, #10
 800f328:	d104      	bne.n	800f334 <__swbuf_r+0x6c>
 800f32a:	4621      	mov	r1, r4
 800f32c:	4628      	mov	r0, r5
 800f32e:	f000 f919 	bl	800f564 <_fflush_r>
 800f332:	b988      	cbnz	r0, 800f358 <__swbuf_r+0x90>
 800f334:	4638      	mov	r0, r7
 800f336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f338:	4b0a      	ldr	r3, [pc, #40]	; (800f364 <__swbuf_r+0x9c>)
 800f33a:	429c      	cmp	r4, r3
 800f33c:	d101      	bne.n	800f342 <__swbuf_r+0x7a>
 800f33e:	68ac      	ldr	r4, [r5, #8]
 800f340:	e7cf      	b.n	800f2e2 <__swbuf_r+0x1a>
 800f342:	4b09      	ldr	r3, [pc, #36]	; (800f368 <__swbuf_r+0xa0>)
 800f344:	429c      	cmp	r4, r3
 800f346:	bf08      	it	eq
 800f348:	68ec      	ldreq	r4, [r5, #12]
 800f34a:	e7ca      	b.n	800f2e2 <__swbuf_r+0x1a>
 800f34c:	4621      	mov	r1, r4
 800f34e:	4628      	mov	r0, r5
 800f350:	f000 f80c 	bl	800f36c <__swsetup_r>
 800f354:	2800      	cmp	r0, #0
 800f356:	d0cb      	beq.n	800f2f0 <__swbuf_r+0x28>
 800f358:	f04f 37ff 	mov.w	r7, #4294967295
 800f35c:	e7ea      	b.n	800f334 <__swbuf_r+0x6c>
 800f35e:	bf00      	nop
 800f360:	08011b4c 	.word	0x08011b4c
 800f364:	08011b6c 	.word	0x08011b6c
 800f368:	08011b2c 	.word	0x08011b2c

0800f36c <__swsetup_r>:
 800f36c:	4b32      	ldr	r3, [pc, #200]	; (800f438 <__swsetup_r+0xcc>)
 800f36e:	b570      	push	{r4, r5, r6, lr}
 800f370:	681d      	ldr	r5, [r3, #0]
 800f372:	4606      	mov	r6, r0
 800f374:	460c      	mov	r4, r1
 800f376:	b125      	cbz	r5, 800f382 <__swsetup_r+0x16>
 800f378:	69ab      	ldr	r3, [r5, #24]
 800f37a:	b913      	cbnz	r3, 800f382 <__swsetup_r+0x16>
 800f37c:	4628      	mov	r0, r5
 800f37e:	f000 f985 	bl	800f68c <__sinit>
 800f382:	4b2e      	ldr	r3, [pc, #184]	; (800f43c <__swsetup_r+0xd0>)
 800f384:	429c      	cmp	r4, r3
 800f386:	d10f      	bne.n	800f3a8 <__swsetup_r+0x3c>
 800f388:	686c      	ldr	r4, [r5, #4]
 800f38a:	89a3      	ldrh	r3, [r4, #12]
 800f38c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f390:	0719      	lsls	r1, r3, #28
 800f392:	d42c      	bmi.n	800f3ee <__swsetup_r+0x82>
 800f394:	06dd      	lsls	r5, r3, #27
 800f396:	d411      	bmi.n	800f3bc <__swsetup_r+0x50>
 800f398:	2309      	movs	r3, #9
 800f39a:	6033      	str	r3, [r6, #0]
 800f39c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f3a0:	81a3      	strh	r3, [r4, #12]
 800f3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a6:	e03e      	b.n	800f426 <__swsetup_r+0xba>
 800f3a8:	4b25      	ldr	r3, [pc, #148]	; (800f440 <__swsetup_r+0xd4>)
 800f3aa:	429c      	cmp	r4, r3
 800f3ac:	d101      	bne.n	800f3b2 <__swsetup_r+0x46>
 800f3ae:	68ac      	ldr	r4, [r5, #8]
 800f3b0:	e7eb      	b.n	800f38a <__swsetup_r+0x1e>
 800f3b2:	4b24      	ldr	r3, [pc, #144]	; (800f444 <__swsetup_r+0xd8>)
 800f3b4:	429c      	cmp	r4, r3
 800f3b6:	bf08      	it	eq
 800f3b8:	68ec      	ldreq	r4, [r5, #12]
 800f3ba:	e7e6      	b.n	800f38a <__swsetup_r+0x1e>
 800f3bc:	0758      	lsls	r0, r3, #29
 800f3be:	d512      	bpl.n	800f3e6 <__swsetup_r+0x7a>
 800f3c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3c2:	b141      	cbz	r1, 800f3d6 <__swsetup_r+0x6a>
 800f3c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3c8:	4299      	cmp	r1, r3
 800f3ca:	d002      	beq.n	800f3d2 <__swsetup_r+0x66>
 800f3cc:	4630      	mov	r0, r6
 800f3ce:	f7ff fb27 	bl	800ea20 <_free_r>
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	6363      	str	r3, [r4, #52]	; 0x34
 800f3d6:	89a3      	ldrh	r3, [r4, #12]
 800f3d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f3dc:	81a3      	strh	r3, [r4, #12]
 800f3de:	2300      	movs	r3, #0
 800f3e0:	6063      	str	r3, [r4, #4]
 800f3e2:	6923      	ldr	r3, [r4, #16]
 800f3e4:	6023      	str	r3, [r4, #0]
 800f3e6:	89a3      	ldrh	r3, [r4, #12]
 800f3e8:	f043 0308 	orr.w	r3, r3, #8
 800f3ec:	81a3      	strh	r3, [r4, #12]
 800f3ee:	6923      	ldr	r3, [r4, #16]
 800f3f0:	b94b      	cbnz	r3, 800f406 <__swsetup_r+0x9a>
 800f3f2:	89a3      	ldrh	r3, [r4, #12]
 800f3f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f3f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3fc:	d003      	beq.n	800f406 <__swsetup_r+0x9a>
 800f3fe:	4621      	mov	r1, r4
 800f400:	4630      	mov	r0, r6
 800f402:	f000 fa09 	bl	800f818 <__smakebuf_r>
 800f406:	89a0      	ldrh	r0, [r4, #12]
 800f408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f40c:	f010 0301 	ands.w	r3, r0, #1
 800f410:	d00a      	beq.n	800f428 <__swsetup_r+0xbc>
 800f412:	2300      	movs	r3, #0
 800f414:	60a3      	str	r3, [r4, #8]
 800f416:	6963      	ldr	r3, [r4, #20]
 800f418:	425b      	negs	r3, r3
 800f41a:	61a3      	str	r3, [r4, #24]
 800f41c:	6923      	ldr	r3, [r4, #16]
 800f41e:	b943      	cbnz	r3, 800f432 <__swsetup_r+0xc6>
 800f420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f424:	d1ba      	bne.n	800f39c <__swsetup_r+0x30>
 800f426:	bd70      	pop	{r4, r5, r6, pc}
 800f428:	0781      	lsls	r1, r0, #30
 800f42a:	bf58      	it	pl
 800f42c:	6963      	ldrpl	r3, [r4, #20]
 800f42e:	60a3      	str	r3, [r4, #8]
 800f430:	e7f4      	b.n	800f41c <__swsetup_r+0xb0>
 800f432:	2000      	movs	r0, #0
 800f434:	e7f7      	b.n	800f426 <__swsetup_r+0xba>
 800f436:	bf00      	nop
 800f438:	20000234 	.word	0x20000234
 800f43c:	08011b4c 	.word	0x08011b4c
 800f440:	08011b6c 	.word	0x08011b6c
 800f444:	08011b2c 	.word	0x08011b2c

0800f448 <abort>:
 800f448:	b508      	push	{r3, lr}
 800f44a:	2006      	movs	r0, #6
 800f44c:	f000 fa54 	bl	800f8f8 <raise>
 800f450:	2001      	movs	r0, #1
 800f452:	f7f4 ffc5 	bl	80043e0 <_exit>
	...

0800f458 <__sflush_r>:
 800f458:	898a      	ldrh	r2, [r1, #12]
 800f45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f45e:	4605      	mov	r5, r0
 800f460:	0710      	lsls	r0, r2, #28
 800f462:	460c      	mov	r4, r1
 800f464:	d458      	bmi.n	800f518 <__sflush_r+0xc0>
 800f466:	684b      	ldr	r3, [r1, #4]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	dc05      	bgt.n	800f478 <__sflush_r+0x20>
 800f46c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f46e:	2b00      	cmp	r3, #0
 800f470:	dc02      	bgt.n	800f478 <__sflush_r+0x20>
 800f472:	2000      	movs	r0, #0
 800f474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f47a:	2e00      	cmp	r6, #0
 800f47c:	d0f9      	beq.n	800f472 <__sflush_r+0x1a>
 800f47e:	2300      	movs	r3, #0
 800f480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f484:	682f      	ldr	r7, [r5, #0]
 800f486:	602b      	str	r3, [r5, #0]
 800f488:	d032      	beq.n	800f4f0 <__sflush_r+0x98>
 800f48a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f48c:	89a3      	ldrh	r3, [r4, #12]
 800f48e:	075a      	lsls	r2, r3, #29
 800f490:	d505      	bpl.n	800f49e <__sflush_r+0x46>
 800f492:	6863      	ldr	r3, [r4, #4]
 800f494:	1ac0      	subs	r0, r0, r3
 800f496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f498:	b10b      	cbz	r3, 800f49e <__sflush_r+0x46>
 800f49a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f49c:	1ac0      	subs	r0, r0, r3
 800f49e:	2300      	movs	r3, #0
 800f4a0:	4602      	mov	r2, r0
 800f4a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4a4:	6a21      	ldr	r1, [r4, #32]
 800f4a6:	4628      	mov	r0, r5
 800f4a8:	47b0      	blx	r6
 800f4aa:	1c43      	adds	r3, r0, #1
 800f4ac:	89a3      	ldrh	r3, [r4, #12]
 800f4ae:	d106      	bne.n	800f4be <__sflush_r+0x66>
 800f4b0:	6829      	ldr	r1, [r5, #0]
 800f4b2:	291d      	cmp	r1, #29
 800f4b4:	d82c      	bhi.n	800f510 <__sflush_r+0xb8>
 800f4b6:	4a2a      	ldr	r2, [pc, #168]	; (800f560 <__sflush_r+0x108>)
 800f4b8:	40ca      	lsrs	r2, r1
 800f4ba:	07d6      	lsls	r6, r2, #31
 800f4bc:	d528      	bpl.n	800f510 <__sflush_r+0xb8>
 800f4be:	2200      	movs	r2, #0
 800f4c0:	6062      	str	r2, [r4, #4]
 800f4c2:	04d9      	lsls	r1, r3, #19
 800f4c4:	6922      	ldr	r2, [r4, #16]
 800f4c6:	6022      	str	r2, [r4, #0]
 800f4c8:	d504      	bpl.n	800f4d4 <__sflush_r+0x7c>
 800f4ca:	1c42      	adds	r2, r0, #1
 800f4cc:	d101      	bne.n	800f4d2 <__sflush_r+0x7a>
 800f4ce:	682b      	ldr	r3, [r5, #0]
 800f4d0:	b903      	cbnz	r3, 800f4d4 <__sflush_r+0x7c>
 800f4d2:	6560      	str	r0, [r4, #84]	; 0x54
 800f4d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4d6:	602f      	str	r7, [r5, #0]
 800f4d8:	2900      	cmp	r1, #0
 800f4da:	d0ca      	beq.n	800f472 <__sflush_r+0x1a>
 800f4dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4e0:	4299      	cmp	r1, r3
 800f4e2:	d002      	beq.n	800f4ea <__sflush_r+0x92>
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	f7ff fa9b 	bl	800ea20 <_free_r>
 800f4ea:	2000      	movs	r0, #0
 800f4ec:	6360      	str	r0, [r4, #52]	; 0x34
 800f4ee:	e7c1      	b.n	800f474 <__sflush_r+0x1c>
 800f4f0:	6a21      	ldr	r1, [r4, #32]
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	47b0      	blx	r6
 800f4f8:	1c41      	adds	r1, r0, #1
 800f4fa:	d1c7      	bne.n	800f48c <__sflush_r+0x34>
 800f4fc:	682b      	ldr	r3, [r5, #0]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d0c4      	beq.n	800f48c <__sflush_r+0x34>
 800f502:	2b1d      	cmp	r3, #29
 800f504:	d001      	beq.n	800f50a <__sflush_r+0xb2>
 800f506:	2b16      	cmp	r3, #22
 800f508:	d101      	bne.n	800f50e <__sflush_r+0xb6>
 800f50a:	602f      	str	r7, [r5, #0]
 800f50c:	e7b1      	b.n	800f472 <__sflush_r+0x1a>
 800f50e:	89a3      	ldrh	r3, [r4, #12]
 800f510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f514:	81a3      	strh	r3, [r4, #12]
 800f516:	e7ad      	b.n	800f474 <__sflush_r+0x1c>
 800f518:	690f      	ldr	r7, [r1, #16]
 800f51a:	2f00      	cmp	r7, #0
 800f51c:	d0a9      	beq.n	800f472 <__sflush_r+0x1a>
 800f51e:	0793      	lsls	r3, r2, #30
 800f520:	680e      	ldr	r6, [r1, #0]
 800f522:	bf08      	it	eq
 800f524:	694b      	ldreq	r3, [r1, #20]
 800f526:	600f      	str	r7, [r1, #0]
 800f528:	bf18      	it	ne
 800f52a:	2300      	movne	r3, #0
 800f52c:	eba6 0807 	sub.w	r8, r6, r7
 800f530:	608b      	str	r3, [r1, #8]
 800f532:	f1b8 0f00 	cmp.w	r8, #0
 800f536:	dd9c      	ble.n	800f472 <__sflush_r+0x1a>
 800f538:	6a21      	ldr	r1, [r4, #32]
 800f53a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f53c:	4643      	mov	r3, r8
 800f53e:	463a      	mov	r2, r7
 800f540:	4628      	mov	r0, r5
 800f542:	47b0      	blx	r6
 800f544:	2800      	cmp	r0, #0
 800f546:	dc06      	bgt.n	800f556 <__sflush_r+0xfe>
 800f548:	89a3      	ldrh	r3, [r4, #12]
 800f54a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f54e:	81a3      	strh	r3, [r4, #12]
 800f550:	f04f 30ff 	mov.w	r0, #4294967295
 800f554:	e78e      	b.n	800f474 <__sflush_r+0x1c>
 800f556:	4407      	add	r7, r0
 800f558:	eba8 0800 	sub.w	r8, r8, r0
 800f55c:	e7e9      	b.n	800f532 <__sflush_r+0xda>
 800f55e:	bf00      	nop
 800f560:	20400001 	.word	0x20400001

0800f564 <_fflush_r>:
 800f564:	b538      	push	{r3, r4, r5, lr}
 800f566:	690b      	ldr	r3, [r1, #16]
 800f568:	4605      	mov	r5, r0
 800f56a:	460c      	mov	r4, r1
 800f56c:	b913      	cbnz	r3, 800f574 <_fflush_r+0x10>
 800f56e:	2500      	movs	r5, #0
 800f570:	4628      	mov	r0, r5
 800f572:	bd38      	pop	{r3, r4, r5, pc}
 800f574:	b118      	cbz	r0, 800f57e <_fflush_r+0x1a>
 800f576:	6983      	ldr	r3, [r0, #24]
 800f578:	b90b      	cbnz	r3, 800f57e <_fflush_r+0x1a>
 800f57a:	f000 f887 	bl	800f68c <__sinit>
 800f57e:	4b14      	ldr	r3, [pc, #80]	; (800f5d0 <_fflush_r+0x6c>)
 800f580:	429c      	cmp	r4, r3
 800f582:	d11b      	bne.n	800f5bc <_fflush_r+0x58>
 800f584:	686c      	ldr	r4, [r5, #4]
 800f586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d0ef      	beq.n	800f56e <_fflush_r+0xa>
 800f58e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f590:	07d0      	lsls	r0, r2, #31
 800f592:	d404      	bmi.n	800f59e <_fflush_r+0x3a>
 800f594:	0599      	lsls	r1, r3, #22
 800f596:	d402      	bmi.n	800f59e <_fflush_r+0x3a>
 800f598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f59a:	f000 f915 	bl	800f7c8 <__retarget_lock_acquire_recursive>
 800f59e:	4628      	mov	r0, r5
 800f5a0:	4621      	mov	r1, r4
 800f5a2:	f7ff ff59 	bl	800f458 <__sflush_r>
 800f5a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5a8:	07da      	lsls	r2, r3, #31
 800f5aa:	4605      	mov	r5, r0
 800f5ac:	d4e0      	bmi.n	800f570 <_fflush_r+0xc>
 800f5ae:	89a3      	ldrh	r3, [r4, #12]
 800f5b0:	059b      	lsls	r3, r3, #22
 800f5b2:	d4dd      	bmi.n	800f570 <_fflush_r+0xc>
 800f5b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5b6:	f000 f908 	bl	800f7ca <__retarget_lock_release_recursive>
 800f5ba:	e7d9      	b.n	800f570 <_fflush_r+0xc>
 800f5bc:	4b05      	ldr	r3, [pc, #20]	; (800f5d4 <_fflush_r+0x70>)
 800f5be:	429c      	cmp	r4, r3
 800f5c0:	d101      	bne.n	800f5c6 <_fflush_r+0x62>
 800f5c2:	68ac      	ldr	r4, [r5, #8]
 800f5c4:	e7df      	b.n	800f586 <_fflush_r+0x22>
 800f5c6:	4b04      	ldr	r3, [pc, #16]	; (800f5d8 <_fflush_r+0x74>)
 800f5c8:	429c      	cmp	r4, r3
 800f5ca:	bf08      	it	eq
 800f5cc:	68ec      	ldreq	r4, [r5, #12]
 800f5ce:	e7da      	b.n	800f586 <_fflush_r+0x22>
 800f5d0:	08011b4c 	.word	0x08011b4c
 800f5d4:	08011b6c 	.word	0x08011b6c
 800f5d8:	08011b2c 	.word	0x08011b2c

0800f5dc <std>:
 800f5dc:	2300      	movs	r3, #0
 800f5de:	b510      	push	{r4, lr}
 800f5e0:	4604      	mov	r4, r0
 800f5e2:	e9c0 3300 	strd	r3, r3, [r0]
 800f5e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f5ea:	6083      	str	r3, [r0, #8]
 800f5ec:	8181      	strh	r1, [r0, #12]
 800f5ee:	6643      	str	r3, [r0, #100]	; 0x64
 800f5f0:	81c2      	strh	r2, [r0, #14]
 800f5f2:	6183      	str	r3, [r0, #24]
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	2208      	movs	r2, #8
 800f5f8:	305c      	adds	r0, #92	; 0x5c
 800f5fa:	f7fb fddb 	bl	800b1b4 <memset>
 800f5fe:	4b05      	ldr	r3, [pc, #20]	; (800f614 <std+0x38>)
 800f600:	6263      	str	r3, [r4, #36]	; 0x24
 800f602:	4b05      	ldr	r3, [pc, #20]	; (800f618 <std+0x3c>)
 800f604:	62a3      	str	r3, [r4, #40]	; 0x28
 800f606:	4b05      	ldr	r3, [pc, #20]	; (800f61c <std+0x40>)
 800f608:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f60a:	4b05      	ldr	r3, [pc, #20]	; (800f620 <std+0x44>)
 800f60c:	6224      	str	r4, [r4, #32]
 800f60e:	6323      	str	r3, [r4, #48]	; 0x30
 800f610:	bd10      	pop	{r4, pc}
 800f612:	bf00      	nop
 800f614:	0800f931 	.word	0x0800f931
 800f618:	0800f953 	.word	0x0800f953
 800f61c:	0800f98b 	.word	0x0800f98b
 800f620:	0800f9af 	.word	0x0800f9af

0800f624 <_cleanup_r>:
 800f624:	4901      	ldr	r1, [pc, #4]	; (800f62c <_cleanup_r+0x8>)
 800f626:	f000 b8af 	b.w	800f788 <_fwalk_reent>
 800f62a:	bf00      	nop
 800f62c:	0800f565 	.word	0x0800f565

0800f630 <__sfmoreglue>:
 800f630:	b570      	push	{r4, r5, r6, lr}
 800f632:	2268      	movs	r2, #104	; 0x68
 800f634:	1e4d      	subs	r5, r1, #1
 800f636:	4355      	muls	r5, r2
 800f638:	460e      	mov	r6, r1
 800f63a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f63e:	f7ff fa5b 	bl	800eaf8 <_malloc_r>
 800f642:	4604      	mov	r4, r0
 800f644:	b140      	cbz	r0, 800f658 <__sfmoreglue+0x28>
 800f646:	2100      	movs	r1, #0
 800f648:	e9c0 1600 	strd	r1, r6, [r0]
 800f64c:	300c      	adds	r0, #12
 800f64e:	60a0      	str	r0, [r4, #8]
 800f650:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f654:	f7fb fdae 	bl	800b1b4 <memset>
 800f658:	4620      	mov	r0, r4
 800f65a:	bd70      	pop	{r4, r5, r6, pc}

0800f65c <__sfp_lock_acquire>:
 800f65c:	4801      	ldr	r0, [pc, #4]	; (800f664 <__sfp_lock_acquire+0x8>)
 800f65e:	f000 b8b3 	b.w	800f7c8 <__retarget_lock_acquire_recursive>
 800f662:	bf00      	nop
 800f664:	20001ebd 	.word	0x20001ebd

0800f668 <__sfp_lock_release>:
 800f668:	4801      	ldr	r0, [pc, #4]	; (800f670 <__sfp_lock_release+0x8>)
 800f66a:	f000 b8ae 	b.w	800f7ca <__retarget_lock_release_recursive>
 800f66e:	bf00      	nop
 800f670:	20001ebd 	.word	0x20001ebd

0800f674 <__sinit_lock_acquire>:
 800f674:	4801      	ldr	r0, [pc, #4]	; (800f67c <__sinit_lock_acquire+0x8>)
 800f676:	f000 b8a7 	b.w	800f7c8 <__retarget_lock_acquire_recursive>
 800f67a:	bf00      	nop
 800f67c:	20001ebe 	.word	0x20001ebe

0800f680 <__sinit_lock_release>:
 800f680:	4801      	ldr	r0, [pc, #4]	; (800f688 <__sinit_lock_release+0x8>)
 800f682:	f000 b8a2 	b.w	800f7ca <__retarget_lock_release_recursive>
 800f686:	bf00      	nop
 800f688:	20001ebe 	.word	0x20001ebe

0800f68c <__sinit>:
 800f68c:	b510      	push	{r4, lr}
 800f68e:	4604      	mov	r4, r0
 800f690:	f7ff fff0 	bl	800f674 <__sinit_lock_acquire>
 800f694:	69a3      	ldr	r3, [r4, #24]
 800f696:	b11b      	cbz	r3, 800f6a0 <__sinit+0x14>
 800f698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f69c:	f7ff bff0 	b.w	800f680 <__sinit_lock_release>
 800f6a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f6a4:	6523      	str	r3, [r4, #80]	; 0x50
 800f6a6:	4b13      	ldr	r3, [pc, #76]	; (800f6f4 <__sinit+0x68>)
 800f6a8:	4a13      	ldr	r2, [pc, #76]	; (800f6f8 <__sinit+0x6c>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800f6ae:	42a3      	cmp	r3, r4
 800f6b0:	bf04      	itt	eq
 800f6b2:	2301      	moveq	r3, #1
 800f6b4:	61a3      	streq	r3, [r4, #24]
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	f000 f820 	bl	800f6fc <__sfp>
 800f6bc:	6060      	str	r0, [r4, #4]
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f000 f81c 	bl	800f6fc <__sfp>
 800f6c4:	60a0      	str	r0, [r4, #8]
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f000 f818 	bl	800f6fc <__sfp>
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	60e0      	str	r0, [r4, #12]
 800f6d0:	2104      	movs	r1, #4
 800f6d2:	6860      	ldr	r0, [r4, #4]
 800f6d4:	f7ff ff82 	bl	800f5dc <std>
 800f6d8:	68a0      	ldr	r0, [r4, #8]
 800f6da:	2201      	movs	r2, #1
 800f6dc:	2109      	movs	r1, #9
 800f6de:	f7ff ff7d 	bl	800f5dc <std>
 800f6e2:	68e0      	ldr	r0, [r4, #12]
 800f6e4:	2202      	movs	r2, #2
 800f6e6:	2112      	movs	r1, #18
 800f6e8:	f7ff ff78 	bl	800f5dc <std>
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	61a3      	str	r3, [r4, #24]
 800f6f0:	e7d2      	b.n	800f698 <__sinit+0xc>
 800f6f2:	bf00      	nop
 800f6f4:	080116e4 	.word	0x080116e4
 800f6f8:	0800f625 	.word	0x0800f625

0800f6fc <__sfp>:
 800f6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6fe:	4607      	mov	r7, r0
 800f700:	f7ff ffac 	bl	800f65c <__sfp_lock_acquire>
 800f704:	4b1e      	ldr	r3, [pc, #120]	; (800f780 <__sfp+0x84>)
 800f706:	681e      	ldr	r6, [r3, #0]
 800f708:	69b3      	ldr	r3, [r6, #24]
 800f70a:	b913      	cbnz	r3, 800f712 <__sfp+0x16>
 800f70c:	4630      	mov	r0, r6
 800f70e:	f7ff ffbd 	bl	800f68c <__sinit>
 800f712:	3648      	adds	r6, #72	; 0x48
 800f714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f718:	3b01      	subs	r3, #1
 800f71a:	d503      	bpl.n	800f724 <__sfp+0x28>
 800f71c:	6833      	ldr	r3, [r6, #0]
 800f71e:	b30b      	cbz	r3, 800f764 <__sfp+0x68>
 800f720:	6836      	ldr	r6, [r6, #0]
 800f722:	e7f7      	b.n	800f714 <__sfp+0x18>
 800f724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f728:	b9d5      	cbnz	r5, 800f760 <__sfp+0x64>
 800f72a:	4b16      	ldr	r3, [pc, #88]	; (800f784 <__sfp+0x88>)
 800f72c:	60e3      	str	r3, [r4, #12]
 800f72e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f732:	6665      	str	r5, [r4, #100]	; 0x64
 800f734:	f000 f847 	bl	800f7c6 <__retarget_lock_init_recursive>
 800f738:	f7ff ff96 	bl	800f668 <__sfp_lock_release>
 800f73c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f740:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f744:	6025      	str	r5, [r4, #0]
 800f746:	61a5      	str	r5, [r4, #24]
 800f748:	2208      	movs	r2, #8
 800f74a:	4629      	mov	r1, r5
 800f74c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f750:	f7fb fd30 	bl	800b1b4 <memset>
 800f754:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f758:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f75c:	4620      	mov	r0, r4
 800f75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f760:	3468      	adds	r4, #104	; 0x68
 800f762:	e7d9      	b.n	800f718 <__sfp+0x1c>
 800f764:	2104      	movs	r1, #4
 800f766:	4638      	mov	r0, r7
 800f768:	f7ff ff62 	bl	800f630 <__sfmoreglue>
 800f76c:	4604      	mov	r4, r0
 800f76e:	6030      	str	r0, [r6, #0]
 800f770:	2800      	cmp	r0, #0
 800f772:	d1d5      	bne.n	800f720 <__sfp+0x24>
 800f774:	f7ff ff78 	bl	800f668 <__sfp_lock_release>
 800f778:	230c      	movs	r3, #12
 800f77a:	603b      	str	r3, [r7, #0]
 800f77c:	e7ee      	b.n	800f75c <__sfp+0x60>
 800f77e:	bf00      	nop
 800f780:	080116e4 	.word	0x080116e4
 800f784:	ffff0001 	.word	0xffff0001

0800f788 <_fwalk_reent>:
 800f788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f78c:	4606      	mov	r6, r0
 800f78e:	4688      	mov	r8, r1
 800f790:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f794:	2700      	movs	r7, #0
 800f796:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f79a:	f1b9 0901 	subs.w	r9, r9, #1
 800f79e:	d505      	bpl.n	800f7ac <_fwalk_reent+0x24>
 800f7a0:	6824      	ldr	r4, [r4, #0]
 800f7a2:	2c00      	cmp	r4, #0
 800f7a4:	d1f7      	bne.n	800f796 <_fwalk_reent+0xe>
 800f7a6:	4638      	mov	r0, r7
 800f7a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7ac:	89ab      	ldrh	r3, [r5, #12]
 800f7ae:	2b01      	cmp	r3, #1
 800f7b0:	d907      	bls.n	800f7c2 <_fwalk_reent+0x3a>
 800f7b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	d003      	beq.n	800f7c2 <_fwalk_reent+0x3a>
 800f7ba:	4629      	mov	r1, r5
 800f7bc:	4630      	mov	r0, r6
 800f7be:	47c0      	blx	r8
 800f7c0:	4307      	orrs	r7, r0
 800f7c2:	3568      	adds	r5, #104	; 0x68
 800f7c4:	e7e9      	b.n	800f79a <_fwalk_reent+0x12>

0800f7c6 <__retarget_lock_init_recursive>:
 800f7c6:	4770      	bx	lr

0800f7c8 <__retarget_lock_acquire_recursive>:
 800f7c8:	4770      	bx	lr

0800f7ca <__retarget_lock_release_recursive>:
 800f7ca:	4770      	bx	lr

0800f7cc <__swhatbuf_r>:
 800f7cc:	b570      	push	{r4, r5, r6, lr}
 800f7ce:	460e      	mov	r6, r1
 800f7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7d4:	2900      	cmp	r1, #0
 800f7d6:	b096      	sub	sp, #88	; 0x58
 800f7d8:	4614      	mov	r4, r2
 800f7da:	461d      	mov	r5, r3
 800f7dc:	da08      	bge.n	800f7f0 <__swhatbuf_r+0x24>
 800f7de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	602a      	str	r2, [r5, #0]
 800f7e6:	061a      	lsls	r2, r3, #24
 800f7e8:	d410      	bmi.n	800f80c <__swhatbuf_r+0x40>
 800f7ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7ee:	e00e      	b.n	800f80e <__swhatbuf_r+0x42>
 800f7f0:	466a      	mov	r2, sp
 800f7f2:	f000 f903 	bl	800f9fc <_fstat_r>
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	dbf1      	blt.n	800f7de <__swhatbuf_r+0x12>
 800f7fa:	9a01      	ldr	r2, [sp, #4]
 800f7fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f800:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f804:	425a      	negs	r2, r3
 800f806:	415a      	adcs	r2, r3
 800f808:	602a      	str	r2, [r5, #0]
 800f80a:	e7ee      	b.n	800f7ea <__swhatbuf_r+0x1e>
 800f80c:	2340      	movs	r3, #64	; 0x40
 800f80e:	2000      	movs	r0, #0
 800f810:	6023      	str	r3, [r4, #0]
 800f812:	b016      	add	sp, #88	; 0x58
 800f814:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f818 <__smakebuf_r>:
 800f818:	898b      	ldrh	r3, [r1, #12]
 800f81a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f81c:	079d      	lsls	r5, r3, #30
 800f81e:	4606      	mov	r6, r0
 800f820:	460c      	mov	r4, r1
 800f822:	d507      	bpl.n	800f834 <__smakebuf_r+0x1c>
 800f824:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f828:	6023      	str	r3, [r4, #0]
 800f82a:	6123      	str	r3, [r4, #16]
 800f82c:	2301      	movs	r3, #1
 800f82e:	6163      	str	r3, [r4, #20]
 800f830:	b002      	add	sp, #8
 800f832:	bd70      	pop	{r4, r5, r6, pc}
 800f834:	ab01      	add	r3, sp, #4
 800f836:	466a      	mov	r2, sp
 800f838:	f7ff ffc8 	bl	800f7cc <__swhatbuf_r>
 800f83c:	9900      	ldr	r1, [sp, #0]
 800f83e:	4605      	mov	r5, r0
 800f840:	4630      	mov	r0, r6
 800f842:	f7ff f959 	bl	800eaf8 <_malloc_r>
 800f846:	b948      	cbnz	r0, 800f85c <__smakebuf_r+0x44>
 800f848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f84c:	059a      	lsls	r2, r3, #22
 800f84e:	d4ef      	bmi.n	800f830 <__smakebuf_r+0x18>
 800f850:	f023 0303 	bic.w	r3, r3, #3
 800f854:	f043 0302 	orr.w	r3, r3, #2
 800f858:	81a3      	strh	r3, [r4, #12]
 800f85a:	e7e3      	b.n	800f824 <__smakebuf_r+0xc>
 800f85c:	4b0d      	ldr	r3, [pc, #52]	; (800f894 <__smakebuf_r+0x7c>)
 800f85e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f860:	89a3      	ldrh	r3, [r4, #12]
 800f862:	6020      	str	r0, [r4, #0]
 800f864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f868:	81a3      	strh	r3, [r4, #12]
 800f86a:	9b00      	ldr	r3, [sp, #0]
 800f86c:	6163      	str	r3, [r4, #20]
 800f86e:	9b01      	ldr	r3, [sp, #4]
 800f870:	6120      	str	r0, [r4, #16]
 800f872:	b15b      	cbz	r3, 800f88c <__smakebuf_r+0x74>
 800f874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f878:	4630      	mov	r0, r6
 800f87a:	f000 f8d1 	bl	800fa20 <_isatty_r>
 800f87e:	b128      	cbz	r0, 800f88c <__smakebuf_r+0x74>
 800f880:	89a3      	ldrh	r3, [r4, #12]
 800f882:	f023 0303 	bic.w	r3, r3, #3
 800f886:	f043 0301 	orr.w	r3, r3, #1
 800f88a:	81a3      	strh	r3, [r4, #12]
 800f88c:	89a0      	ldrh	r0, [r4, #12]
 800f88e:	4305      	orrs	r5, r0
 800f890:	81a5      	strh	r5, [r4, #12]
 800f892:	e7cd      	b.n	800f830 <__smakebuf_r+0x18>
 800f894:	0800f625 	.word	0x0800f625

0800f898 <_malloc_usable_size_r>:
 800f898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f89c:	1f18      	subs	r0, r3, #4
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	bfbc      	itt	lt
 800f8a2:	580b      	ldrlt	r3, [r1, r0]
 800f8a4:	18c0      	addlt	r0, r0, r3
 800f8a6:	4770      	bx	lr

0800f8a8 <_raise_r>:
 800f8a8:	291f      	cmp	r1, #31
 800f8aa:	b538      	push	{r3, r4, r5, lr}
 800f8ac:	4604      	mov	r4, r0
 800f8ae:	460d      	mov	r5, r1
 800f8b0:	d904      	bls.n	800f8bc <_raise_r+0x14>
 800f8b2:	2316      	movs	r3, #22
 800f8b4:	6003      	str	r3, [r0, #0]
 800f8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f8ba:	bd38      	pop	{r3, r4, r5, pc}
 800f8bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f8be:	b112      	cbz	r2, 800f8c6 <_raise_r+0x1e>
 800f8c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8c4:	b94b      	cbnz	r3, 800f8da <_raise_r+0x32>
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f000 f830 	bl	800f92c <_getpid_r>
 800f8cc:	462a      	mov	r2, r5
 800f8ce:	4601      	mov	r1, r0
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8d6:	f000 b817 	b.w	800f908 <_kill_r>
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d00a      	beq.n	800f8f4 <_raise_r+0x4c>
 800f8de:	1c59      	adds	r1, r3, #1
 800f8e0:	d103      	bne.n	800f8ea <_raise_r+0x42>
 800f8e2:	2316      	movs	r3, #22
 800f8e4:	6003      	str	r3, [r0, #0]
 800f8e6:	2001      	movs	r0, #1
 800f8e8:	e7e7      	b.n	800f8ba <_raise_r+0x12>
 800f8ea:	2400      	movs	r4, #0
 800f8ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f8f0:	4628      	mov	r0, r5
 800f8f2:	4798      	blx	r3
 800f8f4:	2000      	movs	r0, #0
 800f8f6:	e7e0      	b.n	800f8ba <_raise_r+0x12>

0800f8f8 <raise>:
 800f8f8:	4b02      	ldr	r3, [pc, #8]	; (800f904 <raise+0xc>)
 800f8fa:	4601      	mov	r1, r0
 800f8fc:	6818      	ldr	r0, [r3, #0]
 800f8fe:	f7ff bfd3 	b.w	800f8a8 <_raise_r>
 800f902:	bf00      	nop
 800f904:	20000234 	.word	0x20000234

0800f908 <_kill_r>:
 800f908:	b538      	push	{r3, r4, r5, lr}
 800f90a:	4d07      	ldr	r5, [pc, #28]	; (800f928 <_kill_r+0x20>)
 800f90c:	2300      	movs	r3, #0
 800f90e:	4604      	mov	r4, r0
 800f910:	4608      	mov	r0, r1
 800f912:	4611      	mov	r1, r2
 800f914:	602b      	str	r3, [r5, #0]
 800f916:	f7f4 fd53 	bl	80043c0 <_kill>
 800f91a:	1c43      	adds	r3, r0, #1
 800f91c:	d102      	bne.n	800f924 <_kill_r+0x1c>
 800f91e:	682b      	ldr	r3, [r5, #0]
 800f920:	b103      	cbz	r3, 800f924 <_kill_r+0x1c>
 800f922:	6023      	str	r3, [r4, #0]
 800f924:	bd38      	pop	{r3, r4, r5, pc}
 800f926:	bf00      	nop
 800f928:	20001eb8 	.word	0x20001eb8

0800f92c <_getpid_r>:
 800f92c:	f7f4 bd40 	b.w	80043b0 <_getpid>

0800f930 <__sread>:
 800f930:	b510      	push	{r4, lr}
 800f932:	460c      	mov	r4, r1
 800f934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f938:	f000 f894 	bl	800fa64 <_read_r>
 800f93c:	2800      	cmp	r0, #0
 800f93e:	bfab      	itete	ge
 800f940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f942:	89a3      	ldrhlt	r3, [r4, #12]
 800f944:	181b      	addge	r3, r3, r0
 800f946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f94a:	bfac      	ite	ge
 800f94c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f94e:	81a3      	strhlt	r3, [r4, #12]
 800f950:	bd10      	pop	{r4, pc}

0800f952 <__swrite>:
 800f952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f956:	461f      	mov	r7, r3
 800f958:	898b      	ldrh	r3, [r1, #12]
 800f95a:	05db      	lsls	r3, r3, #23
 800f95c:	4605      	mov	r5, r0
 800f95e:	460c      	mov	r4, r1
 800f960:	4616      	mov	r6, r2
 800f962:	d505      	bpl.n	800f970 <__swrite+0x1e>
 800f964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f968:	2302      	movs	r3, #2
 800f96a:	2200      	movs	r2, #0
 800f96c:	f000 f868 	bl	800fa40 <_lseek_r>
 800f970:	89a3      	ldrh	r3, [r4, #12]
 800f972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f97a:	81a3      	strh	r3, [r4, #12]
 800f97c:	4632      	mov	r2, r6
 800f97e:	463b      	mov	r3, r7
 800f980:	4628      	mov	r0, r5
 800f982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f986:	f000 b817 	b.w	800f9b8 <_write_r>

0800f98a <__sseek>:
 800f98a:	b510      	push	{r4, lr}
 800f98c:	460c      	mov	r4, r1
 800f98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f992:	f000 f855 	bl	800fa40 <_lseek_r>
 800f996:	1c43      	adds	r3, r0, #1
 800f998:	89a3      	ldrh	r3, [r4, #12]
 800f99a:	bf15      	itete	ne
 800f99c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f99e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f9a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f9a6:	81a3      	strheq	r3, [r4, #12]
 800f9a8:	bf18      	it	ne
 800f9aa:	81a3      	strhne	r3, [r4, #12]
 800f9ac:	bd10      	pop	{r4, pc}

0800f9ae <__sclose>:
 800f9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9b2:	f000 b813 	b.w	800f9dc <_close_r>
	...

0800f9b8 <_write_r>:
 800f9b8:	b538      	push	{r3, r4, r5, lr}
 800f9ba:	4d07      	ldr	r5, [pc, #28]	; (800f9d8 <_write_r+0x20>)
 800f9bc:	4604      	mov	r4, r0
 800f9be:	4608      	mov	r0, r1
 800f9c0:	4611      	mov	r1, r2
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	602a      	str	r2, [r5, #0]
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	f7f4 fd31 	bl	800442e <_write>
 800f9cc:	1c43      	adds	r3, r0, #1
 800f9ce:	d102      	bne.n	800f9d6 <_write_r+0x1e>
 800f9d0:	682b      	ldr	r3, [r5, #0]
 800f9d2:	b103      	cbz	r3, 800f9d6 <_write_r+0x1e>
 800f9d4:	6023      	str	r3, [r4, #0]
 800f9d6:	bd38      	pop	{r3, r4, r5, pc}
 800f9d8:	20001eb8 	.word	0x20001eb8

0800f9dc <_close_r>:
 800f9dc:	b538      	push	{r3, r4, r5, lr}
 800f9de:	4d06      	ldr	r5, [pc, #24]	; (800f9f8 <_close_r+0x1c>)
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	4608      	mov	r0, r1
 800f9e6:	602b      	str	r3, [r5, #0]
 800f9e8:	f7f4 fd3d 	bl	8004466 <_close>
 800f9ec:	1c43      	adds	r3, r0, #1
 800f9ee:	d102      	bne.n	800f9f6 <_close_r+0x1a>
 800f9f0:	682b      	ldr	r3, [r5, #0]
 800f9f2:	b103      	cbz	r3, 800f9f6 <_close_r+0x1a>
 800f9f4:	6023      	str	r3, [r4, #0]
 800f9f6:	bd38      	pop	{r3, r4, r5, pc}
 800f9f8:	20001eb8 	.word	0x20001eb8

0800f9fc <_fstat_r>:
 800f9fc:	b538      	push	{r3, r4, r5, lr}
 800f9fe:	4d07      	ldr	r5, [pc, #28]	; (800fa1c <_fstat_r+0x20>)
 800fa00:	2300      	movs	r3, #0
 800fa02:	4604      	mov	r4, r0
 800fa04:	4608      	mov	r0, r1
 800fa06:	4611      	mov	r1, r2
 800fa08:	602b      	str	r3, [r5, #0]
 800fa0a:	f7f4 fd38 	bl	800447e <_fstat>
 800fa0e:	1c43      	adds	r3, r0, #1
 800fa10:	d102      	bne.n	800fa18 <_fstat_r+0x1c>
 800fa12:	682b      	ldr	r3, [r5, #0]
 800fa14:	b103      	cbz	r3, 800fa18 <_fstat_r+0x1c>
 800fa16:	6023      	str	r3, [r4, #0]
 800fa18:	bd38      	pop	{r3, r4, r5, pc}
 800fa1a:	bf00      	nop
 800fa1c:	20001eb8 	.word	0x20001eb8

0800fa20 <_isatty_r>:
 800fa20:	b538      	push	{r3, r4, r5, lr}
 800fa22:	4d06      	ldr	r5, [pc, #24]	; (800fa3c <_isatty_r+0x1c>)
 800fa24:	2300      	movs	r3, #0
 800fa26:	4604      	mov	r4, r0
 800fa28:	4608      	mov	r0, r1
 800fa2a:	602b      	str	r3, [r5, #0]
 800fa2c:	f7f4 fd37 	bl	800449e <_isatty>
 800fa30:	1c43      	adds	r3, r0, #1
 800fa32:	d102      	bne.n	800fa3a <_isatty_r+0x1a>
 800fa34:	682b      	ldr	r3, [r5, #0]
 800fa36:	b103      	cbz	r3, 800fa3a <_isatty_r+0x1a>
 800fa38:	6023      	str	r3, [r4, #0]
 800fa3a:	bd38      	pop	{r3, r4, r5, pc}
 800fa3c:	20001eb8 	.word	0x20001eb8

0800fa40 <_lseek_r>:
 800fa40:	b538      	push	{r3, r4, r5, lr}
 800fa42:	4d07      	ldr	r5, [pc, #28]	; (800fa60 <_lseek_r+0x20>)
 800fa44:	4604      	mov	r4, r0
 800fa46:	4608      	mov	r0, r1
 800fa48:	4611      	mov	r1, r2
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	602a      	str	r2, [r5, #0]
 800fa4e:	461a      	mov	r2, r3
 800fa50:	f7f4 fd30 	bl	80044b4 <_lseek>
 800fa54:	1c43      	adds	r3, r0, #1
 800fa56:	d102      	bne.n	800fa5e <_lseek_r+0x1e>
 800fa58:	682b      	ldr	r3, [r5, #0]
 800fa5a:	b103      	cbz	r3, 800fa5e <_lseek_r+0x1e>
 800fa5c:	6023      	str	r3, [r4, #0]
 800fa5e:	bd38      	pop	{r3, r4, r5, pc}
 800fa60:	20001eb8 	.word	0x20001eb8

0800fa64 <_read_r>:
 800fa64:	b538      	push	{r3, r4, r5, lr}
 800fa66:	4d07      	ldr	r5, [pc, #28]	; (800fa84 <_read_r+0x20>)
 800fa68:	4604      	mov	r4, r0
 800fa6a:	4608      	mov	r0, r1
 800fa6c:	4611      	mov	r1, r2
 800fa6e:	2200      	movs	r2, #0
 800fa70:	602a      	str	r2, [r5, #0]
 800fa72:	461a      	mov	r2, r3
 800fa74:	f7f4 fcbe 	bl	80043f4 <_read>
 800fa78:	1c43      	adds	r3, r0, #1
 800fa7a:	d102      	bne.n	800fa82 <_read_r+0x1e>
 800fa7c:	682b      	ldr	r3, [r5, #0]
 800fa7e:	b103      	cbz	r3, 800fa82 <_read_r+0x1e>
 800fa80:	6023      	str	r3, [r4, #0]
 800fa82:	bd38      	pop	{r3, r4, r5, pc}
 800fa84:	20001eb8 	.word	0x20001eb8

0800fa88 <atan>:
 800fa88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa8c:	ec55 4b10 	vmov	r4, r5, d0
 800fa90:	4bc3      	ldr	r3, [pc, #780]	; (800fda0 <atan+0x318>)
 800fa92:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fa96:	429e      	cmp	r6, r3
 800fa98:	46ab      	mov	fp, r5
 800fa9a:	dd18      	ble.n	800face <atan+0x46>
 800fa9c:	4bc1      	ldr	r3, [pc, #772]	; (800fda4 <atan+0x31c>)
 800fa9e:	429e      	cmp	r6, r3
 800faa0:	dc01      	bgt.n	800faa6 <atan+0x1e>
 800faa2:	d109      	bne.n	800fab8 <atan+0x30>
 800faa4:	b144      	cbz	r4, 800fab8 <atan+0x30>
 800faa6:	4622      	mov	r2, r4
 800faa8:	462b      	mov	r3, r5
 800faaa:	4620      	mov	r0, r4
 800faac:	4629      	mov	r1, r5
 800faae:	f7f0 fbf5 	bl	800029c <__adddf3>
 800fab2:	4604      	mov	r4, r0
 800fab4:	460d      	mov	r5, r1
 800fab6:	e006      	b.n	800fac6 <atan+0x3e>
 800fab8:	f1bb 0f00 	cmp.w	fp, #0
 800fabc:	f300 8131 	bgt.w	800fd22 <atan+0x29a>
 800fac0:	a59b      	add	r5, pc, #620	; (adr r5, 800fd30 <atan+0x2a8>)
 800fac2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fac6:	ec45 4b10 	vmov	d0, r4, r5
 800faca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800face:	4bb6      	ldr	r3, [pc, #728]	; (800fda8 <atan+0x320>)
 800fad0:	429e      	cmp	r6, r3
 800fad2:	dc14      	bgt.n	800fafe <atan+0x76>
 800fad4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800fad8:	429e      	cmp	r6, r3
 800fada:	dc0d      	bgt.n	800faf8 <atan+0x70>
 800fadc:	a396      	add	r3, pc, #600	; (adr r3, 800fd38 <atan+0x2b0>)
 800fade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae2:	ee10 0a10 	vmov	r0, s0
 800fae6:	4629      	mov	r1, r5
 800fae8:	f7f0 fbd8 	bl	800029c <__adddf3>
 800faec:	4baf      	ldr	r3, [pc, #700]	; (800fdac <atan+0x324>)
 800faee:	2200      	movs	r2, #0
 800faf0:	f7f1 f81a 	bl	8000b28 <__aeabi_dcmpgt>
 800faf4:	2800      	cmp	r0, #0
 800faf6:	d1e6      	bne.n	800fac6 <atan+0x3e>
 800faf8:	f04f 3aff 	mov.w	sl, #4294967295
 800fafc:	e02b      	b.n	800fb56 <atan+0xce>
 800fafe:	f000 f9b7 	bl	800fe70 <fabs>
 800fb02:	4bab      	ldr	r3, [pc, #684]	; (800fdb0 <atan+0x328>)
 800fb04:	429e      	cmp	r6, r3
 800fb06:	ec55 4b10 	vmov	r4, r5, d0
 800fb0a:	f300 80bf 	bgt.w	800fc8c <atan+0x204>
 800fb0e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fb12:	429e      	cmp	r6, r3
 800fb14:	f300 80a0 	bgt.w	800fc58 <atan+0x1d0>
 800fb18:	ee10 2a10 	vmov	r2, s0
 800fb1c:	ee10 0a10 	vmov	r0, s0
 800fb20:	462b      	mov	r3, r5
 800fb22:	4629      	mov	r1, r5
 800fb24:	f7f0 fbba 	bl	800029c <__adddf3>
 800fb28:	4ba0      	ldr	r3, [pc, #640]	; (800fdac <atan+0x324>)
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	f7f0 fbb4 	bl	8000298 <__aeabi_dsub>
 800fb30:	2200      	movs	r2, #0
 800fb32:	4606      	mov	r6, r0
 800fb34:	460f      	mov	r7, r1
 800fb36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	4629      	mov	r1, r5
 800fb3e:	f7f0 fbad 	bl	800029c <__adddf3>
 800fb42:	4602      	mov	r2, r0
 800fb44:	460b      	mov	r3, r1
 800fb46:	4630      	mov	r0, r6
 800fb48:	4639      	mov	r1, r7
 800fb4a:	f7f0 fe87 	bl	800085c <__aeabi_ddiv>
 800fb4e:	f04f 0a00 	mov.w	sl, #0
 800fb52:	4604      	mov	r4, r0
 800fb54:	460d      	mov	r5, r1
 800fb56:	4622      	mov	r2, r4
 800fb58:	462b      	mov	r3, r5
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	4629      	mov	r1, r5
 800fb5e:	f7f0 fd53 	bl	8000608 <__aeabi_dmul>
 800fb62:	4602      	mov	r2, r0
 800fb64:	460b      	mov	r3, r1
 800fb66:	4680      	mov	r8, r0
 800fb68:	4689      	mov	r9, r1
 800fb6a:	f7f0 fd4d 	bl	8000608 <__aeabi_dmul>
 800fb6e:	a374      	add	r3, pc, #464	; (adr r3, 800fd40 <atan+0x2b8>)
 800fb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb74:	4606      	mov	r6, r0
 800fb76:	460f      	mov	r7, r1
 800fb78:	f7f0 fd46 	bl	8000608 <__aeabi_dmul>
 800fb7c:	a372      	add	r3, pc, #456	; (adr r3, 800fd48 <atan+0x2c0>)
 800fb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb82:	f7f0 fb8b 	bl	800029c <__adddf3>
 800fb86:	4632      	mov	r2, r6
 800fb88:	463b      	mov	r3, r7
 800fb8a:	f7f0 fd3d 	bl	8000608 <__aeabi_dmul>
 800fb8e:	a370      	add	r3, pc, #448	; (adr r3, 800fd50 <atan+0x2c8>)
 800fb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb94:	f7f0 fb82 	bl	800029c <__adddf3>
 800fb98:	4632      	mov	r2, r6
 800fb9a:	463b      	mov	r3, r7
 800fb9c:	f7f0 fd34 	bl	8000608 <__aeabi_dmul>
 800fba0:	a36d      	add	r3, pc, #436	; (adr r3, 800fd58 <atan+0x2d0>)
 800fba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba6:	f7f0 fb79 	bl	800029c <__adddf3>
 800fbaa:	4632      	mov	r2, r6
 800fbac:	463b      	mov	r3, r7
 800fbae:	f7f0 fd2b 	bl	8000608 <__aeabi_dmul>
 800fbb2:	a36b      	add	r3, pc, #428	; (adr r3, 800fd60 <atan+0x2d8>)
 800fbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb8:	f7f0 fb70 	bl	800029c <__adddf3>
 800fbbc:	4632      	mov	r2, r6
 800fbbe:	463b      	mov	r3, r7
 800fbc0:	f7f0 fd22 	bl	8000608 <__aeabi_dmul>
 800fbc4:	a368      	add	r3, pc, #416	; (adr r3, 800fd68 <atan+0x2e0>)
 800fbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbca:	f7f0 fb67 	bl	800029c <__adddf3>
 800fbce:	4642      	mov	r2, r8
 800fbd0:	464b      	mov	r3, r9
 800fbd2:	f7f0 fd19 	bl	8000608 <__aeabi_dmul>
 800fbd6:	a366      	add	r3, pc, #408	; (adr r3, 800fd70 <atan+0x2e8>)
 800fbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbdc:	4680      	mov	r8, r0
 800fbde:	4689      	mov	r9, r1
 800fbe0:	4630      	mov	r0, r6
 800fbe2:	4639      	mov	r1, r7
 800fbe4:	f7f0 fd10 	bl	8000608 <__aeabi_dmul>
 800fbe8:	a363      	add	r3, pc, #396	; (adr r3, 800fd78 <atan+0x2f0>)
 800fbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbee:	f7f0 fb53 	bl	8000298 <__aeabi_dsub>
 800fbf2:	4632      	mov	r2, r6
 800fbf4:	463b      	mov	r3, r7
 800fbf6:	f7f0 fd07 	bl	8000608 <__aeabi_dmul>
 800fbfa:	a361      	add	r3, pc, #388	; (adr r3, 800fd80 <atan+0x2f8>)
 800fbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc00:	f7f0 fb4a 	bl	8000298 <__aeabi_dsub>
 800fc04:	4632      	mov	r2, r6
 800fc06:	463b      	mov	r3, r7
 800fc08:	f7f0 fcfe 	bl	8000608 <__aeabi_dmul>
 800fc0c:	a35e      	add	r3, pc, #376	; (adr r3, 800fd88 <atan+0x300>)
 800fc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc12:	f7f0 fb41 	bl	8000298 <__aeabi_dsub>
 800fc16:	4632      	mov	r2, r6
 800fc18:	463b      	mov	r3, r7
 800fc1a:	f7f0 fcf5 	bl	8000608 <__aeabi_dmul>
 800fc1e:	a35c      	add	r3, pc, #368	; (adr r3, 800fd90 <atan+0x308>)
 800fc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc24:	f7f0 fb38 	bl	8000298 <__aeabi_dsub>
 800fc28:	4632      	mov	r2, r6
 800fc2a:	463b      	mov	r3, r7
 800fc2c:	f7f0 fcec 	bl	8000608 <__aeabi_dmul>
 800fc30:	4602      	mov	r2, r0
 800fc32:	460b      	mov	r3, r1
 800fc34:	4640      	mov	r0, r8
 800fc36:	4649      	mov	r1, r9
 800fc38:	f7f0 fb30 	bl	800029c <__adddf3>
 800fc3c:	4622      	mov	r2, r4
 800fc3e:	462b      	mov	r3, r5
 800fc40:	f7f0 fce2 	bl	8000608 <__aeabi_dmul>
 800fc44:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fc48:	4602      	mov	r2, r0
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	d14b      	bne.n	800fce6 <atan+0x25e>
 800fc4e:	4620      	mov	r0, r4
 800fc50:	4629      	mov	r1, r5
 800fc52:	f7f0 fb21 	bl	8000298 <__aeabi_dsub>
 800fc56:	e72c      	b.n	800fab2 <atan+0x2a>
 800fc58:	ee10 0a10 	vmov	r0, s0
 800fc5c:	4b53      	ldr	r3, [pc, #332]	; (800fdac <atan+0x324>)
 800fc5e:	2200      	movs	r2, #0
 800fc60:	4629      	mov	r1, r5
 800fc62:	f7f0 fb19 	bl	8000298 <__aeabi_dsub>
 800fc66:	4b51      	ldr	r3, [pc, #324]	; (800fdac <atan+0x324>)
 800fc68:	4606      	mov	r6, r0
 800fc6a:	460f      	mov	r7, r1
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	4620      	mov	r0, r4
 800fc70:	4629      	mov	r1, r5
 800fc72:	f7f0 fb13 	bl	800029c <__adddf3>
 800fc76:	4602      	mov	r2, r0
 800fc78:	460b      	mov	r3, r1
 800fc7a:	4630      	mov	r0, r6
 800fc7c:	4639      	mov	r1, r7
 800fc7e:	f7f0 fded 	bl	800085c <__aeabi_ddiv>
 800fc82:	f04f 0a01 	mov.w	sl, #1
 800fc86:	4604      	mov	r4, r0
 800fc88:	460d      	mov	r5, r1
 800fc8a:	e764      	b.n	800fb56 <atan+0xce>
 800fc8c:	4b49      	ldr	r3, [pc, #292]	; (800fdb4 <atan+0x32c>)
 800fc8e:	429e      	cmp	r6, r3
 800fc90:	da1d      	bge.n	800fcce <atan+0x246>
 800fc92:	ee10 0a10 	vmov	r0, s0
 800fc96:	4b48      	ldr	r3, [pc, #288]	; (800fdb8 <atan+0x330>)
 800fc98:	2200      	movs	r2, #0
 800fc9a:	4629      	mov	r1, r5
 800fc9c:	f7f0 fafc 	bl	8000298 <__aeabi_dsub>
 800fca0:	4b45      	ldr	r3, [pc, #276]	; (800fdb8 <atan+0x330>)
 800fca2:	4606      	mov	r6, r0
 800fca4:	460f      	mov	r7, r1
 800fca6:	2200      	movs	r2, #0
 800fca8:	4620      	mov	r0, r4
 800fcaa:	4629      	mov	r1, r5
 800fcac:	f7f0 fcac 	bl	8000608 <__aeabi_dmul>
 800fcb0:	4b3e      	ldr	r3, [pc, #248]	; (800fdac <atan+0x324>)
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	f7f0 faf2 	bl	800029c <__adddf3>
 800fcb8:	4602      	mov	r2, r0
 800fcba:	460b      	mov	r3, r1
 800fcbc:	4630      	mov	r0, r6
 800fcbe:	4639      	mov	r1, r7
 800fcc0:	f7f0 fdcc 	bl	800085c <__aeabi_ddiv>
 800fcc4:	f04f 0a02 	mov.w	sl, #2
 800fcc8:	4604      	mov	r4, r0
 800fcca:	460d      	mov	r5, r1
 800fccc:	e743      	b.n	800fb56 <atan+0xce>
 800fcce:	462b      	mov	r3, r5
 800fcd0:	ee10 2a10 	vmov	r2, s0
 800fcd4:	4939      	ldr	r1, [pc, #228]	; (800fdbc <atan+0x334>)
 800fcd6:	2000      	movs	r0, #0
 800fcd8:	f7f0 fdc0 	bl	800085c <__aeabi_ddiv>
 800fcdc:	f04f 0a03 	mov.w	sl, #3
 800fce0:	4604      	mov	r4, r0
 800fce2:	460d      	mov	r5, r1
 800fce4:	e737      	b.n	800fb56 <atan+0xce>
 800fce6:	4b36      	ldr	r3, [pc, #216]	; (800fdc0 <atan+0x338>)
 800fce8:	4e36      	ldr	r6, [pc, #216]	; (800fdc4 <atan+0x33c>)
 800fcea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fcee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800fcf2:	e9da 2300 	ldrd	r2, r3, [sl]
 800fcf6:	f7f0 facf 	bl	8000298 <__aeabi_dsub>
 800fcfa:	4622      	mov	r2, r4
 800fcfc:	462b      	mov	r3, r5
 800fcfe:	f7f0 facb 	bl	8000298 <__aeabi_dsub>
 800fd02:	4602      	mov	r2, r0
 800fd04:	460b      	mov	r3, r1
 800fd06:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fd0a:	f7f0 fac5 	bl	8000298 <__aeabi_dsub>
 800fd0e:	f1bb 0f00 	cmp.w	fp, #0
 800fd12:	4604      	mov	r4, r0
 800fd14:	460d      	mov	r5, r1
 800fd16:	f6bf aed6 	bge.w	800fac6 <atan+0x3e>
 800fd1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd1e:	461d      	mov	r5, r3
 800fd20:	e6d1      	b.n	800fac6 <atan+0x3e>
 800fd22:	a51d      	add	r5, pc, #116	; (adr r5, 800fd98 <atan+0x310>)
 800fd24:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fd28:	e6cd      	b.n	800fac6 <atan+0x3e>
 800fd2a:	bf00      	nop
 800fd2c:	f3af 8000 	nop.w
 800fd30:	54442d18 	.word	0x54442d18
 800fd34:	bff921fb 	.word	0xbff921fb
 800fd38:	8800759c 	.word	0x8800759c
 800fd3c:	7e37e43c 	.word	0x7e37e43c
 800fd40:	e322da11 	.word	0xe322da11
 800fd44:	3f90ad3a 	.word	0x3f90ad3a
 800fd48:	24760deb 	.word	0x24760deb
 800fd4c:	3fa97b4b 	.word	0x3fa97b4b
 800fd50:	a0d03d51 	.word	0xa0d03d51
 800fd54:	3fb10d66 	.word	0x3fb10d66
 800fd58:	c54c206e 	.word	0xc54c206e
 800fd5c:	3fb745cd 	.word	0x3fb745cd
 800fd60:	920083ff 	.word	0x920083ff
 800fd64:	3fc24924 	.word	0x3fc24924
 800fd68:	5555550d 	.word	0x5555550d
 800fd6c:	3fd55555 	.word	0x3fd55555
 800fd70:	2c6a6c2f 	.word	0x2c6a6c2f
 800fd74:	bfa2b444 	.word	0xbfa2b444
 800fd78:	52defd9a 	.word	0x52defd9a
 800fd7c:	3fadde2d 	.word	0x3fadde2d
 800fd80:	af749a6d 	.word	0xaf749a6d
 800fd84:	3fb3b0f2 	.word	0x3fb3b0f2
 800fd88:	fe231671 	.word	0xfe231671
 800fd8c:	3fbc71c6 	.word	0x3fbc71c6
 800fd90:	9998ebc4 	.word	0x9998ebc4
 800fd94:	3fc99999 	.word	0x3fc99999
 800fd98:	54442d18 	.word	0x54442d18
 800fd9c:	3ff921fb 	.word	0x3ff921fb
 800fda0:	440fffff 	.word	0x440fffff
 800fda4:	7ff00000 	.word	0x7ff00000
 800fda8:	3fdbffff 	.word	0x3fdbffff
 800fdac:	3ff00000 	.word	0x3ff00000
 800fdb0:	3ff2ffff 	.word	0x3ff2ffff
 800fdb4:	40038000 	.word	0x40038000
 800fdb8:	3ff80000 	.word	0x3ff80000
 800fdbc:	bff00000 	.word	0xbff00000
 800fdc0:	08011bb0 	.word	0x08011bb0
 800fdc4:	08011b90 	.word	0x08011b90

0800fdc8 <cos>:
 800fdc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fdca:	ec53 2b10 	vmov	r2, r3, d0
 800fdce:	4826      	ldr	r0, [pc, #152]	; (800fe68 <cos+0xa0>)
 800fdd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fdd4:	4281      	cmp	r1, r0
 800fdd6:	dc06      	bgt.n	800fde6 <cos+0x1e>
 800fdd8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800fe60 <cos+0x98>
 800fddc:	b005      	add	sp, #20
 800fdde:	f85d eb04 	ldr.w	lr, [sp], #4
 800fde2:	f000 bc69 	b.w	80106b8 <__kernel_cos>
 800fde6:	4821      	ldr	r0, [pc, #132]	; (800fe6c <cos+0xa4>)
 800fde8:	4281      	cmp	r1, r0
 800fdea:	dd09      	ble.n	800fe00 <cos+0x38>
 800fdec:	ee10 0a10 	vmov	r0, s0
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	f7f0 fa51 	bl	8000298 <__aeabi_dsub>
 800fdf6:	ec41 0b10 	vmov	d0, r0, r1
 800fdfa:	b005      	add	sp, #20
 800fdfc:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe00:	4668      	mov	r0, sp
 800fe02:	f000 f919 	bl	8010038 <__ieee754_rem_pio2>
 800fe06:	f000 0003 	and.w	r0, r0, #3
 800fe0a:	2801      	cmp	r0, #1
 800fe0c:	d00b      	beq.n	800fe26 <cos+0x5e>
 800fe0e:	2802      	cmp	r0, #2
 800fe10:	d016      	beq.n	800fe40 <cos+0x78>
 800fe12:	b9e0      	cbnz	r0, 800fe4e <cos+0x86>
 800fe14:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe18:	ed9d 0b00 	vldr	d0, [sp]
 800fe1c:	f000 fc4c 	bl	80106b8 <__kernel_cos>
 800fe20:	ec51 0b10 	vmov	r0, r1, d0
 800fe24:	e7e7      	b.n	800fdf6 <cos+0x2e>
 800fe26:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe2a:	ed9d 0b00 	vldr	d0, [sp]
 800fe2e:	f001 f85b 	bl	8010ee8 <__kernel_sin>
 800fe32:	ec53 2b10 	vmov	r2, r3, d0
 800fe36:	ee10 0a10 	vmov	r0, s0
 800fe3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fe3e:	e7da      	b.n	800fdf6 <cos+0x2e>
 800fe40:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe44:	ed9d 0b00 	vldr	d0, [sp]
 800fe48:	f000 fc36 	bl	80106b8 <__kernel_cos>
 800fe4c:	e7f1      	b.n	800fe32 <cos+0x6a>
 800fe4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe52:	ed9d 0b00 	vldr	d0, [sp]
 800fe56:	2001      	movs	r0, #1
 800fe58:	f001 f846 	bl	8010ee8 <__kernel_sin>
 800fe5c:	e7e0      	b.n	800fe20 <cos+0x58>
 800fe5e:	bf00      	nop
	...
 800fe68:	3fe921fb 	.word	0x3fe921fb
 800fe6c:	7fefffff 	.word	0x7fefffff

0800fe70 <fabs>:
 800fe70:	ec51 0b10 	vmov	r0, r1, d0
 800fe74:	ee10 2a10 	vmov	r2, s0
 800fe78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fe7c:	ec43 2b10 	vmov	d0, r2, r3
 800fe80:	4770      	bx	lr
 800fe82:	0000      	movs	r0, r0
 800fe84:	0000      	movs	r0, r0
	...

0800fe88 <sin>:
 800fe88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe8a:	ec53 2b10 	vmov	r2, r3, d0
 800fe8e:	4828      	ldr	r0, [pc, #160]	; (800ff30 <sin+0xa8>)
 800fe90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fe94:	4281      	cmp	r1, r0
 800fe96:	dc07      	bgt.n	800fea8 <sin+0x20>
 800fe98:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ff28 <sin+0xa0>
 800fe9c:	2000      	movs	r0, #0
 800fe9e:	b005      	add	sp, #20
 800fea0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fea4:	f001 b820 	b.w	8010ee8 <__kernel_sin>
 800fea8:	4822      	ldr	r0, [pc, #136]	; (800ff34 <sin+0xac>)
 800feaa:	4281      	cmp	r1, r0
 800feac:	dd09      	ble.n	800fec2 <sin+0x3a>
 800feae:	ee10 0a10 	vmov	r0, s0
 800feb2:	4619      	mov	r1, r3
 800feb4:	f7f0 f9f0 	bl	8000298 <__aeabi_dsub>
 800feb8:	ec41 0b10 	vmov	d0, r0, r1
 800febc:	b005      	add	sp, #20
 800febe:	f85d fb04 	ldr.w	pc, [sp], #4
 800fec2:	4668      	mov	r0, sp
 800fec4:	f000 f8b8 	bl	8010038 <__ieee754_rem_pio2>
 800fec8:	f000 0003 	and.w	r0, r0, #3
 800fecc:	2801      	cmp	r0, #1
 800fece:	d00c      	beq.n	800feea <sin+0x62>
 800fed0:	2802      	cmp	r0, #2
 800fed2:	d011      	beq.n	800fef8 <sin+0x70>
 800fed4:	b9f0      	cbnz	r0, 800ff14 <sin+0x8c>
 800fed6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800feda:	ed9d 0b00 	vldr	d0, [sp]
 800fede:	2001      	movs	r0, #1
 800fee0:	f001 f802 	bl	8010ee8 <__kernel_sin>
 800fee4:	ec51 0b10 	vmov	r0, r1, d0
 800fee8:	e7e6      	b.n	800feb8 <sin+0x30>
 800feea:	ed9d 1b02 	vldr	d1, [sp, #8]
 800feee:	ed9d 0b00 	vldr	d0, [sp]
 800fef2:	f000 fbe1 	bl	80106b8 <__kernel_cos>
 800fef6:	e7f5      	b.n	800fee4 <sin+0x5c>
 800fef8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fefc:	ed9d 0b00 	vldr	d0, [sp]
 800ff00:	2001      	movs	r0, #1
 800ff02:	f000 fff1 	bl	8010ee8 <__kernel_sin>
 800ff06:	ec53 2b10 	vmov	r2, r3, d0
 800ff0a:	ee10 0a10 	vmov	r0, s0
 800ff0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ff12:	e7d1      	b.n	800feb8 <sin+0x30>
 800ff14:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ff18:	ed9d 0b00 	vldr	d0, [sp]
 800ff1c:	f000 fbcc 	bl	80106b8 <__kernel_cos>
 800ff20:	e7f1      	b.n	800ff06 <sin+0x7e>
 800ff22:	bf00      	nop
 800ff24:	f3af 8000 	nop.w
	...
 800ff30:	3fe921fb 	.word	0x3fe921fb
 800ff34:	7fefffff 	.word	0x7fefffff

0800ff38 <tan>:
 800ff38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff3a:	ec53 2b10 	vmov	r2, r3, d0
 800ff3e:	4816      	ldr	r0, [pc, #88]	; (800ff98 <tan+0x60>)
 800ff40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ff44:	4281      	cmp	r1, r0
 800ff46:	dc07      	bgt.n	800ff58 <tan+0x20>
 800ff48:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800ff90 <tan+0x58>
 800ff4c:	2001      	movs	r0, #1
 800ff4e:	b005      	add	sp, #20
 800ff50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff54:	f001 b888 	b.w	8011068 <__kernel_tan>
 800ff58:	4810      	ldr	r0, [pc, #64]	; (800ff9c <tan+0x64>)
 800ff5a:	4281      	cmp	r1, r0
 800ff5c:	dd09      	ble.n	800ff72 <tan+0x3a>
 800ff5e:	ee10 0a10 	vmov	r0, s0
 800ff62:	4619      	mov	r1, r3
 800ff64:	f7f0 f998 	bl	8000298 <__aeabi_dsub>
 800ff68:	ec41 0b10 	vmov	d0, r0, r1
 800ff6c:	b005      	add	sp, #20
 800ff6e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff72:	4668      	mov	r0, sp
 800ff74:	f000 f860 	bl	8010038 <__ieee754_rem_pio2>
 800ff78:	0040      	lsls	r0, r0, #1
 800ff7a:	f000 0002 	and.w	r0, r0, #2
 800ff7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ff82:	ed9d 0b00 	vldr	d0, [sp]
 800ff86:	f1c0 0001 	rsb	r0, r0, #1
 800ff8a:	f001 f86d 	bl	8011068 <__kernel_tan>
 800ff8e:	e7ed      	b.n	800ff6c <tan+0x34>
	...
 800ff98:	3fe921fb 	.word	0x3fe921fb
 800ff9c:	7fefffff 	.word	0x7fefffff

0800ffa0 <sqrt>:
 800ffa0:	b538      	push	{r3, r4, r5, lr}
 800ffa2:	ed2d 8b02 	vpush	{d8}
 800ffa6:	ec55 4b10 	vmov	r4, r5, d0
 800ffaa:	f000 fa51 	bl	8010450 <__ieee754_sqrt>
 800ffae:	4622      	mov	r2, r4
 800ffb0:	462b      	mov	r3, r5
 800ffb2:	4620      	mov	r0, r4
 800ffb4:	4629      	mov	r1, r5
 800ffb6:	eeb0 8a40 	vmov.f32	s16, s0
 800ffba:	eef0 8a60 	vmov.f32	s17, s1
 800ffbe:	f7f0 fdbd 	bl	8000b3c <__aeabi_dcmpun>
 800ffc2:	b990      	cbnz	r0, 800ffea <sqrt+0x4a>
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	4620      	mov	r0, r4
 800ffca:	4629      	mov	r1, r5
 800ffcc:	f7f0 fd8e 	bl	8000aec <__aeabi_dcmplt>
 800ffd0:	b158      	cbz	r0, 800ffea <sqrt+0x4a>
 800ffd2:	f7fb f8b7 	bl	800b144 <__errno>
 800ffd6:	2321      	movs	r3, #33	; 0x21
 800ffd8:	6003      	str	r3, [r0, #0]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	2300      	movs	r3, #0
 800ffde:	4610      	mov	r0, r2
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	f7f0 fc3b 	bl	800085c <__aeabi_ddiv>
 800ffe6:	ec41 0b18 	vmov	d8, r0, r1
 800ffea:	eeb0 0a48 	vmov.f32	s0, s16
 800ffee:	eef0 0a68 	vmov.f32	s1, s17
 800fff2:	ecbd 8b02 	vpop	{d8}
 800fff6:	bd38      	pop	{r3, r4, r5, pc}

0800fff8 <fmodf>:
 800fff8:	b508      	push	{r3, lr}
 800fffa:	ed2d 8b02 	vpush	{d8}
 800fffe:	eef0 8a40 	vmov.f32	s17, s0
 8010002:	eeb0 8a60 	vmov.f32	s16, s1
 8010006:	f000 fad5 	bl	80105b4 <__ieee754_fmodf>
 801000a:	eef4 8a48 	vcmp.f32	s17, s16
 801000e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010012:	d60c      	bvs.n	801002e <fmodf+0x36>
 8010014:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010034 <fmodf+0x3c>
 8010018:	eeb4 8a68 	vcmp.f32	s16, s17
 801001c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010020:	d105      	bne.n	801002e <fmodf+0x36>
 8010022:	f7fb f88f 	bl	800b144 <__errno>
 8010026:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801002a:	2321      	movs	r3, #33	; 0x21
 801002c:	6003      	str	r3, [r0, #0]
 801002e:	ecbd 8b02 	vpop	{d8}
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000

08010038 <__ieee754_rem_pio2>:
 8010038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801003c:	ed2d 8b02 	vpush	{d8}
 8010040:	ec55 4b10 	vmov	r4, r5, d0
 8010044:	4bca      	ldr	r3, [pc, #808]	; (8010370 <__ieee754_rem_pio2+0x338>)
 8010046:	b08b      	sub	sp, #44	; 0x2c
 8010048:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801004c:	4598      	cmp	r8, r3
 801004e:	4682      	mov	sl, r0
 8010050:	9502      	str	r5, [sp, #8]
 8010052:	dc08      	bgt.n	8010066 <__ieee754_rem_pio2+0x2e>
 8010054:	2200      	movs	r2, #0
 8010056:	2300      	movs	r3, #0
 8010058:	ed80 0b00 	vstr	d0, [r0]
 801005c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010060:	f04f 0b00 	mov.w	fp, #0
 8010064:	e028      	b.n	80100b8 <__ieee754_rem_pio2+0x80>
 8010066:	4bc3      	ldr	r3, [pc, #780]	; (8010374 <__ieee754_rem_pio2+0x33c>)
 8010068:	4598      	cmp	r8, r3
 801006a:	dc78      	bgt.n	801015e <__ieee754_rem_pio2+0x126>
 801006c:	9b02      	ldr	r3, [sp, #8]
 801006e:	4ec2      	ldr	r6, [pc, #776]	; (8010378 <__ieee754_rem_pio2+0x340>)
 8010070:	2b00      	cmp	r3, #0
 8010072:	ee10 0a10 	vmov	r0, s0
 8010076:	a3b0      	add	r3, pc, #704	; (adr r3, 8010338 <__ieee754_rem_pio2+0x300>)
 8010078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007c:	4629      	mov	r1, r5
 801007e:	dd39      	ble.n	80100f4 <__ieee754_rem_pio2+0xbc>
 8010080:	f7f0 f90a 	bl	8000298 <__aeabi_dsub>
 8010084:	45b0      	cmp	r8, r6
 8010086:	4604      	mov	r4, r0
 8010088:	460d      	mov	r5, r1
 801008a:	d01b      	beq.n	80100c4 <__ieee754_rem_pio2+0x8c>
 801008c:	a3ac      	add	r3, pc, #688	; (adr r3, 8010340 <__ieee754_rem_pio2+0x308>)
 801008e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010092:	f7f0 f901 	bl	8000298 <__aeabi_dsub>
 8010096:	4602      	mov	r2, r0
 8010098:	460b      	mov	r3, r1
 801009a:	e9ca 2300 	strd	r2, r3, [sl]
 801009e:	4620      	mov	r0, r4
 80100a0:	4629      	mov	r1, r5
 80100a2:	f7f0 f8f9 	bl	8000298 <__aeabi_dsub>
 80100a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8010340 <__ieee754_rem_pio2+0x308>)
 80100a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ac:	f7f0 f8f4 	bl	8000298 <__aeabi_dsub>
 80100b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80100b4:	f04f 0b01 	mov.w	fp, #1
 80100b8:	4658      	mov	r0, fp
 80100ba:	b00b      	add	sp, #44	; 0x2c
 80100bc:	ecbd 8b02 	vpop	{d8}
 80100c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100c4:	a3a0      	add	r3, pc, #640	; (adr r3, 8010348 <__ieee754_rem_pio2+0x310>)
 80100c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ca:	f7f0 f8e5 	bl	8000298 <__aeabi_dsub>
 80100ce:	a3a0      	add	r3, pc, #640	; (adr r3, 8010350 <__ieee754_rem_pio2+0x318>)
 80100d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d4:	4604      	mov	r4, r0
 80100d6:	460d      	mov	r5, r1
 80100d8:	f7f0 f8de 	bl	8000298 <__aeabi_dsub>
 80100dc:	4602      	mov	r2, r0
 80100de:	460b      	mov	r3, r1
 80100e0:	e9ca 2300 	strd	r2, r3, [sl]
 80100e4:	4620      	mov	r0, r4
 80100e6:	4629      	mov	r1, r5
 80100e8:	f7f0 f8d6 	bl	8000298 <__aeabi_dsub>
 80100ec:	a398      	add	r3, pc, #608	; (adr r3, 8010350 <__ieee754_rem_pio2+0x318>)
 80100ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f2:	e7db      	b.n	80100ac <__ieee754_rem_pio2+0x74>
 80100f4:	f7f0 f8d2 	bl	800029c <__adddf3>
 80100f8:	45b0      	cmp	r8, r6
 80100fa:	4604      	mov	r4, r0
 80100fc:	460d      	mov	r5, r1
 80100fe:	d016      	beq.n	801012e <__ieee754_rem_pio2+0xf6>
 8010100:	a38f      	add	r3, pc, #572	; (adr r3, 8010340 <__ieee754_rem_pio2+0x308>)
 8010102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010106:	f7f0 f8c9 	bl	800029c <__adddf3>
 801010a:	4602      	mov	r2, r0
 801010c:	460b      	mov	r3, r1
 801010e:	e9ca 2300 	strd	r2, r3, [sl]
 8010112:	4620      	mov	r0, r4
 8010114:	4629      	mov	r1, r5
 8010116:	f7f0 f8bf 	bl	8000298 <__aeabi_dsub>
 801011a:	a389      	add	r3, pc, #548	; (adr r3, 8010340 <__ieee754_rem_pio2+0x308>)
 801011c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010120:	f7f0 f8bc 	bl	800029c <__adddf3>
 8010124:	f04f 3bff 	mov.w	fp, #4294967295
 8010128:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801012c:	e7c4      	b.n	80100b8 <__ieee754_rem_pio2+0x80>
 801012e:	a386      	add	r3, pc, #536	; (adr r3, 8010348 <__ieee754_rem_pio2+0x310>)
 8010130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010134:	f7f0 f8b2 	bl	800029c <__adddf3>
 8010138:	a385      	add	r3, pc, #532	; (adr r3, 8010350 <__ieee754_rem_pio2+0x318>)
 801013a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801013e:	4604      	mov	r4, r0
 8010140:	460d      	mov	r5, r1
 8010142:	f7f0 f8ab 	bl	800029c <__adddf3>
 8010146:	4602      	mov	r2, r0
 8010148:	460b      	mov	r3, r1
 801014a:	e9ca 2300 	strd	r2, r3, [sl]
 801014e:	4620      	mov	r0, r4
 8010150:	4629      	mov	r1, r5
 8010152:	f7f0 f8a1 	bl	8000298 <__aeabi_dsub>
 8010156:	a37e      	add	r3, pc, #504	; (adr r3, 8010350 <__ieee754_rem_pio2+0x318>)
 8010158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801015c:	e7e0      	b.n	8010120 <__ieee754_rem_pio2+0xe8>
 801015e:	4b87      	ldr	r3, [pc, #540]	; (801037c <__ieee754_rem_pio2+0x344>)
 8010160:	4598      	cmp	r8, r3
 8010162:	f300 80d9 	bgt.w	8010318 <__ieee754_rem_pio2+0x2e0>
 8010166:	f7ff fe83 	bl	800fe70 <fabs>
 801016a:	ec55 4b10 	vmov	r4, r5, d0
 801016e:	ee10 0a10 	vmov	r0, s0
 8010172:	a379      	add	r3, pc, #484	; (adr r3, 8010358 <__ieee754_rem_pio2+0x320>)
 8010174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010178:	4629      	mov	r1, r5
 801017a:	f7f0 fa45 	bl	8000608 <__aeabi_dmul>
 801017e:	4b80      	ldr	r3, [pc, #512]	; (8010380 <__ieee754_rem_pio2+0x348>)
 8010180:	2200      	movs	r2, #0
 8010182:	f7f0 f88b 	bl	800029c <__adddf3>
 8010186:	f7f0 fcef 	bl	8000b68 <__aeabi_d2iz>
 801018a:	4683      	mov	fp, r0
 801018c:	f7f0 f9d2 	bl	8000534 <__aeabi_i2d>
 8010190:	4602      	mov	r2, r0
 8010192:	460b      	mov	r3, r1
 8010194:	ec43 2b18 	vmov	d8, r2, r3
 8010198:	a367      	add	r3, pc, #412	; (adr r3, 8010338 <__ieee754_rem_pio2+0x300>)
 801019a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019e:	f7f0 fa33 	bl	8000608 <__aeabi_dmul>
 80101a2:	4602      	mov	r2, r0
 80101a4:	460b      	mov	r3, r1
 80101a6:	4620      	mov	r0, r4
 80101a8:	4629      	mov	r1, r5
 80101aa:	f7f0 f875 	bl	8000298 <__aeabi_dsub>
 80101ae:	a364      	add	r3, pc, #400	; (adr r3, 8010340 <__ieee754_rem_pio2+0x308>)
 80101b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b4:	4606      	mov	r6, r0
 80101b6:	460f      	mov	r7, r1
 80101b8:	ec51 0b18 	vmov	r0, r1, d8
 80101bc:	f7f0 fa24 	bl	8000608 <__aeabi_dmul>
 80101c0:	f1bb 0f1f 	cmp.w	fp, #31
 80101c4:	4604      	mov	r4, r0
 80101c6:	460d      	mov	r5, r1
 80101c8:	dc0d      	bgt.n	80101e6 <__ieee754_rem_pio2+0x1ae>
 80101ca:	4b6e      	ldr	r3, [pc, #440]	; (8010384 <__ieee754_rem_pio2+0x34c>)
 80101cc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80101d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101d4:	4543      	cmp	r3, r8
 80101d6:	d006      	beq.n	80101e6 <__ieee754_rem_pio2+0x1ae>
 80101d8:	4622      	mov	r2, r4
 80101da:	462b      	mov	r3, r5
 80101dc:	4630      	mov	r0, r6
 80101de:	4639      	mov	r1, r7
 80101e0:	f7f0 f85a 	bl	8000298 <__aeabi_dsub>
 80101e4:	e00f      	b.n	8010206 <__ieee754_rem_pio2+0x1ce>
 80101e6:	462b      	mov	r3, r5
 80101e8:	4622      	mov	r2, r4
 80101ea:	4630      	mov	r0, r6
 80101ec:	4639      	mov	r1, r7
 80101ee:	f7f0 f853 	bl	8000298 <__aeabi_dsub>
 80101f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80101f6:	9303      	str	r3, [sp, #12]
 80101f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80101fc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8010200:	f1b8 0f10 	cmp.w	r8, #16
 8010204:	dc02      	bgt.n	801020c <__ieee754_rem_pio2+0x1d4>
 8010206:	e9ca 0100 	strd	r0, r1, [sl]
 801020a:	e039      	b.n	8010280 <__ieee754_rem_pio2+0x248>
 801020c:	a34e      	add	r3, pc, #312	; (adr r3, 8010348 <__ieee754_rem_pio2+0x310>)
 801020e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010212:	ec51 0b18 	vmov	r0, r1, d8
 8010216:	f7f0 f9f7 	bl	8000608 <__aeabi_dmul>
 801021a:	4604      	mov	r4, r0
 801021c:	460d      	mov	r5, r1
 801021e:	4602      	mov	r2, r0
 8010220:	460b      	mov	r3, r1
 8010222:	4630      	mov	r0, r6
 8010224:	4639      	mov	r1, r7
 8010226:	f7f0 f837 	bl	8000298 <__aeabi_dsub>
 801022a:	4602      	mov	r2, r0
 801022c:	460b      	mov	r3, r1
 801022e:	4680      	mov	r8, r0
 8010230:	4689      	mov	r9, r1
 8010232:	4630      	mov	r0, r6
 8010234:	4639      	mov	r1, r7
 8010236:	f7f0 f82f 	bl	8000298 <__aeabi_dsub>
 801023a:	4622      	mov	r2, r4
 801023c:	462b      	mov	r3, r5
 801023e:	f7f0 f82b 	bl	8000298 <__aeabi_dsub>
 8010242:	a343      	add	r3, pc, #268	; (adr r3, 8010350 <__ieee754_rem_pio2+0x318>)
 8010244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010248:	4604      	mov	r4, r0
 801024a:	460d      	mov	r5, r1
 801024c:	ec51 0b18 	vmov	r0, r1, d8
 8010250:	f7f0 f9da 	bl	8000608 <__aeabi_dmul>
 8010254:	4622      	mov	r2, r4
 8010256:	462b      	mov	r3, r5
 8010258:	f7f0 f81e 	bl	8000298 <__aeabi_dsub>
 801025c:	4602      	mov	r2, r0
 801025e:	460b      	mov	r3, r1
 8010260:	4604      	mov	r4, r0
 8010262:	460d      	mov	r5, r1
 8010264:	4640      	mov	r0, r8
 8010266:	4649      	mov	r1, r9
 8010268:	f7f0 f816 	bl	8000298 <__aeabi_dsub>
 801026c:	9a03      	ldr	r2, [sp, #12]
 801026e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010272:	1ad3      	subs	r3, r2, r3
 8010274:	2b31      	cmp	r3, #49	; 0x31
 8010276:	dc24      	bgt.n	80102c2 <__ieee754_rem_pio2+0x28a>
 8010278:	e9ca 0100 	strd	r0, r1, [sl]
 801027c:	4646      	mov	r6, r8
 801027e:	464f      	mov	r7, r9
 8010280:	e9da 8900 	ldrd	r8, r9, [sl]
 8010284:	4630      	mov	r0, r6
 8010286:	4642      	mov	r2, r8
 8010288:	464b      	mov	r3, r9
 801028a:	4639      	mov	r1, r7
 801028c:	f7f0 f804 	bl	8000298 <__aeabi_dsub>
 8010290:	462b      	mov	r3, r5
 8010292:	4622      	mov	r2, r4
 8010294:	f7f0 f800 	bl	8000298 <__aeabi_dsub>
 8010298:	9b02      	ldr	r3, [sp, #8]
 801029a:	2b00      	cmp	r3, #0
 801029c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80102a0:	f6bf af0a 	bge.w	80100b8 <__ieee754_rem_pio2+0x80>
 80102a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80102a8:	f8ca 3004 	str.w	r3, [sl, #4]
 80102ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102b0:	f8ca 8000 	str.w	r8, [sl]
 80102b4:	f8ca 0008 	str.w	r0, [sl, #8]
 80102b8:	f8ca 300c 	str.w	r3, [sl, #12]
 80102bc:	f1cb 0b00 	rsb	fp, fp, #0
 80102c0:	e6fa      	b.n	80100b8 <__ieee754_rem_pio2+0x80>
 80102c2:	a327      	add	r3, pc, #156	; (adr r3, 8010360 <__ieee754_rem_pio2+0x328>)
 80102c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c8:	ec51 0b18 	vmov	r0, r1, d8
 80102cc:	f7f0 f99c 	bl	8000608 <__aeabi_dmul>
 80102d0:	4604      	mov	r4, r0
 80102d2:	460d      	mov	r5, r1
 80102d4:	4602      	mov	r2, r0
 80102d6:	460b      	mov	r3, r1
 80102d8:	4640      	mov	r0, r8
 80102da:	4649      	mov	r1, r9
 80102dc:	f7ef ffdc 	bl	8000298 <__aeabi_dsub>
 80102e0:	4602      	mov	r2, r0
 80102e2:	460b      	mov	r3, r1
 80102e4:	4606      	mov	r6, r0
 80102e6:	460f      	mov	r7, r1
 80102e8:	4640      	mov	r0, r8
 80102ea:	4649      	mov	r1, r9
 80102ec:	f7ef ffd4 	bl	8000298 <__aeabi_dsub>
 80102f0:	4622      	mov	r2, r4
 80102f2:	462b      	mov	r3, r5
 80102f4:	f7ef ffd0 	bl	8000298 <__aeabi_dsub>
 80102f8:	a31b      	add	r3, pc, #108	; (adr r3, 8010368 <__ieee754_rem_pio2+0x330>)
 80102fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fe:	4604      	mov	r4, r0
 8010300:	460d      	mov	r5, r1
 8010302:	ec51 0b18 	vmov	r0, r1, d8
 8010306:	f7f0 f97f 	bl	8000608 <__aeabi_dmul>
 801030a:	4622      	mov	r2, r4
 801030c:	462b      	mov	r3, r5
 801030e:	f7ef ffc3 	bl	8000298 <__aeabi_dsub>
 8010312:	4604      	mov	r4, r0
 8010314:	460d      	mov	r5, r1
 8010316:	e75f      	b.n	80101d8 <__ieee754_rem_pio2+0x1a0>
 8010318:	4b1b      	ldr	r3, [pc, #108]	; (8010388 <__ieee754_rem_pio2+0x350>)
 801031a:	4598      	cmp	r8, r3
 801031c:	dd36      	ble.n	801038c <__ieee754_rem_pio2+0x354>
 801031e:	ee10 2a10 	vmov	r2, s0
 8010322:	462b      	mov	r3, r5
 8010324:	4620      	mov	r0, r4
 8010326:	4629      	mov	r1, r5
 8010328:	f7ef ffb6 	bl	8000298 <__aeabi_dsub>
 801032c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010330:	e9ca 0100 	strd	r0, r1, [sl]
 8010334:	e694      	b.n	8010060 <__ieee754_rem_pio2+0x28>
 8010336:	bf00      	nop
 8010338:	54400000 	.word	0x54400000
 801033c:	3ff921fb 	.word	0x3ff921fb
 8010340:	1a626331 	.word	0x1a626331
 8010344:	3dd0b461 	.word	0x3dd0b461
 8010348:	1a600000 	.word	0x1a600000
 801034c:	3dd0b461 	.word	0x3dd0b461
 8010350:	2e037073 	.word	0x2e037073
 8010354:	3ba3198a 	.word	0x3ba3198a
 8010358:	6dc9c883 	.word	0x6dc9c883
 801035c:	3fe45f30 	.word	0x3fe45f30
 8010360:	2e000000 	.word	0x2e000000
 8010364:	3ba3198a 	.word	0x3ba3198a
 8010368:	252049c1 	.word	0x252049c1
 801036c:	397b839a 	.word	0x397b839a
 8010370:	3fe921fb 	.word	0x3fe921fb
 8010374:	4002d97b 	.word	0x4002d97b
 8010378:	3ff921fb 	.word	0x3ff921fb
 801037c:	413921fb 	.word	0x413921fb
 8010380:	3fe00000 	.word	0x3fe00000
 8010384:	08011bd0 	.word	0x08011bd0
 8010388:	7fefffff 	.word	0x7fefffff
 801038c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8010390:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8010394:	ee10 0a10 	vmov	r0, s0
 8010398:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801039c:	ee10 6a10 	vmov	r6, s0
 80103a0:	460f      	mov	r7, r1
 80103a2:	f7f0 fbe1 	bl	8000b68 <__aeabi_d2iz>
 80103a6:	f7f0 f8c5 	bl	8000534 <__aeabi_i2d>
 80103aa:	4602      	mov	r2, r0
 80103ac:	460b      	mov	r3, r1
 80103ae:	4630      	mov	r0, r6
 80103b0:	4639      	mov	r1, r7
 80103b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80103b6:	f7ef ff6f 	bl	8000298 <__aeabi_dsub>
 80103ba:	4b23      	ldr	r3, [pc, #140]	; (8010448 <__ieee754_rem_pio2+0x410>)
 80103bc:	2200      	movs	r2, #0
 80103be:	f7f0 f923 	bl	8000608 <__aeabi_dmul>
 80103c2:	460f      	mov	r7, r1
 80103c4:	4606      	mov	r6, r0
 80103c6:	f7f0 fbcf 	bl	8000b68 <__aeabi_d2iz>
 80103ca:	f7f0 f8b3 	bl	8000534 <__aeabi_i2d>
 80103ce:	4602      	mov	r2, r0
 80103d0:	460b      	mov	r3, r1
 80103d2:	4630      	mov	r0, r6
 80103d4:	4639      	mov	r1, r7
 80103d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80103da:	f7ef ff5d 	bl	8000298 <__aeabi_dsub>
 80103de:	4b1a      	ldr	r3, [pc, #104]	; (8010448 <__ieee754_rem_pio2+0x410>)
 80103e0:	2200      	movs	r2, #0
 80103e2:	f7f0 f911 	bl	8000608 <__aeabi_dmul>
 80103e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80103ea:	ad04      	add	r5, sp, #16
 80103ec:	f04f 0803 	mov.w	r8, #3
 80103f0:	46a9      	mov	r9, r5
 80103f2:	2600      	movs	r6, #0
 80103f4:	2700      	movs	r7, #0
 80103f6:	4632      	mov	r2, r6
 80103f8:	463b      	mov	r3, r7
 80103fa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80103fe:	46c3      	mov	fp, r8
 8010400:	3d08      	subs	r5, #8
 8010402:	f108 38ff 	add.w	r8, r8, #4294967295
 8010406:	f7f0 fb67 	bl	8000ad8 <__aeabi_dcmpeq>
 801040a:	2800      	cmp	r0, #0
 801040c:	d1f3      	bne.n	80103f6 <__ieee754_rem_pio2+0x3be>
 801040e:	4b0f      	ldr	r3, [pc, #60]	; (801044c <__ieee754_rem_pio2+0x414>)
 8010410:	9301      	str	r3, [sp, #4]
 8010412:	2302      	movs	r3, #2
 8010414:	9300      	str	r3, [sp, #0]
 8010416:	4622      	mov	r2, r4
 8010418:	465b      	mov	r3, fp
 801041a:	4651      	mov	r1, sl
 801041c:	4648      	mov	r0, r9
 801041e:	f000 fa13 	bl	8010848 <__kernel_rem_pio2>
 8010422:	9b02      	ldr	r3, [sp, #8]
 8010424:	2b00      	cmp	r3, #0
 8010426:	4683      	mov	fp, r0
 8010428:	f6bf ae46 	bge.w	80100b8 <__ieee754_rem_pio2+0x80>
 801042c:	e9da 2100 	ldrd	r2, r1, [sl]
 8010430:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010434:	e9ca 2300 	strd	r2, r3, [sl]
 8010438:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801043c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010440:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010444:	e73a      	b.n	80102bc <__ieee754_rem_pio2+0x284>
 8010446:	bf00      	nop
 8010448:	41700000 	.word	0x41700000
 801044c:	08011c50 	.word	0x08011c50

08010450 <__ieee754_sqrt>:
 8010450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010454:	ec55 4b10 	vmov	r4, r5, d0
 8010458:	4e55      	ldr	r6, [pc, #340]	; (80105b0 <__ieee754_sqrt+0x160>)
 801045a:	43ae      	bics	r6, r5
 801045c:	ee10 0a10 	vmov	r0, s0
 8010460:	ee10 3a10 	vmov	r3, s0
 8010464:	462a      	mov	r2, r5
 8010466:	4629      	mov	r1, r5
 8010468:	d110      	bne.n	801048c <__ieee754_sqrt+0x3c>
 801046a:	ee10 2a10 	vmov	r2, s0
 801046e:	462b      	mov	r3, r5
 8010470:	f7f0 f8ca 	bl	8000608 <__aeabi_dmul>
 8010474:	4602      	mov	r2, r0
 8010476:	460b      	mov	r3, r1
 8010478:	4620      	mov	r0, r4
 801047a:	4629      	mov	r1, r5
 801047c:	f7ef ff0e 	bl	800029c <__adddf3>
 8010480:	4604      	mov	r4, r0
 8010482:	460d      	mov	r5, r1
 8010484:	ec45 4b10 	vmov	d0, r4, r5
 8010488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801048c:	2d00      	cmp	r5, #0
 801048e:	dc10      	bgt.n	80104b2 <__ieee754_sqrt+0x62>
 8010490:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010494:	4330      	orrs	r0, r6
 8010496:	d0f5      	beq.n	8010484 <__ieee754_sqrt+0x34>
 8010498:	b15d      	cbz	r5, 80104b2 <__ieee754_sqrt+0x62>
 801049a:	ee10 2a10 	vmov	r2, s0
 801049e:	462b      	mov	r3, r5
 80104a0:	ee10 0a10 	vmov	r0, s0
 80104a4:	f7ef fef8 	bl	8000298 <__aeabi_dsub>
 80104a8:	4602      	mov	r2, r0
 80104aa:	460b      	mov	r3, r1
 80104ac:	f7f0 f9d6 	bl	800085c <__aeabi_ddiv>
 80104b0:	e7e6      	b.n	8010480 <__ieee754_sqrt+0x30>
 80104b2:	1512      	asrs	r2, r2, #20
 80104b4:	d074      	beq.n	80105a0 <__ieee754_sqrt+0x150>
 80104b6:	07d4      	lsls	r4, r2, #31
 80104b8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80104bc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80104c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80104c4:	bf5e      	ittt	pl
 80104c6:	0fda      	lsrpl	r2, r3, #31
 80104c8:	005b      	lslpl	r3, r3, #1
 80104ca:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80104ce:	2400      	movs	r4, #0
 80104d0:	0fda      	lsrs	r2, r3, #31
 80104d2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80104d6:	107f      	asrs	r7, r7, #1
 80104d8:	005b      	lsls	r3, r3, #1
 80104da:	2516      	movs	r5, #22
 80104dc:	4620      	mov	r0, r4
 80104de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80104e2:	1886      	adds	r6, r0, r2
 80104e4:	428e      	cmp	r6, r1
 80104e6:	bfde      	ittt	le
 80104e8:	1b89      	suble	r1, r1, r6
 80104ea:	18b0      	addle	r0, r6, r2
 80104ec:	18a4      	addle	r4, r4, r2
 80104ee:	0049      	lsls	r1, r1, #1
 80104f0:	3d01      	subs	r5, #1
 80104f2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80104f6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80104fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80104fe:	d1f0      	bne.n	80104e2 <__ieee754_sqrt+0x92>
 8010500:	462a      	mov	r2, r5
 8010502:	f04f 0e20 	mov.w	lr, #32
 8010506:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801050a:	4281      	cmp	r1, r0
 801050c:	eb06 0c05 	add.w	ip, r6, r5
 8010510:	dc02      	bgt.n	8010518 <__ieee754_sqrt+0xc8>
 8010512:	d113      	bne.n	801053c <__ieee754_sqrt+0xec>
 8010514:	459c      	cmp	ip, r3
 8010516:	d811      	bhi.n	801053c <__ieee754_sqrt+0xec>
 8010518:	f1bc 0f00 	cmp.w	ip, #0
 801051c:	eb0c 0506 	add.w	r5, ip, r6
 8010520:	da43      	bge.n	80105aa <__ieee754_sqrt+0x15a>
 8010522:	2d00      	cmp	r5, #0
 8010524:	db41      	blt.n	80105aa <__ieee754_sqrt+0x15a>
 8010526:	f100 0801 	add.w	r8, r0, #1
 801052a:	1a09      	subs	r1, r1, r0
 801052c:	459c      	cmp	ip, r3
 801052e:	bf88      	it	hi
 8010530:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010534:	eba3 030c 	sub.w	r3, r3, ip
 8010538:	4432      	add	r2, r6
 801053a:	4640      	mov	r0, r8
 801053c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010540:	f1be 0e01 	subs.w	lr, lr, #1
 8010544:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010548:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801054c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010550:	d1db      	bne.n	801050a <__ieee754_sqrt+0xba>
 8010552:	430b      	orrs	r3, r1
 8010554:	d006      	beq.n	8010564 <__ieee754_sqrt+0x114>
 8010556:	1c50      	adds	r0, r2, #1
 8010558:	bf13      	iteet	ne
 801055a:	3201      	addne	r2, #1
 801055c:	3401      	addeq	r4, #1
 801055e:	4672      	moveq	r2, lr
 8010560:	f022 0201 	bicne.w	r2, r2, #1
 8010564:	1063      	asrs	r3, r4, #1
 8010566:	0852      	lsrs	r2, r2, #1
 8010568:	07e1      	lsls	r1, r4, #31
 801056a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801056e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010572:	bf48      	it	mi
 8010574:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010578:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801057c:	4614      	mov	r4, r2
 801057e:	e781      	b.n	8010484 <__ieee754_sqrt+0x34>
 8010580:	0ad9      	lsrs	r1, r3, #11
 8010582:	3815      	subs	r0, #21
 8010584:	055b      	lsls	r3, r3, #21
 8010586:	2900      	cmp	r1, #0
 8010588:	d0fa      	beq.n	8010580 <__ieee754_sqrt+0x130>
 801058a:	02cd      	lsls	r5, r1, #11
 801058c:	d50a      	bpl.n	80105a4 <__ieee754_sqrt+0x154>
 801058e:	f1c2 0420 	rsb	r4, r2, #32
 8010592:	fa23 f404 	lsr.w	r4, r3, r4
 8010596:	1e55      	subs	r5, r2, #1
 8010598:	4093      	lsls	r3, r2
 801059a:	4321      	orrs	r1, r4
 801059c:	1b42      	subs	r2, r0, r5
 801059e:	e78a      	b.n	80104b6 <__ieee754_sqrt+0x66>
 80105a0:	4610      	mov	r0, r2
 80105a2:	e7f0      	b.n	8010586 <__ieee754_sqrt+0x136>
 80105a4:	0049      	lsls	r1, r1, #1
 80105a6:	3201      	adds	r2, #1
 80105a8:	e7ef      	b.n	801058a <__ieee754_sqrt+0x13a>
 80105aa:	4680      	mov	r8, r0
 80105ac:	e7bd      	b.n	801052a <__ieee754_sqrt+0xda>
 80105ae:	bf00      	nop
 80105b0:	7ff00000 	.word	0x7ff00000

080105b4 <__ieee754_fmodf>:
 80105b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105b6:	ee10 5a90 	vmov	r5, s1
 80105ba:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 80105be:	d009      	beq.n	80105d4 <__ieee754_fmodf+0x20>
 80105c0:	ee10 2a10 	vmov	r2, s0
 80105c4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80105c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80105cc:	da02      	bge.n	80105d4 <__ieee754_fmodf+0x20>
 80105ce:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80105d2:	dd04      	ble.n	80105de <__ieee754_fmodf+0x2a>
 80105d4:	ee60 0a20 	vmul.f32	s1, s0, s1
 80105d8:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80105dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105de:	42a3      	cmp	r3, r4
 80105e0:	dbfc      	blt.n	80105dc <__ieee754_fmodf+0x28>
 80105e2:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 80105e6:	d105      	bne.n	80105f4 <__ieee754_fmodf+0x40>
 80105e8:	4b32      	ldr	r3, [pc, #200]	; (80106b4 <__ieee754_fmodf+0x100>)
 80105ea:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 80105ee:	ed93 0a00 	vldr	s0, [r3]
 80105f2:	e7f3      	b.n	80105dc <__ieee754_fmodf+0x28>
 80105f4:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80105f8:	d13f      	bne.n	801067a <__ieee754_fmodf+0xc6>
 80105fa:	0219      	lsls	r1, r3, #8
 80105fc:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8010600:	2900      	cmp	r1, #0
 8010602:	dc37      	bgt.n	8010674 <__ieee754_fmodf+0xc0>
 8010604:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8010608:	d13d      	bne.n	8010686 <__ieee754_fmodf+0xd2>
 801060a:	0227      	lsls	r7, r4, #8
 801060c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8010610:	2f00      	cmp	r7, #0
 8010612:	da35      	bge.n	8010680 <__ieee754_fmodf+0xcc>
 8010614:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8010618:	bfbb      	ittet	lt
 801061a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801061e:	1a12      	sublt	r2, r2, r0
 8010620:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8010624:	4093      	lsllt	r3, r2
 8010626:	bfa8      	it	ge
 8010628:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 801062c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8010630:	bfb5      	itete	lt
 8010632:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8010636:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 801063a:	1a52      	sublt	r2, r2, r1
 801063c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8010640:	bfb8      	it	lt
 8010642:	4094      	lsllt	r4, r2
 8010644:	1a40      	subs	r0, r0, r1
 8010646:	1b1a      	subs	r2, r3, r4
 8010648:	bb00      	cbnz	r0, 801068c <__ieee754_fmodf+0xd8>
 801064a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 801064e:	bf38      	it	cc
 8010650:	4613      	movcc	r3, r2
 8010652:	2b00      	cmp	r3, #0
 8010654:	d0c8      	beq.n	80105e8 <__ieee754_fmodf+0x34>
 8010656:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801065a:	db1f      	blt.n	801069c <__ieee754_fmodf+0xe8>
 801065c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8010660:	db1f      	blt.n	80106a2 <__ieee754_fmodf+0xee>
 8010662:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8010666:	317f      	adds	r1, #127	; 0x7f
 8010668:	4333      	orrs	r3, r6
 801066a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 801066e:	ee00 3a10 	vmov	s0, r3
 8010672:	e7b3      	b.n	80105dc <__ieee754_fmodf+0x28>
 8010674:	3801      	subs	r0, #1
 8010676:	0049      	lsls	r1, r1, #1
 8010678:	e7c2      	b.n	8010600 <__ieee754_fmodf+0x4c>
 801067a:	15d8      	asrs	r0, r3, #23
 801067c:	387f      	subs	r0, #127	; 0x7f
 801067e:	e7c1      	b.n	8010604 <__ieee754_fmodf+0x50>
 8010680:	3901      	subs	r1, #1
 8010682:	007f      	lsls	r7, r7, #1
 8010684:	e7c4      	b.n	8010610 <__ieee754_fmodf+0x5c>
 8010686:	15e1      	asrs	r1, r4, #23
 8010688:	397f      	subs	r1, #127	; 0x7f
 801068a:	e7c3      	b.n	8010614 <__ieee754_fmodf+0x60>
 801068c:	2a00      	cmp	r2, #0
 801068e:	da02      	bge.n	8010696 <__ieee754_fmodf+0xe2>
 8010690:	005b      	lsls	r3, r3, #1
 8010692:	3801      	subs	r0, #1
 8010694:	e7d7      	b.n	8010646 <__ieee754_fmodf+0x92>
 8010696:	d0a7      	beq.n	80105e8 <__ieee754_fmodf+0x34>
 8010698:	0053      	lsls	r3, r2, #1
 801069a:	e7fa      	b.n	8010692 <__ieee754_fmodf+0xde>
 801069c:	005b      	lsls	r3, r3, #1
 801069e:	3901      	subs	r1, #1
 80106a0:	e7d9      	b.n	8010656 <__ieee754_fmodf+0xa2>
 80106a2:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80106a6:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80106aa:	3182      	adds	r1, #130	; 0x82
 80106ac:	410b      	asrs	r3, r1
 80106ae:	4333      	orrs	r3, r6
 80106b0:	e7dd      	b.n	801066e <__ieee754_fmodf+0xba>
 80106b2:	bf00      	nop
 80106b4:	08011d58 	.word	0x08011d58

080106b8 <__kernel_cos>:
 80106b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106bc:	ec57 6b10 	vmov	r6, r7, d0
 80106c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80106c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80106c8:	ed8d 1b00 	vstr	d1, [sp]
 80106cc:	da07      	bge.n	80106de <__kernel_cos+0x26>
 80106ce:	ee10 0a10 	vmov	r0, s0
 80106d2:	4639      	mov	r1, r7
 80106d4:	f7f0 fa48 	bl	8000b68 <__aeabi_d2iz>
 80106d8:	2800      	cmp	r0, #0
 80106da:	f000 8088 	beq.w	80107ee <__kernel_cos+0x136>
 80106de:	4632      	mov	r2, r6
 80106e0:	463b      	mov	r3, r7
 80106e2:	4630      	mov	r0, r6
 80106e4:	4639      	mov	r1, r7
 80106e6:	f7ef ff8f 	bl	8000608 <__aeabi_dmul>
 80106ea:	4b51      	ldr	r3, [pc, #324]	; (8010830 <__kernel_cos+0x178>)
 80106ec:	2200      	movs	r2, #0
 80106ee:	4604      	mov	r4, r0
 80106f0:	460d      	mov	r5, r1
 80106f2:	f7ef ff89 	bl	8000608 <__aeabi_dmul>
 80106f6:	a340      	add	r3, pc, #256	; (adr r3, 80107f8 <__kernel_cos+0x140>)
 80106f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106fc:	4682      	mov	sl, r0
 80106fe:	468b      	mov	fp, r1
 8010700:	4620      	mov	r0, r4
 8010702:	4629      	mov	r1, r5
 8010704:	f7ef ff80 	bl	8000608 <__aeabi_dmul>
 8010708:	a33d      	add	r3, pc, #244	; (adr r3, 8010800 <__kernel_cos+0x148>)
 801070a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801070e:	f7ef fdc5 	bl	800029c <__adddf3>
 8010712:	4622      	mov	r2, r4
 8010714:	462b      	mov	r3, r5
 8010716:	f7ef ff77 	bl	8000608 <__aeabi_dmul>
 801071a:	a33b      	add	r3, pc, #236	; (adr r3, 8010808 <__kernel_cos+0x150>)
 801071c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010720:	f7ef fdba 	bl	8000298 <__aeabi_dsub>
 8010724:	4622      	mov	r2, r4
 8010726:	462b      	mov	r3, r5
 8010728:	f7ef ff6e 	bl	8000608 <__aeabi_dmul>
 801072c:	a338      	add	r3, pc, #224	; (adr r3, 8010810 <__kernel_cos+0x158>)
 801072e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010732:	f7ef fdb3 	bl	800029c <__adddf3>
 8010736:	4622      	mov	r2, r4
 8010738:	462b      	mov	r3, r5
 801073a:	f7ef ff65 	bl	8000608 <__aeabi_dmul>
 801073e:	a336      	add	r3, pc, #216	; (adr r3, 8010818 <__kernel_cos+0x160>)
 8010740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010744:	f7ef fda8 	bl	8000298 <__aeabi_dsub>
 8010748:	4622      	mov	r2, r4
 801074a:	462b      	mov	r3, r5
 801074c:	f7ef ff5c 	bl	8000608 <__aeabi_dmul>
 8010750:	a333      	add	r3, pc, #204	; (adr r3, 8010820 <__kernel_cos+0x168>)
 8010752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010756:	f7ef fda1 	bl	800029c <__adddf3>
 801075a:	4622      	mov	r2, r4
 801075c:	462b      	mov	r3, r5
 801075e:	f7ef ff53 	bl	8000608 <__aeabi_dmul>
 8010762:	4622      	mov	r2, r4
 8010764:	462b      	mov	r3, r5
 8010766:	f7ef ff4f 	bl	8000608 <__aeabi_dmul>
 801076a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801076e:	4604      	mov	r4, r0
 8010770:	460d      	mov	r5, r1
 8010772:	4630      	mov	r0, r6
 8010774:	4639      	mov	r1, r7
 8010776:	f7ef ff47 	bl	8000608 <__aeabi_dmul>
 801077a:	460b      	mov	r3, r1
 801077c:	4602      	mov	r2, r0
 801077e:	4629      	mov	r1, r5
 8010780:	4620      	mov	r0, r4
 8010782:	f7ef fd89 	bl	8000298 <__aeabi_dsub>
 8010786:	4b2b      	ldr	r3, [pc, #172]	; (8010834 <__kernel_cos+0x17c>)
 8010788:	4598      	cmp	r8, r3
 801078a:	4606      	mov	r6, r0
 801078c:	460f      	mov	r7, r1
 801078e:	dc10      	bgt.n	80107b2 <__kernel_cos+0xfa>
 8010790:	4602      	mov	r2, r0
 8010792:	460b      	mov	r3, r1
 8010794:	4650      	mov	r0, sl
 8010796:	4659      	mov	r1, fp
 8010798:	f7ef fd7e 	bl	8000298 <__aeabi_dsub>
 801079c:	460b      	mov	r3, r1
 801079e:	4926      	ldr	r1, [pc, #152]	; (8010838 <__kernel_cos+0x180>)
 80107a0:	4602      	mov	r2, r0
 80107a2:	2000      	movs	r0, #0
 80107a4:	f7ef fd78 	bl	8000298 <__aeabi_dsub>
 80107a8:	ec41 0b10 	vmov	d0, r0, r1
 80107ac:	b003      	add	sp, #12
 80107ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b2:	4b22      	ldr	r3, [pc, #136]	; (801083c <__kernel_cos+0x184>)
 80107b4:	4920      	ldr	r1, [pc, #128]	; (8010838 <__kernel_cos+0x180>)
 80107b6:	4598      	cmp	r8, r3
 80107b8:	bfcc      	ite	gt
 80107ba:	4d21      	ldrgt	r5, [pc, #132]	; (8010840 <__kernel_cos+0x188>)
 80107bc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80107c0:	2400      	movs	r4, #0
 80107c2:	4622      	mov	r2, r4
 80107c4:	462b      	mov	r3, r5
 80107c6:	2000      	movs	r0, #0
 80107c8:	f7ef fd66 	bl	8000298 <__aeabi_dsub>
 80107cc:	4622      	mov	r2, r4
 80107ce:	4680      	mov	r8, r0
 80107d0:	4689      	mov	r9, r1
 80107d2:	462b      	mov	r3, r5
 80107d4:	4650      	mov	r0, sl
 80107d6:	4659      	mov	r1, fp
 80107d8:	f7ef fd5e 	bl	8000298 <__aeabi_dsub>
 80107dc:	4632      	mov	r2, r6
 80107de:	463b      	mov	r3, r7
 80107e0:	f7ef fd5a 	bl	8000298 <__aeabi_dsub>
 80107e4:	4602      	mov	r2, r0
 80107e6:	460b      	mov	r3, r1
 80107e8:	4640      	mov	r0, r8
 80107ea:	4649      	mov	r1, r9
 80107ec:	e7da      	b.n	80107a4 <__kernel_cos+0xec>
 80107ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010828 <__kernel_cos+0x170>
 80107f2:	e7db      	b.n	80107ac <__kernel_cos+0xf4>
 80107f4:	f3af 8000 	nop.w
 80107f8:	be8838d4 	.word	0xbe8838d4
 80107fc:	bda8fae9 	.word	0xbda8fae9
 8010800:	bdb4b1c4 	.word	0xbdb4b1c4
 8010804:	3e21ee9e 	.word	0x3e21ee9e
 8010808:	809c52ad 	.word	0x809c52ad
 801080c:	3e927e4f 	.word	0x3e927e4f
 8010810:	19cb1590 	.word	0x19cb1590
 8010814:	3efa01a0 	.word	0x3efa01a0
 8010818:	16c15177 	.word	0x16c15177
 801081c:	3f56c16c 	.word	0x3f56c16c
 8010820:	5555554c 	.word	0x5555554c
 8010824:	3fa55555 	.word	0x3fa55555
 8010828:	00000000 	.word	0x00000000
 801082c:	3ff00000 	.word	0x3ff00000
 8010830:	3fe00000 	.word	0x3fe00000
 8010834:	3fd33332 	.word	0x3fd33332
 8010838:	3ff00000 	.word	0x3ff00000
 801083c:	3fe90000 	.word	0x3fe90000
 8010840:	3fd20000 	.word	0x3fd20000
 8010844:	00000000 	.word	0x00000000

08010848 <__kernel_rem_pio2>:
 8010848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801084c:	ed2d 8b02 	vpush	{d8}
 8010850:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8010854:	f112 0f14 	cmn.w	r2, #20
 8010858:	9308      	str	r3, [sp, #32]
 801085a:	9101      	str	r1, [sp, #4]
 801085c:	4bc4      	ldr	r3, [pc, #784]	; (8010b70 <__kernel_rem_pio2+0x328>)
 801085e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8010860:	900b      	str	r0, [sp, #44]	; 0x2c
 8010862:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010866:	9302      	str	r3, [sp, #8]
 8010868:	9b08      	ldr	r3, [sp, #32]
 801086a:	f103 33ff 	add.w	r3, r3, #4294967295
 801086e:	bfa8      	it	ge
 8010870:	1ed4      	subge	r4, r2, #3
 8010872:	9306      	str	r3, [sp, #24]
 8010874:	bfb2      	itee	lt
 8010876:	2400      	movlt	r4, #0
 8010878:	2318      	movge	r3, #24
 801087a:	fb94 f4f3 	sdivge	r4, r4, r3
 801087e:	f06f 0317 	mvn.w	r3, #23
 8010882:	fb04 3303 	mla	r3, r4, r3, r3
 8010886:	eb03 0a02 	add.w	sl, r3, r2
 801088a:	9b02      	ldr	r3, [sp, #8]
 801088c:	9a06      	ldr	r2, [sp, #24]
 801088e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8010b60 <__kernel_rem_pio2+0x318>
 8010892:	eb03 0802 	add.w	r8, r3, r2
 8010896:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010898:	1aa7      	subs	r7, r4, r2
 801089a:	ae22      	add	r6, sp, #136	; 0x88
 801089c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80108a0:	2500      	movs	r5, #0
 80108a2:	4545      	cmp	r5, r8
 80108a4:	dd13      	ble.n	80108ce <__kernel_rem_pio2+0x86>
 80108a6:	9b08      	ldr	r3, [sp, #32]
 80108a8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8010b60 <__kernel_rem_pio2+0x318>
 80108ac:	aa22      	add	r2, sp, #136	; 0x88
 80108ae:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80108b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80108b6:	f04f 0800 	mov.w	r8, #0
 80108ba:	9b02      	ldr	r3, [sp, #8]
 80108bc:	4598      	cmp	r8, r3
 80108be:	dc2f      	bgt.n	8010920 <__kernel_rem_pio2+0xd8>
 80108c0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80108c4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80108c8:	462f      	mov	r7, r5
 80108ca:	2600      	movs	r6, #0
 80108cc:	e01b      	b.n	8010906 <__kernel_rem_pio2+0xbe>
 80108ce:	42ef      	cmn	r7, r5
 80108d0:	d407      	bmi.n	80108e2 <__kernel_rem_pio2+0x9a>
 80108d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80108d6:	f7ef fe2d 	bl	8000534 <__aeabi_i2d>
 80108da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80108de:	3501      	adds	r5, #1
 80108e0:	e7df      	b.n	80108a2 <__kernel_rem_pio2+0x5a>
 80108e2:	ec51 0b18 	vmov	r0, r1, d8
 80108e6:	e7f8      	b.n	80108da <__kernel_rem_pio2+0x92>
 80108e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80108ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80108f0:	f7ef fe8a 	bl	8000608 <__aeabi_dmul>
 80108f4:	4602      	mov	r2, r0
 80108f6:	460b      	mov	r3, r1
 80108f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80108fc:	f7ef fcce 	bl	800029c <__adddf3>
 8010900:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010904:	3601      	adds	r6, #1
 8010906:	9b06      	ldr	r3, [sp, #24]
 8010908:	429e      	cmp	r6, r3
 801090a:	f1a7 0708 	sub.w	r7, r7, #8
 801090e:	ddeb      	ble.n	80108e8 <__kernel_rem_pio2+0xa0>
 8010910:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010914:	f108 0801 	add.w	r8, r8, #1
 8010918:	ecab 7b02 	vstmia	fp!, {d7}
 801091c:	3508      	adds	r5, #8
 801091e:	e7cc      	b.n	80108ba <__kernel_rem_pio2+0x72>
 8010920:	9b02      	ldr	r3, [sp, #8]
 8010922:	aa0e      	add	r2, sp, #56	; 0x38
 8010924:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010928:	930d      	str	r3, [sp, #52]	; 0x34
 801092a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801092c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010930:	9c02      	ldr	r4, [sp, #8]
 8010932:	930c      	str	r3, [sp, #48]	; 0x30
 8010934:	00e3      	lsls	r3, r4, #3
 8010936:	930a      	str	r3, [sp, #40]	; 0x28
 8010938:	ab9a      	add	r3, sp, #616	; 0x268
 801093a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801093e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010942:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8010946:	ab72      	add	r3, sp, #456	; 0x1c8
 8010948:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801094c:	46c3      	mov	fp, r8
 801094e:	46a1      	mov	r9, r4
 8010950:	f1b9 0f00 	cmp.w	r9, #0
 8010954:	f1a5 0508 	sub.w	r5, r5, #8
 8010958:	dc77      	bgt.n	8010a4a <__kernel_rem_pio2+0x202>
 801095a:	ec47 6b10 	vmov	d0, r6, r7
 801095e:	4650      	mov	r0, sl
 8010960:	f000 fe0e 	bl	8011580 <scalbn>
 8010964:	ec57 6b10 	vmov	r6, r7, d0
 8010968:	2200      	movs	r2, #0
 801096a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801096e:	ee10 0a10 	vmov	r0, s0
 8010972:	4639      	mov	r1, r7
 8010974:	f7ef fe48 	bl	8000608 <__aeabi_dmul>
 8010978:	ec41 0b10 	vmov	d0, r0, r1
 801097c:	f000 fd80 	bl	8011480 <floor>
 8010980:	4b7c      	ldr	r3, [pc, #496]	; (8010b74 <__kernel_rem_pio2+0x32c>)
 8010982:	ec51 0b10 	vmov	r0, r1, d0
 8010986:	2200      	movs	r2, #0
 8010988:	f7ef fe3e 	bl	8000608 <__aeabi_dmul>
 801098c:	4602      	mov	r2, r0
 801098e:	460b      	mov	r3, r1
 8010990:	4630      	mov	r0, r6
 8010992:	4639      	mov	r1, r7
 8010994:	f7ef fc80 	bl	8000298 <__aeabi_dsub>
 8010998:	460f      	mov	r7, r1
 801099a:	4606      	mov	r6, r0
 801099c:	f7f0 f8e4 	bl	8000b68 <__aeabi_d2iz>
 80109a0:	9004      	str	r0, [sp, #16]
 80109a2:	f7ef fdc7 	bl	8000534 <__aeabi_i2d>
 80109a6:	4602      	mov	r2, r0
 80109a8:	460b      	mov	r3, r1
 80109aa:	4630      	mov	r0, r6
 80109ac:	4639      	mov	r1, r7
 80109ae:	f7ef fc73 	bl	8000298 <__aeabi_dsub>
 80109b2:	f1ba 0f00 	cmp.w	sl, #0
 80109b6:	4606      	mov	r6, r0
 80109b8:	460f      	mov	r7, r1
 80109ba:	dd6d      	ble.n	8010a98 <__kernel_rem_pio2+0x250>
 80109bc:	1e62      	subs	r2, r4, #1
 80109be:	ab0e      	add	r3, sp, #56	; 0x38
 80109c0:	9d04      	ldr	r5, [sp, #16]
 80109c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80109c6:	f1ca 0118 	rsb	r1, sl, #24
 80109ca:	fa40 f301 	asr.w	r3, r0, r1
 80109ce:	441d      	add	r5, r3
 80109d0:	408b      	lsls	r3, r1
 80109d2:	1ac0      	subs	r0, r0, r3
 80109d4:	ab0e      	add	r3, sp, #56	; 0x38
 80109d6:	9504      	str	r5, [sp, #16]
 80109d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80109dc:	f1ca 0317 	rsb	r3, sl, #23
 80109e0:	fa40 fb03 	asr.w	fp, r0, r3
 80109e4:	f1bb 0f00 	cmp.w	fp, #0
 80109e8:	dd65      	ble.n	8010ab6 <__kernel_rem_pio2+0x26e>
 80109ea:	9b04      	ldr	r3, [sp, #16]
 80109ec:	2200      	movs	r2, #0
 80109ee:	3301      	adds	r3, #1
 80109f0:	9304      	str	r3, [sp, #16]
 80109f2:	4615      	mov	r5, r2
 80109f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80109f8:	4294      	cmp	r4, r2
 80109fa:	f300 809c 	bgt.w	8010b36 <__kernel_rem_pio2+0x2ee>
 80109fe:	f1ba 0f00 	cmp.w	sl, #0
 8010a02:	dd07      	ble.n	8010a14 <__kernel_rem_pio2+0x1cc>
 8010a04:	f1ba 0f01 	cmp.w	sl, #1
 8010a08:	f000 80c0 	beq.w	8010b8c <__kernel_rem_pio2+0x344>
 8010a0c:	f1ba 0f02 	cmp.w	sl, #2
 8010a10:	f000 80c6 	beq.w	8010ba0 <__kernel_rem_pio2+0x358>
 8010a14:	f1bb 0f02 	cmp.w	fp, #2
 8010a18:	d14d      	bne.n	8010ab6 <__kernel_rem_pio2+0x26e>
 8010a1a:	4632      	mov	r2, r6
 8010a1c:	463b      	mov	r3, r7
 8010a1e:	4956      	ldr	r1, [pc, #344]	; (8010b78 <__kernel_rem_pio2+0x330>)
 8010a20:	2000      	movs	r0, #0
 8010a22:	f7ef fc39 	bl	8000298 <__aeabi_dsub>
 8010a26:	4606      	mov	r6, r0
 8010a28:	460f      	mov	r7, r1
 8010a2a:	2d00      	cmp	r5, #0
 8010a2c:	d043      	beq.n	8010ab6 <__kernel_rem_pio2+0x26e>
 8010a2e:	4650      	mov	r0, sl
 8010a30:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8010b68 <__kernel_rem_pio2+0x320>
 8010a34:	f000 fda4 	bl	8011580 <scalbn>
 8010a38:	4630      	mov	r0, r6
 8010a3a:	4639      	mov	r1, r7
 8010a3c:	ec53 2b10 	vmov	r2, r3, d0
 8010a40:	f7ef fc2a 	bl	8000298 <__aeabi_dsub>
 8010a44:	4606      	mov	r6, r0
 8010a46:	460f      	mov	r7, r1
 8010a48:	e035      	b.n	8010ab6 <__kernel_rem_pio2+0x26e>
 8010a4a:	4b4c      	ldr	r3, [pc, #304]	; (8010b7c <__kernel_rem_pio2+0x334>)
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	4630      	mov	r0, r6
 8010a50:	4639      	mov	r1, r7
 8010a52:	f7ef fdd9 	bl	8000608 <__aeabi_dmul>
 8010a56:	f7f0 f887 	bl	8000b68 <__aeabi_d2iz>
 8010a5a:	f7ef fd6b 	bl	8000534 <__aeabi_i2d>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	460b      	mov	r3, r1
 8010a62:	ec43 2b18 	vmov	d8, r2, r3
 8010a66:	4b46      	ldr	r3, [pc, #280]	; (8010b80 <__kernel_rem_pio2+0x338>)
 8010a68:	2200      	movs	r2, #0
 8010a6a:	f7ef fdcd 	bl	8000608 <__aeabi_dmul>
 8010a6e:	4602      	mov	r2, r0
 8010a70:	460b      	mov	r3, r1
 8010a72:	4630      	mov	r0, r6
 8010a74:	4639      	mov	r1, r7
 8010a76:	f7ef fc0f 	bl	8000298 <__aeabi_dsub>
 8010a7a:	f7f0 f875 	bl	8000b68 <__aeabi_d2iz>
 8010a7e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010a82:	f84b 0b04 	str.w	r0, [fp], #4
 8010a86:	ec51 0b18 	vmov	r0, r1, d8
 8010a8a:	f7ef fc07 	bl	800029c <__adddf3>
 8010a8e:	f109 39ff 	add.w	r9, r9, #4294967295
 8010a92:	4606      	mov	r6, r0
 8010a94:	460f      	mov	r7, r1
 8010a96:	e75b      	b.n	8010950 <__kernel_rem_pio2+0x108>
 8010a98:	d106      	bne.n	8010aa8 <__kernel_rem_pio2+0x260>
 8010a9a:	1e63      	subs	r3, r4, #1
 8010a9c:	aa0e      	add	r2, sp, #56	; 0x38
 8010a9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010aa2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8010aa6:	e79d      	b.n	80109e4 <__kernel_rem_pio2+0x19c>
 8010aa8:	4b36      	ldr	r3, [pc, #216]	; (8010b84 <__kernel_rem_pio2+0x33c>)
 8010aaa:	2200      	movs	r2, #0
 8010aac:	f7f0 f832 	bl	8000b14 <__aeabi_dcmpge>
 8010ab0:	2800      	cmp	r0, #0
 8010ab2:	d13d      	bne.n	8010b30 <__kernel_rem_pio2+0x2e8>
 8010ab4:	4683      	mov	fp, r0
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	2300      	movs	r3, #0
 8010aba:	4630      	mov	r0, r6
 8010abc:	4639      	mov	r1, r7
 8010abe:	f7f0 f80b 	bl	8000ad8 <__aeabi_dcmpeq>
 8010ac2:	2800      	cmp	r0, #0
 8010ac4:	f000 80c0 	beq.w	8010c48 <__kernel_rem_pio2+0x400>
 8010ac8:	1e65      	subs	r5, r4, #1
 8010aca:	462b      	mov	r3, r5
 8010acc:	2200      	movs	r2, #0
 8010ace:	9902      	ldr	r1, [sp, #8]
 8010ad0:	428b      	cmp	r3, r1
 8010ad2:	da6c      	bge.n	8010bae <__kernel_rem_pio2+0x366>
 8010ad4:	2a00      	cmp	r2, #0
 8010ad6:	f000 8089 	beq.w	8010bec <__kernel_rem_pio2+0x3a4>
 8010ada:	ab0e      	add	r3, sp, #56	; 0x38
 8010adc:	f1aa 0a18 	sub.w	sl, sl, #24
 8010ae0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	f000 80ad 	beq.w	8010c44 <__kernel_rem_pio2+0x3fc>
 8010aea:	4650      	mov	r0, sl
 8010aec:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8010b68 <__kernel_rem_pio2+0x320>
 8010af0:	f000 fd46 	bl	8011580 <scalbn>
 8010af4:	ab9a      	add	r3, sp, #616	; 0x268
 8010af6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010afa:	ec57 6b10 	vmov	r6, r7, d0
 8010afe:	00ec      	lsls	r4, r5, #3
 8010b00:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8010b04:	46aa      	mov	sl, r5
 8010b06:	f1ba 0f00 	cmp.w	sl, #0
 8010b0a:	f280 80d6 	bge.w	8010cba <__kernel_rem_pio2+0x472>
 8010b0e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8010b60 <__kernel_rem_pio2+0x318>
 8010b12:	462e      	mov	r6, r5
 8010b14:	2e00      	cmp	r6, #0
 8010b16:	f2c0 8104 	blt.w	8010d22 <__kernel_rem_pio2+0x4da>
 8010b1a:	ab72      	add	r3, sp, #456	; 0x1c8
 8010b1c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8010b20:	f8df a064 	ldr.w	sl, [pc, #100]	; 8010b88 <__kernel_rem_pio2+0x340>
 8010b24:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8010b28:	f04f 0800 	mov.w	r8, #0
 8010b2c:	1baf      	subs	r7, r5, r6
 8010b2e:	e0ea      	b.n	8010d06 <__kernel_rem_pio2+0x4be>
 8010b30:	f04f 0b02 	mov.w	fp, #2
 8010b34:	e759      	b.n	80109ea <__kernel_rem_pio2+0x1a2>
 8010b36:	f8d8 3000 	ldr.w	r3, [r8]
 8010b3a:	b955      	cbnz	r5, 8010b52 <__kernel_rem_pio2+0x30a>
 8010b3c:	b123      	cbz	r3, 8010b48 <__kernel_rem_pio2+0x300>
 8010b3e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010b42:	f8c8 3000 	str.w	r3, [r8]
 8010b46:	2301      	movs	r3, #1
 8010b48:	3201      	adds	r2, #1
 8010b4a:	f108 0804 	add.w	r8, r8, #4
 8010b4e:	461d      	mov	r5, r3
 8010b50:	e752      	b.n	80109f8 <__kernel_rem_pio2+0x1b0>
 8010b52:	1acb      	subs	r3, r1, r3
 8010b54:	f8c8 3000 	str.w	r3, [r8]
 8010b58:	462b      	mov	r3, r5
 8010b5a:	e7f5      	b.n	8010b48 <__kernel_rem_pio2+0x300>
 8010b5c:	f3af 8000 	nop.w
	...
 8010b6c:	3ff00000 	.word	0x3ff00000
 8010b70:	08011da0 	.word	0x08011da0
 8010b74:	40200000 	.word	0x40200000
 8010b78:	3ff00000 	.word	0x3ff00000
 8010b7c:	3e700000 	.word	0x3e700000
 8010b80:	41700000 	.word	0x41700000
 8010b84:	3fe00000 	.word	0x3fe00000
 8010b88:	08011d60 	.word	0x08011d60
 8010b8c:	1e62      	subs	r2, r4, #1
 8010b8e:	ab0e      	add	r3, sp, #56	; 0x38
 8010b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b94:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010b98:	a90e      	add	r1, sp, #56	; 0x38
 8010b9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010b9e:	e739      	b.n	8010a14 <__kernel_rem_pio2+0x1cc>
 8010ba0:	1e62      	subs	r2, r4, #1
 8010ba2:	ab0e      	add	r3, sp, #56	; 0x38
 8010ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ba8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010bac:	e7f4      	b.n	8010b98 <__kernel_rem_pio2+0x350>
 8010bae:	a90e      	add	r1, sp, #56	; 0x38
 8010bb0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010bb4:	3b01      	subs	r3, #1
 8010bb6:	430a      	orrs	r2, r1
 8010bb8:	e789      	b.n	8010ace <__kernel_rem_pio2+0x286>
 8010bba:	3301      	adds	r3, #1
 8010bbc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010bc0:	2900      	cmp	r1, #0
 8010bc2:	d0fa      	beq.n	8010bba <__kernel_rem_pio2+0x372>
 8010bc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010bc6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8010bca:	446a      	add	r2, sp
 8010bcc:	3a98      	subs	r2, #152	; 0x98
 8010bce:	920a      	str	r2, [sp, #40]	; 0x28
 8010bd0:	9a08      	ldr	r2, [sp, #32]
 8010bd2:	18e3      	adds	r3, r4, r3
 8010bd4:	18a5      	adds	r5, r4, r2
 8010bd6:	aa22      	add	r2, sp, #136	; 0x88
 8010bd8:	f104 0801 	add.w	r8, r4, #1
 8010bdc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8010be0:	9304      	str	r3, [sp, #16]
 8010be2:	9b04      	ldr	r3, [sp, #16]
 8010be4:	4543      	cmp	r3, r8
 8010be6:	da04      	bge.n	8010bf2 <__kernel_rem_pio2+0x3aa>
 8010be8:	461c      	mov	r4, r3
 8010bea:	e6a3      	b.n	8010934 <__kernel_rem_pio2+0xec>
 8010bec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010bee:	2301      	movs	r3, #1
 8010bf0:	e7e4      	b.n	8010bbc <__kernel_rem_pio2+0x374>
 8010bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010bf4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010bf8:	f7ef fc9c 	bl	8000534 <__aeabi_i2d>
 8010bfc:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c02:	46ab      	mov	fp, r5
 8010c04:	461c      	mov	r4, r3
 8010c06:	f04f 0900 	mov.w	r9, #0
 8010c0a:	2600      	movs	r6, #0
 8010c0c:	2700      	movs	r7, #0
 8010c0e:	9b06      	ldr	r3, [sp, #24]
 8010c10:	4599      	cmp	r9, r3
 8010c12:	dd06      	ble.n	8010c22 <__kernel_rem_pio2+0x3da>
 8010c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c16:	e8e3 6702 	strd	r6, r7, [r3], #8
 8010c1a:	f108 0801 	add.w	r8, r8, #1
 8010c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8010c20:	e7df      	b.n	8010be2 <__kernel_rem_pio2+0x39a>
 8010c22:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010c26:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010c2a:	f7ef fced 	bl	8000608 <__aeabi_dmul>
 8010c2e:	4602      	mov	r2, r0
 8010c30:	460b      	mov	r3, r1
 8010c32:	4630      	mov	r0, r6
 8010c34:	4639      	mov	r1, r7
 8010c36:	f7ef fb31 	bl	800029c <__adddf3>
 8010c3a:	f109 0901 	add.w	r9, r9, #1
 8010c3e:	4606      	mov	r6, r0
 8010c40:	460f      	mov	r7, r1
 8010c42:	e7e4      	b.n	8010c0e <__kernel_rem_pio2+0x3c6>
 8010c44:	3d01      	subs	r5, #1
 8010c46:	e748      	b.n	8010ada <__kernel_rem_pio2+0x292>
 8010c48:	ec47 6b10 	vmov	d0, r6, r7
 8010c4c:	f1ca 0000 	rsb	r0, sl, #0
 8010c50:	f000 fc96 	bl	8011580 <scalbn>
 8010c54:	ec57 6b10 	vmov	r6, r7, d0
 8010c58:	4ba0      	ldr	r3, [pc, #640]	; (8010edc <__kernel_rem_pio2+0x694>)
 8010c5a:	ee10 0a10 	vmov	r0, s0
 8010c5e:	2200      	movs	r2, #0
 8010c60:	4639      	mov	r1, r7
 8010c62:	f7ef ff57 	bl	8000b14 <__aeabi_dcmpge>
 8010c66:	b1f8      	cbz	r0, 8010ca8 <__kernel_rem_pio2+0x460>
 8010c68:	4b9d      	ldr	r3, [pc, #628]	; (8010ee0 <__kernel_rem_pio2+0x698>)
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	4630      	mov	r0, r6
 8010c6e:	4639      	mov	r1, r7
 8010c70:	f7ef fcca 	bl	8000608 <__aeabi_dmul>
 8010c74:	f7ef ff78 	bl	8000b68 <__aeabi_d2iz>
 8010c78:	4680      	mov	r8, r0
 8010c7a:	f7ef fc5b 	bl	8000534 <__aeabi_i2d>
 8010c7e:	4b97      	ldr	r3, [pc, #604]	; (8010edc <__kernel_rem_pio2+0x694>)
 8010c80:	2200      	movs	r2, #0
 8010c82:	f7ef fcc1 	bl	8000608 <__aeabi_dmul>
 8010c86:	460b      	mov	r3, r1
 8010c88:	4602      	mov	r2, r0
 8010c8a:	4639      	mov	r1, r7
 8010c8c:	4630      	mov	r0, r6
 8010c8e:	f7ef fb03 	bl	8000298 <__aeabi_dsub>
 8010c92:	f7ef ff69 	bl	8000b68 <__aeabi_d2iz>
 8010c96:	1c65      	adds	r5, r4, #1
 8010c98:	ab0e      	add	r3, sp, #56	; 0x38
 8010c9a:	f10a 0a18 	add.w	sl, sl, #24
 8010c9e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010ca2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010ca6:	e720      	b.n	8010aea <__kernel_rem_pio2+0x2a2>
 8010ca8:	4630      	mov	r0, r6
 8010caa:	4639      	mov	r1, r7
 8010cac:	f7ef ff5c 	bl	8000b68 <__aeabi_d2iz>
 8010cb0:	ab0e      	add	r3, sp, #56	; 0x38
 8010cb2:	4625      	mov	r5, r4
 8010cb4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010cb8:	e717      	b.n	8010aea <__kernel_rem_pio2+0x2a2>
 8010cba:	ab0e      	add	r3, sp, #56	; 0x38
 8010cbc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8010cc0:	f7ef fc38 	bl	8000534 <__aeabi_i2d>
 8010cc4:	4632      	mov	r2, r6
 8010cc6:	463b      	mov	r3, r7
 8010cc8:	f7ef fc9e 	bl	8000608 <__aeabi_dmul>
 8010ccc:	4b84      	ldr	r3, [pc, #528]	; (8010ee0 <__kernel_rem_pio2+0x698>)
 8010cce:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	4630      	mov	r0, r6
 8010cd6:	4639      	mov	r1, r7
 8010cd8:	f7ef fc96 	bl	8000608 <__aeabi_dmul>
 8010cdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010ce0:	4606      	mov	r6, r0
 8010ce2:	460f      	mov	r7, r1
 8010ce4:	e70f      	b.n	8010b06 <__kernel_rem_pio2+0x2be>
 8010ce6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8010cea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8010cee:	f7ef fc8b 	bl	8000608 <__aeabi_dmul>
 8010cf2:	4602      	mov	r2, r0
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010cfa:	f7ef facf 	bl	800029c <__adddf3>
 8010cfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010d02:	f108 0801 	add.w	r8, r8, #1
 8010d06:	9b02      	ldr	r3, [sp, #8]
 8010d08:	4598      	cmp	r8, r3
 8010d0a:	dc01      	bgt.n	8010d10 <__kernel_rem_pio2+0x4c8>
 8010d0c:	45b8      	cmp	r8, r7
 8010d0e:	ddea      	ble.n	8010ce6 <__kernel_rem_pio2+0x49e>
 8010d10:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010d14:	ab4a      	add	r3, sp, #296	; 0x128
 8010d16:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010d1a:	ed87 7b00 	vstr	d7, [r7]
 8010d1e:	3e01      	subs	r6, #1
 8010d20:	e6f8      	b.n	8010b14 <__kernel_rem_pio2+0x2cc>
 8010d22:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010d24:	2b02      	cmp	r3, #2
 8010d26:	dc0b      	bgt.n	8010d40 <__kernel_rem_pio2+0x4f8>
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	dc35      	bgt.n	8010d98 <__kernel_rem_pio2+0x550>
 8010d2c:	d059      	beq.n	8010de2 <__kernel_rem_pio2+0x59a>
 8010d2e:	9b04      	ldr	r3, [sp, #16]
 8010d30:	f003 0007 	and.w	r0, r3, #7
 8010d34:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8010d38:	ecbd 8b02 	vpop	{d8}
 8010d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d40:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010d42:	2b03      	cmp	r3, #3
 8010d44:	d1f3      	bne.n	8010d2e <__kernel_rem_pio2+0x4e6>
 8010d46:	ab4a      	add	r3, sp, #296	; 0x128
 8010d48:	4423      	add	r3, r4
 8010d4a:	9306      	str	r3, [sp, #24]
 8010d4c:	461c      	mov	r4, r3
 8010d4e:	469a      	mov	sl, r3
 8010d50:	9502      	str	r5, [sp, #8]
 8010d52:	9b02      	ldr	r3, [sp, #8]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	f1aa 0a08 	sub.w	sl, sl, #8
 8010d5a:	dc6b      	bgt.n	8010e34 <__kernel_rem_pio2+0x5ec>
 8010d5c:	46aa      	mov	sl, r5
 8010d5e:	f1ba 0f01 	cmp.w	sl, #1
 8010d62:	f1a4 0408 	sub.w	r4, r4, #8
 8010d66:	f300 8085 	bgt.w	8010e74 <__kernel_rem_pio2+0x62c>
 8010d6a:	9c06      	ldr	r4, [sp, #24]
 8010d6c:	2000      	movs	r0, #0
 8010d6e:	3408      	adds	r4, #8
 8010d70:	2100      	movs	r1, #0
 8010d72:	2d01      	cmp	r5, #1
 8010d74:	f300 809d 	bgt.w	8010eb2 <__kernel_rem_pio2+0x66a>
 8010d78:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010d7c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8010d80:	f1bb 0f00 	cmp.w	fp, #0
 8010d84:	f040 809b 	bne.w	8010ebe <__kernel_rem_pio2+0x676>
 8010d88:	9b01      	ldr	r3, [sp, #4]
 8010d8a:	e9c3 5600 	strd	r5, r6, [r3]
 8010d8e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010d92:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010d96:	e7ca      	b.n	8010d2e <__kernel_rem_pio2+0x4e6>
 8010d98:	3408      	adds	r4, #8
 8010d9a:	ab4a      	add	r3, sp, #296	; 0x128
 8010d9c:	441c      	add	r4, r3
 8010d9e:	462e      	mov	r6, r5
 8010da0:	2000      	movs	r0, #0
 8010da2:	2100      	movs	r1, #0
 8010da4:	2e00      	cmp	r6, #0
 8010da6:	da36      	bge.n	8010e16 <__kernel_rem_pio2+0x5ce>
 8010da8:	f1bb 0f00 	cmp.w	fp, #0
 8010dac:	d039      	beq.n	8010e22 <__kernel_rem_pio2+0x5da>
 8010dae:	4602      	mov	r2, r0
 8010db0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010db4:	9c01      	ldr	r4, [sp, #4]
 8010db6:	e9c4 2300 	strd	r2, r3, [r4]
 8010dba:	4602      	mov	r2, r0
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8010dc2:	f7ef fa69 	bl	8000298 <__aeabi_dsub>
 8010dc6:	ae4c      	add	r6, sp, #304	; 0x130
 8010dc8:	2401      	movs	r4, #1
 8010dca:	42a5      	cmp	r5, r4
 8010dcc:	da2c      	bge.n	8010e28 <__kernel_rem_pio2+0x5e0>
 8010dce:	f1bb 0f00 	cmp.w	fp, #0
 8010dd2:	d002      	beq.n	8010dda <__kernel_rem_pio2+0x592>
 8010dd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010dd8:	4619      	mov	r1, r3
 8010dda:	9b01      	ldr	r3, [sp, #4]
 8010ddc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010de0:	e7a5      	b.n	8010d2e <__kernel_rem_pio2+0x4e6>
 8010de2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8010de6:	eb0d 0403 	add.w	r4, sp, r3
 8010dea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010dee:	2000      	movs	r0, #0
 8010df0:	2100      	movs	r1, #0
 8010df2:	2d00      	cmp	r5, #0
 8010df4:	da09      	bge.n	8010e0a <__kernel_rem_pio2+0x5c2>
 8010df6:	f1bb 0f00 	cmp.w	fp, #0
 8010dfa:	d002      	beq.n	8010e02 <__kernel_rem_pio2+0x5ba>
 8010dfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e00:	4619      	mov	r1, r3
 8010e02:	9b01      	ldr	r3, [sp, #4]
 8010e04:	e9c3 0100 	strd	r0, r1, [r3]
 8010e08:	e791      	b.n	8010d2e <__kernel_rem_pio2+0x4e6>
 8010e0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010e0e:	f7ef fa45 	bl	800029c <__adddf3>
 8010e12:	3d01      	subs	r5, #1
 8010e14:	e7ed      	b.n	8010df2 <__kernel_rem_pio2+0x5aa>
 8010e16:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010e1a:	f7ef fa3f 	bl	800029c <__adddf3>
 8010e1e:	3e01      	subs	r6, #1
 8010e20:	e7c0      	b.n	8010da4 <__kernel_rem_pio2+0x55c>
 8010e22:	4602      	mov	r2, r0
 8010e24:	460b      	mov	r3, r1
 8010e26:	e7c5      	b.n	8010db4 <__kernel_rem_pio2+0x56c>
 8010e28:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010e2c:	f7ef fa36 	bl	800029c <__adddf3>
 8010e30:	3401      	adds	r4, #1
 8010e32:	e7ca      	b.n	8010dca <__kernel_rem_pio2+0x582>
 8010e34:	e9da 8900 	ldrd	r8, r9, [sl]
 8010e38:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010e3c:	9b02      	ldr	r3, [sp, #8]
 8010e3e:	3b01      	subs	r3, #1
 8010e40:	9302      	str	r3, [sp, #8]
 8010e42:	4632      	mov	r2, r6
 8010e44:	463b      	mov	r3, r7
 8010e46:	4640      	mov	r0, r8
 8010e48:	4649      	mov	r1, r9
 8010e4a:	f7ef fa27 	bl	800029c <__adddf3>
 8010e4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010e52:	4602      	mov	r2, r0
 8010e54:	460b      	mov	r3, r1
 8010e56:	4640      	mov	r0, r8
 8010e58:	4649      	mov	r1, r9
 8010e5a:	f7ef fa1d 	bl	8000298 <__aeabi_dsub>
 8010e5e:	4632      	mov	r2, r6
 8010e60:	463b      	mov	r3, r7
 8010e62:	f7ef fa1b 	bl	800029c <__adddf3>
 8010e66:	ed9d 7b08 	vldr	d7, [sp, #32]
 8010e6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010e6e:	ed8a 7b00 	vstr	d7, [sl]
 8010e72:	e76e      	b.n	8010d52 <__kernel_rem_pio2+0x50a>
 8010e74:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010e78:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8010e7c:	4640      	mov	r0, r8
 8010e7e:	4632      	mov	r2, r6
 8010e80:	463b      	mov	r3, r7
 8010e82:	4649      	mov	r1, r9
 8010e84:	f7ef fa0a 	bl	800029c <__adddf3>
 8010e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e8c:	4602      	mov	r2, r0
 8010e8e:	460b      	mov	r3, r1
 8010e90:	4640      	mov	r0, r8
 8010e92:	4649      	mov	r1, r9
 8010e94:	f7ef fa00 	bl	8000298 <__aeabi_dsub>
 8010e98:	4632      	mov	r2, r6
 8010e9a:	463b      	mov	r3, r7
 8010e9c:	f7ef f9fe 	bl	800029c <__adddf3>
 8010ea0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ea4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010ea8:	ed84 7b00 	vstr	d7, [r4]
 8010eac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010eb0:	e755      	b.n	8010d5e <__kernel_rem_pio2+0x516>
 8010eb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010eb6:	f7ef f9f1 	bl	800029c <__adddf3>
 8010eba:	3d01      	subs	r5, #1
 8010ebc:	e759      	b.n	8010d72 <__kernel_rem_pio2+0x52a>
 8010ebe:	9b01      	ldr	r3, [sp, #4]
 8010ec0:	9a01      	ldr	r2, [sp, #4]
 8010ec2:	601d      	str	r5, [r3, #0]
 8010ec4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8010ec8:	605c      	str	r4, [r3, #4]
 8010eca:	609f      	str	r7, [r3, #8]
 8010ecc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8010ed0:	60d3      	str	r3, [r2, #12]
 8010ed2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ed6:	6110      	str	r0, [r2, #16]
 8010ed8:	6153      	str	r3, [r2, #20]
 8010eda:	e728      	b.n	8010d2e <__kernel_rem_pio2+0x4e6>
 8010edc:	41700000 	.word	0x41700000
 8010ee0:	3e700000 	.word	0x3e700000
 8010ee4:	00000000 	.word	0x00000000

08010ee8 <__kernel_sin>:
 8010ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eec:	ed2d 8b04 	vpush	{d8-d9}
 8010ef0:	eeb0 8a41 	vmov.f32	s16, s2
 8010ef4:	eef0 8a61 	vmov.f32	s17, s3
 8010ef8:	ec55 4b10 	vmov	r4, r5, d0
 8010efc:	b083      	sub	sp, #12
 8010efe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010f02:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010f06:	9001      	str	r0, [sp, #4]
 8010f08:	da06      	bge.n	8010f18 <__kernel_sin+0x30>
 8010f0a:	ee10 0a10 	vmov	r0, s0
 8010f0e:	4629      	mov	r1, r5
 8010f10:	f7ef fe2a 	bl	8000b68 <__aeabi_d2iz>
 8010f14:	2800      	cmp	r0, #0
 8010f16:	d051      	beq.n	8010fbc <__kernel_sin+0xd4>
 8010f18:	4622      	mov	r2, r4
 8010f1a:	462b      	mov	r3, r5
 8010f1c:	4620      	mov	r0, r4
 8010f1e:	4629      	mov	r1, r5
 8010f20:	f7ef fb72 	bl	8000608 <__aeabi_dmul>
 8010f24:	4682      	mov	sl, r0
 8010f26:	468b      	mov	fp, r1
 8010f28:	4602      	mov	r2, r0
 8010f2a:	460b      	mov	r3, r1
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	4629      	mov	r1, r5
 8010f30:	f7ef fb6a 	bl	8000608 <__aeabi_dmul>
 8010f34:	a341      	add	r3, pc, #260	; (adr r3, 801103c <__kernel_sin+0x154>)
 8010f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f3a:	4680      	mov	r8, r0
 8010f3c:	4689      	mov	r9, r1
 8010f3e:	4650      	mov	r0, sl
 8010f40:	4659      	mov	r1, fp
 8010f42:	f7ef fb61 	bl	8000608 <__aeabi_dmul>
 8010f46:	a33f      	add	r3, pc, #252	; (adr r3, 8011044 <__kernel_sin+0x15c>)
 8010f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4c:	f7ef f9a4 	bl	8000298 <__aeabi_dsub>
 8010f50:	4652      	mov	r2, sl
 8010f52:	465b      	mov	r3, fp
 8010f54:	f7ef fb58 	bl	8000608 <__aeabi_dmul>
 8010f58:	a33c      	add	r3, pc, #240	; (adr r3, 801104c <__kernel_sin+0x164>)
 8010f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5e:	f7ef f99d 	bl	800029c <__adddf3>
 8010f62:	4652      	mov	r2, sl
 8010f64:	465b      	mov	r3, fp
 8010f66:	f7ef fb4f 	bl	8000608 <__aeabi_dmul>
 8010f6a:	a33a      	add	r3, pc, #232	; (adr r3, 8011054 <__kernel_sin+0x16c>)
 8010f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f70:	f7ef f992 	bl	8000298 <__aeabi_dsub>
 8010f74:	4652      	mov	r2, sl
 8010f76:	465b      	mov	r3, fp
 8010f78:	f7ef fb46 	bl	8000608 <__aeabi_dmul>
 8010f7c:	a337      	add	r3, pc, #220	; (adr r3, 801105c <__kernel_sin+0x174>)
 8010f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f82:	f7ef f98b 	bl	800029c <__adddf3>
 8010f86:	9b01      	ldr	r3, [sp, #4]
 8010f88:	4606      	mov	r6, r0
 8010f8a:	460f      	mov	r7, r1
 8010f8c:	b9eb      	cbnz	r3, 8010fca <__kernel_sin+0xe2>
 8010f8e:	4602      	mov	r2, r0
 8010f90:	460b      	mov	r3, r1
 8010f92:	4650      	mov	r0, sl
 8010f94:	4659      	mov	r1, fp
 8010f96:	f7ef fb37 	bl	8000608 <__aeabi_dmul>
 8010f9a:	a325      	add	r3, pc, #148	; (adr r3, 8011030 <__kernel_sin+0x148>)
 8010f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa0:	f7ef f97a 	bl	8000298 <__aeabi_dsub>
 8010fa4:	4642      	mov	r2, r8
 8010fa6:	464b      	mov	r3, r9
 8010fa8:	f7ef fb2e 	bl	8000608 <__aeabi_dmul>
 8010fac:	4602      	mov	r2, r0
 8010fae:	460b      	mov	r3, r1
 8010fb0:	4620      	mov	r0, r4
 8010fb2:	4629      	mov	r1, r5
 8010fb4:	f7ef f972 	bl	800029c <__adddf3>
 8010fb8:	4604      	mov	r4, r0
 8010fba:	460d      	mov	r5, r1
 8010fbc:	ec45 4b10 	vmov	d0, r4, r5
 8010fc0:	b003      	add	sp, #12
 8010fc2:	ecbd 8b04 	vpop	{d8-d9}
 8010fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fca:	4b1b      	ldr	r3, [pc, #108]	; (8011038 <__kernel_sin+0x150>)
 8010fcc:	ec51 0b18 	vmov	r0, r1, d8
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f7ef fb19 	bl	8000608 <__aeabi_dmul>
 8010fd6:	4632      	mov	r2, r6
 8010fd8:	ec41 0b19 	vmov	d9, r0, r1
 8010fdc:	463b      	mov	r3, r7
 8010fde:	4640      	mov	r0, r8
 8010fe0:	4649      	mov	r1, r9
 8010fe2:	f7ef fb11 	bl	8000608 <__aeabi_dmul>
 8010fe6:	4602      	mov	r2, r0
 8010fe8:	460b      	mov	r3, r1
 8010fea:	ec51 0b19 	vmov	r0, r1, d9
 8010fee:	f7ef f953 	bl	8000298 <__aeabi_dsub>
 8010ff2:	4652      	mov	r2, sl
 8010ff4:	465b      	mov	r3, fp
 8010ff6:	f7ef fb07 	bl	8000608 <__aeabi_dmul>
 8010ffa:	ec53 2b18 	vmov	r2, r3, d8
 8010ffe:	f7ef f94b 	bl	8000298 <__aeabi_dsub>
 8011002:	a30b      	add	r3, pc, #44	; (adr r3, 8011030 <__kernel_sin+0x148>)
 8011004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011008:	4606      	mov	r6, r0
 801100a:	460f      	mov	r7, r1
 801100c:	4640      	mov	r0, r8
 801100e:	4649      	mov	r1, r9
 8011010:	f7ef fafa 	bl	8000608 <__aeabi_dmul>
 8011014:	4602      	mov	r2, r0
 8011016:	460b      	mov	r3, r1
 8011018:	4630      	mov	r0, r6
 801101a:	4639      	mov	r1, r7
 801101c:	f7ef f93e 	bl	800029c <__adddf3>
 8011020:	4602      	mov	r2, r0
 8011022:	460b      	mov	r3, r1
 8011024:	4620      	mov	r0, r4
 8011026:	4629      	mov	r1, r5
 8011028:	f7ef f936 	bl	8000298 <__aeabi_dsub>
 801102c:	e7c4      	b.n	8010fb8 <__kernel_sin+0xd0>
 801102e:	bf00      	nop
 8011030:	55555549 	.word	0x55555549
 8011034:	3fc55555 	.word	0x3fc55555
 8011038:	3fe00000 	.word	0x3fe00000
 801103c:	5acfd57c 	.word	0x5acfd57c
 8011040:	3de5d93a 	.word	0x3de5d93a
 8011044:	8a2b9ceb 	.word	0x8a2b9ceb
 8011048:	3e5ae5e6 	.word	0x3e5ae5e6
 801104c:	57b1fe7d 	.word	0x57b1fe7d
 8011050:	3ec71de3 	.word	0x3ec71de3
 8011054:	19c161d5 	.word	0x19c161d5
 8011058:	3f2a01a0 	.word	0x3f2a01a0
 801105c:	1110f8a6 	.word	0x1110f8a6
 8011060:	3f811111 	.word	0x3f811111
 8011064:	00000000 	.word	0x00000000

08011068 <__kernel_tan>:
 8011068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801106c:	ed2d 8b06 	vpush	{d8-d10}
 8011070:	ec5b ab10 	vmov	sl, fp, d0
 8011074:	4be0      	ldr	r3, [pc, #896]	; (80113f8 <__kernel_tan+0x390>)
 8011076:	b083      	sub	sp, #12
 8011078:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801107c:	429f      	cmp	r7, r3
 801107e:	ec59 8b11 	vmov	r8, r9, d1
 8011082:	4606      	mov	r6, r0
 8011084:	f8cd b000 	str.w	fp, [sp]
 8011088:	dc61      	bgt.n	801114e <__kernel_tan+0xe6>
 801108a:	ee10 0a10 	vmov	r0, s0
 801108e:	4659      	mov	r1, fp
 8011090:	f7ef fd6a 	bl	8000b68 <__aeabi_d2iz>
 8011094:	4605      	mov	r5, r0
 8011096:	2800      	cmp	r0, #0
 8011098:	f040 8083 	bne.w	80111a2 <__kernel_tan+0x13a>
 801109c:	1c73      	adds	r3, r6, #1
 801109e:	4652      	mov	r2, sl
 80110a0:	4313      	orrs	r3, r2
 80110a2:	433b      	orrs	r3, r7
 80110a4:	d112      	bne.n	80110cc <__kernel_tan+0x64>
 80110a6:	ec4b ab10 	vmov	d0, sl, fp
 80110aa:	f7fe fee1 	bl	800fe70 <fabs>
 80110ae:	49d3      	ldr	r1, [pc, #844]	; (80113fc <__kernel_tan+0x394>)
 80110b0:	ec53 2b10 	vmov	r2, r3, d0
 80110b4:	2000      	movs	r0, #0
 80110b6:	f7ef fbd1 	bl	800085c <__aeabi_ddiv>
 80110ba:	4682      	mov	sl, r0
 80110bc:	468b      	mov	fp, r1
 80110be:	ec4b ab10 	vmov	d0, sl, fp
 80110c2:	b003      	add	sp, #12
 80110c4:	ecbd 8b06 	vpop	{d8-d10}
 80110c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110cc:	2e01      	cmp	r6, #1
 80110ce:	d0f6      	beq.n	80110be <__kernel_tan+0x56>
 80110d0:	4642      	mov	r2, r8
 80110d2:	464b      	mov	r3, r9
 80110d4:	4650      	mov	r0, sl
 80110d6:	4659      	mov	r1, fp
 80110d8:	f7ef f8e0 	bl	800029c <__adddf3>
 80110dc:	4602      	mov	r2, r0
 80110de:	460b      	mov	r3, r1
 80110e0:	460f      	mov	r7, r1
 80110e2:	2000      	movs	r0, #0
 80110e4:	49c6      	ldr	r1, [pc, #792]	; (8011400 <__kernel_tan+0x398>)
 80110e6:	f7ef fbb9 	bl	800085c <__aeabi_ddiv>
 80110ea:	e9cd 0100 	strd	r0, r1, [sp]
 80110ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110f2:	462e      	mov	r6, r5
 80110f4:	4652      	mov	r2, sl
 80110f6:	462c      	mov	r4, r5
 80110f8:	4630      	mov	r0, r6
 80110fa:	461d      	mov	r5, r3
 80110fc:	4639      	mov	r1, r7
 80110fe:	465b      	mov	r3, fp
 8011100:	f7ef f8ca 	bl	8000298 <__aeabi_dsub>
 8011104:	4602      	mov	r2, r0
 8011106:	460b      	mov	r3, r1
 8011108:	4640      	mov	r0, r8
 801110a:	4649      	mov	r1, r9
 801110c:	f7ef f8c4 	bl	8000298 <__aeabi_dsub>
 8011110:	4632      	mov	r2, r6
 8011112:	462b      	mov	r3, r5
 8011114:	f7ef fa78 	bl	8000608 <__aeabi_dmul>
 8011118:	4632      	mov	r2, r6
 801111a:	4680      	mov	r8, r0
 801111c:	4689      	mov	r9, r1
 801111e:	462b      	mov	r3, r5
 8011120:	4630      	mov	r0, r6
 8011122:	4639      	mov	r1, r7
 8011124:	f7ef fa70 	bl	8000608 <__aeabi_dmul>
 8011128:	4bb4      	ldr	r3, [pc, #720]	; (80113fc <__kernel_tan+0x394>)
 801112a:	2200      	movs	r2, #0
 801112c:	f7ef f8b6 	bl	800029c <__adddf3>
 8011130:	4602      	mov	r2, r0
 8011132:	460b      	mov	r3, r1
 8011134:	4640      	mov	r0, r8
 8011136:	4649      	mov	r1, r9
 8011138:	f7ef f8b0 	bl	800029c <__adddf3>
 801113c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011140:	f7ef fa62 	bl	8000608 <__aeabi_dmul>
 8011144:	4622      	mov	r2, r4
 8011146:	462b      	mov	r3, r5
 8011148:	f7ef f8a8 	bl	800029c <__adddf3>
 801114c:	e7b5      	b.n	80110ba <__kernel_tan+0x52>
 801114e:	4bad      	ldr	r3, [pc, #692]	; (8011404 <__kernel_tan+0x39c>)
 8011150:	429f      	cmp	r7, r3
 8011152:	dd26      	ble.n	80111a2 <__kernel_tan+0x13a>
 8011154:	9b00      	ldr	r3, [sp, #0]
 8011156:	2b00      	cmp	r3, #0
 8011158:	da09      	bge.n	801116e <__kernel_tan+0x106>
 801115a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801115e:	469b      	mov	fp, r3
 8011160:	ee10 aa10 	vmov	sl, s0
 8011164:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011168:	ee11 8a10 	vmov	r8, s2
 801116c:	4699      	mov	r9, r3
 801116e:	4652      	mov	r2, sl
 8011170:	465b      	mov	r3, fp
 8011172:	a183      	add	r1, pc, #524	; (adr r1, 8011380 <__kernel_tan+0x318>)
 8011174:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011178:	f7ef f88e 	bl	8000298 <__aeabi_dsub>
 801117c:	4642      	mov	r2, r8
 801117e:	464b      	mov	r3, r9
 8011180:	4604      	mov	r4, r0
 8011182:	460d      	mov	r5, r1
 8011184:	a180      	add	r1, pc, #512	; (adr r1, 8011388 <__kernel_tan+0x320>)
 8011186:	e9d1 0100 	ldrd	r0, r1, [r1]
 801118a:	f7ef f885 	bl	8000298 <__aeabi_dsub>
 801118e:	4622      	mov	r2, r4
 8011190:	462b      	mov	r3, r5
 8011192:	f7ef f883 	bl	800029c <__adddf3>
 8011196:	f04f 0800 	mov.w	r8, #0
 801119a:	4682      	mov	sl, r0
 801119c:	468b      	mov	fp, r1
 801119e:	f04f 0900 	mov.w	r9, #0
 80111a2:	4652      	mov	r2, sl
 80111a4:	465b      	mov	r3, fp
 80111a6:	4650      	mov	r0, sl
 80111a8:	4659      	mov	r1, fp
 80111aa:	f7ef fa2d 	bl	8000608 <__aeabi_dmul>
 80111ae:	4602      	mov	r2, r0
 80111b0:	460b      	mov	r3, r1
 80111b2:	ec43 2b18 	vmov	d8, r2, r3
 80111b6:	f7ef fa27 	bl	8000608 <__aeabi_dmul>
 80111ba:	ec53 2b18 	vmov	r2, r3, d8
 80111be:	4604      	mov	r4, r0
 80111c0:	460d      	mov	r5, r1
 80111c2:	4650      	mov	r0, sl
 80111c4:	4659      	mov	r1, fp
 80111c6:	f7ef fa1f 	bl	8000608 <__aeabi_dmul>
 80111ca:	a371      	add	r3, pc, #452	; (adr r3, 8011390 <__kernel_tan+0x328>)
 80111cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d0:	ec41 0b19 	vmov	d9, r0, r1
 80111d4:	4620      	mov	r0, r4
 80111d6:	4629      	mov	r1, r5
 80111d8:	f7ef fa16 	bl	8000608 <__aeabi_dmul>
 80111dc:	a36e      	add	r3, pc, #440	; (adr r3, 8011398 <__kernel_tan+0x330>)
 80111de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e2:	f7ef f85b 	bl	800029c <__adddf3>
 80111e6:	4622      	mov	r2, r4
 80111e8:	462b      	mov	r3, r5
 80111ea:	f7ef fa0d 	bl	8000608 <__aeabi_dmul>
 80111ee:	a36c      	add	r3, pc, #432	; (adr r3, 80113a0 <__kernel_tan+0x338>)
 80111f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f4:	f7ef f852 	bl	800029c <__adddf3>
 80111f8:	4622      	mov	r2, r4
 80111fa:	462b      	mov	r3, r5
 80111fc:	f7ef fa04 	bl	8000608 <__aeabi_dmul>
 8011200:	a369      	add	r3, pc, #420	; (adr r3, 80113a8 <__kernel_tan+0x340>)
 8011202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011206:	f7ef f849 	bl	800029c <__adddf3>
 801120a:	4622      	mov	r2, r4
 801120c:	462b      	mov	r3, r5
 801120e:	f7ef f9fb 	bl	8000608 <__aeabi_dmul>
 8011212:	a367      	add	r3, pc, #412	; (adr r3, 80113b0 <__kernel_tan+0x348>)
 8011214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011218:	f7ef f840 	bl	800029c <__adddf3>
 801121c:	4622      	mov	r2, r4
 801121e:	462b      	mov	r3, r5
 8011220:	f7ef f9f2 	bl	8000608 <__aeabi_dmul>
 8011224:	a364      	add	r3, pc, #400	; (adr r3, 80113b8 <__kernel_tan+0x350>)
 8011226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122a:	f7ef f837 	bl	800029c <__adddf3>
 801122e:	ec53 2b18 	vmov	r2, r3, d8
 8011232:	f7ef f9e9 	bl	8000608 <__aeabi_dmul>
 8011236:	a362      	add	r3, pc, #392	; (adr r3, 80113c0 <__kernel_tan+0x358>)
 8011238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123c:	ec41 0b1a 	vmov	d10, r0, r1
 8011240:	4620      	mov	r0, r4
 8011242:	4629      	mov	r1, r5
 8011244:	f7ef f9e0 	bl	8000608 <__aeabi_dmul>
 8011248:	a35f      	add	r3, pc, #380	; (adr r3, 80113c8 <__kernel_tan+0x360>)
 801124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801124e:	f7ef f825 	bl	800029c <__adddf3>
 8011252:	4622      	mov	r2, r4
 8011254:	462b      	mov	r3, r5
 8011256:	f7ef f9d7 	bl	8000608 <__aeabi_dmul>
 801125a:	a35d      	add	r3, pc, #372	; (adr r3, 80113d0 <__kernel_tan+0x368>)
 801125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011260:	f7ef f81c 	bl	800029c <__adddf3>
 8011264:	4622      	mov	r2, r4
 8011266:	462b      	mov	r3, r5
 8011268:	f7ef f9ce 	bl	8000608 <__aeabi_dmul>
 801126c:	a35a      	add	r3, pc, #360	; (adr r3, 80113d8 <__kernel_tan+0x370>)
 801126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011272:	f7ef f813 	bl	800029c <__adddf3>
 8011276:	4622      	mov	r2, r4
 8011278:	462b      	mov	r3, r5
 801127a:	f7ef f9c5 	bl	8000608 <__aeabi_dmul>
 801127e:	a358      	add	r3, pc, #352	; (adr r3, 80113e0 <__kernel_tan+0x378>)
 8011280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011284:	f7ef f80a 	bl	800029c <__adddf3>
 8011288:	4622      	mov	r2, r4
 801128a:	462b      	mov	r3, r5
 801128c:	f7ef f9bc 	bl	8000608 <__aeabi_dmul>
 8011290:	a355      	add	r3, pc, #340	; (adr r3, 80113e8 <__kernel_tan+0x380>)
 8011292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011296:	f7ef f801 	bl	800029c <__adddf3>
 801129a:	4602      	mov	r2, r0
 801129c:	460b      	mov	r3, r1
 801129e:	ec51 0b1a 	vmov	r0, r1, d10
 80112a2:	f7ee fffb 	bl	800029c <__adddf3>
 80112a6:	ec53 2b19 	vmov	r2, r3, d9
 80112aa:	f7ef f9ad 	bl	8000608 <__aeabi_dmul>
 80112ae:	4642      	mov	r2, r8
 80112b0:	464b      	mov	r3, r9
 80112b2:	f7ee fff3 	bl	800029c <__adddf3>
 80112b6:	ec53 2b18 	vmov	r2, r3, d8
 80112ba:	f7ef f9a5 	bl	8000608 <__aeabi_dmul>
 80112be:	4642      	mov	r2, r8
 80112c0:	464b      	mov	r3, r9
 80112c2:	f7ee ffeb 	bl	800029c <__adddf3>
 80112c6:	a34a      	add	r3, pc, #296	; (adr r3, 80113f0 <__kernel_tan+0x388>)
 80112c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112cc:	4604      	mov	r4, r0
 80112ce:	460d      	mov	r5, r1
 80112d0:	ec51 0b19 	vmov	r0, r1, d9
 80112d4:	f7ef f998 	bl	8000608 <__aeabi_dmul>
 80112d8:	4622      	mov	r2, r4
 80112da:	462b      	mov	r3, r5
 80112dc:	f7ee ffde 	bl	800029c <__adddf3>
 80112e0:	460b      	mov	r3, r1
 80112e2:	ec41 0b18 	vmov	d8, r0, r1
 80112e6:	4602      	mov	r2, r0
 80112e8:	4659      	mov	r1, fp
 80112ea:	4650      	mov	r0, sl
 80112ec:	f7ee ffd6 	bl	800029c <__adddf3>
 80112f0:	4b44      	ldr	r3, [pc, #272]	; (8011404 <__kernel_tan+0x39c>)
 80112f2:	429f      	cmp	r7, r3
 80112f4:	4604      	mov	r4, r0
 80112f6:	460d      	mov	r5, r1
 80112f8:	f340 8086 	ble.w	8011408 <__kernel_tan+0x3a0>
 80112fc:	4630      	mov	r0, r6
 80112fe:	f7ef f919 	bl	8000534 <__aeabi_i2d>
 8011302:	4622      	mov	r2, r4
 8011304:	4680      	mov	r8, r0
 8011306:	4689      	mov	r9, r1
 8011308:	462b      	mov	r3, r5
 801130a:	4620      	mov	r0, r4
 801130c:	4629      	mov	r1, r5
 801130e:	f7ef f97b 	bl	8000608 <__aeabi_dmul>
 8011312:	4642      	mov	r2, r8
 8011314:	4606      	mov	r6, r0
 8011316:	460f      	mov	r7, r1
 8011318:	464b      	mov	r3, r9
 801131a:	4620      	mov	r0, r4
 801131c:	4629      	mov	r1, r5
 801131e:	f7ee ffbd 	bl	800029c <__adddf3>
 8011322:	4602      	mov	r2, r0
 8011324:	460b      	mov	r3, r1
 8011326:	4630      	mov	r0, r6
 8011328:	4639      	mov	r1, r7
 801132a:	f7ef fa97 	bl	800085c <__aeabi_ddiv>
 801132e:	ec53 2b18 	vmov	r2, r3, d8
 8011332:	f7ee ffb1 	bl	8000298 <__aeabi_dsub>
 8011336:	4602      	mov	r2, r0
 8011338:	460b      	mov	r3, r1
 801133a:	4650      	mov	r0, sl
 801133c:	4659      	mov	r1, fp
 801133e:	f7ee ffab 	bl	8000298 <__aeabi_dsub>
 8011342:	4602      	mov	r2, r0
 8011344:	460b      	mov	r3, r1
 8011346:	f7ee ffa9 	bl	800029c <__adddf3>
 801134a:	4602      	mov	r2, r0
 801134c:	460b      	mov	r3, r1
 801134e:	4640      	mov	r0, r8
 8011350:	4649      	mov	r1, r9
 8011352:	f7ee ffa1 	bl	8000298 <__aeabi_dsub>
 8011356:	9b00      	ldr	r3, [sp, #0]
 8011358:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801135c:	f00a 0a02 	and.w	sl, sl, #2
 8011360:	4604      	mov	r4, r0
 8011362:	f1ca 0001 	rsb	r0, sl, #1
 8011366:	460d      	mov	r5, r1
 8011368:	f7ef f8e4 	bl	8000534 <__aeabi_i2d>
 801136c:	4602      	mov	r2, r0
 801136e:	460b      	mov	r3, r1
 8011370:	4620      	mov	r0, r4
 8011372:	4629      	mov	r1, r5
 8011374:	f7ef f948 	bl	8000608 <__aeabi_dmul>
 8011378:	e69f      	b.n	80110ba <__kernel_tan+0x52>
 801137a:	bf00      	nop
 801137c:	f3af 8000 	nop.w
 8011380:	54442d18 	.word	0x54442d18
 8011384:	3fe921fb 	.word	0x3fe921fb
 8011388:	33145c07 	.word	0x33145c07
 801138c:	3c81a626 	.word	0x3c81a626
 8011390:	74bf7ad4 	.word	0x74bf7ad4
 8011394:	3efb2a70 	.word	0x3efb2a70
 8011398:	32f0a7e9 	.word	0x32f0a7e9
 801139c:	3f12b80f 	.word	0x3f12b80f
 80113a0:	1a8d1068 	.word	0x1a8d1068
 80113a4:	3f3026f7 	.word	0x3f3026f7
 80113a8:	fee08315 	.word	0xfee08315
 80113ac:	3f57dbc8 	.word	0x3f57dbc8
 80113b0:	e96e8493 	.word	0xe96e8493
 80113b4:	3f8226e3 	.word	0x3f8226e3
 80113b8:	1bb341fe 	.word	0x1bb341fe
 80113bc:	3faba1ba 	.word	0x3faba1ba
 80113c0:	db605373 	.word	0xdb605373
 80113c4:	bef375cb 	.word	0xbef375cb
 80113c8:	a03792a6 	.word	0xa03792a6
 80113cc:	3f147e88 	.word	0x3f147e88
 80113d0:	f2f26501 	.word	0xf2f26501
 80113d4:	3f4344d8 	.word	0x3f4344d8
 80113d8:	c9560328 	.word	0xc9560328
 80113dc:	3f6d6d22 	.word	0x3f6d6d22
 80113e0:	8406d637 	.word	0x8406d637
 80113e4:	3f9664f4 	.word	0x3f9664f4
 80113e8:	1110fe7a 	.word	0x1110fe7a
 80113ec:	3fc11111 	.word	0x3fc11111
 80113f0:	55555563 	.word	0x55555563
 80113f4:	3fd55555 	.word	0x3fd55555
 80113f8:	3e2fffff 	.word	0x3e2fffff
 80113fc:	3ff00000 	.word	0x3ff00000
 8011400:	bff00000 	.word	0xbff00000
 8011404:	3fe59427 	.word	0x3fe59427
 8011408:	2e01      	cmp	r6, #1
 801140a:	d02f      	beq.n	801146c <__kernel_tan+0x404>
 801140c:	460f      	mov	r7, r1
 801140e:	4602      	mov	r2, r0
 8011410:	460b      	mov	r3, r1
 8011412:	4689      	mov	r9, r1
 8011414:	2000      	movs	r0, #0
 8011416:	4917      	ldr	r1, [pc, #92]	; (8011474 <__kernel_tan+0x40c>)
 8011418:	f7ef fa20 	bl	800085c <__aeabi_ddiv>
 801141c:	2600      	movs	r6, #0
 801141e:	e9cd 0100 	strd	r0, r1, [sp]
 8011422:	4652      	mov	r2, sl
 8011424:	465b      	mov	r3, fp
 8011426:	4630      	mov	r0, r6
 8011428:	4639      	mov	r1, r7
 801142a:	f7ee ff35 	bl	8000298 <__aeabi_dsub>
 801142e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8011432:	4602      	mov	r2, r0
 8011434:	460b      	mov	r3, r1
 8011436:	ec51 0b18 	vmov	r0, r1, d8
 801143a:	f7ee ff2d 	bl	8000298 <__aeabi_dsub>
 801143e:	4632      	mov	r2, r6
 8011440:	462b      	mov	r3, r5
 8011442:	f7ef f8e1 	bl	8000608 <__aeabi_dmul>
 8011446:	46b0      	mov	r8, r6
 8011448:	460f      	mov	r7, r1
 801144a:	4642      	mov	r2, r8
 801144c:	462b      	mov	r3, r5
 801144e:	4634      	mov	r4, r6
 8011450:	4649      	mov	r1, r9
 8011452:	4606      	mov	r6, r0
 8011454:	4640      	mov	r0, r8
 8011456:	f7ef f8d7 	bl	8000608 <__aeabi_dmul>
 801145a:	4b07      	ldr	r3, [pc, #28]	; (8011478 <__kernel_tan+0x410>)
 801145c:	2200      	movs	r2, #0
 801145e:	f7ee ff1d 	bl	800029c <__adddf3>
 8011462:	4602      	mov	r2, r0
 8011464:	460b      	mov	r3, r1
 8011466:	4630      	mov	r0, r6
 8011468:	4639      	mov	r1, r7
 801146a:	e665      	b.n	8011138 <__kernel_tan+0xd0>
 801146c:	4682      	mov	sl, r0
 801146e:	468b      	mov	fp, r1
 8011470:	e625      	b.n	80110be <__kernel_tan+0x56>
 8011472:	bf00      	nop
 8011474:	bff00000 	.word	0xbff00000
 8011478:	3ff00000 	.word	0x3ff00000
 801147c:	00000000 	.word	0x00000000

08011480 <floor>:
 8011480:	ec51 0b10 	vmov	r0, r1, d0
 8011484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011488:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801148c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011490:	2e13      	cmp	r6, #19
 8011492:	ee10 5a10 	vmov	r5, s0
 8011496:	ee10 8a10 	vmov	r8, s0
 801149a:	460c      	mov	r4, r1
 801149c:	dc32      	bgt.n	8011504 <floor+0x84>
 801149e:	2e00      	cmp	r6, #0
 80114a0:	da14      	bge.n	80114cc <floor+0x4c>
 80114a2:	a333      	add	r3, pc, #204	; (adr r3, 8011570 <floor+0xf0>)
 80114a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114a8:	f7ee fef8 	bl	800029c <__adddf3>
 80114ac:	2200      	movs	r2, #0
 80114ae:	2300      	movs	r3, #0
 80114b0:	f7ef fb3a 	bl	8000b28 <__aeabi_dcmpgt>
 80114b4:	b138      	cbz	r0, 80114c6 <floor+0x46>
 80114b6:	2c00      	cmp	r4, #0
 80114b8:	da57      	bge.n	801156a <floor+0xea>
 80114ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80114be:	431d      	orrs	r5, r3
 80114c0:	d001      	beq.n	80114c6 <floor+0x46>
 80114c2:	4c2d      	ldr	r4, [pc, #180]	; (8011578 <floor+0xf8>)
 80114c4:	2500      	movs	r5, #0
 80114c6:	4621      	mov	r1, r4
 80114c8:	4628      	mov	r0, r5
 80114ca:	e025      	b.n	8011518 <floor+0x98>
 80114cc:	4f2b      	ldr	r7, [pc, #172]	; (801157c <floor+0xfc>)
 80114ce:	4137      	asrs	r7, r6
 80114d0:	ea01 0307 	and.w	r3, r1, r7
 80114d4:	4303      	orrs	r3, r0
 80114d6:	d01f      	beq.n	8011518 <floor+0x98>
 80114d8:	a325      	add	r3, pc, #148	; (adr r3, 8011570 <floor+0xf0>)
 80114da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114de:	f7ee fedd 	bl	800029c <__adddf3>
 80114e2:	2200      	movs	r2, #0
 80114e4:	2300      	movs	r3, #0
 80114e6:	f7ef fb1f 	bl	8000b28 <__aeabi_dcmpgt>
 80114ea:	2800      	cmp	r0, #0
 80114ec:	d0eb      	beq.n	80114c6 <floor+0x46>
 80114ee:	2c00      	cmp	r4, #0
 80114f0:	bfbe      	ittt	lt
 80114f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80114f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80114fa:	19a4      	addlt	r4, r4, r6
 80114fc:	ea24 0407 	bic.w	r4, r4, r7
 8011500:	2500      	movs	r5, #0
 8011502:	e7e0      	b.n	80114c6 <floor+0x46>
 8011504:	2e33      	cmp	r6, #51	; 0x33
 8011506:	dd0b      	ble.n	8011520 <floor+0xa0>
 8011508:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801150c:	d104      	bne.n	8011518 <floor+0x98>
 801150e:	ee10 2a10 	vmov	r2, s0
 8011512:	460b      	mov	r3, r1
 8011514:	f7ee fec2 	bl	800029c <__adddf3>
 8011518:	ec41 0b10 	vmov	d0, r0, r1
 801151c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011520:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011524:	f04f 33ff 	mov.w	r3, #4294967295
 8011528:	fa23 f707 	lsr.w	r7, r3, r7
 801152c:	4207      	tst	r7, r0
 801152e:	d0f3      	beq.n	8011518 <floor+0x98>
 8011530:	a30f      	add	r3, pc, #60	; (adr r3, 8011570 <floor+0xf0>)
 8011532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011536:	f7ee feb1 	bl	800029c <__adddf3>
 801153a:	2200      	movs	r2, #0
 801153c:	2300      	movs	r3, #0
 801153e:	f7ef faf3 	bl	8000b28 <__aeabi_dcmpgt>
 8011542:	2800      	cmp	r0, #0
 8011544:	d0bf      	beq.n	80114c6 <floor+0x46>
 8011546:	2c00      	cmp	r4, #0
 8011548:	da02      	bge.n	8011550 <floor+0xd0>
 801154a:	2e14      	cmp	r6, #20
 801154c:	d103      	bne.n	8011556 <floor+0xd6>
 801154e:	3401      	adds	r4, #1
 8011550:	ea25 0507 	bic.w	r5, r5, r7
 8011554:	e7b7      	b.n	80114c6 <floor+0x46>
 8011556:	2301      	movs	r3, #1
 8011558:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801155c:	fa03 f606 	lsl.w	r6, r3, r6
 8011560:	4435      	add	r5, r6
 8011562:	4545      	cmp	r5, r8
 8011564:	bf38      	it	cc
 8011566:	18e4      	addcc	r4, r4, r3
 8011568:	e7f2      	b.n	8011550 <floor+0xd0>
 801156a:	2500      	movs	r5, #0
 801156c:	462c      	mov	r4, r5
 801156e:	e7aa      	b.n	80114c6 <floor+0x46>
 8011570:	8800759c 	.word	0x8800759c
 8011574:	7e37e43c 	.word	0x7e37e43c
 8011578:	bff00000 	.word	0xbff00000
 801157c:	000fffff 	.word	0x000fffff

08011580 <scalbn>:
 8011580:	b570      	push	{r4, r5, r6, lr}
 8011582:	ec55 4b10 	vmov	r4, r5, d0
 8011586:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801158a:	4606      	mov	r6, r0
 801158c:	462b      	mov	r3, r5
 801158e:	b99a      	cbnz	r2, 80115b8 <scalbn+0x38>
 8011590:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011594:	4323      	orrs	r3, r4
 8011596:	d036      	beq.n	8011606 <scalbn+0x86>
 8011598:	4b39      	ldr	r3, [pc, #228]	; (8011680 <scalbn+0x100>)
 801159a:	4629      	mov	r1, r5
 801159c:	ee10 0a10 	vmov	r0, s0
 80115a0:	2200      	movs	r2, #0
 80115a2:	f7ef f831 	bl	8000608 <__aeabi_dmul>
 80115a6:	4b37      	ldr	r3, [pc, #220]	; (8011684 <scalbn+0x104>)
 80115a8:	429e      	cmp	r6, r3
 80115aa:	4604      	mov	r4, r0
 80115ac:	460d      	mov	r5, r1
 80115ae:	da10      	bge.n	80115d2 <scalbn+0x52>
 80115b0:	a32b      	add	r3, pc, #172	; (adr r3, 8011660 <scalbn+0xe0>)
 80115b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b6:	e03a      	b.n	801162e <scalbn+0xae>
 80115b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80115bc:	428a      	cmp	r2, r1
 80115be:	d10c      	bne.n	80115da <scalbn+0x5a>
 80115c0:	ee10 2a10 	vmov	r2, s0
 80115c4:	4620      	mov	r0, r4
 80115c6:	4629      	mov	r1, r5
 80115c8:	f7ee fe68 	bl	800029c <__adddf3>
 80115cc:	4604      	mov	r4, r0
 80115ce:	460d      	mov	r5, r1
 80115d0:	e019      	b.n	8011606 <scalbn+0x86>
 80115d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80115d6:	460b      	mov	r3, r1
 80115d8:	3a36      	subs	r2, #54	; 0x36
 80115da:	4432      	add	r2, r6
 80115dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80115e0:	428a      	cmp	r2, r1
 80115e2:	dd08      	ble.n	80115f6 <scalbn+0x76>
 80115e4:	2d00      	cmp	r5, #0
 80115e6:	a120      	add	r1, pc, #128	; (adr r1, 8011668 <scalbn+0xe8>)
 80115e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115ec:	da1c      	bge.n	8011628 <scalbn+0xa8>
 80115ee:	a120      	add	r1, pc, #128	; (adr r1, 8011670 <scalbn+0xf0>)
 80115f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115f4:	e018      	b.n	8011628 <scalbn+0xa8>
 80115f6:	2a00      	cmp	r2, #0
 80115f8:	dd08      	ble.n	801160c <scalbn+0x8c>
 80115fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80115fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011602:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011606:	ec45 4b10 	vmov	d0, r4, r5
 801160a:	bd70      	pop	{r4, r5, r6, pc}
 801160c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011610:	da19      	bge.n	8011646 <scalbn+0xc6>
 8011612:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011616:	429e      	cmp	r6, r3
 8011618:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801161c:	dd0a      	ble.n	8011634 <scalbn+0xb4>
 801161e:	a112      	add	r1, pc, #72	; (adr r1, 8011668 <scalbn+0xe8>)
 8011620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d1e2      	bne.n	80115ee <scalbn+0x6e>
 8011628:	a30f      	add	r3, pc, #60	; (adr r3, 8011668 <scalbn+0xe8>)
 801162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801162e:	f7ee ffeb 	bl	8000608 <__aeabi_dmul>
 8011632:	e7cb      	b.n	80115cc <scalbn+0x4c>
 8011634:	a10a      	add	r1, pc, #40	; (adr r1, 8011660 <scalbn+0xe0>)
 8011636:	e9d1 0100 	ldrd	r0, r1, [r1]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d0b8      	beq.n	80115b0 <scalbn+0x30>
 801163e:	a10e      	add	r1, pc, #56	; (adr r1, 8011678 <scalbn+0xf8>)
 8011640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011644:	e7b4      	b.n	80115b0 <scalbn+0x30>
 8011646:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801164a:	3236      	adds	r2, #54	; 0x36
 801164c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011650:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011654:	4620      	mov	r0, r4
 8011656:	4b0c      	ldr	r3, [pc, #48]	; (8011688 <scalbn+0x108>)
 8011658:	2200      	movs	r2, #0
 801165a:	e7e8      	b.n	801162e <scalbn+0xae>
 801165c:	f3af 8000 	nop.w
 8011660:	c2f8f359 	.word	0xc2f8f359
 8011664:	01a56e1f 	.word	0x01a56e1f
 8011668:	8800759c 	.word	0x8800759c
 801166c:	7e37e43c 	.word	0x7e37e43c
 8011670:	8800759c 	.word	0x8800759c
 8011674:	fe37e43c 	.word	0xfe37e43c
 8011678:	c2f8f359 	.word	0xc2f8f359
 801167c:	81a56e1f 	.word	0x81a56e1f
 8011680:	43500000 	.word	0x43500000
 8011684:	ffff3cb0 	.word	0xffff3cb0
 8011688:	3c900000 	.word	0x3c900000

0801168c <_init>:
 801168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801168e:	bf00      	nop
 8011690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011692:	bc08      	pop	{r3}
 8011694:	469e      	mov	lr, r3
 8011696:	4770      	bx	lr

08011698 <_fini>:
 8011698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801169a:	bf00      	nop
 801169c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801169e:	bc08      	pop	{r3}
 80116a0:	469e      	mov	lr, r3
 80116a2:	4770      	bx	lr
