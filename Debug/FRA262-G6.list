
FRA262-G6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800ebe8  0800ebe8  0001ebe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2e0  0800f2e0  000203f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2e0  0800f2e0  0001f2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2e8  0800f2e8  000203f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2e8  0800f2e8  0001f2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2ec  0800f2ec  0001f2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f8  20000000  0800f2f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b10  200003f8  0800f6e8  000203f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f08  0800f6e8  00020f08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174ee  00000000  00000000  00020428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000322d  00000000  00000000  00037916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  0003ab48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  0003be20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3cb  00000000  00000000  0003cfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018948  00000000  00000000  00057383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a047f  00000000  00000000  0006fccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011014a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006734  00000000  00000000  0011019c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003f8 	.word	0x200003f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ebcc 	.word	0x0800ebcc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003fc 	.word	0x200003fc
 80001dc:	0800ebcc 	.word	0x0800ebcc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <ENDEFF_TEST_MODE>:
		timestamp = HAL_GetTick();
		complete = 1;
		return;
	}
}
void ENDEFF_TEST_MODE(I2C_HandleTypeDef *hi2c) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x11 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001010:	f002 fbfc 	bl	800380c <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <ENDEFF_TEST_MODE+0x44>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b09      	cmp	r3, #9
 800101e:	d911      	bls.n	8001044 <ENDEFF_TEST_MODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2302      	movs	r3, #2
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <ENDEFF_TEST_MODE+0x48>)
 800102a:	212a      	movs	r1, #42	; 0x2a
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f003 fe6d 	bl	8004d0c <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001032:	f002 fbeb 	bl	800380c <HAL_GetTick>
 8001036:	4603      	mov	r3, r0
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <ENDEFF_TEST_MODE+0x44>)
 800103a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <ENDEFF_TEST_MODE+0x4c>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]
		return;
 8001042:	bf00      	nop
	}
}
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000414 	.word	0x20000414
 8001050:	20000000 	.word	0x20000000
 8001054:	20000418 	.word	0x20000418

08001058 <ENDEFF_TEST_MODE_QUIT>:
void ENDEFF_TEST_MODE_QUIT(I2C_HandleTypeDef *hi2c) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
 800105e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x00 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001060:	f002 fbd4 	bl	800380c <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <ENDEFF_TEST_MODE_QUIT+0x44>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b09      	cmp	r3, #9
 800106e:	d911      	bls.n	8001094 <ENDEFF_TEST_MODE_QUIT+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2302      	movs	r3, #2
 8001078:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <ENDEFF_TEST_MODE_QUIT+0x48>)
 800107a:	212a      	movs	r1, #42	; 0x2a
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f003 fe45 	bl	8004d0c <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001082:	f002 fbc3 	bl	800380c <HAL_GetTick>
 8001086:	4603      	mov	r3, r0
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <ENDEFF_TEST_MODE_QUIT+0x44>)
 800108a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <ENDEFF_TEST_MODE_QUIT+0x4c>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
		return;
 8001092:	bf00      	nop
	}
}
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000414 	.word	0x20000414
 80010a0:	20000004 	.word	0x20000004
 80010a4:	20000418 	.word	0x20000418

080010a8 <ENDEFF_GRIPPER_RUNMODE>:
void ENDEFF_GRIPPER_RUNMODE(I2C_HandleTypeDef *hi2c) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x13 };
	if (HAL_GetTick() - timestamp >= 10) {
 80010b0:	f002 fbac 	bl	800380c <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <ENDEFF_GRIPPER_RUNMODE+0x44>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b09      	cmp	r3, #9
 80010be:	d911      	bls.n	80010e4 <ENDEFF_GRIPPER_RUNMODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2302      	movs	r3, #2
 80010c8:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <ENDEFF_GRIPPER_RUNMODE+0x48>)
 80010ca:	212a      	movs	r1, #42	; 0x2a
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f003 fe1d 	bl	8004d0c <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80010d2:	f002 fb9b 	bl	800380c <HAL_GetTick>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <ENDEFF_GRIPPER_RUNMODE+0x44>)
 80010da:	6013      	str	r3, [r2, #0]
		complete = 1;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <ENDEFF_GRIPPER_RUNMODE+0x4c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
		return;
 80010e2:	bf00      	nop
	}
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000414 	.word	0x20000414
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000418 	.word	0x20000418

080010f8 <ENDEFF_GRIPPER_IDLE>:
void ENDEFF_GRIPPER_IDLE(I2C_HandleTypeDef *hi2c) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x8C };
	if (HAL_GetTick() - timestamp >= 10) {
 8001100:	f002 fb84 	bl	800380c <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <ENDEFF_GRIPPER_IDLE+0x44>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b09      	cmp	r3, #9
 800110e:	d911      	bls.n	8001134 <ENDEFF_GRIPPER_IDLE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2302      	movs	r3, #2
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <ENDEFF_GRIPPER_IDLE+0x48>)
 800111a:	212a      	movs	r1, #42	; 0x2a
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f003 fdf5 	bl	8004d0c <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001122:	f002 fb73 	bl	800380c <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <ENDEFF_GRIPPER_IDLE+0x44>)
 800112a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <ENDEFF_GRIPPER_IDLE+0x4c>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]
		return;
 8001132:	bf00      	nop
	}
}
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000414 	.word	0x20000414
 8001140:	2000000c 	.word	0x2000000c
 8001144:	20000418 	.word	0x20000418

08001148 <ENDEFF_GRIPPER_PICK>:
void ENDEFF_GRIPPER_PICK(I2C_HandleTypeDef *hi2c) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x5A };
	if (HAL_GetTick() - timestamp >= 2000) {
 8001150:	f002 fb5c 	bl	800380c <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <ENDEFF_GRIPPER_PICK+0x44>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001160:	d311      	bcc.n	8001186 <ENDEFF_GRIPPER_PICK+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2302      	movs	r3, #2
 800116a:	4a09      	ldr	r2, [pc, #36]	; (8001190 <ENDEFF_GRIPPER_PICK+0x48>)
 800116c:	212a      	movs	r1, #42	; 0x2a
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f003 fdcc 	bl	8004d0c <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001174:	f002 fb4a 	bl	800380c <HAL_GetTick>
 8001178:	4603      	mov	r3, r0
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <ENDEFF_GRIPPER_PICK+0x44>)
 800117c:	6013      	str	r3, [r2, #0]
		complete = 1;
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <ENDEFF_GRIPPER_PICK+0x4c>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
		return;
 8001184:	bf00      	nop
	}
}
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000414 	.word	0x20000414
 8001190:	20000010 	.word	0x20000010
 8001194:	20000418 	.word	0x20000418

08001198 <ENDEFF_GRIPPER_PLACE>:
void ENDEFF_GRIPPER_PLACE(I2C_HandleTypeDef *hi2c) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x69 };
	if (HAL_GetTick() - timestamp >= 2000) {
 80011a0:	f002 fb34 	bl	800380c <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <ENDEFF_GRIPPER_PLACE+0x44>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011b0:	d311      	bcc.n	80011d6 <ENDEFF_GRIPPER_PLACE+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2302      	movs	r3, #2
 80011ba:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <ENDEFF_GRIPPER_PLACE+0x48>)
 80011bc:	212a      	movs	r1, #42	; 0x2a
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f003 fda4 	bl	8004d0c <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80011c4:	f002 fb22 	bl	800380c <HAL_GetTick>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <ENDEFF_GRIPPER_PLACE+0x44>)
 80011cc:	6013      	str	r3, [r2, #0]
		complete = 1;
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <ENDEFF_GRIPPER_PLACE+0x4c>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]
		return;
 80011d4:	bf00      	nop
	}
}
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000414 	.word	0x20000414
 80011e0:	20000014 	.word	0x20000014
 80011e4:	20000418 	.word	0x20000418

080011e8 <I2C_TO_BASESYSTEM>:


void I2C_TO_BASESYSTEM(int16_t *DataFrame, I2C_HandleTypeDef *hi2c) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
	static int picked;
	static enum {
		INIT, TEST, RUNMODE, PICKED
	} END_EFFECTOR_STATE = INIT;
	switch (END_EFFECTOR_STATE) {
 80011f2:	4b96      	ldr	r3, [pc, #600]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	f200 8123 	bhi.w	8001442 <I2C_TO_BASESYSTEM+0x25a>
 80011fc:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <I2C_TO_BASESYSTEM+0x1c>)
 80011fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001202:	bf00      	nop
 8001204:	08001215 	.word	0x08001215
 8001208:	08001273 	.word	0x08001273
 800120c:	080012d7 	.word	0x080012d7
 8001210:	080013a5 	.word	0x080013a5
	case (INIT):
		if ((*DataFrame & 0b0001) == 1) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121a:	b29b      	uxth	r3, r3
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00e      	beq.n	8001242 <I2C_TO_BASESYSTEM+0x5a>
			ENDEFF_TEST_MODE(hi2c);
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f7ff feef 	bl	8001008 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 800122a:	4b89      	ldr	r3, [pc, #548]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	f040 8100 	bne.w	8001434 <I2C_TO_BASESYSTEM+0x24c>
				END_EFFECTOR_STATE = TEST;
 8001234:	4b85      	ldr	r3, [pc, #532]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800123a:	4b85      	ldr	r3, [pc, #532]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 8001240:	e0f8      	b.n	8001434 <I2C_TO_BASESYSTEM+0x24c>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001248:	b29b      	uxth	r3, r3
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80f0 	beq.w	8001434 <I2C_TO_BASESYSTEM+0x24c>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 8001254:	6838      	ldr	r0, [r7, #0]
 8001256:	f7ff ff27 	bl	80010a8 <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 800125a:	4b7d      	ldr	r3, [pc, #500]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b01      	cmp	r3, #1
 8001260:	f040 80e8 	bne.w	8001434 <I2C_TO_BASESYSTEM+0x24c>
				END_EFFECTOR_STATE = RUNMODE;
 8001264:	4b79      	ldr	r3, [pc, #484]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 8001266:	2202      	movs	r2, #2
 8001268:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800126a:	4b79      	ldr	r3, [pc, #484]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
		break;
 8001270:	e0e0      	b.n	8001434 <I2C_TO_BASESYSTEM+0x24c>
	case (TEST):
		if ((*DataFrame & 0b0001) == 0) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001278:	b29b      	uxth	r3, r3
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10e      	bne.n	80012a0 <I2C_TO_BASESYSTEM+0xb8>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 8001282:	6838      	ldr	r0, [r7, #0]
 8001284:	f7ff fee8 	bl	8001058 <ENDEFF_TEST_MODE_QUIT>
			if (complete == 1) {
 8001288:	4b71      	ldr	r3, [pc, #452]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	f040 80d3 	bne.w	8001438 <I2C_TO_BASESYSTEM+0x250>
				END_EFFECTOR_STATE = INIT;
 8001292:	4b6e      	ldr	r3, [pc, #440]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001298:	4b6d      	ldr	r3, [pc, #436]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 800129e:	e0cb      	b.n	8001438 <I2C_TO_BASESYSTEM+0x250>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80c3 	beq.w	8001438 <I2C_TO_BASESYSTEM+0x250>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 80012b2:	6838      	ldr	r0, [r7, #0]
 80012b4:	f7ff fed0 	bl	8001058 <ENDEFF_TEST_MODE_QUIT>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 80012b8:	6838      	ldr	r0, [r7, #0]
 80012ba:	f7ff fef5 	bl	80010a8 <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 80012be:	4b64      	ldr	r3, [pc, #400]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	f040 80b8 	bne.w	8001438 <I2C_TO_BASESYSTEM+0x250>
				END_EFFECTOR_STATE = RUNMODE;
 80012c8:	4b60      	ldr	r3, [pc, #384]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80012ce:	4b60      	ldr	r3, [pc, #384]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
		break;
 80012d4:	e0b0      	b.n	8001438 <I2C_TO_BASESYSTEM+0x250>
	case (RUNMODE):
		if ((*DataFrame & 0b0010) == 0) {
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10e      	bne.n	8001304 <I2C_TO_BASESYSTEM+0x11c>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80012e6:	6838      	ldr	r0, [r7, #0]
 80012e8:	f7ff ff06 	bl	80010f8 <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80012ec:	4b58      	ldr	r3, [pc, #352]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	f040 80a3 	bne.w	800143c <I2C_TO_BASESYSTEM+0x254>
				END_EFFECTOR_STATE = INIT;
 80012f6:	4b55      	ldr	r3, [pc, #340]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80012fc:	4b54      	ldr	r3, [pc, #336]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
					complete = 0;
					picked = 0;
				}
			}
		}
		break;
 8001302:	e09b      	b.n	800143c <I2C_TO_BASESYSTEM+0x254>
		} else if ((*DataFrame & 0b0001) == 1) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130a:	b29b      	uxth	r3, r3
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00e      	beq.n	8001332 <I2C_TO_BASESYSTEM+0x14a>
			ENDEFF_TEST_MODE(hi2c);
 8001314:	6838      	ldr	r0, [r7, #0]
 8001316:	f7ff fe77 	bl	8001008 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 800131a:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	f040 808c 	bne.w	800143c <I2C_TO_BASESYSTEM+0x254>
				END_EFFECTOR_STATE = TEST;
 8001324:	4b49      	ldr	r3, [pc, #292]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800132a:	4b49      	ldr	r3, [pc, #292]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
		break;
 8001330:	e084      	b.n	800143c <I2C_TO_BASESYSTEM+0x254>
		} else if ((*DataFrame & 0b0100) == 0b100) {
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	b29b      	uxth	r3, r3
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	2b00      	cmp	r3, #0
 8001340:	d013      	beq.n	800136a <I2C_TO_BASESYSTEM+0x182>
			ENDEFF_GRIPPER_PICK(hi2c);
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f7ff ff00 	bl	8001148 <ENDEFF_GRIPPER_PICK>
			if (complete == 1) {
 8001348:	4b41      	ldr	r3, [pc, #260]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d175      	bne.n	800143c <I2C_TO_BASESYSTEM+0x254>
				*DataFrame = 0b0010;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2202      	movs	r2, #2
 8001354:	801a      	strh	r2, [r3, #0]
				END_EFFECTOR_STATE = PICKED;
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 8001358:	2203      	movs	r2, #3
 800135a:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800135c:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
				picked = 1;
 8001362:	4b3c      	ldr	r3, [pc, #240]	; (8001454 <I2C_TO_BASESYSTEM+0x26c>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
		break;
 8001368:	e068      	b.n	800143c <I2C_TO_BASESYSTEM+0x254>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001370:	b29b      	uxth	r3, r3
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d060      	beq.n	800143c <I2C_TO_BASESYSTEM+0x254>
			if (picked == 1) {
 800137a:	4b36      	ldr	r3, [pc, #216]	; (8001454 <I2C_TO_BASESYSTEM+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d15c      	bne.n	800143c <I2C_TO_BASESYSTEM+0x254>
				ENDEFF_GRIPPER_PLACE(hi2c);
 8001382:	6838      	ldr	r0, [r7, #0]
 8001384:	f7ff ff08 	bl	8001198 <ENDEFF_GRIPPER_PLACE>
				if (complete == 1) {
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d155      	bne.n	800143c <I2C_TO_BASESYSTEM+0x254>
					*DataFrame = 0b0010;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2202      	movs	r2, #2
 8001394:	801a      	strh	r2, [r3, #0]
					complete = 0;
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
					picked = 0;
 800139c:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <I2C_TO_BASESYSTEM+0x26c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
		break;
 80013a2:	e04b      	b.n	800143c <I2C_TO_BASESYSTEM+0x254>
	case (PICKED):
		if ((*DataFrame & 0b0010) == 0) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10d      	bne.n	80013d0 <I2C_TO_BASESYSTEM+0x1e8>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80013b4:	6838      	ldr	r0, [r7, #0]
 80013b6:	f7ff fe9f 	bl	80010f8 <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d13e      	bne.n	8001440 <I2C_TO_BASESYSTEM+0x258>
				END_EFFECTOR_STATE = INIT;
 80013c2:	4b22      	ldr	r3, [pc, #136]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
				picked = 0;
			}
		}
		break;
 80013ce:	e037      	b.n	8001440 <I2C_TO_BASESYSTEM+0x258>
		} else if ((*DataFrame & 0b0001) == 1) {
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00d      	beq.n	80013fc <I2C_TO_BASESYSTEM+0x214>
			ENDEFF_TEST_MODE(hi2c);
 80013e0:	6838      	ldr	r0, [r7, #0]
 80013e2:	f7ff fe11 	bl	8001008 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d128      	bne.n	8001440 <I2C_TO_BASESYSTEM+0x258>
				END_EFFECTOR_STATE = TEST;
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
		break;
 80013fa:	e021      	b.n	8001440 <I2C_TO_BASESYSTEM+0x258>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001402:	b29b      	uxth	r3, r3
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d019      	beq.n	8001440 <I2C_TO_BASESYSTEM+0x258>
			ENDEFF_GRIPPER_PLACE(hi2c);
 800140c:	6838      	ldr	r0, [r7, #0]
 800140e:	f7ff fec3 	bl	8001198 <ENDEFF_GRIPPER_PLACE>
			if (complete == 1) {
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d112      	bne.n	8001440 <I2C_TO_BASESYSTEM+0x258>
				*DataFrame = 0b0010;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2202      	movs	r2, #2
 800141e:	801a      	strh	r2, [r3, #0]
				END_EFFECTOR_STATE = RUNMODE;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 8001422:	2202      	movs	r2, #2
 8001424:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
				picked = 0;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <I2C_TO_BASESYSTEM+0x26c>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
		break;
 8001432:	e005      	b.n	8001440 <I2C_TO_BASESYSTEM+0x258>
		break;
 8001434:	bf00      	nop
 8001436:	e004      	b.n	8001442 <I2C_TO_BASESYSTEM+0x25a>
		break;
 8001438:	bf00      	nop
 800143a:	e002      	b.n	8001442 <I2C_TO_BASESYSTEM+0x25a>
		break;
 800143c:	bf00      	nop
 800143e:	e000      	b.n	8001442 <I2C_TO_BASESYSTEM+0x25a>
		break;
 8001440:	bf00      	nop
	}
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000041c 	.word	0x2000041c
 8001450:	20000418 	.word	0x20000418
 8001454:	20000420 	.word	0x20000420

08001458 <modbus_1t5_Timeout>:
void modbusRead1Register(); // function 03
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();

// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim) {
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <modbus_1t5_Timeout+0x1c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2201      	movs	r2, #1
 8001466:	751a      	strb	r2, [r3, #20]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000424 	.word	0x20000424

08001478 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <modbus_3t5_Timeout+0x1c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2201      	movs	r2, #1
 8001486:	755a      	strb	r2, [r3, #21]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	20000424 	.word	0x20000424

08001498 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart, uint32_t pos) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev = 1;
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <modbus_UART_Recived+0x60>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2201      	movs	r2, #1
 80014a8:	759a      	strb	r2, [r3, #22]
	if (hModbus->modbusUartStructure.RxTail++ < MODBUS_MESSAGEBUFFER_SIZE) {
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <modbus_UART_Recived+0x60>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 80014b2:	1c59      	adds	r1, r3, #1
 80014b4:	b289      	uxth	r1, r1
 80014b6:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 80014ba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80014be:	d210      	bcs.n	80014e2 <modbus_UART_Recived+0x4a>

		HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <modbus_UART_Recived+0x60>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68d8      	ldr	r0, [r3, #12]
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <modbus_UART_Recived+0x60>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <modbus_UART_Recived+0x60>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80014d2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80014d6:	4413      	add	r3, r2
 80014d8:	3302      	adds	r3, #2
 80014da:	2201      	movs	r2, #1
 80014dc:	4619      	mov	r1, r3
 80014de:	f006 fa19 	bl	8007914 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <modbus_UART_Recived+0x60>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24

}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000424 	.word	0x20000424

080014fc <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001506:	4a24      	ldr	r2, [pc, #144]	; (8001598 <Modbus_init+0x9c>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <Modbus_init+0x9c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, (void*) modbus_1t5_Timeout);
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <Modbus_init+0x9c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	4a20      	ldr	r2, [pc, #128]	; (800159c <Modbus_init+0xa0>)
 800151c:	2114      	movs	r1, #20
 800151e:	4618      	mov	r0, r3
 8001520:	f005 fbaa 	bl	8006c78 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID, (void*) modbus_3t5_Timeout);
 8001524:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <Modbus_init+0x9c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <Modbus_init+0xa4>)
 800152c:	210e      	movs	r1, #14
 800152e:	4618      	mov	r0, r3
 8001530:	f005 fba2 	bl	8006c78 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart, HAL_UART_RX_COMPLETE_CB_ID, (void*) modbus_UART_Recived);
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <Modbus_init+0x9c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	4a1a      	ldr	r2, [pc, #104]	; (80015a4 <Modbus_init+0xa8>)
 800153c:	2103      	movs	r1, #3
 800153e:	4618      	mov	r0, r3
 8001540:	f006 f940 	bl	80077c4 <HAL_UART_RegisterCallback>
	//start Receive
	HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <Modbus_init+0x9c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68d8      	ldr	r0, [r3, #12]
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <Modbus_init+0x9c>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <Modbus_init+0x9c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001556:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800155a:	4413      	add	r3, r2
 800155c:	3302      	adds	r3, #2
 800155e:	2201      	movs	r2, #1
 8001560:	4619      	mov	r1, r3
 8001562:	f006 f9d7 	bl	8007914 <HAL_UART_Receive_IT>

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <Modbus_init+0x9c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b01      	cmp	r3, #1
 8001574:	d10c      	bne.n	8001590 <Modbus_init+0x94>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <Modbus_init+0x9c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fc1b 	bl	8005db8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <Modbus_init+0x9c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f004 fe5a 	bl	8006244 <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000424 	.word	0x20000424
 800159c:	08001459 	.word	0x08001459
 80015a0:	08001479 	.word	0x08001479
 80015a4:	08001499 	.word	0x08001499

080015a8 <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 80015b4:	23ff      	movs	r3, #255	; 0xff
 80015b6:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 80015b8:	23ff      	movs	r3, #255	; 0xff
 80015ba:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80015bc:	e013      	b.n	80015e6 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	781a      	ldrb	r2, [r3, #0]
 80015c6:	7bbb      	ldrb	r3, [r7, #14]
 80015c8:	4053      	eors	r3, r2
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 80015ce:	4a0f      	ldr	r2, [pc, #60]	; (800160c <CRC16+0x64>)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	4413      	add	r3, r2
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	4053      	eors	r3, r2
 80015da:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <CRC16+0x68>)
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	4413      	add	r3, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80015e6:	883b      	ldrh	r3, [r7, #0]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	803a      	strh	r2, [r7, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1e6      	bne.n	80015be <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	7bbb      	ldrb	r3, [r7, #14]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	b29b      	uxth	r3, r3
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	20000118 	.word	0x20000118
 8001610:	20000018 	.word	0x20000018

08001614 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
	switch (hModbus->Mstatus) {
 800161a:	4b81      	ldr	r3, [pc, #516]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	7e1b      	ldrb	r3, [r3, #24]
 8001620:	3b01      	subs	r3, #1
 8001622:	2b03      	cmp	r3, #3
 8001624:	d80a      	bhi.n	800163c <Modbus_Protocal_Worker+0x28>
 8001626:	a201      	add	r2, pc, #4	; (adr r2, 800162c <Modbus_Protocal_Worker+0x18>)
 8001628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162c:	08001647 	.word	0x08001647
 8001630:	080017e7 	.word	0x080017e7
 8001634:	080016d3 	.word	0x080016d3
 8001638:	080016f9 	.word	0x080016f9
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800163c:	4b78      	ldr	r3, [pc, #480]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2201      	movs	r2, #1
 8001642:	761a      	strb	r2, [r3, #24]
		break;
 8001644:	e0e8      	b.n	8001818 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 8001646:	4b76      	ldr	r3, [pc, #472]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <Modbus_Protocal_Worker+0x44>
			Modbus_Emission();
 8001652:	f000 f9dd 	bl	8001a10 <Modbus_Emission>
 8001656:	e01c      	b.n	8001692 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if (hModbus->Flag_URev) {
 8001658:	4b71      	ldr	r3, [pc, #452]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	7d9b      	ldrb	r3, [r3, #22]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d017      	beq.n	8001692 <Modbus_Protocal_Worker+0x7e>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001662:	4b6f      	ldr	r3, [pc, #444]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800166a:	4b6d      	ldr	r3, [pc, #436]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001672:	4b6b      	ldr	r3, [pc, #428]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b68      	ldr	r3, [pc, #416]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0201 	orr.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 800168a:	4b65      	ldr	r3, [pc, #404]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2203      	movs	r2, #3
 8001690:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 8001692:	4b63      	ldr	r3, [pc, #396]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b20      	cmp	r3, #32
 80016a0:	f040 80b3 	bne.w	800180a <Modbus_Protocal_Worker+0x1f6>
			hModbus->modbusUartStructure.RxTail = 0;
 80016a4:	4b5e      	ldr	r3, [pc, #376]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80016ae:	4b5c      	ldr	r3, [pc, #368]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68d8      	ldr	r0, [r3, #12]
 80016b4:	4b5a      	ldr	r3, [pc, #360]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b59      	ldr	r3, [pc, #356]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80016c0:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80016c4:	4413      	add	r3, r2
 80016c6:	3302      	adds	r3, #2
 80016c8:	2201      	movs	r2, #1
 80016ca:	4619      	mov	r1, r3
 80016cc:	f006 f922 	bl	8007914 <HAL_UART_Receive_IT>
		}
		break;
 80016d0:	e09b      	b.n	800180a <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 80016d2:	4b53      	ldr	r3, [pc, #332]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	7d1b      	ldrb	r3, [r3, #20]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 8098 	beq.w	800180e <Modbus_Protocal_Worker+0x1fa>
			/*reset recived flag*/
			hModbus->Flag_URev = 0;
 80016de:	4b50      	ldr	r3, [pc, #320]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2200      	movs	r2, #0
 80016e4:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80016e6:	4b4e      	ldr	r3, [pc, #312]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	22fe      	movs	r2, #254	; 0xfe
 80016ec:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80016ee:	4b4c      	ldr	r3, [pc, #304]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2204      	movs	r2, #4
 80016f4:	761a      	strb	r2, [r3, #24]
		}
		break;
 80016f6:	e08a      	b.n	800180e <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if (hModbus->Flag_URev) {
 80016f8:	4b49      	ldr	r3, [pc, #292]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	7d9b      	ldrb	r3, [r3, #22]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d009      	beq.n	8001716 <Modbus_Protocal_Worker+0x102>

			if (!hModbus->RecvStatus) {
 8001702:	4b47      	ldr	r3, [pc, #284]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d103      	bne.n	8001716 <Modbus_Protocal_Worker+0x102>
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800170e:	4b44      	ldr	r3, [pc, #272]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	22ff      	movs	r2, #255	; 0xff
 8001714:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 8001716:	4b42      	ldr	r3, [pc, #264]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800171e:	f113 0f02 	cmn.w	r3, #2
 8001722:	d150      	bne.n	80017c6 <Modbus_Protocal_Worker+0x1b2>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001724:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2200      	movs	r2, #0
 800172a:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx, hModbus->modbusUartStructure.RxTail - 2);
 800172c:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001734:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800173c:	3b02      	subs	r3, #2
 800173e:	4619      	mov	r1, r3
 8001740:	4610      	mov	r0, r2
 8001742:	f7ff ff31 	bl	80015a8 <CRC16>
 8001746:	4603      	mov	r3, r0
 8001748:	80bb      	strh	r3, [r7, #4]

			if (!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800174a:	793a      	ldrb	r2, [r7, #4]
 800174c:	4b34      	ldr	r3, [pc, #208]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 800174e:	6819      	ldr	r1, [r3, #0]
 8001750:	4b33      	ldr	r3, [pc, #204]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001758:	3b02      	subs	r3, #2
 800175a:	440b      	add	r3, r1
 800175c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001760:	429a      	cmp	r2, r3
 8001762:	d10c      	bne.n	800177e <Modbus_Protocal_Worker+0x16a>
					&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 1])) {
 8001764:	797a      	ldrb	r2, [r7, #5]
 8001766:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 8001768:	6819      	ldr	r1, [r3, #0]
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001772:	3b01      	subs	r3, #1
 8001774:	440b      	add	r3, r1
 8001776:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if (!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800177a:	429a      	cmp	r2, r3
 800177c:	d004      	beq.n	8001788 <Modbus_Protocal_Worker+0x174>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800177e:	4b28      	ldr	r3, [pc, #160]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	22ff      	movs	r2, #255	; 0xff
 8001784:	75da      	strb	r2, [r3, #23]
				break;
 8001786:	e047      	b.n	8001818 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001788:	4b25      	ldr	r3, [pc, #148]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d113      	bne.n	80017c2 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe, hModbus->modbusUartStructure.MessageBufferRx + 1, hModbus->modbusUartStructure.RxTail - 3);
 800179a:	4b21      	ldr	r3, [pc, #132]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f103 0019 	add.w	r0, r3, #25
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f203 2372 	addw	r3, r3, #626	; 0x272
 80017aa:	1c59      	adds	r1, r3, #1
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80017b4:	3b03      	subs	r3, #3
 80017b6:	461a      	mov	r2, r3
 80017b8:	f007 fa6e 	bl	8008c98 <memcpy>

			//execute command
			Modbus_frame_response();
 80017bc:	f000 f910 	bl	80019e0 <Modbus_frame_response>
 80017c0:	e001      	b.n	80017c6 <Modbus_Protocal_Worker+0x1b2>
				break;
 80017c2:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 80017c4:	e028      	b.n	8001818 <Modbus_Protocal_Worker+0x204>
		if (hModbus->Flag_T35TimeOut) {
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	7d5b      	ldrb	r3, [r3, #21]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d020      	beq.n	8001812 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2201      	movs	r2, #1
 80017d6:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	4618      	mov	r0, r3
 80017e0:	f006 f946 	bl	8007a70 <HAL_UART_AbortReceive>
		break;
 80017e4:	e015      	b.n	8001812 <Modbus_Protocal_Worker+0x1fe>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b20      	cmp	r3, #32
 80017f4:	d10f      	bne.n	8001816 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount = 0;
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <Modbus_Protocal_Worker+0x20c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	761a      	strb	r2, [r3, #24]
		break;
 8001808:	e005      	b.n	8001816 <Modbus_Protocal_Worker+0x202>
		break;
 800180a:	bf00      	nop
 800180c:	e004      	b.n	8001818 <Modbus_Protocal_Worker+0x204>
		break;
 800180e:	bf00      	nop
 8001810:	e002      	b.n	8001818 <Modbus_Protocal_Worker+0x204>
		break;
 8001812:	bf00      	nop
 8001814:	e000      	b.n	8001818 <Modbus_Protocal_Worker+0x204>
		break;
 8001816:	bf00      	nop
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000424 	.word	0x20000424

08001824 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <modbusWrite1Register+0x80>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	7e9b      	ldrb	r3, [r3, #26]
 8001830:	b29b      	uxth	r3, r3
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	b29a      	uxth	r2, r3
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <modbusWrite1Register+0x80>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	7edb      	ldrb	r3, [r3, #27]
 800183c:	b29b      	uxth	r3, r3
 800183e:	4413      	add	r3, r2
 8001840:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 8001842:	88fa      	ldrh	r2, [r7, #6]
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <modbusWrite1Register+0x80>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	429a      	cmp	r2, r3
 800184c:	d903      	bls.n	8001856 <modbusWrite1Register+0x32>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800184e:	2002      	movs	r0, #2
 8001850:	f000 f8a4 	bl	800199c <ModbusErrorReply>
		return;
 8001854:	e023      	b.n	800189e <modbusWrite1Register+0x7a>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <modbusWrite1Register+0x80>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <modbusWrite1Register+0x80>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	440b      	add	r3, r1
 8001866:	7f12      	ldrb	r2, [r2, #28]
 8001868:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <modbusWrite1Register+0x80>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <modbusWrite1Register+0x80>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6859      	ldr	r1, [r3, #4]
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	440b      	add	r3, r1
 800187a:	7f52      	ldrb	r2, [r2, #29]
 800187c:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <modbusWrite1Register+0x80>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f203 1045 	addw	r0, r3, #325	; 0x145
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <modbusWrite1Register+0x80>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	3319      	adds	r3, #25
 800188c:	2208      	movs	r2, #8
 800188e:	4619      	mov	r1, r3
 8001890:	f007 fa02 	bl	8008c98 <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <modbusWrite1Register+0x80>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2205      	movs	r2, #5
 800189a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000424 	.word	0x20000424

080018a8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8) + (hModbus->Rxframe[4]));
 80018ae:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <modbusRead1Register+0xf0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	7f1b      	ldrb	r3, [r3, #28]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	4b37      	ldr	r3, [pc, #220]	; (8001998 <modbusRead1Register+0xf0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	7f5b      	ldrb	r3, [r3, #29]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 80018c6:	4b34      	ldr	r3, [pc, #208]	; (8001998 <modbusRead1Register+0xf0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	7e9b      	ldrb	r3, [r3, #26]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <modbusRead1Register+0xf0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	7edb      	ldrb	r3, [r3, #27]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4413      	add	r3, r2
 80018dc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <modbusRead1Register+0x42>
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	2b7d      	cmp	r3, #125	; 0x7d
 80018e8:	d903      	bls.n	80018f2 <modbusRead1Register+0x4a>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80018ea:	2003      	movs	r0, #3
 80018ec:	f000 f856 	bl	800199c <ModbusErrorReply>
		return;
 80018f0:	e04e      	b.n	8001990 <modbusRead1Register+0xe8>
	}

	if (startAddress > hModbus->RegisterSize || (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 80018f2:	88ba      	ldrh	r2, [r7, #4]
 80018f4:	4b28      	ldr	r3, [pc, #160]	; (8001998 <modbusRead1Register+0xf0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d808      	bhi.n	8001910 <modbusRead1Register+0x68>
 80018fe:	88ba      	ldrh	r2, [r7, #4]
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	4413      	add	r3, r2
 8001904:	461a      	mov	r2, r3
 8001906:	4b24      	ldr	r3, [pc, #144]	; (8001998 <modbusRead1Register+0xf0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	429a      	cmp	r2, r3
 800190e:	d903      	bls.n	8001918 <modbusRead1Register+0x70>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001910:	2002      	movs	r0, #2
 8001912:	f000 f843 	bl	800199c <ModbusErrorReply>
		return;
 8001916:	e03b      	b.n	8001990 <modbusRead1Register+0xe8>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <modbusRead1Register+0xf0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2203      	movs	r2, #3
 800191e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <modbusRead1Register+0xf0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	0052      	lsls	r2, r2, #1
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 8001932:	2400      	movs	r4, #0
 8001934:	e020      	b.n	8001978 <modbusRead1Register+0xd0>
		hModbus->Txframe[2 * i + 2] = hModbus->RegisterAddress[startAddress + i].U8[1];
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <modbusRead1Register+0xf0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	88bb      	ldrh	r3, [r7, #4]
 800193e:	4423      	add	r3, r4
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	18d1      	adds	r1, r2, r3
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <modbusRead1Register+0xf0>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	1c63      	adds	r3, r4, #1
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	7849      	ldrb	r1, [r1, #1]
 800194e:	4413      	add	r3, r2
 8001950:	460a      	mov	r2, r1
 8001952:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2 * i + 3] = hModbus->RegisterAddress[startAddress + i].U8[0];
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <modbusRead1Register+0xf0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	88bb      	ldrh	r3, [r7, #4]
 800195e:	4423      	add	r3, r4
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	18d1      	adds	r1, r2, r3
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <modbusRead1Register+0xf0>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	0063      	lsls	r3, r4, #1
 800196a:	3303      	adds	r3, #3
 800196c:	7809      	ldrb	r1, [r1, #0]
 800196e:	4413      	add	r3, r2
 8001970:	460a      	mov	r2, r1
 8001972:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for (i = 0; i < numberOfDataToRead; i++) {
 8001976:	3401      	adds	r4, #1
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	429c      	cmp	r4, r3
 800197c:	dbdb      	blt.n	8001936 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	3301      	adds	r3, #1
 8001982:	b2da      	uxtb	r2, r3
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <modbusRead1Register+0xf0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	0052      	lsls	r2, r2, #1
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}
 8001996:	bf00      	nop
 8001998:	20000424 	.word	0x20000424

0800199c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <ModbusErrorReply+0x40>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	7e5a      	ldrb	r2, [r3, #25]
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <ModbusErrorReply+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <ModbusErrorReply+0x40>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	79fa      	ldrb	r2, [r7, #7]
 80019c0:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <ModbusErrorReply+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2202      	movs	r2, #2
 80019ca:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000424 	.word	0x20000424

080019e0 <Modbus_frame_response>:

void Modbus_frame_response() {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <Modbus_frame_response+0x2c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	7e5b      	ldrb	r3, [r3, #25]
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d004      	beq.n	80019f8 <Modbus_frame_response+0x18>
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d105      	bne.n	80019fe <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80019f2:	f7ff ff17 	bl	8001824 <modbusWrite1Register>
		break;
 80019f6:	e006      	b.n	8001a06 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80019f8:	f7ff ff56 	bl	80018a8 <modbusRead1Register>
		break;
 80019fc:	e003      	b.n	8001a06 <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7ff ffcc 	bl	800199c <ModbusErrorReply>
		break;
 8001a04:	bf00      	nop

	}
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000424 	.word	0x20000424

08001a10 <Modbus_Emission>:

void Modbus_Emission() {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001a16:	4b3e      	ldr	r3, [pc, #248]	; (8001b10 <Modbus_Emission+0x100>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b20      	cmp	r3, #32
 8001a24:	d160      	bne.n	8001ae8 <Modbus_Emission+0xd8>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001a26:	4b3a      	ldr	r3, [pc, #232]	; (8001b10 <Modbus_Emission+0x100>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <Modbus_Emission+0x100>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	7812      	ldrb	r2, [r2, #0]
 8001a30:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1, hModbus->Txframe, hModbus->TxCount);
 8001a34:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <Modbus_Emission+0x100>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8001a3c:	1c58      	adds	r0, r3, #1
 8001a3e:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <Modbus_Emission+0x100>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f203 1145 	addw	r1, r3, #325	; 0x145
 8001a46:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <Modbus_Emission+0x100>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f007 f922 	bl	8008c98 <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 8001a54:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <Modbus_Emission+0x100>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <Modbus_Emission+0x100>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3203      	adds	r2, #3
 8001a64:	b292      	uxth	r2, r2
 8001a66:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx, hModbus->modbusUartStructure.TxTail - 2);
 8001a6a:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <Modbus_Emission+0x100>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
 8001a72:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <Modbus_Emission+0x100>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001a7a:	3b02      	subs	r3, #2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4610      	mov	r0, r2
 8001a80:	f7ff fd92 	bl	80015a8 <CRC16>
 8001a84:	4603      	mov	r3, r0
 8001a86:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail - 2] = CalculateCRC.U8[0];
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <Modbus_Emission+0x100>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <Modbus_Emission+0x100>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001a94:	3b02      	subs	r3, #2
 8001a96:	7939      	ldrb	r1, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	460a      	mov	r2, r1
 8001a9c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail - 1] = CalculateCRC.U8[1];
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <Modbus_Emission+0x100>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <Modbus_Emission+0x100>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001aac:	3b01      	subs	r3, #1
 8001aae:	7979      	ldrb	r1, [r7, #5]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	460a      	mov	r2, r1
 8001ab4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		//sent modbus

		modbus_callback();
 8001ab8:	f001 f938 	bl	8002d2c <modbus_callback>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <Modbus_Emission+0x100>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b20      	cmp	r3, #32
 8001aca:	d10d      	bne.n	8001ae8 <Modbus_Emission+0xd8>
			HAL_UART_Transmit_DMA(hModbus->huart, hModbus->modbusUartStructure.MessageBufferTx, hModbus->modbusUartStructure.TxTail);
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <Modbus_Emission+0x100>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68d8      	ldr	r0, [r3, #12]
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <Modbus_Emission+0x100>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <Modbus_Emission+0x100>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f005 ff46 	bl	8007974 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <Modbus_Emission+0x100>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2200      	movs	r2, #0
 8001aee:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <Modbus_Emission+0x100>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2200      	movs	r2, #0
 8001af6:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev = 0;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <Modbus_Emission+0x100>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2200      	movs	r2, #0
 8001afe:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus = Modbus_state_Emission;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <Modbus_Emission+0x100>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2202      	movs	r2, #2
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000424 	.word	0x20000424

08001b14 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b28:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <MX_ADC1_Init+0x9c>)
 8001b2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b46:	4b19      	ldr	r3, [pc, #100]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b56:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <MX_ADC1_Init+0xa0>)
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b74:	480d      	ldr	r0, [pc, #52]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b76:	f001 fe55 	bl	8003824 <HAL_ADC_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b80:	f001 f8db 	bl	8002d3a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001b84:	230a      	movs	r3, #10
 8001b86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b90:	463b      	mov	r3, r7
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b96:	f001 fe89 	bl	80038ac <HAL_ADC_ConfigChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ba0:	f001 f8cb 	bl	8002d3a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000428 	.word	0x20000428
 8001bb0:	40012000 	.word	0x40012000
 8001bb4:	0f000001 	.word	0x0f000001

08001bb8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_ADC_MspInit+0x7c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d127      	bne.n	8001c2a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_ADC_MspInit+0x80>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <HAL_ADC_MspInit+0x80>)
 8001be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <HAL_ADC_MspInit+0x80>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_ADC_MspInit+0x80>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <HAL_ADC_MspInit+0x80>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <HAL_ADC_MspInit+0x80>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c12:	2303      	movs	r3, #3
 8001c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c16:	2303      	movs	r3, #3
 8001c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <HAL_ADC_MspInit+0x84>)
 8001c26:	f002 fd8f 	bl	8004748 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	3728      	adds	r7, #40	; 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40012000 	.word	0x40012000
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020800 	.word	0x40020800

08001c40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_DMA_Init+0x3c>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <MX_DMA_Init+0x3c>)
 8001c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_DMA_Init+0x3c>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	2011      	movs	r0, #17
 8001c68:	f002 f929 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001c6c:	2011      	movs	r0, #17
 8001c6e:	f002 f942 	bl	8003ef6 <HAL_NVIC_EnableIRQ>

}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800

08001c80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	; (8001d88 <MX_GPIO_Init+0x108>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a3a      	ldr	r2, [pc, #232]	; (8001d88 <MX_GPIO_Init+0x108>)
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <MX_GPIO_Init+0x108>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <MX_GPIO_Init+0x108>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a33      	ldr	r2, [pc, #204]	; (8001d88 <MX_GPIO_Init+0x108>)
 8001cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <MX_GPIO_Init+0x108>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <MX_GPIO_Init+0x108>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a2c      	ldr	r2, [pc, #176]	; (8001d88 <MX_GPIO_Init+0x108>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <MX_GPIO_Init+0x108>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <MX_GPIO_Init+0x108>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a25      	ldr	r2, [pc, #148]	; (8001d88 <MX_GPIO_Init+0x108>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <MX_GPIO_Init+0x108>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 8001d06:	2200      	movs	r2, #0
 8001d08:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8001d0c:	481f      	ldr	r0, [pc, #124]	; (8001d8c <MX_GPIO_Init+0x10c>)
 8001d0e:	f002 fe9f 	bl	8004a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d18:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4619      	mov	r1, r3
 8001d28:	4819      	ldr	r0, [pc, #100]	; (8001d90 <MX_GPIO_Init+0x110>)
 8001d2a:	f002 fd0d 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d2e:	230c      	movs	r3, #12
 8001d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4619      	mov	r1, r3
 8001d42:	4813      	ldr	r0, [pc, #76]	; (8001d90 <MX_GPIO_Init+0x110>)
 8001d44:	f002 fd00 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 8001d48:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480a      	ldr	r0, [pc, #40]	; (8001d8c <MX_GPIO_Init+0x10c>)
 8001d62:	f002 fcf1 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4806      	ldr	r0, [pc, #24]	; (8001d94 <MX_GPIO_Init+0x114>)
 8001d7c:	f002 fce4 	bl	8004748 <HAL_GPIO_Init>

}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	; 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020800 	.word	0x40020800
 8001d94:	40020400 	.word	0x40020400

08001d98 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001d9e:	4a13      	ldr	r2, [pc, #76]	; (8001dec <MX_I2C1_Init+0x54>)
 8001da0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001da4:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <MX_I2C1_Init+0x58>)
 8001da6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001db6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dd4:	4804      	ldr	r0, [pc, #16]	; (8001de8 <MX_I2C1_Init+0x50>)
 8001dd6:	f002 fe55 	bl	8004a84 <HAL_I2C_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001de0:	f000 ffab 	bl	8002d3a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000470 	.word	0x20000470
 8001dec:	40005400 	.word	0x40005400
 8001df0:	000186a0 	.word	0x000186a0

08001df4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a19      	ldr	r2, [pc, #100]	; (8001e78 <HAL_I2C_MspInit+0x84>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d12b      	bne.n	8001e6e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_I2C_MspInit+0x88>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <HAL_I2C_MspInit+0x88>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_I2C_MspInit+0x88>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e32:	23c0      	movs	r3, #192	; 0xc0
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e36:	2312      	movs	r3, #18
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e42:	2304      	movs	r3, #4
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	480c      	ldr	r0, [pc, #48]	; (8001e80 <HAL_I2C_MspInit+0x8c>)
 8001e4e:	f002 fc7b 	bl	8004748 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_I2C_MspInit+0x88>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_I2C_MspInit+0x88>)
 8001e5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_I2C_MspInit+0x88>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e6e:	bf00      	nop
 8001e70:	3728      	adds	r7, #40	; 0x28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40005400 	.word	0x40005400
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40020400 	.word	0x40020400

08001e84 <motor>:
#include "tim.h"

void motor(float voltage);
int32_t getRawPosition();

void motor(float voltage) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage > 0) {
 8001e8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9a:	dd11      	ble.n	8001ec0 <motor+0x3c>
		// forward
		if (voltage > 25000) {
 8001e9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001f34 <motor+0xb0>
 8001ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eac:	dd01      	ble.n	8001eb2 <motor+0x2e>
			voltage = 25000;
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <motor+0xb4>)
 8001eb0:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb8:	4820      	ldr	r0, [pc, #128]	; (8001f3c <motor+0xb8>)
 8001eba:	f002 fdc9 	bl	8004a50 <HAL_GPIO_WritePin>
 8001ebe:	e02b      	b.n	8001f18 <motor+0x94>
	} else if (voltage < 0) {
 8001ec0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ec4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	d521      	bpl.n	8001f12 <motor+0x8e>
		// backward
		voltage *= -1.0;
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fb42 	bl	8000558 <__aeabi_f2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f7fe fe8c 	bl	8000bf8 <__aeabi_d2f>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef1 7a67 	vneg.f32	s15, s15
 8001eea:	edc7 7a01 	vstr	s15, [r7, #4]
		if (voltage > 25000) {
 8001eee:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ef2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001f34 <motor+0xb0>
 8001ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efe:	dd01      	ble.n	8001f04 <motor+0x80>
			voltage = 25000;
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <motor+0xb4>)
 8001f02:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
 8001f04:	2201      	movs	r2, #1
 8001f06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f0a:	480c      	ldr	r0, [pc, #48]	; (8001f3c <motor+0xb8>)
 8001f0c:	f002 fda0 	bl	8004a50 <HAL_GPIO_WritePin>
 8001f10:	e002      	b.n	8001f18 <motor+0x94>
	} else {
		// stop
		voltage = 0;
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	607b      	str	r3, [r7, #4]
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, voltage);
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <motor+0xbc>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f24:	ee17 2a90 	vmov	r2, s15
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	46c35000 	.word	0x46c35000
 8001f38:	46c35000 	.word	0x46c35000
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	20000adc 	.word	0x20000adc

08001f44 <getRawPosition>:

int32_t getRawPosition() {
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <getRawPosition+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	20000b90 	.word	0x20000b90
 8001f5c:	00000000 	.word	0x00000000

08001f60 <localize>:
float calculateNorm(Coordinate coord);
Coordinate negateCoordinate(Coordinate coord);

// USER CODE ======================================================================================

void localize(Coordinate *inputs, Coordinate *outputs, Coordinate *origin, float *angle) {
 8001f60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f64:	b0a2      	sub	sp, #136	; 0x88
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	603b      	str	r3, [r7, #0]
	Coordinate point1 = inputs[0];
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f7a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point2 = inputs[1];
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f84:	3208      	adds	r2, #8
 8001f86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f8a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point3 = inputs[2];
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f94:	3210      	adds	r2, #16
 8001f96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f9a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate vectA = subtractCoordinates(point2, point1);
 8001f9e:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8001fa2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001fa6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001faa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001fae:	eeb0 1a46 	vmov.f32	s2, s12
 8001fb2:	eef0 1a66 	vmov.f32	s3, s13
 8001fb6:	eeb0 0a47 	vmov.f32	s0, s14
 8001fba:	eef0 0a67 	vmov.f32	s1, s15
 8001fbe:	f000 fbc7 	bl	8002750 <subtractCoordinates>
 8001fc2:	eeb0 7a40 	vmov.f32	s14, s0
 8001fc6:	eef0 7a60 	vmov.f32	s15, s1
 8001fca:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8001fce:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	Coordinate vectB = subtractCoordinates(point3, point2);
 8001fd2:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8001fd6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001fda:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001fde:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001fe2:	eeb0 1a46 	vmov.f32	s2, s12
 8001fe6:	eef0 1a66 	vmov.f32	s3, s13
 8001fea:	eeb0 0a47 	vmov.f32	s0, s14
 8001fee:	eef0 0a67 	vmov.f32	s1, s15
 8001ff2:	f000 fbad 	bl	8002750 <subtractCoordinates>
 8001ff6:	eeb0 7a40 	vmov.f32	s14, s0
 8001ffa:	eef0 7a60 	vmov.f32	s15, s1
 8001ffe:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8002002:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	Coordinate vectC = subtractCoordinates(point3, point1);
 8002006:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 800200a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800200e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002012:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002016:	eeb0 1a46 	vmov.f32	s2, s12
 800201a:	eef0 1a66 	vmov.f32	s3, s13
 800201e:	eeb0 0a47 	vmov.f32	s0, s14
 8002022:	eef0 0a67 	vmov.f32	s1, s15
 8002026:	f000 fb93 	bl	8002750 <subtractCoordinates>
 800202a:	eeb0 7a40 	vmov.f32	s14, s0
 800202e:	eef0 7a60 	vmov.f32	s15, s1
 8002032:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8002036:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float lenA = calculateNorm(vectA);
 800203a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800203e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002042:	eeb0 0a47 	vmov.f32	s0, s14
 8002046:	eef0 0a67 	vmov.f32	s1, s15
 800204a:	f000 fbbb 	bl	80027c4 <calculateNorm>
 800204e:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
	float lenB = calculateNorm(vectB);
 8002052:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002056:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800205a:	eeb0 0a47 	vmov.f32	s0, s14
 800205e:	eef0 0a67 	vmov.f32	s1, s15
 8002062:	f000 fbaf 	bl	80027c4 <calculateNorm>
 8002066:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	float lenC = calculateNorm(vectC);
 800206a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800206e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002072:	eeb0 0a47 	vmov.f32	s0, s14
 8002076:	eef0 0a67 	vmov.f32	s1, s15
 800207a:	f000 fba3 	bl	80027c4 <calculateNorm>
 800207e:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	Coordinate vector1;
	Coordinate vector2;

	if (lenA < lenB && lenB < lenC && lenA < lenC) {
 8002082:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002086:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800208a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002092:	d534      	bpl.n	80020fe <localize+0x19e>
 8002094:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002098:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800209c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a4:	d52b      	bpl.n	80020fe <localize+0x19e>
 80020a6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80020aa:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80020ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b6:	d522      	bpl.n	80020fe <localize+0x19e>
		// CASE 1
		*origin = point2;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	461a      	mov	r2, r3
 80020bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020c4:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectB;
 80020c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020cc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80020d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020d4:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = negateCoordinate(vectA);
 80020d8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80020dc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80020e0:	eeb0 0a47 	vmov.f32	s0, s14
 80020e4:	eef0 0a67 	vmov.f32	s1, s15
 80020e8:	f000 fb9f 	bl	800282a <negateCoordinate>
 80020ec:	eeb0 7a40 	vmov.f32	s14, s0
 80020f0:	eef0 7a60 	vmov.f32	s15, s1
 80020f4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80020f8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80020fc:	e134      	b.n	8002368 <localize+0x408>
	} else if (lenC < lenB && lenB < lenA && lenC < lenA) {
 80020fe:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002102:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002106:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800210a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210e:	d53e      	bpl.n	800218e <localize+0x22e>
 8002110:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002114:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002118:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002120:	d535      	bpl.n	800218e <localize+0x22e>
 8002122:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002126:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800212a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800212e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002132:	d52c      	bpl.n	800218e <localize+0x22e>
		// CASE 2
		*origin = point3;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	461a      	mov	r2, r3
 8002138:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800213c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002140:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectB);
 8002144:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002148:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800214c:	eeb0 0a47 	vmov.f32	s0, s14
 8002150:	eef0 0a67 	vmov.f32	s1, s15
 8002154:	f000 fb69 	bl	800282a <negateCoordinate>
 8002158:	eeb0 7a40 	vmov.f32	s14, s0
 800215c:	eef0 7a60 	vmov.f32	s15, s1
 8002160:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8002164:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectC);
 8002168:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800216c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002170:	eeb0 0a47 	vmov.f32	s0, s14
 8002174:	eef0 0a67 	vmov.f32	s1, s15
 8002178:	f000 fb57 	bl	800282a <negateCoordinate>
 800217c:	eeb0 7a40 	vmov.f32	s14, s0
 8002180:	eef0 7a60 	vmov.f32	s15, s1
 8002184:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8002188:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800218c:	e0ec      	b.n	8002368 <localize+0x408>
	} else if (lenA < lenC && lenC < lenB && lenA < lenB) {
 800218e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002192:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219e:	d52a      	bpl.n	80021f6 <localize+0x296>
 80021a0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80021a4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80021a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b0:	d521      	bpl.n	80021f6 <localize+0x296>
 80021b2:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80021b6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80021ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c2:	d518      	bpl.n	80021f6 <localize+0x296>
		// CASE 3
		*origin = point1;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	461a      	mov	r2, r3
 80021c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80021cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021d0:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectC;
 80021d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021e0:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectA;
 80021e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80021ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80021f4:	e0b8      	b.n	8002368 <localize+0x408>
	} else if (lenC < lenA && lenA < lenB && lenC < lenB) {
 80021f6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80021fa:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80021fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002206:	d52a      	bpl.n	800225e <localize+0x2fe>
 8002208:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800220c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002210:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002218:	d521      	bpl.n	800225e <localize+0x2fe>
 800221a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800221e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222a:	d518      	bpl.n	800225e <localize+0x2fe>
		// CASE 4
		*origin = point1;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	461a      	mov	r2, r3
 8002230:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002234:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002238:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectA;
 800223c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002240:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002244:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002248:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectC;
 800224c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002250:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002254:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002258:	e883 0003 	stmia.w	r3, {r0, r1}
 800225c:	e084      	b.n	8002368 <localize+0x408>
	} else if (lenB < lenC && lenC < lenA && lenB < lenA) {
 800225e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002262:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800226a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226e:	d53e      	bpl.n	80022ee <localize+0x38e>
 8002270:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002274:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800227c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002280:	d535      	bpl.n	80022ee <localize+0x38e>
 8002282:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002286:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800228a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	d52c      	bpl.n	80022ee <localize+0x38e>
		// CASE 5
		*origin = point3;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	461a      	mov	r2, r3
 8002298:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800229c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022a0:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectC);
 80022a4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80022a8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80022ac:	eeb0 0a47 	vmov.f32	s0, s14
 80022b0:	eef0 0a67 	vmov.f32	s1, s15
 80022b4:	f000 fab9 	bl	800282a <negateCoordinate>
 80022b8:	eeb0 7a40 	vmov.f32	s14, s0
 80022bc:	eef0 7a60 	vmov.f32	s15, s1
 80022c0:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80022c4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectB);
 80022c8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80022cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80022d0:	eeb0 0a47 	vmov.f32	s0, s14
 80022d4:	eef0 0a67 	vmov.f32	s1, s15
 80022d8:	f000 faa7 	bl	800282a <negateCoordinate>
 80022dc:	eeb0 7a40 	vmov.f32	s14, s0
 80022e0:	eef0 7a60 	vmov.f32	s15, s1
 80022e4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80022e8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80022ec:	e03c      	b.n	8002368 <localize+0x408>
	} else if (lenB < lenA && lenA < lenC && lenB < lenC) {
 80022ee:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80022f2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80022f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fe:	d533      	bpl.n	8002368 <localize+0x408>
 8002300:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002304:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002308:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800230c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002310:	d52a      	bpl.n	8002368 <localize+0x408>
 8002312:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002316:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800231a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800231e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002322:	d521      	bpl.n	8002368 <localize+0x408>
		// CASE 6
		*origin = point2;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	461a      	mov	r2, r3
 8002328:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800232c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002330:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectA);
 8002334:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002338:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800233c:	eeb0 0a47 	vmov.f32	s0, s14
 8002340:	eef0 0a67 	vmov.f32	s1, s15
 8002344:	f000 fa71 	bl	800282a <negateCoordinate>
 8002348:	eeb0 7a40 	vmov.f32	s14, s0
 800234c:	eef0 7a60 	vmov.f32	s15, s1
 8002350:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8002354:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = vectB;
 8002358:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800235c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002360:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002364:	e883 0003 	stmia.w	r3, {r0, r1}
	}

	// calculate vector angle
	if (vector1.x == 0) {
 8002368:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800236c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002374:	d10e      	bne.n	8002394 <localize+0x434>
		if (vector1.y > 0) {
 8002376:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800237a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800237e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002382:	dd03      	ble.n	800238c <localize+0x42c>
			*angle = M_PI / 2.0;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4a72      	ldr	r2, [pc, #456]	; (8002550 <localize+0x5f0>)
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	e092      	b.n	80024b2 <localize+0x552>
		} else {
			*angle = 1.5 * M_PI;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	4a71      	ldr	r2, [pc, #452]	; (8002554 <localize+0x5f4>)
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e08e      	b.n	80024b2 <localize+0x552>
		}
	} else if (vector1.y == 0) {
 8002394:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002398:	eef5 7a40 	vcmp.f32	s15, #0.0
 800239c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a0:	d10f      	bne.n	80023c2 <localize+0x462>
		if (vector1.x >= 0) {
 80023a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80023a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	db04      	blt.n	80023ba <localize+0x45a>
			*angle = 0;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e07b      	b.n	80024b2 <localize+0x552>
		} else {
			*angle = M_PI;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	4a66      	ldr	r2, [pc, #408]	; (8002558 <localize+0x5f8>)
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e077      	b.n	80024b2 <localize+0x552>
		}
	} else {
		*angle = fabs(atan(vector1.y / vector1.x));
 80023c2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80023c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80023ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023ce:	ee16 0a90 	vmov	r0, s13
 80023d2:	f7fe f8c1 	bl	8000558 <__aeabi_f2d>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	ec43 2b10 	vmov	d0, r2, r3
 80023de:	f00b f8d3 	bl	800d588 <atan>
 80023e2:	ec53 2b10 	vmov	r2, r3, d0
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	f7fe fc05 	bl	8000bf8 <__aeabi_d2f>
 80023ee:	ee07 0a90 	vmov	s15, r0
 80023f2:	eef0 7ae7 	vabs.f32	s15, s15
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	edc3 7a00 	vstr	s15, [r3]
		if (vector1.x < 0 && vector1.y < 0) {
 80023fc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002400:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002408:	d51a      	bpl.n	8002440 <localize+0x4e0>
 800240a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800240e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002416:	d513      	bpl.n	8002440 <localize+0x4e0>
			*angle = M_PI + *angle;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f89b 	bl	8000558 <__aeabi_f2d>
 8002422:	a347      	add	r3, pc, #284	; (adr r3, 8002540 <localize+0x5e0>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fd ff38 	bl	800029c <__adddf3>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7fe fbe0 	bl	8000bf8 <__aeabi_d2f>
 8002438:	4602      	mov	r2, r0
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e038      	b.n	80024b2 <localize+0x552>
		} else if (vector1.x < 0) {
 8002440:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002444:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244c:	d515      	bpl.n	800247a <localize+0x51a>
			*angle = M_PI - *angle;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe f880 	bl	8000558 <__aeabi_f2d>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	a138      	add	r1, pc, #224	; (adr r1, 8002540 <localize+0x5e0>)
 800245e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002462:	f7fd ff19 	bl	8000298 <__aeabi_dsub>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4610      	mov	r0, r2
 800246c:	4619      	mov	r1, r3
 800246e:	f7fe fbc3 	bl	8000bf8 <__aeabi_d2f>
 8002472:	4602      	mov	r2, r0
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e01b      	b.n	80024b2 <localize+0x552>
		} else if (vector1.y < 0) {
 800247a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800247e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002486:	d514      	bpl.n	80024b2 <localize+0x552>
			*angle = 2.0 * M_PI - *angle;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe f863 	bl	8000558 <__aeabi_f2d>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	a12c      	add	r1, pc, #176	; (adr r1, 8002548 <localize+0x5e8>)
 8002498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800249c:	f7fd fefc 	bl	8000298 <__aeabi_dsub>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	f7fe fba6 	bl	8000bf8 <__aeabi_d2f>
 80024ac:	4602      	mov	r2, r0
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	601a      	str	r2, [r3, #0]
		}
	}

	// calculate for matrix directions
	float dir = vector1.x * vector2.y - vector1.y * vector2.x;
 80024b2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80024b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024be:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80024c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ce:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	if (dir < 0) {
 80024d2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80024d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024de:	d516      	bpl.n	800250e <localize+0x5ae>
		*angle = *angle + M_PI;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe f837 	bl	8000558 <__aeabi_f2d>
 80024ea:	a315      	add	r3, pc, #84	; (adr r3, 8002540 <localize+0x5e0>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fd fed4 	bl	800029c <__adddf3>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7fe fb7c 	bl	8000bf8 <__aeabi_d2f>
 8002500:	4602      	mov	r2, r0
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	601a      	str	r2, [r3, #0]
		dir = -1.0;
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <localize+0x5fc>)
 8002508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800250c:	e003      	b.n	8002516 <localize+0x5b6>
	} else {
		dir = 1.0;
 800250e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	}

	// create 9 points
	float X[] = { 10.0, 30.0, 50.0 };
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <localize+0x600>)
 8002518:	f107 031c 	add.w	r3, r7, #28
 800251c:	ca07      	ldmia	r2, {r0, r1, r2}
 800251e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float Y[] = { 10.0, 25.0, 40.0 };
 8002522:	4a10      	ldr	r2, [pc, #64]	; (8002564 <localize+0x604>)
 8002524:	f107 0310 	add.w	r3, r7, #16
 8002528:	ca07      	ldmia	r2, {r0, r1, r2}
 800252a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < 3; i++) {
 800252e:	2300      	movs	r3, #0
 8002530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002534:	e0e1      	b.n	80026fa <localize+0x79a>
		for (int j = 0; j < 3; j++) {
 8002536:	2300      	movs	r3, #0
 8002538:	67fb      	str	r3, [r7, #124]	; 0x7c
 800253a:	e0d5      	b.n	80026e8 <localize+0x788>
 800253c:	f3af 8000 	nop.w
 8002540:	54442d18 	.word	0x54442d18
 8002544:	400921fb 	.word	0x400921fb
 8002548:	54442d18 	.word	0x54442d18
 800254c:	401921fb 	.word	0x401921fb
 8002550:	3fc90fdb 	.word	0x3fc90fdb
 8002554:	4096cbe4 	.word	0x4096cbe4
 8002558:	40490fdb 	.word	0x40490fdb
 800255c:	bf800000 	.word	0xbf800000
 8002560:	0800ebe8 	.word	0x0800ebe8
 8002564:	0800ebf4 	.word	0x0800ebf4
			double angleValue = (double) (*angle);  // Dereference and convert to double
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7fd fff3 	bl	8000558 <__aeabi_f2d>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			outputs[i * 3 + j].x = origin->x + X[i] * dir * cos(angleValue) - Y[j] * sin(angleValue);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fd ffea 	bl	8000558 <__aeabi_f2d>
 8002584:	4604      	mov	r4, r0
 8002586:	460d      	mov	r5, r1
 8002588:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	3388      	adds	r3, #136	; 0x88
 8002590:	443b      	add	r3, r7
 8002592:	3b6c      	subs	r3, #108	; 0x6c
 8002594:	ed93 7a00 	vldr	s14, [r3]
 8002598:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800259c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a0:	ee17 0a90 	vmov	r0, s15
 80025a4:	f7fd ffd8 	bl	8000558 <__aeabi_f2d>
 80025a8:	4680      	mov	r8, r0
 80025aa:	4689      	mov	r9, r1
 80025ac:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80025b0:	f00b f98a 	bl	800d8c8 <cos>
 80025b4:	ec53 2b10 	vmov	r2, r3, d0
 80025b8:	4640      	mov	r0, r8
 80025ba:	4649      	mov	r1, r9
 80025bc:	f7fe f824 	bl	8000608 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4620      	mov	r0, r4
 80025c6:	4629      	mov	r1, r5
 80025c8:	f7fd fe68 	bl	800029c <__adddf3>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4690      	mov	r8, r2
 80025d2:	4699      	mov	r9, r3
 80025d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	3388      	adds	r3, #136	; 0x88
 80025da:	443b      	add	r3, r7
 80025dc:	3b78      	subs	r3, #120	; 0x78
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd ffb9 	bl	8000558 <__aeabi_f2d>
 80025e6:	4604      	mov	r4, r0
 80025e8:	460d      	mov	r5, r1
 80025ea:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80025ee:	f00b f9cb 	bl	800d988 <sin>
 80025f2:	ec53 2b10 	vmov	r2, r3, d0
 80025f6:	4620      	mov	r0, r4
 80025f8:	4629      	mov	r1, r5
 80025fa:	f7fe f805 	bl	8000608 <__aeabi_dmul>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4640      	mov	r0, r8
 8002604:	4649      	mov	r1, r9
 8002606:	f7fd fe47 	bl	8000298 <__aeabi_dsub>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	441a      	add	r2, r3
 800261c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	18d4      	adds	r4, r2, r3
 8002626:	f7fe fae7 	bl	8000bf8 <__aeabi_d2f>
 800262a:	4603      	mov	r3, r0
 800262c:	6023      	str	r3, [r4, #0]
			outputs[i * 3 + j].y = origin->y + X[i] * dir * sin(angleValue) + Y[j] * cos(angleValue);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd ff90 	bl	8000558 <__aeabi_f2d>
 8002638:	4604      	mov	r4, r0
 800263a:	460d      	mov	r5, r1
 800263c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	3388      	adds	r3, #136	; 0x88
 8002644:	443b      	add	r3, r7
 8002646:	3b6c      	subs	r3, #108	; 0x6c
 8002648:	ed93 7a00 	vldr	s14, [r3]
 800264c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002654:	ee17 0a90 	vmov	r0, s15
 8002658:	f7fd ff7e 	bl	8000558 <__aeabi_f2d>
 800265c:	4680      	mov	r8, r0
 800265e:	4689      	mov	r9, r1
 8002660:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002664:	f00b f990 	bl	800d988 <sin>
 8002668:	ec53 2b10 	vmov	r2, r3, d0
 800266c:	4640      	mov	r0, r8
 800266e:	4649      	mov	r1, r9
 8002670:	f7fd ffca 	bl	8000608 <__aeabi_dmul>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4620      	mov	r0, r4
 800267a:	4629      	mov	r1, r5
 800267c:	f7fd fe0e 	bl	800029c <__adddf3>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4690      	mov	r8, r2
 8002686:	4699      	mov	r9, r3
 8002688:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	3388      	adds	r3, #136	; 0x88
 800268e:	443b      	add	r3, r7
 8002690:	3b78      	subs	r3, #120	; 0x78
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd ff5f 	bl	8000558 <__aeabi_f2d>
 800269a:	4604      	mov	r4, r0
 800269c:	460d      	mov	r5, r1
 800269e:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80026a2:	f00b f911 	bl	800d8c8 <cos>
 80026a6:	ec53 2b10 	vmov	r2, r3, d0
 80026aa:	4620      	mov	r0, r4
 80026ac:	4629      	mov	r1, r5
 80026ae:	f7fd ffab 	bl	8000608 <__aeabi_dmul>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4640      	mov	r0, r8
 80026b8:	4649      	mov	r1, r9
 80026ba:	f7fd fdef 	bl	800029c <__adddf3>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026ca:	4613      	mov	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	441a      	add	r2, r3
 80026d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	18d4      	adds	r4, r2, r3
 80026da:	f7fe fa8d 	bl	8000bf8 <__aeabi_d2f>
 80026de:	4603      	mov	r3, r0
 80026e0:	6063      	str	r3, [r4, #4]
		for (int j = 0; j < 3; j++) {
 80026e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026e4:	3301      	adds	r3, #1
 80026e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	f77f af3c 	ble.w	8002568 <localize+0x608>
	for (int i = 0; i < 3; i++) {
 80026f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026f4:	3301      	adds	r3, #1
 80026f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026fe:	2b02      	cmp	r3, #2
 8002700:	f77f af19 	ble.w	8002536 <localize+0x5d6>
		}
	}

	// dirty fix for angle error
	if (dir < 0){
 8002704:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002708:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800270c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002710:	d400      	bmi.n	8002714 <localize+0x7b4>
		*angle = *angle - M_PI;
	}
}
 8002712:	e012      	b.n	800273a <localize+0x7da>
		*angle = *angle - M_PI;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd ff1d 	bl	8000558 <__aeabi_f2d>
 800271e:	a30a      	add	r3, pc, #40	; (adr r3, 8002748 <localize+0x7e8>)
 8002720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002724:	f7fd fdb8 	bl	8000298 <__aeabi_dsub>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	f7fe fa62 	bl	8000bf8 <__aeabi_d2f>
 8002734:	4602      	mov	r2, r0
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	601a      	str	r2, [r3, #0]
}
 800273a:	bf00      	nop
 800273c:	3788      	adds	r7, #136	; 0x88
 800273e:	46bd      	mov	sp, r7
 8002740:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002744:	f3af 8000 	nop.w
 8002748:	54442d18 	.word	0x54442d18
 800274c:	400921fb 	.word	0x400921fb

08002750 <subtractCoordinates>:

Coordinate subtractCoordinates(Coordinate coord1, Coordinate coord2) {
 8002750:	b480      	push	{r7}
 8002752:	b08b      	sub	sp, #44	; 0x2c
 8002754:	af00      	add	r7, sp, #0
 8002756:	eeb0 6a40 	vmov.f32	s12, s0
 800275a:	eef0 6a60 	vmov.f32	s13, s1
 800275e:	eeb0 7a41 	vmov.f32	s14, s2
 8002762:	eef0 7a61 	vmov.f32	s15, s3
 8002766:	ed87 6a04 	vstr	s12, [r7, #16]
 800276a:	edc7 6a05 	vstr	s13, [r7, #20]
 800276e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002772:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = coord1.x - coord2.x;
 8002776:	ed97 7a04 	vldr	s14, [r7, #16]
 800277a:	edd7 7a02 	vldr	s15, [r7, #8]
 800277e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002782:	edc7 7a06 	vstr	s15, [r7, #24]
	result.y = coord1.y - coord2.y;
 8002786:	ed97 7a05 	vldr	s14, [r7, #20]
 800278a:	edd7 7a03 	vldr	s15, [r7, #12]
 800278e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002792:	edc7 7a07 	vstr	s15, [r7, #28]
	return result;
 8002796:	f107 0320 	add.w	r3, r7, #32
 800279a:	f107 0218 	add.w	r2, r7, #24
 800279e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80027a6:	6a3a      	ldr	r2, [r7, #32]
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	ee07 2a10 	vmov	s14, r2
 80027ae:	ee07 3a90 	vmov	s15, r3
}
 80027b2:	eeb0 0a47 	vmov.f32	s0, s14
 80027b6:	eef0 0a67 	vmov.f32	s1, s15
 80027ba:	372c      	adds	r7, #44	; 0x2c
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <calculateNorm>:

float calculateNorm(Coordinate coord) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	eeb0 7a40 	vmov.f32	s14, s0
 80027ce:	eef0 7a60 	vmov.f32	s15, s1
 80027d2:	ed87 7a00 	vstr	s14, [r7]
 80027d6:	edc7 7a01 	vstr	s15, [r7, #4]
	float norm = sqrt(coord.x * coord.x + coord.y * coord.y);
 80027da:	ed97 7a00 	vldr	s14, [r7]
 80027de:	edd7 7a00 	vldr	s15, [r7]
 80027e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027e6:	edd7 6a01 	vldr	s13, [r7, #4]
 80027ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f6:	ee17 0a90 	vmov	r0, s15
 80027fa:	f7fd fead 	bl	8000558 <__aeabi_f2d>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	ec43 2b10 	vmov	d0, r2, r3
 8002806:	f00b f917 	bl	800da38 <sqrt>
 800280a:	ec53 2b10 	vmov	r2, r3, d0
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	f7fe f9f1 	bl	8000bf8 <__aeabi_d2f>
 8002816:	4603      	mov	r3, r0
 8002818:	60fb      	str	r3, [r7, #12]
	return norm;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	ee07 3a90 	vmov	s15, r3
}
 8002820:	eeb0 0a67 	vmov.f32	s0, s15
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <negateCoordinate>:

Coordinate negateCoordinate(Coordinate coord) {
 800282a:	b480      	push	{r7}
 800282c:	b089      	sub	sp, #36	; 0x24
 800282e:	af00      	add	r7, sp, #0
 8002830:	eeb0 7a40 	vmov.f32	s14, s0
 8002834:	eef0 7a60 	vmov.f32	s15, s1
 8002838:	ed87 7a02 	vstr	s14, [r7, #8]
 800283c:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = -coord.x;
 8002840:	edd7 7a02 	vldr	s15, [r7, #8]
 8002844:	eef1 7a67 	vneg.f32	s15, s15
 8002848:	edc7 7a04 	vstr	s15, [r7, #16]
	result.y = -coord.y;
 800284c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002850:	eef1 7a67 	vneg.f32	s15, s15
 8002854:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 8002858:	f107 0318 	add.w	r3, r7, #24
 800285c:	f107 0210 	add.w	r2, r7, #16
 8002860:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002864:	e883 0003 	stmia.w	r3, {r0, r1}
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	ee07 2a10 	vmov	s14, r2
 8002870:	ee07 3a90 	vmov	s15, r3
}
 8002874:	eeb0 0a47 	vmov.f32	s0, s14
 8002878:	eef0 0a67 	vmov.f32	s1, s15
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <modbus_init>:
void modbus_data_sync(MB *variables);
void modbus_init();

// USER CODE ======================================================================================

void modbus_init(){
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
	hmodbus.huart = &huart2;
 800288c:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <modbus_init+0x28>)
 800288e:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <modbus_init+0x2c>)
 8002890:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <modbus_init+0x28>)
 8002894:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <modbus_init+0x30>)
 8002896:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <modbus_init+0x28>)
 800289a:	2215      	movs	r2, #21
 800289c:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 800289e:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <modbus_init+0x28>)
 80028a0:	2246      	movs	r2, #70	; 0x46
 80028a2:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, MBregisterFrame);
 80028a4:	4905      	ldr	r1, [pc, #20]	; (80028bc <modbus_init+0x34>)
 80028a6:	4802      	ldr	r0, [pc, #8]	; (80028b0 <modbus_init+0x28>)
 80028a8:	f7fe fe28 	bl	80014fc <Modbus_init>
}
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	200004c4 	.word	0x200004c4
 80028b4:	20000e20 	.word	0x20000e20
 80028b8:	20000cf8 	.word	0x20000cf8
 80028bc:	2000099c 	.word	0x2000099c

080028c0 <modbus_heartbeat_handler>:

void modbus_heartbeat_handler(MB *variables) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
	static int8_t fail = 0;
	static uint32_t timestamp = 0;
	if (HAL_GetTick() >= timestamp) {
 80028c8:	f000 ffa0 	bl	800380c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <modbus_heartbeat_handler+0x78>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d32c      	bcc.n	8002930 <modbus_heartbeat_handler+0x70>
		timestamp = HAL_GetTick() + 200;
 80028d6:	f000 ff99 	bl	800380c <HAL_GetTick>
 80028da:	4603      	mov	r3, r0
 80028dc:	33c8      	adds	r3, #200	; 0xc8
 80028de:	4a16      	ldr	r2, [pc, #88]	; (8002938 <modbus_heartbeat_handler+0x78>)
 80028e0:	6013      	str	r3, [r2, #0]

		// check if the base system send heartbeat
		if (MBregisterFrame[0].U16 == 18537) {
 80028e2:	4b16      	ldr	r3, [pc, #88]	; (800293c <modbus_heartbeat_handler+0x7c>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	f644 0269 	movw	r2, #18537	; 0x4869
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d106      	bne.n	80028fc <modbus_heartbeat_handler+0x3c>
			// success
			variables->heartbeat = 1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	849a      	strh	r2, [r3, #36]	; 0x24
			fail = 0;
 80028f4:	4b12      	ldr	r3, [pc, #72]	; (8002940 <modbus_heartbeat_handler+0x80>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
 80028fa:	e015      	b.n	8002928 <modbus_heartbeat_handler+0x68>
		} else {
			// fail, count failure
			if (fail < 126) {
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <modbus_heartbeat_handler+0x80>)
 80028fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002902:	2b7d      	cmp	r3, #125	; 0x7d
 8002904:	dc08      	bgt.n	8002918 <modbus_heartbeat_handler+0x58>
				fail++;
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <modbus_heartbeat_handler+0x80>)
 8002908:	f993 3000 	ldrsb.w	r3, [r3]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	3301      	adds	r3, #1
 8002910:	b2db      	uxtb	r3, r3
 8002912:	b25a      	sxtb	r2, r3
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <modbus_heartbeat_handler+0x80>)
 8002916:	701a      	strb	r2, [r3, #0]
			}
			// if fail is too high then system is disconnected
			if (fail > 9) {
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <modbus_heartbeat_handler+0x80>)
 800291a:	f993 3000 	ldrsb.w	r3, [r3]
 800291e:	2b09      	cmp	r3, #9
 8002920:	dd02      	ble.n	8002928 <modbus_heartbeat_handler+0x68>
				variables->heartbeat = 0;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	849a      	strh	r2, [r3, #36]	; 0x24
			}
		}

		// set heartbeat for base system to see
		MBregisterFrame[0].U16 = 22881;
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <modbus_heartbeat_handler+0x7c>)
 800292a:	f645 1261 	movw	r2, #22881	; 0x5961
 800292e:	801a      	strh	r2, [r3, #0]
	}
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000ac8 	.word	0x20000ac8
 800293c:	2000099c 	.word	0x2000099c
 8002940:	20000acc 	.word	0x20000acc

08002944 <modbus_data_sync>:

void modbus_data_sync(MB *variables) {
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	// report data back to base system
	MBregisterFrame[0x10].U16 = variables->y_moving_status;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002952:	b29a      	uxth	r2, r3
 8002954:	4b72      	ldr	r3, [pc, #456]	; (8002b20 <modbus_data_sync+0x1dc>)
 8002956:	841a      	strh	r2, [r3, #32]
	MBregisterFrame[0x11].U16 = variables->y_actual_position;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800295e:	b29a      	uxth	r2, r3
 8002960:	4b6f      	ldr	r3, [pc, #444]	; (8002b20 <modbus_data_sync+0x1dc>)
 8002962:	845a      	strh	r2, [r3, #34]	; 0x22
	MBregisterFrame[0x12].U16 = variables->y_actual_speed;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800296a:	b29a      	uxth	r2, r3
 800296c:	4b6c      	ldr	r3, [pc, #432]	; (8002b20 <modbus_data_sync+0x1dc>)
 800296e:	849a      	strh	r2, [r3, #36]	; 0x24
	MBregisterFrame[0x13].U16 = variables->y_actual_acceleration;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002976:	b29a      	uxth	r2, r3
 8002978:	4b69      	ldr	r3, [pc, #420]	; (8002b20 <modbus_data_sync+0x1dc>)
 800297a:	84da      	strh	r2, [r3, #38]	; 0x26
	MBregisterFrame[0x20].U16 = variables->pick_tray_origin_x;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002982:	b29a      	uxth	r2, r3
 8002984:	4b66      	ldr	r3, [pc, #408]	; (8002b20 <modbus_data_sync+0x1dc>)
 8002986:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	MBregisterFrame[0x21].U16 = variables->pick_tray_origin_y;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002990:	b29a      	uxth	r2, r3
 8002992:	4b63      	ldr	r3, [pc, #396]	; (8002b20 <modbus_data_sync+0x1dc>)
 8002994:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	MBregisterFrame[0x22].U16 = variables->pick_tray_orientation;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800299e:	b29a      	uxth	r2, r3
 80029a0:	4b5f      	ldr	r3, [pc, #380]	; (8002b20 <modbus_data_sync+0x1dc>)
 80029a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	MBregisterFrame[0x23].U16 = variables->place_tray_origin_x;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <modbus_data_sync+0x1dc>)
 80029b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	MBregisterFrame[0x24].U16 = variables->place_tray_origin_y;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	4b58      	ldr	r3, [pc, #352]	; (8002b20 <modbus_data_sync+0x1dc>)
 80029be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	MBregisterFrame[0x25].U16 = variables->place_tray_orientation;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	4b55      	ldr	r3, [pc, #340]	; (8002b20 <modbus_data_sync+0x1dc>)
 80029cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	MBregisterFrame[0x41].U16 = variables->x_target_position;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	4b51      	ldr	r3, [pc, #324]	; (8002b20 <modbus_data_sync+0x1dc>)
 80029da:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	MBregisterFrame[0x42].U16 = variables->x_target_speed;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	4b4e      	ldr	r3, [pc, #312]	; (8002b20 <modbus_data_sync+0x1dc>)
 80029e8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	MBregisterFrame[0x43].U16 = variables->x_target_acceleration_time;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <modbus_data_sync+0x1dc>)
 80029f6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

	// get data from base system
	variables->goal_point_x = MBregisterFrame[0x30].U16;
 80029fa:	4b49      	ldr	r3, [pc, #292]	; (8002b20 <modbus_data_sync+0x1dc>)
 80029fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002a00:	b21a      	sxth	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	805a      	strh	r2, [r3, #2]
	variables->goal_point_y = MBregisterFrame[0x31].U16;
 8002a06:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <modbus_data_sync+0x1dc>)
 8002a08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002a0c:	b21a      	sxth	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	809a      	strh	r2, [r3, #4]
	variables->x_actual_position = MBregisterFrame[0x44].U16;
 8002a12:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <modbus_data_sync+0x1dc>)
 8002a14:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002a18:	b21a      	sxth	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	80da      	strh	r2, [r3, #6]
	variables->x_actual_speed = MBregisterFrame[0x45].U16;
 8002a1e:	4b40      	ldr	r3, [pc, #256]	; (8002b20 <modbus_data_sync+0x1dc>)
 8002a20:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002a24:	b21a      	sxth	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	811a      	strh	r2, [r3, #8]

	static int16_t base_system_status_master_temp;
	if (base_system_status_master_temp != MBregisterFrame[0x01].U16) {
 8002a2a:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <modbus_data_sync+0x1e0>)
 8002a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <modbus_data_sync+0x1dc>)
 8002a34:	885b      	ldrh	r3, [r3, #2]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d009      	beq.n	8002a4e <modbus_data_sync+0x10a>
		variables->base_system_status = MBregisterFrame[0x01].U16;
 8002a3a:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <modbus_data_sync+0x1dc>)
 8002a3c:	885b      	ldrh	r3, [r3, #2]
 8002a3e:	b21a      	sxth	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	801a      	strh	r2, [r3, #0]
		base_system_status_master_temp = variables->base_system_status;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a4a:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <modbus_data_sync+0x1e0>)
 8002a4c:	801a      	strh	r2, [r3, #0]
	}

	// update read/write variable
	static int16_t end_effector_status_slave_temp;
	static int16_t end_effector_status_master_temp;
	if (end_effector_status_master_temp != MBregisterFrame[0x02].U16) {
 8002a4e:	4b36      	ldr	r3, [pc, #216]	; (8002b28 <modbus_data_sync+0x1e4>)
 8002a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <modbus_data_sync+0x1dc>)
 8002a58:	889b      	ldrh	r3, [r3, #4]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d00f      	beq.n	8002a7e <modbus_data_sync+0x13a>
		// there is an update from master
		variables->end_effector_status = MBregisterFrame[0x02].U16;
 8002a5e:	4b30      	ldr	r3, [pc, #192]	; (8002b20 <modbus_data_sync+0x1dc>)
 8002a60:	889b      	ldrh	r3, [r3, #4]
 8002a62:	b21a      	sxth	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	84da      	strh	r2, [r3, #38]	; 0x26
		end_effector_status_master_temp = variables->end_effector_status;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002a6e:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <modbus_data_sync+0x1e4>)
 8002a70:	801a      	strh	r2, [r3, #0]
		end_effector_status_slave_temp = variables->end_effector_status;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002a78:	4b2c      	ldr	r3, [pc, #176]	; (8002b2c <modbus_data_sync+0x1e8>)
 8002a7a:	801a      	strh	r2, [r3, #0]
 8002a7c:	e017      	b.n	8002aae <modbus_data_sync+0x16a>
	} else if (end_effector_status_slave_temp != variables->end_effector_status) {
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002a84:	4b29      	ldr	r3, [pc, #164]	; (8002b2c <modbus_data_sync+0x1e8>)
 8002a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d00f      	beq.n	8002aae <modbus_data_sync+0x16a>
		// there is an update locally
		MBregisterFrame[0x02].U16 = variables->end_effector_status;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	4b22      	ldr	r3, [pc, #136]	; (8002b20 <modbus_data_sync+0x1dc>)
 8002a98:	809a      	strh	r2, [r3, #4]
		end_effector_status_slave_temp = variables->end_effector_status;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002aa0:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <modbus_data_sync+0x1e8>)
 8002aa2:	801a      	strh	r2, [r3, #0]
		end_effector_status_master_temp = variables->end_effector_status;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <modbus_data_sync+0x1e4>)
 8002aac:	801a      	strh	r2, [r3, #0]
	}
	static int16_t x_moving_status_slave_temp;
	static int16_t x_moving_status_master_temp;
	if (x_moving_status_master_temp != MBregisterFrame[0x40].U16) {
 8002aae:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <modbus_data_sync+0x1ec>)
 8002ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <modbus_data_sync+0x1dc>)
 8002ab8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d010      	beq.n	8002ae2 <modbus_data_sync+0x19e>
		// there is an update from master
		variables->x_moving_status = MBregisterFrame[0x40].U16;
 8002ac0:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <modbus_data_sync+0x1dc>)
 8002ac2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002ac6:	b21a      	sxth	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
		x_moving_status_master_temp = variables->x_moving_status;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002ad2:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <modbus_data_sync+0x1ec>)
 8002ad4:	801a      	strh	r2, [r3, #0]
		x_moving_status_slave_temp = variables->x_moving_status;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002adc:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <modbus_data_sync+0x1f0>)
 8002ade:	801a      	strh	r2, [r3, #0]
		// there is an update locally
		MBregisterFrame[0x40].U16 = variables->x_moving_status;
		x_moving_status_slave_temp = variables->x_moving_status;
		x_moving_status_master_temp = variables->x_moving_status;
	}
}
 8002ae0:	e018      	b.n	8002b14 <modbus_data_sync+0x1d0>
	} else if (x_moving_status_slave_temp != variables->x_moving_status) {
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002ae8:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <modbus_data_sync+0x1f0>)
 8002aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d010      	beq.n	8002b14 <modbus_data_sync+0x1d0>
		MBregisterFrame[0x40].U16 = variables->x_moving_status;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <modbus_data_sync+0x1dc>)
 8002afc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		x_moving_status_slave_temp = variables->x_moving_status;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <modbus_data_sync+0x1f0>)
 8002b08:	801a      	strh	r2, [r3, #0]
		x_moving_status_master_temp = variables->x_moving_status;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002b10:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <modbus_data_sync+0x1ec>)
 8002b12:	801a      	strh	r2, [r3, #0]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	2000099c 	.word	0x2000099c
 8002b24:	20000ace 	.word	0x20000ace
 8002b28:	20000ad0 	.word	0x20000ad0
 8002b2c:	20000ad2 	.word	0x20000ad2
 8002b30:	20000ad4 	.word	0x20000ad4
 8002b34:	20000ad6 	.word	0x20000ad6

08002b38 <main_logic>:
void end_effector_gripper(MB *variables, uint8_t mode);	// 0 pick, 1 place
void end_effector_laser(MB *variables, uint8_t mode);	// 0 off, 1 on

// USER CODE ======================================================================================

void main_logic(MB *variables) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
	I2C_TO_BASESYSTEM(&variables->end_effector_status, &hi2c1);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3326      	adds	r3, #38	; 0x26
 8002b44:	4903      	ldr	r1, [pc, #12]	; (8002b54 <main_logic+0x1c>)
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fb4e 	bl	80011e8 <I2C_TO_BASESYSTEM>
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000470 	.word	0x20000470

08002b58 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	MBvariables.x_target_acceleration_time = 1;
 8002b5c:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <main+0xc4>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	845a      	strh	r2, [r3, #34]	; 0x22
	MBvariables.x_target_speed = 3000;
 8002b62:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <main+0xc4>)
 8002b64:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b68:	841a      	strh	r2, [r3, #32]

	corners[0].x = -68.0;
 8002b6a:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <main+0xc8>)
 8002b6c:	4a2d      	ldr	r2, [pc, #180]	; (8002c24 <main+0xcc>)
 8002b6e:	601a      	str	r2, [r3, #0]
	corners[0].y = 7.1;
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <main+0xc8>)
 8002b72:	4a2d      	ldr	r2, [pc, #180]	; (8002c28 <main+0xd0>)
 8002b74:	605a      	str	r2, [r3, #4]
	corners[1].x = -29.4;
 8002b76:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <main+0xc8>)
 8002b78:	4a2c      	ldr	r2, [pc, #176]	; (8002c2c <main+0xd4>)
 8002b7a:	609a      	str	r2, [r3, #8]
	corners[1].y = 52.7;
 8002b7c:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <main+0xc8>)
 8002b7e:	4a2c      	ldr	r2, [pc, #176]	; (8002c30 <main+0xd8>)
 8002b80:	60da      	str	r2, [r3, #12]
	corners[2].x = 8.2;
 8002b82:	4b27      	ldr	r3, [pc, #156]	; (8002c20 <main+0xc8>)
 8002b84:	4a2b      	ldr	r2, [pc, #172]	; (8002c34 <main+0xdc>)
 8002b86:	611a      	str	r2, [r3, #16]
	corners[2].y = 21.2;
 8002b88:	4b25      	ldr	r3, [pc, #148]	; (8002c20 <main+0xc8>)
 8002b8a:	4a2b      	ldr	r2, [pc, #172]	; (8002c38 <main+0xe0>)
 8002b8c:	615a      	str	r2, [r3, #20]
	localize(corners, pick, &origin, &angle);
 8002b8e:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <main+0xe4>)
 8002b90:	4a2b      	ldr	r2, [pc, #172]	; (8002c40 <main+0xe8>)
 8002b92:	492c      	ldr	r1, [pc, #176]	; (8002c44 <main+0xec>)
 8002b94:	4822      	ldr	r0, [pc, #136]	; (8002c20 <main+0xc8>)
 8002b96:	f7ff f9e3 	bl	8001f60 <localize>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002b9a:	f000 fdd1 	bl	8003740 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002b9e:	f000 f85d 	bl	8002c5c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002ba2:	f7ff f86d 	bl	8001c80 <MX_GPIO_Init>
	MX_DMA_Init();
 8002ba6:	f7ff f84b 	bl	8001c40 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002baa:	f000 fcbd 	bl	8003528 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8002bae:	f7ff f8f3 	bl	8001d98 <MX_I2C1_Init>
	MX_TIM1_Init();
 8002bb2:	f000 fa21 	bl	8002ff8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8002bb6:	f000 fabf 	bl	8003138 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8002bba:	f000 fc8b 	bl	80034d4 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8002bbe:	f7fe ffa9 	bl	8001b14 <MX_ADC1_Init>
	MX_TIM9_Init();
 8002bc2:	f000 fb0d 	bl	80031e0 <MX_TIM9_Init>
	MX_TIM11_Init();
 8002bc6:	f000 fb45 	bl	8003254 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */

	// start timer 1 in PWM for motor
	HAL_TIM_Base_Start(&htim1);
 8002bca:	481f      	ldr	r0, [pc, #124]	; (8002c48 <main+0xf0>)
 8002bcc:	f003 f89a 	bl	8005d04 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	481d      	ldr	r0, [pc, #116]	; (8002c48 <main+0xf0>)
 8002bd4:	f003 fa1e 	bl	8006014 <HAL_TIM_PWM_Start>

	// Start timer in encoder mode
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8002bd8:	2104      	movs	r1, #4
 8002bda:	481c      	ldr	r0, [pc, #112]	; (8002c4c <main+0xf4>)
 8002bdc:	f003 fc4c 	bl	8006478 <HAL_TIM_Encoder_Start>

	// Timer 9 Timer Interrupt (1000Hz)
	HAL_TIM_Base_Start_IT(&htim9);
 8002be0:	481b      	ldr	r0, [pc, #108]	; (8002c50 <main+0xf8>)
 8002be2:	f003 f8e9 	bl	8005db8 <HAL_TIM_Base_Start_IT>

	// Initialize modbus
	modbus_init();
 8002be6:	f7ff fe4f 	bl	8002888 <modbus_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Modbus_Protocal_Worker();
 8002bea:	f7fe fd13 	bl	8001614 <Modbus_Protocal_Worker>
		modbus_heartbeat_handler(&MBvariables);
 8002bee:	480b      	ldr	r0, [pc, #44]	; (8002c1c <main+0xc4>)
 8002bf0:	f7ff fe66 	bl	80028c0 <modbus_heartbeat_handler>
		modbus_data_sync(&MBvariables);
 8002bf4:	4809      	ldr	r0, [pc, #36]	; (8002c1c <main+0xc4>)
 8002bf6:	f7ff fea5 	bl	8002944 <modbus_data_sync>
		QEIReadRaw = getRawPosition();
 8002bfa:	f7ff f9a3 	bl	8001f44 <getRawPosition>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <main+0xfc>)
 8002c02:	6013      	str	r3, [r2, #0]
		motor(voltage);
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <main+0x100>)
 8002c06:	edd3 7a00 	vldr	s15, [r3]
 8002c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0e:	f7ff f939 	bl	8001e84 <motor>
		main_logic(&MBvariables);
 8002c12:	4802      	ldr	r0, [pc, #8]	; (8002c1c <main+0xc4>)
 8002c14:	f7ff ff90 	bl	8002b38 <main_logic>
		Modbus_Protocal_Worker();
 8002c18:	e7e7      	b.n	8002bea <main+0x92>
 8002c1a:	bf00      	nop
 8002c1c:	20000a9c 	.word	0x20000a9c
 8002c20:	20000a30 	.word	0x20000a30
 8002c24:	c2880000 	.word	0xc2880000
 8002c28:	40e33333 	.word	0x40e33333
 8002c2c:	c1eb3333 	.word	0xc1eb3333
 8002c30:	4252cccd 	.word	0x4252cccd
 8002c34:	41033333 	.word	0x41033333
 8002c38:	41a9999a 	.word	0x41a9999a
 8002c3c:	20000a98 	.word	0x20000a98
 8002c40:	20000a90 	.word	0x20000a90
 8002c44:	20000a48 	.word	0x20000a48
 8002c48:	20000adc 	.word	0x20000adc
 8002c4c:	20000b90 	.word	0x20000b90
 8002c50:	20000c44 	.word	0x20000c44
 8002c54:	20000a28 	.word	0x20000a28
 8002c58:	20000a2c 	.word	0x20000a2c

08002c5c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b094      	sub	sp, #80	; 0x50
 8002c60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002c62:	f107 0320 	add.w	r3, r7, #32
 8002c66:	2230      	movs	r2, #48	; 0x30
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f006 f822 	bl	8008cb4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002c70:	f107 030c 	add.w	r3, r7, #12
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002c80:	2300      	movs	r3, #0
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <SystemClock_Config+0xc8>)
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	4a26      	ldr	r2, [pc, #152]	; (8002d24 <SystemClock_Config+0xc8>)
 8002c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c90:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <SystemClock_Config+0xc8>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <SystemClock_Config+0xcc>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a20      	ldr	r2, [pc, #128]	; (8002d28 <SystemClock_Config+0xcc>)
 8002ca6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <SystemClock_Config+0xcc>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002ccc:	2308      	movs	r3, #8
 8002cce:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8002cd0:	2364      	movs	r3, #100	; 0x64
 8002cd2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002cd8:	2304      	movs	r3, #4
 8002cda:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002cdc:	f107 0320 	add.w	r3, r7, #32
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f002 fb1b 	bl	800531c <HAL_RCC_OscConfig>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <SystemClock_Config+0x94>
		Error_Handler();
 8002cec:	f000 f825 	bl	8002d3a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cf0:	230f      	movs	r3, #15
 8002cf2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d00:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8002d06:	f107 030c 	add.w	r3, r7, #12
 8002d0a:	2103      	movs	r1, #3
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f002 fd7d 	bl	800580c <HAL_RCC_ClockConfig>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <SystemClock_Config+0xc0>
		Error_Handler();
 8002d18:	f000 f80f 	bl	8002d3a <Error_Handler>
	}
}
 8002d1c:	bf00      	nop
 8002d1e:	3750      	adds	r7, #80	; 0x50
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40007000 	.word	0x40007000

08002d2c <modbus_callback>:

/* USER CODE BEGIN 4 */

void modbus_callback() {
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
	return; // not implemented yet
 8002d30:	bf00      	nop
		} else if (flip == 1) {
			MBvariables.x_moving_status = 0;
			flip = 0;
		}
	}
}
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d3e:	b672      	cpsid	i
}
 8002d40:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002d42:	e7fe      	b.n	8002d42 <Error_Handler+0x8>

08002d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	4a0f      	ldr	r2, [pc, #60]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d58:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d62:	607b      	str	r3, [r7, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	4a08      	ldr	r2, [pc, #32]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d74:	6413      	str	r3, [r2, #64]	; 0x40
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d82:	2007      	movs	r0, #7
 8002d84:	f001 f890 	bl	8003ea8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40023800 	.word	0x40023800

08002d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d98:	e7fe      	b.n	8002d98 <NMI_Handler+0x4>

08002d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d9e:	e7fe      	b.n	8002d9e <HardFault_Handler+0x4>

08002da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002da4:	e7fe      	b.n	8002da4 <MemManage_Handler+0x4>

08002da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002daa:	e7fe      	b.n	8002daa <BusFault_Handler+0x4>

08002dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002db0:	e7fe      	b.n	8002db0 <UsageFault_Handler+0x4>

08002db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002de0:	f000 fd00 	bl	80037e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de4:	bf00      	nop
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <DMA1_Stream6_IRQHandler+0x10>)
 8002dee:	f001 fa35 	bl	800425c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000e94 	.word	0x20000e94

08002dfc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e00:	4803      	ldr	r0, [pc, #12]	; (8002e10 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002e02:	f003 fbc7 	bl	8006594 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002e06:	4803      	ldr	r0, [pc, #12]	; (8002e14 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002e08:	f003 fbc4 	bl	8006594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20000adc 	.word	0x20000adc
 8002e14:	20000c44 	.word	0x20000c44

08002e18 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e1c:	4803      	ldr	r0, [pc, #12]	; (8002e2c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002e1e:	f003 fbb9 	bl	8006594 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002e22:	4803      	ldr	r0, [pc, #12]	; (8002e30 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002e24:	f003 fbb6 	bl	8006594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000adc 	.word	0x20000adc
 8002e30:	20000cf8 	.word	0x20000cf8

08002e34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e38:	4802      	ldr	r0, [pc, #8]	; (8002e44 <USART2_IRQHandler+0x10>)
 8002e3a:	f004 febd 	bl	8007bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000e20 	.word	0x20000e20

08002e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return 1;
 8002e4c:	2301      	movs	r3, #1
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <_kill>:

int _kill(int pid, int sig)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e62:	f005 feef 	bl	8008c44 <__errno>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2216      	movs	r2, #22
 8002e6a:	601a      	str	r2, [r3, #0]
  return -1;
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <_exit>:

void _exit (int status)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff ffe7 	bl	8002e58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e8a:	e7fe      	b.n	8002e8a <_exit+0x12>

08002e8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	e00a      	b.n	8002eb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e9e:	f3af 8000 	nop.w
 8002ea2:	4601      	mov	r1, r0
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	60ba      	str	r2, [r7, #8]
 8002eaa:	b2ca      	uxtb	r2, r1
 8002eac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	dbf0      	blt.n	8002e9e <_read+0x12>
  }

  return len;
 8002ebc:	687b      	ldr	r3, [r7, #4]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b086      	sub	sp, #24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	e009      	b.n	8002eec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	60ba      	str	r2, [r7, #8]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	dbf1      	blt.n	8002ed8 <_write+0x12>
  }
  return len;
 8002ef4:	687b      	ldr	r3, [r7, #4]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <_close>:

int _close(int file)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f26:	605a      	str	r2, [r3, #4]
  return 0;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <_isatty>:

int _isatty(int file)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f3e:	2301      	movs	r3, #1
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f70:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <_sbrk+0x5c>)
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <_sbrk+0x60>)
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f7c:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <_sbrk+0x64>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d102      	bne.n	8002f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <_sbrk+0x64>)
 8002f86:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <_sbrk+0x68>)
 8002f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <_sbrk+0x64>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d207      	bcs.n	8002fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f98:	f005 fe54 	bl	8008c44 <__errno>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	220c      	movs	r2, #12
 8002fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa6:	e009      	b.n	8002fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fa8:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <_sbrk+0x64>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <_sbrk+0x64>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	4a05      	ldr	r2, [pc, #20]	; (8002fcc <_sbrk+0x64>)
 8002fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fba:	68fb      	ldr	r3, [r7, #12]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20020000 	.word	0x20020000
 8002fc8:	00000400 	.word	0x00000400
 8002fcc:	20000ad8 	.word	0x20000ad8
 8002fd0:	20000f08 	.word	0x20000f08

08002fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <SystemInit+0x20>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fde:	4a05      	ldr	r2, [pc, #20]	; (8002ff4 <SystemInit+0x20>)
 8002fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b096      	sub	sp, #88	; 0x58
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ffe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800300c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	609a      	str	r2, [r3, #8]
 8003022:	60da      	str	r2, [r3, #12]
 8003024:	611a      	str	r2, [r3, #16]
 8003026:	615a      	str	r2, [r3, #20]
 8003028:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800302a:	1d3b      	adds	r3, r7, #4
 800302c:	2220      	movs	r2, #32
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f005 fe3f 	bl	8008cb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003036:	4b3e      	ldr	r3, [pc, #248]	; (8003130 <MX_TIM1_Init+0x138>)
 8003038:	4a3e      	ldr	r2, [pc, #248]	; (8003134 <MX_TIM1_Init+0x13c>)
 800303a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 800303c:	4b3c      	ldr	r3, [pc, #240]	; (8003130 <MX_TIM1_Init+0x138>)
 800303e:	2204      	movs	r2, #4
 8003040:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003042:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <MX_TIM1_Init+0x138>)
 8003044:	2200      	movs	r2, #0
 8003046:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25000-1;
 8003048:	4b39      	ldr	r3, [pc, #228]	; (8003130 <MX_TIM1_Init+0x138>)
 800304a:	f246 12a7 	movw	r2, #24999	; 0x61a7
 800304e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003050:	4b37      	ldr	r3, [pc, #220]	; (8003130 <MX_TIM1_Init+0x138>)
 8003052:	2200      	movs	r2, #0
 8003054:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003056:	4b36      	ldr	r3, [pc, #216]	; (8003130 <MX_TIM1_Init+0x138>)
 8003058:	2200      	movs	r2, #0
 800305a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800305c:	4b34      	ldr	r3, [pc, #208]	; (8003130 <MX_TIM1_Init+0x138>)
 800305e:	2200      	movs	r2, #0
 8003060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003062:	4833      	ldr	r0, [pc, #204]	; (8003130 <MX_TIM1_Init+0x138>)
 8003064:	f002 fdf2 	bl	8005c4c <HAL_TIM_Base_Init>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800306e:	f7ff fe64 	bl	8002d3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003076:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003078:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800307c:	4619      	mov	r1, r3
 800307e:	482c      	ldr	r0, [pc, #176]	; (8003130 <MX_TIM1_Init+0x138>)
 8003080:	f003 fcce 	bl	8006a20 <HAL_TIM_ConfigClockSource>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800308a:	f7ff fe56 	bl	8002d3a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800308e:	4828      	ldr	r0, [pc, #160]	; (8003130 <MX_TIM1_Init+0x138>)
 8003090:	f002 ff5a 	bl	8005f48 <HAL_TIM_PWM_Init>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800309a:	f7ff fe4e 	bl	8002d3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800309e:	2300      	movs	r3, #0
 80030a0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030aa:	4619      	mov	r1, r3
 80030ac:	4820      	ldr	r0, [pc, #128]	; (8003130 <MX_TIM1_Init+0x138>)
 80030ae:	f004 fa51 	bl	8007554 <HAL_TIMEx_MasterConfigSynchronization>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80030b8:	f7ff fe3f 	bl	8002d3a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030bc:	2360      	movs	r3, #96	; 0x60
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030c4:	2300      	movs	r3, #0
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030c8:	2300      	movs	r3, #0
 80030ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030cc:	2300      	movs	r3, #0
 80030ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030d0:	2300      	movs	r3, #0
 80030d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030d4:	2300      	movs	r3, #0
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030dc:	2200      	movs	r2, #0
 80030de:	4619      	mov	r1, r3
 80030e0:	4813      	ldr	r0, [pc, #76]	; (8003130 <MX_TIM1_Init+0x138>)
 80030e2:	f003 fbdb 	bl	800689c <HAL_TIM_PWM_ConfigChannel>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80030ec:	f7ff fe25 	bl	8002d3a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030f0:	2300      	movs	r3, #0
 80030f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003108:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800310a:	2300      	movs	r3, #0
 800310c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	4619      	mov	r1, r3
 8003112:	4807      	ldr	r0, [pc, #28]	; (8003130 <MX_TIM1_Init+0x138>)
 8003114:	f004 fa8c 	bl	8007630 <HAL_TIMEx_ConfigBreakDeadTime>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800311e:	f7ff fe0c 	bl	8002d3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003122:	4803      	ldr	r0, [pc, #12]	; (8003130 <MX_TIM1_Init+0x138>)
 8003124:	f000 f99c 	bl	8003460 <HAL_TIM_MspPostInit>

}
 8003128:	bf00      	nop
 800312a:	3758      	adds	r7, #88	; 0x58
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000adc 	.word	0x20000adc
 8003134:	40010000 	.word	0x40010000

08003138 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08c      	sub	sp, #48	; 0x30
 800313c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800313e:	f107 030c 	add.w	r3, r7, #12
 8003142:	2224      	movs	r2, #36	; 0x24
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f005 fdb4 	bl	8008cb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003154:	4b21      	ldr	r3, [pc, #132]	; (80031dc <MX_TIM2_Init+0xa4>)
 8003156:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800315a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800315c:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <MX_TIM2_Init+0xa4>)
 800315e:	2200      	movs	r2, #0
 8003160:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003162:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <MX_TIM2_Init+0xa4>)
 8003164:	2200      	movs	r2, #0
 8003166:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003168:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <MX_TIM2_Init+0xa4>)
 800316a:	f04f 32ff 	mov.w	r2, #4294967295
 800316e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003170:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <MX_TIM2_Init+0xa4>)
 8003172:	2200      	movs	r2, #0
 8003174:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003176:	4b19      	ldr	r3, [pc, #100]	; (80031dc <MX_TIM2_Init+0xa4>)
 8003178:	2200      	movs	r2, #0
 800317a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800317c:	2303      	movs	r3, #3
 800317e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003180:	2300      	movs	r3, #0
 8003182:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003184:	2301      	movs	r3, #1
 8003186:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003188:	2300      	movs	r3, #0
 800318a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003190:	2300      	movs	r3, #0
 8003192:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003194:	2301      	movs	r3, #1
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003198:	2300      	movs	r3, #0
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80031a0:	f107 030c 	add.w	r3, r7, #12
 80031a4:	4619      	mov	r1, r3
 80031a6:	480d      	ldr	r0, [pc, #52]	; (80031dc <MX_TIM2_Init+0xa4>)
 80031a8:	f003 f8b2 	bl	8006310 <HAL_TIM_Encoder_Init>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80031b2:	f7ff fdc2 	bl	8002d3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031be:	1d3b      	adds	r3, r7, #4
 80031c0:	4619      	mov	r1, r3
 80031c2:	4806      	ldr	r0, [pc, #24]	; (80031dc <MX_TIM2_Init+0xa4>)
 80031c4:	f004 f9c6 	bl	8007554 <HAL_TIMEx_MasterConfigSynchronization>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80031ce:	f7ff fdb4 	bl	8002d3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80031d2:	bf00      	nop
 80031d4:	3730      	adds	r7, #48	; 0x30
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000b90 	.word	0x20000b90

080031e0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031e6:	463b      	mov	r3, r7
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80031f2:	4b16      	ldr	r3, [pc, #88]	; (800324c <MX_TIM9_Init+0x6c>)
 80031f4:	4a16      	ldr	r2, [pc, #88]	; (8003250 <MX_TIM9_Init+0x70>)
 80031f6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 80031f8:	4b14      	ldr	r3, [pc, #80]	; (800324c <MX_TIM9_Init+0x6c>)
 80031fa:	2263      	movs	r2, #99	; 0x63
 80031fc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031fe:	4b13      	ldr	r3, [pc, #76]	; (800324c <MX_TIM9_Init+0x6c>)
 8003200:	2200      	movs	r2, #0
 8003202:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <MX_TIM9_Init+0x6c>)
 8003206:	f240 32e7 	movw	r2, #999	; 0x3e7
 800320a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <MX_TIM9_Init+0x6c>)
 800320e:	2200      	movs	r2, #0
 8003210:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003212:	4b0e      	ldr	r3, [pc, #56]	; (800324c <MX_TIM9_Init+0x6c>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003218:	480c      	ldr	r0, [pc, #48]	; (800324c <MX_TIM9_Init+0x6c>)
 800321a:	f002 fd17 	bl	8005c4c <HAL_TIM_Base_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003224:	f7ff fd89 	bl	8002d3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800322c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800322e:	463b      	mov	r3, r7
 8003230:	4619      	mov	r1, r3
 8003232:	4806      	ldr	r0, [pc, #24]	; (800324c <MX_TIM9_Init+0x6c>)
 8003234:	f003 fbf4 	bl	8006a20 <HAL_TIM_ConfigClockSource>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800323e:	f7ff fd7c 	bl	8002d3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000c44 	.word	0x20000c44
 8003250:	40014000 	.word	0x40014000

08003254 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800325a:	1d3b      	adds	r3, r7, #4
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	611a      	str	r2, [r3, #16]
 8003268:	615a      	str	r2, [r3, #20]
 800326a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800326c:	4b21      	ldr	r3, [pc, #132]	; (80032f4 <MX_TIM11_Init+0xa0>)
 800326e:	4a22      	ldr	r2, [pc, #136]	; (80032f8 <MX_TIM11_Init+0xa4>)
 8003270:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8003272:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <MX_TIM11_Init+0xa0>)
 8003274:	2263      	movs	r2, #99	; 0x63
 8003276:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003278:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <MX_TIM11_Init+0xa0>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 800327e:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <MX_TIM11_Init+0xa0>)
 8003280:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8003284:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003286:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <MX_TIM11_Init+0xa0>)
 8003288:	2200      	movs	r2, #0
 800328a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <MX_TIM11_Init+0xa0>)
 800328e:	2200      	movs	r2, #0
 8003290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003292:	4818      	ldr	r0, [pc, #96]	; (80032f4 <MX_TIM11_Init+0xa0>)
 8003294:	f002 fcda 	bl	8005c4c <HAL_TIM_Base_Init>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800329e:	f7ff fd4c 	bl	8002d3a <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80032a2:	4814      	ldr	r0, [pc, #80]	; (80032f4 <MX_TIM11_Init+0xa0>)
 80032a4:	f002 fdea 	bl	8005e7c <HAL_TIM_OC_Init>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80032ae:	f7ff fd44 	bl	8002d3a <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 80032b2:	2108      	movs	r1, #8
 80032b4:	480f      	ldr	r0, [pc, #60]	; (80032f4 <MX_TIM11_Init+0xa0>)
 80032b6:	f002 ff5d 	bl	8006174 <HAL_TIM_OnePulse_Init>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 80032c0:	f7ff fd3b 	bl	8002d3a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80032c4:	2310      	movs	r3, #16
 80032c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 80032c8:	f240 5399 	movw	r3, #1433	; 0x599
 80032cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032d6:	1d3b      	adds	r3, r7, #4
 80032d8:	2200      	movs	r2, #0
 80032da:	4619      	mov	r1, r3
 80032dc:	4805      	ldr	r0, [pc, #20]	; (80032f4 <MX_TIM11_Init+0xa0>)
 80032de:	f003 fa81 	bl	80067e4 <HAL_TIM_OC_ConfigChannel>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 80032e8:	f7ff fd27 	bl	8002d3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80032ec:	bf00      	nop
 80032ee:	3720      	adds	r7, #32
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000cf8 	.word	0x20000cf8
 80032f8:	40014800 	.word	0x40014800

080032fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a2e      	ldr	r2, [pc, #184]	; (80033c4 <HAL_TIM_Base_MspInit+0xc8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d11e      	bne.n	800334c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	4b2d      	ldr	r3, [pc, #180]	; (80033c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	4a2c      	ldr	r2, [pc, #176]	; (80033c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6453      	str	r3, [r2, #68]	; 0x44
 800331e:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	2100      	movs	r1, #0
 800332e:	2018      	movs	r0, #24
 8003330:	f000 fdc5 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003334:	2018      	movs	r0, #24
 8003336:	f000 fdde 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800333a:	2200      	movs	r2, #0
 800333c:	2100      	movs	r1, #0
 800333e:	201a      	movs	r0, #26
 8003340:	f000 fdbd 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003344:	201a      	movs	r0, #26
 8003346:	f000 fdd6 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800334a:	e036      	b.n	80033ba <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM9)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1e      	ldr	r2, [pc, #120]	; (80033cc <HAL_TIM_Base_MspInit+0xd0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d116      	bne.n	8003384 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_TIM_Base_MspInit+0xcc>)
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	4a1a      	ldr	r2, [pc, #104]	; (80033c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	6453      	str	r3, [r2, #68]	; 0x44
 8003366:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003372:	2200      	movs	r2, #0
 8003374:	2100      	movs	r1, #0
 8003376:	2018      	movs	r0, #24
 8003378:	f000 fda1 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800337c:	2018      	movs	r0, #24
 800337e:	f000 fdba 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
}
 8003382:	e01a      	b.n	80033ba <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM11)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a11      	ldr	r2, [pc, #68]	; (80033d0 <HAL_TIM_Base_MspInit+0xd4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d115      	bne.n	80033ba <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	4a0c      	ldr	r2, [pc, #48]	; (80033c8 <HAL_TIM_Base_MspInit+0xcc>)
 8003398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800339c:	6453      	str	r3, [r2, #68]	; 0x44
 800339e:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <HAL_TIM_Base_MspInit+0xcc>)
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80033aa:	2200      	movs	r2, #0
 80033ac:	2100      	movs	r1, #0
 80033ae:	201a      	movs	r0, #26
 80033b0:	f000 fd85 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80033b4:	201a      	movs	r0, #26
 80033b6:	f000 fd9e 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
}
 80033ba:	bf00      	nop
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40010000 	.word	0x40010000
 80033c8:	40023800 	.word	0x40023800
 80033cc:	40014000 	.word	0x40014000
 80033d0:	40014800 	.word	0x40014800

080033d4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f4:	d12b      	bne.n	800344e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	4b17      	ldr	r3, [pc, #92]	; (8003458 <HAL_TIM_Encoder_MspInit+0x84>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	4a16      	ldr	r2, [pc, #88]	; (8003458 <HAL_TIM_Encoder_MspInit+0x84>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6413      	str	r3, [r2, #64]	; 0x40
 8003406:	4b14      	ldr	r3, [pc, #80]	; (8003458 <HAL_TIM_Encoder_MspInit+0x84>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_TIM_Encoder_MspInit+0x84>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a0f      	ldr	r2, [pc, #60]	; (8003458 <HAL_TIM_Encoder_MspInit+0x84>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <HAL_TIM_Encoder_MspInit+0x84>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800342e:	2303      	movs	r3, #3
 8003430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003432:	2302      	movs	r3, #2
 8003434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343a:	2300      	movs	r3, #0
 800343c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800343e:	2301      	movs	r3, #1
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003442:	f107 0314 	add.w	r3, r7, #20
 8003446:	4619      	mov	r1, r3
 8003448:	4804      	ldr	r0, [pc, #16]	; (800345c <HAL_TIM_Encoder_MspInit+0x88>)
 800344a:	f001 f97d 	bl	8004748 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800344e:	bf00      	nop
 8003450:	3728      	adds	r7, #40	; 0x28
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
 800345c:	40020000 	.word	0x40020000

08003460 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003468:	f107 030c 	add.w	r3, r7, #12
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	60da      	str	r2, [r3, #12]
 8003476:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a12      	ldr	r2, [pc, #72]	; (80034c8 <HAL_TIM_MspPostInit+0x68>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d11e      	bne.n	80034c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	4b11      	ldr	r3, [pc, #68]	; (80034cc <HAL_TIM_MspPostInit+0x6c>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4a10      	ldr	r2, [pc, #64]	; (80034cc <HAL_TIM_MspPostInit+0x6c>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6313      	str	r3, [r2, #48]	; 0x30
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <HAL_TIM_MspPostInit+0x6c>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800349e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034b0:	2301      	movs	r3, #1
 80034b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b4:	f107 030c 	add.w	r3, r7, #12
 80034b8:	4619      	mov	r1, r3
 80034ba:	4805      	ldr	r0, [pc, #20]	; (80034d0 <HAL_TIM_MspPostInit+0x70>)
 80034bc:	f001 f944 	bl	8004748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80034c0:	bf00      	nop
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40010000 	.word	0x40010000
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40020000 	.word	0x40020000

080034d4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80034d8:	4b11      	ldr	r3, [pc, #68]	; (8003520 <MX_USART1_UART_Init+0x4c>)
 80034da:	4a12      	ldr	r2, [pc, #72]	; (8003524 <MX_USART1_UART_Init+0x50>)
 80034dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80034de:	4b10      	ldr	r3, [pc, #64]	; (8003520 <MX_USART1_UART_Init+0x4c>)
 80034e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034e6:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <MX_USART1_UART_Init+0x4c>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <MX_USART1_UART_Init+0x4c>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <MX_USART1_UART_Init+0x4c>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <MX_USART1_UART_Init+0x4c>)
 80034fa:	220c      	movs	r2, #12
 80034fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <MX_USART1_UART_Init+0x4c>)
 8003500:	2200      	movs	r2, #0
 8003502:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <MX_USART1_UART_Init+0x4c>)
 8003506:	2200      	movs	r2, #0
 8003508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800350a:	4805      	ldr	r0, [pc, #20]	; (8003520 <MX_USART1_UART_Init+0x4c>)
 800350c:	f004 f900 	bl	8007710 <HAL_UART_Init>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003516:	f7ff fc10 	bl	8002d3a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000dac 	.word	0x20000dac
 8003524:	40011000 	.word	0x40011000

08003528 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800352c:	4b12      	ldr	r3, [pc, #72]	; (8003578 <MX_USART2_UART_Init+0x50>)
 800352e:	4a13      	ldr	r2, [pc, #76]	; (800357c <MX_USART2_UART_Init+0x54>)
 8003530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003532:	4b11      	ldr	r3, [pc, #68]	; (8003578 <MX_USART2_UART_Init+0x50>)
 8003534:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <MX_USART2_UART_Init+0x50>)
 800353c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003540:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003542:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <MX_USART2_UART_Init+0x50>)
 8003544:	2200      	movs	r2, #0
 8003546:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <MX_USART2_UART_Init+0x50>)
 800354a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800354e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003550:	4b09      	ldr	r3, [pc, #36]	; (8003578 <MX_USART2_UART_Init+0x50>)
 8003552:	220c      	movs	r2, #12
 8003554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003556:	4b08      	ldr	r3, [pc, #32]	; (8003578 <MX_USART2_UART_Init+0x50>)
 8003558:	2200      	movs	r2, #0
 800355a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <MX_USART2_UART_Init+0x50>)
 800355e:	2200      	movs	r2, #0
 8003560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003562:	4805      	ldr	r0, [pc, #20]	; (8003578 <MX_USART2_UART_Init+0x50>)
 8003564:	f004 f8d4 	bl	8007710 <HAL_UART_Init>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800356e:	f7ff fbe4 	bl	8002d3a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000e20 	.word	0x20000e20
 800357c:	40004400 	.word	0x40004400

08003580 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08c      	sub	sp, #48	; 0x30
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003588:	f107 031c 	add.w	r3, r7, #28
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a4d      	ldr	r2, [pc, #308]	; (80036d4 <HAL_UART_MspInit+0x154>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d12d      	bne.n	80035fe <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	4b4c      	ldr	r3, [pc, #304]	; (80036d8 <HAL_UART_MspInit+0x158>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	4a4b      	ldr	r2, [pc, #300]	; (80036d8 <HAL_UART_MspInit+0x158>)
 80035ac:	f043 0310 	orr.w	r3, r3, #16
 80035b0:	6453      	str	r3, [r2, #68]	; 0x44
 80035b2:	4b49      	ldr	r3, [pc, #292]	; (80036d8 <HAL_UART_MspInit+0x158>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	4b45      	ldr	r3, [pc, #276]	; (80036d8 <HAL_UART_MspInit+0x158>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	4a44      	ldr	r2, [pc, #272]	; (80036d8 <HAL_UART_MspInit+0x158>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6313      	str	r3, [r2, #48]	; 0x30
 80035ce:	4b42      	ldr	r3, [pc, #264]	; (80036d8 <HAL_UART_MspInit+0x158>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80035da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80035de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e0:	2302      	movs	r3, #2
 80035e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e8:	2303      	movs	r3, #3
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035ec:	2307      	movs	r3, #7
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f0:	f107 031c 	add.w	r3, r7, #28
 80035f4:	4619      	mov	r1, r3
 80035f6:	4839      	ldr	r0, [pc, #228]	; (80036dc <HAL_UART_MspInit+0x15c>)
 80035f8:	f001 f8a6 	bl	8004748 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80035fc:	e066      	b.n	80036cc <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART2)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a37      	ldr	r2, [pc, #220]	; (80036e0 <HAL_UART_MspInit+0x160>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d161      	bne.n	80036cc <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	4b32      	ldr	r3, [pc, #200]	; (80036d8 <HAL_UART_MspInit+0x158>)
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	4a31      	ldr	r2, [pc, #196]	; (80036d8 <HAL_UART_MspInit+0x158>)
 8003612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003616:	6413      	str	r3, [r2, #64]	; 0x40
 8003618:	4b2f      	ldr	r3, [pc, #188]	; (80036d8 <HAL_UART_MspInit+0x158>)
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <HAL_UART_MspInit+0x158>)
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	4a2a      	ldr	r2, [pc, #168]	; (80036d8 <HAL_UART_MspInit+0x158>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	6313      	str	r3, [r2, #48]	; 0x30
 8003634:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <HAL_UART_MspInit+0x158>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003640:	230c      	movs	r3, #12
 8003642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003644:	2302      	movs	r3, #2
 8003646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	2300      	movs	r3, #0
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364c:	2303      	movs	r3, #3
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003650:	2307      	movs	r3, #7
 8003652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003654:	f107 031c 	add.w	r3, r7, #28
 8003658:	4619      	mov	r1, r3
 800365a:	4820      	ldr	r0, [pc, #128]	; (80036dc <HAL_UART_MspInit+0x15c>)
 800365c:	f001 f874 	bl	8004748 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003660:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <HAL_UART_MspInit+0x164>)
 8003662:	4a21      	ldr	r2, [pc, #132]	; (80036e8 <HAL_UART_MspInit+0x168>)
 8003664:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003666:	4b1f      	ldr	r3, [pc, #124]	; (80036e4 <HAL_UART_MspInit+0x164>)
 8003668:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800366c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_UART_MspInit+0x164>)
 8003670:	2240      	movs	r2, #64	; 0x40
 8003672:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003674:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <HAL_UART_MspInit+0x164>)
 8003676:	2200      	movs	r2, #0
 8003678:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_UART_MspInit+0x164>)
 800367c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003680:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003682:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <HAL_UART_MspInit+0x164>)
 8003684:	2200      	movs	r2, #0
 8003686:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003688:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <HAL_UART_MspInit+0x164>)
 800368a:	2200      	movs	r2, #0
 800368c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <HAL_UART_MspInit+0x164>)
 8003690:	2200      	movs	r2, #0
 8003692:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003694:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <HAL_UART_MspInit+0x164>)
 8003696:	2200      	movs	r2, #0
 8003698:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800369a:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_UART_MspInit+0x164>)
 800369c:	2200      	movs	r2, #0
 800369e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80036a0:	4810      	ldr	r0, [pc, #64]	; (80036e4 <HAL_UART_MspInit+0x164>)
 80036a2:	f000 fc43 	bl	8003f2c <HAL_DMA_Init>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_UART_MspInit+0x130>
      Error_Handler();
 80036ac:	f7ff fb45 	bl	8002d3a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <HAL_UART_MspInit+0x164>)
 80036b4:	635a      	str	r2, [r3, #52]	; 0x34
 80036b6:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <HAL_UART_MspInit+0x164>)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036bc:	2200      	movs	r2, #0
 80036be:	2100      	movs	r1, #0
 80036c0:	2026      	movs	r0, #38	; 0x26
 80036c2:	f000 fbfc 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036c6:	2026      	movs	r0, #38	; 0x26
 80036c8:	f000 fc15 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
}
 80036cc:	bf00      	nop
 80036ce:	3730      	adds	r7, #48	; 0x30
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40011000 	.word	0x40011000
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40020000 	.word	0x40020000
 80036e0:	40004400 	.word	0x40004400
 80036e4:	20000e94 	.word	0x20000e94
 80036e8:	400260a0 	.word	0x400260a0

080036ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80036ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003724 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036f0:	480d      	ldr	r0, [pc, #52]	; (8003728 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036f2:	490e      	ldr	r1, [pc, #56]	; (800372c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036f4:	4a0e      	ldr	r2, [pc, #56]	; (8003730 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036f8:	e002      	b.n	8003700 <LoopCopyDataInit>

080036fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036fe:	3304      	adds	r3, #4

08003700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003704:	d3f9      	bcc.n	80036fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003706:	4a0b      	ldr	r2, [pc, #44]	; (8003734 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003708:	4c0b      	ldr	r4, [pc, #44]	; (8003738 <LoopFillZerobss+0x26>)
  movs r3, #0
 800370a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800370c:	e001      	b.n	8003712 <LoopFillZerobss>

0800370e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800370e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003710:	3204      	adds	r2, #4

08003712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003714:	d3fb      	bcc.n	800370e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003716:	f7ff fc5d 	bl	8002fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800371a:	f005 fa99 	bl	8008c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800371e:	f7ff fa1b 	bl	8002b58 <main>
  bx  lr    
 8003722:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800372c:	200003f8 	.word	0x200003f8
  ldr r2, =_sidata
 8003730:	0800f2f0 	.word	0x0800f2f0
  ldr r2, =_sbss
 8003734:	200003f8 	.word	0x200003f8
  ldr r4, =_ebss
 8003738:	20000f08 	.word	0x20000f08

0800373c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800373c:	e7fe      	b.n	800373c <ADC_IRQHandler>
	...

08003740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003744:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <HAL_Init+0x40>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <HAL_Init+0x40>)
 800374a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800374e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_Init+0x40>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <HAL_Init+0x40>)
 8003756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800375a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800375c:	4b08      	ldr	r3, [pc, #32]	; (8003780 <HAL_Init+0x40>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a07      	ldr	r2, [pc, #28]	; (8003780 <HAL_Init+0x40>)
 8003762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003768:	2003      	movs	r0, #3
 800376a:	f000 fb9d 	bl	8003ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800376e:	2000      	movs	r0, #0
 8003770:	f000 f808 	bl	8003784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003774:	f7ff fae6 	bl	8002d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40023c00 	.word	0x40023c00

08003784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800378c:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_InitTick+0x54>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4b12      	ldr	r3, [pc, #72]	; (80037dc <HAL_InitTick+0x58>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	4619      	mov	r1, r3
 8003796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800379a:	fbb3 f3f1 	udiv	r3, r3, r1
 800379e:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fbb5 	bl	8003f12 <HAL_SYSTICK_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e00e      	b.n	80037d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b0f      	cmp	r3, #15
 80037b6:	d80a      	bhi.n	80037ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037b8:	2200      	movs	r2, #0
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
 80037c0:	f000 fb7d 	bl	8003ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037c4:	4a06      	ldr	r2, [pc, #24]	; (80037e0 <HAL_InitTick+0x5c>)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e000      	b.n	80037d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000218 	.word	0x20000218
 80037dc:	20000220 	.word	0x20000220
 80037e0:	2000021c 	.word	0x2000021c

080037e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_IncTick+0x20>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_IncTick+0x24>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4413      	add	r3, r2
 80037f4:	4a04      	ldr	r2, [pc, #16]	; (8003808 <HAL_IncTick+0x24>)
 80037f6:	6013      	str	r3, [r2, #0]
}
 80037f8:	bf00      	nop
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	20000220 	.word	0x20000220
 8003808:	20000ef4 	.word	0x20000ef4

0800380c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return uwTick;
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <HAL_GetTick+0x14>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000ef4 	.word	0x20000ef4

08003824 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e033      	b.n	80038a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fe f9b8 	bl	8001bb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	d118      	bne.n	8003894 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800386a:	f023 0302 	bic.w	r3, r3, #2
 800386e:	f043 0202 	orr.w	r2, r3, #2
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f94a 	bl	8003b10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f023 0303 	bic.w	r3, r3, #3
 800388a:	f043 0201 	orr.w	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	641a      	str	r2, [r3, #64]	; 0x40
 8003892:	e001      	b.n	8003898 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x1c>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e113      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x244>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b09      	cmp	r3, #9
 80038d6:	d925      	bls.n	8003924 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68d9      	ldr	r1, [r3, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	4613      	mov	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4413      	add	r3, r2
 80038ec:	3b1e      	subs	r3, #30
 80038ee:	2207      	movs	r2, #7
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43da      	mvns	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	400a      	ands	r2, r1
 80038fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68d9      	ldr	r1, [r3, #12]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	b29b      	uxth	r3, r3
 800390e:	4618      	mov	r0, r3
 8003910:	4603      	mov	r3, r0
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4403      	add	r3, r0
 8003916:	3b1e      	subs	r3, #30
 8003918:	409a      	lsls	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	e022      	b.n	800396a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6919      	ldr	r1, [r3, #16]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	b29b      	uxth	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	4613      	mov	r3, r2
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	4413      	add	r3, r2
 8003938:	2207      	movs	r2, #7
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43da      	mvns	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	400a      	ands	r2, r1
 8003946:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6919      	ldr	r1, [r3, #16]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	b29b      	uxth	r3, r3
 8003958:	4618      	mov	r0, r3
 800395a:	4603      	mov	r3, r0
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4403      	add	r3, r0
 8003960:	409a      	lsls	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b06      	cmp	r3, #6
 8003970:	d824      	bhi.n	80039bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	3b05      	subs	r3, #5
 8003984:	221f      	movs	r2, #31
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43da      	mvns	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	400a      	ands	r2, r1
 8003992:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	4618      	mov	r0, r3
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	3b05      	subs	r3, #5
 80039ae:	fa00 f203 	lsl.w	r2, r0, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	635a      	str	r2, [r3, #52]	; 0x34
 80039ba:	e04c      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b0c      	cmp	r3, #12
 80039c2:	d824      	bhi.n	8003a0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	3b23      	subs	r3, #35	; 0x23
 80039d6:	221f      	movs	r2, #31
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43da      	mvns	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	400a      	ands	r2, r1
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	4618      	mov	r0, r3
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	3b23      	subs	r3, #35	; 0x23
 8003a00:	fa00 f203 	lsl.w	r2, r0, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a0c:	e023      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3b41      	subs	r3, #65	; 0x41
 8003a20:	221f      	movs	r2, #31
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43da      	mvns	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	400a      	ands	r2, r1
 8003a2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	3b41      	subs	r3, #65	; 0x41
 8003a4a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <HAL_ADC_ConfigChannel+0x250>)
 8003a58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a28      	ldr	r2, [pc, #160]	; (8003b00 <HAL_ADC_ConfigChannel+0x254>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d10f      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x1d8>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b12      	cmp	r3, #18
 8003a6a:	d10b      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1d      	ldr	r2, [pc, #116]	; (8003b00 <HAL_ADC_ConfigChannel+0x254>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d12b      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x23a>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <HAL_ADC_ConfigChannel+0x258>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d003      	beq.n	8003aa0 <HAL_ADC_ConfigChannel+0x1f4>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b11      	cmp	r3, #17
 8003a9e:	d122      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a11      	ldr	r2, [pc, #68]	; (8003b04 <HAL_ADC_ConfigChannel+0x258>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d111      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ac2:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <HAL_ADC_ConfigChannel+0x25c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a11      	ldr	r2, [pc, #68]	; (8003b0c <HAL_ADC_ConfigChannel+0x260>)
 8003ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8003acc:	0c9a      	lsrs	r2, r3, #18
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ad8:	e002      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f9      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	40012300 	.word	0x40012300
 8003b00:	40012000 	.word	0x40012000
 8003b04:	10000012 	.word	0x10000012
 8003b08:	20000218 	.word	0x20000218
 8003b0c:	431bde83 	.word	0x431bde83

08003b10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b18:	4b79      	ldr	r3, [pc, #484]	; (8003d00 <ADC_Init+0x1f0>)
 8003b1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6859      	ldr	r1, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	021a      	lsls	r2, r3, #8
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6859      	ldr	r1, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6899      	ldr	r1, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	4a58      	ldr	r2, [pc, #352]	; (8003d04 <ADC_Init+0x1f4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d022      	beq.n	8003bee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6899      	ldr	r1, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6899      	ldr	r1, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	e00f      	b.n	8003c0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0202 	bic.w	r2, r2, #2
 8003c1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6899      	ldr	r1, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7e1b      	ldrb	r3, [r3, #24]
 8003c28:	005a      	lsls	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01b      	beq.n	8003c74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6859      	ldr	r1, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	3b01      	subs	r3, #1
 8003c68:	035a      	lsls	r2, r3, #13
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	e007      	b.n	8003c84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	051a      	lsls	r2, r3, #20
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003cb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6899      	ldr	r1, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cc6:	025a      	lsls	r2, r3, #9
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6899      	ldr	r1, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	029a      	lsls	r2, r3, #10
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	609a      	str	r2, [r3, #8]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	40012300 	.word	0x40012300
 8003d04:	0f000001 	.word	0x0f000001

08003d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <__NVIC_SetPriorityGrouping+0x44>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d24:	4013      	ands	r3, r2
 8003d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d3a:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <__NVIC_SetPriorityGrouping+0x44>)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	60d3      	str	r3, [r2, #12]
}
 8003d40:	bf00      	nop
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	e000ed00 	.word	0xe000ed00

08003d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <__NVIC_GetPriorityGrouping+0x18>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	0a1b      	lsrs	r3, r3, #8
 8003d5a:	f003 0307 	and.w	r3, r3, #7
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	e000ed00 	.word	0xe000ed00

08003d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	db0b      	blt.n	8003d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	f003 021f 	and.w	r2, r3, #31
 8003d84:	4907      	ldr	r1, [pc, #28]	; (8003da4 <__NVIC_EnableIRQ+0x38>)
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	e000e100 	.word	0xe000e100

08003da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	6039      	str	r1, [r7, #0]
 8003db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	db0a      	blt.n	8003dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	490c      	ldr	r1, [pc, #48]	; (8003df4 <__NVIC_SetPriority+0x4c>)
 8003dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc6:	0112      	lsls	r2, r2, #4
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	440b      	add	r3, r1
 8003dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dd0:	e00a      	b.n	8003de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	4908      	ldr	r1, [pc, #32]	; (8003df8 <__NVIC_SetPriority+0x50>)
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	3b04      	subs	r3, #4
 8003de0:	0112      	lsls	r2, r2, #4
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	440b      	add	r3, r1
 8003de6:	761a      	strb	r2, [r3, #24]
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	e000e100 	.word	0xe000e100
 8003df8:	e000ed00 	.word	0xe000ed00

08003dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b089      	sub	sp, #36	; 0x24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f1c3 0307 	rsb	r3, r3, #7
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	bf28      	it	cs
 8003e1a:	2304      	movcs	r3, #4
 8003e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	3304      	adds	r3, #4
 8003e22:	2b06      	cmp	r3, #6
 8003e24:	d902      	bls.n	8003e2c <NVIC_EncodePriority+0x30>
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3b03      	subs	r3, #3
 8003e2a:	e000      	b.n	8003e2e <NVIC_EncodePriority+0x32>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e30:	f04f 32ff 	mov.w	r2, #4294967295
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	43da      	mvns	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	401a      	ands	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e44:	f04f 31ff 	mov.w	r1, #4294967295
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	43d9      	mvns	r1, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e54:	4313      	orrs	r3, r2
         );
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3724      	adds	r7, #36	; 0x24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e74:	d301      	bcc.n	8003e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e76:	2301      	movs	r3, #1
 8003e78:	e00f      	b.n	8003e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ea4 <SysTick_Config+0x40>)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e82:	210f      	movs	r1, #15
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295
 8003e88:	f7ff ff8e 	bl	8003da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <SysTick_Config+0x40>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e92:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <SysTick_Config+0x40>)
 8003e94:	2207      	movs	r2, #7
 8003e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	e000e010 	.word	0xe000e010

08003ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff ff29 	bl	8003d08 <__NVIC_SetPriorityGrouping>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b086      	sub	sp, #24
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ed0:	f7ff ff3e 	bl	8003d50 <__NVIC_GetPriorityGrouping>
 8003ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	6978      	ldr	r0, [r7, #20]
 8003edc:	f7ff ff8e 	bl	8003dfc <NVIC_EncodePriority>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ff5d 	bl	8003da8 <__NVIC_SetPriority>
}
 8003eee:	bf00      	nop
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	4603      	mov	r3, r0
 8003efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff ff31 	bl	8003d6c <__NVIC_EnableIRQ>
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff ffa2 	bl	8003e64 <SysTick_Config>
 8003f20:	4603      	mov	r3, r0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f38:	f7ff fc68 	bl	800380c <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e099      	b.n	800407c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0201 	bic.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f68:	e00f      	b.n	8003f8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f6a:	f7ff fc4f 	bl	800380c <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b05      	cmp	r3, #5
 8003f76:	d908      	bls.n	8003f8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2203      	movs	r2, #3
 8003f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e078      	b.n	800407c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e8      	bne.n	8003f6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4b38      	ldr	r3, [pc, #224]	; (8004084 <HAL_DMA_Init+0x158>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d107      	bne.n	8003ff4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	4313      	orrs	r3, r2
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f023 0307 	bic.w	r3, r3, #7
 800400a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b04      	cmp	r3, #4
 800401c:	d117      	bne.n	800404e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00e      	beq.n	800404e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fb0d 	bl	8004650 <DMA_CheckFifoParam>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2240      	movs	r2, #64	; 0x40
 8004040:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800404a:	2301      	movs	r3, #1
 800404c:	e016      	b.n	800407c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fac4 	bl	80045e4 <DMA_CalcBaseAndBitshift>
 800405c:	4603      	mov	r3, r0
 800405e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004064:	223f      	movs	r2, #63	; 0x3f
 8004066:	409a      	lsls	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	f010803f 	.word	0xf010803f

08004088 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_DMA_Start_IT+0x26>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e040      	b.n	8004130 <HAL_DMA_Start_IT+0xa8>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d12f      	bne.n	8004122 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2202      	movs	r2, #2
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	68b9      	ldr	r1, [r7, #8]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 fa56 	bl	8004588 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	223f      	movs	r2, #63	; 0x3f
 80040e2:	409a      	lsls	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0216 	orr.w	r2, r2, #22
 80040f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0208 	orr.w	r2, r2, #8
 800410e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	e005      	b.n	800412e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800412a:	2302      	movs	r3, #2
 800412c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800412e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004146:	f7ff fb61 	bl	800380c <HAL_GetTick>
 800414a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d008      	beq.n	800416a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2280      	movs	r2, #128	; 0x80
 800415c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e052      	b.n	8004210 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0216 	bic.w	r2, r2, #22
 8004178:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004188:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <HAL_DMA_Abort+0x62>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0208 	bic.w	r2, r2, #8
 80041a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0201 	bic.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ba:	e013      	b.n	80041e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041bc:	f7ff fb26 	bl	800380c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b05      	cmp	r3, #5
 80041c8:	d90c      	bls.n	80041e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2203      	movs	r2, #3
 80041d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e015      	b.n	8004210 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e4      	bne.n	80041bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f6:	223f      	movs	r2, #63	; 0x3f
 80041f8:	409a      	lsls	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d004      	beq.n	8004236 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2280      	movs	r2, #128	; 0x80
 8004230:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e00c      	b.n	8004250 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2205      	movs	r2, #5
 800423a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004268:	4b8e      	ldr	r3, [pc, #568]	; (80044a4 <HAL_DMA_IRQHandler+0x248>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a8e      	ldr	r2, [pc, #568]	; (80044a8 <HAL_DMA_IRQHandler+0x24c>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	0a9b      	lsrs	r3, r3, #10
 8004274:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004286:	2208      	movs	r2, #8
 8004288:	409a      	lsls	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01a      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d013      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0204 	bic.w	r2, r2, #4
 80042ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b4:	2208      	movs	r2, #8
 80042b6:	409a      	lsls	r2, r3
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	f043 0201 	orr.w	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042cc:	2201      	movs	r2, #1
 80042ce:	409a      	lsls	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4013      	ands	r3, r2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d012      	beq.n	80042fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ea:	2201      	movs	r2, #1
 80042ec:	409a      	lsls	r2, r3
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	f043 0202 	orr.w	r2, r3, #2
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004302:	2204      	movs	r2, #4
 8004304:	409a      	lsls	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4013      	ands	r3, r2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d012      	beq.n	8004334 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00b      	beq.n	8004334 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004320:	2204      	movs	r2, #4
 8004322:	409a      	lsls	r2, r3
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432c:	f043 0204 	orr.w	r2, r3, #4
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004338:	2210      	movs	r2, #16
 800433a:	409a      	lsls	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4013      	ands	r3, r2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d043      	beq.n	80043cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d03c      	beq.n	80043cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004356:	2210      	movs	r2, #16
 8004358:	409a      	lsls	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d018      	beq.n	800439e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d108      	bne.n	800438c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d024      	beq.n	80043cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	4798      	blx	r3
 800438a:	e01f      	b.n	80043cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01b      	beq.n	80043cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4798      	blx	r3
 800439c:	e016      	b.n	80043cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d107      	bne.n	80043bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0208 	bic.w	r2, r2, #8
 80043ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d0:	2220      	movs	r2, #32
 80043d2:	409a      	lsls	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 808f 	beq.w	80044fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8087 	beq.w	80044fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f2:	2220      	movs	r2, #32
 80043f4:	409a      	lsls	r2, r3
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b05      	cmp	r3, #5
 8004404:	d136      	bne.n	8004474 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0216 	bic.w	r2, r2, #22
 8004414:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004424:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d103      	bne.n	8004436 <HAL_DMA_IRQHandler+0x1da>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0208 	bic.w	r2, r2, #8
 8004444:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444a:	223f      	movs	r2, #63	; 0x3f
 800444c:	409a      	lsls	r2, r3
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004466:	2b00      	cmp	r3, #0
 8004468:	d07e      	beq.n	8004568 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	4798      	blx	r3
        }
        return;
 8004472:	e079      	b.n	8004568 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01d      	beq.n	80044be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10d      	bne.n	80044ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004494:	2b00      	cmp	r3, #0
 8004496:	d031      	beq.n	80044fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
 80044a0:	e02c      	b.n	80044fc <HAL_DMA_IRQHandler+0x2a0>
 80044a2:	bf00      	nop
 80044a4:	20000218 	.word	0x20000218
 80044a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d023      	beq.n	80044fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4798      	blx	r3
 80044bc:	e01e      	b.n	80044fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10f      	bne.n	80044ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0210 	bic.w	r2, r2, #16
 80044da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004500:	2b00      	cmp	r3, #0
 8004502:	d032      	beq.n	800456a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d022      	beq.n	8004556 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2205      	movs	r2, #5
 8004514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	3301      	adds	r3, #1
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	429a      	cmp	r2, r3
 8004532:	d307      	bcc.n	8004544 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f2      	bne.n	8004528 <HAL_DMA_IRQHandler+0x2cc>
 8004542:	e000      	b.n	8004546 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004544:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4798      	blx	r3
 8004566:	e000      	b.n	800456a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004568:	bf00      	nop
    }
  }
}
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b40      	cmp	r3, #64	; 0x40
 80045b4:	d108      	bne.n	80045c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045c6:	e007      	b.n	80045d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]
}
 80045d8:	bf00      	nop
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	3b10      	subs	r3, #16
 80045f4:	4a14      	ldr	r2, [pc, #80]	; (8004648 <DMA_CalcBaseAndBitshift+0x64>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	091b      	lsrs	r3, r3, #4
 80045fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045fe:	4a13      	ldr	r2, [pc, #76]	; (800464c <DMA_CalcBaseAndBitshift+0x68>)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b03      	cmp	r3, #3
 8004610:	d909      	bls.n	8004626 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800461a:	f023 0303 	bic.w	r3, r3, #3
 800461e:	1d1a      	adds	r2, r3, #4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	659a      	str	r2, [r3, #88]	; 0x58
 8004624:	e007      	b.n	8004636 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800462e:	f023 0303 	bic.w	r3, r3, #3
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	aaaaaaab 	.word	0xaaaaaaab
 800464c:	0800ec18 	.word	0x0800ec18

08004650 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d11f      	bne.n	80046aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b03      	cmp	r3, #3
 800466e:	d856      	bhi.n	800471e <DMA_CheckFifoParam+0xce>
 8004670:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <DMA_CheckFifoParam+0x28>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	08004689 	.word	0x08004689
 800467c:	0800469b 	.word	0x0800469b
 8004680:	08004689 	.word	0x08004689
 8004684:	0800471f 	.word	0x0800471f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d046      	beq.n	8004722 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004698:	e043      	b.n	8004722 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046a2:	d140      	bne.n	8004726 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a8:	e03d      	b.n	8004726 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b2:	d121      	bne.n	80046f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d837      	bhi.n	800472a <DMA_CheckFifoParam+0xda>
 80046ba:	a201      	add	r2, pc, #4	; (adr r2, 80046c0 <DMA_CheckFifoParam+0x70>)
 80046bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c0:	080046d1 	.word	0x080046d1
 80046c4:	080046d7 	.word	0x080046d7
 80046c8:	080046d1 	.word	0x080046d1
 80046cc:	080046e9 	.word	0x080046e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
      break;
 80046d4:	e030      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d025      	beq.n	800472e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e6:	e022      	b.n	800472e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046f0:	d11f      	bne.n	8004732 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046f6:	e01c      	b.n	8004732 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d903      	bls.n	8004706 <DMA_CheckFifoParam+0xb6>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d003      	beq.n	800470c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004704:	e018      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
      break;
 800470a:	e015      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00e      	beq.n	8004736 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
      break;
 800471c:	e00b      	b.n	8004736 <DMA_CheckFifoParam+0xe6>
      break;
 800471e:	bf00      	nop
 8004720:	e00a      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;
 8004722:	bf00      	nop
 8004724:	e008      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;
 8004726:	bf00      	nop
 8004728:	e006      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;
 800472a:	bf00      	nop
 800472c:	e004      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;
 800472e:	bf00      	nop
 8004730:	e002      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;   
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;
 8004736:	bf00      	nop
    }
  } 
  
  return status; 
 8004738:	7bfb      	ldrb	r3, [r7, #15]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop

08004748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004748:	b480      	push	{r7}
 800474a:	b089      	sub	sp, #36	; 0x24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004756:	2300      	movs	r3, #0
 8004758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800475a:	2300      	movs	r3, #0
 800475c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	e159      	b.n	8004a18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004764:	2201      	movs	r2, #1
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4013      	ands	r3, r2
 8004776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	429a      	cmp	r2, r3
 800477e:	f040 8148 	bne.w	8004a12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b01      	cmp	r3, #1
 800478c:	d005      	beq.n	800479a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004796:	2b02      	cmp	r3, #2
 8004798:	d130      	bne.n	80047fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	2203      	movs	r2, #3
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047d0:	2201      	movs	r2, #1
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 0201 	and.w	r2, r3, #1
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	2b03      	cmp	r3, #3
 8004806:	d017      	beq.n	8004838 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	2203      	movs	r2, #3
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	43db      	mvns	r3, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4013      	ands	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4313      	orrs	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d123      	bne.n	800488c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	08da      	lsrs	r2, r3, #3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3208      	adds	r2, #8
 800484c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	220f      	movs	r2, #15
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4013      	ands	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	08da      	lsrs	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3208      	adds	r2, #8
 8004886:	69b9      	ldr	r1, [r7, #24]
 8004888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	2203      	movs	r2, #3
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 0203 	and.w	r2, r3, #3
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80a2 	beq.w	8004a12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	4b57      	ldr	r3, [pc, #348]	; (8004a30 <HAL_GPIO_Init+0x2e8>)
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	4a56      	ldr	r2, [pc, #344]	; (8004a30 <HAL_GPIO_Init+0x2e8>)
 80048d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048dc:	6453      	str	r3, [r2, #68]	; 0x44
 80048de:	4b54      	ldr	r3, [pc, #336]	; (8004a30 <HAL_GPIO_Init+0x2e8>)
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048ea:	4a52      	ldr	r2, [pc, #328]	; (8004a34 <HAL_GPIO_Init+0x2ec>)
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	089b      	lsrs	r3, r3, #2
 80048f0:	3302      	adds	r3, #2
 80048f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	220f      	movs	r2, #15
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43db      	mvns	r3, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4013      	ands	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a49      	ldr	r2, [pc, #292]	; (8004a38 <HAL_GPIO_Init+0x2f0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d019      	beq.n	800494a <HAL_GPIO_Init+0x202>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a48      	ldr	r2, [pc, #288]	; (8004a3c <HAL_GPIO_Init+0x2f4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <HAL_GPIO_Init+0x1fe>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a47      	ldr	r2, [pc, #284]	; (8004a40 <HAL_GPIO_Init+0x2f8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00d      	beq.n	8004942 <HAL_GPIO_Init+0x1fa>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a46      	ldr	r2, [pc, #280]	; (8004a44 <HAL_GPIO_Init+0x2fc>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <HAL_GPIO_Init+0x1f6>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a45      	ldr	r2, [pc, #276]	; (8004a48 <HAL_GPIO_Init+0x300>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d101      	bne.n	800493a <HAL_GPIO_Init+0x1f2>
 8004936:	2304      	movs	r3, #4
 8004938:	e008      	b.n	800494c <HAL_GPIO_Init+0x204>
 800493a:	2307      	movs	r3, #7
 800493c:	e006      	b.n	800494c <HAL_GPIO_Init+0x204>
 800493e:	2303      	movs	r3, #3
 8004940:	e004      	b.n	800494c <HAL_GPIO_Init+0x204>
 8004942:	2302      	movs	r3, #2
 8004944:	e002      	b.n	800494c <HAL_GPIO_Init+0x204>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <HAL_GPIO_Init+0x204>
 800494a:	2300      	movs	r3, #0
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	f002 0203 	and.w	r2, r2, #3
 8004952:	0092      	lsls	r2, r2, #2
 8004954:	4093      	lsls	r3, r2
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4313      	orrs	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800495c:	4935      	ldr	r1, [pc, #212]	; (8004a34 <HAL_GPIO_Init+0x2ec>)
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	089b      	lsrs	r3, r3, #2
 8004962:	3302      	adds	r3, #2
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800496a:	4b38      	ldr	r3, [pc, #224]	; (8004a4c <HAL_GPIO_Init+0x304>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	43db      	mvns	r3, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4013      	ands	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800498e:	4a2f      	ldr	r2, [pc, #188]	; (8004a4c <HAL_GPIO_Init+0x304>)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004994:	4b2d      	ldr	r3, [pc, #180]	; (8004a4c <HAL_GPIO_Init+0x304>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049b8:	4a24      	ldr	r2, [pc, #144]	; (8004a4c <HAL_GPIO_Init+0x304>)
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049be:	4b23      	ldr	r3, [pc, #140]	; (8004a4c <HAL_GPIO_Init+0x304>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	43db      	mvns	r3, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4013      	ands	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049e2:	4a1a      	ldr	r2, [pc, #104]	; (8004a4c <HAL_GPIO_Init+0x304>)
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049e8:	4b18      	ldr	r3, [pc, #96]	; (8004a4c <HAL_GPIO_Init+0x304>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	43db      	mvns	r3, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4013      	ands	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a0c:	4a0f      	ldr	r2, [pc, #60]	; (8004a4c <HAL_GPIO_Init+0x304>)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	3301      	adds	r3, #1
 8004a16:	61fb      	str	r3, [r7, #28]
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	2b0f      	cmp	r3, #15
 8004a1c:	f67f aea2 	bls.w	8004764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	3724      	adds	r7, #36	; 0x24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40013800 	.word	0x40013800
 8004a38:	40020000 	.word	0x40020000
 8004a3c:	40020400 	.word	0x40020400
 8004a40:	40020800 	.word	0x40020800
 8004a44:	40020c00 	.word	0x40020c00
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	40013c00 	.word	0x40013c00

08004a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	807b      	strh	r3, [r7, #2]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a60:	787b      	ldrb	r3, [r7, #1]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a66:	887a      	ldrh	r2, [r7, #2]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a6c:	e003      	b.n	8004a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a6e:	887b      	ldrh	r3, [r7, #2]
 8004a70:	041a      	lsls	r2, r3, #16
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	619a      	str	r2, [r3, #24]
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
	...

08004a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e12b      	b.n	8004cee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fd f9a2 	bl	8001df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2224      	movs	r2, #36	; 0x24
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0201 	bic.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ad6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ae8:	f001 f888 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 8004aec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	4a81      	ldr	r2, [pc, #516]	; (8004cf8 <HAL_I2C_Init+0x274>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d807      	bhi.n	8004b08 <HAL_I2C_Init+0x84>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4a80      	ldr	r2, [pc, #512]	; (8004cfc <HAL_I2C_Init+0x278>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	bf94      	ite	ls
 8004b00:	2301      	movls	r3, #1
 8004b02:	2300      	movhi	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	e006      	b.n	8004b16 <HAL_I2C_Init+0x92>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4a7d      	ldr	r2, [pc, #500]	; (8004d00 <HAL_I2C_Init+0x27c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	bf94      	ite	ls
 8004b10:	2301      	movls	r3, #1
 8004b12:	2300      	movhi	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e0e7      	b.n	8004cee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4a78      	ldr	r2, [pc, #480]	; (8004d04 <HAL_I2C_Init+0x280>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	0c9b      	lsrs	r3, r3, #18
 8004b28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	4a6a      	ldr	r2, [pc, #424]	; (8004cf8 <HAL_I2C_Init+0x274>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d802      	bhi.n	8004b58 <HAL_I2C_Init+0xd4>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	3301      	adds	r3, #1
 8004b56:	e009      	b.n	8004b6c <HAL_I2C_Init+0xe8>
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	4a69      	ldr	r2, [pc, #420]	; (8004d08 <HAL_I2C_Init+0x284>)
 8004b64:	fba2 2303 	umull	r2, r3, r2, r3
 8004b68:	099b      	lsrs	r3, r3, #6
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	430b      	orrs	r3, r1
 8004b72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	495c      	ldr	r1, [pc, #368]	; (8004cf8 <HAL_I2C_Init+0x274>)
 8004b88:	428b      	cmp	r3, r1
 8004b8a:	d819      	bhi.n	8004bc0 <HAL_I2C_Init+0x13c>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1e59      	subs	r1, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b9a:	1c59      	adds	r1, r3, #1
 8004b9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ba0:	400b      	ands	r3, r1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <HAL_I2C_Init+0x138>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1e59      	subs	r1, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bba:	e051      	b.n	8004c60 <HAL_I2C_Init+0x1dc>
 8004bbc:	2304      	movs	r3, #4
 8004bbe:	e04f      	b.n	8004c60 <HAL_I2C_Init+0x1dc>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d111      	bne.n	8004bec <HAL_I2C_Init+0x168>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	1e58      	subs	r0, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6859      	ldr	r1, [r3, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	440b      	add	r3, r1
 8004bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bda:	3301      	adds	r3, #1
 8004bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bf0c      	ite	eq
 8004be4:	2301      	moveq	r3, #1
 8004be6:	2300      	movne	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	e012      	b.n	8004c12 <HAL_I2C_Init+0x18e>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	1e58      	subs	r0, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6859      	ldr	r1, [r3, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	0099      	lsls	r1, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c02:	3301      	adds	r3, #1
 8004c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2301      	moveq	r3, #1
 8004c0e:	2300      	movne	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_I2C_Init+0x196>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e022      	b.n	8004c60 <HAL_I2C_Init+0x1dc>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10e      	bne.n	8004c40 <HAL_I2C_Init+0x1bc>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1e58      	subs	r0, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6859      	ldr	r1, [r3, #4]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	440b      	add	r3, r1
 8004c30:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c34:	3301      	adds	r3, #1
 8004c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3e:	e00f      	b.n	8004c60 <HAL_I2C_Init+0x1dc>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	1e58      	subs	r0, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6859      	ldr	r1, [r3, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	0099      	lsls	r1, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c56:	3301      	adds	r3, #1
 8004c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	6809      	ldr	r1, [r1, #0]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69da      	ldr	r2, [r3, #28]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6911      	ldr	r1, [r2, #16]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68d2      	ldr	r2, [r2, #12]
 8004c9a:	4311      	orrs	r1, r2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6812      	ldr	r2, [r2, #0]
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695a      	ldr	r2, [r3, #20]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	000186a0 	.word	0x000186a0
 8004cfc:	001e847f 	.word	0x001e847f
 8004d00:	003d08ff 	.word	0x003d08ff
 8004d04:	431bde83 	.word	0x431bde83
 8004d08:	10624dd3 	.word	0x10624dd3

08004d0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	461a      	mov	r2, r3
 8004d18:	460b      	mov	r3, r1
 8004d1a:	817b      	strh	r3, [r7, #10]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d20:	f7fe fd74 	bl	800380c <HAL_GetTick>
 8004d24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	f040 80e0 	bne.w	8004ef4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	2319      	movs	r3, #25
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	4970      	ldr	r1, [pc, #448]	; (8004f00 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f964 	bl	800500c <I2C_WaitOnFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e0d3      	b.n	8004ef6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_I2C_Master_Transmit+0x50>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e0cc      	b.n	8004ef6 <HAL_I2C_Master_Transmit+0x1ea>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d007      	beq.n	8004d82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0201 	orr.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2221      	movs	r2, #33	; 0x21
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2210      	movs	r2, #16
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	893a      	ldrh	r2, [r7, #8]
 8004db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4a50      	ldr	r2, [pc, #320]	; (8004f04 <HAL_I2C_Master_Transmit+0x1f8>)
 8004dc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004dc4:	8979      	ldrh	r1, [r7, #10]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	6a3a      	ldr	r2, [r7, #32]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 f89c 	bl	8004f08 <I2C_MasterRequestWrite>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e08d      	b.n	8004ef6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dda:	2300      	movs	r3, #0
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004df0:	e066      	b.n	8004ec0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	6a39      	ldr	r1, [r7, #32]
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 f9de 	bl	80051b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00d      	beq.n	8004e1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d107      	bne.n	8004e1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e06b      	b.n	8004ef6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	781a      	ldrb	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d11b      	bne.n	8004e94 <HAL_I2C_Master_Transmit+0x188>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d017      	beq.n	8004e94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	781a      	ldrb	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	6a39      	ldr	r1, [r7, #32]
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 f9ce 	bl	800523a <I2C_WaitOnBTFFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00d      	beq.n	8004ec0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d107      	bne.n	8004ebc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e01a      	b.n	8004ef6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d194      	bne.n	8004df2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e000      	b.n	8004ef6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ef4:	2302      	movs	r3, #2
  }
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	00100002 	.word	0x00100002
 8004f04:	ffff0000 	.word	0xffff0000

08004f08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	607a      	str	r2, [r7, #4]
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	460b      	mov	r3, r1
 8004f16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d006      	beq.n	8004f32 <I2C_MasterRequestWrite+0x2a>
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d003      	beq.n	8004f32 <I2C_MasterRequestWrite+0x2a>
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f30:	d108      	bne.n	8004f44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	e00b      	b.n	8004f5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	2b12      	cmp	r3, #18
 8004f4a:	d107      	bne.n	8004f5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f84f 	bl	800500c <I2C_WaitOnFlagUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00d      	beq.n	8004f90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f82:	d103      	bne.n	8004f8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e035      	b.n	8004ffc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f98:	d108      	bne.n	8004fac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f9a:	897b      	ldrh	r3, [r7, #10]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fa8:	611a      	str	r2, [r3, #16]
 8004faa:	e01b      	b.n	8004fe4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fac:	897b      	ldrh	r3, [r7, #10]
 8004fae:	11db      	asrs	r3, r3, #7
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	f003 0306 	and.w	r3, r3, #6
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	f063 030f 	orn	r3, r3, #15
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	490e      	ldr	r1, [pc, #56]	; (8005004 <I2C_MasterRequestWrite+0xfc>)
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 f875 	bl	80050ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e010      	b.n	8004ffc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fda:	897b      	ldrh	r3, [r7, #10]
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	4907      	ldr	r1, [pc, #28]	; (8005008 <I2C_MasterRequestWrite+0x100>)
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f865 	bl	80050ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	00010008 	.word	0x00010008
 8005008:	00010002 	.word	0x00010002

0800500c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	4613      	mov	r3, r2
 800501a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800501c:	e025      	b.n	800506a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d021      	beq.n	800506a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005026:	f7fe fbf1 	bl	800380c <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d302      	bcc.n	800503c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d116      	bne.n	800506a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	f043 0220 	orr.w	r2, r3, #32
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e023      	b.n	80050b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	0c1b      	lsrs	r3, r3, #16
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	d10d      	bne.n	8005090 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	43da      	mvns	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4013      	ands	r3, r2
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	bf0c      	ite	eq
 8005086:	2301      	moveq	r3, #1
 8005088:	2300      	movne	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	e00c      	b.n	80050aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	43da      	mvns	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4013      	ands	r3, r2
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bf0c      	ite	eq
 80050a2:	2301      	moveq	r3, #1
 80050a4:	2300      	movne	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	461a      	mov	r2, r3
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d0b6      	beq.n	800501e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	607a      	str	r2, [r7, #4]
 80050c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050c8:	e051      	b.n	800516e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d8:	d123      	bne.n	8005122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	f043 0204 	orr.w	r2, r3, #4
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e046      	b.n	80051b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005128:	d021      	beq.n	800516e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512a:	f7fe fb6f 	bl	800380c <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	429a      	cmp	r2, r3
 8005138:	d302      	bcc.n	8005140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d116      	bne.n	800516e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	f043 0220 	orr.w	r2, r3, #32
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e020      	b.n	80051b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	0c1b      	lsrs	r3, r3, #16
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	d10c      	bne.n	8005192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	43da      	mvns	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4013      	ands	r3, r2
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	bf14      	ite	ne
 800518a:	2301      	movne	r3, #1
 800518c:	2300      	moveq	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	e00b      	b.n	80051aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	43da      	mvns	r2, r3
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4013      	ands	r3, r2
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	bf14      	ite	ne
 80051a4:	2301      	movne	r3, #1
 80051a6:	2300      	moveq	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d18d      	bne.n	80050ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051c4:	e02d      	b.n	8005222 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 f878 	bl	80052bc <I2C_IsAcknowledgeFailed>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e02d      	b.n	8005232 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d021      	beq.n	8005222 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051de:	f7fe fb15 	bl	800380c <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d302      	bcc.n	80051f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d116      	bne.n	8005222 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f043 0220 	orr.w	r2, r3, #32
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e007      	b.n	8005232 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522c:	2b80      	cmp	r3, #128	; 0x80
 800522e:	d1ca      	bne.n	80051c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005246:	e02d      	b.n	80052a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 f837 	bl	80052bc <I2C_IsAcknowledgeFailed>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e02d      	b.n	80052b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525e:	d021      	beq.n	80052a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005260:	f7fe fad4 	bl	800380c <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	429a      	cmp	r2, r3
 800526e:	d302      	bcc.n	8005276 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d116      	bne.n	80052a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	f043 0220 	orr.w	r2, r3, #32
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e007      	b.n	80052b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d1ca      	bne.n	8005248 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d2:	d11b      	bne.n	800530c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	f043 0204 	orr.w	r2, r3, #4
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e000      	b.n	800530e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
	...

0800531c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e267      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d075      	beq.n	8005426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800533a:	4b88      	ldr	r3, [pc, #544]	; (800555c <HAL_RCC_OscConfig+0x240>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
 8005342:	2b04      	cmp	r3, #4
 8005344:	d00c      	beq.n	8005360 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005346:	4b85      	ldr	r3, [pc, #532]	; (800555c <HAL_RCC_OscConfig+0x240>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800534e:	2b08      	cmp	r3, #8
 8005350:	d112      	bne.n	8005378 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005352:	4b82      	ldr	r3, [pc, #520]	; (800555c <HAL_RCC_OscConfig+0x240>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800535e:	d10b      	bne.n	8005378 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005360:	4b7e      	ldr	r3, [pc, #504]	; (800555c <HAL_RCC_OscConfig+0x240>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d05b      	beq.n	8005424 <HAL_RCC_OscConfig+0x108>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d157      	bne.n	8005424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e242      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005380:	d106      	bne.n	8005390 <HAL_RCC_OscConfig+0x74>
 8005382:	4b76      	ldr	r3, [pc, #472]	; (800555c <HAL_RCC_OscConfig+0x240>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a75      	ldr	r2, [pc, #468]	; (800555c <HAL_RCC_OscConfig+0x240>)
 8005388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	e01d      	b.n	80053cc <HAL_RCC_OscConfig+0xb0>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005398:	d10c      	bne.n	80053b4 <HAL_RCC_OscConfig+0x98>
 800539a:	4b70      	ldr	r3, [pc, #448]	; (800555c <HAL_RCC_OscConfig+0x240>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a6f      	ldr	r2, [pc, #444]	; (800555c <HAL_RCC_OscConfig+0x240>)
 80053a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	4b6d      	ldr	r3, [pc, #436]	; (800555c <HAL_RCC_OscConfig+0x240>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a6c      	ldr	r2, [pc, #432]	; (800555c <HAL_RCC_OscConfig+0x240>)
 80053ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	e00b      	b.n	80053cc <HAL_RCC_OscConfig+0xb0>
 80053b4:	4b69      	ldr	r3, [pc, #420]	; (800555c <HAL_RCC_OscConfig+0x240>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a68      	ldr	r2, [pc, #416]	; (800555c <HAL_RCC_OscConfig+0x240>)
 80053ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	4b66      	ldr	r3, [pc, #408]	; (800555c <HAL_RCC_OscConfig+0x240>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a65      	ldr	r2, [pc, #404]	; (800555c <HAL_RCC_OscConfig+0x240>)
 80053c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d013      	beq.n	80053fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d4:	f7fe fa1a 	bl	800380c <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053dc:	f7fe fa16 	bl	800380c <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	; 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e207      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ee:	4b5b      	ldr	r3, [pc, #364]	; (800555c <HAL_RCC_OscConfig+0x240>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0xc0>
 80053fa:	e014      	b.n	8005426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fc:	f7fe fa06 	bl	800380c <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005404:	f7fe fa02 	bl	800380c <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	; 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e1f3      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005416:	4b51      	ldr	r3, [pc, #324]	; (800555c <HAL_RCC_OscConfig+0x240>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0xe8>
 8005422:	e000      	b.n	8005426 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d063      	beq.n	80054fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005432:	4b4a      	ldr	r3, [pc, #296]	; (800555c <HAL_RCC_OscConfig+0x240>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 030c 	and.w	r3, r3, #12
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00b      	beq.n	8005456 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800543e:	4b47      	ldr	r3, [pc, #284]	; (800555c <HAL_RCC_OscConfig+0x240>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005446:	2b08      	cmp	r3, #8
 8005448:	d11c      	bne.n	8005484 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800544a:	4b44      	ldr	r3, [pc, #272]	; (800555c <HAL_RCC_OscConfig+0x240>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d116      	bne.n	8005484 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005456:	4b41      	ldr	r3, [pc, #260]	; (800555c <HAL_RCC_OscConfig+0x240>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <HAL_RCC_OscConfig+0x152>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d001      	beq.n	800546e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e1c7      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800546e:	4b3b      	ldr	r3, [pc, #236]	; (800555c <HAL_RCC_OscConfig+0x240>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	4937      	ldr	r1, [pc, #220]	; (800555c <HAL_RCC_OscConfig+0x240>)
 800547e:	4313      	orrs	r3, r2
 8005480:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005482:	e03a      	b.n	80054fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d020      	beq.n	80054ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800548c:	4b34      	ldr	r3, [pc, #208]	; (8005560 <HAL_RCC_OscConfig+0x244>)
 800548e:	2201      	movs	r2, #1
 8005490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005492:	f7fe f9bb 	bl	800380c <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800549a:	f7fe f9b7 	bl	800380c <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e1a8      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ac:	4b2b      	ldr	r3, [pc, #172]	; (800555c <HAL_RCC_OscConfig+0x240>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f0      	beq.n	800549a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b8:	4b28      	ldr	r3, [pc, #160]	; (800555c <HAL_RCC_OscConfig+0x240>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4925      	ldr	r1, [pc, #148]	; (800555c <HAL_RCC_OscConfig+0x240>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	600b      	str	r3, [r1, #0]
 80054cc:	e015      	b.n	80054fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ce:	4b24      	ldr	r3, [pc, #144]	; (8005560 <HAL_RCC_OscConfig+0x244>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d4:	f7fe f99a 	bl	800380c <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054dc:	f7fe f996 	bl	800380c <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e187      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ee:	4b1b      	ldr	r3, [pc, #108]	; (800555c <HAL_RCC_OscConfig+0x240>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1f0      	bne.n	80054dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d036      	beq.n	8005574 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d016      	beq.n	800553c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800550e:	4b15      	ldr	r3, [pc, #84]	; (8005564 <HAL_RCC_OscConfig+0x248>)
 8005510:	2201      	movs	r2, #1
 8005512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005514:	f7fe f97a 	bl	800380c <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800551c:	f7fe f976 	bl	800380c <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e167      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800552e:	4b0b      	ldr	r3, [pc, #44]	; (800555c <HAL_RCC_OscConfig+0x240>)
 8005530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0f0      	beq.n	800551c <HAL_RCC_OscConfig+0x200>
 800553a:	e01b      	b.n	8005574 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800553c:	4b09      	ldr	r3, [pc, #36]	; (8005564 <HAL_RCC_OscConfig+0x248>)
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005542:	f7fe f963 	bl	800380c <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005548:	e00e      	b.n	8005568 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800554a:	f7fe f95f 	bl	800380c <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d907      	bls.n	8005568 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e150      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
 800555c:	40023800 	.word	0x40023800
 8005560:	42470000 	.word	0x42470000
 8005564:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005568:	4b88      	ldr	r3, [pc, #544]	; (800578c <HAL_RCC_OscConfig+0x470>)
 800556a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1ea      	bne.n	800554a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8097 	beq.w	80056b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005582:	2300      	movs	r3, #0
 8005584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005586:	4b81      	ldr	r3, [pc, #516]	; (800578c <HAL_RCC_OscConfig+0x470>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10f      	bne.n	80055b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005592:	2300      	movs	r3, #0
 8005594:	60bb      	str	r3, [r7, #8]
 8005596:	4b7d      	ldr	r3, [pc, #500]	; (800578c <HAL_RCC_OscConfig+0x470>)
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	4a7c      	ldr	r2, [pc, #496]	; (800578c <HAL_RCC_OscConfig+0x470>)
 800559c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a0:	6413      	str	r3, [r2, #64]	; 0x40
 80055a2:	4b7a      	ldr	r3, [pc, #488]	; (800578c <HAL_RCC_OscConfig+0x470>)
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055aa:	60bb      	str	r3, [r7, #8]
 80055ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ae:	2301      	movs	r3, #1
 80055b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b2:	4b77      	ldr	r3, [pc, #476]	; (8005790 <HAL_RCC_OscConfig+0x474>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d118      	bne.n	80055f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055be:	4b74      	ldr	r3, [pc, #464]	; (8005790 <HAL_RCC_OscConfig+0x474>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a73      	ldr	r2, [pc, #460]	; (8005790 <HAL_RCC_OscConfig+0x474>)
 80055c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ca:	f7fe f91f 	bl	800380c <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d0:	e008      	b.n	80055e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d2:	f7fe f91b 	bl	800380c <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d901      	bls.n	80055e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e10c      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e4:	4b6a      	ldr	r3, [pc, #424]	; (8005790 <HAL_RCC_OscConfig+0x474>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0f0      	beq.n	80055d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d106      	bne.n	8005606 <HAL_RCC_OscConfig+0x2ea>
 80055f8:	4b64      	ldr	r3, [pc, #400]	; (800578c <HAL_RCC_OscConfig+0x470>)
 80055fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fc:	4a63      	ldr	r2, [pc, #396]	; (800578c <HAL_RCC_OscConfig+0x470>)
 80055fe:	f043 0301 	orr.w	r3, r3, #1
 8005602:	6713      	str	r3, [r2, #112]	; 0x70
 8005604:	e01c      	b.n	8005640 <HAL_RCC_OscConfig+0x324>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	2b05      	cmp	r3, #5
 800560c:	d10c      	bne.n	8005628 <HAL_RCC_OscConfig+0x30c>
 800560e:	4b5f      	ldr	r3, [pc, #380]	; (800578c <HAL_RCC_OscConfig+0x470>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	4a5e      	ldr	r2, [pc, #376]	; (800578c <HAL_RCC_OscConfig+0x470>)
 8005614:	f043 0304 	orr.w	r3, r3, #4
 8005618:	6713      	str	r3, [r2, #112]	; 0x70
 800561a:	4b5c      	ldr	r3, [pc, #368]	; (800578c <HAL_RCC_OscConfig+0x470>)
 800561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561e:	4a5b      	ldr	r2, [pc, #364]	; (800578c <HAL_RCC_OscConfig+0x470>)
 8005620:	f043 0301 	orr.w	r3, r3, #1
 8005624:	6713      	str	r3, [r2, #112]	; 0x70
 8005626:	e00b      	b.n	8005640 <HAL_RCC_OscConfig+0x324>
 8005628:	4b58      	ldr	r3, [pc, #352]	; (800578c <HAL_RCC_OscConfig+0x470>)
 800562a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562c:	4a57      	ldr	r2, [pc, #348]	; (800578c <HAL_RCC_OscConfig+0x470>)
 800562e:	f023 0301 	bic.w	r3, r3, #1
 8005632:	6713      	str	r3, [r2, #112]	; 0x70
 8005634:	4b55      	ldr	r3, [pc, #340]	; (800578c <HAL_RCC_OscConfig+0x470>)
 8005636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005638:	4a54      	ldr	r2, [pc, #336]	; (800578c <HAL_RCC_OscConfig+0x470>)
 800563a:	f023 0304 	bic.w	r3, r3, #4
 800563e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d015      	beq.n	8005674 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005648:	f7fe f8e0 	bl	800380c <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800564e:	e00a      	b.n	8005666 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005650:	f7fe f8dc 	bl	800380c <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f241 3288 	movw	r2, #5000	; 0x1388
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e0cb      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005666:	4b49      	ldr	r3, [pc, #292]	; (800578c <HAL_RCC_OscConfig+0x470>)
 8005668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0ee      	beq.n	8005650 <HAL_RCC_OscConfig+0x334>
 8005672:	e014      	b.n	800569e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005674:	f7fe f8ca 	bl	800380c <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800567a:	e00a      	b.n	8005692 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800567c:	f7fe f8c6 	bl	800380c <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	f241 3288 	movw	r2, #5000	; 0x1388
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e0b5      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005692:	4b3e      	ldr	r3, [pc, #248]	; (800578c <HAL_RCC_OscConfig+0x470>)
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1ee      	bne.n	800567c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800569e:	7dfb      	ldrb	r3, [r7, #23]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d105      	bne.n	80056b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a4:	4b39      	ldr	r3, [pc, #228]	; (800578c <HAL_RCC_OscConfig+0x470>)
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	4a38      	ldr	r2, [pc, #224]	; (800578c <HAL_RCC_OscConfig+0x470>)
 80056aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 80a1 	beq.w	80057fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056ba:	4b34      	ldr	r3, [pc, #208]	; (800578c <HAL_RCC_OscConfig+0x470>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 030c 	and.w	r3, r3, #12
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d05c      	beq.n	8005780 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d141      	bne.n	8005752 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ce:	4b31      	ldr	r3, [pc, #196]	; (8005794 <HAL_RCC_OscConfig+0x478>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d4:	f7fe f89a 	bl	800380c <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056dc:	f7fe f896 	bl	800380c <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e087      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ee:	4b27      	ldr	r3, [pc, #156]	; (800578c <HAL_RCC_OscConfig+0x470>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f0      	bne.n	80056dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69da      	ldr	r2, [r3, #28]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	019b      	lsls	r3, r3, #6
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	3b01      	subs	r3, #1
 8005714:	041b      	lsls	r3, r3, #16
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	061b      	lsls	r3, r3, #24
 800571e:	491b      	ldr	r1, [pc, #108]	; (800578c <HAL_RCC_OscConfig+0x470>)
 8005720:	4313      	orrs	r3, r2
 8005722:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005724:	4b1b      	ldr	r3, [pc, #108]	; (8005794 <HAL_RCC_OscConfig+0x478>)
 8005726:	2201      	movs	r2, #1
 8005728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572a:	f7fe f86f 	bl	800380c <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005732:	f7fe f86b 	bl	800380c <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e05c      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005744:	4b11      	ldr	r3, [pc, #68]	; (800578c <HAL_RCC_OscConfig+0x470>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f0      	beq.n	8005732 <HAL_RCC_OscConfig+0x416>
 8005750:	e054      	b.n	80057fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005752:	4b10      	ldr	r3, [pc, #64]	; (8005794 <HAL_RCC_OscConfig+0x478>)
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005758:	f7fe f858 	bl	800380c <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005760:	f7fe f854 	bl	800380c <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e045      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005772:	4b06      	ldr	r3, [pc, #24]	; (800578c <HAL_RCC_OscConfig+0x470>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1f0      	bne.n	8005760 <HAL_RCC_OscConfig+0x444>
 800577e:	e03d      	b.n	80057fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d107      	bne.n	8005798 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e038      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
 800578c:	40023800 	.word	0x40023800
 8005790:	40007000 	.word	0x40007000
 8005794:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005798:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <HAL_RCC_OscConfig+0x4ec>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d028      	beq.n	80057f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d121      	bne.n	80057f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057be:	429a      	cmp	r2, r3
 80057c0:	d11a      	bne.n	80057f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057c8:	4013      	ands	r3, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d111      	bne.n	80057f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	085b      	lsrs	r3, r3, #1
 80057e0:	3b01      	subs	r3, #1
 80057e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d107      	bne.n	80057f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d001      	beq.n	80057fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e000      	b.n	80057fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40023800 	.word	0x40023800

0800580c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0cc      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005820:	4b68      	ldr	r3, [pc, #416]	; (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d90c      	bls.n	8005848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582e:	4b65      	ldr	r3, [pc, #404]	; (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005836:	4b63      	ldr	r3, [pc, #396]	; (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d001      	beq.n	8005848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e0b8      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d020      	beq.n	8005896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005860:	4b59      	ldr	r3, [pc, #356]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	4a58      	ldr	r2, [pc, #352]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800586a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005878:	4b53      	ldr	r3, [pc, #332]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	4a52      	ldr	r2, [pc, #328]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005884:	4b50      	ldr	r3, [pc, #320]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	494d      	ldr	r1, [pc, #308]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	4313      	orrs	r3, r2
 8005894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d044      	beq.n	800592c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d107      	bne.n	80058ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058aa:	4b47      	ldr	r3, [pc, #284]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d119      	bne.n	80058ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e07f      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d003      	beq.n	80058ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d107      	bne.n	80058da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ca:	4b3f      	ldr	r3, [pc, #252]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e06f      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058da:	4b3b      	ldr	r3, [pc, #236]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e067      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ea:	4b37      	ldr	r3, [pc, #220]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f023 0203 	bic.w	r2, r3, #3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4934      	ldr	r1, [pc, #208]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058fc:	f7fd ff86 	bl	800380c <HAL_GetTick>
 8005900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005902:	e00a      	b.n	800591a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005904:	f7fd ff82 	bl	800380c <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e04f      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591a:	4b2b      	ldr	r3, [pc, #172]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 020c 	and.w	r2, r3, #12
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	429a      	cmp	r2, r3
 800592a:	d1eb      	bne.n	8005904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800592c:	4b25      	ldr	r3, [pc, #148]	; (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d20c      	bcs.n	8005954 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593a:	4b22      	ldr	r3, [pc, #136]	; (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005942:	4b20      	ldr	r3, [pc, #128]	; (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	429a      	cmp	r2, r3
 800594e:	d001      	beq.n	8005954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e032      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005960:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4916      	ldr	r1, [pc, #88]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800596e:	4313      	orrs	r3, r2
 8005970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800597e:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	490e      	ldr	r1, [pc, #56]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800598e:	4313      	orrs	r3, r2
 8005990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005992:	f000 f821 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 8005996:	4602      	mov	r2, r0
 8005998:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	091b      	lsrs	r3, r3, #4
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	490a      	ldr	r1, [pc, #40]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 80059a4:	5ccb      	ldrb	r3, [r1, r3]
 80059a6:	fa22 f303 	lsr.w	r3, r2, r3
 80059aa:	4a09      	ldr	r2, [pc, #36]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 80059ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059ae:	4b09      	ldr	r3, [pc, #36]	; (80059d4 <HAL_RCC_ClockConfig+0x1c8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fd fee6 	bl	8003784 <HAL_InitTick>

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	40023c00 	.word	0x40023c00
 80059c8:	40023800 	.word	0x40023800
 80059cc:	0800ec00 	.word	0x0800ec00
 80059d0:	20000218 	.word	0x20000218
 80059d4:	2000021c 	.word	0x2000021c

080059d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059dc:	b094      	sub	sp, #80	; 0x50
 80059de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	647b      	str	r3, [r7, #68]	; 0x44
 80059e4:	2300      	movs	r3, #0
 80059e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e8:	2300      	movs	r3, #0
 80059ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059f0:	4b79      	ldr	r3, [pc, #484]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 030c 	and.w	r3, r3, #12
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d00d      	beq.n	8005a18 <HAL_RCC_GetSysClockFreq+0x40>
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	f200 80e1 	bhi.w	8005bc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <HAL_RCC_GetSysClockFreq+0x34>
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d003      	beq.n	8005a12 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a0a:	e0db      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a0c:	4b73      	ldr	r3, [pc, #460]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x204>)
 8005a0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a10:	e0db      	b.n	8005bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a12:	4b73      	ldr	r3, [pc, #460]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a16:	e0d8      	b.n	8005bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a18:	4b6f      	ldr	r3, [pc, #444]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a22:	4b6d      	ldr	r3, [pc, #436]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d063      	beq.n	8005af6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a2e:	4b6a      	ldr	r3, [pc, #424]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	099b      	lsrs	r3, r3, #6
 8005a34:	2200      	movs	r2, #0
 8005a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a40:	633b      	str	r3, [r7, #48]	; 0x30
 8005a42:	2300      	movs	r3, #0
 8005a44:	637b      	str	r3, [r7, #52]	; 0x34
 8005a46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	462b      	mov	r3, r5
 8005a4e:	f04f 0000 	mov.w	r0, #0
 8005a52:	f04f 0100 	mov.w	r1, #0
 8005a56:	0159      	lsls	r1, r3, #5
 8005a58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a5c:	0150      	lsls	r0, r2, #5
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	4621      	mov	r1, r4
 8005a64:	1a51      	subs	r1, r2, r1
 8005a66:	6139      	str	r1, [r7, #16]
 8005a68:	4629      	mov	r1, r5
 8005a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	f04f 0200 	mov.w	r2, #0
 8005a74:	f04f 0300 	mov.w	r3, #0
 8005a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a7c:	4659      	mov	r1, fp
 8005a7e:	018b      	lsls	r3, r1, #6
 8005a80:	4651      	mov	r1, sl
 8005a82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a86:	4651      	mov	r1, sl
 8005a88:	018a      	lsls	r2, r1, #6
 8005a8a:	4651      	mov	r1, sl
 8005a8c:	ebb2 0801 	subs.w	r8, r2, r1
 8005a90:	4659      	mov	r1, fp
 8005a92:	eb63 0901 	sbc.w	r9, r3, r1
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	f04f 0300 	mov.w	r3, #0
 8005a9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aaa:	4690      	mov	r8, r2
 8005aac:	4699      	mov	r9, r3
 8005aae:	4623      	mov	r3, r4
 8005ab0:	eb18 0303 	adds.w	r3, r8, r3
 8005ab4:	60bb      	str	r3, [r7, #8]
 8005ab6:	462b      	mov	r3, r5
 8005ab8:	eb49 0303 	adc.w	r3, r9, r3
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	f04f 0300 	mov.w	r3, #0
 8005ac6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005aca:	4629      	mov	r1, r5
 8005acc:	024b      	lsls	r3, r1, #9
 8005ace:	4621      	mov	r1, r4
 8005ad0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	024a      	lsls	r2, r1, #9
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4619      	mov	r1, r3
 8005adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ade:	2200      	movs	r2, #0
 8005ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ae4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ae8:	f7fb f8d6 	bl	8000c98 <__aeabi_uldivmod>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4613      	mov	r3, r2
 8005af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af4:	e058      	b.n	8005ba8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005af6:	4b38      	ldr	r3, [pc, #224]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	099b      	lsrs	r3, r3, #6
 8005afc:	2200      	movs	r2, #0
 8005afe:	4618      	mov	r0, r3
 8005b00:	4611      	mov	r1, r2
 8005b02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b06:	623b      	str	r3, [r7, #32]
 8005b08:	2300      	movs	r3, #0
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b10:	4642      	mov	r2, r8
 8005b12:	464b      	mov	r3, r9
 8005b14:	f04f 0000 	mov.w	r0, #0
 8005b18:	f04f 0100 	mov.w	r1, #0
 8005b1c:	0159      	lsls	r1, r3, #5
 8005b1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b22:	0150      	lsls	r0, r2, #5
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4641      	mov	r1, r8
 8005b2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b2e:	4649      	mov	r1, r9
 8005b30:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	f04f 0300 	mov.w	r3, #0
 8005b3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b48:	ebb2 040a 	subs.w	r4, r2, sl
 8005b4c:	eb63 050b 	sbc.w	r5, r3, fp
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	00eb      	lsls	r3, r5, #3
 8005b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b5e:	00e2      	lsls	r2, r4, #3
 8005b60:	4614      	mov	r4, r2
 8005b62:	461d      	mov	r5, r3
 8005b64:	4643      	mov	r3, r8
 8005b66:	18e3      	adds	r3, r4, r3
 8005b68:	603b      	str	r3, [r7, #0]
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	eb45 0303 	adc.w	r3, r5, r3
 8005b70:	607b      	str	r3, [r7, #4]
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	f04f 0300 	mov.w	r3, #0
 8005b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b7e:	4629      	mov	r1, r5
 8005b80:	028b      	lsls	r3, r1, #10
 8005b82:	4621      	mov	r1, r4
 8005b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b88:	4621      	mov	r1, r4
 8005b8a:	028a      	lsls	r2, r1, #10
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b92:	2200      	movs	r2, #0
 8005b94:	61bb      	str	r3, [r7, #24]
 8005b96:	61fa      	str	r2, [r7, #28]
 8005b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b9c:	f7fb f87c 	bl	8000c98 <__aeabi_uldivmod>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	0c1b      	lsrs	r3, r3, #16
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005bb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bc2:	e002      	b.n	8005bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bc4:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x204>)
 8005bc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3750      	adds	r7, #80	; 0x50
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bd6:	bf00      	nop
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	00f42400 	.word	0x00f42400
 8005be0:	007a1200 	.word	0x007a1200

08005be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005be8:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bea:	681b      	ldr	r3, [r3, #0]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	20000218 	.word	0x20000218

08005bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c00:	f7ff fff0 	bl	8005be4 <HAL_RCC_GetHCLKFreq>
 8005c04:	4602      	mov	r2, r0
 8005c06:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	0a9b      	lsrs	r3, r3, #10
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	4903      	ldr	r1, [pc, #12]	; (8005c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c12:	5ccb      	ldrb	r3, [r1, r3]
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	0800ec10 	.word	0x0800ec10

08005c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c28:	f7ff ffdc 	bl	8005be4 <HAL_RCC_GetHCLKFreq>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	0b5b      	lsrs	r3, r3, #13
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	4903      	ldr	r1, [pc, #12]	; (8005c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c3a:	5ccb      	ldrb	r3, [r1, r3]
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40023800 	.word	0x40023800
 8005c48:	0800ec10 	.word	0x0800ec10

08005c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e04c      	b.n	8005cf8 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d111      	bne.n	8005c8e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 fc16 	bl	80074a4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d102      	bne.n	8005c86 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a1f      	ldr	r2, [pc, #124]	; (8005d00 <HAL_TIM_Base_Init+0xb4>)
 8005c84:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2202      	movs	r2, #2
 8005c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	f001 f933 	bl	8006f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	080032fd 	.word	0x080032fd

08005d04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d001      	beq.n	8005d1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e03c      	b.n	8005d96 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1e      	ldr	r2, [pc, #120]	; (8005da4 <HAL_TIM_Base_Start+0xa0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d018      	beq.n	8005d60 <HAL_TIM_Base_Start+0x5c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d36:	d013      	beq.n	8005d60 <HAL_TIM_Base_Start+0x5c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1a      	ldr	r2, [pc, #104]	; (8005da8 <HAL_TIM_Base_Start+0xa4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00e      	beq.n	8005d60 <HAL_TIM_Base_Start+0x5c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a19      	ldr	r2, [pc, #100]	; (8005dac <HAL_TIM_Base_Start+0xa8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d009      	beq.n	8005d60 <HAL_TIM_Base_Start+0x5c>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a17      	ldr	r2, [pc, #92]	; (8005db0 <HAL_TIM_Base_Start+0xac>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d004      	beq.n	8005d60 <HAL_TIM_Base_Start+0x5c>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a16      	ldr	r2, [pc, #88]	; (8005db4 <HAL_TIM_Base_Start+0xb0>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d111      	bne.n	8005d84 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b06      	cmp	r3, #6
 8005d70:	d010      	beq.n	8005d94 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0201 	orr.w	r2, r2, #1
 8005d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d82:	e007      	b.n	8005d94 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40010000 	.word	0x40010000
 8005da8:	40000400 	.word	0x40000400
 8005dac:	40000800 	.word	0x40000800
 8005db0:	40000c00 	.word	0x40000c00
 8005db4:	40014000 	.word	0x40014000

08005db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d001      	beq.n	8005dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e044      	b.n	8005e5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1e      	ldr	r2, [pc, #120]	; (8005e68 <HAL_TIM_Base_Start_IT+0xb0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d018      	beq.n	8005e24 <HAL_TIM_Base_Start_IT+0x6c>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfa:	d013      	beq.n	8005e24 <HAL_TIM_Base_Start_IT+0x6c>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1a      	ldr	r2, [pc, #104]	; (8005e6c <HAL_TIM_Base_Start_IT+0xb4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00e      	beq.n	8005e24 <HAL_TIM_Base_Start_IT+0x6c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a19      	ldr	r2, [pc, #100]	; (8005e70 <HAL_TIM_Base_Start_IT+0xb8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d009      	beq.n	8005e24 <HAL_TIM_Base_Start_IT+0x6c>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a17      	ldr	r2, [pc, #92]	; (8005e74 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <HAL_TIM_Base_Start_IT+0x6c>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a16      	ldr	r2, [pc, #88]	; (8005e78 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d111      	bne.n	8005e48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b06      	cmp	r3, #6
 8005e34:	d010      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0201 	orr.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e46:	e007      	b.n	8005e58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800
 8005e74:	40000c00 	.word	0x40000c00
 8005e78:	40014000 	.word	0x40014000

08005e7c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e04c      	b.n	8005f28 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d111      	bne.n	8005ebe <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f001 fafe 	bl	80074a4 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d102      	bne.n	8005eb6 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a1f      	ldr	r2, [pc, #124]	; (8005f30 <HAL_TIM_OC_Init+0xb4>)
 8005eb4:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	f001 f81b 	bl	8006f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	08005f35 	.word	0x08005f35

08005f34 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e04c      	b.n	8005ff4 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d111      	bne.n	8005f8a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f001 fa98 	bl	80074a4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d102      	bne.n	8005f82 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a1f      	ldr	r2, [pc, #124]	; (8005ffc <HAL_TIM_PWM_Init+0xb4>)
 8005f80:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f000 ffb5 	bl	8006f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	08006001 	.word	0x08006001

08006000 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d109      	bne.n	8006038 <HAL_TIM_PWM_Start+0x24>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b01      	cmp	r3, #1
 800602e:	bf14      	ite	ne
 8006030:	2301      	movne	r3, #1
 8006032:	2300      	moveq	r3, #0
 8006034:	b2db      	uxtb	r3, r3
 8006036:	e022      	b.n	800607e <HAL_TIM_PWM_Start+0x6a>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b04      	cmp	r3, #4
 800603c:	d109      	bne.n	8006052 <HAL_TIM_PWM_Start+0x3e>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b01      	cmp	r3, #1
 8006048:	bf14      	ite	ne
 800604a:	2301      	movne	r3, #1
 800604c:	2300      	moveq	r3, #0
 800604e:	b2db      	uxtb	r3, r3
 8006050:	e015      	b.n	800607e <HAL_TIM_PWM_Start+0x6a>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b08      	cmp	r3, #8
 8006056:	d109      	bne.n	800606c <HAL_TIM_PWM_Start+0x58>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b01      	cmp	r3, #1
 8006062:	bf14      	ite	ne
 8006064:	2301      	movne	r3, #1
 8006066:	2300      	moveq	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	e008      	b.n	800607e <HAL_TIM_PWM_Start+0x6a>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b01      	cmp	r3, #1
 8006076:	bf14      	ite	ne
 8006078:	2301      	movne	r3, #1
 800607a:	2300      	moveq	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e068      	b.n	8006158 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d104      	bne.n	8006096 <HAL_TIM_PWM_Start+0x82>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006094:	e013      	b.n	80060be <HAL_TIM_PWM_Start+0xaa>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b04      	cmp	r3, #4
 800609a:	d104      	bne.n	80060a6 <HAL_TIM_PWM_Start+0x92>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060a4:	e00b      	b.n	80060be <HAL_TIM_PWM_Start+0xaa>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d104      	bne.n	80060b6 <HAL_TIM_PWM_Start+0xa2>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060b4:	e003      	b.n	80060be <HAL_TIM_PWM_Start+0xaa>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2201      	movs	r2, #1
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 f9c6 	bl	8007458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a23      	ldr	r2, [pc, #140]	; (8006160 <HAL_TIM_PWM_Start+0x14c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d107      	bne.n	80060e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1d      	ldr	r2, [pc, #116]	; (8006160 <HAL_TIM_PWM_Start+0x14c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d018      	beq.n	8006122 <HAL_TIM_PWM_Start+0x10e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f8:	d013      	beq.n	8006122 <HAL_TIM_PWM_Start+0x10e>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a19      	ldr	r2, [pc, #100]	; (8006164 <HAL_TIM_PWM_Start+0x150>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00e      	beq.n	8006122 <HAL_TIM_PWM_Start+0x10e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a17      	ldr	r2, [pc, #92]	; (8006168 <HAL_TIM_PWM_Start+0x154>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d009      	beq.n	8006122 <HAL_TIM_PWM_Start+0x10e>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a16      	ldr	r2, [pc, #88]	; (800616c <HAL_TIM_PWM_Start+0x158>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d004      	beq.n	8006122 <HAL_TIM_PWM_Start+0x10e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a14      	ldr	r2, [pc, #80]	; (8006170 <HAL_TIM_PWM_Start+0x15c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d111      	bne.n	8006146 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b06      	cmp	r3, #6
 8006132:	d010      	beq.n	8006156 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006144:	e007      	b.n	8006156 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f042 0201 	orr.w	r2, r2, #1
 8006154:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40010000 	.word	0x40010000
 8006164:	40000400 	.word	0x40000400
 8006168:	40000800 	.word	0x40000800
 800616c:	40000c00 	.word	0x40000c00
 8006170:	40014000 	.word	0x40014000

08006174 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e04c      	b.n	8006222 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d111      	bne.n	80061b8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f001 f981 	bl	80074a4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d102      	bne.n	80061b0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a1f      	ldr	r2, [pc, #124]	; (800622c <HAL_TIM_OnePulse_Init+0xb8>)
 80061ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3304      	adds	r3, #4
 80061c8:	4619      	mov	r1, r3
 80061ca:	4610      	mov	r0, r2
 80061cc:	f000 fe9e 	bl	8006f0c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0208 	bic.w	r2, r2, #8
 80061de:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6819      	ldr	r1, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	08006231 	.word	0x08006231

08006230 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006254:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800625c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006264:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800626c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d108      	bne.n	8006286 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006274:	7bbb      	ldrb	r3, [r7, #14]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d105      	bne.n	8006286 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800627a:	7b7b      	ldrb	r3, [r7, #13]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d102      	bne.n	8006286 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006280:	7b3b      	ldrb	r3, [r7, #12]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d001      	beq.n	800628a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e03b      	b.n	8006302 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2202      	movs	r2, #2
 800628e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2202      	movs	r2, #2
 80062a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f042 0202 	orr.w	r2, r2, #2
 80062b8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0204 	orr.w	r2, r2, #4
 80062c8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2201      	movs	r2, #1
 80062d0:	2100      	movs	r1, #0
 80062d2:	4618      	mov	r0, r3
 80062d4:	f001 f8c0 	bl	8007458 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2201      	movs	r2, #1
 80062de:	2104      	movs	r1, #4
 80062e0:	4618      	mov	r0, r3
 80062e2:	f001 f8b9 	bl	8007458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a08      	ldr	r2, [pc, #32]	; (800630c <HAL_TIM_OnePulse_Start_IT+0xc8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d107      	bne.n	8006300 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	40010000 	.word	0x40010000

08006310 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e0a2      	b.n	800646a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d111      	bne.n	8006354 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f001 f8b3 	bl	80074a4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006342:	2b00      	cmp	r3, #0
 8006344:	d102      	bne.n	800634c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a4a      	ldr	r2, [pc, #296]	; (8006474 <HAL_TIM_Encoder_Init+0x164>)
 800634a:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	6812      	ldr	r2, [r2, #0]
 8006366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800636a:	f023 0307 	bic.w	r3, r3, #7
 800636e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3304      	adds	r3, #4
 8006378:	4619      	mov	r1, r3
 800637a:	4610      	mov	r0, r2
 800637c:	f000 fdc6 	bl	8006f0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	4313      	orrs	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a8:	f023 0303 	bic.w	r3, r3, #3
 80063ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	021b      	lsls	r3, r3, #8
 80063b8:	4313      	orrs	r3, r2
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80063c6:	f023 030c 	bic.w	r3, r3, #12
 80063ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	021b      	lsls	r3, r3, #8
 80063e2:	4313      	orrs	r3, r2
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	011a      	lsls	r2, r3, #4
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	031b      	lsls	r3, r3, #12
 80063f6:	4313      	orrs	r3, r2
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006404:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800640c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	4313      	orrs	r3, r2
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	080033d5 	.word	0x080033d5

08006478 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006488:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006490:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006498:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d110      	bne.n	80064ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d102      	bne.n	80064b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80064ae:	7b7b      	ldrb	r3, [r7, #13]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d001      	beq.n	80064b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e069      	b.n	800658c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c8:	e031      	b.n	800652e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d110      	bne.n	80064f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d102      	bne.n	80064dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064d6:	7b3b      	ldrb	r3, [r7, #12]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d001      	beq.n	80064e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e055      	b.n	800658c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064f0:	e01d      	b.n	800652e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d108      	bne.n	800650a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064f8:	7bbb      	ldrb	r3, [r7, #14]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d105      	bne.n	800650a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064fe:	7b7b      	ldrb	r3, [r7, #13]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d102      	bne.n	800650a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006504:	7b3b      	ldrb	r3, [r7, #12]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d001      	beq.n	800650e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e03e      	b.n	800658c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2202      	movs	r2, #2
 8006512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2202      	movs	r2, #2
 800651a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2202      	movs	r2, #2
 8006522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2202      	movs	r2, #2
 800652a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_TIM_Encoder_Start+0xc4>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b04      	cmp	r3, #4
 8006538:	d008      	beq.n	800654c <HAL_TIM_Encoder_Start+0xd4>
 800653a:	e00f      	b.n	800655c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2201      	movs	r2, #1
 8006542:	2100      	movs	r1, #0
 8006544:	4618      	mov	r0, r3
 8006546:	f000 ff87 	bl	8007458 <TIM_CCxChannelCmd>
      break;
 800654a:	e016      	b.n	800657a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2201      	movs	r2, #1
 8006552:	2104      	movs	r1, #4
 8006554:	4618      	mov	r0, r3
 8006556:	f000 ff7f 	bl	8007458 <TIM_CCxChannelCmd>
      break;
 800655a:	e00e      	b.n	800657a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2201      	movs	r2, #1
 8006562:	2100      	movs	r1, #0
 8006564:	4618      	mov	r0, r3
 8006566:	f000 ff77 	bl	8007458 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2201      	movs	r2, #1
 8006570:	2104      	movs	r1, #4
 8006572:	4618      	mov	r0, r3
 8006574:	f000 ff70 	bl	8007458 <TIM_CCxChannelCmd>
      break;
 8006578:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f042 0201 	orr.w	r2, r2, #1
 8006588:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d128      	bne.n	80065fc <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d121      	bne.n	80065fc <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f06f 0202 	mvn.w	r2, #2
 80065c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4798      	blx	r3
 80065e0:	e009      	b.n	80065f6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	2b04      	cmp	r3, #4
 8006608:	d128      	bne.n	800665c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b04      	cmp	r3, #4
 8006616:	d121      	bne.n	800665c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f06f 0204 	mvn.w	r2, #4
 8006620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2202      	movs	r2, #2
 8006626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006632:	2b00      	cmp	r3, #0
 8006634:	d005      	beq.n	8006642 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	4798      	blx	r3
 8006640:	e009      	b.n	8006656 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b08      	cmp	r3, #8
 8006668:	d128      	bne.n	80066bc <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f003 0308 	and.w	r3, r3, #8
 8006674:	2b08      	cmp	r3, #8
 8006676:	d121      	bne.n	80066bc <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0208 	mvn.w	r2, #8
 8006680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2204      	movs	r2, #4
 8006686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d005      	beq.n	80066a2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	4798      	blx	r3
 80066a0:	e009      	b.n	80066b6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f003 0310 	and.w	r3, r3, #16
 80066c6:	2b10      	cmp	r3, #16
 80066c8:	d128      	bne.n	800671c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f003 0310 	and.w	r3, r3, #16
 80066d4:	2b10      	cmp	r3, #16
 80066d6:	d121      	bne.n	800671c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f06f 0210 	mvn.w	r2, #16
 80066e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2208      	movs	r2, #8
 80066e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
 8006700:	e009      	b.n	8006716 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b01      	cmp	r3, #1
 8006728:	d110      	bne.n	800674c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b01      	cmp	r3, #1
 8006736:	d109      	bne.n	800674c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0201 	mvn.w	r2, #1
 8006740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006756:	2b80      	cmp	r3, #128	; 0x80
 8006758:	d110      	bne.n	800677c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006764:	2b80      	cmp	r3, #128	; 0x80
 8006766:	d109      	bne.n	800677c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006786:	2b40      	cmp	r3, #64	; 0x40
 8006788:	d110      	bne.n	80067ac <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006794:	2b40      	cmp	r3, #64	; 0x40
 8006796:	d109      	bne.n	80067ac <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d110      	bne.n	80067dc <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d109      	bne.n	80067dc <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f06f 0220 	mvn.w	r2, #32
 80067d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d101      	bne.n	8006802 <HAL_TIM_OC_ConfigChannel+0x1e>
 80067fe:	2302      	movs	r3, #2
 8006800:	e048      	b.n	8006894 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b0c      	cmp	r3, #12
 800680e:	d839      	bhi.n	8006884 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006810:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006816:	bf00      	nop
 8006818:	0800684d 	.word	0x0800684d
 800681c:	08006885 	.word	0x08006885
 8006820:	08006885 	.word	0x08006885
 8006824:	08006885 	.word	0x08006885
 8006828:	0800685b 	.word	0x0800685b
 800682c:	08006885 	.word	0x08006885
 8006830:	08006885 	.word	0x08006885
 8006834:	08006885 	.word	0x08006885
 8006838:	08006869 	.word	0x08006869
 800683c:	08006885 	.word	0x08006885
 8006840:	08006885 	.word	0x08006885
 8006844:	08006885 	.word	0x08006885
 8006848:	08006877 	.word	0x08006877
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68b9      	ldr	r1, [r7, #8]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fbda 	bl	800700c <TIM_OC1_SetConfig>
      break;
 8006858:	e017      	b.n	800688a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68b9      	ldr	r1, [r7, #8]
 8006860:	4618      	mov	r0, r3
 8006862:	f000 fc39 	bl	80070d8 <TIM_OC2_SetConfig>
      break;
 8006866:	e010      	b.n	800688a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68b9      	ldr	r1, [r7, #8]
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fc9e 	bl	80071b0 <TIM_OC3_SetConfig>
      break;
 8006874:	e009      	b.n	800688a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68b9      	ldr	r1, [r7, #8]
 800687c:	4618      	mov	r0, r3
 800687e:	f000 fd01 	bl	8007284 <TIM_OC4_SetConfig>
      break;
 8006882:	e002      	b.n	800688a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	75fb      	strb	r3, [r7, #23]
      break;
 8006888:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006892:	7dfb      	ldrb	r3, [r7, #23]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d101      	bne.n	80068ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068b6:	2302      	movs	r3, #2
 80068b8:	e0ae      	b.n	8006a18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b0c      	cmp	r3, #12
 80068c6:	f200 809f 	bhi.w	8006a08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80068ca:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d0:	08006905 	.word	0x08006905
 80068d4:	08006a09 	.word	0x08006a09
 80068d8:	08006a09 	.word	0x08006a09
 80068dc:	08006a09 	.word	0x08006a09
 80068e0:	08006945 	.word	0x08006945
 80068e4:	08006a09 	.word	0x08006a09
 80068e8:	08006a09 	.word	0x08006a09
 80068ec:	08006a09 	.word	0x08006a09
 80068f0:	08006987 	.word	0x08006987
 80068f4:	08006a09 	.word	0x08006a09
 80068f8:	08006a09 	.word	0x08006a09
 80068fc:	08006a09 	.word	0x08006a09
 8006900:	080069c7 	.word	0x080069c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	4618      	mov	r0, r3
 800690c:	f000 fb7e 	bl	800700c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0208 	orr.w	r2, r2, #8
 800691e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699a      	ldr	r2, [r3, #24]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0204 	bic.w	r2, r2, #4
 800692e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6999      	ldr	r1, [r3, #24]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	691a      	ldr	r2, [r3, #16]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	619a      	str	r2, [r3, #24]
      break;
 8006942:	e064      	b.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68b9      	ldr	r1, [r7, #8]
 800694a:	4618      	mov	r0, r3
 800694c:	f000 fbc4 	bl	80070d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699a      	ldr	r2, [r3, #24]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800695e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699a      	ldr	r2, [r3, #24]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800696e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6999      	ldr	r1, [r3, #24]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	021a      	lsls	r2, r3, #8
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	619a      	str	r2, [r3, #24]
      break;
 8006984:	e043      	b.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fc0f 	bl	80071b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69da      	ldr	r2, [r3, #28]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f042 0208 	orr.w	r2, r2, #8
 80069a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69da      	ldr	r2, [r3, #28]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f022 0204 	bic.w	r2, r2, #4
 80069b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69d9      	ldr	r1, [r3, #28]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	691a      	ldr	r2, [r3, #16]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	61da      	str	r2, [r3, #28]
      break;
 80069c4:	e023      	b.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68b9      	ldr	r1, [r7, #8]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fc59 	bl	8007284 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	69da      	ldr	r2, [r3, #28]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69da      	ldr	r2, [r3, #28]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69d9      	ldr	r1, [r3, #28]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	021a      	lsls	r2, r3, #8
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	61da      	str	r2, [r3, #28]
      break;
 8006a06:	e002      	b.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_TIM_ConfigClockSource+0x1c>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e0b4      	b.n	8006ba6 <HAL_TIM_ConfigClockSource+0x186>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a74:	d03e      	beq.n	8006af4 <HAL_TIM_ConfigClockSource+0xd4>
 8006a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a7a:	f200 8087 	bhi.w	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
 8006a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a82:	f000 8086 	beq.w	8006b92 <HAL_TIM_ConfigClockSource+0x172>
 8006a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a8a:	d87f      	bhi.n	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
 8006a8c:	2b70      	cmp	r3, #112	; 0x70
 8006a8e:	d01a      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0xa6>
 8006a90:	2b70      	cmp	r3, #112	; 0x70
 8006a92:	d87b      	bhi.n	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
 8006a94:	2b60      	cmp	r3, #96	; 0x60
 8006a96:	d050      	beq.n	8006b3a <HAL_TIM_ConfigClockSource+0x11a>
 8006a98:	2b60      	cmp	r3, #96	; 0x60
 8006a9a:	d877      	bhi.n	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
 8006a9c:	2b50      	cmp	r3, #80	; 0x50
 8006a9e:	d03c      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0xfa>
 8006aa0:	2b50      	cmp	r3, #80	; 0x50
 8006aa2:	d873      	bhi.n	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
 8006aa4:	2b40      	cmp	r3, #64	; 0x40
 8006aa6:	d058      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x13a>
 8006aa8:	2b40      	cmp	r3, #64	; 0x40
 8006aaa:	d86f      	bhi.n	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
 8006aac:	2b30      	cmp	r3, #48	; 0x30
 8006aae:	d064      	beq.n	8006b7a <HAL_TIM_ConfigClockSource+0x15a>
 8006ab0:	2b30      	cmp	r3, #48	; 0x30
 8006ab2:	d86b      	bhi.n	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	d060      	beq.n	8006b7a <HAL_TIM_ConfigClockSource+0x15a>
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	d867      	bhi.n	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d05c      	beq.n	8006b7a <HAL_TIM_ConfigClockSource+0x15a>
 8006ac0:	2b10      	cmp	r3, #16
 8006ac2:	d05a      	beq.n	8006b7a <HAL_TIM_ConfigClockSource+0x15a>
 8006ac4:	e062      	b.n	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6818      	ldr	r0, [r3, #0]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	6899      	ldr	r1, [r3, #8]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	f000 fc9f 	bl	8007418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ae8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	609a      	str	r2, [r3, #8]
      break;
 8006af2:	e04f      	b.n	8006b94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	6899      	ldr	r1, [r3, #8]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f000 fc88 	bl	8007418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b16:	609a      	str	r2, [r3, #8]
      break;
 8006b18:	e03c      	b.n	8006b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6818      	ldr	r0, [r3, #0]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6859      	ldr	r1, [r3, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	461a      	mov	r2, r3
 8006b28:	f000 fbfc 	bl	8007324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2150      	movs	r1, #80	; 0x50
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fc55 	bl	80073e2 <TIM_ITRx_SetConfig>
      break;
 8006b38:	e02c      	b.n	8006b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6818      	ldr	r0, [r3, #0]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	6859      	ldr	r1, [r3, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f000 fc1b 	bl	8007382 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2160      	movs	r1, #96	; 0x60
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fc45 	bl	80073e2 <TIM_ITRx_SetConfig>
      break;
 8006b58:	e01c      	b.n	8006b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6818      	ldr	r0, [r3, #0]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	6859      	ldr	r1, [r3, #4]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	461a      	mov	r2, r3
 8006b68:	f000 fbdc 	bl	8007324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2140      	movs	r1, #64	; 0x40
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fc35 	bl	80073e2 <TIM_ITRx_SetConfig>
      break;
 8006b78:	e00c      	b.n	8006b94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4619      	mov	r1, r3
 8006b84:	4610      	mov	r0, r2
 8006b86:	f000 fc2c 	bl	80073e2 <TIM_ITRx_SetConfig>
      break;
 8006b8a:	e003      	b.n	8006b94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b90:	e000      	b.n	8006b94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bf2:	bf00      	nop
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
	...

08006c78 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	460b      	mov	r3, r1
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e135      	b.n	8006f00 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d101      	bne.n	8006ca2 <HAL_TIM_RegisterCallback+0x2a>
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	e12e      	b.n	8006f00 <HAL_TIM_RegisterCallback+0x288>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	f040 80ba 	bne.w	8006e2c <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8006cb8:	7afb      	ldrb	r3, [r7, #11]
 8006cba:	2b1a      	cmp	r3, #26
 8006cbc:	f200 80b3 	bhi.w	8006e26 <HAL_TIM_RegisterCallback+0x1ae>
 8006cc0:	a201      	add	r2, pc, #4	; (adr r2, 8006cc8 <HAL_TIM_RegisterCallback+0x50>)
 8006cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc6:	bf00      	nop
 8006cc8:	08006d35 	.word	0x08006d35
 8006ccc:	08006d3d 	.word	0x08006d3d
 8006cd0:	08006d45 	.word	0x08006d45
 8006cd4:	08006d4d 	.word	0x08006d4d
 8006cd8:	08006d55 	.word	0x08006d55
 8006cdc:	08006d5d 	.word	0x08006d5d
 8006ce0:	08006d65 	.word	0x08006d65
 8006ce4:	08006d6d 	.word	0x08006d6d
 8006ce8:	08006d75 	.word	0x08006d75
 8006cec:	08006d7d 	.word	0x08006d7d
 8006cf0:	08006d85 	.word	0x08006d85
 8006cf4:	08006d8d 	.word	0x08006d8d
 8006cf8:	08006d95 	.word	0x08006d95
 8006cfc:	08006d9d 	.word	0x08006d9d
 8006d00:	08006da5 	.word	0x08006da5
 8006d04:	08006daf 	.word	0x08006daf
 8006d08:	08006db9 	.word	0x08006db9
 8006d0c:	08006dc3 	.word	0x08006dc3
 8006d10:	08006dcd 	.word	0x08006dcd
 8006d14:	08006dd7 	.word	0x08006dd7
 8006d18:	08006de1 	.word	0x08006de1
 8006d1c:	08006deb 	.word	0x08006deb
 8006d20:	08006df5 	.word	0x08006df5
 8006d24:	08006dff 	.word	0x08006dff
 8006d28:	08006e09 	.word	0x08006e09
 8006d2c:	08006e13 	.word	0x08006e13
 8006d30:	08006e1d 	.word	0x08006e1d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006d3a:	e0dc      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006d42:	e0d8      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006d4a:	e0d4      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006d52:	e0d0      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006d5a:	e0cc      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006d62:	e0c8      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006d6a:	e0c4      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006d72:	e0c0      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006d7a:	e0bc      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006d82:	e0b8      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006d8a:	e0b4      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006d92:	e0b0      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006d9a:	e0ac      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006da2:	e0a8      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8006dac:	e0a3      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8006db6:	e09e      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8006dc0:	e099      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8006dca:	e094      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8006dd4:	e08f      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8006dde:	e08a      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8006de8:	e085      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8006df2:	e080      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8006dfc:	e07b      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8006e06:	e076      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8006e10:	e071      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8006e1a:	e06c      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8006e24:	e067      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	75fb      	strb	r3, [r7, #23]
        break;
 8006e2a:	e064      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d15c      	bne.n	8006ef2 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8006e38:	7afb      	ldrb	r3, [r7, #11]
 8006e3a:	2b0d      	cmp	r3, #13
 8006e3c:	d856      	bhi.n	8006eec <HAL_TIM_RegisterCallback+0x274>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <HAL_TIM_RegisterCallback+0x1cc>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e7d 	.word	0x08006e7d
 8006e48:	08006e85 	.word	0x08006e85
 8006e4c:	08006e8d 	.word	0x08006e8d
 8006e50:	08006e95 	.word	0x08006e95
 8006e54:	08006e9d 	.word	0x08006e9d
 8006e58:	08006ea5 	.word	0x08006ea5
 8006e5c:	08006ead 	.word	0x08006ead
 8006e60:	08006eb5 	.word	0x08006eb5
 8006e64:	08006ebd 	.word	0x08006ebd
 8006e68:	08006ec5 	.word	0x08006ec5
 8006e6c:	08006ecd 	.word	0x08006ecd
 8006e70:	08006ed5 	.word	0x08006ed5
 8006e74:	08006edd 	.word	0x08006edd
 8006e78:	08006ee5 	.word	0x08006ee5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006e82:	e038      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006e8a:	e034      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006e92:	e030      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006e9a:	e02c      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006ea2:	e028      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006eaa:	e024      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006eb2:	e020      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006eba:	e01c      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006ec2:	e018      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006eca:	e014      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006ed2:	e010      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006eda:	e00c      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006ee2:	e008      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006eea:	e004      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	75fb      	strb	r3, [r7, #23]
        break;
 8006ef0:	e001      	b.n	8006ef6 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	371c      	adds	r7, #28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a34      	ldr	r2, [pc, #208]	; (8006ff0 <TIM_Base_SetConfig+0xe4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00f      	beq.n	8006f44 <TIM_Base_SetConfig+0x38>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2a:	d00b      	beq.n	8006f44 <TIM_Base_SetConfig+0x38>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a31      	ldr	r2, [pc, #196]	; (8006ff4 <TIM_Base_SetConfig+0xe8>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d007      	beq.n	8006f44 <TIM_Base_SetConfig+0x38>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a30      	ldr	r2, [pc, #192]	; (8006ff8 <TIM_Base_SetConfig+0xec>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d003      	beq.n	8006f44 <TIM_Base_SetConfig+0x38>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a2f      	ldr	r2, [pc, #188]	; (8006ffc <TIM_Base_SetConfig+0xf0>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d108      	bne.n	8006f56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a25      	ldr	r2, [pc, #148]	; (8006ff0 <TIM_Base_SetConfig+0xe4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d01b      	beq.n	8006f96 <TIM_Base_SetConfig+0x8a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f64:	d017      	beq.n	8006f96 <TIM_Base_SetConfig+0x8a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a22      	ldr	r2, [pc, #136]	; (8006ff4 <TIM_Base_SetConfig+0xe8>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d013      	beq.n	8006f96 <TIM_Base_SetConfig+0x8a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a21      	ldr	r2, [pc, #132]	; (8006ff8 <TIM_Base_SetConfig+0xec>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00f      	beq.n	8006f96 <TIM_Base_SetConfig+0x8a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a20      	ldr	r2, [pc, #128]	; (8006ffc <TIM_Base_SetConfig+0xf0>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00b      	beq.n	8006f96 <TIM_Base_SetConfig+0x8a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a1f      	ldr	r2, [pc, #124]	; (8007000 <TIM_Base_SetConfig+0xf4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d007      	beq.n	8006f96 <TIM_Base_SetConfig+0x8a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a1e      	ldr	r2, [pc, #120]	; (8007004 <TIM_Base_SetConfig+0xf8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d003      	beq.n	8006f96 <TIM_Base_SetConfig+0x8a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a1d      	ldr	r2, [pc, #116]	; (8007008 <TIM_Base_SetConfig+0xfc>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d108      	bne.n	8006fa8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a08      	ldr	r2, [pc, #32]	; (8006ff0 <TIM_Base_SetConfig+0xe4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d103      	bne.n	8006fdc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	615a      	str	r2, [r3, #20]
}
 8006fe2:	bf00      	nop
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	40010000 	.word	0x40010000
 8006ff4:	40000400 	.word	0x40000400
 8006ff8:	40000800 	.word	0x40000800
 8006ffc:	40000c00 	.word	0x40000c00
 8007000:	40014000 	.word	0x40014000
 8007004:	40014400 	.word	0x40014400
 8007008:	40014800 	.word	0x40014800

0800700c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	f023 0201 	bic.w	r2, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0303 	bic.w	r3, r3, #3
 8007042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f023 0302 	bic.w	r3, r3, #2
 8007054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a1c      	ldr	r2, [pc, #112]	; (80070d4 <TIM_OC1_SetConfig+0xc8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d10c      	bne.n	8007082 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f023 0308 	bic.w	r3, r3, #8
 800706e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	4313      	orrs	r3, r2
 8007078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f023 0304 	bic.w	r3, r3, #4
 8007080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a13      	ldr	r2, [pc, #76]	; (80070d4 <TIM_OC1_SetConfig+0xc8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d111      	bne.n	80070ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	621a      	str	r2, [r3, #32]
}
 80070c8:	bf00      	nop
 80070ca:	371c      	adds	r7, #28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	40010000 	.word	0x40010000

080070d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f023 0210 	bic.w	r2, r3, #16
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800710e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	021b      	lsls	r3, r3, #8
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	4313      	orrs	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f023 0320 	bic.w	r3, r3, #32
 8007122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	011b      	lsls	r3, r3, #4
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	4313      	orrs	r3, r2
 800712e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a1e      	ldr	r2, [pc, #120]	; (80071ac <TIM_OC2_SetConfig+0xd4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d10d      	bne.n	8007154 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800713e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	4313      	orrs	r3, r2
 800714a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007152:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a15      	ldr	r2, [pc, #84]	; (80071ac <TIM_OC2_SetConfig+0xd4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d113      	bne.n	8007184 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007162:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800716a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	4313      	orrs	r3, r2
 8007176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4313      	orrs	r3, r2
 8007182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	621a      	str	r2, [r3, #32]
}
 800719e:	bf00      	nop
 80071a0:	371c      	adds	r7, #28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	40010000 	.word	0x40010000

080071b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f023 0303 	bic.w	r3, r3, #3
 80071e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	021b      	lsls	r3, r3, #8
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	4313      	orrs	r3, r2
 8007204:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a1d      	ldr	r2, [pc, #116]	; (8007280 <TIM_OC3_SetConfig+0xd0>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d10d      	bne.n	800722a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	021b      	lsls	r3, r3, #8
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a14      	ldr	r2, [pc, #80]	; (8007280 <TIM_OC3_SetConfig+0xd0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d113      	bne.n	800725a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	4313      	orrs	r3, r2
 800724c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	011b      	lsls	r3, r3, #4
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	4313      	orrs	r3, r2
 8007258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	621a      	str	r2, [r3, #32]
}
 8007274:	bf00      	nop
 8007276:	371c      	adds	r7, #28
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	40010000 	.word	0x40010000

08007284 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	021b      	lsls	r3, r3, #8
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	031b      	lsls	r3, r3, #12
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	4313      	orrs	r3, r2
 80072da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a10      	ldr	r2, [pc, #64]	; (8007320 <TIM_OC4_SetConfig+0x9c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d109      	bne.n	80072f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	019b      	lsls	r3, r3, #6
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	621a      	str	r2, [r3, #32]
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	40010000 	.word	0x40010000

08007324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	f023 0201 	bic.w	r2, r3, #1
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800734e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	011b      	lsls	r3, r3, #4
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	4313      	orrs	r3, r2
 8007358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f023 030a 	bic.w	r3, r3, #10
 8007360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	621a      	str	r2, [r3, #32]
}
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007382:	b480      	push	{r7}
 8007384:	b087      	sub	sp, #28
 8007386:	af00      	add	r7, sp, #0
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f023 0210 	bic.w	r2, r3, #16
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	031b      	lsls	r3, r3, #12
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	621a      	str	r2, [r3, #32]
}
 80073d6:	bf00      	nop
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b085      	sub	sp, #20
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4313      	orrs	r3, r2
 8007400:	f043 0307 	orr.w	r3, r3, #7
 8007404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	609a      	str	r2, [r3, #8]
}
 800740c:	bf00      	nop
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	021a      	lsls	r2, r3, #8
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	431a      	orrs	r2, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	4313      	orrs	r3, r2
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	4313      	orrs	r3, r2
 8007444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	609a      	str	r2, [r3, #8]
}
 800744c:	bf00      	nop
 800744e:	371c      	adds	r7, #28
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f003 031f 	and.w	r3, r3, #31
 800746a:	2201      	movs	r2, #1
 800746c:	fa02 f303 	lsl.w	r3, r2, r3
 8007470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1a      	ldr	r2, [r3, #32]
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	43db      	mvns	r3, r3
 800747a:	401a      	ands	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a1a      	ldr	r2, [r3, #32]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f003 031f 	and.w	r3, r3, #31
 800748a:	6879      	ldr	r1, [r7, #4]
 800748c:	fa01 f303 	lsl.w	r3, r1, r3
 8007490:	431a      	orrs	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	621a      	str	r2, [r3, #32]
}
 8007496:	bf00      	nop
 8007498:	371c      	adds	r7, #28
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
	...

080074a4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a1c      	ldr	r2, [pc, #112]	; (8007520 <TIM_ResetCallback+0x7c>)
 80074b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a1b      	ldr	r2, [pc, #108]	; (8007524 <TIM_ResetCallback+0x80>)
 80074b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a1a      	ldr	r2, [pc, #104]	; (8007528 <TIM_ResetCallback+0x84>)
 80074c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a19      	ldr	r2, [pc, #100]	; (800752c <TIM_ResetCallback+0x88>)
 80074c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a18      	ldr	r2, [pc, #96]	; (8007530 <TIM_ResetCallback+0x8c>)
 80074d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a17      	ldr	r2, [pc, #92]	; (8007534 <TIM_ResetCallback+0x90>)
 80074d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a16      	ldr	r2, [pc, #88]	; (8007538 <TIM_ResetCallback+0x94>)
 80074e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a15      	ldr	r2, [pc, #84]	; (800753c <TIM_ResetCallback+0x98>)
 80074e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a14      	ldr	r2, [pc, #80]	; (8007540 <TIM_ResetCallback+0x9c>)
 80074f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a13      	ldr	r2, [pc, #76]	; (8007544 <TIM_ResetCallback+0xa0>)
 80074f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a12      	ldr	r2, [pc, #72]	; (8007548 <TIM_ResetCallback+0xa4>)
 8007500:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a11      	ldr	r2, [pc, #68]	; (800754c <TIM_ResetCallback+0xa8>)
 8007508:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a10      	ldr	r2, [pc, #64]	; (8007550 <TIM_ResetCallback+0xac>)
 8007510:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	08006baf 	.word	0x08006baf
 8007524:	08006bc3 	.word	0x08006bc3
 8007528:	08006c3b 	.word	0x08006c3b
 800752c:	08006c4f 	.word	0x08006c4f
 8007530:	08006beb 	.word	0x08006beb
 8007534:	08006bff 	.word	0x08006bff
 8007538:	08006bd7 	.word	0x08006bd7
 800753c:	08006c13 	.word	0x08006c13
 8007540:	08006c27 	.word	0x08006c27
 8007544:	08006c63 	.word	0x08006c63
 8007548:	080076d5 	.word	0x080076d5
 800754c:	080076e9 	.word	0x080076e9
 8007550:	080076fd 	.word	0x080076fd

08007554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007564:	2b01      	cmp	r3, #1
 8007566:	d101      	bne.n	800756c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007568:	2302      	movs	r3, #2
 800756a:	e050      	b.n	800760e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a1c      	ldr	r2, [pc, #112]	; (800761c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d018      	beq.n	80075e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b8:	d013      	beq.n	80075e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a18      	ldr	r2, [pc, #96]	; (8007620 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d00e      	beq.n	80075e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a16      	ldr	r2, [pc, #88]	; (8007624 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d009      	beq.n	80075e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a15      	ldr	r2, [pc, #84]	; (8007628 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d004      	beq.n	80075e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a13      	ldr	r2, [pc, #76]	; (800762c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d10c      	bne.n	80075fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	40010000 	.word	0x40010000
 8007620:	40000400 	.word	0x40000400
 8007624:	40000800 	.word	0x40000800
 8007628:	40000c00 	.word	0x40000c00
 800762c:	40014000 	.word	0x40014000

08007630 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007644:	2b01      	cmp	r3, #1
 8007646:	d101      	bne.n	800764c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007648:	2302      	movs	r3, #2
 800764a:	e03d      	b.n	80076c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	4313      	orrs	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e04a      	b.n	80077b8 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d111      	bne.n	8007752 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fd2c 	bl	8008194 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007740:	2b00      	cmp	r3, #0
 8007742:	d102      	bne.n	800774a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a1e      	ldr	r2, [pc, #120]	; (80077c0 <HAL_UART_Init+0xb0>)
 8007748:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2224      	movs	r2, #36	; 0x24
 8007756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007768:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fff6 	bl	800875c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800777e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	695a      	ldr	r2, [r3, #20]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800778e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800779e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2220      	movs	r2, #32
 80077aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	08003581 	.word	0x08003581

080077c4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	460b      	mov	r3, r1
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d107      	bne.n	80077ec <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e0:	f043 0220 	orr.w	r2, r3, #32
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e08c      	b.n	8007906 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d101      	bne.n	80077fa <HAL_UART_RegisterCallback+0x36>
 80077f6:	2302      	movs	r3, #2
 80077f8:	e085      	b.n	8007906 <HAL_UART_RegisterCallback+0x142>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b20      	cmp	r3, #32
 800780c:	d151      	bne.n	80078b2 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800780e:	7afb      	ldrb	r3, [r7, #11]
 8007810:	2b0c      	cmp	r3, #12
 8007812:	d845      	bhi.n	80078a0 <HAL_UART_RegisterCallback+0xdc>
 8007814:	a201      	add	r2, pc, #4	; (adr r2, 800781c <HAL_UART_RegisterCallback+0x58>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	08007851 	.word	0x08007851
 8007820:	08007859 	.word	0x08007859
 8007824:	08007861 	.word	0x08007861
 8007828:	08007869 	.word	0x08007869
 800782c:	08007871 	.word	0x08007871
 8007830:	08007879 	.word	0x08007879
 8007834:	08007881 	.word	0x08007881
 8007838:	08007889 	.word	0x08007889
 800783c:	080078a1 	.word	0x080078a1
 8007840:	080078a1 	.word	0x080078a1
 8007844:	080078a1 	.word	0x080078a1
 8007848:	08007891 	.word	0x08007891
 800784c:	08007899 	.word	0x08007899
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8007856:	e051      	b.n	80078fc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800785e:	e04d      	b.n	80078fc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007866:	e049      	b.n	80078fc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800786e:	e045      	b.n	80078fc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007876:	e041      	b.n	80078fc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800787e:	e03d      	b.n	80078fc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007886:	e039      	b.n	80078fc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800788e:	e035      	b.n	80078fc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007896:	e031      	b.n	80078fc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800789e:	e02d      	b.n	80078fc <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a4:	f043 0220 	orr.w	r2, r3, #32
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	75fb      	strb	r3, [r7, #23]
        break;
 80078b0:	e024      	b.n	80078fc <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d116      	bne.n	80078ec <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 80078be:	7afb      	ldrb	r3, [r7, #11]
 80078c0:	2b0b      	cmp	r3, #11
 80078c2:	d002      	beq.n	80078ca <HAL_UART_RegisterCallback+0x106>
 80078c4:	2b0c      	cmp	r3, #12
 80078c6:	d004      	beq.n	80078d2 <HAL_UART_RegisterCallback+0x10e>
 80078c8:	e007      	b.n	80078da <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80078d0:	e014      	b.n	80078fc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80078d8:	e010      	b.n	80078fc <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	f043 0220 	orr.w	r2, r3, #32
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	75fb      	strb	r3, [r7, #23]
        break;
 80078ea:	e007      	b.n	80078fc <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f0:	f043 0220 	orr.w	r2, r3, #32
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007904:	7dfb      	ldrb	r3, [r7, #23]
}
 8007906:	4618      	mov	r0, r3
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop

08007914 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	4613      	mov	r3, r2
 8007920:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b20      	cmp	r3, #32
 800792c:	d11d      	bne.n	800796a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <HAL_UART_Receive_IT+0x26>
 8007934:	88fb      	ldrh	r3, [r7, #6]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e016      	b.n	800796c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007944:	2b01      	cmp	r3, #1
 8007946:	d101      	bne.n	800794c <HAL_UART_Receive_IT+0x38>
 8007948:	2302      	movs	r3, #2
 800794a:	e00f      	b.n	800796c <HAL_UART_Receive_IT+0x58>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800795a:	88fb      	ldrh	r3, [r7, #6]
 800795c:	461a      	mov	r2, r3
 800795e:	68b9      	ldr	r1, [r7, #8]
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 fcf7 	bl	8008354 <UART_Start_Receive_IT>
 8007966:	4603      	mov	r3, r0
 8007968:	e000      	b.n	800796c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800796a:	2302      	movs	r3, #2
  }
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b08c      	sub	sp, #48	; 0x30
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	4613      	mov	r3, r2
 8007980:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b20      	cmp	r3, #32
 800798c:	d165      	bne.n	8007a5a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <HAL_UART_Transmit_DMA+0x26>
 8007994:	88fb      	ldrh	r3, [r7, #6]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e05e      	b.n	8007a5c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d101      	bne.n	80079ac <HAL_UART_Transmit_DMA+0x38>
 80079a8:	2302      	movs	r3, #2
 80079aa:	e057      	b.n	8007a5c <HAL_UART_Transmit_DMA+0xe8>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	88fa      	ldrh	r2, [r7, #6]
 80079be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	88fa      	ldrh	r2, [r7, #6]
 80079c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2221      	movs	r2, #33	; 0x21
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d8:	4a22      	ldr	r2, [pc, #136]	; (8007a64 <HAL_UART_Transmit_DMA+0xf0>)
 80079da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e0:	4a21      	ldr	r2, [pc, #132]	; (8007a68 <HAL_UART_Transmit_DMA+0xf4>)
 80079e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e8:	4a20      	ldr	r2, [pc, #128]	; (8007a6c <HAL_UART_Transmit_DMA+0xf8>)
 80079ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f0:	2200      	movs	r2, #0
 80079f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80079f4:	f107 0308 	add.w	r3, r7, #8
 80079f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80079fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a00:	6819      	ldr	r1, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3304      	adds	r3, #4
 8007a08:	461a      	mov	r2, r3
 8007a0a:	88fb      	ldrh	r3, [r7, #6]
 8007a0c:	f7fc fb3c 	bl	8004088 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a18:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3314      	adds	r3, #20
 8007a28:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	e853 3f00 	ldrex	r3, [r3]
 8007a30:	617b      	str	r3, [r7, #20]
   return(result);
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3314      	adds	r3, #20
 8007a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a42:	627a      	str	r2, [r7, #36]	; 0x24
 8007a44:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	6a39      	ldr	r1, [r7, #32]
 8007a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a4a:	e841 2300 	strex	r3, r2, [r1]
 8007a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1e5      	bne.n	8007a22 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	e000      	b.n	8007a5c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007a5a:	2302      	movs	r3, #2
  }
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3730      	adds	r7, #48	; 0x30
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	08008205 	.word	0x08008205
 8007a68:	080082a1 	.word	0x080082a1
 8007a6c:	080082bf 	.word	0x080082bf

08007a70 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b09a      	sub	sp, #104	; 0x68
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	330c      	adds	r3, #12
 8007a7e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a82:	e853 3f00 	ldrex	r3, [r3]
 8007a86:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a8e:	667b      	str	r3, [r7, #100]	; 0x64
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	330c      	adds	r3, #12
 8007a96:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a98:	657a      	str	r2, [r7, #84]	; 0x54
 8007a9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007aa0:	e841 2300 	strex	r3, r2, [r1]
 8007aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e5      	bne.n	8007a78 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3314      	adds	r3, #20
 8007ab2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab6:	e853 3f00 	ldrex	r3, [r3]
 8007aba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	f023 0301 	bic.w	r3, r3, #1
 8007ac2:	663b      	str	r3, [r7, #96]	; 0x60
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3314      	adds	r3, #20
 8007aca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007acc:	643a      	str	r2, [r7, #64]	; 0x40
 8007ace:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ad2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e5      	bne.n	8007aac <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d119      	bne.n	8007b1c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	330c      	adds	r3, #12
 8007aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	e853 3f00 	ldrex	r3, [r3]
 8007af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f023 0310 	bic.w	r3, r3, #16
 8007afe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	330c      	adds	r3, #12
 8007b06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b10:	e841 2300 	strex	r3, r2, [r1]
 8007b14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e5      	bne.n	8007ae8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b26:	2b40      	cmp	r3, #64	; 0x40
 8007b28:	d136      	bne.n	8007b98 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3314      	adds	r3, #20
 8007b30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	e853 3f00 	ldrex	r3, [r3]
 8007b38:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b40:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3314      	adds	r3, #20
 8007b48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b4a:	61ba      	str	r2, [r7, #24]
 8007b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	6979      	ldr	r1, [r7, #20]
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	613b      	str	r3, [r7, #16]
   return(result);
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1e5      	bne.n	8007b2a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d018      	beq.n	8007b98 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fc fae0 	bl	8004138 <HAL_DMA_Abort>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00c      	beq.n	8007b98 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fc fcf4 	bl	8004570 <HAL_DMA_GetError>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	d104      	bne.n	8007b98 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2210      	movs	r2, #16
 8007b92:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e00a      	b.n	8007bae <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3768      	adds	r7, #104	; 0x68
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b0ba      	sub	sp, #232	; 0xe8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bee:	f003 030f 	and.w	r3, r3, #15
 8007bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10f      	bne.n	8007c1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d009      	beq.n	8007c1e <HAL_UART_IRQHandler+0x66>
 8007c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c0e:	f003 0320 	and.w	r3, r3, #32
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fce3 	bl	80085e2 <UART_Receive_IT>
      return;
 8007c1c:	e25b      	b.n	80080d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007c1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 80e1 	beq.w	8007dea <HAL_UART_IRQHandler+0x232>
 8007c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d106      	bne.n	8007c42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 80d4 	beq.w	8007dea <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00b      	beq.n	8007c66 <HAL_UART_IRQHandler+0xae>
 8007c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d005      	beq.n	8007c66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	f043 0201 	orr.w	r2, r3, #1
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c6a:	f003 0304 	and.w	r3, r3, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00b      	beq.n	8007c8a <HAL_UART_IRQHandler+0xd2>
 8007c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d005      	beq.n	8007c8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c82:	f043 0202 	orr.w	r2, r3, #2
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00b      	beq.n	8007cae <HAL_UART_IRQHandler+0xf6>
 8007c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d005      	beq.n	8007cae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca6:	f043 0204 	orr.w	r2, r3, #4
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cb2:	f003 0308 	and.w	r3, r3, #8
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d011      	beq.n	8007cde <HAL_UART_IRQHandler+0x126>
 8007cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cbe:	f003 0320 	and.w	r3, r3, #32
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d105      	bne.n	8007cd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d005      	beq.n	8007cde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	f043 0208 	orr.w	r2, r3, #8
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 81f2 	beq.w	80080cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cec:	f003 0320 	and.w	r3, r3, #32
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d008      	beq.n	8007d06 <HAL_UART_IRQHandler+0x14e>
 8007cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cf8:	f003 0320 	and.w	r3, r3, #32
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fc6e 	bl	80085e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d10:	2b40      	cmp	r3, #64	; 0x40
 8007d12:	bf0c      	ite	eq
 8007d14:	2301      	moveq	r3, #1
 8007d16:	2300      	movne	r3, #0
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	f003 0308 	and.w	r3, r3, #8
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d103      	bne.n	8007d32 <HAL_UART_IRQHandler+0x17a>
 8007d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d051      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fb74 	bl	8008420 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d142      	bne.n	8007dcc <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3314      	adds	r3, #20
 8007d4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3314      	adds	r3, #20
 8007d6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1d9      	bne.n	8007d46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d013      	beq.n	8007dc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9e:	4a7f      	ldr	r2, [pc, #508]	; (8007f9c <HAL_UART_IRQHandler+0x3e4>)
 8007da0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fc fa36 	bl	8004218 <HAL_DMA_Abort_IT>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d019      	beq.n	8007de6 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc0:	e011      	b.n	8007de6 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dca:	e00c      	b.n	8007de6 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd4:	e007      	b.n	8007de6 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007de4:	e172      	b.n	80080cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007de6:	bf00      	nop
    return;
 8007de8:	e170      	b.n	80080cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	f040 814c 	bne.w	800808c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df8:	f003 0310 	and.w	r3, r3, #16
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 8145 	beq.w	800808c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e06:	f003 0310 	and.w	r3, r3, #16
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f000 813e 	beq.w	800808c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e10:	2300      	movs	r3, #0
 8007e12:	60bb      	str	r3, [r7, #8]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60bb      	str	r3, [r7, #8]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	60bb      	str	r3, [r7, #8]
 8007e24:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e30:	2b40      	cmp	r3, #64	; 0x40
 8007e32:	f040 80b5 	bne.w	8007fa0 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 8142 	beq.w	80080d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e54:	429a      	cmp	r2, r3
 8007e56:	f080 813b 	bcs.w	80080d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e60:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e6c:	f000 8088 	beq.w	8007f80 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	330c      	adds	r3, #12
 8007e76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e7e:	e853 3f00 	ldrex	r3, [r3]
 8007e82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	330c      	adds	r3, #12
 8007e98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007e9c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ea0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ea8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1d9      	bne.n	8007e70 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3314      	adds	r3, #20
 8007ec2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ec6:	e853 3f00 	ldrex	r3, [r3]
 8007eca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ece:	f023 0301 	bic.w	r3, r3, #1
 8007ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3314      	adds	r3, #20
 8007edc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ee0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ee4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ee8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007eec:	e841 2300 	strex	r3, r2, [r1]
 8007ef0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1e1      	bne.n	8007ebc <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3314      	adds	r3, #20
 8007efe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3314      	adds	r3, #20
 8007f18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f24:	e841 2300 	strex	r3, r2, [r1]
 8007f28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1e3      	bne.n	8007ef8 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	330c      	adds	r3, #12
 8007f44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f50:	f023 0310 	bic.w	r3, r3, #16
 8007f54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	330c      	adds	r3, #12
 8007f5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007f62:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f64:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f6a:	e841 2300 	strex	r3, r2, [r1]
 8007f6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e3      	bne.n	8007f3e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fc f8dc 	bl	8004138 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007f8c:	b292      	uxth	r2, r2
 8007f8e:	1a8a      	subs	r2, r1, r2
 8007f90:	b292      	uxth	r2, r2
 8007f92:	4611      	mov	r1, r2
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f98:	e09a      	b.n	80080d0 <HAL_UART_IRQHandler+0x518>
 8007f9a:	bf00      	nop
 8007f9c:	080084e7 	.word	0x080084e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 808c 	beq.w	80080d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007fbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 8087 	beq.w	80080d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	330c      	adds	r3, #12
 8007fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd0:	e853 3f00 	ldrex	r3, [r3]
 8007fd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	330c      	adds	r3, #12
 8007fe6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007fea:	647a      	str	r2, [r7, #68]	; 0x44
 8007fec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ff0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e3      	bne.n	8007fc6 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3314      	adds	r3, #20
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	623b      	str	r3, [r7, #32]
   return(result);
 800800e:	6a3b      	ldr	r3, [r7, #32]
 8008010:	f023 0301 	bic.w	r3, r3, #1
 8008014:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3314      	adds	r3, #20
 800801e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008022:	633a      	str	r2, [r7, #48]	; 0x30
 8008024:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e3      	bne.n	8007ffe <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	330c      	adds	r3, #12
 800804a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	e853 3f00 	ldrex	r3, [r3]
 8008052:	60fb      	str	r3, [r7, #12]
   return(result);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f023 0310 	bic.w	r3, r3, #16
 800805a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	330c      	adds	r3, #12
 8008064:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008068:	61fa      	str	r2, [r7, #28]
 800806a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	69b9      	ldr	r1, [r7, #24]
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	617b      	str	r3, [r7, #20]
   return(result);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e3      	bne.n	8008044 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008080:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8008084:	4611      	mov	r1, r2
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800808a:	e023      	b.n	80080d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800808c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008094:	2b00      	cmp	r3, #0
 8008096:	d009      	beq.n	80080ac <HAL_UART_IRQHandler+0x4f4>
 8008098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800809c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fa33 	bl	8008510 <UART_Transmit_IT>
    return;
 80080aa:	e014      	b.n	80080d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00e      	beq.n	80080d6 <HAL_UART_IRQHandler+0x51e>
 80080b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d008      	beq.n	80080d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fa73 	bl	80085b0 <UART_EndTransmit_IT>
    return;
 80080ca:	e004      	b.n	80080d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80080cc:	bf00      	nop
 80080ce:	e002      	b.n	80080d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80080d0:	bf00      	nop
 80080d2:	e000      	b.n	80080d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80080d4:	bf00      	nop
  }
}
 80080d6:	37e8      	adds	r7, #232	; 0xe8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a10      	ldr	r2, [pc, #64]	; (80081e0 <UART_InitCallbacksToDefault+0x4c>)
 80081a0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a0f      	ldr	r2, [pc, #60]	; (80081e4 <UART_InitCallbacksToDefault+0x50>)
 80081a6:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a0f      	ldr	r2, [pc, #60]	; (80081e8 <UART_InitCallbacksToDefault+0x54>)
 80081ac:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a0e      	ldr	r2, [pc, #56]	; (80081ec <UART_InitCallbacksToDefault+0x58>)
 80081b2:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a0e      	ldr	r2, [pc, #56]	; (80081f0 <UART_InitCallbacksToDefault+0x5c>)
 80081b8:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a0d      	ldr	r2, [pc, #52]	; (80081f4 <UART_InitCallbacksToDefault+0x60>)
 80081be:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a0d      	ldr	r2, [pc, #52]	; (80081f8 <UART_InitCallbacksToDefault+0x64>)
 80081c4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a0c      	ldr	r2, [pc, #48]	; (80081fc <UART_InitCallbacksToDefault+0x68>)
 80081ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a0c      	ldr	r2, [pc, #48]	; (8008200 <UART_InitCallbacksToDefault+0x6c>)
 80081d0:	669a      	str	r2, [r3, #104]	; 0x68

}
 80081d2:	bf00      	nop
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	080080f1 	.word	0x080080f1
 80081e4:	080080dd 	.word	0x080080dd
 80081e8:	08008119 	.word	0x08008119
 80081ec:	08008105 	.word	0x08008105
 80081f0:	0800812d 	.word	0x0800812d
 80081f4:	08008141 	.word	0x08008141
 80081f8:	08008155 	.word	0x08008155
 80081fc:	08008169 	.word	0x08008169
 8008200:	0800817d 	.word	0x0800817d

08008204 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b090      	sub	sp, #64	; 0x40
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008210:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800821c:	2b00      	cmp	r3, #0
 800821e:	d137      	bne.n	8008290 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008222:	2200      	movs	r2, #0
 8008224:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	3314      	adds	r3, #20
 800822c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	623b      	str	r3, [r7, #32]
   return(result);
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800823c:	63bb      	str	r3, [r7, #56]	; 0x38
 800823e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3314      	adds	r3, #20
 8008244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008246:	633a      	str	r2, [r7, #48]	; 0x30
 8008248:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800824c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800824e:	e841 2300 	strex	r3, r2, [r1]
 8008252:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1e5      	bne.n	8008226 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800825a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	330c      	adds	r3, #12
 8008260:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	e853 3f00 	ldrex	r3, [r3]
 8008268:	60fb      	str	r3, [r7, #12]
   return(result);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008270:	637b      	str	r3, [r7, #52]	; 0x34
 8008272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	330c      	adds	r3, #12
 8008278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800827a:	61fa      	str	r2, [r7, #28]
 800827c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827e:	69b9      	ldr	r1, [r7, #24]
 8008280:	69fa      	ldr	r2, [r7, #28]
 8008282:	e841 2300 	strex	r3, r2, [r1]
 8008286:	617b      	str	r3, [r7, #20]
   return(result);
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1e5      	bne.n	800825a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800828e:	e003      	b.n	8008298 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8008290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008294:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008296:	4798      	blx	r3
}
 8008298:	bf00      	nop
 800829a:	3740      	adds	r7, #64	; 0x40
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082b6:	bf00      	nop
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082da:	2b80      	cmp	r3, #128	; 0x80
 80082dc:	bf0c      	ite	eq
 80082de:	2301      	moveq	r3, #1
 80082e0:	2300      	movne	r3, #0
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b21      	cmp	r3, #33	; 0x21
 80082f0:	d108      	bne.n	8008304 <UART_DMAError+0x46>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2200      	movs	r2, #0
 80082fc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80082fe:	68b8      	ldr	r0, [r7, #8]
 8008300:	f000 f866 	bl	80083d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800830e:	2b40      	cmp	r3, #64	; 0x40
 8008310:	bf0c      	ite	eq
 8008312:	2301      	moveq	r3, #1
 8008314:	2300      	movne	r3, #0
 8008316:	b2db      	uxtb	r3, r3
 8008318:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b22      	cmp	r3, #34	; 0x22
 8008324:	d108      	bne.n	8008338 <UART_DMAError+0x7a>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d005      	beq.n	8008338 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2200      	movs	r2, #0
 8008330:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008332:	68b8      	ldr	r0, [r7, #8]
 8008334:	f000 f874 	bl	8008420 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833c:	f043 0210 	orr.w	r2, r3, #16
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008348:	68b8      	ldr	r0, [r7, #8]
 800834a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800834c:	bf00      	nop
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	4613      	mov	r3, r2
 8008360:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	88fa      	ldrh	r2, [r7, #6]
 800836c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	88fa      	ldrh	r2, [r7, #6]
 8008372:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2222      	movs	r2, #34	; 0x22
 800837e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d007      	beq.n	80083a2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68da      	ldr	r2, [r3, #12]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	695a      	ldr	r2, [r3, #20]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f042 0201 	orr.w	r2, r2, #1
 80083b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68da      	ldr	r2, [r3, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f042 0220 	orr.w	r2, r2, #32
 80083c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b089      	sub	sp, #36	; 0x24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	330c      	adds	r3, #12
 80083de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	e853 3f00 	ldrex	r3, [r3]
 80083e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80083ee:	61fb      	str	r3, [r7, #28]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	330c      	adds	r3, #12
 80083f6:	69fa      	ldr	r2, [r7, #28]
 80083f8:	61ba      	str	r2, [r7, #24]
 80083fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fc:	6979      	ldr	r1, [r7, #20]
 80083fe:	69ba      	ldr	r2, [r7, #24]
 8008400:	e841 2300 	strex	r3, r2, [r1]
 8008404:	613b      	str	r3, [r7, #16]
   return(result);
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e5      	bne.n	80083d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2220      	movs	r2, #32
 8008410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008414:	bf00      	nop
 8008416:	3724      	adds	r7, #36	; 0x24
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008420:	b480      	push	{r7}
 8008422:	b095      	sub	sp, #84	; 0x54
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	330c      	adds	r3, #12
 800842e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008432:	e853 3f00 	ldrex	r3, [r3]
 8008436:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800843e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	330c      	adds	r3, #12
 8008446:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008448:	643a      	str	r2, [r7, #64]	; 0x40
 800844a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800844e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008450:	e841 2300 	strex	r3, r2, [r1]
 8008454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1e5      	bne.n	8008428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3314      	adds	r3, #20
 8008462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	61fb      	str	r3, [r7, #28]
   return(result);
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	f023 0301 	bic.w	r3, r3, #1
 8008472:	64bb      	str	r3, [r7, #72]	; 0x48
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3314      	adds	r3, #20
 800847a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800847c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800847e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e5      	bne.n	800845c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008494:	2b01      	cmp	r3, #1
 8008496:	d119      	bne.n	80084cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	330c      	adds	r3, #12
 800849e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	f023 0310 	bic.w	r3, r3, #16
 80084ae:	647b      	str	r3, [r7, #68]	; 0x44
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	330c      	adds	r3, #12
 80084b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084b8:	61ba      	str	r2, [r7, #24]
 80084ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084bc:	6979      	ldr	r1, [r7, #20]
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	e841 2300 	strex	r3, r2, [r1]
 80084c4:	613b      	str	r3, [r7, #16]
   return(result);
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e5      	bne.n	8008498 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2220      	movs	r2, #32
 80084d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80084da:	bf00      	nop
 80084dc:	3754      	adds	r7, #84	; 0x54
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008508:	bf00      	nop
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b21      	cmp	r3, #33	; 0x21
 8008522:	d13e      	bne.n	80085a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800852c:	d114      	bne.n	8008558 <UART_Transmit_IT+0x48>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d110      	bne.n	8008558 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800854a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	1c9a      	adds	r2, r3, #2
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	621a      	str	r2, [r3, #32]
 8008556:	e008      	b.n	800856a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a1b      	ldr	r3, [r3, #32]
 800855c:	1c59      	adds	r1, r3, #1
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	6211      	str	r1, [r2, #32]
 8008562:	781a      	ldrb	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800856e:	b29b      	uxth	r3, r3
 8008570:	3b01      	subs	r3, #1
 8008572:	b29b      	uxth	r3, r3
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	4619      	mov	r1, r3
 8008578:	84d1      	strh	r1, [r2, #38]	; 0x26
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10f      	bne.n	800859e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68da      	ldr	r2, [r3, #12]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800858c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800859c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	e000      	b.n	80085a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085a2:	2302      	movs	r3, #2
  }
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68da      	ldr	r2, [r3, #12]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2220      	movs	r2, #32
 80085cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b08c      	sub	sp, #48	; 0x30
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b22      	cmp	r3, #34	; 0x22
 80085f4:	f040 80ad 	bne.w	8008752 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008600:	d117      	bne.n	8008632 <UART_Receive_IT+0x50>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d113      	bne.n	8008632 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800860a:	2300      	movs	r3, #0
 800860c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008612:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	b29b      	uxth	r3, r3
 800861c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008620:	b29a      	uxth	r2, r3
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862a:	1c9a      	adds	r2, r3, #2
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	629a      	str	r2, [r3, #40]	; 0x28
 8008630:	e026      	b.n	8008680 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008636:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008638:	2300      	movs	r3, #0
 800863a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008644:	d007      	beq.n	8008656 <UART_Receive_IT+0x74>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10a      	bne.n	8008664 <UART_Receive_IT+0x82>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d106      	bne.n	8008664 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	b2da      	uxtb	r2, r3
 800865e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	e008      	b.n	8008676 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	b2db      	uxtb	r3, r3
 800866c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008670:	b2da      	uxtb	r2, r3
 8008672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008674:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008684:	b29b      	uxth	r3, r3
 8008686:	3b01      	subs	r3, #1
 8008688:	b29b      	uxth	r3, r3
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	4619      	mov	r1, r3
 800868e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008690:	2b00      	cmp	r3, #0
 8008692:	d15c      	bne.n	800874e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68da      	ldr	r2, [r3, #12]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f022 0220 	bic.w	r2, r2, #32
 80086a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	695a      	ldr	r2, [r3, #20]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f022 0201 	bic.w	r2, r2, #1
 80086c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d136      	bne.n	8008742 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	330c      	adds	r3, #12
 80086e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	e853 3f00 	ldrex	r3, [r3]
 80086e8:	613b      	str	r3, [r7, #16]
   return(result);
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f023 0310 	bic.w	r3, r3, #16
 80086f0:	627b      	str	r3, [r7, #36]	; 0x24
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	330c      	adds	r3, #12
 80086f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086fa:	623a      	str	r2, [r7, #32]
 80086fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fe:	69f9      	ldr	r1, [r7, #28]
 8008700:	6a3a      	ldr	r2, [r7, #32]
 8008702:	e841 2300 	strex	r3, r2, [r1]
 8008706:	61bb      	str	r3, [r7, #24]
   return(result);
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1e5      	bne.n	80086da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0310 	and.w	r3, r3, #16
 8008718:	2b10      	cmp	r3, #16
 800871a:	d10a      	bne.n	8008732 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800871c:	2300      	movs	r3, #0
 800871e:	60fb      	str	r3, [r7, #12]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800873a:	4611      	mov	r1, r2
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	4798      	blx	r3
 8008740:	e003      	b.n	800874a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	e002      	b.n	8008754 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	e000      	b.n	8008754 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8008752:	2302      	movs	r3, #2
  }
}
 8008754:	4618      	mov	r0, r3
 8008756:	3730      	adds	r7, #48	; 0x30
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800875c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008760:	b0c0      	sub	sp, #256	; 0x100
 8008762:	af00      	add	r7, sp, #0
 8008764:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008778:	68d9      	ldr	r1, [r3, #12]
 800877a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	ea40 0301 	orr.w	r3, r0, r1
 8008784:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800878a:	689a      	ldr	r2, [r3, #8]
 800878c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	431a      	orrs	r2, r3
 8008794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	431a      	orrs	r2, r3
 800879c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a0:	69db      	ldr	r3, [r3, #28]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80087a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80087b4:	f021 010c 	bic.w	r1, r1, #12
 80087b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087c2:	430b      	orrs	r3, r1
 80087c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80087d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087d6:	6999      	ldr	r1, [r3, #24]
 80087d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	ea40 0301 	orr.w	r3, r0, r1
 80087e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	4b8f      	ldr	r3, [pc, #572]	; (8008a28 <UART_SetConfig+0x2cc>)
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d005      	beq.n	80087fc <UART_SetConfig+0xa0>
 80087f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	4b8d      	ldr	r3, [pc, #564]	; (8008a2c <UART_SetConfig+0x2d0>)
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d104      	bne.n	8008806 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087fc:	f7fd fa12 	bl	8005c24 <HAL_RCC_GetPCLK2Freq>
 8008800:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008804:	e003      	b.n	800880e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008806:	f7fd f9f9 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 800880a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800880e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008818:	f040 810c 	bne.w	8008a34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800881c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008820:	2200      	movs	r2, #0
 8008822:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008826:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800882a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800882e:	4622      	mov	r2, r4
 8008830:	462b      	mov	r3, r5
 8008832:	1891      	adds	r1, r2, r2
 8008834:	65b9      	str	r1, [r7, #88]	; 0x58
 8008836:	415b      	adcs	r3, r3
 8008838:	65fb      	str	r3, [r7, #92]	; 0x5c
 800883a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800883e:	4621      	mov	r1, r4
 8008840:	eb12 0801 	adds.w	r8, r2, r1
 8008844:	4629      	mov	r1, r5
 8008846:	eb43 0901 	adc.w	r9, r3, r1
 800884a:	f04f 0200 	mov.w	r2, #0
 800884e:	f04f 0300 	mov.w	r3, #0
 8008852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800885a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800885e:	4690      	mov	r8, r2
 8008860:	4699      	mov	r9, r3
 8008862:	4623      	mov	r3, r4
 8008864:	eb18 0303 	adds.w	r3, r8, r3
 8008868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800886c:	462b      	mov	r3, r5
 800886e:	eb49 0303 	adc.w	r3, r9, r3
 8008872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008882:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008886:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800888a:	460b      	mov	r3, r1
 800888c:	18db      	adds	r3, r3, r3
 800888e:	653b      	str	r3, [r7, #80]	; 0x50
 8008890:	4613      	mov	r3, r2
 8008892:	eb42 0303 	adc.w	r3, r2, r3
 8008896:	657b      	str	r3, [r7, #84]	; 0x54
 8008898:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800889c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80088a0:	f7f8 f9fa 	bl	8000c98 <__aeabi_uldivmod>
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4b61      	ldr	r3, [pc, #388]	; (8008a30 <UART_SetConfig+0x2d4>)
 80088aa:	fba3 2302 	umull	r2, r3, r3, r2
 80088ae:	095b      	lsrs	r3, r3, #5
 80088b0:	011c      	lsls	r4, r3, #4
 80088b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088b6:	2200      	movs	r2, #0
 80088b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80088c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80088c4:	4642      	mov	r2, r8
 80088c6:	464b      	mov	r3, r9
 80088c8:	1891      	adds	r1, r2, r2
 80088ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80088cc:	415b      	adcs	r3, r3
 80088ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80088d4:	4641      	mov	r1, r8
 80088d6:	eb12 0a01 	adds.w	sl, r2, r1
 80088da:	4649      	mov	r1, r9
 80088dc:	eb43 0b01 	adc.w	fp, r3, r1
 80088e0:	f04f 0200 	mov.w	r2, #0
 80088e4:	f04f 0300 	mov.w	r3, #0
 80088e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80088ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80088f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088f4:	4692      	mov	sl, r2
 80088f6:	469b      	mov	fp, r3
 80088f8:	4643      	mov	r3, r8
 80088fa:	eb1a 0303 	adds.w	r3, sl, r3
 80088fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008902:	464b      	mov	r3, r9
 8008904:	eb4b 0303 	adc.w	r3, fp, r3
 8008908:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800890c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008918:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800891c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008920:	460b      	mov	r3, r1
 8008922:	18db      	adds	r3, r3, r3
 8008924:	643b      	str	r3, [r7, #64]	; 0x40
 8008926:	4613      	mov	r3, r2
 8008928:	eb42 0303 	adc.w	r3, r2, r3
 800892c:	647b      	str	r3, [r7, #68]	; 0x44
 800892e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008932:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008936:	f7f8 f9af 	bl	8000c98 <__aeabi_uldivmod>
 800893a:	4602      	mov	r2, r0
 800893c:	460b      	mov	r3, r1
 800893e:	4611      	mov	r1, r2
 8008940:	4b3b      	ldr	r3, [pc, #236]	; (8008a30 <UART_SetConfig+0x2d4>)
 8008942:	fba3 2301 	umull	r2, r3, r3, r1
 8008946:	095b      	lsrs	r3, r3, #5
 8008948:	2264      	movs	r2, #100	; 0x64
 800894a:	fb02 f303 	mul.w	r3, r2, r3
 800894e:	1acb      	subs	r3, r1, r3
 8008950:	00db      	lsls	r3, r3, #3
 8008952:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008956:	4b36      	ldr	r3, [pc, #216]	; (8008a30 <UART_SetConfig+0x2d4>)
 8008958:	fba3 2302 	umull	r2, r3, r3, r2
 800895c:	095b      	lsrs	r3, r3, #5
 800895e:	005b      	lsls	r3, r3, #1
 8008960:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008964:	441c      	add	r4, r3
 8008966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800896a:	2200      	movs	r2, #0
 800896c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008970:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008974:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008978:	4642      	mov	r2, r8
 800897a:	464b      	mov	r3, r9
 800897c:	1891      	adds	r1, r2, r2
 800897e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008980:	415b      	adcs	r3, r3
 8008982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008984:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008988:	4641      	mov	r1, r8
 800898a:	1851      	adds	r1, r2, r1
 800898c:	6339      	str	r1, [r7, #48]	; 0x30
 800898e:	4649      	mov	r1, r9
 8008990:	414b      	adcs	r3, r1
 8008992:	637b      	str	r3, [r7, #52]	; 0x34
 8008994:	f04f 0200 	mov.w	r2, #0
 8008998:	f04f 0300 	mov.w	r3, #0
 800899c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80089a0:	4659      	mov	r1, fp
 80089a2:	00cb      	lsls	r3, r1, #3
 80089a4:	4651      	mov	r1, sl
 80089a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089aa:	4651      	mov	r1, sl
 80089ac:	00ca      	lsls	r2, r1, #3
 80089ae:	4610      	mov	r0, r2
 80089b0:	4619      	mov	r1, r3
 80089b2:	4603      	mov	r3, r0
 80089b4:	4642      	mov	r2, r8
 80089b6:	189b      	adds	r3, r3, r2
 80089b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089bc:	464b      	mov	r3, r9
 80089be:	460a      	mov	r2, r1
 80089c0:	eb42 0303 	adc.w	r3, r2, r3
 80089c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80089d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80089d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80089dc:	460b      	mov	r3, r1
 80089de:	18db      	adds	r3, r3, r3
 80089e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80089e2:	4613      	mov	r3, r2
 80089e4:	eb42 0303 	adc.w	r3, r2, r3
 80089e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80089f2:	f7f8 f951 	bl	8000c98 <__aeabi_uldivmod>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	4b0d      	ldr	r3, [pc, #52]	; (8008a30 <UART_SetConfig+0x2d4>)
 80089fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008a00:	095b      	lsrs	r3, r3, #5
 8008a02:	2164      	movs	r1, #100	; 0x64
 8008a04:	fb01 f303 	mul.w	r3, r1, r3
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	3332      	adds	r3, #50	; 0x32
 8008a0e:	4a08      	ldr	r2, [pc, #32]	; (8008a30 <UART_SetConfig+0x2d4>)
 8008a10:	fba2 2303 	umull	r2, r3, r2, r3
 8008a14:	095b      	lsrs	r3, r3, #5
 8008a16:	f003 0207 	and.w	r2, r3, #7
 8008a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4422      	add	r2, r4
 8008a22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a24:	e105      	b.n	8008c32 <UART_SetConfig+0x4d6>
 8008a26:	bf00      	nop
 8008a28:	40011000 	.word	0x40011000
 8008a2c:	40011400 	.word	0x40011400
 8008a30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008a42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008a46:	4642      	mov	r2, r8
 8008a48:	464b      	mov	r3, r9
 8008a4a:	1891      	adds	r1, r2, r2
 8008a4c:	6239      	str	r1, [r7, #32]
 8008a4e:	415b      	adcs	r3, r3
 8008a50:	627b      	str	r3, [r7, #36]	; 0x24
 8008a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a56:	4641      	mov	r1, r8
 8008a58:	1854      	adds	r4, r2, r1
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	eb43 0501 	adc.w	r5, r3, r1
 8008a60:	f04f 0200 	mov.w	r2, #0
 8008a64:	f04f 0300 	mov.w	r3, #0
 8008a68:	00eb      	lsls	r3, r5, #3
 8008a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a6e:	00e2      	lsls	r2, r4, #3
 8008a70:	4614      	mov	r4, r2
 8008a72:	461d      	mov	r5, r3
 8008a74:	4643      	mov	r3, r8
 8008a76:	18e3      	adds	r3, r4, r3
 8008a78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008a7c:	464b      	mov	r3, r9
 8008a7e:	eb45 0303 	adc.w	r3, r5, r3
 8008a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a96:	f04f 0200 	mov.w	r2, #0
 8008a9a:	f04f 0300 	mov.w	r3, #0
 8008a9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	008b      	lsls	r3, r1, #2
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008aac:	4621      	mov	r1, r4
 8008aae:	008a      	lsls	r2, r1, #2
 8008ab0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ab4:	f7f8 f8f0 	bl	8000c98 <__aeabi_uldivmod>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	460b      	mov	r3, r1
 8008abc:	4b60      	ldr	r3, [pc, #384]	; (8008c40 <UART_SetConfig+0x4e4>)
 8008abe:	fba3 2302 	umull	r2, r3, r3, r2
 8008ac2:	095b      	lsrs	r3, r3, #5
 8008ac4:	011c      	lsls	r4, r3, #4
 8008ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aca:	2200      	movs	r2, #0
 8008acc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ad0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ad4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008ad8:	4642      	mov	r2, r8
 8008ada:	464b      	mov	r3, r9
 8008adc:	1891      	adds	r1, r2, r2
 8008ade:	61b9      	str	r1, [r7, #24]
 8008ae0:	415b      	adcs	r3, r3
 8008ae2:	61fb      	str	r3, [r7, #28]
 8008ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ae8:	4641      	mov	r1, r8
 8008aea:	1851      	adds	r1, r2, r1
 8008aec:	6139      	str	r1, [r7, #16]
 8008aee:	4649      	mov	r1, r9
 8008af0:	414b      	adcs	r3, r1
 8008af2:	617b      	str	r3, [r7, #20]
 8008af4:	f04f 0200 	mov.w	r2, #0
 8008af8:	f04f 0300 	mov.w	r3, #0
 8008afc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b00:	4659      	mov	r1, fp
 8008b02:	00cb      	lsls	r3, r1, #3
 8008b04:	4651      	mov	r1, sl
 8008b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b0a:	4651      	mov	r1, sl
 8008b0c:	00ca      	lsls	r2, r1, #3
 8008b0e:	4610      	mov	r0, r2
 8008b10:	4619      	mov	r1, r3
 8008b12:	4603      	mov	r3, r0
 8008b14:	4642      	mov	r2, r8
 8008b16:	189b      	adds	r3, r3, r2
 8008b18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b1c:	464b      	mov	r3, r9
 8008b1e:	460a      	mov	r2, r1
 8008b20:	eb42 0303 	adc.w	r3, r2, r3
 8008b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008b34:	f04f 0200 	mov.w	r2, #0
 8008b38:	f04f 0300 	mov.w	r3, #0
 8008b3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008b40:	4649      	mov	r1, r9
 8008b42:	008b      	lsls	r3, r1, #2
 8008b44:	4641      	mov	r1, r8
 8008b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b4a:	4641      	mov	r1, r8
 8008b4c:	008a      	lsls	r2, r1, #2
 8008b4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008b52:	f7f8 f8a1 	bl	8000c98 <__aeabi_uldivmod>
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4b39      	ldr	r3, [pc, #228]	; (8008c40 <UART_SetConfig+0x4e4>)
 8008b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008b60:	095b      	lsrs	r3, r3, #5
 8008b62:	2164      	movs	r1, #100	; 0x64
 8008b64:	fb01 f303 	mul.w	r3, r1, r3
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	011b      	lsls	r3, r3, #4
 8008b6c:	3332      	adds	r3, #50	; 0x32
 8008b6e:	4a34      	ldr	r2, [pc, #208]	; (8008c40 <UART_SetConfig+0x4e4>)
 8008b70:	fba2 2303 	umull	r2, r3, r2, r3
 8008b74:	095b      	lsrs	r3, r3, #5
 8008b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b7a:	441c      	add	r4, r3
 8008b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b80:	2200      	movs	r2, #0
 8008b82:	673b      	str	r3, [r7, #112]	; 0x70
 8008b84:	677a      	str	r2, [r7, #116]	; 0x74
 8008b86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008b8a:	4642      	mov	r2, r8
 8008b8c:	464b      	mov	r3, r9
 8008b8e:	1891      	adds	r1, r2, r2
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	415b      	adcs	r3, r3
 8008b94:	60fb      	str	r3, [r7, #12]
 8008b96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b9a:	4641      	mov	r1, r8
 8008b9c:	1851      	adds	r1, r2, r1
 8008b9e:	6039      	str	r1, [r7, #0]
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	414b      	adcs	r3, r1
 8008ba4:	607b      	str	r3, [r7, #4]
 8008ba6:	f04f 0200 	mov.w	r2, #0
 8008baa:	f04f 0300 	mov.w	r3, #0
 8008bae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008bb2:	4659      	mov	r1, fp
 8008bb4:	00cb      	lsls	r3, r1, #3
 8008bb6:	4651      	mov	r1, sl
 8008bb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bbc:	4651      	mov	r1, sl
 8008bbe:	00ca      	lsls	r2, r1, #3
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	4642      	mov	r2, r8
 8008bc8:	189b      	adds	r3, r3, r2
 8008bca:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bcc:	464b      	mov	r3, r9
 8008bce:	460a      	mov	r2, r1
 8008bd0:	eb42 0303 	adc.w	r3, r2, r3
 8008bd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	663b      	str	r3, [r7, #96]	; 0x60
 8008be0:	667a      	str	r2, [r7, #100]	; 0x64
 8008be2:	f04f 0200 	mov.w	r2, #0
 8008be6:	f04f 0300 	mov.w	r3, #0
 8008bea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008bee:	4649      	mov	r1, r9
 8008bf0:	008b      	lsls	r3, r1, #2
 8008bf2:	4641      	mov	r1, r8
 8008bf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bf8:	4641      	mov	r1, r8
 8008bfa:	008a      	lsls	r2, r1, #2
 8008bfc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008c00:	f7f8 f84a 	bl	8000c98 <__aeabi_uldivmod>
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	4b0d      	ldr	r3, [pc, #52]	; (8008c40 <UART_SetConfig+0x4e4>)
 8008c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c0e:	095b      	lsrs	r3, r3, #5
 8008c10:	2164      	movs	r1, #100	; 0x64
 8008c12:	fb01 f303 	mul.w	r3, r1, r3
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	011b      	lsls	r3, r3, #4
 8008c1a:	3332      	adds	r3, #50	; 0x32
 8008c1c:	4a08      	ldr	r2, [pc, #32]	; (8008c40 <UART_SetConfig+0x4e4>)
 8008c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c22:	095b      	lsrs	r3, r3, #5
 8008c24:	f003 020f 	and.w	r2, r3, #15
 8008c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4422      	add	r2, r4
 8008c30:	609a      	str	r2, [r3, #8]
}
 8008c32:	bf00      	nop
 8008c34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c3e:	bf00      	nop
 8008c40:	51eb851f 	.word	0x51eb851f

08008c44 <__errno>:
 8008c44:	4b01      	ldr	r3, [pc, #4]	; (8008c4c <__errno+0x8>)
 8008c46:	6818      	ldr	r0, [r3, #0]
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	20000224 	.word	0x20000224

08008c50 <__libc_init_array>:
 8008c50:	b570      	push	{r4, r5, r6, lr}
 8008c52:	4d0d      	ldr	r5, [pc, #52]	; (8008c88 <__libc_init_array+0x38>)
 8008c54:	4c0d      	ldr	r4, [pc, #52]	; (8008c8c <__libc_init_array+0x3c>)
 8008c56:	1b64      	subs	r4, r4, r5
 8008c58:	10a4      	asrs	r4, r4, #2
 8008c5a:	2600      	movs	r6, #0
 8008c5c:	42a6      	cmp	r6, r4
 8008c5e:	d109      	bne.n	8008c74 <__libc_init_array+0x24>
 8008c60:	4d0b      	ldr	r5, [pc, #44]	; (8008c90 <__libc_init_array+0x40>)
 8008c62:	4c0c      	ldr	r4, [pc, #48]	; (8008c94 <__libc_init_array+0x44>)
 8008c64:	f005 ffb2 	bl	800ebcc <_init>
 8008c68:	1b64      	subs	r4, r4, r5
 8008c6a:	10a4      	asrs	r4, r4, #2
 8008c6c:	2600      	movs	r6, #0
 8008c6e:	42a6      	cmp	r6, r4
 8008c70:	d105      	bne.n	8008c7e <__libc_init_array+0x2e>
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
 8008c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c78:	4798      	blx	r3
 8008c7a:	3601      	adds	r6, #1
 8008c7c:	e7ee      	b.n	8008c5c <__libc_init_array+0xc>
 8008c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c82:	4798      	blx	r3
 8008c84:	3601      	adds	r6, #1
 8008c86:	e7f2      	b.n	8008c6e <__libc_init_array+0x1e>
 8008c88:	0800f2e8 	.word	0x0800f2e8
 8008c8c:	0800f2e8 	.word	0x0800f2e8
 8008c90:	0800f2e8 	.word	0x0800f2e8
 8008c94:	0800f2ec 	.word	0x0800f2ec

08008c98 <memcpy>:
 8008c98:	440a      	add	r2, r1
 8008c9a:	4291      	cmp	r1, r2
 8008c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ca0:	d100      	bne.n	8008ca4 <memcpy+0xc>
 8008ca2:	4770      	bx	lr
 8008ca4:	b510      	push	{r4, lr}
 8008ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008caa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cae:	4291      	cmp	r1, r2
 8008cb0:	d1f9      	bne.n	8008ca6 <memcpy+0xe>
 8008cb2:	bd10      	pop	{r4, pc}

08008cb4 <memset>:
 8008cb4:	4402      	add	r2, r0
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d100      	bne.n	8008cbe <memset+0xa>
 8008cbc:	4770      	bx	lr
 8008cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008cc2:	e7f9      	b.n	8008cb8 <memset+0x4>

08008cc4 <__cvt>:
 8008cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc8:	ec55 4b10 	vmov	r4, r5, d0
 8008ccc:	2d00      	cmp	r5, #0
 8008cce:	460e      	mov	r6, r1
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	462b      	mov	r3, r5
 8008cd4:	bfbb      	ittet	lt
 8008cd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008cda:	461d      	movlt	r5, r3
 8008cdc:	2300      	movge	r3, #0
 8008cde:	232d      	movlt	r3, #45	; 0x2d
 8008ce0:	700b      	strb	r3, [r1, #0]
 8008ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ce4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ce8:	4691      	mov	r9, r2
 8008cea:	f023 0820 	bic.w	r8, r3, #32
 8008cee:	bfbc      	itt	lt
 8008cf0:	4622      	movlt	r2, r4
 8008cf2:	4614      	movlt	r4, r2
 8008cf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008cf8:	d005      	beq.n	8008d06 <__cvt+0x42>
 8008cfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008cfe:	d100      	bne.n	8008d02 <__cvt+0x3e>
 8008d00:	3601      	adds	r6, #1
 8008d02:	2102      	movs	r1, #2
 8008d04:	e000      	b.n	8008d08 <__cvt+0x44>
 8008d06:	2103      	movs	r1, #3
 8008d08:	ab03      	add	r3, sp, #12
 8008d0a:	9301      	str	r3, [sp, #4]
 8008d0c:	ab02      	add	r3, sp, #8
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	ec45 4b10 	vmov	d0, r4, r5
 8008d14:	4653      	mov	r3, sl
 8008d16:	4632      	mov	r2, r6
 8008d18:	f001 fdae 	bl	800a878 <_dtoa_r>
 8008d1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d20:	4607      	mov	r7, r0
 8008d22:	d102      	bne.n	8008d2a <__cvt+0x66>
 8008d24:	f019 0f01 	tst.w	r9, #1
 8008d28:	d022      	beq.n	8008d70 <__cvt+0xac>
 8008d2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d2e:	eb07 0906 	add.w	r9, r7, r6
 8008d32:	d110      	bne.n	8008d56 <__cvt+0x92>
 8008d34:	783b      	ldrb	r3, [r7, #0]
 8008d36:	2b30      	cmp	r3, #48	; 0x30
 8008d38:	d10a      	bne.n	8008d50 <__cvt+0x8c>
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4620      	mov	r0, r4
 8008d40:	4629      	mov	r1, r5
 8008d42:	f7f7 fec9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d46:	b918      	cbnz	r0, 8008d50 <__cvt+0x8c>
 8008d48:	f1c6 0601 	rsb	r6, r6, #1
 8008d4c:	f8ca 6000 	str.w	r6, [sl]
 8008d50:	f8da 3000 	ldr.w	r3, [sl]
 8008d54:	4499      	add	r9, r3
 8008d56:	2200      	movs	r2, #0
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	f7f7 febb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d62:	b108      	cbz	r0, 8008d68 <__cvt+0xa4>
 8008d64:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d68:	2230      	movs	r2, #48	; 0x30
 8008d6a:	9b03      	ldr	r3, [sp, #12]
 8008d6c:	454b      	cmp	r3, r9
 8008d6e:	d307      	bcc.n	8008d80 <__cvt+0xbc>
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d74:	1bdb      	subs	r3, r3, r7
 8008d76:	4638      	mov	r0, r7
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	b004      	add	sp, #16
 8008d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d80:	1c59      	adds	r1, r3, #1
 8008d82:	9103      	str	r1, [sp, #12]
 8008d84:	701a      	strb	r2, [r3, #0]
 8008d86:	e7f0      	b.n	8008d6a <__cvt+0xa6>

08008d88 <__exponent>:
 8008d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2900      	cmp	r1, #0
 8008d8e:	bfb8      	it	lt
 8008d90:	4249      	neglt	r1, r1
 8008d92:	f803 2b02 	strb.w	r2, [r3], #2
 8008d96:	bfb4      	ite	lt
 8008d98:	222d      	movlt	r2, #45	; 0x2d
 8008d9a:	222b      	movge	r2, #43	; 0x2b
 8008d9c:	2909      	cmp	r1, #9
 8008d9e:	7042      	strb	r2, [r0, #1]
 8008da0:	dd2a      	ble.n	8008df8 <__exponent+0x70>
 8008da2:	f10d 0407 	add.w	r4, sp, #7
 8008da6:	46a4      	mov	ip, r4
 8008da8:	270a      	movs	r7, #10
 8008daa:	46a6      	mov	lr, r4
 8008dac:	460a      	mov	r2, r1
 8008dae:	fb91 f6f7 	sdiv	r6, r1, r7
 8008db2:	fb07 1516 	mls	r5, r7, r6, r1
 8008db6:	3530      	adds	r5, #48	; 0x30
 8008db8:	2a63      	cmp	r2, #99	; 0x63
 8008dba:	f104 34ff 	add.w	r4, r4, #4294967295
 8008dbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	dcf1      	bgt.n	8008daa <__exponent+0x22>
 8008dc6:	3130      	adds	r1, #48	; 0x30
 8008dc8:	f1ae 0502 	sub.w	r5, lr, #2
 8008dcc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008dd0:	1c44      	adds	r4, r0, #1
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	4561      	cmp	r1, ip
 8008dd6:	d30a      	bcc.n	8008dee <__exponent+0x66>
 8008dd8:	f10d 0209 	add.w	r2, sp, #9
 8008ddc:	eba2 020e 	sub.w	r2, r2, lr
 8008de0:	4565      	cmp	r5, ip
 8008de2:	bf88      	it	hi
 8008de4:	2200      	movhi	r2, #0
 8008de6:	4413      	add	r3, r2
 8008de8:	1a18      	subs	r0, r3, r0
 8008dea:	b003      	add	sp, #12
 8008dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008df2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008df6:	e7ed      	b.n	8008dd4 <__exponent+0x4c>
 8008df8:	2330      	movs	r3, #48	; 0x30
 8008dfa:	3130      	adds	r1, #48	; 0x30
 8008dfc:	7083      	strb	r3, [r0, #2]
 8008dfe:	70c1      	strb	r1, [r0, #3]
 8008e00:	1d03      	adds	r3, r0, #4
 8008e02:	e7f1      	b.n	8008de8 <__exponent+0x60>

08008e04 <_printf_float>:
 8008e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e08:	ed2d 8b02 	vpush	{d8}
 8008e0c:	b08d      	sub	sp, #52	; 0x34
 8008e0e:	460c      	mov	r4, r1
 8008e10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e14:	4616      	mov	r6, r2
 8008e16:	461f      	mov	r7, r3
 8008e18:	4605      	mov	r5, r0
 8008e1a:	f002 fe8b 	bl	800bb34 <_localeconv_r>
 8008e1e:	f8d0 a000 	ldr.w	sl, [r0]
 8008e22:	4650      	mov	r0, sl
 8008e24:	f7f7 f9dc 	bl	80001e0 <strlen>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	9305      	str	r3, [sp, #20]
 8008e30:	f8d8 3000 	ldr.w	r3, [r8]
 8008e34:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e38:	3307      	adds	r3, #7
 8008e3a:	f023 0307 	bic.w	r3, r3, #7
 8008e3e:	f103 0208 	add.w	r2, r3, #8
 8008e42:	f8c8 2000 	str.w	r2, [r8]
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008e4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008e52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e56:	9307      	str	r3, [sp, #28]
 8008e58:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e5c:	ee08 0a10 	vmov	s16, r0
 8008e60:	4b9f      	ldr	r3, [pc, #636]	; (80090e0 <_printf_float+0x2dc>)
 8008e62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e66:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6a:	f7f7 fe67 	bl	8000b3c <__aeabi_dcmpun>
 8008e6e:	bb88      	cbnz	r0, 8008ed4 <_printf_float+0xd0>
 8008e70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e74:	4b9a      	ldr	r3, [pc, #616]	; (80090e0 <_printf_float+0x2dc>)
 8008e76:	f04f 32ff 	mov.w	r2, #4294967295
 8008e7a:	f7f7 fe41 	bl	8000b00 <__aeabi_dcmple>
 8008e7e:	bb48      	cbnz	r0, 8008ed4 <_printf_float+0xd0>
 8008e80:	2200      	movs	r2, #0
 8008e82:	2300      	movs	r3, #0
 8008e84:	4640      	mov	r0, r8
 8008e86:	4649      	mov	r1, r9
 8008e88:	f7f7 fe30 	bl	8000aec <__aeabi_dcmplt>
 8008e8c:	b110      	cbz	r0, 8008e94 <_printf_float+0x90>
 8008e8e:	232d      	movs	r3, #45	; 0x2d
 8008e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e94:	4b93      	ldr	r3, [pc, #588]	; (80090e4 <_printf_float+0x2e0>)
 8008e96:	4894      	ldr	r0, [pc, #592]	; (80090e8 <_printf_float+0x2e4>)
 8008e98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008e9c:	bf94      	ite	ls
 8008e9e:	4698      	movls	r8, r3
 8008ea0:	4680      	movhi	r8, r0
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	6123      	str	r3, [r4, #16]
 8008ea6:	9b05      	ldr	r3, [sp, #20]
 8008ea8:	f023 0204 	bic.w	r2, r3, #4
 8008eac:	6022      	str	r2, [r4, #0]
 8008eae:	f04f 0900 	mov.w	r9, #0
 8008eb2:	9700      	str	r7, [sp, #0]
 8008eb4:	4633      	mov	r3, r6
 8008eb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8008eb8:	4621      	mov	r1, r4
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f000 f9d8 	bl	8009270 <_printf_common>
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	f040 8090 	bne.w	8008fe6 <_printf_float+0x1e2>
 8008ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eca:	b00d      	add	sp, #52	; 0x34
 8008ecc:	ecbd 8b02 	vpop	{d8}
 8008ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed4:	4642      	mov	r2, r8
 8008ed6:	464b      	mov	r3, r9
 8008ed8:	4640      	mov	r0, r8
 8008eda:	4649      	mov	r1, r9
 8008edc:	f7f7 fe2e 	bl	8000b3c <__aeabi_dcmpun>
 8008ee0:	b140      	cbz	r0, 8008ef4 <_printf_float+0xf0>
 8008ee2:	464b      	mov	r3, r9
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	bfbc      	itt	lt
 8008ee8:	232d      	movlt	r3, #45	; 0x2d
 8008eea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008eee:	487f      	ldr	r0, [pc, #508]	; (80090ec <_printf_float+0x2e8>)
 8008ef0:	4b7f      	ldr	r3, [pc, #508]	; (80090f0 <_printf_float+0x2ec>)
 8008ef2:	e7d1      	b.n	8008e98 <_printf_float+0x94>
 8008ef4:	6863      	ldr	r3, [r4, #4]
 8008ef6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008efa:	9206      	str	r2, [sp, #24]
 8008efc:	1c5a      	adds	r2, r3, #1
 8008efe:	d13f      	bne.n	8008f80 <_printf_float+0x17c>
 8008f00:	2306      	movs	r3, #6
 8008f02:	6063      	str	r3, [r4, #4]
 8008f04:	9b05      	ldr	r3, [sp, #20]
 8008f06:	6861      	ldr	r1, [r4, #4]
 8008f08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9303      	str	r3, [sp, #12]
 8008f10:	ab0a      	add	r3, sp, #40	; 0x28
 8008f12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f16:	ab09      	add	r3, sp, #36	; 0x24
 8008f18:	ec49 8b10 	vmov	d0, r8, r9
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	6022      	str	r2, [r4, #0]
 8008f20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f24:	4628      	mov	r0, r5
 8008f26:	f7ff fecd 	bl	8008cc4 <__cvt>
 8008f2a:	9b06      	ldr	r3, [sp, #24]
 8008f2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f2e:	2b47      	cmp	r3, #71	; 0x47
 8008f30:	4680      	mov	r8, r0
 8008f32:	d108      	bne.n	8008f46 <_printf_float+0x142>
 8008f34:	1cc8      	adds	r0, r1, #3
 8008f36:	db02      	blt.n	8008f3e <_printf_float+0x13a>
 8008f38:	6863      	ldr	r3, [r4, #4]
 8008f3a:	4299      	cmp	r1, r3
 8008f3c:	dd41      	ble.n	8008fc2 <_printf_float+0x1be>
 8008f3e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008f42:	fa5f fb8b 	uxtb.w	fp, fp
 8008f46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f4a:	d820      	bhi.n	8008f8e <_printf_float+0x18a>
 8008f4c:	3901      	subs	r1, #1
 8008f4e:	465a      	mov	r2, fp
 8008f50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f54:	9109      	str	r1, [sp, #36]	; 0x24
 8008f56:	f7ff ff17 	bl	8008d88 <__exponent>
 8008f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f5c:	1813      	adds	r3, r2, r0
 8008f5e:	2a01      	cmp	r2, #1
 8008f60:	4681      	mov	r9, r0
 8008f62:	6123      	str	r3, [r4, #16]
 8008f64:	dc02      	bgt.n	8008f6c <_printf_float+0x168>
 8008f66:	6822      	ldr	r2, [r4, #0]
 8008f68:	07d2      	lsls	r2, r2, #31
 8008f6a:	d501      	bpl.n	8008f70 <_printf_float+0x16c>
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	6123      	str	r3, [r4, #16]
 8008f70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d09c      	beq.n	8008eb2 <_printf_float+0xae>
 8008f78:	232d      	movs	r3, #45	; 0x2d
 8008f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f7e:	e798      	b.n	8008eb2 <_printf_float+0xae>
 8008f80:	9a06      	ldr	r2, [sp, #24]
 8008f82:	2a47      	cmp	r2, #71	; 0x47
 8008f84:	d1be      	bne.n	8008f04 <_printf_float+0x100>
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1bc      	bne.n	8008f04 <_printf_float+0x100>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e7b9      	b.n	8008f02 <_printf_float+0xfe>
 8008f8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008f92:	d118      	bne.n	8008fc6 <_printf_float+0x1c2>
 8008f94:	2900      	cmp	r1, #0
 8008f96:	6863      	ldr	r3, [r4, #4]
 8008f98:	dd0b      	ble.n	8008fb2 <_printf_float+0x1ae>
 8008f9a:	6121      	str	r1, [r4, #16]
 8008f9c:	b913      	cbnz	r3, 8008fa4 <_printf_float+0x1a0>
 8008f9e:	6822      	ldr	r2, [r4, #0]
 8008fa0:	07d0      	lsls	r0, r2, #31
 8008fa2:	d502      	bpl.n	8008faa <_printf_float+0x1a6>
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	440b      	add	r3, r1
 8008fa8:	6123      	str	r3, [r4, #16]
 8008faa:	65a1      	str	r1, [r4, #88]	; 0x58
 8008fac:	f04f 0900 	mov.w	r9, #0
 8008fb0:	e7de      	b.n	8008f70 <_printf_float+0x16c>
 8008fb2:	b913      	cbnz	r3, 8008fba <_printf_float+0x1b6>
 8008fb4:	6822      	ldr	r2, [r4, #0]
 8008fb6:	07d2      	lsls	r2, r2, #31
 8008fb8:	d501      	bpl.n	8008fbe <_printf_float+0x1ba>
 8008fba:	3302      	adds	r3, #2
 8008fbc:	e7f4      	b.n	8008fa8 <_printf_float+0x1a4>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e7f2      	b.n	8008fa8 <_printf_float+0x1a4>
 8008fc2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fc8:	4299      	cmp	r1, r3
 8008fca:	db05      	blt.n	8008fd8 <_printf_float+0x1d4>
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	6121      	str	r1, [r4, #16]
 8008fd0:	07d8      	lsls	r0, r3, #31
 8008fd2:	d5ea      	bpl.n	8008faa <_printf_float+0x1a6>
 8008fd4:	1c4b      	adds	r3, r1, #1
 8008fd6:	e7e7      	b.n	8008fa8 <_printf_float+0x1a4>
 8008fd8:	2900      	cmp	r1, #0
 8008fda:	bfd4      	ite	le
 8008fdc:	f1c1 0202 	rsble	r2, r1, #2
 8008fe0:	2201      	movgt	r2, #1
 8008fe2:	4413      	add	r3, r2
 8008fe4:	e7e0      	b.n	8008fa8 <_printf_float+0x1a4>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	055a      	lsls	r2, r3, #21
 8008fea:	d407      	bmi.n	8008ffc <_printf_float+0x1f8>
 8008fec:	6923      	ldr	r3, [r4, #16]
 8008fee:	4642      	mov	r2, r8
 8008ff0:	4631      	mov	r1, r6
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	47b8      	blx	r7
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	d12c      	bne.n	8009054 <_printf_float+0x250>
 8008ffa:	e764      	b.n	8008ec6 <_printf_float+0xc2>
 8008ffc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009000:	f240 80e0 	bls.w	80091c4 <_printf_float+0x3c0>
 8009004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009008:	2200      	movs	r2, #0
 800900a:	2300      	movs	r3, #0
 800900c:	f7f7 fd64 	bl	8000ad8 <__aeabi_dcmpeq>
 8009010:	2800      	cmp	r0, #0
 8009012:	d034      	beq.n	800907e <_printf_float+0x27a>
 8009014:	4a37      	ldr	r2, [pc, #220]	; (80090f4 <_printf_float+0x2f0>)
 8009016:	2301      	movs	r3, #1
 8009018:	4631      	mov	r1, r6
 800901a:	4628      	mov	r0, r5
 800901c:	47b8      	blx	r7
 800901e:	3001      	adds	r0, #1
 8009020:	f43f af51 	beq.w	8008ec6 <_printf_float+0xc2>
 8009024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009028:	429a      	cmp	r2, r3
 800902a:	db02      	blt.n	8009032 <_printf_float+0x22e>
 800902c:	6823      	ldr	r3, [r4, #0]
 800902e:	07d8      	lsls	r0, r3, #31
 8009030:	d510      	bpl.n	8009054 <_printf_float+0x250>
 8009032:	ee18 3a10 	vmov	r3, s16
 8009036:	4652      	mov	r2, sl
 8009038:	4631      	mov	r1, r6
 800903a:	4628      	mov	r0, r5
 800903c:	47b8      	blx	r7
 800903e:	3001      	adds	r0, #1
 8009040:	f43f af41 	beq.w	8008ec6 <_printf_float+0xc2>
 8009044:	f04f 0800 	mov.w	r8, #0
 8009048:	f104 091a 	add.w	r9, r4, #26
 800904c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800904e:	3b01      	subs	r3, #1
 8009050:	4543      	cmp	r3, r8
 8009052:	dc09      	bgt.n	8009068 <_printf_float+0x264>
 8009054:	6823      	ldr	r3, [r4, #0]
 8009056:	079b      	lsls	r3, r3, #30
 8009058:	f100 8105 	bmi.w	8009266 <_printf_float+0x462>
 800905c:	68e0      	ldr	r0, [r4, #12]
 800905e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009060:	4298      	cmp	r0, r3
 8009062:	bfb8      	it	lt
 8009064:	4618      	movlt	r0, r3
 8009066:	e730      	b.n	8008eca <_printf_float+0xc6>
 8009068:	2301      	movs	r3, #1
 800906a:	464a      	mov	r2, r9
 800906c:	4631      	mov	r1, r6
 800906e:	4628      	mov	r0, r5
 8009070:	47b8      	blx	r7
 8009072:	3001      	adds	r0, #1
 8009074:	f43f af27 	beq.w	8008ec6 <_printf_float+0xc2>
 8009078:	f108 0801 	add.w	r8, r8, #1
 800907c:	e7e6      	b.n	800904c <_printf_float+0x248>
 800907e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009080:	2b00      	cmp	r3, #0
 8009082:	dc39      	bgt.n	80090f8 <_printf_float+0x2f4>
 8009084:	4a1b      	ldr	r2, [pc, #108]	; (80090f4 <_printf_float+0x2f0>)
 8009086:	2301      	movs	r3, #1
 8009088:	4631      	mov	r1, r6
 800908a:	4628      	mov	r0, r5
 800908c:	47b8      	blx	r7
 800908e:	3001      	adds	r0, #1
 8009090:	f43f af19 	beq.w	8008ec6 <_printf_float+0xc2>
 8009094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009098:	4313      	orrs	r3, r2
 800909a:	d102      	bne.n	80090a2 <_printf_float+0x29e>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	07d9      	lsls	r1, r3, #31
 80090a0:	d5d8      	bpl.n	8009054 <_printf_float+0x250>
 80090a2:	ee18 3a10 	vmov	r3, s16
 80090a6:	4652      	mov	r2, sl
 80090a8:	4631      	mov	r1, r6
 80090aa:	4628      	mov	r0, r5
 80090ac:	47b8      	blx	r7
 80090ae:	3001      	adds	r0, #1
 80090b0:	f43f af09 	beq.w	8008ec6 <_printf_float+0xc2>
 80090b4:	f04f 0900 	mov.w	r9, #0
 80090b8:	f104 0a1a 	add.w	sl, r4, #26
 80090bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090be:	425b      	negs	r3, r3
 80090c0:	454b      	cmp	r3, r9
 80090c2:	dc01      	bgt.n	80090c8 <_printf_float+0x2c4>
 80090c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c6:	e792      	b.n	8008fee <_printf_float+0x1ea>
 80090c8:	2301      	movs	r3, #1
 80090ca:	4652      	mov	r2, sl
 80090cc:	4631      	mov	r1, r6
 80090ce:	4628      	mov	r0, r5
 80090d0:	47b8      	blx	r7
 80090d2:	3001      	adds	r0, #1
 80090d4:	f43f aef7 	beq.w	8008ec6 <_printf_float+0xc2>
 80090d8:	f109 0901 	add.w	r9, r9, #1
 80090dc:	e7ee      	b.n	80090bc <_printf_float+0x2b8>
 80090de:	bf00      	nop
 80090e0:	7fefffff 	.word	0x7fefffff
 80090e4:	0800ec24 	.word	0x0800ec24
 80090e8:	0800ec28 	.word	0x0800ec28
 80090ec:	0800ec30 	.word	0x0800ec30
 80090f0:	0800ec2c 	.word	0x0800ec2c
 80090f4:	0800ec34 	.word	0x0800ec34
 80090f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090fc:	429a      	cmp	r2, r3
 80090fe:	bfa8      	it	ge
 8009100:	461a      	movge	r2, r3
 8009102:	2a00      	cmp	r2, #0
 8009104:	4691      	mov	r9, r2
 8009106:	dc37      	bgt.n	8009178 <_printf_float+0x374>
 8009108:	f04f 0b00 	mov.w	fp, #0
 800910c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009110:	f104 021a 	add.w	r2, r4, #26
 8009114:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009116:	9305      	str	r3, [sp, #20]
 8009118:	eba3 0309 	sub.w	r3, r3, r9
 800911c:	455b      	cmp	r3, fp
 800911e:	dc33      	bgt.n	8009188 <_printf_float+0x384>
 8009120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009124:	429a      	cmp	r2, r3
 8009126:	db3b      	blt.n	80091a0 <_printf_float+0x39c>
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	07da      	lsls	r2, r3, #31
 800912c:	d438      	bmi.n	80091a0 <_printf_float+0x39c>
 800912e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009130:	9a05      	ldr	r2, [sp, #20]
 8009132:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009134:	1a9a      	subs	r2, r3, r2
 8009136:	eba3 0901 	sub.w	r9, r3, r1
 800913a:	4591      	cmp	r9, r2
 800913c:	bfa8      	it	ge
 800913e:	4691      	movge	r9, r2
 8009140:	f1b9 0f00 	cmp.w	r9, #0
 8009144:	dc35      	bgt.n	80091b2 <_printf_float+0x3ae>
 8009146:	f04f 0800 	mov.w	r8, #0
 800914a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800914e:	f104 0a1a 	add.w	sl, r4, #26
 8009152:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009156:	1a9b      	subs	r3, r3, r2
 8009158:	eba3 0309 	sub.w	r3, r3, r9
 800915c:	4543      	cmp	r3, r8
 800915e:	f77f af79 	ble.w	8009054 <_printf_float+0x250>
 8009162:	2301      	movs	r3, #1
 8009164:	4652      	mov	r2, sl
 8009166:	4631      	mov	r1, r6
 8009168:	4628      	mov	r0, r5
 800916a:	47b8      	blx	r7
 800916c:	3001      	adds	r0, #1
 800916e:	f43f aeaa 	beq.w	8008ec6 <_printf_float+0xc2>
 8009172:	f108 0801 	add.w	r8, r8, #1
 8009176:	e7ec      	b.n	8009152 <_printf_float+0x34e>
 8009178:	4613      	mov	r3, r2
 800917a:	4631      	mov	r1, r6
 800917c:	4642      	mov	r2, r8
 800917e:	4628      	mov	r0, r5
 8009180:	47b8      	blx	r7
 8009182:	3001      	adds	r0, #1
 8009184:	d1c0      	bne.n	8009108 <_printf_float+0x304>
 8009186:	e69e      	b.n	8008ec6 <_printf_float+0xc2>
 8009188:	2301      	movs	r3, #1
 800918a:	4631      	mov	r1, r6
 800918c:	4628      	mov	r0, r5
 800918e:	9205      	str	r2, [sp, #20]
 8009190:	47b8      	blx	r7
 8009192:	3001      	adds	r0, #1
 8009194:	f43f ae97 	beq.w	8008ec6 <_printf_float+0xc2>
 8009198:	9a05      	ldr	r2, [sp, #20]
 800919a:	f10b 0b01 	add.w	fp, fp, #1
 800919e:	e7b9      	b.n	8009114 <_printf_float+0x310>
 80091a0:	ee18 3a10 	vmov	r3, s16
 80091a4:	4652      	mov	r2, sl
 80091a6:	4631      	mov	r1, r6
 80091a8:	4628      	mov	r0, r5
 80091aa:	47b8      	blx	r7
 80091ac:	3001      	adds	r0, #1
 80091ae:	d1be      	bne.n	800912e <_printf_float+0x32a>
 80091b0:	e689      	b.n	8008ec6 <_printf_float+0xc2>
 80091b2:	9a05      	ldr	r2, [sp, #20]
 80091b4:	464b      	mov	r3, r9
 80091b6:	4442      	add	r2, r8
 80091b8:	4631      	mov	r1, r6
 80091ba:	4628      	mov	r0, r5
 80091bc:	47b8      	blx	r7
 80091be:	3001      	adds	r0, #1
 80091c0:	d1c1      	bne.n	8009146 <_printf_float+0x342>
 80091c2:	e680      	b.n	8008ec6 <_printf_float+0xc2>
 80091c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091c6:	2a01      	cmp	r2, #1
 80091c8:	dc01      	bgt.n	80091ce <_printf_float+0x3ca>
 80091ca:	07db      	lsls	r3, r3, #31
 80091cc:	d538      	bpl.n	8009240 <_printf_float+0x43c>
 80091ce:	2301      	movs	r3, #1
 80091d0:	4642      	mov	r2, r8
 80091d2:	4631      	mov	r1, r6
 80091d4:	4628      	mov	r0, r5
 80091d6:	47b8      	blx	r7
 80091d8:	3001      	adds	r0, #1
 80091da:	f43f ae74 	beq.w	8008ec6 <_printf_float+0xc2>
 80091de:	ee18 3a10 	vmov	r3, s16
 80091e2:	4652      	mov	r2, sl
 80091e4:	4631      	mov	r1, r6
 80091e6:	4628      	mov	r0, r5
 80091e8:	47b8      	blx	r7
 80091ea:	3001      	adds	r0, #1
 80091ec:	f43f ae6b 	beq.w	8008ec6 <_printf_float+0xc2>
 80091f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091f4:	2200      	movs	r2, #0
 80091f6:	2300      	movs	r3, #0
 80091f8:	f7f7 fc6e 	bl	8000ad8 <__aeabi_dcmpeq>
 80091fc:	b9d8      	cbnz	r0, 8009236 <_printf_float+0x432>
 80091fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009200:	f108 0201 	add.w	r2, r8, #1
 8009204:	3b01      	subs	r3, #1
 8009206:	4631      	mov	r1, r6
 8009208:	4628      	mov	r0, r5
 800920a:	47b8      	blx	r7
 800920c:	3001      	adds	r0, #1
 800920e:	d10e      	bne.n	800922e <_printf_float+0x42a>
 8009210:	e659      	b.n	8008ec6 <_printf_float+0xc2>
 8009212:	2301      	movs	r3, #1
 8009214:	4652      	mov	r2, sl
 8009216:	4631      	mov	r1, r6
 8009218:	4628      	mov	r0, r5
 800921a:	47b8      	blx	r7
 800921c:	3001      	adds	r0, #1
 800921e:	f43f ae52 	beq.w	8008ec6 <_printf_float+0xc2>
 8009222:	f108 0801 	add.w	r8, r8, #1
 8009226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009228:	3b01      	subs	r3, #1
 800922a:	4543      	cmp	r3, r8
 800922c:	dcf1      	bgt.n	8009212 <_printf_float+0x40e>
 800922e:	464b      	mov	r3, r9
 8009230:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009234:	e6dc      	b.n	8008ff0 <_printf_float+0x1ec>
 8009236:	f04f 0800 	mov.w	r8, #0
 800923a:	f104 0a1a 	add.w	sl, r4, #26
 800923e:	e7f2      	b.n	8009226 <_printf_float+0x422>
 8009240:	2301      	movs	r3, #1
 8009242:	4642      	mov	r2, r8
 8009244:	e7df      	b.n	8009206 <_printf_float+0x402>
 8009246:	2301      	movs	r3, #1
 8009248:	464a      	mov	r2, r9
 800924a:	4631      	mov	r1, r6
 800924c:	4628      	mov	r0, r5
 800924e:	47b8      	blx	r7
 8009250:	3001      	adds	r0, #1
 8009252:	f43f ae38 	beq.w	8008ec6 <_printf_float+0xc2>
 8009256:	f108 0801 	add.w	r8, r8, #1
 800925a:	68e3      	ldr	r3, [r4, #12]
 800925c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800925e:	1a5b      	subs	r3, r3, r1
 8009260:	4543      	cmp	r3, r8
 8009262:	dcf0      	bgt.n	8009246 <_printf_float+0x442>
 8009264:	e6fa      	b.n	800905c <_printf_float+0x258>
 8009266:	f04f 0800 	mov.w	r8, #0
 800926a:	f104 0919 	add.w	r9, r4, #25
 800926e:	e7f4      	b.n	800925a <_printf_float+0x456>

08009270 <_printf_common>:
 8009270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009274:	4616      	mov	r6, r2
 8009276:	4699      	mov	r9, r3
 8009278:	688a      	ldr	r2, [r1, #8]
 800927a:	690b      	ldr	r3, [r1, #16]
 800927c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009280:	4293      	cmp	r3, r2
 8009282:	bfb8      	it	lt
 8009284:	4613      	movlt	r3, r2
 8009286:	6033      	str	r3, [r6, #0]
 8009288:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800928c:	4607      	mov	r7, r0
 800928e:	460c      	mov	r4, r1
 8009290:	b10a      	cbz	r2, 8009296 <_printf_common+0x26>
 8009292:	3301      	adds	r3, #1
 8009294:	6033      	str	r3, [r6, #0]
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	0699      	lsls	r1, r3, #26
 800929a:	bf42      	ittt	mi
 800929c:	6833      	ldrmi	r3, [r6, #0]
 800929e:	3302      	addmi	r3, #2
 80092a0:	6033      	strmi	r3, [r6, #0]
 80092a2:	6825      	ldr	r5, [r4, #0]
 80092a4:	f015 0506 	ands.w	r5, r5, #6
 80092a8:	d106      	bne.n	80092b8 <_printf_common+0x48>
 80092aa:	f104 0a19 	add.w	sl, r4, #25
 80092ae:	68e3      	ldr	r3, [r4, #12]
 80092b0:	6832      	ldr	r2, [r6, #0]
 80092b2:	1a9b      	subs	r3, r3, r2
 80092b4:	42ab      	cmp	r3, r5
 80092b6:	dc26      	bgt.n	8009306 <_printf_common+0x96>
 80092b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092bc:	1e13      	subs	r3, r2, #0
 80092be:	6822      	ldr	r2, [r4, #0]
 80092c0:	bf18      	it	ne
 80092c2:	2301      	movne	r3, #1
 80092c4:	0692      	lsls	r2, r2, #26
 80092c6:	d42b      	bmi.n	8009320 <_printf_common+0xb0>
 80092c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092cc:	4649      	mov	r1, r9
 80092ce:	4638      	mov	r0, r7
 80092d0:	47c0      	blx	r8
 80092d2:	3001      	adds	r0, #1
 80092d4:	d01e      	beq.n	8009314 <_printf_common+0xa4>
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	68e5      	ldr	r5, [r4, #12]
 80092da:	6832      	ldr	r2, [r6, #0]
 80092dc:	f003 0306 	and.w	r3, r3, #6
 80092e0:	2b04      	cmp	r3, #4
 80092e2:	bf08      	it	eq
 80092e4:	1aad      	subeq	r5, r5, r2
 80092e6:	68a3      	ldr	r3, [r4, #8]
 80092e8:	6922      	ldr	r2, [r4, #16]
 80092ea:	bf0c      	ite	eq
 80092ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092f0:	2500      	movne	r5, #0
 80092f2:	4293      	cmp	r3, r2
 80092f4:	bfc4      	itt	gt
 80092f6:	1a9b      	subgt	r3, r3, r2
 80092f8:	18ed      	addgt	r5, r5, r3
 80092fa:	2600      	movs	r6, #0
 80092fc:	341a      	adds	r4, #26
 80092fe:	42b5      	cmp	r5, r6
 8009300:	d11a      	bne.n	8009338 <_printf_common+0xc8>
 8009302:	2000      	movs	r0, #0
 8009304:	e008      	b.n	8009318 <_printf_common+0xa8>
 8009306:	2301      	movs	r3, #1
 8009308:	4652      	mov	r2, sl
 800930a:	4649      	mov	r1, r9
 800930c:	4638      	mov	r0, r7
 800930e:	47c0      	blx	r8
 8009310:	3001      	adds	r0, #1
 8009312:	d103      	bne.n	800931c <_printf_common+0xac>
 8009314:	f04f 30ff 	mov.w	r0, #4294967295
 8009318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800931c:	3501      	adds	r5, #1
 800931e:	e7c6      	b.n	80092ae <_printf_common+0x3e>
 8009320:	18e1      	adds	r1, r4, r3
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	2030      	movs	r0, #48	; 0x30
 8009326:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800932a:	4422      	add	r2, r4
 800932c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009330:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009334:	3302      	adds	r3, #2
 8009336:	e7c7      	b.n	80092c8 <_printf_common+0x58>
 8009338:	2301      	movs	r3, #1
 800933a:	4622      	mov	r2, r4
 800933c:	4649      	mov	r1, r9
 800933e:	4638      	mov	r0, r7
 8009340:	47c0      	blx	r8
 8009342:	3001      	adds	r0, #1
 8009344:	d0e6      	beq.n	8009314 <_printf_common+0xa4>
 8009346:	3601      	adds	r6, #1
 8009348:	e7d9      	b.n	80092fe <_printf_common+0x8e>
	...

0800934c <_printf_i>:
 800934c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009350:	7e0f      	ldrb	r7, [r1, #24]
 8009352:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009354:	2f78      	cmp	r7, #120	; 0x78
 8009356:	4691      	mov	r9, r2
 8009358:	4680      	mov	r8, r0
 800935a:	460c      	mov	r4, r1
 800935c:	469a      	mov	sl, r3
 800935e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009362:	d807      	bhi.n	8009374 <_printf_i+0x28>
 8009364:	2f62      	cmp	r7, #98	; 0x62
 8009366:	d80a      	bhi.n	800937e <_printf_i+0x32>
 8009368:	2f00      	cmp	r7, #0
 800936a:	f000 80d8 	beq.w	800951e <_printf_i+0x1d2>
 800936e:	2f58      	cmp	r7, #88	; 0x58
 8009370:	f000 80a3 	beq.w	80094ba <_printf_i+0x16e>
 8009374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009378:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800937c:	e03a      	b.n	80093f4 <_printf_i+0xa8>
 800937e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009382:	2b15      	cmp	r3, #21
 8009384:	d8f6      	bhi.n	8009374 <_printf_i+0x28>
 8009386:	a101      	add	r1, pc, #4	; (adr r1, 800938c <_printf_i+0x40>)
 8009388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800938c:	080093e5 	.word	0x080093e5
 8009390:	080093f9 	.word	0x080093f9
 8009394:	08009375 	.word	0x08009375
 8009398:	08009375 	.word	0x08009375
 800939c:	08009375 	.word	0x08009375
 80093a0:	08009375 	.word	0x08009375
 80093a4:	080093f9 	.word	0x080093f9
 80093a8:	08009375 	.word	0x08009375
 80093ac:	08009375 	.word	0x08009375
 80093b0:	08009375 	.word	0x08009375
 80093b4:	08009375 	.word	0x08009375
 80093b8:	08009505 	.word	0x08009505
 80093bc:	08009429 	.word	0x08009429
 80093c0:	080094e7 	.word	0x080094e7
 80093c4:	08009375 	.word	0x08009375
 80093c8:	08009375 	.word	0x08009375
 80093cc:	08009527 	.word	0x08009527
 80093d0:	08009375 	.word	0x08009375
 80093d4:	08009429 	.word	0x08009429
 80093d8:	08009375 	.word	0x08009375
 80093dc:	08009375 	.word	0x08009375
 80093e0:	080094ef 	.word	0x080094ef
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	1d1a      	adds	r2, r3, #4
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	602a      	str	r2, [r5, #0]
 80093ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093f4:	2301      	movs	r3, #1
 80093f6:	e0a3      	b.n	8009540 <_printf_i+0x1f4>
 80093f8:	6820      	ldr	r0, [r4, #0]
 80093fa:	6829      	ldr	r1, [r5, #0]
 80093fc:	0606      	lsls	r6, r0, #24
 80093fe:	f101 0304 	add.w	r3, r1, #4
 8009402:	d50a      	bpl.n	800941a <_printf_i+0xce>
 8009404:	680e      	ldr	r6, [r1, #0]
 8009406:	602b      	str	r3, [r5, #0]
 8009408:	2e00      	cmp	r6, #0
 800940a:	da03      	bge.n	8009414 <_printf_i+0xc8>
 800940c:	232d      	movs	r3, #45	; 0x2d
 800940e:	4276      	negs	r6, r6
 8009410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009414:	485e      	ldr	r0, [pc, #376]	; (8009590 <_printf_i+0x244>)
 8009416:	230a      	movs	r3, #10
 8009418:	e019      	b.n	800944e <_printf_i+0x102>
 800941a:	680e      	ldr	r6, [r1, #0]
 800941c:	602b      	str	r3, [r5, #0]
 800941e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009422:	bf18      	it	ne
 8009424:	b236      	sxthne	r6, r6
 8009426:	e7ef      	b.n	8009408 <_printf_i+0xbc>
 8009428:	682b      	ldr	r3, [r5, #0]
 800942a:	6820      	ldr	r0, [r4, #0]
 800942c:	1d19      	adds	r1, r3, #4
 800942e:	6029      	str	r1, [r5, #0]
 8009430:	0601      	lsls	r1, r0, #24
 8009432:	d501      	bpl.n	8009438 <_printf_i+0xec>
 8009434:	681e      	ldr	r6, [r3, #0]
 8009436:	e002      	b.n	800943e <_printf_i+0xf2>
 8009438:	0646      	lsls	r6, r0, #25
 800943a:	d5fb      	bpl.n	8009434 <_printf_i+0xe8>
 800943c:	881e      	ldrh	r6, [r3, #0]
 800943e:	4854      	ldr	r0, [pc, #336]	; (8009590 <_printf_i+0x244>)
 8009440:	2f6f      	cmp	r7, #111	; 0x6f
 8009442:	bf0c      	ite	eq
 8009444:	2308      	moveq	r3, #8
 8009446:	230a      	movne	r3, #10
 8009448:	2100      	movs	r1, #0
 800944a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800944e:	6865      	ldr	r5, [r4, #4]
 8009450:	60a5      	str	r5, [r4, #8]
 8009452:	2d00      	cmp	r5, #0
 8009454:	bfa2      	ittt	ge
 8009456:	6821      	ldrge	r1, [r4, #0]
 8009458:	f021 0104 	bicge.w	r1, r1, #4
 800945c:	6021      	strge	r1, [r4, #0]
 800945e:	b90e      	cbnz	r6, 8009464 <_printf_i+0x118>
 8009460:	2d00      	cmp	r5, #0
 8009462:	d04d      	beq.n	8009500 <_printf_i+0x1b4>
 8009464:	4615      	mov	r5, r2
 8009466:	fbb6 f1f3 	udiv	r1, r6, r3
 800946a:	fb03 6711 	mls	r7, r3, r1, r6
 800946e:	5dc7      	ldrb	r7, [r0, r7]
 8009470:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009474:	4637      	mov	r7, r6
 8009476:	42bb      	cmp	r3, r7
 8009478:	460e      	mov	r6, r1
 800947a:	d9f4      	bls.n	8009466 <_printf_i+0x11a>
 800947c:	2b08      	cmp	r3, #8
 800947e:	d10b      	bne.n	8009498 <_printf_i+0x14c>
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	07de      	lsls	r6, r3, #31
 8009484:	d508      	bpl.n	8009498 <_printf_i+0x14c>
 8009486:	6923      	ldr	r3, [r4, #16]
 8009488:	6861      	ldr	r1, [r4, #4]
 800948a:	4299      	cmp	r1, r3
 800948c:	bfde      	ittt	le
 800948e:	2330      	movle	r3, #48	; 0x30
 8009490:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009494:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009498:	1b52      	subs	r2, r2, r5
 800949a:	6122      	str	r2, [r4, #16]
 800949c:	f8cd a000 	str.w	sl, [sp]
 80094a0:	464b      	mov	r3, r9
 80094a2:	aa03      	add	r2, sp, #12
 80094a4:	4621      	mov	r1, r4
 80094a6:	4640      	mov	r0, r8
 80094a8:	f7ff fee2 	bl	8009270 <_printf_common>
 80094ac:	3001      	adds	r0, #1
 80094ae:	d14c      	bne.n	800954a <_printf_i+0x1fe>
 80094b0:	f04f 30ff 	mov.w	r0, #4294967295
 80094b4:	b004      	add	sp, #16
 80094b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ba:	4835      	ldr	r0, [pc, #212]	; (8009590 <_printf_i+0x244>)
 80094bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80094c0:	6829      	ldr	r1, [r5, #0]
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80094c8:	6029      	str	r1, [r5, #0]
 80094ca:	061d      	lsls	r5, r3, #24
 80094cc:	d514      	bpl.n	80094f8 <_printf_i+0x1ac>
 80094ce:	07df      	lsls	r7, r3, #31
 80094d0:	bf44      	itt	mi
 80094d2:	f043 0320 	orrmi.w	r3, r3, #32
 80094d6:	6023      	strmi	r3, [r4, #0]
 80094d8:	b91e      	cbnz	r6, 80094e2 <_printf_i+0x196>
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	f023 0320 	bic.w	r3, r3, #32
 80094e0:	6023      	str	r3, [r4, #0]
 80094e2:	2310      	movs	r3, #16
 80094e4:	e7b0      	b.n	8009448 <_printf_i+0xfc>
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	f043 0320 	orr.w	r3, r3, #32
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	2378      	movs	r3, #120	; 0x78
 80094f0:	4828      	ldr	r0, [pc, #160]	; (8009594 <_printf_i+0x248>)
 80094f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094f6:	e7e3      	b.n	80094c0 <_printf_i+0x174>
 80094f8:	0659      	lsls	r1, r3, #25
 80094fa:	bf48      	it	mi
 80094fc:	b2b6      	uxthmi	r6, r6
 80094fe:	e7e6      	b.n	80094ce <_printf_i+0x182>
 8009500:	4615      	mov	r5, r2
 8009502:	e7bb      	b.n	800947c <_printf_i+0x130>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	6826      	ldr	r6, [r4, #0]
 8009508:	6961      	ldr	r1, [r4, #20]
 800950a:	1d18      	adds	r0, r3, #4
 800950c:	6028      	str	r0, [r5, #0]
 800950e:	0635      	lsls	r5, r6, #24
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	d501      	bpl.n	8009518 <_printf_i+0x1cc>
 8009514:	6019      	str	r1, [r3, #0]
 8009516:	e002      	b.n	800951e <_printf_i+0x1d2>
 8009518:	0670      	lsls	r0, r6, #25
 800951a:	d5fb      	bpl.n	8009514 <_printf_i+0x1c8>
 800951c:	8019      	strh	r1, [r3, #0]
 800951e:	2300      	movs	r3, #0
 8009520:	6123      	str	r3, [r4, #16]
 8009522:	4615      	mov	r5, r2
 8009524:	e7ba      	b.n	800949c <_printf_i+0x150>
 8009526:	682b      	ldr	r3, [r5, #0]
 8009528:	1d1a      	adds	r2, r3, #4
 800952a:	602a      	str	r2, [r5, #0]
 800952c:	681d      	ldr	r5, [r3, #0]
 800952e:	6862      	ldr	r2, [r4, #4]
 8009530:	2100      	movs	r1, #0
 8009532:	4628      	mov	r0, r5
 8009534:	f7f6 fe5c 	bl	80001f0 <memchr>
 8009538:	b108      	cbz	r0, 800953e <_printf_i+0x1f2>
 800953a:	1b40      	subs	r0, r0, r5
 800953c:	6060      	str	r0, [r4, #4]
 800953e:	6863      	ldr	r3, [r4, #4]
 8009540:	6123      	str	r3, [r4, #16]
 8009542:	2300      	movs	r3, #0
 8009544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009548:	e7a8      	b.n	800949c <_printf_i+0x150>
 800954a:	6923      	ldr	r3, [r4, #16]
 800954c:	462a      	mov	r2, r5
 800954e:	4649      	mov	r1, r9
 8009550:	4640      	mov	r0, r8
 8009552:	47d0      	blx	sl
 8009554:	3001      	adds	r0, #1
 8009556:	d0ab      	beq.n	80094b0 <_printf_i+0x164>
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	079b      	lsls	r3, r3, #30
 800955c:	d413      	bmi.n	8009586 <_printf_i+0x23a>
 800955e:	68e0      	ldr	r0, [r4, #12]
 8009560:	9b03      	ldr	r3, [sp, #12]
 8009562:	4298      	cmp	r0, r3
 8009564:	bfb8      	it	lt
 8009566:	4618      	movlt	r0, r3
 8009568:	e7a4      	b.n	80094b4 <_printf_i+0x168>
 800956a:	2301      	movs	r3, #1
 800956c:	4632      	mov	r2, r6
 800956e:	4649      	mov	r1, r9
 8009570:	4640      	mov	r0, r8
 8009572:	47d0      	blx	sl
 8009574:	3001      	adds	r0, #1
 8009576:	d09b      	beq.n	80094b0 <_printf_i+0x164>
 8009578:	3501      	adds	r5, #1
 800957a:	68e3      	ldr	r3, [r4, #12]
 800957c:	9903      	ldr	r1, [sp, #12]
 800957e:	1a5b      	subs	r3, r3, r1
 8009580:	42ab      	cmp	r3, r5
 8009582:	dcf2      	bgt.n	800956a <_printf_i+0x21e>
 8009584:	e7eb      	b.n	800955e <_printf_i+0x212>
 8009586:	2500      	movs	r5, #0
 8009588:	f104 0619 	add.w	r6, r4, #25
 800958c:	e7f5      	b.n	800957a <_printf_i+0x22e>
 800958e:	bf00      	nop
 8009590:	0800ec36 	.word	0x0800ec36
 8009594:	0800ec47 	.word	0x0800ec47

08009598 <_scanf_float>:
 8009598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	b087      	sub	sp, #28
 800959e:	4617      	mov	r7, r2
 80095a0:	9303      	str	r3, [sp, #12]
 80095a2:	688b      	ldr	r3, [r1, #8]
 80095a4:	1e5a      	subs	r2, r3, #1
 80095a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80095aa:	bf83      	ittte	hi
 80095ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80095b0:	195b      	addhi	r3, r3, r5
 80095b2:	9302      	strhi	r3, [sp, #8]
 80095b4:	2300      	movls	r3, #0
 80095b6:	bf86      	itte	hi
 80095b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80095bc:	608b      	strhi	r3, [r1, #8]
 80095be:	9302      	strls	r3, [sp, #8]
 80095c0:	680b      	ldr	r3, [r1, #0]
 80095c2:	468b      	mov	fp, r1
 80095c4:	2500      	movs	r5, #0
 80095c6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80095ca:	f84b 3b1c 	str.w	r3, [fp], #28
 80095ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80095d2:	4680      	mov	r8, r0
 80095d4:	460c      	mov	r4, r1
 80095d6:	465e      	mov	r6, fp
 80095d8:	46aa      	mov	sl, r5
 80095da:	46a9      	mov	r9, r5
 80095dc:	9501      	str	r5, [sp, #4]
 80095de:	68a2      	ldr	r2, [r4, #8]
 80095e0:	b152      	cbz	r2, 80095f8 <_scanf_float+0x60>
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	2b4e      	cmp	r3, #78	; 0x4e
 80095e8:	d864      	bhi.n	80096b4 <_scanf_float+0x11c>
 80095ea:	2b40      	cmp	r3, #64	; 0x40
 80095ec:	d83c      	bhi.n	8009668 <_scanf_float+0xd0>
 80095ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80095f2:	b2c8      	uxtb	r0, r1
 80095f4:	280e      	cmp	r0, #14
 80095f6:	d93a      	bls.n	800966e <_scanf_float+0xd6>
 80095f8:	f1b9 0f00 	cmp.w	r9, #0
 80095fc:	d003      	beq.n	8009606 <_scanf_float+0x6e>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	f10a 3aff 	add.w	sl, sl, #4294967295
 800960a:	f1ba 0f01 	cmp.w	sl, #1
 800960e:	f200 8113 	bhi.w	8009838 <_scanf_float+0x2a0>
 8009612:	455e      	cmp	r6, fp
 8009614:	f200 8105 	bhi.w	8009822 <_scanf_float+0x28a>
 8009618:	2501      	movs	r5, #1
 800961a:	4628      	mov	r0, r5
 800961c:	b007      	add	sp, #28
 800961e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009622:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009626:	2a0d      	cmp	r2, #13
 8009628:	d8e6      	bhi.n	80095f8 <_scanf_float+0x60>
 800962a:	a101      	add	r1, pc, #4	; (adr r1, 8009630 <_scanf_float+0x98>)
 800962c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009630:	0800976f 	.word	0x0800976f
 8009634:	080095f9 	.word	0x080095f9
 8009638:	080095f9 	.word	0x080095f9
 800963c:	080095f9 	.word	0x080095f9
 8009640:	080097cf 	.word	0x080097cf
 8009644:	080097a7 	.word	0x080097a7
 8009648:	080095f9 	.word	0x080095f9
 800964c:	080095f9 	.word	0x080095f9
 8009650:	0800977d 	.word	0x0800977d
 8009654:	080095f9 	.word	0x080095f9
 8009658:	080095f9 	.word	0x080095f9
 800965c:	080095f9 	.word	0x080095f9
 8009660:	080095f9 	.word	0x080095f9
 8009664:	08009735 	.word	0x08009735
 8009668:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800966c:	e7db      	b.n	8009626 <_scanf_float+0x8e>
 800966e:	290e      	cmp	r1, #14
 8009670:	d8c2      	bhi.n	80095f8 <_scanf_float+0x60>
 8009672:	a001      	add	r0, pc, #4	; (adr r0, 8009678 <_scanf_float+0xe0>)
 8009674:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009678:	08009727 	.word	0x08009727
 800967c:	080095f9 	.word	0x080095f9
 8009680:	08009727 	.word	0x08009727
 8009684:	080097bb 	.word	0x080097bb
 8009688:	080095f9 	.word	0x080095f9
 800968c:	080096d5 	.word	0x080096d5
 8009690:	08009711 	.word	0x08009711
 8009694:	08009711 	.word	0x08009711
 8009698:	08009711 	.word	0x08009711
 800969c:	08009711 	.word	0x08009711
 80096a0:	08009711 	.word	0x08009711
 80096a4:	08009711 	.word	0x08009711
 80096a8:	08009711 	.word	0x08009711
 80096ac:	08009711 	.word	0x08009711
 80096b0:	08009711 	.word	0x08009711
 80096b4:	2b6e      	cmp	r3, #110	; 0x6e
 80096b6:	d809      	bhi.n	80096cc <_scanf_float+0x134>
 80096b8:	2b60      	cmp	r3, #96	; 0x60
 80096ba:	d8b2      	bhi.n	8009622 <_scanf_float+0x8a>
 80096bc:	2b54      	cmp	r3, #84	; 0x54
 80096be:	d077      	beq.n	80097b0 <_scanf_float+0x218>
 80096c0:	2b59      	cmp	r3, #89	; 0x59
 80096c2:	d199      	bne.n	80095f8 <_scanf_float+0x60>
 80096c4:	2d07      	cmp	r5, #7
 80096c6:	d197      	bne.n	80095f8 <_scanf_float+0x60>
 80096c8:	2508      	movs	r5, #8
 80096ca:	e029      	b.n	8009720 <_scanf_float+0x188>
 80096cc:	2b74      	cmp	r3, #116	; 0x74
 80096ce:	d06f      	beq.n	80097b0 <_scanf_float+0x218>
 80096d0:	2b79      	cmp	r3, #121	; 0x79
 80096d2:	e7f6      	b.n	80096c2 <_scanf_float+0x12a>
 80096d4:	6821      	ldr	r1, [r4, #0]
 80096d6:	05c8      	lsls	r0, r1, #23
 80096d8:	d51a      	bpl.n	8009710 <_scanf_float+0x178>
 80096da:	9b02      	ldr	r3, [sp, #8]
 80096dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80096e0:	6021      	str	r1, [r4, #0]
 80096e2:	f109 0901 	add.w	r9, r9, #1
 80096e6:	b11b      	cbz	r3, 80096f0 <_scanf_float+0x158>
 80096e8:	3b01      	subs	r3, #1
 80096ea:	3201      	adds	r2, #1
 80096ec:	9302      	str	r3, [sp, #8]
 80096ee:	60a2      	str	r2, [r4, #8]
 80096f0:	68a3      	ldr	r3, [r4, #8]
 80096f2:	3b01      	subs	r3, #1
 80096f4:	60a3      	str	r3, [r4, #8]
 80096f6:	6923      	ldr	r3, [r4, #16]
 80096f8:	3301      	adds	r3, #1
 80096fa:	6123      	str	r3, [r4, #16]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	3b01      	subs	r3, #1
 8009700:	2b00      	cmp	r3, #0
 8009702:	607b      	str	r3, [r7, #4]
 8009704:	f340 8084 	ble.w	8009810 <_scanf_float+0x278>
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	3301      	adds	r3, #1
 800970c:	603b      	str	r3, [r7, #0]
 800970e:	e766      	b.n	80095de <_scanf_float+0x46>
 8009710:	eb1a 0f05 	cmn.w	sl, r5
 8009714:	f47f af70 	bne.w	80095f8 <_scanf_float+0x60>
 8009718:	6822      	ldr	r2, [r4, #0]
 800971a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800971e:	6022      	str	r2, [r4, #0]
 8009720:	f806 3b01 	strb.w	r3, [r6], #1
 8009724:	e7e4      	b.n	80096f0 <_scanf_float+0x158>
 8009726:	6822      	ldr	r2, [r4, #0]
 8009728:	0610      	lsls	r0, r2, #24
 800972a:	f57f af65 	bpl.w	80095f8 <_scanf_float+0x60>
 800972e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009732:	e7f4      	b.n	800971e <_scanf_float+0x186>
 8009734:	f1ba 0f00 	cmp.w	sl, #0
 8009738:	d10e      	bne.n	8009758 <_scanf_float+0x1c0>
 800973a:	f1b9 0f00 	cmp.w	r9, #0
 800973e:	d10e      	bne.n	800975e <_scanf_float+0x1c6>
 8009740:	6822      	ldr	r2, [r4, #0]
 8009742:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009746:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800974a:	d108      	bne.n	800975e <_scanf_float+0x1c6>
 800974c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009750:	6022      	str	r2, [r4, #0]
 8009752:	f04f 0a01 	mov.w	sl, #1
 8009756:	e7e3      	b.n	8009720 <_scanf_float+0x188>
 8009758:	f1ba 0f02 	cmp.w	sl, #2
 800975c:	d055      	beq.n	800980a <_scanf_float+0x272>
 800975e:	2d01      	cmp	r5, #1
 8009760:	d002      	beq.n	8009768 <_scanf_float+0x1d0>
 8009762:	2d04      	cmp	r5, #4
 8009764:	f47f af48 	bne.w	80095f8 <_scanf_float+0x60>
 8009768:	3501      	adds	r5, #1
 800976a:	b2ed      	uxtb	r5, r5
 800976c:	e7d8      	b.n	8009720 <_scanf_float+0x188>
 800976e:	f1ba 0f01 	cmp.w	sl, #1
 8009772:	f47f af41 	bne.w	80095f8 <_scanf_float+0x60>
 8009776:	f04f 0a02 	mov.w	sl, #2
 800977a:	e7d1      	b.n	8009720 <_scanf_float+0x188>
 800977c:	b97d      	cbnz	r5, 800979e <_scanf_float+0x206>
 800977e:	f1b9 0f00 	cmp.w	r9, #0
 8009782:	f47f af3c 	bne.w	80095fe <_scanf_float+0x66>
 8009786:	6822      	ldr	r2, [r4, #0]
 8009788:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800978c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009790:	f47f af39 	bne.w	8009606 <_scanf_float+0x6e>
 8009794:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009798:	6022      	str	r2, [r4, #0]
 800979a:	2501      	movs	r5, #1
 800979c:	e7c0      	b.n	8009720 <_scanf_float+0x188>
 800979e:	2d03      	cmp	r5, #3
 80097a0:	d0e2      	beq.n	8009768 <_scanf_float+0x1d0>
 80097a2:	2d05      	cmp	r5, #5
 80097a4:	e7de      	b.n	8009764 <_scanf_float+0x1cc>
 80097a6:	2d02      	cmp	r5, #2
 80097a8:	f47f af26 	bne.w	80095f8 <_scanf_float+0x60>
 80097ac:	2503      	movs	r5, #3
 80097ae:	e7b7      	b.n	8009720 <_scanf_float+0x188>
 80097b0:	2d06      	cmp	r5, #6
 80097b2:	f47f af21 	bne.w	80095f8 <_scanf_float+0x60>
 80097b6:	2507      	movs	r5, #7
 80097b8:	e7b2      	b.n	8009720 <_scanf_float+0x188>
 80097ba:	6822      	ldr	r2, [r4, #0]
 80097bc:	0591      	lsls	r1, r2, #22
 80097be:	f57f af1b 	bpl.w	80095f8 <_scanf_float+0x60>
 80097c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80097c6:	6022      	str	r2, [r4, #0]
 80097c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80097cc:	e7a8      	b.n	8009720 <_scanf_float+0x188>
 80097ce:	6822      	ldr	r2, [r4, #0]
 80097d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80097d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80097d8:	d006      	beq.n	80097e8 <_scanf_float+0x250>
 80097da:	0550      	lsls	r0, r2, #21
 80097dc:	f57f af0c 	bpl.w	80095f8 <_scanf_float+0x60>
 80097e0:	f1b9 0f00 	cmp.w	r9, #0
 80097e4:	f43f af0f 	beq.w	8009606 <_scanf_float+0x6e>
 80097e8:	0591      	lsls	r1, r2, #22
 80097ea:	bf58      	it	pl
 80097ec:	9901      	ldrpl	r1, [sp, #4]
 80097ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097f2:	bf58      	it	pl
 80097f4:	eba9 0101 	subpl.w	r1, r9, r1
 80097f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80097fc:	bf58      	it	pl
 80097fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009802:	6022      	str	r2, [r4, #0]
 8009804:	f04f 0900 	mov.w	r9, #0
 8009808:	e78a      	b.n	8009720 <_scanf_float+0x188>
 800980a:	f04f 0a03 	mov.w	sl, #3
 800980e:	e787      	b.n	8009720 <_scanf_float+0x188>
 8009810:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009814:	4639      	mov	r1, r7
 8009816:	4640      	mov	r0, r8
 8009818:	4798      	blx	r3
 800981a:	2800      	cmp	r0, #0
 800981c:	f43f aedf 	beq.w	80095de <_scanf_float+0x46>
 8009820:	e6ea      	b.n	80095f8 <_scanf_float+0x60>
 8009822:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009826:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800982a:	463a      	mov	r2, r7
 800982c:	4640      	mov	r0, r8
 800982e:	4798      	blx	r3
 8009830:	6923      	ldr	r3, [r4, #16]
 8009832:	3b01      	subs	r3, #1
 8009834:	6123      	str	r3, [r4, #16]
 8009836:	e6ec      	b.n	8009612 <_scanf_float+0x7a>
 8009838:	1e6b      	subs	r3, r5, #1
 800983a:	2b06      	cmp	r3, #6
 800983c:	d825      	bhi.n	800988a <_scanf_float+0x2f2>
 800983e:	2d02      	cmp	r5, #2
 8009840:	d836      	bhi.n	80098b0 <_scanf_float+0x318>
 8009842:	455e      	cmp	r6, fp
 8009844:	f67f aee8 	bls.w	8009618 <_scanf_float+0x80>
 8009848:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800984c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009850:	463a      	mov	r2, r7
 8009852:	4640      	mov	r0, r8
 8009854:	4798      	blx	r3
 8009856:	6923      	ldr	r3, [r4, #16]
 8009858:	3b01      	subs	r3, #1
 800985a:	6123      	str	r3, [r4, #16]
 800985c:	e7f1      	b.n	8009842 <_scanf_float+0x2aa>
 800985e:	9802      	ldr	r0, [sp, #8]
 8009860:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009864:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009868:	9002      	str	r0, [sp, #8]
 800986a:	463a      	mov	r2, r7
 800986c:	4640      	mov	r0, r8
 800986e:	4798      	blx	r3
 8009870:	6923      	ldr	r3, [r4, #16]
 8009872:	3b01      	subs	r3, #1
 8009874:	6123      	str	r3, [r4, #16]
 8009876:	f10a 3aff 	add.w	sl, sl, #4294967295
 800987a:	fa5f fa8a 	uxtb.w	sl, sl
 800987e:	f1ba 0f02 	cmp.w	sl, #2
 8009882:	d1ec      	bne.n	800985e <_scanf_float+0x2c6>
 8009884:	3d03      	subs	r5, #3
 8009886:	b2ed      	uxtb	r5, r5
 8009888:	1b76      	subs	r6, r6, r5
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	05da      	lsls	r2, r3, #23
 800988e:	d52f      	bpl.n	80098f0 <_scanf_float+0x358>
 8009890:	055b      	lsls	r3, r3, #21
 8009892:	d510      	bpl.n	80098b6 <_scanf_float+0x31e>
 8009894:	455e      	cmp	r6, fp
 8009896:	f67f aebf 	bls.w	8009618 <_scanf_float+0x80>
 800989a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800989e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098a2:	463a      	mov	r2, r7
 80098a4:	4640      	mov	r0, r8
 80098a6:	4798      	blx	r3
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	6123      	str	r3, [r4, #16]
 80098ae:	e7f1      	b.n	8009894 <_scanf_float+0x2fc>
 80098b0:	46aa      	mov	sl, r5
 80098b2:	9602      	str	r6, [sp, #8]
 80098b4:	e7df      	b.n	8009876 <_scanf_float+0x2de>
 80098b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80098ba:	6923      	ldr	r3, [r4, #16]
 80098bc:	2965      	cmp	r1, #101	; 0x65
 80098be:	f103 33ff 	add.w	r3, r3, #4294967295
 80098c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80098c6:	6123      	str	r3, [r4, #16]
 80098c8:	d00c      	beq.n	80098e4 <_scanf_float+0x34c>
 80098ca:	2945      	cmp	r1, #69	; 0x45
 80098cc:	d00a      	beq.n	80098e4 <_scanf_float+0x34c>
 80098ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098d2:	463a      	mov	r2, r7
 80098d4:	4640      	mov	r0, r8
 80098d6:	4798      	blx	r3
 80098d8:	6923      	ldr	r3, [r4, #16]
 80098da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80098de:	3b01      	subs	r3, #1
 80098e0:	1eb5      	subs	r5, r6, #2
 80098e2:	6123      	str	r3, [r4, #16]
 80098e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098e8:	463a      	mov	r2, r7
 80098ea:	4640      	mov	r0, r8
 80098ec:	4798      	blx	r3
 80098ee:	462e      	mov	r6, r5
 80098f0:	6825      	ldr	r5, [r4, #0]
 80098f2:	f015 0510 	ands.w	r5, r5, #16
 80098f6:	d159      	bne.n	80099ac <_scanf_float+0x414>
 80098f8:	7035      	strb	r5, [r6, #0]
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009904:	d11b      	bne.n	800993e <_scanf_float+0x3a6>
 8009906:	9b01      	ldr	r3, [sp, #4]
 8009908:	454b      	cmp	r3, r9
 800990a:	eba3 0209 	sub.w	r2, r3, r9
 800990e:	d123      	bne.n	8009958 <_scanf_float+0x3c0>
 8009910:	2200      	movs	r2, #0
 8009912:	4659      	mov	r1, fp
 8009914:	4640      	mov	r0, r8
 8009916:	f000 fe99 	bl	800a64c <_strtod_r>
 800991a:	6822      	ldr	r2, [r4, #0]
 800991c:	9b03      	ldr	r3, [sp, #12]
 800991e:	f012 0f02 	tst.w	r2, #2
 8009922:	ec57 6b10 	vmov	r6, r7, d0
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	d021      	beq.n	800996e <_scanf_float+0x3d6>
 800992a:	9903      	ldr	r1, [sp, #12]
 800992c:	1d1a      	adds	r2, r3, #4
 800992e:	600a      	str	r2, [r1, #0]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	e9c3 6700 	strd	r6, r7, [r3]
 8009936:	68e3      	ldr	r3, [r4, #12]
 8009938:	3301      	adds	r3, #1
 800993a:	60e3      	str	r3, [r4, #12]
 800993c:	e66d      	b.n	800961a <_scanf_float+0x82>
 800993e:	9b04      	ldr	r3, [sp, #16]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d0e5      	beq.n	8009910 <_scanf_float+0x378>
 8009944:	9905      	ldr	r1, [sp, #20]
 8009946:	230a      	movs	r3, #10
 8009948:	462a      	mov	r2, r5
 800994a:	3101      	adds	r1, #1
 800994c:	4640      	mov	r0, r8
 800994e:	f000 ff05 	bl	800a75c <_strtol_r>
 8009952:	9b04      	ldr	r3, [sp, #16]
 8009954:	9e05      	ldr	r6, [sp, #20]
 8009956:	1ac2      	subs	r2, r0, r3
 8009958:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800995c:	429e      	cmp	r6, r3
 800995e:	bf28      	it	cs
 8009960:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009964:	4912      	ldr	r1, [pc, #72]	; (80099b0 <_scanf_float+0x418>)
 8009966:	4630      	mov	r0, r6
 8009968:	f000 f82c 	bl	80099c4 <siprintf>
 800996c:	e7d0      	b.n	8009910 <_scanf_float+0x378>
 800996e:	9903      	ldr	r1, [sp, #12]
 8009970:	f012 0f04 	tst.w	r2, #4
 8009974:	f103 0204 	add.w	r2, r3, #4
 8009978:	600a      	str	r2, [r1, #0]
 800997a:	d1d9      	bne.n	8009930 <_scanf_float+0x398>
 800997c:	f8d3 8000 	ldr.w	r8, [r3]
 8009980:	ee10 2a10 	vmov	r2, s0
 8009984:	ee10 0a10 	vmov	r0, s0
 8009988:	463b      	mov	r3, r7
 800998a:	4639      	mov	r1, r7
 800998c:	f7f7 f8d6 	bl	8000b3c <__aeabi_dcmpun>
 8009990:	b128      	cbz	r0, 800999e <_scanf_float+0x406>
 8009992:	4808      	ldr	r0, [pc, #32]	; (80099b4 <_scanf_float+0x41c>)
 8009994:	f000 f810 	bl	80099b8 <nanf>
 8009998:	ed88 0a00 	vstr	s0, [r8]
 800999c:	e7cb      	b.n	8009936 <_scanf_float+0x39e>
 800999e:	4630      	mov	r0, r6
 80099a0:	4639      	mov	r1, r7
 80099a2:	f7f7 f929 	bl	8000bf8 <__aeabi_d2f>
 80099a6:	f8c8 0000 	str.w	r0, [r8]
 80099aa:	e7c4      	b.n	8009936 <_scanf_float+0x39e>
 80099ac:	2500      	movs	r5, #0
 80099ae:	e634      	b.n	800961a <_scanf_float+0x82>
 80099b0:	0800ec58 	.word	0x0800ec58
 80099b4:	0800f060 	.word	0x0800f060

080099b8 <nanf>:
 80099b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80099c0 <nanf+0x8>
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	7fc00000 	.word	0x7fc00000

080099c4 <siprintf>:
 80099c4:	b40e      	push	{r1, r2, r3}
 80099c6:	b500      	push	{lr}
 80099c8:	b09c      	sub	sp, #112	; 0x70
 80099ca:	ab1d      	add	r3, sp, #116	; 0x74
 80099cc:	9002      	str	r0, [sp, #8]
 80099ce:	9006      	str	r0, [sp, #24]
 80099d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099d4:	4809      	ldr	r0, [pc, #36]	; (80099fc <siprintf+0x38>)
 80099d6:	9107      	str	r1, [sp, #28]
 80099d8:	9104      	str	r1, [sp, #16]
 80099da:	4909      	ldr	r1, [pc, #36]	; (8009a00 <siprintf+0x3c>)
 80099dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80099e0:	9105      	str	r1, [sp, #20]
 80099e2:	6800      	ldr	r0, [r0, #0]
 80099e4:	9301      	str	r3, [sp, #4]
 80099e6:	a902      	add	r1, sp, #8
 80099e8:	f002 fed6 	bl	800c798 <_svfiprintf_r>
 80099ec:	9b02      	ldr	r3, [sp, #8]
 80099ee:	2200      	movs	r2, #0
 80099f0:	701a      	strb	r2, [r3, #0]
 80099f2:	b01c      	add	sp, #112	; 0x70
 80099f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80099f8:	b003      	add	sp, #12
 80099fa:	4770      	bx	lr
 80099fc:	20000224 	.word	0x20000224
 8009a00:	ffff0208 	.word	0xffff0208

08009a04 <sulp>:
 8009a04:	b570      	push	{r4, r5, r6, lr}
 8009a06:	4604      	mov	r4, r0
 8009a08:	460d      	mov	r5, r1
 8009a0a:	ec45 4b10 	vmov	d0, r4, r5
 8009a0e:	4616      	mov	r6, r2
 8009a10:	f002 fc20 	bl	800c254 <__ulp>
 8009a14:	ec51 0b10 	vmov	r0, r1, d0
 8009a18:	b17e      	cbz	r6, 8009a3a <sulp+0x36>
 8009a1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	dd09      	ble.n	8009a3a <sulp+0x36>
 8009a26:	051b      	lsls	r3, r3, #20
 8009a28:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009a2c:	2400      	movs	r4, #0
 8009a2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009a32:	4622      	mov	r2, r4
 8009a34:	462b      	mov	r3, r5
 8009a36:	f7f6 fde7 	bl	8000608 <__aeabi_dmul>
 8009a3a:	bd70      	pop	{r4, r5, r6, pc}
 8009a3c:	0000      	movs	r0, r0
	...

08009a40 <_strtod_l>:
 8009a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a44:	ed2d 8b02 	vpush	{d8}
 8009a48:	b09d      	sub	sp, #116	; 0x74
 8009a4a:	461f      	mov	r7, r3
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	9318      	str	r3, [sp, #96]	; 0x60
 8009a50:	4ba2      	ldr	r3, [pc, #648]	; (8009cdc <_strtod_l+0x29c>)
 8009a52:	9213      	str	r2, [sp, #76]	; 0x4c
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	9305      	str	r3, [sp, #20]
 8009a58:	4604      	mov	r4, r0
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	4688      	mov	r8, r1
 8009a5e:	f7f6 fbbf 	bl	80001e0 <strlen>
 8009a62:	f04f 0a00 	mov.w	sl, #0
 8009a66:	4605      	mov	r5, r0
 8009a68:	f04f 0b00 	mov.w	fp, #0
 8009a6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009a70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a72:	781a      	ldrb	r2, [r3, #0]
 8009a74:	2a2b      	cmp	r2, #43	; 0x2b
 8009a76:	d04e      	beq.n	8009b16 <_strtod_l+0xd6>
 8009a78:	d83b      	bhi.n	8009af2 <_strtod_l+0xb2>
 8009a7a:	2a0d      	cmp	r2, #13
 8009a7c:	d834      	bhi.n	8009ae8 <_strtod_l+0xa8>
 8009a7e:	2a08      	cmp	r2, #8
 8009a80:	d834      	bhi.n	8009aec <_strtod_l+0xac>
 8009a82:	2a00      	cmp	r2, #0
 8009a84:	d03e      	beq.n	8009b04 <_strtod_l+0xc4>
 8009a86:	2300      	movs	r3, #0
 8009a88:	930a      	str	r3, [sp, #40]	; 0x28
 8009a8a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009a8c:	7833      	ldrb	r3, [r6, #0]
 8009a8e:	2b30      	cmp	r3, #48	; 0x30
 8009a90:	f040 80b0 	bne.w	8009bf4 <_strtod_l+0x1b4>
 8009a94:	7873      	ldrb	r3, [r6, #1]
 8009a96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a9a:	2b58      	cmp	r3, #88	; 0x58
 8009a9c:	d168      	bne.n	8009b70 <_strtod_l+0x130>
 8009a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa0:	9301      	str	r3, [sp, #4]
 8009aa2:	ab18      	add	r3, sp, #96	; 0x60
 8009aa4:	9702      	str	r7, [sp, #8]
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	4a8d      	ldr	r2, [pc, #564]	; (8009ce0 <_strtod_l+0x2a0>)
 8009aaa:	ab19      	add	r3, sp, #100	; 0x64
 8009aac:	a917      	add	r1, sp, #92	; 0x5c
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f001 fd38 	bl	800b524 <__gethex>
 8009ab4:	f010 0707 	ands.w	r7, r0, #7
 8009ab8:	4605      	mov	r5, r0
 8009aba:	d005      	beq.n	8009ac8 <_strtod_l+0x88>
 8009abc:	2f06      	cmp	r7, #6
 8009abe:	d12c      	bne.n	8009b1a <_strtod_l+0xda>
 8009ac0:	3601      	adds	r6, #1
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	9617      	str	r6, [sp, #92]	; 0x5c
 8009ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ac8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f040 8590 	bne.w	800a5f0 <_strtod_l+0xbb0>
 8009ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad2:	b1eb      	cbz	r3, 8009b10 <_strtod_l+0xd0>
 8009ad4:	4652      	mov	r2, sl
 8009ad6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009ada:	ec43 2b10 	vmov	d0, r2, r3
 8009ade:	b01d      	add	sp, #116	; 0x74
 8009ae0:	ecbd 8b02 	vpop	{d8}
 8009ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae8:	2a20      	cmp	r2, #32
 8009aea:	d1cc      	bne.n	8009a86 <_strtod_l+0x46>
 8009aec:	3301      	adds	r3, #1
 8009aee:	9317      	str	r3, [sp, #92]	; 0x5c
 8009af0:	e7be      	b.n	8009a70 <_strtod_l+0x30>
 8009af2:	2a2d      	cmp	r2, #45	; 0x2d
 8009af4:	d1c7      	bne.n	8009a86 <_strtod_l+0x46>
 8009af6:	2201      	movs	r2, #1
 8009af8:	920a      	str	r2, [sp, #40]	; 0x28
 8009afa:	1c5a      	adds	r2, r3, #1
 8009afc:	9217      	str	r2, [sp, #92]	; 0x5c
 8009afe:	785b      	ldrb	r3, [r3, #1]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1c2      	bne.n	8009a8a <_strtod_l+0x4a>
 8009b04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b06:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f040 856e 	bne.w	800a5ec <_strtod_l+0xbac>
 8009b10:	4652      	mov	r2, sl
 8009b12:	465b      	mov	r3, fp
 8009b14:	e7e1      	b.n	8009ada <_strtod_l+0x9a>
 8009b16:	2200      	movs	r2, #0
 8009b18:	e7ee      	b.n	8009af8 <_strtod_l+0xb8>
 8009b1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009b1c:	b13a      	cbz	r2, 8009b2e <_strtod_l+0xee>
 8009b1e:	2135      	movs	r1, #53	; 0x35
 8009b20:	a81a      	add	r0, sp, #104	; 0x68
 8009b22:	f002 fca2 	bl	800c46a <__copybits>
 8009b26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f002 f861 	bl	800bbf0 <_Bfree>
 8009b2e:	3f01      	subs	r7, #1
 8009b30:	2f04      	cmp	r7, #4
 8009b32:	d806      	bhi.n	8009b42 <_strtod_l+0x102>
 8009b34:	e8df f007 	tbb	[pc, r7]
 8009b38:	1714030a 	.word	0x1714030a
 8009b3c:	0a          	.byte	0x0a
 8009b3d:	00          	.byte	0x00
 8009b3e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009b42:	0728      	lsls	r0, r5, #28
 8009b44:	d5c0      	bpl.n	8009ac8 <_strtod_l+0x88>
 8009b46:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009b4a:	e7bd      	b.n	8009ac8 <_strtod_l+0x88>
 8009b4c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009b50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009b56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009b5a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009b5e:	e7f0      	b.n	8009b42 <_strtod_l+0x102>
 8009b60:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009ce4 <_strtod_l+0x2a4>
 8009b64:	e7ed      	b.n	8009b42 <_strtod_l+0x102>
 8009b66:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009b6a:	f04f 3aff 	mov.w	sl, #4294967295
 8009b6e:	e7e8      	b.n	8009b42 <_strtod_l+0x102>
 8009b70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b72:	1c5a      	adds	r2, r3, #1
 8009b74:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b76:	785b      	ldrb	r3, [r3, #1]
 8009b78:	2b30      	cmp	r3, #48	; 0x30
 8009b7a:	d0f9      	beq.n	8009b70 <_strtod_l+0x130>
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d0a3      	beq.n	8009ac8 <_strtod_l+0x88>
 8009b80:	2301      	movs	r3, #1
 8009b82:	f04f 0900 	mov.w	r9, #0
 8009b86:	9304      	str	r3, [sp, #16]
 8009b88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b8a:	9308      	str	r3, [sp, #32]
 8009b8c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009b90:	464f      	mov	r7, r9
 8009b92:	220a      	movs	r2, #10
 8009b94:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009b96:	7806      	ldrb	r6, [r0, #0]
 8009b98:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009b9c:	b2d9      	uxtb	r1, r3
 8009b9e:	2909      	cmp	r1, #9
 8009ba0:	d92a      	bls.n	8009bf8 <_strtod_l+0x1b8>
 8009ba2:	9905      	ldr	r1, [sp, #20]
 8009ba4:	462a      	mov	r2, r5
 8009ba6:	f002 ff0f 	bl	800c9c8 <strncmp>
 8009baa:	b398      	cbz	r0, 8009c14 <_strtod_l+0x1d4>
 8009bac:	2000      	movs	r0, #0
 8009bae:	4632      	mov	r2, r6
 8009bb0:	463d      	mov	r5, r7
 8009bb2:	9005      	str	r0, [sp, #20]
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2a65      	cmp	r2, #101	; 0x65
 8009bb8:	d001      	beq.n	8009bbe <_strtod_l+0x17e>
 8009bba:	2a45      	cmp	r2, #69	; 0x45
 8009bbc:	d118      	bne.n	8009bf0 <_strtod_l+0x1b0>
 8009bbe:	b91d      	cbnz	r5, 8009bc8 <_strtod_l+0x188>
 8009bc0:	9a04      	ldr	r2, [sp, #16]
 8009bc2:	4302      	orrs	r2, r0
 8009bc4:	d09e      	beq.n	8009b04 <_strtod_l+0xc4>
 8009bc6:	2500      	movs	r5, #0
 8009bc8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009bcc:	f108 0201 	add.w	r2, r8, #1
 8009bd0:	9217      	str	r2, [sp, #92]	; 0x5c
 8009bd2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009bd6:	2a2b      	cmp	r2, #43	; 0x2b
 8009bd8:	d075      	beq.n	8009cc6 <_strtod_l+0x286>
 8009bda:	2a2d      	cmp	r2, #45	; 0x2d
 8009bdc:	d07b      	beq.n	8009cd6 <_strtod_l+0x296>
 8009bde:	f04f 0c00 	mov.w	ip, #0
 8009be2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009be6:	2909      	cmp	r1, #9
 8009be8:	f240 8082 	bls.w	8009cf0 <_strtod_l+0x2b0>
 8009bec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009bf0:	2600      	movs	r6, #0
 8009bf2:	e09d      	b.n	8009d30 <_strtod_l+0x2f0>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	e7c4      	b.n	8009b82 <_strtod_l+0x142>
 8009bf8:	2f08      	cmp	r7, #8
 8009bfa:	bfd8      	it	le
 8009bfc:	9907      	ldrle	r1, [sp, #28]
 8009bfe:	f100 0001 	add.w	r0, r0, #1
 8009c02:	bfda      	itte	le
 8009c04:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c08:	9307      	strle	r3, [sp, #28]
 8009c0a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009c0e:	3701      	adds	r7, #1
 8009c10:	9017      	str	r0, [sp, #92]	; 0x5c
 8009c12:	e7bf      	b.n	8009b94 <_strtod_l+0x154>
 8009c14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c16:	195a      	adds	r2, r3, r5
 8009c18:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c1a:	5d5a      	ldrb	r2, [r3, r5]
 8009c1c:	2f00      	cmp	r7, #0
 8009c1e:	d037      	beq.n	8009c90 <_strtod_l+0x250>
 8009c20:	9005      	str	r0, [sp, #20]
 8009c22:	463d      	mov	r5, r7
 8009c24:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009c28:	2b09      	cmp	r3, #9
 8009c2a:	d912      	bls.n	8009c52 <_strtod_l+0x212>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e7c2      	b.n	8009bb6 <_strtod_l+0x176>
 8009c30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c32:	1c5a      	adds	r2, r3, #1
 8009c34:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c36:	785a      	ldrb	r2, [r3, #1]
 8009c38:	3001      	adds	r0, #1
 8009c3a:	2a30      	cmp	r2, #48	; 0x30
 8009c3c:	d0f8      	beq.n	8009c30 <_strtod_l+0x1f0>
 8009c3e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009c42:	2b08      	cmp	r3, #8
 8009c44:	f200 84d9 	bhi.w	800a5fa <_strtod_l+0xbba>
 8009c48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c4a:	9005      	str	r0, [sp, #20]
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	9308      	str	r3, [sp, #32]
 8009c50:	4605      	mov	r5, r0
 8009c52:	3a30      	subs	r2, #48	; 0x30
 8009c54:	f100 0301 	add.w	r3, r0, #1
 8009c58:	d014      	beq.n	8009c84 <_strtod_l+0x244>
 8009c5a:	9905      	ldr	r1, [sp, #20]
 8009c5c:	4419      	add	r1, r3
 8009c5e:	9105      	str	r1, [sp, #20]
 8009c60:	462b      	mov	r3, r5
 8009c62:	eb00 0e05 	add.w	lr, r0, r5
 8009c66:	210a      	movs	r1, #10
 8009c68:	4573      	cmp	r3, lr
 8009c6a:	d113      	bne.n	8009c94 <_strtod_l+0x254>
 8009c6c:	182b      	adds	r3, r5, r0
 8009c6e:	2b08      	cmp	r3, #8
 8009c70:	f105 0501 	add.w	r5, r5, #1
 8009c74:	4405      	add	r5, r0
 8009c76:	dc1c      	bgt.n	8009cb2 <_strtod_l+0x272>
 8009c78:	9907      	ldr	r1, [sp, #28]
 8009c7a:	230a      	movs	r3, #10
 8009c7c:	fb03 2301 	mla	r3, r3, r1, r2
 8009c80:	9307      	str	r3, [sp, #28]
 8009c82:	2300      	movs	r3, #0
 8009c84:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009c86:	1c51      	adds	r1, r2, #1
 8009c88:	9117      	str	r1, [sp, #92]	; 0x5c
 8009c8a:	7852      	ldrb	r2, [r2, #1]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	e7c9      	b.n	8009c24 <_strtod_l+0x1e4>
 8009c90:	4638      	mov	r0, r7
 8009c92:	e7d2      	b.n	8009c3a <_strtod_l+0x1fa>
 8009c94:	2b08      	cmp	r3, #8
 8009c96:	dc04      	bgt.n	8009ca2 <_strtod_l+0x262>
 8009c98:	9e07      	ldr	r6, [sp, #28]
 8009c9a:	434e      	muls	r6, r1
 8009c9c:	9607      	str	r6, [sp, #28]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	e7e2      	b.n	8009c68 <_strtod_l+0x228>
 8009ca2:	f103 0c01 	add.w	ip, r3, #1
 8009ca6:	f1bc 0f10 	cmp.w	ip, #16
 8009caa:	bfd8      	it	le
 8009cac:	fb01 f909 	mulle.w	r9, r1, r9
 8009cb0:	e7f5      	b.n	8009c9e <_strtod_l+0x25e>
 8009cb2:	2d10      	cmp	r5, #16
 8009cb4:	bfdc      	itt	le
 8009cb6:	230a      	movle	r3, #10
 8009cb8:	fb03 2909 	mlale	r9, r3, r9, r2
 8009cbc:	e7e1      	b.n	8009c82 <_strtod_l+0x242>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	9305      	str	r3, [sp, #20]
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e77c      	b.n	8009bc0 <_strtod_l+0x180>
 8009cc6:	f04f 0c00 	mov.w	ip, #0
 8009cca:	f108 0202 	add.w	r2, r8, #2
 8009cce:	9217      	str	r2, [sp, #92]	; 0x5c
 8009cd0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009cd4:	e785      	b.n	8009be2 <_strtod_l+0x1a2>
 8009cd6:	f04f 0c01 	mov.w	ip, #1
 8009cda:	e7f6      	b.n	8009cca <_strtod_l+0x28a>
 8009cdc:	0800eea8 	.word	0x0800eea8
 8009ce0:	0800ec60 	.word	0x0800ec60
 8009ce4:	7ff00000 	.word	0x7ff00000
 8009ce8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009cea:	1c51      	adds	r1, r2, #1
 8009cec:	9117      	str	r1, [sp, #92]	; 0x5c
 8009cee:	7852      	ldrb	r2, [r2, #1]
 8009cf0:	2a30      	cmp	r2, #48	; 0x30
 8009cf2:	d0f9      	beq.n	8009ce8 <_strtod_l+0x2a8>
 8009cf4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009cf8:	2908      	cmp	r1, #8
 8009cfa:	f63f af79 	bhi.w	8009bf0 <_strtod_l+0x1b0>
 8009cfe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009d02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d04:	9206      	str	r2, [sp, #24]
 8009d06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d08:	1c51      	adds	r1, r2, #1
 8009d0a:	9117      	str	r1, [sp, #92]	; 0x5c
 8009d0c:	7852      	ldrb	r2, [r2, #1]
 8009d0e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009d12:	2e09      	cmp	r6, #9
 8009d14:	d937      	bls.n	8009d86 <_strtod_l+0x346>
 8009d16:	9e06      	ldr	r6, [sp, #24]
 8009d18:	1b89      	subs	r1, r1, r6
 8009d1a:	2908      	cmp	r1, #8
 8009d1c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009d20:	dc02      	bgt.n	8009d28 <_strtod_l+0x2e8>
 8009d22:	4576      	cmp	r6, lr
 8009d24:	bfa8      	it	ge
 8009d26:	4676      	movge	r6, lr
 8009d28:	f1bc 0f00 	cmp.w	ip, #0
 8009d2c:	d000      	beq.n	8009d30 <_strtod_l+0x2f0>
 8009d2e:	4276      	negs	r6, r6
 8009d30:	2d00      	cmp	r5, #0
 8009d32:	d14d      	bne.n	8009dd0 <_strtod_l+0x390>
 8009d34:	9904      	ldr	r1, [sp, #16]
 8009d36:	4301      	orrs	r1, r0
 8009d38:	f47f aec6 	bne.w	8009ac8 <_strtod_l+0x88>
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f47f aee1 	bne.w	8009b04 <_strtod_l+0xc4>
 8009d42:	2a69      	cmp	r2, #105	; 0x69
 8009d44:	d027      	beq.n	8009d96 <_strtod_l+0x356>
 8009d46:	dc24      	bgt.n	8009d92 <_strtod_l+0x352>
 8009d48:	2a49      	cmp	r2, #73	; 0x49
 8009d4a:	d024      	beq.n	8009d96 <_strtod_l+0x356>
 8009d4c:	2a4e      	cmp	r2, #78	; 0x4e
 8009d4e:	f47f aed9 	bne.w	8009b04 <_strtod_l+0xc4>
 8009d52:	499f      	ldr	r1, [pc, #636]	; (8009fd0 <_strtod_l+0x590>)
 8009d54:	a817      	add	r0, sp, #92	; 0x5c
 8009d56:	f001 fe3d 	bl	800b9d4 <__match>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	f43f aed2 	beq.w	8009b04 <_strtod_l+0xc4>
 8009d60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	2b28      	cmp	r3, #40	; 0x28
 8009d66:	d12d      	bne.n	8009dc4 <_strtod_l+0x384>
 8009d68:	499a      	ldr	r1, [pc, #616]	; (8009fd4 <_strtod_l+0x594>)
 8009d6a:	aa1a      	add	r2, sp, #104	; 0x68
 8009d6c:	a817      	add	r0, sp, #92	; 0x5c
 8009d6e:	f001 fe45 	bl	800b9fc <__hexnan>
 8009d72:	2805      	cmp	r0, #5
 8009d74:	d126      	bne.n	8009dc4 <_strtod_l+0x384>
 8009d76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d78:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009d7c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009d80:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009d84:	e6a0      	b.n	8009ac8 <_strtod_l+0x88>
 8009d86:	210a      	movs	r1, #10
 8009d88:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009d8c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009d90:	e7b9      	b.n	8009d06 <_strtod_l+0x2c6>
 8009d92:	2a6e      	cmp	r2, #110	; 0x6e
 8009d94:	e7db      	b.n	8009d4e <_strtod_l+0x30e>
 8009d96:	4990      	ldr	r1, [pc, #576]	; (8009fd8 <_strtod_l+0x598>)
 8009d98:	a817      	add	r0, sp, #92	; 0x5c
 8009d9a:	f001 fe1b 	bl	800b9d4 <__match>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	f43f aeb0 	beq.w	8009b04 <_strtod_l+0xc4>
 8009da4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009da6:	498d      	ldr	r1, [pc, #564]	; (8009fdc <_strtod_l+0x59c>)
 8009da8:	3b01      	subs	r3, #1
 8009daa:	a817      	add	r0, sp, #92	; 0x5c
 8009dac:	9317      	str	r3, [sp, #92]	; 0x5c
 8009dae:	f001 fe11 	bl	800b9d4 <__match>
 8009db2:	b910      	cbnz	r0, 8009dba <_strtod_l+0x37a>
 8009db4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009db6:	3301      	adds	r3, #1
 8009db8:	9317      	str	r3, [sp, #92]	; 0x5c
 8009dba:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009fec <_strtod_l+0x5ac>
 8009dbe:	f04f 0a00 	mov.w	sl, #0
 8009dc2:	e681      	b.n	8009ac8 <_strtod_l+0x88>
 8009dc4:	4886      	ldr	r0, [pc, #536]	; (8009fe0 <_strtod_l+0x5a0>)
 8009dc6:	f002 fde7 	bl	800c998 <nan>
 8009dca:	ec5b ab10 	vmov	sl, fp, d0
 8009dce:	e67b      	b.n	8009ac8 <_strtod_l+0x88>
 8009dd0:	9b05      	ldr	r3, [sp, #20]
 8009dd2:	9807      	ldr	r0, [sp, #28]
 8009dd4:	1af3      	subs	r3, r6, r3
 8009dd6:	2f00      	cmp	r7, #0
 8009dd8:	bf08      	it	eq
 8009dda:	462f      	moveq	r7, r5
 8009ddc:	2d10      	cmp	r5, #16
 8009dde:	9306      	str	r3, [sp, #24]
 8009de0:	46a8      	mov	r8, r5
 8009de2:	bfa8      	it	ge
 8009de4:	f04f 0810 	movge.w	r8, #16
 8009de8:	f7f6 fb94 	bl	8000514 <__aeabi_ui2d>
 8009dec:	2d09      	cmp	r5, #9
 8009dee:	4682      	mov	sl, r0
 8009df0:	468b      	mov	fp, r1
 8009df2:	dd13      	ble.n	8009e1c <_strtod_l+0x3dc>
 8009df4:	4b7b      	ldr	r3, [pc, #492]	; (8009fe4 <_strtod_l+0x5a4>)
 8009df6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009dfa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009dfe:	f7f6 fc03 	bl	8000608 <__aeabi_dmul>
 8009e02:	4682      	mov	sl, r0
 8009e04:	4648      	mov	r0, r9
 8009e06:	468b      	mov	fp, r1
 8009e08:	f7f6 fb84 	bl	8000514 <__aeabi_ui2d>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4650      	mov	r0, sl
 8009e12:	4659      	mov	r1, fp
 8009e14:	f7f6 fa42 	bl	800029c <__adddf3>
 8009e18:	4682      	mov	sl, r0
 8009e1a:	468b      	mov	fp, r1
 8009e1c:	2d0f      	cmp	r5, #15
 8009e1e:	dc38      	bgt.n	8009e92 <_strtod_l+0x452>
 8009e20:	9b06      	ldr	r3, [sp, #24]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f43f ae50 	beq.w	8009ac8 <_strtod_l+0x88>
 8009e28:	dd24      	ble.n	8009e74 <_strtod_l+0x434>
 8009e2a:	2b16      	cmp	r3, #22
 8009e2c:	dc0b      	bgt.n	8009e46 <_strtod_l+0x406>
 8009e2e:	496d      	ldr	r1, [pc, #436]	; (8009fe4 <_strtod_l+0x5a4>)
 8009e30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e38:	4652      	mov	r2, sl
 8009e3a:	465b      	mov	r3, fp
 8009e3c:	f7f6 fbe4 	bl	8000608 <__aeabi_dmul>
 8009e40:	4682      	mov	sl, r0
 8009e42:	468b      	mov	fp, r1
 8009e44:	e640      	b.n	8009ac8 <_strtod_l+0x88>
 8009e46:	9a06      	ldr	r2, [sp, #24]
 8009e48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	db20      	blt.n	8009e92 <_strtod_l+0x452>
 8009e50:	4c64      	ldr	r4, [pc, #400]	; (8009fe4 <_strtod_l+0x5a4>)
 8009e52:	f1c5 050f 	rsb	r5, r5, #15
 8009e56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009e5a:	4652      	mov	r2, sl
 8009e5c:	465b      	mov	r3, fp
 8009e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e62:	f7f6 fbd1 	bl	8000608 <__aeabi_dmul>
 8009e66:	9b06      	ldr	r3, [sp, #24]
 8009e68:	1b5d      	subs	r5, r3, r5
 8009e6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009e6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009e72:	e7e3      	b.n	8009e3c <_strtod_l+0x3fc>
 8009e74:	9b06      	ldr	r3, [sp, #24]
 8009e76:	3316      	adds	r3, #22
 8009e78:	db0b      	blt.n	8009e92 <_strtod_l+0x452>
 8009e7a:	9b05      	ldr	r3, [sp, #20]
 8009e7c:	1b9e      	subs	r6, r3, r6
 8009e7e:	4b59      	ldr	r3, [pc, #356]	; (8009fe4 <_strtod_l+0x5a4>)
 8009e80:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009e84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e88:	4650      	mov	r0, sl
 8009e8a:	4659      	mov	r1, fp
 8009e8c:	f7f6 fce6 	bl	800085c <__aeabi_ddiv>
 8009e90:	e7d6      	b.n	8009e40 <_strtod_l+0x400>
 8009e92:	9b06      	ldr	r3, [sp, #24]
 8009e94:	eba5 0808 	sub.w	r8, r5, r8
 8009e98:	4498      	add	r8, r3
 8009e9a:	f1b8 0f00 	cmp.w	r8, #0
 8009e9e:	dd74      	ble.n	8009f8a <_strtod_l+0x54a>
 8009ea0:	f018 030f 	ands.w	r3, r8, #15
 8009ea4:	d00a      	beq.n	8009ebc <_strtod_l+0x47c>
 8009ea6:	494f      	ldr	r1, [pc, #316]	; (8009fe4 <_strtod_l+0x5a4>)
 8009ea8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009eac:	4652      	mov	r2, sl
 8009eae:	465b      	mov	r3, fp
 8009eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eb4:	f7f6 fba8 	bl	8000608 <__aeabi_dmul>
 8009eb8:	4682      	mov	sl, r0
 8009eba:	468b      	mov	fp, r1
 8009ebc:	f038 080f 	bics.w	r8, r8, #15
 8009ec0:	d04f      	beq.n	8009f62 <_strtod_l+0x522>
 8009ec2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009ec6:	dd22      	ble.n	8009f0e <_strtod_l+0x4ce>
 8009ec8:	2500      	movs	r5, #0
 8009eca:	462e      	mov	r6, r5
 8009ecc:	9507      	str	r5, [sp, #28]
 8009ece:	9505      	str	r5, [sp, #20]
 8009ed0:	2322      	movs	r3, #34	; 0x22
 8009ed2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009fec <_strtod_l+0x5ac>
 8009ed6:	6023      	str	r3, [r4, #0]
 8009ed8:	f04f 0a00 	mov.w	sl, #0
 8009edc:	9b07      	ldr	r3, [sp, #28]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f43f adf2 	beq.w	8009ac8 <_strtod_l+0x88>
 8009ee4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f001 fe82 	bl	800bbf0 <_Bfree>
 8009eec:	9905      	ldr	r1, [sp, #20]
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f001 fe7e 	bl	800bbf0 <_Bfree>
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f001 fe7a 	bl	800bbf0 <_Bfree>
 8009efc:	9907      	ldr	r1, [sp, #28]
 8009efe:	4620      	mov	r0, r4
 8009f00:	f001 fe76 	bl	800bbf0 <_Bfree>
 8009f04:	4629      	mov	r1, r5
 8009f06:	4620      	mov	r0, r4
 8009f08:	f001 fe72 	bl	800bbf0 <_Bfree>
 8009f0c:	e5dc      	b.n	8009ac8 <_strtod_l+0x88>
 8009f0e:	4b36      	ldr	r3, [pc, #216]	; (8009fe8 <_strtod_l+0x5a8>)
 8009f10:	9304      	str	r3, [sp, #16]
 8009f12:	2300      	movs	r3, #0
 8009f14:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009f18:	4650      	mov	r0, sl
 8009f1a:	4659      	mov	r1, fp
 8009f1c:	4699      	mov	r9, r3
 8009f1e:	f1b8 0f01 	cmp.w	r8, #1
 8009f22:	dc21      	bgt.n	8009f68 <_strtod_l+0x528>
 8009f24:	b10b      	cbz	r3, 8009f2a <_strtod_l+0x4ea>
 8009f26:	4682      	mov	sl, r0
 8009f28:	468b      	mov	fp, r1
 8009f2a:	4b2f      	ldr	r3, [pc, #188]	; (8009fe8 <_strtod_l+0x5a8>)
 8009f2c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009f30:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009f34:	4652      	mov	r2, sl
 8009f36:	465b      	mov	r3, fp
 8009f38:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009f3c:	f7f6 fb64 	bl	8000608 <__aeabi_dmul>
 8009f40:	4b2a      	ldr	r3, [pc, #168]	; (8009fec <_strtod_l+0x5ac>)
 8009f42:	460a      	mov	r2, r1
 8009f44:	400b      	ands	r3, r1
 8009f46:	492a      	ldr	r1, [pc, #168]	; (8009ff0 <_strtod_l+0x5b0>)
 8009f48:	428b      	cmp	r3, r1
 8009f4a:	4682      	mov	sl, r0
 8009f4c:	d8bc      	bhi.n	8009ec8 <_strtod_l+0x488>
 8009f4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009f52:	428b      	cmp	r3, r1
 8009f54:	bf86      	itte	hi
 8009f56:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009ff4 <_strtod_l+0x5b4>
 8009f5a:	f04f 3aff 	movhi.w	sl, #4294967295
 8009f5e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009f62:	2300      	movs	r3, #0
 8009f64:	9304      	str	r3, [sp, #16]
 8009f66:	e084      	b.n	800a072 <_strtod_l+0x632>
 8009f68:	f018 0f01 	tst.w	r8, #1
 8009f6c:	d005      	beq.n	8009f7a <_strtod_l+0x53a>
 8009f6e:	9b04      	ldr	r3, [sp, #16]
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	f7f6 fb48 	bl	8000608 <__aeabi_dmul>
 8009f78:	2301      	movs	r3, #1
 8009f7a:	9a04      	ldr	r2, [sp, #16]
 8009f7c:	3208      	adds	r2, #8
 8009f7e:	f109 0901 	add.w	r9, r9, #1
 8009f82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009f86:	9204      	str	r2, [sp, #16]
 8009f88:	e7c9      	b.n	8009f1e <_strtod_l+0x4de>
 8009f8a:	d0ea      	beq.n	8009f62 <_strtod_l+0x522>
 8009f8c:	f1c8 0800 	rsb	r8, r8, #0
 8009f90:	f018 020f 	ands.w	r2, r8, #15
 8009f94:	d00a      	beq.n	8009fac <_strtod_l+0x56c>
 8009f96:	4b13      	ldr	r3, [pc, #76]	; (8009fe4 <_strtod_l+0x5a4>)
 8009f98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f9c:	4650      	mov	r0, sl
 8009f9e:	4659      	mov	r1, fp
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	f7f6 fc5a 	bl	800085c <__aeabi_ddiv>
 8009fa8:	4682      	mov	sl, r0
 8009faa:	468b      	mov	fp, r1
 8009fac:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009fb0:	d0d7      	beq.n	8009f62 <_strtod_l+0x522>
 8009fb2:	f1b8 0f1f 	cmp.w	r8, #31
 8009fb6:	dd1f      	ble.n	8009ff8 <_strtod_l+0x5b8>
 8009fb8:	2500      	movs	r5, #0
 8009fba:	462e      	mov	r6, r5
 8009fbc:	9507      	str	r5, [sp, #28]
 8009fbe:	9505      	str	r5, [sp, #20]
 8009fc0:	2322      	movs	r3, #34	; 0x22
 8009fc2:	f04f 0a00 	mov.w	sl, #0
 8009fc6:	f04f 0b00 	mov.w	fp, #0
 8009fca:	6023      	str	r3, [r4, #0]
 8009fcc:	e786      	b.n	8009edc <_strtod_l+0x49c>
 8009fce:	bf00      	nop
 8009fd0:	0800ec31 	.word	0x0800ec31
 8009fd4:	0800ec74 	.word	0x0800ec74
 8009fd8:	0800ec29 	.word	0x0800ec29
 8009fdc:	0800edb4 	.word	0x0800edb4
 8009fe0:	0800f060 	.word	0x0800f060
 8009fe4:	0800ef40 	.word	0x0800ef40
 8009fe8:	0800ef18 	.word	0x0800ef18
 8009fec:	7ff00000 	.word	0x7ff00000
 8009ff0:	7ca00000 	.word	0x7ca00000
 8009ff4:	7fefffff 	.word	0x7fefffff
 8009ff8:	f018 0310 	ands.w	r3, r8, #16
 8009ffc:	bf18      	it	ne
 8009ffe:	236a      	movne	r3, #106	; 0x6a
 800a000:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a3b0 <_strtod_l+0x970>
 800a004:	9304      	str	r3, [sp, #16]
 800a006:	4650      	mov	r0, sl
 800a008:	4659      	mov	r1, fp
 800a00a:	2300      	movs	r3, #0
 800a00c:	f018 0f01 	tst.w	r8, #1
 800a010:	d004      	beq.n	800a01c <_strtod_l+0x5dc>
 800a012:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a016:	f7f6 faf7 	bl	8000608 <__aeabi_dmul>
 800a01a:	2301      	movs	r3, #1
 800a01c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a020:	f109 0908 	add.w	r9, r9, #8
 800a024:	d1f2      	bne.n	800a00c <_strtod_l+0x5cc>
 800a026:	b10b      	cbz	r3, 800a02c <_strtod_l+0x5ec>
 800a028:	4682      	mov	sl, r0
 800a02a:	468b      	mov	fp, r1
 800a02c:	9b04      	ldr	r3, [sp, #16]
 800a02e:	b1c3      	cbz	r3, 800a062 <_strtod_l+0x622>
 800a030:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a034:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a038:	2b00      	cmp	r3, #0
 800a03a:	4659      	mov	r1, fp
 800a03c:	dd11      	ble.n	800a062 <_strtod_l+0x622>
 800a03e:	2b1f      	cmp	r3, #31
 800a040:	f340 8124 	ble.w	800a28c <_strtod_l+0x84c>
 800a044:	2b34      	cmp	r3, #52	; 0x34
 800a046:	bfde      	ittt	le
 800a048:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a04c:	f04f 33ff 	movle.w	r3, #4294967295
 800a050:	fa03 f202 	lslle.w	r2, r3, r2
 800a054:	f04f 0a00 	mov.w	sl, #0
 800a058:	bfcc      	ite	gt
 800a05a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a05e:	ea02 0b01 	andle.w	fp, r2, r1
 800a062:	2200      	movs	r2, #0
 800a064:	2300      	movs	r3, #0
 800a066:	4650      	mov	r0, sl
 800a068:	4659      	mov	r1, fp
 800a06a:	f7f6 fd35 	bl	8000ad8 <__aeabi_dcmpeq>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d1a2      	bne.n	8009fb8 <_strtod_l+0x578>
 800a072:	9b07      	ldr	r3, [sp, #28]
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	9908      	ldr	r1, [sp, #32]
 800a078:	462b      	mov	r3, r5
 800a07a:	463a      	mov	r2, r7
 800a07c:	4620      	mov	r0, r4
 800a07e:	f001 fe1f 	bl	800bcc0 <__s2b>
 800a082:	9007      	str	r0, [sp, #28]
 800a084:	2800      	cmp	r0, #0
 800a086:	f43f af1f 	beq.w	8009ec8 <_strtod_l+0x488>
 800a08a:	9b05      	ldr	r3, [sp, #20]
 800a08c:	1b9e      	subs	r6, r3, r6
 800a08e:	9b06      	ldr	r3, [sp, #24]
 800a090:	2b00      	cmp	r3, #0
 800a092:	bfb4      	ite	lt
 800a094:	4633      	movlt	r3, r6
 800a096:	2300      	movge	r3, #0
 800a098:	930c      	str	r3, [sp, #48]	; 0x30
 800a09a:	9b06      	ldr	r3, [sp, #24]
 800a09c:	2500      	movs	r5, #0
 800a09e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a0a2:	9312      	str	r3, [sp, #72]	; 0x48
 800a0a4:	462e      	mov	r6, r5
 800a0a6:	9b07      	ldr	r3, [sp, #28]
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	6859      	ldr	r1, [r3, #4]
 800a0ac:	f001 fd60 	bl	800bb70 <_Balloc>
 800a0b0:	9005      	str	r0, [sp, #20]
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	f43f af0c 	beq.w	8009ed0 <_strtod_l+0x490>
 800a0b8:	9b07      	ldr	r3, [sp, #28]
 800a0ba:	691a      	ldr	r2, [r3, #16]
 800a0bc:	3202      	adds	r2, #2
 800a0be:	f103 010c 	add.w	r1, r3, #12
 800a0c2:	0092      	lsls	r2, r2, #2
 800a0c4:	300c      	adds	r0, #12
 800a0c6:	f7fe fde7 	bl	8008c98 <memcpy>
 800a0ca:	ec4b ab10 	vmov	d0, sl, fp
 800a0ce:	aa1a      	add	r2, sp, #104	; 0x68
 800a0d0:	a919      	add	r1, sp, #100	; 0x64
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f002 f93a 	bl	800c34c <__d2b>
 800a0d8:	ec4b ab18 	vmov	d8, sl, fp
 800a0dc:	9018      	str	r0, [sp, #96]	; 0x60
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	f43f aef6 	beq.w	8009ed0 <_strtod_l+0x490>
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f001 fe84 	bl	800bdf4 <__i2b>
 800a0ec:	4606      	mov	r6, r0
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	f43f aeee 	beq.w	8009ed0 <_strtod_l+0x490>
 800a0f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0f6:	9904      	ldr	r1, [sp, #16]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	bfab      	itete	ge
 800a0fc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a0fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a100:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a102:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a106:	bfac      	ite	ge
 800a108:	eb03 0902 	addge.w	r9, r3, r2
 800a10c:	1ad7      	sublt	r7, r2, r3
 800a10e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a110:	eba3 0801 	sub.w	r8, r3, r1
 800a114:	4490      	add	r8, r2
 800a116:	4ba1      	ldr	r3, [pc, #644]	; (800a39c <_strtod_l+0x95c>)
 800a118:	f108 38ff 	add.w	r8, r8, #4294967295
 800a11c:	4598      	cmp	r8, r3
 800a11e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a122:	f280 80c7 	bge.w	800a2b4 <_strtod_l+0x874>
 800a126:	eba3 0308 	sub.w	r3, r3, r8
 800a12a:	2b1f      	cmp	r3, #31
 800a12c:	eba2 0203 	sub.w	r2, r2, r3
 800a130:	f04f 0101 	mov.w	r1, #1
 800a134:	f300 80b1 	bgt.w	800a29a <_strtod_l+0x85a>
 800a138:	fa01 f303 	lsl.w	r3, r1, r3
 800a13c:	930d      	str	r3, [sp, #52]	; 0x34
 800a13e:	2300      	movs	r3, #0
 800a140:	9308      	str	r3, [sp, #32]
 800a142:	eb09 0802 	add.w	r8, r9, r2
 800a146:	9b04      	ldr	r3, [sp, #16]
 800a148:	45c1      	cmp	r9, r8
 800a14a:	4417      	add	r7, r2
 800a14c:	441f      	add	r7, r3
 800a14e:	464b      	mov	r3, r9
 800a150:	bfa8      	it	ge
 800a152:	4643      	movge	r3, r8
 800a154:	42bb      	cmp	r3, r7
 800a156:	bfa8      	it	ge
 800a158:	463b      	movge	r3, r7
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	bfc2      	ittt	gt
 800a15e:	eba8 0803 	subgt.w	r8, r8, r3
 800a162:	1aff      	subgt	r7, r7, r3
 800a164:	eba9 0903 	subgt.w	r9, r9, r3
 800a168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	dd17      	ble.n	800a19e <_strtod_l+0x75e>
 800a16e:	4631      	mov	r1, r6
 800a170:	461a      	mov	r2, r3
 800a172:	4620      	mov	r0, r4
 800a174:	f001 fefe 	bl	800bf74 <__pow5mult>
 800a178:	4606      	mov	r6, r0
 800a17a:	2800      	cmp	r0, #0
 800a17c:	f43f aea8 	beq.w	8009ed0 <_strtod_l+0x490>
 800a180:	4601      	mov	r1, r0
 800a182:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a184:	4620      	mov	r0, r4
 800a186:	f001 fe4b 	bl	800be20 <__multiply>
 800a18a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a18c:	2800      	cmp	r0, #0
 800a18e:	f43f ae9f 	beq.w	8009ed0 <_strtod_l+0x490>
 800a192:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a194:	4620      	mov	r0, r4
 800a196:	f001 fd2b 	bl	800bbf0 <_Bfree>
 800a19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a19c:	9318      	str	r3, [sp, #96]	; 0x60
 800a19e:	f1b8 0f00 	cmp.w	r8, #0
 800a1a2:	f300 808c 	bgt.w	800a2be <_strtod_l+0x87e>
 800a1a6:	9b06      	ldr	r3, [sp, #24]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	dd08      	ble.n	800a1be <_strtod_l+0x77e>
 800a1ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1ae:	9905      	ldr	r1, [sp, #20]
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f001 fedf 	bl	800bf74 <__pow5mult>
 800a1b6:	9005      	str	r0, [sp, #20]
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	f43f ae89 	beq.w	8009ed0 <_strtod_l+0x490>
 800a1be:	2f00      	cmp	r7, #0
 800a1c0:	dd08      	ble.n	800a1d4 <_strtod_l+0x794>
 800a1c2:	9905      	ldr	r1, [sp, #20]
 800a1c4:	463a      	mov	r2, r7
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f001 ff2e 	bl	800c028 <__lshift>
 800a1cc:	9005      	str	r0, [sp, #20]
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	f43f ae7e 	beq.w	8009ed0 <_strtod_l+0x490>
 800a1d4:	f1b9 0f00 	cmp.w	r9, #0
 800a1d8:	dd08      	ble.n	800a1ec <_strtod_l+0x7ac>
 800a1da:	4631      	mov	r1, r6
 800a1dc:	464a      	mov	r2, r9
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f001 ff22 	bl	800c028 <__lshift>
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	f43f ae72 	beq.w	8009ed0 <_strtod_l+0x490>
 800a1ec:	9a05      	ldr	r2, [sp, #20]
 800a1ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f001 ffa5 	bl	800c140 <__mdiff>
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	f43f ae69 	beq.w	8009ed0 <_strtod_l+0x490>
 800a1fe:	68c3      	ldr	r3, [r0, #12]
 800a200:	930b      	str	r3, [sp, #44]	; 0x2c
 800a202:	2300      	movs	r3, #0
 800a204:	60c3      	str	r3, [r0, #12]
 800a206:	4631      	mov	r1, r6
 800a208:	f001 ff7e 	bl	800c108 <__mcmp>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	da60      	bge.n	800a2d2 <_strtod_l+0x892>
 800a210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a212:	ea53 030a 	orrs.w	r3, r3, sl
 800a216:	f040 8082 	bne.w	800a31e <_strtod_l+0x8de>
 800a21a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d17d      	bne.n	800a31e <_strtod_l+0x8de>
 800a222:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a226:	0d1b      	lsrs	r3, r3, #20
 800a228:	051b      	lsls	r3, r3, #20
 800a22a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a22e:	d976      	bls.n	800a31e <_strtod_l+0x8de>
 800a230:	696b      	ldr	r3, [r5, #20]
 800a232:	b913      	cbnz	r3, 800a23a <_strtod_l+0x7fa>
 800a234:	692b      	ldr	r3, [r5, #16]
 800a236:	2b01      	cmp	r3, #1
 800a238:	dd71      	ble.n	800a31e <_strtod_l+0x8de>
 800a23a:	4629      	mov	r1, r5
 800a23c:	2201      	movs	r2, #1
 800a23e:	4620      	mov	r0, r4
 800a240:	f001 fef2 	bl	800c028 <__lshift>
 800a244:	4631      	mov	r1, r6
 800a246:	4605      	mov	r5, r0
 800a248:	f001 ff5e 	bl	800c108 <__mcmp>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	dd66      	ble.n	800a31e <_strtod_l+0x8de>
 800a250:	9904      	ldr	r1, [sp, #16]
 800a252:	4a53      	ldr	r2, [pc, #332]	; (800a3a0 <_strtod_l+0x960>)
 800a254:	465b      	mov	r3, fp
 800a256:	2900      	cmp	r1, #0
 800a258:	f000 8081 	beq.w	800a35e <_strtod_l+0x91e>
 800a25c:	ea02 010b 	and.w	r1, r2, fp
 800a260:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a264:	dc7b      	bgt.n	800a35e <_strtod_l+0x91e>
 800a266:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a26a:	f77f aea9 	ble.w	8009fc0 <_strtod_l+0x580>
 800a26e:	4b4d      	ldr	r3, [pc, #308]	; (800a3a4 <_strtod_l+0x964>)
 800a270:	4650      	mov	r0, sl
 800a272:	4659      	mov	r1, fp
 800a274:	2200      	movs	r2, #0
 800a276:	f7f6 f9c7 	bl	8000608 <__aeabi_dmul>
 800a27a:	460b      	mov	r3, r1
 800a27c:	4303      	orrs	r3, r0
 800a27e:	bf08      	it	eq
 800a280:	2322      	moveq	r3, #34	; 0x22
 800a282:	4682      	mov	sl, r0
 800a284:	468b      	mov	fp, r1
 800a286:	bf08      	it	eq
 800a288:	6023      	streq	r3, [r4, #0]
 800a28a:	e62b      	b.n	8009ee4 <_strtod_l+0x4a4>
 800a28c:	f04f 32ff 	mov.w	r2, #4294967295
 800a290:	fa02 f303 	lsl.w	r3, r2, r3
 800a294:	ea03 0a0a 	and.w	sl, r3, sl
 800a298:	e6e3      	b.n	800a062 <_strtod_l+0x622>
 800a29a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a29e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a2a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a2a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a2aa:	fa01 f308 	lsl.w	r3, r1, r8
 800a2ae:	9308      	str	r3, [sp, #32]
 800a2b0:	910d      	str	r1, [sp, #52]	; 0x34
 800a2b2:	e746      	b.n	800a142 <_strtod_l+0x702>
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	9308      	str	r3, [sp, #32]
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	930d      	str	r3, [sp, #52]	; 0x34
 800a2bc:	e741      	b.n	800a142 <_strtod_l+0x702>
 800a2be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a2c0:	4642      	mov	r2, r8
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f001 feb0 	bl	800c028 <__lshift>
 800a2c8:	9018      	str	r0, [sp, #96]	; 0x60
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	f47f af6b 	bne.w	800a1a6 <_strtod_l+0x766>
 800a2d0:	e5fe      	b.n	8009ed0 <_strtod_l+0x490>
 800a2d2:	465f      	mov	r7, fp
 800a2d4:	d16e      	bne.n	800a3b4 <_strtod_l+0x974>
 800a2d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2dc:	b342      	cbz	r2, 800a330 <_strtod_l+0x8f0>
 800a2de:	4a32      	ldr	r2, [pc, #200]	; (800a3a8 <_strtod_l+0x968>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d128      	bne.n	800a336 <_strtod_l+0x8f6>
 800a2e4:	9b04      	ldr	r3, [sp, #16]
 800a2e6:	4651      	mov	r1, sl
 800a2e8:	b1eb      	cbz	r3, 800a326 <_strtod_l+0x8e6>
 800a2ea:	4b2d      	ldr	r3, [pc, #180]	; (800a3a0 <_strtod_l+0x960>)
 800a2ec:	403b      	ands	r3, r7
 800a2ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a2f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f6:	d819      	bhi.n	800a32c <_strtod_l+0x8ec>
 800a2f8:	0d1b      	lsrs	r3, r3, #20
 800a2fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a302:	4299      	cmp	r1, r3
 800a304:	d117      	bne.n	800a336 <_strtod_l+0x8f6>
 800a306:	4b29      	ldr	r3, [pc, #164]	; (800a3ac <_strtod_l+0x96c>)
 800a308:	429f      	cmp	r7, r3
 800a30a:	d102      	bne.n	800a312 <_strtod_l+0x8d2>
 800a30c:	3101      	adds	r1, #1
 800a30e:	f43f addf 	beq.w	8009ed0 <_strtod_l+0x490>
 800a312:	4b23      	ldr	r3, [pc, #140]	; (800a3a0 <_strtod_l+0x960>)
 800a314:	403b      	ands	r3, r7
 800a316:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a31a:	f04f 0a00 	mov.w	sl, #0
 800a31e:	9b04      	ldr	r3, [sp, #16]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1a4      	bne.n	800a26e <_strtod_l+0x82e>
 800a324:	e5de      	b.n	8009ee4 <_strtod_l+0x4a4>
 800a326:	f04f 33ff 	mov.w	r3, #4294967295
 800a32a:	e7ea      	b.n	800a302 <_strtod_l+0x8c2>
 800a32c:	4613      	mov	r3, r2
 800a32e:	e7e8      	b.n	800a302 <_strtod_l+0x8c2>
 800a330:	ea53 030a 	orrs.w	r3, r3, sl
 800a334:	d08c      	beq.n	800a250 <_strtod_l+0x810>
 800a336:	9b08      	ldr	r3, [sp, #32]
 800a338:	b1db      	cbz	r3, 800a372 <_strtod_l+0x932>
 800a33a:	423b      	tst	r3, r7
 800a33c:	d0ef      	beq.n	800a31e <_strtod_l+0x8de>
 800a33e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a340:	9a04      	ldr	r2, [sp, #16]
 800a342:	4650      	mov	r0, sl
 800a344:	4659      	mov	r1, fp
 800a346:	b1c3      	cbz	r3, 800a37a <_strtod_l+0x93a>
 800a348:	f7ff fb5c 	bl	8009a04 <sulp>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	ec51 0b18 	vmov	r0, r1, d8
 800a354:	f7f5 ffa2 	bl	800029c <__adddf3>
 800a358:	4682      	mov	sl, r0
 800a35a:	468b      	mov	fp, r1
 800a35c:	e7df      	b.n	800a31e <_strtod_l+0x8de>
 800a35e:	4013      	ands	r3, r2
 800a360:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a364:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a368:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a36c:	f04f 3aff 	mov.w	sl, #4294967295
 800a370:	e7d5      	b.n	800a31e <_strtod_l+0x8de>
 800a372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a374:	ea13 0f0a 	tst.w	r3, sl
 800a378:	e7e0      	b.n	800a33c <_strtod_l+0x8fc>
 800a37a:	f7ff fb43 	bl	8009a04 <sulp>
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	ec51 0b18 	vmov	r0, r1, d8
 800a386:	f7f5 ff87 	bl	8000298 <__aeabi_dsub>
 800a38a:	2200      	movs	r2, #0
 800a38c:	2300      	movs	r3, #0
 800a38e:	4682      	mov	sl, r0
 800a390:	468b      	mov	fp, r1
 800a392:	f7f6 fba1 	bl	8000ad8 <__aeabi_dcmpeq>
 800a396:	2800      	cmp	r0, #0
 800a398:	d0c1      	beq.n	800a31e <_strtod_l+0x8de>
 800a39a:	e611      	b.n	8009fc0 <_strtod_l+0x580>
 800a39c:	fffffc02 	.word	0xfffffc02
 800a3a0:	7ff00000 	.word	0x7ff00000
 800a3a4:	39500000 	.word	0x39500000
 800a3a8:	000fffff 	.word	0x000fffff
 800a3ac:	7fefffff 	.word	0x7fefffff
 800a3b0:	0800ec88 	.word	0x0800ec88
 800a3b4:	4631      	mov	r1, r6
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	f002 f824 	bl	800c404 <__ratio>
 800a3bc:	ec59 8b10 	vmov	r8, r9, d0
 800a3c0:	ee10 0a10 	vmov	r0, s0
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3ca:	4649      	mov	r1, r9
 800a3cc:	f7f6 fb98 	bl	8000b00 <__aeabi_dcmple>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d07a      	beq.n	800a4ca <_strtod_l+0xa8a>
 800a3d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d04a      	beq.n	800a470 <_strtod_l+0xa30>
 800a3da:	4b95      	ldr	r3, [pc, #596]	; (800a630 <_strtod_l+0xbf0>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a3e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a630 <_strtod_l+0xbf0>
 800a3e6:	f04f 0800 	mov.w	r8, #0
 800a3ea:	4b92      	ldr	r3, [pc, #584]	; (800a634 <_strtod_l+0xbf4>)
 800a3ec:	403b      	ands	r3, r7
 800a3ee:	930d      	str	r3, [sp, #52]	; 0x34
 800a3f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3f2:	4b91      	ldr	r3, [pc, #580]	; (800a638 <_strtod_l+0xbf8>)
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	f040 80b0 	bne.w	800a55a <_strtod_l+0xb1a>
 800a3fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a3fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a402:	ec4b ab10 	vmov	d0, sl, fp
 800a406:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a40a:	f001 ff23 	bl	800c254 <__ulp>
 800a40e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a412:	ec53 2b10 	vmov	r2, r3, d0
 800a416:	f7f6 f8f7 	bl	8000608 <__aeabi_dmul>
 800a41a:	4652      	mov	r2, sl
 800a41c:	465b      	mov	r3, fp
 800a41e:	f7f5 ff3d 	bl	800029c <__adddf3>
 800a422:	460b      	mov	r3, r1
 800a424:	4983      	ldr	r1, [pc, #524]	; (800a634 <_strtod_l+0xbf4>)
 800a426:	4a85      	ldr	r2, [pc, #532]	; (800a63c <_strtod_l+0xbfc>)
 800a428:	4019      	ands	r1, r3
 800a42a:	4291      	cmp	r1, r2
 800a42c:	4682      	mov	sl, r0
 800a42e:	d960      	bls.n	800a4f2 <_strtod_l+0xab2>
 800a430:	ee18 3a90 	vmov	r3, s17
 800a434:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a438:	4293      	cmp	r3, r2
 800a43a:	d104      	bne.n	800a446 <_strtod_l+0xa06>
 800a43c:	ee18 3a10 	vmov	r3, s16
 800a440:	3301      	adds	r3, #1
 800a442:	f43f ad45 	beq.w	8009ed0 <_strtod_l+0x490>
 800a446:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a648 <_strtod_l+0xc08>
 800a44a:	f04f 3aff 	mov.w	sl, #4294967295
 800a44e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a450:	4620      	mov	r0, r4
 800a452:	f001 fbcd 	bl	800bbf0 <_Bfree>
 800a456:	9905      	ldr	r1, [sp, #20]
 800a458:	4620      	mov	r0, r4
 800a45a:	f001 fbc9 	bl	800bbf0 <_Bfree>
 800a45e:	4631      	mov	r1, r6
 800a460:	4620      	mov	r0, r4
 800a462:	f001 fbc5 	bl	800bbf0 <_Bfree>
 800a466:	4629      	mov	r1, r5
 800a468:	4620      	mov	r0, r4
 800a46a:	f001 fbc1 	bl	800bbf0 <_Bfree>
 800a46e:	e61a      	b.n	800a0a6 <_strtod_l+0x666>
 800a470:	f1ba 0f00 	cmp.w	sl, #0
 800a474:	d11b      	bne.n	800a4ae <_strtod_l+0xa6e>
 800a476:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a47a:	b9f3      	cbnz	r3, 800a4ba <_strtod_l+0xa7a>
 800a47c:	4b6c      	ldr	r3, [pc, #432]	; (800a630 <_strtod_l+0xbf0>)
 800a47e:	2200      	movs	r2, #0
 800a480:	4640      	mov	r0, r8
 800a482:	4649      	mov	r1, r9
 800a484:	f7f6 fb32 	bl	8000aec <__aeabi_dcmplt>
 800a488:	b9d0      	cbnz	r0, 800a4c0 <_strtod_l+0xa80>
 800a48a:	4640      	mov	r0, r8
 800a48c:	4649      	mov	r1, r9
 800a48e:	4b6c      	ldr	r3, [pc, #432]	; (800a640 <_strtod_l+0xc00>)
 800a490:	2200      	movs	r2, #0
 800a492:	f7f6 f8b9 	bl	8000608 <__aeabi_dmul>
 800a496:	4680      	mov	r8, r0
 800a498:	4689      	mov	r9, r1
 800a49a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a49e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a4a2:	9315      	str	r3, [sp, #84]	; 0x54
 800a4a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a4a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a4ac:	e79d      	b.n	800a3ea <_strtod_l+0x9aa>
 800a4ae:	f1ba 0f01 	cmp.w	sl, #1
 800a4b2:	d102      	bne.n	800a4ba <_strtod_l+0xa7a>
 800a4b4:	2f00      	cmp	r7, #0
 800a4b6:	f43f ad83 	beq.w	8009fc0 <_strtod_l+0x580>
 800a4ba:	4b62      	ldr	r3, [pc, #392]	; (800a644 <_strtod_l+0xc04>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	e78e      	b.n	800a3de <_strtod_l+0x99e>
 800a4c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a640 <_strtod_l+0xc00>
 800a4c4:	f04f 0800 	mov.w	r8, #0
 800a4c8:	e7e7      	b.n	800a49a <_strtod_l+0xa5a>
 800a4ca:	4b5d      	ldr	r3, [pc, #372]	; (800a640 <_strtod_l+0xc00>)
 800a4cc:	4640      	mov	r0, r8
 800a4ce:	4649      	mov	r1, r9
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f7f6 f899 	bl	8000608 <__aeabi_dmul>
 800a4d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4d8:	4680      	mov	r8, r0
 800a4da:	4689      	mov	r9, r1
 800a4dc:	b933      	cbnz	r3, 800a4ec <_strtod_l+0xaac>
 800a4de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4e2:	900e      	str	r0, [sp, #56]	; 0x38
 800a4e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a4ea:	e7dd      	b.n	800a4a8 <_strtod_l+0xa68>
 800a4ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a4f0:	e7f9      	b.n	800a4e6 <_strtod_l+0xaa6>
 800a4f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a4f6:	9b04      	ldr	r3, [sp, #16]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1a8      	bne.n	800a44e <_strtod_l+0xa0e>
 800a4fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a500:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a502:	0d1b      	lsrs	r3, r3, #20
 800a504:	051b      	lsls	r3, r3, #20
 800a506:	429a      	cmp	r2, r3
 800a508:	d1a1      	bne.n	800a44e <_strtod_l+0xa0e>
 800a50a:	4640      	mov	r0, r8
 800a50c:	4649      	mov	r1, r9
 800a50e:	f7f6 fbdb 	bl	8000cc8 <__aeabi_d2lz>
 800a512:	f7f6 f84b 	bl	80005ac <__aeabi_l2d>
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	4640      	mov	r0, r8
 800a51c:	4649      	mov	r1, r9
 800a51e:	f7f5 febb 	bl	8000298 <__aeabi_dsub>
 800a522:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a524:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a528:	ea43 030a 	orr.w	r3, r3, sl
 800a52c:	4313      	orrs	r3, r2
 800a52e:	4680      	mov	r8, r0
 800a530:	4689      	mov	r9, r1
 800a532:	d055      	beq.n	800a5e0 <_strtod_l+0xba0>
 800a534:	a336      	add	r3, pc, #216	; (adr r3, 800a610 <_strtod_l+0xbd0>)
 800a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53a:	f7f6 fad7 	bl	8000aec <__aeabi_dcmplt>
 800a53e:	2800      	cmp	r0, #0
 800a540:	f47f acd0 	bne.w	8009ee4 <_strtod_l+0x4a4>
 800a544:	a334      	add	r3, pc, #208	; (adr r3, 800a618 <_strtod_l+0xbd8>)
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	4640      	mov	r0, r8
 800a54c:	4649      	mov	r1, r9
 800a54e:	f7f6 faeb 	bl	8000b28 <__aeabi_dcmpgt>
 800a552:	2800      	cmp	r0, #0
 800a554:	f43f af7b 	beq.w	800a44e <_strtod_l+0xa0e>
 800a558:	e4c4      	b.n	8009ee4 <_strtod_l+0x4a4>
 800a55a:	9b04      	ldr	r3, [sp, #16]
 800a55c:	b333      	cbz	r3, 800a5ac <_strtod_l+0xb6c>
 800a55e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a560:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a564:	d822      	bhi.n	800a5ac <_strtod_l+0xb6c>
 800a566:	a32e      	add	r3, pc, #184	; (adr r3, 800a620 <_strtod_l+0xbe0>)
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	4640      	mov	r0, r8
 800a56e:	4649      	mov	r1, r9
 800a570:	f7f6 fac6 	bl	8000b00 <__aeabi_dcmple>
 800a574:	b1a0      	cbz	r0, 800a5a0 <_strtod_l+0xb60>
 800a576:	4649      	mov	r1, r9
 800a578:	4640      	mov	r0, r8
 800a57a:	f7f6 fb1d 	bl	8000bb8 <__aeabi_d2uiz>
 800a57e:	2801      	cmp	r0, #1
 800a580:	bf38      	it	cc
 800a582:	2001      	movcc	r0, #1
 800a584:	f7f5 ffc6 	bl	8000514 <__aeabi_ui2d>
 800a588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a58a:	4680      	mov	r8, r0
 800a58c:	4689      	mov	r9, r1
 800a58e:	bb23      	cbnz	r3, 800a5da <_strtod_l+0xb9a>
 800a590:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a594:	9010      	str	r0, [sp, #64]	; 0x40
 800a596:	9311      	str	r3, [sp, #68]	; 0x44
 800a598:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a59c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a5a8:	1a9b      	subs	r3, r3, r2
 800a5aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a5b0:	eeb0 0a48 	vmov.f32	s0, s16
 800a5b4:	eef0 0a68 	vmov.f32	s1, s17
 800a5b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a5bc:	f001 fe4a 	bl	800c254 <__ulp>
 800a5c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a5c4:	ec53 2b10 	vmov	r2, r3, d0
 800a5c8:	f7f6 f81e 	bl	8000608 <__aeabi_dmul>
 800a5cc:	ec53 2b18 	vmov	r2, r3, d8
 800a5d0:	f7f5 fe64 	bl	800029c <__adddf3>
 800a5d4:	4682      	mov	sl, r0
 800a5d6:	468b      	mov	fp, r1
 800a5d8:	e78d      	b.n	800a4f6 <_strtod_l+0xab6>
 800a5da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a5de:	e7db      	b.n	800a598 <_strtod_l+0xb58>
 800a5e0:	a311      	add	r3, pc, #68	; (adr r3, 800a628 <_strtod_l+0xbe8>)
 800a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e6:	f7f6 fa81 	bl	8000aec <__aeabi_dcmplt>
 800a5ea:	e7b2      	b.n	800a552 <_strtod_l+0xb12>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a5f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a5f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5f4:	6013      	str	r3, [r2, #0]
 800a5f6:	f7ff ba6b 	b.w	8009ad0 <_strtod_l+0x90>
 800a5fa:	2a65      	cmp	r2, #101	; 0x65
 800a5fc:	f43f ab5f 	beq.w	8009cbe <_strtod_l+0x27e>
 800a600:	2a45      	cmp	r2, #69	; 0x45
 800a602:	f43f ab5c 	beq.w	8009cbe <_strtod_l+0x27e>
 800a606:	2301      	movs	r3, #1
 800a608:	f7ff bb94 	b.w	8009d34 <_strtod_l+0x2f4>
 800a60c:	f3af 8000 	nop.w
 800a610:	94a03595 	.word	0x94a03595
 800a614:	3fdfffff 	.word	0x3fdfffff
 800a618:	35afe535 	.word	0x35afe535
 800a61c:	3fe00000 	.word	0x3fe00000
 800a620:	ffc00000 	.word	0xffc00000
 800a624:	41dfffff 	.word	0x41dfffff
 800a628:	94a03595 	.word	0x94a03595
 800a62c:	3fcfffff 	.word	0x3fcfffff
 800a630:	3ff00000 	.word	0x3ff00000
 800a634:	7ff00000 	.word	0x7ff00000
 800a638:	7fe00000 	.word	0x7fe00000
 800a63c:	7c9fffff 	.word	0x7c9fffff
 800a640:	3fe00000 	.word	0x3fe00000
 800a644:	bff00000 	.word	0xbff00000
 800a648:	7fefffff 	.word	0x7fefffff

0800a64c <_strtod_r>:
 800a64c:	4b01      	ldr	r3, [pc, #4]	; (800a654 <_strtod_r+0x8>)
 800a64e:	f7ff b9f7 	b.w	8009a40 <_strtod_l>
 800a652:	bf00      	nop
 800a654:	2000028c 	.word	0x2000028c

0800a658 <_strtol_l.constprop.0>:
 800a658:	2b01      	cmp	r3, #1
 800a65a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a65e:	d001      	beq.n	800a664 <_strtol_l.constprop.0+0xc>
 800a660:	2b24      	cmp	r3, #36	; 0x24
 800a662:	d906      	bls.n	800a672 <_strtol_l.constprop.0+0x1a>
 800a664:	f7fe faee 	bl	8008c44 <__errno>
 800a668:	2316      	movs	r3, #22
 800a66a:	6003      	str	r3, [r0, #0]
 800a66c:	2000      	movs	r0, #0
 800a66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a672:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a758 <_strtol_l.constprop.0+0x100>
 800a676:	460d      	mov	r5, r1
 800a678:	462e      	mov	r6, r5
 800a67a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a67e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a682:	f017 0708 	ands.w	r7, r7, #8
 800a686:	d1f7      	bne.n	800a678 <_strtol_l.constprop.0+0x20>
 800a688:	2c2d      	cmp	r4, #45	; 0x2d
 800a68a:	d132      	bne.n	800a6f2 <_strtol_l.constprop.0+0x9a>
 800a68c:	782c      	ldrb	r4, [r5, #0]
 800a68e:	2701      	movs	r7, #1
 800a690:	1cb5      	adds	r5, r6, #2
 800a692:	2b00      	cmp	r3, #0
 800a694:	d05b      	beq.n	800a74e <_strtol_l.constprop.0+0xf6>
 800a696:	2b10      	cmp	r3, #16
 800a698:	d109      	bne.n	800a6ae <_strtol_l.constprop.0+0x56>
 800a69a:	2c30      	cmp	r4, #48	; 0x30
 800a69c:	d107      	bne.n	800a6ae <_strtol_l.constprop.0+0x56>
 800a69e:	782c      	ldrb	r4, [r5, #0]
 800a6a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a6a4:	2c58      	cmp	r4, #88	; 0x58
 800a6a6:	d14d      	bne.n	800a744 <_strtol_l.constprop.0+0xec>
 800a6a8:	786c      	ldrb	r4, [r5, #1]
 800a6aa:	2310      	movs	r3, #16
 800a6ac:	3502      	adds	r5, #2
 800a6ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a6b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a6b6:	f04f 0c00 	mov.w	ip, #0
 800a6ba:	fbb8 f9f3 	udiv	r9, r8, r3
 800a6be:	4666      	mov	r6, ip
 800a6c0:	fb03 8a19 	mls	sl, r3, r9, r8
 800a6c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a6c8:	f1be 0f09 	cmp.w	lr, #9
 800a6cc:	d816      	bhi.n	800a6fc <_strtol_l.constprop.0+0xa4>
 800a6ce:	4674      	mov	r4, lr
 800a6d0:	42a3      	cmp	r3, r4
 800a6d2:	dd24      	ble.n	800a71e <_strtol_l.constprop.0+0xc6>
 800a6d4:	f1bc 0f00 	cmp.w	ip, #0
 800a6d8:	db1e      	blt.n	800a718 <_strtol_l.constprop.0+0xc0>
 800a6da:	45b1      	cmp	r9, r6
 800a6dc:	d31c      	bcc.n	800a718 <_strtol_l.constprop.0+0xc0>
 800a6de:	d101      	bne.n	800a6e4 <_strtol_l.constprop.0+0x8c>
 800a6e0:	45a2      	cmp	sl, r4
 800a6e2:	db19      	blt.n	800a718 <_strtol_l.constprop.0+0xc0>
 800a6e4:	fb06 4603 	mla	r6, r6, r3, r4
 800a6e8:	f04f 0c01 	mov.w	ip, #1
 800a6ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6f0:	e7e8      	b.n	800a6c4 <_strtol_l.constprop.0+0x6c>
 800a6f2:	2c2b      	cmp	r4, #43	; 0x2b
 800a6f4:	bf04      	itt	eq
 800a6f6:	782c      	ldrbeq	r4, [r5, #0]
 800a6f8:	1cb5      	addeq	r5, r6, #2
 800a6fa:	e7ca      	b.n	800a692 <_strtol_l.constprop.0+0x3a>
 800a6fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a700:	f1be 0f19 	cmp.w	lr, #25
 800a704:	d801      	bhi.n	800a70a <_strtol_l.constprop.0+0xb2>
 800a706:	3c37      	subs	r4, #55	; 0x37
 800a708:	e7e2      	b.n	800a6d0 <_strtol_l.constprop.0+0x78>
 800a70a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a70e:	f1be 0f19 	cmp.w	lr, #25
 800a712:	d804      	bhi.n	800a71e <_strtol_l.constprop.0+0xc6>
 800a714:	3c57      	subs	r4, #87	; 0x57
 800a716:	e7db      	b.n	800a6d0 <_strtol_l.constprop.0+0x78>
 800a718:	f04f 3cff 	mov.w	ip, #4294967295
 800a71c:	e7e6      	b.n	800a6ec <_strtol_l.constprop.0+0x94>
 800a71e:	f1bc 0f00 	cmp.w	ip, #0
 800a722:	da05      	bge.n	800a730 <_strtol_l.constprop.0+0xd8>
 800a724:	2322      	movs	r3, #34	; 0x22
 800a726:	6003      	str	r3, [r0, #0]
 800a728:	4646      	mov	r6, r8
 800a72a:	b942      	cbnz	r2, 800a73e <_strtol_l.constprop.0+0xe6>
 800a72c:	4630      	mov	r0, r6
 800a72e:	e79e      	b.n	800a66e <_strtol_l.constprop.0+0x16>
 800a730:	b107      	cbz	r7, 800a734 <_strtol_l.constprop.0+0xdc>
 800a732:	4276      	negs	r6, r6
 800a734:	2a00      	cmp	r2, #0
 800a736:	d0f9      	beq.n	800a72c <_strtol_l.constprop.0+0xd4>
 800a738:	f1bc 0f00 	cmp.w	ip, #0
 800a73c:	d000      	beq.n	800a740 <_strtol_l.constprop.0+0xe8>
 800a73e:	1e69      	subs	r1, r5, #1
 800a740:	6011      	str	r1, [r2, #0]
 800a742:	e7f3      	b.n	800a72c <_strtol_l.constprop.0+0xd4>
 800a744:	2430      	movs	r4, #48	; 0x30
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1b1      	bne.n	800a6ae <_strtol_l.constprop.0+0x56>
 800a74a:	2308      	movs	r3, #8
 800a74c:	e7af      	b.n	800a6ae <_strtol_l.constprop.0+0x56>
 800a74e:	2c30      	cmp	r4, #48	; 0x30
 800a750:	d0a5      	beq.n	800a69e <_strtol_l.constprop.0+0x46>
 800a752:	230a      	movs	r3, #10
 800a754:	e7ab      	b.n	800a6ae <_strtol_l.constprop.0+0x56>
 800a756:	bf00      	nop
 800a758:	0800ecb1 	.word	0x0800ecb1

0800a75c <_strtol_r>:
 800a75c:	f7ff bf7c 	b.w	800a658 <_strtol_l.constprop.0>

0800a760 <quorem>:
 800a760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a764:	6903      	ldr	r3, [r0, #16]
 800a766:	690c      	ldr	r4, [r1, #16]
 800a768:	42a3      	cmp	r3, r4
 800a76a:	4607      	mov	r7, r0
 800a76c:	f2c0 8081 	blt.w	800a872 <quorem+0x112>
 800a770:	3c01      	subs	r4, #1
 800a772:	f101 0814 	add.w	r8, r1, #20
 800a776:	f100 0514 	add.w	r5, r0, #20
 800a77a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a77e:	9301      	str	r3, [sp, #4]
 800a780:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a784:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a788:	3301      	adds	r3, #1
 800a78a:	429a      	cmp	r2, r3
 800a78c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a790:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a794:	fbb2 f6f3 	udiv	r6, r2, r3
 800a798:	d331      	bcc.n	800a7fe <quorem+0x9e>
 800a79a:	f04f 0e00 	mov.w	lr, #0
 800a79e:	4640      	mov	r0, r8
 800a7a0:	46ac      	mov	ip, r5
 800a7a2:	46f2      	mov	sl, lr
 800a7a4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7a8:	b293      	uxth	r3, r2
 800a7aa:	fb06 e303 	mla	r3, r6, r3, lr
 800a7ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	ebaa 0303 	sub.w	r3, sl, r3
 800a7b8:	f8dc a000 	ldr.w	sl, [ip]
 800a7bc:	0c12      	lsrs	r2, r2, #16
 800a7be:	fa13 f38a 	uxtah	r3, r3, sl
 800a7c2:	fb06 e202 	mla	r2, r6, r2, lr
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	9b00      	ldr	r3, [sp, #0]
 800a7ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7ce:	b292      	uxth	r2, r2
 800a7d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a7d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7d8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a7dc:	4581      	cmp	r9, r0
 800a7de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7e2:	f84c 3b04 	str.w	r3, [ip], #4
 800a7e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a7ea:	d2db      	bcs.n	800a7a4 <quorem+0x44>
 800a7ec:	f855 300b 	ldr.w	r3, [r5, fp]
 800a7f0:	b92b      	cbnz	r3, 800a7fe <quorem+0x9e>
 800a7f2:	9b01      	ldr	r3, [sp, #4]
 800a7f4:	3b04      	subs	r3, #4
 800a7f6:	429d      	cmp	r5, r3
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	d32e      	bcc.n	800a85a <quorem+0xfa>
 800a7fc:	613c      	str	r4, [r7, #16]
 800a7fe:	4638      	mov	r0, r7
 800a800:	f001 fc82 	bl	800c108 <__mcmp>
 800a804:	2800      	cmp	r0, #0
 800a806:	db24      	blt.n	800a852 <quorem+0xf2>
 800a808:	3601      	adds	r6, #1
 800a80a:	4628      	mov	r0, r5
 800a80c:	f04f 0c00 	mov.w	ip, #0
 800a810:	f858 2b04 	ldr.w	r2, [r8], #4
 800a814:	f8d0 e000 	ldr.w	lr, [r0]
 800a818:	b293      	uxth	r3, r2
 800a81a:	ebac 0303 	sub.w	r3, ip, r3
 800a81e:	0c12      	lsrs	r2, r2, #16
 800a820:	fa13 f38e 	uxtah	r3, r3, lr
 800a824:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a828:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a832:	45c1      	cmp	r9, r8
 800a834:	f840 3b04 	str.w	r3, [r0], #4
 800a838:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a83c:	d2e8      	bcs.n	800a810 <quorem+0xb0>
 800a83e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a846:	b922      	cbnz	r2, 800a852 <quorem+0xf2>
 800a848:	3b04      	subs	r3, #4
 800a84a:	429d      	cmp	r5, r3
 800a84c:	461a      	mov	r2, r3
 800a84e:	d30a      	bcc.n	800a866 <quorem+0x106>
 800a850:	613c      	str	r4, [r7, #16]
 800a852:	4630      	mov	r0, r6
 800a854:	b003      	add	sp, #12
 800a856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a85a:	6812      	ldr	r2, [r2, #0]
 800a85c:	3b04      	subs	r3, #4
 800a85e:	2a00      	cmp	r2, #0
 800a860:	d1cc      	bne.n	800a7fc <quorem+0x9c>
 800a862:	3c01      	subs	r4, #1
 800a864:	e7c7      	b.n	800a7f6 <quorem+0x96>
 800a866:	6812      	ldr	r2, [r2, #0]
 800a868:	3b04      	subs	r3, #4
 800a86a:	2a00      	cmp	r2, #0
 800a86c:	d1f0      	bne.n	800a850 <quorem+0xf0>
 800a86e:	3c01      	subs	r4, #1
 800a870:	e7eb      	b.n	800a84a <quorem+0xea>
 800a872:	2000      	movs	r0, #0
 800a874:	e7ee      	b.n	800a854 <quorem+0xf4>
	...

0800a878 <_dtoa_r>:
 800a878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87c:	ed2d 8b04 	vpush	{d8-d9}
 800a880:	ec57 6b10 	vmov	r6, r7, d0
 800a884:	b093      	sub	sp, #76	; 0x4c
 800a886:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a888:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a88c:	9106      	str	r1, [sp, #24]
 800a88e:	ee10 aa10 	vmov	sl, s0
 800a892:	4604      	mov	r4, r0
 800a894:	9209      	str	r2, [sp, #36]	; 0x24
 800a896:	930c      	str	r3, [sp, #48]	; 0x30
 800a898:	46bb      	mov	fp, r7
 800a89a:	b975      	cbnz	r5, 800a8ba <_dtoa_r+0x42>
 800a89c:	2010      	movs	r0, #16
 800a89e:	f001 f94d 	bl	800bb3c <malloc>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	6260      	str	r0, [r4, #36]	; 0x24
 800a8a6:	b920      	cbnz	r0, 800a8b2 <_dtoa_r+0x3a>
 800a8a8:	4ba7      	ldr	r3, [pc, #668]	; (800ab48 <_dtoa_r+0x2d0>)
 800a8aa:	21ea      	movs	r1, #234	; 0xea
 800a8ac:	48a7      	ldr	r0, [pc, #668]	; (800ab4c <_dtoa_r+0x2d4>)
 800a8ae:	f002 f8ad 	bl	800ca0c <__assert_func>
 800a8b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8b6:	6005      	str	r5, [r0, #0]
 800a8b8:	60c5      	str	r5, [r0, #12]
 800a8ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8bc:	6819      	ldr	r1, [r3, #0]
 800a8be:	b151      	cbz	r1, 800a8d6 <_dtoa_r+0x5e>
 800a8c0:	685a      	ldr	r2, [r3, #4]
 800a8c2:	604a      	str	r2, [r1, #4]
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	4093      	lsls	r3, r2
 800a8c8:	608b      	str	r3, [r1, #8]
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f001 f990 	bl	800bbf0 <_Bfree>
 800a8d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	601a      	str	r2, [r3, #0]
 800a8d6:	1e3b      	subs	r3, r7, #0
 800a8d8:	bfaa      	itet	ge
 800a8da:	2300      	movge	r3, #0
 800a8dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a8e0:	f8c8 3000 	strge.w	r3, [r8]
 800a8e4:	4b9a      	ldr	r3, [pc, #616]	; (800ab50 <_dtoa_r+0x2d8>)
 800a8e6:	bfbc      	itt	lt
 800a8e8:	2201      	movlt	r2, #1
 800a8ea:	f8c8 2000 	strlt.w	r2, [r8]
 800a8ee:	ea33 030b 	bics.w	r3, r3, fp
 800a8f2:	d11b      	bne.n	800a92c <_dtoa_r+0xb4>
 800a8f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8fa:	6013      	str	r3, [r2, #0]
 800a8fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a900:	4333      	orrs	r3, r6
 800a902:	f000 8592 	beq.w	800b42a <_dtoa_r+0xbb2>
 800a906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a908:	b963      	cbnz	r3, 800a924 <_dtoa_r+0xac>
 800a90a:	4b92      	ldr	r3, [pc, #584]	; (800ab54 <_dtoa_r+0x2dc>)
 800a90c:	e022      	b.n	800a954 <_dtoa_r+0xdc>
 800a90e:	4b92      	ldr	r3, [pc, #584]	; (800ab58 <_dtoa_r+0x2e0>)
 800a910:	9301      	str	r3, [sp, #4]
 800a912:	3308      	adds	r3, #8
 800a914:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a916:	6013      	str	r3, [r2, #0]
 800a918:	9801      	ldr	r0, [sp, #4]
 800a91a:	b013      	add	sp, #76	; 0x4c
 800a91c:	ecbd 8b04 	vpop	{d8-d9}
 800a920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a924:	4b8b      	ldr	r3, [pc, #556]	; (800ab54 <_dtoa_r+0x2dc>)
 800a926:	9301      	str	r3, [sp, #4]
 800a928:	3303      	adds	r3, #3
 800a92a:	e7f3      	b.n	800a914 <_dtoa_r+0x9c>
 800a92c:	2200      	movs	r2, #0
 800a92e:	2300      	movs	r3, #0
 800a930:	4650      	mov	r0, sl
 800a932:	4659      	mov	r1, fp
 800a934:	f7f6 f8d0 	bl	8000ad8 <__aeabi_dcmpeq>
 800a938:	ec4b ab19 	vmov	d9, sl, fp
 800a93c:	4680      	mov	r8, r0
 800a93e:	b158      	cbz	r0, 800a958 <_dtoa_r+0xe0>
 800a940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a942:	2301      	movs	r3, #1
 800a944:	6013      	str	r3, [r2, #0]
 800a946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f000 856b 	beq.w	800b424 <_dtoa_r+0xbac>
 800a94e:	4883      	ldr	r0, [pc, #524]	; (800ab5c <_dtoa_r+0x2e4>)
 800a950:	6018      	str	r0, [r3, #0]
 800a952:	1e43      	subs	r3, r0, #1
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	e7df      	b.n	800a918 <_dtoa_r+0xa0>
 800a958:	ec4b ab10 	vmov	d0, sl, fp
 800a95c:	aa10      	add	r2, sp, #64	; 0x40
 800a95e:	a911      	add	r1, sp, #68	; 0x44
 800a960:	4620      	mov	r0, r4
 800a962:	f001 fcf3 	bl	800c34c <__d2b>
 800a966:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a96a:	ee08 0a10 	vmov	s16, r0
 800a96e:	2d00      	cmp	r5, #0
 800a970:	f000 8084 	beq.w	800aa7c <_dtoa_r+0x204>
 800a974:	ee19 3a90 	vmov	r3, s19
 800a978:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a97c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a980:	4656      	mov	r6, sl
 800a982:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a986:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a98a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a98e:	4b74      	ldr	r3, [pc, #464]	; (800ab60 <_dtoa_r+0x2e8>)
 800a990:	2200      	movs	r2, #0
 800a992:	4630      	mov	r0, r6
 800a994:	4639      	mov	r1, r7
 800a996:	f7f5 fc7f 	bl	8000298 <__aeabi_dsub>
 800a99a:	a365      	add	r3, pc, #404	; (adr r3, 800ab30 <_dtoa_r+0x2b8>)
 800a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a0:	f7f5 fe32 	bl	8000608 <__aeabi_dmul>
 800a9a4:	a364      	add	r3, pc, #400	; (adr r3, 800ab38 <_dtoa_r+0x2c0>)
 800a9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9aa:	f7f5 fc77 	bl	800029c <__adddf3>
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	460f      	mov	r7, r1
 800a9b4:	f7f5 fdbe 	bl	8000534 <__aeabi_i2d>
 800a9b8:	a361      	add	r3, pc, #388	; (adr r3, 800ab40 <_dtoa_r+0x2c8>)
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	f7f5 fe23 	bl	8000608 <__aeabi_dmul>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	f7f5 fc67 	bl	800029c <__adddf3>
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	460f      	mov	r7, r1
 800a9d2:	f7f6 f8c9 	bl	8000b68 <__aeabi_d2iz>
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	9000      	str	r0, [sp, #0]
 800a9da:	2300      	movs	r3, #0
 800a9dc:	4630      	mov	r0, r6
 800a9de:	4639      	mov	r1, r7
 800a9e0:	f7f6 f884 	bl	8000aec <__aeabi_dcmplt>
 800a9e4:	b150      	cbz	r0, 800a9fc <_dtoa_r+0x184>
 800a9e6:	9800      	ldr	r0, [sp, #0]
 800a9e8:	f7f5 fda4 	bl	8000534 <__aeabi_i2d>
 800a9ec:	4632      	mov	r2, r6
 800a9ee:	463b      	mov	r3, r7
 800a9f0:	f7f6 f872 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9f4:	b910      	cbnz	r0, 800a9fc <_dtoa_r+0x184>
 800a9f6:	9b00      	ldr	r3, [sp, #0]
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	9b00      	ldr	r3, [sp, #0]
 800a9fe:	2b16      	cmp	r3, #22
 800aa00:	d85a      	bhi.n	800aab8 <_dtoa_r+0x240>
 800aa02:	9a00      	ldr	r2, [sp, #0]
 800aa04:	4b57      	ldr	r3, [pc, #348]	; (800ab64 <_dtoa_r+0x2ec>)
 800aa06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0e:	ec51 0b19 	vmov	r0, r1, d9
 800aa12:	f7f6 f86b 	bl	8000aec <__aeabi_dcmplt>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d050      	beq.n	800aabc <_dtoa_r+0x244>
 800aa1a:	9b00      	ldr	r3, [sp, #0]
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	2300      	movs	r3, #0
 800aa22:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa26:	1b5d      	subs	r5, r3, r5
 800aa28:	1e6b      	subs	r3, r5, #1
 800aa2a:	9305      	str	r3, [sp, #20]
 800aa2c:	bf45      	ittet	mi
 800aa2e:	f1c5 0301 	rsbmi	r3, r5, #1
 800aa32:	9304      	strmi	r3, [sp, #16]
 800aa34:	2300      	movpl	r3, #0
 800aa36:	2300      	movmi	r3, #0
 800aa38:	bf4c      	ite	mi
 800aa3a:	9305      	strmi	r3, [sp, #20]
 800aa3c:	9304      	strpl	r3, [sp, #16]
 800aa3e:	9b00      	ldr	r3, [sp, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	db3d      	blt.n	800aac0 <_dtoa_r+0x248>
 800aa44:	9b05      	ldr	r3, [sp, #20]
 800aa46:	9a00      	ldr	r2, [sp, #0]
 800aa48:	920a      	str	r2, [sp, #40]	; 0x28
 800aa4a:	4413      	add	r3, r2
 800aa4c:	9305      	str	r3, [sp, #20]
 800aa4e:	2300      	movs	r3, #0
 800aa50:	9307      	str	r3, [sp, #28]
 800aa52:	9b06      	ldr	r3, [sp, #24]
 800aa54:	2b09      	cmp	r3, #9
 800aa56:	f200 8089 	bhi.w	800ab6c <_dtoa_r+0x2f4>
 800aa5a:	2b05      	cmp	r3, #5
 800aa5c:	bfc4      	itt	gt
 800aa5e:	3b04      	subgt	r3, #4
 800aa60:	9306      	strgt	r3, [sp, #24]
 800aa62:	9b06      	ldr	r3, [sp, #24]
 800aa64:	f1a3 0302 	sub.w	r3, r3, #2
 800aa68:	bfcc      	ite	gt
 800aa6a:	2500      	movgt	r5, #0
 800aa6c:	2501      	movle	r5, #1
 800aa6e:	2b03      	cmp	r3, #3
 800aa70:	f200 8087 	bhi.w	800ab82 <_dtoa_r+0x30a>
 800aa74:	e8df f003 	tbb	[pc, r3]
 800aa78:	59383a2d 	.word	0x59383a2d
 800aa7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aa80:	441d      	add	r5, r3
 800aa82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aa86:	2b20      	cmp	r3, #32
 800aa88:	bfc1      	itttt	gt
 800aa8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aa8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aa92:	fa0b f303 	lslgt.w	r3, fp, r3
 800aa96:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aa9a:	bfda      	itte	le
 800aa9c:	f1c3 0320 	rsble	r3, r3, #32
 800aaa0:	fa06 f003 	lslle.w	r0, r6, r3
 800aaa4:	4318      	orrgt	r0, r3
 800aaa6:	f7f5 fd35 	bl	8000514 <__aeabi_ui2d>
 800aaaa:	2301      	movs	r3, #1
 800aaac:	4606      	mov	r6, r0
 800aaae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aab2:	3d01      	subs	r5, #1
 800aab4:	930e      	str	r3, [sp, #56]	; 0x38
 800aab6:	e76a      	b.n	800a98e <_dtoa_r+0x116>
 800aab8:	2301      	movs	r3, #1
 800aaba:	e7b2      	b.n	800aa22 <_dtoa_r+0x1aa>
 800aabc:	900b      	str	r0, [sp, #44]	; 0x2c
 800aabe:	e7b1      	b.n	800aa24 <_dtoa_r+0x1ac>
 800aac0:	9b04      	ldr	r3, [sp, #16]
 800aac2:	9a00      	ldr	r2, [sp, #0]
 800aac4:	1a9b      	subs	r3, r3, r2
 800aac6:	9304      	str	r3, [sp, #16]
 800aac8:	4253      	negs	r3, r2
 800aaca:	9307      	str	r3, [sp, #28]
 800aacc:	2300      	movs	r3, #0
 800aace:	930a      	str	r3, [sp, #40]	; 0x28
 800aad0:	e7bf      	b.n	800aa52 <_dtoa_r+0x1da>
 800aad2:	2300      	movs	r3, #0
 800aad4:	9308      	str	r3, [sp, #32]
 800aad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aad8:	2b00      	cmp	r3, #0
 800aada:	dc55      	bgt.n	800ab88 <_dtoa_r+0x310>
 800aadc:	2301      	movs	r3, #1
 800aade:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aae2:	461a      	mov	r2, r3
 800aae4:	9209      	str	r2, [sp, #36]	; 0x24
 800aae6:	e00c      	b.n	800ab02 <_dtoa_r+0x28a>
 800aae8:	2301      	movs	r3, #1
 800aaea:	e7f3      	b.n	800aad4 <_dtoa_r+0x25c>
 800aaec:	2300      	movs	r3, #0
 800aaee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaf0:	9308      	str	r3, [sp, #32]
 800aaf2:	9b00      	ldr	r3, [sp, #0]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	9302      	str	r3, [sp, #8]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	9303      	str	r3, [sp, #12]
 800aafe:	bfb8      	it	lt
 800ab00:	2301      	movlt	r3, #1
 800ab02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ab04:	2200      	movs	r2, #0
 800ab06:	6042      	str	r2, [r0, #4]
 800ab08:	2204      	movs	r2, #4
 800ab0a:	f102 0614 	add.w	r6, r2, #20
 800ab0e:	429e      	cmp	r6, r3
 800ab10:	6841      	ldr	r1, [r0, #4]
 800ab12:	d93d      	bls.n	800ab90 <_dtoa_r+0x318>
 800ab14:	4620      	mov	r0, r4
 800ab16:	f001 f82b 	bl	800bb70 <_Balloc>
 800ab1a:	9001      	str	r0, [sp, #4]
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d13b      	bne.n	800ab98 <_dtoa_r+0x320>
 800ab20:	4b11      	ldr	r3, [pc, #68]	; (800ab68 <_dtoa_r+0x2f0>)
 800ab22:	4602      	mov	r2, r0
 800ab24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ab28:	e6c0      	b.n	800a8ac <_dtoa_r+0x34>
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e7df      	b.n	800aaee <_dtoa_r+0x276>
 800ab2e:	bf00      	nop
 800ab30:	636f4361 	.word	0x636f4361
 800ab34:	3fd287a7 	.word	0x3fd287a7
 800ab38:	8b60c8b3 	.word	0x8b60c8b3
 800ab3c:	3fc68a28 	.word	0x3fc68a28
 800ab40:	509f79fb 	.word	0x509f79fb
 800ab44:	3fd34413 	.word	0x3fd34413
 800ab48:	0800edbe 	.word	0x0800edbe
 800ab4c:	0800edd5 	.word	0x0800edd5
 800ab50:	7ff00000 	.word	0x7ff00000
 800ab54:	0800edba 	.word	0x0800edba
 800ab58:	0800edb1 	.word	0x0800edb1
 800ab5c:	0800ec35 	.word	0x0800ec35
 800ab60:	3ff80000 	.word	0x3ff80000
 800ab64:	0800ef40 	.word	0x0800ef40
 800ab68:	0800ee30 	.word	0x0800ee30
 800ab6c:	2501      	movs	r5, #1
 800ab6e:	2300      	movs	r3, #0
 800ab70:	9306      	str	r3, [sp, #24]
 800ab72:	9508      	str	r5, [sp, #32]
 800ab74:	f04f 33ff 	mov.w	r3, #4294967295
 800ab78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	2312      	movs	r3, #18
 800ab80:	e7b0      	b.n	800aae4 <_dtoa_r+0x26c>
 800ab82:	2301      	movs	r3, #1
 800ab84:	9308      	str	r3, [sp, #32]
 800ab86:	e7f5      	b.n	800ab74 <_dtoa_r+0x2fc>
 800ab88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab8e:	e7b8      	b.n	800ab02 <_dtoa_r+0x28a>
 800ab90:	3101      	adds	r1, #1
 800ab92:	6041      	str	r1, [r0, #4]
 800ab94:	0052      	lsls	r2, r2, #1
 800ab96:	e7b8      	b.n	800ab0a <_dtoa_r+0x292>
 800ab98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab9a:	9a01      	ldr	r2, [sp, #4]
 800ab9c:	601a      	str	r2, [r3, #0]
 800ab9e:	9b03      	ldr	r3, [sp, #12]
 800aba0:	2b0e      	cmp	r3, #14
 800aba2:	f200 809d 	bhi.w	800ace0 <_dtoa_r+0x468>
 800aba6:	2d00      	cmp	r5, #0
 800aba8:	f000 809a 	beq.w	800ace0 <_dtoa_r+0x468>
 800abac:	9b00      	ldr	r3, [sp, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	dd32      	ble.n	800ac18 <_dtoa_r+0x3a0>
 800abb2:	4ab7      	ldr	r2, [pc, #732]	; (800ae90 <_dtoa_r+0x618>)
 800abb4:	f003 030f 	and.w	r3, r3, #15
 800abb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800abbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abc0:	9b00      	ldr	r3, [sp, #0]
 800abc2:	05d8      	lsls	r0, r3, #23
 800abc4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800abc8:	d516      	bpl.n	800abf8 <_dtoa_r+0x380>
 800abca:	4bb2      	ldr	r3, [pc, #712]	; (800ae94 <_dtoa_r+0x61c>)
 800abcc:	ec51 0b19 	vmov	r0, r1, d9
 800abd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abd4:	f7f5 fe42 	bl	800085c <__aeabi_ddiv>
 800abd8:	f007 070f 	and.w	r7, r7, #15
 800abdc:	4682      	mov	sl, r0
 800abde:	468b      	mov	fp, r1
 800abe0:	2503      	movs	r5, #3
 800abe2:	4eac      	ldr	r6, [pc, #688]	; (800ae94 <_dtoa_r+0x61c>)
 800abe4:	b957      	cbnz	r7, 800abfc <_dtoa_r+0x384>
 800abe6:	4642      	mov	r2, r8
 800abe8:	464b      	mov	r3, r9
 800abea:	4650      	mov	r0, sl
 800abec:	4659      	mov	r1, fp
 800abee:	f7f5 fe35 	bl	800085c <__aeabi_ddiv>
 800abf2:	4682      	mov	sl, r0
 800abf4:	468b      	mov	fp, r1
 800abf6:	e028      	b.n	800ac4a <_dtoa_r+0x3d2>
 800abf8:	2502      	movs	r5, #2
 800abfa:	e7f2      	b.n	800abe2 <_dtoa_r+0x36a>
 800abfc:	07f9      	lsls	r1, r7, #31
 800abfe:	d508      	bpl.n	800ac12 <_dtoa_r+0x39a>
 800ac00:	4640      	mov	r0, r8
 800ac02:	4649      	mov	r1, r9
 800ac04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac08:	f7f5 fcfe 	bl	8000608 <__aeabi_dmul>
 800ac0c:	3501      	adds	r5, #1
 800ac0e:	4680      	mov	r8, r0
 800ac10:	4689      	mov	r9, r1
 800ac12:	107f      	asrs	r7, r7, #1
 800ac14:	3608      	adds	r6, #8
 800ac16:	e7e5      	b.n	800abe4 <_dtoa_r+0x36c>
 800ac18:	f000 809b 	beq.w	800ad52 <_dtoa_r+0x4da>
 800ac1c:	9b00      	ldr	r3, [sp, #0]
 800ac1e:	4f9d      	ldr	r7, [pc, #628]	; (800ae94 <_dtoa_r+0x61c>)
 800ac20:	425e      	negs	r6, r3
 800ac22:	4b9b      	ldr	r3, [pc, #620]	; (800ae90 <_dtoa_r+0x618>)
 800ac24:	f006 020f 	and.w	r2, r6, #15
 800ac28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac30:	ec51 0b19 	vmov	r0, r1, d9
 800ac34:	f7f5 fce8 	bl	8000608 <__aeabi_dmul>
 800ac38:	1136      	asrs	r6, r6, #4
 800ac3a:	4682      	mov	sl, r0
 800ac3c:	468b      	mov	fp, r1
 800ac3e:	2300      	movs	r3, #0
 800ac40:	2502      	movs	r5, #2
 800ac42:	2e00      	cmp	r6, #0
 800ac44:	d17a      	bne.n	800ad3c <_dtoa_r+0x4c4>
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1d3      	bne.n	800abf2 <_dtoa_r+0x37a>
 800ac4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f000 8082 	beq.w	800ad56 <_dtoa_r+0x4de>
 800ac52:	4b91      	ldr	r3, [pc, #580]	; (800ae98 <_dtoa_r+0x620>)
 800ac54:	2200      	movs	r2, #0
 800ac56:	4650      	mov	r0, sl
 800ac58:	4659      	mov	r1, fp
 800ac5a:	f7f5 ff47 	bl	8000aec <__aeabi_dcmplt>
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	d079      	beq.n	800ad56 <_dtoa_r+0x4de>
 800ac62:	9b03      	ldr	r3, [sp, #12]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d076      	beq.n	800ad56 <_dtoa_r+0x4de>
 800ac68:	9b02      	ldr	r3, [sp, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	dd36      	ble.n	800acdc <_dtoa_r+0x464>
 800ac6e:	9b00      	ldr	r3, [sp, #0]
 800ac70:	4650      	mov	r0, sl
 800ac72:	4659      	mov	r1, fp
 800ac74:	1e5f      	subs	r7, r3, #1
 800ac76:	2200      	movs	r2, #0
 800ac78:	4b88      	ldr	r3, [pc, #544]	; (800ae9c <_dtoa_r+0x624>)
 800ac7a:	f7f5 fcc5 	bl	8000608 <__aeabi_dmul>
 800ac7e:	9e02      	ldr	r6, [sp, #8]
 800ac80:	4682      	mov	sl, r0
 800ac82:	468b      	mov	fp, r1
 800ac84:	3501      	adds	r5, #1
 800ac86:	4628      	mov	r0, r5
 800ac88:	f7f5 fc54 	bl	8000534 <__aeabi_i2d>
 800ac8c:	4652      	mov	r2, sl
 800ac8e:	465b      	mov	r3, fp
 800ac90:	f7f5 fcba 	bl	8000608 <__aeabi_dmul>
 800ac94:	4b82      	ldr	r3, [pc, #520]	; (800aea0 <_dtoa_r+0x628>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	f7f5 fb00 	bl	800029c <__adddf3>
 800ac9c:	46d0      	mov	r8, sl
 800ac9e:	46d9      	mov	r9, fp
 800aca0:	4682      	mov	sl, r0
 800aca2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aca6:	2e00      	cmp	r6, #0
 800aca8:	d158      	bne.n	800ad5c <_dtoa_r+0x4e4>
 800acaa:	4b7e      	ldr	r3, [pc, #504]	; (800aea4 <_dtoa_r+0x62c>)
 800acac:	2200      	movs	r2, #0
 800acae:	4640      	mov	r0, r8
 800acb0:	4649      	mov	r1, r9
 800acb2:	f7f5 faf1 	bl	8000298 <__aeabi_dsub>
 800acb6:	4652      	mov	r2, sl
 800acb8:	465b      	mov	r3, fp
 800acba:	4680      	mov	r8, r0
 800acbc:	4689      	mov	r9, r1
 800acbe:	f7f5 ff33 	bl	8000b28 <__aeabi_dcmpgt>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	f040 8295 	bne.w	800b1f2 <_dtoa_r+0x97a>
 800acc8:	4652      	mov	r2, sl
 800acca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800acce:	4640      	mov	r0, r8
 800acd0:	4649      	mov	r1, r9
 800acd2:	f7f5 ff0b 	bl	8000aec <__aeabi_dcmplt>
 800acd6:	2800      	cmp	r0, #0
 800acd8:	f040 8289 	bne.w	800b1ee <_dtoa_r+0x976>
 800acdc:	ec5b ab19 	vmov	sl, fp, d9
 800ace0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f2c0 8148 	blt.w	800af78 <_dtoa_r+0x700>
 800ace8:	9a00      	ldr	r2, [sp, #0]
 800acea:	2a0e      	cmp	r2, #14
 800acec:	f300 8144 	bgt.w	800af78 <_dtoa_r+0x700>
 800acf0:	4b67      	ldr	r3, [pc, #412]	; (800ae90 <_dtoa_r+0x618>)
 800acf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f280 80d5 	bge.w	800aeac <_dtoa_r+0x634>
 800ad02:	9b03      	ldr	r3, [sp, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f300 80d1 	bgt.w	800aeac <_dtoa_r+0x634>
 800ad0a:	f040 826f 	bne.w	800b1ec <_dtoa_r+0x974>
 800ad0e:	4b65      	ldr	r3, [pc, #404]	; (800aea4 <_dtoa_r+0x62c>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	4640      	mov	r0, r8
 800ad14:	4649      	mov	r1, r9
 800ad16:	f7f5 fc77 	bl	8000608 <__aeabi_dmul>
 800ad1a:	4652      	mov	r2, sl
 800ad1c:	465b      	mov	r3, fp
 800ad1e:	f7f5 fef9 	bl	8000b14 <__aeabi_dcmpge>
 800ad22:	9e03      	ldr	r6, [sp, #12]
 800ad24:	4637      	mov	r7, r6
 800ad26:	2800      	cmp	r0, #0
 800ad28:	f040 8245 	bne.w	800b1b6 <_dtoa_r+0x93e>
 800ad2c:	9d01      	ldr	r5, [sp, #4]
 800ad2e:	2331      	movs	r3, #49	; 0x31
 800ad30:	f805 3b01 	strb.w	r3, [r5], #1
 800ad34:	9b00      	ldr	r3, [sp, #0]
 800ad36:	3301      	adds	r3, #1
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	e240      	b.n	800b1be <_dtoa_r+0x946>
 800ad3c:	07f2      	lsls	r2, r6, #31
 800ad3e:	d505      	bpl.n	800ad4c <_dtoa_r+0x4d4>
 800ad40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad44:	f7f5 fc60 	bl	8000608 <__aeabi_dmul>
 800ad48:	3501      	adds	r5, #1
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	1076      	asrs	r6, r6, #1
 800ad4e:	3708      	adds	r7, #8
 800ad50:	e777      	b.n	800ac42 <_dtoa_r+0x3ca>
 800ad52:	2502      	movs	r5, #2
 800ad54:	e779      	b.n	800ac4a <_dtoa_r+0x3d2>
 800ad56:	9f00      	ldr	r7, [sp, #0]
 800ad58:	9e03      	ldr	r6, [sp, #12]
 800ad5a:	e794      	b.n	800ac86 <_dtoa_r+0x40e>
 800ad5c:	9901      	ldr	r1, [sp, #4]
 800ad5e:	4b4c      	ldr	r3, [pc, #304]	; (800ae90 <_dtoa_r+0x618>)
 800ad60:	4431      	add	r1, r6
 800ad62:	910d      	str	r1, [sp, #52]	; 0x34
 800ad64:	9908      	ldr	r1, [sp, #32]
 800ad66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad6e:	2900      	cmp	r1, #0
 800ad70:	d043      	beq.n	800adfa <_dtoa_r+0x582>
 800ad72:	494d      	ldr	r1, [pc, #308]	; (800aea8 <_dtoa_r+0x630>)
 800ad74:	2000      	movs	r0, #0
 800ad76:	f7f5 fd71 	bl	800085c <__aeabi_ddiv>
 800ad7a:	4652      	mov	r2, sl
 800ad7c:	465b      	mov	r3, fp
 800ad7e:	f7f5 fa8b 	bl	8000298 <__aeabi_dsub>
 800ad82:	9d01      	ldr	r5, [sp, #4]
 800ad84:	4682      	mov	sl, r0
 800ad86:	468b      	mov	fp, r1
 800ad88:	4649      	mov	r1, r9
 800ad8a:	4640      	mov	r0, r8
 800ad8c:	f7f5 feec 	bl	8000b68 <__aeabi_d2iz>
 800ad90:	4606      	mov	r6, r0
 800ad92:	f7f5 fbcf 	bl	8000534 <__aeabi_i2d>
 800ad96:	4602      	mov	r2, r0
 800ad98:	460b      	mov	r3, r1
 800ad9a:	4640      	mov	r0, r8
 800ad9c:	4649      	mov	r1, r9
 800ad9e:	f7f5 fa7b 	bl	8000298 <__aeabi_dsub>
 800ada2:	3630      	adds	r6, #48	; 0x30
 800ada4:	f805 6b01 	strb.w	r6, [r5], #1
 800ada8:	4652      	mov	r2, sl
 800adaa:	465b      	mov	r3, fp
 800adac:	4680      	mov	r8, r0
 800adae:	4689      	mov	r9, r1
 800adb0:	f7f5 fe9c 	bl	8000aec <__aeabi_dcmplt>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	d163      	bne.n	800ae80 <_dtoa_r+0x608>
 800adb8:	4642      	mov	r2, r8
 800adba:	464b      	mov	r3, r9
 800adbc:	4936      	ldr	r1, [pc, #216]	; (800ae98 <_dtoa_r+0x620>)
 800adbe:	2000      	movs	r0, #0
 800adc0:	f7f5 fa6a 	bl	8000298 <__aeabi_dsub>
 800adc4:	4652      	mov	r2, sl
 800adc6:	465b      	mov	r3, fp
 800adc8:	f7f5 fe90 	bl	8000aec <__aeabi_dcmplt>
 800adcc:	2800      	cmp	r0, #0
 800adce:	f040 80b5 	bne.w	800af3c <_dtoa_r+0x6c4>
 800add2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800add4:	429d      	cmp	r5, r3
 800add6:	d081      	beq.n	800acdc <_dtoa_r+0x464>
 800add8:	4b30      	ldr	r3, [pc, #192]	; (800ae9c <_dtoa_r+0x624>)
 800adda:	2200      	movs	r2, #0
 800addc:	4650      	mov	r0, sl
 800adde:	4659      	mov	r1, fp
 800ade0:	f7f5 fc12 	bl	8000608 <__aeabi_dmul>
 800ade4:	4b2d      	ldr	r3, [pc, #180]	; (800ae9c <_dtoa_r+0x624>)
 800ade6:	4682      	mov	sl, r0
 800ade8:	468b      	mov	fp, r1
 800adea:	4640      	mov	r0, r8
 800adec:	4649      	mov	r1, r9
 800adee:	2200      	movs	r2, #0
 800adf0:	f7f5 fc0a 	bl	8000608 <__aeabi_dmul>
 800adf4:	4680      	mov	r8, r0
 800adf6:	4689      	mov	r9, r1
 800adf8:	e7c6      	b.n	800ad88 <_dtoa_r+0x510>
 800adfa:	4650      	mov	r0, sl
 800adfc:	4659      	mov	r1, fp
 800adfe:	f7f5 fc03 	bl	8000608 <__aeabi_dmul>
 800ae02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae04:	9d01      	ldr	r5, [sp, #4]
 800ae06:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae08:	4682      	mov	sl, r0
 800ae0a:	468b      	mov	fp, r1
 800ae0c:	4649      	mov	r1, r9
 800ae0e:	4640      	mov	r0, r8
 800ae10:	f7f5 feaa 	bl	8000b68 <__aeabi_d2iz>
 800ae14:	4606      	mov	r6, r0
 800ae16:	f7f5 fb8d 	bl	8000534 <__aeabi_i2d>
 800ae1a:	3630      	adds	r6, #48	; 0x30
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	4640      	mov	r0, r8
 800ae22:	4649      	mov	r1, r9
 800ae24:	f7f5 fa38 	bl	8000298 <__aeabi_dsub>
 800ae28:	f805 6b01 	strb.w	r6, [r5], #1
 800ae2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae2e:	429d      	cmp	r5, r3
 800ae30:	4680      	mov	r8, r0
 800ae32:	4689      	mov	r9, r1
 800ae34:	f04f 0200 	mov.w	r2, #0
 800ae38:	d124      	bne.n	800ae84 <_dtoa_r+0x60c>
 800ae3a:	4b1b      	ldr	r3, [pc, #108]	; (800aea8 <_dtoa_r+0x630>)
 800ae3c:	4650      	mov	r0, sl
 800ae3e:	4659      	mov	r1, fp
 800ae40:	f7f5 fa2c 	bl	800029c <__adddf3>
 800ae44:	4602      	mov	r2, r0
 800ae46:	460b      	mov	r3, r1
 800ae48:	4640      	mov	r0, r8
 800ae4a:	4649      	mov	r1, r9
 800ae4c:	f7f5 fe6c 	bl	8000b28 <__aeabi_dcmpgt>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d173      	bne.n	800af3c <_dtoa_r+0x6c4>
 800ae54:	4652      	mov	r2, sl
 800ae56:	465b      	mov	r3, fp
 800ae58:	4913      	ldr	r1, [pc, #76]	; (800aea8 <_dtoa_r+0x630>)
 800ae5a:	2000      	movs	r0, #0
 800ae5c:	f7f5 fa1c 	bl	8000298 <__aeabi_dsub>
 800ae60:	4602      	mov	r2, r0
 800ae62:	460b      	mov	r3, r1
 800ae64:	4640      	mov	r0, r8
 800ae66:	4649      	mov	r1, r9
 800ae68:	f7f5 fe40 	bl	8000aec <__aeabi_dcmplt>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	f43f af35 	beq.w	800acdc <_dtoa_r+0x464>
 800ae72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ae74:	1e6b      	subs	r3, r5, #1
 800ae76:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae7c:	2b30      	cmp	r3, #48	; 0x30
 800ae7e:	d0f8      	beq.n	800ae72 <_dtoa_r+0x5fa>
 800ae80:	9700      	str	r7, [sp, #0]
 800ae82:	e049      	b.n	800af18 <_dtoa_r+0x6a0>
 800ae84:	4b05      	ldr	r3, [pc, #20]	; (800ae9c <_dtoa_r+0x624>)
 800ae86:	f7f5 fbbf 	bl	8000608 <__aeabi_dmul>
 800ae8a:	4680      	mov	r8, r0
 800ae8c:	4689      	mov	r9, r1
 800ae8e:	e7bd      	b.n	800ae0c <_dtoa_r+0x594>
 800ae90:	0800ef40 	.word	0x0800ef40
 800ae94:	0800ef18 	.word	0x0800ef18
 800ae98:	3ff00000 	.word	0x3ff00000
 800ae9c:	40240000 	.word	0x40240000
 800aea0:	401c0000 	.word	0x401c0000
 800aea4:	40140000 	.word	0x40140000
 800aea8:	3fe00000 	.word	0x3fe00000
 800aeac:	9d01      	ldr	r5, [sp, #4]
 800aeae:	4656      	mov	r6, sl
 800aeb0:	465f      	mov	r7, fp
 800aeb2:	4642      	mov	r2, r8
 800aeb4:	464b      	mov	r3, r9
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	4639      	mov	r1, r7
 800aeba:	f7f5 fccf 	bl	800085c <__aeabi_ddiv>
 800aebe:	f7f5 fe53 	bl	8000b68 <__aeabi_d2iz>
 800aec2:	4682      	mov	sl, r0
 800aec4:	f7f5 fb36 	bl	8000534 <__aeabi_i2d>
 800aec8:	4642      	mov	r2, r8
 800aeca:	464b      	mov	r3, r9
 800aecc:	f7f5 fb9c 	bl	8000608 <__aeabi_dmul>
 800aed0:	4602      	mov	r2, r0
 800aed2:	460b      	mov	r3, r1
 800aed4:	4630      	mov	r0, r6
 800aed6:	4639      	mov	r1, r7
 800aed8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800aedc:	f7f5 f9dc 	bl	8000298 <__aeabi_dsub>
 800aee0:	f805 6b01 	strb.w	r6, [r5], #1
 800aee4:	9e01      	ldr	r6, [sp, #4]
 800aee6:	9f03      	ldr	r7, [sp, #12]
 800aee8:	1bae      	subs	r6, r5, r6
 800aeea:	42b7      	cmp	r7, r6
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	d135      	bne.n	800af5e <_dtoa_r+0x6e6>
 800aef2:	f7f5 f9d3 	bl	800029c <__adddf3>
 800aef6:	4642      	mov	r2, r8
 800aef8:	464b      	mov	r3, r9
 800aefa:	4606      	mov	r6, r0
 800aefc:	460f      	mov	r7, r1
 800aefe:	f7f5 fe13 	bl	8000b28 <__aeabi_dcmpgt>
 800af02:	b9d0      	cbnz	r0, 800af3a <_dtoa_r+0x6c2>
 800af04:	4642      	mov	r2, r8
 800af06:	464b      	mov	r3, r9
 800af08:	4630      	mov	r0, r6
 800af0a:	4639      	mov	r1, r7
 800af0c:	f7f5 fde4 	bl	8000ad8 <__aeabi_dcmpeq>
 800af10:	b110      	cbz	r0, 800af18 <_dtoa_r+0x6a0>
 800af12:	f01a 0f01 	tst.w	sl, #1
 800af16:	d110      	bne.n	800af3a <_dtoa_r+0x6c2>
 800af18:	4620      	mov	r0, r4
 800af1a:	ee18 1a10 	vmov	r1, s16
 800af1e:	f000 fe67 	bl	800bbf0 <_Bfree>
 800af22:	2300      	movs	r3, #0
 800af24:	9800      	ldr	r0, [sp, #0]
 800af26:	702b      	strb	r3, [r5, #0]
 800af28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af2a:	3001      	adds	r0, #1
 800af2c:	6018      	str	r0, [r3, #0]
 800af2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af30:	2b00      	cmp	r3, #0
 800af32:	f43f acf1 	beq.w	800a918 <_dtoa_r+0xa0>
 800af36:	601d      	str	r5, [r3, #0]
 800af38:	e4ee      	b.n	800a918 <_dtoa_r+0xa0>
 800af3a:	9f00      	ldr	r7, [sp, #0]
 800af3c:	462b      	mov	r3, r5
 800af3e:	461d      	mov	r5, r3
 800af40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af44:	2a39      	cmp	r2, #57	; 0x39
 800af46:	d106      	bne.n	800af56 <_dtoa_r+0x6de>
 800af48:	9a01      	ldr	r2, [sp, #4]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d1f7      	bne.n	800af3e <_dtoa_r+0x6c6>
 800af4e:	9901      	ldr	r1, [sp, #4]
 800af50:	2230      	movs	r2, #48	; 0x30
 800af52:	3701      	adds	r7, #1
 800af54:	700a      	strb	r2, [r1, #0]
 800af56:	781a      	ldrb	r2, [r3, #0]
 800af58:	3201      	adds	r2, #1
 800af5a:	701a      	strb	r2, [r3, #0]
 800af5c:	e790      	b.n	800ae80 <_dtoa_r+0x608>
 800af5e:	4ba6      	ldr	r3, [pc, #664]	; (800b1f8 <_dtoa_r+0x980>)
 800af60:	2200      	movs	r2, #0
 800af62:	f7f5 fb51 	bl	8000608 <__aeabi_dmul>
 800af66:	2200      	movs	r2, #0
 800af68:	2300      	movs	r3, #0
 800af6a:	4606      	mov	r6, r0
 800af6c:	460f      	mov	r7, r1
 800af6e:	f7f5 fdb3 	bl	8000ad8 <__aeabi_dcmpeq>
 800af72:	2800      	cmp	r0, #0
 800af74:	d09d      	beq.n	800aeb2 <_dtoa_r+0x63a>
 800af76:	e7cf      	b.n	800af18 <_dtoa_r+0x6a0>
 800af78:	9a08      	ldr	r2, [sp, #32]
 800af7a:	2a00      	cmp	r2, #0
 800af7c:	f000 80d7 	beq.w	800b12e <_dtoa_r+0x8b6>
 800af80:	9a06      	ldr	r2, [sp, #24]
 800af82:	2a01      	cmp	r2, #1
 800af84:	f300 80ba 	bgt.w	800b0fc <_dtoa_r+0x884>
 800af88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af8a:	2a00      	cmp	r2, #0
 800af8c:	f000 80b2 	beq.w	800b0f4 <_dtoa_r+0x87c>
 800af90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af94:	9e07      	ldr	r6, [sp, #28]
 800af96:	9d04      	ldr	r5, [sp, #16]
 800af98:	9a04      	ldr	r2, [sp, #16]
 800af9a:	441a      	add	r2, r3
 800af9c:	9204      	str	r2, [sp, #16]
 800af9e:	9a05      	ldr	r2, [sp, #20]
 800afa0:	2101      	movs	r1, #1
 800afa2:	441a      	add	r2, r3
 800afa4:	4620      	mov	r0, r4
 800afa6:	9205      	str	r2, [sp, #20]
 800afa8:	f000 ff24 	bl	800bdf4 <__i2b>
 800afac:	4607      	mov	r7, r0
 800afae:	2d00      	cmp	r5, #0
 800afb0:	dd0c      	ble.n	800afcc <_dtoa_r+0x754>
 800afb2:	9b05      	ldr	r3, [sp, #20]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	dd09      	ble.n	800afcc <_dtoa_r+0x754>
 800afb8:	42ab      	cmp	r3, r5
 800afba:	9a04      	ldr	r2, [sp, #16]
 800afbc:	bfa8      	it	ge
 800afbe:	462b      	movge	r3, r5
 800afc0:	1ad2      	subs	r2, r2, r3
 800afc2:	9204      	str	r2, [sp, #16]
 800afc4:	9a05      	ldr	r2, [sp, #20]
 800afc6:	1aed      	subs	r5, r5, r3
 800afc8:	1ad3      	subs	r3, r2, r3
 800afca:	9305      	str	r3, [sp, #20]
 800afcc:	9b07      	ldr	r3, [sp, #28]
 800afce:	b31b      	cbz	r3, 800b018 <_dtoa_r+0x7a0>
 800afd0:	9b08      	ldr	r3, [sp, #32]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f000 80af 	beq.w	800b136 <_dtoa_r+0x8be>
 800afd8:	2e00      	cmp	r6, #0
 800afda:	dd13      	ble.n	800b004 <_dtoa_r+0x78c>
 800afdc:	4639      	mov	r1, r7
 800afde:	4632      	mov	r2, r6
 800afe0:	4620      	mov	r0, r4
 800afe2:	f000 ffc7 	bl	800bf74 <__pow5mult>
 800afe6:	ee18 2a10 	vmov	r2, s16
 800afea:	4601      	mov	r1, r0
 800afec:	4607      	mov	r7, r0
 800afee:	4620      	mov	r0, r4
 800aff0:	f000 ff16 	bl	800be20 <__multiply>
 800aff4:	ee18 1a10 	vmov	r1, s16
 800aff8:	4680      	mov	r8, r0
 800affa:	4620      	mov	r0, r4
 800affc:	f000 fdf8 	bl	800bbf0 <_Bfree>
 800b000:	ee08 8a10 	vmov	s16, r8
 800b004:	9b07      	ldr	r3, [sp, #28]
 800b006:	1b9a      	subs	r2, r3, r6
 800b008:	d006      	beq.n	800b018 <_dtoa_r+0x7a0>
 800b00a:	ee18 1a10 	vmov	r1, s16
 800b00e:	4620      	mov	r0, r4
 800b010:	f000 ffb0 	bl	800bf74 <__pow5mult>
 800b014:	ee08 0a10 	vmov	s16, r0
 800b018:	2101      	movs	r1, #1
 800b01a:	4620      	mov	r0, r4
 800b01c:	f000 feea 	bl	800bdf4 <__i2b>
 800b020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b022:	2b00      	cmp	r3, #0
 800b024:	4606      	mov	r6, r0
 800b026:	f340 8088 	ble.w	800b13a <_dtoa_r+0x8c2>
 800b02a:	461a      	mov	r2, r3
 800b02c:	4601      	mov	r1, r0
 800b02e:	4620      	mov	r0, r4
 800b030:	f000 ffa0 	bl	800bf74 <__pow5mult>
 800b034:	9b06      	ldr	r3, [sp, #24]
 800b036:	2b01      	cmp	r3, #1
 800b038:	4606      	mov	r6, r0
 800b03a:	f340 8081 	ble.w	800b140 <_dtoa_r+0x8c8>
 800b03e:	f04f 0800 	mov.w	r8, #0
 800b042:	6933      	ldr	r3, [r6, #16]
 800b044:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b048:	6918      	ldr	r0, [r3, #16]
 800b04a:	f000 fe83 	bl	800bd54 <__hi0bits>
 800b04e:	f1c0 0020 	rsb	r0, r0, #32
 800b052:	9b05      	ldr	r3, [sp, #20]
 800b054:	4418      	add	r0, r3
 800b056:	f010 001f 	ands.w	r0, r0, #31
 800b05a:	f000 8092 	beq.w	800b182 <_dtoa_r+0x90a>
 800b05e:	f1c0 0320 	rsb	r3, r0, #32
 800b062:	2b04      	cmp	r3, #4
 800b064:	f340 808a 	ble.w	800b17c <_dtoa_r+0x904>
 800b068:	f1c0 001c 	rsb	r0, r0, #28
 800b06c:	9b04      	ldr	r3, [sp, #16]
 800b06e:	4403      	add	r3, r0
 800b070:	9304      	str	r3, [sp, #16]
 800b072:	9b05      	ldr	r3, [sp, #20]
 800b074:	4403      	add	r3, r0
 800b076:	4405      	add	r5, r0
 800b078:	9305      	str	r3, [sp, #20]
 800b07a:	9b04      	ldr	r3, [sp, #16]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	dd07      	ble.n	800b090 <_dtoa_r+0x818>
 800b080:	ee18 1a10 	vmov	r1, s16
 800b084:	461a      	mov	r2, r3
 800b086:	4620      	mov	r0, r4
 800b088:	f000 ffce 	bl	800c028 <__lshift>
 800b08c:	ee08 0a10 	vmov	s16, r0
 800b090:	9b05      	ldr	r3, [sp, #20]
 800b092:	2b00      	cmp	r3, #0
 800b094:	dd05      	ble.n	800b0a2 <_dtoa_r+0x82a>
 800b096:	4631      	mov	r1, r6
 800b098:	461a      	mov	r2, r3
 800b09a:	4620      	mov	r0, r4
 800b09c:	f000 ffc4 	bl	800c028 <__lshift>
 800b0a0:	4606      	mov	r6, r0
 800b0a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d06e      	beq.n	800b186 <_dtoa_r+0x90e>
 800b0a8:	ee18 0a10 	vmov	r0, s16
 800b0ac:	4631      	mov	r1, r6
 800b0ae:	f001 f82b 	bl	800c108 <__mcmp>
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	da67      	bge.n	800b186 <_dtoa_r+0x90e>
 800b0b6:	9b00      	ldr	r3, [sp, #0]
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	ee18 1a10 	vmov	r1, s16
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	220a      	movs	r2, #10
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f000 fdb5 	bl	800bc34 <__multadd>
 800b0ca:	9b08      	ldr	r3, [sp, #32]
 800b0cc:	ee08 0a10 	vmov	s16, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f000 81b1 	beq.w	800b438 <_dtoa_r+0xbc0>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	4639      	mov	r1, r7
 800b0da:	220a      	movs	r2, #10
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f000 fda9 	bl	800bc34 <__multadd>
 800b0e2:	9b02      	ldr	r3, [sp, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	4607      	mov	r7, r0
 800b0e8:	f300 808e 	bgt.w	800b208 <_dtoa_r+0x990>
 800b0ec:	9b06      	ldr	r3, [sp, #24]
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	dc51      	bgt.n	800b196 <_dtoa_r+0x91e>
 800b0f2:	e089      	b.n	800b208 <_dtoa_r+0x990>
 800b0f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b0fa:	e74b      	b.n	800af94 <_dtoa_r+0x71c>
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	1e5e      	subs	r6, r3, #1
 800b100:	9b07      	ldr	r3, [sp, #28]
 800b102:	42b3      	cmp	r3, r6
 800b104:	bfbf      	itttt	lt
 800b106:	9b07      	ldrlt	r3, [sp, #28]
 800b108:	9607      	strlt	r6, [sp, #28]
 800b10a:	1af2      	sublt	r2, r6, r3
 800b10c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b10e:	bfb6      	itet	lt
 800b110:	189b      	addlt	r3, r3, r2
 800b112:	1b9e      	subge	r6, r3, r6
 800b114:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b116:	9b03      	ldr	r3, [sp, #12]
 800b118:	bfb8      	it	lt
 800b11a:	2600      	movlt	r6, #0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	bfb7      	itett	lt
 800b120:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b124:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b128:	1a9d      	sublt	r5, r3, r2
 800b12a:	2300      	movlt	r3, #0
 800b12c:	e734      	b.n	800af98 <_dtoa_r+0x720>
 800b12e:	9e07      	ldr	r6, [sp, #28]
 800b130:	9d04      	ldr	r5, [sp, #16]
 800b132:	9f08      	ldr	r7, [sp, #32]
 800b134:	e73b      	b.n	800afae <_dtoa_r+0x736>
 800b136:	9a07      	ldr	r2, [sp, #28]
 800b138:	e767      	b.n	800b00a <_dtoa_r+0x792>
 800b13a:	9b06      	ldr	r3, [sp, #24]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	dc18      	bgt.n	800b172 <_dtoa_r+0x8fa>
 800b140:	f1ba 0f00 	cmp.w	sl, #0
 800b144:	d115      	bne.n	800b172 <_dtoa_r+0x8fa>
 800b146:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b14a:	b993      	cbnz	r3, 800b172 <_dtoa_r+0x8fa>
 800b14c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b150:	0d1b      	lsrs	r3, r3, #20
 800b152:	051b      	lsls	r3, r3, #20
 800b154:	b183      	cbz	r3, 800b178 <_dtoa_r+0x900>
 800b156:	9b04      	ldr	r3, [sp, #16]
 800b158:	3301      	adds	r3, #1
 800b15a:	9304      	str	r3, [sp, #16]
 800b15c:	9b05      	ldr	r3, [sp, #20]
 800b15e:	3301      	adds	r3, #1
 800b160:	9305      	str	r3, [sp, #20]
 800b162:	f04f 0801 	mov.w	r8, #1
 800b166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f47f af6a 	bne.w	800b042 <_dtoa_r+0x7ca>
 800b16e:	2001      	movs	r0, #1
 800b170:	e76f      	b.n	800b052 <_dtoa_r+0x7da>
 800b172:	f04f 0800 	mov.w	r8, #0
 800b176:	e7f6      	b.n	800b166 <_dtoa_r+0x8ee>
 800b178:	4698      	mov	r8, r3
 800b17a:	e7f4      	b.n	800b166 <_dtoa_r+0x8ee>
 800b17c:	f43f af7d 	beq.w	800b07a <_dtoa_r+0x802>
 800b180:	4618      	mov	r0, r3
 800b182:	301c      	adds	r0, #28
 800b184:	e772      	b.n	800b06c <_dtoa_r+0x7f4>
 800b186:	9b03      	ldr	r3, [sp, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	dc37      	bgt.n	800b1fc <_dtoa_r+0x984>
 800b18c:	9b06      	ldr	r3, [sp, #24]
 800b18e:	2b02      	cmp	r3, #2
 800b190:	dd34      	ble.n	800b1fc <_dtoa_r+0x984>
 800b192:	9b03      	ldr	r3, [sp, #12]
 800b194:	9302      	str	r3, [sp, #8]
 800b196:	9b02      	ldr	r3, [sp, #8]
 800b198:	b96b      	cbnz	r3, 800b1b6 <_dtoa_r+0x93e>
 800b19a:	4631      	mov	r1, r6
 800b19c:	2205      	movs	r2, #5
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f000 fd48 	bl	800bc34 <__multadd>
 800b1a4:	4601      	mov	r1, r0
 800b1a6:	4606      	mov	r6, r0
 800b1a8:	ee18 0a10 	vmov	r0, s16
 800b1ac:	f000 ffac 	bl	800c108 <__mcmp>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	f73f adbb 	bgt.w	800ad2c <_dtoa_r+0x4b4>
 800b1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b8:	9d01      	ldr	r5, [sp, #4]
 800b1ba:	43db      	mvns	r3, r3
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	f04f 0800 	mov.w	r8, #0
 800b1c2:	4631      	mov	r1, r6
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f000 fd13 	bl	800bbf0 <_Bfree>
 800b1ca:	2f00      	cmp	r7, #0
 800b1cc:	f43f aea4 	beq.w	800af18 <_dtoa_r+0x6a0>
 800b1d0:	f1b8 0f00 	cmp.w	r8, #0
 800b1d4:	d005      	beq.n	800b1e2 <_dtoa_r+0x96a>
 800b1d6:	45b8      	cmp	r8, r7
 800b1d8:	d003      	beq.n	800b1e2 <_dtoa_r+0x96a>
 800b1da:	4641      	mov	r1, r8
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f000 fd07 	bl	800bbf0 <_Bfree>
 800b1e2:	4639      	mov	r1, r7
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f000 fd03 	bl	800bbf0 <_Bfree>
 800b1ea:	e695      	b.n	800af18 <_dtoa_r+0x6a0>
 800b1ec:	2600      	movs	r6, #0
 800b1ee:	4637      	mov	r7, r6
 800b1f0:	e7e1      	b.n	800b1b6 <_dtoa_r+0x93e>
 800b1f2:	9700      	str	r7, [sp, #0]
 800b1f4:	4637      	mov	r7, r6
 800b1f6:	e599      	b.n	800ad2c <_dtoa_r+0x4b4>
 800b1f8:	40240000 	.word	0x40240000
 800b1fc:	9b08      	ldr	r3, [sp, #32]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f000 80ca 	beq.w	800b398 <_dtoa_r+0xb20>
 800b204:	9b03      	ldr	r3, [sp, #12]
 800b206:	9302      	str	r3, [sp, #8]
 800b208:	2d00      	cmp	r5, #0
 800b20a:	dd05      	ble.n	800b218 <_dtoa_r+0x9a0>
 800b20c:	4639      	mov	r1, r7
 800b20e:	462a      	mov	r2, r5
 800b210:	4620      	mov	r0, r4
 800b212:	f000 ff09 	bl	800c028 <__lshift>
 800b216:	4607      	mov	r7, r0
 800b218:	f1b8 0f00 	cmp.w	r8, #0
 800b21c:	d05b      	beq.n	800b2d6 <_dtoa_r+0xa5e>
 800b21e:	6879      	ldr	r1, [r7, #4]
 800b220:	4620      	mov	r0, r4
 800b222:	f000 fca5 	bl	800bb70 <_Balloc>
 800b226:	4605      	mov	r5, r0
 800b228:	b928      	cbnz	r0, 800b236 <_dtoa_r+0x9be>
 800b22a:	4b87      	ldr	r3, [pc, #540]	; (800b448 <_dtoa_r+0xbd0>)
 800b22c:	4602      	mov	r2, r0
 800b22e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b232:	f7ff bb3b 	b.w	800a8ac <_dtoa_r+0x34>
 800b236:	693a      	ldr	r2, [r7, #16]
 800b238:	3202      	adds	r2, #2
 800b23a:	0092      	lsls	r2, r2, #2
 800b23c:	f107 010c 	add.w	r1, r7, #12
 800b240:	300c      	adds	r0, #12
 800b242:	f7fd fd29 	bl	8008c98 <memcpy>
 800b246:	2201      	movs	r2, #1
 800b248:	4629      	mov	r1, r5
 800b24a:	4620      	mov	r0, r4
 800b24c:	f000 feec 	bl	800c028 <__lshift>
 800b250:	9b01      	ldr	r3, [sp, #4]
 800b252:	f103 0901 	add.w	r9, r3, #1
 800b256:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b25a:	4413      	add	r3, r2
 800b25c:	9305      	str	r3, [sp, #20]
 800b25e:	f00a 0301 	and.w	r3, sl, #1
 800b262:	46b8      	mov	r8, r7
 800b264:	9304      	str	r3, [sp, #16]
 800b266:	4607      	mov	r7, r0
 800b268:	4631      	mov	r1, r6
 800b26a:	ee18 0a10 	vmov	r0, s16
 800b26e:	f7ff fa77 	bl	800a760 <quorem>
 800b272:	4641      	mov	r1, r8
 800b274:	9002      	str	r0, [sp, #8]
 800b276:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b27a:	ee18 0a10 	vmov	r0, s16
 800b27e:	f000 ff43 	bl	800c108 <__mcmp>
 800b282:	463a      	mov	r2, r7
 800b284:	9003      	str	r0, [sp, #12]
 800b286:	4631      	mov	r1, r6
 800b288:	4620      	mov	r0, r4
 800b28a:	f000 ff59 	bl	800c140 <__mdiff>
 800b28e:	68c2      	ldr	r2, [r0, #12]
 800b290:	f109 3bff 	add.w	fp, r9, #4294967295
 800b294:	4605      	mov	r5, r0
 800b296:	bb02      	cbnz	r2, 800b2da <_dtoa_r+0xa62>
 800b298:	4601      	mov	r1, r0
 800b29a:	ee18 0a10 	vmov	r0, s16
 800b29e:	f000 ff33 	bl	800c108 <__mcmp>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	9207      	str	r2, [sp, #28]
 800b2aa:	f000 fca1 	bl	800bbf0 <_Bfree>
 800b2ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b2b2:	ea43 0102 	orr.w	r1, r3, r2
 800b2b6:	9b04      	ldr	r3, [sp, #16]
 800b2b8:	430b      	orrs	r3, r1
 800b2ba:	464d      	mov	r5, r9
 800b2bc:	d10f      	bne.n	800b2de <_dtoa_r+0xa66>
 800b2be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b2c2:	d02a      	beq.n	800b31a <_dtoa_r+0xaa2>
 800b2c4:	9b03      	ldr	r3, [sp, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	dd02      	ble.n	800b2d0 <_dtoa_r+0xa58>
 800b2ca:	9b02      	ldr	r3, [sp, #8]
 800b2cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b2d0:	f88b a000 	strb.w	sl, [fp]
 800b2d4:	e775      	b.n	800b1c2 <_dtoa_r+0x94a>
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	e7ba      	b.n	800b250 <_dtoa_r+0x9d8>
 800b2da:	2201      	movs	r2, #1
 800b2dc:	e7e2      	b.n	800b2a4 <_dtoa_r+0xa2c>
 800b2de:	9b03      	ldr	r3, [sp, #12]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	db04      	blt.n	800b2ee <_dtoa_r+0xa76>
 800b2e4:	9906      	ldr	r1, [sp, #24]
 800b2e6:	430b      	orrs	r3, r1
 800b2e8:	9904      	ldr	r1, [sp, #16]
 800b2ea:	430b      	orrs	r3, r1
 800b2ec:	d122      	bne.n	800b334 <_dtoa_r+0xabc>
 800b2ee:	2a00      	cmp	r2, #0
 800b2f0:	ddee      	ble.n	800b2d0 <_dtoa_r+0xa58>
 800b2f2:	ee18 1a10 	vmov	r1, s16
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f000 fe95 	bl	800c028 <__lshift>
 800b2fe:	4631      	mov	r1, r6
 800b300:	ee08 0a10 	vmov	s16, r0
 800b304:	f000 ff00 	bl	800c108 <__mcmp>
 800b308:	2800      	cmp	r0, #0
 800b30a:	dc03      	bgt.n	800b314 <_dtoa_r+0xa9c>
 800b30c:	d1e0      	bne.n	800b2d0 <_dtoa_r+0xa58>
 800b30e:	f01a 0f01 	tst.w	sl, #1
 800b312:	d0dd      	beq.n	800b2d0 <_dtoa_r+0xa58>
 800b314:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b318:	d1d7      	bne.n	800b2ca <_dtoa_r+0xa52>
 800b31a:	2339      	movs	r3, #57	; 0x39
 800b31c:	f88b 3000 	strb.w	r3, [fp]
 800b320:	462b      	mov	r3, r5
 800b322:	461d      	mov	r5, r3
 800b324:	3b01      	subs	r3, #1
 800b326:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b32a:	2a39      	cmp	r2, #57	; 0x39
 800b32c:	d071      	beq.n	800b412 <_dtoa_r+0xb9a>
 800b32e:	3201      	adds	r2, #1
 800b330:	701a      	strb	r2, [r3, #0]
 800b332:	e746      	b.n	800b1c2 <_dtoa_r+0x94a>
 800b334:	2a00      	cmp	r2, #0
 800b336:	dd07      	ble.n	800b348 <_dtoa_r+0xad0>
 800b338:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b33c:	d0ed      	beq.n	800b31a <_dtoa_r+0xaa2>
 800b33e:	f10a 0301 	add.w	r3, sl, #1
 800b342:	f88b 3000 	strb.w	r3, [fp]
 800b346:	e73c      	b.n	800b1c2 <_dtoa_r+0x94a>
 800b348:	9b05      	ldr	r3, [sp, #20]
 800b34a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b34e:	4599      	cmp	r9, r3
 800b350:	d047      	beq.n	800b3e2 <_dtoa_r+0xb6a>
 800b352:	ee18 1a10 	vmov	r1, s16
 800b356:	2300      	movs	r3, #0
 800b358:	220a      	movs	r2, #10
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 fc6a 	bl	800bc34 <__multadd>
 800b360:	45b8      	cmp	r8, r7
 800b362:	ee08 0a10 	vmov	s16, r0
 800b366:	f04f 0300 	mov.w	r3, #0
 800b36a:	f04f 020a 	mov.w	r2, #10
 800b36e:	4641      	mov	r1, r8
 800b370:	4620      	mov	r0, r4
 800b372:	d106      	bne.n	800b382 <_dtoa_r+0xb0a>
 800b374:	f000 fc5e 	bl	800bc34 <__multadd>
 800b378:	4680      	mov	r8, r0
 800b37a:	4607      	mov	r7, r0
 800b37c:	f109 0901 	add.w	r9, r9, #1
 800b380:	e772      	b.n	800b268 <_dtoa_r+0x9f0>
 800b382:	f000 fc57 	bl	800bc34 <__multadd>
 800b386:	4639      	mov	r1, r7
 800b388:	4680      	mov	r8, r0
 800b38a:	2300      	movs	r3, #0
 800b38c:	220a      	movs	r2, #10
 800b38e:	4620      	mov	r0, r4
 800b390:	f000 fc50 	bl	800bc34 <__multadd>
 800b394:	4607      	mov	r7, r0
 800b396:	e7f1      	b.n	800b37c <_dtoa_r+0xb04>
 800b398:	9b03      	ldr	r3, [sp, #12]
 800b39a:	9302      	str	r3, [sp, #8]
 800b39c:	9d01      	ldr	r5, [sp, #4]
 800b39e:	ee18 0a10 	vmov	r0, s16
 800b3a2:	4631      	mov	r1, r6
 800b3a4:	f7ff f9dc 	bl	800a760 <quorem>
 800b3a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b3ac:	9b01      	ldr	r3, [sp, #4]
 800b3ae:	f805 ab01 	strb.w	sl, [r5], #1
 800b3b2:	1aea      	subs	r2, r5, r3
 800b3b4:	9b02      	ldr	r3, [sp, #8]
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	dd09      	ble.n	800b3ce <_dtoa_r+0xb56>
 800b3ba:	ee18 1a10 	vmov	r1, s16
 800b3be:	2300      	movs	r3, #0
 800b3c0:	220a      	movs	r2, #10
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f000 fc36 	bl	800bc34 <__multadd>
 800b3c8:	ee08 0a10 	vmov	s16, r0
 800b3cc:	e7e7      	b.n	800b39e <_dtoa_r+0xb26>
 800b3ce:	9b02      	ldr	r3, [sp, #8]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	bfc8      	it	gt
 800b3d4:	461d      	movgt	r5, r3
 800b3d6:	9b01      	ldr	r3, [sp, #4]
 800b3d8:	bfd8      	it	le
 800b3da:	2501      	movle	r5, #1
 800b3dc:	441d      	add	r5, r3
 800b3de:	f04f 0800 	mov.w	r8, #0
 800b3e2:	ee18 1a10 	vmov	r1, s16
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f000 fe1d 	bl	800c028 <__lshift>
 800b3ee:	4631      	mov	r1, r6
 800b3f0:	ee08 0a10 	vmov	s16, r0
 800b3f4:	f000 fe88 	bl	800c108 <__mcmp>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	dc91      	bgt.n	800b320 <_dtoa_r+0xaa8>
 800b3fc:	d102      	bne.n	800b404 <_dtoa_r+0xb8c>
 800b3fe:	f01a 0f01 	tst.w	sl, #1
 800b402:	d18d      	bne.n	800b320 <_dtoa_r+0xaa8>
 800b404:	462b      	mov	r3, r5
 800b406:	461d      	mov	r5, r3
 800b408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b40c:	2a30      	cmp	r2, #48	; 0x30
 800b40e:	d0fa      	beq.n	800b406 <_dtoa_r+0xb8e>
 800b410:	e6d7      	b.n	800b1c2 <_dtoa_r+0x94a>
 800b412:	9a01      	ldr	r2, [sp, #4]
 800b414:	429a      	cmp	r2, r3
 800b416:	d184      	bne.n	800b322 <_dtoa_r+0xaaa>
 800b418:	9b00      	ldr	r3, [sp, #0]
 800b41a:	3301      	adds	r3, #1
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	2331      	movs	r3, #49	; 0x31
 800b420:	7013      	strb	r3, [r2, #0]
 800b422:	e6ce      	b.n	800b1c2 <_dtoa_r+0x94a>
 800b424:	4b09      	ldr	r3, [pc, #36]	; (800b44c <_dtoa_r+0xbd4>)
 800b426:	f7ff ba95 	b.w	800a954 <_dtoa_r+0xdc>
 800b42a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f47f aa6e 	bne.w	800a90e <_dtoa_r+0x96>
 800b432:	4b07      	ldr	r3, [pc, #28]	; (800b450 <_dtoa_r+0xbd8>)
 800b434:	f7ff ba8e 	b.w	800a954 <_dtoa_r+0xdc>
 800b438:	9b02      	ldr	r3, [sp, #8]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	dcae      	bgt.n	800b39c <_dtoa_r+0xb24>
 800b43e:	9b06      	ldr	r3, [sp, #24]
 800b440:	2b02      	cmp	r3, #2
 800b442:	f73f aea8 	bgt.w	800b196 <_dtoa_r+0x91e>
 800b446:	e7a9      	b.n	800b39c <_dtoa_r+0xb24>
 800b448:	0800ee30 	.word	0x0800ee30
 800b44c:	0800ec34 	.word	0x0800ec34
 800b450:	0800edb1 	.word	0x0800edb1

0800b454 <rshift>:
 800b454:	6903      	ldr	r3, [r0, #16]
 800b456:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b45a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b45e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b462:	f100 0414 	add.w	r4, r0, #20
 800b466:	dd45      	ble.n	800b4f4 <rshift+0xa0>
 800b468:	f011 011f 	ands.w	r1, r1, #31
 800b46c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b470:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b474:	d10c      	bne.n	800b490 <rshift+0x3c>
 800b476:	f100 0710 	add.w	r7, r0, #16
 800b47a:	4629      	mov	r1, r5
 800b47c:	42b1      	cmp	r1, r6
 800b47e:	d334      	bcc.n	800b4ea <rshift+0x96>
 800b480:	1a9b      	subs	r3, r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	1eea      	subs	r2, r5, #3
 800b486:	4296      	cmp	r6, r2
 800b488:	bf38      	it	cc
 800b48a:	2300      	movcc	r3, #0
 800b48c:	4423      	add	r3, r4
 800b48e:	e015      	b.n	800b4bc <rshift+0x68>
 800b490:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b494:	f1c1 0820 	rsb	r8, r1, #32
 800b498:	40cf      	lsrs	r7, r1
 800b49a:	f105 0e04 	add.w	lr, r5, #4
 800b49e:	46a1      	mov	r9, r4
 800b4a0:	4576      	cmp	r6, lr
 800b4a2:	46f4      	mov	ip, lr
 800b4a4:	d815      	bhi.n	800b4d2 <rshift+0x7e>
 800b4a6:	1a9a      	subs	r2, r3, r2
 800b4a8:	0092      	lsls	r2, r2, #2
 800b4aa:	3a04      	subs	r2, #4
 800b4ac:	3501      	adds	r5, #1
 800b4ae:	42ae      	cmp	r6, r5
 800b4b0:	bf38      	it	cc
 800b4b2:	2200      	movcc	r2, #0
 800b4b4:	18a3      	adds	r3, r4, r2
 800b4b6:	50a7      	str	r7, [r4, r2]
 800b4b8:	b107      	cbz	r7, 800b4bc <rshift+0x68>
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	1b1a      	subs	r2, r3, r4
 800b4be:	42a3      	cmp	r3, r4
 800b4c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b4c4:	bf08      	it	eq
 800b4c6:	2300      	moveq	r3, #0
 800b4c8:	6102      	str	r2, [r0, #16]
 800b4ca:	bf08      	it	eq
 800b4cc:	6143      	streq	r3, [r0, #20]
 800b4ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4d2:	f8dc c000 	ldr.w	ip, [ip]
 800b4d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b4da:	ea4c 0707 	orr.w	r7, ip, r7
 800b4de:	f849 7b04 	str.w	r7, [r9], #4
 800b4e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b4e6:	40cf      	lsrs	r7, r1
 800b4e8:	e7da      	b.n	800b4a0 <rshift+0x4c>
 800b4ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800b4ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800b4f2:	e7c3      	b.n	800b47c <rshift+0x28>
 800b4f4:	4623      	mov	r3, r4
 800b4f6:	e7e1      	b.n	800b4bc <rshift+0x68>

0800b4f8 <__hexdig_fun>:
 800b4f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b4fc:	2b09      	cmp	r3, #9
 800b4fe:	d802      	bhi.n	800b506 <__hexdig_fun+0xe>
 800b500:	3820      	subs	r0, #32
 800b502:	b2c0      	uxtb	r0, r0
 800b504:	4770      	bx	lr
 800b506:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b50a:	2b05      	cmp	r3, #5
 800b50c:	d801      	bhi.n	800b512 <__hexdig_fun+0x1a>
 800b50e:	3847      	subs	r0, #71	; 0x47
 800b510:	e7f7      	b.n	800b502 <__hexdig_fun+0xa>
 800b512:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b516:	2b05      	cmp	r3, #5
 800b518:	d801      	bhi.n	800b51e <__hexdig_fun+0x26>
 800b51a:	3827      	subs	r0, #39	; 0x27
 800b51c:	e7f1      	b.n	800b502 <__hexdig_fun+0xa>
 800b51e:	2000      	movs	r0, #0
 800b520:	4770      	bx	lr
	...

0800b524 <__gethex>:
 800b524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b528:	ed2d 8b02 	vpush	{d8}
 800b52c:	b089      	sub	sp, #36	; 0x24
 800b52e:	ee08 0a10 	vmov	s16, r0
 800b532:	9304      	str	r3, [sp, #16]
 800b534:	4bb4      	ldr	r3, [pc, #720]	; (800b808 <__gethex+0x2e4>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	9301      	str	r3, [sp, #4]
 800b53a:	4618      	mov	r0, r3
 800b53c:	468b      	mov	fp, r1
 800b53e:	4690      	mov	r8, r2
 800b540:	f7f4 fe4e 	bl	80001e0 <strlen>
 800b544:	9b01      	ldr	r3, [sp, #4]
 800b546:	f8db 2000 	ldr.w	r2, [fp]
 800b54a:	4403      	add	r3, r0
 800b54c:	4682      	mov	sl, r0
 800b54e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b552:	9305      	str	r3, [sp, #20]
 800b554:	1c93      	adds	r3, r2, #2
 800b556:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b55a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b55e:	32fe      	adds	r2, #254	; 0xfe
 800b560:	18d1      	adds	r1, r2, r3
 800b562:	461f      	mov	r7, r3
 800b564:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b568:	9100      	str	r1, [sp, #0]
 800b56a:	2830      	cmp	r0, #48	; 0x30
 800b56c:	d0f8      	beq.n	800b560 <__gethex+0x3c>
 800b56e:	f7ff ffc3 	bl	800b4f8 <__hexdig_fun>
 800b572:	4604      	mov	r4, r0
 800b574:	2800      	cmp	r0, #0
 800b576:	d13a      	bne.n	800b5ee <__gethex+0xca>
 800b578:	9901      	ldr	r1, [sp, #4]
 800b57a:	4652      	mov	r2, sl
 800b57c:	4638      	mov	r0, r7
 800b57e:	f001 fa23 	bl	800c9c8 <strncmp>
 800b582:	4605      	mov	r5, r0
 800b584:	2800      	cmp	r0, #0
 800b586:	d168      	bne.n	800b65a <__gethex+0x136>
 800b588:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b58c:	eb07 060a 	add.w	r6, r7, sl
 800b590:	f7ff ffb2 	bl	800b4f8 <__hexdig_fun>
 800b594:	2800      	cmp	r0, #0
 800b596:	d062      	beq.n	800b65e <__gethex+0x13a>
 800b598:	4633      	mov	r3, r6
 800b59a:	7818      	ldrb	r0, [r3, #0]
 800b59c:	2830      	cmp	r0, #48	; 0x30
 800b59e:	461f      	mov	r7, r3
 800b5a0:	f103 0301 	add.w	r3, r3, #1
 800b5a4:	d0f9      	beq.n	800b59a <__gethex+0x76>
 800b5a6:	f7ff ffa7 	bl	800b4f8 <__hexdig_fun>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	fab0 f480 	clz	r4, r0
 800b5b0:	0964      	lsrs	r4, r4, #5
 800b5b2:	4635      	mov	r5, r6
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	463a      	mov	r2, r7
 800b5b8:	4616      	mov	r6, r2
 800b5ba:	3201      	adds	r2, #1
 800b5bc:	7830      	ldrb	r0, [r6, #0]
 800b5be:	f7ff ff9b 	bl	800b4f8 <__hexdig_fun>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d1f8      	bne.n	800b5b8 <__gethex+0x94>
 800b5c6:	9901      	ldr	r1, [sp, #4]
 800b5c8:	4652      	mov	r2, sl
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	f001 f9fc 	bl	800c9c8 <strncmp>
 800b5d0:	b980      	cbnz	r0, 800b5f4 <__gethex+0xd0>
 800b5d2:	b94d      	cbnz	r5, 800b5e8 <__gethex+0xc4>
 800b5d4:	eb06 050a 	add.w	r5, r6, sl
 800b5d8:	462a      	mov	r2, r5
 800b5da:	4616      	mov	r6, r2
 800b5dc:	3201      	adds	r2, #1
 800b5de:	7830      	ldrb	r0, [r6, #0]
 800b5e0:	f7ff ff8a 	bl	800b4f8 <__hexdig_fun>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	d1f8      	bne.n	800b5da <__gethex+0xb6>
 800b5e8:	1bad      	subs	r5, r5, r6
 800b5ea:	00ad      	lsls	r5, r5, #2
 800b5ec:	e004      	b.n	800b5f8 <__gethex+0xd4>
 800b5ee:	2400      	movs	r4, #0
 800b5f0:	4625      	mov	r5, r4
 800b5f2:	e7e0      	b.n	800b5b6 <__gethex+0x92>
 800b5f4:	2d00      	cmp	r5, #0
 800b5f6:	d1f7      	bne.n	800b5e8 <__gethex+0xc4>
 800b5f8:	7833      	ldrb	r3, [r6, #0]
 800b5fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b5fe:	2b50      	cmp	r3, #80	; 0x50
 800b600:	d13b      	bne.n	800b67a <__gethex+0x156>
 800b602:	7873      	ldrb	r3, [r6, #1]
 800b604:	2b2b      	cmp	r3, #43	; 0x2b
 800b606:	d02c      	beq.n	800b662 <__gethex+0x13e>
 800b608:	2b2d      	cmp	r3, #45	; 0x2d
 800b60a:	d02e      	beq.n	800b66a <__gethex+0x146>
 800b60c:	1c71      	adds	r1, r6, #1
 800b60e:	f04f 0900 	mov.w	r9, #0
 800b612:	7808      	ldrb	r0, [r1, #0]
 800b614:	f7ff ff70 	bl	800b4f8 <__hexdig_fun>
 800b618:	1e43      	subs	r3, r0, #1
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	2b18      	cmp	r3, #24
 800b61e:	d82c      	bhi.n	800b67a <__gethex+0x156>
 800b620:	f1a0 0210 	sub.w	r2, r0, #16
 800b624:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b628:	f7ff ff66 	bl	800b4f8 <__hexdig_fun>
 800b62c:	1e43      	subs	r3, r0, #1
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	2b18      	cmp	r3, #24
 800b632:	d91d      	bls.n	800b670 <__gethex+0x14c>
 800b634:	f1b9 0f00 	cmp.w	r9, #0
 800b638:	d000      	beq.n	800b63c <__gethex+0x118>
 800b63a:	4252      	negs	r2, r2
 800b63c:	4415      	add	r5, r2
 800b63e:	f8cb 1000 	str.w	r1, [fp]
 800b642:	b1e4      	cbz	r4, 800b67e <__gethex+0x15a>
 800b644:	9b00      	ldr	r3, [sp, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	bf14      	ite	ne
 800b64a:	2700      	movne	r7, #0
 800b64c:	2706      	moveq	r7, #6
 800b64e:	4638      	mov	r0, r7
 800b650:	b009      	add	sp, #36	; 0x24
 800b652:	ecbd 8b02 	vpop	{d8}
 800b656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65a:	463e      	mov	r6, r7
 800b65c:	4625      	mov	r5, r4
 800b65e:	2401      	movs	r4, #1
 800b660:	e7ca      	b.n	800b5f8 <__gethex+0xd4>
 800b662:	f04f 0900 	mov.w	r9, #0
 800b666:	1cb1      	adds	r1, r6, #2
 800b668:	e7d3      	b.n	800b612 <__gethex+0xee>
 800b66a:	f04f 0901 	mov.w	r9, #1
 800b66e:	e7fa      	b.n	800b666 <__gethex+0x142>
 800b670:	230a      	movs	r3, #10
 800b672:	fb03 0202 	mla	r2, r3, r2, r0
 800b676:	3a10      	subs	r2, #16
 800b678:	e7d4      	b.n	800b624 <__gethex+0x100>
 800b67a:	4631      	mov	r1, r6
 800b67c:	e7df      	b.n	800b63e <__gethex+0x11a>
 800b67e:	1bf3      	subs	r3, r6, r7
 800b680:	3b01      	subs	r3, #1
 800b682:	4621      	mov	r1, r4
 800b684:	2b07      	cmp	r3, #7
 800b686:	dc0b      	bgt.n	800b6a0 <__gethex+0x17c>
 800b688:	ee18 0a10 	vmov	r0, s16
 800b68c:	f000 fa70 	bl	800bb70 <_Balloc>
 800b690:	4604      	mov	r4, r0
 800b692:	b940      	cbnz	r0, 800b6a6 <__gethex+0x182>
 800b694:	4b5d      	ldr	r3, [pc, #372]	; (800b80c <__gethex+0x2e8>)
 800b696:	4602      	mov	r2, r0
 800b698:	21de      	movs	r1, #222	; 0xde
 800b69a:	485d      	ldr	r0, [pc, #372]	; (800b810 <__gethex+0x2ec>)
 800b69c:	f001 f9b6 	bl	800ca0c <__assert_func>
 800b6a0:	3101      	adds	r1, #1
 800b6a2:	105b      	asrs	r3, r3, #1
 800b6a4:	e7ee      	b.n	800b684 <__gethex+0x160>
 800b6a6:	f100 0914 	add.w	r9, r0, #20
 800b6aa:	f04f 0b00 	mov.w	fp, #0
 800b6ae:	f1ca 0301 	rsb	r3, sl, #1
 800b6b2:	f8cd 9008 	str.w	r9, [sp, #8]
 800b6b6:	f8cd b000 	str.w	fp, [sp]
 800b6ba:	9306      	str	r3, [sp, #24]
 800b6bc:	42b7      	cmp	r7, r6
 800b6be:	d340      	bcc.n	800b742 <__gethex+0x21e>
 800b6c0:	9802      	ldr	r0, [sp, #8]
 800b6c2:	9b00      	ldr	r3, [sp, #0]
 800b6c4:	f840 3b04 	str.w	r3, [r0], #4
 800b6c8:	eba0 0009 	sub.w	r0, r0, r9
 800b6cc:	1080      	asrs	r0, r0, #2
 800b6ce:	0146      	lsls	r6, r0, #5
 800b6d0:	6120      	str	r0, [r4, #16]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 fb3e 	bl	800bd54 <__hi0bits>
 800b6d8:	1a30      	subs	r0, r6, r0
 800b6da:	f8d8 6000 	ldr.w	r6, [r8]
 800b6de:	42b0      	cmp	r0, r6
 800b6e0:	dd63      	ble.n	800b7aa <__gethex+0x286>
 800b6e2:	1b87      	subs	r7, r0, r6
 800b6e4:	4639      	mov	r1, r7
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f000 fee2 	bl	800c4b0 <__any_on>
 800b6ec:	4682      	mov	sl, r0
 800b6ee:	b1a8      	cbz	r0, 800b71c <__gethex+0x1f8>
 800b6f0:	1e7b      	subs	r3, r7, #1
 800b6f2:	1159      	asrs	r1, r3, #5
 800b6f4:	f003 021f 	and.w	r2, r3, #31
 800b6f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b6fc:	f04f 0a01 	mov.w	sl, #1
 800b700:	fa0a f202 	lsl.w	r2, sl, r2
 800b704:	420a      	tst	r2, r1
 800b706:	d009      	beq.n	800b71c <__gethex+0x1f8>
 800b708:	4553      	cmp	r3, sl
 800b70a:	dd05      	ble.n	800b718 <__gethex+0x1f4>
 800b70c:	1eb9      	subs	r1, r7, #2
 800b70e:	4620      	mov	r0, r4
 800b710:	f000 fece 	bl	800c4b0 <__any_on>
 800b714:	2800      	cmp	r0, #0
 800b716:	d145      	bne.n	800b7a4 <__gethex+0x280>
 800b718:	f04f 0a02 	mov.w	sl, #2
 800b71c:	4639      	mov	r1, r7
 800b71e:	4620      	mov	r0, r4
 800b720:	f7ff fe98 	bl	800b454 <rshift>
 800b724:	443d      	add	r5, r7
 800b726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b72a:	42ab      	cmp	r3, r5
 800b72c:	da4c      	bge.n	800b7c8 <__gethex+0x2a4>
 800b72e:	ee18 0a10 	vmov	r0, s16
 800b732:	4621      	mov	r1, r4
 800b734:	f000 fa5c 	bl	800bbf0 <_Bfree>
 800b738:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b73a:	2300      	movs	r3, #0
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	27a3      	movs	r7, #163	; 0xa3
 800b740:	e785      	b.n	800b64e <__gethex+0x12a>
 800b742:	1e73      	subs	r3, r6, #1
 800b744:	9a05      	ldr	r2, [sp, #20]
 800b746:	9303      	str	r3, [sp, #12]
 800b748:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d019      	beq.n	800b784 <__gethex+0x260>
 800b750:	f1bb 0f20 	cmp.w	fp, #32
 800b754:	d107      	bne.n	800b766 <__gethex+0x242>
 800b756:	9b02      	ldr	r3, [sp, #8]
 800b758:	9a00      	ldr	r2, [sp, #0]
 800b75a:	f843 2b04 	str.w	r2, [r3], #4
 800b75e:	9302      	str	r3, [sp, #8]
 800b760:	2300      	movs	r3, #0
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	469b      	mov	fp, r3
 800b766:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b76a:	f7ff fec5 	bl	800b4f8 <__hexdig_fun>
 800b76e:	9b00      	ldr	r3, [sp, #0]
 800b770:	f000 000f 	and.w	r0, r0, #15
 800b774:	fa00 f00b 	lsl.w	r0, r0, fp
 800b778:	4303      	orrs	r3, r0
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	f10b 0b04 	add.w	fp, fp, #4
 800b780:	9b03      	ldr	r3, [sp, #12]
 800b782:	e00d      	b.n	800b7a0 <__gethex+0x27c>
 800b784:	9b03      	ldr	r3, [sp, #12]
 800b786:	9a06      	ldr	r2, [sp, #24]
 800b788:	4413      	add	r3, r2
 800b78a:	42bb      	cmp	r3, r7
 800b78c:	d3e0      	bcc.n	800b750 <__gethex+0x22c>
 800b78e:	4618      	mov	r0, r3
 800b790:	9901      	ldr	r1, [sp, #4]
 800b792:	9307      	str	r3, [sp, #28]
 800b794:	4652      	mov	r2, sl
 800b796:	f001 f917 	bl	800c9c8 <strncmp>
 800b79a:	9b07      	ldr	r3, [sp, #28]
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d1d7      	bne.n	800b750 <__gethex+0x22c>
 800b7a0:	461e      	mov	r6, r3
 800b7a2:	e78b      	b.n	800b6bc <__gethex+0x198>
 800b7a4:	f04f 0a03 	mov.w	sl, #3
 800b7a8:	e7b8      	b.n	800b71c <__gethex+0x1f8>
 800b7aa:	da0a      	bge.n	800b7c2 <__gethex+0x29e>
 800b7ac:	1a37      	subs	r7, r6, r0
 800b7ae:	4621      	mov	r1, r4
 800b7b0:	ee18 0a10 	vmov	r0, s16
 800b7b4:	463a      	mov	r2, r7
 800b7b6:	f000 fc37 	bl	800c028 <__lshift>
 800b7ba:	1bed      	subs	r5, r5, r7
 800b7bc:	4604      	mov	r4, r0
 800b7be:	f100 0914 	add.w	r9, r0, #20
 800b7c2:	f04f 0a00 	mov.w	sl, #0
 800b7c6:	e7ae      	b.n	800b726 <__gethex+0x202>
 800b7c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b7cc:	42a8      	cmp	r0, r5
 800b7ce:	dd72      	ble.n	800b8b6 <__gethex+0x392>
 800b7d0:	1b45      	subs	r5, r0, r5
 800b7d2:	42ae      	cmp	r6, r5
 800b7d4:	dc36      	bgt.n	800b844 <__gethex+0x320>
 800b7d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d02a      	beq.n	800b834 <__gethex+0x310>
 800b7de:	2b03      	cmp	r3, #3
 800b7e0:	d02c      	beq.n	800b83c <__gethex+0x318>
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d11c      	bne.n	800b820 <__gethex+0x2fc>
 800b7e6:	42ae      	cmp	r6, r5
 800b7e8:	d11a      	bne.n	800b820 <__gethex+0x2fc>
 800b7ea:	2e01      	cmp	r6, #1
 800b7ec:	d112      	bne.n	800b814 <__gethex+0x2f0>
 800b7ee:	9a04      	ldr	r2, [sp, #16]
 800b7f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b7f4:	6013      	str	r3, [r2, #0]
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	6123      	str	r3, [r4, #16]
 800b7fa:	f8c9 3000 	str.w	r3, [r9]
 800b7fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b800:	2762      	movs	r7, #98	; 0x62
 800b802:	601c      	str	r4, [r3, #0]
 800b804:	e723      	b.n	800b64e <__gethex+0x12a>
 800b806:	bf00      	nop
 800b808:	0800eea8 	.word	0x0800eea8
 800b80c:	0800ee30 	.word	0x0800ee30
 800b810:	0800ee41 	.word	0x0800ee41
 800b814:	1e71      	subs	r1, r6, #1
 800b816:	4620      	mov	r0, r4
 800b818:	f000 fe4a 	bl	800c4b0 <__any_on>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d1e6      	bne.n	800b7ee <__gethex+0x2ca>
 800b820:	ee18 0a10 	vmov	r0, s16
 800b824:	4621      	mov	r1, r4
 800b826:	f000 f9e3 	bl	800bbf0 <_Bfree>
 800b82a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b82c:	2300      	movs	r3, #0
 800b82e:	6013      	str	r3, [r2, #0]
 800b830:	2750      	movs	r7, #80	; 0x50
 800b832:	e70c      	b.n	800b64e <__gethex+0x12a>
 800b834:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1f2      	bne.n	800b820 <__gethex+0x2fc>
 800b83a:	e7d8      	b.n	800b7ee <__gethex+0x2ca>
 800b83c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d1d5      	bne.n	800b7ee <__gethex+0x2ca>
 800b842:	e7ed      	b.n	800b820 <__gethex+0x2fc>
 800b844:	1e6f      	subs	r7, r5, #1
 800b846:	f1ba 0f00 	cmp.w	sl, #0
 800b84a:	d131      	bne.n	800b8b0 <__gethex+0x38c>
 800b84c:	b127      	cbz	r7, 800b858 <__gethex+0x334>
 800b84e:	4639      	mov	r1, r7
 800b850:	4620      	mov	r0, r4
 800b852:	f000 fe2d 	bl	800c4b0 <__any_on>
 800b856:	4682      	mov	sl, r0
 800b858:	117b      	asrs	r3, r7, #5
 800b85a:	2101      	movs	r1, #1
 800b85c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b860:	f007 071f 	and.w	r7, r7, #31
 800b864:	fa01 f707 	lsl.w	r7, r1, r7
 800b868:	421f      	tst	r7, r3
 800b86a:	4629      	mov	r1, r5
 800b86c:	4620      	mov	r0, r4
 800b86e:	bf18      	it	ne
 800b870:	f04a 0a02 	orrne.w	sl, sl, #2
 800b874:	1b76      	subs	r6, r6, r5
 800b876:	f7ff fded 	bl	800b454 <rshift>
 800b87a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b87e:	2702      	movs	r7, #2
 800b880:	f1ba 0f00 	cmp.w	sl, #0
 800b884:	d048      	beq.n	800b918 <__gethex+0x3f4>
 800b886:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b88a:	2b02      	cmp	r3, #2
 800b88c:	d015      	beq.n	800b8ba <__gethex+0x396>
 800b88e:	2b03      	cmp	r3, #3
 800b890:	d017      	beq.n	800b8c2 <__gethex+0x39e>
 800b892:	2b01      	cmp	r3, #1
 800b894:	d109      	bne.n	800b8aa <__gethex+0x386>
 800b896:	f01a 0f02 	tst.w	sl, #2
 800b89a:	d006      	beq.n	800b8aa <__gethex+0x386>
 800b89c:	f8d9 0000 	ldr.w	r0, [r9]
 800b8a0:	ea4a 0a00 	orr.w	sl, sl, r0
 800b8a4:	f01a 0f01 	tst.w	sl, #1
 800b8a8:	d10e      	bne.n	800b8c8 <__gethex+0x3a4>
 800b8aa:	f047 0710 	orr.w	r7, r7, #16
 800b8ae:	e033      	b.n	800b918 <__gethex+0x3f4>
 800b8b0:	f04f 0a01 	mov.w	sl, #1
 800b8b4:	e7d0      	b.n	800b858 <__gethex+0x334>
 800b8b6:	2701      	movs	r7, #1
 800b8b8:	e7e2      	b.n	800b880 <__gethex+0x35c>
 800b8ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8bc:	f1c3 0301 	rsb	r3, r3, #1
 800b8c0:	9315      	str	r3, [sp, #84]	; 0x54
 800b8c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d0f0      	beq.n	800b8aa <__gethex+0x386>
 800b8c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b8cc:	f104 0314 	add.w	r3, r4, #20
 800b8d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b8d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b8d8:	f04f 0c00 	mov.w	ip, #0
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b8e6:	d01c      	beq.n	800b922 <__gethex+0x3fe>
 800b8e8:	3201      	adds	r2, #1
 800b8ea:	6002      	str	r2, [r0, #0]
 800b8ec:	2f02      	cmp	r7, #2
 800b8ee:	f104 0314 	add.w	r3, r4, #20
 800b8f2:	d13f      	bne.n	800b974 <__gethex+0x450>
 800b8f4:	f8d8 2000 	ldr.w	r2, [r8]
 800b8f8:	3a01      	subs	r2, #1
 800b8fa:	42b2      	cmp	r2, r6
 800b8fc:	d10a      	bne.n	800b914 <__gethex+0x3f0>
 800b8fe:	1171      	asrs	r1, r6, #5
 800b900:	2201      	movs	r2, #1
 800b902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b906:	f006 061f 	and.w	r6, r6, #31
 800b90a:	fa02 f606 	lsl.w	r6, r2, r6
 800b90e:	421e      	tst	r6, r3
 800b910:	bf18      	it	ne
 800b912:	4617      	movne	r7, r2
 800b914:	f047 0720 	orr.w	r7, r7, #32
 800b918:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b91a:	601c      	str	r4, [r3, #0]
 800b91c:	9b04      	ldr	r3, [sp, #16]
 800b91e:	601d      	str	r5, [r3, #0]
 800b920:	e695      	b.n	800b64e <__gethex+0x12a>
 800b922:	4299      	cmp	r1, r3
 800b924:	f843 cc04 	str.w	ip, [r3, #-4]
 800b928:	d8d8      	bhi.n	800b8dc <__gethex+0x3b8>
 800b92a:	68a3      	ldr	r3, [r4, #8]
 800b92c:	459b      	cmp	fp, r3
 800b92e:	db19      	blt.n	800b964 <__gethex+0x440>
 800b930:	6861      	ldr	r1, [r4, #4]
 800b932:	ee18 0a10 	vmov	r0, s16
 800b936:	3101      	adds	r1, #1
 800b938:	f000 f91a 	bl	800bb70 <_Balloc>
 800b93c:	4681      	mov	r9, r0
 800b93e:	b918      	cbnz	r0, 800b948 <__gethex+0x424>
 800b940:	4b1a      	ldr	r3, [pc, #104]	; (800b9ac <__gethex+0x488>)
 800b942:	4602      	mov	r2, r0
 800b944:	2184      	movs	r1, #132	; 0x84
 800b946:	e6a8      	b.n	800b69a <__gethex+0x176>
 800b948:	6922      	ldr	r2, [r4, #16]
 800b94a:	3202      	adds	r2, #2
 800b94c:	f104 010c 	add.w	r1, r4, #12
 800b950:	0092      	lsls	r2, r2, #2
 800b952:	300c      	adds	r0, #12
 800b954:	f7fd f9a0 	bl	8008c98 <memcpy>
 800b958:	4621      	mov	r1, r4
 800b95a:	ee18 0a10 	vmov	r0, s16
 800b95e:	f000 f947 	bl	800bbf0 <_Bfree>
 800b962:	464c      	mov	r4, r9
 800b964:	6923      	ldr	r3, [r4, #16]
 800b966:	1c5a      	adds	r2, r3, #1
 800b968:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b96c:	6122      	str	r2, [r4, #16]
 800b96e:	2201      	movs	r2, #1
 800b970:	615a      	str	r2, [r3, #20]
 800b972:	e7bb      	b.n	800b8ec <__gethex+0x3c8>
 800b974:	6922      	ldr	r2, [r4, #16]
 800b976:	455a      	cmp	r2, fp
 800b978:	dd0b      	ble.n	800b992 <__gethex+0x46e>
 800b97a:	2101      	movs	r1, #1
 800b97c:	4620      	mov	r0, r4
 800b97e:	f7ff fd69 	bl	800b454 <rshift>
 800b982:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b986:	3501      	adds	r5, #1
 800b988:	42ab      	cmp	r3, r5
 800b98a:	f6ff aed0 	blt.w	800b72e <__gethex+0x20a>
 800b98e:	2701      	movs	r7, #1
 800b990:	e7c0      	b.n	800b914 <__gethex+0x3f0>
 800b992:	f016 061f 	ands.w	r6, r6, #31
 800b996:	d0fa      	beq.n	800b98e <__gethex+0x46a>
 800b998:	4453      	add	r3, sl
 800b99a:	f1c6 0620 	rsb	r6, r6, #32
 800b99e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b9a2:	f000 f9d7 	bl	800bd54 <__hi0bits>
 800b9a6:	42b0      	cmp	r0, r6
 800b9a8:	dbe7      	blt.n	800b97a <__gethex+0x456>
 800b9aa:	e7f0      	b.n	800b98e <__gethex+0x46a>
 800b9ac:	0800ee30 	.word	0x0800ee30

0800b9b0 <L_shift>:
 800b9b0:	f1c2 0208 	rsb	r2, r2, #8
 800b9b4:	0092      	lsls	r2, r2, #2
 800b9b6:	b570      	push	{r4, r5, r6, lr}
 800b9b8:	f1c2 0620 	rsb	r6, r2, #32
 800b9bc:	6843      	ldr	r3, [r0, #4]
 800b9be:	6804      	ldr	r4, [r0, #0]
 800b9c0:	fa03 f506 	lsl.w	r5, r3, r6
 800b9c4:	432c      	orrs	r4, r5
 800b9c6:	40d3      	lsrs	r3, r2
 800b9c8:	6004      	str	r4, [r0, #0]
 800b9ca:	f840 3f04 	str.w	r3, [r0, #4]!
 800b9ce:	4288      	cmp	r0, r1
 800b9d0:	d3f4      	bcc.n	800b9bc <L_shift+0xc>
 800b9d2:	bd70      	pop	{r4, r5, r6, pc}

0800b9d4 <__match>:
 800b9d4:	b530      	push	{r4, r5, lr}
 800b9d6:	6803      	ldr	r3, [r0, #0]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9de:	b914      	cbnz	r4, 800b9e6 <__match+0x12>
 800b9e0:	6003      	str	r3, [r0, #0]
 800b9e2:	2001      	movs	r0, #1
 800b9e4:	bd30      	pop	{r4, r5, pc}
 800b9e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b9ee:	2d19      	cmp	r5, #25
 800b9f0:	bf98      	it	ls
 800b9f2:	3220      	addls	r2, #32
 800b9f4:	42a2      	cmp	r2, r4
 800b9f6:	d0f0      	beq.n	800b9da <__match+0x6>
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	e7f3      	b.n	800b9e4 <__match+0x10>

0800b9fc <__hexnan>:
 800b9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba00:	680b      	ldr	r3, [r1, #0]
 800ba02:	115e      	asrs	r6, r3, #5
 800ba04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ba08:	f013 031f 	ands.w	r3, r3, #31
 800ba0c:	b087      	sub	sp, #28
 800ba0e:	bf18      	it	ne
 800ba10:	3604      	addne	r6, #4
 800ba12:	2500      	movs	r5, #0
 800ba14:	1f37      	subs	r7, r6, #4
 800ba16:	4690      	mov	r8, r2
 800ba18:	6802      	ldr	r2, [r0, #0]
 800ba1a:	9301      	str	r3, [sp, #4]
 800ba1c:	4682      	mov	sl, r0
 800ba1e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ba22:	46b9      	mov	r9, r7
 800ba24:	463c      	mov	r4, r7
 800ba26:	9502      	str	r5, [sp, #8]
 800ba28:	46ab      	mov	fp, r5
 800ba2a:	7851      	ldrb	r1, [r2, #1]
 800ba2c:	1c53      	adds	r3, r2, #1
 800ba2e:	9303      	str	r3, [sp, #12]
 800ba30:	b341      	cbz	r1, 800ba84 <__hexnan+0x88>
 800ba32:	4608      	mov	r0, r1
 800ba34:	9205      	str	r2, [sp, #20]
 800ba36:	9104      	str	r1, [sp, #16]
 800ba38:	f7ff fd5e 	bl	800b4f8 <__hexdig_fun>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	d14f      	bne.n	800bae0 <__hexnan+0xe4>
 800ba40:	9904      	ldr	r1, [sp, #16]
 800ba42:	9a05      	ldr	r2, [sp, #20]
 800ba44:	2920      	cmp	r1, #32
 800ba46:	d818      	bhi.n	800ba7a <__hexnan+0x7e>
 800ba48:	9b02      	ldr	r3, [sp, #8]
 800ba4a:	459b      	cmp	fp, r3
 800ba4c:	dd13      	ble.n	800ba76 <__hexnan+0x7a>
 800ba4e:	454c      	cmp	r4, r9
 800ba50:	d206      	bcs.n	800ba60 <__hexnan+0x64>
 800ba52:	2d07      	cmp	r5, #7
 800ba54:	dc04      	bgt.n	800ba60 <__hexnan+0x64>
 800ba56:	462a      	mov	r2, r5
 800ba58:	4649      	mov	r1, r9
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f7ff ffa8 	bl	800b9b0 <L_shift>
 800ba60:	4544      	cmp	r4, r8
 800ba62:	d950      	bls.n	800bb06 <__hexnan+0x10a>
 800ba64:	2300      	movs	r3, #0
 800ba66:	f1a4 0904 	sub.w	r9, r4, #4
 800ba6a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba6e:	f8cd b008 	str.w	fp, [sp, #8]
 800ba72:	464c      	mov	r4, r9
 800ba74:	461d      	mov	r5, r3
 800ba76:	9a03      	ldr	r2, [sp, #12]
 800ba78:	e7d7      	b.n	800ba2a <__hexnan+0x2e>
 800ba7a:	2929      	cmp	r1, #41	; 0x29
 800ba7c:	d156      	bne.n	800bb2c <__hexnan+0x130>
 800ba7e:	3202      	adds	r2, #2
 800ba80:	f8ca 2000 	str.w	r2, [sl]
 800ba84:	f1bb 0f00 	cmp.w	fp, #0
 800ba88:	d050      	beq.n	800bb2c <__hexnan+0x130>
 800ba8a:	454c      	cmp	r4, r9
 800ba8c:	d206      	bcs.n	800ba9c <__hexnan+0xa0>
 800ba8e:	2d07      	cmp	r5, #7
 800ba90:	dc04      	bgt.n	800ba9c <__hexnan+0xa0>
 800ba92:	462a      	mov	r2, r5
 800ba94:	4649      	mov	r1, r9
 800ba96:	4620      	mov	r0, r4
 800ba98:	f7ff ff8a 	bl	800b9b0 <L_shift>
 800ba9c:	4544      	cmp	r4, r8
 800ba9e:	d934      	bls.n	800bb0a <__hexnan+0x10e>
 800baa0:	f1a8 0204 	sub.w	r2, r8, #4
 800baa4:	4623      	mov	r3, r4
 800baa6:	f853 1b04 	ldr.w	r1, [r3], #4
 800baaa:	f842 1f04 	str.w	r1, [r2, #4]!
 800baae:	429f      	cmp	r7, r3
 800bab0:	d2f9      	bcs.n	800baa6 <__hexnan+0xaa>
 800bab2:	1b3b      	subs	r3, r7, r4
 800bab4:	f023 0303 	bic.w	r3, r3, #3
 800bab8:	3304      	adds	r3, #4
 800baba:	3401      	adds	r4, #1
 800babc:	3e03      	subs	r6, #3
 800babe:	42b4      	cmp	r4, r6
 800bac0:	bf88      	it	hi
 800bac2:	2304      	movhi	r3, #4
 800bac4:	4443      	add	r3, r8
 800bac6:	2200      	movs	r2, #0
 800bac8:	f843 2b04 	str.w	r2, [r3], #4
 800bacc:	429f      	cmp	r7, r3
 800bace:	d2fb      	bcs.n	800bac8 <__hexnan+0xcc>
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	b91b      	cbnz	r3, 800badc <__hexnan+0xe0>
 800bad4:	4547      	cmp	r7, r8
 800bad6:	d127      	bne.n	800bb28 <__hexnan+0x12c>
 800bad8:	2301      	movs	r3, #1
 800bada:	603b      	str	r3, [r7, #0]
 800badc:	2005      	movs	r0, #5
 800bade:	e026      	b.n	800bb2e <__hexnan+0x132>
 800bae0:	3501      	adds	r5, #1
 800bae2:	2d08      	cmp	r5, #8
 800bae4:	f10b 0b01 	add.w	fp, fp, #1
 800bae8:	dd06      	ble.n	800baf8 <__hexnan+0xfc>
 800baea:	4544      	cmp	r4, r8
 800baec:	d9c3      	bls.n	800ba76 <__hexnan+0x7a>
 800baee:	2300      	movs	r3, #0
 800baf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800baf4:	2501      	movs	r5, #1
 800baf6:	3c04      	subs	r4, #4
 800baf8:	6822      	ldr	r2, [r4, #0]
 800bafa:	f000 000f 	and.w	r0, r0, #15
 800bafe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bb02:	6022      	str	r2, [r4, #0]
 800bb04:	e7b7      	b.n	800ba76 <__hexnan+0x7a>
 800bb06:	2508      	movs	r5, #8
 800bb08:	e7b5      	b.n	800ba76 <__hexnan+0x7a>
 800bb0a:	9b01      	ldr	r3, [sp, #4]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d0df      	beq.n	800bad0 <__hexnan+0xd4>
 800bb10:	f04f 32ff 	mov.w	r2, #4294967295
 800bb14:	f1c3 0320 	rsb	r3, r3, #32
 800bb18:	fa22 f303 	lsr.w	r3, r2, r3
 800bb1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bb20:	401a      	ands	r2, r3
 800bb22:	f846 2c04 	str.w	r2, [r6, #-4]
 800bb26:	e7d3      	b.n	800bad0 <__hexnan+0xd4>
 800bb28:	3f04      	subs	r7, #4
 800bb2a:	e7d1      	b.n	800bad0 <__hexnan+0xd4>
 800bb2c:	2004      	movs	r0, #4
 800bb2e:	b007      	add	sp, #28
 800bb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb34 <_localeconv_r>:
 800bb34:	4800      	ldr	r0, [pc, #0]	; (800bb38 <_localeconv_r+0x4>)
 800bb36:	4770      	bx	lr
 800bb38:	2000037c 	.word	0x2000037c

0800bb3c <malloc>:
 800bb3c:	4b02      	ldr	r3, [pc, #8]	; (800bb48 <malloc+0xc>)
 800bb3e:	4601      	mov	r1, r0
 800bb40:	6818      	ldr	r0, [r3, #0]
 800bb42:	f000 bd59 	b.w	800c5f8 <_malloc_r>
 800bb46:	bf00      	nop
 800bb48:	20000224 	.word	0x20000224

0800bb4c <__ascii_mbtowc>:
 800bb4c:	b082      	sub	sp, #8
 800bb4e:	b901      	cbnz	r1, 800bb52 <__ascii_mbtowc+0x6>
 800bb50:	a901      	add	r1, sp, #4
 800bb52:	b142      	cbz	r2, 800bb66 <__ascii_mbtowc+0x1a>
 800bb54:	b14b      	cbz	r3, 800bb6a <__ascii_mbtowc+0x1e>
 800bb56:	7813      	ldrb	r3, [r2, #0]
 800bb58:	600b      	str	r3, [r1, #0]
 800bb5a:	7812      	ldrb	r2, [r2, #0]
 800bb5c:	1e10      	subs	r0, r2, #0
 800bb5e:	bf18      	it	ne
 800bb60:	2001      	movne	r0, #1
 800bb62:	b002      	add	sp, #8
 800bb64:	4770      	bx	lr
 800bb66:	4610      	mov	r0, r2
 800bb68:	e7fb      	b.n	800bb62 <__ascii_mbtowc+0x16>
 800bb6a:	f06f 0001 	mvn.w	r0, #1
 800bb6e:	e7f8      	b.n	800bb62 <__ascii_mbtowc+0x16>

0800bb70 <_Balloc>:
 800bb70:	b570      	push	{r4, r5, r6, lr}
 800bb72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb74:	4604      	mov	r4, r0
 800bb76:	460d      	mov	r5, r1
 800bb78:	b976      	cbnz	r6, 800bb98 <_Balloc+0x28>
 800bb7a:	2010      	movs	r0, #16
 800bb7c:	f7ff ffde 	bl	800bb3c <malloc>
 800bb80:	4602      	mov	r2, r0
 800bb82:	6260      	str	r0, [r4, #36]	; 0x24
 800bb84:	b920      	cbnz	r0, 800bb90 <_Balloc+0x20>
 800bb86:	4b18      	ldr	r3, [pc, #96]	; (800bbe8 <_Balloc+0x78>)
 800bb88:	4818      	ldr	r0, [pc, #96]	; (800bbec <_Balloc+0x7c>)
 800bb8a:	2166      	movs	r1, #102	; 0x66
 800bb8c:	f000 ff3e 	bl	800ca0c <__assert_func>
 800bb90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb94:	6006      	str	r6, [r0, #0]
 800bb96:	60c6      	str	r6, [r0, #12]
 800bb98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb9a:	68f3      	ldr	r3, [r6, #12]
 800bb9c:	b183      	cbz	r3, 800bbc0 <_Balloc+0x50>
 800bb9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bba6:	b9b8      	cbnz	r0, 800bbd8 <_Balloc+0x68>
 800bba8:	2101      	movs	r1, #1
 800bbaa:	fa01 f605 	lsl.w	r6, r1, r5
 800bbae:	1d72      	adds	r2, r6, #5
 800bbb0:	0092      	lsls	r2, r2, #2
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f000 fc9d 	bl	800c4f2 <_calloc_r>
 800bbb8:	b160      	cbz	r0, 800bbd4 <_Balloc+0x64>
 800bbba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bbbe:	e00e      	b.n	800bbde <_Balloc+0x6e>
 800bbc0:	2221      	movs	r2, #33	; 0x21
 800bbc2:	2104      	movs	r1, #4
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f000 fc94 	bl	800c4f2 <_calloc_r>
 800bbca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbcc:	60f0      	str	r0, [r6, #12]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d1e4      	bne.n	800bb9e <_Balloc+0x2e>
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	bd70      	pop	{r4, r5, r6, pc}
 800bbd8:	6802      	ldr	r2, [r0, #0]
 800bbda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bbde:	2300      	movs	r3, #0
 800bbe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbe4:	e7f7      	b.n	800bbd6 <_Balloc+0x66>
 800bbe6:	bf00      	nop
 800bbe8:	0800edbe 	.word	0x0800edbe
 800bbec:	0800eebc 	.word	0x0800eebc

0800bbf0 <_Bfree>:
 800bbf0:	b570      	push	{r4, r5, r6, lr}
 800bbf2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbf4:	4605      	mov	r5, r0
 800bbf6:	460c      	mov	r4, r1
 800bbf8:	b976      	cbnz	r6, 800bc18 <_Bfree+0x28>
 800bbfa:	2010      	movs	r0, #16
 800bbfc:	f7ff ff9e 	bl	800bb3c <malloc>
 800bc00:	4602      	mov	r2, r0
 800bc02:	6268      	str	r0, [r5, #36]	; 0x24
 800bc04:	b920      	cbnz	r0, 800bc10 <_Bfree+0x20>
 800bc06:	4b09      	ldr	r3, [pc, #36]	; (800bc2c <_Bfree+0x3c>)
 800bc08:	4809      	ldr	r0, [pc, #36]	; (800bc30 <_Bfree+0x40>)
 800bc0a:	218a      	movs	r1, #138	; 0x8a
 800bc0c:	f000 fefe 	bl	800ca0c <__assert_func>
 800bc10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc14:	6006      	str	r6, [r0, #0]
 800bc16:	60c6      	str	r6, [r0, #12]
 800bc18:	b13c      	cbz	r4, 800bc2a <_Bfree+0x3a>
 800bc1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bc1c:	6862      	ldr	r2, [r4, #4]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc24:	6021      	str	r1, [r4, #0]
 800bc26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc2a:	bd70      	pop	{r4, r5, r6, pc}
 800bc2c:	0800edbe 	.word	0x0800edbe
 800bc30:	0800eebc 	.word	0x0800eebc

0800bc34 <__multadd>:
 800bc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc38:	690d      	ldr	r5, [r1, #16]
 800bc3a:	4607      	mov	r7, r0
 800bc3c:	460c      	mov	r4, r1
 800bc3e:	461e      	mov	r6, r3
 800bc40:	f101 0c14 	add.w	ip, r1, #20
 800bc44:	2000      	movs	r0, #0
 800bc46:	f8dc 3000 	ldr.w	r3, [ip]
 800bc4a:	b299      	uxth	r1, r3
 800bc4c:	fb02 6101 	mla	r1, r2, r1, r6
 800bc50:	0c1e      	lsrs	r6, r3, #16
 800bc52:	0c0b      	lsrs	r3, r1, #16
 800bc54:	fb02 3306 	mla	r3, r2, r6, r3
 800bc58:	b289      	uxth	r1, r1
 800bc5a:	3001      	adds	r0, #1
 800bc5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc60:	4285      	cmp	r5, r0
 800bc62:	f84c 1b04 	str.w	r1, [ip], #4
 800bc66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc6a:	dcec      	bgt.n	800bc46 <__multadd+0x12>
 800bc6c:	b30e      	cbz	r6, 800bcb2 <__multadd+0x7e>
 800bc6e:	68a3      	ldr	r3, [r4, #8]
 800bc70:	42ab      	cmp	r3, r5
 800bc72:	dc19      	bgt.n	800bca8 <__multadd+0x74>
 800bc74:	6861      	ldr	r1, [r4, #4]
 800bc76:	4638      	mov	r0, r7
 800bc78:	3101      	adds	r1, #1
 800bc7a:	f7ff ff79 	bl	800bb70 <_Balloc>
 800bc7e:	4680      	mov	r8, r0
 800bc80:	b928      	cbnz	r0, 800bc8e <__multadd+0x5a>
 800bc82:	4602      	mov	r2, r0
 800bc84:	4b0c      	ldr	r3, [pc, #48]	; (800bcb8 <__multadd+0x84>)
 800bc86:	480d      	ldr	r0, [pc, #52]	; (800bcbc <__multadd+0x88>)
 800bc88:	21b5      	movs	r1, #181	; 0xb5
 800bc8a:	f000 febf 	bl	800ca0c <__assert_func>
 800bc8e:	6922      	ldr	r2, [r4, #16]
 800bc90:	3202      	adds	r2, #2
 800bc92:	f104 010c 	add.w	r1, r4, #12
 800bc96:	0092      	lsls	r2, r2, #2
 800bc98:	300c      	adds	r0, #12
 800bc9a:	f7fc fffd 	bl	8008c98 <memcpy>
 800bc9e:	4621      	mov	r1, r4
 800bca0:	4638      	mov	r0, r7
 800bca2:	f7ff ffa5 	bl	800bbf0 <_Bfree>
 800bca6:	4644      	mov	r4, r8
 800bca8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bcac:	3501      	adds	r5, #1
 800bcae:	615e      	str	r6, [r3, #20]
 800bcb0:	6125      	str	r5, [r4, #16]
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb8:	0800ee30 	.word	0x0800ee30
 800bcbc:	0800eebc 	.word	0x0800eebc

0800bcc0 <__s2b>:
 800bcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcc4:	460c      	mov	r4, r1
 800bcc6:	4615      	mov	r5, r2
 800bcc8:	461f      	mov	r7, r3
 800bcca:	2209      	movs	r2, #9
 800bccc:	3308      	adds	r3, #8
 800bcce:	4606      	mov	r6, r0
 800bcd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	db09      	blt.n	800bcf0 <__s2b+0x30>
 800bcdc:	4630      	mov	r0, r6
 800bcde:	f7ff ff47 	bl	800bb70 <_Balloc>
 800bce2:	b940      	cbnz	r0, 800bcf6 <__s2b+0x36>
 800bce4:	4602      	mov	r2, r0
 800bce6:	4b19      	ldr	r3, [pc, #100]	; (800bd4c <__s2b+0x8c>)
 800bce8:	4819      	ldr	r0, [pc, #100]	; (800bd50 <__s2b+0x90>)
 800bcea:	21ce      	movs	r1, #206	; 0xce
 800bcec:	f000 fe8e 	bl	800ca0c <__assert_func>
 800bcf0:	0052      	lsls	r2, r2, #1
 800bcf2:	3101      	adds	r1, #1
 800bcf4:	e7f0      	b.n	800bcd8 <__s2b+0x18>
 800bcf6:	9b08      	ldr	r3, [sp, #32]
 800bcf8:	6143      	str	r3, [r0, #20]
 800bcfa:	2d09      	cmp	r5, #9
 800bcfc:	f04f 0301 	mov.w	r3, #1
 800bd00:	6103      	str	r3, [r0, #16]
 800bd02:	dd16      	ble.n	800bd32 <__s2b+0x72>
 800bd04:	f104 0909 	add.w	r9, r4, #9
 800bd08:	46c8      	mov	r8, r9
 800bd0a:	442c      	add	r4, r5
 800bd0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bd10:	4601      	mov	r1, r0
 800bd12:	3b30      	subs	r3, #48	; 0x30
 800bd14:	220a      	movs	r2, #10
 800bd16:	4630      	mov	r0, r6
 800bd18:	f7ff ff8c 	bl	800bc34 <__multadd>
 800bd1c:	45a0      	cmp	r8, r4
 800bd1e:	d1f5      	bne.n	800bd0c <__s2b+0x4c>
 800bd20:	f1a5 0408 	sub.w	r4, r5, #8
 800bd24:	444c      	add	r4, r9
 800bd26:	1b2d      	subs	r5, r5, r4
 800bd28:	1963      	adds	r3, r4, r5
 800bd2a:	42bb      	cmp	r3, r7
 800bd2c:	db04      	blt.n	800bd38 <__s2b+0x78>
 800bd2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd32:	340a      	adds	r4, #10
 800bd34:	2509      	movs	r5, #9
 800bd36:	e7f6      	b.n	800bd26 <__s2b+0x66>
 800bd38:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bd3c:	4601      	mov	r1, r0
 800bd3e:	3b30      	subs	r3, #48	; 0x30
 800bd40:	220a      	movs	r2, #10
 800bd42:	4630      	mov	r0, r6
 800bd44:	f7ff ff76 	bl	800bc34 <__multadd>
 800bd48:	e7ee      	b.n	800bd28 <__s2b+0x68>
 800bd4a:	bf00      	nop
 800bd4c:	0800ee30 	.word	0x0800ee30
 800bd50:	0800eebc 	.word	0x0800eebc

0800bd54 <__hi0bits>:
 800bd54:	0c03      	lsrs	r3, r0, #16
 800bd56:	041b      	lsls	r3, r3, #16
 800bd58:	b9d3      	cbnz	r3, 800bd90 <__hi0bits+0x3c>
 800bd5a:	0400      	lsls	r0, r0, #16
 800bd5c:	2310      	movs	r3, #16
 800bd5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bd62:	bf04      	itt	eq
 800bd64:	0200      	lsleq	r0, r0, #8
 800bd66:	3308      	addeq	r3, #8
 800bd68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bd6c:	bf04      	itt	eq
 800bd6e:	0100      	lsleq	r0, r0, #4
 800bd70:	3304      	addeq	r3, #4
 800bd72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bd76:	bf04      	itt	eq
 800bd78:	0080      	lsleq	r0, r0, #2
 800bd7a:	3302      	addeq	r3, #2
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	db05      	blt.n	800bd8c <__hi0bits+0x38>
 800bd80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bd84:	f103 0301 	add.w	r3, r3, #1
 800bd88:	bf08      	it	eq
 800bd8a:	2320      	moveq	r3, #32
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	4770      	bx	lr
 800bd90:	2300      	movs	r3, #0
 800bd92:	e7e4      	b.n	800bd5e <__hi0bits+0xa>

0800bd94 <__lo0bits>:
 800bd94:	6803      	ldr	r3, [r0, #0]
 800bd96:	f013 0207 	ands.w	r2, r3, #7
 800bd9a:	4601      	mov	r1, r0
 800bd9c:	d00b      	beq.n	800bdb6 <__lo0bits+0x22>
 800bd9e:	07da      	lsls	r2, r3, #31
 800bda0:	d423      	bmi.n	800bdea <__lo0bits+0x56>
 800bda2:	0798      	lsls	r0, r3, #30
 800bda4:	bf49      	itett	mi
 800bda6:	085b      	lsrmi	r3, r3, #1
 800bda8:	089b      	lsrpl	r3, r3, #2
 800bdaa:	2001      	movmi	r0, #1
 800bdac:	600b      	strmi	r3, [r1, #0]
 800bdae:	bf5c      	itt	pl
 800bdb0:	600b      	strpl	r3, [r1, #0]
 800bdb2:	2002      	movpl	r0, #2
 800bdb4:	4770      	bx	lr
 800bdb6:	b298      	uxth	r0, r3
 800bdb8:	b9a8      	cbnz	r0, 800bde6 <__lo0bits+0x52>
 800bdba:	0c1b      	lsrs	r3, r3, #16
 800bdbc:	2010      	movs	r0, #16
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	b90a      	cbnz	r2, 800bdc6 <__lo0bits+0x32>
 800bdc2:	3008      	adds	r0, #8
 800bdc4:	0a1b      	lsrs	r3, r3, #8
 800bdc6:	071a      	lsls	r2, r3, #28
 800bdc8:	bf04      	itt	eq
 800bdca:	091b      	lsreq	r3, r3, #4
 800bdcc:	3004      	addeq	r0, #4
 800bdce:	079a      	lsls	r2, r3, #30
 800bdd0:	bf04      	itt	eq
 800bdd2:	089b      	lsreq	r3, r3, #2
 800bdd4:	3002      	addeq	r0, #2
 800bdd6:	07da      	lsls	r2, r3, #31
 800bdd8:	d403      	bmi.n	800bde2 <__lo0bits+0x4e>
 800bdda:	085b      	lsrs	r3, r3, #1
 800bddc:	f100 0001 	add.w	r0, r0, #1
 800bde0:	d005      	beq.n	800bdee <__lo0bits+0x5a>
 800bde2:	600b      	str	r3, [r1, #0]
 800bde4:	4770      	bx	lr
 800bde6:	4610      	mov	r0, r2
 800bde8:	e7e9      	b.n	800bdbe <__lo0bits+0x2a>
 800bdea:	2000      	movs	r0, #0
 800bdec:	4770      	bx	lr
 800bdee:	2020      	movs	r0, #32
 800bdf0:	4770      	bx	lr
	...

0800bdf4 <__i2b>:
 800bdf4:	b510      	push	{r4, lr}
 800bdf6:	460c      	mov	r4, r1
 800bdf8:	2101      	movs	r1, #1
 800bdfa:	f7ff feb9 	bl	800bb70 <_Balloc>
 800bdfe:	4602      	mov	r2, r0
 800be00:	b928      	cbnz	r0, 800be0e <__i2b+0x1a>
 800be02:	4b05      	ldr	r3, [pc, #20]	; (800be18 <__i2b+0x24>)
 800be04:	4805      	ldr	r0, [pc, #20]	; (800be1c <__i2b+0x28>)
 800be06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800be0a:	f000 fdff 	bl	800ca0c <__assert_func>
 800be0e:	2301      	movs	r3, #1
 800be10:	6144      	str	r4, [r0, #20]
 800be12:	6103      	str	r3, [r0, #16]
 800be14:	bd10      	pop	{r4, pc}
 800be16:	bf00      	nop
 800be18:	0800ee30 	.word	0x0800ee30
 800be1c:	0800eebc 	.word	0x0800eebc

0800be20 <__multiply>:
 800be20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be24:	4691      	mov	r9, r2
 800be26:	690a      	ldr	r2, [r1, #16]
 800be28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	bfb8      	it	lt
 800be30:	460b      	movlt	r3, r1
 800be32:	460c      	mov	r4, r1
 800be34:	bfbc      	itt	lt
 800be36:	464c      	movlt	r4, r9
 800be38:	4699      	movlt	r9, r3
 800be3a:	6927      	ldr	r7, [r4, #16]
 800be3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be40:	68a3      	ldr	r3, [r4, #8]
 800be42:	6861      	ldr	r1, [r4, #4]
 800be44:	eb07 060a 	add.w	r6, r7, sl
 800be48:	42b3      	cmp	r3, r6
 800be4a:	b085      	sub	sp, #20
 800be4c:	bfb8      	it	lt
 800be4e:	3101      	addlt	r1, #1
 800be50:	f7ff fe8e 	bl	800bb70 <_Balloc>
 800be54:	b930      	cbnz	r0, 800be64 <__multiply+0x44>
 800be56:	4602      	mov	r2, r0
 800be58:	4b44      	ldr	r3, [pc, #272]	; (800bf6c <__multiply+0x14c>)
 800be5a:	4845      	ldr	r0, [pc, #276]	; (800bf70 <__multiply+0x150>)
 800be5c:	f240 115d 	movw	r1, #349	; 0x15d
 800be60:	f000 fdd4 	bl	800ca0c <__assert_func>
 800be64:	f100 0514 	add.w	r5, r0, #20
 800be68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be6c:	462b      	mov	r3, r5
 800be6e:	2200      	movs	r2, #0
 800be70:	4543      	cmp	r3, r8
 800be72:	d321      	bcc.n	800beb8 <__multiply+0x98>
 800be74:	f104 0314 	add.w	r3, r4, #20
 800be78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800be7c:	f109 0314 	add.w	r3, r9, #20
 800be80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800be84:	9202      	str	r2, [sp, #8]
 800be86:	1b3a      	subs	r2, r7, r4
 800be88:	3a15      	subs	r2, #21
 800be8a:	f022 0203 	bic.w	r2, r2, #3
 800be8e:	3204      	adds	r2, #4
 800be90:	f104 0115 	add.w	r1, r4, #21
 800be94:	428f      	cmp	r7, r1
 800be96:	bf38      	it	cc
 800be98:	2204      	movcc	r2, #4
 800be9a:	9201      	str	r2, [sp, #4]
 800be9c:	9a02      	ldr	r2, [sp, #8]
 800be9e:	9303      	str	r3, [sp, #12]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d80c      	bhi.n	800bebe <__multiply+0x9e>
 800bea4:	2e00      	cmp	r6, #0
 800bea6:	dd03      	ble.n	800beb0 <__multiply+0x90>
 800bea8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800beac:	2b00      	cmp	r3, #0
 800beae:	d05a      	beq.n	800bf66 <__multiply+0x146>
 800beb0:	6106      	str	r6, [r0, #16]
 800beb2:	b005      	add	sp, #20
 800beb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb8:	f843 2b04 	str.w	r2, [r3], #4
 800bebc:	e7d8      	b.n	800be70 <__multiply+0x50>
 800bebe:	f8b3 a000 	ldrh.w	sl, [r3]
 800bec2:	f1ba 0f00 	cmp.w	sl, #0
 800bec6:	d024      	beq.n	800bf12 <__multiply+0xf2>
 800bec8:	f104 0e14 	add.w	lr, r4, #20
 800becc:	46a9      	mov	r9, r5
 800bece:	f04f 0c00 	mov.w	ip, #0
 800bed2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bed6:	f8d9 1000 	ldr.w	r1, [r9]
 800beda:	fa1f fb82 	uxth.w	fp, r2
 800bede:	b289      	uxth	r1, r1
 800bee0:	fb0a 110b 	mla	r1, sl, fp, r1
 800bee4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bee8:	f8d9 2000 	ldr.w	r2, [r9]
 800beec:	4461      	add	r1, ip
 800beee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bef2:	fb0a c20b 	mla	r2, sl, fp, ip
 800bef6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800befa:	b289      	uxth	r1, r1
 800befc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf00:	4577      	cmp	r7, lr
 800bf02:	f849 1b04 	str.w	r1, [r9], #4
 800bf06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf0a:	d8e2      	bhi.n	800bed2 <__multiply+0xb2>
 800bf0c:	9a01      	ldr	r2, [sp, #4]
 800bf0e:	f845 c002 	str.w	ip, [r5, r2]
 800bf12:	9a03      	ldr	r2, [sp, #12]
 800bf14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf18:	3304      	adds	r3, #4
 800bf1a:	f1b9 0f00 	cmp.w	r9, #0
 800bf1e:	d020      	beq.n	800bf62 <__multiply+0x142>
 800bf20:	6829      	ldr	r1, [r5, #0]
 800bf22:	f104 0c14 	add.w	ip, r4, #20
 800bf26:	46ae      	mov	lr, r5
 800bf28:	f04f 0a00 	mov.w	sl, #0
 800bf2c:	f8bc b000 	ldrh.w	fp, [ip]
 800bf30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf34:	fb09 220b 	mla	r2, r9, fp, r2
 800bf38:	4492      	add	sl, r2
 800bf3a:	b289      	uxth	r1, r1
 800bf3c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bf40:	f84e 1b04 	str.w	r1, [lr], #4
 800bf44:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bf48:	f8be 1000 	ldrh.w	r1, [lr]
 800bf4c:	0c12      	lsrs	r2, r2, #16
 800bf4e:	fb09 1102 	mla	r1, r9, r2, r1
 800bf52:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bf56:	4567      	cmp	r7, ip
 800bf58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf5c:	d8e6      	bhi.n	800bf2c <__multiply+0x10c>
 800bf5e:	9a01      	ldr	r2, [sp, #4]
 800bf60:	50a9      	str	r1, [r5, r2]
 800bf62:	3504      	adds	r5, #4
 800bf64:	e79a      	b.n	800be9c <__multiply+0x7c>
 800bf66:	3e01      	subs	r6, #1
 800bf68:	e79c      	b.n	800bea4 <__multiply+0x84>
 800bf6a:	bf00      	nop
 800bf6c:	0800ee30 	.word	0x0800ee30
 800bf70:	0800eebc 	.word	0x0800eebc

0800bf74 <__pow5mult>:
 800bf74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf78:	4615      	mov	r5, r2
 800bf7a:	f012 0203 	ands.w	r2, r2, #3
 800bf7e:	4606      	mov	r6, r0
 800bf80:	460f      	mov	r7, r1
 800bf82:	d007      	beq.n	800bf94 <__pow5mult+0x20>
 800bf84:	4c25      	ldr	r4, [pc, #148]	; (800c01c <__pow5mult+0xa8>)
 800bf86:	3a01      	subs	r2, #1
 800bf88:	2300      	movs	r3, #0
 800bf8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf8e:	f7ff fe51 	bl	800bc34 <__multadd>
 800bf92:	4607      	mov	r7, r0
 800bf94:	10ad      	asrs	r5, r5, #2
 800bf96:	d03d      	beq.n	800c014 <__pow5mult+0xa0>
 800bf98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bf9a:	b97c      	cbnz	r4, 800bfbc <__pow5mult+0x48>
 800bf9c:	2010      	movs	r0, #16
 800bf9e:	f7ff fdcd 	bl	800bb3c <malloc>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	6270      	str	r0, [r6, #36]	; 0x24
 800bfa6:	b928      	cbnz	r0, 800bfb4 <__pow5mult+0x40>
 800bfa8:	4b1d      	ldr	r3, [pc, #116]	; (800c020 <__pow5mult+0xac>)
 800bfaa:	481e      	ldr	r0, [pc, #120]	; (800c024 <__pow5mult+0xb0>)
 800bfac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bfb0:	f000 fd2c 	bl	800ca0c <__assert_func>
 800bfb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfb8:	6004      	str	r4, [r0, #0]
 800bfba:	60c4      	str	r4, [r0, #12]
 800bfbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bfc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bfc4:	b94c      	cbnz	r4, 800bfda <__pow5mult+0x66>
 800bfc6:	f240 2171 	movw	r1, #625	; 0x271
 800bfca:	4630      	mov	r0, r6
 800bfcc:	f7ff ff12 	bl	800bdf4 <__i2b>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	6003      	str	r3, [r0, #0]
 800bfda:	f04f 0900 	mov.w	r9, #0
 800bfde:	07eb      	lsls	r3, r5, #31
 800bfe0:	d50a      	bpl.n	800bff8 <__pow5mult+0x84>
 800bfe2:	4639      	mov	r1, r7
 800bfe4:	4622      	mov	r2, r4
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	f7ff ff1a 	bl	800be20 <__multiply>
 800bfec:	4639      	mov	r1, r7
 800bfee:	4680      	mov	r8, r0
 800bff0:	4630      	mov	r0, r6
 800bff2:	f7ff fdfd 	bl	800bbf0 <_Bfree>
 800bff6:	4647      	mov	r7, r8
 800bff8:	106d      	asrs	r5, r5, #1
 800bffa:	d00b      	beq.n	800c014 <__pow5mult+0xa0>
 800bffc:	6820      	ldr	r0, [r4, #0]
 800bffe:	b938      	cbnz	r0, 800c010 <__pow5mult+0x9c>
 800c000:	4622      	mov	r2, r4
 800c002:	4621      	mov	r1, r4
 800c004:	4630      	mov	r0, r6
 800c006:	f7ff ff0b 	bl	800be20 <__multiply>
 800c00a:	6020      	str	r0, [r4, #0]
 800c00c:	f8c0 9000 	str.w	r9, [r0]
 800c010:	4604      	mov	r4, r0
 800c012:	e7e4      	b.n	800bfde <__pow5mult+0x6a>
 800c014:	4638      	mov	r0, r7
 800c016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c01a:	bf00      	nop
 800c01c:	0800f008 	.word	0x0800f008
 800c020:	0800edbe 	.word	0x0800edbe
 800c024:	0800eebc 	.word	0x0800eebc

0800c028 <__lshift>:
 800c028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c02c:	460c      	mov	r4, r1
 800c02e:	6849      	ldr	r1, [r1, #4]
 800c030:	6923      	ldr	r3, [r4, #16]
 800c032:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c036:	68a3      	ldr	r3, [r4, #8]
 800c038:	4607      	mov	r7, r0
 800c03a:	4691      	mov	r9, r2
 800c03c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c040:	f108 0601 	add.w	r6, r8, #1
 800c044:	42b3      	cmp	r3, r6
 800c046:	db0b      	blt.n	800c060 <__lshift+0x38>
 800c048:	4638      	mov	r0, r7
 800c04a:	f7ff fd91 	bl	800bb70 <_Balloc>
 800c04e:	4605      	mov	r5, r0
 800c050:	b948      	cbnz	r0, 800c066 <__lshift+0x3e>
 800c052:	4602      	mov	r2, r0
 800c054:	4b2a      	ldr	r3, [pc, #168]	; (800c100 <__lshift+0xd8>)
 800c056:	482b      	ldr	r0, [pc, #172]	; (800c104 <__lshift+0xdc>)
 800c058:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c05c:	f000 fcd6 	bl	800ca0c <__assert_func>
 800c060:	3101      	adds	r1, #1
 800c062:	005b      	lsls	r3, r3, #1
 800c064:	e7ee      	b.n	800c044 <__lshift+0x1c>
 800c066:	2300      	movs	r3, #0
 800c068:	f100 0114 	add.w	r1, r0, #20
 800c06c:	f100 0210 	add.w	r2, r0, #16
 800c070:	4618      	mov	r0, r3
 800c072:	4553      	cmp	r3, sl
 800c074:	db37      	blt.n	800c0e6 <__lshift+0xbe>
 800c076:	6920      	ldr	r0, [r4, #16]
 800c078:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c07c:	f104 0314 	add.w	r3, r4, #20
 800c080:	f019 091f 	ands.w	r9, r9, #31
 800c084:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c088:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c08c:	d02f      	beq.n	800c0ee <__lshift+0xc6>
 800c08e:	f1c9 0e20 	rsb	lr, r9, #32
 800c092:	468a      	mov	sl, r1
 800c094:	f04f 0c00 	mov.w	ip, #0
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	fa02 f209 	lsl.w	r2, r2, r9
 800c09e:	ea42 020c 	orr.w	r2, r2, ip
 800c0a2:	f84a 2b04 	str.w	r2, [sl], #4
 800c0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0aa:	4298      	cmp	r0, r3
 800c0ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c0b0:	d8f2      	bhi.n	800c098 <__lshift+0x70>
 800c0b2:	1b03      	subs	r3, r0, r4
 800c0b4:	3b15      	subs	r3, #21
 800c0b6:	f023 0303 	bic.w	r3, r3, #3
 800c0ba:	3304      	adds	r3, #4
 800c0bc:	f104 0215 	add.w	r2, r4, #21
 800c0c0:	4290      	cmp	r0, r2
 800c0c2:	bf38      	it	cc
 800c0c4:	2304      	movcc	r3, #4
 800c0c6:	f841 c003 	str.w	ip, [r1, r3]
 800c0ca:	f1bc 0f00 	cmp.w	ip, #0
 800c0ce:	d001      	beq.n	800c0d4 <__lshift+0xac>
 800c0d0:	f108 0602 	add.w	r6, r8, #2
 800c0d4:	3e01      	subs	r6, #1
 800c0d6:	4638      	mov	r0, r7
 800c0d8:	612e      	str	r6, [r5, #16]
 800c0da:	4621      	mov	r1, r4
 800c0dc:	f7ff fd88 	bl	800bbf0 <_Bfree>
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	e7c1      	b.n	800c072 <__lshift+0x4a>
 800c0ee:	3904      	subs	r1, #4
 800c0f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0f8:	4298      	cmp	r0, r3
 800c0fa:	d8f9      	bhi.n	800c0f0 <__lshift+0xc8>
 800c0fc:	e7ea      	b.n	800c0d4 <__lshift+0xac>
 800c0fe:	bf00      	nop
 800c100:	0800ee30 	.word	0x0800ee30
 800c104:	0800eebc 	.word	0x0800eebc

0800c108 <__mcmp>:
 800c108:	b530      	push	{r4, r5, lr}
 800c10a:	6902      	ldr	r2, [r0, #16]
 800c10c:	690c      	ldr	r4, [r1, #16]
 800c10e:	1b12      	subs	r2, r2, r4
 800c110:	d10e      	bne.n	800c130 <__mcmp+0x28>
 800c112:	f100 0314 	add.w	r3, r0, #20
 800c116:	3114      	adds	r1, #20
 800c118:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c11c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c120:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c124:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c128:	42a5      	cmp	r5, r4
 800c12a:	d003      	beq.n	800c134 <__mcmp+0x2c>
 800c12c:	d305      	bcc.n	800c13a <__mcmp+0x32>
 800c12e:	2201      	movs	r2, #1
 800c130:	4610      	mov	r0, r2
 800c132:	bd30      	pop	{r4, r5, pc}
 800c134:	4283      	cmp	r3, r0
 800c136:	d3f3      	bcc.n	800c120 <__mcmp+0x18>
 800c138:	e7fa      	b.n	800c130 <__mcmp+0x28>
 800c13a:	f04f 32ff 	mov.w	r2, #4294967295
 800c13e:	e7f7      	b.n	800c130 <__mcmp+0x28>

0800c140 <__mdiff>:
 800c140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c144:	460c      	mov	r4, r1
 800c146:	4606      	mov	r6, r0
 800c148:	4611      	mov	r1, r2
 800c14a:	4620      	mov	r0, r4
 800c14c:	4690      	mov	r8, r2
 800c14e:	f7ff ffdb 	bl	800c108 <__mcmp>
 800c152:	1e05      	subs	r5, r0, #0
 800c154:	d110      	bne.n	800c178 <__mdiff+0x38>
 800c156:	4629      	mov	r1, r5
 800c158:	4630      	mov	r0, r6
 800c15a:	f7ff fd09 	bl	800bb70 <_Balloc>
 800c15e:	b930      	cbnz	r0, 800c16e <__mdiff+0x2e>
 800c160:	4b3a      	ldr	r3, [pc, #232]	; (800c24c <__mdiff+0x10c>)
 800c162:	4602      	mov	r2, r0
 800c164:	f240 2132 	movw	r1, #562	; 0x232
 800c168:	4839      	ldr	r0, [pc, #228]	; (800c250 <__mdiff+0x110>)
 800c16a:	f000 fc4f 	bl	800ca0c <__assert_func>
 800c16e:	2301      	movs	r3, #1
 800c170:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c174:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c178:	bfa4      	itt	ge
 800c17a:	4643      	movge	r3, r8
 800c17c:	46a0      	movge	r8, r4
 800c17e:	4630      	mov	r0, r6
 800c180:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c184:	bfa6      	itte	ge
 800c186:	461c      	movge	r4, r3
 800c188:	2500      	movge	r5, #0
 800c18a:	2501      	movlt	r5, #1
 800c18c:	f7ff fcf0 	bl	800bb70 <_Balloc>
 800c190:	b920      	cbnz	r0, 800c19c <__mdiff+0x5c>
 800c192:	4b2e      	ldr	r3, [pc, #184]	; (800c24c <__mdiff+0x10c>)
 800c194:	4602      	mov	r2, r0
 800c196:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c19a:	e7e5      	b.n	800c168 <__mdiff+0x28>
 800c19c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c1a0:	6926      	ldr	r6, [r4, #16]
 800c1a2:	60c5      	str	r5, [r0, #12]
 800c1a4:	f104 0914 	add.w	r9, r4, #20
 800c1a8:	f108 0514 	add.w	r5, r8, #20
 800c1ac:	f100 0e14 	add.w	lr, r0, #20
 800c1b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c1b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c1b8:	f108 0210 	add.w	r2, r8, #16
 800c1bc:	46f2      	mov	sl, lr
 800c1be:	2100      	movs	r1, #0
 800c1c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c1c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c1c8:	fa1f f883 	uxth.w	r8, r3
 800c1cc:	fa11 f18b 	uxtah	r1, r1, fp
 800c1d0:	0c1b      	lsrs	r3, r3, #16
 800c1d2:	eba1 0808 	sub.w	r8, r1, r8
 800c1d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c1da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c1de:	fa1f f888 	uxth.w	r8, r8
 800c1e2:	1419      	asrs	r1, r3, #16
 800c1e4:	454e      	cmp	r6, r9
 800c1e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c1ea:	f84a 3b04 	str.w	r3, [sl], #4
 800c1ee:	d8e7      	bhi.n	800c1c0 <__mdiff+0x80>
 800c1f0:	1b33      	subs	r3, r6, r4
 800c1f2:	3b15      	subs	r3, #21
 800c1f4:	f023 0303 	bic.w	r3, r3, #3
 800c1f8:	3304      	adds	r3, #4
 800c1fa:	3415      	adds	r4, #21
 800c1fc:	42a6      	cmp	r6, r4
 800c1fe:	bf38      	it	cc
 800c200:	2304      	movcc	r3, #4
 800c202:	441d      	add	r5, r3
 800c204:	4473      	add	r3, lr
 800c206:	469e      	mov	lr, r3
 800c208:	462e      	mov	r6, r5
 800c20a:	4566      	cmp	r6, ip
 800c20c:	d30e      	bcc.n	800c22c <__mdiff+0xec>
 800c20e:	f10c 0203 	add.w	r2, ip, #3
 800c212:	1b52      	subs	r2, r2, r5
 800c214:	f022 0203 	bic.w	r2, r2, #3
 800c218:	3d03      	subs	r5, #3
 800c21a:	45ac      	cmp	ip, r5
 800c21c:	bf38      	it	cc
 800c21e:	2200      	movcc	r2, #0
 800c220:	441a      	add	r2, r3
 800c222:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c226:	b17b      	cbz	r3, 800c248 <__mdiff+0x108>
 800c228:	6107      	str	r7, [r0, #16]
 800c22a:	e7a3      	b.n	800c174 <__mdiff+0x34>
 800c22c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c230:	fa11 f288 	uxtah	r2, r1, r8
 800c234:	1414      	asrs	r4, r2, #16
 800c236:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c23a:	b292      	uxth	r2, r2
 800c23c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c240:	f84e 2b04 	str.w	r2, [lr], #4
 800c244:	1421      	asrs	r1, r4, #16
 800c246:	e7e0      	b.n	800c20a <__mdiff+0xca>
 800c248:	3f01      	subs	r7, #1
 800c24a:	e7ea      	b.n	800c222 <__mdiff+0xe2>
 800c24c:	0800ee30 	.word	0x0800ee30
 800c250:	0800eebc 	.word	0x0800eebc

0800c254 <__ulp>:
 800c254:	b082      	sub	sp, #8
 800c256:	ed8d 0b00 	vstr	d0, [sp]
 800c25a:	9b01      	ldr	r3, [sp, #4]
 800c25c:	4912      	ldr	r1, [pc, #72]	; (800c2a8 <__ulp+0x54>)
 800c25e:	4019      	ands	r1, r3
 800c260:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c264:	2900      	cmp	r1, #0
 800c266:	dd05      	ble.n	800c274 <__ulp+0x20>
 800c268:	2200      	movs	r2, #0
 800c26a:	460b      	mov	r3, r1
 800c26c:	ec43 2b10 	vmov	d0, r2, r3
 800c270:	b002      	add	sp, #8
 800c272:	4770      	bx	lr
 800c274:	4249      	negs	r1, r1
 800c276:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c27a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c27e:	f04f 0200 	mov.w	r2, #0
 800c282:	f04f 0300 	mov.w	r3, #0
 800c286:	da04      	bge.n	800c292 <__ulp+0x3e>
 800c288:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c28c:	fa41 f300 	asr.w	r3, r1, r0
 800c290:	e7ec      	b.n	800c26c <__ulp+0x18>
 800c292:	f1a0 0114 	sub.w	r1, r0, #20
 800c296:	291e      	cmp	r1, #30
 800c298:	bfda      	itte	le
 800c29a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c29e:	fa20 f101 	lsrle.w	r1, r0, r1
 800c2a2:	2101      	movgt	r1, #1
 800c2a4:	460a      	mov	r2, r1
 800c2a6:	e7e1      	b.n	800c26c <__ulp+0x18>
 800c2a8:	7ff00000 	.word	0x7ff00000

0800c2ac <__b2d>:
 800c2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ae:	6905      	ldr	r5, [r0, #16]
 800c2b0:	f100 0714 	add.w	r7, r0, #20
 800c2b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c2b8:	1f2e      	subs	r6, r5, #4
 800c2ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c2be:	4620      	mov	r0, r4
 800c2c0:	f7ff fd48 	bl	800bd54 <__hi0bits>
 800c2c4:	f1c0 0320 	rsb	r3, r0, #32
 800c2c8:	280a      	cmp	r0, #10
 800c2ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c348 <__b2d+0x9c>
 800c2ce:	600b      	str	r3, [r1, #0]
 800c2d0:	dc14      	bgt.n	800c2fc <__b2d+0x50>
 800c2d2:	f1c0 0e0b 	rsb	lr, r0, #11
 800c2d6:	fa24 f10e 	lsr.w	r1, r4, lr
 800c2da:	42b7      	cmp	r7, r6
 800c2dc:	ea41 030c 	orr.w	r3, r1, ip
 800c2e0:	bf34      	ite	cc
 800c2e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c2e6:	2100      	movcs	r1, #0
 800c2e8:	3015      	adds	r0, #21
 800c2ea:	fa04 f000 	lsl.w	r0, r4, r0
 800c2ee:	fa21 f10e 	lsr.w	r1, r1, lr
 800c2f2:	ea40 0201 	orr.w	r2, r0, r1
 800c2f6:	ec43 2b10 	vmov	d0, r2, r3
 800c2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2fc:	42b7      	cmp	r7, r6
 800c2fe:	bf3a      	itte	cc
 800c300:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c304:	f1a5 0608 	subcc.w	r6, r5, #8
 800c308:	2100      	movcs	r1, #0
 800c30a:	380b      	subs	r0, #11
 800c30c:	d017      	beq.n	800c33e <__b2d+0x92>
 800c30e:	f1c0 0c20 	rsb	ip, r0, #32
 800c312:	fa04 f500 	lsl.w	r5, r4, r0
 800c316:	42be      	cmp	r6, r7
 800c318:	fa21 f40c 	lsr.w	r4, r1, ip
 800c31c:	ea45 0504 	orr.w	r5, r5, r4
 800c320:	bf8c      	ite	hi
 800c322:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c326:	2400      	movls	r4, #0
 800c328:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c32c:	fa01 f000 	lsl.w	r0, r1, r0
 800c330:	fa24 f40c 	lsr.w	r4, r4, ip
 800c334:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c338:	ea40 0204 	orr.w	r2, r0, r4
 800c33c:	e7db      	b.n	800c2f6 <__b2d+0x4a>
 800c33e:	ea44 030c 	orr.w	r3, r4, ip
 800c342:	460a      	mov	r2, r1
 800c344:	e7d7      	b.n	800c2f6 <__b2d+0x4a>
 800c346:	bf00      	nop
 800c348:	3ff00000 	.word	0x3ff00000

0800c34c <__d2b>:
 800c34c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c350:	4689      	mov	r9, r1
 800c352:	2101      	movs	r1, #1
 800c354:	ec57 6b10 	vmov	r6, r7, d0
 800c358:	4690      	mov	r8, r2
 800c35a:	f7ff fc09 	bl	800bb70 <_Balloc>
 800c35e:	4604      	mov	r4, r0
 800c360:	b930      	cbnz	r0, 800c370 <__d2b+0x24>
 800c362:	4602      	mov	r2, r0
 800c364:	4b25      	ldr	r3, [pc, #148]	; (800c3fc <__d2b+0xb0>)
 800c366:	4826      	ldr	r0, [pc, #152]	; (800c400 <__d2b+0xb4>)
 800c368:	f240 310a 	movw	r1, #778	; 0x30a
 800c36c:	f000 fb4e 	bl	800ca0c <__assert_func>
 800c370:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c374:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c378:	bb35      	cbnz	r5, 800c3c8 <__d2b+0x7c>
 800c37a:	2e00      	cmp	r6, #0
 800c37c:	9301      	str	r3, [sp, #4]
 800c37e:	d028      	beq.n	800c3d2 <__d2b+0x86>
 800c380:	4668      	mov	r0, sp
 800c382:	9600      	str	r6, [sp, #0]
 800c384:	f7ff fd06 	bl	800bd94 <__lo0bits>
 800c388:	9900      	ldr	r1, [sp, #0]
 800c38a:	b300      	cbz	r0, 800c3ce <__d2b+0x82>
 800c38c:	9a01      	ldr	r2, [sp, #4]
 800c38e:	f1c0 0320 	rsb	r3, r0, #32
 800c392:	fa02 f303 	lsl.w	r3, r2, r3
 800c396:	430b      	orrs	r3, r1
 800c398:	40c2      	lsrs	r2, r0
 800c39a:	6163      	str	r3, [r4, #20]
 800c39c:	9201      	str	r2, [sp, #4]
 800c39e:	9b01      	ldr	r3, [sp, #4]
 800c3a0:	61a3      	str	r3, [r4, #24]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	bf14      	ite	ne
 800c3a6:	2202      	movne	r2, #2
 800c3a8:	2201      	moveq	r2, #1
 800c3aa:	6122      	str	r2, [r4, #16]
 800c3ac:	b1d5      	cbz	r5, 800c3e4 <__d2b+0x98>
 800c3ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c3b2:	4405      	add	r5, r0
 800c3b4:	f8c9 5000 	str.w	r5, [r9]
 800c3b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c3bc:	f8c8 0000 	str.w	r0, [r8]
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	b003      	add	sp, #12
 800c3c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3cc:	e7d5      	b.n	800c37a <__d2b+0x2e>
 800c3ce:	6161      	str	r1, [r4, #20]
 800c3d0:	e7e5      	b.n	800c39e <__d2b+0x52>
 800c3d2:	a801      	add	r0, sp, #4
 800c3d4:	f7ff fcde 	bl	800bd94 <__lo0bits>
 800c3d8:	9b01      	ldr	r3, [sp, #4]
 800c3da:	6163      	str	r3, [r4, #20]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	6122      	str	r2, [r4, #16]
 800c3e0:	3020      	adds	r0, #32
 800c3e2:	e7e3      	b.n	800c3ac <__d2b+0x60>
 800c3e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c3ec:	f8c9 0000 	str.w	r0, [r9]
 800c3f0:	6918      	ldr	r0, [r3, #16]
 800c3f2:	f7ff fcaf 	bl	800bd54 <__hi0bits>
 800c3f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c3fa:	e7df      	b.n	800c3bc <__d2b+0x70>
 800c3fc:	0800ee30 	.word	0x0800ee30
 800c400:	0800eebc 	.word	0x0800eebc

0800c404 <__ratio>:
 800c404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c408:	4688      	mov	r8, r1
 800c40a:	4669      	mov	r1, sp
 800c40c:	4681      	mov	r9, r0
 800c40e:	f7ff ff4d 	bl	800c2ac <__b2d>
 800c412:	a901      	add	r1, sp, #4
 800c414:	4640      	mov	r0, r8
 800c416:	ec55 4b10 	vmov	r4, r5, d0
 800c41a:	f7ff ff47 	bl	800c2ac <__b2d>
 800c41e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c422:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c426:	eba3 0c02 	sub.w	ip, r3, r2
 800c42a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c42e:	1a9b      	subs	r3, r3, r2
 800c430:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c434:	ec51 0b10 	vmov	r0, r1, d0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	bfd6      	itet	le
 800c43c:	460a      	movle	r2, r1
 800c43e:	462a      	movgt	r2, r5
 800c440:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c444:	468b      	mov	fp, r1
 800c446:	462f      	mov	r7, r5
 800c448:	bfd4      	ite	le
 800c44a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c44e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c452:	4620      	mov	r0, r4
 800c454:	ee10 2a10 	vmov	r2, s0
 800c458:	465b      	mov	r3, fp
 800c45a:	4639      	mov	r1, r7
 800c45c:	f7f4 f9fe 	bl	800085c <__aeabi_ddiv>
 800c460:	ec41 0b10 	vmov	d0, r0, r1
 800c464:	b003      	add	sp, #12
 800c466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c46a <__copybits>:
 800c46a:	3901      	subs	r1, #1
 800c46c:	b570      	push	{r4, r5, r6, lr}
 800c46e:	1149      	asrs	r1, r1, #5
 800c470:	6914      	ldr	r4, [r2, #16]
 800c472:	3101      	adds	r1, #1
 800c474:	f102 0314 	add.w	r3, r2, #20
 800c478:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c47c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c480:	1f05      	subs	r5, r0, #4
 800c482:	42a3      	cmp	r3, r4
 800c484:	d30c      	bcc.n	800c4a0 <__copybits+0x36>
 800c486:	1aa3      	subs	r3, r4, r2
 800c488:	3b11      	subs	r3, #17
 800c48a:	f023 0303 	bic.w	r3, r3, #3
 800c48e:	3211      	adds	r2, #17
 800c490:	42a2      	cmp	r2, r4
 800c492:	bf88      	it	hi
 800c494:	2300      	movhi	r3, #0
 800c496:	4418      	add	r0, r3
 800c498:	2300      	movs	r3, #0
 800c49a:	4288      	cmp	r0, r1
 800c49c:	d305      	bcc.n	800c4aa <__copybits+0x40>
 800c49e:	bd70      	pop	{r4, r5, r6, pc}
 800c4a0:	f853 6b04 	ldr.w	r6, [r3], #4
 800c4a4:	f845 6f04 	str.w	r6, [r5, #4]!
 800c4a8:	e7eb      	b.n	800c482 <__copybits+0x18>
 800c4aa:	f840 3b04 	str.w	r3, [r0], #4
 800c4ae:	e7f4      	b.n	800c49a <__copybits+0x30>

0800c4b0 <__any_on>:
 800c4b0:	f100 0214 	add.w	r2, r0, #20
 800c4b4:	6900      	ldr	r0, [r0, #16]
 800c4b6:	114b      	asrs	r3, r1, #5
 800c4b8:	4298      	cmp	r0, r3
 800c4ba:	b510      	push	{r4, lr}
 800c4bc:	db11      	blt.n	800c4e2 <__any_on+0x32>
 800c4be:	dd0a      	ble.n	800c4d6 <__any_on+0x26>
 800c4c0:	f011 011f 	ands.w	r1, r1, #31
 800c4c4:	d007      	beq.n	800c4d6 <__any_on+0x26>
 800c4c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c4ca:	fa24 f001 	lsr.w	r0, r4, r1
 800c4ce:	fa00 f101 	lsl.w	r1, r0, r1
 800c4d2:	428c      	cmp	r4, r1
 800c4d4:	d10b      	bne.n	800c4ee <__any_on+0x3e>
 800c4d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d803      	bhi.n	800c4e6 <__any_on+0x36>
 800c4de:	2000      	movs	r0, #0
 800c4e0:	bd10      	pop	{r4, pc}
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	e7f7      	b.n	800c4d6 <__any_on+0x26>
 800c4e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4ea:	2900      	cmp	r1, #0
 800c4ec:	d0f5      	beq.n	800c4da <__any_on+0x2a>
 800c4ee:	2001      	movs	r0, #1
 800c4f0:	e7f6      	b.n	800c4e0 <__any_on+0x30>

0800c4f2 <_calloc_r>:
 800c4f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4f4:	fba1 2402 	umull	r2, r4, r1, r2
 800c4f8:	b94c      	cbnz	r4, 800c50e <_calloc_r+0x1c>
 800c4fa:	4611      	mov	r1, r2
 800c4fc:	9201      	str	r2, [sp, #4]
 800c4fe:	f000 f87b 	bl	800c5f8 <_malloc_r>
 800c502:	9a01      	ldr	r2, [sp, #4]
 800c504:	4605      	mov	r5, r0
 800c506:	b930      	cbnz	r0, 800c516 <_calloc_r+0x24>
 800c508:	4628      	mov	r0, r5
 800c50a:	b003      	add	sp, #12
 800c50c:	bd30      	pop	{r4, r5, pc}
 800c50e:	220c      	movs	r2, #12
 800c510:	6002      	str	r2, [r0, #0]
 800c512:	2500      	movs	r5, #0
 800c514:	e7f8      	b.n	800c508 <_calloc_r+0x16>
 800c516:	4621      	mov	r1, r4
 800c518:	f7fc fbcc 	bl	8008cb4 <memset>
 800c51c:	e7f4      	b.n	800c508 <_calloc_r+0x16>
	...

0800c520 <_free_r>:
 800c520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c522:	2900      	cmp	r1, #0
 800c524:	d044      	beq.n	800c5b0 <_free_r+0x90>
 800c526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c52a:	9001      	str	r0, [sp, #4]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f1a1 0404 	sub.w	r4, r1, #4
 800c532:	bfb8      	it	lt
 800c534:	18e4      	addlt	r4, r4, r3
 800c536:	f000 fab3 	bl	800caa0 <__malloc_lock>
 800c53a:	4a1e      	ldr	r2, [pc, #120]	; (800c5b4 <_free_r+0x94>)
 800c53c:	9801      	ldr	r0, [sp, #4]
 800c53e:	6813      	ldr	r3, [r2, #0]
 800c540:	b933      	cbnz	r3, 800c550 <_free_r+0x30>
 800c542:	6063      	str	r3, [r4, #4]
 800c544:	6014      	str	r4, [r2, #0]
 800c546:	b003      	add	sp, #12
 800c548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c54c:	f000 baae 	b.w	800caac <__malloc_unlock>
 800c550:	42a3      	cmp	r3, r4
 800c552:	d908      	bls.n	800c566 <_free_r+0x46>
 800c554:	6825      	ldr	r5, [r4, #0]
 800c556:	1961      	adds	r1, r4, r5
 800c558:	428b      	cmp	r3, r1
 800c55a:	bf01      	itttt	eq
 800c55c:	6819      	ldreq	r1, [r3, #0]
 800c55e:	685b      	ldreq	r3, [r3, #4]
 800c560:	1949      	addeq	r1, r1, r5
 800c562:	6021      	streq	r1, [r4, #0]
 800c564:	e7ed      	b.n	800c542 <_free_r+0x22>
 800c566:	461a      	mov	r2, r3
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	b10b      	cbz	r3, 800c570 <_free_r+0x50>
 800c56c:	42a3      	cmp	r3, r4
 800c56e:	d9fa      	bls.n	800c566 <_free_r+0x46>
 800c570:	6811      	ldr	r1, [r2, #0]
 800c572:	1855      	adds	r5, r2, r1
 800c574:	42a5      	cmp	r5, r4
 800c576:	d10b      	bne.n	800c590 <_free_r+0x70>
 800c578:	6824      	ldr	r4, [r4, #0]
 800c57a:	4421      	add	r1, r4
 800c57c:	1854      	adds	r4, r2, r1
 800c57e:	42a3      	cmp	r3, r4
 800c580:	6011      	str	r1, [r2, #0]
 800c582:	d1e0      	bne.n	800c546 <_free_r+0x26>
 800c584:	681c      	ldr	r4, [r3, #0]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	6053      	str	r3, [r2, #4]
 800c58a:	4421      	add	r1, r4
 800c58c:	6011      	str	r1, [r2, #0]
 800c58e:	e7da      	b.n	800c546 <_free_r+0x26>
 800c590:	d902      	bls.n	800c598 <_free_r+0x78>
 800c592:	230c      	movs	r3, #12
 800c594:	6003      	str	r3, [r0, #0]
 800c596:	e7d6      	b.n	800c546 <_free_r+0x26>
 800c598:	6825      	ldr	r5, [r4, #0]
 800c59a:	1961      	adds	r1, r4, r5
 800c59c:	428b      	cmp	r3, r1
 800c59e:	bf04      	itt	eq
 800c5a0:	6819      	ldreq	r1, [r3, #0]
 800c5a2:	685b      	ldreq	r3, [r3, #4]
 800c5a4:	6063      	str	r3, [r4, #4]
 800c5a6:	bf04      	itt	eq
 800c5a8:	1949      	addeq	r1, r1, r5
 800c5aa:	6021      	streq	r1, [r4, #0]
 800c5ac:	6054      	str	r4, [r2, #4]
 800c5ae:	e7ca      	b.n	800c546 <_free_r+0x26>
 800c5b0:	b003      	add	sp, #12
 800c5b2:	bd30      	pop	{r4, r5, pc}
 800c5b4:	20000ef8 	.word	0x20000ef8

0800c5b8 <sbrk_aligned>:
 800c5b8:	b570      	push	{r4, r5, r6, lr}
 800c5ba:	4e0e      	ldr	r6, [pc, #56]	; (800c5f4 <sbrk_aligned+0x3c>)
 800c5bc:	460c      	mov	r4, r1
 800c5be:	6831      	ldr	r1, [r6, #0]
 800c5c0:	4605      	mov	r5, r0
 800c5c2:	b911      	cbnz	r1, 800c5ca <sbrk_aligned+0x12>
 800c5c4:	f000 f9f0 	bl	800c9a8 <_sbrk_r>
 800c5c8:	6030      	str	r0, [r6, #0]
 800c5ca:	4621      	mov	r1, r4
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	f000 f9eb 	bl	800c9a8 <_sbrk_r>
 800c5d2:	1c43      	adds	r3, r0, #1
 800c5d4:	d00a      	beq.n	800c5ec <sbrk_aligned+0x34>
 800c5d6:	1cc4      	adds	r4, r0, #3
 800c5d8:	f024 0403 	bic.w	r4, r4, #3
 800c5dc:	42a0      	cmp	r0, r4
 800c5de:	d007      	beq.n	800c5f0 <sbrk_aligned+0x38>
 800c5e0:	1a21      	subs	r1, r4, r0
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	f000 f9e0 	bl	800c9a8 <_sbrk_r>
 800c5e8:	3001      	adds	r0, #1
 800c5ea:	d101      	bne.n	800c5f0 <sbrk_aligned+0x38>
 800c5ec:	f04f 34ff 	mov.w	r4, #4294967295
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	bd70      	pop	{r4, r5, r6, pc}
 800c5f4:	20000efc 	.word	0x20000efc

0800c5f8 <_malloc_r>:
 800c5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5fc:	1ccd      	adds	r5, r1, #3
 800c5fe:	f025 0503 	bic.w	r5, r5, #3
 800c602:	3508      	adds	r5, #8
 800c604:	2d0c      	cmp	r5, #12
 800c606:	bf38      	it	cc
 800c608:	250c      	movcc	r5, #12
 800c60a:	2d00      	cmp	r5, #0
 800c60c:	4607      	mov	r7, r0
 800c60e:	db01      	blt.n	800c614 <_malloc_r+0x1c>
 800c610:	42a9      	cmp	r1, r5
 800c612:	d905      	bls.n	800c620 <_malloc_r+0x28>
 800c614:	230c      	movs	r3, #12
 800c616:	603b      	str	r3, [r7, #0]
 800c618:	2600      	movs	r6, #0
 800c61a:	4630      	mov	r0, r6
 800c61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c620:	4e2e      	ldr	r6, [pc, #184]	; (800c6dc <_malloc_r+0xe4>)
 800c622:	f000 fa3d 	bl	800caa0 <__malloc_lock>
 800c626:	6833      	ldr	r3, [r6, #0]
 800c628:	461c      	mov	r4, r3
 800c62a:	bb34      	cbnz	r4, 800c67a <_malloc_r+0x82>
 800c62c:	4629      	mov	r1, r5
 800c62e:	4638      	mov	r0, r7
 800c630:	f7ff ffc2 	bl	800c5b8 <sbrk_aligned>
 800c634:	1c43      	adds	r3, r0, #1
 800c636:	4604      	mov	r4, r0
 800c638:	d14d      	bne.n	800c6d6 <_malloc_r+0xde>
 800c63a:	6834      	ldr	r4, [r6, #0]
 800c63c:	4626      	mov	r6, r4
 800c63e:	2e00      	cmp	r6, #0
 800c640:	d140      	bne.n	800c6c4 <_malloc_r+0xcc>
 800c642:	6823      	ldr	r3, [r4, #0]
 800c644:	4631      	mov	r1, r6
 800c646:	4638      	mov	r0, r7
 800c648:	eb04 0803 	add.w	r8, r4, r3
 800c64c:	f000 f9ac 	bl	800c9a8 <_sbrk_r>
 800c650:	4580      	cmp	r8, r0
 800c652:	d13a      	bne.n	800c6ca <_malloc_r+0xd2>
 800c654:	6821      	ldr	r1, [r4, #0]
 800c656:	3503      	adds	r5, #3
 800c658:	1a6d      	subs	r5, r5, r1
 800c65a:	f025 0503 	bic.w	r5, r5, #3
 800c65e:	3508      	adds	r5, #8
 800c660:	2d0c      	cmp	r5, #12
 800c662:	bf38      	it	cc
 800c664:	250c      	movcc	r5, #12
 800c666:	4629      	mov	r1, r5
 800c668:	4638      	mov	r0, r7
 800c66a:	f7ff ffa5 	bl	800c5b8 <sbrk_aligned>
 800c66e:	3001      	adds	r0, #1
 800c670:	d02b      	beq.n	800c6ca <_malloc_r+0xd2>
 800c672:	6823      	ldr	r3, [r4, #0]
 800c674:	442b      	add	r3, r5
 800c676:	6023      	str	r3, [r4, #0]
 800c678:	e00e      	b.n	800c698 <_malloc_r+0xa0>
 800c67a:	6822      	ldr	r2, [r4, #0]
 800c67c:	1b52      	subs	r2, r2, r5
 800c67e:	d41e      	bmi.n	800c6be <_malloc_r+0xc6>
 800c680:	2a0b      	cmp	r2, #11
 800c682:	d916      	bls.n	800c6b2 <_malloc_r+0xba>
 800c684:	1961      	adds	r1, r4, r5
 800c686:	42a3      	cmp	r3, r4
 800c688:	6025      	str	r5, [r4, #0]
 800c68a:	bf18      	it	ne
 800c68c:	6059      	strne	r1, [r3, #4]
 800c68e:	6863      	ldr	r3, [r4, #4]
 800c690:	bf08      	it	eq
 800c692:	6031      	streq	r1, [r6, #0]
 800c694:	5162      	str	r2, [r4, r5]
 800c696:	604b      	str	r3, [r1, #4]
 800c698:	4638      	mov	r0, r7
 800c69a:	f104 060b 	add.w	r6, r4, #11
 800c69e:	f000 fa05 	bl	800caac <__malloc_unlock>
 800c6a2:	f026 0607 	bic.w	r6, r6, #7
 800c6a6:	1d23      	adds	r3, r4, #4
 800c6a8:	1af2      	subs	r2, r6, r3
 800c6aa:	d0b6      	beq.n	800c61a <_malloc_r+0x22>
 800c6ac:	1b9b      	subs	r3, r3, r6
 800c6ae:	50a3      	str	r3, [r4, r2]
 800c6b0:	e7b3      	b.n	800c61a <_malloc_r+0x22>
 800c6b2:	6862      	ldr	r2, [r4, #4]
 800c6b4:	42a3      	cmp	r3, r4
 800c6b6:	bf0c      	ite	eq
 800c6b8:	6032      	streq	r2, [r6, #0]
 800c6ba:	605a      	strne	r2, [r3, #4]
 800c6bc:	e7ec      	b.n	800c698 <_malloc_r+0xa0>
 800c6be:	4623      	mov	r3, r4
 800c6c0:	6864      	ldr	r4, [r4, #4]
 800c6c2:	e7b2      	b.n	800c62a <_malloc_r+0x32>
 800c6c4:	4634      	mov	r4, r6
 800c6c6:	6876      	ldr	r6, [r6, #4]
 800c6c8:	e7b9      	b.n	800c63e <_malloc_r+0x46>
 800c6ca:	230c      	movs	r3, #12
 800c6cc:	603b      	str	r3, [r7, #0]
 800c6ce:	4638      	mov	r0, r7
 800c6d0:	f000 f9ec 	bl	800caac <__malloc_unlock>
 800c6d4:	e7a1      	b.n	800c61a <_malloc_r+0x22>
 800c6d6:	6025      	str	r5, [r4, #0]
 800c6d8:	e7de      	b.n	800c698 <_malloc_r+0xa0>
 800c6da:	bf00      	nop
 800c6dc:	20000ef8 	.word	0x20000ef8

0800c6e0 <__ssputs_r>:
 800c6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6e4:	688e      	ldr	r6, [r1, #8]
 800c6e6:	429e      	cmp	r6, r3
 800c6e8:	4682      	mov	sl, r0
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	4690      	mov	r8, r2
 800c6ee:	461f      	mov	r7, r3
 800c6f0:	d838      	bhi.n	800c764 <__ssputs_r+0x84>
 800c6f2:	898a      	ldrh	r2, [r1, #12]
 800c6f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c6f8:	d032      	beq.n	800c760 <__ssputs_r+0x80>
 800c6fa:	6825      	ldr	r5, [r4, #0]
 800c6fc:	6909      	ldr	r1, [r1, #16]
 800c6fe:	eba5 0901 	sub.w	r9, r5, r1
 800c702:	6965      	ldr	r5, [r4, #20]
 800c704:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c708:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c70c:	3301      	adds	r3, #1
 800c70e:	444b      	add	r3, r9
 800c710:	106d      	asrs	r5, r5, #1
 800c712:	429d      	cmp	r5, r3
 800c714:	bf38      	it	cc
 800c716:	461d      	movcc	r5, r3
 800c718:	0553      	lsls	r3, r2, #21
 800c71a:	d531      	bpl.n	800c780 <__ssputs_r+0xa0>
 800c71c:	4629      	mov	r1, r5
 800c71e:	f7ff ff6b 	bl	800c5f8 <_malloc_r>
 800c722:	4606      	mov	r6, r0
 800c724:	b950      	cbnz	r0, 800c73c <__ssputs_r+0x5c>
 800c726:	230c      	movs	r3, #12
 800c728:	f8ca 3000 	str.w	r3, [sl]
 800c72c:	89a3      	ldrh	r3, [r4, #12]
 800c72e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c732:	81a3      	strh	r3, [r4, #12]
 800c734:	f04f 30ff 	mov.w	r0, #4294967295
 800c738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c73c:	6921      	ldr	r1, [r4, #16]
 800c73e:	464a      	mov	r2, r9
 800c740:	f7fc faaa 	bl	8008c98 <memcpy>
 800c744:	89a3      	ldrh	r3, [r4, #12]
 800c746:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c74a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c74e:	81a3      	strh	r3, [r4, #12]
 800c750:	6126      	str	r6, [r4, #16]
 800c752:	6165      	str	r5, [r4, #20]
 800c754:	444e      	add	r6, r9
 800c756:	eba5 0509 	sub.w	r5, r5, r9
 800c75a:	6026      	str	r6, [r4, #0]
 800c75c:	60a5      	str	r5, [r4, #8]
 800c75e:	463e      	mov	r6, r7
 800c760:	42be      	cmp	r6, r7
 800c762:	d900      	bls.n	800c766 <__ssputs_r+0x86>
 800c764:	463e      	mov	r6, r7
 800c766:	6820      	ldr	r0, [r4, #0]
 800c768:	4632      	mov	r2, r6
 800c76a:	4641      	mov	r1, r8
 800c76c:	f000 f97e 	bl	800ca6c <memmove>
 800c770:	68a3      	ldr	r3, [r4, #8]
 800c772:	1b9b      	subs	r3, r3, r6
 800c774:	60a3      	str	r3, [r4, #8]
 800c776:	6823      	ldr	r3, [r4, #0]
 800c778:	4433      	add	r3, r6
 800c77a:	6023      	str	r3, [r4, #0]
 800c77c:	2000      	movs	r0, #0
 800c77e:	e7db      	b.n	800c738 <__ssputs_r+0x58>
 800c780:	462a      	mov	r2, r5
 800c782:	f000 f999 	bl	800cab8 <_realloc_r>
 800c786:	4606      	mov	r6, r0
 800c788:	2800      	cmp	r0, #0
 800c78a:	d1e1      	bne.n	800c750 <__ssputs_r+0x70>
 800c78c:	6921      	ldr	r1, [r4, #16]
 800c78e:	4650      	mov	r0, sl
 800c790:	f7ff fec6 	bl	800c520 <_free_r>
 800c794:	e7c7      	b.n	800c726 <__ssputs_r+0x46>
	...

0800c798 <_svfiprintf_r>:
 800c798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c79c:	4698      	mov	r8, r3
 800c79e:	898b      	ldrh	r3, [r1, #12]
 800c7a0:	061b      	lsls	r3, r3, #24
 800c7a2:	b09d      	sub	sp, #116	; 0x74
 800c7a4:	4607      	mov	r7, r0
 800c7a6:	460d      	mov	r5, r1
 800c7a8:	4614      	mov	r4, r2
 800c7aa:	d50e      	bpl.n	800c7ca <_svfiprintf_r+0x32>
 800c7ac:	690b      	ldr	r3, [r1, #16]
 800c7ae:	b963      	cbnz	r3, 800c7ca <_svfiprintf_r+0x32>
 800c7b0:	2140      	movs	r1, #64	; 0x40
 800c7b2:	f7ff ff21 	bl	800c5f8 <_malloc_r>
 800c7b6:	6028      	str	r0, [r5, #0]
 800c7b8:	6128      	str	r0, [r5, #16]
 800c7ba:	b920      	cbnz	r0, 800c7c6 <_svfiprintf_r+0x2e>
 800c7bc:	230c      	movs	r3, #12
 800c7be:	603b      	str	r3, [r7, #0]
 800c7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c4:	e0d1      	b.n	800c96a <_svfiprintf_r+0x1d2>
 800c7c6:	2340      	movs	r3, #64	; 0x40
 800c7c8:	616b      	str	r3, [r5, #20]
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c7ce:	2320      	movs	r3, #32
 800c7d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7d8:	2330      	movs	r3, #48	; 0x30
 800c7da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c984 <_svfiprintf_r+0x1ec>
 800c7de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7e2:	f04f 0901 	mov.w	r9, #1
 800c7e6:	4623      	mov	r3, r4
 800c7e8:	469a      	mov	sl, r3
 800c7ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7ee:	b10a      	cbz	r2, 800c7f4 <_svfiprintf_r+0x5c>
 800c7f0:	2a25      	cmp	r2, #37	; 0x25
 800c7f2:	d1f9      	bne.n	800c7e8 <_svfiprintf_r+0x50>
 800c7f4:	ebba 0b04 	subs.w	fp, sl, r4
 800c7f8:	d00b      	beq.n	800c812 <_svfiprintf_r+0x7a>
 800c7fa:	465b      	mov	r3, fp
 800c7fc:	4622      	mov	r2, r4
 800c7fe:	4629      	mov	r1, r5
 800c800:	4638      	mov	r0, r7
 800c802:	f7ff ff6d 	bl	800c6e0 <__ssputs_r>
 800c806:	3001      	adds	r0, #1
 800c808:	f000 80aa 	beq.w	800c960 <_svfiprintf_r+0x1c8>
 800c80c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c80e:	445a      	add	r2, fp
 800c810:	9209      	str	r2, [sp, #36]	; 0x24
 800c812:	f89a 3000 	ldrb.w	r3, [sl]
 800c816:	2b00      	cmp	r3, #0
 800c818:	f000 80a2 	beq.w	800c960 <_svfiprintf_r+0x1c8>
 800c81c:	2300      	movs	r3, #0
 800c81e:	f04f 32ff 	mov.w	r2, #4294967295
 800c822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c826:	f10a 0a01 	add.w	sl, sl, #1
 800c82a:	9304      	str	r3, [sp, #16]
 800c82c:	9307      	str	r3, [sp, #28]
 800c82e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c832:	931a      	str	r3, [sp, #104]	; 0x68
 800c834:	4654      	mov	r4, sl
 800c836:	2205      	movs	r2, #5
 800c838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c83c:	4851      	ldr	r0, [pc, #324]	; (800c984 <_svfiprintf_r+0x1ec>)
 800c83e:	f7f3 fcd7 	bl	80001f0 <memchr>
 800c842:	9a04      	ldr	r2, [sp, #16]
 800c844:	b9d8      	cbnz	r0, 800c87e <_svfiprintf_r+0xe6>
 800c846:	06d0      	lsls	r0, r2, #27
 800c848:	bf44      	itt	mi
 800c84a:	2320      	movmi	r3, #32
 800c84c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c850:	0711      	lsls	r1, r2, #28
 800c852:	bf44      	itt	mi
 800c854:	232b      	movmi	r3, #43	; 0x2b
 800c856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c85a:	f89a 3000 	ldrb.w	r3, [sl]
 800c85e:	2b2a      	cmp	r3, #42	; 0x2a
 800c860:	d015      	beq.n	800c88e <_svfiprintf_r+0xf6>
 800c862:	9a07      	ldr	r2, [sp, #28]
 800c864:	4654      	mov	r4, sl
 800c866:	2000      	movs	r0, #0
 800c868:	f04f 0c0a 	mov.w	ip, #10
 800c86c:	4621      	mov	r1, r4
 800c86e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c872:	3b30      	subs	r3, #48	; 0x30
 800c874:	2b09      	cmp	r3, #9
 800c876:	d94e      	bls.n	800c916 <_svfiprintf_r+0x17e>
 800c878:	b1b0      	cbz	r0, 800c8a8 <_svfiprintf_r+0x110>
 800c87a:	9207      	str	r2, [sp, #28]
 800c87c:	e014      	b.n	800c8a8 <_svfiprintf_r+0x110>
 800c87e:	eba0 0308 	sub.w	r3, r0, r8
 800c882:	fa09 f303 	lsl.w	r3, r9, r3
 800c886:	4313      	orrs	r3, r2
 800c888:	9304      	str	r3, [sp, #16]
 800c88a:	46a2      	mov	sl, r4
 800c88c:	e7d2      	b.n	800c834 <_svfiprintf_r+0x9c>
 800c88e:	9b03      	ldr	r3, [sp, #12]
 800c890:	1d19      	adds	r1, r3, #4
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	9103      	str	r1, [sp, #12]
 800c896:	2b00      	cmp	r3, #0
 800c898:	bfbb      	ittet	lt
 800c89a:	425b      	neglt	r3, r3
 800c89c:	f042 0202 	orrlt.w	r2, r2, #2
 800c8a0:	9307      	strge	r3, [sp, #28]
 800c8a2:	9307      	strlt	r3, [sp, #28]
 800c8a4:	bfb8      	it	lt
 800c8a6:	9204      	strlt	r2, [sp, #16]
 800c8a8:	7823      	ldrb	r3, [r4, #0]
 800c8aa:	2b2e      	cmp	r3, #46	; 0x2e
 800c8ac:	d10c      	bne.n	800c8c8 <_svfiprintf_r+0x130>
 800c8ae:	7863      	ldrb	r3, [r4, #1]
 800c8b0:	2b2a      	cmp	r3, #42	; 0x2a
 800c8b2:	d135      	bne.n	800c920 <_svfiprintf_r+0x188>
 800c8b4:	9b03      	ldr	r3, [sp, #12]
 800c8b6:	1d1a      	adds	r2, r3, #4
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	9203      	str	r2, [sp, #12]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	bfb8      	it	lt
 800c8c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8c4:	3402      	adds	r4, #2
 800c8c6:	9305      	str	r3, [sp, #20]
 800c8c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c994 <_svfiprintf_r+0x1fc>
 800c8cc:	7821      	ldrb	r1, [r4, #0]
 800c8ce:	2203      	movs	r2, #3
 800c8d0:	4650      	mov	r0, sl
 800c8d2:	f7f3 fc8d 	bl	80001f0 <memchr>
 800c8d6:	b140      	cbz	r0, 800c8ea <_svfiprintf_r+0x152>
 800c8d8:	2340      	movs	r3, #64	; 0x40
 800c8da:	eba0 000a 	sub.w	r0, r0, sl
 800c8de:	fa03 f000 	lsl.w	r0, r3, r0
 800c8e2:	9b04      	ldr	r3, [sp, #16]
 800c8e4:	4303      	orrs	r3, r0
 800c8e6:	3401      	adds	r4, #1
 800c8e8:	9304      	str	r3, [sp, #16]
 800c8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8ee:	4826      	ldr	r0, [pc, #152]	; (800c988 <_svfiprintf_r+0x1f0>)
 800c8f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8f4:	2206      	movs	r2, #6
 800c8f6:	f7f3 fc7b 	bl	80001f0 <memchr>
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d038      	beq.n	800c970 <_svfiprintf_r+0x1d8>
 800c8fe:	4b23      	ldr	r3, [pc, #140]	; (800c98c <_svfiprintf_r+0x1f4>)
 800c900:	bb1b      	cbnz	r3, 800c94a <_svfiprintf_r+0x1b2>
 800c902:	9b03      	ldr	r3, [sp, #12]
 800c904:	3307      	adds	r3, #7
 800c906:	f023 0307 	bic.w	r3, r3, #7
 800c90a:	3308      	adds	r3, #8
 800c90c:	9303      	str	r3, [sp, #12]
 800c90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c910:	4433      	add	r3, r6
 800c912:	9309      	str	r3, [sp, #36]	; 0x24
 800c914:	e767      	b.n	800c7e6 <_svfiprintf_r+0x4e>
 800c916:	fb0c 3202 	mla	r2, ip, r2, r3
 800c91a:	460c      	mov	r4, r1
 800c91c:	2001      	movs	r0, #1
 800c91e:	e7a5      	b.n	800c86c <_svfiprintf_r+0xd4>
 800c920:	2300      	movs	r3, #0
 800c922:	3401      	adds	r4, #1
 800c924:	9305      	str	r3, [sp, #20]
 800c926:	4619      	mov	r1, r3
 800c928:	f04f 0c0a 	mov.w	ip, #10
 800c92c:	4620      	mov	r0, r4
 800c92e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c932:	3a30      	subs	r2, #48	; 0x30
 800c934:	2a09      	cmp	r2, #9
 800c936:	d903      	bls.n	800c940 <_svfiprintf_r+0x1a8>
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d0c5      	beq.n	800c8c8 <_svfiprintf_r+0x130>
 800c93c:	9105      	str	r1, [sp, #20]
 800c93e:	e7c3      	b.n	800c8c8 <_svfiprintf_r+0x130>
 800c940:	fb0c 2101 	mla	r1, ip, r1, r2
 800c944:	4604      	mov	r4, r0
 800c946:	2301      	movs	r3, #1
 800c948:	e7f0      	b.n	800c92c <_svfiprintf_r+0x194>
 800c94a:	ab03      	add	r3, sp, #12
 800c94c:	9300      	str	r3, [sp, #0]
 800c94e:	462a      	mov	r2, r5
 800c950:	4b0f      	ldr	r3, [pc, #60]	; (800c990 <_svfiprintf_r+0x1f8>)
 800c952:	a904      	add	r1, sp, #16
 800c954:	4638      	mov	r0, r7
 800c956:	f7fc fa55 	bl	8008e04 <_printf_float>
 800c95a:	1c42      	adds	r2, r0, #1
 800c95c:	4606      	mov	r6, r0
 800c95e:	d1d6      	bne.n	800c90e <_svfiprintf_r+0x176>
 800c960:	89ab      	ldrh	r3, [r5, #12]
 800c962:	065b      	lsls	r3, r3, #25
 800c964:	f53f af2c 	bmi.w	800c7c0 <_svfiprintf_r+0x28>
 800c968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c96a:	b01d      	add	sp, #116	; 0x74
 800c96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c970:	ab03      	add	r3, sp, #12
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	462a      	mov	r2, r5
 800c976:	4b06      	ldr	r3, [pc, #24]	; (800c990 <_svfiprintf_r+0x1f8>)
 800c978:	a904      	add	r1, sp, #16
 800c97a:	4638      	mov	r0, r7
 800c97c:	f7fc fce6 	bl	800934c <_printf_i>
 800c980:	e7eb      	b.n	800c95a <_svfiprintf_r+0x1c2>
 800c982:	bf00      	nop
 800c984:	0800f014 	.word	0x0800f014
 800c988:	0800f01e 	.word	0x0800f01e
 800c98c:	08008e05 	.word	0x08008e05
 800c990:	0800c6e1 	.word	0x0800c6e1
 800c994:	0800f01a 	.word	0x0800f01a

0800c998 <nan>:
 800c998:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c9a0 <nan+0x8>
 800c99c:	4770      	bx	lr
 800c99e:	bf00      	nop
 800c9a0:	00000000 	.word	0x00000000
 800c9a4:	7ff80000 	.word	0x7ff80000

0800c9a8 <_sbrk_r>:
 800c9a8:	b538      	push	{r3, r4, r5, lr}
 800c9aa:	4d06      	ldr	r5, [pc, #24]	; (800c9c4 <_sbrk_r+0x1c>)
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	4608      	mov	r0, r1
 800c9b2:	602b      	str	r3, [r5, #0]
 800c9b4:	f7f6 fad8 	bl	8002f68 <_sbrk>
 800c9b8:	1c43      	adds	r3, r0, #1
 800c9ba:	d102      	bne.n	800c9c2 <_sbrk_r+0x1a>
 800c9bc:	682b      	ldr	r3, [r5, #0]
 800c9be:	b103      	cbz	r3, 800c9c2 <_sbrk_r+0x1a>
 800c9c0:	6023      	str	r3, [r4, #0]
 800c9c2:	bd38      	pop	{r3, r4, r5, pc}
 800c9c4:	20000f00 	.word	0x20000f00

0800c9c8 <strncmp>:
 800c9c8:	b510      	push	{r4, lr}
 800c9ca:	b17a      	cbz	r2, 800c9ec <strncmp+0x24>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	3901      	subs	r1, #1
 800c9d0:	1884      	adds	r4, r0, r2
 800c9d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c9d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c9da:	4290      	cmp	r0, r2
 800c9dc:	d101      	bne.n	800c9e2 <strncmp+0x1a>
 800c9de:	42a3      	cmp	r3, r4
 800c9e0:	d101      	bne.n	800c9e6 <strncmp+0x1e>
 800c9e2:	1a80      	subs	r0, r0, r2
 800c9e4:	bd10      	pop	{r4, pc}
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	d1f3      	bne.n	800c9d2 <strncmp+0xa>
 800c9ea:	e7fa      	b.n	800c9e2 <strncmp+0x1a>
 800c9ec:	4610      	mov	r0, r2
 800c9ee:	e7f9      	b.n	800c9e4 <strncmp+0x1c>

0800c9f0 <__ascii_wctomb>:
 800c9f0:	b149      	cbz	r1, 800ca06 <__ascii_wctomb+0x16>
 800c9f2:	2aff      	cmp	r2, #255	; 0xff
 800c9f4:	bf85      	ittet	hi
 800c9f6:	238a      	movhi	r3, #138	; 0x8a
 800c9f8:	6003      	strhi	r3, [r0, #0]
 800c9fa:	700a      	strbls	r2, [r1, #0]
 800c9fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800ca00:	bf98      	it	ls
 800ca02:	2001      	movls	r0, #1
 800ca04:	4770      	bx	lr
 800ca06:	4608      	mov	r0, r1
 800ca08:	4770      	bx	lr
	...

0800ca0c <__assert_func>:
 800ca0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca0e:	4614      	mov	r4, r2
 800ca10:	461a      	mov	r2, r3
 800ca12:	4b09      	ldr	r3, [pc, #36]	; (800ca38 <__assert_func+0x2c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4605      	mov	r5, r0
 800ca18:	68d8      	ldr	r0, [r3, #12]
 800ca1a:	b14c      	cbz	r4, 800ca30 <__assert_func+0x24>
 800ca1c:	4b07      	ldr	r3, [pc, #28]	; (800ca3c <__assert_func+0x30>)
 800ca1e:	9100      	str	r1, [sp, #0]
 800ca20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca24:	4906      	ldr	r1, [pc, #24]	; (800ca40 <__assert_func+0x34>)
 800ca26:	462b      	mov	r3, r5
 800ca28:	f000 f80e 	bl	800ca48 <fiprintf>
 800ca2c:	f000 fa8c 	bl	800cf48 <abort>
 800ca30:	4b04      	ldr	r3, [pc, #16]	; (800ca44 <__assert_func+0x38>)
 800ca32:	461c      	mov	r4, r3
 800ca34:	e7f3      	b.n	800ca1e <__assert_func+0x12>
 800ca36:	bf00      	nop
 800ca38:	20000224 	.word	0x20000224
 800ca3c:	0800f025 	.word	0x0800f025
 800ca40:	0800f032 	.word	0x0800f032
 800ca44:	0800f060 	.word	0x0800f060

0800ca48 <fiprintf>:
 800ca48:	b40e      	push	{r1, r2, r3}
 800ca4a:	b503      	push	{r0, r1, lr}
 800ca4c:	4601      	mov	r1, r0
 800ca4e:	ab03      	add	r3, sp, #12
 800ca50:	4805      	ldr	r0, [pc, #20]	; (800ca68 <fiprintf+0x20>)
 800ca52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca56:	6800      	ldr	r0, [r0, #0]
 800ca58:	9301      	str	r3, [sp, #4]
 800ca5a:	f000 f885 	bl	800cb68 <_vfiprintf_r>
 800ca5e:	b002      	add	sp, #8
 800ca60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca64:	b003      	add	sp, #12
 800ca66:	4770      	bx	lr
 800ca68:	20000224 	.word	0x20000224

0800ca6c <memmove>:
 800ca6c:	4288      	cmp	r0, r1
 800ca6e:	b510      	push	{r4, lr}
 800ca70:	eb01 0402 	add.w	r4, r1, r2
 800ca74:	d902      	bls.n	800ca7c <memmove+0x10>
 800ca76:	4284      	cmp	r4, r0
 800ca78:	4623      	mov	r3, r4
 800ca7a:	d807      	bhi.n	800ca8c <memmove+0x20>
 800ca7c:	1e43      	subs	r3, r0, #1
 800ca7e:	42a1      	cmp	r1, r4
 800ca80:	d008      	beq.n	800ca94 <memmove+0x28>
 800ca82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca8a:	e7f8      	b.n	800ca7e <memmove+0x12>
 800ca8c:	4402      	add	r2, r0
 800ca8e:	4601      	mov	r1, r0
 800ca90:	428a      	cmp	r2, r1
 800ca92:	d100      	bne.n	800ca96 <memmove+0x2a>
 800ca94:	bd10      	pop	{r4, pc}
 800ca96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca9e:	e7f7      	b.n	800ca90 <memmove+0x24>

0800caa0 <__malloc_lock>:
 800caa0:	4801      	ldr	r0, [pc, #4]	; (800caa8 <__malloc_lock+0x8>)
 800caa2:	f000 bc11 	b.w	800d2c8 <__retarget_lock_acquire_recursive>
 800caa6:	bf00      	nop
 800caa8:	20000f04 	.word	0x20000f04

0800caac <__malloc_unlock>:
 800caac:	4801      	ldr	r0, [pc, #4]	; (800cab4 <__malloc_unlock+0x8>)
 800caae:	f000 bc0c 	b.w	800d2ca <__retarget_lock_release_recursive>
 800cab2:	bf00      	nop
 800cab4:	20000f04 	.word	0x20000f04

0800cab8 <_realloc_r>:
 800cab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cabc:	4680      	mov	r8, r0
 800cabe:	4614      	mov	r4, r2
 800cac0:	460e      	mov	r6, r1
 800cac2:	b921      	cbnz	r1, 800cace <_realloc_r+0x16>
 800cac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cac8:	4611      	mov	r1, r2
 800caca:	f7ff bd95 	b.w	800c5f8 <_malloc_r>
 800cace:	b92a      	cbnz	r2, 800cadc <_realloc_r+0x24>
 800cad0:	f7ff fd26 	bl	800c520 <_free_r>
 800cad4:	4625      	mov	r5, r4
 800cad6:	4628      	mov	r0, r5
 800cad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cadc:	f000 fc5c 	bl	800d398 <_malloc_usable_size_r>
 800cae0:	4284      	cmp	r4, r0
 800cae2:	4607      	mov	r7, r0
 800cae4:	d802      	bhi.n	800caec <_realloc_r+0x34>
 800cae6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800caea:	d812      	bhi.n	800cb12 <_realloc_r+0x5a>
 800caec:	4621      	mov	r1, r4
 800caee:	4640      	mov	r0, r8
 800caf0:	f7ff fd82 	bl	800c5f8 <_malloc_r>
 800caf4:	4605      	mov	r5, r0
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d0ed      	beq.n	800cad6 <_realloc_r+0x1e>
 800cafa:	42bc      	cmp	r4, r7
 800cafc:	4622      	mov	r2, r4
 800cafe:	4631      	mov	r1, r6
 800cb00:	bf28      	it	cs
 800cb02:	463a      	movcs	r2, r7
 800cb04:	f7fc f8c8 	bl	8008c98 <memcpy>
 800cb08:	4631      	mov	r1, r6
 800cb0a:	4640      	mov	r0, r8
 800cb0c:	f7ff fd08 	bl	800c520 <_free_r>
 800cb10:	e7e1      	b.n	800cad6 <_realloc_r+0x1e>
 800cb12:	4635      	mov	r5, r6
 800cb14:	e7df      	b.n	800cad6 <_realloc_r+0x1e>

0800cb16 <__sfputc_r>:
 800cb16:	6893      	ldr	r3, [r2, #8]
 800cb18:	3b01      	subs	r3, #1
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	b410      	push	{r4}
 800cb1e:	6093      	str	r3, [r2, #8]
 800cb20:	da08      	bge.n	800cb34 <__sfputc_r+0x1e>
 800cb22:	6994      	ldr	r4, [r2, #24]
 800cb24:	42a3      	cmp	r3, r4
 800cb26:	db01      	blt.n	800cb2c <__sfputc_r+0x16>
 800cb28:	290a      	cmp	r1, #10
 800cb2a:	d103      	bne.n	800cb34 <__sfputc_r+0x1e>
 800cb2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb30:	f000 b94a 	b.w	800cdc8 <__swbuf_r>
 800cb34:	6813      	ldr	r3, [r2, #0]
 800cb36:	1c58      	adds	r0, r3, #1
 800cb38:	6010      	str	r0, [r2, #0]
 800cb3a:	7019      	strb	r1, [r3, #0]
 800cb3c:	4608      	mov	r0, r1
 800cb3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <__sfputs_r>:
 800cb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb46:	4606      	mov	r6, r0
 800cb48:	460f      	mov	r7, r1
 800cb4a:	4614      	mov	r4, r2
 800cb4c:	18d5      	adds	r5, r2, r3
 800cb4e:	42ac      	cmp	r4, r5
 800cb50:	d101      	bne.n	800cb56 <__sfputs_r+0x12>
 800cb52:	2000      	movs	r0, #0
 800cb54:	e007      	b.n	800cb66 <__sfputs_r+0x22>
 800cb56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb5a:	463a      	mov	r2, r7
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	f7ff ffda 	bl	800cb16 <__sfputc_r>
 800cb62:	1c43      	adds	r3, r0, #1
 800cb64:	d1f3      	bne.n	800cb4e <__sfputs_r+0xa>
 800cb66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb68 <_vfiprintf_r>:
 800cb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb6c:	460d      	mov	r5, r1
 800cb6e:	b09d      	sub	sp, #116	; 0x74
 800cb70:	4614      	mov	r4, r2
 800cb72:	4698      	mov	r8, r3
 800cb74:	4606      	mov	r6, r0
 800cb76:	b118      	cbz	r0, 800cb80 <_vfiprintf_r+0x18>
 800cb78:	6983      	ldr	r3, [r0, #24]
 800cb7a:	b90b      	cbnz	r3, 800cb80 <_vfiprintf_r+0x18>
 800cb7c:	f000 fb06 	bl	800d18c <__sinit>
 800cb80:	4b89      	ldr	r3, [pc, #548]	; (800cda8 <_vfiprintf_r+0x240>)
 800cb82:	429d      	cmp	r5, r3
 800cb84:	d11b      	bne.n	800cbbe <_vfiprintf_r+0x56>
 800cb86:	6875      	ldr	r5, [r6, #4]
 800cb88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb8a:	07d9      	lsls	r1, r3, #31
 800cb8c:	d405      	bmi.n	800cb9a <_vfiprintf_r+0x32>
 800cb8e:	89ab      	ldrh	r3, [r5, #12]
 800cb90:	059a      	lsls	r2, r3, #22
 800cb92:	d402      	bmi.n	800cb9a <_vfiprintf_r+0x32>
 800cb94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb96:	f000 fb97 	bl	800d2c8 <__retarget_lock_acquire_recursive>
 800cb9a:	89ab      	ldrh	r3, [r5, #12]
 800cb9c:	071b      	lsls	r3, r3, #28
 800cb9e:	d501      	bpl.n	800cba4 <_vfiprintf_r+0x3c>
 800cba0:	692b      	ldr	r3, [r5, #16]
 800cba2:	b9eb      	cbnz	r3, 800cbe0 <_vfiprintf_r+0x78>
 800cba4:	4629      	mov	r1, r5
 800cba6:	4630      	mov	r0, r6
 800cba8:	f000 f960 	bl	800ce6c <__swsetup_r>
 800cbac:	b1c0      	cbz	r0, 800cbe0 <_vfiprintf_r+0x78>
 800cbae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbb0:	07dc      	lsls	r4, r3, #31
 800cbb2:	d50e      	bpl.n	800cbd2 <_vfiprintf_r+0x6a>
 800cbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb8:	b01d      	add	sp, #116	; 0x74
 800cbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbbe:	4b7b      	ldr	r3, [pc, #492]	; (800cdac <_vfiprintf_r+0x244>)
 800cbc0:	429d      	cmp	r5, r3
 800cbc2:	d101      	bne.n	800cbc8 <_vfiprintf_r+0x60>
 800cbc4:	68b5      	ldr	r5, [r6, #8]
 800cbc6:	e7df      	b.n	800cb88 <_vfiprintf_r+0x20>
 800cbc8:	4b79      	ldr	r3, [pc, #484]	; (800cdb0 <_vfiprintf_r+0x248>)
 800cbca:	429d      	cmp	r5, r3
 800cbcc:	bf08      	it	eq
 800cbce:	68f5      	ldreq	r5, [r6, #12]
 800cbd0:	e7da      	b.n	800cb88 <_vfiprintf_r+0x20>
 800cbd2:	89ab      	ldrh	r3, [r5, #12]
 800cbd4:	0598      	lsls	r0, r3, #22
 800cbd6:	d4ed      	bmi.n	800cbb4 <_vfiprintf_r+0x4c>
 800cbd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbda:	f000 fb76 	bl	800d2ca <__retarget_lock_release_recursive>
 800cbde:	e7e9      	b.n	800cbb4 <_vfiprintf_r+0x4c>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	9309      	str	r3, [sp, #36]	; 0x24
 800cbe4:	2320      	movs	r3, #32
 800cbe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbea:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbee:	2330      	movs	r3, #48	; 0x30
 800cbf0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cdb4 <_vfiprintf_r+0x24c>
 800cbf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbf8:	f04f 0901 	mov.w	r9, #1
 800cbfc:	4623      	mov	r3, r4
 800cbfe:	469a      	mov	sl, r3
 800cc00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc04:	b10a      	cbz	r2, 800cc0a <_vfiprintf_r+0xa2>
 800cc06:	2a25      	cmp	r2, #37	; 0x25
 800cc08:	d1f9      	bne.n	800cbfe <_vfiprintf_r+0x96>
 800cc0a:	ebba 0b04 	subs.w	fp, sl, r4
 800cc0e:	d00b      	beq.n	800cc28 <_vfiprintf_r+0xc0>
 800cc10:	465b      	mov	r3, fp
 800cc12:	4622      	mov	r2, r4
 800cc14:	4629      	mov	r1, r5
 800cc16:	4630      	mov	r0, r6
 800cc18:	f7ff ff94 	bl	800cb44 <__sfputs_r>
 800cc1c:	3001      	adds	r0, #1
 800cc1e:	f000 80aa 	beq.w	800cd76 <_vfiprintf_r+0x20e>
 800cc22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc24:	445a      	add	r2, fp
 800cc26:	9209      	str	r2, [sp, #36]	; 0x24
 800cc28:	f89a 3000 	ldrb.w	r3, [sl]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	f000 80a2 	beq.w	800cd76 <_vfiprintf_r+0x20e>
 800cc32:	2300      	movs	r3, #0
 800cc34:	f04f 32ff 	mov.w	r2, #4294967295
 800cc38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc3c:	f10a 0a01 	add.w	sl, sl, #1
 800cc40:	9304      	str	r3, [sp, #16]
 800cc42:	9307      	str	r3, [sp, #28]
 800cc44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc48:	931a      	str	r3, [sp, #104]	; 0x68
 800cc4a:	4654      	mov	r4, sl
 800cc4c:	2205      	movs	r2, #5
 800cc4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc52:	4858      	ldr	r0, [pc, #352]	; (800cdb4 <_vfiprintf_r+0x24c>)
 800cc54:	f7f3 facc 	bl	80001f0 <memchr>
 800cc58:	9a04      	ldr	r2, [sp, #16]
 800cc5a:	b9d8      	cbnz	r0, 800cc94 <_vfiprintf_r+0x12c>
 800cc5c:	06d1      	lsls	r1, r2, #27
 800cc5e:	bf44      	itt	mi
 800cc60:	2320      	movmi	r3, #32
 800cc62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc66:	0713      	lsls	r3, r2, #28
 800cc68:	bf44      	itt	mi
 800cc6a:	232b      	movmi	r3, #43	; 0x2b
 800cc6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc70:	f89a 3000 	ldrb.w	r3, [sl]
 800cc74:	2b2a      	cmp	r3, #42	; 0x2a
 800cc76:	d015      	beq.n	800cca4 <_vfiprintf_r+0x13c>
 800cc78:	9a07      	ldr	r2, [sp, #28]
 800cc7a:	4654      	mov	r4, sl
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	f04f 0c0a 	mov.w	ip, #10
 800cc82:	4621      	mov	r1, r4
 800cc84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc88:	3b30      	subs	r3, #48	; 0x30
 800cc8a:	2b09      	cmp	r3, #9
 800cc8c:	d94e      	bls.n	800cd2c <_vfiprintf_r+0x1c4>
 800cc8e:	b1b0      	cbz	r0, 800ccbe <_vfiprintf_r+0x156>
 800cc90:	9207      	str	r2, [sp, #28]
 800cc92:	e014      	b.n	800ccbe <_vfiprintf_r+0x156>
 800cc94:	eba0 0308 	sub.w	r3, r0, r8
 800cc98:	fa09 f303 	lsl.w	r3, r9, r3
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	9304      	str	r3, [sp, #16]
 800cca0:	46a2      	mov	sl, r4
 800cca2:	e7d2      	b.n	800cc4a <_vfiprintf_r+0xe2>
 800cca4:	9b03      	ldr	r3, [sp, #12]
 800cca6:	1d19      	adds	r1, r3, #4
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	9103      	str	r1, [sp, #12]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	bfbb      	ittet	lt
 800ccb0:	425b      	neglt	r3, r3
 800ccb2:	f042 0202 	orrlt.w	r2, r2, #2
 800ccb6:	9307      	strge	r3, [sp, #28]
 800ccb8:	9307      	strlt	r3, [sp, #28]
 800ccba:	bfb8      	it	lt
 800ccbc:	9204      	strlt	r2, [sp, #16]
 800ccbe:	7823      	ldrb	r3, [r4, #0]
 800ccc0:	2b2e      	cmp	r3, #46	; 0x2e
 800ccc2:	d10c      	bne.n	800ccde <_vfiprintf_r+0x176>
 800ccc4:	7863      	ldrb	r3, [r4, #1]
 800ccc6:	2b2a      	cmp	r3, #42	; 0x2a
 800ccc8:	d135      	bne.n	800cd36 <_vfiprintf_r+0x1ce>
 800ccca:	9b03      	ldr	r3, [sp, #12]
 800cccc:	1d1a      	adds	r2, r3, #4
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	9203      	str	r2, [sp, #12]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	bfb8      	it	lt
 800ccd6:	f04f 33ff 	movlt.w	r3, #4294967295
 800ccda:	3402      	adds	r4, #2
 800ccdc:	9305      	str	r3, [sp, #20]
 800ccde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cdc4 <_vfiprintf_r+0x25c>
 800cce2:	7821      	ldrb	r1, [r4, #0]
 800cce4:	2203      	movs	r2, #3
 800cce6:	4650      	mov	r0, sl
 800cce8:	f7f3 fa82 	bl	80001f0 <memchr>
 800ccec:	b140      	cbz	r0, 800cd00 <_vfiprintf_r+0x198>
 800ccee:	2340      	movs	r3, #64	; 0x40
 800ccf0:	eba0 000a 	sub.w	r0, r0, sl
 800ccf4:	fa03 f000 	lsl.w	r0, r3, r0
 800ccf8:	9b04      	ldr	r3, [sp, #16]
 800ccfa:	4303      	orrs	r3, r0
 800ccfc:	3401      	adds	r4, #1
 800ccfe:	9304      	str	r3, [sp, #16]
 800cd00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd04:	482c      	ldr	r0, [pc, #176]	; (800cdb8 <_vfiprintf_r+0x250>)
 800cd06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd0a:	2206      	movs	r2, #6
 800cd0c:	f7f3 fa70 	bl	80001f0 <memchr>
 800cd10:	2800      	cmp	r0, #0
 800cd12:	d03f      	beq.n	800cd94 <_vfiprintf_r+0x22c>
 800cd14:	4b29      	ldr	r3, [pc, #164]	; (800cdbc <_vfiprintf_r+0x254>)
 800cd16:	bb1b      	cbnz	r3, 800cd60 <_vfiprintf_r+0x1f8>
 800cd18:	9b03      	ldr	r3, [sp, #12]
 800cd1a:	3307      	adds	r3, #7
 800cd1c:	f023 0307 	bic.w	r3, r3, #7
 800cd20:	3308      	adds	r3, #8
 800cd22:	9303      	str	r3, [sp, #12]
 800cd24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd26:	443b      	add	r3, r7
 800cd28:	9309      	str	r3, [sp, #36]	; 0x24
 800cd2a:	e767      	b.n	800cbfc <_vfiprintf_r+0x94>
 800cd2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd30:	460c      	mov	r4, r1
 800cd32:	2001      	movs	r0, #1
 800cd34:	e7a5      	b.n	800cc82 <_vfiprintf_r+0x11a>
 800cd36:	2300      	movs	r3, #0
 800cd38:	3401      	adds	r4, #1
 800cd3a:	9305      	str	r3, [sp, #20]
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	f04f 0c0a 	mov.w	ip, #10
 800cd42:	4620      	mov	r0, r4
 800cd44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd48:	3a30      	subs	r2, #48	; 0x30
 800cd4a:	2a09      	cmp	r2, #9
 800cd4c:	d903      	bls.n	800cd56 <_vfiprintf_r+0x1ee>
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d0c5      	beq.n	800ccde <_vfiprintf_r+0x176>
 800cd52:	9105      	str	r1, [sp, #20]
 800cd54:	e7c3      	b.n	800ccde <_vfiprintf_r+0x176>
 800cd56:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e7f0      	b.n	800cd42 <_vfiprintf_r+0x1da>
 800cd60:	ab03      	add	r3, sp, #12
 800cd62:	9300      	str	r3, [sp, #0]
 800cd64:	462a      	mov	r2, r5
 800cd66:	4b16      	ldr	r3, [pc, #88]	; (800cdc0 <_vfiprintf_r+0x258>)
 800cd68:	a904      	add	r1, sp, #16
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	f7fc f84a 	bl	8008e04 <_printf_float>
 800cd70:	4607      	mov	r7, r0
 800cd72:	1c78      	adds	r0, r7, #1
 800cd74:	d1d6      	bne.n	800cd24 <_vfiprintf_r+0x1bc>
 800cd76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd78:	07d9      	lsls	r1, r3, #31
 800cd7a:	d405      	bmi.n	800cd88 <_vfiprintf_r+0x220>
 800cd7c:	89ab      	ldrh	r3, [r5, #12]
 800cd7e:	059a      	lsls	r2, r3, #22
 800cd80:	d402      	bmi.n	800cd88 <_vfiprintf_r+0x220>
 800cd82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd84:	f000 faa1 	bl	800d2ca <__retarget_lock_release_recursive>
 800cd88:	89ab      	ldrh	r3, [r5, #12]
 800cd8a:	065b      	lsls	r3, r3, #25
 800cd8c:	f53f af12 	bmi.w	800cbb4 <_vfiprintf_r+0x4c>
 800cd90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd92:	e711      	b.n	800cbb8 <_vfiprintf_r+0x50>
 800cd94:	ab03      	add	r3, sp, #12
 800cd96:	9300      	str	r3, [sp, #0]
 800cd98:	462a      	mov	r2, r5
 800cd9a:	4b09      	ldr	r3, [pc, #36]	; (800cdc0 <_vfiprintf_r+0x258>)
 800cd9c:	a904      	add	r1, sp, #16
 800cd9e:	4630      	mov	r0, r6
 800cda0:	f7fc fad4 	bl	800934c <_printf_i>
 800cda4:	e7e4      	b.n	800cd70 <_vfiprintf_r+0x208>
 800cda6:	bf00      	nop
 800cda8:	0800f084 	.word	0x0800f084
 800cdac:	0800f0a4 	.word	0x0800f0a4
 800cdb0:	0800f064 	.word	0x0800f064
 800cdb4:	0800f014 	.word	0x0800f014
 800cdb8:	0800f01e 	.word	0x0800f01e
 800cdbc:	08008e05 	.word	0x08008e05
 800cdc0:	0800cb45 	.word	0x0800cb45
 800cdc4:	0800f01a 	.word	0x0800f01a

0800cdc8 <__swbuf_r>:
 800cdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdca:	460e      	mov	r6, r1
 800cdcc:	4614      	mov	r4, r2
 800cdce:	4605      	mov	r5, r0
 800cdd0:	b118      	cbz	r0, 800cdda <__swbuf_r+0x12>
 800cdd2:	6983      	ldr	r3, [r0, #24]
 800cdd4:	b90b      	cbnz	r3, 800cdda <__swbuf_r+0x12>
 800cdd6:	f000 f9d9 	bl	800d18c <__sinit>
 800cdda:	4b21      	ldr	r3, [pc, #132]	; (800ce60 <__swbuf_r+0x98>)
 800cddc:	429c      	cmp	r4, r3
 800cdde:	d12b      	bne.n	800ce38 <__swbuf_r+0x70>
 800cde0:	686c      	ldr	r4, [r5, #4]
 800cde2:	69a3      	ldr	r3, [r4, #24]
 800cde4:	60a3      	str	r3, [r4, #8]
 800cde6:	89a3      	ldrh	r3, [r4, #12]
 800cde8:	071a      	lsls	r2, r3, #28
 800cdea:	d52f      	bpl.n	800ce4c <__swbuf_r+0x84>
 800cdec:	6923      	ldr	r3, [r4, #16]
 800cdee:	b36b      	cbz	r3, 800ce4c <__swbuf_r+0x84>
 800cdf0:	6923      	ldr	r3, [r4, #16]
 800cdf2:	6820      	ldr	r0, [r4, #0]
 800cdf4:	1ac0      	subs	r0, r0, r3
 800cdf6:	6963      	ldr	r3, [r4, #20]
 800cdf8:	b2f6      	uxtb	r6, r6
 800cdfa:	4283      	cmp	r3, r0
 800cdfc:	4637      	mov	r7, r6
 800cdfe:	dc04      	bgt.n	800ce0a <__swbuf_r+0x42>
 800ce00:	4621      	mov	r1, r4
 800ce02:	4628      	mov	r0, r5
 800ce04:	f000 f92e 	bl	800d064 <_fflush_r>
 800ce08:	bb30      	cbnz	r0, 800ce58 <__swbuf_r+0x90>
 800ce0a:	68a3      	ldr	r3, [r4, #8]
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	60a3      	str	r3, [r4, #8]
 800ce10:	6823      	ldr	r3, [r4, #0]
 800ce12:	1c5a      	adds	r2, r3, #1
 800ce14:	6022      	str	r2, [r4, #0]
 800ce16:	701e      	strb	r6, [r3, #0]
 800ce18:	6963      	ldr	r3, [r4, #20]
 800ce1a:	3001      	adds	r0, #1
 800ce1c:	4283      	cmp	r3, r0
 800ce1e:	d004      	beq.n	800ce2a <__swbuf_r+0x62>
 800ce20:	89a3      	ldrh	r3, [r4, #12]
 800ce22:	07db      	lsls	r3, r3, #31
 800ce24:	d506      	bpl.n	800ce34 <__swbuf_r+0x6c>
 800ce26:	2e0a      	cmp	r6, #10
 800ce28:	d104      	bne.n	800ce34 <__swbuf_r+0x6c>
 800ce2a:	4621      	mov	r1, r4
 800ce2c:	4628      	mov	r0, r5
 800ce2e:	f000 f919 	bl	800d064 <_fflush_r>
 800ce32:	b988      	cbnz	r0, 800ce58 <__swbuf_r+0x90>
 800ce34:	4638      	mov	r0, r7
 800ce36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce38:	4b0a      	ldr	r3, [pc, #40]	; (800ce64 <__swbuf_r+0x9c>)
 800ce3a:	429c      	cmp	r4, r3
 800ce3c:	d101      	bne.n	800ce42 <__swbuf_r+0x7a>
 800ce3e:	68ac      	ldr	r4, [r5, #8]
 800ce40:	e7cf      	b.n	800cde2 <__swbuf_r+0x1a>
 800ce42:	4b09      	ldr	r3, [pc, #36]	; (800ce68 <__swbuf_r+0xa0>)
 800ce44:	429c      	cmp	r4, r3
 800ce46:	bf08      	it	eq
 800ce48:	68ec      	ldreq	r4, [r5, #12]
 800ce4a:	e7ca      	b.n	800cde2 <__swbuf_r+0x1a>
 800ce4c:	4621      	mov	r1, r4
 800ce4e:	4628      	mov	r0, r5
 800ce50:	f000 f80c 	bl	800ce6c <__swsetup_r>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d0cb      	beq.n	800cdf0 <__swbuf_r+0x28>
 800ce58:	f04f 37ff 	mov.w	r7, #4294967295
 800ce5c:	e7ea      	b.n	800ce34 <__swbuf_r+0x6c>
 800ce5e:	bf00      	nop
 800ce60:	0800f084 	.word	0x0800f084
 800ce64:	0800f0a4 	.word	0x0800f0a4
 800ce68:	0800f064 	.word	0x0800f064

0800ce6c <__swsetup_r>:
 800ce6c:	4b32      	ldr	r3, [pc, #200]	; (800cf38 <__swsetup_r+0xcc>)
 800ce6e:	b570      	push	{r4, r5, r6, lr}
 800ce70:	681d      	ldr	r5, [r3, #0]
 800ce72:	4606      	mov	r6, r0
 800ce74:	460c      	mov	r4, r1
 800ce76:	b125      	cbz	r5, 800ce82 <__swsetup_r+0x16>
 800ce78:	69ab      	ldr	r3, [r5, #24]
 800ce7a:	b913      	cbnz	r3, 800ce82 <__swsetup_r+0x16>
 800ce7c:	4628      	mov	r0, r5
 800ce7e:	f000 f985 	bl	800d18c <__sinit>
 800ce82:	4b2e      	ldr	r3, [pc, #184]	; (800cf3c <__swsetup_r+0xd0>)
 800ce84:	429c      	cmp	r4, r3
 800ce86:	d10f      	bne.n	800cea8 <__swsetup_r+0x3c>
 800ce88:	686c      	ldr	r4, [r5, #4]
 800ce8a:	89a3      	ldrh	r3, [r4, #12]
 800ce8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce90:	0719      	lsls	r1, r3, #28
 800ce92:	d42c      	bmi.n	800ceee <__swsetup_r+0x82>
 800ce94:	06dd      	lsls	r5, r3, #27
 800ce96:	d411      	bmi.n	800cebc <__swsetup_r+0x50>
 800ce98:	2309      	movs	r3, #9
 800ce9a:	6033      	str	r3, [r6, #0]
 800ce9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cea0:	81a3      	strh	r3, [r4, #12]
 800cea2:	f04f 30ff 	mov.w	r0, #4294967295
 800cea6:	e03e      	b.n	800cf26 <__swsetup_r+0xba>
 800cea8:	4b25      	ldr	r3, [pc, #148]	; (800cf40 <__swsetup_r+0xd4>)
 800ceaa:	429c      	cmp	r4, r3
 800ceac:	d101      	bne.n	800ceb2 <__swsetup_r+0x46>
 800ceae:	68ac      	ldr	r4, [r5, #8]
 800ceb0:	e7eb      	b.n	800ce8a <__swsetup_r+0x1e>
 800ceb2:	4b24      	ldr	r3, [pc, #144]	; (800cf44 <__swsetup_r+0xd8>)
 800ceb4:	429c      	cmp	r4, r3
 800ceb6:	bf08      	it	eq
 800ceb8:	68ec      	ldreq	r4, [r5, #12]
 800ceba:	e7e6      	b.n	800ce8a <__swsetup_r+0x1e>
 800cebc:	0758      	lsls	r0, r3, #29
 800cebe:	d512      	bpl.n	800cee6 <__swsetup_r+0x7a>
 800cec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cec2:	b141      	cbz	r1, 800ced6 <__swsetup_r+0x6a>
 800cec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cec8:	4299      	cmp	r1, r3
 800ceca:	d002      	beq.n	800ced2 <__swsetup_r+0x66>
 800cecc:	4630      	mov	r0, r6
 800cece:	f7ff fb27 	bl	800c520 <_free_r>
 800ced2:	2300      	movs	r3, #0
 800ced4:	6363      	str	r3, [r4, #52]	; 0x34
 800ced6:	89a3      	ldrh	r3, [r4, #12]
 800ced8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cedc:	81a3      	strh	r3, [r4, #12]
 800cede:	2300      	movs	r3, #0
 800cee0:	6063      	str	r3, [r4, #4]
 800cee2:	6923      	ldr	r3, [r4, #16]
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	89a3      	ldrh	r3, [r4, #12]
 800cee8:	f043 0308 	orr.w	r3, r3, #8
 800ceec:	81a3      	strh	r3, [r4, #12]
 800ceee:	6923      	ldr	r3, [r4, #16]
 800cef0:	b94b      	cbnz	r3, 800cf06 <__swsetup_r+0x9a>
 800cef2:	89a3      	ldrh	r3, [r4, #12]
 800cef4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cefc:	d003      	beq.n	800cf06 <__swsetup_r+0x9a>
 800cefe:	4621      	mov	r1, r4
 800cf00:	4630      	mov	r0, r6
 800cf02:	f000 fa09 	bl	800d318 <__smakebuf_r>
 800cf06:	89a0      	ldrh	r0, [r4, #12]
 800cf08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf0c:	f010 0301 	ands.w	r3, r0, #1
 800cf10:	d00a      	beq.n	800cf28 <__swsetup_r+0xbc>
 800cf12:	2300      	movs	r3, #0
 800cf14:	60a3      	str	r3, [r4, #8]
 800cf16:	6963      	ldr	r3, [r4, #20]
 800cf18:	425b      	negs	r3, r3
 800cf1a:	61a3      	str	r3, [r4, #24]
 800cf1c:	6923      	ldr	r3, [r4, #16]
 800cf1e:	b943      	cbnz	r3, 800cf32 <__swsetup_r+0xc6>
 800cf20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cf24:	d1ba      	bne.n	800ce9c <__swsetup_r+0x30>
 800cf26:	bd70      	pop	{r4, r5, r6, pc}
 800cf28:	0781      	lsls	r1, r0, #30
 800cf2a:	bf58      	it	pl
 800cf2c:	6963      	ldrpl	r3, [r4, #20]
 800cf2e:	60a3      	str	r3, [r4, #8]
 800cf30:	e7f4      	b.n	800cf1c <__swsetup_r+0xb0>
 800cf32:	2000      	movs	r0, #0
 800cf34:	e7f7      	b.n	800cf26 <__swsetup_r+0xba>
 800cf36:	bf00      	nop
 800cf38:	20000224 	.word	0x20000224
 800cf3c:	0800f084 	.word	0x0800f084
 800cf40:	0800f0a4 	.word	0x0800f0a4
 800cf44:	0800f064 	.word	0x0800f064

0800cf48 <abort>:
 800cf48:	b508      	push	{r3, lr}
 800cf4a:	2006      	movs	r0, #6
 800cf4c:	f000 fa54 	bl	800d3f8 <raise>
 800cf50:	2001      	movs	r0, #1
 800cf52:	f7f5 ff91 	bl	8002e78 <_exit>
	...

0800cf58 <__sflush_r>:
 800cf58:	898a      	ldrh	r2, [r1, #12]
 800cf5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf5e:	4605      	mov	r5, r0
 800cf60:	0710      	lsls	r0, r2, #28
 800cf62:	460c      	mov	r4, r1
 800cf64:	d458      	bmi.n	800d018 <__sflush_r+0xc0>
 800cf66:	684b      	ldr	r3, [r1, #4]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	dc05      	bgt.n	800cf78 <__sflush_r+0x20>
 800cf6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	dc02      	bgt.n	800cf78 <__sflush_r+0x20>
 800cf72:	2000      	movs	r0, #0
 800cf74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf7a:	2e00      	cmp	r6, #0
 800cf7c:	d0f9      	beq.n	800cf72 <__sflush_r+0x1a>
 800cf7e:	2300      	movs	r3, #0
 800cf80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf84:	682f      	ldr	r7, [r5, #0]
 800cf86:	602b      	str	r3, [r5, #0]
 800cf88:	d032      	beq.n	800cff0 <__sflush_r+0x98>
 800cf8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf8c:	89a3      	ldrh	r3, [r4, #12]
 800cf8e:	075a      	lsls	r2, r3, #29
 800cf90:	d505      	bpl.n	800cf9e <__sflush_r+0x46>
 800cf92:	6863      	ldr	r3, [r4, #4]
 800cf94:	1ac0      	subs	r0, r0, r3
 800cf96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf98:	b10b      	cbz	r3, 800cf9e <__sflush_r+0x46>
 800cf9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf9c:	1ac0      	subs	r0, r0, r3
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cfa4:	6a21      	ldr	r1, [r4, #32]
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	47b0      	blx	r6
 800cfaa:	1c43      	adds	r3, r0, #1
 800cfac:	89a3      	ldrh	r3, [r4, #12]
 800cfae:	d106      	bne.n	800cfbe <__sflush_r+0x66>
 800cfb0:	6829      	ldr	r1, [r5, #0]
 800cfb2:	291d      	cmp	r1, #29
 800cfb4:	d82c      	bhi.n	800d010 <__sflush_r+0xb8>
 800cfb6:	4a2a      	ldr	r2, [pc, #168]	; (800d060 <__sflush_r+0x108>)
 800cfb8:	40ca      	lsrs	r2, r1
 800cfba:	07d6      	lsls	r6, r2, #31
 800cfbc:	d528      	bpl.n	800d010 <__sflush_r+0xb8>
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	6062      	str	r2, [r4, #4]
 800cfc2:	04d9      	lsls	r1, r3, #19
 800cfc4:	6922      	ldr	r2, [r4, #16]
 800cfc6:	6022      	str	r2, [r4, #0]
 800cfc8:	d504      	bpl.n	800cfd4 <__sflush_r+0x7c>
 800cfca:	1c42      	adds	r2, r0, #1
 800cfcc:	d101      	bne.n	800cfd2 <__sflush_r+0x7a>
 800cfce:	682b      	ldr	r3, [r5, #0]
 800cfd0:	b903      	cbnz	r3, 800cfd4 <__sflush_r+0x7c>
 800cfd2:	6560      	str	r0, [r4, #84]	; 0x54
 800cfd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfd6:	602f      	str	r7, [r5, #0]
 800cfd8:	2900      	cmp	r1, #0
 800cfda:	d0ca      	beq.n	800cf72 <__sflush_r+0x1a>
 800cfdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfe0:	4299      	cmp	r1, r3
 800cfe2:	d002      	beq.n	800cfea <__sflush_r+0x92>
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	f7ff fa9b 	bl	800c520 <_free_r>
 800cfea:	2000      	movs	r0, #0
 800cfec:	6360      	str	r0, [r4, #52]	; 0x34
 800cfee:	e7c1      	b.n	800cf74 <__sflush_r+0x1c>
 800cff0:	6a21      	ldr	r1, [r4, #32]
 800cff2:	2301      	movs	r3, #1
 800cff4:	4628      	mov	r0, r5
 800cff6:	47b0      	blx	r6
 800cff8:	1c41      	adds	r1, r0, #1
 800cffa:	d1c7      	bne.n	800cf8c <__sflush_r+0x34>
 800cffc:	682b      	ldr	r3, [r5, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d0c4      	beq.n	800cf8c <__sflush_r+0x34>
 800d002:	2b1d      	cmp	r3, #29
 800d004:	d001      	beq.n	800d00a <__sflush_r+0xb2>
 800d006:	2b16      	cmp	r3, #22
 800d008:	d101      	bne.n	800d00e <__sflush_r+0xb6>
 800d00a:	602f      	str	r7, [r5, #0]
 800d00c:	e7b1      	b.n	800cf72 <__sflush_r+0x1a>
 800d00e:	89a3      	ldrh	r3, [r4, #12]
 800d010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d014:	81a3      	strh	r3, [r4, #12]
 800d016:	e7ad      	b.n	800cf74 <__sflush_r+0x1c>
 800d018:	690f      	ldr	r7, [r1, #16]
 800d01a:	2f00      	cmp	r7, #0
 800d01c:	d0a9      	beq.n	800cf72 <__sflush_r+0x1a>
 800d01e:	0793      	lsls	r3, r2, #30
 800d020:	680e      	ldr	r6, [r1, #0]
 800d022:	bf08      	it	eq
 800d024:	694b      	ldreq	r3, [r1, #20]
 800d026:	600f      	str	r7, [r1, #0]
 800d028:	bf18      	it	ne
 800d02a:	2300      	movne	r3, #0
 800d02c:	eba6 0807 	sub.w	r8, r6, r7
 800d030:	608b      	str	r3, [r1, #8]
 800d032:	f1b8 0f00 	cmp.w	r8, #0
 800d036:	dd9c      	ble.n	800cf72 <__sflush_r+0x1a>
 800d038:	6a21      	ldr	r1, [r4, #32]
 800d03a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d03c:	4643      	mov	r3, r8
 800d03e:	463a      	mov	r2, r7
 800d040:	4628      	mov	r0, r5
 800d042:	47b0      	blx	r6
 800d044:	2800      	cmp	r0, #0
 800d046:	dc06      	bgt.n	800d056 <__sflush_r+0xfe>
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d04e:	81a3      	strh	r3, [r4, #12]
 800d050:	f04f 30ff 	mov.w	r0, #4294967295
 800d054:	e78e      	b.n	800cf74 <__sflush_r+0x1c>
 800d056:	4407      	add	r7, r0
 800d058:	eba8 0800 	sub.w	r8, r8, r0
 800d05c:	e7e9      	b.n	800d032 <__sflush_r+0xda>
 800d05e:	bf00      	nop
 800d060:	20400001 	.word	0x20400001

0800d064 <_fflush_r>:
 800d064:	b538      	push	{r3, r4, r5, lr}
 800d066:	690b      	ldr	r3, [r1, #16]
 800d068:	4605      	mov	r5, r0
 800d06a:	460c      	mov	r4, r1
 800d06c:	b913      	cbnz	r3, 800d074 <_fflush_r+0x10>
 800d06e:	2500      	movs	r5, #0
 800d070:	4628      	mov	r0, r5
 800d072:	bd38      	pop	{r3, r4, r5, pc}
 800d074:	b118      	cbz	r0, 800d07e <_fflush_r+0x1a>
 800d076:	6983      	ldr	r3, [r0, #24]
 800d078:	b90b      	cbnz	r3, 800d07e <_fflush_r+0x1a>
 800d07a:	f000 f887 	bl	800d18c <__sinit>
 800d07e:	4b14      	ldr	r3, [pc, #80]	; (800d0d0 <_fflush_r+0x6c>)
 800d080:	429c      	cmp	r4, r3
 800d082:	d11b      	bne.n	800d0bc <_fflush_r+0x58>
 800d084:	686c      	ldr	r4, [r5, #4]
 800d086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d0ef      	beq.n	800d06e <_fflush_r+0xa>
 800d08e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d090:	07d0      	lsls	r0, r2, #31
 800d092:	d404      	bmi.n	800d09e <_fflush_r+0x3a>
 800d094:	0599      	lsls	r1, r3, #22
 800d096:	d402      	bmi.n	800d09e <_fflush_r+0x3a>
 800d098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d09a:	f000 f915 	bl	800d2c8 <__retarget_lock_acquire_recursive>
 800d09e:	4628      	mov	r0, r5
 800d0a0:	4621      	mov	r1, r4
 800d0a2:	f7ff ff59 	bl	800cf58 <__sflush_r>
 800d0a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0a8:	07da      	lsls	r2, r3, #31
 800d0aa:	4605      	mov	r5, r0
 800d0ac:	d4e0      	bmi.n	800d070 <_fflush_r+0xc>
 800d0ae:	89a3      	ldrh	r3, [r4, #12]
 800d0b0:	059b      	lsls	r3, r3, #22
 800d0b2:	d4dd      	bmi.n	800d070 <_fflush_r+0xc>
 800d0b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0b6:	f000 f908 	bl	800d2ca <__retarget_lock_release_recursive>
 800d0ba:	e7d9      	b.n	800d070 <_fflush_r+0xc>
 800d0bc:	4b05      	ldr	r3, [pc, #20]	; (800d0d4 <_fflush_r+0x70>)
 800d0be:	429c      	cmp	r4, r3
 800d0c0:	d101      	bne.n	800d0c6 <_fflush_r+0x62>
 800d0c2:	68ac      	ldr	r4, [r5, #8]
 800d0c4:	e7df      	b.n	800d086 <_fflush_r+0x22>
 800d0c6:	4b04      	ldr	r3, [pc, #16]	; (800d0d8 <_fflush_r+0x74>)
 800d0c8:	429c      	cmp	r4, r3
 800d0ca:	bf08      	it	eq
 800d0cc:	68ec      	ldreq	r4, [r5, #12]
 800d0ce:	e7da      	b.n	800d086 <_fflush_r+0x22>
 800d0d0:	0800f084 	.word	0x0800f084
 800d0d4:	0800f0a4 	.word	0x0800f0a4
 800d0d8:	0800f064 	.word	0x0800f064

0800d0dc <std>:
 800d0dc:	2300      	movs	r3, #0
 800d0de:	b510      	push	{r4, lr}
 800d0e0:	4604      	mov	r4, r0
 800d0e2:	e9c0 3300 	strd	r3, r3, [r0]
 800d0e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d0ea:	6083      	str	r3, [r0, #8]
 800d0ec:	8181      	strh	r1, [r0, #12]
 800d0ee:	6643      	str	r3, [r0, #100]	; 0x64
 800d0f0:	81c2      	strh	r2, [r0, #14]
 800d0f2:	6183      	str	r3, [r0, #24]
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	2208      	movs	r2, #8
 800d0f8:	305c      	adds	r0, #92	; 0x5c
 800d0fa:	f7fb fddb 	bl	8008cb4 <memset>
 800d0fe:	4b05      	ldr	r3, [pc, #20]	; (800d114 <std+0x38>)
 800d100:	6263      	str	r3, [r4, #36]	; 0x24
 800d102:	4b05      	ldr	r3, [pc, #20]	; (800d118 <std+0x3c>)
 800d104:	62a3      	str	r3, [r4, #40]	; 0x28
 800d106:	4b05      	ldr	r3, [pc, #20]	; (800d11c <std+0x40>)
 800d108:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d10a:	4b05      	ldr	r3, [pc, #20]	; (800d120 <std+0x44>)
 800d10c:	6224      	str	r4, [r4, #32]
 800d10e:	6323      	str	r3, [r4, #48]	; 0x30
 800d110:	bd10      	pop	{r4, pc}
 800d112:	bf00      	nop
 800d114:	0800d431 	.word	0x0800d431
 800d118:	0800d453 	.word	0x0800d453
 800d11c:	0800d48b 	.word	0x0800d48b
 800d120:	0800d4af 	.word	0x0800d4af

0800d124 <_cleanup_r>:
 800d124:	4901      	ldr	r1, [pc, #4]	; (800d12c <_cleanup_r+0x8>)
 800d126:	f000 b8af 	b.w	800d288 <_fwalk_reent>
 800d12a:	bf00      	nop
 800d12c:	0800d065 	.word	0x0800d065

0800d130 <__sfmoreglue>:
 800d130:	b570      	push	{r4, r5, r6, lr}
 800d132:	2268      	movs	r2, #104	; 0x68
 800d134:	1e4d      	subs	r5, r1, #1
 800d136:	4355      	muls	r5, r2
 800d138:	460e      	mov	r6, r1
 800d13a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d13e:	f7ff fa5b 	bl	800c5f8 <_malloc_r>
 800d142:	4604      	mov	r4, r0
 800d144:	b140      	cbz	r0, 800d158 <__sfmoreglue+0x28>
 800d146:	2100      	movs	r1, #0
 800d148:	e9c0 1600 	strd	r1, r6, [r0]
 800d14c:	300c      	adds	r0, #12
 800d14e:	60a0      	str	r0, [r4, #8]
 800d150:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d154:	f7fb fdae 	bl	8008cb4 <memset>
 800d158:	4620      	mov	r0, r4
 800d15a:	bd70      	pop	{r4, r5, r6, pc}

0800d15c <__sfp_lock_acquire>:
 800d15c:	4801      	ldr	r0, [pc, #4]	; (800d164 <__sfp_lock_acquire+0x8>)
 800d15e:	f000 b8b3 	b.w	800d2c8 <__retarget_lock_acquire_recursive>
 800d162:	bf00      	nop
 800d164:	20000f05 	.word	0x20000f05

0800d168 <__sfp_lock_release>:
 800d168:	4801      	ldr	r0, [pc, #4]	; (800d170 <__sfp_lock_release+0x8>)
 800d16a:	f000 b8ae 	b.w	800d2ca <__retarget_lock_release_recursive>
 800d16e:	bf00      	nop
 800d170:	20000f05 	.word	0x20000f05

0800d174 <__sinit_lock_acquire>:
 800d174:	4801      	ldr	r0, [pc, #4]	; (800d17c <__sinit_lock_acquire+0x8>)
 800d176:	f000 b8a7 	b.w	800d2c8 <__retarget_lock_acquire_recursive>
 800d17a:	bf00      	nop
 800d17c:	20000f06 	.word	0x20000f06

0800d180 <__sinit_lock_release>:
 800d180:	4801      	ldr	r0, [pc, #4]	; (800d188 <__sinit_lock_release+0x8>)
 800d182:	f000 b8a2 	b.w	800d2ca <__retarget_lock_release_recursive>
 800d186:	bf00      	nop
 800d188:	20000f06 	.word	0x20000f06

0800d18c <__sinit>:
 800d18c:	b510      	push	{r4, lr}
 800d18e:	4604      	mov	r4, r0
 800d190:	f7ff fff0 	bl	800d174 <__sinit_lock_acquire>
 800d194:	69a3      	ldr	r3, [r4, #24]
 800d196:	b11b      	cbz	r3, 800d1a0 <__sinit+0x14>
 800d198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d19c:	f7ff bff0 	b.w	800d180 <__sinit_lock_release>
 800d1a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d1a4:	6523      	str	r3, [r4, #80]	; 0x50
 800d1a6:	4b13      	ldr	r3, [pc, #76]	; (800d1f4 <__sinit+0x68>)
 800d1a8:	4a13      	ldr	r2, [pc, #76]	; (800d1f8 <__sinit+0x6c>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800d1ae:	42a3      	cmp	r3, r4
 800d1b0:	bf04      	itt	eq
 800d1b2:	2301      	moveq	r3, #1
 800d1b4:	61a3      	streq	r3, [r4, #24]
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f000 f820 	bl	800d1fc <__sfp>
 800d1bc:	6060      	str	r0, [r4, #4]
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f000 f81c 	bl	800d1fc <__sfp>
 800d1c4:	60a0      	str	r0, [r4, #8]
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f000 f818 	bl	800d1fc <__sfp>
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	60e0      	str	r0, [r4, #12]
 800d1d0:	2104      	movs	r1, #4
 800d1d2:	6860      	ldr	r0, [r4, #4]
 800d1d4:	f7ff ff82 	bl	800d0dc <std>
 800d1d8:	68a0      	ldr	r0, [r4, #8]
 800d1da:	2201      	movs	r2, #1
 800d1dc:	2109      	movs	r1, #9
 800d1de:	f7ff ff7d 	bl	800d0dc <std>
 800d1e2:	68e0      	ldr	r0, [r4, #12]
 800d1e4:	2202      	movs	r2, #2
 800d1e6:	2112      	movs	r1, #18
 800d1e8:	f7ff ff78 	bl	800d0dc <std>
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	61a3      	str	r3, [r4, #24]
 800d1f0:	e7d2      	b.n	800d198 <__sinit+0xc>
 800d1f2:	bf00      	nop
 800d1f4:	0800ec20 	.word	0x0800ec20
 800d1f8:	0800d125 	.word	0x0800d125

0800d1fc <__sfp>:
 800d1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1fe:	4607      	mov	r7, r0
 800d200:	f7ff ffac 	bl	800d15c <__sfp_lock_acquire>
 800d204:	4b1e      	ldr	r3, [pc, #120]	; (800d280 <__sfp+0x84>)
 800d206:	681e      	ldr	r6, [r3, #0]
 800d208:	69b3      	ldr	r3, [r6, #24]
 800d20a:	b913      	cbnz	r3, 800d212 <__sfp+0x16>
 800d20c:	4630      	mov	r0, r6
 800d20e:	f7ff ffbd 	bl	800d18c <__sinit>
 800d212:	3648      	adds	r6, #72	; 0x48
 800d214:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d218:	3b01      	subs	r3, #1
 800d21a:	d503      	bpl.n	800d224 <__sfp+0x28>
 800d21c:	6833      	ldr	r3, [r6, #0]
 800d21e:	b30b      	cbz	r3, 800d264 <__sfp+0x68>
 800d220:	6836      	ldr	r6, [r6, #0]
 800d222:	e7f7      	b.n	800d214 <__sfp+0x18>
 800d224:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d228:	b9d5      	cbnz	r5, 800d260 <__sfp+0x64>
 800d22a:	4b16      	ldr	r3, [pc, #88]	; (800d284 <__sfp+0x88>)
 800d22c:	60e3      	str	r3, [r4, #12]
 800d22e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d232:	6665      	str	r5, [r4, #100]	; 0x64
 800d234:	f000 f847 	bl	800d2c6 <__retarget_lock_init_recursive>
 800d238:	f7ff ff96 	bl	800d168 <__sfp_lock_release>
 800d23c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d240:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d244:	6025      	str	r5, [r4, #0]
 800d246:	61a5      	str	r5, [r4, #24]
 800d248:	2208      	movs	r2, #8
 800d24a:	4629      	mov	r1, r5
 800d24c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d250:	f7fb fd30 	bl	8008cb4 <memset>
 800d254:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d258:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d25c:	4620      	mov	r0, r4
 800d25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d260:	3468      	adds	r4, #104	; 0x68
 800d262:	e7d9      	b.n	800d218 <__sfp+0x1c>
 800d264:	2104      	movs	r1, #4
 800d266:	4638      	mov	r0, r7
 800d268:	f7ff ff62 	bl	800d130 <__sfmoreglue>
 800d26c:	4604      	mov	r4, r0
 800d26e:	6030      	str	r0, [r6, #0]
 800d270:	2800      	cmp	r0, #0
 800d272:	d1d5      	bne.n	800d220 <__sfp+0x24>
 800d274:	f7ff ff78 	bl	800d168 <__sfp_lock_release>
 800d278:	230c      	movs	r3, #12
 800d27a:	603b      	str	r3, [r7, #0]
 800d27c:	e7ee      	b.n	800d25c <__sfp+0x60>
 800d27e:	bf00      	nop
 800d280:	0800ec20 	.word	0x0800ec20
 800d284:	ffff0001 	.word	0xffff0001

0800d288 <_fwalk_reent>:
 800d288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d28c:	4606      	mov	r6, r0
 800d28e:	4688      	mov	r8, r1
 800d290:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d294:	2700      	movs	r7, #0
 800d296:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d29a:	f1b9 0901 	subs.w	r9, r9, #1
 800d29e:	d505      	bpl.n	800d2ac <_fwalk_reent+0x24>
 800d2a0:	6824      	ldr	r4, [r4, #0]
 800d2a2:	2c00      	cmp	r4, #0
 800d2a4:	d1f7      	bne.n	800d296 <_fwalk_reent+0xe>
 800d2a6:	4638      	mov	r0, r7
 800d2a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2ac:	89ab      	ldrh	r3, [r5, #12]
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d907      	bls.n	800d2c2 <_fwalk_reent+0x3a>
 800d2b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	d003      	beq.n	800d2c2 <_fwalk_reent+0x3a>
 800d2ba:	4629      	mov	r1, r5
 800d2bc:	4630      	mov	r0, r6
 800d2be:	47c0      	blx	r8
 800d2c0:	4307      	orrs	r7, r0
 800d2c2:	3568      	adds	r5, #104	; 0x68
 800d2c4:	e7e9      	b.n	800d29a <_fwalk_reent+0x12>

0800d2c6 <__retarget_lock_init_recursive>:
 800d2c6:	4770      	bx	lr

0800d2c8 <__retarget_lock_acquire_recursive>:
 800d2c8:	4770      	bx	lr

0800d2ca <__retarget_lock_release_recursive>:
 800d2ca:	4770      	bx	lr

0800d2cc <__swhatbuf_r>:
 800d2cc:	b570      	push	{r4, r5, r6, lr}
 800d2ce:	460e      	mov	r6, r1
 800d2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2d4:	2900      	cmp	r1, #0
 800d2d6:	b096      	sub	sp, #88	; 0x58
 800d2d8:	4614      	mov	r4, r2
 800d2da:	461d      	mov	r5, r3
 800d2dc:	da08      	bge.n	800d2f0 <__swhatbuf_r+0x24>
 800d2de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	602a      	str	r2, [r5, #0]
 800d2e6:	061a      	lsls	r2, r3, #24
 800d2e8:	d410      	bmi.n	800d30c <__swhatbuf_r+0x40>
 800d2ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2ee:	e00e      	b.n	800d30e <__swhatbuf_r+0x42>
 800d2f0:	466a      	mov	r2, sp
 800d2f2:	f000 f903 	bl	800d4fc <_fstat_r>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	dbf1      	blt.n	800d2de <__swhatbuf_r+0x12>
 800d2fa:	9a01      	ldr	r2, [sp, #4]
 800d2fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d300:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d304:	425a      	negs	r2, r3
 800d306:	415a      	adcs	r2, r3
 800d308:	602a      	str	r2, [r5, #0]
 800d30a:	e7ee      	b.n	800d2ea <__swhatbuf_r+0x1e>
 800d30c:	2340      	movs	r3, #64	; 0x40
 800d30e:	2000      	movs	r0, #0
 800d310:	6023      	str	r3, [r4, #0]
 800d312:	b016      	add	sp, #88	; 0x58
 800d314:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d318 <__smakebuf_r>:
 800d318:	898b      	ldrh	r3, [r1, #12]
 800d31a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d31c:	079d      	lsls	r5, r3, #30
 800d31e:	4606      	mov	r6, r0
 800d320:	460c      	mov	r4, r1
 800d322:	d507      	bpl.n	800d334 <__smakebuf_r+0x1c>
 800d324:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	6123      	str	r3, [r4, #16]
 800d32c:	2301      	movs	r3, #1
 800d32e:	6163      	str	r3, [r4, #20]
 800d330:	b002      	add	sp, #8
 800d332:	bd70      	pop	{r4, r5, r6, pc}
 800d334:	ab01      	add	r3, sp, #4
 800d336:	466a      	mov	r2, sp
 800d338:	f7ff ffc8 	bl	800d2cc <__swhatbuf_r>
 800d33c:	9900      	ldr	r1, [sp, #0]
 800d33e:	4605      	mov	r5, r0
 800d340:	4630      	mov	r0, r6
 800d342:	f7ff f959 	bl	800c5f8 <_malloc_r>
 800d346:	b948      	cbnz	r0, 800d35c <__smakebuf_r+0x44>
 800d348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d34c:	059a      	lsls	r2, r3, #22
 800d34e:	d4ef      	bmi.n	800d330 <__smakebuf_r+0x18>
 800d350:	f023 0303 	bic.w	r3, r3, #3
 800d354:	f043 0302 	orr.w	r3, r3, #2
 800d358:	81a3      	strh	r3, [r4, #12]
 800d35a:	e7e3      	b.n	800d324 <__smakebuf_r+0xc>
 800d35c:	4b0d      	ldr	r3, [pc, #52]	; (800d394 <__smakebuf_r+0x7c>)
 800d35e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d360:	89a3      	ldrh	r3, [r4, #12]
 800d362:	6020      	str	r0, [r4, #0]
 800d364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d368:	81a3      	strh	r3, [r4, #12]
 800d36a:	9b00      	ldr	r3, [sp, #0]
 800d36c:	6163      	str	r3, [r4, #20]
 800d36e:	9b01      	ldr	r3, [sp, #4]
 800d370:	6120      	str	r0, [r4, #16]
 800d372:	b15b      	cbz	r3, 800d38c <__smakebuf_r+0x74>
 800d374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d378:	4630      	mov	r0, r6
 800d37a:	f000 f8d1 	bl	800d520 <_isatty_r>
 800d37e:	b128      	cbz	r0, 800d38c <__smakebuf_r+0x74>
 800d380:	89a3      	ldrh	r3, [r4, #12]
 800d382:	f023 0303 	bic.w	r3, r3, #3
 800d386:	f043 0301 	orr.w	r3, r3, #1
 800d38a:	81a3      	strh	r3, [r4, #12]
 800d38c:	89a0      	ldrh	r0, [r4, #12]
 800d38e:	4305      	orrs	r5, r0
 800d390:	81a5      	strh	r5, [r4, #12]
 800d392:	e7cd      	b.n	800d330 <__smakebuf_r+0x18>
 800d394:	0800d125 	.word	0x0800d125

0800d398 <_malloc_usable_size_r>:
 800d398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d39c:	1f18      	subs	r0, r3, #4
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	bfbc      	itt	lt
 800d3a2:	580b      	ldrlt	r3, [r1, r0]
 800d3a4:	18c0      	addlt	r0, r0, r3
 800d3a6:	4770      	bx	lr

0800d3a8 <_raise_r>:
 800d3a8:	291f      	cmp	r1, #31
 800d3aa:	b538      	push	{r3, r4, r5, lr}
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	460d      	mov	r5, r1
 800d3b0:	d904      	bls.n	800d3bc <_raise_r+0x14>
 800d3b2:	2316      	movs	r3, #22
 800d3b4:	6003      	str	r3, [r0, #0]
 800d3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ba:	bd38      	pop	{r3, r4, r5, pc}
 800d3bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d3be:	b112      	cbz	r2, 800d3c6 <_raise_r+0x1e>
 800d3c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3c4:	b94b      	cbnz	r3, 800d3da <_raise_r+0x32>
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	f000 f830 	bl	800d42c <_getpid_r>
 800d3cc:	462a      	mov	r2, r5
 800d3ce:	4601      	mov	r1, r0
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3d6:	f000 b817 	b.w	800d408 <_kill_r>
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d00a      	beq.n	800d3f4 <_raise_r+0x4c>
 800d3de:	1c59      	adds	r1, r3, #1
 800d3e0:	d103      	bne.n	800d3ea <_raise_r+0x42>
 800d3e2:	2316      	movs	r3, #22
 800d3e4:	6003      	str	r3, [r0, #0]
 800d3e6:	2001      	movs	r0, #1
 800d3e8:	e7e7      	b.n	800d3ba <_raise_r+0x12>
 800d3ea:	2400      	movs	r4, #0
 800d3ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	4798      	blx	r3
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	e7e0      	b.n	800d3ba <_raise_r+0x12>

0800d3f8 <raise>:
 800d3f8:	4b02      	ldr	r3, [pc, #8]	; (800d404 <raise+0xc>)
 800d3fa:	4601      	mov	r1, r0
 800d3fc:	6818      	ldr	r0, [r3, #0]
 800d3fe:	f7ff bfd3 	b.w	800d3a8 <_raise_r>
 800d402:	bf00      	nop
 800d404:	20000224 	.word	0x20000224

0800d408 <_kill_r>:
 800d408:	b538      	push	{r3, r4, r5, lr}
 800d40a:	4d07      	ldr	r5, [pc, #28]	; (800d428 <_kill_r+0x20>)
 800d40c:	2300      	movs	r3, #0
 800d40e:	4604      	mov	r4, r0
 800d410:	4608      	mov	r0, r1
 800d412:	4611      	mov	r1, r2
 800d414:	602b      	str	r3, [r5, #0]
 800d416:	f7f5 fd1f 	bl	8002e58 <_kill>
 800d41a:	1c43      	adds	r3, r0, #1
 800d41c:	d102      	bne.n	800d424 <_kill_r+0x1c>
 800d41e:	682b      	ldr	r3, [r5, #0]
 800d420:	b103      	cbz	r3, 800d424 <_kill_r+0x1c>
 800d422:	6023      	str	r3, [r4, #0]
 800d424:	bd38      	pop	{r3, r4, r5, pc}
 800d426:	bf00      	nop
 800d428:	20000f00 	.word	0x20000f00

0800d42c <_getpid_r>:
 800d42c:	f7f5 bd0c 	b.w	8002e48 <_getpid>

0800d430 <__sread>:
 800d430:	b510      	push	{r4, lr}
 800d432:	460c      	mov	r4, r1
 800d434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d438:	f000 f894 	bl	800d564 <_read_r>
 800d43c:	2800      	cmp	r0, #0
 800d43e:	bfab      	itete	ge
 800d440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d442:	89a3      	ldrhlt	r3, [r4, #12]
 800d444:	181b      	addge	r3, r3, r0
 800d446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d44a:	bfac      	ite	ge
 800d44c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d44e:	81a3      	strhlt	r3, [r4, #12]
 800d450:	bd10      	pop	{r4, pc}

0800d452 <__swrite>:
 800d452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d456:	461f      	mov	r7, r3
 800d458:	898b      	ldrh	r3, [r1, #12]
 800d45a:	05db      	lsls	r3, r3, #23
 800d45c:	4605      	mov	r5, r0
 800d45e:	460c      	mov	r4, r1
 800d460:	4616      	mov	r6, r2
 800d462:	d505      	bpl.n	800d470 <__swrite+0x1e>
 800d464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d468:	2302      	movs	r3, #2
 800d46a:	2200      	movs	r2, #0
 800d46c:	f000 f868 	bl	800d540 <_lseek_r>
 800d470:	89a3      	ldrh	r3, [r4, #12]
 800d472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d47a:	81a3      	strh	r3, [r4, #12]
 800d47c:	4632      	mov	r2, r6
 800d47e:	463b      	mov	r3, r7
 800d480:	4628      	mov	r0, r5
 800d482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d486:	f000 b817 	b.w	800d4b8 <_write_r>

0800d48a <__sseek>:
 800d48a:	b510      	push	{r4, lr}
 800d48c:	460c      	mov	r4, r1
 800d48e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d492:	f000 f855 	bl	800d540 <_lseek_r>
 800d496:	1c43      	adds	r3, r0, #1
 800d498:	89a3      	ldrh	r3, [r4, #12]
 800d49a:	bf15      	itete	ne
 800d49c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d49e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d4a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d4a6:	81a3      	strheq	r3, [r4, #12]
 800d4a8:	bf18      	it	ne
 800d4aa:	81a3      	strhne	r3, [r4, #12]
 800d4ac:	bd10      	pop	{r4, pc}

0800d4ae <__sclose>:
 800d4ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4b2:	f000 b813 	b.w	800d4dc <_close_r>
	...

0800d4b8 <_write_r>:
 800d4b8:	b538      	push	{r3, r4, r5, lr}
 800d4ba:	4d07      	ldr	r5, [pc, #28]	; (800d4d8 <_write_r+0x20>)
 800d4bc:	4604      	mov	r4, r0
 800d4be:	4608      	mov	r0, r1
 800d4c0:	4611      	mov	r1, r2
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	602a      	str	r2, [r5, #0]
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	f7f5 fcfd 	bl	8002ec6 <_write>
 800d4cc:	1c43      	adds	r3, r0, #1
 800d4ce:	d102      	bne.n	800d4d6 <_write_r+0x1e>
 800d4d0:	682b      	ldr	r3, [r5, #0]
 800d4d2:	b103      	cbz	r3, 800d4d6 <_write_r+0x1e>
 800d4d4:	6023      	str	r3, [r4, #0]
 800d4d6:	bd38      	pop	{r3, r4, r5, pc}
 800d4d8:	20000f00 	.word	0x20000f00

0800d4dc <_close_r>:
 800d4dc:	b538      	push	{r3, r4, r5, lr}
 800d4de:	4d06      	ldr	r5, [pc, #24]	; (800d4f8 <_close_r+0x1c>)
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	4604      	mov	r4, r0
 800d4e4:	4608      	mov	r0, r1
 800d4e6:	602b      	str	r3, [r5, #0]
 800d4e8:	f7f5 fd09 	bl	8002efe <_close>
 800d4ec:	1c43      	adds	r3, r0, #1
 800d4ee:	d102      	bne.n	800d4f6 <_close_r+0x1a>
 800d4f0:	682b      	ldr	r3, [r5, #0]
 800d4f2:	b103      	cbz	r3, 800d4f6 <_close_r+0x1a>
 800d4f4:	6023      	str	r3, [r4, #0]
 800d4f6:	bd38      	pop	{r3, r4, r5, pc}
 800d4f8:	20000f00 	.word	0x20000f00

0800d4fc <_fstat_r>:
 800d4fc:	b538      	push	{r3, r4, r5, lr}
 800d4fe:	4d07      	ldr	r5, [pc, #28]	; (800d51c <_fstat_r+0x20>)
 800d500:	2300      	movs	r3, #0
 800d502:	4604      	mov	r4, r0
 800d504:	4608      	mov	r0, r1
 800d506:	4611      	mov	r1, r2
 800d508:	602b      	str	r3, [r5, #0]
 800d50a:	f7f5 fd04 	bl	8002f16 <_fstat>
 800d50e:	1c43      	adds	r3, r0, #1
 800d510:	d102      	bne.n	800d518 <_fstat_r+0x1c>
 800d512:	682b      	ldr	r3, [r5, #0]
 800d514:	b103      	cbz	r3, 800d518 <_fstat_r+0x1c>
 800d516:	6023      	str	r3, [r4, #0]
 800d518:	bd38      	pop	{r3, r4, r5, pc}
 800d51a:	bf00      	nop
 800d51c:	20000f00 	.word	0x20000f00

0800d520 <_isatty_r>:
 800d520:	b538      	push	{r3, r4, r5, lr}
 800d522:	4d06      	ldr	r5, [pc, #24]	; (800d53c <_isatty_r+0x1c>)
 800d524:	2300      	movs	r3, #0
 800d526:	4604      	mov	r4, r0
 800d528:	4608      	mov	r0, r1
 800d52a:	602b      	str	r3, [r5, #0]
 800d52c:	f7f5 fd03 	bl	8002f36 <_isatty>
 800d530:	1c43      	adds	r3, r0, #1
 800d532:	d102      	bne.n	800d53a <_isatty_r+0x1a>
 800d534:	682b      	ldr	r3, [r5, #0]
 800d536:	b103      	cbz	r3, 800d53a <_isatty_r+0x1a>
 800d538:	6023      	str	r3, [r4, #0]
 800d53a:	bd38      	pop	{r3, r4, r5, pc}
 800d53c:	20000f00 	.word	0x20000f00

0800d540 <_lseek_r>:
 800d540:	b538      	push	{r3, r4, r5, lr}
 800d542:	4d07      	ldr	r5, [pc, #28]	; (800d560 <_lseek_r+0x20>)
 800d544:	4604      	mov	r4, r0
 800d546:	4608      	mov	r0, r1
 800d548:	4611      	mov	r1, r2
 800d54a:	2200      	movs	r2, #0
 800d54c:	602a      	str	r2, [r5, #0]
 800d54e:	461a      	mov	r2, r3
 800d550:	f7f5 fcfc 	bl	8002f4c <_lseek>
 800d554:	1c43      	adds	r3, r0, #1
 800d556:	d102      	bne.n	800d55e <_lseek_r+0x1e>
 800d558:	682b      	ldr	r3, [r5, #0]
 800d55a:	b103      	cbz	r3, 800d55e <_lseek_r+0x1e>
 800d55c:	6023      	str	r3, [r4, #0]
 800d55e:	bd38      	pop	{r3, r4, r5, pc}
 800d560:	20000f00 	.word	0x20000f00

0800d564 <_read_r>:
 800d564:	b538      	push	{r3, r4, r5, lr}
 800d566:	4d07      	ldr	r5, [pc, #28]	; (800d584 <_read_r+0x20>)
 800d568:	4604      	mov	r4, r0
 800d56a:	4608      	mov	r0, r1
 800d56c:	4611      	mov	r1, r2
 800d56e:	2200      	movs	r2, #0
 800d570:	602a      	str	r2, [r5, #0]
 800d572:	461a      	mov	r2, r3
 800d574:	f7f5 fc8a 	bl	8002e8c <_read>
 800d578:	1c43      	adds	r3, r0, #1
 800d57a:	d102      	bne.n	800d582 <_read_r+0x1e>
 800d57c:	682b      	ldr	r3, [r5, #0]
 800d57e:	b103      	cbz	r3, 800d582 <_read_r+0x1e>
 800d580:	6023      	str	r3, [r4, #0]
 800d582:	bd38      	pop	{r3, r4, r5, pc}
 800d584:	20000f00 	.word	0x20000f00

0800d588 <atan>:
 800d588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d58c:	ec55 4b10 	vmov	r4, r5, d0
 800d590:	4bc3      	ldr	r3, [pc, #780]	; (800d8a0 <atan+0x318>)
 800d592:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d596:	429e      	cmp	r6, r3
 800d598:	46ab      	mov	fp, r5
 800d59a:	dd18      	ble.n	800d5ce <atan+0x46>
 800d59c:	4bc1      	ldr	r3, [pc, #772]	; (800d8a4 <atan+0x31c>)
 800d59e:	429e      	cmp	r6, r3
 800d5a0:	dc01      	bgt.n	800d5a6 <atan+0x1e>
 800d5a2:	d109      	bne.n	800d5b8 <atan+0x30>
 800d5a4:	b144      	cbz	r4, 800d5b8 <atan+0x30>
 800d5a6:	4622      	mov	r2, r4
 800d5a8:	462b      	mov	r3, r5
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	4629      	mov	r1, r5
 800d5ae:	f7f2 fe75 	bl	800029c <__adddf3>
 800d5b2:	4604      	mov	r4, r0
 800d5b4:	460d      	mov	r5, r1
 800d5b6:	e006      	b.n	800d5c6 <atan+0x3e>
 800d5b8:	f1bb 0f00 	cmp.w	fp, #0
 800d5bc:	f300 8131 	bgt.w	800d822 <atan+0x29a>
 800d5c0:	a59b      	add	r5, pc, #620	; (adr r5, 800d830 <atan+0x2a8>)
 800d5c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d5c6:	ec45 4b10 	vmov	d0, r4, r5
 800d5ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ce:	4bb6      	ldr	r3, [pc, #728]	; (800d8a8 <atan+0x320>)
 800d5d0:	429e      	cmp	r6, r3
 800d5d2:	dc14      	bgt.n	800d5fe <atan+0x76>
 800d5d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d5d8:	429e      	cmp	r6, r3
 800d5da:	dc0d      	bgt.n	800d5f8 <atan+0x70>
 800d5dc:	a396      	add	r3, pc, #600	; (adr r3, 800d838 <atan+0x2b0>)
 800d5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e2:	ee10 0a10 	vmov	r0, s0
 800d5e6:	4629      	mov	r1, r5
 800d5e8:	f7f2 fe58 	bl	800029c <__adddf3>
 800d5ec:	4baf      	ldr	r3, [pc, #700]	; (800d8ac <atan+0x324>)
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f7f3 fa9a 	bl	8000b28 <__aeabi_dcmpgt>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	d1e6      	bne.n	800d5c6 <atan+0x3e>
 800d5f8:	f04f 3aff 	mov.w	sl, #4294967295
 800d5fc:	e02b      	b.n	800d656 <atan+0xce>
 800d5fe:	f000 f9b7 	bl	800d970 <fabs>
 800d602:	4bab      	ldr	r3, [pc, #684]	; (800d8b0 <atan+0x328>)
 800d604:	429e      	cmp	r6, r3
 800d606:	ec55 4b10 	vmov	r4, r5, d0
 800d60a:	f300 80bf 	bgt.w	800d78c <atan+0x204>
 800d60e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d612:	429e      	cmp	r6, r3
 800d614:	f300 80a0 	bgt.w	800d758 <atan+0x1d0>
 800d618:	ee10 2a10 	vmov	r2, s0
 800d61c:	ee10 0a10 	vmov	r0, s0
 800d620:	462b      	mov	r3, r5
 800d622:	4629      	mov	r1, r5
 800d624:	f7f2 fe3a 	bl	800029c <__adddf3>
 800d628:	4ba0      	ldr	r3, [pc, #640]	; (800d8ac <atan+0x324>)
 800d62a:	2200      	movs	r2, #0
 800d62c:	f7f2 fe34 	bl	8000298 <__aeabi_dsub>
 800d630:	2200      	movs	r2, #0
 800d632:	4606      	mov	r6, r0
 800d634:	460f      	mov	r7, r1
 800d636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d63a:	4620      	mov	r0, r4
 800d63c:	4629      	mov	r1, r5
 800d63e:	f7f2 fe2d 	bl	800029c <__adddf3>
 800d642:	4602      	mov	r2, r0
 800d644:	460b      	mov	r3, r1
 800d646:	4630      	mov	r0, r6
 800d648:	4639      	mov	r1, r7
 800d64a:	f7f3 f907 	bl	800085c <__aeabi_ddiv>
 800d64e:	f04f 0a00 	mov.w	sl, #0
 800d652:	4604      	mov	r4, r0
 800d654:	460d      	mov	r5, r1
 800d656:	4622      	mov	r2, r4
 800d658:	462b      	mov	r3, r5
 800d65a:	4620      	mov	r0, r4
 800d65c:	4629      	mov	r1, r5
 800d65e:	f7f2 ffd3 	bl	8000608 <__aeabi_dmul>
 800d662:	4602      	mov	r2, r0
 800d664:	460b      	mov	r3, r1
 800d666:	4680      	mov	r8, r0
 800d668:	4689      	mov	r9, r1
 800d66a:	f7f2 ffcd 	bl	8000608 <__aeabi_dmul>
 800d66e:	a374      	add	r3, pc, #464	; (adr r3, 800d840 <atan+0x2b8>)
 800d670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d674:	4606      	mov	r6, r0
 800d676:	460f      	mov	r7, r1
 800d678:	f7f2 ffc6 	bl	8000608 <__aeabi_dmul>
 800d67c:	a372      	add	r3, pc, #456	; (adr r3, 800d848 <atan+0x2c0>)
 800d67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d682:	f7f2 fe0b 	bl	800029c <__adddf3>
 800d686:	4632      	mov	r2, r6
 800d688:	463b      	mov	r3, r7
 800d68a:	f7f2 ffbd 	bl	8000608 <__aeabi_dmul>
 800d68e:	a370      	add	r3, pc, #448	; (adr r3, 800d850 <atan+0x2c8>)
 800d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d694:	f7f2 fe02 	bl	800029c <__adddf3>
 800d698:	4632      	mov	r2, r6
 800d69a:	463b      	mov	r3, r7
 800d69c:	f7f2 ffb4 	bl	8000608 <__aeabi_dmul>
 800d6a0:	a36d      	add	r3, pc, #436	; (adr r3, 800d858 <atan+0x2d0>)
 800d6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a6:	f7f2 fdf9 	bl	800029c <__adddf3>
 800d6aa:	4632      	mov	r2, r6
 800d6ac:	463b      	mov	r3, r7
 800d6ae:	f7f2 ffab 	bl	8000608 <__aeabi_dmul>
 800d6b2:	a36b      	add	r3, pc, #428	; (adr r3, 800d860 <atan+0x2d8>)
 800d6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b8:	f7f2 fdf0 	bl	800029c <__adddf3>
 800d6bc:	4632      	mov	r2, r6
 800d6be:	463b      	mov	r3, r7
 800d6c0:	f7f2 ffa2 	bl	8000608 <__aeabi_dmul>
 800d6c4:	a368      	add	r3, pc, #416	; (adr r3, 800d868 <atan+0x2e0>)
 800d6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ca:	f7f2 fde7 	bl	800029c <__adddf3>
 800d6ce:	4642      	mov	r2, r8
 800d6d0:	464b      	mov	r3, r9
 800d6d2:	f7f2 ff99 	bl	8000608 <__aeabi_dmul>
 800d6d6:	a366      	add	r3, pc, #408	; (adr r3, 800d870 <atan+0x2e8>)
 800d6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6dc:	4680      	mov	r8, r0
 800d6de:	4689      	mov	r9, r1
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	4639      	mov	r1, r7
 800d6e4:	f7f2 ff90 	bl	8000608 <__aeabi_dmul>
 800d6e8:	a363      	add	r3, pc, #396	; (adr r3, 800d878 <atan+0x2f0>)
 800d6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ee:	f7f2 fdd3 	bl	8000298 <__aeabi_dsub>
 800d6f2:	4632      	mov	r2, r6
 800d6f4:	463b      	mov	r3, r7
 800d6f6:	f7f2 ff87 	bl	8000608 <__aeabi_dmul>
 800d6fa:	a361      	add	r3, pc, #388	; (adr r3, 800d880 <atan+0x2f8>)
 800d6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d700:	f7f2 fdca 	bl	8000298 <__aeabi_dsub>
 800d704:	4632      	mov	r2, r6
 800d706:	463b      	mov	r3, r7
 800d708:	f7f2 ff7e 	bl	8000608 <__aeabi_dmul>
 800d70c:	a35e      	add	r3, pc, #376	; (adr r3, 800d888 <atan+0x300>)
 800d70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d712:	f7f2 fdc1 	bl	8000298 <__aeabi_dsub>
 800d716:	4632      	mov	r2, r6
 800d718:	463b      	mov	r3, r7
 800d71a:	f7f2 ff75 	bl	8000608 <__aeabi_dmul>
 800d71e:	a35c      	add	r3, pc, #368	; (adr r3, 800d890 <atan+0x308>)
 800d720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d724:	f7f2 fdb8 	bl	8000298 <__aeabi_dsub>
 800d728:	4632      	mov	r2, r6
 800d72a:	463b      	mov	r3, r7
 800d72c:	f7f2 ff6c 	bl	8000608 <__aeabi_dmul>
 800d730:	4602      	mov	r2, r0
 800d732:	460b      	mov	r3, r1
 800d734:	4640      	mov	r0, r8
 800d736:	4649      	mov	r1, r9
 800d738:	f7f2 fdb0 	bl	800029c <__adddf3>
 800d73c:	4622      	mov	r2, r4
 800d73e:	462b      	mov	r3, r5
 800d740:	f7f2 ff62 	bl	8000608 <__aeabi_dmul>
 800d744:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d748:	4602      	mov	r2, r0
 800d74a:	460b      	mov	r3, r1
 800d74c:	d14b      	bne.n	800d7e6 <atan+0x25e>
 800d74e:	4620      	mov	r0, r4
 800d750:	4629      	mov	r1, r5
 800d752:	f7f2 fda1 	bl	8000298 <__aeabi_dsub>
 800d756:	e72c      	b.n	800d5b2 <atan+0x2a>
 800d758:	ee10 0a10 	vmov	r0, s0
 800d75c:	4b53      	ldr	r3, [pc, #332]	; (800d8ac <atan+0x324>)
 800d75e:	2200      	movs	r2, #0
 800d760:	4629      	mov	r1, r5
 800d762:	f7f2 fd99 	bl	8000298 <__aeabi_dsub>
 800d766:	4b51      	ldr	r3, [pc, #324]	; (800d8ac <atan+0x324>)
 800d768:	4606      	mov	r6, r0
 800d76a:	460f      	mov	r7, r1
 800d76c:	2200      	movs	r2, #0
 800d76e:	4620      	mov	r0, r4
 800d770:	4629      	mov	r1, r5
 800d772:	f7f2 fd93 	bl	800029c <__adddf3>
 800d776:	4602      	mov	r2, r0
 800d778:	460b      	mov	r3, r1
 800d77a:	4630      	mov	r0, r6
 800d77c:	4639      	mov	r1, r7
 800d77e:	f7f3 f86d 	bl	800085c <__aeabi_ddiv>
 800d782:	f04f 0a01 	mov.w	sl, #1
 800d786:	4604      	mov	r4, r0
 800d788:	460d      	mov	r5, r1
 800d78a:	e764      	b.n	800d656 <atan+0xce>
 800d78c:	4b49      	ldr	r3, [pc, #292]	; (800d8b4 <atan+0x32c>)
 800d78e:	429e      	cmp	r6, r3
 800d790:	da1d      	bge.n	800d7ce <atan+0x246>
 800d792:	ee10 0a10 	vmov	r0, s0
 800d796:	4b48      	ldr	r3, [pc, #288]	; (800d8b8 <atan+0x330>)
 800d798:	2200      	movs	r2, #0
 800d79a:	4629      	mov	r1, r5
 800d79c:	f7f2 fd7c 	bl	8000298 <__aeabi_dsub>
 800d7a0:	4b45      	ldr	r3, [pc, #276]	; (800d8b8 <atan+0x330>)
 800d7a2:	4606      	mov	r6, r0
 800d7a4:	460f      	mov	r7, r1
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	4629      	mov	r1, r5
 800d7ac:	f7f2 ff2c 	bl	8000608 <__aeabi_dmul>
 800d7b0:	4b3e      	ldr	r3, [pc, #248]	; (800d8ac <atan+0x324>)
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	f7f2 fd72 	bl	800029c <__adddf3>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	4630      	mov	r0, r6
 800d7be:	4639      	mov	r1, r7
 800d7c0:	f7f3 f84c 	bl	800085c <__aeabi_ddiv>
 800d7c4:	f04f 0a02 	mov.w	sl, #2
 800d7c8:	4604      	mov	r4, r0
 800d7ca:	460d      	mov	r5, r1
 800d7cc:	e743      	b.n	800d656 <atan+0xce>
 800d7ce:	462b      	mov	r3, r5
 800d7d0:	ee10 2a10 	vmov	r2, s0
 800d7d4:	4939      	ldr	r1, [pc, #228]	; (800d8bc <atan+0x334>)
 800d7d6:	2000      	movs	r0, #0
 800d7d8:	f7f3 f840 	bl	800085c <__aeabi_ddiv>
 800d7dc:	f04f 0a03 	mov.w	sl, #3
 800d7e0:	4604      	mov	r4, r0
 800d7e2:	460d      	mov	r5, r1
 800d7e4:	e737      	b.n	800d656 <atan+0xce>
 800d7e6:	4b36      	ldr	r3, [pc, #216]	; (800d8c0 <atan+0x338>)
 800d7e8:	4e36      	ldr	r6, [pc, #216]	; (800d8c4 <atan+0x33c>)
 800d7ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d7ee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d7f2:	e9da 2300 	ldrd	r2, r3, [sl]
 800d7f6:	f7f2 fd4f 	bl	8000298 <__aeabi_dsub>
 800d7fa:	4622      	mov	r2, r4
 800d7fc:	462b      	mov	r3, r5
 800d7fe:	f7f2 fd4b 	bl	8000298 <__aeabi_dsub>
 800d802:	4602      	mov	r2, r0
 800d804:	460b      	mov	r3, r1
 800d806:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d80a:	f7f2 fd45 	bl	8000298 <__aeabi_dsub>
 800d80e:	f1bb 0f00 	cmp.w	fp, #0
 800d812:	4604      	mov	r4, r0
 800d814:	460d      	mov	r5, r1
 800d816:	f6bf aed6 	bge.w	800d5c6 <atan+0x3e>
 800d81a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d81e:	461d      	mov	r5, r3
 800d820:	e6d1      	b.n	800d5c6 <atan+0x3e>
 800d822:	a51d      	add	r5, pc, #116	; (adr r5, 800d898 <atan+0x310>)
 800d824:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d828:	e6cd      	b.n	800d5c6 <atan+0x3e>
 800d82a:	bf00      	nop
 800d82c:	f3af 8000 	nop.w
 800d830:	54442d18 	.word	0x54442d18
 800d834:	bff921fb 	.word	0xbff921fb
 800d838:	8800759c 	.word	0x8800759c
 800d83c:	7e37e43c 	.word	0x7e37e43c
 800d840:	e322da11 	.word	0xe322da11
 800d844:	3f90ad3a 	.word	0x3f90ad3a
 800d848:	24760deb 	.word	0x24760deb
 800d84c:	3fa97b4b 	.word	0x3fa97b4b
 800d850:	a0d03d51 	.word	0xa0d03d51
 800d854:	3fb10d66 	.word	0x3fb10d66
 800d858:	c54c206e 	.word	0xc54c206e
 800d85c:	3fb745cd 	.word	0x3fb745cd
 800d860:	920083ff 	.word	0x920083ff
 800d864:	3fc24924 	.word	0x3fc24924
 800d868:	5555550d 	.word	0x5555550d
 800d86c:	3fd55555 	.word	0x3fd55555
 800d870:	2c6a6c2f 	.word	0x2c6a6c2f
 800d874:	bfa2b444 	.word	0xbfa2b444
 800d878:	52defd9a 	.word	0x52defd9a
 800d87c:	3fadde2d 	.word	0x3fadde2d
 800d880:	af749a6d 	.word	0xaf749a6d
 800d884:	3fb3b0f2 	.word	0x3fb3b0f2
 800d888:	fe231671 	.word	0xfe231671
 800d88c:	3fbc71c6 	.word	0x3fbc71c6
 800d890:	9998ebc4 	.word	0x9998ebc4
 800d894:	3fc99999 	.word	0x3fc99999
 800d898:	54442d18 	.word	0x54442d18
 800d89c:	3ff921fb 	.word	0x3ff921fb
 800d8a0:	440fffff 	.word	0x440fffff
 800d8a4:	7ff00000 	.word	0x7ff00000
 800d8a8:	3fdbffff 	.word	0x3fdbffff
 800d8ac:	3ff00000 	.word	0x3ff00000
 800d8b0:	3ff2ffff 	.word	0x3ff2ffff
 800d8b4:	40038000 	.word	0x40038000
 800d8b8:	3ff80000 	.word	0x3ff80000
 800d8bc:	bff00000 	.word	0xbff00000
 800d8c0:	0800f0e8 	.word	0x0800f0e8
 800d8c4:	0800f0c8 	.word	0x0800f0c8

0800d8c8 <cos>:
 800d8c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8ca:	ec53 2b10 	vmov	r2, r3, d0
 800d8ce:	4826      	ldr	r0, [pc, #152]	; (800d968 <cos+0xa0>)
 800d8d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d8d4:	4281      	cmp	r1, r0
 800d8d6:	dc06      	bgt.n	800d8e6 <cos+0x1e>
 800d8d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d960 <cos+0x98>
 800d8dc:	b005      	add	sp, #20
 800d8de:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8e2:	f000 bb95 	b.w	800e010 <__kernel_cos>
 800d8e6:	4821      	ldr	r0, [pc, #132]	; (800d96c <cos+0xa4>)
 800d8e8:	4281      	cmp	r1, r0
 800d8ea:	dd09      	ble.n	800d900 <cos+0x38>
 800d8ec:	ee10 0a10 	vmov	r0, s0
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	f7f2 fcd1 	bl	8000298 <__aeabi_dsub>
 800d8f6:	ec41 0b10 	vmov	d0, r0, r1
 800d8fa:	b005      	add	sp, #20
 800d8fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d900:	4668      	mov	r0, sp
 800d902:	f000 f8c5 	bl	800da90 <__ieee754_rem_pio2>
 800d906:	f000 0003 	and.w	r0, r0, #3
 800d90a:	2801      	cmp	r0, #1
 800d90c:	d00b      	beq.n	800d926 <cos+0x5e>
 800d90e:	2802      	cmp	r0, #2
 800d910:	d016      	beq.n	800d940 <cos+0x78>
 800d912:	b9e0      	cbnz	r0, 800d94e <cos+0x86>
 800d914:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d918:	ed9d 0b00 	vldr	d0, [sp]
 800d91c:	f000 fb78 	bl	800e010 <__kernel_cos>
 800d920:	ec51 0b10 	vmov	r0, r1, d0
 800d924:	e7e7      	b.n	800d8f6 <cos+0x2e>
 800d926:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d92a:	ed9d 0b00 	vldr	d0, [sp]
 800d92e:	f000 ff87 	bl	800e840 <__kernel_sin>
 800d932:	ec53 2b10 	vmov	r2, r3, d0
 800d936:	ee10 0a10 	vmov	r0, s0
 800d93a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d93e:	e7da      	b.n	800d8f6 <cos+0x2e>
 800d940:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d944:	ed9d 0b00 	vldr	d0, [sp]
 800d948:	f000 fb62 	bl	800e010 <__kernel_cos>
 800d94c:	e7f1      	b.n	800d932 <cos+0x6a>
 800d94e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d952:	ed9d 0b00 	vldr	d0, [sp]
 800d956:	2001      	movs	r0, #1
 800d958:	f000 ff72 	bl	800e840 <__kernel_sin>
 800d95c:	e7e0      	b.n	800d920 <cos+0x58>
 800d95e:	bf00      	nop
	...
 800d968:	3fe921fb 	.word	0x3fe921fb
 800d96c:	7fefffff 	.word	0x7fefffff

0800d970 <fabs>:
 800d970:	ec51 0b10 	vmov	r0, r1, d0
 800d974:	ee10 2a10 	vmov	r2, s0
 800d978:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d97c:	ec43 2b10 	vmov	d0, r2, r3
 800d980:	4770      	bx	lr
 800d982:	0000      	movs	r0, r0
 800d984:	0000      	movs	r0, r0
	...

0800d988 <sin>:
 800d988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d98a:	ec53 2b10 	vmov	r2, r3, d0
 800d98e:	4828      	ldr	r0, [pc, #160]	; (800da30 <sin+0xa8>)
 800d990:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d994:	4281      	cmp	r1, r0
 800d996:	dc07      	bgt.n	800d9a8 <sin+0x20>
 800d998:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800da28 <sin+0xa0>
 800d99c:	2000      	movs	r0, #0
 800d99e:	b005      	add	sp, #20
 800d9a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9a4:	f000 bf4c 	b.w	800e840 <__kernel_sin>
 800d9a8:	4822      	ldr	r0, [pc, #136]	; (800da34 <sin+0xac>)
 800d9aa:	4281      	cmp	r1, r0
 800d9ac:	dd09      	ble.n	800d9c2 <sin+0x3a>
 800d9ae:	ee10 0a10 	vmov	r0, s0
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	f7f2 fc70 	bl	8000298 <__aeabi_dsub>
 800d9b8:	ec41 0b10 	vmov	d0, r0, r1
 800d9bc:	b005      	add	sp, #20
 800d9be:	f85d fb04 	ldr.w	pc, [sp], #4
 800d9c2:	4668      	mov	r0, sp
 800d9c4:	f000 f864 	bl	800da90 <__ieee754_rem_pio2>
 800d9c8:	f000 0003 	and.w	r0, r0, #3
 800d9cc:	2801      	cmp	r0, #1
 800d9ce:	d00c      	beq.n	800d9ea <sin+0x62>
 800d9d0:	2802      	cmp	r0, #2
 800d9d2:	d011      	beq.n	800d9f8 <sin+0x70>
 800d9d4:	b9f0      	cbnz	r0, 800da14 <sin+0x8c>
 800d9d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d9da:	ed9d 0b00 	vldr	d0, [sp]
 800d9de:	2001      	movs	r0, #1
 800d9e0:	f000 ff2e 	bl	800e840 <__kernel_sin>
 800d9e4:	ec51 0b10 	vmov	r0, r1, d0
 800d9e8:	e7e6      	b.n	800d9b8 <sin+0x30>
 800d9ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d9ee:	ed9d 0b00 	vldr	d0, [sp]
 800d9f2:	f000 fb0d 	bl	800e010 <__kernel_cos>
 800d9f6:	e7f5      	b.n	800d9e4 <sin+0x5c>
 800d9f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d9fc:	ed9d 0b00 	vldr	d0, [sp]
 800da00:	2001      	movs	r0, #1
 800da02:	f000 ff1d 	bl	800e840 <__kernel_sin>
 800da06:	ec53 2b10 	vmov	r2, r3, d0
 800da0a:	ee10 0a10 	vmov	r0, s0
 800da0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800da12:	e7d1      	b.n	800d9b8 <sin+0x30>
 800da14:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da18:	ed9d 0b00 	vldr	d0, [sp]
 800da1c:	f000 faf8 	bl	800e010 <__kernel_cos>
 800da20:	e7f1      	b.n	800da06 <sin+0x7e>
 800da22:	bf00      	nop
 800da24:	f3af 8000 	nop.w
	...
 800da30:	3fe921fb 	.word	0x3fe921fb
 800da34:	7fefffff 	.word	0x7fefffff

0800da38 <sqrt>:
 800da38:	b538      	push	{r3, r4, r5, lr}
 800da3a:	ed2d 8b02 	vpush	{d8}
 800da3e:	ec55 4b10 	vmov	r4, r5, d0
 800da42:	f000 fa31 	bl	800dea8 <__ieee754_sqrt>
 800da46:	4622      	mov	r2, r4
 800da48:	462b      	mov	r3, r5
 800da4a:	4620      	mov	r0, r4
 800da4c:	4629      	mov	r1, r5
 800da4e:	eeb0 8a40 	vmov.f32	s16, s0
 800da52:	eef0 8a60 	vmov.f32	s17, s1
 800da56:	f7f3 f871 	bl	8000b3c <__aeabi_dcmpun>
 800da5a:	b990      	cbnz	r0, 800da82 <sqrt+0x4a>
 800da5c:	2200      	movs	r2, #0
 800da5e:	2300      	movs	r3, #0
 800da60:	4620      	mov	r0, r4
 800da62:	4629      	mov	r1, r5
 800da64:	f7f3 f842 	bl	8000aec <__aeabi_dcmplt>
 800da68:	b158      	cbz	r0, 800da82 <sqrt+0x4a>
 800da6a:	f7fb f8eb 	bl	8008c44 <__errno>
 800da6e:	2321      	movs	r3, #33	; 0x21
 800da70:	6003      	str	r3, [r0, #0]
 800da72:	2200      	movs	r2, #0
 800da74:	2300      	movs	r3, #0
 800da76:	4610      	mov	r0, r2
 800da78:	4619      	mov	r1, r3
 800da7a:	f7f2 feef 	bl	800085c <__aeabi_ddiv>
 800da7e:	ec41 0b18 	vmov	d8, r0, r1
 800da82:	eeb0 0a48 	vmov.f32	s0, s16
 800da86:	eef0 0a68 	vmov.f32	s1, s17
 800da8a:	ecbd 8b02 	vpop	{d8}
 800da8e:	bd38      	pop	{r3, r4, r5, pc}

0800da90 <__ieee754_rem_pio2>:
 800da90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da94:	ed2d 8b02 	vpush	{d8}
 800da98:	ec55 4b10 	vmov	r4, r5, d0
 800da9c:	4bca      	ldr	r3, [pc, #808]	; (800ddc8 <__ieee754_rem_pio2+0x338>)
 800da9e:	b08b      	sub	sp, #44	; 0x2c
 800daa0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800daa4:	4598      	cmp	r8, r3
 800daa6:	4682      	mov	sl, r0
 800daa8:	9502      	str	r5, [sp, #8]
 800daaa:	dc08      	bgt.n	800dabe <__ieee754_rem_pio2+0x2e>
 800daac:	2200      	movs	r2, #0
 800daae:	2300      	movs	r3, #0
 800dab0:	ed80 0b00 	vstr	d0, [r0]
 800dab4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dab8:	f04f 0b00 	mov.w	fp, #0
 800dabc:	e028      	b.n	800db10 <__ieee754_rem_pio2+0x80>
 800dabe:	4bc3      	ldr	r3, [pc, #780]	; (800ddcc <__ieee754_rem_pio2+0x33c>)
 800dac0:	4598      	cmp	r8, r3
 800dac2:	dc78      	bgt.n	800dbb6 <__ieee754_rem_pio2+0x126>
 800dac4:	9b02      	ldr	r3, [sp, #8]
 800dac6:	4ec2      	ldr	r6, [pc, #776]	; (800ddd0 <__ieee754_rem_pio2+0x340>)
 800dac8:	2b00      	cmp	r3, #0
 800daca:	ee10 0a10 	vmov	r0, s0
 800dace:	a3b0      	add	r3, pc, #704	; (adr r3, 800dd90 <__ieee754_rem_pio2+0x300>)
 800dad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad4:	4629      	mov	r1, r5
 800dad6:	dd39      	ble.n	800db4c <__ieee754_rem_pio2+0xbc>
 800dad8:	f7f2 fbde 	bl	8000298 <__aeabi_dsub>
 800dadc:	45b0      	cmp	r8, r6
 800dade:	4604      	mov	r4, r0
 800dae0:	460d      	mov	r5, r1
 800dae2:	d01b      	beq.n	800db1c <__ieee754_rem_pio2+0x8c>
 800dae4:	a3ac      	add	r3, pc, #688	; (adr r3, 800dd98 <__ieee754_rem_pio2+0x308>)
 800dae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daea:	f7f2 fbd5 	bl	8000298 <__aeabi_dsub>
 800daee:	4602      	mov	r2, r0
 800daf0:	460b      	mov	r3, r1
 800daf2:	e9ca 2300 	strd	r2, r3, [sl]
 800daf6:	4620      	mov	r0, r4
 800daf8:	4629      	mov	r1, r5
 800dafa:	f7f2 fbcd 	bl	8000298 <__aeabi_dsub>
 800dafe:	a3a6      	add	r3, pc, #664	; (adr r3, 800dd98 <__ieee754_rem_pio2+0x308>)
 800db00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db04:	f7f2 fbc8 	bl	8000298 <__aeabi_dsub>
 800db08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800db0c:	f04f 0b01 	mov.w	fp, #1
 800db10:	4658      	mov	r0, fp
 800db12:	b00b      	add	sp, #44	; 0x2c
 800db14:	ecbd 8b02 	vpop	{d8}
 800db18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db1c:	a3a0      	add	r3, pc, #640	; (adr r3, 800dda0 <__ieee754_rem_pio2+0x310>)
 800db1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db22:	f7f2 fbb9 	bl	8000298 <__aeabi_dsub>
 800db26:	a3a0      	add	r3, pc, #640	; (adr r3, 800dda8 <__ieee754_rem_pio2+0x318>)
 800db28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2c:	4604      	mov	r4, r0
 800db2e:	460d      	mov	r5, r1
 800db30:	f7f2 fbb2 	bl	8000298 <__aeabi_dsub>
 800db34:	4602      	mov	r2, r0
 800db36:	460b      	mov	r3, r1
 800db38:	e9ca 2300 	strd	r2, r3, [sl]
 800db3c:	4620      	mov	r0, r4
 800db3e:	4629      	mov	r1, r5
 800db40:	f7f2 fbaa 	bl	8000298 <__aeabi_dsub>
 800db44:	a398      	add	r3, pc, #608	; (adr r3, 800dda8 <__ieee754_rem_pio2+0x318>)
 800db46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4a:	e7db      	b.n	800db04 <__ieee754_rem_pio2+0x74>
 800db4c:	f7f2 fba6 	bl	800029c <__adddf3>
 800db50:	45b0      	cmp	r8, r6
 800db52:	4604      	mov	r4, r0
 800db54:	460d      	mov	r5, r1
 800db56:	d016      	beq.n	800db86 <__ieee754_rem_pio2+0xf6>
 800db58:	a38f      	add	r3, pc, #572	; (adr r3, 800dd98 <__ieee754_rem_pio2+0x308>)
 800db5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5e:	f7f2 fb9d 	bl	800029c <__adddf3>
 800db62:	4602      	mov	r2, r0
 800db64:	460b      	mov	r3, r1
 800db66:	e9ca 2300 	strd	r2, r3, [sl]
 800db6a:	4620      	mov	r0, r4
 800db6c:	4629      	mov	r1, r5
 800db6e:	f7f2 fb93 	bl	8000298 <__aeabi_dsub>
 800db72:	a389      	add	r3, pc, #548	; (adr r3, 800dd98 <__ieee754_rem_pio2+0x308>)
 800db74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db78:	f7f2 fb90 	bl	800029c <__adddf3>
 800db7c:	f04f 3bff 	mov.w	fp, #4294967295
 800db80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800db84:	e7c4      	b.n	800db10 <__ieee754_rem_pio2+0x80>
 800db86:	a386      	add	r3, pc, #536	; (adr r3, 800dda0 <__ieee754_rem_pio2+0x310>)
 800db88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8c:	f7f2 fb86 	bl	800029c <__adddf3>
 800db90:	a385      	add	r3, pc, #532	; (adr r3, 800dda8 <__ieee754_rem_pio2+0x318>)
 800db92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db96:	4604      	mov	r4, r0
 800db98:	460d      	mov	r5, r1
 800db9a:	f7f2 fb7f 	bl	800029c <__adddf3>
 800db9e:	4602      	mov	r2, r0
 800dba0:	460b      	mov	r3, r1
 800dba2:	e9ca 2300 	strd	r2, r3, [sl]
 800dba6:	4620      	mov	r0, r4
 800dba8:	4629      	mov	r1, r5
 800dbaa:	f7f2 fb75 	bl	8000298 <__aeabi_dsub>
 800dbae:	a37e      	add	r3, pc, #504	; (adr r3, 800dda8 <__ieee754_rem_pio2+0x318>)
 800dbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb4:	e7e0      	b.n	800db78 <__ieee754_rem_pio2+0xe8>
 800dbb6:	4b87      	ldr	r3, [pc, #540]	; (800ddd4 <__ieee754_rem_pio2+0x344>)
 800dbb8:	4598      	cmp	r8, r3
 800dbba:	f300 80d9 	bgt.w	800dd70 <__ieee754_rem_pio2+0x2e0>
 800dbbe:	f7ff fed7 	bl	800d970 <fabs>
 800dbc2:	ec55 4b10 	vmov	r4, r5, d0
 800dbc6:	ee10 0a10 	vmov	r0, s0
 800dbca:	a379      	add	r3, pc, #484	; (adr r3, 800ddb0 <__ieee754_rem_pio2+0x320>)
 800dbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	f7f2 fd19 	bl	8000608 <__aeabi_dmul>
 800dbd6:	4b80      	ldr	r3, [pc, #512]	; (800ddd8 <__ieee754_rem_pio2+0x348>)
 800dbd8:	2200      	movs	r2, #0
 800dbda:	f7f2 fb5f 	bl	800029c <__adddf3>
 800dbde:	f7f2 ffc3 	bl	8000b68 <__aeabi_d2iz>
 800dbe2:	4683      	mov	fp, r0
 800dbe4:	f7f2 fca6 	bl	8000534 <__aeabi_i2d>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	460b      	mov	r3, r1
 800dbec:	ec43 2b18 	vmov	d8, r2, r3
 800dbf0:	a367      	add	r3, pc, #412	; (adr r3, 800dd90 <__ieee754_rem_pio2+0x300>)
 800dbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf6:	f7f2 fd07 	bl	8000608 <__aeabi_dmul>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	4620      	mov	r0, r4
 800dc00:	4629      	mov	r1, r5
 800dc02:	f7f2 fb49 	bl	8000298 <__aeabi_dsub>
 800dc06:	a364      	add	r3, pc, #400	; (adr r3, 800dd98 <__ieee754_rem_pio2+0x308>)
 800dc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0c:	4606      	mov	r6, r0
 800dc0e:	460f      	mov	r7, r1
 800dc10:	ec51 0b18 	vmov	r0, r1, d8
 800dc14:	f7f2 fcf8 	bl	8000608 <__aeabi_dmul>
 800dc18:	f1bb 0f1f 	cmp.w	fp, #31
 800dc1c:	4604      	mov	r4, r0
 800dc1e:	460d      	mov	r5, r1
 800dc20:	dc0d      	bgt.n	800dc3e <__ieee754_rem_pio2+0x1ae>
 800dc22:	4b6e      	ldr	r3, [pc, #440]	; (800dddc <__ieee754_rem_pio2+0x34c>)
 800dc24:	f10b 32ff 	add.w	r2, fp, #4294967295
 800dc28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc2c:	4543      	cmp	r3, r8
 800dc2e:	d006      	beq.n	800dc3e <__ieee754_rem_pio2+0x1ae>
 800dc30:	4622      	mov	r2, r4
 800dc32:	462b      	mov	r3, r5
 800dc34:	4630      	mov	r0, r6
 800dc36:	4639      	mov	r1, r7
 800dc38:	f7f2 fb2e 	bl	8000298 <__aeabi_dsub>
 800dc3c:	e00f      	b.n	800dc5e <__ieee754_rem_pio2+0x1ce>
 800dc3e:	462b      	mov	r3, r5
 800dc40:	4622      	mov	r2, r4
 800dc42:	4630      	mov	r0, r6
 800dc44:	4639      	mov	r1, r7
 800dc46:	f7f2 fb27 	bl	8000298 <__aeabi_dsub>
 800dc4a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dc4e:	9303      	str	r3, [sp, #12]
 800dc50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dc54:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800dc58:	f1b8 0f10 	cmp.w	r8, #16
 800dc5c:	dc02      	bgt.n	800dc64 <__ieee754_rem_pio2+0x1d4>
 800dc5e:	e9ca 0100 	strd	r0, r1, [sl]
 800dc62:	e039      	b.n	800dcd8 <__ieee754_rem_pio2+0x248>
 800dc64:	a34e      	add	r3, pc, #312	; (adr r3, 800dda0 <__ieee754_rem_pio2+0x310>)
 800dc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6a:	ec51 0b18 	vmov	r0, r1, d8
 800dc6e:	f7f2 fccb 	bl	8000608 <__aeabi_dmul>
 800dc72:	4604      	mov	r4, r0
 800dc74:	460d      	mov	r5, r1
 800dc76:	4602      	mov	r2, r0
 800dc78:	460b      	mov	r3, r1
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	4639      	mov	r1, r7
 800dc7e:	f7f2 fb0b 	bl	8000298 <__aeabi_dsub>
 800dc82:	4602      	mov	r2, r0
 800dc84:	460b      	mov	r3, r1
 800dc86:	4680      	mov	r8, r0
 800dc88:	4689      	mov	r9, r1
 800dc8a:	4630      	mov	r0, r6
 800dc8c:	4639      	mov	r1, r7
 800dc8e:	f7f2 fb03 	bl	8000298 <__aeabi_dsub>
 800dc92:	4622      	mov	r2, r4
 800dc94:	462b      	mov	r3, r5
 800dc96:	f7f2 faff 	bl	8000298 <__aeabi_dsub>
 800dc9a:	a343      	add	r3, pc, #268	; (adr r3, 800dda8 <__ieee754_rem_pio2+0x318>)
 800dc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca0:	4604      	mov	r4, r0
 800dca2:	460d      	mov	r5, r1
 800dca4:	ec51 0b18 	vmov	r0, r1, d8
 800dca8:	f7f2 fcae 	bl	8000608 <__aeabi_dmul>
 800dcac:	4622      	mov	r2, r4
 800dcae:	462b      	mov	r3, r5
 800dcb0:	f7f2 faf2 	bl	8000298 <__aeabi_dsub>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	4604      	mov	r4, r0
 800dcba:	460d      	mov	r5, r1
 800dcbc:	4640      	mov	r0, r8
 800dcbe:	4649      	mov	r1, r9
 800dcc0:	f7f2 faea 	bl	8000298 <__aeabi_dsub>
 800dcc4:	9a03      	ldr	r2, [sp, #12]
 800dcc6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dcca:	1ad3      	subs	r3, r2, r3
 800dccc:	2b31      	cmp	r3, #49	; 0x31
 800dcce:	dc24      	bgt.n	800dd1a <__ieee754_rem_pio2+0x28a>
 800dcd0:	e9ca 0100 	strd	r0, r1, [sl]
 800dcd4:	4646      	mov	r6, r8
 800dcd6:	464f      	mov	r7, r9
 800dcd8:	e9da 8900 	ldrd	r8, r9, [sl]
 800dcdc:	4630      	mov	r0, r6
 800dcde:	4642      	mov	r2, r8
 800dce0:	464b      	mov	r3, r9
 800dce2:	4639      	mov	r1, r7
 800dce4:	f7f2 fad8 	bl	8000298 <__aeabi_dsub>
 800dce8:	462b      	mov	r3, r5
 800dcea:	4622      	mov	r2, r4
 800dcec:	f7f2 fad4 	bl	8000298 <__aeabi_dsub>
 800dcf0:	9b02      	ldr	r3, [sp, #8]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dcf8:	f6bf af0a 	bge.w	800db10 <__ieee754_rem_pio2+0x80>
 800dcfc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dd00:	f8ca 3004 	str.w	r3, [sl, #4]
 800dd04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd08:	f8ca 8000 	str.w	r8, [sl]
 800dd0c:	f8ca 0008 	str.w	r0, [sl, #8]
 800dd10:	f8ca 300c 	str.w	r3, [sl, #12]
 800dd14:	f1cb 0b00 	rsb	fp, fp, #0
 800dd18:	e6fa      	b.n	800db10 <__ieee754_rem_pio2+0x80>
 800dd1a:	a327      	add	r3, pc, #156	; (adr r3, 800ddb8 <__ieee754_rem_pio2+0x328>)
 800dd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd20:	ec51 0b18 	vmov	r0, r1, d8
 800dd24:	f7f2 fc70 	bl	8000608 <__aeabi_dmul>
 800dd28:	4604      	mov	r4, r0
 800dd2a:	460d      	mov	r5, r1
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	460b      	mov	r3, r1
 800dd30:	4640      	mov	r0, r8
 800dd32:	4649      	mov	r1, r9
 800dd34:	f7f2 fab0 	bl	8000298 <__aeabi_dsub>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	460b      	mov	r3, r1
 800dd3c:	4606      	mov	r6, r0
 800dd3e:	460f      	mov	r7, r1
 800dd40:	4640      	mov	r0, r8
 800dd42:	4649      	mov	r1, r9
 800dd44:	f7f2 faa8 	bl	8000298 <__aeabi_dsub>
 800dd48:	4622      	mov	r2, r4
 800dd4a:	462b      	mov	r3, r5
 800dd4c:	f7f2 faa4 	bl	8000298 <__aeabi_dsub>
 800dd50:	a31b      	add	r3, pc, #108	; (adr r3, 800ddc0 <__ieee754_rem_pio2+0x330>)
 800dd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd56:	4604      	mov	r4, r0
 800dd58:	460d      	mov	r5, r1
 800dd5a:	ec51 0b18 	vmov	r0, r1, d8
 800dd5e:	f7f2 fc53 	bl	8000608 <__aeabi_dmul>
 800dd62:	4622      	mov	r2, r4
 800dd64:	462b      	mov	r3, r5
 800dd66:	f7f2 fa97 	bl	8000298 <__aeabi_dsub>
 800dd6a:	4604      	mov	r4, r0
 800dd6c:	460d      	mov	r5, r1
 800dd6e:	e75f      	b.n	800dc30 <__ieee754_rem_pio2+0x1a0>
 800dd70:	4b1b      	ldr	r3, [pc, #108]	; (800dde0 <__ieee754_rem_pio2+0x350>)
 800dd72:	4598      	cmp	r8, r3
 800dd74:	dd36      	ble.n	800dde4 <__ieee754_rem_pio2+0x354>
 800dd76:	ee10 2a10 	vmov	r2, s0
 800dd7a:	462b      	mov	r3, r5
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	4629      	mov	r1, r5
 800dd80:	f7f2 fa8a 	bl	8000298 <__aeabi_dsub>
 800dd84:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd88:	e9ca 0100 	strd	r0, r1, [sl]
 800dd8c:	e694      	b.n	800dab8 <__ieee754_rem_pio2+0x28>
 800dd8e:	bf00      	nop
 800dd90:	54400000 	.word	0x54400000
 800dd94:	3ff921fb 	.word	0x3ff921fb
 800dd98:	1a626331 	.word	0x1a626331
 800dd9c:	3dd0b461 	.word	0x3dd0b461
 800dda0:	1a600000 	.word	0x1a600000
 800dda4:	3dd0b461 	.word	0x3dd0b461
 800dda8:	2e037073 	.word	0x2e037073
 800ddac:	3ba3198a 	.word	0x3ba3198a
 800ddb0:	6dc9c883 	.word	0x6dc9c883
 800ddb4:	3fe45f30 	.word	0x3fe45f30
 800ddb8:	2e000000 	.word	0x2e000000
 800ddbc:	3ba3198a 	.word	0x3ba3198a
 800ddc0:	252049c1 	.word	0x252049c1
 800ddc4:	397b839a 	.word	0x397b839a
 800ddc8:	3fe921fb 	.word	0x3fe921fb
 800ddcc:	4002d97b 	.word	0x4002d97b
 800ddd0:	3ff921fb 	.word	0x3ff921fb
 800ddd4:	413921fb 	.word	0x413921fb
 800ddd8:	3fe00000 	.word	0x3fe00000
 800dddc:	0800f108 	.word	0x0800f108
 800dde0:	7fefffff 	.word	0x7fefffff
 800dde4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800dde8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ddec:	ee10 0a10 	vmov	r0, s0
 800ddf0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ddf4:	ee10 6a10 	vmov	r6, s0
 800ddf8:	460f      	mov	r7, r1
 800ddfa:	f7f2 feb5 	bl	8000b68 <__aeabi_d2iz>
 800ddfe:	f7f2 fb99 	bl	8000534 <__aeabi_i2d>
 800de02:	4602      	mov	r2, r0
 800de04:	460b      	mov	r3, r1
 800de06:	4630      	mov	r0, r6
 800de08:	4639      	mov	r1, r7
 800de0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de0e:	f7f2 fa43 	bl	8000298 <__aeabi_dsub>
 800de12:	4b23      	ldr	r3, [pc, #140]	; (800dea0 <__ieee754_rem_pio2+0x410>)
 800de14:	2200      	movs	r2, #0
 800de16:	f7f2 fbf7 	bl	8000608 <__aeabi_dmul>
 800de1a:	460f      	mov	r7, r1
 800de1c:	4606      	mov	r6, r0
 800de1e:	f7f2 fea3 	bl	8000b68 <__aeabi_d2iz>
 800de22:	f7f2 fb87 	bl	8000534 <__aeabi_i2d>
 800de26:	4602      	mov	r2, r0
 800de28:	460b      	mov	r3, r1
 800de2a:	4630      	mov	r0, r6
 800de2c:	4639      	mov	r1, r7
 800de2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800de32:	f7f2 fa31 	bl	8000298 <__aeabi_dsub>
 800de36:	4b1a      	ldr	r3, [pc, #104]	; (800dea0 <__ieee754_rem_pio2+0x410>)
 800de38:	2200      	movs	r2, #0
 800de3a:	f7f2 fbe5 	bl	8000608 <__aeabi_dmul>
 800de3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de42:	ad04      	add	r5, sp, #16
 800de44:	f04f 0803 	mov.w	r8, #3
 800de48:	46a9      	mov	r9, r5
 800de4a:	2600      	movs	r6, #0
 800de4c:	2700      	movs	r7, #0
 800de4e:	4632      	mov	r2, r6
 800de50:	463b      	mov	r3, r7
 800de52:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800de56:	46c3      	mov	fp, r8
 800de58:	3d08      	subs	r5, #8
 800de5a:	f108 38ff 	add.w	r8, r8, #4294967295
 800de5e:	f7f2 fe3b 	bl	8000ad8 <__aeabi_dcmpeq>
 800de62:	2800      	cmp	r0, #0
 800de64:	d1f3      	bne.n	800de4e <__ieee754_rem_pio2+0x3be>
 800de66:	4b0f      	ldr	r3, [pc, #60]	; (800dea4 <__ieee754_rem_pio2+0x414>)
 800de68:	9301      	str	r3, [sp, #4]
 800de6a:	2302      	movs	r3, #2
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	4622      	mov	r2, r4
 800de70:	465b      	mov	r3, fp
 800de72:	4651      	mov	r1, sl
 800de74:	4648      	mov	r0, r9
 800de76:	f000 f993 	bl	800e1a0 <__kernel_rem_pio2>
 800de7a:	9b02      	ldr	r3, [sp, #8]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	4683      	mov	fp, r0
 800de80:	f6bf ae46 	bge.w	800db10 <__ieee754_rem_pio2+0x80>
 800de84:	e9da 2100 	ldrd	r2, r1, [sl]
 800de88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de8c:	e9ca 2300 	strd	r2, r3, [sl]
 800de90:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800de94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de98:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800de9c:	e73a      	b.n	800dd14 <__ieee754_rem_pio2+0x284>
 800de9e:	bf00      	nop
 800dea0:	41700000 	.word	0x41700000
 800dea4:	0800f188 	.word	0x0800f188

0800dea8 <__ieee754_sqrt>:
 800dea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deac:	ec55 4b10 	vmov	r4, r5, d0
 800deb0:	4e55      	ldr	r6, [pc, #340]	; (800e008 <__ieee754_sqrt+0x160>)
 800deb2:	43ae      	bics	r6, r5
 800deb4:	ee10 0a10 	vmov	r0, s0
 800deb8:	ee10 3a10 	vmov	r3, s0
 800debc:	462a      	mov	r2, r5
 800debe:	4629      	mov	r1, r5
 800dec0:	d110      	bne.n	800dee4 <__ieee754_sqrt+0x3c>
 800dec2:	ee10 2a10 	vmov	r2, s0
 800dec6:	462b      	mov	r3, r5
 800dec8:	f7f2 fb9e 	bl	8000608 <__aeabi_dmul>
 800decc:	4602      	mov	r2, r0
 800dece:	460b      	mov	r3, r1
 800ded0:	4620      	mov	r0, r4
 800ded2:	4629      	mov	r1, r5
 800ded4:	f7f2 f9e2 	bl	800029c <__adddf3>
 800ded8:	4604      	mov	r4, r0
 800deda:	460d      	mov	r5, r1
 800dedc:	ec45 4b10 	vmov	d0, r4, r5
 800dee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee4:	2d00      	cmp	r5, #0
 800dee6:	dc10      	bgt.n	800df0a <__ieee754_sqrt+0x62>
 800dee8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800deec:	4330      	orrs	r0, r6
 800deee:	d0f5      	beq.n	800dedc <__ieee754_sqrt+0x34>
 800def0:	b15d      	cbz	r5, 800df0a <__ieee754_sqrt+0x62>
 800def2:	ee10 2a10 	vmov	r2, s0
 800def6:	462b      	mov	r3, r5
 800def8:	ee10 0a10 	vmov	r0, s0
 800defc:	f7f2 f9cc 	bl	8000298 <__aeabi_dsub>
 800df00:	4602      	mov	r2, r0
 800df02:	460b      	mov	r3, r1
 800df04:	f7f2 fcaa 	bl	800085c <__aeabi_ddiv>
 800df08:	e7e6      	b.n	800ded8 <__ieee754_sqrt+0x30>
 800df0a:	1512      	asrs	r2, r2, #20
 800df0c:	d074      	beq.n	800dff8 <__ieee754_sqrt+0x150>
 800df0e:	07d4      	lsls	r4, r2, #31
 800df10:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800df14:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800df18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800df1c:	bf5e      	ittt	pl
 800df1e:	0fda      	lsrpl	r2, r3, #31
 800df20:	005b      	lslpl	r3, r3, #1
 800df22:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800df26:	2400      	movs	r4, #0
 800df28:	0fda      	lsrs	r2, r3, #31
 800df2a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800df2e:	107f      	asrs	r7, r7, #1
 800df30:	005b      	lsls	r3, r3, #1
 800df32:	2516      	movs	r5, #22
 800df34:	4620      	mov	r0, r4
 800df36:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800df3a:	1886      	adds	r6, r0, r2
 800df3c:	428e      	cmp	r6, r1
 800df3e:	bfde      	ittt	le
 800df40:	1b89      	suble	r1, r1, r6
 800df42:	18b0      	addle	r0, r6, r2
 800df44:	18a4      	addle	r4, r4, r2
 800df46:	0049      	lsls	r1, r1, #1
 800df48:	3d01      	subs	r5, #1
 800df4a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800df4e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800df52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800df56:	d1f0      	bne.n	800df3a <__ieee754_sqrt+0x92>
 800df58:	462a      	mov	r2, r5
 800df5a:	f04f 0e20 	mov.w	lr, #32
 800df5e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800df62:	4281      	cmp	r1, r0
 800df64:	eb06 0c05 	add.w	ip, r6, r5
 800df68:	dc02      	bgt.n	800df70 <__ieee754_sqrt+0xc8>
 800df6a:	d113      	bne.n	800df94 <__ieee754_sqrt+0xec>
 800df6c:	459c      	cmp	ip, r3
 800df6e:	d811      	bhi.n	800df94 <__ieee754_sqrt+0xec>
 800df70:	f1bc 0f00 	cmp.w	ip, #0
 800df74:	eb0c 0506 	add.w	r5, ip, r6
 800df78:	da43      	bge.n	800e002 <__ieee754_sqrt+0x15a>
 800df7a:	2d00      	cmp	r5, #0
 800df7c:	db41      	blt.n	800e002 <__ieee754_sqrt+0x15a>
 800df7e:	f100 0801 	add.w	r8, r0, #1
 800df82:	1a09      	subs	r1, r1, r0
 800df84:	459c      	cmp	ip, r3
 800df86:	bf88      	it	hi
 800df88:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800df8c:	eba3 030c 	sub.w	r3, r3, ip
 800df90:	4432      	add	r2, r6
 800df92:	4640      	mov	r0, r8
 800df94:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800df98:	f1be 0e01 	subs.w	lr, lr, #1
 800df9c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800dfa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dfa4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dfa8:	d1db      	bne.n	800df62 <__ieee754_sqrt+0xba>
 800dfaa:	430b      	orrs	r3, r1
 800dfac:	d006      	beq.n	800dfbc <__ieee754_sqrt+0x114>
 800dfae:	1c50      	adds	r0, r2, #1
 800dfb0:	bf13      	iteet	ne
 800dfb2:	3201      	addne	r2, #1
 800dfb4:	3401      	addeq	r4, #1
 800dfb6:	4672      	moveq	r2, lr
 800dfb8:	f022 0201 	bicne.w	r2, r2, #1
 800dfbc:	1063      	asrs	r3, r4, #1
 800dfbe:	0852      	lsrs	r2, r2, #1
 800dfc0:	07e1      	lsls	r1, r4, #31
 800dfc2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800dfc6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800dfca:	bf48      	it	mi
 800dfcc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800dfd0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800dfd4:	4614      	mov	r4, r2
 800dfd6:	e781      	b.n	800dedc <__ieee754_sqrt+0x34>
 800dfd8:	0ad9      	lsrs	r1, r3, #11
 800dfda:	3815      	subs	r0, #21
 800dfdc:	055b      	lsls	r3, r3, #21
 800dfde:	2900      	cmp	r1, #0
 800dfe0:	d0fa      	beq.n	800dfd8 <__ieee754_sqrt+0x130>
 800dfe2:	02cd      	lsls	r5, r1, #11
 800dfe4:	d50a      	bpl.n	800dffc <__ieee754_sqrt+0x154>
 800dfe6:	f1c2 0420 	rsb	r4, r2, #32
 800dfea:	fa23 f404 	lsr.w	r4, r3, r4
 800dfee:	1e55      	subs	r5, r2, #1
 800dff0:	4093      	lsls	r3, r2
 800dff2:	4321      	orrs	r1, r4
 800dff4:	1b42      	subs	r2, r0, r5
 800dff6:	e78a      	b.n	800df0e <__ieee754_sqrt+0x66>
 800dff8:	4610      	mov	r0, r2
 800dffa:	e7f0      	b.n	800dfde <__ieee754_sqrt+0x136>
 800dffc:	0049      	lsls	r1, r1, #1
 800dffe:	3201      	adds	r2, #1
 800e000:	e7ef      	b.n	800dfe2 <__ieee754_sqrt+0x13a>
 800e002:	4680      	mov	r8, r0
 800e004:	e7bd      	b.n	800df82 <__ieee754_sqrt+0xda>
 800e006:	bf00      	nop
 800e008:	7ff00000 	.word	0x7ff00000
 800e00c:	00000000 	.word	0x00000000

0800e010 <__kernel_cos>:
 800e010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e014:	ec57 6b10 	vmov	r6, r7, d0
 800e018:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e01c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e020:	ed8d 1b00 	vstr	d1, [sp]
 800e024:	da07      	bge.n	800e036 <__kernel_cos+0x26>
 800e026:	ee10 0a10 	vmov	r0, s0
 800e02a:	4639      	mov	r1, r7
 800e02c:	f7f2 fd9c 	bl	8000b68 <__aeabi_d2iz>
 800e030:	2800      	cmp	r0, #0
 800e032:	f000 8088 	beq.w	800e146 <__kernel_cos+0x136>
 800e036:	4632      	mov	r2, r6
 800e038:	463b      	mov	r3, r7
 800e03a:	4630      	mov	r0, r6
 800e03c:	4639      	mov	r1, r7
 800e03e:	f7f2 fae3 	bl	8000608 <__aeabi_dmul>
 800e042:	4b51      	ldr	r3, [pc, #324]	; (800e188 <__kernel_cos+0x178>)
 800e044:	2200      	movs	r2, #0
 800e046:	4604      	mov	r4, r0
 800e048:	460d      	mov	r5, r1
 800e04a:	f7f2 fadd 	bl	8000608 <__aeabi_dmul>
 800e04e:	a340      	add	r3, pc, #256	; (adr r3, 800e150 <__kernel_cos+0x140>)
 800e050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e054:	4682      	mov	sl, r0
 800e056:	468b      	mov	fp, r1
 800e058:	4620      	mov	r0, r4
 800e05a:	4629      	mov	r1, r5
 800e05c:	f7f2 fad4 	bl	8000608 <__aeabi_dmul>
 800e060:	a33d      	add	r3, pc, #244	; (adr r3, 800e158 <__kernel_cos+0x148>)
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	f7f2 f919 	bl	800029c <__adddf3>
 800e06a:	4622      	mov	r2, r4
 800e06c:	462b      	mov	r3, r5
 800e06e:	f7f2 facb 	bl	8000608 <__aeabi_dmul>
 800e072:	a33b      	add	r3, pc, #236	; (adr r3, 800e160 <__kernel_cos+0x150>)
 800e074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e078:	f7f2 f90e 	bl	8000298 <__aeabi_dsub>
 800e07c:	4622      	mov	r2, r4
 800e07e:	462b      	mov	r3, r5
 800e080:	f7f2 fac2 	bl	8000608 <__aeabi_dmul>
 800e084:	a338      	add	r3, pc, #224	; (adr r3, 800e168 <__kernel_cos+0x158>)
 800e086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08a:	f7f2 f907 	bl	800029c <__adddf3>
 800e08e:	4622      	mov	r2, r4
 800e090:	462b      	mov	r3, r5
 800e092:	f7f2 fab9 	bl	8000608 <__aeabi_dmul>
 800e096:	a336      	add	r3, pc, #216	; (adr r3, 800e170 <__kernel_cos+0x160>)
 800e098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09c:	f7f2 f8fc 	bl	8000298 <__aeabi_dsub>
 800e0a0:	4622      	mov	r2, r4
 800e0a2:	462b      	mov	r3, r5
 800e0a4:	f7f2 fab0 	bl	8000608 <__aeabi_dmul>
 800e0a8:	a333      	add	r3, pc, #204	; (adr r3, 800e178 <__kernel_cos+0x168>)
 800e0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ae:	f7f2 f8f5 	bl	800029c <__adddf3>
 800e0b2:	4622      	mov	r2, r4
 800e0b4:	462b      	mov	r3, r5
 800e0b6:	f7f2 faa7 	bl	8000608 <__aeabi_dmul>
 800e0ba:	4622      	mov	r2, r4
 800e0bc:	462b      	mov	r3, r5
 800e0be:	f7f2 faa3 	bl	8000608 <__aeabi_dmul>
 800e0c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0c6:	4604      	mov	r4, r0
 800e0c8:	460d      	mov	r5, r1
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	4639      	mov	r1, r7
 800e0ce:	f7f2 fa9b 	bl	8000608 <__aeabi_dmul>
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	4629      	mov	r1, r5
 800e0d8:	4620      	mov	r0, r4
 800e0da:	f7f2 f8dd 	bl	8000298 <__aeabi_dsub>
 800e0de:	4b2b      	ldr	r3, [pc, #172]	; (800e18c <__kernel_cos+0x17c>)
 800e0e0:	4598      	cmp	r8, r3
 800e0e2:	4606      	mov	r6, r0
 800e0e4:	460f      	mov	r7, r1
 800e0e6:	dc10      	bgt.n	800e10a <__kernel_cos+0xfa>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	460b      	mov	r3, r1
 800e0ec:	4650      	mov	r0, sl
 800e0ee:	4659      	mov	r1, fp
 800e0f0:	f7f2 f8d2 	bl	8000298 <__aeabi_dsub>
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	4926      	ldr	r1, [pc, #152]	; (800e190 <__kernel_cos+0x180>)
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	2000      	movs	r0, #0
 800e0fc:	f7f2 f8cc 	bl	8000298 <__aeabi_dsub>
 800e100:	ec41 0b10 	vmov	d0, r0, r1
 800e104:	b003      	add	sp, #12
 800e106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e10a:	4b22      	ldr	r3, [pc, #136]	; (800e194 <__kernel_cos+0x184>)
 800e10c:	4920      	ldr	r1, [pc, #128]	; (800e190 <__kernel_cos+0x180>)
 800e10e:	4598      	cmp	r8, r3
 800e110:	bfcc      	ite	gt
 800e112:	4d21      	ldrgt	r5, [pc, #132]	; (800e198 <__kernel_cos+0x188>)
 800e114:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e118:	2400      	movs	r4, #0
 800e11a:	4622      	mov	r2, r4
 800e11c:	462b      	mov	r3, r5
 800e11e:	2000      	movs	r0, #0
 800e120:	f7f2 f8ba 	bl	8000298 <__aeabi_dsub>
 800e124:	4622      	mov	r2, r4
 800e126:	4680      	mov	r8, r0
 800e128:	4689      	mov	r9, r1
 800e12a:	462b      	mov	r3, r5
 800e12c:	4650      	mov	r0, sl
 800e12e:	4659      	mov	r1, fp
 800e130:	f7f2 f8b2 	bl	8000298 <__aeabi_dsub>
 800e134:	4632      	mov	r2, r6
 800e136:	463b      	mov	r3, r7
 800e138:	f7f2 f8ae 	bl	8000298 <__aeabi_dsub>
 800e13c:	4602      	mov	r2, r0
 800e13e:	460b      	mov	r3, r1
 800e140:	4640      	mov	r0, r8
 800e142:	4649      	mov	r1, r9
 800e144:	e7da      	b.n	800e0fc <__kernel_cos+0xec>
 800e146:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e180 <__kernel_cos+0x170>
 800e14a:	e7db      	b.n	800e104 <__kernel_cos+0xf4>
 800e14c:	f3af 8000 	nop.w
 800e150:	be8838d4 	.word	0xbe8838d4
 800e154:	bda8fae9 	.word	0xbda8fae9
 800e158:	bdb4b1c4 	.word	0xbdb4b1c4
 800e15c:	3e21ee9e 	.word	0x3e21ee9e
 800e160:	809c52ad 	.word	0x809c52ad
 800e164:	3e927e4f 	.word	0x3e927e4f
 800e168:	19cb1590 	.word	0x19cb1590
 800e16c:	3efa01a0 	.word	0x3efa01a0
 800e170:	16c15177 	.word	0x16c15177
 800e174:	3f56c16c 	.word	0x3f56c16c
 800e178:	5555554c 	.word	0x5555554c
 800e17c:	3fa55555 	.word	0x3fa55555
 800e180:	00000000 	.word	0x00000000
 800e184:	3ff00000 	.word	0x3ff00000
 800e188:	3fe00000 	.word	0x3fe00000
 800e18c:	3fd33332 	.word	0x3fd33332
 800e190:	3ff00000 	.word	0x3ff00000
 800e194:	3fe90000 	.word	0x3fe90000
 800e198:	3fd20000 	.word	0x3fd20000
 800e19c:	00000000 	.word	0x00000000

0800e1a0 <__kernel_rem_pio2>:
 800e1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a4:	ed2d 8b02 	vpush	{d8}
 800e1a8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e1ac:	f112 0f14 	cmn.w	r2, #20
 800e1b0:	9308      	str	r3, [sp, #32]
 800e1b2:	9101      	str	r1, [sp, #4]
 800e1b4:	4bc4      	ldr	r3, [pc, #784]	; (800e4c8 <__kernel_rem_pio2+0x328>)
 800e1b6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e1b8:	900b      	str	r0, [sp, #44]	; 0x2c
 800e1ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1be:	9302      	str	r3, [sp, #8]
 800e1c0:	9b08      	ldr	r3, [sp, #32]
 800e1c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e1c6:	bfa8      	it	ge
 800e1c8:	1ed4      	subge	r4, r2, #3
 800e1ca:	9306      	str	r3, [sp, #24]
 800e1cc:	bfb2      	itee	lt
 800e1ce:	2400      	movlt	r4, #0
 800e1d0:	2318      	movge	r3, #24
 800e1d2:	fb94 f4f3 	sdivge	r4, r4, r3
 800e1d6:	f06f 0317 	mvn.w	r3, #23
 800e1da:	fb04 3303 	mla	r3, r4, r3, r3
 800e1de:	eb03 0a02 	add.w	sl, r3, r2
 800e1e2:	9b02      	ldr	r3, [sp, #8]
 800e1e4:	9a06      	ldr	r2, [sp, #24]
 800e1e6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800e4b8 <__kernel_rem_pio2+0x318>
 800e1ea:	eb03 0802 	add.w	r8, r3, r2
 800e1ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e1f0:	1aa7      	subs	r7, r4, r2
 800e1f2:	ae22      	add	r6, sp, #136	; 0x88
 800e1f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e1f8:	2500      	movs	r5, #0
 800e1fa:	4545      	cmp	r5, r8
 800e1fc:	dd13      	ble.n	800e226 <__kernel_rem_pio2+0x86>
 800e1fe:	9b08      	ldr	r3, [sp, #32]
 800e200:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800e4b8 <__kernel_rem_pio2+0x318>
 800e204:	aa22      	add	r2, sp, #136	; 0x88
 800e206:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e20a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e20e:	f04f 0800 	mov.w	r8, #0
 800e212:	9b02      	ldr	r3, [sp, #8]
 800e214:	4598      	cmp	r8, r3
 800e216:	dc2f      	bgt.n	800e278 <__kernel_rem_pio2+0xd8>
 800e218:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e21c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e220:	462f      	mov	r7, r5
 800e222:	2600      	movs	r6, #0
 800e224:	e01b      	b.n	800e25e <__kernel_rem_pio2+0xbe>
 800e226:	42ef      	cmn	r7, r5
 800e228:	d407      	bmi.n	800e23a <__kernel_rem_pio2+0x9a>
 800e22a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e22e:	f7f2 f981 	bl	8000534 <__aeabi_i2d>
 800e232:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e236:	3501      	adds	r5, #1
 800e238:	e7df      	b.n	800e1fa <__kernel_rem_pio2+0x5a>
 800e23a:	ec51 0b18 	vmov	r0, r1, d8
 800e23e:	e7f8      	b.n	800e232 <__kernel_rem_pio2+0x92>
 800e240:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e244:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e248:	f7f2 f9de 	bl	8000608 <__aeabi_dmul>
 800e24c:	4602      	mov	r2, r0
 800e24e:	460b      	mov	r3, r1
 800e250:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e254:	f7f2 f822 	bl	800029c <__adddf3>
 800e258:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e25c:	3601      	adds	r6, #1
 800e25e:	9b06      	ldr	r3, [sp, #24]
 800e260:	429e      	cmp	r6, r3
 800e262:	f1a7 0708 	sub.w	r7, r7, #8
 800e266:	ddeb      	ble.n	800e240 <__kernel_rem_pio2+0xa0>
 800e268:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e26c:	f108 0801 	add.w	r8, r8, #1
 800e270:	ecab 7b02 	vstmia	fp!, {d7}
 800e274:	3508      	adds	r5, #8
 800e276:	e7cc      	b.n	800e212 <__kernel_rem_pio2+0x72>
 800e278:	9b02      	ldr	r3, [sp, #8]
 800e27a:	aa0e      	add	r2, sp, #56	; 0x38
 800e27c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e280:	930d      	str	r3, [sp, #52]	; 0x34
 800e282:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e284:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e288:	9c02      	ldr	r4, [sp, #8]
 800e28a:	930c      	str	r3, [sp, #48]	; 0x30
 800e28c:	00e3      	lsls	r3, r4, #3
 800e28e:	930a      	str	r3, [sp, #40]	; 0x28
 800e290:	ab9a      	add	r3, sp, #616	; 0x268
 800e292:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e296:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e29a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e29e:	ab72      	add	r3, sp, #456	; 0x1c8
 800e2a0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e2a4:	46c3      	mov	fp, r8
 800e2a6:	46a1      	mov	r9, r4
 800e2a8:	f1b9 0f00 	cmp.w	r9, #0
 800e2ac:	f1a5 0508 	sub.w	r5, r5, #8
 800e2b0:	dc77      	bgt.n	800e3a2 <__kernel_rem_pio2+0x202>
 800e2b2:	ec47 6b10 	vmov	d0, r6, r7
 800e2b6:	4650      	mov	r0, sl
 800e2b8:	f000 fc02 	bl	800eac0 <scalbn>
 800e2bc:	ec57 6b10 	vmov	r6, r7, d0
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e2c6:	ee10 0a10 	vmov	r0, s0
 800e2ca:	4639      	mov	r1, r7
 800e2cc:	f7f2 f99c 	bl	8000608 <__aeabi_dmul>
 800e2d0:	ec41 0b10 	vmov	d0, r0, r1
 800e2d4:	f000 fb74 	bl	800e9c0 <floor>
 800e2d8:	4b7c      	ldr	r3, [pc, #496]	; (800e4cc <__kernel_rem_pio2+0x32c>)
 800e2da:	ec51 0b10 	vmov	r0, r1, d0
 800e2de:	2200      	movs	r2, #0
 800e2e0:	f7f2 f992 	bl	8000608 <__aeabi_dmul>
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	460b      	mov	r3, r1
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	4639      	mov	r1, r7
 800e2ec:	f7f1 ffd4 	bl	8000298 <__aeabi_dsub>
 800e2f0:	460f      	mov	r7, r1
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	f7f2 fc38 	bl	8000b68 <__aeabi_d2iz>
 800e2f8:	9004      	str	r0, [sp, #16]
 800e2fa:	f7f2 f91b 	bl	8000534 <__aeabi_i2d>
 800e2fe:	4602      	mov	r2, r0
 800e300:	460b      	mov	r3, r1
 800e302:	4630      	mov	r0, r6
 800e304:	4639      	mov	r1, r7
 800e306:	f7f1 ffc7 	bl	8000298 <__aeabi_dsub>
 800e30a:	f1ba 0f00 	cmp.w	sl, #0
 800e30e:	4606      	mov	r6, r0
 800e310:	460f      	mov	r7, r1
 800e312:	dd6d      	ble.n	800e3f0 <__kernel_rem_pio2+0x250>
 800e314:	1e62      	subs	r2, r4, #1
 800e316:	ab0e      	add	r3, sp, #56	; 0x38
 800e318:	9d04      	ldr	r5, [sp, #16]
 800e31a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e31e:	f1ca 0118 	rsb	r1, sl, #24
 800e322:	fa40 f301 	asr.w	r3, r0, r1
 800e326:	441d      	add	r5, r3
 800e328:	408b      	lsls	r3, r1
 800e32a:	1ac0      	subs	r0, r0, r3
 800e32c:	ab0e      	add	r3, sp, #56	; 0x38
 800e32e:	9504      	str	r5, [sp, #16]
 800e330:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e334:	f1ca 0317 	rsb	r3, sl, #23
 800e338:	fa40 fb03 	asr.w	fp, r0, r3
 800e33c:	f1bb 0f00 	cmp.w	fp, #0
 800e340:	dd65      	ble.n	800e40e <__kernel_rem_pio2+0x26e>
 800e342:	9b04      	ldr	r3, [sp, #16]
 800e344:	2200      	movs	r2, #0
 800e346:	3301      	adds	r3, #1
 800e348:	9304      	str	r3, [sp, #16]
 800e34a:	4615      	mov	r5, r2
 800e34c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e350:	4294      	cmp	r4, r2
 800e352:	f300 809c 	bgt.w	800e48e <__kernel_rem_pio2+0x2ee>
 800e356:	f1ba 0f00 	cmp.w	sl, #0
 800e35a:	dd07      	ble.n	800e36c <__kernel_rem_pio2+0x1cc>
 800e35c:	f1ba 0f01 	cmp.w	sl, #1
 800e360:	f000 80c0 	beq.w	800e4e4 <__kernel_rem_pio2+0x344>
 800e364:	f1ba 0f02 	cmp.w	sl, #2
 800e368:	f000 80c6 	beq.w	800e4f8 <__kernel_rem_pio2+0x358>
 800e36c:	f1bb 0f02 	cmp.w	fp, #2
 800e370:	d14d      	bne.n	800e40e <__kernel_rem_pio2+0x26e>
 800e372:	4632      	mov	r2, r6
 800e374:	463b      	mov	r3, r7
 800e376:	4956      	ldr	r1, [pc, #344]	; (800e4d0 <__kernel_rem_pio2+0x330>)
 800e378:	2000      	movs	r0, #0
 800e37a:	f7f1 ff8d 	bl	8000298 <__aeabi_dsub>
 800e37e:	4606      	mov	r6, r0
 800e380:	460f      	mov	r7, r1
 800e382:	2d00      	cmp	r5, #0
 800e384:	d043      	beq.n	800e40e <__kernel_rem_pio2+0x26e>
 800e386:	4650      	mov	r0, sl
 800e388:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800e4c0 <__kernel_rem_pio2+0x320>
 800e38c:	f000 fb98 	bl	800eac0 <scalbn>
 800e390:	4630      	mov	r0, r6
 800e392:	4639      	mov	r1, r7
 800e394:	ec53 2b10 	vmov	r2, r3, d0
 800e398:	f7f1 ff7e 	bl	8000298 <__aeabi_dsub>
 800e39c:	4606      	mov	r6, r0
 800e39e:	460f      	mov	r7, r1
 800e3a0:	e035      	b.n	800e40e <__kernel_rem_pio2+0x26e>
 800e3a2:	4b4c      	ldr	r3, [pc, #304]	; (800e4d4 <__kernel_rem_pio2+0x334>)
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	4639      	mov	r1, r7
 800e3aa:	f7f2 f92d 	bl	8000608 <__aeabi_dmul>
 800e3ae:	f7f2 fbdb 	bl	8000b68 <__aeabi_d2iz>
 800e3b2:	f7f2 f8bf 	bl	8000534 <__aeabi_i2d>
 800e3b6:	4602      	mov	r2, r0
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	ec43 2b18 	vmov	d8, r2, r3
 800e3be:	4b46      	ldr	r3, [pc, #280]	; (800e4d8 <__kernel_rem_pio2+0x338>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f7f2 f921 	bl	8000608 <__aeabi_dmul>
 800e3c6:	4602      	mov	r2, r0
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	4639      	mov	r1, r7
 800e3ce:	f7f1 ff63 	bl	8000298 <__aeabi_dsub>
 800e3d2:	f7f2 fbc9 	bl	8000b68 <__aeabi_d2iz>
 800e3d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e3da:	f84b 0b04 	str.w	r0, [fp], #4
 800e3de:	ec51 0b18 	vmov	r0, r1, d8
 800e3e2:	f7f1 ff5b 	bl	800029c <__adddf3>
 800e3e6:	f109 39ff 	add.w	r9, r9, #4294967295
 800e3ea:	4606      	mov	r6, r0
 800e3ec:	460f      	mov	r7, r1
 800e3ee:	e75b      	b.n	800e2a8 <__kernel_rem_pio2+0x108>
 800e3f0:	d106      	bne.n	800e400 <__kernel_rem_pio2+0x260>
 800e3f2:	1e63      	subs	r3, r4, #1
 800e3f4:	aa0e      	add	r2, sp, #56	; 0x38
 800e3f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e3fa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e3fe:	e79d      	b.n	800e33c <__kernel_rem_pio2+0x19c>
 800e400:	4b36      	ldr	r3, [pc, #216]	; (800e4dc <__kernel_rem_pio2+0x33c>)
 800e402:	2200      	movs	r2, #0
 800e404:	f7f2 fb86 	bl	8000b14 <__aeabi_dcmpge>
 800e408:	2800      	cmp	r0, #0
 800e40a:	d13d      	bne.n	800e488 <__kernel_rem_pio2+0x2e8>
 800e40c:	4683      	mov	fp, r0
 800e40e:	2200      	movs	r2, #0
 800e410:	2300      	movs	r3, #0
 800e412:	4630      	mov	r0, r6
 800e414:	4639      	mov	r1, r7
 800e416:	f7f2 fb5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800e41a:	2800      	cmp	r0, #0
 800e41c:	f000 80c0 	beq.w	800e5a0 <__kernel_rem_pio2+0x400>
 800e420:	1e65      	subs	r5, r4, #1
 800e422:	462b      	mov	r3, r5
 800e424:	2200      	movs	r2, #0
 800e426:	9902      	ldr	r1, [sp, #8]
 800e428:	428b      	cmp	r3, r1
 800e42a:	da6c      	bge.n	800e506 <__kernel_rem_pio2+0x366>
 800e42c:	2a00      	cmp	r2, #0
 800e42e:	f000 8089 	beq.w	800e544 <__kernel_rem_pio2+0x3a4>
 800e432:	ab0e      	add	r3, sp, #56	; 0x38
 800e434:	f1aa 0a18 	sub.w	sl, sl, #24
 800e438:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	f000 80ad 	beq.w	800e59c <__kernel_rem_pio2+0x3fc>
 800e442:	4650      	mov	r0, sl
 800e444:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800e4c0 <__kernel_rem_pio2+0x320>
 800e448:	f000 fb3a 	bl	800eac0 <scalbn>
 800e44c:	ab9a      	add	r3, sp, #616	; 0x268
 800e44e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e452:	ec57 6b10 	vmov	r6, r7, d0
 800e456:	00ec      	lsls	r4, r5, #3
 800e458:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800e45c:	46aa      	mov	sl, r5
 800e45e:	f1ba 0f00 	cmp.w	sl, #0
 800e462:	f280 80d6 	bge.w	800e612 <__kernel_rem_pio2+0x472>
 800e466:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800e4b8 <__kernel_rem_pio2+0x318>
 800e46a:	462e      	mov	r6, r5
 800e46c:	2e00      	cmp	r6, #0
 800e46e:	f2c0 8104 	blt.w	800e67a <__kernel_rem_pio2+0x4da>
 800e472:	ab72      	add	r3, sp, #456	; 0x1c8
 800e474:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e478:	f8df a064 	ldr.w	sl, [pc, #100]	; 800e4e0 <__kernel_rem_pio2+0x340>
 800e47c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e480:	f04f 0800 	mov.w	r8, #0
 800e484:	1baf      	subs	r7, r5, r6
 800e486:	e0ea      	b.n	800e65e <__kernel_rem_pio2+0x4be>
 800e488:	f04f 0b02 	mov.w	fp, #2
 800e48c:	e759      	b.n	800e342 <__kernel_rem_pio2+0x1a2>
 800e48e:	f8d8 3000 	ldr.w	r3, [r8]
 800e492:	b955      	cbnz	r5, 800e4aa <__kernel_rem_pio2+0x30a>
 800e494:	b123      	cbz	r3, 800e4a0 <__kernel_rem_pio2+0x300>
 800e496:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e49a:	f8c8 3000 	str.w	r3, [r8]
 800e49e:	2301      	movs	r3, #1
 800e4a0:	3201      	adds	r2, #1
 800e4a2:	f108 0804 	add.w	r8, r8, #4
 800e4a6:	461d      	mov	r5, r3
 800e4a8:	e752      	b.n	800e350 <__kernel_rem_pio2+0x1b0>
 800e4aa:	1acb      	subs	r3, r1, r3
 800e4ac:	f8c8 3000 	str.w	r3, [r8]
 800e4b0:	462b      	mov	r3, r5
 800e4b2:	e7f5      	b.n	800e4a0 <__kernel_rem_pio2+0x300>
 800e4b4:	f3af 8000 	nop.w
	...
 800e4c4:	3ff00000 	.word	0x3ff00000
 800e4c8:	0800f2d0 	.word	0x0800f2d0
 800e4cc:	40200000 	.word	0x40200000
 800e4d0:	3ff00000 	.word	0x3ff00000
 800e4d4:	3e700000 	.word	0x3e700000
 800e4d8:	41700000 	.word	0x41700000
 800e4dc:	3fe00000 	.word	0x3fe00000
 800e4e0:	0800f290 	.word	0x0800f290
 800e4e4:	1e62      	subs	r2, r4, #1
 800e4e6:	ab0e      	add	r3, sp, #56	; 0x38
 800e4e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e4f0:	a90e      	add	r1, sp, #56	; 0x38
 800e4f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e4f6:	e739      	b.n	800e36c <__kernel_rem_pio2+0x1cc>
 800e4f8:	1e62      	subs	r2, r4, #1
 800e4fa:	ab0e      	add	r3, sp, #56	; 0x38
 800e4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e500:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e504:	e7f4      	b.n	800e4f0 <__kernel_rem_pio2+0x350>
 800e506:	a90e      	add	r1, sp, #56	; 0x38
 800e508:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e50c:	3b01      	subs	r3, #1
 800e50e:	430a      	orrs	r2, r1
 800e510:	e789      	b.n	800e426 <__kernel_rem_pio2+0x286>
 800e512:	3301      	adds	r3, #1
 800e514:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e518:	2900      	cmp	r1, #0
 800e51a:	d0fa      	beq.n	800e512 <__kernel_rem_pio2+0x372>
 800e51c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e51e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800e522:	446a      	add	r2, sp
 800e524:	3a98      	subs	r2, #152	; 0x98
 800e526:	920a      	str	r2, [sp, #40]	; 0x28
 800e528:	9a08      	ldr	r2, [sp, #32]
 800e52a:	18e3      	adds	r3, r4, r3
 800e52c:	18a5      	adds	r5, r4, r2
 800e52e:	aa22      	add	r2, sp, #136	; 0x88
 800e530:	f104 0801 	add.w	r8, r4, #1
 800e534:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e538:	9304      	str	r3, [sp, #16]
 800e53a:	9b04      	ldr	r3, [sp, #16]
 800e53c:	4543      	cmp	r3, r8
 800e53e:	da04      	bge.n	800e54a <__kernel_rem_pio2+0x3aa>
 800e540:	461c      	mov	r4, r3
 800e542:	e6a3      	b.n	800e28c <__kernel_rem_pio2+0xec>
 800e544:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e546:	2301      	movs	r3, #1
 800e548:	e7e4      	b.n	800e514 <__kernel_rem_pio2+0x374>
 800e54a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e54c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e550:	f7f1 fff0 	bl	8000534 <__aeabi_i2d>
 800e554:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e55a:	46ab      	mov	fp, r5
 800e55c:	461c      	mov	r4, r3
 800e55e:	f04f 0900 	mov.w	r9, #0
 800e562:	2600      	movs	r6, #0
 800e564:	2700      	movs	r7, #0
 800e566:	9b06      	ldr	r3, [sp, #24]
 800e568:	4599      	cmp	r9, r3
 800e56a:	dd06      	ble.n	800e57a <__kernel_rem_pio2+0x3da>
 800e56c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e56e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e572:	f108 0801 	add.w	r8, r8, #1
 800e576:	930a      	str	r3, [sp, #40]	; 0x28
 800e578:	e7df      	b.n	800e53a <__kernel_rem_pio2+0x39a>
 800e57a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e57e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e582:	f7f2 f841 	bl	8000608 <__aeabi_dmul>
 800e586:	4602      	mov	r2, r0
 800e588:	460b      	mov	r3, r1
 800e58a:	4630      	mov	r0, r6
 800e58c:	4639      	mov	r1, r7
 800e58e:	f7f1 fe85 	bl	800029c <__adddf3>
 800e592:	f109 0901 	add.w	r9, r9, #1
 800e596:	4606      	mov	r6, r0
 800e598:	460f      	mov	r7, r1
 800e59a:	e7e4      	b.n	800e566 <__kernel_rem_pio2+0x3c6>
 800e59c:	3d01      	subs	r5, #1
 800e59e:	e748      	b.n	800e432 <__kernel_rem_pio2+0x292>
 800e5a0:	ec47 6b10 	vmov	d0, r6, r7
 800e5a4:	f1ca 0000 	rsb	r0, sl, #0
 800e5a8:	f000 fa8a 	bl	800eac0 <scalbn>
 800e5ac:	ec57 6b10 	vmov	r6, r7, d0
 800e5b0:	4ba0      	ldr	r3, [pc, #640]	; (800e834 <__kernel_rem_pio2+0x694>)
 800e5b2:	ee10 0a10 	vmov	r0, s0
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	4639      	mov	r1, r7
 800e5ba:	f7f2 faab 	bl	8000b14 <__aeabi_dcmpge>
 800e5be:	b1f8      	cbz	r0, 800e600 <__kernel_rem_pio2+0x460>
 800e5c0:	4b9d      	ldr	r3, [pc, #628]	; (800e838 <__kernel_rem_pio2+0x698>)
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	4639      	mov	r1, r7
 800e5c8:	f7f2 f81e 	bl	8000608 <__aeabi_dmul>
 800e5cc:	f7f2 facc 	bl	8000b68 <__aeabi_d2iz>
 800e5d0:	4680      	mov	r8, r0
 800e5d2:	f7f1 ffaf 	bl	8000534 <__aeabi_i2d>
 800e5d6:	4b97      	ldr	r3, [pc, #604]	; (800e834 <__kernel_rem_pio2+0x694>)
 800e5d8:	2200      	movs	r2, #0
 800e5da:	f7f2 f815 	bl	8000608 <__aeabi_dmul>
 800e5de:	460b      	mov	r3, r1
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	4639      	mov	r1, r7
 800e5e4:	4630      	mov	r0, r6
 800e5e6:	f7f1 fe57 	bl	8000298 <__aeabi_dsub>
 800e5ea:	f7f2 fabd 	bl	8000b68 <__aeabi_d2iz>
 800e5ee:	1c65      	adds	r5, r4, #1
 800e5f0:	ab0e      	add	r3, sp, #56	; 0x38
 800e5f2:	f10a 0a18 	add.w	sl, sl, #24
 800e5f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e5fa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e5fe:	e720      	b.n	800e442 <__kernel_rem_pio2+0x2a2>
 800e600:	4630      	mov	r0, r6
 800e602:	4639      	mov	r1, r7
 800e604:	f7f2 fab0 	bl	8000b68 <__aeabi_d2iz>
 800e608:	ab0e      	add	r3, sp, #56	; 0x38
 800e60a:	4625      	mov	r5, r4
 800e60c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e610:	e717      	b.n	800e442 <__kernel_rem_pio2+0x2a2>
 800e612:	ab0e      	add	r3, sp, #56	; 0x38
 800e614:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e618:	f7f1 ff8c 	bl	8000534 <__aeabi_i2d>
 800e61c:	4632      	mov	r2, r6
 800e61e:	463b      	mov	r3, r7
 800e620:	f7f1 fff2 	bl	8000608 <__aeabi_dmul>
 800e624:	4b84      	ldr	r3, [pc, #528]	; (800e838 <__kernel_rem_pio2+0x698>)
 800e626:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e62a:	2200      	movs	r2, #0
 800e62c:	4630      	mov	r0, r6
 800e62e:	4639      	mov	r1, r7
 800e630:	f7f1 ffea 	bl	8000608 <__aeabi_dmul>
 800e634:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e638:	4606      	mov	r6, r0
 800e63a:	460f      	mov	r7, r1
 800e63c:	e70f      	b.n	800e45e <__kernel_rem_pio2+0x2be>
 800e63e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e642:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e646:	f7f1 ffdf 	bl	8000608 <__aeabi_dmul>
 800e64a:	4602      	mov	r2, r0
 800e64c:	460b      	mov	r3, r1
 800e64e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e652:	f7f1 fe23 	bl	800029c <__adddf3>
 800e656:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e65a:	f108 0801 	add.w	r8, r8, #1
 800e65e:	9b02      	ldr	r3, [sp, #8]
 800e660:	4598      	cmp	r8, r3
 800e662:	dc01      	bgt.n	800e668 <__kernel_rem_pio2+0x4c8>
 800e664:	45b8      	cmp	r8, r7
 800e666:	ddea      	ble.n	800e63e <__kernel_rem_pio2+0x49e>
 800e668:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e66c:	ab4a      	add	r3, sp, #296	; 0x128
 800e66e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e672:	ed87 7b00 	vstr	d7, [r7]
 800e676:	3e01      	subs	r6, #1
 800e678:	e6f8      	b.n	800e46c <__kernel_rem_pio2+0x2cc>
 800e67a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	dc0b      	bgt.n	800e698 <__kernel_rem_pio2+0x4f8>
 800e680:	2b00      	cmp	r3, #0
 800e682:	dc35      	bgt.n	800e6f0 <__kernel_rem_pio2+0x550>
 800e684:	d059      	beq.n	800e73a <__kernel_rem_pio2+0x59a>
 800e686:	9b04      	ldr	r3, [sp, #16]
 800e688:	f003 0007 	and.w	r0, r3, #7
 800e68c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e690:	ecbd 8b02 	vpop	{d8}
 800e694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e698:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e69a:	2b03      	cmp	r3, #3
 800e69c:	d1f3      	bne.n	800e686 <__kernel_rem_pio2+0x4e6>
 800e69e:	ab4a      	add	r3, sp, #296	; 0x128
 800e6a0:	4423      	add	r3, r4
 800e6a2:	9306      	str	r3, [sp, #24]
 800e6a4:	461c      	mov	r4, r3
 800e6a6:	469a      	mov	sl, r3
 800e6a8:	9502      	str	r5, [sp, #8]
 800e6aa:	9b02      	ldr	r3, [sp, #8]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	f1aa 0a08 	sub.w	sl, sl, #8
 800e6b2:	dc6b      	bgt.n	800e78c <__kernel_rem_pio2+0x5ec>
 800e6b4:	46aa      	mov	sl, r5
 800e6b6:	f1ba 0f01 	cmp.w	sl, #1
 800e6ba:	f1a4 0408 	sub.w	r4, r4, #8
 800e6be:	f300 8085 	bgt.w	800e7cc <__kernel_rem_pio2+0x62c>
 800e6c2:	9c06      	ldr	r4, [sp, #24]
 800e6c4:	2000      	movs	r0, #0
 800e6c6:	3408      	adds	r4, #8
 800e6c8:	2100      	movs	r1, #0
 800e6ca:	2d01      	cmp	r5, #1
 800e6cc:	f300 809d 	bgt.w	800e80a <__kernel_rem_pio2+0x66a>
 800e6d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e6d4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800e6d8:	f1bb 0f00 	cmp.w	fp, #0
 800e6dc:	f040 809b 	bne.w	800e816 <__kernel_rem_pio2+0x676>
 800e6e0:	9b01      	ldr	r3, [sp, #4]
 800e6e2:	e9c3 5600 	strd	r5, r6, [r3]
 800e6e6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e6ea:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e6ee:	e7ca      	b.n	800e686 <__kernel_rem_pio2+0x4e6>
 800e6f0:	3408      	adds	r4, #8
 800e6f2:	ab4a      	add	r3, sp, #296	; 0x128
 800e6f4:	441c      	add	r4, r3
 800e6f6:	462e      	mov	r6, r5
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	2e00      	cmp	r6, #0
 800e6fe:	da36      	bge.n	800e76e <__kernel_rem_pio2+0x5ce>
 800e700:	f1bb 0f00 	cmp.w	fp, #0
 800e704:	d039      	beq.n	800e77a <__kernel_rem_pio2+0x5da>
 800e706:	4602      	mov	r2, r0
 800e708:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e70c:	9c01      	ldr	r4, [sp, #4]
 800e70e:	e9c4 2300 	strd	r2, r3, [r4]
 800e712:	4602      	mov	r2, r0
 800e714:	460b      	mov	r3, r1
 800e716:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e71a:	f7f1 fdbd 	bl	8000298 <__aeabi_dsub>
 800e71e:	ae4c      	add	r6, sp, #304	; 0x130
 800e720:	2401      	movs	r4, #1
 800e722:	42a5      	cmp	r5, r4
 800e724:	da2c      	bge.n	800e780 <__kernel_rem_pio2+0x5e0>
 800e726:	f1bb 0f00 	cmp.w	fp, #0
 800e72a:	d002      	beq.n	800e732 <__kernel_rem_pio2+0x592>
 800e72c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e730:	4619      	mov	r1, r3
 800e732:	9b01      	ldr	r3, [sp, #4]
 800e734:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e738:	e7a5      	b.n	800e686 <__kernel_rem_pio2+0x4e6>
 800e73a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800e73e:	eb0d 0403 	add.w	r4, sp, r3
 800e742:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e746:	2000      	movs	r0, #0
 800e748:	2100      	movs	r1, #0
 800e74a:	2d00      	cmp	r5, #0
 800e74c:	da09      	bge.n	800e762 <__kernel_rem_pio2+0x5c2>
 800e74e:	f1bb 0f00 	cmp.w	fp, #0
 800e752:	d002      	beq.n	800e75a <__kernel_rem_pio2+0x5ba>
 800e754:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e758:	4619      	mov	r1, r3
 800e75a:	9b01      	ldr	r3, [sp, #4]
 800e75c:	e9c3 0100 	strd	r0, r1, [r3]
 800e760:	e791      	b.n	800e686 <__kernel_rem_pio2+0x4e6>
 800e762:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e766:	f7f1 fd99 	bl	800029c <__adddf3>
 800e76a:	3d01      	subs	r5, #1
 800e76c:	e7ed      	b.n	800e74a <__kernel_rem_pio2+0x5aa>
 800e76e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e772:	f7f1 fd93 	bl	800029c <__adddf3>
 800e776:	3e01      	subs	r6, #1
 800e778:	e7c0      	b.n	800e6fc <__kernel_rem_pio2+0x55c>
 800e77a:	4602      	mov	r2, r0
 800e77c:	460b      	mov	r3, r1
 800e77e:	e7c5      	b.n	800e70c <__kernel_rem_pio2+0x56c>
 800e780:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e784:	f7f1 fd8a 	bl	800029c <__adddf3>
 800e788:	3401      	adds	r4, #1
 800e78a:	e7ca      	b.n	800e722 <__kernel_rem_pio2+0x582>
 800e78c:	e9da 8900 	ldrd	r8, r9, [sl]
 800e790:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e794:	9b02      	ldr	r3, [sp, #8]
 800e796:	3b01      	subs	r3, #1
 800e798:	9302      	str	r3, [sp, #8]
 800e79a:	4632      	mov	r2, r6
 800e79c:	463b      	mov	r3, r7
 800e79e:	4640      	mov	r0, r8
 800e7a0:	4649      	mov	r1, r9
 800e7a2:	f7f1 fd7b 	bl	800029c <__adddf3>
 800e7a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	4640      	mov	r0, r8
 800e7b0:	4649      	mov	r1, r9
 800e7b2:	f7f1 fd71 	bl	8000298 <__aeabi_dsub>
 800e7b6:	4632      	mov	r2, r6
 800e7b8:	463b      	mov	r3, r7
 800e7ba:	f7f1 fd6f 	bl	800029c <__adddf3>
 800e7be:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e7c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e7c6:	ed8a 7b00 	vstr	d7, [sl]
 800e7ca:	e76e      	b.n	800e6aa <__kernel_rem_pio2+0x50a>
 800e7cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e7d0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e7d4:	4640      	mov	r0, r8
 800e7d6:	4632      	mov	r2, r6
 800e7d8:	463b      	mov	r3, r7
 800e7da:	4649      	mov	r1, r9
 800e7dc:	f7f1 fd5e 	bl	800029c <__adddf3>
 800e7e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	4640      	mov	r0, r8
 800e7ea:	4649      	mov	r1, r9
 800e7ec:	f7f1 fd54 	bl	8000298 <__aeabi_dsub>
 800e7f0:	4632      	mov	r2, r6
 800e7f2:	463b      	mov	r3, r7
 800e7f4:	f7f1 fd52 	bl	800029c <__adddf3>
 800e7f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e800:	ed84 7b00 	vstr	d7, [r4]
 800e804:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e808:	e755      	b.n	800e6b6 <__kernel_rem_pio2+0x516>
 800e80a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e80e:	f7f1 fd45 	bl	800029c <__adddf3>
 800e812:	3d01      	subs	r5, #1
 800e814:	e759      	b.n	800e6ca <__kernel_rem_pio2+0x52a>
 800e816:	9b01      	ldr	r3, [sp, #4]
 800e818:	9a01      	ldr	r2, [sp, #4]
 800e81a:	601d      	str	r5, [r3, #0]
 800e81c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e820:	605c      	str	r4, [r3, #4]
 800e822:	609f      	str	r7, [r3, #8]
 800e824:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e828:	60d3      	str	r3, [r2, #12]
 800e82a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e82e:	6110      	str	r0, [r2, #16]
 800e830:	6153      	str	r3, [r2, #20]
 800e832:	e728      	b.n	800e686 <__kernel_rem_pio2+0x4e6>
 800e834:	41700000 	.word	0x41700000
 800e838:	3e700000 	.word	0x3e700000
 800e83c:	00000000 	.word	0x00000000

0800e840 <__kernel_sin>:
 800e840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e844:	ed2d 8b04 	vpush	{d8-d9}
 800e848:	eeb0 8a41 	vmov.f32	s16, s2
 800e84c:	eef0 8a61 	vmov.f32	s17, s3
 800e850:	ec55 4b10 	vmov	r4, r5, d0
 800e854:	b083      	sub	sp, #12
 800e856:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e85a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e85e:	9001      	str	r0, [sp, #4]
 800e860:	da06      	bge.n	800e870 <__kernel_sin+0x30>
 800e862:	ee10 0a10 	vmov	r0, s0
 800e866:	4629      	mov	r1, r5
 800e868:	f7f2 f97e 	bl	8000b68 <__aeabi_d2iz>
 800e86c:	2800      	cmp	r0, #0
 800e86e:	d051      	beq.n	800e914 <__kernel_sin+0xd4>
 800e870:	4622      	mov	r2, r4
 800e872:	462b      	mov	r3, r5
 800e874:	4620      	mov	r0, r4
 800e876:	4629      	mov	r1, r5
 800e878:	f7f1 fec6 	bl	8000608 <__aeabi_dmul>
 800e87c:	4682      	mov	sl, r0
 800e87e:	468b      	mov	fp, r1
 800e880:	4602      	mov	r2, r0
 800e882:	460b      	mov	r3, r1
 800e884:	4620      	mov	r0, r4
 800e886:	4629      	mov	r1, r5
 800e888:	f7f1 febe 	bl	8000608 <__aeabi_dmul>
 800e88c:	a341      	add	r3, pc, #260	; (adr r3, 800e994 <__kernel_sin+0x154>)
 800e88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e892:	4680      	mov	r8, r0
 800e894:	4689      	mov	r9, r1
 800e896:	4650      	mov	r0, sl
 800e898:	4659      	mov	r1, fp
 800e89a:	f7f1 feb5 	bl	8000608 <__aeabi_dmul>
 800e89e:	a33f      	add	r3, pc, #252	; (adr r3, 800e99c <__kernel_sin+0x15c>)
 800e8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a4:	f7f1 fcf8 	bl	8000298 <__aeabi_dsub>
 800e8a8:	4652      	mov	r2, sl
 800e8aa:	465b      	mov	r3, fp
 800e8ac:	f7f1 feac 	bl	8000608 <__aeabi_dmul>
 800e8b0:	a33c      	add	r3, pc, #240	; (adr r3, 800e9a4 <__kernel_sin+0x164>)
 800e8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b6:	f7f1 fcf1 	bl	800029c <__adddf3>
 800e8ba:	4652      	mov	r2, sl
 800e8bc:	465b      	mov	r3, fp
 800e8be:	f7f1 fea3 	bl	8000608 <__aeabi_dmul>
 800e8c2:	a33a      	add	r3, pc, #232	; (adr r3, 800e9ac <__kernel_sin+0x16c>)
 800e8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c8:	f7f1 fce6 	bl	8000298 <__aeabi_dsub>
 800e8cc:	4652      	mov	r2, sl
 800e8ce:	465b      	mov	r3, fp
 800e8d0:	f7f1 fe9a 	bl	8000608 <__aeabi_dmul>
 800e8d4:	a337      	add	r3, pc, #220	; (adr r3, 800e9b4 <__kernel_sin+0x174>)
 800e8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8da:	f7f1 fcdf 	bl	800029c <__adddf3>
 800e8de:	9b01      	ldr	r3, [sp, #4]
 800e8e0:	4606      	mov	r6, r0
 800e8e2:	460f      	mov	r7, r1
 800e8e4:	b9eb      	cbnz	r3, 800e922 <__kernel_sin+0xe2>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	4650      	mov	r0, sl
 800e8ec:	4659      	mov	r1, fp
 800e8ee:	f7f1 fe8b 	bl	8000608 <__aeabi_dmul>
 800e8f2:	a325      	add	r3, pc, #148	; (adr r3, 800e988 <__kernel_sin+0x148>)
 800e8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f8:	f7f1 fcce 	bl	8000298 <__aeabi_dsub>
 800e8fc:	4642      	mov	r2, r8
 800e8fe:	464b      	mov	r3, r9
 800e900:	f7f1 fe82 	bl	8000608 <__aeabi_dmul>
 800e904:	4602      	mov	r2, r0
 800e906:	460b      	mov	r3, r1
 800e908:	4620      	mov	r0, r4
 800e90a:	4629      	mov	r1, r5
 800e90c:	f7f1 fcc6 	bl	800029c <__adddf3>
 800e910:	4604      	mov	r4, r0
 800e912:	460d      	mov	r5, r1
 800e914:	ec45 4b10 	vmov	d0, r4, r5
 800e918:	b003      	add	sp, #12
 800e91a:	ecbd 8b04 	vpop	{d8-d9}
 800e91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e922:	4b1b      	ldr	r3, [pc, #108]	; (800e990 <__kernel_sin+0x150>)
 800e924:	ec51 0b18 	vmov	r0, r1, d8
 800e928:	2200      	movs	r2, #0
 800e92a:	f7f1 fe6d 	bl	8000608 <__aeabi_dmul>
 800e92e:	4632      	mov	r2, r6
 800e930:	ec41 0b19 	vmov	d9, r0, r1
 800e934:	463b      	mov	r3, r7
 800e936:	4640      	mov	r0, r8
 800e938:	4649      	mov	r1, r9
 800e93a:	f7f1 fe65 	bl	8000608 <__aeabi_dmul>
 800e93e:	4602      	mov	r2, r0
 800e940:	460b      	mov	r3, r1
 800e942:	ec51 0b19 	vmov	r0, r1, d9
 800e946:	f7f1 fca7 	bl	8000298 <__aeabi_dsub>
 800e94a:	4652      	mov	r2, sl
 800e94c:	465b      	mov	r3, fp
 800e94e:	f7f1 fe5b 	bl	8000608 <__aeabi_dmul>
 800e952:	ec53 2b18 	vmov	r2, r3, d8
 800e956:	f7f1 fc9f 	bl	8000298 <__aeabi_dsub>
 800e95a:	a30b      	add	r3, pc, #44	; (adr r3, 800e988 <__kernel_sin+0x148>)
 800e95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e960:	4606      	mov	r6, r0
 800e962:	460f      	mov	r7, r1
 800e964:	4640      	mov	r0, r8
 800e966:	4649      	mov	r1, r9
 800e968:	f7f1 fe4e 	bl	8000608 <__aeabi_dmul>
 800e96c:	4602      	mov	r2, r0
 800e96e:	460b      	mov	r3, r1
 800e970:	4630      	mov	r0, r6
 800e972:	4639      	mov	r1, r7
 800e974:	f7f1 fc92 	bl	800029c <__adddf3>
 800e978:	4602      	mov	r2, r0
 800e97a:	460b      	mov	r3, r1
 800e97c:	4620      	mov	r0, r4
 800e97e:	4629      	mov	r1, r5
 800e980:	f7f1 fc8a 	bl	8000298 <__aeabi_dsub>
 800e984:	e7c4      	b.n	800e910 <__kernel_sin+0xd0>
 800e986:	bf00      	nop
 800e988:	55555549 	.word	0x55555549
 800e98c:	3fc55555 	.word	0x3fc55555
 800e990:	3fe00000 	.word	0x3fe00000
 800e994:	5acfd57c 	.word	0x5acfd57c
 800e998:	3de5d93a 	.word	0x3de5d93a
 800e99c:	8a2b9ceb 	.word	0x8a2b9ceb
 800e9a0:	3e5ae5e6 	.word	0x3e5ae5e6
 800e9a4:	57b1fe7d 	.word	0x57b1fe7d
 800e9a8:	3ec71de3 	.word	0x3ec71de3
 800e9ac:	19c161d5 	.word	0x19c161d5
 800e9b0:	3f2a01a0 	.word	0x3f2a01a0
 800e9b4:	1110f8a6 	.word	0x1110f8a6
 800e9b8:	3f811111 	.word	0x3f811111
 800e9bc:	00000000 	.word	0x00000000

0800e9c0 <floor>:
 800e9c0:	ec51 0b10 	vmov	r0, r1, d0
 800e9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e9cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e9d0:	2e13      	cmp	r6, #19
 800e9d2:	ee10 5a10 	vmov	r5, s0
 800e9d6:	ee10 8a10 	vmov	r8, s0
 800e9da:	460c      	mov	r4, r1
 800e9dc:	dc32      	bgt.n	800ea44 <floor+0x84>
 800e9de:	2e00      	cmp	r6, #0
 800e9e0:	da14      	bge.n	800ea0c <floor+0x4c>
 800e9e2:	a333      	add	r3, pc, #204	; (adr r3, 800eab0 <floor+0xf0>)
 800e9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e8:	f7f1 fc58 	bl	800029c <__adddf3>
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	f7f2 f89a 	bl	8000b28 <__aeabi_dcmpgt>
 800e9f4:	b138      	cbz	r0, 800ea06 <floor+0x46>
 800e9f6:	2c00      	cmp	r4, #0
 800e9f8:	da57      	bge.n	800eaaa <floor+0xea>
 800e9fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e9fe:	431d      	orrs	r5, r3
 800ea00:	d001      	beq.n	800ea06 <floor+0x46>
 800ea02:	4c2d      	ldr	r4, [pc, #180]	; (800eab8 <floor+0xf8>)
 800ea04:	2500      	movs	r5, #0
 800ea06:	4621      	mov	r1, r4
 800ea08:	4628      	mov	r0, r5
 800ea0a:	e025      	b.n	800ea58 <floor+0x98>
 800ea0c:	4f2b      	ldr	r7, [pc, #172]	; (800eabc <floor+0xfc>)
 800ea0e:	4137      	asrs	r7, r6
 800ea10:	ea01 0307 	and.w	r3, r1, r7
 800ea14:	4303      	orrs	r3, r0
 800ea16:	d01f      	beq.n	800ea58 <floor+0x98>
 800ea18:	a325      	add	r3, pc, #148	; (adr r3, 800eab0 <floor+0xf0>)
 800ea1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1e:	f7f1 fc3d 	bl	800029c <__adddf3>
 800ea22:	2200      	movs	r2, #0
 800ea24:	2300      	movs	r3, #0
 800ea26:	f7f2 f87f 	bl	8000b28 <__aeabi_dcmpgt>
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	d0eb      	beq.n	800ea06 <floor+0x46>
 800ea2e:	2c00      	cmp	r4, #0
 800ea30:	bfbe      	ittt	lt
 800ea32:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ea36:	fa43 f606 	asrlt.w	r6, r3, r6
 800ea3a:	19a4      	addlt	r4, r4, r6
 800ea3c:	ea24 0407 	bic.w	r4, r4, r7
 800ea40:	2500      	movs	r5, #0
 800ea42:	e7e0      	b.n	800ea06 <floor+0x46>
 800ea44:	2e33      	cmp	r6, #51	; 0x33
 800ea46:	dd0b      	ble.n	800ea60 <floor+0xa0>
 800ea48:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ea4c:	d104      	bne.n	800ea58 <floor+0x98>
 800ea4e:	ee10 2a10 	vmov	r2, s0
 800ea52:	460b      	mov	r3, r1
 800ea54:	f7f1 fc22 	bl	800029c <__adddf3>
 800ea58:	ec41 0b10 	vmov	d0, r0, r1
 800ea5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea60:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ea64:	f04f 33ff 	mov.w	r3, #4294967295
 800ea68:	fa23 f707 	lsr.w	r7, r3, r7
 800ea6c:	4207      	tst	r7, r0
 800ea6e:	d0f3      	beq.n	800ea58 <floor+0x98>
 800ea70:	a30f      	add	r3, pc, #60	; (adr r3, 800eab0 <floor+0xf0>)
 800ea72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea76:	f7f1 fc11 	bl	800029c <__adddf3>
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	f7f2 f853 	bl	8000b28 <__aeabi_dcmpgt>
 800ea82:	2800      	cmp	r0, #0
 800ea84:	d0bf      	beq.n	800ea06 <floor+0x46>
 800ea86:	2c00      	cmp	r4, #0
 800ea88:	da02      	bge.n	800ea90 <floor+0xd0>
 800ea8a:	2e14      	cmp	r6, #20
 800ea8c:	d103      	bne.n	800ea96 <floor+0xd6>
 800ea8e:	3401      	adds	r4, #1
 800ea90:	ea25 0507 	bic.w	r5, r5, r7
 800ea94:	e7b7      	b.n	800ea06 <floor+0x46>
 800ea96:	2301      	movs	r3, #1
 800ea98:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ea9c:	fa03 f606 	lsl.w	r6, r3, r6
 800eaa0:	4435      	add	r5, r6
 800eaa2:	4545      	cmp	r5, r8
 800eaa4:	bf38      	it	cc
 800eaa6:	18e4      	addcc	r4, r4, r3
 800eaa8:	e7f2      	b.n	800ea90 <floor+0xd0>
 800eaaa:	2500      	movs	r5, #0
 800eaac:	462c      	mov	r4, r5
 800eaae:	e7aa      	b.n	800ea06 <floor+0x46>
 800eab0:	8800759c 	.word	0x8800759c
 800eab4:	7e37e43c 	.word	0x7e37e43c
 800eab8:	bff00000 	.word	0xbff00000
 800eabc:	000fffff 	.word	0x000fffff

0800eac0 <scalbn>:
 800eac0:	b570      	push	{r4, r5, r6, lr}
 800eac2:	ec55 4b10 	vmov	r4, r5, d0
 800eac6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800eaca:	4606      	mov	r6, r0
 800eacc:	462b      	mov	r3, r5
 800eace:	b99a      	cbnz	r2, 800eaf8 <scalbn+0x38>
 800ead0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ead4:	4323      	orrs	r3, r4
 800ead6:	d036      	beq.n	800eb46 <scalbn+0x86>
 800ead8:	4b39      	ldr	r3, [pc, #228]	; (800ebc0 <scalbn+0x100>)
 800eada:	4629      	mov	r1, r5
 800eadc:	ee10 0a10 	vmov	r0, s0
 800eae0:	2200      	movs	r2, #0
 800eae2:	f7f1 fd91 	bl	8000608 <__aeabi_dmul>
 800eae6:	4b37      	ldr	r3, [pc, #220]	; (800ebc4 <scalbn+0x104>)
 800eae8:	429e      	cmp	r6, r3
 800eaea:	4604      	mov	r4, r0
 800eaec:	460d      	mov	r5, r1
 800eaee:	da10      	bge.n	800eb12 <scalbn+0x52>
 800eaf0:	a32b      	add	r3, pc, #172	; (adr r3, 800eba0 <scalbn+0xe0>)
 800eaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf6:	e03a      	b.n	800eb6e <scalbn+0xae>
 800eaf8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800eafc:	428a      	cmp	r2, r1
 800eafe:	d10c      	bne.n	800eb1a <scalbn+0x5a>
 800eb00:	ee10 2a10 	vmov	r2, s0
 800eb04:	4620      	mov	r0, r4
 800eb06:	4629      	mov	r1, r5
 800eb08:	f7f1 fbc8 	bl	800029c <__adddf3>
 800eb0c:	4604      	mov	r4, r0
 800eb0e:	460d      	mov	r5, r1
 800eb10:	e019      	b.n	800eb46 <scalbn+0x86>
 800eb12:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800eb16:	460b      	mov	r3, r1
 800eb18:	3a36      	subs	r2, #54	; 0x36
 800eb1a:	4432      	add	r2, r6
 800eb1c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800eb20:	428a      	cmp	r2, r1
 800eb22:	dd08      	ble.n	800eb36 <scalbn+0x76>
 800eb24:	2d00      	cmp	r5, #0
 800eb26:	a120      	add	r1, pc, #128	; (adr r1, 800eba8 <scalbn+0xe8>)
 800eb28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb2c:	da1c      	bge.n	800eb68 <scalbn+0xa8>
 800eb2e:	a120      	add	r1, pc, #128	; (adr r1, 800ebb0 <scalbn+0xf0>)
 800eb30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb34:	e018      	b.n	800eb68 <scalbn+0xa8>
 800eb36:	2a00      	cmp	r2, #0
 800eb38:	dd08      	ble.n	800eb4c <scalbn+0x8c>
 800eb3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eb3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eb42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800eb46:	ec45 4b10 	vmov	d0, r4, r5
 800eb4a:	bd70      	pop	{r4, r5, r6, pc}
 800eb4c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800eb50:	da19      	bge.n	800eb86 <scalbn+0xc6>
 800eb52:	f24c 3350 	movw	r3, #50000	; 0xc350
 800eb56:	429e      	cmp	r6, r3
 800eb58:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800eb5c:	dd0a      	ble.n	800eb74 <scalbn+0xb4>
 800eb5e:	a112      	add	r1, pc, #72	; (adr r1, 800eba8 <scalbn+0xe8>)
 800eb60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d1e2      	bne.n	800eb2e <scalbn+0x6e>
 800eb68:	a30f      	add	r3, pc, #60	; (adr r3, 800eba8 <scalbn+0xe8>)
 800eb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6e:	f7f1 fd4b 	bl	8000608 <__aeabi_dmul>
 800eb72:	e7cb      	b.n	800eb0c <scalbn+0x4c>
 800eb74:	a10a      	add	r1, pc, #40	; (adr r1, 800eba0 <scalbn+0xe0>)
 800eb76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d0b8      	beq.n	800eaf0 <scalbn+0x30>
 800eb7e:	a10e      	add	r1, pc, #56	; (adr r1, 800ebb8 <scalbn+0xf8>)
 800eb80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb84:	e7b4      	b.n	800eaf0 <scalbn+0x30>
 800eb86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eb8a:	3236      	adds	r2, #54	; 0x36
 800eb8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eb90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800eb94:	4620      	mov	r0, r4
 800eb96:	4b0c      	ldr	r3, [pc, #48]	; (800ebc8 <scalbn+0x108>)
 800eb98:	2200      	movs	r2, #0
 800eb9a:	e7e8      	b.n	800eb6e <scalbn+0xae>
 800eb9c:	f3af 8000 	nop.w
 800eba0:	c2f8f359 	.word	0xc2f8f359
 800eba4:	01a56e1f 	.word	0x01a56e1f
 800eba8:	8800759c 	.word	0x8800759c
 800ebac:	7e37e43c 	.word	0x7e37e43c
 800ebb0:	8800759c 	.word	0x8800759c
 800ebb4:	fe37e43c 	.word	0xfe37e43c
 800ebb8:	c2f8f359 	.word	0xc2f8f359
 800ebbc:	81a56e1f 	.word	0x81a56e1f
 800ebc0:	43500000 	.word	0x43500000
 800ebc4:	ffff3cb0 	.word	0xffff3cb0
 800ebc8:	3c900000 	.word	0x3c900000

0800ebcc <_init>:
 800ebcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebce:	bf00      	nop
 800ebd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebd2:	bc08      	pop	{r3}
 800ebd4:	469e      	mov	lr, r3
 800ebd6:	4770      	bx	lr

0800ebd8 <_fini>:
 800ebd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebda:	bf00      	nop
 800ebdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebde:	bc08      	pop	{r3}
 800ebe0:	469e      	mov	lr, r3
 800ebe2:	4770      	bx	lr
