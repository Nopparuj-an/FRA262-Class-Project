
FRA262-G6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  08010d40  08010d40  00020d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011448  08011448  00030408  2**0
                  CONTENTS
  4 .ARM          00000008  08011448  08011448  00021448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011450  08011450  00030408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011450  08011450  00021450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011454  08011454  00021454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000408  20000000  08011458  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a48  20000408  08011860  00030408  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e50  08011860  00031e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030408  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a5a  00000000  00000000  00030438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003582  00000000  00000000  00048e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  0004c418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  0004d7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a874  00000000  00000000  0004ea38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2fa  00000000  00000000  000692ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a092e  00000000  00000000  000835a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123ed4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b58  00000000  00000000  00123f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000408 	.word	0x20000408
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010d24 	.word	0x08010d24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000040c 	.word	0x2000040c
 80001dc:	08010d24 	.word	0x08010d24

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <ENDEFF_TEST_MODE>:
		timestamp = HAL_GetTick();
		complete = 1;
		return;
	}
}
void ENDEFF_TEST_MODE(I2C_HandleTypeDef *hi2c) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x11 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001010:	f003 fe5e 	bl	8004cd0 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <ENDEFF_TEST_MODE+0x44>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b09      	cmp	r3, #9
 800101e:	d911      	bls.n	8001044 <ENDEFF_TEST_MODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2302      	movs	r3, #2
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <ENDEFF_TEST_MODE+0x48>)
 800102a:	212a      	movs	r1, #42	; 0x2a
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f005 f90b 	bl	8006248 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001032:	f003 fe4d 	bl	8004cd0 <HAL_GetTick>
 8001036:	4603      	mov	r3, r0
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <ENDEFF_TEST_MODE+0x44>)
 800103a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <ENDEFF_TEST_MODE+0x4c>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]
		return;
 8001042:	bf00      	nop
	}
}
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000424 	.word	0x20000424
 8001050:	20000000 	.word	0x20000000
 8001054:	20000428 	.word	0x20000428

08001058 <ENDEFF_TEST_MODE_QUIT>:
void ENDEFF_TEST_MODE_QUIT(I2C_HandleTypeDef *hi2c) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
 800105e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x00 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001060:	f003 fe36 	bl	8004cd0 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <ENDEFF_TEST_MODE_QUIT+0x44>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b09      	cmp	r3, #9
 800106e:	d911      	bls.n	8001094 <ENDEFF_TEST_MODE_QUIT+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2302      	movs	r3, #2
 8001078:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <ENDEFF_TEST_MODE_QUIT+0x48>)
 800107a:	212a      	movs	r1, #42	; 0x2a
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f005 f8e3 	bl	8006248 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001082:	f003 fe25 	bl	8004cd0 <HAL_GetTick>
 8001086:	4603      	mov	r3, r0
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <ENDEFF_TEST_MODE_QUIT+0x44>)
 800108a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <ENDEFF_TEST_MODE_QUIT+0x4c>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
		return;
 8001092:	bf00      	nop
	}
}
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000424 	.word	0x20000424
 80010a0:	20000004 	.word	0x20000004
 80010a4:	20000428 	.word	0x20000428

080010a8 <ENDEFF_GRIPPER_RUNMODE>:
void ENDEFF_GRIPPER_RUNMODE(I2C_HandleTypeDef *hi2c) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x13 };
	if (HAL_GetTick() - timestamp >= 10) {
 80010b0:	f003 fe0e 	bl	8004cd0 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <ENDEFF_GRIPPER_RUNMODE+0x44>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b09      	cmp	r3, #9
 80010be:	d911      	bls.n	80010e4 <ENDEFF_GRIPPER_RUNMODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2302      	movs	r3, #2
 80010c8:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <ENDEFF_GRIPPER_RUNMODE+0x48>)
 80010ca:	212a      	movs	r1, #42	; 0x2a
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f005 f8bb 	bl	8006248 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80010d2:	f003 fdfd 	bl	8004cd0 <HAL_GetTick>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <ENDEFF_GRIPPER_RUNMODE+0x44>)
 80010da:	6013      	str	r3, [r2, #0]
		complete = 1;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <ENDEFF_GRIPPER_RUNMODE+0x4c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
		return;
 80010e2:	bf00      	nop
	}
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000424 	.word	0x20000424
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000428 	.word	0x20000428

080010f8 <ENDEFF_GRIPPER_IDLE>:
void ENDEFF_GRIPPER_IDLE(I2C_HandleTypeDef *hi2c) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x8C };
	if (HAL_GetTick() - timestamp >= 10) {
 8001100:	f003 fde6 	bl	8004cd0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <ENDEFF_GRIPPER_IDLE+0x44>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b09      	cmp	r3, #9
 800110e:	d911      	bls.n	8001134 <ENDEFF_GRIPPER_IDLE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2302      	movs	r3, #2
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <ENDEFF_GRIPPER_IDLE+0x48>)
 800111a:	212a      	movs	r1, #42	; 0x2a
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f005 f893 	bl	8006248 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001122:	f003 fdd5 	bl	8004cd0 <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <ENDEFF_GRIPPER_IDLE+0x44>)
 800112a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <ENDEFF_GRIPPER_IDLE+0x4c>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]
		return;
 8001132:	bf00      	nop
	}
}
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000424 	.word	0x20000424
 8001140:	2000000c 	.word	0x2000000c
 8001144:	20000428 	.word	0x20000428

08001148 <ENDEFF_GRIPPER_PICK>:
void ENDEFF_GRIPPER_PICK(I2C_HandleTypeDef *hi2c) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x5A };
	if (HAL_GetTick() - timestamp >= 2000) {
 8001150:	f003 fdbe 	bl	8004cd0 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <ENDEFF_GRIPPER_PICK+0x44>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001160:	d311      	bcc.n	8001186 <ENDEFF_GRIPPER_PICK+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2302      	movs	r3, #2
 800116a:	4a09      	ldr	r2, [pc, #36]	; (8001190 <ENDEFF_GRIPPER_PICK+0x48>)
 800116c:	212a      	movs	r1, #42	; 0x2a
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f005 f86a 	bl	8006248 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001174:	f003 fdac 	bl	8004cd0 <HAL_GetTick>
 8001178:	4603      	mov	r3, r0
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <ENDEFF_GRIPPER_PICK+0x44>)
 800117c:	6013      	str	r3, [r2, #0]
		complete = 1;
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <ENDEFF_GRIPPER_PICK+0x4c>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
		return;
 8001184:	bf00      	nop
	}
}
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000424 	.word	0x20000424
 8001190:	20000010 	.word	0x20000010
 8001194:	20000428 	.word	0x20000428

08001198 <ENDEFF_GRIPPER_PLACE>:
void ENDEFF_GRIPPER_PLACE(I2C_HandleTypeDef *hi2c) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x69 };
	if (HAL_GetTick() - timestamp >= 2000) {
 80011a0:	f003 fd96 	bl	8004cd0 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <ENDEFF_GRIPPER_PLACE+0x44>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011b0:	d311      	bcc.n	80011d6 <ENDEFF_GRIPPER_PLACE+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2302      	movs	r3, #2
 80011ba:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <ENDEFF_GRIPPER_PLACE+0x48>)
 80011bc:	212a      	movs	r1, #42	; 0x2a
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f005 f842 	bl	8006248 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80011c4:	f003 fd84 	bl	8004cd0 <HAL_GetTick>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <ENDEFF_GRIPPER_PLACE+0x44>)
 80011cc:	6013      	str	r3, [r2, #0]
		complete = 1;
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <ENDEFF_GRIPPER_PLACE+0x4c>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]
		return;
 80011d4:	bf00      	nop
	}
}
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000424 	.word	0x20000424
 80011e0:	20000014 	.word	0x20000014
 80011e4:	20000428 	.word	0x20000428

080011e8 <I2C_TO_BASESYSTEM>:


void I2C_TO_BASESYSTEM(int16_t *DataFrame, I2C_HandleTypeDef *hi2c) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
	static int picked;
	static enum {
		INIT, TEST, RUNMODE, PICKED
	} END_EFFECTOR_STATE = INIT;
	switch (END_EFFECTOR_STATE) {
 80011f2:	4b96      	ldr	r3, [pc, #600]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	f200 8123 	bhi.w	8001442 <I2C_TO_BASESYSTEM+0x25a>
 80011fc:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <I2C_TO_BASESYSTEM+0x1c>)
 80011fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001202:	bf00      	nop
 8001204:	08001215 	.word	0x08001215
 8001208:	08001273 	.word	0x08001273
 800120c:	080012d7 	.word	0x080012d7
 8001210:	080013a5 	.word	0x080013a5
	case (INIT):
		if ((*DataFrame & 0b0001) == 1) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121a:	b29b      	uxth	r3, r3
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00e      	beq.n	8001242 <I2C_TO_BASESYSTEM+0x5a>
			ENDEFF_TEST_MODE(hi2c);
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f7ff feef 	bl	8001008 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 800122a:	4b89      	ldr	r3, [pc, #548]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	f040 8100 	bne.w	8001434 <I2C_TO_BASESYSTEM+0x24c>
				END_EFFECTOR_STATE = TEST;
 8001234:	4b85      	ldr	r3, [pc, #532]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800123a:	4b85      	ldr	r3, [pc, #532]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 8001240:	e0f8      	b.n	8001434 <I2C_TO_BASESYSTEM+0x24c>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001248:	b29b      	uxth	r3, r3
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80f0 	beq.w	8001434 <I2C_TO_BASESYSTEM+0x24c>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 8001254:	6838      	ldr	r0, [r7, #0]
 8001256:	f7ff ff27 	bl	80010a8 <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 800125a:	4b7d      	ldr	r3, [pc, #500]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b01      	cmp	r3, #1
 8001260:	f040 80e8 	bne.w	8001434 <I2C_TO_BASESYSTEM+0x24c>
				END_EFFECTOR_STATE = RUNMODE;
 8001264:	4b79      	ldr	r3, [pc, #484]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 8001266:	2202      	movs	r2, #2
 8001268:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800126a:	4b79      	ldr	r3, [pc, #484]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
		break;
 8001270:	e0e0      	b.n	8001434 <I2C_TO_BASESYSTEM+0x24c>
	case (TEST):
		if ((*DataFrame & 0b0001) == 0) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001278:	b29b      	uxth	r3, r3
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10e      	bne.n	80012a0 <I2C_TO_BASESYSTEM+0xb8>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 8001282:	6838      	ldr	r0, [r7, #0]
 8001284:	f7ff fee8 	bl	8001058 <ENDEFF_TEST_MODE_QUIT>
			if (complete == 1) {
 8001288:	4b71      	ldr	r3, [pc, #452]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	f040 80d3 	bne.w	8001438 <I2C_TO_BASESYSTEM+0x250>
				END_EFFECTOR_STATE = INIT;
 8001292:	4b6e      	ldr	r3, [pc, #440]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001298:	4b6d      	ldr	r3, [pc, #436]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 800129e:	e0cb      	b.n	8001438 <I2C_TO_BASESYSTEM+0x250>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80c3 	beq.w	8001438 <I2C_TO_BASESYSTEM+0x250>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 80012b2:	6838      	ldr	r0, [r7, #0]
 80012b4:	f7ff fed0 	bl	8001058 <ENDEFF_TEST_MODE_QUIT>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 80012b8:	6838      	ldr	r0, [r7, #0]
 80012ba:	f7ff fef5 	bl	80010a8 <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 80012be:	4b64      	ldr	r3, [pc, #400]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	f040 80b8 	bne.w	8001438 <I2C_TO_BASESYSTEM+0x250>
				END_EFFECTOR_STATE = RUNMODE;
 80012c8:	4b60      	ldr	r3, [pc, #384]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80012ce:	4b60      	ldr	r3, [pc, #384]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
		break;
 80012d4:	e0b0      	b.n	8001438 <I2C_TO_BASESYSTEM+0x250>
	case (RUNMODE):
		if ((*DataFrame & 0b0010) == 0) {
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10e      	bne.n	8001304 <I2C_TO_BASESYSTEM+0x11c>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80012e6:	6838      	ldr	r0, [r7, #0]
 80012e8:	f7ff ff06 	bl	80010f8 <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80012ec:	4b58      	ldr	r3, [pc, #352]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	f040 80a3 	bne.w	800143c <I2C_TO_BASESYSTEM+0x254>
				END_EFFECTOR_STATE = INIT;
 80012f6:	4b55      	ldr	r3, [pc, #340]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80012fc:	4b54      	ldr	r3, [pc, #336]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
					complete = 0;
					picked = 0;
				}
			}
		}
		break;
 8001302:	e09b      	b.n	800143c <I2C_TO_BASESYSTEM+0x254>
		} else if ((*DataFrame & 0b0001) == 1) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130a:	b29b      	uxth	r3, r3
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00e      	beq.n	8001332 <I2C_TO_BASESYSTEM+0x14a>
			ENDEFF_TEST_MODE(hi2c);
 8001314:	6838      	ldr	r0, [r7, #0]
 8001316:	f7ff fe77 	bl	8001008 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 800131a:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	f040 808c 	bne.w	800143c <I2C_TO_BASESYSTEM+0x254>
				END_EFFECTOR_STATE = TEST;
 8001324:	4b49      	ldr	r3, [pc, #292]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800132a:	4b49      	ldr	r3, [pc, #292]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
		break;
 8001330:	e084      	b.n	800143c <I2C_TO_BASESYSTEM+0x254>
		} else if ((*DataFrame & 0b0100) == 0b100) {
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	b29b      	uxth	r3, r3
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	2b00      	cmp	r3, #0
 8001340:	d013      	beq.n	800136a <I2C_TO_BASESYSTEM+0x182>
			ENDEFF_GRIPPER_PICK(hi2c);
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f7ff ff00 	bl	8001148 <ENDEFF_GRIPPER_PICK>
			if (complete == 1) {
 8001348:	4b41      	ldr	r3, [pc, #260]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d175      	bne.n	800143c <I2C_TO_BASESYSTEM+0x254>
				*DataFrame = 0b0010;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2202      	movs	r2, #2
 8001354:	801a      	strh	r2, [r3, #0]
				END_EFFECTOR_STATE = PICKED;
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 8001358:	2203      	movs	r2, #3
 800135a:	701a      	strb	r2, [r3, #0]
				complete = 0;
 800135c:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
				picked = 1;
 8001362:	4b3c      	ldr	r3, [pc, #240]	; (8001454 <I2C_TO_BASESYSTEM+0x26c>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
		break;
 8001368:	e068      	b.n	800143c <I2C_TO_BASESYSTEM+0x254>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001370:	b29b      	uxth	r3, r3
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d060      	beq.n	800143c <I2C_TO_BASESYSTEM+0x254>
			if (picked == 1) {
 800137a:	4b36      	ldr	r3, [pc, #216]	; (8001454 <I2C_TO_BASESYSTEM+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d15c      	bne.n	800143c <I2C_TO_BASESYSTEM+0x254>
				ENDEFF_GRIPPER_PLACE(hi2c);
 8001382:	6838      	ldr	r0, [r7, #0]
 8001384:	f7ff ff08 	bl	8001198 <ENDEFF_GRIPPER_PLACE>
				if (complete == 1) {
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d155      	bne.n	800143c <I2C_TO_BASESYSTEM+0x254>
					*DataFrame = 0b0010;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2202      	movs	r2, #2
 8001394:	801a      	strh	r2, [r3, #0]
					complete = 0;
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
					picked = 0;
 800139c:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <I2C_TO_BASESYSTEM+0x26c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
		break;
 80013a2:	e04b      	b.n	800143c <I2C_TO_BASESYSTEM+0x254>
	case (PICKED):
		if ((*DataFrame & 0b0010) == 0) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10d      	bne.n	80013d0 <I2C_TO_BASESYSTEM+0x1e8>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80013b4:	6838      	ldr	r0, [r7, #0]
 80013b6:	f7ff fe9f 	bl	80010f8 <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d13e      	bne.n	8001440 <I2C_TO_BASESYSTEM+0x258>
				END_EFFECTOR_STATE = INIT;
 80013c2:	4b22      	ldr	r3, [pc, #136]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
				picked = 0;
			}
		}
		break;
 80013ce:	e037      	b.n	8001440 <I2C_TO_BASESYSTEM+0x258>
		} else if ((*DataFrame & 0b0001) == 1) {
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00d      	beq.n	80013fc <I2C_TO_BASESYSTEM+0x214>
			ENDEFF_TEST_MODE(hi2c);
 80013e0:	6838      	ldr	r0, [r7, #0]
 80013e2:	f7ff fe11 	bl	8001008 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d128      	bne.n	8001440 <I2C_TO_BASESYSTEM+0x258>
				END_EFFECTOR_STATE = TEST;
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
		break;
 80013fa:	e021      	b.n	8001440 <I2C_TO_BASESYSTEM+0x258>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001402:	b29b      	uxth	r3, r3
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d019      	beq.n	8001440 <I2C_TO_BASESYSTEM+0x258>
			ENDEFF_GRIPPER_PLACE(hi2c);
 800140c:	6838      	ldr	r0, [r7, #0]
 800140e:	f7ff fec3 	bl	8001198 <ENDEFF_GRIPPER_PLACE>
			if (complete == 1) {
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d112      	bne.n	8001440 <I2C_TO_BASESYSTEM+0x258>
				*DataFrame = 0b0010;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2202      	movs	r2, #2
 800141e:	801a      	strh	r2, [r3, #0]
				END_EFFECTOR_STATE = RUNMODE;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <I2C_TO_BASESYSTEM+0x264>)
 8001422:	2202      	movs	r2, #2
 8001424:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <I2C_TO_BASESYSTEM+0x268>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
				picked = 0;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <I2C_TO_BASESYSTEM+0x26c>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
		break;
 8001432:	e005      	b.n	8001440 <I2C_TO_BASESYSTEM+0x258>
		break;
 8001434:	bf00      	nop
 8001436:	e004      	b.n	8001442 <I2C_TO_BASESYSTEM+0x25a>
		break;
 8001438:	bf00      	nop
 800143a:	e002      	b.n	8001442 <I2C_TO_BASESYSTEM+0x25a>
		break;
 800143c:	bf00      	nop
 800143e:	e000      	b.n	8001442 <I2C_TO_BASESYSTEM+0x25a>
		break;
 8001440:	bf00      	nop
	}
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000042c 	.word	0x2000042c
 8001450:	20000428 	.word	0x20000428
 8001454:	20000430 	.word	0x20000430

08001458 <UARTInterruptConfig>:
#include "Joystick.h"
#include "usart.h"

uint8_t RxBuffer[1];

void UARTInterruptConfig() {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 800145c:	2201      	movs	r2, #1
 800145e:	4903      	ldr	r1, [pc, #12]	; (800146c <UARTInterruptConfig+0x14>)
 8001460:	4803      	ldr	r0, [pc, #12]	; (8001470 <UARTInterruptConfig+0x18>)
 8001462:	f008 f82f 	bl	80094c4 <HAL_UART_Receive_IT>
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000434 	.word	0x20000434
 8001470:	20001cf4 	.word	0x20001cf4

08001474 <Joystick_Received>:

void Joystick_Received(int *receivedByte) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	static int count;
	static enum {
		START, COUNT
	} Joy_State = START;
	switch (Joy_State) {
 800147c:	4b3f      	ldr	r3, [pc, #252]	; (800157c <Joystick_Received+0x108>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d002      	beq.n	800148a <Joystick_Received+0x16>
 8001484:	2b01      	cmp	r3, #1
 8001486:	d008      	beq.n	800149a <Joystick_Received+0x26>
 8001488:	e06f      	b.n	800156a <Joystick_Received+0xf6>
	case (START):
		if (RxBuffer[0] == 69) {
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <Joystick_Received+0x10c>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b45      	cmp	r3, #69	; 0x45
 8001490:	d16a      	bne.n	8001568 <Joystick_Received+0xf4>
			Joy_State = COUNT;
 8001492:	4b3a      	ldr	r3, [pc, #232]	; (800157c <Joystick_Received+0x108>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001498:	e066      	b.n	8001568 <Joystick_Received+0xf4>

	case (COUNT):
		if (RxBuffer[0] == 69) {
 800149a:	4b39      	ldr	r3, [pc, #228]	; (8001580 <Joystick_Received+0x10c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b45      	cmp	r3, #69	; 0x45
 80014a0:	d112      	bne.n	80014c8 <Joystick_Received+0x54>
			for (int i = 0; i < sizeof(receivedByte); i++) {
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	e008      	b.n	80014ba <Joystick_Received+0x46>
				receivedByte[i] = 0;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < sizeof(receivedByte); i++) {
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3301      	adds	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d9f3      	bls.n	80014a8 <Joystick_Received+0x34>
			}
			count = 0;
 80014c0:	4b30      	ldr	r3, [pc, #192]	; (8001584 <Joystick_Received+0x110>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
			receivedByte[count] = RxBuffer[0];
			if (receivedByte[count] > UINT8_MAX / 2)
				receivedByte[count] -= UINT8_MAX + 1;
			count++;
		}
		break;
 80014c6:	e050      	b.n	800156a <Joystick_Received+0xf6>
		} else if (RxBuffer[0] == 71 && count < 4) {
 80014c8:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <Joystick_Received+0x10c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b47      	cmp	r3, #71	; 0x47
 80014ce:	d116      	bne.n	80014fe <Joystick_Received+0x8a>
 80014d0:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <Joystick_Received+0x110>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	dc12      	bgt.n	80014fe <Joystick_Received+0x8a>
			for (int i = 0; i < sizeof(receivedByte); i++) {
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	e008      	b.n	80014f0 <Joystick_Received+0x7c>
				receivedByte[i] = 0;
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < sizeof(receivedByte); i++) {
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	3301      	adds	r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d9f3      	bls.n	80014de <Joystick_Received+0x6a>
			count = 0;
 80014f6:	4b23      	ldr	r3, [pc, #140]	; (8001584 <Joystick_Received+0x110>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e033      	b.n	8001566 <Joystick_Received+0xf2>
		} else if (RxBuffer[0] == 71 && count == 4) {
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <Joystick_Received+0x10c>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b47      	cmp	r3, #71	; 0x47
 8001504:	d10a      	bne.n	800151c <Joystick_Received+0xa8>
 8001506:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <Joystick_Received+0x110>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b04      	cmp	r3, #4
 800150c:	d106      	bne.n	800151c <Joystick_Received+0xa8>
			count = 0;
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <Joystick_Received+0x110>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
			Joy_State = START;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <Joystick_Received+0x108>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e024      	b.n	8001566 <Joystick_Received+0xf2>
			receivedByte[count] = RxBuffer[0];
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <Joystick_Received+0x10c>)
 800151e:	7819      	ldrb	r1, [r3, #0]
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <Joystick_Received+0x110>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	460a      	mov	r2, r1
 800152c:	601a      	str	r2, [r3, #0]
			if (receivedByte[count] > UINT8_MAX / 2)
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <Joystick_Received+0x110>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b7f      	cmp	r3, #127	; 0x7f
 800153c:	dd0d      	ble.n	800155a <Joystick_Received+0xe6>
				receivedByte[count] -= UINT8_MAX + 1;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <Joystick_Received+0x110>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <Joystick_Received+0x110>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	440b      	add	r3, r1
 8001554:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8001558:	601a      	str	r2, [r3, #0]
			count++;
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <Joystick_Received+0x110>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	4a08      	ldr	r2, [pc, #32]	; (8001584 <Joystick_Received+0x110>)
 8001562:	6013      	str	r3, [r2, #0]
		break;
 8001564:	e001      	b.n	800156a <Joystick_Received+0xf6>
 8001566:	e000      	b.n	800156a <Joystick_Received+0xf6>
		break;
 8001568:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 800156a:	2201      	movs	r2, #1
 800156c:	4904      	ldr	r1, [pc, #16]	; (8001580 <Joystick_Received+0x10c>)
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <Joystick_Received+0x114>)
 8001570:	f007 ffa8 	bl	80094c4 <HAL_UART_Receive_IT>
}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000435 	.word	0x20000435
 8001580:	20000434 	.word	0x20000434
 8001584:	20000438 	.word	0x20000438
 8001588:	20001cf4 	.word	0x20001cf4

0800158c <modbus_1t5_Timeout>:
void modbusRead1Register(); // function 03
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();

// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim) {
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <modbus_1t5_Timeout+0x1c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2201      	movs	r2, #1
 800159a:	751a      	strb	r2, [r3, #20]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	2000043c 	.word	0x2000043c

080015ac <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <modbus_3t5_Timeout+0x1c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2201      	movs	r2, #1
 80015ba:	755a      	strb	r2, [r3, #21]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	2000043c 	.word	0x2000043c

080015cc <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart, uint32_t pos) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev = 1;
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <modbus_UART_Recived+0x60>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2201      	movs	r2, #1
 80015dc:	759a      	strb	r2, [r3, #22]
	if (hModbus->modbusUartStructure.RxTail++ < MODBUS_MESSAGEBUFFER_SIZE) {
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <modbus_UART_Recived+0x60>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 80015e6:	1c59      	adds	r1, r3, #1
 80015e8:	b289      	uxth	r1, r1
 80015ea:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 80015ee:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015f2:	d210      	bcs.n	8001616 <modbus_UART_Recived+0x4a>

		HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80015f4:	4b0d      	ldr	r3, [pc, #52]	; (800162c <modbus_UART_Recived+0x60>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68d8      	ldr	r0, [r3, #12]
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <modbus_UART_Recived+0x60>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <modbus_UART_Recived+0x60>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001606:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800160a:	4413      	add	r3, r2
 800160c:	3302      	adds	r3, #2
 800160e:	2201      	movs	r2, #1
 8001610:	4619      	mov	r1, r3
 8001612:	f007 ff57 	bl	80094c4 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <modbus_UART_Recived+0x60>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000043c 	.word	0x2000043c

08001630 <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800163a:	4a24      	ldr	r2, [pc, #144]	; (80016cc <Modbus_init+0x9c>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <Modbus_init+0x9c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, (void*) modbus_1t5_Timeout);
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <Modbus_init+0x9c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	4a20      	ldr	r2, [pc, #128]	; (80016d0 <Modbus_init+0xa0>)
 8001650:	2114      	movs	r1, #20
 8001652:	4618      	mov	r0, r3
 8001654:	f007 f810 	bl	8008678 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID, (void*) modbus_3t5_Timeout);
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <Modbus_init+0x9c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <Modbus_init+0xa4>)
 8001660:	210e      	movs	r1, #14
 8001662:	4618      	mov	r0, r3
 8001664:	f007 f808 	bl	8008678 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart, HAL_UART_RX_COMPLETE_CB_ID, (void*) modbus_UART_Recived);
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <Modbus_init+0x9c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	4a1a      	ldr	r2, [pc, #104]	; (80016d8 <Modbus_init+0xa8>)
 8001670:	2103      	movs	r1, #3
 8001672:	4618      	mov	r0, r3
 8001674:	f007 fe7e 	bl	8009374 <HAL_UART_RegisterCallback>
	//start Receive
	HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <Modbus_init+0x9c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68d8      	ldr	r0, [r3, #12]
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <Modbus_init+0x9c>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <Modbus_init+0x9c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800168a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800168e:	4413      	add	r3, r2
 8001690:	3302      	adds	r3, #2
 8001692:	2201      	movs	r2, #1
 8001694:	4619      	mov	r1, r3
 8001696:	f007 ff15 	bl	80094c4 <HAL_UART_Receive_IT>

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <Modbus_init+0x9c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d10c      	bne.n	80016c4 <Modbus_init+0x94>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <Modbus_init+0x9c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f005 fe1f 	bl	80072f4 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <Modbus_init+0x9c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f006 fad4 	bl	8007c6c <HAL_TIM_OnePulse_Start_IT>
	}

}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2000043c 	.word	0x2000043c
 80016d0:	0800158d 	.word	0x0800158d
 80016d4:	080015ad 	.word	0x080015ad
 80016d8:	080015cd 	.word	0x080015cd

080016dc <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 80016e8:	23ff      	movs	r3, #255	; 0xff
 80016ea:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 80016ec:	23ff      	movs	r3, #255	; 0xff
 80016ee:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80016f0:	e013      	b.n	800171a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	781a      	ldrb	r2, [r3, #0]
 80016fa:	7bbb      	ldrb	r3, [r7, #14]
 80016fc:	4053      	eors	r3, r2
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 8001702:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <CRC16+0x64>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4413      	add	r3, r2
 8001708:	781a      	ldrb	r2, [r3, #0]
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	4053      	eors	r3, r2
 800170e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 8001710:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <CRC16+0x68>)
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	4413      	add	r3, r2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800171a:	883b      	ldrh	r3, [r7, #0]
 800171c:	1e5a      	subs	r2, r3, #1
 800171e:	803a      	strh	r2, [r7, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1e6      	bne.n	80016f2 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b21a      	sxth	r2, r3
 800172a:	7bbb      	ldrb	r3, [r7, #14]
 800172c:	b21b      	sxth	r3, r3
 800172e:	4313      	orrs	r3, r2
 8001730:	b21b      	sxth	r3, r3
 8001732:	b29b      	uxth	r3, r3
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	20000118 	.word	0x20000118
 8001744:	20000018 	.word	0x20000018

08001748 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
	switch (hModbus->Mstatus) {
 800174e:	4b81      	ldr	r3, [pc, #516]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	7e1b      	ldrb	r3, [r3, #24]
 8001754:	3b01      	subs	r3, #1
 8001756:	2b03      	cmp	r3, #3
 8001758:	d80a      	bhi.n	8001770 <Modbus_Protocal_Worker+0x28>
 800175a:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <Modbus_Protocal_Worker+0x18>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	0800177b 	.word	0x0800177b
 8001764:	0800191b 	.word	0x0800191b
 8001768:	08001807 	.word	0x08001807
 800176c:	0800182d 	.word	0x0800182d
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001770:	4b78      	ldr	r3, [pc, #480]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	761a      	strb	r2, [r3, #24]
		break;
 8001778:	e0e8      	b.n	800194c <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 800177a:	4b76      	ldr	r3, [pc, #472]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <Modbus_Protocal_Worker+0x44>
			Modbus_Emission();
 8001786:	f000 f9dd 	bl	8001b44 <Modbus_Emission>
 800178a:	e01c      	b.n	80017c6 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if (hModbus->Flag_URev) {
 800178c:	4b71      	ldr	r3, [pc, #452]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	7d9b      	ldrb	r3, [r3, #22]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d017      	beq.n	80017c6 <Modbus_Protocal_Worker+0x7e>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001796:	4b6f      	ldr	r3, [pc, #444]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2200      	movs	r2, #0
 800179c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800179e:	4b6d      	ldr	r3, [pc, #436]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2200      	movs	r2, #0
 80017a4:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80017a6:	4b6b      	ldr	r3, [pc, #428]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b68      	ldr	r3, [pc, #416]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 80017be:	4b65      	ldr	r3, [pc, #404]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2203      	movs	r2, #3
 80017c4:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 80017c6:	4b63      	ldr	r3, [pc, #396]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b20      	cmp	r3, #32
 80017d4:	f040 80b3 	bne.w	800193e <Modbus_Protocal_Worker+0x1f6>
			hModbus->modbusUartStructure.RxTail = 0;
 80017d8:	4b5e      	ldr	r3, [pc, #376]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2200      	movs	r2, #0
 80017de:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80017e2:	4b5c      	ldr	r3, [pc, #368]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68d8      	ldr	r0, [r3, #12]
 80017e8:	4b5a      	ldr	r3, [pc, #360]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80017f4:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80017f8:	4413      	add	r3, r2
 80017fa:	3302      	adds	r3, #2
 80017fc:	2201      	movs	r2, #1
 80017fe:	4619      	mov	r1, r3
 8001800:	f007 fe60 	bl	80094c4 <HAL_UART_Receive_IT>
		}
		break;
 8001804:	e09b      	b.n	800193e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 8001806:	4b53      	ldr	r3, [pc, #332]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	7d1b      	ldrb	r3, [r3, #20]
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 8098 	beq.w	8001942 <Modbus_Protocal_Worker+0x1fa>
			/*reset recived flag*/
			hModbus->Flag_URev = 0;
 8001812:	4b50      	ldr	r3, [pc, #320]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2200      	movs	r2, #0
 8001818:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800181a:	4b4e      	ldr	r3, [pc, #312]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	22fe      	movs	r2, #254	; 0xfe
 8001820:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001822:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2204      	movs	r2, #4
 8001828:	761a      	strb	r2, [r3, #24]
		}
		break;
 800182a:	e08a      	b.n	8001942 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if (hModbus->Flag_URev) {
 800182c:	4b49      	ldr	r3, [pc, #292]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	7d9b      	ldrb	r3, [r3, #22]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <Modbus_Protocal_Worker+0x102>

			if (!hModbus->RecvStatus) {
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d103      	bne.n	800184a <Modbus_Protocal_Worker+0x102>
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001842:	4b44      	ldr	r3, [pc, #272]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	22ff      	movs	r2, #255	; 0xff
 8001848:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 800184a:	4b42      	ldr	r3, [pc, #264]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001852:	f113 0f02 	cmn.w	r3, #2
 8001856:	d150      	bne.n	80018fa <Modbus_Protocal_Worker+0x1b2>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001858:	4b3e      	ldr	r3, [pc, #248]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2200      	movs	r2, #0
 800185e:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx, hModbus->modbusUartStructure.RxTail - 2);
 8001860:	4b3c      	ldr	r3, [pc, #240]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001868:	4b3a      	ldr	r3, [pc, #232]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001870:	3b02      	subs	r3, #2
 8001872:	4619      	mov	r1, r3
 8001874:	4610      	mov	r0, r2
 8001876:	f7ff ff31 	bl	80016dc <CRC16>
 800187a:	4603      	mov	r3, r0
 800187c:	80bb      	strh	r3, [r7, #4]

			if (!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800187e:	793a      	ldrb	r2, [r7, #4]
 8001880:	4b34      	ldr	r3, [pc, #208]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 8001882:	6819      	ldr	r1, [r3, #0]
 8001884:	4b33      	ldr	r3, [pc, #204]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800188c:	3b02      	subs	r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001894:	429a      	cmp	r2, r3
 8001896:	d10c      	bne.n	80018b2 <Modbus_Protocal_Worker+0x16a>
					&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 1])) {
 8001898:	797a      	ldrb	r2, [r7, #5]
 800189a:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 800189c:	6819      	ldr	r1, [r3, #0]
 800189e:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80018a6:	3b01      	subs	r3, #1
 80018a8:	440b      	add	r3, r1
 80018aa:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if (!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d004      	beq.n	80018bc <Modbus_Protocal_Worker+0x174>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80018b2:	4b28      	ldr	r3, [pc, #160]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	22ff      	movs	r2, #255	; 0xff
 80018b8:	75da      	strb	r2, [r3, #23]
				break;
 80018ba:	e047      	b.n	800194c <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 80018c4:	4b23      	ldr	r3, [pc, #140]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d113      	bne.n	80018f6 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe, hModbus->modbusUartStructure.MessageBufferRx + 1, hModbus->modbusUartStructure.RxTail - 3);
 80018ce:	4b21      	ldr	r3, [pc, #132]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f103 0019 	add.w	r0, r3, #25
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f203 2372 	addw	r3, r3, #626	; 0x272
 80018de:	1c59      	adds	r1, r3, #1
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80018e8:	3b03      	subs	r3, #3
 80018ea:	461a      	mov	r2, r3
 80018ec:	f008 ffa2 	bl	800a834 <memcpy>

			//execute command
			Modbus_frame_response();
 80018f0:	f000 f910 	bl	8001b14 <Modbus_frame_response>
 80018f4:	e001      	b.n	80018fa <Modbus_Protocal_Worker+0x1b2>
				break;
 80018f6:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 80018f8:	e028      	b.n	800194c <Modbus_Protocal_Worker+0x204>
		if (hModbus->Flag_T35TimeOut) {
 80018fa:	4b16      	ldr	r3, [pc, #88]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	7d5b      	ldrb	r3, [r3, #21]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d020      	beq.n	8001946 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2201      	movs	r2, #1
 800190a:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	4618      	mov	r0, r3
 8001914:	f007 fe84 	bl	8009620 <HAL_UART_AbortReceive>
		break;
 8001918:	e015      	b.n	8001946 <Modbus_Protocal_Worker+0x1fe>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b20      	cmp	r3, #32
 8001928:	d10f      	bne.n	800194a <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount = 0;
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <Modbus_Protocal_Worker+0x20c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2201      	movs	r2, #1
 800193a:	761a      	strb	r2, [r3, #24]
		break;
 800193c:	e005      	b.n	800194a <Modbus_Protocal_Worker+0x202>
		break;
 800193e:	bf00      	nop
 8001940:	e004      	b.n	800194c <Modbus_Protocal_Worker+0x204>
		break;
 8001942:	bf00      	nop
 8001944:	e002      	b.n	800194c <Modbus_Protocal_Worker+0x204>
		break;
 8001946:	bf00      	nop
 8001948:	e000      	b.n	800194c <Modbus_Protocal_Worker+0x204>
		break;
 800194a:	bf00      	nop
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2000043c 	.word	0x2000043c

08001958 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 800195e:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <modbusWrite1Register+0x80>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	7e9b      	ldrb	r3, [r3, #26]
 8001964:	b29b      	uxth	r3, r3
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	b29a      	uxth	r2, r3
 800196a:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <modbusWrite1Register+0x80>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	7edb      	ldrb	r3, [r3, #27]
 8001970:	b29b      	uxth	r3, r3
 8001972:	4413      	add	r3, r2
 8001974:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 8001976:	88fa      	ldrh	r2, [r7, #6]
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <modbusWrite1Register+0x80>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	429a      	cmp	r2, r3
 8001980:	d903      	bls.n	800198a <modbusWrite1Register+0x32>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001982:	2002      	movs	r0, #2
 8001984:	f000 f8a4 	bl	8001ad0 <ModbusErrorReply>
		return;
 8001988:	e023      	b.n	80019d2 <modbusWrite1Register+0x7a>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <modbusWrite1Register+0x80>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <modbusWrite1Register+0x80>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6859      	ldr	r1, [r3, #4]
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	440b      	add	r3, r1
 800199a:	7f12      	ldrb	r2, [r2, #28]
 800199c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <modbusWrite1Register+0x80>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <modbusWrite1Register+0x80>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6859      	ldr	r1, [r3, #4]
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	440b      	add	r3, r1
 80019ae:	7f52      	ldrb	r2, [r2, #29]
 80019b0:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <modbusWrite1Register+0x80>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f203 1045 	addw	r0, r3, #325	; 0x145
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <modbusWrite1Register+0x80>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	3319      	adds	r3, #25
 80019c0:	2208      	movs	r2, #8
 80019c2:	4619      	mov	r1, r3
 80019c4:	f008 ff36 	bl	800a834 <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <modbusWrite1Register+0x80>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2205      	movs	r2, #5
 80019ce:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	2000043c 	.word	0x2000043c

080019dc <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8) + (hModbus->Rxframe[4]));
 80019e2:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <modbusRead1Register+0xf0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	7f1b      	ldrb	r3, [r3, #28]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	4b37      	ldr	r3, [pc, #220]	; (8001acc <modbusRead1Register+0xf0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	7f5b      	ldrb	r3, [r3, #29]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 80019fa:	4b34      	ldr	r3, [pc, #208]	; (8001acc <modbusRead1Register+0xf0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	7e9b      	ldrb	r3, [r3, #26]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	4b31      	ldr	r3, [pc, #196]	; (8001acc <modbusRead1Register+0xf0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	7edb      	ldrb	r3, [r3, #27]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	4413      	add	r3, r2
 8001a10:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <modbusRead1Register+0x42>
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	2b7d      	cmp	r3, #125	; 0x7d
 8001a1c:	d903      	bls.n	8001a26 <modbusRead1Register+0x4a>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001a1e:	2003      	movs	r0, #3
 8001a20:	f000 f856 	bl	8001ad0 <ModbusErrorReply>
		return;
 8001a24:	e04e      	b.n	8001ac4 <modbusRead1Register+0xe8>
	}

	if (startAddress > hModbus->RegisterSize || (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 8001a26:	88ba      	ldrh	r2, [r7, #4]
 8001a28:	4b28      	ldr	r3, [pc, #160]	; (8001acc <modbusRead1Register+0xf0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d808      	bhi.n	8001a44 <modbusRead1Register+0x68>
 8001a32:	88ba      	ldrh	r2, [r7, #4]
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	4413      	add	r3, r2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <modbusRead1Register+0xf0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d903      	bls.n	8001a4c <modbusRead1Register+0x70>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001a44:	2002      	movs	r0, #2
 8001a46:	f000 f843 	bl	8001ad0 <ModbusErrorReply>
		return;
 8001a4a:	e03b      	b.n	8001ac4 <modbusRead1Register+0xe8>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <modbusRead1Register+0xf0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2203      	movs	r2, #3
 8001a52:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <modbusRead1Register+0xf0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	0052      	lsls	r2, r2, #1
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 8001a66:	2400      	movs	r4, #0
 8001a68:	e020      	b.n	8001aac <modbusRead1Register+0xd0>
		hModbus->Txframe[2 * i + 2] = hModbus->RegisterAddress[startAddress + i].U8[1];
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <modbusRead1Register+0xf0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	88bb      	ldrh	r3, [r7, #4]
 8001a72:	4423      	add	r3, r4
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	18d1      	adds	r1, r2, r3
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <modbusRead1Register+0xf0>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	1c63      	adds	r3, r4, #1
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	7849      	ldrb	r1, [r1, #1]
 8001a82:	4413      	add	r3, r2
 8001a84:	460a      	mov	r2, r1
 8001a86:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2 * i + 3] = hModbus->RegisterAddress[startAddress + i].U8[0];
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <modbusRead1Register+0xf0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	88bb      	ldrh	r3, [r7, #4]
 8001a92:	4423      	add	r3, r4
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	18d1      	adds	r1, r2, r3
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <modbusRead1Register+0xf0>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	0063      	lsls	r3, r4, #1
 8001a9e:	3303      	adds	r3, #3
 8001aa0:	7809      	ldrb	r1, [r1, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for (i = 0; i < numberOfDataToRead; i++) {
 8001aaa:	3401      	adds	r4, #1
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	429c      	cmp	r4, r3
 8001ab0:	dbdb      	blt.n	8001a6a <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <modbusRead1Register+0xf0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	0052      	lsls	r2, r2, #1
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd90      	pop	{r4, r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000043c 	.word	0x2000043c

08001ad0 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <ModbusErrorReply+0x40>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	7e5a      	ldrb	r2, [r3, #25]
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <ModbusErrorReply+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <ModbusErrorReply+0x40>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	79fa      	ldrb	r2, [r7, #7]
 8001af4:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <ModbusErrorReply+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2202      	movs	r2, #2
 8001afe:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	2000043c 	.word	0x2000043c

08001b14 <Modbus_frame_response>:

void Modbus_frame_response() {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <Modbus_frame_response+0x2c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	7e5b      	ldrb	r3, [r3, #25]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d004      	beq.n	8001b2c <Modbus_frame_response+0x18>
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d105      	bne.n	8001b32 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001b26:	f7ff ff17 	bl	8001958 <modbusWrite1Register>
		break;
 8001b2a:	e006      	b.n	8001b3a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001b2c:	f7ff ff56 	bl	80019dc <modbusRead1Register>
		break;
 8001b30:	e003      	b.n	8001b3a <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001b32:	2001      	movs	r0, #1
 8001b34:	f7ff ffcc 	bl	8001ad0 <ModbusErrorReply>
		break;
 8001b38:	bf00      	nop

	}
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000043c 	.word	0x2000043c

08001b44 <Modbus_Emission>:

void Modbus_Emission() {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <Modbus_Emission+0xfc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b20      	cmp	r3, #32
 8001b58:	d15e      	bne.n	8001c18 <Modbus_Emission+0xd4>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001b5a:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <Modbus_Emission+0xfc>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <Modbus_Emission+0xfc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	7812      	ldrb	r2, [r2, #0]
 8001b64:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1, hModbus->Txframe, hModbus->TxCount);
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <Modbus_Emission+0xfc>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8001b70:	1c58      	adds	r0, r3, #1
 8001b72:	4b33      	ldr	r3, [pc, #204]	; (8001c40 <Modbus_Emission+0xfc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f203 1145 	addw	r1, r3, #325	; 0x145
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <Modbus_Emission+0xfc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001b82:	461a      	mov	r2, r3
 8001b84:	f008 fe56 	bl	800a834 <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 8001b88:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <Modbus_Emission+0xfc>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <Modbus_Emission+0xfc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3203      	adds	r2, #3
 8001b98:	b292      	uxth	r2, r2
 8001b9a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx, hModbus->modbusUartStructure.TxTail - 2);
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <Modbus_Emission+0xfc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <Modbus_Emission+0xfc>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001bae:	3b02      	subs	r3, #2
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	f7ff fd92 	bl	80016dc <CRC16>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail - 2] = CalculateCRC.U8[0];
 8001bbc:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <Modbus_Emission+0xfc>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <Modbus_Emission+0xfc>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001bc8:	3b02      	subs	r3, #2
 8001bca:	7939      	ldrb	r1, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	460a      	mov	r2, r1
 8001bd0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail - 1] = CalculateCRC.U8[1];
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <Modbus_Emission+0xfc>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <Modbus_Emission+0xfc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001be0:	3b01      	subs	r3, #1
 8001be2:	7979      	ldrb	r1, [r7, #5]
 8001be4:	4413      	add	r3, r2
 8001be6:	460a      	mov	r2, r1
 8001be8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		//sent modbus
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <Modbus_Emission+0xfc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b20      	cmp	r3, #32
 8001bfa:	d10d      	bne.n	8001c18 <Modbus_Emission+0xd4>
			HAL_UART_Transmit_DMA(hModbus->huart, hModbus->modbusUartStructure.MessageBufferTx, hModbus->modbusUartStructure.TxTail);
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <Modbus_Emission+0xfc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68d8      	ldr	r0, [r3, #12]
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <Modbus_Emission+0xfc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <Modbus_Emission+0xfc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001c12:	461a      	mov	r2, r3
 8001c14:	f007 fc86 	bl	8009524 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <Modbus_Emission+0xfc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <Modbus_Emission+0xfc>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2200      	movs	r2, #0
 8001c26:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev = 0;
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <Modbus_Emission+0xfc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus = Modbus_state_Emission;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <Modbus_Emission+0xfc>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2202      	movs	r2, #2
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000043c 	.word	0x2000043c

08001c44 <PositionControlPID>:

// PRIVATE TYPEDEF ================================================================================

// USER CODE ======================================================================================

void PositionControlPID(float trajectory_setpoint, float final_setpoint, float position_now, float Kp, float Ki, float Kd, float *PID_out) {
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	ed87 0a07 	vstr	s0, [r7, #28]
 8001c4e:	edc7 0a06 	vstr	s1, [r7, #24]
 8001c52:	ed87 1a05 	vstr	s2, [r7, #20]
 8001c56:	edc7 1a04 	vstr	s3, [r7, #16]
 8001c5a:	ed87 2a03 	vstr	s4, [r7, #12]
 8001c5e:	edc7 2a02 	vstr	s5, [r7, #8]
 8001c62:	6078      	str	r0, [r7, #4]
	static float first = 0;
	static float second = 0;
	static float third = 0;

	// error position
	error_first = trajectory_setpoint - position_now;
 8001c64:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c70:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <PositionControlPID+0x100>)
 8001c72:	edc3 7a00 	vstr	s15, [r3]
	//Position.error[0] = PID_position - QEIReadRaw_now;

	// first error
	first = (Kp + Ki + Kd) * error_first;
 8001c76:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <PositionControlPID+0x100>)
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c94:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <PositionControlPID+0x104>)
 8001c96:	edc3 7a00 	vstr	s15, [r3]

	// second error
	second = (Kp + (2 * Kd)) * error_second;
 8001c9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c9e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ca2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ca6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <PositionControlPID+0x108>)
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb4:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <PositionControlPID+0x10c>)
 8001cb6:	edc3 7a00 	vstr	s15, [r3]

	// third error
	third = Kd * error_third;
 8001cba:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <PositionControlPID+0x110>)
 8001cbc:	ed93 7a00 	vldr	s14, [r3]
 8001cc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <PositionControlPID+0x114>)
 8001cca:	edc3 7a00 	vstr	s15, [r3]

	// voltage
	*PID_out += first - second + third;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	ed93 7a00 	vldr	s14, [r3]
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <PositionControlPID+0x104>)
 8001cd6:	edd3 6a00 	vldr	s13, [r3]
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <PositionControlPID+0x10c>)
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <PositionControlPID+0x114>)
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	edc3 7a00 	vstr	s15, [r3]

	if (error_first == 0 && (final_setpoint - trajectory_setpoint) == 0) {
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <PositionControlPID+0x100>)
 8001cfa:	edd3 7a00 	vldr	s15, [r3]
 8001cfe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d06:	d10e      	bne.n	8001d26 <PositionControlPID+0xe2>
 8001d08:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1c:	d103      	bne.n	8001d26 <PositionControlPID+0xe2>
		*PID_out = 0; // Reset voltage to 0
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
	}

	// set present to past
	error_third = error_second;
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <PositionControlPID+0x108>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <PositionControlPID+0x110>)
 8001d2c:	6013      	str	r3, [r2, #0]
	error_second = error_first;
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <PositionControlPID+0x100>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <PositionControlPID+0x108>)
 8001d34:	6013      	str	r3, [r2, #0]

}
 8001d36:	bf00      	nop
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000440 	.word	0x20000440
 8001d48:	20000444 	.word	0x20000444
 8001d4c:	20000448 	.word	0x20000448
 8001d50:	2000044c 	.word	0x2000044c
 8001d54:	20000450 	.word	0x20000450
 8001d58:	20000454 	.word	0x20000454

08001d5c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d62:	463b      	mov	r3, r7
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <MX_ADC1_Init+0x98>)
 8001d70:	4a21      	ldr	r2, [pc, #132]	; (8001df8 <MX_ADC1_Init+0x9c>)
 8001d72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d74:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <MX_ADC1_Init+0x98>)
 8001d76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <MX_ADC1_Init+0x98>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <MX_ADC1_Init+0x98>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_ADC1_Init+0x98>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <MX_ADC1_Init+0x98>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <MX_ADC1_Init+0x98>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <MX_ADC1_Init+0x98>)
 8001d9e:	4a17      	ldr	r2, [pc, #92]	; (8001dfc <MX_ADC1_Init+0xa0>)
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001da2:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <MX_ADC1_Init+0x98>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <MX_ADC1_Init+0x98>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <MX_ADC1_Init+0x98>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <MX_ADC1_Init+0x98>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dbc:	480d      	ldr	r0, [pc, #52]	; (8001df4 <MX_ADC1_Init+0x98>)
 8001dbe:	f002 ffb7 	bl	8004d30 <HAL_ADC_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001dc8:	f001 fdca 	bl	8003960 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001dcc:	230a      	movs	r3, #10
 8001dce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dd8:	463b      	mov	r3, r7
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	; (8001df4 <MX_ADC1_Init+0x98>)
 8001dde:	f002 ffeb 	bl	8004db8 <HAL_ADC_ConfigChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001de8:	f001 fdba 	bl	8003960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000458 	.word	0x20000458
 8001df8:	40012000 	.word	0x40012000
 8001dfc:	0f000001 	.word	0x0f000001

08001e00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <HAL_ADC_MspInit+0x7c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d127      	bne.n	8001e72 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <HAL_ADC_MspInit+0x80>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4a15      	ldr	r2, [pc, #84]	; (8001e80 <HAL_ADC_MspInit+0x80>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_ADC_MspInit+0x80>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_ADC_MspInit+0x80>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <HAL_ADC_MspInit+0x80>)
 8001e48:	f043 0304 	orr.w	r3, r3, #4
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_ADC_MspInit+0x80>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <HAL_ADC_MspInit+0x84>)
 8001e6e:	f003 fef1 	bl	8005c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	; 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40012000 	.word	0x40012000
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020800 	.word	0x40020800

08001e88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <MX_DMA_Init+0x4c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <MX_DMA_Init+0x4c>)
 8001e98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <MX_DMA_Init+0x4c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	200f      	movs	r0, #15
 8001eb0:	f003 fa8b 	bl	80053ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001eb4:	200f      	movs	r0, #15
 8001eb6:	f003 faa4 	bl	8005402 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2011      	movs	r0, #17
 8001ec0:	f003 fa83 	bl	80053ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001ec4:	2011      	movs	r0, #17
 8001ec6:	f003 fa9c 	bl	8005402 <HAL_NVIC_EnableIRQ>

}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800

08001ed8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <MX_GPIO_Init+0x118>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a3e      	ldr	r2, [pc, #248]	; (8001ff0 <MX_GPIO_Init+0x118>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b3c      	ldr	r3, [pc, #240]	; (8001ff0 <MX_GPIO_Init+0x118>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <MX_GPIO_Init+0x118>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	4a37      	ldr	r2, [pc, #220]	; (8001ff0 <MX_GPIO_Init+0x118>)
 8001f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f18:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1a:	4b35      	ldr	r3, [pc, #212]	; (8001ff0 <MX_GPIO_Init+0x118>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <MX_GPIO_Init+0x118>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a30      	ldr	r2, [pc, #192]	; (8001ff0 <MX_GPIO_Init+0x118>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <MX_GPIO_Init+0x118>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <MX_GPIO_Init+0x118>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a29      	ldr	r2, [pc, #164]	; (8001ff0 <MX_GPIO_Init+0x118>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <MX_GPIO_Init+0x118>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8001f64:	4823      	ldr	r0, [pc, #140]	; (8001ff4 <MX_GPIO_Init+0x11c>)
 8001f66:	f003 fff9 	bl	8005f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC3 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_3;
 8001f6a:	f242 0308 	movw	r3, #8200	; 0x2008
 8001f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f70:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	481d      	ldr	r0, [pc, #116]	; (8001ff8 <MX_GPIO_Init+0x120>)
 8001f82:	f003 fe67 	bl	8005c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f86:	2304      	movs	r3, #4
 8001f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4817      	ldr	r0, [pc, #92]	; (8001ff8 <MX_GPIO_Init+0x120>)
 8001f9c:	f003 fe5a 	bl	8005c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 8001fa0:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480e      	ldr	r0, [pc, #56]	; (8001ff4 <MX_GPIO_Init+0x11c>)
 8001fba:	f003 fe4b 	bl	8005c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480a      	ldr	r0, [pc, #40]	; (8001ffc <MX_GPIO_Init+0x124>)
 8001fd4:	f003 fe3e 	bl	8005c54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2009      	movs	r0, #9
 8001fde:	f003 f9f4 	bl	80053ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001fe2:	2009      	movs	r0, #9
 8001fe4:	f003 fa0d 	bl	8005402 <HAL_NVIC_EnableIRQ>

}
 8001fe8:	bf00      	nop
 8001fea:	3728      	adds	r7, #40	; 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	40020800 	.word	0x40020800
 8001ffc:	40020400 	.word	0x40020400

08002000 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <MX_I2C1_Init+0x50>)
 8002006:	4a13      	ldr	r2, [pc, #76]	; (8002054 <MX_I2C1_Init+0x54>)
 8002008:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <MX_I2C1_Init+0x50>)
 800200c:	4a12      	ldr	r2, [pc, #72]	; (8002058 <MX_I2C1_Init+0x58>)
 800200e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <MX_I2C1_Init+0x50>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <MX_I2C1_Init+0x50>)
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_I2C1_Init+0x50>)
 800201e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002022:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <MX_I2C1_Init+0x50>)
 8002026:	2200      	movs	r2, #0
 8002028:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_I2C1_Init+0x50>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <MX_I2C1_Init+0x50>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <MX_I2C1_Init+0x50>)
 8002038:	2200      	movs	r2, #0
 800203a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800203c:	4804      	ldr	r0, [pc, #16]	; (8002050 <MX_I2C1_Init+0x50>)
 800203e:	f003 ffbf 	bl	8005fc0 <HAL_I2C_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002048:	f001 fc8a 	bl	8003960 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200004a0 	.word	0x200004a0
 8002054:	40005400 	.word	0x40005400
 8002058:	000186a0 	.word	0x000186a0

0800205c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a19      	ldr	r2, [pc, #100]	; (80020e0 <HAL_I2C_MspInit+0x84>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d12b      	bne.n	80020d6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <HAL_I2C_MspInit+0x88>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <HAL_I2C_MspInit+0x88>)
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_I2C_MspInit+0x88>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800209a:	23c0      	movs	r3, #192	; 0xc0
 800209c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800209e:	2312      	movs	r3, #18
 80020a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a6:	2303      	movs	r3, #3
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020aa:	2304      	movs	r3, #4
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4619      	mov	r1, r3
 80020b4:	480c      	ldr	r0, [pc, #48]	; (80020e8 <HAL_I2C_MspInit+0x8c>)
 80020b6:	f003 fdcd 	bl	8005c54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_I2C_MspInit+0x88>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a08      	ldr	r2, [pc, #32]	; (80020e4 <HAL_I2C_MspInit+0x88>)
 80020c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_I2C_MspInit+0x88>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40005400 	.word	0x40005400
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020400 	.word	0x40020400

080020ec <motor>:
int32_t getLocalPosition();
int32_t getRawPosition();

// USER CODE ======================================================================================

void motor(float voltage) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage > 0) {
 80020f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80020fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002102:	dd11      	ble.n	8002128 <motor+0x3c>
		// forward
		if (voltage > 25000) {
 8002104:	edd7 7a01 	vldr	s15, [r7, #4]
 8002108:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800219c <motor+0xb0>
 800210c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002114:	dd01      	ble.n	800211a <motor+0x2e>
			voltage = 25000;
 8002116:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <motor+0xb4>)
 8002118:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002120:	4820      	ldr	r0, [pc, #128]	; (80021a4 <motor+0xb8>)
 8002122:	f003 ff1b 	bl	8005f5c <HAL_GPIO_WritePin>
 8002126:	e02b      	b.n	8002180 <motor+0x94>
	} else if (voltage < 0) {
 8002128:	edd7 7a01 	vldr	s15, [r7, #4]
 800212c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002134:	d521      	bpl.n	800217a <motor+0x8e>
		// backward
		voltage *= -1.0;
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe fa0e 	bl	8000558 <__aeabi_f2d>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	f7fe fd58 	bl	8000bf8 <__aeabi_d2f>
 8002148:	4603      	mov	r3, r0
 800214a:	ee07 3a90 	vmov	s15, r3
 800214e:	eef1 7a67 	vneg.f32	s15, s15
 8002152:	edc7 7a01 	vstr	s15, [r7, #4]
		if (voltage > 25000) {
 8002156:	edd7 7a01 	vldr	s15, [r7, #4]
 800215a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800219c <motor+0xb0>
 800215e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002166:	dd01      	ble.n	800216c <motor+0x80>
			voltage = 25000;
 8002168:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <motor+0xb4>)
 800216a:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
 800216c:	2201      	movs	r2, #1
 800216e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002172:	480c      	ldr	r0, [pc, #48]	; (80021a4 <motor+0xb8>)
 8002174:	f003 fef2 	bl	8005f5c <HAL_GPIO_WritePin>
 8002178:	e002      	b.n	8002180 <motor+0x94>
	} else {
		// stop
		voltage = 0;
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	607b      	str	r3, [r7, #4]
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, voltage);
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <motor+0xbc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	edd7 7a01 	vldr	s15, [r7, #4]
 8002188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800218c:	ee17 2a90 	vmov	r2, s15
 8002190:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	46c35000 	.word	0x46c35000
 80021a0:	46c35000 	.word	0x46c35000
 80021a4:	40020000 	.word	0x40020000
 80021a8:	200018d0 	.word	0x200018d0

080021ac <getLocalPosition>:

int32_t getLocalPosition() {
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2) - homeoffset;
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <getLocalPosition+0x1c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <getLocalPosition+0x20>)
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	1a9b      	subs	r3, r3, r2
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20001984 	.word	0x20001984
 80021cc:	200017fc 	.word	0x200017fc

080021d0 <getRawPosition>:

int32_t getRawPosition() {
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <getRawPosition+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	20001984 	.word	0x20001984

080021e8 <localize>:
float calculateNorm(Coordinate coord);
Coordinate negateCoordinate(Coordinate coord);

// USER CODE ======================================================================================

void localize(Coordinate *inputs, Coordinate *outputs, Coordinate *origin, float *angle) {
 80021e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021ec:	b0a2      	sub	sp, #136	; 0x88
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	603b      	str	r3, [r7, #0]
	Coordinate point1 = inputs[0];
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80021fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002202:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point2 = inputs[1];
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800220c:	3208      	adds	r2, #8
 800220e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002212:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point3 = inputs[2];
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800221c:	3210      	adds	r2, #16
 800221e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002222:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate vectA = subtractCoordinates(point2, point1);
 8002226:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 800222a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800222e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002232:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002236:	eeb0 1a46 	vmov.f32	s2, s12
 800223a:	eef0 1a66 	vmov.f32	s3, s13
 800223e:	eeb0 0a47 	vmov.f32	s0, s14
 8002242:	eef0 0a67 	vmov.f32	s1, s15
 8002246:	f000 fbc7 	bl	80029d8 <subtractCoordinates>
 800224a:	eeb0 7a40 	vmov.f32	s14, s0
 800224e:	eef0 7a60 	vmov.f32	s15, s1
 8002252:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8002256:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	Coordinate vectB = subtractCoordinates(point3, point2);
 800225a:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800225e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002262:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002266:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800226a:	eeb0 1a46 	vmov.f32	s2, s12
 800226e:	eef0 1a66 	vmov.f32	s3, s13
 8002272:	eeb0 0a47 	vmov.f32	s0, s14
 8002276:	eef0 0a67 	vmov.f32	s1, s15
 800227a:	f000 fbad 	bl	80029d8 <subtractCoordinates>
 800227e:	eeb0 7a40 	vmov.f32	s14, s0
 8002282:	eef0 7a60 	vmov.f32	s15, s1
 8002286:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800228a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	Coordinate vectC = subtractCoordinates(point3, point1);
 800228e:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8002292:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002296:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800229a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800229e:	eeb0 1a46 	vmov.f32	s2, s12
 80022a2:	eef0 1a66 	vmov.f32	s3, s13
 80022a6:	eeb0 0a47 	vmov.f32	s0, s14
 80022aa:	eef0 0a67 	vmov.f32	s1, s15
 80022ae:	f000 fb93 	bl	80029d8 <subtractCoordinates>
 80022b2:	eeb0 7a40 	vmov.f32	s14, s0
 80022b6:	eef0 7a60 	vmov.f32	s15, s1
 80022ba:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 80022be:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float lenA = calculateNorm(vectA);
 80022c2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80022c6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80022ca:	eeb0 0a47 	vmov.f32	s0, s14
 80022ce:	eef0 0a67 	vmov.f32	s1, s15
 80022d2:	f000 fbbb 	bl	8002a4c <calculateNorm>
 80022d6:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
	float lenB = calculateNorm(vectB);
 80022da:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80022de:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80022e2:	eeb0 0a47 	vmov.f32	s0, s14
 80022e6:	eef0 0a67 	vmov.f32	s1, s15
 80022ea:	f000 fbaf 	bl	8002a4c <calculateNorm>
 80022ee:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	float lenC = calculateNorm(vectC);
 80022f2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80022f6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80022fa:	eeb0 0a47 	vmov.f32	s0, s14
 80022fe:	eef0 0a67 	vmov.f32	s1, s15
 8002302:	f000 fba3 	bl	8002a4c <calculateNorm>
 8002306:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	Coordinate vector1;
	Coordinate vector2;

	if (lenA < lenB && lenB < lenC && lenA < lenC) {
 800230a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800230e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231a:	d534      	bpl.n	8002386 <localize+0x19e>
 800231c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002320:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232c:	d52b      	bpl.n	8002386 <localize+0x19e>
 800232e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002332:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002336:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233e:	d522      	bpl.n	8002386 <localize+0x19e>
		// CASE 1
		*origin = point2;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	461a      	mov	r2, r3
 8002344:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002348:	e893 0003 	ldmia.w	r3, {r0, r1}
 800234c:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectB;
 8002350:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002354:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002358:	e892 0003 	ldmia.w	r2, {r0, r1}
 800235c:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = negateCoordinate(vectA);
 8002360:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002364:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002368:	eeb0 0a47 	vmov.f32	s0, s14
 800236c:	eef0 0a67 	vmov.f32	s1, s15
 8002370:	f000 fb9f 	bl	8002ab2 <negateCoordinate>
 8002374:	eeb0 7a40 	vmov.f32	s14, s0
 8002378:	eef0 7a60 	vmov.f32	s15, s1
 800237c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8002380:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8002384:	e134      	b.n	80025f0 <localize+0x408>
	} else if (lenC < lenB && lenB < lenA && lenC < lenA) {
 8002386:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800238a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800238e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002396:	d53e      	bpl.n	8002416 <localize+0x22e>
 8002398:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800239c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80023a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a8:	d535      	bpl.n	8002416 <localize+0x22e>
 80023aa:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80023ae:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80023b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ba:	d52c      	bpl.n	8002416 <localize+0x22e>
		// CASE 2
		*origin = point3;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	461a      	mov	r2, r3
 80023c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023c8:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectB);
 80023cc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80023d0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023d4:	eeb0 0a47 	vmov.f32	s0, s14
 80023d8:	eef0 0a67 	vmov.f32	s1, s15
 80023dc:	f000 fb69 	bl	8002ab2 <negateCoordinate>
 80023e0:	eeb0 7a40 	vmov.f32	s14, s0
 80023e4:	eef0 7a60 	vmov.f32	s15, s1
 80023e8:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80023ec:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectC);
 80023f0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80023f4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023f8:	eeb0 0a47 	vmov.f32	s0, s14
 80023fc:	eef0 0a67 	vmov.f32	s1, s15
 8002400:	f000 fb57 	bl	8002ab2 <negateCoordinate>
 8002404:	eeb0 7a40 	vmov.f32	s14, s0
 8002408:	eef0 7a60 	vmov.f32	s15, s1
 800240c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8002410:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8002414:	e0ec      	b.n	80025f0 <localize+0x408>
	} else if (lenA < lenC && lenC < lenB && lenA < lenB) {
 8002416:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800241a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800241e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002426:	d52a      	bpl.n	800247e <localize+0x296>
 8002428:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800242c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002438:	d521      	bpl.n	800247e <localize+0x296>
 800243a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800243e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	d518      	bpl.n	800247e <localize+0x296>
		// CASE 3
		*origin = point1;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	461a      	mov	r2, r3
 8002450:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002454:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002458:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectC;
 800245c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002460:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002464:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002468:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectA;
 800246c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002470:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002474:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002478:	e883 0003 	stmia.w	r3, {r0, r1}
 800247c:	e0b8      	b.n	80025f0 <localize+0x408>
	} else if (lenC < lenA && lenA < lenB && lenC < lenB) {
 800247e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002482:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248e:	d52a      	bpl.n	80024e6 <localize+0x2fe>
 8002490:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002494:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002498:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800249c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a0:	d521      	bpl.n	80024e6 <localize+0x2fe>
 80024a2:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80024a6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80024aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b2:	d518      	bpl.n	80024e6 <localize+0x2fe>
		// CASE 4
		*origin = point1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	461a      	mov	r2, r3
 80024b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024c0:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectA;
 80024c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80024cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024d0:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectC;
 80024d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80024e4:	e084      	b.n	80025f0 <localize+0x408>
	} else if (lenB < lenC && lenC < lenA && lenB < lenA) {
 80024e6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80024ea:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80024ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	d53e      	bpl.n	8002576 <localize+0x38e>
 80024f8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80024fc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002500:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002508:	d535      	bpl.n	8002576 <localize+0x38e>
 800250a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800250e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251a:	d52c      	bpl.n	8002576 <localize+0x38e>
		// CASE 5
		*origin = point3;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	461a      	mov	r2, r3
 8002520:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002524:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002528:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectC);
 800252c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002530:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002534:	eeb0 0a47 	vmov.f32	s0, s14
 8002538:	eef0 0a67 	vmov.f32	s1, s15
 800253c:	f000 fab9 	bl	8002ab2 <negateCoordinate>
 8002540:	eeb0 7a40 	vmov.f32	s14, s0
 8002544:	eef0 7a60 	vmov.f32	s15, s1
 8002548:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800254c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectB);
 8002550:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002554:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002558:	eeb0 0a47 	vmov.f32	s0, s14
 800255c:	eef0 0a67 	vmov.f32	s1, s15
 8002560:	f000 faa7 	bl	8002ab2 <negateCoordinate>
 8002564:	eeb0 7a40 	vmov.f32	s14, s0
 8002568:	eef0 7a60 	vmov.f32	s15, s1
 800256c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8002570:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8002574:	e03c      	b.n	80025f0 <localize+0x408>
	} else if (lenB < lenA && lenA < lenC && lenB < lenC) {
 8002576:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800257a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800257e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002586:	d533      	bpl.n	80025f0 <localize+0x408>
 8002588:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800258c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	d52a      	bpl.n	80025f0 <localize+0x408>
 800259a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800259e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80025a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025aa:	d521      	bpl.n	80025f0 <localize+0x408>
		// CASE 6
		*origin = point2;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	461a      	mov	r2, r3
 80025b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025b8:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectA);
 80025bc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80025c0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80025c4:	eeb0 0a47 	vmov.f32	s0, s14
 80025c8:	eef0 0a67 	vmov.f32	s1, s15
 80025cc:	f000 fa71 	bl	8002ab2 <negateCoordinate>
 80025d0:	eeb0 7a40 	vmov.f32	s14, s0
 80025d4:	eef0 7a60 	vmov.f32	s15, s1
 80025d8:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80025dc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = vectB;
 80025e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80025e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025ec:	e883 0003 	stmia.w	r3, {r0, r1}
	}

	// calculate vector angle
	if (vector1.x == 0) {
 80025f0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fc:	d10e      	bne.n	800261c <localize+0x434>
		if (vector1.y > 0) {
 80025fe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002602:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260a:	dd03      	ble.n	8002614 <localize+0x42c>
			*angle = M_PI / 2.0;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4a72      	ldr	r2, [pc, #456]	; (80027d8 <localize+0x5f0>)
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e092      	b.n	800273a <localize+0x552>
		} else {
			*angle = 1.5 * M_PI;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4a71      	ldr	r2, [pc, #452]	; (80027dc <localize+0x5f4>)
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e08e      	b.n	800273a <localize+0x552>
		}
	} else if (vector1.y == 0) {
 800261c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002620:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002628:	d10f      	bne.n	800264a <localize+0x462>
		if (vector1.x >= 0) {
 800262a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800262e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002636:	db04      	blt.n	8002642 <localize+0x45a>
			*angle = 0;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	e07b      	b.n	800273a <localize+0x552>
		} else {
			*angle = M_PI;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	4a66      	ldr	r2, [pc, #408]	; (80027e0 <localize+0x5f8>)
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	e077      	b.n	800273a <localize+0x552>
		}
	} else {
		*angle = fabs(atan(vector1.y / vector1.x));
 800264a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800264e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002652:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002656:	ee16 0a90 	vmov	r0, s13
 800265a:	f7fd ff7d 	bl	8000558 <__aeabi_f2d>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	ec43 2b10 	vmov	d0, r2, r3
 8002666:	f00c fd5b 	bl	800f120 <atan>
 800266a:	ec53 2b10 	vmov	r2, r3, d0
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f7fe fac1 	bl	8000bf8 <__aeabi_d2f>
 8002676:	ee07 0a90 	vmov	s15, r0
 800267a:	eef0 7ae7 	vabs.f32	s15, s15
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	edc3 7a00 	vstr	s15, [r3]
		if (vector1.x < 0 && vector1.y < 0) {
 8002684:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002688:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	d51a      	bpl.n	80026c8 <localize+0x4e0>
 8002692:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002696:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800269a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269e:	d513      	bpl.n	80026c8 <localize+0x4e0>
			*angle = M_PI + *angle;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd ff57 	bl	8000558 <__aeabi_f2d>
 80026aa:	a347      	add	r3, pc, #284	; (adr r3, 80027c8 <localize+0x5e0>)
 80026ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b0:	f7fd fdf4 	bl	800029c <__adddf3>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	f7fe fa9c 	bl	8000bf8 <__aeabi_d2f>
 80026c0:	4602      	mov	r2, r0
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e038      	b.n	800273a <localize+0x552>
		} else if (vector1.x < 0) {
 80026c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d4:	d515      	bpl.n	8002702 <localize+0x51a>
			*angle = M_PI - *angle;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff3c 	bl	8000558 <__aeabi_f2d>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	a138      	add	r1, pc, #224	; (adr r1, 80027c8 <localize+0x5e0>)
 80026e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026ea:	f7fd fdd5 	bl	8000298 <__aeabi_dsub>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	f7fe fa7f 	bl	8000bf8 <__aeabi_d2f>
 80026fa:	4602      	mov	r2, r0
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e01b      	b.n	800273a <localize+0x552>
		} else if (vector1.y < 0) {
 8002702:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002706:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270e:	d514      	bpl.n	800273a <localize+0x552>
			*angle = 2.0 * M_PI - *angle;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd ff1f 	bl	8000558 <__aeabi_f2d>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	a12c      	add	r1, pc, #176	; (adr r1, 80027d0 <localize+0x5e8>)
 8002720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002724:	f7fd fdb8 	bl	8000298 <__aeabi_dsub>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	f7fe fa62 	bl	8000bf8 <__aeabi_d2f>
 8002734:	4602      	mov	r2, r0
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	601a      	str	r2, [r3, #0]
		}
	}

	// calculate for matrix directions
	float dir = vector1.x * vector2.y - vector1.y * vector2.x;
 800273a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800273e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002746:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800274a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800274e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002756:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	if (dir < 0) {
 800275a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800275e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002766:	d516      	bpl.n	8002796 <localize+0x5ae>
		*angle = *angle + M_PI;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd fef3 	bl	8000558 <__aeabi_f2d>
 8002772:	a315      	add	r3, pc, #84	; (adr r3, 80027c8 <localize+0x5e0>)
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	f7fd fd90 	bl	800029c <__adddf3>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4610      	mov	r0, r2
 8002782:	4619      	mov	r1, r3
 8002784:	f7fe fa38 	bl	8000bf8 <__aeabi_d2f>
 8002788:	4602      	mov	r2, r0
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	601a      	str	r2, [r3, #0]
		dir = -1.0;
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <localize+0x5fc>)
 8002790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002794:	e003      	b.n	800279e <localize+0x5b6>
	} else {
		dir = 1.0;
 8002796:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800279a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	}

	// create 9 points
	float X[] = { 10.0, 30.0, 50.0 };
 800279e:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <localize+0x600>)
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80027a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float Y[] = { 10.0, 25.0, 40.0 };
 80027aa:	4a10      	ldr	r2, [pc, #64]	; (80027ec <localize+0x604>)
 80027ac:	f107 0310 	add.w	r3, r7, #16
 80027b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80027b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < 3; i++) {
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027bc:	e0e1      	b.n	8002982 <localize+0x79a>
		for (int j = 0; j < 3; j++) {
 80027be:	2300      	movs	r3, #0
 80027c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027c2:	e0d5      	b.n	8002970 <localize+0x788>
 80027c4:	f3af 8000 	nop.w
 80027c8:	54442d18 	.word	0x54442d18
 80027cc:	400921fb 	.word	0x400921fb
 80027d0:	54442d18 	.word	0x54442d18
 80027d4:	401921fb 	.word	0x401921fb
 80027d8:	3fc90fdb 	.word	0x3fc90fdb
 80027dc:	4096cbe4 	.word	0x4096cbe4
 80027e0:	40490fdb 	.word	0x40490fdb
 80027e4:	bf800000 	.word	0xbf800000
 80027e8:	08010d40 	.word	0x08010d40
 80027ec:	08010d4c 	.word	0x08010d4c
			double angleValue = (double) (*angle);  // Dereference and convert to double
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fd feaf 	bl	8000558 <__aeabi_f2d>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			outputs[i * 3 + j].x = origin->x + X[i] * dir * cos(angleValue) - Y[j] * sin(angleValue);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7fd fea6 	bl	8000558 <__aeabi_f2d>
 800280c:	4604      	mov	r4, r0
 800280e:	460d      	mov	r5, r1
 8002810:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	3388      	adds	r3, #136	; 0x88
 8002818:	443b      	add	r3, r7
 800281a:	3b6c      	subs	r3, #108	; 0x6c
 800281c:	ed93 7a00 	vldr	s14, [r3]
 8002820:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002828:	ee17 0a90 	vmov	r0, s15
 800282c:	f7fd fe94 	bl	8000558 <__aeabi_f2d>
 8002830:	4680      	mov	r8, r0
 8002832:	4689      	mov	r9, r1
 8002834:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002838:	f00c fe12 	bl	800f460 <cos>
 800283c:	ec53 2b10 	vmov	r2, r3, d0
 8002840:	4640      	mov	r0, r8
 8002842:	4649      	mov	r1, r9
 8002844:	f7fd fee0 	bl	8000608 <__aeabi_dmul>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4620      	mov	r0, r4
 800284e:	4629      	mov	r1, r5
 8002850:	f7fd fd24 	bl	800029c <__adddf3>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4690      	mov	r8, r2
 800285a:	4699      	mov	r9, r3
 800285c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	3388      	adds	r3, #136	; 0x88
 8002862:	443b      	add	r3, r7
 8002864:	3b78      	subs	r3, #120	; 0x78
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7fd fe75 	bl	8000558 <__aeabi_f2d>
 800286e:	4604      	mov	r4, r0
 8002870:	460d      	mov	r5, r1
 8002872:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002876:	f00c fe53 	bl	800f520 <sin>
 800287a:	ec53 2b10 	vmov	r2, r3, d0
 800287e:	4620      	mov	r0, r4
 8002880:	4629      	mov	r1, r5
 8002882:	f7fd fec1 	bl	8000608 <__aeabi_dmul>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4640      	mov	r0, r8
 800288c:	4649      	mov	r1, r9
 800288e:	f7fd fd03 	bl	8000298 <__aeabi_dsub>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800289e:	4613      	mov	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	441a      	add	r2, r3
 80028a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	18d4      	adds	r4, r2, r3
 80028ae:	f7fe f9a3 	bl	8000bf8 <__aeabi_d2f>
 80028b2:	4603      	mov	r3, r0
 80028b4:	6023      	str	r3, [r4, #0]
			outputs[i * 3 + j].y = origin->y + X[i] * dir * sin(angleValue) + Y[j] * cos(angleValue);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fd fe4c 	bl	8000558 <__aeabi_f2d>
 80028c0:	4604      	mov	r4, r0
 80028c2:	460d      	mov	r5, r1
 80028c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	3388      	adds	r3, #136	; 0x88
 80028cc:	443b      	add	r3, r7
 80028ce:	3b6c      	subs	r3, #108	; 0x6c
 80028d0:	ed93 7a00 	vldr	s14, [r3]
 80028d4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80028d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028dc:	ee17 0a90 	vmov	r0, s15
 80028e0:	f7fd fe3a 	bl	8000558 <__aeabi_f2d>
 80028e4:	4680      	mov	r8, r0
 80028e6:	4689      	mov	r9, r1
 80028e8:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80028ec:	f00c fe18 	bl	800f520 <sin>
 80028f0:	ec53 2b10 	vmov	r2, r3, d0
 80028f4:	4640      	mov	r0, r8
 80028f6:	4649      	mov	r1, r9
 80028f8:	f7fd fe86 	bl	8000608 <__aeabi_dmul>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4620      	mov	r0, r4
 8002902:	4629      	mov	r1, r5
 8002904:	f7fd fcca 	bl	800029c <__adddf3>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4690      	mov	r8, r2
 800290e:	4699      	mov	r9, r3
 8002910:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	3388      	adds	r3, #136	; 0x88
 8002916:	443b      	add	r3, r7
 8002918:	3b78      	subs	r3, #120	; 0x78
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fe1b 	bl	8000558 <__aeabi_f2d>
 8002922:	4604      	mov	r4, r0
 8002924:	460d      	mov	r5, r1
 8002926:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800292a:	f00c fd99 	bl	800f460 <cos>
 800292e:	ec53 2b10 	vmov	r2, r3, d0
 8002932:	4620      	mov	r0, r4
 8002934:	4629      	mov	r1, r5
 8002936:	f7fd fe67 	bl	8000608 <__aeabi_dmul>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4640      	mov	r0, r8
 8002940:	4649      	mov	r1, r9
 8002942:	f7fd fcab 	bl	800029c <__adddf3>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4610      	mov	r0, r2
 800294c:	4619      	mov	r1, r3
 800294e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	441a      	add	r2, r3
 8002958:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	18d4      	adds	r4, r2, r3
 8002962:	f7fe f949 	bl	8000bf8 <__aeabi_d2f>
 8002966:	4603      	mov	r3, r0
 8002968:	6063      	str	r3, [r4, #4]
		for (int j = 0; j < 3; j++) {
 800296a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800296c:	3301      	adds	r3, #1
 800296e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002970:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002972:	2b02      	cmp	r3, #2
 8002974:	f77f af3c 	ble.w	80027f0 <localize+0x608>
	for (int i = 0; i < 3; i++) {
 8002978:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800297c:	3301      	adds	r3, #1
 800297e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002982:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002986:	2b02      	cmp	r3, #2
 8002988:	f77f af19 	ble.w	80027be <localize+0x5d6>
		}
	}

	// dirty fix for angle error
	if (dir < 0){
 800298c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002990:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002998:	d400      	bmi.n	800299c <localize+0x7b4>
		*angle = *angle - M_PI;
	}
}
 800299a:	e012      	b.n	80029c2 <localize+0x7da>
		*angle = *angle - M_PI;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fdd9 	bl	8000558 <__aeabi_f2d>
 80029a6:	a30a      	add	r3, pc, #40	; (adr r3, 80029d0 <localize+0x7e8>)
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	f7fd fc74 	bl	8000298 <__aeabi_dsub>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	f7fe f91e 	bl	8000bf8 <__aeabi_d2f>
 80029bc:	4602      	mov	r2, r0
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	601a      	str	r2, [r3, #0]
}
 80029c2:	bf00      	nop
 80029c4:	3788      	adds	r7, #136	; 0x88
 80029c6:	46bd      	mov	sp, r7
 80029c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029cc:	f3af 8000 	nop.w
 80029d0:	54442d18 	.word	0x54442d18
 80029d4:	400921fb 	.word	0x400921fb

080029d8 <subtractCoordinates>:

Coordinate subtractCoordinates(Coordinate coord1, Coordinate coord2) {
 80029d8:	b480      	push	{r7}
 80029da:	b08b      	sub	sp, #44	; 0x2c
 80029dc:	af00      	add	r7, sp, #0
 80029de:	eeb0 6a40 	vmov.f32	s12, s0
 80029e2:	eef0 6a60 	vmov.f32	s13, s1
 80029e6:	eeb0 7a41 	vmov.f32	s14, s2
 80029ea:	eef0 7a61 	vmov.f32	s15, s3
 80029ee:	ed87 6a04 	vstr	s12, [r7, #16]
 80029f2:	edc7 6a05 	vstr	s13, [r7, #20]
 80029f6:	ed87 7a02 	vstr	s14, [r7, #8]
 80029fa:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = coord1.x - coord2.x;
 80029fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0a:	edc7 7a06 	vstr	s15, [r7, #24]
	result.y = coord1.y - coord2.y;
 8002a0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a12:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1a:	edc7 7a07 	vstr	s15, [r7, #28]
	return result;
 8002a1e:	f107 0320 	add.w	r3, r7, #32
 8002a22:	f107 0218 	add.w	r2, r7, #24
 8002a26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a2e:	6a3a      	ldr	r2, [r7, #32]
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	ee07 2a10 	vmov	s14, r2
 8002a36:	ee07 3a90 	vmov	s15, r3
}
 8002a3a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a3e:	eef0 0a67 	vmov.f32	s1, s15
 8002a42:	372c      	adds	r7, #44	; 0x2c
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <calculateNorm>:

float calculateNorm(Coordinate coord) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	eeb0 7a40 	vmov.f32	s14, s0
 8002a56:	eef0 7a60 	vmov.f32	s15, s1
 8002a5a:	ed87 7a00 	vstr	s14, [r7]
 8002a5e:	edc7 7a01 	vstr	s15, [r7, #4]
	float norm = sqrt(coord.x * coord.x + coord.y * coord.y);
 8002a62:	ed97 7a00 	vldr	s14, [r7]
 8002a66:	edd7 7a00 	vldr	s15, [r7]
 8002a6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a6e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002a72:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a7e:	ee17 0a90 	vmov	r0, s15
 8002a82:	f7fd fd69 	bl	8000558 <__aeabi_f2d>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	ec43 2b10 	vmov	d0, r2, r3
 8002a8e:	f00c fdd3 	bl	800f638 <sqrt>
 8002a92:	ec53 2b10 	vmov	r2, r3, d0
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f7fe f8ad 	bl	8000bf8 <__aeabi_d2f>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	60fb      	str	r3, [r7, #12]
	return norm;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	ee07 3a90 	vmov	s15, r3
}
 8002aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <negateCoordinate>:

Coordinate negateCoordinate(Coordinate coord) {
 8002ab2:	b480      	push	{r7}
 8002ab4:	b089      	sub	sp, #36	; 0x24
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	eeb0 7a40 	vmov.f32	s14, s0
 8002abc:	eef0 7a60 	vmov.f32	s15, s1
 8002ac0:	ed87 7a02 	vstr	s14, [r7, #8]
 8002ac4:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = -coord.x;
 8002ac8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002acc:	eef1 7a67 	vneg.f32	s15, s15
 8002ad0:	edc7 7a04 	vstr	s15, [r7, #16]
	result.y = -coord.y;
 8002ad4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ad8:	eef1 7a67 	vneg.f32	s15, s15
 8002adc:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 8002ae0:	f107 0318 	add.w	r3, r7, #24
 8002ae4:	f107 0210 	add.w	r2, r7, #16
 8002ae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002aec:	e883 0003 	stmia.w	r3, {r0, r1}
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	ee07 2a10 	vmov	s14, r2
 8002af8:	ee07 3a90 	vmov	s15, r3
}
 8002afc:	eeb0 0a47 	vmov.f32	s0, s14
 8002b00:	eef0 0a67 	vmov.f32	s1, s15
 8002b04:	3724      	adds	r7, #36	; 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <modbus_init>:
void modbus_data_sync(MB *variables);
void modbus_init();

// USER CODE ======================================================================================

void modbus_init() {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
	hmodbus.huart = &huart2;
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <modbus_init+0x28>)
 8002b16:	4a09      	ldr	r2, [pc, #36]	; (8002b3c <modbus_init+0x2c>)
 8002b18:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 8002b1a:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <modbus_init+0x28>)
 8002b1c:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <modbus_init+0x30>)
 8002b1e:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <modbus_init+0x28>)
 8002b22:	2215      	movs	r2, #21
 8002b24:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <modbus_init+0x28>)
 8002b28:	2246      	movs	r2, #70	; 0x46
 8002b2a:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, MBregisterFrame);
 8002b2c:	4905      	ldr	r1, [pc, #20]	; (8002b44 <modbus_init+0x34>)
 8002b2e:	4802      	ldr	r0, [pc, #8]	; (8002b38 <modbus_init+0x28>)
 8002b30:	f7fe fd7e 	bl	8001630 <Modbus_init>
}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	200004f4 	.word	0x200004f4
 8002b3c:	20001d68 	.word	0x20001d68
 8002b40:	20001ba0 	.word	0x20001ba0
 8002b44:	200009cc 	.word	0x200009cc

08002b48 <modbus_heartbeat_handler>:

void modbus_heartbeat_handler(MB *variables) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	static int8_t fail = 0;
	static uint32_t timestamp = 0;
	if (HAL_GetTick() >= timestamp) {
 8002b50:	f002 f8be 	bl	8004cd0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <modbus_heartbeat_handler+0x78>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d32c      	bcc.n	8002bb8 <modbus_heartbeat_handler+0x70>
		timestamp = HAL_GetTick() + 200;
 8002b5e:	f002 f8b7 	bl	8004cd0 <HAL_GetTick>
 8002b62:	4603      	mov	r3, r0
 8002b64:	33c8      	adds	r3, #200	; 0xc8
 8002b66:	4a16      	ldr	r2, [pc, #88]	; (8002bc0 <modbus_heartbeat_handler+0x78>)
 8002b68:	6013      	str	r3, [r2, #0]

		// check if the base system send heartbeat
		if (MBregisterFrame[0].U16 == 18537) {
 8002b6a:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <modbus_heartbeat_handler+0x7c>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	f644 0269 	movw	r2, #18537	; 0x4869
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d106      	bne.n	8002b84 <modbus_heartbeat_handler+0x3c>
			// success
			variables->heartbeat = 1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	849a      	strh	r2, [r3, #36]	; 0x24
			fail = 0;
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <modbus_heartbeat_handler+0x80>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e015      	b.n	8002bb0 <modbus_heartbeat_handler+0x68>
		} else {
			// fail, count failure
			if (fail < 126) {
 8002b84:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <modbus_heartbeat_handler+0x80>)
 8002b86:	f993 3000 	ldrsb.w	r3, [r3]
 8002b8a:	2b7d      	cmp	r3, #125	; 0x7d
 8002b8c:	dc08      	bgt.n	8002ba0 <modbus_heartbeat_handler+0x58>
				fail++;
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <modbus_heartbeat_handler+0x80>)
 8002b90:	f993 3000 	ldrsb.w	r3, [r3]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	b25a      	sxtb	r2, r3
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <modbus_heartbeat_handler+0x80>)
 8002b9e:	701a      	strb	r2, [r3, #0]
			}
			// if fail is too high then system is disconnected
			if (fail > 9) {
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <modbus_heartbeat_handler+0x80>)
 8002ba2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ba6:	2b09      	cmp	r3, #9
 8002ba8:	dd02      	ble.n	8002bb0 <modbus_heartbeat_handler+0x68>
				variables->heartbeat = 0;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	849a      	strh	r2, [r3, #36]	; 0x24
			}
		}

		// set heartbeat for base system to see
		MBregisterFrame[0].U16 = 22881;
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <modbus_heartbeat_handler+0x7c>)
 8002bb2:	f645 1261 	movw	r2, #22881	; 0x5961
 8002bb6:	801a      	strh	r2, [r3, #0]
	}
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	200018a8 	.word	0x200018a8
 8002bc4:	200009cc 	.word	0x200009cc
 8002bc8:	200018ac 	.word	0x200018ac

08002bcc <modbus_data_sync>:

void modbus_data_sync(MB *variables) {
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	// report data back to base system
	MBregisterFrame[0x10].U16 = variables->y_moving_status;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	4b81      	ldr	r3, [pc, #516]	; (8002de4 <modbus_data_sync+0x218>)
 8002bde:	841a      	strh	r2, [r3, #32]
	MBregisterFrame[0x11].U16 = variables->y_actual_position;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	4b7e      	ldr	r3, [pc, #504]	; (8002de4 <modbus_data_sync+0x218>)
 8002bea:	845a      	strh	r2, [r3, #34]	; 0x22
	MBregisterFrame[0x12].U16 = variables->y_actual_speed;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	4b7b      	ldr	r3, [pc, #492]	; (8002de4 <modbus_data_sync+0x218>)
 8002bf6:	849a      	strh	r2, [r3, #36]	; 0x24
	MBregisterFrame[0x13].U16 = variables->y_actual_acceleration;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	4b78      	ldr	r3, [pc, #480]	; (8002de4 <modbus_data_sync+0x218>)
 8002c02:	84da      	strh	r2, [r3, #38]	; 0x26
	MBregisterFrame[0x20].U16 = variables->pick_tray_origin_x;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	4b75      	ldr	r3, [pc, #468]	; (8002de4 <modbus_data_sync+0x218>)
 8002c0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	MBregisterFrame[0x21].U16 = variables->pick_tray_origin_y;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	4b72      	ldr	r3, [pc, #456]	; (8002de4 <modbus_data_sync+0x218>)
 8002c1c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	MBregisterFrame[0x22].U16 = variables->pick_tray_orientation;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	4b6e      	ldr	r3, [pc, #440]	; (8002de4 <modbus_data_sync+0x218>)
 8002c2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	MBregisterFrame[0x23].U16 = variables->place_tray_origin_x;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	4b6b      	ldr	r3, [pc, #428]	; (8002de4 <modbus_data_sync+0x218>)
 8002c38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	MBregisterFrame[0x24].U16 = variables->place_tray_origin_y;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	4b67      	ldr	r3, [pc, #412]	; (8002de4 <modbus_data_sync+0x218>)
 8002c46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	MBregisterFrame[0x25].U16 = variables->place_tray_orientation;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	4b64      	ldr	r3, [pc, #400]	; (8002de4 <modbus_data_sync+0x218>)
 8002c54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	MBregisterFrame[0x41].U16 = variables->x_target_position;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	4b60      	ldr	r3, [pc, #384]	; (8002de4 <modbus_data_sync+0x218>)
 8002c62:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	MBregisterFrame[0x42].U16 = variables->x_target_speed;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	4b5d      	ldr	r3, [pc, #372]	; (8002de4 <modbus_data_sync+0x218>)
 8002c70:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	MBregisterFrame[0x43].U16 = variables->x_target_acceleration_time;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	4b59      	ldr	r3, [pc, #356]	; (8002de4 <modbus_data_sync+0x218>)
 8002c7e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

	// get data from base system
	variables->goal_point_x = MBregisterFrame[0x30].U16;
 8002c82:	4b58      	ldr	r3, [pc, #352]	; (8002de4 <modbus_data_sync+0x218>)
 8002c84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002c88:	b21a      	sxth	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	805a      	strh	r2, [r3, #2]
	variables->goal_point_y = MBregisterFrame[0x31].U16;
 8002c8e:	4b55      	ldr	r3, [pc, #340]	; (8002de4 <modbus_data_sync+0x218>)
 8002c90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002c94:	b21a      	sxth	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	809a      	strh	r2, [r3, #4]
	variables->x_actual_position = MBregisterFrame[0x44].U16;
 8002c9a:	4b52      	ldr	r3, [pc, #328]	; (8002de4 <modbus_data_sync+0x218>)
 8002c9c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002ca0:	b21a      	sxth	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	80da      	strh	r2, [r3, #6]
	variables->x_actual_speed = MBregisterFrame[0x45].U16;
 8002ca6:	4b4f      	ldr	r3, [pc, #316]	; (8002de4 <modbus_data_sync+0x218>)
 8002ca8:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002cac:	b21a      	sxth	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	811a      	strh	r2, [r3, #8]

	static int16_t base_system_status_slave_temp;
	static int16_t base_system_status_master_temp;
	if (base_system_status_master_temp != MBregisterFrame[0x01].U16) {
 8002cb2:	4b4d      	ldr	r3, [pc, #308]	; (8002de8 <modbus_data_sync+0x21c>)
 8002cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b4a      	ldr	r3, [pc, #296]	; (8002de4 <modbus_data_sync+0x218>)
 8002cbc:	885b      	ldrh	r3, [r3, #2]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d00f      	beq.n	8002ce2 <modbus_data_sync+0x116>
		variables->base_system_status = MBregisterFrame[0x01].U16;
 8002cc2:	4b48      	ldr	r3, [pc, #288]	; (8002de4 <modbus_data_sync+0x218>)
 8002cc4:	885b      	ldrh	r3, [r3, #2]
 8002cc6:	b21a      	sxth	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	801a      	strh	r2, [r3, #0]
		base_system_status_master_temp = variables->base_system_status;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002cd2:	4b45      	ldr	r3, [pc, #276]	; (8002de8 <modbus_data_sync+0x21c>)
 8002cd4:	801a      	strh	r2, [r3, #0]
		base_system_status_slave_temp = variables->base_system_status;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002cdc:	4b43      	ldr	r3, [pc, #268]	; (8002dec <modbus_data_sync+0x220>)
 8002cde:	801a      	strh	r2, [r3, #0]
 8002ce0:	e017      	b.n	8002d12 <modbus_data_sync+0x146>
	} else if (base_system_status_slave_temp != variables->base_system_status) {
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002ce8:	4b40      	ldr	r3, [pc, #256]	; (8002dec <modbus_data_sync+0x220>)
 8002cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d00f      	beq.n	8002d12 <modbus_data_sync+0x146>
		MBregisterFrame[0x01].U16 = variables->base_system_status;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	4b3a      	ldr	r3, [pc, #232]	; (8002de4 <modbus_data_sync+0x218>)
 8002cfc:	805a      	strh	r2, [r3, #2]
		base_system_status_master_temp = variables->base_system_status;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d04:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <modbus_data_sync+0x21c>)
 8002d06:	801a      	strh	r2, [r3, #0]
		base_system_status_slave_temp = variables->base_system_status;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d0e:	4b37      	ldr	r3, [pc, #220]	; (8002dec <modbus_data_sync+0x220>)
 8002d10:	801a      	strh	r2, [r3, #0]
	}

	// update read/write variable
	static int16_t end_effector_status_slave_temp;
	static int16_t end_effector_status_master_temp;
	if (end_effector_status_master_temp != MBregisterFrame[0x02].U16) {
 8002d12:	4b37      	ldr	r3, [pc, #220]	; (8002df0 <modbus_data_sync+0x224>)
 8002d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b32      	ldr	r3, [pc, #200]	; (8002de4 <modbus_data_sync+0x218>)
 8002d1c:	889b      	ldrh	r3, [r3, #4]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d00f      	beq.n	8002d42 <modbus_data_sync+0x176>
		// there is an update from master
		variables->end_effector_status = MBregisterFrame[0x02].U16;
 8002d22:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <modbus_data_sync+0x218>)
 8002d24:	889b      	ldrh	r3, [r3, #4]
 8002d26:	b21a      	sxth	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	84da      	strh	r2, [r3, #38]	; 0x26
		end_effector_status_master_temp = variables->end_effector_status;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002d32:	4b2f      	ldr	r3, [pc, #188]	; (8002df0 <modbus_data_sync+0x224>)
 8002d34:	801a      	strh	r2, [r3, #0]
		end_effector_status_slave_temp = variables->end_effector_status;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002d3c:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <modbus_data_sync+0x228>)
 8002d3e:	801a      	strh	r2, [r3, #0]
 8002d40:	e017      	b.n	8002d72 <modbus_data_sync+0x1a6>
	} else if (end_effector_status_slave_temp != variables->end_effector_status) {
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002d48:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <modbus_data_sync+0x228>)
 8002d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d00f      	beq.n	8002d72 <modbus_data_sync+0x1a6>
		// there is an update locally
		MBregisterFrame[0x02].U16 = variables->end_effector_status;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <modbus_data_sync+0x218>)
 8002d5c:	809a      	strh	r2, [r3, #4]
		end_effector_status_slave_temp = variables->end_effector_status;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002d64:	4b23      	ldr	r3, [pc, #140]	; (8002df4 <modbus_data_sync+0x228>)
 8002d66:	801a      	strh	r2, [r3, #0]
		end_effector_status_master_temp = variables->end_effector_status;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002d6e:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <modbus_data_sync+0x224>)
 8002d70:	801a      	strh	r2, [r3, #0]
	}
	static int16_t x_moving_status_slave_temp;
	static int16_t x_moving_status_master_temp;
	if (x_moving_status_master_temp != MBregisterFrame[0x40].U16) {
 8002d72:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <modbus_data_sync+0x22c>)
 8002d74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <modbus_data_sync+0x218>)
 8002d7c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d010      	beq.n	8002da6 <modbus_data_sync+0x1da>
		// there is an update from master
		variables->x_moving_status = MBregisterFrame[0x40].U16;
 8002d84:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <modbus_data_sync+0x218>)
 8002d86:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002d8a:	b21a      	sxth	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	851a      	strh	r2, [r3, #40]	; 0x28
		x_moving_status_master_temp = variables->x_moving_status;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002d96:	4b18      	ldr	r3, [pc, #96]	; (8002df8 <modbus_data_sync+0x22c>)
 8002d98:	801a      	strh	r2, [r3, #0]
		x_moving_status_slave_temp = variables->x_moving_status;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002da0:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <modbus_data_sync+0x230>)
 8002da2:	801a      	strh	r2, [r3, #0]
		// there is an update locally
		MBregisterFrame[0x40].U16 = variables->x_moving_status;
		x_moving_status_slave_temp = variables->x_moving_status;
		x_moving_status_master_temp = variables->x_moving_status;
	}
}
 8002da4:	e018      	b.n	8002dd8 <modbus_data_sync+0x20c>
	} else if (x_moving_status_slave_temp != variables->x_moving_status) {
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <modbus_data_sync+0x230>)
 8002dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d010      	beq.n	8002dd8 <modbus_data_sync+0x20c>
		MBregisterFrame[0x40].U16 = variables->x_moving_status;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <modbus_data_sync+0x218>)
 8002dc0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		x_moving_status_slave_temp = variables->x_moving_status;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <modbus_data_sync+0x230>)
 8002dcc:	801a      	strh	r2, [r3, #0]
		x_moving_status_master_temp = variables->x_moving_status;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <modbus_data_sync+0x22c>)
 8002dd6:	801a      	strh	r2, [r3, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	200009cc 	.word	0x200009cc
 8002de8:	200018ae 	.word	0x200018ae
 8002dec:	200018b0 	.word	0x200018b0
 8002df0:	200018b2 	.word	0x200018b2
 8002df4:	200018b4 	.word	0x200018b4
 8002df8:	200018b6 	.word	0x200018b6
 8002dfc:	200018b8 	.word	0x200018b8

08002e00 <main_logic>:
void home_handler();
void data_report(MB *variables);

// USER CODE ======================================================================================

void main_logic(MB *variables) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	I2C_TO_BASESYSTEM(&variables->end_effector_status, &hi2c1);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3326      	adds	r3, #38	; 0x26
 8002e0c:	4950      	ldr	r1, [pc, #320]	; (8002f50 <main_logic+0x150>)
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe f9ea 	bl	80011e8 <I2C_TO_BASESYSTEM>
	RGB_logic();
 8002e14:	f000 fafe 	bl	8003414 <RGB_logic>
	data_report(variables);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f971 	bl	8003100 <data_report>

	static uint32_t wait_timer;
	switch (state) {
 8002e1e:	4b4d      	ldr	r3, [pc, #308]	; (8002f54 <main_logic+0x154>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	f200 808c 	bhi.w	8002f40 <main_logic+0x140>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <main_logic+0x30>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e4d 	.word	0x08002e4d
 8002e34:	08002e69 	.word	0x08002e69
 8002e38:	08002f2f 	.word	0x08002f2f
 8002e3c:	08002f2f 	.word	0x08002f2f
 8002e40:	08002ec5 	.word	0x08002ec5
 8002e44:	08002f2f 	.word	0x08002f2f
 8002e48:	08002ee1 	.word	0x08002ee1
	case MSwait:
		if (HAL_GetTick() - wait_timer > 1500) {
 8002e4c:	f001 ff40 	bl	8004cd0 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <main_logic+0x158>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d968      	bls.n	8002f32 <main_logic+0x132>
			state = MSidle;
 8002e60:	4b3c      	ldr	r3, [pc, #240]	; (8002f54 <main_logic+0x154>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002e66:	e064      	b.n	8002f32 <main_logic+0x132>
	case MSidle:
		wait_timer = HAL_GetTick();
 8002e68:	f001 ff32 	bl	8004cd0 <HAL_GetTick>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4a3a      	ldr	r2, [pc, #232]	; (8002f58 <main_logic+0x158>)
 8002e70:	6013      	str	r3, [r2, #0]
		variables->y_moving_status = 0;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	815a      	strh	r2, [r3, #10]

		if (variables->base_system_status & 0b100) {
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00b      	beq.n	8002ea0 <main_logic+0xa0>
			// home mode
			variables->base_system_status = 0;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	801a      	strh	r2, [r3, #0]
			state = MShome;
 8002e8e:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <main_logic+0x154>)
 8002e90:	2204      	movs	r2, #4
 8002e92:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 4;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2204      	movs	r2, #4
 8002e98:	815a      	strh	r2, [r3, #10]
			variables->x_moving_status = 1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	851a      	strh	r2, [r3, #40]	; 0x28
		}

		if (variables->base_system_status & 0b10000) {
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d042      	beq.n	8002f36 <main_logic+0x136>
			// point mode
			variables->base_system_status = 0;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	801a      	strh	r2, [r3, #0]
			state = MSpoint;
 8002eb6:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <main_logic+0x154>)
 8002eb8:	2206      	movs	r2, #6
 8002eba:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 32;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	815a      	strh	r2, [r3, #10]
		}
		break;
 8002ec2:	e038      	b.n	8002f36 <main_logic+0x136>
	case MSpick:
		break;
	case MSplace:
		break;
	case MShome:
		if (!home_status) {
 8002ec4:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <main_logic+0x15c>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d136      	bne.n	8002f3a <main_logic+0x13a>
			home_status = 1;
 8002ecc:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <main_logic+0x15c>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
			PID_enable = 0;
 8002ed2:	4b23      	ldr	r3, [pc, #140]	; (8002f60 <main_logic+0x160>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
			voltage = -13000;
 8002ed8:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <main_logic+0x164>)
 8002eda:	4a23      	ldr	r2, [pc, #140]	; (8002f68 <main_logic+0x168>)
 8002edc:	601a      	str	r2, [r3, #0]
		}
		break;
 8002ede:	e02c      	b.n	8002f3a <main_logic+0x13a>
	case MSrun:
		break;
	case MSpoint:
		setpoint = variables->goal_point_y / 0.3;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fb24 	bl	8000534 <__aeabi_i2d>
 8002eec:	a316      	add	r3, pc, #88	; (adr r3, 8002f48 <main_logic+0x148>)
 8002eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef2:	f7fd fcb3 	bl	800085c <__aeabi_ddiv>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	f7fd fe33 	bl	8000b68 <__aeabi_d2iz>
 8002f02:	4603      	mov	r3, r0
 8002f04:	4a19      	ldr	r2, [pc, #100]	; (8002f6c <main_logic+0x16c>)
 8002f06:	6013      	str	r3, [r2, #0]
		variables->x_target_position = variables->goal_point_x;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	83da      	strh	r2, [r3, #30]
		variables->x_moving_status = 2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2202      	movs	r2, #2
 8002f16:	851a      	strh	r2, [r3, #40]	; 0x28

		if (setpoint == getLocalPosition()) {
 8002f18:	f7ff f948 	bl	80021ac <getLocalPosition>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <main_logic+0x16c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d10b      	bne.n	8002f3e <main_logic+0x13e>
			state = MSwait;
 8002f26:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <main_logic+0x154>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002f2c:	e007      	b.n	8002f3e <main_logic+0x13e>
		break;
 8002f2e:	bf00      	nop
 8002f30:	e006      	b.n	8002f40 <main_logic+0x140>
		break;
 8002f32:	bf00      	nop
 8002f34:	e004      	b.n	8002f40 <main_logic+0x140>
		break;
 8002f36:	bf00      	nop
 8002f38:	e002      	b.n	8002f40 <main_logic+0x140>
		break;
 8002f3a:	bf00      	nop
 8002f3c:	e000      	b.n	8002f40 <main_logic+0x140>
		break;
 8002f3e:	bf00      	nop
	}
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	33333333 	.word	0x33333333
 8002f4c:	3fd33333 	.word	0x3fd33333
 8002f50:	200004a0 	.word	0x200004a0
 8002f54:	20000218 	.word	0x20000218
 8002f58:	200018bc 	.word	0x200018bc
 8002f5c:	20000a58 	.word	0x20000a58
 8002f60:	20000219 	.word	0x20000219
 8002f64:	20000a5c 	.word	0x20000a5c
 8002f68:	c64b2000 	.word	0xc64b2000
 8002f6c:	200017f4 	.word	0x200017f4

08002f70 <interrupt_logic>:

void interrupt_logic() {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	ed2d 8b02 	vpush	{d8}
 8002f76:	af00      	add	r7, sp, #0
	// Call trajectory function
	Trajectory(setpoint, 34000, 80000, (int*) &setpointtraj, (float*) &traj_velocity, (float*) &traj_acceleration, 0);
 8002f78:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <interrupt_logic+0xb8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f84:	2300      	movs	r3, #0
 8002f86:	4a29      	ldr	r2, [pc, #164]	; (800302c <interrupt_logic+0xbc>)
 8002f88:	4929      	ldr	r1, [pc, #164]	; (8003030 <interrupt_logic+0xc0>)
 8002f8a:	482a      	ldr	r0, [pc, #168]	; (8003034 <interrupt_logic+0xc4>)
 8002f8c:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8003038 <interrupt_logic+0xc8>
 8002f90:	eddf 0a2a 	vldr	s1, [pc, #168]	; 800303c <interrupt_logic+0xcc>
 8002f94:	eeb0 0a67 	vmov.f32	s0, s15
 8002f98:	f001 f9ba 	bl	8004310 <Trajectory>

	// Call PID function
	if (PID_enable) {
 8002f9c:	4b28      	ldr	r3, [pc, #160]	; (8003040 <interrupt_logic+0xd0>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d035      	beq.n	8003010 <interrupt_logic+0xa0>
		static int count = 0;
		count++;
 8002fa4:	4b27      	ldr	r3, [pc, #156]	; (8003044 <interrupt_logic+0xd4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	4a26      	ldr	r2, [pc, #152]	; (8003044 <interrupt_logic+0xd4>)
 8002fac:	6013      	str	r3, [r2, #0]
		if (count >= 5) {
 8002fae:	4b25      	ldr	r3, [pc, #148]	; (8003044 <interrupt_logic+0xd4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	dd2c      	ble.n	8003010 <interrupt_logic+0xa0>
			PositionControlPID(setpointtraj, setpoint, getLocalPosition(), KP, KI, KD, &voltage);
 8002fb6:	4b1f      	ldr	r3, [pc, #124]	; (8003034 <interrupt_logic+0xc4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002fc2:	4b19      	ldr	r3, [pc, #100]	; (8003028 <interrupt_logic+0xb8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8002fce:	f7ff f8ed 	bl	80021ac <getLocalPosition>
 8002fd2:	ee07 0a90 	vmov	s15, r0
 8002fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fda:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <interrupt_logic+0xd8>)
 8002fdc:	ed93 7a00 	vldr	s14, [r3]
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	; (800304c <interrupt_logic+0xdc>)
 8002fe2:	edd3 6a00 	vldr	s13, [r3]
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <interrupt_logic+0xe0>)
 8002fe8:	ed93 6a00 	vldr	s12, [r3]
 8002fec:	4819      	ldr	r0, [pc, #100]	; (8003054 <interrupt_logic+0xe4>)
 8002fee:	eef0 2a46 	vmov.f32	s5, s12
 8002ff2:	eeb0 2a66 	vmov.f32	s4, s13
 8002ff6:	eef0 1a47 	vmov.f32	s3, s14
 8002ffa:	eeb0 1a67 	vmov.f32	s2, s15
 8002ffe:	eef0 0a68 	vmov.f32	s1, s17
 8003002:	eeb0 0a48 	vmov.f32	s0, s16
 8003006:	f7fe fe1d 	bl	8001c44 <PositionControlPID>
			count = 0;
 800300a:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <interrupt_logic+0xd4>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
		}
	}

	// Call motor function
	motor(voltage);
 8003010:	4b10      	ldr	r3, [pc, #64]	; (8003054 <interrupt_logic+0xe4>)
 8003012:	edd3 7a00 	vldr	s15, [r3]
 8003016:	eeb0 0a67 	vmov.f32	s0, s15
 800301a:	f7ff f867 	bl	80020ec <motor>
}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	ecbd 8b02 	vpop	{d8}
 8003026:	bd80      	pop	{r7, pc}
 8003028:	200017f4 	.word	0x200017f4
 800302c:	20000a64 	.word	0x20000a64
 8003030:	20000a60 	.word	0x20000a60
 8003034:	200017f8 	.word	0x200017f8
 8003038:	479c4000 	.word	0x479c4000
 800303c:	4704d000 	.word	0x4704d000
 8003040:	20000219 	.word	0x20000219
 8003044:	200018c0 	.word	0x200018c0
 8003048:	2000021c 	.word	0x2000021c
 800304c:	20000220 	.word	0x20000220
 8003050:	20000224 	.word	0x20000224
 8003054:	20000a5c 	.word	0x20000a5c

08003058 <home_handler>:
		// on
		variables->end_effector_status |= 0b0001;
	}
}

void home_handler() {
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
	if (!home_status) {
 800305c:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <home_handler+0x74>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d030      	beq.n	80030c6 <home_handler+0x6e>
		return;
	}
	motor(0);
 8003064:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80030d0 <home_handler+0x78>
 8003068:	f7ff f840 	bl	80020ec <motor>
	homeoffset = getRawPosition() + 11500;
 800306c:	f7ff f8b0 	bl	80021d0 <getRawPosition>
 8003070:	4603      	mov	r3, r0
 8003072:	f503 5333 	add.w	r3, r3, #11456	; 0x2cc0
 8003076:	332c      	adds	r3, #44	; 0x2c
 8003078:	4a16      	ldr	r2, [pc, #88]	; (80030d4 <home_handler+0x7c>)
 800307a:	6013      	str	r3, [r2, #0]
	setpointtraj = -11500;
 800307c:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <home_handler+0x80>)
 800307e:	4a17      	ldr	r2, [pc, #92]	; (80030dc <home_handler+0x84>)
 8003080:	601a      	str	r2, [r3, #0]
	setpoint = -11500;
 8003082:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <home_handler+0x88>)
 8003084:	4a15      	ldr	r2, [pc, #84]	; (80030dc <home_handler+0x84>)
 8003086:	601a      	str	r2, [r3, #0]
	Trajectory(setpoint, 34000, 80000, (int*) &setpointtraj, (float*) &traj_velocity, (float*) &traj_acceleration, 1);
 8003088:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <home_handler+0x88>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	ee07 3a90 	vmov	s15, r3
 8003090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003094:	2301      	movs	r3, #1
 8003096:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <home_handler+0x8c>)
 8003098:	4913      	ldr	r1, [pc, #76]	; (80030e8 <home_handler+0x90>)
 800309a:	480f      	ldr	r0, [pc, #60]	; (80030d8 <home_handler+0x80>)
 800309c:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80030ec <home_handler+0x94>
 80030a0:	eddf 0a13 	vldr	s1, [pc, #76]	; 80030f0 <home_handler+0x98>
 80030a4:	eeb0 0a67 	vmov.f32	s0, s15
 80030a8:	f001 f932 	bl	8004310 <Trajectory>
	home_status = 0;
 80030ac:	4b07      	ldr	r3, [pc, #28]	; (80030cc <home_handler+0x74>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
	PID_enable = 1;
 80030b2:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <home_handler+0x9c>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
	state = MSwait;
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <home_handler+0xa0>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]
	setpoint = 0;
 80030be:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <home_handler+0x88>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	e000      	b.n	80030c8 <home_handler+0x70>
		return;
 80030c6:	bf00      	nop
}
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000a58 	.word	0x20000a58
 80030d0:	00000000 	.word	0x00000000
 80030d4:	200017fc 	.word	0x200017fc
 80030d8:	200017f8 	.word	0x200017f8
 80030dc:	ffffd314 	.word	0xffffd314
 80030e0:	200017f4 	.word	0x200017f4
 80030e4:	20000a64 	.word	0x20000a64
 80030e8:	20000a60 	.word	0x20000a60
 80030ec:	479c4000 	.word	0x479c4000
 80030f0:	4704d000 	.word	0x4704d000
 80030f4:	20000219 	.word	0x20000219
 80030f8:	20000218 	.word	0x20000218
 80030fc:	00000000 	.word	0x00000000

08003100 <data_report>:

void data_report(MB *variables) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	variables->y_actual_position = getLocalPosition() * 0.3;
 8003108:	f7ff f850 	bl	80021ac <getLocalPosition>
 800310c:	4603      	mov	r3, r0
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd fa10 	bl	8000534 <__aeabi_i2d>
 8003114:	a31e      	add	r3, pc, #120	; (adr r3, 8003190 <data_report+0x90>)
 8003116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311a:	f7fd fa75 	bl	8000608 <__aeabi_dmul>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	f7fd fd1f 	bl	8000b68 <__aeabi_d2iz>
 800312a:	4603      	mov	r3, r0
 800312c:	b21a      	sxth	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	819a      	strh	r2, [r3, #12]
	variables->y_actual_speed = traj_velocity * 0.3;
 8003132:	4b19      	ldr	r3, [pc, #100]	; (8003198 <data_report+0x98>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd f9fc 	bl	8000534 <__aeabi_i2d>
 800313c:	a314      	add	r3, pc, #80	; (adr r3, 8003190 <data_report+0x90>)
 800313e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003142:	f7fd fa61 	bl	8000608 <__aeabi_dmul>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4610      	mov	r0, r2
 800314c:	4619      	mov	r1, r3
 800314e:	f7fd fd0b 	bl	8000b68 <__aeabi_d2iz>
 8003152:	4603      	mov	r3, r0
 8003154:	b21a      	sxth	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	81da      	strh	r2, [r3, #14]
	variables->y_actual_acceleration = traj_acceleration * 0.3;
 800315a:	4b10      	ldr	r3, [pc, #64]	; (800319c <data_report+0x9c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd f9e8 	bl	8000534 <__aeabi_i2d>
 8003164:	a30a      	add	r3, pc, #40	; (adr r3, 8003190 <data_report+0x90>)
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	f7fd fa4d 	bl	8000608 <__aeabi_dmul>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4610      	mov	r0, r2
 8003174:	4619      	mov	r1, r3
 8003176:	f7fd fcf7 	bl	8000b68 <__aeabi_d2iz>
 800317a:	4603      	mov	r3, r0
 800317c:	b21a      	sxth	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	821a      	strh	r2, [r3, #16]
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	f3af 8000 	nop.w
 8003190:	33333333 	.word	0x33333333
 8003194:	3fd33333 	.word	0x3fd33333
 8003198:	20000a60 	.word	0x20000a60
 800319c:	20000a64 	.word	0x20000a64

080031a0 <Set_LED>:
void Set_LED(int LEDnum, int Red, int Green, int Blue);
void Set_Brightness(int brightness);
void WS2812_Send(void);
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim);

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	b2d9      	uxtb	r1, r3
 80031b2:	4a11      	ldr	r2, [pc, #68]	; (80031f8 <Set_LED+0x58>)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	b2d9      	uxtb	r1, r3
 80031be:	4a0e      	ldr	r2, [pc, #56]	; (80031f8 <Set_LED+0x58>)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	460a      	mov	r2, r1
 80031c8:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	b2d9      	uxtb	r1, r3
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <Set_LED+0x58>)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	460a      	mov	r2, r1
 80031d8:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	b2d9      	uxtb	r1, r3
 80031de:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <Set_LED+0x58>)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	460a      	mov	r2, r1
 80031e8:	70da      	strb	r2, [r3, #3]
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000a68 	.word	0x20000a68
 80031fc:	00000000 	.word	0x00000000

08003200 <Set_Brightness>:

void Set_Brightness(int brightness)  // 0-45
{
 8003200:	b5b0      	push	{r4, r5, r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
	if (brightness > 45)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b2d      	cmp	r3, #45	; 0x2d
 800320c:	dd01      	ble.n	8003212 <Set_Brightness+0x12>
		brightness = 45;
 800320e:	232d      	movs	r3, #45	; 0x2d
 8003210:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	e060      	b.n	80032da <Set_Brightness+0xda>
		LED_Mod[i][0] = LED_Data[i][0];
 8003218:	4a37      	ldr	r2, [pc, #220]	; (80032f8 <Set_Brightness+0xf8>)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8003220:	4a36      	ldr	r2, [pc, #216]	; (80032fc <Set_Brightness+0xfc>)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 8003228:	2301      	movs	r3, #1
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	e04f      	b.n	80032ce <Set_Brightness+0xce>
			float angle = 90 - brightness;  // in degrees
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8003234:	ee07 3a90 	vmov	s15, r3
 8003238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800323c:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle * 3.14159265 / 180;  // in rad
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7fd f989 	bl	8000558 <__aeabi_f2d>
 8003246:	a32a      	add	r3, pc, #168	; (adr r3, 80032f0 <Set_Brightness+0xf0>)
 8003248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324c:	f7fd f9dc 	bl	8000608 <__aeabi_dmul>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4610      	mov	r0, r2
 8003256:	4619      	mov	r1, r3
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	4b28      	ldr	r3, [pc, #160]	; (8003300 <Set_Brightness+0x100>)
 800325e:	f7fd fafd 	bl	800085c <__aeabi_ddiv>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4610      	mov	r0, r2
 8003268:	4619      	mov	r1, r3
 800326a:	f7fd fcc5 	bl	8000bf8 <__aeabi_d2f>
 800326e:	4603      	mov	r3, r0
 8003270:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / tan(angle);
 8003272:	4a21      	ldr	r2, [pc, #132]	; (80032f8 <Set_Brightness+0xf8>)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	441a      	add	r2, r3
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4413      	add	r3, r2
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7fd f957 	bl	8000534 <__aeabi_i2d>
 8003286:	4604      	mov	r4, r0
 8003288:	460d      	mov	r5, r1
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f7fd f964 	bl	8000558 <__aeabi_f2d>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	ec43 2b10 	vmov	d0, r2, r3
 8003298:	f00c f99a 	bl	800f5d0 <tan>
 800329c:	ec53 2b10 	vmov	r2, r3, d0
 80032a0:	4620      	mov	r0, r4
 80032a2:	4629      	mov	r1, r5
 80032a4:	f7fd fada 	bl	800085c <__aeabi_ddiv>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4610      	mov	r0, r2
 80032ae:	4619      	mov	r1, r3
 80032b0:	f7fd fc82 	bl	8000bb8 <__aeabi_d2uiz>
 80032b4:	4603      	mov	r3, r0
 80032b6:	b2d9      	uxtb	r1, r3
 80032b8:	4a10      	ldr	r2, [pc, #64]	; (80032fc <Set_Brightness+0xfc>)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	441a      	add	r2, r3
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4413      	add	r3, r2
 80032c4:	460a      	mov	r2, r1
 80032c6:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	3301      	adds	r3, #1
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	ddac      	ble.n	800322e <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	3301      	adds	r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b3b      	cmp	r3, #59	; 0x3b
 80032de:	dd9b      	ble.n	8003218 <Set_Brightness+0x18>
		}
	}
#endif
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bdb0      	pop	{r4, r5, r7, pc}
 80032ea:	bf00      	nop
 80032ec:	f3af 8000 	nop.w
 80032f0:	53c8d4f1 	.word	0x53c8d4f1
 80032f4:	400921fb 	.word	0x400921fb
 80032f8:	20000a68 	.word	0x20000a68
 80032fc:	20000b58 	.word	0x20000b58
 8003300:	40668000 	.word	0x40668000

08003304 <WS2812_Send>:

void WS2812_Send(void) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
	if (!datasentflag) {
 800330a:	4b32      	ldr	r3, [pc, #200]	; (80033d4 <WS2812_Send+0xd0>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d05a      	beq.n	80033ca <WS2812_Send+0xc6>
		return;
	}
	uint32_t indx = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 8003318:	2300      	movs	r3, #0
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	e036      	b.n	800338c <WS2812_Send+0x88>
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 800331e:	4a2e      	ldr	r2, [pc, #184]	; (80033d8 <WS2812_Send+0xd4>)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	785b      	ldrb	r3, [r3, #1]
 8003328:	041a      	lsls	r2, r3, #16
 800332a:	492b      	ldr	r1, [pc, #172]	; (80033d8 <WS2812_Send+0xd4>)
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	789b      	ldrb	r3, [r3, #2]
 8003334:	021b      	lsls	r3, r3, #8
 8003336:	431a      	orrs	r2, r3
 8003338:	4927      	ldr	r1, [pc, #156]	; (80033d8 <WS2812_Send+0xd4>)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	78db      	ldrb	r3, [r3, #3]
 8003342:	4313      	orrs	r3, r2
 8003344:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1] << 16) | (LED_Data[i][2] << 8) | (LED_Data[i][3]));
#endif

		for (int i = 23; i >= 0; i--) {
 8003346:	2317      	movs	r3, #23
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	e019      	b.n	8003380 <WS2812_Send+0x7c>
			if (color & (1 << i)) {
 800334c:	2201      	movs	r2, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	461a      	mov	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <WS2812_Send+0x66>
				pwmData[indx] = 83;  // 2/3 of 125
 800335e:	4a1f      	ldr	r2, [pc, #124]	; (80033dc <WS2812_Send+0xd8>)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2153      	movs	r1, #83	; 0x53
 8003364:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003368:	e004      	b.n	8003374 <WS2812_Send+0x70>
			} else {
				pwmData[indx] = 42;  // 1/3 of 125
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <WS2812_Send+0xd8>)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	212a      	movs	r1, #42	; 0x2a
 8003370:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			indx++;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3301      	adds	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3b01      	subs	r3, #1
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	dae2      	bge.n	800334c <WS2812_Send+0x48>
	for (int i = 0; i < MAX_LED; i++) {
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	3301      	adds	r3, #1
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b3b      	cmp	r3, #59	; 0x3b
 8003390:	ddc5      	ble.n	800331e <WS2812_Send+0x1a>
		}
	}

	for (int i = 0; i < 50; i++) {
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	e00a      	b.n	80033ae <WS2812_Send+0xaa>
		pwmData[indx] = 0;
 8003398:	4a10      	ldr	r2, [pc, #64]	; (80033dc <WS2812_Send+0xd8>)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2100      	movs	r1, #0
 800339e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	3301      	adds	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) {
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	3301      	adds	r3, #1
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b31      	cmp	r3, #49	; 0x31
 80033b2:	ddf1      	ble.n	8003398 <WS2812_Send+0x94>
	}

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	4a08      	ldr	r2, [pc, #32]	; (80033dc <WS2812_Send+0xd8>)
 80033ba:	2100      	movs	r1, #0
 80033bc:	4808      	ldr	r0, [pc, #32]	; (80033e0 <WS2812_Send+0xdc>)
 80033be:	f004 f977 	bl	80076b0 <HAL_TIM_PWM_Start_DMA>
	datasentflag = 0;
 80033c2:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <WS2812_Send+0xd0>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
 80033c8:	e000      	b.n	80033cc <WS2812_Send+0xc8>
		return;
 80033ca:	bf00      	nop
}
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	2000021a 	.word	0x2000021a
 80033d8:	20000b58 	.word	0x20000b58
 80033dc:	20000c48 	.word	0x20000c48
 80033e0:	20001a38 	.word	0x20001a38

080033e4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a07      	ldr	r2, [pc, #28]	; (800340c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d106      	bne.n	8003402 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 80033f4:	2100      	movs	r1, #0
 80033f6:	4805      	ldr	r0, [pc, #20]	; (800340c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80033f8:	f004 fb0a 	bl	8007a10 <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
	}
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20001a38 	.word	0x20001a38
 8003410:	2000021a 	.word	0x2000021a

08003414 <RGB_logic>:
void RGB_Bootup();
void RGB_logic(MachineState state, uint8_t point);

// USER CODE ======================================================================================

void RGB_logic(MachineState state, uint8_t point) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	460a      	mov	r2, r1
 800341e:	71fb      	strb	r3, [r7, #7]
 8003420:	4613      	mov	r3, r2
 8003422:	71bb      	strb	r3, [r7, #6]
	// Run on 200 Hz
	static uint32_t timestamp;
	if (HAL_GetTick() - timestamp < 5) {
 8003424:	f001 fc54 	bl	8004cd0 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <RGB_logic+0x64>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b04      	cmp	r3, #4
 8003432:	d91c      	bls.n	800346e <RGB_logic+0x5a>
		return;
	}
	timestamp = HAL_GetTick() + 5;
 8003434:	f001 fc4c 	bl	8004cd0 <HAL_GetTick>
 8003438:	4603      	mov	r3, r0
 800343a:	3305      	adds	r3, #5
 800343c:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <RGB_logic+0x64>)
 800343e:	6013      	str	r3, [r2, #0]

	// Main logic here
	RGB_Rainbow();
 8003440:	f000 f81c 	bl	800347c <RGB_Rainbow>

	for(int i = 16; i < 24; i++){
 8003444:	2310      	movs	r3, #16
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	e008      	b.n	800345c <RGB_logic+0x48>
		Set_LED(i, 0, 0, 0);
 800344a:	2300      	movs	r3, #0
 800344c:	2200      	movs	r2, #0
 800344e:	2100      	movs	r1, #0
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff fea5 	bl	80031a0 <Set_LED>
	for(int i = 16; i < 24; i++){
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	3301      	adds	r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b17      	cmp	r3, #23
 8003460:	ddf3      	ble.n	800344a <RGB_logic+0x36>
	}

	WS2812_Send();
 8003462:	f7ff ff4f 	bl	8003304 <WS2812_Send>
	Set_Brightness(45);
 8003466:	202d      	movs	r0, #45	; 0x2d
 8003468:	f7ff feca 	bl	8003200 <Set_Brightness>
 800346c:	e000      	b.n	8003470 <RGB_logic+0x5c>
		return;
 800346e:	bf00      	nop
}
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	200018c4 	.word	0x200018c4

0800347c <RGB_Rainbow>:

void RGB_Rainbow() {
 800347c:	b580      	push	{r7, lr}
 800347e:	b08e      	sub	sp, #56	; 0x38
 8003480:	af00      	add	r7, sp, #0
	static uint32_t startTime = 0;
	static const uint32_t transitionDuration = 5000; // Transition duration in milliseconds

	if (HAL_GetTick() - startTime >= transitionDuration) {
 8003482:	f001 fc25 	bl	8004cd0 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	4b90      	ldr	r3, [pc, #576]	; (80036cc <RGB_Rainbow+0x250>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	1ad2      	subs	r2, r2, r3
 800348e:	4b90      	ldr	r3, [pc, #576]	; (80036d0 <RGB_Rainbow+0x254>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d304      	bcc.n	80034a0 <RGB_Rainbow+0x24>
		startTime = HAL_GetTick();
 8003496:	f001 fc1b 	bl	8004cd0 <HAL_GetTick>
 800349a:	4603      	mov	r3, r0
 800349c:	4a8b      	ldr	r2, [pc, #556]	; (80036cc <RGB_Rainbow+0x250>)
 800349e:	6013      	str	r3, [r2, #0]
	}

	// Calculate time elapsed in the current transition
	uint32_t elapsed = HAL_GetTick() - startTime;
 80034a0:	f001 fc16 	bl	8004cd0 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4b89      	ldr	r3, [pc, #548]	; (80036cc <RGB_Rainbow+0x250>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculate the normalized progress (0.0 to 1.0) within the transition
	float progress = (float) elapsed / transitionDuration;
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034b8:	4b85      	ldr	r3, [pc, #532]	; (80036d0 <RGB_Rainbow+0x254>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	ee07 3a90 	vmov	s15, r3
 80034c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c8:	edc7 7a08 	vstr	s15, [r7, #32]

	// Calculate the hue angle based on the progress
	float hueAngle = 360.0f * progress;
 80034cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80034d0:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80036d4 <RGB_Rainbow+0x258>
 80034d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034d8:	edc7 7a07 	vstr	s15, [r7, #28]

	// Set LED colors based on the hue angle
	for (int i = 0; i < MAX_LED; i++) {
 80034dc:	2300      	movs	r3, #0
 80034de:	637b      	str	r3, [r7, #52]	; 0x34
 80034e0:	e0eb      	b.n	80036ba <RGB_Rainbow+0x23e>
		// Calculate the hue value for the current LED
		float ledHue = hueAngle + (i * (360.0f / MAX_LED));
 80034e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e4:	ee07 3a90 	vmov	s15, r3
 80034e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ec:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80034f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80034f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fc:	edc7 7a06 	vstr	s15, [r7, #24]

		// Convert hue to RGB using HSV color model
		float huePrime = fmodf(ledHue / 60.0f, 6.0f);
 8003500:	edd7 7a06 	vldr	s15, [r7, #24]
 8003504:	eddf 6a74 	vldr	s13, [pc, #464]	; 80036d8 <RGB_Rainbow+0x25c>
 8003508:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800350c:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8003510:	eeb0 0a47 	vmov.f32	s0, s14
 8003514:	f00c f8bc 	bl	800f690 <fmodf>
 8003518:	ed87 0a05 	vstr	s0, [r7, #20]
		float chroma = 1.0f;
 800351c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003520:	613b      	str	r3, [r7, #16]
		float x = chroma * (1.0f - fabsf(fmodf(huePrime, 2.0f) - 1.0f));
 8003522:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003526:	ed97 0a05 	vldr	s0, [r7, #20]
 800352a:	f00c f8b1 	bl	800f690 <fmodf>
 800352e:	eef0 7a40 	vmov.f32	s15, s0
 8003532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003536:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800353a:	eef0 7ae7 	vabs.f32	s15, s15
 800353e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003546:	ed97 7a04 	vldr	s14, [r7, #16]
 800354a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354e:	edc7 7a03 	vstr	s15, [r7, #12]

		float red, green, blue;

		if (huePrime >= 0.0f && huePrime < 1.0f) {
 8003552:	edd7 7a05 	vldr	s15, [r7, #20]
 8003556:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800355a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355e:	db10      	blt.n	8003582 <RGB_Rainbow+0x106>
 8003560:	edd7 7a05 	vldr	s15, [r7, #20]
 8003564:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800356c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003570:	d507      	bpl.n	8003582 <RGB_Rainbow+0x106>
			red = chroma;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	633b      	str	r3, [r7, #48]	; 0x30
			green = x;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
			blue = 0.0f;
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003580:	e06e      	b.n	8003660 <RGB_Rainbow+0x1e4>
		} else if (huePrime >= 1.0f && huePrime < 2.0f) {
 8003582:	edd7 7a05 	vldr	s15, [r7, #20]
 8003586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800358a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800358e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003592:	db10      	blt.n	80035b6 <RGB_Rainbow+0x13a>
 8003594:	edd7 7a05 	vldr	s15, [r7, #20]
 8003598:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800359c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a4:	d507      	bpl.n	80035b6 <RGB_Rainbow+0x13a>
			red = x;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	633b      	str	r3, [r7, #48]	; 0x30
			green = chroma;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
			blue = 0.0f;
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b4:	e054      	b.n	8003660 <RGB_Rainbow+0x1e4>
		} else if (huePrime >= 2.0f && huePrime < 3.0f) {
 80035b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80035ba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80035be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c6:	db10      	blt.n	80035ea <RGB_Rainbow+0x16e>
 80035c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80035cc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80035d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d8:	d507      	bpl.n	80035ea <RGB_Rainbow+0x16e>
			red = 0.0f;
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
			green = chroma;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			blue = x;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e8:	e03a      	b.n	8003660 <RGB_Rainbow+0x1e4>
		} else if (huePrime >= 3.0f && huePrime < 4.0f) {
 80035ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80035ee:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80035f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fa:	db10      	blt.n	800361e <RGB_Rainbow+0x1a2>
 80035fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003600:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360c:	d507      	bpl.n	800361e <RGB_Rainbow+0x1a2>
			red = 0.0f;
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	633b      	str	r3, [r7, #48]	; 0x30
			green = x;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
			blue = chroma;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
 800361c:	e020      	b.n	8003660 <RGB_Rainbow+0x1e4>
		} else if (huePrime >= 4.0f && huePrime < 5.0f) {
 800361e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003622:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362e:	db10      	blt.n	8003652 <RGB_Rainbow+0x1d6>
 8003630:	edd7 7a05 	vldr	s15, [r7, #20]
 8003634:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800363c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003640:	d507      	bpl.n	8003652 <RGB_Rainbow+0x1d6>
			red = x;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	633b      	str	r3, [r7, #48]	; 0x30
			green = 0.0f;
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
			blue = chroma;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003650:	e006      	b.n	8003660 <RGB_Rainbow+0x1e4>
		} else {
			red = chroma;
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	633b      	str	r3, [r7, #48]	; 0x30
			green = 0.0f;
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
			blue = x;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		// Scale RGB values to 0-255 range
		uint8_t r = (uint8_t) (red * 255);
 8003660:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003664:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80036dc <RGB_Rainbow+0x260>
 8003668:	ee67 7a87 	vmul.f32	s15, s15, s14
 800366c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003670:	edc7 7a01 	vstr	s15, [r7, #4]
 8003674:	793b      	ldrb	r3, [r7, #4]
 8003676:	72fb      	strb	r3, [r7, #11]
		uint8_t g = (uint8_t) (green * 255);
 8003678:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800367c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80036dc <RGB_Rainbow+0x260>
 8003680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003688:	edc7 7a01 	vstr	s15, [r7, #4]
 800368c:	793b      	ldrb	r3, [r7, #4]
 800368e:	72bb      	strb	r3, [r7, #10]
		uint8_t b = (uint8_t) (blue * 255);
 8003690:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003694:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80036dc <RGB_Rainbow+0x260>
 8003698:	ee67 7a87 	vmul.f32	s15, s15, s14
 800369c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80036a4:	793b      	ldrb	r3, [r7, #4]
 80036a6:	727b      	strb	r3, [r7, #9]

		// Set LED color
		Set_LED(i, r, g, b);
 80036a8:	7af9      	ldrb	r1, [r7, #11]
 80036aa:	7aba      	ldrb	r2, [r7, #10]
 80036ac:	7a7b      	ldrb	r3, [r7, #9]
 80036ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036b0:	f7ff fd76 	bl	80031a0 <Set_LED>
	for (int i = 0; i < MAX_LED; i++) {
 80036b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b6:	3301      	adds	r3, #1
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
 80036ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036bc:	2b3b      	cmp	r3, #59	; 0x3b
 80036be:	f77f af10 	ble.w	80034e2 <RGB_Rainbow+0x66>
	}
}
 80036c2:	bf00      	nop
 80036c4:	bf00      	nop
 80036c6:	3738      	adds	r7, #56	; 0x38
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	200018c8 	.word	0x200018c8
 80036d0:	08010d58 	.word	0x08010d58
 80036d4:	43b40000 	.word	0x43b40000
 80036d8:	42700000 	.word	0x42700000
 80036dc:	437f0000 	.word	0x437f0000

080036e0 <RGB_Bootup>:

void RGB_Bootup(void) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 60; i++) {
 80036e6:	2300      	movs	r3, #0
 80036e8:	607b      	str	r3, [r7, #4]
 80036ea:	e010      	b.n	800370e <RGB_Bootup+0x2e>
		Set_LED(i, 255, 0, 0);
 80036ec:	2300      	movs	r3, #0
 80036ee:	2200      	movs	r2, #0
 80036f0:	21ff      	movs	r1, #255	; 0xff
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff fd54 	bl	80031a0 <Set_LED>
		HAL_Delay(10);
 80036f8:	200a      	movs	r0, #10
 80036fa:	f001 faf5 	bl	8004ce8 <HAL_Delay>
		Set_Brightness(45);
 80036fe:	202d      	movs	r0, #45	; 0x2d
 8003700:	f7ff fd7e 	bl	8003200 <Set_Brightness>
		WS2812_Send();
 8003704:	f7ff fdfe 	bl	8003304 <WS2812_Send>
	for (int i = 0; i < 60; i++) {
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3301      	adds	r3, #1
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b3b      	cmp	r3, #59	; 0x3b
 8003712:	ddeb      	ble.n	80036ec <RGB_Bootup+0xc>
	}
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	MBvariables.x_target_acceleration_time = 1;
 8003724:	4b31      	ldr	r3, [pc, #196]	; (80037ec <main+0xcc>)
 8003726:	2201      	movs	r2, #1
 8003728:	845a      	strh	r2, [r3, #34]	; 0x22
	MBvariables.x_target_speed = 1000;
 800372a:	4b30      	ldr	r3, [pc, #192]	; (80037ec <main+0xcc>)
 800372c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003730:	841a      	strh	r2, [r3, #32]

	corners[0].x = -68.0;
 8003732:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <main+0xd0>)
 8003734:	4a2f      	ldr	r2, [pc, #188]	; (80037f4 <main+0xd4>)
 8003736:	601a      	str	r2, [r3, #0]
	corners[0].y = 7.1;
 8003738:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <main+0xd0>)
 800373a:	4a2f      	ldr	r2, [pc, #188]	; (80037f8 <main+0xd8>)
 800373c:	605a      	str	r2, [r3, #4]
	corners[1].x = -29.4;
 800373e:	4b2c      	ldr	r3, [pc, #176]	; (80037f0 <main+0xd0>)
 8003740:	4a2e      	ldr	r2, [pc, #184]	; (80037fc <main+0xdc>)
 8003742:	609a      	str	r2, [r3, #8]
	corners[1].y = 52.7;
 8003744:	4b2a      	ldr	r3, [pc, #168]	; (80037f0 <main+0xd0>)
 8003746:	4a2e      	ldr	r2, [pc, #184]	; (8003800 <main+0xe0>)
 8003748:	60da      	str	r2, [r3, #12]
	corners[2].x = 8.2;
 800374a:	4b29      	ldr	r3, [pc, #164]	; (80037f0 <main+0xd0>)
 800374c:	4a2d      	ldr	r2, [pc, #180]	; (8003804 <main+0xe4>)
 800374e:	611a      	str	r2, [r3, #16]
	corners[2].y = 21.2;
 8003750:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <main+0xd0>)
 8003752:	4a2d      	ldr	r2, [pc, #180]	; (8003808 <main+0xe8>)
 8003754:	615a      	str	r2, [r3, #20]
	localize(corners, pick, &origin, &angle);
 8003756:	4b2d      	ldr	r3, [pc, #180]	; (800380c <main+0xec>)
 8003758:	4a2d      	ldr	r2, [pc, #180]	; (8003810 <main+0xf0>)
 800375a:	492e      	ldr	r1, [pc, #184]	; (8003814 <main+0xf4>)
 800375c:	4824      	ldr	r0, [pc, #144]	; (80037f0 <main+0xd0>)
 800375e:	f7fe fd43 	bl	80021e8 <localize>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003762:	f001 fa4f 	bl	8004c04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003766:	f000 f861 	bl	800382c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800376a:	f7fe fbb5 	bl	8001ed8 <MX_GPIO_Init>
	MX_DMA_Init();
 800376e:	f7fe fb8b 	bl	8001e88 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8003772:	f001 f933 	bl	80049dc <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8003776:	f7fe fc43 	bl	8002000 <MX_I2C1_Init>
	MX_TIM1_Init();
 800377a:	f000 fa6d 	bl	8003c58 <MX_TIM1_Init>
	MX_TIM2_Init();
 800377e:	f000 fb0b 	bl	8003d98 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8003782:	f001 f901 	bl	8004988 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8003786:	f7fe fae9 	bl	8001d5c <MX_ADC1_Init>
	MX_TIM9_Init();
 800378a:	f000 fbcf 	bl	8003f2c <MX_TIM9_Init>
	MX_TIM11_Init();
 800378e:	f000 fc07 	bl	8003fa0 <MX_TIM11_Init>
	MX_TIM3_Init();
 8003792:	f000 fb55 	bl	8003e40 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	// start timer 1 in PWM for motor
	HAL_TIM_Base_Start(&htim1);
 8003796:	4820      	ldr	r0, [pc, #128]	; (8003818 <main+0xf8>)
 8003798:	f003 fd52 	bl	8007240 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800379c:	2100      	movs	r1, #0
 800379e:	481e      	ldr	r0, [pc, #120]	; (8003818 <main+0xf8>)
 80037a0:	f003 fed6 	bl	8007550 <HAL_TIM_PWM_Start>

	// Start timer in encoder mode
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80037a4:	2104      	movs	r1, #4
 80037a6:	481d      	ldr	r0, [pc, #116]	; (800381c <main+0xfc>)
 80037a8:	f004 fb7a 	bl	8007ea0 <HAL_TIM_Encoder_Start>

	// Timer 9 Timer Interrupt (1000Hz)
	HAL_TIM_Base_Start_IT(&htim9);
 80037ac:	481c      	ldr	r0, [pc, #112]	; (8003820 <main+0x100>)
 80037ae:	f003 fda1 	bl	80072f4 <HAL_TIM_Base_Start_IT>

	// Initialize modbus
	modbus_init();
 80037b2:	f7ff f9ad 	bl	8002b10 <modbus_init>

	// Initialize UART1
	UARTInterruptConfig();
 80037b6:	f7fd fe4f 	bl	8001458 <UARTInterruptConfig>

	RGB_Bootup();
 80037ba:	f7ff ff91 	bl	80036e0 <RGB_Bootup>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Modbus_Protocal_Worker();
 80037be:	f7fd ffc3 	bl	8001748 <Modbus_Protocal_Worker>
		modbus_heartbeat_handler(&MBvariables);
 80037c2:	480a      	ldr	r0, [pc, #40]	; (80037ec <main+0xcc>)
 80037c4:	f7ff f9c0 	bl	8002b48 <modbus_heartbeat_handler>
		modbus_data_sync(&MBvariables);
 80037c8:	4808      	ldr	r0, [pc, #32]	; (80037ec <main+0xcc>)
 80037ca:	f7ff f9ff 	bl	8002bcc <modbus_data_sync>
		QEIReadHome = getLocalPosition();
 80037ce:	f7fe fced 	bl	80021ac <getLocalPosition>
 80037d2:	4603      	mov	r3, r0
 80037d4:	4a13      	ldr	r2, [pc, #76]	; (8003824 <main+0x104>)
 80037d6:	6013      	str	r3, [r2, #0]
		QEIReadRaw = getRawPosition();
 80037d8:	f7fe fcfa 	bl	80021d0 <getRawPosition>
 80037dc:	4603      	mov	r3, r0
 80037de:	4a12      	ldr	r2, [pc, #72]	; (8003828 <main+0x108>)
 80037e0:	6013      	str	r3, [r2, #0]
		main_logic(&MBvariables);
 80037e2:	4802      	ldr	r0, [pc, #8]	; (80037ec <main+0xcc>)
 80037e4:	f7ff fb0c 	bl	8002e00 <main_logic>
		Modbus_Protocal_Worker();
 80037e8:	e7e9      	b.n	80037be <main+0x9e>
 80037ea:	bf00      	nop
 80037ec:	2000186c 	.word	0x2000186c
 80037f0:	20001800 	.word	0x20001800
 80037f4:	c2880000 	.word	0xc2880000
 80037f8:	40e33333 	.word	0x40e33333
 80037fc:	c1eb3333 	.word	0xc1eb3333
 8003800:	4252cccd 	.word	0x4252cccd
 8003804:	41033333 	.word	0x41033333
 8003808:	41a9999a 	.word	0x41a9999a
 800380c:	20001868 	.word	0x20001868
 8003810:	20001860 	.word	0x20001860
 8003814:	20001818 	.word	0x20001818
 8003818:	200018d0 	.word	0x200018d0
 800381c:	20001984 	.word	0x20001984
 8003820:	20001aec 	.word	0x20001aec
 8003824:	200017f0 	.word	0x200017f0
 8003828:	200017ec 	.word	0x200017ec

0800382c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b094      	sub	sp, #80	; 0x50
 8003830:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003832:	f107 0320 	add.w	r3, r7, #32
 8003836:	2230      	movs	r2, #48	; 0x30
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f007 f808 	bl	800a850 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003840:	f107 030c 	add.w	r3, r7, #12
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003850:	2300      	movs	r3, #0
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	4b27      	ldr	r3, [pc, #156]	; (80038f4 <SystemClock_Config+0xc8>)
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	4a26      	ldr	r2, [pc, #152]	; (80038f4 <SystemClock_Config+0xc8>)
 800385a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385e:	6413      	str	r3, [r2, #64]	; 0x40
 8003860:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <SystemClock_Config+0xc8>)
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800386c:	2300      	movs	r3, #0
 800386e:	607b      	str	r3, [r7, #4]
 8003870:	4b21      	ldr	r3, [pc, #132]	; (80038f8 <SystemClock_Config+0xcc>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a20      	ldr	r2, [pc, #128]	; (80038f8 <SystemClock_Config+0xcc>)
 8003876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4b1e      	ldr	r3, [pc, #120]	; (80038f8 <SystemClock_Config+0xcc>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003888:	2302      	movs	r3, #2
 800388a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800388c:	2301      	movs	r3, #1
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003890:	2310      	movs	r3, #16
 8003892:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003894:	2302      	movs	r3, #2
 8003896:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003898:	2300      	movs	r3, #0
 800389a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800389c:	2308      	movs	r3, #8
 800389e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80038a0:	2364      	movs	r3, #100	; 0x64
 80038a2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038a4:	2302      	movs	r3, #2
 80038a6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80038a8:	2304      	movs	r3, #4
 80038aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80038ac:	f107 0320 	add.w	r3, r7, #32
 80038b0:	4618      	mov	r0, r3
 80038b2:	f002 ffd1 	bl	8006858 <HAL_RCC_OscConfig>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <SystemClock_Config+0x94>
		Error_Handler();
 80038bc:	f000 f850 	bl	8003960 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038c0:	230f      	movs	r3, #15
 80038c2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038c4:	2302      	movs	r3, #2
 80038c6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038d0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80038d6:	f107 030c 	add.w	r3, r7, #12
 80038da:	2103      	movs	r1, #3
 80038dc:	4618      	mov	r0, r3
 80038de:	f003 fa33 	bl	8006d48 <HAL_RCC_ClockConfig>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <SystemClock_Config+0xc0>
		Error_Handler();
 80038e8:	f000 f83a 	bl	8003960 <Error_Handler>
	}
}
 80038ec:	bf00      	nop
 80038ee:	3750      	adds	r7, #80	; 0x50
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40007000 	.word	0x40007000

080038fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	if (htim == &htim9) {
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a04      	ldr	r2, [pc, #16]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <HAL_TIM_PeriodElapsedCallback+0x14>
		interrupt_logic();
 800390c:	f7ff fb30 	bl	8002f70 <interrupt_logic>
	}
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20001aec 	.word	0x20001aec

0800391c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a05      	ldr	r2, [pc, #20]	; (800393c <HAL_UART_RxCpltCallback+0x20>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d102      	bne.n	8003932 <HAL_UART_RxCpltCallback+0x16>
		Joystick_Received((int*)&receivedByte);
 800392c:	4804      	ldr	r0, [pc, #16]	; (8003940 <HAL_UART_RxCpltCallback+0x24>)
 800392e:	f7fd fda1 	bl	8001474 <Joystick_Received>
	}
}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20001cf4 	.word	0x20001cf4
 8003940:	20001898 	.word	0x20001898

08003944 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	2b08      	cmp	r3, #8
 8003952:	d101      	bne.n	8003958 <HAL_GPIO_EXTI_Callback+0x14>
		home_handler();
 8003954:	f7ff fb80 	bl	8003058 <home_handler>
	}
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003964:	b672      	cpsid	i
}
 8003966:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003968:	e7fe      	b.n	8003968 <Error_Handler+0x8>
	...

0800396c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <HAL_MspInit+0x4c>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	4a0f      	ldr	r2, [pc, #60]	; (80039b8 <HAL_MspInit+0x4c>)
 800397c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003980:	6453      	str	r3, [r2, #68]	; 0x44
 8003982:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <HAL_MspInit+0x4c>)
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398a:	607b      	str	r3, [r7, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_MspInit+0x4c>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4a08      	ldr	r2, [pc, #32]	; (80039b8 <HAL_MspInit+0x4c>)
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_MspInit+0x4c>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80039aa:	2007      	movs	r0, #7
 80039ac:	f001 fd02 	bl	80053b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40023800 	.word	0x40023800

080039bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039c0:	e7fe      	b.n	80039c0 <NMI_Handler+0x4>

080039c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039c2:	b480      	push	{r7}
 80039c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039c6:	e7fe      	b.n	80039c6 <HardFault_Handler+0x4>

080039c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039cc:	e7fe      	b.n	80039cc <MemManage_Handler+0x4>

080039ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039ce:	b480      	push	{r7}
 80039d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039d2:	e7fe      	b.n	80039d2 <BusFault_Handler+0x4>

080039d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039d8:	e7fe      	b.n	80039d8 <UsageFault_Handler+0x4>

080039da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039da:	b480      	push	{r7}
 80039dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039f6:	b480      	push	{r7}
 80039f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a08:	f001 f94e 	bl	8004ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a0c:	bf00      	nop
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003a14:	2008      	movs	r0, #8
 8003a16:	f002 fabb 	bl	8005f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8003a24:	4802      	ldr	r0, [pc, #8]	; (8003a30 <DMA1_Stream4_IRQHandler+0x10>)
 8003a26:	f001 fe9f 	bl	8005768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20001c54 	.word	0x20001c54

08003a34 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003a38:	4802      	ldr	r0, [pc, #8]	; (8003a44 <DMA1_Stream6_IRQHandler+0x10>)
 8003a3a:	f001 fe95 	bl	8005768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20001ddc 	.word	0x20001ddc

08003a48 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a4c:	4803      	ldr	r0, [pc, #12]	; (8003a5c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003a4e:	f004 fab5 	bl	8007fbc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003a52:	4803      	ldr	r0, [pc, #12]	; (8003a60 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003a54:	f004 fab2 	bl	8007fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003a58:	bf00      	nop
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	200018d0 	.word	0x200018d0
 8003a60:	20001aec 	.word	0x20001aec

08003a64 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a68:	4803      	ldr	r0, [pc, #12]	; (8003a78 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003a6a:	f004 faa7 	bl	8007fbc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003a6e:	4803      	ldr	r0, [pc, #12]	; (8003a7c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003a70:	f004 faa4 	bl	8007fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003a74:	bf00      	nop
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	200018d0 	.word	0x200018d0
 8003a7c:	20001ba0 	.word	0x20001ba0

08003a80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a84:	4802      	ldr	r0, [pc, #8]	; (8003a90 <USART1_IRQHandler+0x10>)
 8003a86:	f005 fe6f 	bl	8009768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20001cf4 	.word	0x20001cf4

08003a94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a98:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <USART2_IRQHandler+0x10>)
 8003a9a:	f005 fe65 	bl	8009768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20001d68 	.word	0x20001d68

08003aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return 1;
 8003aac:	2301      	movs	r3, #1
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <_kill>:

int _kill(int pid, int sig)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ac2:	f006 fe8d 	bl	800a7e0 <__errno>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2216      	movs	r2, #22
 8003aca:	601a      	str	r2, [r3, #0]
  return -1;
 8003acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <_exit>:

void _exit (int status)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ffe7 	bl	8003ab8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003aea:	e7fe      	b.n	8003aea <_exit+0x12>

08003aec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	e00a      	b.n	8003b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003afe:	f3af 8000 	nop.w
 8003b02:	4601      	mov	r1, r0
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	60ba      	str	r2, [r7, #8]
 8003b0a:	b2ca      	uxtb	r2, r1
 8003b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	3301      	adds	r3, #1
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	dbf0      	blt.n	8003afe <_read+0x12>
  }

  return len;
 8003b1c:	687b      	ldr	r3, [r7, #4]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b086      	sub	sp, #24
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	e009      	b.n	8003b4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	60ba      	str	r2, [r7, #8]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	dbf1      	blt.n	8003b38 <_write+0x12>
  }
  return len;
 8003b54:	687b      	ldr	r3, [r7, #4]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <_close>:

int _close(int file)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b86:	605a      	str	r2, [r3, #4]
  return 0;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <_isatty>:

int _isatty(int file)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b9e:	2301      	movs	r3, #1
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bd0:	4a14      	ldr	r2, [pc, #80]	; (8003c24 <_sbrk+0x5c>)
 8003bd2:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <_sbrk+0x60>)
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bdc:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <_sbrk+0x64>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <_sbrk+0x64>)
 8003be6:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <_sbrk+0x68>)
 8003be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bea:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <_sbrk+0x64>)
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d207      	bcs.n	8003c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bf8:	f006 fdf2 	bl	800a7e0 <__errno>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	220c      	movs	r2, #12
 8003c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c02:	f04f 33ff 	mov.w	r3, #4294967295
 8003c06:	e009      	b.n	8003c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c08:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <_sbrk+0x64>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c0e:	4b07      	ldr	r3, [pc, #28]	; (8003c2c <_sbrk+0x64>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	4a05      	ldr	r2, [pc, #20]	; (8003c2c <_sbrk+0x64>)
 8003c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20020000 	.word	0x20020000
 8003c28:	00000400 	.word	0x00000400
 8003c2c:	200018cc 	.word	0x200018cc
 8003c30:	20001e50 	.word	0x20001e50

08003c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c38:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <SystemInit+0x20>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3e:	4a05      	ldr	r2, [pc, #20]	; (8003c54 <SystemInit+0x20>)
 8003c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c48:	bf00      	nop
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b096      	sub	sp, #88	; 0x58
 8003c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	605a      	str	r2, [r3, #4]
 8003c80:	609a      	str	r2, [r3, #8]
 8003c82:	60da      	str	r2, [r3, #12]
 8003c84:	611a      	str	r2, [r3, #16]
 8003c86:	615a      	str	r2, [r3, #20]
 8003c88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c8a:	1d3b      	adds	r3, r7, #4
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f006 fddd 	bl	800a850 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c96:	4b3e      	ldr	r3, [pc, #248]	; (8003d90 <MX_TIM1_Init+0x138>)
 8003c98:	4a3e      	ldr	r2, [pc, #248]	; (8003d94 <MX_TIM1_Init+0x13c>)
 8003c9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8003c9c:	4b3c      	ldr	r3, [pc, #240]	; (8003d90 <MX_TIM1_Init+0x138>)
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca2:	4b3b      	ldr	r3, [pc, #236]	; (8003d90 <MX_TIM1_Init+0x138>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25000-1;
 8003ca8:	4b39      	ldr	r3, [pc, #228]	; (8003d90 <MX_TIM1_Init+0x138>)
 8003caa:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8003cae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cb0:	4b37      	ldr	r3, [pc, #220]	; (8003d90 <MX_TIM1_Init+0x138>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003cb6:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <MX_TIM1_Init+0x138>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cbc:	4b34      	ldr	r3, [pc, #208]	; (8003d90 <MX_TIM1_Init+0x138>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003cc2:	4833      	ldr	r0, [pc, #204]	; (8003d90 <MX_TIM1_Init+0x138>)
 8003cc4:	f003 fa60 	bl	8007188 <HAL_TIM_Base_Init>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003cce:	f7ff fe47 	bl	8003960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cd6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003cd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cdc:	4619      	mov	r1, r3
 8003cde:	482c      	ldr	r0, [pc, #176]	; (8003d90 <MX_TIM1_Init+0x138>)
 8003ce0:	f004 fbb2 	bl	8008448 <HAL_TIM_ConfigClockSource>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003cea:	f7ff fe39 	bl	8003960 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003cee:	4828      	ldr	r0, [pc, #160]	; (8003d90 <MX_TIM1_Init+0x138>)
 8003cf0:	f003 fbc8 	bl	8007484 <HAL_TIM_PWM_Init>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003cfa:	f7ff fe31 	bl	8003960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4820      	ldr	r0, [pc, #128]	; (8003d90 <MX_TIM1_Init+0x138>)
 8003d0e:	f005 f9f9 	bl	8009104 <HAL_TIMEx_MasterConfigSynchronization>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003d18:	f7ff fe22 	bl	8003960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d1c:	2360      	movs	r3, #96	; 0x60
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d24:	2300      	movs	r3, #0
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d30:	2300      	movs	r3, #0
 8003d32:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d34:	2300      	movs	r3, #0
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4813      	ldr	r0, [pc, #76]	; (8003d90 <MX_TIM1_Init+0x138>)
 8003d42:	f004 fabf 	bl	80082c4 <HAL_TIM_PWM_ConfigChannel>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003d4c:	f7ff fe08 	bl	8003960 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	4807      	ldr	r0, [pc, #28]	; (8003d90 <MX_TIM1_Init+0x138>)
 8003d74:	f005 fa34 	bl	80091e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003d7e:	f7ff fdef 	bl	8003960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003d82:	4803      	ldr	r0, [pc, #12]	; (8003d90 <MX_TIM1_Init+0x138>)
 8003d84:	f000 fa62 	bl	800424c <HAL_TIM_MspPostInit>

}
 8003d88:	bf00      	nop
 8003d8a:	3758      	adds	r7, #88	; 0x58
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	200018d0 	.word	0x200018d0
 8003d94:	40010000 	.word	0x40010000

08003d98 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08c      	sub	sp, #48	; 0x30
 8003d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d9e:	f107 030c 	add.w	r3, r7, #12
 8003da2:	2224      	movs	r2, #36	; 0x24
 8003da4:	2100      	movs	r1, #0
 8003da6:	4618      	mov	r0, r3
 8003da8:	f006 fd52 	bl	800a850 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dac:	1d3b      	adds	r3, r7, #4
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003db4:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <MX_TIM2_Init+0xa4>)
 8003db6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003dba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003dbc:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <MX_TIM2_Init+0xa4>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dc2:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <MX_TIM2_Init+0xa4>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003dc8:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <MX_TIM2_Init+0xa4>)
 8003dca:	f04f 32ff 	mov.w	r2, #4294967295
 8003dce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <MX_TIM2_Init+0xa4>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dd6:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <MX_TIM2_Init+0xa4>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003de4:	2301      	movs	r3, #1
 8003de6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003df0:	2300      	movs	r3, #0
 8003df2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003df4:	2301      	movs	r3, #1
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003e00:	f107 030c 	add.w	r3, r7, #12
 8003e04:	4619      	mov	r1, r3
 8003e06:	480d      	ldr	r0, [pc, #52]	; (8003e3c <MX_TIM2_Init+0xa4>)
 8003e08:	f003 ff96 	bl	8007d38 <HAL_TIM_Encoder_Init>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003e12:	f7ff fda5 	bl	8003960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e16:	2300      	movs	r3, #0
 8003e18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e1e:	1d3b      	adds	r3, r7, #4
 8003e20:	4619      	mov	r1, r3
 8003e22:	4806      	ldr	r0, [pc, #24]	; (8003e3c <MX_TIM2_Init+0xa4>)
 8003e24:	f005 f96e 	bl	8009104 <HAL_TIMEx_MasterConfigSynchronization>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003e2e:	f7ff fd97 	bl	8003960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003e32:	bf00      	nop
 8003e34:	3730      	adds	r7, #48	; 0x30
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20001984 	.word	0x20001984

08003e40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08e      	sub	sp, #56	; 0x38
 8003e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	605a      	str	r2, [r3, #4]
 8003e50:	609a      	str	r2, [r3, #8]
 8003e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e54:	f107 0320 	add.w	r3, r7, #32
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e5e:	1d3b      	adds	r3, r7, #4
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	60da      	str	r2, [r3, #12]
 8003e6a:	611a      	str	r2, [r3, #16]
 8003e6c:	615a      	str	r2, [r3, #20]
 8003e6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e70:	4b2c      	ldr	r3, [pc, #176]	; (8003f24 <MX_TIM3_Init+0xe4>)
 8003e72:	4a2d      	ldr	r2, [pc, #180]	; (8003f28 <MX_TIM3_Init+0xe8>)
 8003e74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e76:	4b2b      	ldr	r3, [pc, #172]	; (8003f24 <MX_TIM3_Init+0xe4>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e7c:	4b29      	ldr	r3, [pc, #164]	; (8003f24 <MX_TIM3_Init+0xe4>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 125-1;
 8003e82:	4b28      	ldr	r3, [pc, #160]	; (8003f24 <MX_TIM3_Init+0xe4>)
 8003e84:	227c      	movs	r2, #124	; 0x7c
 8003e86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e88:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <MX_TIM3_Init+0xe4>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e8e:	4b25      	ldr	r3, [pc, #148]	; (8003f24 <MX_TIM3_Init+0xe4>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e94:	4823      	ldr	r0, [pc, #140]	; (8003f24 <MX_TIM3_Init+0xe4>)
 8003e96:	f003 f977 	bl	8007188 <HAL_TIM_Base_Init>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003ea0:	f7ff fd5e 	bl	8003960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003eae:	4619      	mov	r1, r3
 8003eb0:	481c      	ldr	r0, [pc, #112]	; (8003f24 <MX_TIM3_Init+0xe4>)
 8003eb2:	f004 fac9 	bl	8008448 <HAL_TIM_ConfigClockSource>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003ebc:	f7ff fd50 	bl	8003960 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003ec0:	4818      	ldr	r0, [pc, #96]	; (8003f24 <MX_TIM3_Init+0xe4>)
 8003ec2:	f003 fadf 	bl	8007484 <HAL_TIM_PWM_Init>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003ecc:	f7ff fd48 	bl	8003960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ed8:	f107 0320 	add.w	r3, r7, #32
 8003edc:	4619      	mov	r1, r3
 8003ede:	4811      	ldr	r0, [pc, #68]	; (8003f24 <MX_TIM3_Init+0xe4>)
 8003ee0:	f005 f910 	bl	8009104 <HAL_TIMEx_MasterConfigSynchronization>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003eea:	f7ff fd39 	bl	8003960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003eee:	2360      	movs	r3, #96	; 0x60
 8003ef0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003efe:	1d3b      	adds	r3, r7, #4
 8003f00:	2200      	movs	r2, #0
 8003f02:	4619      	mov	r1, r3
 8003f04:	4807      	ldr	r0, [pc, #28]	; (8003f24 <MX_TIM3_Init+0xe4>)
 8003f06:	f004 f9dd 	bl	80082c4 <HAL_TIM_PWM_ConfigChannel>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003f10:	f7ff fd26 	bl	8003960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003f14:	4803      	ldr	r0, [pc, #12]	; (8003f24 <MX_TIM3_Init+0xe4>)
 8003f16:	f000 f999 	bl	800424c <HAL_TIM_MspPostInit>

}
 8003f1a:	bf00      	nop
 8003f1c:	3738      	adds	r7, #56	; 0x38
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20001a38 	.word	0x20001a38
 8003f28:	40000400 	.word	0x40000400

08003f2c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f32:	463b      	mov	r3, r7
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003f3e:	4b16      	ldr	r3, [pc, #88]	; (8003f98 <MX_TIM9_Init+0x6c>)
 8003f40:	4a16      	ldr	r2, [pc, #88]	; (8003f9c <MX_TIM9_Init+0x70>)
 8003f42:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10-1;
 8003f44:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <MX_TIM9_Init+0x6c>)
 8003f46:	2209      	movs	r2, #9
 8003f48:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f4a:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <MX_TIM9_Init+0x6c>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8003f50:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <MX_TIM9_Init+0x6c>)
 8003f52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f56:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f58:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <MX_TIM9_Init+0x6c>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f5e:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <MX_TIM9_Init+0x6c>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003f64:	480c      	ldr	r0, [pc, #48]	; (8003f98 <MX_TIM9_Init+0x6c>)
 8003f66:	f003 f90f 	bl	8007188 <HAL_TIM_Base_Init>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003f70:	f7ff fcf6 	bl	8003960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f78:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003f7a:	463b      	mov	r3, r7
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4806      	ldr	r0, [pc, #24]	; (8003f98 <MX_TIM9_Init+0x6c>)
 8003f80:	f004 fa62 	bl	8008448 <HAL_TIM_ConfigClockSource>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003f8a:	f7ff fce9 	bl	8003960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20001aec 	.word	0x20001aec
 8003f9c:	40014000 	.word	0x40014000

08003fa0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	611a      	str	r2, [r3, #16]
 8003fb4:	615a      	str	r2, [r3, #20]
 8003fb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003fb8:	4b21      	ldr	r3, [pc, #132]	; (8004040 <MX_TIM11_Init+0xa0>)
 8003fba:	4a22      	ldr	r2, [pc, #136]	; (8004044 <MX_TIM11_Init+0xa4>)
 8003fbc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8003fbe:	4b20      	ldr	r3, [pc, #128]	; (8004040 <MX_TIM11_Init+0xa0>)
 8003fc0:	2263      	movs	r2, #99	; 0x63
 8003fc2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fc4:	4b1e      	ldr	r3, [pc, #120]	; (8004040 <MX_TIM11_Init+0xa0>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8003fca:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <MX_TIM11_Init+0xa0>)
 8003fcc:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8003fd0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fd2:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <MX_TIM11_Init+0xa0>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fd8:	4b19      	ldr	r3, [pc, #100]	; (8004040 <MX_TIM11_Init+0xa0>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003fde:	4818      	ldr	r0, [pc, #96]	; (8004040 <MX_TIM11_Init+0xa0>)
 8003fe0:	f003 f8d2 	bl	8007188 <HAL_TIM_Base_Init>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8003fea:	f7ff fcb9 	bl	8003960 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8003fee:	4814      	ldr	r0, [pc, #80]	; (8004040 <MX_TIM11_Init+0xa0>)
 8003ff0:	f003 f9e2 	bl	80073b8 <HAL_TIM_OC_Init>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003ffa:	f7ff fcb1 	bl	8003960 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8003ffe:	2108      	movs	r1, #8
 8004000:	480f      	ldr	r0, [pc, #60]	; (8004040 <MX_TIM11_Init+0xa0>)
 8004002:	f003 fdcb 	bl	8007b9c <HAL_TIM_OnePulse_Init>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 800400c:	f7ff fca8 	bl	8003960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8004010:	2310      	movs	r3, #16
 8004012:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8004014:	f240 5399 	movw	r3, #1433	; 0x599
 8004018:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004022:	1d3b      	adds	r3, r7, #4
 8004024:	2200      	movs	r2, #0
 8004026:	4619      	mov	r1, r3
 8004028:	4805      	ldr	r0, [pc, #20]	; (8004040 <MX_TIM11_Init+0xa0>)
 800402a:	f004 f8ef 	bl	800820c <HAL_TIM_OC_ConfigChannel>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8004034:	f7ff fc94 	bl	8003960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004038:	bf00      	nop
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20001ba0 	.word	0x20001ba0
 8004044:	40014800 	.word	0x40014800

08004048 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a53      	ldr	r2, [pc, #332]	; (80041a4 <HAL_TIM_Base_MspInit+0x15c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d11e      	bne.n	8004098 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	4b52      	ldr	r3, [pc, #328]	; (80041a8 <HAL_TIM_Base_MspInit+0x160>)
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	4a51      	ldr	r2, [pc, #324]	; (80041a8 <HAL_TIM_Base_MspInit+0x160>)
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	6453      	str	r3, [r2, #68]	; 0x44
 800406a:	4b4f      	ldr	r3, [pc, #316]	; (80041a8 <HAL_TIM_Base_MspInit+0x160>)
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004076:	2200      	movs	r2, #0
 8004078:	2100      	movs	r1, #0
 800407a:	2018      	movs	r0, #24
 800407c:	f001 f9a5 	bl	80053ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004080:	2018      	movs	r0, #24
 8004082:	f001 f9be 	bl	8005402 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004086:	2200      	movs	r2, #0
 8004088:	2100      	movs	r1, #0
 800408a:	201a      	movs	r0, #26
 800408c:	f001 f99d 	bl	80053ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004090:	201a      	movs	r0, #26
 8004092:	f001 f9b6 	bl	8005402 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8004096:	e080      	b.n	800419a <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM3)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a43      	ldr	r2, [pc, #268]	; (80041ac <HAL_TIM_Base_MspInit+0x164>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d144      	bne.n	800412c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	4b40      	ldr	r3, [pc, #256]	; (80041a8 <HAL_TIM_Base_MspInit+0x160>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	4a3f      	ldr	r2, [pc, #252]	; (80041a8 <HAL_TIM_Base_MspInit+0x160>)
 80040ac:	f043 0302 	orr.w	r3, r3, #2
 80040b0:	6413      	str	r3, [r2, #64]	; 0x40
 80040b2:	4b3d      	ldr	r3, [pc, #244]	; (80041a8 <HAL_TIM_Base_MspInit+0x160>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80040be:	4b3c      	ldr	r3, [pc, #240]	; (80041b0 <HAL_TIM_Base_MspInit+0x168>)
 80040c0:	4a3c      	ldr	r2, [pc, #240]	; (80041b4 <HAL_TIM_Base_MspInit+0x16c>)
 80040c2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80040c4:	4b3a      	ldr	r3, [pc, #232]	; (80041b0 <HAL_TIM_Base_MspInit+0x168>)
 80040c6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80040ca:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040cc:	4b38      	ldr	r3, [pc, #224]	; (80041b0 <HAL_TIM_Base_MspInit+0x168>)
 80040ce:	2240      	movs	r2, #64	; 0x40
 80040d0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80040d2:	4b37      	ldr	r3, [pc, #220]	; (80041b0 <HAL_TIM_Base_MspInit+0x168>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80040d8:	4b35      	ldr	r3, [pc, #212]	; (80041b0 <HAL_TIM_Base_MspInit+0x168>)
 80040da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040de:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80040e0:	4b33      	ldr	r3, [pc, #204]	; (80041b0 <HAL_TIM_Base_MspInit+0x168>)
 80040e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040e6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80040e8:	4b31      	ldr	r3, [pc, #196]	; (80041b0 <HAL_TIM_Base_MspInit+0x168>)
 80040ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040ee:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80040f0:	4b2f      	ldr	r3, [pc, #188]	; (80041b0 <HAL_TIM_Base_MspInit+0x168>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80040f6:	4b2e      	ldr	r3, [pc, #184]	; (80041b0 <HAL_TIM_Base_MspInit+0x168>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040fc:	4b2c      	ldr	r3, [pc, #176]	; (80041b0 <HAL_TIM_Base_MspInit+0x168>)
 80040fe:	2200      	movs	r2, #0
 8004100:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8004102:	482b      	ldr	r0, [pc, #172]	; (80041b0 <HAL_TIM_Base_MspInit+0x168>)
 8004104:	f001 f998 	bl	8005438 <HAL_DMA_Init>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_TIM_Base_MspInit+0xca>
      Error_Handler();
 800410e:	f7ff fc27 	bl	8003960 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a26      	ldr	r2, [pc, #152]	; (80041b0 <HAL_TIM_Base_MspInit+0x168>)
 8004116:	625a      	str	r2, [r3, #36]	; 0x24
 8004118:	4a25      	ldr	r2, [pc, #148]	; (80041b0 <HAL_TIM_Base_MspInit+0x168>)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a23      	ldr	r2, [pc, #140]	; (80041b0 <HAL_TIM_Base_MspInit+0x168>)
 8004122:	639a      	str	r2, [r3, #56]	; 0x38
 8004124:	4a22      	ldr	r2, [pc, #136]	; (80041b0 <HAL_TIM_Base_MspInit+0x168>)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6393      	str	r3, [r2, #56]	; 0x38
}
 800412a:	e036      	b.n	800419a <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM9)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a21      	ldr	r2, [pc, #132]	; (80041b8 <HAL_TIM_Base_MspInit+0x170>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d116      	bne.n	8004164 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <HAL_TIM_Base_MspInit+0x160>)
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	4a1a      	ldr	r2, [pc, #104]	; (80041a8 <HAL_TIM_Base_MspInit+0x160>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004144:	6453      	str	r3, [r2, #68]	; 0x44
 8004146:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <HAL_TIM_Base_MspInit+0x160>)
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004152:	2200      	movs	r2, #0
 8004154:	2100      	movs	r1, #0
 8004156:	2018      	movs	r0, #24
 8004158:	f001 f937 	bl	80053ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800415c:	2018      	movs	r0, #24
 800415e:	f001 f950 	bl	8005402 <HAL_NVIC_EnableIRQ>
}
 8004162:	e01a      	b.n	800419a <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM11)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a14      	ldr	r2, [pc, #80]	; (80041bc <HAL_TIM_Base_MspInit+0x174>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d115      	bne.n	800419a <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <HAL_TIM_Base_MspInit+0x160>)
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	4a0c      	ldr	r2, [pc, #48]	; (80041a8 <HAL_TIM_Base_MspInit+0x160>)
 8004178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800417c:	6453      	str	r3, [r2, #68]	; 0x44
 800417e:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <HAL_TIM_Base_MspInit+0x160>)
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004186:	60bb      	str	r3, [r7, #8]
 8004188:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800418a:	2200      	movs	r2, #0
 800418c:	2100      	movs	r1, #0
 800418e:	201a      	movs	r0, #26
 8004190:	f001 f91b 	bl	80053ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004194:	201a      	movs	r0, #26
 8004196:	f001 f934 	bl	8005402 <HAL_NVIC_EnableIRQ>
}
 800419a:	bf00      	nop
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40010000 	.word	0x40010000
 80041a8:	40023800 	.word	0x40023800
 80041ac:	40000400 	.word	0x40000400
 80041b0:	20001c54 	.word	0x20001c54
 80041b4:	40026070 	.word	0x40026070
 80041b8:	40014000 	.word	0x40014000
 80041bc:	40014800 	.word	0x40014800

080041c0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	; 0x28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c8:	f107 0314 	add.w	r3, r7, #20
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	609a      	str	r2, [r3, #8]
 80041d4:	60da      	str	r2, [r3, #12]
 80041d6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e0:	d12b      	bne.n	800423a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041e2:	2300      	movs	r3, #0
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	4b17      	ldr	r3, [pc, #92]	; (8004244 <HAL_TIM_Encoder_MspInit+0x84>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	4a16      	ldr	r2, [pc, #88]	; (8004244 <HAL_TIM_Encoder_MspInit+0x84>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	6413      	str	r3, [r2, #64]	; 0x40
 80041f2:	4b14      	ldr	r3, [pc, #80]	; (8004244 <HAL_TIM_Encoder_MspInit+0x84>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	4b10      	ldr	r3, [pc, #64]	; (8004244 <HAL_TIM_Encoder_MspInit+0x84>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	4a0f      	ldr	r2, [pc, #60]	; (8004244 <HAL_TIM_Encoder_MspInit+0x84>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	6313      	str	r3, [r2, #48]	; 0x30
 800420e:	4b0d      	ldr	r3, [pc, #52]	; (8004244 <HAL_TIM_Encoder_MspInit+0x84>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800421a:	2303      	movs	r3, #3
 800421c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421e:	2302      	movs	r3, #2
 8004220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004226:	2300      	movs	r3, #0
 8004228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800422a:	2301      	movs	r3, #1
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800422e:	f107 0314 	add.w	r3, r7, #20
 8004232:	4619      	mov	r1, r3
 8004234:	4804      	ldr	r0, [pc, #16]	; (8004248 <HAL_TIM_Encoder_MspInit+0x88>)
 8004236:	f001 fd0d 	bl	8005c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800423a:	bf00      	nop
 800423c:	3728      	adds	r7, #40	; 0x28
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40023800 	.word	0x40023800
 8004248:	40020000 	.word	0x40020000

0800424c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	; 0x28
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004254:	f107 0314 	add.w	r3, r7, #20
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	60da      	str	r2, [r3, #12]
 8004262:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a24      	ldr	r2, [pc, #144]	; (80042fc <HAL_TIM_MspPostInit+0xb0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d11f      	bne.n	80042ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	4b23      	ldr	r3, [pc, #140]	; (8004300 <HAL_TIM_MspPostInit+0xb4>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	4a22      	ldr	r2, [pc, #136]	; (8004300 <HAL_TIM_MspPostInit+0xb4>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	6313      	str	r3, [r2, #48]	; 0x30
 800427e:	4b20      	ldr	r3, [pc, #128]	; (8004300 <HAL_TIM_MspPostInit+0xb4>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800428a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800428e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004290:	2302      	movs	r3, #2
 8004292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004298:	2300      	movs	r3, #0
 800429a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800429c:	2301      	movs	r3, #1
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a0:	f107 0314 	add.w	r3, r7, #20
 80042a4:	4619      	mov	r1, r3
 80042a6:	4817      	ldr	r0, [pc, #92]	; (8004304 <HAL_TIM_MspPostInit+0xb8>)
 80042a8:	f001 fcd4 	bl	8005c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80042ac:	e022      	b.n	80042f4 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a15      	ldr	r2, [pc, #84]	; (8004308 <HAL_TIM_MspPostInit+0xbc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d11d      	bne.n	80042f4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	4b10      	ldr	r3, [pc, #64]	; (8004300 <HAL_TIM_MspPostInit+0xb4>)
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	4a0f      	ldr	r2, [pc, #60]	; (8004300 <HAL_TIM_MspPostInit+0xb4>)
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	6313      	str	r3, [r2, #48]	; 0x30
 80042c8:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <HAL_TIM_MspPostInit+0xb4>)
 80042ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042d4:	2340      	movs	r3, #64	; 0x40
 80042d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d8:	2302      	movs	r3, #2
 80042da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e0:	2300      	movs	r3, #0
 80042e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042e4:	2302      	movs	r3, #2
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042e8:	f107 0314 	add.w	r3, r7, #20
 80042ec:	4619      	mov	r1, r3
 80042ee:	4805      	ldr	r0, [pc, #20]	; (8004304 <HAL_TIM_MspPostInit+0xb8>)
 80042f0:	f001 fcb0 	bl	8005c54 <HAL_GPIO_Init>
}
 80042f4:	bf00      	nop
 80042f6:	3728      	adds	r7, #40	; 0x28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40010000 	.word	0x40010000
 8004300:	40023800 	.word	0x40023800
 8004304:	40020000 	.word	0x40020000
 8004308:	40000400 	.word	0x40000400
 800430c:	00000000 	.word	0x00000000

08004310 <Trajectory>:
float setpoint_now = 0;
float target = 0;

// USER CODE ======================================================================================

void Trajectory(float setpoint_now, float velocity_max, float acceleration_max, int *position_out, float *velocity_out, float *acceleration_out, int homemode) {
 8004310:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004314:	b088      	sub	sp, #32
 8004316:	af00      	add	r7, sp, #0
 8004318:	ed87 0a07 	vstr	s0, [r7, #28]
 800431c:	edc7 0a06 	vstr	s1, [r7, #24]
 8004320:	ed87 1a05 	vstr	s2, [r7, #20]
 8004324:	6138      	str	r0, [r7, #16]
 8004326:	60f9      	str	r1, [r7, #12]
 8004328:	60ba      	str	r2, [r7, #8]
 800432a:	607b      	str	r3, [r7, #4]
	static float time_err = 0;

	static float setpoint_past = 0;
	static float distance = 0;

	if(homemode == 1){
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d115      	bne.n	800435e <Trajectory+0x4e>
		setpoint_past = setpoint_now;
 8004332:	4a64      	ldr	r2, [pc, #400]	; (80044c4 <Trajectory+0x1b4>)
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	6013      	str	r3, [r2, #0]
		time_trajectory = 0;
 8004338:	4b63      	ldr	r3, [pc, #396]	; (80044c8 <Trajectory+0x1b8>)
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
		abs_distance = 0;
 8004340:	4b62      	ldr	r3, [pc, #392]	; (80044cc <Trajectory+0x1bc>)
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
		distance = 0;
 8004348:	4b61      	ldr	r3, [pc, #388]	; (80044d0 <Trajectory+0x1c0>)
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
		position = setpoint_now;
 8004350:	4a60      	ldr	r2, [pc, #384]	; (80044d4 <Trajectory+0x1c4>)
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	6013      	str	r3, [r2, #0]
		initial_position = setpoint_now;
 8004356:	4a60      	ldr	r2, [pc, #384]	; (80044d8 <Trajectory+0x1c8>)
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	6013      	str	r3, [r2, #0]
		return;
 800435c:	e2ed      	b.n	800493a <Trajectory+0x62a>
	}

	else if(homemode == 0)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	f040 82d9 	bne.w	8004918 <Trajectory+0x608>
	{
		// distance and +-(sign)
		if (setpoint_past != setpoint_now) {
 8004366:	4b57      	ldr	r3, [pc, #348]	; (80044c4 <Trajectory+0x1b4>)
 8004368:	edd3 7a00 	vldr	s15, [r3]
 800436c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004370:	eeb4 7a67 	vcmp.f32	s14, s15
 8004374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004378:	d031      	beq.n	80043de <Trajectory+0xce>
			distance = setpoint_now - initial_position;
 800437a:	4b57      	ldr	r3, [pc, #348]	; (80044d8 <Trajectory+0x1c8>)
 800437c:	edd3 7a00 	vldr	s15, [r3]
 8004380:	ed97 7a07 	vldr	s14, [r7, #28]
 8004384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004388:	4b51      	ldr	r3, [pc, #324]	; (80044d0 <Trajectory+0x1c0>)
 800438a:	edc3 7a00 	vstr	s15, [r3]
			setpoint_past = setpoint_now;
 800438e:	4a4d      	ldr	r2, [pc, #308]	; (80044c4 <Trajectory+0x1b4>)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	6013      	str	r3, [r2, #0]
			if (distance >= 0) {
 8004394:	4b4e      	ldr	r3, [pc, #312]	; (80044d0 <Trajectory+0x1c0>)
 8004396:	edd3 7a00 	vldr	s15, [r3]
 800439a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a2:	db07      	blt.n	80043b4 <Trajectory+0xa4>
				sign = 1;
 80043a4:	4b4d      	ldr	r3, [pc, #308]	; (80044dc <Trajectory+0x1cc>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
				abs_distance = distance;
 80043aa:	4b49      	ldr	r3, [pc, #292]	; (80044d0 <Trajectory+0x1c0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a47      	ldr	r2, [pc, #284]	; (80044cc <Trajectory+0x1bc>)
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e017      	b.n	80043e4 <Trajectory+0xd4>
			} else if (distance < 0) {
 80043b4:	4b46      	ldr	r3, [pc, #280]	; (80044d0 <Trajectory+0x1c0>)
 80043b6:	edd3 7a00 	vldr	s15, [r3]
 80043ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c2:	d50f      	bpl.n	80043e4 <Trajectory+0xd4>
				sign = -1;
 80043c4:	4b45      	ldr	r3, [pc, #276]	; (80044dc <Trajectory+0x1cc>)
 80043c6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ca:	601a      	str	r2, [r3, #0]
				abs_distance = distance * (-1);
 80043cc:	4b40      	ldr	r3, [pc, #256]	; (80044d0 <Trajectory+0x1c0>)
 80043ce:	edd3 7a00 	vldr	s15, [r3]
 80043d2:	eef1 7a67 	vneg.f32	s15, s15
 80043d6:	4b3d      	ldr	r3, [pc, #244]	; (80044cc <Trajectory+0x1bc>)
 80043d8:	edc3 7a00 	vstr	s15, [r3]
 80043dc:	e002      	b.n	80043e4 <Trajectory+0xd4>
			}
		} else {
			setpoint_past = setpoint_now;
 80043de:	4a39      	ldr	r2, [pc, #228]	; (80044c4 <Trajectory+0x1b4>)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	6013      	str	r3, [r2, #0]
		}

	// Define pattern of trapezoidal_trajectory
	if (abs_distance > ((velocity_max * velocity_max) / acceleration_max)) {
 80043e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80043e8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80043ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80043f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043f4:	4b35      	ldr	r3, [pc, #212]	; (80044cc <Trajectory+0x1bc>)
 80043f6:	edd3 7a00 	vldr	s15, [r3]
 80043fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004402:	d577      	bpl.n	80044f4 <Trajectory+0x1e4>
		time_acc = ((velocity_max - 0) / acceleration_max);
 8004404:	edd7 6a06 	vldr	s13, [r7, #24]
 8004408:	ed97 7a05 	vldr	s14, [r7, #20]
 800440c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004410:	4b33      	ldr	r3, [pc, #204]	; (80044e0 <Trajectory+0x1d0>)
 8004412:	edc3 7a00 	vstr	s15, [r3]
		time_const = ((1.0 / velocity_max) * ((abs_distance) - ((velocity_max * velocity_max) / acceleration_max)));
 8004416:	69b8      	ldr	r0, [r7, #24]
 8004418:	f7fc f89e 	bl	8000558 <__aeabi_f2d>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	f04f 0000 	mov.w	r0, #0
 8004424:	492f      	ldr	r1, [pc, #188]	; (80044e4 <Trajectory+0x1d4>)
 8004426:	f7fc fa19 	bl	800085c <__aeabi_ddiv>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4614      	mov	r4, r2
 8004430:	461d      	mov	r5, r3
 8004432:	4b26      	ldr	r3, [pc, #152]	; (80044cc <Trajectory+0x1bc>)
 8004434:	ed93 7a00 	vldr	s14, [r3]
 8004438:	edd7 7a06 	vldr	s15, [r7, #24]
 800443c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8004440:	edd7 6a05 	vldr	s13, [r7, #20]
 8004444:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800444c:	ee17 0a90 	vmov	r0, s15
 8004450:	f7fc f882 	bl	8000558 <__aeabi_f2d>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4620      	mov	r0, r4
 800445a:	4629      	mov	r1, r5
 800445c:	f7fc f8d4 	bl	8000608 <__aeabi_dmul>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	f7fc fbc6 	bl	8000bf8 <__aeabi_d2f>
 800446c:	4603      	mov	r3, r0
 800446e:	4a1e      	ldr	r2, [pc, #120]	; (80044e8 <Trajectory+0x1d8>)
 8004470:	6013      	str	r3, [r2, #0]
		time_total = (2 * time_acc) + (abs_distance - (velocity_max * velocity_max) / acceleration_max) / velocity_max;
 8004472:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <Trajectory+0x1d0>)
 8004474:	edd3 7a00 	vldr	s15, [r3]
 8004478:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800447c:	4b13      	ldr	r3, [pc, #76]	; (80044cc <Trajectory+0x1bc>)
 800447e:	edd3 6a00 	vldr	s13, [r3]
 8004482:	edd7 7a06 	vldr	s15, [r7, #24]
 8004486:	ee67 5aa7 	vmul.f32	s11, s15, s15
 800448a:	ed97 6a05 	vldr	s12, [r7, #20]
 800448e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004492:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004496:	edd7 6a06 	vldr	s13, [r7, #24]
 800449a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800449e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044a2:	4b12      	ldr	r3, [pc, #72]	; (80044ec <Trajectory+0x1dc>)
 80044a4:	edc3 7a00 	vstr	s15, [r3]
		max_velocity = velocity_max * sign;
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <Trajectory+0x1cc>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	ee07 3a90 	vmov	s15, r3
 80044b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80044b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <Trajectory+0x1e0>)
 80044be:	edc3 7a00 	vstr	s15, [r3]
 80044c2:	e053      	b.n	800456c <Trajectory+0x25c>
 80044c4:	20001ccc 	.word	0x20001ccc
 80044c8:	20001cd0 	.word	0x20001cd0
 80044cc:	20001cb4 	.word	0x20001cb4
 80044d0:	20001cd4 	.word	0x20001cd4
 80044d4:	20001cbc 	.word	0x20001cbc
 80044d8:	20001cb8 	.word	0x20001cb8
 80044dc:	20001cc8 	.word	0x20001cc8
 80044e0:	20001cd8 	.word	0x20001cd8
 80044e4:	3ff00000 	.word	0x3ff00000
 80044e8:	20001cdc 	.word	0x20001cdc
 80044ec:	20001ce0 	.word	0x20001ce0
 80044f0:	20001ce4 	.word	0x20001ce4
	}

	else {
		time_acc = sqrt(abs_distance / acceleration_max);
 80044f4:	4b8c      	ldr	r3, [pc, #560]	; (8004728 <Trajectory+0x418>)
 80044f6:	ed93 7a00 	vldr	s14, [r3]
 80044fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80044fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004502:	ee16 0a90 	vmov	r0, s13
 8004506:	f7fc f827 	bl	8000558 <__aeabi_f2d>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	ec43 2b10 	vmov	d0, r2, r3
 8004512:	f00b f891 	bl	800f638 <sqrt>
 8004516:	ec53 2b10 	vmov	r2, r3, d0
 800451a:	4610      	mov	r0, r2
 800451c:	4619      	mov	r1, r3
 800451e:	f7fc fb6b 	bl	8000bf8 <__aeabi_d2f>
 8004522:	4603      	mov	r3, r0
 8004524:	4a81      	ldr	r2, [pc, #516]	; (800472c <Trajectory+0x41c>)
 8004526:	6013      	str	r3, [r2, #0]
		time_total = time_acc * 2;
 8004528:	4b80      	ldr	r3, [pc, #512]	; (800472c <Trajectory+0x41c>)
 800452a:	edd3 7a00 	vldr	s15, [r3]
 800452e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004532:	4b7f      	ldr	r3, [pc, #508]	; (8004730 <Trajectory+0x420>)
 8004534:	edc3 7a00 	vstr	s15, [r3]
		time_const = 0;
 8004538:	4b7e      	ldr	r3, [pc, #504]	; (8004734 <Trajectory+0x424>)
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
		position_const = 0;
 8004540:	4b7d      	ldr	r3, [pc, #500]	; (8004738 <Trajectory+0x428>)
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
		max_velocity = acceleration_max * time_acc * sign;
 8004548:	4b78      	ldr	r3, [pc, #480]	; (800472c <Trajectory+0x41c>)
 800454a:	ed93 7a00 	vldr	s14, [r3]
 800454e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004552:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004556:	4b79      	ldr	r3, [pc, #484]	; (800473c <Trajectory+0x42c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004566:	4b76      	ldr	r3, [pc, #472]	; (8004740 <Trajectory+0x430>)
 8004568:	edc3 7a00 	vstr	s15, [r3]
	}

	//acceleration segment
	if ((0 <= time_trajectory) && (time_trajectory < time_acc)) {
 800456c:	4b75      	ldr	r3, [pc, #468]	; (8004744 <Trajectory+0x434>)
 800456e:	edd3 7a00 	vldr	s15, [r3]
 8004572:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457a:	f2c0 8085 	blt.w	8004688 <Trajectory+0x378>
 800457e:	4b71      	ldr	r3, [pc, #452]	; (8004744 <Trajectory+0x434>)
 8004580:	ed93 7a00 	vldr	s14, [r3]
 8004584:	4b69      	ldr	r3, [pc, #420]	; (800472c <Trajectory+0x41c>)
 8004586:	edd3 7a00 	vldr	s15, [r3]
 800458a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800458e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004592:	d579      	bpl.n	8004688 <Trajectory+0x378>
		time_trajectory += 0.0001;
 8004594:	4b6b      	ldr	r3, [pc, #428]	; (8004744 <Trajectory+0x434>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7fb ffdd 	bl	8000558 <__aeabi_f2d>
 800459e:	a360      	add	r3, pc, #384	; (adr r3, 8004720 <Trajectory+0x410>)
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	f7fb fe7a 	bl	800029c <__adddf3>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4610      	mov	r0, r2
 80045ae:	4619      	mov	r1, r3
 80045b0:	f7fc fb22 	bl	8000bf8 <__aeabi_d2f>
 80045b4:	4603      	mov	r3, r0
 80045b6:	4a63      	ldr	r2, [pc, #396]	; (8004744 <Trajectory+0x434>)
 80045b8:	6013      	str	r3, [r2, #0]
		position = initial_position + (0.5 * acceleration_max * (time_trajectory * time_trajectory) * sign);
 80045ba:	4b63      	ldr	r3, [pc, #396]	; (8004748 <Trajectory+0x438>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fb ffca 	bl	8000558 <__aeabi_f2d>
 80045c4:	4604      	mov	r4, r0
 80045c6:	460d      	mov	r5, r1
 80045c8:	6978      	ldr	r0, [r7, #20]
 80045ca:	f7fb ffc5 	bl	8000558 <__aeabi_f2d>
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	4b5e      	ldr	r3, [pc, #376]	; (800474c <Trajectory+0x43c>)
 80045d4:	f7fc f818 	bl	8000608 <__aeabi_dmul>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4690      	mov	r8, r2
 80045de:	4699      	mov	r9, r3
 80045e0:	4b58      	ldr	r3, [pc, #352]	; (8004744 <Trajectory+0x434>)
 80045e2:	ed93 7a00 	vldr	s14, [r3]
 80045e6:	4b57      	ldr	r3, [pc, #348]	; (8004744 <Trajectory+0x434>)
 80045e8:	edd3 7a00 	vldr	s15, [r3]
 80045ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f0:	ee17 0a90 	vmov	r0, s15
 80045f4:	f7fb ffb0 	bl	8000558 <__aeabi_f2d>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4640      	mov	r0, r8
 80045fe:	4649      	mov	r1, r9
 8004600:	f7fc f802 	bl	8000608 <__aeabi_dmul>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4690      	mov	r8, r2
 800460a:	4699      	mov	r9, r3
 800460c:	4b4b      	ldr	r3, [pc, #300]	; (800473c <Trajectory+0x42c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f7fb ff8f 	bl	8000534 <__aeabi_i2d>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4640      	mov	r0, r8
 800461c:	4649      	mov	r1, r9
 800461e:	f7fb fff3 	bl	8000608 <__aeabi_dmul>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4620      	mov	r0, r4
 8004628:	4629      	mov	r1, r5
 800462a:	f7fb fe37 	bl	800029c <__adddf3>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4610      	mov	r0, r2
 8004634:	4619      	mov	r1, r3
 8004636:	f7fc fadf 	bl	8000bf8 <__aeabi_d2f>
 800463a:	4603      	mov	r3, r0
 800463c:	4a44      	ldr	r2, [pc, #272]	; (8004750 <Trajectory+0x440>)
 800463e:	6013      	str	r3, [r2, #0]
		velocity = (acceleration_max * time_trajectory * sign);
 8004640:	4b40      	ldr	r3, [pc, #256]	; (8004744 <Trajectory+0x434>)
 8004642:	ed93 7a00 	vldr	s14, [r3]
 8004646:	edd7 7a05 	vldr	s15, [r7, #20]
 800464a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800464e:	4b3b      	ldr	r3, [pc, #236]	; (800473c <Trajectory+0x42c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800465a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465e:	4b3d      	ldr	r3, [pc, #244]	; (8004754 <Trajectory+0x444>)
 8004660:	edc3 7a00 	vstr	s15, [r3]
		position_acc = position;
 8004664:	4b3a      	ldr	r3, [pc, #232]	; (8004750 <Trajectory+0x440>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a3b      	ldr	r2, [pc, #236]	; (8004758 <Trajectory+0x448>)
 800466a:	6013      	str	r3, [r2, #0]
		acceleration = acceleration_max * sign;
 800466c:	4b33      	ldr	r3, [pc, #204]	; (800473c <Trajectory+0x42c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	ee07 3a90 	vmov	s15, r3
 8004674:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004678:	edd7 7a05 	vldr	s15, [r7, #20]
 800467c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004680:	4b36      	ldr	r3, [pc, #216]	; (800475c <Trajectory+0x44c>)
 8004682:	edc3 7a00 	vstr	s15, [r3]
 8004686:	e12b      	b.n	80048e0 <Trajectory+0x5d0>
	}

	//constant segment
	else if ((time_trajectory) < (time_total - time_acc)) {
 8004688:	4b29      	ldr	r3, [pc, #164]	; (8004730 <Trajectory+0x420>)
 800468a:	ed93 7a00 	vldr	s14, [r3]
 800468e:	4b27      	ldr	r3, [pc, #156]	; (800472c <Trajectory+0x41c>)
 8004690:	edd3 7a00 	vldr	s15, [r3]
 8004694:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004698:	4b2a      	ldr	r3, [pc, #168]	; (8004744 <Trajectory+0x434>)
 800469a:	edd3 7a00 	vldr	s15, [r3]
 800469e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a6:	dd5b      	ble.n	8004760 <Trajectory+0x450>
		time_trajectory += 0.0001;
 80046a8:	4b26      	ldr	r3, [pc, #152]	; (8004744 <Trajectory+0x434>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fb ff53 	bl	8000558 <__aeabi_f2d>
 80046b2:	a31b      	add	r3, pc, #108	; (adr r3, 8004720 <Trajectory+0x410>)
 80046b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b8:	f7fb fdf0 	bl	800029c <__adddf3>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4610      	mov	r0, r2
 80046c2:	4619      	mov	r1, r3
 80046c4:	f7fc fa98 	bl	8000bf8 <__aeabi_d2f>
 80046c8:	4603      	mov	r3, r0
 80046ca:	4a1e      	ldr	r2, [pc, #120]	; (8004744 <Trajectory+0x434>)
 80046cc:	6013      	str	r3, [r2, #0]
		position = position_acc + (max_velocity * (time_trajectory - time_acc));
 80046ce:	4b1d      	ldr	r3, [pc, #116]	; (8004744 <Trajectory+0x434>)
 80046d0:	ed93 7a00 	vldr	s14, [r3]
 80046d4:	4b15      	ldr	r3, [pc, #84]	; (800472c <Trajectory+0x41c>)
 80046d6:	edd3 7a00 	vldr	s15, [r3]
 80046da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046de:	4b18      	ldr	r3, [pc, #96]	; (8004740 <Trajectory+0x430>)
 80046e0:	edd3 7a00 	vldr	s15, [r3]
 80046e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046e8:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <Trajectory+0x448>)
 80046ea:	edd3 7a00 	vldr	s15, [r3]
 80046ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046f2:	4b17      	ldr	r3, [pc, #92]	; (8004750 <Trajectory+0x440>)
 80046f4:	edc3 7a00 	vstr	s15, [r3]
		position_const = position - position_acc;
 80046f8:	4b15      	ldr	r3, [pc, #84]	; (8004750 <Trajectory+0x440>)
 80046fa:	ed93 7a00 	vldr	s14, [r3]
 80046fe:	4b16      	ldr	r3, [pc, #88]	; (8004758 <Trajectory+0x448>)
 8004700:	edd3 7a00 	vldr	s15, [r3]
 8004704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004708:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <Trajectory+0x428>)
 800470a:	edc3 7a00 	vstr	s15, [r3]
		velocity = (max_velocity);
 800470e:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <Trajectory+0x430>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a10      	ldr	r2, [pc, #64]	; (8004754 <Trajectory+0x444>)
 8004714:	6013      	str	r3, [r2, #0]
		acceleration = 0;
 8004716:	4b11      	ldr	r3, [pc, #68]	; (800475c <Trajectory+0x44c>)
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	e0df      	b.n	80048e0 <Trajectory+0x5d0>
 8004720:	eb1c432d 	.word	0xeb1c432d
 8004724:	3f1a36e2 	.word	0x3f1a36e2
 8004728:	20001cb4 	.word	0x20001cb4
 800472c:	20001cd8 	.word	0x20001cd8
 8004730:	20001ce0 	.word	0x20001ce0
 8004734:	20001cdc 	.word	0x20001cdc
 8004738:	20001ce8 	.word	0x20001ce8
 800473c:	20001cc8 	.word	0x20001cc8
 8004740:	20001ce4 	.word	0x20001ce4
 8004744:	20001cd0 	.word	0x20001cd0
 8004748:	20001cb8 	.word	0x20001cb8
 800474c:	3fe00000 	.word	0x3fe00000
 8004750:	20001cbc 	.word	0x20001cbc
 8004754:	20001cc0 	.word	0x20001cc0
 8004758:	20001cec 	.word	0x20001cec
 800475c:	20001cc4 	.word	0x20001cc4
	}

	//deceleration segment
	else if (((time_total - time_acc) <= time_trajectory) && (time_trajectory < time_total)) {
 8004760:	4b7b      	ldr	r3, [pc, #492]	; (8004950 <Trajectory+0x640>)
 8004762:	ed93 7a00 	vldr	s14, [r3]
 8004766:	4b7b      	ldr	r3, [pc, #492]	; (8004954 <Trajectory+0x644>)
 8004768:	edd3 7a00 	vldr	s15, [r3]
 800476c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004770:	4b79      	ldr	r3, [pc, #484]	; (8004958 <Trajectory+0x648>)
 8004772:	edd3 7a00 	vldr	s15, [r3]
 8004776:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800477a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477e:	f200 80af 	bhi.w	80048e0 <Trajectory+0x5d0>
 8004782:	4b75      	ldr	r3, [pc, #468]	; (8004958 <Trajectory+0x648>)
 8004784:	ed93 7a00 	vldr	s14, [r3]
 8004788:	4b71      	ldr	r3, [pc, #452]	; (8004950 <Trajectory+0x640>)
 800478a:	edd3 7a00 	vldr	s15, [r3]
 800478e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004796:	f140 80a3 	bpl.w	80048e0 <Trajectory+0x5d0>
		time_trajectory += 0.0001;
 800479a:	4b6f      	ldr	r3, [pc, #444]	; (8004958 <Trajectory+0x648>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fb feda 	bl	8000558 <__aeabi_f2d>
 80047a4:	a368      	add	r3, pc, #416	; (adr r3, 8004948 <Trajectory+0x638>)
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	f7fb fd77 	bl	800029c <__adddf3>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4610      	mov	r0, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	f7fc fa1f 	bl	8000bf8 <__aeabi_d2f>
 80047ba:	4603      	mov	r3, r0
 80047bc:	4a66      	ldr	r2, [pc, #408]	; (8004958 <Trajectory+0x648>)
 80047be:	6013      	str	r3, [r2, #0]
		time_err = (time_trajectory - (time_acc + time_const));
 80047c0:	4b65      	ldr	r3, [pc, #404]	; (8004958 <Trajectory+0x648>)
 80047c2:	ed93 7a00 	vldr	s14, [r3]
 80047c6:	4b63      	ldr	r3, [pc, #396]	; (8004954 <Trajectory+0x644>)
 80047c8:	edd3 6a00 	vldr	s13, [r3]
 80047cc:	4b63      	ldr	r3, [pc, #396]	; (800495c <Trajectory+0x64c>)
 80047ce:	edd3 7a00 	vldr	s15, [r3]
 80047d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047da:	4b61      	ldr	r3, [pc, #388]	; (8004960 <Trajectory+0x650>)
 80047dc:	edc3 7a00 	vstr	s15, [r3]
		position = position_acc + position_const + (max_velocity * time_err) + (0.5 * (-1) * acceleration_max * (time_err * time_err) * sign);
 80047e0:	4b60      	ldr	r3, [pc, #384]	; (8004964 <Trajectory+0x654>)
 80047e2:	ed93 7a00 	vldr	s14, [r3]
 80047e6:	4b60      	ldr	r3, [pc, #384]	; (8004968 <Trajectory+0x658>)
 80047e8:	edd3 7a00 	vldr	s15, [r3]
 80047ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047f0:	4b5e      	ldr	r3, [pc, #376]	; (800496c <Trajectory+0x65c>)
 80047f2:	edd3 6a00 	vldr	s13, [r3]
 80047f6:	4b5a      	ldr	r3, [pc, #360]	; (8004960 <Trajectory+0x650>)
 80047f8:	edd3 7a00 	vldr	s15, [r3]
 80047fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004804:	ee17 0a90 	vmov	r0, s15
 8004808:	f7fb fea6 	bl	8000558 <__aeabi_f2d>
 800480c:	4604      	mov	r4, r0
 800480e:	460d      	mov	r5, r1
 8004810:	6978      	ldr	r0, [r7, #20]
 8004812:	f7fb fea1 	bl	8000558 <__aeabi_f2d>
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	4b55      	ldr	r3, [pc, #340]	; (8004970 <Trajectory+0x660>)
 800481c:	f7fb fef4 	bl	8000608 <__aeabi_dmul>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4690      	mov	r8, r2
 8004826:	4699      	mov	r9, r3
 8004828:	4b4d      	ldr	r3, [pc, #308]	; (8004960 <Trajectory+0x650>)
 800482a:	ed93 7a00 	vldr	s14, [r3]
 800482e:	4b4c      	ldr	r3, [pc, #304]	; (8004960 <Trajectory+0x650>)
 8004830:	edd3 7a00 	vldr	s15, [r3]
 8004834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004838:	ee17 0a90 	vmov	r0, s15
 800483c:	f7fb fe8c 	bl	8000558 <__aeabi_f2d>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4640      	mov	r0, r8
 8004846:	4649      	mov	r1, r9
 8004848:	f7fb fede 	bl	8000608 <__aeabi_dmul>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4690      	mov	r8, r2
 8004852:	4699      	mov	r9, r3
 8004854:	4b47      	ldr	r3, [pc, #284]	; (8004974 <Trajectory+0x664>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f7fb fe6b 	bl	8000534 <__aeabi_i2d>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4640      	mov	r0, r8
 8004864:	4649      	mov	r1, r9
 8004866:	f7fb fecf 	bl	8000608 <__aeabi_dmul>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4620      	mov	r0, r4
 8004870:	4629      	mov	r1, r5
 8004872:	f7fb fd13 	bl	800029c <__adddf3>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	f7fc f9bb 	bl	8000bf8 <__aeabi_d2f>
 8004882:	4603      	mov	r3, r0
 8004884:	4a3c      	ldr	r2, [pc, #240]	; (8004978 <Trajectory+0x668>)
 8004886:	6013      	str	r3, [r2, #0]
		velocity = (-acceleration_max * sign * time_err) + (max_velocity);
 8004888:	edd7 7a05 	vldr	s15, [r7, #20]
 800488c:	eeb1 7a67 	vneg.f32	s14, s15
 8004890:	4b38      	ldr	r3, [pc, #224]	; (8004974 <Trajectory+0x664>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	ee07 3a90 	vmov	s15, r3
 8004898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800489c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048a0:	4b2f      	ldr	r3, [pc, #188]	; (8004960 <Trajectory+0x650>)
 80048a2:	edd3 7a00 	vldr	s15, [r3]
 80048a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048aa:	4b30      	ldr	r3, [pc, #192]	; (800496c <Trajectory+0x65c>)
 80048ac:	edd3 7a00 	vldr	s15, [r3]
 80048b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048b4:	4b31      	ldr	r3, [pc, #196]	; (800497c <Trajectory+0x66c>)
 80048b6:	edc3 7a00 	vstr	s15, [r3]
		acceleration = -acceleration_max * sign;
 80048ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80048be:	eeb1 7a67 	vneg.f32	s14, s15
 80048c2:	4b2c      	ldr	r3, [pc, #176]	; (8004974 <Trajectory+0x664>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d2:	4b2b      	ldr	r3, [pc, #172]	; (8004980 <Trajectory+0x670>)
 80048d4:	edc3 7a00 	vstr	s15, [r3]
		initial_position = position;
 80048d8:	4b27      	ldr	r3, [pc, #156]	; (8004978 <Trajectory+0x668>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a29      	ldr	r2, [pc, #164]	; (8004984 <Trajectory+0x674>)
 80048de:	6013      	str	r3, [r2, #0]
	}

	position = (int) position;
 80048e0:	4b25      	ldr	r3, [pc, #148]	; (8004978 <Trajectory+0x668>)
 80048e2:	edd3 7a00 	vldr	s15, [r3]
 80048e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ee:	4b22      	ldr	r3, [pc, #136]	; (8004978 <Trajectory+0x668>)
 80048f0:	edc3 7a00 	vstr	s15, [r3]

	if (setpoint_now == position) {
 80048f4:	4b20      	ldr	r3, [pc, #128]	; (8004978 <Trajectory+0x668>)
 80048f6:	edd3 7a00 	vldr	s15, [r3]
 80048fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80048fe:	eeb4 7a67 	vcmp.f32	s14, s15
 8004902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004906:	d107      	bne.n	8004918 <Trajectory+0x608>
		time_trajectory = 0;
 8004908:	4b13      	ldr	r3, [pc, #76]	; (8004958 <Trajectory+0x648>)
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
		acceleration = 0;
 8004910:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <Trajectory+0x670>)
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
	}
	}

	*position_out = position;
 8004918:	4b17      	ldr	r3, [pc, #92]	; (8004978 <Trajectory+0x668>)
 800491a:	edd3 7a00 	vldr	s15, [r3]
 800491e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004922:	ee17 2a90 	vmov	r2, s15
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	601a      	str	r2, [r3, #0]
	*velocity_out = velocity;
 800492a:	4b14      	ldr	r3, [pc, #80]	; (800497c <Trajectory+0x66c>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	601a      	str	r2, [r3, #0]
	*acceleration_out = acceleration;
 8004932:	4b13      	ldr	r3, [pc, #76]	; (8004980 <Trajectory+0x670>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	601a      	str	r2, [r3, #0]
}
 800493a:	3720      	adds	r7, #32
 800493c:	46bd      	mov	sp, r7
 800493e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004942:	bf00      	nop
 8004944:	f3af 8000 	nop.w
 8004948:	eb1c432d 	.word	0xeb1c432d
 800494c:	3f1a36e2 	.word	0x3f1a36e2
 8004950:	20001ce0 	.word	0x20001ce0
 8004954:	20001cd8 	.word	0x20001cd8
 8004958:	20001cd0 	.word	0x20001cd0
 800495c:	20001cdc 	.word	0x20001cdc
 8004960:	20001cf0 	.word	0x20001cf0
 8004964:	20001cec 	.word	0x20001cec
 8004968:	20001ce8 	.word	0x20001ce8
 800496c:	20001ce4 	.word	0x20001ce4
 8004970:	bfe00000 	.word	0xbfe00000
 8004974:	20001cc8 	.word	0x20001cc8
 8004978:	20001cbc 	.word	0x20001cbc
 800497c:	20001cc0 	.word	0x20001cc0
 8004980:	20001cc4 	.word	0x20001cc4
 8004984:	20001cb8 	.word	0x20001cb8

08004988 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800498c:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <MX_USART1_UART_Init+0x4c>)
 800498e:	4a12      	ldr	r2, [pc, #72]	; (80049d8 <MX_USART1_UART_Init+0x50>)
 8004990:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004992:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <MX_USART1_UART_Init+0x4c>)
 8004994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004998:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800499a:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <MX_USART1_UART_Init+0x4c>)
 800499c:	2200      	movs	r2, #0
 800499e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80049a0:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <MX_USART1_UART_Init+0x4c>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <MX_USART1_UART_Init+0x4c>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049ac:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <MX_USART1_UART_Init+0x4c>)
 80049ae:	220c      	movs	r2, #12
 80049b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049b2:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <MX_USART1_UART_Init+0x4c>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049b8:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <MX_USART1_UART_Init+0x4c>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80049be:	4805      	ldr	r0, [pc, #20]	; (80049d4 <MX_USART1_UART_Init+0x4c>)
 80049c0:	f004 fc7e 	bl	80092c0 <HAL_UART_Init>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80049ca:	f7fe ffc9 	bl	8003960 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80049ce:	bf00      	nop
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20001cf4 	.word	0x20001cf4
 80049d8:	40011000 	.word	0x40011000

080049dc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80049e0:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <MX_USART2_UART_Init+0x50>)
 80049e2:	4a13      	ldr	r2, [pc, #76]	; (8004a30 <MX_USART2_UART_Init+0x54>)
 80049e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80049e6:	4b11      	ldr	r3, [pc, #68]	; (8004a2c <MX_USART2_UART_Init+0x50>)
 80049e8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80049ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <MX_USART2_UART_Init+0x50>)
 80049f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049f4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80049f6:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <MX_USART2_UART_Init+0x50>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80049fc:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <MX_USART2_UART_Init+0x50>)
 80049fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <MX_USART2_UART_Init+0x50>)
 8004a06:	220c      	movs	r2, #12
 8004a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a0a:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <MX_USART2_UART_Init+0x50>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <MX_USART2_UART_Init+0x50>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a16:	4805      	ldr	r0, [pc, #20]	; (8004a2c <MX_USART2_UART_Init+0x50>)
 8004a18:	f004 fc52 	bl	80092c0 <HAL_UART_Init>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8004a22:	f7fe ff9d 	bl	8003960 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a26:	bf00      	nop
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20001d68 	.word	0x20001d68
 8004a30:	40004400 	.word	0x40004400

08004a34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08c      	sub	sp, #48	; 0x30
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a3c:	f107 031c 	add.w	r3, r7, #28
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	605a      	str	r2, [r3, #4]
 8004a46:	609a      	str	r2, [r3, #8]
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a51      	ldr	r2, [pc, #324]	; (8004b98 <HAL_UART_MspInit+0x164>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d135      	bne.n	8004ac2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a56:	2300      	movs	r3, #0
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	4b50      	ldr	r3, [pc, #320]	; (8004b9c <HAL_UART_MspInit+0x168>)
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5e:	4a4f      	ldr	r2, [pc, #316]	; (8004b9c <HAL_UART_MspInit+0x168>)
 8004a60:	f043 0310 	orr.w	r3, r3, #16
 8004a64:	6453      	str	r3, [r2, #68]	; 0x44
 8004a66:	4b4d      	ldr	r3, [pc, #308]	; (8004b9c <HAL_UART_MspInit+0x168>)
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	4b49      	ldr	r3, [pc, #292]	; (8004b9c <HAL_UART_MspInit+0x168>)
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	4a48      	ldr	r2, [pc, #288]	; (8004b9c <HAL_UART_MspInit+0x168>)
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	6313      	str	r3, [r2, #48]	; 0x30
 8004a82:	4b46      	ldr	r3, [pc, #280]	; (8004b9c <HAL_UART_MspInit+0x168>)
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a94:	2302      	movs	r3, #2
 8004a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004aa0:	2307      	movs	r3, #7
 8004aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aa4:	f107 031c 	add.w	r3, r7, #28
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	483d      	ldr	r0, [pc, #244]	; (8004ba0 <HAL_UART_MspInit+0x16c>)
 8004aac:	f001 f8d2 	bl	8005c54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	2025      	movs	r0, #37	; 0x25
 8004ab6:	f000 fc88 	bl	80053ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004aba:	2025      	movs	r0, #37	; 0x25
 8004abc:	f000 fca1 	bl	8005402 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004ac0:	e066      	b.n	8004b90 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART2)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a37      	ldr	r2, [pc, #220]	; (8004ba4 <HAL_UART_MspInit+0x170>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d161      	bne.n	8004b90 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004acc:	2300      	movs	r3, #0
 8004ace:	613b      	str	r3, [r7, #16]
 8004ad0:	4b32      	ldr	r3, [pc, #200]	; (8004b9c <HAL_UART_MspInit+0x168>)
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	4a31      	ldr	r2, [pc, #196]	; (8004b9c <HAL_UART_MspInit+0x168>)
 8004ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ada:	6413      	str	r3, [r2, #64]	; 0x40
 8004adc:	4b2f      	ldr	r3, [pc, #188]	; (8004b9c <HAL_UART_MspInit+0x168>)
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	4b2b      	ldr	r3, [pc, #172]	; (8004b9c <HAL_UART_MspInit+0x168>)
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	4a2a      	ldr	r2, [pc, #168]	; (8004b9c <HAL_UART_MspInit+0x168>)
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	6313      	str	r3, [r2, #48]	; 0x30
 8004af8:	4b28      	ldr	r3, [pc, #160]	; (8004b9c <HAL_UART_MspInit+0x168>)
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004b04:	230c      	movs	r3, #12
 8004b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b10:	2303      	movs	r3, #3
 8004b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b14:	2307      	movs	r3, #7
 8004b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b18:	f107 031c 	add.w	r3, r7, #28
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4820      	ldr	r0, [pc, #128]	; (8004ba0 <HAL_UART_MspInit+0x16c>)
 8004b20:	f001 f898 	bl	8005c54 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004b24:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <HAL_UART_MspInit+0x174>)
 8004b26:	4a21      	ldr	r2, [pc, #132]	; (8004bac <HAL_UART_MspInit+0x178>)
 8004b28:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004b2a:	4b1f      	ldr	r3, [pc, #124]	; (8004ba8 <HAL_UART_MspInit+0x174>)
 8004b2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b30:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b32:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <HAL_UART_MspInit+0x174>)
 8004b34:	2240      	movs	r2, #64	; 0x40
 8004b36:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b38:	4b1b      	ldr	r3, [pc, #108]	; (8004ba8 <HAL_UART_MspInit+0x174>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b3e:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <HAL_UART_MspInit+0x174>)
 8004b40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b44:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b46:	4b18      	ldr	r3, [pc, #96]	; (8004ba8 <HAL_UART_MspInit+0x174>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b4c:	4b16      	ldr	r3, [pc, #88]	; (8004ba8 <HAL_UART_MspInit+0x174>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004b52:	4b15      	ldr	r3, [pc, #84]	; (8004ba8 <HAL_UART_MspInit+0x174>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b58:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <HAL_UART_MspInit+0x174>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b5e:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <HAL_UART_MspInit+0x174>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004b64:	4810      	ldr	r0, [pc, #64]	; (8004ba8 <HAL_UART_MspInit+0x174>)
 8004b66:	f000 fc67 	bl	8005438 <HAL_DMA_Init>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8004b70:	f7fe fef6 	bl	8003960 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a0c      	ldr	r2, [pc, #48]	; (8004ba8 <HAL_UART_MspInit+0x174>)
 8004b78:	635a      	str	r2, [r3, #52]	; 0x34
 8004b7a:	4a0b      	ldr	r2, [pc, #44]	; (8004ba8 <HAL_UART_MspInit+0x174>)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004b80:	2200      	movs	r2, #0
 8004b82:	2100      	movs	r1, #0
 8004b84:	2026      	movs	r0, #38	; 0x26
 8004b86:	f000 fc20 	bl	80053ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b8a:	2026      	movs	r0, #38	; 0x26
 8004b8c:	f000 fc39 	bl	8005402 <HAL_NVIC_EnableIRQ>
}
 8004b90:	bf00      	nop
 8004b92:	3730      	adds	r7, #48	; 0x30
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40011000 	.word	0x40011000
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	40020000 	.word	0x40020000
 8004ba4:	40004400 	.word	0x40004400
 8004ba8:	20001ddc 	.word	0x20001ddc
 8004bac:	400260a0 	.word	0x400260a0

08004bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004be8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004bb4:	480d      	ldr	r0, [pc, #52]	; (8004bec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004bb6:	490e      	ldr	r1, [pc, #56]	; (8004bf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004bb8:	4a0e      	ldr	r2, [pc, #56]	; (8004bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bbc:	e002      	b.n	8004bc4 <LoopCopyDataInit>

08004bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bc2:	3304      	adds	r3, #4

08004bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bc8:	d3f9      	bcc.n	8004bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bca:	4a0b      	ldr	r2, [pc, #44]	; (8004bf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004bcc:	4c0b      	ldr	r4, [pc, #44]	; (8004bfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8004bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bd0:	e001      	b.n	8004bd6 <LoopFillZerobss>

08004bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bd4:	3204      	adds	r2, #4

08004bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bd8:	d3fb      	bcc.n	8004bd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004bda:	f7ff f82b 	bl	8003c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bde:	f005 fe05 	bl	800a7ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004be2:	f7fe fd9d 	bl	8003720 <main>
  bx  lr    
 8004be6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bf0:	20000408 	.word	0x20000408
  ldr r2, =_sidata
 8004bf4:	08011458 	.word	0x08011458
  ldr r2, =_sbss
 8004bf8:	20000408 	.word	0x20000408
  ldr r4, =_ebss
 8004bfc:	20001e50 	.word	0x20001e50

08004c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c00:	e7fe      	b.n	8004c00 <ADC_IRQHandler>
	...

08004c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c08:	4b0e      	ldr	r3, [pc, #56]	; (8004c44 <HAL_Init+0x40>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a0d      	ldr	r2, [pc, #52]	; (8004c44 <HAL_Init+0x40>)
 8004c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c14:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <HAL_Init+0x40>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a0a      	ldr	r2, [pc, #40]	; (8004c44 <HAL_Init+0x40>)
 8004c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c20:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <HAL_Init+0x40>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a07      	ldr	r2, [pc, #28]	; (8004c44 <HAL_Init+0x40>)
 8004c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c2c:	2003      	movs	r0, #3
 8004c2e:	f000 fbc1 	bl	80053b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c32:	2000      	movs	r0, #0
 8004c34:	f000 f808 	bl	8004c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c38:	f7fe fe98 	bl	800396c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40023c00 	.word	0x40023c00

08004c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c50:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <HAL_InitTick+0x54>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <HAL_InitTick+0x58>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fbd9 	bl	800541e <HAL_SYSTICK_Config>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e00e      	b.n	8004c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b0f      	cmp	r3, #15
 8004c7a:	d80a      	bhi.n	8004c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295
 8004c84:	f000 fba1 	bl	80053ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c88:	4a06      	ldr	r2, [pc, #24]	; (8004ca4 <HAL_InitTick+0x5c>)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e000      	b.n	8004c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20000228 	.word	0x20000228
 8004ca0:	20000230 	.word	0x20000230
 8004ca4:	2000022c 	.word	0x2000022c

08004ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cac:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <HAL_IncTick+0x20>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <HAL_IncTick+0x24>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	4a04      	ldr	r2, [pc, #16]	; (8004ccc <HAL_IncTick+0x24>)
 8004cba:	6013      	str	r3, [r2, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	20000230 	.word	0x20000230
 8004ccc:	20001e3c 	.word	0x20001e3c

08004cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8004cd4:	4b03      	ldr	r3, [pc, #12]	; (8004ce4 <HAL_GetTick+0x14>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	20001e3c 	.word	0x20001e3c

08004ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cf0:	f7ff ffee 	bl	8004cd0 <HAL_GetTick>
 8004cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d00:	d005      	beq.n	8004d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d02:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <HAL_Delay+0x44>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d0e:	bf00      	nop
 8004d10:	f7ff ffde 	bl	8004cd0 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d8f7      	bhi.n	8004d10 <HAL_Delay+0x28>
  {
  }
}
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000230 	.word	0x20000230

08004d30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e033      	b.n	8004dae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fd f856 	bl	8001e00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d118      	bne.n	8004da0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d76:	f023 0302 	bic.w	r3, r3, #2
 8004d7a:	f043 0202 	orr.w	r2, r3, #2
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f94a 	bl	800501c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f023 0303 	bic.w	r3, r3, #3
 8004d96:	f043 0201 	orr.w	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
 8004d9e:	e001      	b.n	8004da4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_ADC_ConfigChannel+0x1c>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e113      	b.n	8004ffc <HAL_ADC_ConfigChannel+0x244>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b09      	cmp	r3, #9
 8004de2:	d925      	bls.n	8004e30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68d9      	ldr	r1, [r3, #12]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	4613      	mov	r3, r2
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	4413      	add	r3, r2
 8004df8:	3b1e      	subs	r3, #30
 8004dfa:	2207      	movs	r2, #7
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43da      	mvns	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	400a      	ands	r2, r1
 8004e08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68d9      	ldr	r1, [r3, #12]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	4403      	add	r3, r0
 8004e22:	3b1e      	subs	r3, #30
 8004e24:	409a      	lsls	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	60da      	str	r2, [r3, #12]
 8004e2e:	e022      	b.n	8004e76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6919      	ldr	r1, [r3, #16]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	4613      	mov	r3, r2
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	4413      	add	r3, r2
 8004e44:	2207      	movs	r2, #7
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43da      	mvns	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	400a      	ands	r2, r1
 8004e52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6919      	ldr	r1, [r3, #16]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	4618      	mov	r0, r3
 8004e66:	4603      	mov	r3, r0
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	4403      	add	r3, r0
 8004e6c:	409a      	lsls	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b06      	cmp	r3, #6
 8004e7c:	d824      	bhi.n	8004ec8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3b05      	subs	r3, #5
 8004e90:	221f      	movs	r2, #31
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	43da      	mvns	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	400a      	ands	r2, r1
 8004e9e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	4618      	mov	r0, r3
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	3b05      	subs	r3, #5
 8004eba:	fa00 f203 	lsl.w	r2, r0, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ec6:	e04c      	b.n	8004f62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b0c      	cmp	r3, #12
 8004ece:	d824      	bhi.n	8004f1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	3b23      	subs	r3, #35	; 0x23
 8004ee2:	221f      	movs	r2, #31
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	43da      	mvns	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	400a      	ands	r2, r1
 8004ef0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	4618      	mov	r0, r3
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	3b23      	subs	r3, #35	; 0x23
 8004f0c:	fa00 f203 	lsl.w	r2, r0, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
 8004f18:	e023      	b.n	8004f62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	3b41      	subs	r3, #65	; 0x41
 8004f2c:	221f      	movs	r2, #31
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	43da      	mvns	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	400a      	ands	r2, r1
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	4618      	mov	r0, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	3b41      	subs	r3, #65	; 0x41
 8004f56:	fa00 f203 	lsl.w	r2, r0, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f62:	4b29      	ldr	r3, [pc, #164]	; (8005008 <HAL_ADC_ConfigChannel+0x250>)
 8004f64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a28      	ldr	r2, [pc, #160]	; (800500c <HAL_ADC_ConfigChannel+0x254>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d10f      	bne.n	8004f90 <HAL_ADC_ConfigChannel+0x1d8>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b12      	cmp	r3, #18
 8004f76:	d10b      	bne.n	8004f90 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a1d      	ldr	r2, [pc, #116]	; (800500c <HAL_ADC_ConfigChannel+0x254>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d12b      	bne.n	8004ff2 <HAL_ADC_ConfigChannel+0x23a>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a1c      	ldr	r2, [pc, #112]	; (8005010 <HAL_ADC_ConfigChannel+0x258>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <HAL_ADC_ConfigChannel+0x1f4>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b11      	cmp	r3, #17
 8004faa:	d122      	bne.n	8004ff2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a11      	ldr	r2, [pc, #68]	; (8005010 <HAL_ADC_ConfigChannel+0x258>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d111      	bne.n	8004ff2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004fce:	4b11      	ldr	r3, [pc, #68]	; (8005014 <HAL_ADC_ConfigChannel+0x25c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a11      	ldr	r2, [pc, #68]	; (8005018 <HAL_ADC_ConfigChannel+0x260>)
 8004fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd8:	0c9a      	lsrs	r2, r3, #18
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004fe4:	e002      	b.n	8004fec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f9      	bne.n	8004fe6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	40012300 	.word	0x40012300
 800500c:	40012000 	.word	0x40012000
 8005010:	10000012 	.word	0x10000012
 8005014:	20000228 	.word	0x20000228
 8005018:	431bde83 	.word	0x431bde83

0800501c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005024:	4b79      	ldr	r3, [pc, #484]	; (800520c <ADC_Init+0x1f0>)
 8005026:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	431a      	orrs	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005050:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6859      	ldr	r1, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	021a      	lsls	r2, r3, #8
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005074:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6859      	ldr	r1, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005096:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6899      	ldr	r1, [r3, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ae:	4a58      	ldr	r2, [pc, #352]	; (8005210 <ADC_Init+0x1f4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d022      	beq.n	80050fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6899      	ldr	r1, [r3, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6899      	ldr	r1, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	609a      	str	r2, [r3, #8]
 80050f8:	e00f      	b.n	800511a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005108:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005118:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0202 	bic.w	r2, r2, #2
 8005128:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6899      	ldr	r1, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	7e1b      	ldrb	r3, [r3, #24]
 8005134:	005a      	lsls	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01b      	beq.n	8005180 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005156:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005166:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6859      	ldr	r1, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	3b01      	subs	r3, #1
 8005174:	035a      	lsls	r2, r3, #13
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	605a      	str	r2, [r3, #4]
 800517e:	e007      	b.n	8005190 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800518e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800519e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	051a      	lsls	r2, r3, #20
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80051c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6899      	ldr	r1, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051d2:	025a      	lsls	r2, r3, #9
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6899      	ldr	r1, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	029a      	lsls	r2, r3, #10
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40012300 	.word	0x40012300
 8005210:	0f000001 	.word	0x0f000001

08005214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005224:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <__NVIC_SetPriorityGrouping+0x44>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005230:	4013      	ands	r3, r2
 8005232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800523c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005246:	4a04      	ldr	r2, [pc, #16]	; (8005258 <__NVIC_SetPriorityGrouping+0x44>)
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	60d3      	str	r3, [r2, #12]
}
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	e000ed00 	.word	0xe000ed00

0800525c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005260:	4b04      	ldr	r3, [pc, #16]	; (8005274 <__NVIC_GetPriorityGrouping+0x18>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	0a1b      	lsrs	r3, r3, #8
 8005266:	f003 0307 	and.w	r3, r3, #7
}
 800526a:	4618      	mov	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	e000ed00 	.word	0xe000ed00

08005278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	4603      	mov	r3, r0
 8005280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005286:	2b00      	cmp	r3, #0
 8005288:	db0b      	blt.n	80052a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	f003 021f 	and.w	r2, r3, #31
 8005290:	4907      	ldr	r1, [pc, #28]	; (80052b0 <__NVIC_EnableIRQ+0x38>)
 8005292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	2001      	movs	r0, #1
 800529a:	fa00 f202 	lsl.w	r2, r0, r2
 800529e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	e000e100 	.word	0xe000e100

080052b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4603      	mov	r3, r0
 80052bc:	6039      	str	r1, [r7, #0]
 80052be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	db0a      	blt.n	80052de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	490c      	ldr	r1, [pc, #48]	; (8005300 <__NVIC_SetPriority+0x4c>)
 80052ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d2:	0112      	lsls	r2, r2, #4
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	440b      	add	r3, r1
 80052d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052dc:	e00a      	b.n	80052f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	4908      	ldr	r1, [pc, #32]	; (8005304 <__NVIC_SetPriority+0x50>)
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	3b04      	subs	r3, #4
 80052ec:	0112      	lsls	r2, r2, #4
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	440b      	add	r3, r1
 80052f2:	761a      	strb	r2, [r3, #24]
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	e000e100 	.word	0xe000e100
 8005304:	e000ed00 	.word	0xe000ed00

08005308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005308:	b480      	push	{r7}
 800530a:	b089      	sub	sp, #36	; 0x24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f1c3 0307 	rsb	r3, r3, #7
 8005322:	2b04      	cmp	r3, #4
 8005324:	bf28      	it	cs
 8005326:	2304      	movcs	r3, #4
 8005328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	3304      	adds	r3, #4
 800532e:	2b06      	cmp	r3, #6
 8005330:	d902      	bls.n	8005338 <NVIC_EncodePriority+0x30>
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	3b03      	subs	r3, #3
 8005336:	e000      	b.n	800533a <NVIC_EncodePriority+0x32>
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800533c:	f04f 32ff 	mov.w	r2, #4294967295
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	43da      	mvns	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	401a      	ands	r2, r3
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005350:	f04f 31ff 	mov.w	r1, #4294967295
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	fa01 f303 	lsl.w	r3, r1, r3
 800535a:	43d9      	mvns	r1, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005360:	4313      	orrs	r3, r2
         );
}
 8005362:	4618      	mov	r0, r3
 8005364:	3724      	adds	r7, #36	; 0x24
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3b01      	subs	r3, #1
 800537c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005380:	d301      	bcc.n	8005386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005382:	2301      	movs	r3, #1
 8005384:	e00f      	b.n	80053a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005386:	4a0a      	ldr	r2, [pc, #40]	; (80053b0 <SysTick_Config+0x40>)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3b01      	subs	r3, #1
 800538c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800538e:	210f      	movs	r1, #15
 8005390:	f04f 30ff 	mov.w	r0, #4294967295
 8005394:	f7ff ff8e 	bl	80052b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <SysTick_Config+0x40>)
 800539a:	2200      	movs	r2, #0
 800539c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800539e:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <SysTick_Config+0x40>)
 80053a0:	2207      	movs	r2, #7
 80053a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	e000e010 	.word	0xe000e010

080053b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff ff29 	bl	8005214 <__NVIC_SetPriorityGrouping>
}
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b086      	sub	sp, #24
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	4603      	mov	r3, r0
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
 80053d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053dc:	f7ff ff3e 	bl	800525c <__NVIC_GetPriorityGrouping>
 80053e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	68b9      	ldr	r1, [r7, #8]
 80053e6:	6978      	ldr	r0, [r7, #20]
 80053e8:	f7ff ff8e 	bl	8005308 <NVIC_EncodePriority>
 80053ec:	4602      	mov	r2, r0
 80053ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053f2:	4611      	mov	r1, r2
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff ff5d 	bl	80052b4 <__NVIC_SetPriority>
}
 80053fa:	bf00      	nop
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	4603      	mov	r3, r0
 800540a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800540c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff ff31 	bl	8005278 <__NVIC_EnableIRQ>
}
 8005416:	bf00      	nop
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff ffa2 	bl	8005370 <SysTick_Config>
 800542c:	4603      	mov	r3, r0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005444:	f7ff fc44 	bl	8004cd0 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e099      	b.n	8005588 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0201 	bic.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005474:	e00f      	b.n	8005496 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005476:	f7ff fc2b 	bl	8004cd0 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b05      	cmp	r3, #5
 8005482:	d908      	bls.n	8005496 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2203      	movs	r2, #3
 800548e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e078      	b.n	8005588 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1e8      	bne.n	8005476 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4b38      	ldr	r3, [pc, #224]	; (8005590 <HAL_DMA_Init+0x158>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d107      	bne.n	8005500 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	4313      	orrs	r3, r2
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f023 0307 	bic.w	r3, r3, #7
 8005516:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	2b04      	cmp	r3, #4
 8005528:	d117      	bne.n	800555a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00e      	beq.n	800555a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fb0d 	bl	8005b5c <DMA_CheckFifoParam>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d008      	beq.n	800555a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2240      	movs	r2, #64	; 0x40
 800554c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005556:	2301      	movs	r3, #1
 8005558:	e016      	b.n	8005588 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fac4 	bl	8005af0 <DMA_CalcBaseAndBitshift>
 8005568:	4603      	mov	r3, r0
 800556a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005570:	223f      	movs	r2, #63	; 0x3f
 8005572:	409a      	lsls	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	f010803f 	.word	0xf010803f

08005594 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
 80055a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HAL_DMA_Start_IT+0x26>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e040      	b.n	800563c <HAL_DMA_Start_IT+0xa8>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d12f      	bne.n	800562e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2202      	movs	r2, #2
 80055d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 fa56 	bl	8005a94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ec:	223f      	movs	r2, #63	; 0x3f
 80055ee:	409a      	lsls	r2, r3
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0216 	orr.w	r2, r2, #22
 8005602:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0208 	orr.w	r2, r2, #8
 800561a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0201 	orr.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	e005      	b.n	800563a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005636:	2302      	movs	r3, #2
 8005638:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800563a:	7dfb      	ldrb	r3, [r7, #23]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005650:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005652:	f7ff fb3d 	bl	8004cd0 <HAL_GetTick>
 8005656:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d008      	beq.n	8005676 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2280      	movs	r2, #128	; 0x80
 8005668:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e052      	b.n	800571c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0216 	bic.w	r2, r2, #22
 8005684:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695a      	ldr	r2, [r3, #20]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005694:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d103      	bne.n	80056a6 <HAL_DMA_Abort+0x62>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0208 	bic.w	r2, r2, #8
 80056b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0201 	bic.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056c6:	e013      	b.n	80056f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056c8:	f7ff fb02 	bl	8004cd0 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b05      	cmp	r3, #5
 80056d4:	d90c      	bls.n	80056f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2203      	movs	r2, #3
 80056e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e015      	b.n	800571c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1e4      	bne.n	80056c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005702:	223f      	movs	r2, #63	; 0x3f
 8005704:	409a      	lsls	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d004      	beq.n	8005742 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2280      	movs	r2, #128	; 0x80
 800573c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e00c      	b.n	800575c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2205      	movs	r2, #5
 8005746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0201 	bic.w	r2, r2, #1
 8005758:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005774:	4b8e      	ldr	r3, [pc, #568]	; (80059b0 <HAL_DMA_IRQHandler+0x248>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a8e      	ldr	r2, [pc, #568]	; (80059b4 <HAL_DMA_IRQHandler+0x24c>)
 800577a:	fba2 2303 	umull	r2, r3, r2, r3
 800577e:	0a9b      	lsrs	r3, r3, #10
 8005780:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005786:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005792:	2208      	movs	r2, #8
 8005794:	409a      	lsls	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4013      	ands	r3, r2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d01a      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d013      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0204 	bic.w	r2, r2, #4
 80057ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c0:	2208      	movs	r2, #8
 80057c2:	409a      	lsls	r2, r3
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057cc:	f043 0201 	orr.w	r2, r3, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d8:	2201      	movs	r2, #1
 80057da:	409a      	lsls	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4013      	ands	r3, r2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d012      	beq.n	800580a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00b      	beq.n	800580a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f6:	2201      	movs	r2, #1
 80057f8:	409a      	lsls	r2, r3
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005802:	f043 0202 	orr.w	r2, r3, #2
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580e:	2204      	movs	r2, #4
 8005810:	409a      	lsls	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4013      	ands	r3, r2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d012      	beq.n	8005840 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00b      	beq.n	8005840 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582c:	2204      	movs	r2, #4
 800582e:	409a      	lsls	r2, r3
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005838:	f043 0204 	orr.w	r2, r3, #4
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005844:	2210      	movs	r2, #16
 8005846:	409a      	lsls	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4013      	ands	r3, r2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d043      	beq.n	80058d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0308 	and.w	r3, r3, #8
 800585a:	2b00      	cmp	r3, #0
 800585c:	d03c      	beq.n	80058d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005862:	2210      	movs	r2, #16
 8005864:	409a      	lsls	r2, r3
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d018      	beq.n	80058aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d108      	bne.n	8005898 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	d024      	beq.n	80058d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	4798      	blx	r3
 8005896:	e01f      	b.n	80058d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01b      	beq.n	80058d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	4798      	blx	r3
 80058a8:	e016      	b.n	80058d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d107      	bne.n	80058c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0208 	bic.w	r2, r2, #8
 80058c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058dc:	2220      	movs	r2, #32
 80058de:	409a      	lsls	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4013      	ands	r3, r2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 808f 	beq.w	8005a08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0310 	and.w	r3, r3, #16
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 8087 	beq.w	8005a08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fe:	2220      	movs	r2, #32
 8005900:	409a      	lsls	r2, r3
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b05      	cmp	r3, #5
 8005910:	d136      	bne.n	8005980 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0216 	bic.w	r2, r2, #22
 8005920:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	695a      	ldr	r2, [r3, #20]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005930:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d103      	bne.n	8005942 <HAL_DMA_IRQHandler+0x1da>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800593e:	2b00      	cmp	r3, #0
 8005940:	d007      	beq.n	8005952 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0208 	bic.w	r2, r2, #8
 8005950:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005956:	223f      	movs	r2, #63	; 0x3f
 8005958:	409a      	lsls	r2, r3
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005972:	2b00      	cmp	r3, #0
 8005974:	d07e      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	4798      	blx	r3
        }
        return;
 800597e:	e079      	b.n	8005a74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d01d      	beq.n	80059ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10d      	bne.n	80059b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d031      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	4798      	blx	r3
 80059ac:	e02c      	b.n	8005a08 <HAL_DMA_IRQHandler+0x2a0>
 80059ae:	bf00      	nop
 80059b0:	20000228 	.word	0x20000228
 80059b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d023      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	4798      	blx	r3
 80059c8:	e01e      	b.n	8005a08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10f      	bne.n	80059f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0210 	bic.w	r2, r2, #16
 80059e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d032      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d022      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2205      	movs	r2, #5
 8005a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0201 	bic.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	3301      	adds	r3, #1
 8005a38:	60bb      	str	r3, [r7, #8]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d307      	bcc.n	8005a50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1f2      	bne.n	8005a34 <HAL_DMA_IRQHandler+0x2cc>
 8005a4e:	e000      	b.n	8005a52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	4798      	blx	r3
 8005a72:	e000      	b.n	8005a76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a74:	bf00      	nop
    }
  }
}
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ab0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2b40      	cmp	r3, #64	; 0x40
 8005ac0:	d108      	bne.n	8005ad4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005ad2:	e007      	b.n	8005ae4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	60da      	str	r2, [r3, #12]
}
 8005ae4:	bf00      	nop
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	3b10      	subs	r3, #16
 8005b00:	4a14      	ldr	r2, [pc, #80]	; (8005b54 <DMA_CalcBaseAndBitshift+0x64>)
 8005b02:	fba2 2303 	umull	r2, r3, r2, r3
 8005b06:	091b      	lsrs	r3, r3, #4
 8005b08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b0a:	4a13      	ldr	r2, [pc, #76]	; (8005b58 <DMA_CalcBaseAndBitshift+0x68>)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	461a      	mov	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d909      	bls.n	8005b32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	1d1a      	adds	r2, r3, #4
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	659a      	str	r2, [r3, #88]	; 0x58
 8005b30:	e007      	b.n	8005b42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b3a:	f023 0303 	bic.w	r3, r3, #3
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	aaaaaaab 	.word	0xaaaaaaab
 8005b58:	08010d74 	.word	0x08010d74

08005b5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d11f      	bne.n	8005bb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d856      	bhi.n	8005c2a <DMA_CheckFifoParam+0xce>
 8005b7c:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <DMA_CheckFifoParam+0x28>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005b95 	.word	0x08005b95
 8005b88:	08005ba7 	.word	0x08005ba7
 8005b8c:	08005b95 	.word	0x08005b95
 8005b90:	08005c2b 	.word	0x08005c2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d046      	beq.n	8005c2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ba4:	e043      	b.n	8005c2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bae:	d140      	bne.n	8005c32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bb4:	e03d      	b.n	8005c32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bbe:	d121      	bne.n	8005c04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d837      	bhi.n	8005c36 <DMA_CheckFifoParam+0xda>
 8005bc6:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <DMA_CheckFifoParam+0x70>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005bdd 	.word	0x08005bdd
 8005bd0:	08005be3 	.word	0x08005be3
 8005bd4:	08005bdd 	.word	0x08005bdd
 8005bd8:	08005bf5 	.word	0x08005bf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	73fb      	strb	r3, [r7, #15]
      break;
 8005be0:	e030      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d025      	beq.n	8005c3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bf2:	e022      	b.n	8005c3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bfc:	d11f      	bne.n	8005c3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c02:	e01c      	b.n	8005c3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d903      	bls.n	8005c12 <DMA_CheckFifoParam+0xb6>
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d003      	beq.n	8005c18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c10:	e018      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	73fb      	strb	r3, [r7, #15]
      break;
 8005c16:	e015      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00e      	beq.n	8005c42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	73fb      	strb	r3, [r7, #15]
      break;
 8005c28:	e00b      	b.n	8005c42 <DMA_CheckFifoParam+0xe6>
      break;
 8005c2a:	bf00      	nop
 8005c2c:	e00a      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
      break;
 8005c2e:	bf00      	nop
 8005c30:	e008      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
      break;
 8005c32:	bf00      	nop
 8005c34:	e006      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
      break;
 8005c36:	bf00      	nop
 8005c38:	e004      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
      break;
 8005c3a:	bf00      	nop
 8005c3c:	e002      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c3e:	bf00      	nop
 8005c40:	e000      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
      break;
 8005c42:	bf00      	nop
    }
  } 
  
  return status; 
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop

08005c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b089      	sub	sp, #36	; 0x24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61fb      	str	r3, [r7, #28]
 8005c6e:	e159      	b.n	8005f24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c70:	2201      	movs	r2, #1
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4013      	ands	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	f040 8148 	bne.w	8005f1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d005      	beq.n	8005ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d130      	bne.n	8005d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	43db      	mvns	r3, r3
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cdc:	2201      	movs	r2, #1
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	091b      	lsrs	r3, r3, #4
 8005cf2:	f003 0201 	and.w	r2, r3, #1
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f003 0303 	and.w	r3, r3, #3
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d017      	beq.n	8005d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	2203      	movs	r2, #3
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	43db      	mvns	r3, r3
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	fa02 f303 	lsl.w	r3, r2, r3
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f003 0303 	and.w	r3, r3, #3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d123      	bne.n	8005d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	08da      	lsrs	r2, r3, #3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3208      	adds	r2, #8
 8005d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	f003 0307 	and.w	r3, r3, #7
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	220f      	movs	r2, #15
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	43db      	mvns	r3, r3
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	4013      	ands	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	691a      	ldr	r2, [r3, #16]
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f003 0307 	and.w	r3, r3, #7
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	08da      	lsrs	r2, r3, #3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3208      	adds	r2, #8
 8005d92:	69b9      	ldr	r1, [r7, #24]
 8005d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	2203      	movs	r2, #3
 8005da4:	fa02 f303 	lsl.w	r3, r2, r3
 8005da8:	43db      	mvns	r3, r3
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	4013      	ands	r3, r2
 8005dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f003 0203 	and.w	r2, r3, #3
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80a2 	beq.w	8005f1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	4b57      	ldr	r3, [pc, #348]	; (8005f3c <HAL_GPIO_Init+0x2e8>)
 8005de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de2:	4a56      	ldr	r2, [pc, #344]	; (8005f3c <HAL_GPIO_Init+0x2e8>)
 8005de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005de8:	6453      	str	r3, [r2, #68]	; 0x44
 8005dea:	4b54      	ldr	r3, [pc, #336]	; (8005f3c <HAL_GPIO_Init+0x2e8>)
 8005dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005df6:	4a52      	ldr	r2, [pc, #328]	; (8005f40 <HAL_GPIO_Init+0x2ec>)
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	089b      	lsrs	r3, r3, #2
 8005dfc:	3302      	adds	r3, #2
 8005dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	220f      	movs	r2, #15
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	43db      	mvns	r3, r3
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	4013      	ands	r3, r2
 8005e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a49      	ldr	r2, [pc, #292]	; (8005f44 <HAL_GPIO_Init+0x2f0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d019      	beq.n	8005e56 <HAL_GPIO_Init+0x202>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a48      	ldr	r2, [pc, #288]	; (8005f48 <HAL_GPIO_Init+0x2f4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d013      	beq.n	8005e52 <HAL_GPIO_Init+0x1fe>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a47      	ldr	r2, [pc, #284]	; (8005f4c <HAL_GPIO_Init+0x2f8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00d      	beq.n	8005e4e <HAL_GPIO_Init+0x1fa>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a46      	ldr	r2, [pc, #280]	; (8005f50 <HAL_GPIO_Init+0x2fc>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d007      	beq.n	8005e4a <HAL_GPIO_Init+0x1f6>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a45      	ldr	r2, [pc, #276]	; (8005f54 <HAL_GPIO_Init+0x300>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d101      	bne.n	8005e46 <HAL_GPIO_Init+0x1f2>
 8005e42:	2304      	movs	r3, #4
 8005e44:	e008      	b.n	8005e58 <HAL_GPIO_Init+0x204>
 8005e46:	2307      	movs	r3, #7
 8005e48:	e006      	b.n	8005e58 <HAL_GPIO_Init+0x204>
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e004      	b.n	8005e58 <HAL_GPIO_Init+0x204>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e002      	b.n	8005e58 <HAL_GPIO_Init+0x204>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <HAL_GPIO_Init+0x204>
 8005e56:	2300      	movs	r3, #0
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	f002 0203 	and.w	r2, r2, #3
 8005e5e:	0092      	lsls	r2, r2, #2
 8005e60:	4093      	lsls	r3, r2
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e68:	4935      	ldr	r1, [pc, #212]	; (8005f40 <HAL_GPIO_Init+0x2ec>)
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	089b      	lsrs	r3, r3, #2
 8005e6e:	3302      	adds	r3, #2
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e76:	4b38      	ldr	r3, [pc, #224]	; (8005f58 <HAL_GPIO_Init+0x304>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	4013      	ands	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e9a:	4a2f      	ldr	r2, [pc, #188]	; (8005f58 <HAL_GPIO_Init+0x304>)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ea0:	4b2d      	ldr	r3, [pc, #180]	; (8005f58 <HAL_GPIO_Init+0x304>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	4013      	ands	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ec4:	4a24      	ldr	r2, [pc, #144]	; (8005f58 <HAL_GPIO_Init+0x304>)
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005eca:	4b23      	ldr	r3, [pc, #140]	; (8005f58 <HAL_GPIO_Init+0x304>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005eee:	4a1a      	ldr	r2, [pc, #104]	; (8005f58 <HAL_GPIO_Init+0x304>)
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ef4:	4b18      	ldr	r3, [pc, #96]	; (8005f58 <HAL_GPIO_Init+0x304>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	43db      	mvns	r3, r3
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	4013      	ands	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f18:	4a0f      	ldr	r2, [pc, #60]	; (8005f58 <HAL_GPIO_Init+0x304>)
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	3301      	adds	r3, #1
 8005f22:	61fb      	str	r3, [r7, #28]
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	2b0f      	cmp	r3, #15
 8005f28:	f67f aea2 	bls.w	8005c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f2c:	bf00      	nop
 8005f2e:	bf00      	nop
 8005f30:	3724      	adds	r7, #36	; 0x24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	40013800 	.word	0x40013800
 8005f44:	40020000 	.word	0x40020000
 8005f48:	40020400 	.word	0x40020400
 8005f4c:	40020800 	.word	0x40020800
 8005f50:	40020c00 	.word	0x40020c00
 8005f54:	40021000 	.word	0x40021000
 8005f58:	40013c00 	.word	0x40013c00

08005f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	460b      	mov	r3, r1
 8005f66:	807b      	strh	r3, [r7, #2]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f6c:	787b      	ldrb	r3, [r7, #1]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f72:	887a      	ldrh	r2, [r7, #2]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f78:	e003      	b.n	8005f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f7a:	887b      	ldrh	r3, [r7, #2]
 8005f7c:	041a      	lsls	r2, r3, #16
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	619a      	str	r2, [r3, #24]
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
	...

08005f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005f9a:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f9c:	695a      	ldr	r2, [r3, #20]
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d006      	beq.n	8005fb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005fa6:	4a05      	ldr	r2, [pc, #20]	; (8005fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fa8:	88fb      	ldrh	r3, [r7, #6]
 8005faa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005fac:	88fb      	ldrh	r3, [r7, #6]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fd fcc8 	bl	8003944 <HAL_GPIO_EXTI_Callback>
  }
}
 8005fb4:	bf00      	nop
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	40013c00 	.word	0x40013c00

08005fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e12b      	b.n	800622a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d106      	bne.n	8005fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7fc f838 	bl	800205c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2224      	movs	r2, #36	; 0x24
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0201 	bic.w	r2, r2, #1
 8006002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006024:	f001 f888 	bl	8007138 <HAL_RCC_GetPCLK1Freq>
 8006028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	4a81      	ldr	r2, [pc, #516]	; (8006234 <HAL_I2C_Init+0x274>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d807      	bhi.n	8006044 <HAL_I2C_Init+0x84>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4a80      	ldr	r2, [pc, #512]	; (8006238 <HAL_I2C_Init+0x278>)
 8006038:	4293      	cmp	r3, r2
 800603a:	bf94      	ite	ls
 800603c:	2301      	movls	r3, #1
 800603e:	2300      	movhi	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	e006      	b.n	8006052 <HAL_I2C_Init+0x92>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4a7d      	ldr	r2, [pc, #500]	; (800623c <HAL_I2C_Init+0x27c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	bf94      	ite	ls
 800604c:	2301      	movls	r3, #1
 800604e:	2300      	movhi	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e0e7      	b.n	800622a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a78      	ldr	r2, [pc, #480]	; (8006240 <HAL_I2C_Init+0x280>)
 800605e:	fba2 2303 	umull	r2, r3, r2, r3
 8006062:	0c9b      	lsrs	r3, r3, #18
 8006064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	430a      	orrs	r2, r1
 8006078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	4a6a      	ldr	r2, [pc, #424]	; (8006234 <HAL_I2C_Init+0x274>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d802      	bhi.n	8006094 <HAL_I2C_Init+0xd4>
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	3301      	adds	r3, #1
 8006092:	e009      	b.n	80060a8 <HAL_I2C_Init+0xe8>
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800609a:	fb02 f303 	mul.w	r3, r2, r3
 800609e:	4a69      	ldr	r2, [pc, #420]	; (8006244 <HAL_I2C_Init+0x284>)
 80060a0:	fba2 2303 	umull	r2, r3, r2, r3
 80060a4:	099b      	lsrs	r3, r3, #6
 80060a6:	3301      	adds	r3, #1
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	6812      	ldr	r2, [r2, #0]
 80060ac:	430b      	orrs	r3, r1
 80060ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80060ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	495c      	ldr	r1, [pc, #368]	; (8006234 <HAL_I2C_Init+0x274>)
 80060c4:	428b      	cmp	r3, r1
 80060c6:	d819      	bhi.n	80060fc <HAL_I2C_Init+0x13c>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	1e59      	subs	r1, r3, #1
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80060d6:	1c59      	adds	r1, r3, #1
 80060d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80060dc:	400b      	ands	r3, r1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <HAL_I2C_Init+0x138>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	1e59      	subs	r1, r3, #1
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80060f0:	3301      	adds	r3, #1
 80060f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f6:	e051      	b.n	800619c <HAL_I2C_Init+0x1dc>
 80060f8:	2304      	movs	r3, #4
 80060fa:	e04f      	b.n	800619c <HAL_I2C_Init+0x1dc>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d111      	bne.n	8006128 <HAL_I2C_Init+0x168>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	1e58      	subs	r0, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6859      	ldr	r1, [r3, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	440b      	add	r3, r1
 8006112:	fbb0 f3f3 	udiv	r3, r0, r3
 8006116:	3301      	adds	r3, #1
 8006118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800611c:	2b00      	cmp	r3, #0
 800611e:	bf0c      	ite	eq
 8006120:	2301      	moveq	r3, #1
 8006122:	2300      	movne	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	e012      	b.n	800614e <HAL_I2C_Init+0x18e>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	1e58      	subs	r0, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6859      	ldr	r1, [r3, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	0099      	lsls	r1, r3, #2
 8006138:	440b      	add	r3, r1
 800613a:	fbb0 f3f3 	udiv	r3, r0, r3
 800613e:	3301      	adds	r3, #1
 8006140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006144:	2b00      	cmp	r3, #0
 8006146:	bf0c      	ite	eq
 8006148:	2301      	moveq	r3, #1
 800614a:	2300      	movne	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_I2C_Init+0x196>
 8006152:	2301      	movs	r3, #1
 8006154:	e022      	b.n	800619c <HAL_I2C_Init+0x1dc>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10e      	bne.n	800617c <HAL_I2C_Init+0x1bc>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	1e58      	subs	r0, r3, #1
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6859      	ldr	r1, [r3, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	440b      	add	r3, r1
 800616c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006170:	3301      	adds	r3, #1
 8006172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617a:	e00f      	b.n	800619c <HAL_I2C_Init+0x1dc>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	1e58      	subs	r0, r3, #1
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6859      	ldr	r1, [r3, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	0099      	lsls	r1, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006192:	3301      	adds	r3, #1
 8006194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	6809      	ldr	r1, [r1, #0]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69da      	ldr	r2, [r3, #28]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80061ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6911      	ldr	r1, [r2, #16]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	68d2      	ldr	r2, [r2, #12]
 80061d6:	4311      	orrs	r1, r2
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6812      	ldr	r2, [r2, #0]
 80061dc:	430b      	orrs	r3, r1
 80061de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	695a      	ldr	r2, [r3, #20]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0201 	orr.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2220      	movs	r2, #32
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	000186a0 	.word	0x000186a0
 8006238:	001e847f 	.word	0x001e847f
 800623c:	003d08ff 	.word	0x003d08ff
 8006240:	431bde83 	.word	0x431bde83
 8006244:	10624dd3 	.word	0x10624dd3

08006248 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af02      	add	r7, sp, #8
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	607a      	str	r2, [r7, #4]
 8006252:	461a      	mov	r2, r3
 8006254:	460b      	mov	r3, r1
 8006256:	817b      	strh	r3, [r7, #10]
 8006258:	4613      	mov	r3, r2
 800625a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800625c:	f7fe fd38 	bl	8004cd0 <HAL_GetTick>
 8006260:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b20      	cmp	r3, #32
 800626c:	f040 80e0 	bne.w	8006430 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	2319      	movs	r3, #25
 8006276:	2201      	movs	r2, #1
 8006278:	4970      	ldr	r1, [pc, #448]	; (800643c <HAL_I2C_Master_Transmit+0x1f4>)
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 f964 	bl	8006548 <I2C_WaitOnFlagUntilTimeout>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006286:	2302      	movs	r3, #2
 8006288:	e0d3      	b.n	8006432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_I2C_Master_Transmit+0x50>
 8006294:	2302      	movs	r3, #2
 8006296:	e0cc      	b.n	8006432 <HAL_I2C_Master_Transmit+0x1ea>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d007      	beq.n	80062be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0201 	orr.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2221      	movs	r2, #33	; 0x21
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2210      	movs	r2, #16
 80062da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	893a      	ldrh	r2, [r7, #8]
 80062ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4a50      	ldr	r2, [pc, #320]	; (8006440 <HAL_I2C_Master_Transmit+0x1f8>)
 80062fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006300:	8979      	ldrh	r1, [r7, #10]
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	6a3a      	ldr	r2, [r7, #32]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 f89c 	bl	8006444 <I2C_MasterRequestWrite>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e08d      	b.n	8006432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006316:	2300      	movs	r3, #0
 8006318:	613b      	str	r3, [r7, #16]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	613b      	str	r3, [r7, #16]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	613b      	str	r3, [r7, #16]
 800632a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800632c:	e066      	b.n	80063fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	6a39      	ldr	r1, [r7, #32]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 f9de 	bl	80066f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00d      	beq.n	800635a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	2b04      	cmp	r3, #4
 8006344:	d107      	bne.n	8006356 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e06b      	b.n	8006432 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	781a      	ldrb	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006374:	b29b      	uxth	r3, r3
 8006376:	3b01      	subs	r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006382:	3b01      	subs	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b04      	cmp	r3, #4
 8006396:	d11b      	bne.n	80063d0 <HAL_I2C_Master_Transmit+0x188>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800639c:	2b00      	cmp	r3, #0
 800639e:	d017      	beq.n	80063d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	781a      	ldrb	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c8:	3b01      	subs	r3, #1
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	6a39      	ldr	r1, [r7, #32]
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 f9ce 	bl	8006776 <I2C_WaitOnBTFFlagUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00d      	beq.n	80063fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d107      	bne.n	80063f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e01a      	b.n	8006432 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006400:	2b00      	cmp	r3, #0
 8006402:	d194      	bne.n	800632e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2220      	movs	r2, #32
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	e000      	b.n	8006432 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006430:	2302      	movs	r3, #2
  }
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	00100002 	.word	0x00100002
 8006440:	ffff0000 	.word	0xffff0000

08006444 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b088      	sub	sp, #32
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	607a      	str	r2, [r7, #4]
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	460b      	mov	r3, r1
 8006452:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b08      	cmp	r3, #8
 800645e:	d006      	beq.n	800646e <I2C_MasterRequestWrite+0x2a>
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d003      	beq.n	800646e <I2C_MasterRequestWrite+0x2a>
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800646c:	d108      	bne.n	8006480 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	e00b      	b.n	8006498 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	2b12      	cmp	r3, #18
 8006486:	d107      	bne.n	8006498 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006496:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f84f 	bl	8006548 <I2C_WaitOnFlagUntilTimeout>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00d      	beq.n	80064cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064be:	d103      	bne.n	80064c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e035      	b.n	8006538 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064d4:	d108      	bne.n	80064e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064d6:	897b      	ldrh	r3, [r7, #10]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	461a      	mov	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064e4:	611a      	str	r2, [r3, #16]
 80064e6:	e01b      	b.n	8006520 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80064e8:	897b      	ldrh	r3, [r7, #10]
 80064ea:	11db      	asrs	r3, r3, #7
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	f003 0306 	and.w	r3, r3, #6
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	f063 030f 	orn	r3, r3, #15
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	490e      	ldr	r1, [pc, #56]	; (8006540 <I2C_MasterRequestWrite+0xfc>)
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f875 	bl	80065f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e010      	b.n	8006538 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006516:	897b      	ldrh	r3, [r7, #10]
 8006518:	b2da      	uxtb	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	4907      	ldr	r1, [pc, #28]	; (8006544 <I2C_MasterRequestWrite+0x100>)
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 f865 	bl	80065f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e000      	b.n	8006538 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	00010008 	.word	0x00010008
 8006544:	00010002 	.word	0x00010002

08006548 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006558:	e025      	b.n	80065a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006560:	d021      	beq.n	80065a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006562:	f7fe fbb5 	bl	8004cd0 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d302      	bcc.n	8006578 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d116      	bne.n	80065a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2220      	movs	r2, #32
 8006582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	f043 0220 	orr.w	r2, r3, #32
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e023      	b.n	80065ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	0c1b      	lsrs	r3, r3, #16
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d10d      	bne.n	80065cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	43da      	mvns	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	4013      	ands	r3, r2
 80065bc:	b29b      	uxth	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bf0c      	ite	eq
 80065c2:	2301      	moveq	r3, #1
 80065c4:	2300      	movne	r3, #0
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	461a      	mov	r2, r3
 80065ca:	e00c      	b.n	80065e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	43da      	mvns	r2, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4013      	ands	r3, r2
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bf0c      	ite	eq
 80065de:	2301      	moveq	r3, #1
 80065e0:	2300      	movne	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	79fb      	ldrb	r3, [r7, #7]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d0b6      	beq.n	800655a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	60f8      	str	r0, [r7, #12]
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
 8006602:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006604:	e051      	b.n	80066aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006614:	d123      	bne.n	800665e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006624:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800662e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2220      	movs	r2, #32
 800663a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	f043 0204 	orr.w	r2, r3, #4
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e046      	b.n	80066ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006664:	d021      	beq.n	80066aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006666:	f7fe fb33 	bl	8004cd0 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	429a      	cmp	r2, r3
 8006674:	d302      	bcc.n	800667c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d116      	bne.n	80066aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	f043 0220 	orr.w	r2, r3, #32
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e020      	b.n	80066ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	0c1b      	lsrs	r3, r3, #16
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d10c      	bne.n	80066ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	43da      	mvns	r2, r3
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4013      	ands	r3, r2
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	bf14      	ite	ne
 80066c6:	2301      	movne	r3, #1
 80066c8:	2300      	moveq	r3, #0
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	e00b      	b.n	80066e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	43da      	mvns	r2, r3
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	4013      	ands	r3, r2
 80066da:	b29b      	uxth	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	bf14      	ite	ne
 80066e0:	2301      	movne	r3, #1
 80066e2:	2300      	moveq	r3, #0
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d18d      	bne.n	8006606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006700:	e02d      	b.n	800675e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 f878 	bl	80067f8 <I2C_IsAcknowledgeFailed>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e02d      	b.n	800676e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006718:	d021      	beq.n	800675e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800671a:	f7fe fad9 	bl	8004cd0 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	429a      	cmp	r2, r3
 8006728:	d302      	bcc.n	8006730 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d116      	bne.n	800675e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2220      	movs	r2, #32
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	f043 0220 	orr.w	r2, r3, #32
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e007      	b.n	800676e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006768:	2b80      	cmp	r3, #128	; 0x80
 800676a:	d1ca      	bne.n	8006702 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006782:	e02d      	b.n	80067e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 f837 	bl	80067f8 <I2C_IsAcknowledgeFailed>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e02d      	b.n	80067f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	d021      	beq.n	80067e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800679c:	f7fe fa98 	bl	8004cd0 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d302      	bcc.n	80067b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d116      	bne.n	80067e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067cc:	f043 0220 	orr.w	r2, r3, #32
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e007      	b.n	80067f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	f003 0304 	and.w	r3, r3, #4
 80067ea:	2b04      	cmp	r3, #4
 80067ec:	d1ca      	bne.n	8006784 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800680a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800680e:	d11b      	bne.n	8006848 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006818:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006834:	f043 0204 	orr.w	r2, r3, #4
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e000      	b.n	800684a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
	...

08006858 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e267      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d075      	beq.n	8006962 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006876:	4b88      	ldr	r3, [pc, #544]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f003 030c 	and.w	r3, r3, #12
 800687e:	2b04      	cmp	r3, #4
 8006880:	d00c      	beq.n	800689c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006882:	4b85      	ldr	r3, [pc, #532]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800688a:	2b08      	cmp	r3, #8
 800688c:	d112      	bne.n	80068b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800688e:	4b82      	ldr	r3, [pc, #520]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800689a:	d10b      	bne.n	80068b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800689c:	4b7e      	ldr	r3, [pc, #504]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d05b      	beq.n	8006960 <HAL_RCC_OscConfig+0x108>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d157      	bne.n	8006960 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e242      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068bc:	d106      	bne.n	80068cc <HAL_RCC_OscConfig+0x74>
 80068be:	4b76      	ldr	r3, [pc, #472]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a75      	ldr	r2, [pc, #468]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 80068c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	e01d      	b.n	8006908 <HAL_RCC_OscConfig+0xb0>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068d4:	d10c      	bne.n	80068f0 <HAL_RCC_OscConfig+0x98>
 80068d6:	4b70      	ldr	r3, [pc, #448]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a6f      	ldr	r2, [pc, #444]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 80068dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	4b6d      	ldr	r3, [pc, #436]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a6c      	ldr	r2, [pc, #432]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 80068e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	e00b      	b.n	8006908 <HAL_RCC_OscConfig+0xb0>
 80068f0:	4b69      	ldr	r3, [pc, #420]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a68      	ldr	r2, [pc, #416]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 80068f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	4b66      	ldr	r3, [pc, #408]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a65      	ldr	r2, [pc, #404]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 8006902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d013      	beq.n	8006938 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006910:	f7fe f9de 	bl	8004cd0 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006918:	f7fe f9da 	bl	8004cd0 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b64      	cmp	r3, #100	; 0x64
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e207      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800692a:	4b5b      	ldr	r3, [pc, #364]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0f0      	beq.n	8006918 <HAL_RCC_OscConfig+0xc0>
 8006936:	e014      	b.n	8006962 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006938:	f7fe f9ca 	bl	8004cd0 <HAL_GetTick>
 800693c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006940:	f7fe f9c6 	bl	8004cd0 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b64      	cmp	r3, #100	; 0x64
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e1f3      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006952:	4b51      	ldr	r3, [pc, #324]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1f0      	bne.n	8006940 <HAL_RCC_OscConfig+0xe8>
 800695e:	e000      	b.n	8006962 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d063      	beq.n	8006a36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800696e:	4b4a      	ldr	r3, [pc, #296]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 030c 	and.w	r3, r3, #12
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00b      	beq.n	8006992 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800697a:	4b47      	ldr	r3, [pc, #284]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006982:	2b08      	cmp	r3, #8
 8006984:	d11c      	bne.n	80069c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006986:	4b44      	ldr	r3, [pc, #272]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d116      	bne.n	80069c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006992:	4b41      	ldr	r3, [pc, #260]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <HAL_RCC_OscConfig+0x152>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d001      	beq.n	80069aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e1c7      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069aa:	4b3b      	ldr	r3, [pc, #236]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	4937      	ldr	r1, [pc, #220]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069be:	e03a      	b.n	8006a36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d020      	beq.n	8006a0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069c8:	4b34      	ldr	r3, [pc, #208]	; (8006a9c <HAL_RCC_OscConfig+0x244>)
 80069ca:	2201      	movs	r2, #1
 80069cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ce:	f7fe f97f 	bl	8004cd0 <HAL_GetTick>
 80069d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069d4:	e008      	b.n	80069e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069d6:	f7fe f97b 	bl	8004cd0 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e1a8      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069e8:	4b2b      	ldr	r3, [pc, #172]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0f0      	beq.n	80069d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069f4:	4b28      	ldr	r3, [pc, #160]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	4925      	ldr	r1, [pc, #148]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	600b      	str	r3, [r1, #0]
 8006a08:	e015      	b.n	8006a36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a0a:	4b24      	ldr	r3, [pc, #144]	; (8006a9c <HAL_RCC_OscConfig+0x244>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a10:	f7fe f95e 	bl	8004cd0 <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a18:	f7fe f95a 	bl	8004cd0 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e187      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a2a:	4b1b      	ldr	r3, [pc, #108]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1f0      	bne.n	8006a18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d036      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d016      	beq.n	8006a78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a4a:	4b15      	ldr	r3, [pc, #84]	; (8006aa0 <HAL_RCC_OscConfig+0x248>)
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a50:	f7fe f93e 	bl	8004cd0 <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a58:	f7fe f93a 	bl	8004cd0 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e167      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a6a:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <HAL_RCC_OscConfig+0x240>)
 8006a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0f0      	beq.n	8006a58 <HAL_RCC_OscConfig+0x200>
 8006a76:	e01b      	b.n	8006ab0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a78:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <HAL_RCC_OscConfig+0x248>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a7e:	f7fe f927 	bl	8004cd0 <HAL_GetTick>
 8006a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a84:	e00e      	b.n	8006aa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a86:	f7fe f923 	bl	8004cd0 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d907      	bls.n	8006aa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e150      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
 8006a98:	40023800 	.word	0x40023800
 8006a9c:	42470000 	.word	0x42470000
 8006aa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006aa4:	4b88      	ldr	r3, [pc, #544]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1ea      	bne.n	8006a86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 8097 	beq.w	8006bec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ac2:	4b81      	ldr	r3, [pc, #516]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10f      	bne.n	8006aee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60bb      	str	r3, [r7, #8]
 8006ad2:	4b7d      	ldr	r3, [pc, #500]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	4a7c      	ldr	r2, [pc, #496]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006adc:	6413      	str	r3, [r2, #64]	; 0x40
 8006ade:	4b7a      	ldr	r3, [pc, #488]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae6:	60bb      	str	r3, [r7, #8]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aea:	2301      	movs	r3, #1
 8006aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aee:	4b77      	ldr	r3, [pc, #476]	; (8006ccc <HAL_RCC_OscConfig+0x474>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d118      	bne.n	8006b2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006afa:	4b74      	ldr	r3, [pc, #464]	; (8006ccc <HAL_RCC_OscConfig+0x474>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a73      	ldr	r2, [pc, #460]	; (8006ccc <HAL_RCC_OscConfig+0x474>)
 8006b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b06:	f7fe f8e3 	bl	8004cd0 <HAL_GetTick>
 8006b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b0c:	e008      	b.n	8006b20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b0e:	f7fe f8df 	bl	8004cd0 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d901      	bls.n	8006b20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e10c      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b20:	4b6a      	ldr	r3, [pc, #424]	; (8006ccc <HAL_RCC_OscConfig+0x474>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0f0      	beq.n	8006b0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d106      	bne.n	8006b42 <HAL_RCC_OscConfig+0x2ea>
 8006b34:	4b64      	ldr	r3, [pc, #400]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b38:	4a63      	ldr	r2, [pc, #396]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006b3a:	f043 0301 	orr.w	r3, r3, #1
 8006b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b40:	e01c      	b.n	8006b7c <HAL_RCC_OscConfig+0x324>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	2b05      	cmp	r3, #5
 8006b48:	d10c      	bne.n	8006b64 <HAL_RCC_OscConfig+0x30c>
 8006b4a:	4b5f      	ldr	r3, [pc, #380]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4e:	4a5e      	ldr	r2, [pc, #376]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006b50:	f043 0304 	orr.w	r3, r3, #4
 8006b54:	6713      	str	r3, [r2, #112]	; 0x70
 8006b56:	4b5c      	ldr	r3, [pc, #368]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5a:	4a5b      	ldr	r2, [pc, #364]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006b5c:	f043 0301 	orr.w	r3, r3, #1
 8006b60:	6713      	str	r3, [r2, #112]	; 0x70
 8006b62:	e00b      	b.n	8006b7c <HAL_RCC_OscConfig+0x324>
 8006b64:	4b58      	ldr	r3, [pc, #352]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b68:	4a57      	ldr	r2, [pc, #348]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006b6a:	f023 0301 	bic.w	r3, r3, #1
 8006b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b70:	4b55      	ldr	r3, [pc, #340]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b74:	4a54      	ldr	r2, [pc, #336]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006b76:	f023 0304 	bic.w	r3, r3, #4
 8006b7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d015      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b84:	f7fe f8a4 	bl	8004cd0 <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b8a:	e00a      	b.n	8006ba2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b8c:	f7fe f8a0 	bl	8004cd0 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e0cb      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ba2:	4b49      	ldr	r3, [pc, #292]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0ee      	beq.n	8006b8c <HAL_RCC_OscConfig+0x334>
 8006bae:	e014      	b.n	8006bda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bb0:	f7fe f88e 	bl	8004cd0 <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bb6:	e00a      	b.n	8006bce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bb8:	f7fe f88a 	bl	8004cd0 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e0b5      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bce:	4b3e      	ldr	r3, [pc, #248]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1ee      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d105      	bne.n	8006bec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006be0:	4b39      	ldr	r3, [pc, #228]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be4:	4a38      	ldr	r2, [pc, #224]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 80a1 	beq.w	8006d38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bf6:	4b34      	ldr	r3, [pc, #208]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 030c 	and.w	r3, r3, #12
 8006bfe:	2b08      	cmp	r3, #8
 8006c00:	d05c      	beq.n	8006cbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d141      	bne.n	8006c8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c0a:	4b31      	ldr	r3, [pc, #196]	; (8006cd0 <HAL_RCC_OscConfig+0x478>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c10:	f7fe f85e 	bl	8004cd0 <HAL_GetTick>
 8006c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c18:	f7fe f85a 	bl	8004cd0 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e087      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c2a:	4b27      	ldr	r3, [pc, #156]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f0      	bne.n	8006c18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	69da      	ldr	r2, [r3, #28]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	019b      	lsls	r3, r3, #6
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4c:	085b      	lsrs	r3, r3, #1
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	041b      	lsls	r3, r3, #16
 8006c52:	431a      	orrs	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	061b      	lsls	r3, r3, #24
 8006c5a:	491b      	ldr	r1, [pc, #108]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c60:	4b1b      	ldr	r3, [pc, #108]	; (8006cd0 <HAL_RCC_OscConfig+0x478>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c66:	f7fe f833 	bl	8004cd0 <HAL_GetTick>
 8006c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c6c:	e008      	b.n	8006c80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c6e:	f7fe f82f 	bl	8004cd0 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d901      	bls.n	8006c80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e05c      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c80:	4b11      	ldr	r3, [pc, #68]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d0f0      	beq.n	8006c6e <HAL_RCC_OscConfig+0x416>
 8006c8c:	e054      	b.n	8006d38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8e:	4b10      	ldr	r3, [pc, #64]	; (8006cd0 <HAL_RCC_OscConfig+0x478>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c94:	f7fe f81c 	bl	8004cd0 <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c9c:	f7fe f818 	bl	8004cd0 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e045      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cae:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <HAL_RCC_OscConfig+0x470>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1f0      	bne.n	8006c9c <HAL_RCC_OscConfig+0x444>
 8006cba:	e03d      	b.n	8006d38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d107      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e038      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
 8006cc8:	40023800 	.word	0x40023800
 8006ccc:	40007000 	.word	0x40007000
 8006cd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006cd4:	4b1b      	ldr	r3, [pc, #108]	; (8006d44 <HAL_RCC_OscConfig+0x4ec>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d028      	beq.n	8006d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d121      	bne.n	8006d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d11a      	bne.n	8006d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d04:	4013      	ands	r3, r2
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d111      	bne.n	8006d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d107      	bne.n	8006d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d001      	beq.n	8006d38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e000      	b.n	8006d3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	40023800 	.word	0x40023800

08006d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e0cc      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d5c:	4b68      	ldr	r3, [pc, #416]	; (8006f00 <HAL_RCC_ClockConfig+0x1b8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0307 	and.w	r3, r3, #7
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d90c      	bls.n	8006d84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d6a:	4b65      	ldr	r3, [pc, #404]	; (8006f00 <HAL_RCC_ClockConfig+0x1b8>)
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d72:	4b63      	ldr	r3, [pc, #396]	; (8006f00 <HAL_RCC_ClockConfig+0x1b8>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d001      	beq.n	8006d84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e0b8      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d020      	beq.n	8006dd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d005      	beq.n	8006da8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d9c:	4b59      	ldr	r3, [pc, #356]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	4a58      	ldr	r2, [pc, #352]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006da2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006da6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d005      	beq.n	8006dc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006db4:	4b53      	ldr	r3, [pc, #332]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	4a52      	ldr	r2, [pc, #328]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006dba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006dbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dc0:	4b50      	ldr	r3, [pc, #320]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	494d      	ldr	r1, [pc, #308]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d044      	beq.n	8006e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d107      	bne.n	8006df6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006de6:	4b47      	ldr	r3, [pc, #284]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d119      	bne.n	8006e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e07f      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d003      	beq.n	8006e06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d107      	bne.n	8006e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e06:	4b3f      	ldr	r3, [pc, #252]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d109      	bne.n	8006e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e06f      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e16:	4b3b      	ldr	r3, [pc, #236]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e067      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e26:	4b37      	ldr	r3, [pc, #220]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f023 0203 	bic.w	r2, r3, #3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	4934      	ldr	r1, [pc, #208]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e38:	f7fd ff4a 	bl	8004cd0 <HAL_GetTick>
 8006e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e3e:	e00a      	b.n	8006e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e40:	f7fd ff46 	bl	8004cd0 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e04f      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e56:	4b2b      	ldr	r3, [pc, #172]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 020c 	and.w	r2, r3, #12
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d1eb      	bne.n	8006e40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e68:	4b25      	ldr	r3, [pc, #148]	; (8006f00 <HAL_RCC_ClockConfig+0x1b8>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d20c      	bcs.n	8006e90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e76:	4b22      	ldr	r3, [pc, #136]	; (8006f00 <HAL_RCC_ClockConfig+0x1b8>)
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e7e:	4b20      	ldr	r3, [pc, #128]	; (8006f00 <HAL_RCC_ClockConfig+0x1b8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d001      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e032      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d008      	beq.n	8006eae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e9c:	4b19      	ldr	r3, [pc, #100]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	4916      	ldr	r1, [pc, #88]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0308 	and.w	r3, r3, #8
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d009      	beq.n	8006ece <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006eba:	4b12      	ldr	r3, [pc, #72]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	490e      	ldr	r1, [pc, #56]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ece:	f000 f821 	bl	8006f14 <HAL_RCC_GetSysClockFreq>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	091b      	lsrs	r3, r3, #4
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	490a      	ldr	r1, [pc, #40]	; (8006f08 <HAL_RCC_ClockConfig+0x1c0>)
 8006ee0:	5ccb      	ldrb	r3, [r1, r3]
 8006ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee6:	4a09      	ldr	r2, [pc, #36]	; (8006f0c <HAL_RCC_ClockConfig+0x1c4>)
 8006ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fd feaa 	bl	8004c48 <HAL_InitTick>

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	40023c00 	.word	0x40023c00
 8006f04:	40023800 	.word	0x40023800
 8006f08:	08010d5c 	.word	0x08010d5c
 8006f0c:	20000228 	.word	0x20000228
 8006f10:	2000022c 	.word	0x2000022c

08006f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f18:	b094      	sub	sp, #80	; 0x50
 8006f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f20:	2300      	movs	r3, #0
 8006f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f24:	2300      	movs	r3, #0
 8006f26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f2c:	4b79      	ldr	r3, [pc, #484]	; (8007114 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f003 030c 	and.w	r3, r3, #12
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d00d      	beq.n	8006f54 <HAL_RCC_GetSysClockFreq+0x40>
 8006f38:	2b08      	cmp	r3, #8
 8006f3a:	f200 80e1 	bhi.w	8007100 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <HAL_RCC_GetSysClockFreq+0x34>
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	d003      	beq.n	8006f4e <HAL_RCC_GetSysClockFreq+0x3a>
 8006f46:	e0db      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f48:	4b73      	ldr	r3, [pc, #460]	; (8007118 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006f4c:	e0db      	b.n	8007106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f4e:	4b73      	ldr	r3, [pc, #460]	; (800711c <HAL_RCC_GetSysClockFreq+0x208>)
 8006f50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f52:	e0d8      	b.n	8007106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f54:	4b6f      	ldr	r3, [pc, #444]	; (8007114 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f5e:	4b6d      	ldr	r3, [pc, #436]	; (8007114 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d063      	beq.n	8007032 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f6a:	4b6a      	ldr	r3, [pc, #424]	; (8007114 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	099b      	lsrs	r3, r3, #6
 8006f70:	2200      	movs	r2, #0
 8006f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f7e:	2300      	movs	r3, #0
 8006f80:	637b      	str	r3, [r7, #52]	; 0x34
 8006f82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006f86:	4622      	mov	r2, r4
 8006f88:	462b      	mov	r3, r5
 8006f8a:	f04f 0000 	mov.w	r0, #0
 8006f8e:	f04f 0100 	mov.w	r1, #0
 8006f92:	0159      	lsls	r1, r3, #5
 8006f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f98:	0150      	lsls	r0, r2, #5
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	1a51      	subs	r1, r2, r1
 8006fa2:	6139      	str	r1, [r7, #16]
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	f04f 0200 	mov.w	r2, #0
 8006fb0:	f04f 0300 	mov.w	r3, #0
 8006fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fb8:	4659      	mov	r1, fp
 8006fba:	018b      	lsls	r3, r1, #6
 8006fbc:	4651      	mov	r1, sl
 8006fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006fc2:	4651      	mov	r1, sl
 8006fc4:	018a      	lsls	r2, r1, #6
 8006fc6:	4651      	mov	r1, sl
 8006fc8:	ebb2 0801 	subs.w	r8, r2, r1
 8006fcc:	4659      	mov	r1, fp
 8006fce:	eb63 0901 	sbc.w	r9, r3, r1
 8006fd2:	f04f 0200 	mov.w	r2, #0
 8006fd6:	f04f 0300 	mov.w	r3, #0
 8006fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fe6:	4690      	mov	r8, r2
 8006fe8:	4699      	mov	r9, r3
 8006fea:	4623      	mov	r3, r4
 8006fec:	eb18 0303 	adds.w	r3, r8, r3
 8006ff0:	60bb      	str	r3, [r7, #8]
 8006ff2:	462b      	mov	r3, r5
 8006ff4:	eb49 0303 	adc.w	r3, r9, r3
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	f04f 0200 	mov.w	r2, #0
 8006ffe:	f04f 0300 	mov.w	r3, #0
 8007002:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007006:	4629      	mov	r1, r5
 8007008:	024b      	lsls	r3, r1, #9
 800700a:	4621      	mov	r1, r4
 800700c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007010:	4621      	mov	r1, r4
 8007012:	024a      	lsls	r2, r1, #9
 8007014:	4610      	mov	r0, r2
 8007016:	4619      	mov	r1, r3
 8007018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800701a:	2200      	movs	r2, #0
 800701c:	62bb      	str	r3, [r7, #40]	; 0x28
 800701e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007020:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007024:	f7f9 fe38 	bl	8000c98 <__aeabi_uldivmod>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4613      	mov	r3, r2
 800702e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007030:	e058      	b.n	80070e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007032:	4b38      	ldr	r3, [pc, #224]	; (8007114 <HAL_RCC_GetSysClockFreq+0x200>)
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	099b      	lsrs	r3, r3, #6
 8007038:	2200      	movs	r2, #0
 800703a:	4618      	mov	r0, r3
 800703c:	4611      	mov	r1, r2
 800703e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007042:	623b      	str	r3, [r7, #32]
 8007044:	2300      	movs	r3, #0
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
 8007048:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800704c:	4642      	mov	r2, r8
 800704e:	464b      	mov	r3, r9
 8007050:	f04f 0000 	mov.w	r0, #0
 8007054:	f04f 0100 	mov.w	r1, #0
 8007058:	0159      	lsls	r1, r3, #5
 800705a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800705e:	0150      	lsls	r0, r2, #5
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	4641      	mov	r1, r8
 8007066:	ebb2 0a01 	subs.w	sl, r2, r1
 800706a:	4649      	mov	r1, r9
 800706c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007070:	f04f 0200 	mov.w	r2, #0
 8007074:	f04f 0300 	mov.w	r3, #0
 8007078:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800707c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007080:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007084:	ebb2 040a 	subs.w	r4, r2, sl
 8007088:	eb63 050b 	sbc.w	r5, r3, fp
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	00eb      	lsls	r3, r5, #3
 8007096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800709a:	00e2      	lsls	r2, r4, #3
 800709c:	4614      	mov	r4, r2
 800709e:	461d      	mov	r5, r3
 80070a0:	4643      	mov	r3, r8
 80070a2:	18e3      	adds	r3, r4, r3
 80070a4:	603b      	str	r3, [r7, #0]
 80070a6:	464b      	mov	r3, r9
 80070a8:	eb45 0303 	adc.w	r3, r5, r3
 80070ac:	607b      	str	r3, [r7, #4]
 80070ae:	f04f 0200 	mov.w	r2, #0
 80070b2:	f04f 0300 	mov.w	r3, #0
 80070b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070ba:	4629      	mov	r1, r5
 80070bc:	028b      	lsls	r3, r1, #10
 80070be:	4621      	mov	r1, r4
 80070c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070c4:	4621      	mov	r1, r4
 80070c6:	028a      	lsls	r2, r1, #10
 80070c8:	4610      	mov	r0, r2
 80070ca:	4619      	mov	r1, r3
 80070cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ce:	2200      	movs	r2, #0
 80070d0:	61bb      	str	r3, [r7, #24]
 80070d2:	61fa      	str	r2, [r7, #28]
 80070d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070d8:	f7f9 fdde 	bl	8000c98 <__aeabi_uldivmod>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4613      	mov	r3, r2
 80070e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80070e4:	4b0b      	ldr	r3, [pc, #44]	; (8007114 <HAL_RCC_GetSysClockFreq+0x200>)
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	0c1b      	lsrs	r3, r3, #16
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	3301      	adds	r3, #1
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80070f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070fe:	e002      	b.n	8007106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007100:	4b05      	ldr	r3, [pc, #20]	; (8007118 <HAL_RCC_GetSysClockFreq+0x204>)
 8007102:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007108:	4618      	mov	r0, r3
 800710a:	3750      	adds	r7, #80	; 0x50
 800710c:	46bd      	mov	sp, r7
 800710e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007112:	bf00      	nop
 8007114:	40023800 	.word	0x40023800
 8007118:	00f42400 	.word	0x00f42400
 800711c:	007a1200 	.word	0x007a1200

08007120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007120:	b480      	push	{r7}
 8007122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007124:	4b03      	ldr	r3, [pc, #12]	; (8007134 <HAL_RCC_GetHCLKFreq+0x14>)
 8007126:	681b      	ldr	r3, [r3, #0]
}
 8007128:	4618      	mov	r0, r3
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	20000228 	.word	0x20000228

08007138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800713c:	f7ff fff0 	bl	8007120 <HAL_RCC_GetHCLKFreq>
 8007140:	4602      	mov	r2, r0
 8007142:	4b05      	ldr	r3, [pc, #20]	; (8007158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	0a9b      	lsrs	r3, r3, #10
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	4903      	ldr	r1, [pc, #12]	; (800715c <HAL_RCC_GetPCLK1Freq+0x24>)
 800714e:	5ccb      	ldrb	r3, [r1, r3]
 8007150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007154:	4618      	mov	r0, r3
 8007156:	bd80      	pop	{r7, pc}
 8007158:	40023800 	.word	0x40023800
 800715c:	08010d6c 	.word	0x08010d6c

08007160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007164:	f7ff ffdc 	bl	8007120 <HAL_RCC_GetHCLKFreq>
 8007168:	4602      	mov	r2, r0
 800716a:	4b05      	ldr	r3, [pc, #20]	; (8007180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	0b5b      	lsrs	r3, r3, #13
 8007170:	f003 0307 	and.w	r3, r3, #7
 8007174:	4903      	ldr	r1, [pc, #12]	; (8007184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007176:	5ccb      	ldrb	r3, [r1, r3]
 8007178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800717c:	4618      	mov	r0, r3
 800717e:	bd80      	pop	{r7, pc}
 8007180:	40023800 	.word	0x40023800
 8007184:	08010d6c 	.word	0x08010d6c

08007188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e04c      	b.n	8007234 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d111      	bne.n	80071ca <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 ff50 	bl	8009054 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d102      	bne.n	80071c2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a1f      	ldr	r2, [pc, #124]	; (800723c <HAL_TIM_Base_Init+0xb4>)
 80071c0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2202      	movs	r2, #2
 80071ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	3304      	adds	r3, #4
 80071da:	4619      	mov	r1, r3
 80071dc:	4610      	mov	r0, r2
 80071de:	f001 fc6d 	bl	8008abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	08004049 	.word	0x08004049

08007240 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b01      	cmp	r3, #1
 8007252:	d001      	beq.n	8007258 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e03c      	b.n	80072d2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a1e      	ldr	r2, [pc, #120]	; (80072e0 <HAL_TIM_Base_Start+0xa0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d018      	beq.n	800729c <HAL_TIM_Base_Start+0x5c>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007272:	d013      	beq.n	800729c <HAL_TIM_Base_Start+0x5c>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a1a      	ldr	r2, [pc, #104]	; (80072e4 <HAL_TIM_Base_Start+0xa4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d00e      	beq.n	800729c <HAL_TIM_Base_Start+0x5c>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a19      	ldr	r2, [pc, #100]	; (80072e8 <HAL_TIM_Base_Start+0xa8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d009      	beq.n	800729c <HAL_TIM_Base_Start+0x5c>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a17      	ldr	r2, [pc, #92]	; (80072ec <HAL_TIM_Base_Start+0xac>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d004      	beq.n	800729c <HAL_TIM_Base_Start+0x5c>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a16      	ldr	r2, [pc, #88]	; (80072f0 <HAL_TIM_Base_Start+0xb0>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d111      	bne.n	80072c0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f003 0307 	and.w	r3, r3, #7
 80072a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b06      	cmp	r3, #6
 80072ac:	d010      	beq.n	80072d0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f042 0201 	orr.w	r2, r2, #1
 80072bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072be:	e007      	b.n	80072d0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0201 	orr.w	r2, r2, #1
 80072ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	40010000 	.word	0x40010000
 80072e4:	40000400 	.word	0x40000400
 80072e8:	40000800 	.word	0x40000800
 80072ec:	40000c00 	.word	0x40000c00
 80072f0:	40014000 	.word	0x40014000

080072f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b01      	cmp	r3, #1
 8007306:	d001      	beq.n	800730c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e044      	b.n	8007396 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0201 	orr.w	r2, r2, #1
 8007322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a1e      	ldr	r2, [pc, #120]	; (80073a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d018      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x6c>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007336:	d013      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x6c>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a1a      	ldr	r2, [pc, #104]	; (80073a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d00e      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x6c>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a19      	ldr	r2, [pc, #100]	; (80073ac <HAL_TIM_Base_Start_IT+0xb8>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d009      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x6c>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a17      	ldr	r2, [pc, #92]	; (80073b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d004      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x6c>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a16      	ldr	r2, [pc, #88]	; (80073b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d111      	bne.n	8007384 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b06      	cmp	r3, #6
 8007370:	d010      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f042 0201 	orr.w	r2, r2, #1
 8007380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007382:	e007      	b.n	8007394 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f042 0201 	orr.w	r2, r2, #1
 8007392:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	40010000 	.word	0x40010000
 80073a8:	40000400 	.word	0x40000400
 80073ac:	40000800 	.word	0x40000800
 80073b0:	40000c00 	.word	0x40000c00
 80073b4:	40014000 	.word	0x40014000

080073b8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e04c      	b.n	8007464 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d111      	bne.n	80073fa <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f001 fe38 	bl	8009054 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d102      	bne.n	80073f2 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a1f      	ldr	r2, [pc, #124]	; (800746c <HAL_TIM_OC_Init+0xb4>)
 80073f0:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2202      	movs	r2, #2
 80073fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3304      	adds	r3, #4
 800740a:	4619      	mov	r1, r3
 800740c:	4610      	mov	r0, r2
 800740e:	f001 fb55 	bl	8008abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	08007471 	.word	0x08007471

08007470 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e04c      	b.n	8007530 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d111      	bne.n	80074c6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 fdd2 	bl	8009054 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d102      	bne.n	80074be <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a1f      	ldr	r2, [pc, #124]	; (8007538 <HAL_TIM_PWM_Init+0xb4>)
 80074bc:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2202      	movs	r2, #2
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3304      	adds	r3, #4
 80074d6:	4619      	mov	r1, r3
 80074d8:	4610      	mov	r0, r2
 80074da:	f001 faef 	bl	8008abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	0800753d 	.word	0x0800753d

0800753c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d109      	bne.n	8007574 <HAL_TIM_PWM_Start+0x24>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b01      	cmp	r3, #1
 800756a:	bf14      	ite	ne
 800756c:	2301      	movne	r3, #1
 800756e:	2300      	moveq	r3, #0
 8007570:	b2db      	uxtb	r3, r3
 8007572:	e022      	b.n	80075ba <HAL_TIM_PWM_Start+0x6a>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b04      	cmp	r3, #4
 8007578:	d109      	bne.n	800758e <HAL_TIM_PWM_Start+0x3e>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b01      	cmp	r3, #1
 8007584:	bf14      	ite	ne
 8007586:	2301      	movne	r3, #1
 8007588:	2300      	moveq	r3, #0
 800758a:	b2db      	uxtb	r3, r3
 800758c:	e015      	b.n	80075ba <HAL_TIM_PWM_Start+0x6a>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b08      	cmp	r3, #8
 8007592:	d109      	bne.n	80075a8 <HAL_TIM_PWM_Start+0x58>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b01      	cmp	r3, #1
 800759e:	bf14      	ite	ne
 80075a0:	2301      	movne	r3, #1
 80075a2:	2300      	moveq	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	e008      	b.n	80075ba <HAL_TIM_PWM_Start+0x6a>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	bf14      	ite	ne
 80075b4:	2301      	movne	r3, #1
 80075b6:	2300      	moveq	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e068      	b.n	8007694 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d104      	bne.n	80075d2 <HAL_TIM_PWM_Start+0x82>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075d0:	e013      	b.n	80075fa <HAL_TIM_PWM_Start+0xaa>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	d104      	bne.n	80075e2 <HAL_TIM_PWM_Start+0x92>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075e0:	e00b      	b.n	80075fa <HAL_TIM_PWM_Start+0xaa>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d104      	bne.n	80075f2 <HAL_TIM_PWM_Start+0xa2>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075f0:	e003      	b.n	80075fa <HAL_TIM_PWM_Start+0xaa>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2202      	movs	r2, #2
 80075f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2201      	movs	r2, #1
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	4618      	mov	r0, r3
 8007604:	f001 fd00 	bl	8009008 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a23      	ldr	r2, [pc, #140]	; (800769c <HAL_TIM_PWM_Start+0x14c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d107      	bne.n	8007622 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007620:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a1d      	ldr	r2, [pc, #116]	; (800769c <HAL_TIM_PWM_Start+0x14c>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d018      	beq.n	800765e <HAL_TIM_PWM_Start+0x10e>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007634:	d013      	beq.n	800765e <HAL_TIM_PWM_Start+0x10e>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a19      	ldr	r2, [pc, #100]	; (80076a0 <HAL_TIM_PWM_Start+0x150>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00e      	beq.n	800765e <HAL_TIM_PWM_Start+0x10e>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a17      	ldr	r2, [pc, #92]	; (80076a4 <HAL_TIM_PWM_Start+0x154>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d009      	beq.n	800765e <HAL_TIM_PWM_Start+0x10e>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a16      	ldr	r2, [pc, #88]	; (80076a8 <HAL_TIM_PWM_Start+0x158>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d004      	beq.n	800765e <HAL_TIM_PWM_Start+0x10e>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a14      	ldr	r2, [pc, #80]	; (80076ac <HAL_TIM_PWM_Start+0x15c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d111      	bne.n	8007682 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b06      	cmp	r3, #6
 800766e:	d010      	beq.n	8007692 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007680:	e007      	b.n	8007692 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0201 	orr.w	r2, r2, #1
 8007690:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	40010000 	.word	0x40010000
 80076a0:	40000400 	.word	0x40000400
 80076a4:	40000800 	.word	0x40000800
 80076a8:	40000c00 	.word	0x40000c00
 80076ac:	40014000 	.word	0x40014000

080076b0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d109      	bne.n	80076dc <HAL_TIM_PWM_Start_DMA+0x2c>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	bf0c      	ite	eq
 80076d4:	2301      	moveq	r3, #1
 80076d6:	2300      	movne	r3, #0
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	e022      	b.n	8007722 <HAL_TIM_PWM_Start_DMA+0x72>
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d109      	bne.n	80076f6 <HAL_TIM_PWM_Start_DMA+0x46>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	bf0c      	ite	eq
 80076ee:	2301      	moveq	r3, #1
 80076f0:	2300      	movne	r3, #0
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	e015      	b.n	8007722 <HAL_TIM_PWM_Start_DMA+0x72>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2b08      	cmp	r3, #8
 80076fa:	d109      	bne.n	8007710 <HAL_TIM_PWM_Start_DMA+0x60>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b02      	cmp	r3, #2
 8007706:	bf0c      	ite	eq
 8007708:	2301      	moveq	r3, #1
 800770a:	2300      	movne	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	e008      	b.n	8007722 <HAL_TIM_PWM_Start_DMA+0x72>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b02      	cmp	r3, #2
 800771a:	bf0c      	ite	eq
 800771c:	2301      	moveq	r3, #1
 800771e:	2300      	movne	r3, #0
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8007726:	2302      	movs	r3, #2
 8007728:	e15d      	b.n	80079e6 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d109      	bne.n	8007744 <HAL_TIM_PWM_Start_DMA+0x94>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b01      	cmp	r3, #1
 800773a:	bf0c      	ite	eq
 800773c:	2301      	moveq	r3, #1
 800773e:	2300      	movne	r3, #0
 8007740:	b2db      	uxtb	r3, r3
 8007742:	e022      	b.n	800778a <HAL_TIM_PWM_Start_DMA+0xda>
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b04      	cmp	r3, #4
 8007748:	d109      	bne.n	800775e <HAL_TIM_PWM_Start_DMA+0xae>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b01      	cmp	r3, #1
 8007754:	bf0c      	ite	eq
 8007756:	2301      	moveq	r3, #1
 8007758:	2300      	movne	r3, #0
 800775a:	b2db      	uxtb	r3, r3
 800775c:	e015      	b.n	800778a <HAL_TIM_PWM_Start_DMA+0xda>
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2b08      	cmp	r3, #8
 8007762:	d109      	bne.n	8007778 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b01      	cmp	r3, #1
 800776e:	bf0c      	ite	eq
 8007770:	2301      	moveq	r3, #1
 8007772:	2300      	movne	r3, #0
 8007774:	b2db      	uxtb	r3, r3
 8007776:	e008      	b.n	800778a <HAL_TIM_PWM_Start_DMA+0xda>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b01      	cmp	r3, #1
 8007782:	bf0c      	ite	eq
 8007784:	2301      	moveq	r3, #1
 8007786:	2300      	movne	r3, #0
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d024      	beq.n	80077d8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d104      	bne.n	800779e <HAL_TIM_PWM_Start_DMA+0xee>
 8007794:	887b      	ldrh	r3, [r7, #2]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e123      	b.n	80079e6 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d104      	bne.n	80077ae <HAL_TIM_PWM_Start_DMA+0xfe>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077ac:	e016      	b.n	80077dc <HAL_TIM_PWM_Start_DMA+0x12c>
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d104      	bne.n	80077be <HAL_TIM_PWM_Start_DMA+0x10e>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077bc:	e00e      	b.n	80077dc <HAL_TIM_PWM_Start_DMA+0x12c>
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d104      	bne.n	80077ce <HAL_TIM_PWM_Start_DMA+0x11e>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077cc:	e006      	b.n	80077dc <HAL_TIM_PWM_Start_DMA+0x12c>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2202      	movs	r2, #2
 80077d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077d6:	e001      	b.n	80077dc <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e104      	b.n	80079e6 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b0c      	cmp	r3, #12
 80077e0:	f200 80ae 	bhi.w	8007940 <HAL_TIM_PWM_Start_DMA+0x290>
 80077e4:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <HAL_TIM_PWM_Start_DMA+0x13c>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	08007821 	.word	0x08007821
 80077f0:	08007941 	.word	0x08007941
 80077f4:	08007941 	.word	0x08007941
 80077f8:	08007941 	.word	0x08007941
 80077fc:	08007869 	.word	0x08007869
 8007800:	08007941 	.word	0x08007941
 8007804:	08007941 	.word	0x08007941
 8007808:	08007941 	.word	0x08007941
 800780c:	080078b1 	.word	0x080078b1
 8007810:	08007941 	.word	0x08007941
 8007814:	08007941 	.word	0x08007941
 8007818:	08007941 	.word	0x08007941
 800781c:	080078f9 	.word	0x080078f9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	4a72      	ldr	r2, [pc, #456]	; (80079f0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007826:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	4a71      	ldr	r2, [pc, #452]	; (80079f4 <HAL_TIM_PWM_Start_DMA+0x344>)
 800782e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	4a70      	ldr	r2, [pc, #448]	; (80079f8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007836:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3334      	adds	r3, #52	; 0x34
 8007844:	461a      	mov	r2, r3
 8007846:	887b      	ldrh	r3, [r7, #2]
 8007848:	f7fd fea4 	bl	8005594 <HAL_DMA_Start_IT>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e0c7      	b.n	80079e6 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007864:	60da      	str	r2, [r3, #12]
      break;
 8007866:	e06e      	b.n	8007946 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786c:	4a60      	ldr	r2, [pc, #384]	; (80079f0 <HAL_TIM_PWM_Start_DMA+0x340>)
 800786e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007874:	4a5f      	ldr	r2, [pc, #380]	; (80079f4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007876:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787c:	4a5e      	ldr	r2, [pc, #376]	; (80079f8 <HAL_TIM_PWM_Start_DMA+0x348>)
 800787e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3338      	adds	r3, #56	; 0x38
 800788c:	461a      	mov	r2, r3
 800788e:	887b      	ldrh	r3, [r7, #2]
 8007890:	f7fd fe80 	bl	8005594 <HAL_DMA_Start_IT>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e0a3      	b.n	80079e6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68da      	ldr	r2, [r3, #12]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078ac:	60da      	str	r2, [r3, #12]
      break;
 80078ae:	e04a      	b.n	8007946 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	4a4e      	ldr	r2, [pc, #312]	; (80079f0 <HAL_TIM_PWM_Start_DMA+0x340>)
 80078b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078bc:	4a4d      	ldr	r2, [pc, #308]	; (80079f4 <HAL_TIM_PWM_Start_DMA+0x344>)
 80078be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	4a4c      	ldr	r2, [pc, #304]	; (80079f8 <HAL_TIM_PWM_Start_DMA+0x348>)
 80078c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	333c      	adds	r3, #60	; 0x3c
 80078d4:	461a      	mov	r2, r3
 80078d6:	887b      	ldrh	r3, [r7, #2]
 80078d8:	f7fd fe5c 	bl	8005594 <HAL_DMA_Start_IT>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e07f      	b.n	80079e6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078f4:	60da      	str	r2, [r3, #12]
      break;
 80078f6:	e026      	b.n	8007946 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fc:	4a3c      	ldr	r2, [pc, #240]	; (80079f0 <HAL_TIM_PWM_Start_DMA+0x340>)
 80078fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007904:	4a3b      	ldr	r2, [pc, #236]	; (80079f4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007906:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790c:	4a3a      	ldr	r2, [pc, #232]	; (80079f8 <HAL_TIM_PWM_Start_DMA+0x348>)
 800790e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007914:	6879      	ldr	r1, [r7, #4]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3340      	adds	r3, #64	; 0x40
 800791c:	461a      	mov	r2, r3
 800791e:	887b      	ldrh	r3, [r7, #2]
 8007920:	f7fd fe38 	bl	8005594 <HAL_DMA_Start_IT>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e05b      	b.n	80079e6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800793c:	60da      	str	r2, [r3, #12]
      break;
 800793e:	e002      	b.n	8007946 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	75fb      	strb	r3, [r7, #23]
      break;
 8007944:	bf00      	nop
  }

  if (status == HAL_OK)
 8007946:	7dfb      	ldrb	r3, [r7, #23]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d14b      	bne.n	80079e4 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2201      	movs	r2, #1
 8007952:	68b9      	ldr	r1, [r7, #8]
 8007954:	4618      	mov	r0, r3
 8007956:	f001 fb57 	bl	8009008 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a27      	ldr	r2, [pc, #156]	; (80079fc <HAL_TIM_PWM_Start_DMA+0x34c>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d107      	bne.n	8007974 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007972:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a20      	ldr	r2, [pc, #128]	; (80079fc <HAL_TIM_PWM_Start_DMA+0x34c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d018      	beq.n	80079b0 <HAL_TIM_PWM_Start_DMA+0x300>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007986:	d013      	beq.n	80079b0 <HAL_TIM_PWM_Start_DMA+0x300>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a1c      	ldr	r2, [pc, #112]	; (8007a00 <HAL_TIM_PWM_Start_DMA+0x350>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00e      	beq.n	80079b0 <HAL_TIM_PWM_Start_DMA+0x300>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a1b      	ldr	r2, [pc, #108]	; (8007a04 <HAL_TIM_PWM_Start_DMA+0x354>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d009      	beq.n	80079b0 <HAL_TIM_PWM_Start_DMA+0x300>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a19      	ldr	r2, [pc, #100]	; (8007a08 <HAL_TIM_PWM_Start_DMA+0x358>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d004      	beq.n	80079b0 <HAL_TIM_PWM_Start_DMA+0x300>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a18      	ldr	r2, [pc, #96]	; (8007a0c <HAL_TIM_PWM_Start_DMA+0x35c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d111      	bne.n	80079d4 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f003 0307 	and.w	r3, r3, #7
 80079ba:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	2b06      	cmp	r3, #6
 80079c0:	d010      	beq.n	80079e4 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f042 0201 	orr.w	r2, r2, #1
 80079d0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d2:	e007      	b.n	80079e4 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f042 0201 	orr.w	r2, r2, #1
 80079e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	080089a3 	.word	0x080089a3
 80079f4:	08008a4f 	.word	0x08008a4f
 80079f8:	0800890d 	.word	0x0800890d
 80079fc:	40010000 	.word	0x40010000
 8007a00:	40000400 	.word	0x40000400
 8007a04:	40000800 	.word	0x40000800
 8007a08:	40000c00 	.word	0x40000c00
 8007a0c:	40014000 	.word	0x40014000

08007a10 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b0c      	cmp	r3, #12
 8007a22:	d855      	bhi.n	8007ad0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007a24:	a201      	add	r2, pc, #4	; (adr r2, 8007a2c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2a:	bf00      	nop
 8007a2c:	08007a61 	.word	0x08007a61
 8007a30:	08007ad1 	.word	0x08007ad1
 8007a34:	08007ad1 	.word	0x08007ad1
 8007a38:	08007ad1 	.word	0x08007ad1
 8007a3c:	08007a7d 	.word	0x08007a7d
 8007a40:	08007ad1 	.word	0x08007ad1
 8007a44:	08007ad1 	.word	0x08007ad1
 8007a48:	08007ad1 	.word	0x08007ad1
 8007a4c:	08007a99 	.word	0x08007a99
 8007a50:	08007ad1 	.word	0x08007ad1
 8007a54:	08007ad1 	.word	0x08007ad1
 8007a58:	08007ad1 	.word	0x08007ad1
 8007a5c:	08007ab5 	.word	0x08007ab5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007a6e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fd fe55 	bl	8005724 <HAL_DMA_Abort_IT>
      break;
 8007a7a:	e02c      	b.n	8007ad6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68da      	ldr	r2, [r3, #12]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a8a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fd fe47 	bl	8005724 <HAL_DMA_Abort_IT>
      break;
 8007a96:	e01e      	b.n	8007ad6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68da      	ldr	r2, [r3, #12]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007aa6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fd fe39 	bl	8005724 <HAL_DMA_Abort_IT>
      break;
 8007ab2:	e010      	b.n	8007ad6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ac2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fd fe2b 	bl	8005724 <HAL_DMA_Abort_IT>
      break;
 8007ace:	e002      	b.n	8007ad6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad4:	bf00      	nop
  }

  if (status == HAL_OK)
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d157      	bne.n	8007b8c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f001 fa8f 	bl	8009008 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a2a      	ldr	r2, [pc, #168]	; (8007b98 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d117      	bne.n	8007b24 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6a1a      	ldr	r2, [r3, #32]
 8007afa:	f241 1311 	movw	r3, #4369	; 0x1111
 8007afe:	4013      	ands	r3, r2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10f      	bne.n	8007b24 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6a1a      	ldr	r2, [r3, #32]
 8007b0a:	f240 4344 	movw	r3, #1092	; 0x444
 8007b0e:	4013      	ands	r3, r2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d107      	bne.n	8007b24 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b22:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6a1a      	ldr	r2, [r3, #32]
 8007b2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b2e:	4013      	ands	r3, r2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10f      	bne.n	8007b54 <HAL_TIM_PWM_Stop_DMA+0x144>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6a1a      	ldr	r2, [r3, #32]
 8007b3a:	f240 4344 	movw	r3, #1092	; 0x444
 8007b3e:	4013      	ands	r3, r2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d107      	bne.n	8007b54 <HAL_TIM_PWM_Stop_DMA+0x144>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0201 	bic.w	r2, r2, #1
 8007b52:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d104      	bne.n	8007b64 <HAL_TIM_PWM_Stop_DMA+0x154>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b62:	e013      	b.n	8007b8c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	2b04      	cmp	r3, #4
 8007b68:	d104      	bne.n	8007b74 <HAL_TIM_PWM_Stop_DMA+0x164>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b72:	e00b      	b.n	8007b8c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2b08      	cmp	r3, #8
 8007b78:	d104      	bne.n	8007b84 <HAL_TIM_PWM_Stop_DMA+0x174>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b82:	e003      	b.n	8007b8c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	40010000 	.word	0x40010000

08007b9c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e04c      	b.n	8007c4a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d111      	bne.n	8007be0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 fa45 	bl	8009054 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d102      	bne.n	8007bd8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a1f      	ldr	r2, [pc, #124]	; (8007c54 <HAL_TIM_OnePulse_Init+0xb8>)
 8007bd6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	3304      	adds	r3, #4
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	4610      	mov	r0, r2
 8007bf4:	f000 ff62 	bl	8008abc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 0208 	bic.w	r2, r2, #8
 8007c06:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6819      	ldr	r1, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	430a      	orrs	r2, r1
 8007c16:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	08007c59 	.word	0x08007c59

08007c58 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c7c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c84:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c8c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c94:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d108      	bne.n	8007cae <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c9c:	7bbb      	ldrb	r3, [r7, #14]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d105      	bne.n	8007cae <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ca2:	7b7b      	ldrb	r3, [r7, #13]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d102      	bne.n	8007cae <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ca8:	7b3b      	ldrb	r3, [r7, #12]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d001      	beq.n	8007cb2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e03b      	b.n	8007d2a <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2202      	movs	r2, #2
 8007cce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68da      	ldr	r2, [r3, #12]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f042 0202 	orr.w	r2, r2, #2
 8007ce0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68da      	ldr	r2, [r3, #12]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f042 0204 	orr.w	r2, r2, #4
 8007cf0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f001 f984 	bl	8009008 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2201      	movs	r2, #1
 8007d06:	2104      	movs	r1, #4
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f001 f97d 	bl	8009008 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a08      	ldr	r2, [pc, #32]	; (8007d34 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d107      	bne.n	8007d28 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	40010000 	.word	0x40010000

08007d38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e0a2      	b.n	8007e92 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d111      	bne.n	8007d7c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 f977 	bl	8009054 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d102      	bne.n	8007d74 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a4a      	ldr	r2, [pc, #296]	; (8007e9c <HAL_TIM_Encoder_Init+0x164>)
 8007d72:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	6812      	ldr	r2, [r2, #0]
 8007d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d92:	f023 0307 	bic.w	r3, r3, #7
 8007d96:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	4619      	mov	r1, r3
 8007da2:	4610      	mov	r0, r2
 8007da4:	f000 fe8a 	bl	8008abc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dd0:	f023 0303 	bic.w	r3, r3, #3
 8007dd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	689a      	ldr	r2, [r3, #8]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	021b      	lsls	r3, r3, #8
 8007de0:	4313      	orrs	r3, r2
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007dee:	f023 030c 	bic.w	r3, r3, #12
 8007df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	68da      	ldr	r2, [r3, #12]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	021b      	lsls	r3, r3, #8
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	011a      	lsls	r2, r3, #4
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	031b      	lsls	r3, r3, #12
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007e2c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007e34:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	011b      	lsls	r3, r3, #4
 8007e40:	4313      	orrs	r3, r2
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	080041c1 	.word	0x080041c1

08007ea0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007eb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ec0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ec8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d110      	bne.n	8007ef2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d102      	bne.n	8007edc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ed6:	7b7b      	ldrb	r3, [r7, #13]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d001      	beq.n	8007ee0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e069      	b.n	8007fb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ef0:	e031      	b.n	8007f56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d110      	bne.n	8007f1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d102      	bne.n	8007f04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007efe:	7b3b      	ldrb	r3, [r7, #12]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d001      	beq.n	8007f08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e055      	b.n	8007fb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f18:	e01d      	b.n	8007f56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d108      	bne.n	8007f32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d105      	bne.n	8007f32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f26:	7b7b      	ldrb	r3, [r7, #13]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d102      	bne.n	8007f32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f2c:	7b3b      	ldrb	r3, [r7, #12]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d001      	beq.n	8007f36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e03e      	b.n	8007fb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2202      	movs	r2, #2
 8007f42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2202      	movs	r2, #2
 8007f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2202      	movs	r2, #2
 8007f52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_TIM_Encoder_Start+0xc4>
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	d008      	beq.n	8007f74 <HAL_TIM_Encoder_Start+0xd4>
 8007f62:	e00f      	b.n	8007f84 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f001 f84b 	bl	8009008 <TIM_CCxChannelCmd>
      break;
 8007f72:	e016      	b.n	8007fa2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	2104      	movs	r1, #4
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f001 f843 	bl	8009008 <TIM_CCxChannelCmd>
      break;
 8007f82:	e00e      	b.n	8007fa2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f001 f83b 	bl	8009008 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2201      	movs	r2, #1
 8007f98:	2104      	movs	r1, #4
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f001 f834 	bl	8009008 <TIM_CCxChannelCmd>
      break;
 8007fa0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0201 	orr.w	r2, r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	f003 0302 	and.w	r3, r3, #2
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d128      	bne.n	8008024 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d121      	bne.n	8008024 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f06f 0202 	mvn.w	r2, #2
 8007fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	f003 0303 	and.w	r3, r3, #3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d005      	beq.n	800800a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	4798      	blx	r3
 8008008:	e009      	b.n	800801e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b04      	cmp	r3, #4
 8008030:	d128      	bne.n	8008084 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b04      	cmp	r3, #4
 800803e:	d121      	bne.n	8008084 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f06f 0204 	mvn.w	r2, #4
 8008048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2202      	movs	r2, #2
 800804e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800805a:	2b00      	cmp	r3, #0
 800805c:	d005      	beq.n	800806a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	4798      	blx	r3
 8008068:	e009      	b.n	800807e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f003 0308 	and.w	r3, r3, #8
 800808e:	2b08      	cmp	r3, #8
 8008090:	d128      	bne.n	80080e4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f003 0308 	and.w	r3, r3, #8
 800809c:	2b08      	cmp	r3, #8
 800809e:	d121      	bne.n	80080e4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f06f 0208 	mvn.w	r2, #8
 80080a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2204      	movs	r2, #4
 80080ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d005      	beq.n	80080ca <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	4798      	blx	r3
 80080c8:	e009      	b.n	80080de <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	f003 0310 	and.w	r3, r3, #16
 80080ee:	2b10      	cmp	r3, #16
 80080f0:	d128      	bne.n	8008144 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	f003 0310 	and.w	r3, r3, #16
 80080fc:	2b10      	cmp	r3, #16
 80080fe:	d121      	bne.n	8008144 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f06f 0210 	mvn.w	r2, #16
 8008108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2208      	movs	r2, #8
 800810e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800811a:	2b00      	cmp	r3, #0
 800811c:	d005      	beq.n	800812a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	4798      	blx	r3
 8008128:	e009      	b.n	800813e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	2b01      	cmp	r3, #1
 8008150:	d110      	bne.n	8008174 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b01      	cmp	r3, #1
 800815e:	d109      	bne.n	8008174 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0201 	mvn.w	r2, #1
 8008168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800817e:	2b80      	cmp	r3, #128	; 0x80
 8008180:	d110      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818c:	2b80      	cmp	r3, #128	; 0x80
 800818e:	d109      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ae:	2b40      	cmp	r3, #64	; 0x40
 80081b0:	d110      	bne.n	80081d4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081bc:	2b40      	cmp	r3, #64	; 0x40
 80081be:	d109      	bne.n	80081d4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	f003 0320 	and.w	r3, r3, #32
 80081de:	2b20      	cmp	r3, #32
 80081e0:	d110      	bne.n	8008204 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f003 0320 	and.w	r3, r3, #32
 80081ec:	2b20      	cmp	r3, #32
 80081ee:	d109      	bne.n	8008204 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f06f 0220 	mvn.w	r2, #32
 80081f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008222:	2b01      	cmp	r3, #1
 8008224:	d101      	bne.n	800822a <HAL_TIM_OC_ConfigChannel+0x1e>
 8008226:	2302      	movs	r3, #2
 8008228:	e048      	b.n	80082bc <HAL_TIM_OC_ConfigChannel+0xb0>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b0c      	cmp	r3, #12
 8008236:	d839      	bhi.n	80082ac <HAL_TIM_OC_ConfigChannel+0xa0>
 8008238:	a201      	add	r2, pc, #4	; (adr r2, 8008240 <HAL_TIM_OC_ConfigChannel+0x34>)
 800823a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823e:	bf00      	nop
 8008240:	08008275 	.word	0x08008275
 8008244:	080082ad 	.word	0x080082ad
 8008248:	080082ad 	.word	0x080082ad
 800824c:	080082ad 	.word	0x080082ad
 8008250:	08008283 	.word	0x08008283
 8008254:	080082ad 	.word	0x080082ad
 8008258:	080082ad 	.word	0x080082ad
 800825c:	080082ad 	.word	0x080082ad
 8008260:	08008291 	.word	0x08008291
 8008264:	080082ad 	.word	0x080082ad
 8008268:	080082ad 	.word	0x080082ad
 800826c:	080082ad 	.word	0x080082ad
 8008270:	0800829f 	.word	0x0800829f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68b9      	ldr	r1, [r7, #8]
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fc9e 	bl	8008bbc <TIM_OC1_SetConfig>
      break;
 8008280:	e017      	b.n	80082b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68b9      	ldr	r1, [r7, #8]
 8008288:	4618      	mov	r0, r3
 800828a:	f000 fcfd 	bl	8008c88 <TIM_OC2_SetConfig>
      break;
 800828e:	e010      	b.n	80082b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68b9      	ldr	r1, [r7, #8]
 8008296:	4618      	mov	r0, r3
 8008298:	f000 fd62 	bl	8008d60 <TIM_OC3_SetConfig>
      break;
 800829c:	e009      	b.n	80082b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68b9      	ldr	r1, [r7, #8]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 fdc5 	bl	8008e34 <TIM_OC4_SetConfig>
      break;
 80082aa:	e002      	b.n	80082b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	75fb      	strb	r3, [r7, #23]
      break;
 80082b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3718      	adds	r7, #24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d101      	bne.n	80082e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082de:	2302      	movs	r3, #2
 80082e0:	e0ae      	b.n	8008440 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b0c      	cmp	r3, #12
 80082ee:	f200 809f 	bhi.w	8008430 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	0800832d 	.word	0x0800832d
 80082fc:	08008431 	.word	0x08008431
 8008300:	08008431 	.word	0x08008431
 8008304:	08008431 	.word	0x08008431
 8008308:	0800836d 	.word	0x0800836d
 800830c:	08008431 	.word	0x08008431
 8008310:	08008431 	.word	0x08008431
 8008314:	08008431 	.word	0x08008431
 8008318:	080083af 	.word	0x080083af
 800831c:	08008431 	.word	0x08008431
 8008320:	08008431 	.word	0x08008431
 8008324:	08008431 	.word	0x08008431
 8008328:	080083ef 	.word	0x080083ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68b9      	ldr	r1, [r7, #8]
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fc42 	bl	8008bbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	699a      	ldr	r2, [r3, #24]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f042 0208 	orr.w	r2, r2, #8
 8008346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	699a      	ldr	r2, [r3, #24]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f022 0204 	bic.w	r2, r2, #4
 8008356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6999      	ldr	r1, [r3, #24]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	691a      	ldr	r2, [r3, #16]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	619a      	str	r2, [r3, #24]
      break;
 800836a:	e064      	b.n	8008436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68b9      	ldr	r1, [r7, #8]
 8008372:	4618      	mov	r0, r3
 8008374:	f000 fc88 	bl	8008c88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	699a      	ldr	r2, [r3, #24]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	699a      	ldr	r2, [r3, #24]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6999      	ldr	r1, [r3, #24]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	021a      	lsls	r2, r3, #8
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	430a      	orrs	r2, r1
 80083aa:	619a      	str	r2, [r3, #24]
      break;
 80083ac:	e043      	b.n	8008436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68b9      	ldr	r1, [r7, #8]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 fcd3 	bl	8008d60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	69da      	ldr	r2, [r3, #28]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f042 0208 	orr.w	r2, r2, #8
 80083c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69da      	ldr	r2, [r3, #28]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f022 0204 	bic.w	r2, r2, #4
 80083d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69d9      	ldr	r1, [r3, #28]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	691a      	ldr	r2, [r3, #16]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	61da      	str	r2, [r3, #28]
      break;
 80083ec:	e023      	b.n	8008436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68b9      	ldr	r1, [r7, #8]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 fd1d 	bl	8008e34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69da      	ldr	r2, [r3, #28]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69da      	ldr	r2, [r3, #28]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	69d9      	ldr	r1, [r3, #28]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	021a      	lsls	r2, r3, #8
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	430a      	orrs	r2, r1
 800842c:	61da      	str	r2, [r3, #28]
      break;
 800842e:	e002      	b.n	8008436 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	75fb      	strb	r3, [r7, #23]
      break;
 8008434:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800843e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800845c:	2b01      	cmp	r3, #1
 800845e:	d101      	bne.n	8008464 <HAL_TIM_ConfigClockSource+0x1c>
 8008460:	2302      	movs	r3, #2
 8008462:	e0b4      	b.n	80085ce <HAL_TIM_ConfigClockSource+0x186>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800848a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800849c:	d03e      	beq.n	800851c <HAL_TIM_ConfigClockSource+0xd4>
 800849e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a2:	f200 8087 	bhi.w	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
 80084a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084aa:	f000 8086 	beq.w	80085ba <HAL_TIM_ConfigClockSource+0x172>
 80084ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b2:	d87f      	bhi.n	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
 80084b4:	2b70      	cmp	r3, #112	; 0x70
 80084b6:	d01a      	beq.n	80084ee <HAL_TIM_ConfigClockSource+0xa6>
 80084b8:	2b70      	cmp	r3, #112	; 0x70
 80084ba:	d87b      	bhi.n	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
 80084bc:	2b60      	cmp	r3, #96	; 0x60
 80084be:	d050      	beq.n	8008562 <HAL_TIM_ConfigClockSource+0x11a>
 80084c0:	2b60      	cmp	r3, #96	; 0x60
 80084c2:	d877      	bhi.n	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
 80084c4:	2b50      	cmp	r3, #80	; 0x50
 80084c6:	d03c      	beq.n	8008542 <HAL_TIM_ConfigClockSource+0xfa>
 80084c8:	2b50      	cmp	r3, #80	; 0x50
 80084ca:	d873      	bhi.n	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
 80084cc:	2b40      	cmp	r3, #64	; 0x40
 80084ce:	d058      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x13a>
 80084d0:	2b40      	cmp	r3, #64	; 0x40
 80084d2:	d86f      	bhi.n	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
 80084d4:	2b30      	cmp	r3, #48	; 0x30
 80084d6:	d064      	beq.n	80085a2 <HAL_TIM_ConfigClockSource+0x15a>
 80084d8:	2b30      	cmp	r3, #48	; 0x30
 80084da:	d86b      	bhi.n	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
 80084dc:	2b20      	cmp	r3, #32
 80084de:	d060      	beq.n	80085a2 <HAL_TIM_ConfigClockSource+0x15a>
 80084e0:	2b20      	cmp	r3, #32
 80084e2:	d867      	bhi.n	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d05c      	beq.n	80085a2 <HAL_TIM_ConfigClockSource+0x15a>
 80084e8:	2b10      	cmp	r3, #16
 80084ea:	d05a      	beq.n	80085a2 <HAL_TIM_ConfigClockSource+0x15a>
 80084ec:	e062      	b.n	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6818      	ldr	r0, [r3, #0]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	6899      	ldr	r1, [r3, #8]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	f000 fd63 	bl	8008fc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008510:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	609a      	str	r2, [r3, #8]
      break;
 800851a:	e04f      	b.n	80085bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6818      	ldr	r0, [r3, #0]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	6899      	ldr	r1, [r3, #8]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f000 fd4c 	bl	8008fc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689a      	ldr	r2, [r3, #8]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800853e:	609a      	str	r2, [r3, #8]
      break;
 8008540:	e03c      	b.n	80085bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	6859      	ldr	r1, [r3, #4]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	461a      	mov	r2, r3
 8008550:	f000 fcc0 	bl	8008ed4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2150      	movs	r1, #80	; 0x50
 800855a:	4618      	mov	r0, r3
 800855c:	f000 fd19 	bl	8008f92 <TIM_ITRx_SetConfig>
      break;
 8008560:	e02c      	b.n	80085bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6818      	ldr	r0, [r3, #0]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	6859      	ldr	r1, [r3, #4]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	461a      	mov	r2, r3
 8008570:	f000 fcdf 	bl	8008f32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2160      	movs	r1, #96	; 0x60
 800857a:	4618      	mov	r0, r3
 800857c:	f000 fd09 	bl	8008f92 <TIM_ITRx_SetConfig>
      break;
 8008580:	e01c      	b.n	80085bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6818      	ldr	r0, [r3, #0]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	6859      	ldr	r1, [r3, #4]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	461a      	mov	r2, r3
 8008590:	f000 fca0 	bl	8008ed4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2140      	movs	r1, #64	; 0x40
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fcf9 	bl	8008f92 <TIM_ITRx_SetConfig>
      break;
 80085a0:	e00c      	b.n	80085bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4619      	mov	r1, r3
 80085ac:	4610      	mov	r0, r2
 80085ae:	f000 fcf0 	bl	8008f92 <TIM_ITRx_SetConfig>
      break;
 80085b2:	e003      	b.n	80085bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	73fb      	strb	r3, [r7, #15]
      break;
 80085b8:	e000      	b.n	80085bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80085ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b083      	sub	sp, #12
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008612:	b480      	push	{r7}
 8008614:	b083      	sub	sp, #12
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800861a:	bf00      	nop
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008626:	b480      	push	{r7}
 8008628:	b083      	sub	sp, #12
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800862e:	bf00      	nop
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800863a:	b480      	push	{r7}
 800863c:	b083      	sub	sp, #12
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008642:	bf00      	nop
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800864e:	b480      	push	{r7}
 8008650:	b083      	sub	sp, #12
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008656:	bf00      	nop
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008662:	b480      	push	{r7}
 8008664:	b083      	sub	sp, #12
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800866a:	bf00      	nop
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
	...

08008678 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008678:	b480      	push	{r7}
 800867a:	b087      	sub	sp, #28
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	460b      	mov	r3, r1
 8008682:	607a      	str	r2, [r7, #4]
 8008684:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e135      	b.n	8008900 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800869a:	2b01      	cmp	r3, #1
 800869c:	d101      	bne.n	80086a2 <HAL_TIM_RegisterCallback+0x2a>
 800869e:	2302      	movs	r3, #2
 80086a0:	e12e      	b.n	8008900 <HAL_TIM_RegisterCallback+0x288>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	f040 80ba 	bne.w	800882c <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 80086b8:	7afb      	ldrb	r3, [r7, #11]
 80086ba:	2b1a      	cmp	r3, #26
 80086bc:	f200 80b3 	bhi.w	8008826 <HAL_TIM_RegisterCallback+0x1ae>
 80086c0:	a201      	add	r2, pc, #4	; (adr r2, 80086c8 <HAL_TIM_RegisterCallback+0x50>)
 80086c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c6:	bf00      	nop
 80086c8:	08008735 	.word	0x08008735
 80086cc:	0800873d 	.word	0x0800873d
 80086d0:	08008745 	.word	0x08008745
 80086d4:	0800874d 	.word	0x0800874d
 80086d8:	08008755 	.word	0x08008755
 80086dc:	0800875d 	.word	0x0800875d
 80086e0:	08008765 	.word	0x08008765
 80086e4:	0800876d 	.word	0x0800876d
 80086e8:	08008775 	.word	0x08008775
 80086ec:	0800877d 	.word	0x0800877d
 80086f0:	08008785 	.word	0x08008785
 80086f4:	0800878d 	.word	0x0800878d
 80086f8:	08008795 	.word	0x08008795
 80086fc:	0800879d 	.word	0x0800879d
 8008700:	080087a5 	.word	0x080087a5
 8008704:	080087af 	.word	0x080087af
 8008708:	080087b9 	.word	0x080087b9
 800870c:	080087c3 	.word	0x080087c3
 8008710:	080087cd 	.word	0x080087cd
 8008714:	080087d7 	.word	0x080087d7
 8008718:	080087e1 	.word	0x080087e1
 800871c:	080087eb 	.word	0x080087eb
 8008720:	080087f5 	.word	0x080087f5
 8008724:	080087ff 	.word	0x080087ff
 8008728:	08008809 	.word	0x08008809
 800872c:	08008813 	.word	0x08008813
 8008730:	0800881d 	.word	0x0800881d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800873a:	e0dc      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008742:	e0d8      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800874a:	e0d4      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008752:	e0d0      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800875a:	e0cc      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008762:	e0c8      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800876a:	e0c4      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008772:	e0c0      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800877a:	e0bc      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008782:	e0b8      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800878a:	e0b4      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008792:	e0b0      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800879a:	e0ac      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80087a2:	e0a8      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 80087ac:	e0a3      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80087b6:	e09e      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80087c0:	e099      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80087ca:	e094      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80087d4:	e08f      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80087de:	e08a      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80087e8:	e085      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80087f2:	e080      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80087fc:	e07b      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8008806:	e076      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8008810:	e071      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800881a:	e06c      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8008824:	e067      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	75fb      	strb	r3, [r7, #23]
        break;
 800882a:	e064      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	d15c      	bne.n	80088f2 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8008838:	7afb      	ldrb	r3, [r7, #11]
 800883a:	2b0d      	cmp	r3, #13
 800883c:	d856      	bhi.n	80088ec <HAL_TIM_RegisterCallback+0x274>
 800883e:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <HAL_TIM_RegisterCallback+0x1cc>)
 8008840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008844:	0800887d 	.word	0x0800887d
 8008848:	08008885 	.word	0x08008885
 800884c:	0800888d 	.word	0x0800888d
 8008850:	08008895 	.word	0x08008895
 8008854:	0800889d 	.word	0x0800889d
 8008858:	080088a5 	.word	0x080088a5
 800885c:	080088ad 	.word	0x080088ad
 8008860:	080088b5 	.word	0x080088b5
 8008864:	080088bd 	.word	0x080088bd
 8008868:	080088c5 	.word	0x080088c5
 800886c:	080088cd 	.word	0x080088cd
 8008870:	080088d5 	.word	0x080088d5
 8008874:	080088dd 	.word	0x080088dd
 8008878:	080088e5 	.word	0x080088e5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8008882:	e038      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800888a:	e034      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008892:	e030      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800889a:	e02c      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80088a2:	e028      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80088aa:	e024      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80088b2:	e020      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80088ba:	e01c      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80088c2:	e018      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80088ca:	e014      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80088d2:	e010      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80088da:	e00c      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80088e2:	e008      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80088ea:	e004      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	75fb      	strb	r3, [r7, #23]
        break;
 80088f0:	e001      	b.n	80088f6 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008900:	4618      	mov	r0, r3
 8008902:	371c      	adds	r7, #28
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008918:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	429a      	cmp	r2, r3
 8008922:	d107      	bne.n	8008934 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2201      	movs	r2, #1
 8008928:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008932:	e02a      	b.n	800898a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	429a      	cmp	r2, r3
 800893c:	d107      	bne.n	800894e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2202      	movs	r2, #2
 8008942:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800894c:	e01d      	b.n	800898a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	429a      	cmp	r2, r3
 8008956:	d107      	bne.n	8008968 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2204      	movs	r2, #4
 800895c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008966:	e010      	b.n	800898a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	429a      	cmp	r2, r3
 8008970:	d107      	bne.n	8008982 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2208      	movs	r2, #8
 8008976:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008980:	e003      	b.n	800898a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	4798      	blx	r3
#else
  HAL_TIM_ErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	771a      	strb	r2, [r3, #28]
}
 800899a:	bf00      	nop
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d10b      	bne.n	80089d2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2201      	movs	r2, #1
 80089be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	69db      	ldr	r3, [r3, #28]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d136      	bne.n	8008a36 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089d0:	e031      	b.n	8008a36 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d10b      	bne.n	80089f4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2202      	movs	r2, #2
 80089e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d125      	bne.n	8008a36 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089f2:	e020      	b.n	8008a36 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d10b      	bne.n	8008a16 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2204      	movs	r2, #4
 8008a02:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	69db      	ldr	r3, [r3, #28]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d114      	bne.n	8008a36 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a14:	e00f      	b.n	8008a36 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d10a      	bne.n	8008a36 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2208      	movs	r2, #8
 8008a24:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	69db      	ldr	r3, [r3, #28]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d103      	bne.n	8008a36 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	771a      	strb	r2, [r3, #28]
}
 8008a46:	bf00      	nop
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d103      	bne.n	8008a6e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	771a      	strb	r2, [r3, #28]
 8008a6c:	e019      	b.n	8008aa2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d103      	bne.n	8008a80 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	771a      	strb	r2, [r3, #28]
 8008a7e:	e010      	b.n	8008aa2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d103      	bne.n	8008a92 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2204      	movs	r2, #4
 8008a8e:	771a      	strb	r2, [r3, #28]
 8008a90:	e007      	b.n	8008aa2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d102      	bne.n	8008aa2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2208      	movs	r2, #8
 8008aa0:	771a      	strb	r2, [r3, #28]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	771a      	strb	r2, [r3, #28]
}
 8008ab2:	bf00      	nop
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a34      	ldr	r2, [pc, #208]	; (8008ba0 <TIM_Base_SetConfig+0xe4>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d00f      	beq.n	8008af4 <TIM_Base_SetConfig+0x38>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ada:	d00b      	beq.n	8008af4 <TIM_Base_SetConfig+0x38>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a31      	ldr	r2, [pc, #196]	; (8008ba4 <TIM_Base_SetConfig+0xe8>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d007      	beq.n	8008af4 <TIM_Base_SetConfig+0x38>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a30      	ldr	r2, [pc, #192]	; (8008ba8 <TIM_Base_SetConfig+0xec>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d003      	beq.n	8008af4 <TIM_Base_SetConfig+0x38>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a2f      	ldr	r2, [pc, #188]	; (8008bac <TIM_Base_SetConfig+0xf0>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d108      	bne.n	8008b06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a25      	ldr	r2, [pc, #148]	; (8008ba0 <TIM_Base_SetConfig+0xe4>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d01b      	beq.n	8008b46 <TIM_Base_SetConfig+0x8a>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b14:	d017      	beq.n	8008b46 <TIM_Base_SetConfig+0x8a>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a22      	ldr	r2, [pc, #136]	; (8008ba4 <TIM_Base_SetConfig+0xe8>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d013      	beq.n	8008b46 <TIM_Base_SetConfig+0x8a>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a21      	ldr	r2, [pc, #132]	; (8008ba8 <TIM_Base_SetConfig+0xec>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00f      	beq.n	8008b46 <TIM_Base_SetConfig+0x8a>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a20      	ldr	r2, [pc, #128]	; (8008bac <TIM_Base_SetConfig+0xf0>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d00b      	beq.n	8008b46 <TIM_Base_SetConfig+0x8a>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a1f      	ldr	r2, [pc, #124]	; (8008bb0 <TIM_Base_SetConfig+0xf4>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d007      	beq.n	8008b46 <TIM_Base_SetConfig+0x8a>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a1e      	ldr	r2, [pc, #120]	; (8008bb4 <TIM_Base_SetConfig+0xf8>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d003      	beq.n	8008b46 <TIM_Base_SetConfig+0x8a>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a1d      	ldr	r2, [pc, #116]	; (8008bb8 <TIM_Base_SetConfig+0xfc>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d108      	bne.n	8008b58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	689a      	ldr	r2, [r3, #8]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a08      	ldr	r2, [pc, #32]	; (8008ba0 <TIM_Base_SetConfig+0xe4>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d103      	bne.n	8008b8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	691a      	ldr	r2, [r3, #16]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	615a      	str	r2, [r3, #20]
}
 8008b92:	bf00      	nop
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	40010000 	.word	0x40010000
 8008ba4:	40000400 	.word	0x40000400
 8008ba8:	40000800 	.word	0x40000800
 8008bac:	40000c00 	.word	0x40000c00
 8008bb0:	40014000 	.word	0x40014000
 8008bb4:	40014400 	.word	0x40014400
 8008bb8:	40014800 	.word	0x40014800

08008bbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	f023 0201 	bic.w	r2, r3, #1
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f023 0303 	bic.w	r3, r3, #3
 8008bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f023 0302 	bic.w	r3, r3, #2
 8008c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a1c      	ldr	r2, [pc, #112]	; (8008c84 <TIM_OC1_SetConfig+0xc8>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d10c      	bne.n	8008c32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	f023 0308 	bic.w	r3, r3, #8
 8008c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f023 0304 	bic.w	r3, r3, #4
 8008c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a13      	ldr	r2, [pc, #76]	; (8008c84 <TIM_OC1_SetConfig+0xc8>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d111      	bne.n	8008c5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	621a      	str	r2, [r3, #32]
}
 8008c78:	bf00      	nop
 8008c7a:	371c      	adds	r7, #28
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	40010000 	.word	0x40010000

08008c88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a1b      	ldr	r3, [r3, #32]
 8008c96:	f023 0210 	bic.w	r2, r3, #16
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	021b      	lsls	r3, r3, #8
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f023 0320 	bic.w	r3, r3, #32
 8008cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	011b      	lsls	r3, r3, #4
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a1e      	ldr	r2, [pc, #120]	; (8008d5c <TIM_OC2_SetConfig+0xd4>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d10d      	bne.n	8008d04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	011b      	lsls	r3, r3, #4
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a15      	ldr	r2, [pc, #84]	; (8008d5c <TIM_OC2_SetConfig+0xd4>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d113      	bne.n	8008d34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	621a      	str	r2, [r3, #32]
}
 8008d4e:	bf00      	nop
 8008d50:	371c      	adds	r7, #28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	40010000 	.word	0x40010000

08008d60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f023 0303 	bic.w	r3, r3, #3
 8008d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	021b      	lsls	r3, r3, #8
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a1d      	ldr	r2, [pc, #116]	; (8008e30 <TIM_OC3_SetConfig+0xd0>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d10d      	bne.n	8008dda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	021b      	lsls	r3, r3, #8
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a14      	ldr	r2, [pc, #80]	; (8008e30 <TIM_OC3_SetConfig+0xd0>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d113      	bne.n	8008e0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	011b      	lsls	r3, r3, #4
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	011b      	lsls	r3, r3, #4
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	621a      	str	r2, [r3, #32]
}
 8008e24:	bf00      	nop
 8008e26:	371c      	adds	r7, #28
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	40010000 	.word	0x40010000

08008e34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	021b      	lsls	r3, r3, #8
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	031b      	lsls	r3, r3, #12
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a10      	ldr	r2, [pc, #64]	; (8008ed0 <TIM_OC4_SetConfig+0x9c>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d109      	bne.n	8008ea8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	019b      	lsls	r3, r3, #6
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	621a      	str	r2, [r3, #32]
}
 8008ec2:	bf00      	nop
 8008ec4:	371c      	adds	r7, #28
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	40010000 	.word	0x40010000

08008ed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b087      	sub	sp, #28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6a1b      	ldr	r3, [r3, #32]
 8008ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	f023 0201 	bic.w	r2, r3, #1
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	011b      	lsls	r3, r3, #4
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f023 030a 	bic.w	r3, r3, #10
 8008f10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	621a      	str	r2, [r3, #32]
}
 8008f26:	bf00      	nop
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b087      	sub	sp, #28
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	60f8      	str	r0, [r7, #12]
 8008f3a:	60b9      	str	r1, [r7, #8]
 8008f3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	f023 0210 	bic.w	r2, r3, #16
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6a1b      	ldr	r3, [r3, #32]
 8008f54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	031b      	lsls	r3, r3, #12
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	011b      	lsls	r3, r3, #4
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	697a      	ldr	r2, [r7, #20]
 8008f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	621a      	str	r2, [r3, #32]
}
 8008f86:	bf00      	nop
 8008f88:	371c      	adds	r7, #28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f92:	b480      	push	{r7}
 8008f94:	b085      	sub	sp, #20
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	f043 0307 	orr.w	r3, r3, #7
 8008fb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	609a      	str	r2, [r3, #8]
}
 8008fbc:	bf00      	nop
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b087      	sub	sp, #28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fe2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	021a      	lsls	r2, r3, #8
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	431a      	orrs	r2, r3
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	609a      	str	r2, [r3, #8]
}
 8008ffc:	bf00      	nop
 8008ffe:	371c      	adds	r7, #28
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009008:	b480      	push	{r7}
 800900a:	b087      	sub	sp, #28
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	f003 031f 	and.w	r3, r3, #31
 800901a:	2201      	movs	r2, #1
 800901c:	fa02 f303 	lsl.w	r3, r2, r3
 8009020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6a1a      	ldr	r2, [r3, #32]
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	43db      	mvns	r3, r3
 800902a:	401a      	ands	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6a1a      	ldr	r2, [r3, #32]
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	f003 031f 	and.w	r3, r3, #31
 800903a:	6879      	ldr	r1, [r7, #4]
 800903c:	fa01 f303 	lsl.w	r3, r1, r3
 8009040:	431a      	orrs	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	621a      	str	r2, [r3, #32]
}
 8009046:	bf00      	nop
 8009048:	371c      	adds	r7, #28
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
	...

08009054 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a1c      	ldr	r2, [pc, #112]	; (80090d0 <TIM_ResetCallback+0x7c>)
 8009060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a1b      	ldr	r2, [pc, #108]	; (80090d4 <TIM_ResetCallback+0x80>)
 8009068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a1a      	ldr	r2, [pc, #104]	; (80090d8 <TIM_ResetCallback+0x84>)
 8009070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a19      	ldr	r2, [pc, #100]	; (80090dc <TIM_ResetCallback+0x88>)
 8009078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a18      	ldr	r2, [pc, #96]	; (80090e0 <TIM_ResetCallback+0x8c>)
 8009080:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a17      	ldr	r2, [pc, #92]	; (80090e4 <TIM_ResetCallback+0x90>)
 8009088:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a16      	ldr	r2, [pc, #88]	; (80090e8 <TIM_ResetCallback+0x94>)
 8009090:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a15      	ldr	r2, [pc, #84]	; (80090ec <TIM_ResetCallback+0x98>)
 8009098:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a14      	ldr	r2, [pc, #80]	; (80090f0 <TIM_ResetCallback+0x9c>)
 80090a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a13      	ldr	r2, [pc, #76]	; (80090f4 <TIM_ResetCallback+0xa0>)
 80090a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a12      	ldr	r2, [pc, #72]	; (80090f8 <TIM_ResetCallback+0xa4>)
 80090b0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a11      	ldr	r2, [pc, #68]	; (80090fc <TIM_ResetCallback+0xa8>)
 80090b8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a10      	ldr	r2, [pc, #64]	; (8009100 <TIM_ResetCallback+0xac>)
 80090c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	080038fd 	.word	0x080038fd
 80090d4:	080085d7 	.word	0x080085d7
 80090d8:	0800863b 	.word	0x0800863b
 80090dc:	0800864f 	.word	0x0800864f
 80090e0:	080085ff 	.word	0x080085ff
 80090e4:	08008613 	.word	0x08008613
 80090e8:	080085eb 	.word	0x080085eb
 80090ec:	080033e5 	.word	0x080033e5
 80090f0:	08008627 	.word	0x08008627
 80090f4:	08008663 	.word	0x08008663
 80090f8:	08009285 	.word	0x08009285
 80090fc:	08009299 	.word	0x08009299
 8009100:	080092ad 	.word	0x080092ad

08009104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009114:	2b01      	cmp	r3, #1
 8009116:	d101      	bne.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009118:	2302      	movs	r3, #2
 800911a:	e050      	b.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2202      	movs	r2, #2
 8009128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009142:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	4313      	orrs	r3, r2
 800914c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a1c      	ldr	r2, [pc, #112]	; (80091cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d018      	beq.n	8009192 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009168:	d013      	beq.n	8009192 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a18      	ldr	r2, [pc, #96]	; (80091d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d00e      	beq.n	8009192 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a16      	ldr	r2, [pc, #88]	; (80091d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d009      	beq.n	8009192 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a15      	ldr	r2, [pc, #84]	; (80091d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d004      	beq.n	8009192 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a13      	ldr	r2, [pc, #76]	; (80091dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d10c      	bne.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009198:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	40010000 	.word	0x40010000
 80091d0:	40000400 	.word	0x40000400
 80091d4:	40000800 	.word	0x40000800
 80091d8:	40000c00 	.word	0x40000c00
 80091dc:	40014000 	.word	0x40014000

080091e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80091ea:	2300      	movs	r3, #0
 80091ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d101      	bne.n	80091fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80091f8:	2302      	movs	r3, #2
 80091fa:	e03d      	b.n	8009278 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	4313      	orrs	r3, r2
 800921e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	4313      	orrs	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4313      	orrs	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	4313      	orrs	r3, r2
 8009248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	4313      	orrs	r3, r2
 8009256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	69db      	ldr	r3, [r3, #28]
 8009262:	4313      	orrs	r3, r2
 8009264:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3714      	adds	r7, #20
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d101      	bne.n	80092d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e04a      	b.n	8009368 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d111      	bne.n	8009302 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fd22 	bl	8009d30 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d102      	bne.n	80092fa <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a1e      	ldr	r2, [pc, #120]	; (8009370 <HAL_UART_Init+0xb0>)
 80092f8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2224      	movs	r2, #36	; 0x24
 8009306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68da      	ldr	r2, [r3, #12]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009318:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 ffec 	bl	800a2f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	691a      	ldr	r2, [r3, #16]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800932e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	695a      	ldr	r2, [r3, #20]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800933e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800934e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2220      	movs	r2, #32
 800935a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2220      	movs	r2, #32
 8009362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	08004a35 	.word	0x08004a35

08009374 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	460b      	mov	r3, r1
 800937e:	607a      	str	r2, [r7, #4]
 8009380:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d107      	bne.n	800939c <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009390:	f043 0220 	orr.w	r2, r3, #32
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	e08c      	b.n	80094b6 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d101      	bne.n	80093aa <HAL_UART_RegisterCallback+0x36>
 80093a6:	2302      	movs	r3, #2
 80093a8:	e085      	b.n	80094b6 <HAL_UART_RegisterCallback+0x142>
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2201      	movs	r2, #1
 80093ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b20      	cmp	r3, #32
 80093bc:	d151      	bne.n	8009462 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 80093be:	7afb      	ldrb	r3, [r7, #11]
 80093c0:	2b0c      	cmp	r3, #12
 80093c2:	d845      	bhi.n	8009450 <HAL_UART_RegisterCallback+0xdc>
 80093c4:	a201      	add	r2, pc, #4	; (adr r2, 80093cc <HAL_UART_RegisterCallback+0x58>)
 80093c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ca:	bf00      	nop
 80093cc:	08009401 	.word	0x08009401
 80093d0:	08009409 	.word	0x08009409
 80093d4:	08009411 	.word	0x08009411
 80093d8:	08009419 	.word	0x08009419
 80093dc:	08009421 	.word	0x08009421
 80093e0:	08009429 	.word	0x08009429
 80093e4:	08009431 	.word	0x08009431
 80093e8:	08009439 	.word	0x08009439
 80093ec:	08009451 	.word	0x08009451
 80093f0:	08009451 	.word	0x08009451
 80093f4:	08009451 	.word	0x08009451
 80093f8:	08009441 	.word	0x08009441
 80093fc:	08009449 	.word	0x08009449
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8009406:	e051      	b.n	80094ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800940e:	e04d      	b.n	80094ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009416:	e049      	b.n	80094ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800941e:	e045      	b.n	80094ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009426:	e041      	b.n	80094ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800942e:	e03d      	b.n	80094ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009436:	e039      	b.n	80094ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800943e:	e035      	b.n	80094ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009446:	e031      	b.n	80094ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800944e:	e02d      	b.n	80094ac <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009454:	f043 0220 	orr.w	r2, r3, #32
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	75fb      	strb	r3, [r7, #23]
        break;
 8009460:	e024      	b.n	80094ac <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d116      	bne.n	800949c <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800946e:	7afb      	ldrb	r3, [r7, #11]
 8009470:	2b0b      	cmp	r3, #11
 8009472:	d002      	beq.n	800947a <HAL_UART_RegisterCallback+0x106>
 8009474:	2b0c      	cmp	r3, #12
 8009476:	d004      	beq.n	8009482 <HAL_UART_RegisterCallback+0x10e>
 8009478:	e007      	b.n	800948a <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009480:	e014      	b.n	80094ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009488:	e010      	b.n	80094ac <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948e:	f043 0220 	orr.w	r2, r3, #32
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	75fb      	strb	r3, [r7, #23]
        break;
 800949a:	e007      	b.n	80094ac <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a0:	f043 0220 	orr.w	r2, r3, #32
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80094b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	371c      	adds	r7, #28
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop

080094c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	4613      	mov	r3, r2
 80094d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b20      	cmp	r3, #32
 80094dc:	d11d      	bne.n	800951a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <HAL_UART_Receive_IT+0x26>
 80094e4:	88fb      	ldrh	r3, [r7, #6]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e016      	b.n	800951c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d101      	bne.n	80094fc <HAL_UART_Receive_IT+0x38>
 80094f8:	2302      	movs	r3, #2
 80094fa:	e00f      	b.n	800951c <HAL_UART_Receive_IT+0x58>
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800950a:	88fb      	ldrh	r3, [r7, #6]
 800950c:	461a      	mov	r2, r3
 800950e:	68b9      	ldr	r1, [r7, #8]
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 fced 	bl	8009ef0 <UART_Start_Receive_IT>
 8009516:	4603      	mov	r3, r0
 8009518:	e000      	b.n	800951c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800951a:	2302      	movs	r3, #2
  }
}
 800951c:	4618      	mov	r0, r3
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b08c      	sub	sp, #48	; 0x30
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	4613      	mov	r3, r2
 8009530:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009538:	b2db      	uxtb	r3, r3
 800953a:	2b20      	cmp	r3, #32
 800953c:	d165      	bne.n	800960a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <HAL_UART_Transmit_DMA+0x26>
 8009544:	88fb      	ldrh	r3, [r7, #6]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e05e      	b.n	800960c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009554:	2b01      	cmp	r3, #1
 8009556:	d101      	bne.n	800955c <HAL_UART_Transmit_DMA+0x38>
 8009558:	2302      	movs	r3, #2
 800955a:	e057      	b.n	800960c <HAL_UART_Transmit_DMA+0xe8>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	88fa      	ldrh	r2, [r7, #6]
 800956e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	88fa      	ldrh	r2, [r7, #6]
 8009574:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2200      	movs	r2, #0
 800957a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2221      	movs	r2, #33	; 0x21
 8009580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009588:	4a22      	ldr	r2, [pc, #136]	; (8009614 <HAL_UART_Transmit_DMA+0xf0>)
 800958a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009590:	4a21      	ldr	r2, [pc, #132]	; (8009618 <HAL_UART_Transmit_DMA+0xf4>)
 8009592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009598:	4a20      	ldr	r2, [pc, #128]	; (800961c <HAL_UART_Transmit_DMA+0xf8>)
 800959a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a0:	2200      	movs	r2, #0
 80095a2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80095a4:	f107 0308 	add.w	r3, r7, #8
 80095a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80095ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b0:	6819      	ldr	r1, [r3, #0]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3304      	adds	r3, #4
 80095b8:	461a      	mov	r2, r3
 80095ba:	88fb      	ldrh	r3, [r7, #6]
 80095bc:	f7fb ffea 	bl	8005594 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095c8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3314      	adds	r3, #20
 80095d8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	e853 3f00 	ldrex	r3, [r3]
 80095e0:	617b      	str	r3, [r7, #20]
   return(result);
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3314      	adds	r3, #20
 80095f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095f2:	627a      	str	r2, [r7, #36]	; 0x24
 80095f4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f6:	6a39      	ldr	r1, [r7, #32]
 80095f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095fa:	e841 2300 	strex	r3, r2, [r1]
 80095fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1e5      	bne.n	80095d2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	e000      	b.n	800960c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800960a:	2302      	movs	r3, #2
  }
}
 800960c:	4618      	mov	r0, r3
 800960e:	3730      	adds	r7, #48	; 0x30
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	08009da1 	.word	0x08009da1
 8009618:	08009e3d 	.word	0x08009e3d
 800961c:	08009e5b 	.word	0x08009e5b

08009620 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b09a      	sub	sp, #104	; 0x68
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	330c      	adds	r3, #12
 800962e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009632:	e853 3f00 	ldrex	r3, [r3]
 8009636:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800963a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800963e:	667b      	str	r3, [r7, #100]	; 0x64
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	330c      	adds	r3, #12
 8009646:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009648:	657a      	str	r2, [r7, #84]	; 0x54
 800964a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800964e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009650:	e841 2300 	strex	r3, r2, [r1]
 8009654:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1e5      	bne.n	8009628 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3314      	adds	r3, #20
 8009662:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009666:	e853 3f00 	ldrex	r3, [r3]
 800966a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800966c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966e:	f023 0301 	bic.w	r3, r3, #1
 8009672:	663b      	str	r3, [r7, #96]	; 0x60
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3314      	adds	r3, #20
 800967a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800967c:	643a      	str	r2, [r7, #64]	; 0x40
 800967e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009680:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009682:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009684:	e841 2300 	strex	r3, r2, [r1]
 8009688:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800968a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1e5      	bne.n	800965c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009694:	2b01      	cmp	r3, #1
 8009696:	d119      	bne.n	80096cc <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	330c      	adds	r3, #12
 800969e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	e853 3f00 	ldrex	r3, [r3]
 80096a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	f023 0310 	bic.w	r3, r3, #16
 80096ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	330c      	adds	r3, #12
 80096b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80096b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096c0:	e841 2300 	strex	r3, r2, [r1]
 80096c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1e5      	bne.n	8009698 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d6:	2b40      	cmp	r3, #64	; 0x40
 80096d8:	d136      	bne.n	8009748 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3314      	adds	r3, #20
 80096e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	e853 3f00 	ldrex	r3, [r3]
 80096e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3314      	adds	r3, #20
 80096f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096fa:	61ba      	str	r2, [r7, #24]
 80096fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fe:	6979      	ldr	r1, [r7, #20]
 8009700:	69ba      	ldr	r2, [r7, #24]
 8009702:	e841 2300 	strex	r3, r2, [r1]
 8009706:	613b      	str	r3, [r7, #16]
   return(result);
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1e5      	bne.n	80096da <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009712:	2b00      	cmp	r3, #0
 8009714:	d018      	beq.n	8009748 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	2200      	movs	r2, #0
 800971c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009722:	4618      	mov	r0, r3
 8009724:	f7fb ff8e 	bl	8005644 <HAL_DMA_Abort>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00c      	beq.n	8009748 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009732:	4618      	mov	r0, r3
 8009734:	f7fc f9a2 	bl	8005a7c <HAL_DMA_GetError>
 8009738:	4603      	mov	r3, r0
 800973a:	2b20      	cmp	r3, #32
 800973c:	d104      	bne.n	8009748 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2210      	movs	r2, #16
 8009742:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8009744:	2303      	movs	r3, #3
 8009746:	e00a      	b.n	800975e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2220      	movs	r2, #32
 8009752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3768      	adds	r7, #104	; 0x68
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
	...

08009768 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b0ba      	sub	sp, #232	; 0xe8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800978e:	2300      	movs	r3, #0
 8009790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009794:	2300      	movs	r3, #0
 8009796:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800979a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80097a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10f      	bne.n	80097ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097b2:	f003 0320 	and.w	r3, r3, #32
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d009      	beq.n	80097ce <HAL_UART_IRQHandler+0x66>
 80097ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097be:	f003 0320 	and.w	r3, r3, #32
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d003      	beq.n	80097ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fcd9 	bl	800a17e <UART_Receive_IT>
      return;
 80097cc:	e25b      	b.n	8009c86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80097ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f000 80e1 	beq.w	800999a <HAL_UART_IRQHandler+0x232>
 80097d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097dc:	f003 0301 	and.w	r3, r3, #1
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d106      	bne.n	80097f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80097e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f000 80d4 	beq.w	800999a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80097f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00b      	beq.n	8009816 <HAL_UART_IRQHandler+0xae>
 80097fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009806:	2b00      	cmp	r3, #0
 8009808:	d005      	beq.n	8009816 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980e:	f043 0201 	orr.w	r2, r3, #1
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800981a:	f003 0304 	and.w	r3, r3, #4
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00b      	beq.n	800983a <HAL_UART_IRQHandler+0xd2>
 8009822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	2b00      	cmp	r3, #0
 800982c:	d005      	beq.n	800983a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009832:	f043 0202 	orr.w	r2, r3, #2
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800983a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800983e:	f003 0302 	and.w	r3, r3, #2
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00b      	beq.n	800985e <HAL_UART_IRQHandler+0xf6>
 8009846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800984a:	f003 0301 	and.w	r3, r3, #1
 800984e:	2b00      	cmp	r3, #0
 8009850:	d005      	beq.n	800985e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009856:	f043 0204 	orr.w	r2, r3, #4
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800985e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009862:	f003 0308 	and.w	r3, r3, #8
 8009866:	2b00      	cmp	r3, #0
 8009868:	d011      	beq.n	800988e <HAL_UART_IRQHandler+0x126>
 800986a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800986e:	f003 0320 	and.w	r3, r3, #32
 8009872:	2b00      	cmp	r3, #0
 8009874:	d105      	bne.n	8009882 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	2b00      	cmp	r3, #0
 8009880:	d005      	beq.n	800988e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009886:	f043 0208 	orr.w	r2, r3, #8
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 81f2 	beq.w	8009c7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800989c:	f003 0320 	and.w	r3, r3, #32
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d008      	beq.n	80098b6 <HAL_UART_IRQHandler+0x14e>
 80098a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098a8:	f003 0320 	and.w	r3, r3, #32
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d002      	beq.n	80098b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fc64 	bl	800a17e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c0:	2b40      	cmp	r3, #64	; 0x40
 80098c2:	bf0c      	ite	eq
 80098c4:	2301      	moveq	r3, #1
 80098c6:	2300      	movne	r3, #0
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d2:	f003 0308 	and.w	r3, r3, #8
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d103      	bne.n	80098e2 <HAL_UART_IRQHandler+0x17a>
 80098da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d051      	beq.n	8009986 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fb6a 	bl	8009fbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098f2:	2b40      	cmp	r3, #64	; 0x40
 80098f4:	d142      	bne.n	800997c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	3314      	adds	r3, #20
 80098fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009900:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009904:	e853 3f00 	ldrex	r3, [r3]
 8009908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800990c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	3314      	adds	r3, #20
 800991e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009922:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800992e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009932:	e841 2300 	strex	r3, r2, [r1]
 8009936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800993a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1d9      	bne.n	80098f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009946:	2b00      	cmp	r3, #0
 8009948:	d013      	beq.n	8009972 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800994e:	4a7f      	ldr	r2, [pc, #508]	; (8009b4c <HAL_UART_IRQHandler+0x3e4>)
 8009950:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009956:	4618      	mov	r0, r3
 8009958:	f7fb fee4 	bl	8005724 <HAL_DMA_Abort_IT>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d019      	beq.n	8009996 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800996c:	4610      	mov	r0, r2
 800996e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009970:	e011      	b.n	8009996 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800997a:	e00c      	b.n	8009996 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009984:	e007      	b.n	8009996 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009994:	e172      	b.n	8009c7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009996:	bf00      	nop
    return;
 8009998:	e170      	b.n	8009c7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999e:	2b01      	cmp	r3, #1
 80099a0:	f040 814c 	bne.w	8009c3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80099a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099a8:	f003 0310 	and.w	r3, r3, #16
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 8145 	beq.w	8009c3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80099b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099b6:	f003 0310 	and.w	r3, r3, #16
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f000 813e 	beq.w	8009c3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80099c0:	2300      	movs	r3, #0
 80099c2:	60bb      	str	r3, [r7, #8]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	60bb      	str	r3, [r7, #8]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	60bb      	str	r3, [r7, #8]
 80099d4:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e0:	2b40      	cmp	r3, #64	; 0x40
 80099e2:	f040 80b5 	bne.w	8009b50 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f000 8142 	beq.w	8009c80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a04:	429a      	cmp	r2, r3
 8009a06:	f080 813b 	bcs.w	8009c80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a10:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a16:	69db      	ldr	r3, [r3, #28]
 8009a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a1c:	f000 8088 	beq.w	8009b30 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	330c      	adds	r3, #12
 8009a26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a2e:	e853 3f00 	ldrex	r3, [r3]
 8009a32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	330c      	adds	r3, #12
 8009a48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009a4c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009a50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a54:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009a58:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a5c:	e841 2300 	strex	r3, r2, [r1]
 8009a60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1d9      	bne.n	8009a20 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	3314      	adds	r3, #20
 8009a72:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a76:	e853 3f00 	ldrex	r3, [r3]
 8009a7a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a7e:	f023 0301 	bic.w	r3, r3, #1
 8009a82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3314      	adds	r3, #20
 8009a8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a90:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a94:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a96:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a9c:	e841 2300 	strex	r3, r2, [r1]
 8009aa0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009aa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1e1      	bne.n	8009a6c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3314      	adds	r3, #20
 8009aae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ab2:	e853 3f00 	ldrex	r3, [r3]
 8009ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009abe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3314      	adds	r3, #20
 8009ac8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009acc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009ace:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ad2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ad4:	e841 2300 	strex	r3, r2, [r1]
 8009ad8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1e3      	bne.n	8009aa8 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2220      	movs	r2, #32
 8009ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	330c      	adds	r3, #12
 8009af4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009af8:	e853 3f00 	ldrex	r3, [r3]
 8009afc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b00:	f023 0310 	bic.w	r3, r3, #16
 8009b04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	330c      	adds	r3, #12
 8009b0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009b12:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b14:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b1a:	e841 2300 	strex	r3, r2, [r1]
 8009b1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1e3      	bne.n	8009aee <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fb fd8a 	bl	8005644 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8009b3c:	b292      	uxth	r2, r2
 8009b3e:	1a8a      	subs	r2, r1, r2
 8009b40:	b292      	uxth	r2, r2
 8009b42:	4611      	mov	r1, r2
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009b48:	e09a      	b.n	8009c80 <HAL_UART_IRQHandler+0x518>
 8009b4a:	bf00      	nop
 8009b4c:	0800a083 	.word	0x0800a083
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f000 808c 	beq.w	8009c84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 8087 	beq.w	8009c84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	330c      	adds	r3, #12
 8009b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b80:	e853 3f00 	ldrex	r3, [r3]
 8009b84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	330c      	adds	r3, #12
 8009b96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009b9a:	647a      	str	r2, [r7, #68]	; 0x44
 8009b9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ba0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ba2:	e841 2300 	strex	r3, r2, [r1]
 8009ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1e3      	bne.n	8009b76 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3314      	adds	r3, #20
 8009bb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb8:	e853 3f00 	ldrex	r3, [r3]
 8009bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8009bbe:	6a3b      	ldr	r3, [r7, #32]
 8009bc0:	f023 0301 	bic.w	r3, r3, #1
 8009bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	3314      	adds	r3, #20
 8009bce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009bd2:	633a      	str	r2, [r7, #48]	; 0x30
 8009bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bda:	e841 2300 	strex	r3, r2, [r1]
 8009bde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1e3      	bne.n	8009bae <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2220      	movs	r2, #32
 8009bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	330c      	adds	r3, #12
 8009bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	e853 3f00 	ldrex	r3, [r3]
 8009c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f023 0310 	bic.w	r3, r3, #16
 8009c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	330c      	adds	r3, #12
 8009c14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009c18:	61fa      	str	r2, [r7, #28]
 8009c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1c:	69b9      	ldr	r1, [r7, #24]
 8009c1e:	69fa      	ldr	r2, [r7, #28]
 8009c20:	e841 2300 	strex	r3, r2, [r1]
 8009c24:	617b      	str	r3, [r7, #20]
   return(result);
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1e3      	bne.n	8009bf4 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c30:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8009c34:	4611      	mov	r1, r2
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c3a:	e023      	b.n	8009c84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d009      	beq.n	8009c5c <HAL_UART_IRQHandler+0x4f4>
 8009c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d003      	beq.n	8009c5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fa29 	bl	800a0ac <UART_Transmit_IT>
    return;
 8009c5a:	e014      	b.n	8009c86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00e      	beq.n	8009c86 <HAL_UART_IRQHandler+0x51e>
 8009c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d008      	beq.n	8009c86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fa69 	bl	800a14c <UART_EndTransmit_IT>
    return;
 8009c7a:	e004      	b.n	8009c86 <HAL_UART_IRQHandler+0x51e>
    return;
 8009c7c:	bf00      	nop
 8009c7e:	e002      	b.n	8009c86 <HAL_UART_IRQHandler+0x51e>
      return;
 8009c80:	bf00      	nop
 8009c82:	e000      	b.n	8009c86 <HAL_UART_IRQHandler+0x51e>
      return;
 8009c84:	bf00      	nop
  }
}
 8009c86:	37e8      	adds	r7, #232	; 0xe8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	460b      	mov	r3, r1
 8009d22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a10      	ldr	r2, [pc, #64]	; (8009d7c <UART_InitCallbacksToDefault+0x4c>)
 8009d3c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a0f      	ldr	r2, [pc, #60]	; (8009d80 <UART_InitCallbacksToDefault+0x50>)
 8009d42:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a0f      	ldr	r2, [pc, #60]	; (8009d84 <UART_InitCallbacksToDefault+0x54>)
 8009d48:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a0e      	ldr	r2, [pc, #56]	; (8009d88 <UART_InitCallbacksToDefault+0x58>)
 8009d4e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a0e      	ldr	r2, [pc, #56]	; (8009d8c <UART_InitCallbacksToDefault+0x5c>)
 8009d54:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a0d      	ldr	r2, [pc, #52]	; (8009d90 <UART_InitCallbacksToDefault+0x60>)
 8009d5a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a0d      	ldr	r2, [pc, #52]	; (8009d94 <UART_InitCallbacksToDefault+0x64>)
 8009d60:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a0c      	ldr	r2, [pc, #48]	; (8009d98 <UART_InitCallbacksToDefault+0x68>)
 8009d66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a0c      	ldr	r2, [pc, #48]	; (8009d9c <UART_InitCallbacksToDefault+0x6c>)
 8009d6c:	669a      	str	r2, [r3, #104]	; 0x68

}
 8009d6e:	bf00      	nop
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	08009ca1 	.word	0x08009ca1
 8009d80:	08009c8d 	.word	0x08009c8d
 8009d84:	08009cb5 	.word	0x08009cb5
 8009d88:	0800391d 	.word	0x0800391d
 8009d8c:	08009cc9 	.word	0x08009cc9
 8009d90:	08009cdd 	.word	0x08009cdd
 8009d94:	08009cf1 	.word	0x08009cf1
 8009d98:	08009d05 	.word	0x08009d05
 8009d9c:	08009d19 	.word	0x08009d19

08009da0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b090      	sub	sp, #64	; 0x40
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d137      	bne.n	8009e2c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3314      	adds	r3, #20
 8009dc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	e853 3f00 	ldrex	r3, [r3]
 8009dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8009dd2:	6a3b      	ldr	r3, [r7, #32]
 8009dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009dd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3314      	adds	r3, #20
 8009de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009de2:	633a      	str	r2, [r7, #48]	; 0x30
 8009de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dea:	e841 2300 	strex	r3, r2, [r1]
 8009dee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1e5      	bne.n	8009dc2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	330c      	adds	r3, #12
 8009dfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8009e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	330c      	adds	r3, #12
 8009e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e16:	61fa      	str	r2, [r7, #28]
 8009e18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1a:	69b9      	ldr	r1, [r7, #24]
 8009e1c:	69fa      	ldr	r2, [r7, #28]
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	617b      	str	r3, [r7, #20]
   return(result);
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1e5      	bne.n	8009df6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e2a:	e003      	b.n	8009e34 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8009e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009e32:	4798      	blx	r3
}
 8009e34:	bf00      	nop
 8009e36:	3740      	adds	r7, #64	; 0x40
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e48:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e52:	bf00      	nop
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009e62:	2300      	movs	r3, #0
 8009e64:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	695b      	ldr	r3, [r3, #20]
 8009e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e76:	2b80      	cmp	r3, #128	; 0x80
 8009e78:	bf0c      	ite	eq
 8009e7a:	2301      	moveq	r3, #1
 8009e7c:	2300      	movne	r3, #0
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b21      	cmp	r3, #33	; 0x21
 8009e8c:	d108      	bne.n	8009ea0 <UART_DMAError+0x46>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d005      	beq.n	8009ea0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	2200      	movs	r2, #0
 8009e98:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009e9a:	68b8      	ldr	r0, [r7, #8]
 8009e9c:	f000 f866 	bl	8009f6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eaa:	2b40      	cmp	r3, #64	; 0x40
 8009eac:	bf0c      	ite	eq
 8009eae:	2301      	moveq	r3, #1
 8009eb0:	2300      	movne	r3, #0
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	2b22      	cmp	r3, #34	; 0x22
 8009ec0:	d108      	bne.n	8009ed4 <UART_DMAError+0x7a>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d005      	beq.n	8009ed4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009ece:	68b8      	ldr	r0, [r7, #8]
 8009ed0:	f000 f874 	bl	8009fbc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed8:	f043 0210 	orr.w	r2, r3, #16
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee4:	68b8      	ldr	r0, [r7, #8]
 8009ee6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ee8:	bf00      	nop
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	4613      	mov	r3, r2
 8009efc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	88fa      	ldrh	r2, [r7, #6]
 8009f08:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	88fa      	ldrh	r2, [r7, #6]
 8009f0e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2222      	movs	r2, #34	; 0x22
 8009f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d007      	beq.n	8009f3e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68da      	ldr	r2, [r3, #12]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f3c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	695a      	ldr	r2, [r3, #20]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f042 0201 	orr.w	r2, r2, #1
 8009f4c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68da      	ldr	r2, [r3, #12]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f042 0220 	orr.w	r2, r2, #32
 8009f5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3714      	adds	r7, #20
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b089      	sub	sp, #36	; 0x24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	330c      	adds	r3, #12
 8009f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	e853 3f00 	ldrex	r3, [r3]
 8009f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009f8a:	61fb      	str	r3, [r7, #28]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	330c      	adds	r3, #12
 8009f92:	69fa      	ldr	r2, [r7, #28]
 8009f94:	61ba      	str	r2, [r7, #24]
 8009f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f98:	6979      	ldr	r1, [r7, #20]
 8009f9a:	69ba      	ldr	r2, [r7, #24]
 8009f9c:	e841 2300 	strex	r3, r2, [r1]
 8009fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1e5      	bne.n	8009f74 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2220      	movs	r2, #32
 8009fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009fb0:	bf00      	nop
 8009fb2:	3724      	adds	r7, #36	; 0x24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b095      	sub	sp, #84	; 0x54
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	330c      	adds	r3, #12
 8009fca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fce:	e853 3f00 	ldrex	r3, [r3]
 8009fd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	330c      	adds	r3, #12
 8009fe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fe4:	643a      	str	r2, [r7, #64]	; 0x40
 8009fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fec:	e841 2300 	strex	r3, r2, [r1]
 8009ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1e5      	bne.n	8009fc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	3314      	adds	r3, #20
 8009ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a000:	6a3b      	ldr	r3, [r7, #32]
 800a002:	e853 3f00 	ldrex	r3, [r3]
 800a006:	61fb      	str	r3, [r7, #28]
   return(result);
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	f023 0301 	bic.w	r3, r3, #1
 800a00e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	3314      	adds	r3, #20
 800a016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a018:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a01a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a01e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a020:	e841 2300 	strex	r3, r2, [r1]
 800a024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1e5      	bne.n	8009ff8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a030:	2b01      	cmp	r3, #1
 800a032:	d119      	bne.n	800a068 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	330c      	adds	r3, #12
 800a03a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	e853 3f00 	ldrex	r3, [r3]
 800a042:	60bb      	str	r3, [r7, #8]
   return(result);
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f023 0310 	bic.w	r3, r3, #16
 800a04a:	647b      	str	r3, [r7, #68]	; 0x44
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	330c      	adds	r3, #12
 800a052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a054:	61ba      	str	r2, [r7, #24]
 800a056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a058:	6979      	ldr	r1, [r7, #20]
 800a05a:	69ba      	ldr	r2, [r7, #24]
 800a05c:	e841 2300 	strex	r3, r2, [r1]
 800a060:	613b      	str	r3, [r7, #16]
   return(result);
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d1e5      	bne.n	800a034 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2220      	movs	r2, #32
 800a06c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a076:	bf00      	nop
 800a078:	3754      	adds	r7, #84	; 0x54
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a08e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0a4:	bf00      	nop
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b21      	cmp	r3, #33	; 0x21
 800a0be:	d13e      	bne.n	800a13e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c8:	d114      	bne.n	800a0f4 <UART_Transmit_IT+0x48>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d110      	bne.n	800a0f4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a1b      	ldr	r3, [r3, #32]
 800a0d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	881b      	ldrh	r3, [r3, #0]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a1b      	ldr	r3, [r3, #32]
 800a0ec:	1c9a      	adds	r2, r3, #2
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	621a      	str	r2, [r3, #32]
 800a0f2:	e008      	b.n	800a106 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a1b      	ldr	r3, [r3, #32]
 800a0f8:	1c59      	adds	r1, r3, #1
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	6211      	str	r1, [r2, #32]
 800a0fe:	781a      	ldrb	r2, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	3b01      	subs	r3, #1
 800a10e:	b29b      	uxth	r3, r3
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	4619      	mov	r1, r3
 800a114:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10f      	bne.n	800a13a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68da      	ldr	r2, [r3, #12]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a128:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68da      	ldr	r2, [r3, #12]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a138:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a13a:	2300      	movs	r3, #0
 800a13c:	e000      	b.n	800a140 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a13e:	2302      	movs	r3, #2
  }
}
 800a140:	4618      	mov	r0, r3
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68da      	ldr	r2, [r3, #12]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a162:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2220      	movs	r2, #32
 800a168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b08c      	sub	sp, #48	; 0x30
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	2b22      	cmp	r3, #34	; 0x22
 800a190:	f040 80ad 	bne.w	800a2ee <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a19c:	d117      	bne.n	800a1ce <UART_Receive_IT+0x50>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d113      	bne.n	800a1ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c6:	1c9a      	adds	r2, r3, #2
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	629a      	str	r2, [r3, #40]	; 0x28
 800a1cc:	e026      	b.n	800a21c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1e0:	d007      	beq.n	800a1f2 <UART_Receive_IT+0x74>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10a      	bne.n	800a200 <UART_Receive_IT+0x82>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d106      	bne.n	800a200 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fc:	701a      	strb	r2, [r3, #0]
 800a1fe:	e008      	b.n	800a212 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	b2db      	uxtb	r3, r3
 800a208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a216:	1c5a      	adds	r2, r3, #1
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a220:	b29b      	uxth	r3, r3
 800a222:	3b01      	subs	r3, #1
 800a224:	b29b      	uxth	r3, r3
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	4619      	mov	r1, r3
 800a22a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d15c      	bne.n	800a2ea <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68da      	ldr	r2, [r3, #12]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f022 0220 	bic.w	r2, r2, #32
 800a23e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	68da      	ldr	r2, [r3, #12]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a24e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	695a      	ldr	r2, [r3, #20]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f022 0201 	bic.w	r2, r2, #1
 800a25e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2220      	movs	r2, #32
 800a264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d136      	bne.n	800a2de <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	330c      	adds	r3, #12
 800a27c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	e853 3f00 	ldrex	r3, [r3]
 800a284:	613b      	str	r3, [r7, #16]
   return(result);
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	f023 0310 	bic.w	r3, r3, #16
 800a28c:	627b      	str	r3, [r7, #36]	; 0x24
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	330c      	adds	r3, #12
 800a294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a296:	623a      	str	r2, [r7, #32]
 800a298:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29a:	69f9      	ldr	r1, [r7, #28]
 800a29c:	6a3a      	ldr	r2, [r7, #32]
 800a29e:	e841 2300 	strex	r3, r2, [r1]
 800a2a2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d1e5      	bne.n	800a276 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0310 	and.w	r3, r3, #16
 800a2b4:	2b10      	cmp	r3, #16
 800a2b6:	d10a      	bne.n	800a2ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	60fb      	str	r3, [r7, #12]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	60fb      	str	r3, [r7, #12]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	60fb      	str	r3, [r7, #12]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a2d6:	4611      	mov	r1, r2
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	4798      	blx	r3
 800a2dc:	e003      	b.n	800a2e6 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	e002      	b.n	800a2f0 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	e000      	b.n	800a2f0 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800a2ee:	2302      	movs	r3, #2
  }
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3730      	adds	r7, #48	; 0x30
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2fc:	b0c0      	sub	sp, #256	; 0x100
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a314:	68d9      	ldr	r1, [r3, #12]
 800a316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	ea40 0301 	orr.w	r3, r0, r1
 800a320:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a326:	689a      	ldr	r2, [r3, #8]
 800a328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	431a      	orrs	r2, r3
 800a330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	431a      	orrs	r2, r3
 800a338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a33c:	69db      	ldr	r3, [r3, #28]
 800a33e:	4313      	orrs	r3, r2
 800a340:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a350:	f021 010c 	bic.w	r1, r1, #12
 800a354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a35e:	430b      	orrs	r3, r1
 800a360:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a36e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a372:	6999      	ldr	r1, [r3, #24]
 800a374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	ea40 0301 	orr.w	r3, r0, r1
 800a37e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	4b8f      	ldr	r3, [pc, #572]	; (800a5c4 <UART_SetConfig+0x2cc>)
 800a388:	429a      	cmp	r2, r3
 800a38a:	d005      	beq.n	800a398 <UART_SetConfig+0xa0>
 800a38c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	4b8d      	ldr	r3, [pc, #564]	; (800a5c8 <UART_SetConfig+0x2d0>)
 800a394:	429a      	cmp	r2, r3
 800a396:	d104      	bne.n	800a3a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a398:	f7fc fee2 	bl	8007160 <HAL_RCC_GetPCLK2Freq>
 800a39c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a3a0:	e003      	b.n	800a3aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a3a2:	f7fc fec9 	bl	8007138 <HAL_RCC_GetPCLK1Freq>
 800a3a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3ae:	69db      	ldr	r3, [r3, #28]
 800a3b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3b4:	f040 810c 	bne.w	800a5d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a3b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a3c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a3c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a3ca:	4622      	mov	r2, r4
 800a3cc:	462b      	mov	r3, r5
 800a3ce:	1891      	adds	r1, r2, r2
 800a3d0:	65b9      	str	r1, [r7, #88]	; 0x58
 800a3d2:	415b      	adcs	r3, r3
 800a3d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a3da:	4621      	mov	r1, r4
 800a3dc:	eb12 0801 	adds.w	r8, r2, r1
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	eb43 0901 	adc.w	r9, r3, r1
 800a3e6:	f04f 0200 	mov.w	r2, #0
 800a3ea:	f04f 0300 	mov.w	r3, #0
 800a3ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a3f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a3f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a3fa:	4690      	mov	r8, r2
 800a3fc:	4699      	mov	r9, r3
 800a3fe:	4623      	mov	r3, r4
 800a400:	eb18 0303 	adds.w	r3, r8, r3
 800a404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a408:	462b      	mov	r3, r5
 800a40a:	eb49 0303 	adc.w	r3, r9, r3
 800a40e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a41e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a422:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a426:	460b      	mov	r3, r1
 800a428:	18db      	adds	r3, r3, r3
 800a42a:	653b      	str	r3, [r7, #80]	; 0x50
 800a42c:	4613      	mov	r3, r2
 800a42e:	eb42 0303 	adc.w	r3, r2, r3
 800a432:	657b      	str	r3, [r7, #84]	; 0x54
 800a434:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a438:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a43c:	f7f6 fc2c 	bl	8000c98 <__aeabi_uldivmod>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4b61      	ldr	r3, [pc, #388]	; (800a5cc <UART_SetConfig+0x2d4>)
 800a446:	fba3 2302 	umull	r2, r3, r3, r2
 800a44a:	095b      	lsrs	r3, r3, #5
 800a44c:	011c      	lsls	r4, r3, #4
 800a44e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a452:	2200      	movs	r2, #0
 800a454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a458:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a45c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a460:	4642      	mov	r2, r8
 800a462:	464b      	mov	r3, r9
 800a464:	1891      	adds	r1, r2, r2
 800a466:	64b9      	str	r1, [r7, #72]	; 0x48
 800a468:	415b      	adcs	r3, r3
 800a46a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a46c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a470:	4641      	mov	r1, r8
 800a472:	eb12 0a01 	adds.w	sl, r2, r1
 800a476:	4649      	mov	r1, r9
 800a478:	eb43 0b01 	adc.w	fp, r3, r1
 800a47c:	f04f 0200 	mov.w	r2, #0
 800a480:	f04f 0300 	mov.w	r3, #0
 800a484:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a488:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a48c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a490:	4692      	mov	sl, r2
 800a492:	469b      	mov	fp, r3
 800a494:	4643      	mov	r3, r8
 800a496:	eb1a 0303 	adds.w	r3, sl, r3
 800a49a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a49e:	464b      	mov	r3, r9
 800a4a0:	eb4b 0303 	adc.w	r3, fp, r3
 800a4a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a4a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a4b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a4bc:	460b      	mov	r3, r1
 800a4be:	18db      	adds	r3, r3, r3
 800a4c0:	643b      	str	r3, [r7, #64]	; 0x40
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	eb42 0303 	adc.w	r3, r2, r3
 800a4c8:	647b      	str	r3, [r7, #68]	; 0x44
 800a4ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a4ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a4d2:	f7f6 fbe1 	bl	8000c98 <__aeabi_uldivmod>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4611      	mov	r1, r2
 800a4dc:	4b3b      	ldr	r3, [pc, #236]	; (800a5cc <UART_SetConfig+0x2d4>)
 800a4de:	fba3 2301 	umull	r2, r3, r3, r1
 800a4e2:	095b      	lsrs	r3, r3, #5
 800a4e4:	2264      	movs	r2, #100	; 0x64
 800a4e6:	fb02 f303 	mul.w	r3, r2, r3
 800a4ea:	1acb      	subs	r3, r1, r3
 800a4ec:	00db      	lsls	r3, r3, #3
 800a4ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a4f2:	4b36      	ldr	r3, [pc, #216]	; (800a5cc <UART_SetConfig+0x2d4>)
 800a4f4:	fba3 2302 	umull	r2, r3, r3, r2
 800a4f8:	095b      	lsrs	r3, r3, #5
 800a4fa:	005b      	lsls	r3, r3, #1
 800a4fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a500:	441c      	add	r4, r3
 800a502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a506:	2200      	movs	r2, #0
 800a508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a50c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a510:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a514:	4642      	mov	r2, r8
 800a516:	464b      	mov	r3, r9
 800a518:	1891      	adds	r1, r2, r2
 800a51a:	63b9      	str	r1, [r7, #56]	; 0x38
 800a51c:	415b      	adcs	r3, r3
 800a51e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a520:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a524:	4641      	mov	r1, r8
 800a526:	1851      	adds	r1, r2, r1
 800a528:	6339      	str	r1, [r7, #48]	; 0x30
 800a52a:	4649      	mov	r1, r9
 800a52c:	414b      	adcs	r3, r1
 800a52e:	637b      	str	r3, [r7, #52]	; 0x34
 800a530:	f04f 0200 	mov.w	r2, #0
 800a534:	f04f 0300 	mov.w	r3, #0
 800a538:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a53c:	4659      	mov	r1, fp
 800a53e:	00cb      	lsls	r3, r1, #3
 800a540:	4651      	mov	r1, sl
 800a542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a546:	4651      	mov	r1, sl
 800a548:	00ca      	lsls	r2, r1, #3
 800a54a:	4610      	mov	r0, r2
 800a54c:	4619      	mov	r1, r3
 800a54e:	4603      	mov	r3, r0
 800a550:	4642      	mov	r2, r8
 800a552:	189b      	adds	r3, r3, r2
 800a554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a558:	464b      	mov	r3, r9
 800a55a:	460a      	mov	r2, r1
 800a55c:	eb42 0303 	adc.w	r3, r2, r3
 800a560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a570:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a574:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a578:	460b      	mov	r3, r1
 800a57a:	18db      	adds	r3, r3, r3
 800a57c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a57e:	4613      	mov	r3, r2
 800a580:	eb42 0303 	adc.w	r3, r2, r3
 800a584:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a586:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a58a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a58e:	f7f6 fb83 	bl	8000c98 <__aeabi_uldivmod>
 800a592:	4602      	mov	r2, r0
 800a594:	460b      	mov	r3, r1
 800a596:	4b0d      	ldr	r3, [pc, #52]	; (800a5cc <UART_SetConfig+0x2d4>)
 800a598:	fba3 1302 	umull	r1, r3, r3, r2
 800a59c:	095b      	lsrs	r3, r3, #5
 800a59e:	2164      	movs	r1, #100	; 0x64
 800a5a0:	fb01 f303 	mul.w	r3, r1, r3
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	00db      	lsls	r3, r3, #3
 800a5a8:	3332      	adds	r3, #50	; 0x32
 800a5aa:	4a08      	ldr	r2, [pc, #32]	; (800a5cc <UART_SetConfig+0x2d4>)
 800a5ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a5b0:	095b      	lsrs	r3, r3, #5
 800a5b2:	f003 0207 	and.w	r2, r3, #7
 800a5b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4422      	add	r2, r4
 800a5be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a5c0:	e105      	b.n	800a7ce <UART_SetConfig+0x4d6>
 800a5c2:	bf00      	nop
 800a5c4:	40011000 	.word	0x40011000
 800a5c8:	40011400 	.word	0x40011400
 800a5cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a5d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a5da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a5de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a5e2:	4642      	mov	r2, r8
 800a5e4:	464b      	mov	r3, r9
 800a5e6:	1891      	adds	r1, r2, r2
 800a5e8:	6239      	str	r1, [r7, #32]
 800a5ea:	415b      	adcs	r3, r3
 800a5ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a5ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a5f2:	4641      	mov	r1, r8
 800a5f4:	1854      	adds	r4, r2, r1
 800a5f6:	4649      	mov	r1, r9
 800a5f8:	eb43 0501 	adc.w	r5, r3, r1
 800a5fc:	f04f 0200 	mov.w	r2, #0
 800a600:	f04f 0300 	mov.w	r3, #0
 800a604:	00eb      	lsls	r3, r5, #3
 800a606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a60a:	00e2      	lsls	r2, r4, #3
 800a60c:	4614      	mov	r4, r2
 800a60e:	461d      	mov	r5, r3
 800a610:	4643      	mov	r3, r8
 800a612:	18e3      	adds	r3, r4, r3
 800a614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a618:	464b      	mov	r3, r9
 800a61a:	eb45 0303 	adc.w	r3, r5, r3
 800a61e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a62e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a632:	f04f 0200 	mov.w	r2, #0
 800a636:	f04f 0300 	mov.w	r3, #0
 800a63a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a63e:	4629      	mov	r1, r5
 800a640:	008b      	lsls	r3, r1, #2
 800a642:	4621      	mov	r1, r4
 800a644:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a648:	4621      	mov	r1, r4
 800a64a:	008a      	lsls	r2, r1, #2
 800a64c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a650:	f7f6 fb22 	bl	8000c98 <__aeabi_uldivmod>
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	4b60      	ldr	r3, [pc, #384]	; (800a7dc <UART_SetConfig+0x4e4>)
 800a65a:	fba3 2302 	umull	r2, r3, r3, r2
 800a65e:	095b      	lsrs	r3, r3, #5
 800a660:	011c      	lsls	r4, r3, #4
 800a662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a666:	2200      	movs	r2, #0
 800a668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a66c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a670:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a674:	4642      	mov	r2, r8
 800a676:	464b      	mov	r3, r9
 800a678:	1891      	adds	r1, r2, r2
 800a67a:	61b9      	str	r1, [r7, #24]
 800a67c:	415b      	adcs	r3, r3
 800a67e:	61fb      	str	r3, [r7, #28]
 800a680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a684:	4641      	mov	r1, r8
 800a686:	1851      	adds	r1, r2, r1
 800a688:	6139      	str	r1, [r7, #16]
 800a68a:	4649      	mov	r1, r9
 800a68c:	414b      	adcs	r3, r1
 800a68e:	617b      	str	r3, [r7, #20]
 800a690:	f04f 0200 	mov.w	r2, #0
 800a694:	f04f 0300 	mov.w	r3, #0
 800a698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a69c:	4659      	mov	r1, fp
 800a69e:	00cb      	lsls	r3, r1, #3
 800a6a0:	4651      	mov	r1, sl
 800a6a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6a6:	4651      	mov	r1, sl
 800a6a8:	00ca      	lsls	r2, r1, #3
 800a6aa:	4610      	mov	r0, r2
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	4642      	mov	r2, r8
 800a6b2:	189b      	adds	r3, r3, r2
 800a6b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a6b8:	464b      	mov	r3, r9
 800a6ba:	460a      	mov	r2, r1
 800a6bc:	eb42 0303 	adc.w	r3, r2, r3
 800a6c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a6c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	67bb      	str	r3, [r7, #120]	; 0x78
 800a6ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a6d0:	f04f 0200 	mov.w	r2, #0
 800a6d4:	f04f 0300 	mov.w	r3, #0
 800a6d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a6dc:	4649      	mov	r1, r9
 800a6de:	008b      	lsls	r3, r1, #2
 800a6e0:	4641      	mov	r1, r8
 800a6e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6e6:	4641      	mov	r1, r8
 800a6e8:	008a      	lsls	r2, r1, #2
 800a6ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a6ee:	f7f6 fad3 	bl	8000c98 <__aeabi_uldivmod>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	4b39      	ldr	r3, [pc, #228]	; (800a7dc <UART_SetConfig+0x4e4>)
 800a6f8:	fba3 1302 	umull	r1, r3, r3, r2
 800a6fc:	095b      	lsrs	r3, r3, #5
 800a6fe:	2164      	movs	r1, #100	; 0x64
 800a700:	fb01 f303 	mul.w	r3, r1, r3
 800a704:	1ad3      	subs	r3, r2, r3
 800a706:	011b      	lsls	r3, r3, #4
 800a708:	3332      	adds	r3, #50	; 0x32
 800a70a:	4a34      	ldr	r2, [pc, #208]	; (800a7dc <UART_SetConfig+0x4e4>)
 800a70c:	fba2 2303 	umull	r2, r3, r2, r3
 800a710:	095b      	lsrs	r3, r3, #5
 800a712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a716:	441c      	add	r4, r3
 800a718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a71c:	2200      	movs	r2, #0
 800a71e:	673b      	str	r3, [r7, #112]	; 0x70
 800a720:	677a      	str	r2, [r7, #116]	; 0x74
 800a722:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a726:	4642      	mov	r2, r8
 800a728:	464b      	mov	r3, r9
 800a72a:	1891      	adds	r1, r2, r2
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	415b      	adcs	r3, r3
 800a730:	60fb      	str	r3, [r7, #12]
 800a732:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a736:	4641      	mov	r1, r8
 800a738:	1851      	adds	r1, r2, r1
 800a73a:	6039      	str	r1, [r7, #0]
 800a73c:	4649      	mov	r1, r9
 800a73e:	414b      	adcs	r3, r1
 800a740:	607b      	str	r3, [r7, #4]
 800a742:	f04f 0200 	mov.w	r2, #0
 800a746:	f04f 0300 	mov.w	r3, #0
 800a74a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a74e:	4659      	mov	r1, fp
 800a750:	00cb      	lsls	r3, r1, #3
 800a752:	4651      	mov	r1, sl
 800a754:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a758:	4651      	mov	r1, sl
 800a75a:	00ca      	lsls	r2, r1, #3
 800a75c:	4610      	mov	r0, r2
 800a75e:	4619      	mov	r1, r3
 800a760:	4603      	mov	r3, r0
 800a762:	4642      	mov	r2, r8
 800a764:	189b      	adds	r3, r3, r2
 800a766:	66bb      	str	r3, [r7, #104]	; 0x68
 800a768:	464b      	mov	r3, r9
 800a76a:	460a      	mov	r2, r1
 800a76c:	eb42 0303 	adc.w	r3, r2, r3
 800a770:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	663b      	str	r3, [r7, #96]	; 0x60
 800a77c:	667a      	str	r2, [r7, #100]	; 0x64
 800a77e:	f04f 0200 	mov.w	r2, #0
 800a782:	f04f 0300 	mov.w	r3, #0
 800a786:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a78a:	4649      	mov	r1, r9
 800a78c:	008b      	lsls	r3, r1, #2
 800a78e:	4641      	mov	r1, r8
 800a790:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a794:	4641      	mov	r1, r8
 800a796:	008a      	lsls	r2, r1, #2
 800a798:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a79c:	f7f6 fa7c 	bl	8000c98 <__aeabi_uldivmod>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <UART_SetConfig+0x4e4>)
 800a7a6:	fba3 1302 	umull	r1, r3, r3, r2
 800a7aa:	095b      	lsrs	r3, r3, #5
 800a7ac:	2164      	movs	r1, #100	; 0x64
 800a7ae:	fb01 f303 	mul.w	r3, r1, r3
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	011b      	lsls	r3, r3, #4
 800a7b6:	3332      	adds	r3, #50	; 0x32
 800a7b8:	4a08      	ldr	r2, [pc, #32]	; (800a7dc <UART_SetConfig+0x4e4>)
 800a7ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a7be:	095b      	lsrs	r3, r3, #5
 800a7c0:	f003 020f 	and.w	r2, r3, #15
 800a7c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4422      	add	r2, r4
 800a7cc:	609a      	str	r2, [r3, #8]
}
 800a7ce:	bf00      	nop
 800a7d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7da:	bf00      	nop
 800a7dc:	51eb851f 	.word	0x51eb851f

0800a7e0 <__errno>:
 800a7e0:	4b01      	ldr	r3, [pc, #4]	; (800a7e8 <__errno+0x8>)
 800a7e2:	6818      	ldr	r0, [r3, #0]
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	20000234 	.word	0x20000234

0800a7ec <__libc_init_array>:
 800a7ec:	b570      	push	{r4, r5, r6, lr}
 800a7ee:	4d0d      	ldr	r5, [pc, #52]	; (800a824 <__libc_init_array+0x38>)
 800a7f0:	4c0d      	ldr	r4, [pc, #52]	; (800a828 <__libc_init_array+0x3c>)
 800a7f2:	1b64      	subs	r4, r4, r5
 800a7f4:	10a4      	asrs	r4, r4, #2
 800a7f6:	2600      	movs	r6, #0
 800a7f8:	42a6      	cmp	r6, r4
 800a7fa:	d109      	bne.n	800a810 <__libc_init_array+0x24>
 800a7fc:	4d0b      	ldr	r5, [pc, #44]	; (800a82c <__libc_init_array+0x40>)
 800a7fe:	4c0c      	ldr	r4, [pc, #48]	; (800a830 <__libc_init_array+0x44>)
 800a800:	f006 fa90 	bl	8010d24 <_init>
 800a804:	1b64      	subs	r4, r4, r5
 800a806:	10a4      	asrs	r4, r4, #2
 800a808:	2600      	movs	r6, #0
 800a80a:	42a6      	cmp	r6, r4
 800a80c:	d105      	bne.n	800a81a <__libc_init_array+0x2e>
 800a80e:	bd70      	pop	{r4, r5, r6, pc}
 800a810:	f855 3b04 	ldr.w	r3, [r5], #4
 800a814:	4798      	blx	r3
 800a816:	3601      	adds	r6, #1
 800a818:	e7ee      	b.n	800a7f8 <__libc_init_array+0xc>
 800a81a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a81e:	4798      	blx	r3
 800a820:	3601      	adds	r6, #1
 800a822:	e7f2      	b.n	800a80a <__libc_init_array+0x1e>
 800a824:	08011450 	.word	0x08011450
 800a828:	08011450 	.word	0x08011450
 800a82c:	08011450 	.word	0x08011450
 800a830:	08011454 	.word	0x08011454

0800a834 <memcpy>:
 800a834:	440a      	add	r2, r1
 800a836:	4291      	cmp	r1, r2
 800a838:	f100 33ff 	add.w	r3, r0, #4294967295
 800a83c:	d100      	bne.n	800a840 <memcpy+0xc>
 800a83e:	4770      	bx	lr
 800a840:	b510      	push	{r4, lr}
 800a842:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a84a:	4291      	cmp	r1, r2
 800a84c:	d1f9      	bne.n	800a842 <memcpy+0xe>
 800a84e:	bd10      	pop	{r4, pc}

0800a850 <memset>:
 800a850:	4402      	add	r2, r0
 800a852:	4603      	mov	r3, r0
 800a854:	4293      	cmp	r3, r2
 800a856:	d100      	bne.n	800a85a <memset+0xa>
 800a858:	4770      	bx	lr
 800a85a:	f803 1b01 	strb.w	r1, [r3], #1
 800a85e:	e7f9      	b.n	800a854 <memset+0x4>

0800a860 <__cvt>:
 800a860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a864:	ec55 4b10 	vmov	r4, r5, d0
 800a868:	2d00      	cmp	r5, #0
 800a86a:	460e      	mov	r6, r1
 800a86c:	4619      	mov	r1, r3
 800a86e:	462b      	mov	r3, r5
 800a870:	bfbb      	ittet	lt
 800a872:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a876:	461d      	movlt	r5, r3
 800a878:	2300      	movge	r3, #0
 800a87a:	232d      	movlt	r3, #45	; 0x2d
 800a87c:	700b      	strb	r3, [r1, #0]
 800a87e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a880:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a884:	4691      	mov	r9, r2
 800a886:	f023 0820 	bic.w	r8, r3, #32
 800a88a:	bfbc      	itt	lt
 800a88c:	4622      	movlt	r2, r4
 800a88e:	4614      	movlt	r4, r2
 800a890:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a894:	d005      	beq.n	800a8a2 <__cvt+0x42>
 800a896:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a89a:	d100      	bne.n	800a89e <__cvt+0x3e>
 800a89c:	3601      	adds	r6, #1
 800a89e:	2102      	movs	r1, #2
 800a8a0:	e000      	b.n	800a8a4 <__cvt+0x44>
 800a8a2:	2103      	movs	r1, #3
 800a8a4:	ab03      	add	r3, sp, #12
 800a8a6:	9301      	str	r3, [sp, #4]
 800a8a8:	ab02      	add	r3, sp, #8
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	ec45 4b10 	vmov	d0, r4, r5
 800a8b0:	4653      	mov	r3, sl
 800a8b2:	4632      	mov	r2, r6
 800a8b4:	f001 fdac 	bl	800c410 <_dtoa_r>
 800a8b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a8bc:	4607      	mov	r7, r0
 800a8be:	d102      	bne.n	800a8c6 <__cvt+0x66>
 800a8c0:	f019 0f01 	tst.w	r9, #1
 800a8c4:	d022      	beq.n	800a90c <__cvt+0xac>
 800a8c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8ca:	eb07 0906 	add.w	r9, r7, r6
 800a8ce:	d110      	bne.n	800a8f2 <__cvt+0x92>
 800a8d0:	783b      	ldrb	r3, [r7, #0]
 800a8d2:	2b30      	cmp	r3, #48	; 0x30
 800a8d4:	d10a      	bne.n	800a8ec <__cvt+0x8c>
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	2300      	movs	r3, #0
 800a8da:	4620      	mov	r0, r4
 800a8dc:	4629      	mov	r1, r5
 800a8de:	f7f6 f8fb 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8e2:	b918      	cbnz	r0, 800a8ec <__cvt+0x8c>
 800a8e4:	f1c6 0601 	rsb	r6, r6, #1
 800a8e8:	f8ca 6000 	str.w	r6, [sl]
 800a8ec:	f8da 3000 	ldr.w	r3, [sl]
 800a8f0:	4499      	add	r9, r3
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	f7f6 f8ed 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8fe:	b108      	cbz	r0, 800a904 <__cvt+0xa4>
 800a900:	f8cd 900c 	str.w	r9, [sp, #12]
 800a904:	2230      	movs	r2, #48	; 0x30
 800a906:	9b03      	ldr	r3, [sp, #12]
 800a908:	454b      	cmp	r3, r9
 800a90a:	d307      	bcc.n	800a91c <__cvt+0xbc>
 800a90c:	9b03      	ldr	r3, [sp, #12]
 800a90e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a910:	1bdb      	subs	r3, r3, r7
 800a912:	4638      	mov	r0, r7
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	b004      	add	sp, #16
 800a918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a91c:	1c59      	adds	r1, r3, #1
 800a91e:	9103      	str	r1, [sp, #12]
 800a920:	701a      	strb	r2, [r3, #0]
 800a922:	e7f0      	b.n	800a906 <__cvt+0xa6>

0800a924 <__exponent>:
 800a924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a926:	4603      	mov	r3, r0
 800a928:	2900      	cmp	r1, #0
 800a92a:	bfb8      	it	lt
 800a92c:	4249      	neglt	r1, r1
 800a92e:	f803 2b02 	strb.w	r2, [r3], #2
 800a932:	bfb4      	ite	lt
 800a934:	222d      	movlt	r2, #45	; 0x2d
 800a936:	222b      	movge	r2, #43	; 0x2b
 800a938:	2909      	cmp	r1, #9
 800a93a:	7042      	strb	r2, [r0, #1]
 800a93c:	dd2a      	ble.n	800a994 <__exponent+0x70>
 800a93e:	f10d 0407 	add.w	r4, sp, #7
 800a942:	46a4      	mov	ip, r4
 800a944:	270a      	movs	r7, #10
 800a946:	46a6      	mov	lr, r4
 800a948:	460a      	mov	r2, r1
 800a94a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a94e:	fb07 1516 	mls	r5, r7, r6, r1
 800a952:	3530      	adds	r5, #48	; 0x30
 800a954:	2a63      	cmp	r2, #99	; 0x63
 800a956:	f104 34ff 	add.w	r4, r4, #4294967295
 800a95a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a95e:	4631      	mov	r1, r6
 800a960:	dcf1      	bgt.n	800a946 <__exponent+0x22>
 800a962:	3130      	adds	r1, #48	; 0x30
 800a964:	f1ae 0502 	sub.w	r5, lr, #2
 800a968:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a96c:	1c44      	adds	r4, r0, #1
 800a96e:	4629      	mov	r1, r5
 800a970:	4561      	cmp	r1, ip
 800a972:	d30a      	bcc.n	800a98a <__exponent+0x66>
 800a974:	f10d 0209 	add.w	r2, sp, #9
 800a978:	eba2 020e 	sub.w	r2, r2, lr
 800a97c:	4565      	cmp	r5, ip
 800a97e:	bf88      	it	hi
 800a980:	2200      	movhi	r2, #0
 800a982:	4413      	add	r3, r2
 800a984:	1a18      	subs	r0, r3, r0
 800a986:	b003      	add	sp, #12
 800a988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a98a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a98e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a992:	e7ed      	b.n	800a970 <__exponent+0x4c>
 800a994:	2330      	movs	r3, #48	; 0x30
 800a996:	3130      	adds	r1, #48	; 0x30
 800a998:	7083      	strb	r3, [r0, #2]
 800a99a:	70c1      	strb	r1, [r0, #3]
 800a99c:	1d03      	adds	r3, r0, #4
 800a99e:	e7f1      	b.n	800a984 <__exponent+0x60>

0800a9a0 <_printf_float>:
 800a9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	ed2d 8b02 	vpush	{d8}
 800a9a8:	b08d      	sub	sp, #52	; 0x34
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a9b0:	4616      	mov	r6, r2
 800a9b2:	461f      	mov	r7, r3
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	f002 fe89 	bl	800d6cc <_localeconv_r>
 800a9ba:	f8d0 a000 	ldr.w	sl, [r0]
 800a9be:	4650      	mov	r0, sl
 800a9c0:	f7f5 fc0e 	bl	80001e0 <strlen>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a9c8:	6823      	ldr	r3, [r4, #0]
 800a9ca:	9305      	str	r3, [sp, #20]
 800a9cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a9d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a9d4:	3307      	adds	r3, #7
 800a9d6:	f023 0307 	bic.w	r3, r3, #7
 800a9da:	f103 0208 	add.w	r2, r3, #8
 800a9de:	f8c8 2000 	str.w	r2, [r8]
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a9ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a9ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9f2:	9307      	str	r3, [sp, #28]
 800a9f4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a9f8:	ee08 0a10 	vmov	s16, r0
 800a9fc:	4b9f      	ldr	r3, [pc, #636]	; (800ac7c <_printf_float+0x2dc>)
 800a9fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa02:	f04f 32ff 	mov.w	r2, #4294967295
 800aa06:	f7f6 f899 	bl	8000b3c <__aeabi_dcmpun>
 800aa0a:	bb88      	cbnz	r0, 800aa70 <_printf_float+0xd0>
 800aa0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa10:	4b9a      	ldr	r3, [pc, #616]	; (800ac7c <_printf_float+0x2dc>)
 800aa12:	f04f 32ff 	mov.w	r2, #4294967295
 800aa16:	f7f6 f873 	bl	8000b00 <__aeabi_dcmple>
 800aa1a:	bb48      	cbnz	r0, 800aa70 <_printf_float+0xd0>
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	2300      	movs	r3, #0
 800aa20:	4640      	mov	r0, r8
 800aa22:	4649      	mov	r1, r9
 800aa24:	f7f6 f862 	bl	8000aec <__aeabi_dcmplt>
 800aa28:	b110      	cbz	r0, 800aa30 <_printf_float+0x90>
 800aa2a:	232d      	movs	r3, #45	; 0x2d
 800aa2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa30:	4b93      	ldr	r3, [pc, #588]	; (800ac80 <_printf_float+0x2e0>)
 800aa32:	4894      	ldr	r0, [pc, #592]	; (800ac84 <_printf_float+0x2e4>)
 800aa34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa38:	bf94      	ite	ls
 800aa3a:	4698      	movls	r8, r3
 800aa3c:	4680      	movhi	r8, r0
 800aa3e:	2303      	movs	r3, #3
 800aa40:	6123      	str	r3, [r4, #16]
 800aa42:	9b05      	ldr	r3, [sp, #20]
 800aa44:	f023 0204 	bic.w	r2, r3, #4
 800aa48:	6022      	str	r2, [r4, #0]
 800aa4a:	f04f 0900 	mov.w	r9, #0
 800aa4e:	9700      	str	r7, [sp, #0]
 800aa50:	4633      	mov	r3, r6
 800aa52:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa54:	4621      	mov	r1, r4
 800aa56:	4628      	mov	r0, r5
 800aa58:	f000 f9d8 	bl	800ae0c <_printf_common>
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	f040 8090 	bne.w	800ab82 <_printf_float+0x1e2>
 800aa62:	f04f 30ff 	mov.w	r0, #4294967295
 800aa66:	b00d      	add	sp, #52	; 0x34
 800aa68:	ecbd 8b02 	vpop	{d8}
 800aa6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa70:	4642      	mov	r2, r8
 800aa72:	464b      	mov	r3, r9
 800aa74:	4640      	mov	r0, r8
 800aa76:	4649      	mov	r1, r9
 800aa78:	f7f6 f860 	bl	8000b3c <__aeabi_dcmpun>
 800aa7c:	b140      	cbz	r0, 800aa90 <_printf_float+0xf0>
 800aa7e:	464b      	mov	r3, r9
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	bfbc      	itt	lt
 800aa84:	232d      	movlt	r3, #45	; 0x2d
 800aa86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aa8a:	487f      	ldr	r0, [pc, #508]	; (800ac88 <_printf_float+0x2e8>)
 800aa8c:	4b7f      	ldr	r3, [pc, #508]	; (800ac8c <_printf_float+0x2ec>)
 800aa8e:	e7d1      	b.n	800aa34 <_printf_float+0x94>
 800aa90:	6863      	ldr	r3, [r4, #4]
 800aa92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aa96:	9206      	str	r2, [sp, #24]
 800aa98:	1c5a      	adds	r2, r3, #1
 800aa9a:	d13f      	bne.n	800ab1c <_printf_float+0x17c>
 800aa9c:	2306      	movs	r3, #6
 800aa9e:	6063      	str	r3, [r4, #4]
 800aaa0:	9b05      	ldr	r3, [sp, #20]
 800aaa2:	6861      	ldr	r1, [r4, #4]
 800aaa4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	9303      	str	r3, [sp, #12]
 800aaac:	ab0a      	add	r3, sp, #40	; 0x28
 800aaae:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aab2:	ab09      	add	r3, sp, #36	; 0x24
 800aab4:	ec49 8b10 	vmov	d0, r8, r9
 800aab8:	9300      	str	r3, [sp, #0]
 800aaba:	6022      	str	r2, [r4, #0]
 800aabc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aac0:	4628      	mov	r0, r5
 800aac2:	f7ff fecd 	bl	800a860 <__cvt>
 800aac6:	9b06      	ldr	r3, [sp, #24]
 800aac8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaca:	2b47      	cmp	r3, #71	; 0x47
 800aacc:	4680      	mov	r8, r0
 800aace:	d108      	bne.n	800aae2 <_printf_float+0x142>
 800aad0:	1cc8      	adds	r0, r1, #3
 800aad2:	db02      	blt.n	800aada <_printf_float+0x13a>
 800aad4:	6863      	ldr	r3, [r4, #4]
 800aad6:	4299      	cmp	r1, r3
 800aad8:	dd41      	ble.n	800ab5e <_printf_float+0x1be>
 800aada:	f1ab 0b02 	sub.w	fp, fp, #2
 800aade:	fa5f fb8b 	uxtb.w	fp, fp
 800aae2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aae6:	d820      	bhi.n	800ab2a <_printf_float+0x18a>
 800aae8:	3901      	subs	r1, #1
 800aaea:	465a      	mov	r2, fp
 800aaec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aaf0:	9109      	str	r1, [sp, #36]	; 0x24
 800aaf2:	f7ff ff17 	bl	800a924 <__exponent>
 800aaf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaf8:	1813      	adds	r3, r2, r0
 800aafa:	2a01      	cmp	r2, #1
 800aafc:	4681      	mov	r9, r0
 800aafe:	6123      	str	r3, [r4, #16]
 800ab00:	dc02      	bgt.n	800ab08 <_printf_float+0x168>
 800ab02:	6822      	ldr	r2, [r4, #0]
 800ab04:	07d2      	lsls	r2, r2, #31
 800ab06:	d501      	bpl.n	800ab0c <_printf_float+0x16c>
 800ab08:	3301      	adds	r3, #1
 800ab0a:	6123      	str	r3, [r4, #16]
 800ab0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d09c      	beq.n	800aa4e <_printf_float+0xae>
 800ab14:	232d      	movs	r3, #45	; 0x2d
 800ab16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab1a:	e798      	b.n	800aa4e <_printf_float+0xae>
 800ab1c:	9a06      	ldr	r2, [sp, #24]
 800ab1e:	2a47      	cmp	r2, #71	; 0x47
 800ab20:	d1be      	bne.n	800aaa0 <_printf_float+0x100>
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1bc      	bne.n	800aaa0 <_printf_float+0x100>
 800ab26:	2301      	movs	r3, #1
 800ab28:	e7b9      	b.n	800aa9e <_printf_float+0xfe>
 800ab2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab2e:	d118      	bne.n	800ab62 <_printf_float+0x1c2>
 800ab30:	2900      	cmp	r1, #0
 800ab32:	6863      	ldr	r3, [r4, #4]
 800ab34:	dd0b      	ble.n	800ab4e <_printf_float+0x1ae>
 800ab36:	6121      	str	r1, [r4, #16]
 800ab38:	b913      	cbnz	r3, 800ab40 <_printf_float+0x1a0>
 800ab3a:	6822      	ldr	r2, [r4, #0]
 800ab3c:	07d0      	lsls	r0, r2, #31
 800ab3e:	d502      	bpl.n	800ab46 <_printf_float+0x1a6>
 800ab40:	3301      	adds	r3, #1
 800ab42:	440b      	add	r3, r1
 800ab44:	6123      	str	r3, [r4, #16]
 800ab46:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab48:	f04f 0900 	mov.w	r9, #0
 800ab4c:	e7de      	b.n	800ab0c <_printf_float+0x16c>
 800ab4e:	b913      	cbnz	r3, 800ab56 <_printf_float+0x1b6>
 800ab50:	6822      	ldr	r2, [r4, #0]
 800ab52:	07d2      	lsls	r2, r2, #31
 800ab54:	d501      	bpl.n	800ab5a <_printf_float+0x1ba>
 800ab56:	3302      	adds	r3, #2
 800ab58:	e7f4      	b.n	800ab44 <_printf_float+0x1a4>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e7f2      	b.n	800ab44 <_printf_float+0x1a4>
 800ab5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ab62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab64:	4299      	cmp	r1, r3
 800ab66:	db05      	blt.n	800ab74 <_printf_float+0x1d4>
 800ab68:	6823      	ldr	r3, [r4, #0]
 800ab6a:	6121      	str	r1, [r4, #16]
 800ab6c:	07d8      	lsls	r0, r3, #31
 800ab6e:	d5ea      	bpl.n	800ab46 <_printf_float+0x1a6>
 800ab70:	1c4b      	adds	r3, r1, #1
 800ab72:	e7e7      	b.n	800ab44 <_printf_float+0x1a4>
 800ab74:	2900      	cmp	r1, #0
 800ab76:	bfd4      	ite	le
 800ab78:	f1c1 0202 	rsble	r2, r1, #2
 800ab7c:	2201      	movgt	r2, #1
 800ab7e:	4413      	add	r3, r2
 800ab80:	e7e0      	b.n	800ab44 <_printf_float+0x1a4>
 800ab82:	6823      	ldr	r3, [r4, #0]
 800ab84:	055a      	lsls	r2, r3, #21
 800ab86:	d407      	bmi.n	800ab98 <_printf_float+0x1f8>
 800ab88:	6923      	ldr	r3, [r4, #16]
 800ab8a:	4642      	mov	r2, r8
 800ab8c:	4631      	mov	r1, r6
 800ab8e:	4628      	mov	r0, r5
 800ab90:	47b8      	blx	r7
 800ab92:	3001      	adds	r0, #1
 800ab94:	d12c      	bne.n	800abf0 <_printf_float+0x250>
 800ab96:	e764      	b.n	800aa62 <_printf_float+0xc2>
 800ab98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab9c:	f240 80e0 	bls.w	800ad60 <_printf_float+0x3c0>
 800aba0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aba4:	2200      	movs	r2, #0
 800aba6:	2300      	movs	r3, #0
 800aba8:	f7f5 ff96 	bl	8000ad8 <__aeabi_dcmpeq>
 800abac:	2800      	cmp	r0, #0
 800abae:	d034      	beq.n	800ac1a <_printf_float+0x27a>
 800abb0:	4a37      	ldr	r2, [pc, #220]	; (800ac90 <_printf_float+0x2f0>)
 800abb2:	2301      	movs	r3, #1
 800abb4:	4631      	mov	r1, r6
 800abb6:	4628      	mov	r0, r5
 800abb8:	47b8      	blx	r7
 800abba:	3001      	adds	r0, #1
 800abbc:	f43f af51 	beq.w	800aa62 <_printf_float+0xc2>
 800abc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abc4:	429a      	cmp	r2, r3
 800abc6:	db02      	blt.n	800abce <_printf_float+0x22e>
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	07d8      	lsls	r0, r3, #31
 800abcc:	d510      	bpl.n	800abf0 <_printf_float+0x250>
 800abce:	ee18 3a10 	vmov	r3, s16
 800abd2:	4652      	mov	r2, sl
 800abd4:	4631      	mov	r1, r6
 800abd6:	4628      	mov	r0, r5
 800abd8:	47b8      	blx	r7
 800abda:	3001      	adds	r0, #1
 800abdc:	f43f af41 	beq.w	800aa62 <_printf_float+0xc2>
 800abe0:	f04f 0800 	mov.w	r8, #0
 800abe4:	f104 091a 	add.w	r9, r4, #26
 800abe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abea:	3b01      	subs	r3, #1
 800abec:	4543      	cmp	r3, r8
 800abee:	dc09      	bgt.n	800ac04 <_printf_float+0x264>
 800abf0:	6823      	ldr	r3, [r4, #0]
 800abf2:	079b      	lsls	r3, r3, #30
 800abf4:	f100 8105 	bmi.w	800ae02 <_printf_float+0x462>
 800abf8:	68e0      	ldr	r0, [r4, #12]
 800abfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abfc:	4298      	cmp	r0, r3
 800abfe:	bfb8      	it	lt
 800ac00:	4618      	movlt	r0, r3
 800ac02:	e730      	b.n	800aa66 <_printf_float+0xc6>
 800ac04:	2301      	movs	r3, #1
 800ac06:	464a      	mov	r2, r9
 800ac08:	4631      	mov	r1, r6
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	47b8      	blx	r7
 800ac0e:	3001      	adds	r0, #1
 800ac10:	f43f af27 	beq.w	800aa62 <_printf_float+0xc2>
 800ac14:	f108 0801 	add.w	r8, r8, #1
 800ac18:	e7e6      	b.n	800abe8 <_printf_float+0x248>
 800ac1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	dc39      	bgt.n	800ac94 <_printf_float+0x2f4>
 800ac20:	4a1b      	ldr	r2, [pc, #108]	; (800ac90 <_printf_float+0x2f0>)
 800ac22:	2301      	movs	r3, #1
 800ac24:	4631      	mov	r1, r6
 800ac26:	4628      	mov	r0, r5
 800ac28:	47b8      	blx	r7
 800ac2a:	3001      	adds	r0, #1
 800ac2c:	f43f af19 	beq.w	800aa62 <_printf_float+0xc2>
 800ac30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac34:	4313      	orrs	r3, r2
 800ac36:	d102      	bne.n	800ac3e <_printf_float+0x29e>
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	07d9      	lsls	r1, r3, #31
 800ac3c:	d5d8      	bpl.n	800abf0 <_printf_float+0x250>
 800ac3e:	ee18 3a10 	vmov	r3, s16
 800ac42:	4652      	mov	r2, sl
 800ac44:	4631      	mov	r1, r6
 800ac46:	4628      	mov	r0, r5
 800ac48:	47b8      	blx	r7
 800ac4a:	3001      	adds	r0, #1
 800ac4c:	f43f af09 	beq.w	800aa62 <_printf_float+0xc2>
 800ac50:	f04f 0900 	mov.w	r9, #0
 800ac54:	f104 0a1a 	add.w	sl, r4, #26
 800ac58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac5a:	425b      	negs	r3, r3
 800ac5c:	454b      	cmp	r3, r9
 800ac5e:	dc01      	bgt.n	800ac64 <_printf_float+0x2c4>
 800ac60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac62:	e792      	b.n	800ab8a <_printf_float+0x1ea>
 800ac64:	2301      	movs	r3, #1
 800ac66:	4652      	mov	r2, sl
 800ac68:	4631      	mov	r1, r6
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	47b8      	blx	r7
 800ac6e:	3001      	adds	r0, #1
 800ac70:	f43f aef7 	beq.w	800aa62 <_printf_float+0xc2>
 800ac74:	f109 0901 	add.w	r9, r9, #1
 800ac78:	e7ee      	b.n	800ac58 <_printf_float+0x2b8>
 800ac7a:	bf00      	nop
 800ac7c:	7fefffff 	.word	0x7fefffff
 800ac80:	08010d80 	.word	0x08010d80
 800ac84:	08010d84 	.word	0x08010d84
 800ac88:	08010d8c 	.word	0x08010d8c
 800ac8c:	08010d88 	.word	0x08010d88
 800ac90:	08010d90 	.word	0x08010d90
 800ac94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	bfa8      	it	ge
 800ac9c:	461a      	movge	r2, r3
 800ac9e:	2a00      	cmp	r2, #0
 800aca0:	4691      	mov	r9, r2
 800aca2:	dc37      	bgt.n	800ad14 <_printf_float+0x374>
 800aca4:	f04f 0b00 	mov.w	fp, #0
 800aca8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acac:	f104 021a 	add.w	r2, r4, #26
 800acb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acb2:	9305      	str	r3, [sp, #20]
 800acb4:	eba3 0309 	sub.w	r3, r3, r9
 800acb8:	455b      	cmp	r3, fp
 800acba:	dc33      	bgt.n	800ad24 <_printf_float+0x384>
 800acbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acc0:	429a      	cmp	r2, r3
 800acc2:	db3b      	blt.n	800ad3c <_printf_float+0x39c>
 800acc4:	6823      	ldr	r3, [r4, #0]
 800acc6:	07da      	lsls	r2, r3, #31
 800acc8:	d438      	bmi.n	800ad3c <_printf_float+0x39c>
 800acca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800accc:	9a05      	ldr	r2, [sp, #20]
 800acce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acd0:	1a9a      	subs	r2, r3, r2
 800acd2:	eba3 0901 	sub.w	r9, r3, r1
 800acd6:	4591      	cmp	r9, r2
 800acd8:	bfa8      	it	ge
 800acda:	4691      	movge	r9, r2
 800acdc:	f1b9 0f00 	cmp.w	r9, #0
 800ace0:	dc35      	bgt.n	800ad4e <_printf_float+0x3ae>
 800ace2:	f04f 0800 	mov.w	r8, #0
 800ace6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acea:	f104 0a1a 	add.w	sl, r4, #26
 800acee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acf2:	1a9b      	subs	r3, r3, r2
 800acf4:	eba3 0309 	sub.w	r3, r3, r9
 800acf8:	4543      	cmp	r3, r8
 800acfa:	f77f af79 	ble.w	800abf0 <_printf_float+0x250>
 800acfe:	2301      	movs	r3, #1
 800ad00:	4652      	mov	r2, sl
 800ad02:	4631      	mov	r1, r6
 800ad04:	4628      	mov	r0, r5
 800ad06:	47b8      	blx	r7
 800ad08:	3001      	adds	r0, #1
 800ad0a:	f43f aeaa 	beq.w	800aa62 <_printf_float+0xc2>
 800ad0e:	f108 0801 	add.w	r8, r8, #1
 800ad12:	e7ec      	b.n	800acee <_printf_float+0x34e>
 800ad14:	4613      	mov	r3, r2
 800ad16:	4631      	mov	r1, r6
 800ad18:	4642      	mov	r2, r8
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	47b8      	blx	r7
 800ad1e:	3001      	adds	r0, #1
 800ad20:	d1c0      	bne.n	800aca4 <_printf_float+0x304>
 800ad22:	e69e      	b.n	800aa62 <_printf_float+0xc2>
 800ad24:	2301      	movs	r3, #1
 800ad26:	4631      	mov	r1, r6
 800ad28:	4628      	mov	r0, r5
 800ad2a:	9205      	str	r2, [sp, #20]
 800ad2c:	47b8      	blx	r7
 800ad2e:	3001      	adds	r0, #1
 800ad30:	f43f ae97 	beq.w	800aa62 <_printf_float+0xc2>
 800ad34:	9a05      	ldr	r2, [sp, #20]
 800ad36:	f10b 0b01 	add.w	fp, fp, #1
 800ad3a:	e7b9      	b.n	800acb0 <_printf_float+0x310>
 800ad3c:	ee18 3a10 	vmov	r3, s16
 800ad40:	4652      	mov	r2, sl
 800ad42:	4631      	mov	r1, r6
 800ad44:	4628      	mov	r0, r5
 800ad46:	47b8      	blx	r7
 800ad48:	3001      	adds	r0, #1
 800ad4a:	d1be      	bne.n	800acca <_printf_float+0x32a>
 800ad4c:	e689      	b.n	800aa62 <_printf_float+0xc2>
 800ad4e:	9a05      	ldr	r2, [sp, #20]
 800ad50:	464b      	mov	r3, r9
 800ad52:	4442      	add	r2, r8
 800ad54:	4631      	mov	r1, r6
 800ad56:	4628      	mov	r0, r5
 800ad58:	47b8      	blx	r7
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	d1c1      	bne.n	800ace2 <_printf_float+0x342>
 800ad5e:	e680      	b.n	800aa62 <_printf_float+0xc2>
 800ad60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad62:	2a01      	cmp	r2, #1
 800ad64:	dc01      	bgt.n	800ad6a <_printf_float+0x3ca>
 800ad66:	07db      	lsls	r3, r3, #31
 800ad68:	d538      	bpl.n	800addc <_printf_float+0x43c>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	4642      	mov	r2, r8
 800ad6e:	4631      	mov	r1, r6
 800ad70:	4628      	mov	r0, r5
 800ad72:	47b8      	blx	r7
 800ad74:	3001      	adds	r0, #1
 800ad76:	f43f ae74 	beq.w	800aa62 <_printf_float+0xc2>
 800ad7a:	ee18 3a10 	vmov	r3, s16
 800ad7e:	4652      	mov	r2, sl
 800ad80:	4631      	mov	r1, r6
 800ad82:	4628      	mov	r0, r5
 800ad84:	47b8      	blx	r7
 800ad86:	3001      	adds	r0, #1
 800ad88:	f43f ae6b 	beq.w	800aa62 <_printf_float+0xc2>
 800ad8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad90:	2200      	movs	r2, #0
 800ad92:	2300      	movs	r3, #0
 800ad94:	f7f5 fea0 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad98:	b9d8      	cbnz	r0, 800add2 <_printf_float+0x432>
 800ad9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad9c:	f108 0201 	add.w	r2, r8, #1
 800ada0:	3b01      	subs	r3, #1
 800ada2:	4631      	mov	r1, r6
 800ada4:	4628      	mov	r0, r5
 800ada6:	47b8      	blx	r7
 800ada8:	3001      	adds	r0, #1
 800adaa:	d10e      	bne.n	800adca <_printf_float+0x42a>
 800adac:	e659      	b.n	800aa62 <_printf_float+0xc2>
 800adae:	2301      	movs	r3, #1
 800adb0:	4652      	mov	r2, sl
 800adb2:	4631      	mov	r1, r6
 800adb4:	4628      	mov	r0, r5
 800adb6:	47b8      	blx	r7
 800adb8:	3001      	adds	r0, #1
 800adba:	f43f ae52 	beq.w	800aa62 <_printf_float+0xc2>
 800adbe:	f108 0801 	add.w	r8, r8, #1
 800adc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adc4:	3b01      	subs	r3, #1
 800adc6:	4543      	cmp	r3, r8
 800adc8:	dcf1      	bgt.n	800adae <_printf_float+0x40e>
 800adca:	464b      	mov	r3, r9
 800adcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800add0:	e6dc      	b.n	800ab8c <_printf_float+0x1ec>
 800add2:	f04f 0800 	mov.w	r8, #0
 800add6:	f104 0a1a 	add.w	sl, r4, #26
 800adda:	e7f2      	b.n	800adc2 <_printf_float+0x422>
 800addc:	2301      	movs	r3, #1
 800adde:	4642      	mov	r2, r8
 800ade0:	e7df      	b.n	800ada2 <_printf_float+0x402>
 800ade2:	2301      	movs	r3, #1
 800ade4:	464a      	mov	r2, r9
 800ade6:	4631      	mov	r1, r6
 800ade8:	4628      	mov	r0, r5
 800adea:	47b8      	blx	r7
 800adec:	3001      	adds	r0, #1
 800adee:	f43f ae38 	beq.w	800aa62 <_printf_float+0xc2>
 800adf2:	f108 0801 	add.w	r8, r8, #1
 800adf6:	68e3      	ldr	r3, [r4, #12]
 800adf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adfa:	1a5b      	subs	r3, r3, r1
 800adfc:	4543      	cmp	r3, r8
 800adfe:	dcf0      	bgt.n	800ade2 <_printf_float+0x442>
 800ae00:	e6fa      	b.n	800abf8 <_printf_float+0x258>
 800ae02:	f04f 0800 	mov.w	r8, #0
 800ae06:	f104 0919 	add.w	r9, r4, #25
 800ae0a:	e7f4      	b.n	800adf6 <_printf_float+0x456>

0800ae0c <_printf_common>:
 800ae0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae10:	4616      	mov	r6, r2
 800ae12:	4699      	mov	r9, r3
 800ae14:	688a      	ldr	r2, [r1, #8]
 800ae16:	690b      	ldr	r3, [r1, #16]
 800ae18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	bfb8      	it	lt
 800ae20:	4613      	movlt	r3, r2
 800ae22:	6033      	str	r3, [r6, #0]
 800ae24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae28:	4607      	mov	r7, r0
 800ae2a:	460c      	mov	r4, r1
 800ae2c:	b10a      	cbz	r2, 800ae32 <_printf_common+0x26>
 800ae2e:	3301      	adds	r3, #1
 800ae30:	6033      	str	r3, [r6, #0]
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	0699      	lsls	r1, r3, #26
 800ae36:	bf42      	ittt	mi
 800ae38:	6833      	ldrmi	r3, [r6, #0]
 800ae3a:	3302      	addmi	r3, #2
 800ae3c:	6033      	strmi	r3, [r6, #0]
 800ae3e:	6825      	ldr	r5, [r4, #0]
 800ae40:	f015 0506 	ands.w	r5, r5, #6
 800ae44:	d106      	bne.n	800ae54 <_printf_common+0x48>
 800ae46:	f104 0a19 	add.w	sl, r4, #25
 800ae4a:	68e3      	ldr	r3, [r4, #12]
 800ae4c:	6832      	ldr	r2, [r6, #0]
 800ae4e:	1a9b      	subs	r3, r3, r2
 800ae50:	42ab      	cmp	r3, r5
 800ae52:	dc26      	bgt.n	800aea2 <_printf_common+0x96>
 800ae54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae58:	1e13      	subs	r3, r2, #0
 800ae5a:	6822      	ldr	r2, [r4, #0]
 800ae5c:	bf18      	it	ne
 800ae5e:	2301      	movne	r3, #1
 800ae60:	0692      	lsls	r2, r2, #26
 800ae62:	d42b      	bmi.n	800aebc <_printf_common+0xb0>
 800ae64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae68:	4649      	mov	r1, r9
 800ae6a:	4638      	mov	r0, r7
 800ae6c:	47c0      	blx	r8
 800ae6e:	3001      	adds	r0, #1
 800ae70:	d01e      	beq.n	800aeb0 <_printf_common+0xa4>
 800ae72:	6823      	ldr	r3, [r4, #0]
 800ae74:	68e5      	ldr	r5, [r4, #12]
 800ae76:	6832      	ldr	r2, [r6, #0]
 800ae78:	f003 0306 	and.w	r3, r3, #6
 800ae7c:	2b04      	cmp	r3, #4
 800ae7e:	bf08      	it	eq
 800ae80:	1aad      	subeq	r5, r5, r2
 800ae82:	68a3      	ldr	r3, [r4, #8]
 800ae84:	6922      	ldr	r2, [r4, #16]
 800ae86:	bf0c      	ite	eq
 800ae88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae8c:	2500      	movne	r5, #0
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	bfc4      	itt	gt
 800ae92:	1a9b      	subgt	r3, r3, r2
 800ae94:	18ed      	addgt	r5, r5, r3
 800ae96:	2600      	movs	r6, #0
 800ae98:	341a      	adds	r4, #26
 800ae9a:	42b5      	cmp	r5, r6
 800ae9c:	d11a      	bne.n	800aed4 <_printf_common+0xc8>
 800ae9e:	2000      	movs	r0, #0
 800aea0:	e008      	b.n	800aeb4 <_printf_common+0xa8>
 800aea2:	2301      	movs	r3, #1
 800aea4:	4652      	mov	r2, sl
 800aea6:	4649      	mov	r1, r9
 800aea8:	4638      	mov	r0, r7
 800aeaa:	47c0      	blx	r8
 800aeac:	3001      	adds	r0, #1
 800aeae:	d103      	bne.n	800aeb8 <_printf_common+0xac>
 800aeb0:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb8:	3501      	adds	r5, #1
 800aeba:	e7c6      	b.n	800ae4a <_printf_common+0x3e>
 800aebc:	18e1      	adds	r1, r4, r3
 800aebe:	1c5a      	adds	r2, r3, #1
 800aec0:	2030      	movs	r0, #48	; 0x30
 800aec2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aec6:	4422      	add	r2, r4
 800aec8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aecc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aed0:	3302      	adds	r3, #2
 800aed2:	e7c7      	b.n	800ae64 <_printf_common+0x58>
 800aed4:	2301      	movs	r3, #1
 800aed6:	4622      	mov	r2, r4
 800aed8:	4649      	mov	r1, r9
 800aeda:	4638      	mov	r0, r7
 800aedc:	47c0      	blx	r8
 800aede:	3001      	adds	r0, #1
 800aee0:	d0e6      	beq.n	800aeb0 <_printf_common+0xa4>
 800aee2:	3601      	adds	r6, #1
 800aee4:	e7d9      	b.n	800ae9a <_printf_common+0x8e>
	...

0800aee8 <_printf_i>:
 800aee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aeec:	7e0f      	ldrb	r7, [r1, #24]
 800aeee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aef0:	2f78      	cmp	r7, #120	; 0x78
 800aef2:	4691      	mov	r9, r2
 800aef4:	4680      	mov	r8, r0
 800aef6:	460c      	mov	r4, r1
 800aef8:	469a      	mov	sl, r3
 800aefa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aefe:	d807      	bhi.n	800af10 <_printf_i+0x28>
 800af00:	2f62      	cmp	r7, #98	; 0x62
 800af02:	d80a      	bhi.n	800af1a <_printf_i+0x32>
 800af04:	2f00      	cmp	r7, #0
 800af06:	f000 80d8 	beq.w	800b0ba <_printf_i+0x1d2>
 800af0a:	2f58      	cmp	r7, #88	; 0x58
 800af0c:	f000 80a3 	beq.w	800b056 <_printf_i+0x16e>
 800af10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af18:	e03a      	b.n	800af90 <_printf_i+0xa8>
 800af1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af1e:	2b15      	cmp	r3, #21
 800af20:	d8f6      	bhi.n	800af10 <_printf_i+0x28>
 800af22:	a101      	add	r1, pc, #4	; (adr r1, 800af28 <_printf_i+0x40>)
 800af24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af28:	0800af81 	.word	0x0800af81
 800af2c:	0800af95 	.word	0x0800af95
 800af30:	0800af11 	.word	0x0800af11
 800af34:	0800af11 	.word	0x0800af11
 800af38:	0800af11 	.word	0x0800af11
 800af3c:	0800af11 	.word	0x0800af11
 800af40:	0800af95 	.word	0x0800af95
 800af44:	0800af11 	.word	0x0800af11
 800af48:	0800af11 	.word	0x0800af11
 800af4c:	0800af11 	.word	0x0800af11
 800af50:	0800af11 	.word	0x0800af11
 800af54:	0800b0a1 	.word	0x0800b0a1
 800af58:	0800afc5 	.word	0x0800afc5
 800af5c:	0800b083 	.word	0x0800b083
 800af60:	0800af11 	.word	0x0800af11
 800af64:	0800af11 	.word	0x0800af11
 800af68:	0800b0c3 	.word	0x0800b0c3
 800af6c:	0800af11 	.word	0x0800af11
 800af70:	0800afc5 	.word	0x0800afc5
 800af74:	0800af11 	.word	0x0800af11
 800af78:	0800af11 	.word	0x0800af11
 800af7c:	0800b08b 	.word	0x0800b08b
 800af80:	682b      	ldr	r3, [r5, #0]
 800af82:	1d1a      	adds	r2, r3, #4
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	602a      	str	r2, [r5, #0]
 800af88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af90:	2301      	movs	r3, #1
 800af92:	e0a3      	b.n	800b0dc <_printf_i+0x1f4>
 800af94:	6820      	ldr	r0, [r4, #0]
 800af96:	6829      	ldr	r1, [r5, #0]
 800af98:	0606      	lsls	r6, r0, #24
 800af9a:	f101 0304 	add.w	r3, r1, #4
 800af9e:	d50a      	bpl.n	800afb6 <_printf_i+0xce>
 800afa0:	680e      	ldr	r6, [r1, #0]
 800afa2:	602b      	str	r3, [r5, #0]
 800afa4:	2e00      	cmp	r6, #0
 800afa6:	da03      	bge.n	800afb0 <_printf_i+0xc8>
 800afa8:	232d      	movs	r3, #45	; 0x2d
 800afaa:	4276      	negs	r6, r6
 800afac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afb0:	485e      	ldr	r0, [pc, #376]	; (800b12c <_printf_i+0x244>)
 800afb2:	230a      	movs	r3, #10
 800afb4:	e019      	b.n	800afea <_printf_i+0x102>
 800afb6:	680e      	ldr	r6, [r1, #0]
 800afb8:	602b      	str	r3, [r5, #0]
 800afba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800afbe:	bf18      	it	ne
 800afc0:	b236      	sxthne	r6, r6
 800afc2:	e7ef      	b.n	800afa4 <_printf_i+0xbc>
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	6820      	ldr	r0, [r4, #0]
 800afc8:	1d19      	adds	r1, r3, #4
 800afca:	6029      	str	r1, [r5, #0]
 800afcc:	0601      	lsls	r1, r0, #24
 800afce:	d501      	bpl.n	800afd4 <_printf_i+0xec>
 800afd0:	681e      	ldr	r6, [r3, #0]
 800afd2:	e002      	b.n	800afda <_printf_i+0xf2>
 800afd4:	0646      	lsls	r6, r0, #25
 800afd6:	d5fb      	bpl.n	800afd0 <_printf_i+0xe8>
 800afd8:	881e      	ldrh	r6, [r3, #0]
 800afda:	4854      	ldr	r0, [pc, #336]	; (800b12c <_printf_i+0x244>)
 800afdc:	2f6f      	cmp	r7, #111	; 0x6f
 800afde:	bf0c      	ite	eq
 800afe0:	2308      	moveq	r3, #8
 800afe2:	230a      	movne	r3, #10
 800afe4:	2100      	movs	r1, #0
 800afe6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800afea:	6865      	ldr	r5, [r4, #4]
 800afec:	60a5      	str	r5, [r4, #8]
 800afee:	2d00      	cmp	r5, #0
 800aff0:	bfa2      	ittt	ge
 800aff2:	6821      	ldrge	r1, [r4, #0]
 800aff4:	f021 0104 	bicge.w	r1, r1, #4
 800aff8:	6021      	strge	r1, [r4, #0]
 800affa:	b90e      	cbnz	r6, 800b000 <_printf_i+0x118>
 800affc:	2d00      	cmp	r5, #0
 800affe:	d04d      	beq.n	800b09c <_printf_i+0x1b4>
 800b000:	4615      	mov	r5, r2
 800b002:	fbb6 f1f3 	udiv	r1, r6, r3
 800b006:	fb03 6711 	mls	r7, r3, r1, r6
 800b00a:	5dc7      	ldrb	r7, [r0, r7]
 800b00c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b010:	4637      	mov	r7, r6
 800b012:	42bb      	cmp	r3, r7
 800b014:	460e      	mov	r6, r1
 800b016:	d9f4      	bls.n	800b002 <_printf_i+0x11a>
 800b018:	2b08      	cmp	r3, #8
 800b01a:	d10b      	bne.n	800b034 <_printf_i+0x14c>
 800b01c:	6823      	ldr	r3, [r4, #0]
 800b01e:	07de      	lsls	r6, r3, #31
 800b020:	d508      	bpl.n	800b034 <_printf_i+0x14c>
 800b022:	6923      	ldr	r3, [r4, #16]
 800b024:	6861      	ldr	r1, [r4, #4]
 800b026:	4299      	cmp	r1, r3
 800b028:	bfde      	ittt	le
 800b02a:	2330      	movle	r3, #48	; 0x30
 800b02c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b030:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b034:	1b52      	subs	r2, r2, r5
 800b036:	6122      	str	r2, [r4, #16]
 800b038:	f8cd a000 	str.w	sl, [sp]
 800b03c:	464b      	mov	r3, r9
 800b03e:	aa03      	add	r2, sp, #12
 800b040:	4621      	mov	r1, r4
 800b042:	4640      	mov	r0, r8
 800b044:	f7ff fee2 	bl	800ae0c <_printf_common>
 800b048:	3001      	adds	r0, #1
 800b04a:	d14c      	bne.n	800b0e6 <_printf_i+0x1fe>
 800b04c:	f04f 30ff 	mov.w	r0, #4294967295
 800b050:	b004      	add	sp, #16
 800b052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b056:	4835      	ldr	r0, [pc, #212]	; (800b12c <_printf_i+0x244>)
 800b058:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b05c:	6829      	ldr	r1, [r5, #0]
 800b05e:	6823      	ldr	r3, [r4, #0]
 800b060:	f851 6b04 	ldr.w	r6, [r1], #4
 800b064:	6029      	str	r1, [r5, #0]
 800b066:	061d      	lsls	r5, r3, #24
 800b068:	d514      	bpl.n	800b094 <_printf_i+0x1ac>
 800b06a:	07df      	lsls	r7, r3, #31
 800b06c:	bf44      	itt	mi
 800b06e:	f043 0320 	orrmi.w	r3, r3, #32
 800b072:	6023      	strmi	r3, [r4, #0]
 800b074:	b91e      	cbnz	r6, 800b07e <_printf_i+0x196>
 800b076:	6823      	ldr	r3, [r4, #0]
 800b078:	f023 0320 	bic.w	r3, r3, #32
 800b07c:	6023      	str	r3, [r4, #0]
 800b07e:	2310      	movs	r3, #16
 800b080:	e7b0      	b.n	800afe4 <_printf_i+0xfc>
 800b082:	6823      	ldr	r3, [r4, #0]
 800b084:	f043 0320 	orr.w	r3, r3, #32
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	2378      	movs	r3, #120	; 0x78
 800b08c:	4828      	ldr	r0, [pc, #160]	; (800b130 <_printf_i+0x248>)
 800b08e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b092:	e7e3      	b.n	800b05c <_printf_i+0x174>
 800b094:	0659      	lsls	r1, r3, #25
 800b096:	bf48      	it	mi
 800b098:	b2b6      	uxthmi	r6, r6
 800b09a:	e7e6      	b.n	800b06a <_printf_i+0x182>
 800b09c:	4615      	mov	r5, r2
 800b09e:	e7bb      	b.n	800b018 <_printf_i+0x130>
 800b0a0:	682b      	ldr	r3, [r5, #0]
 800b0a2:	6826      	ldr	r6, [r4, #0]
 800b0a4:	6961      	ldr	r1, [r4, #20]
 800b0a6:	1d18      	adds	r0, r3, #4
 800b0a8:	6028      	str	r0, [r5, #0]
 800b0aa:	0635      	lsls	r5, r6, #24
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	d501      	bpl.n	800b0b4 <_printf_i+0x1cc>
 800b0b0:	6019      	str	r1, [r3, #0]
 800b0b2:	e002      	b.n	800b0ba <_printf_i+0x1d2>
 800b0b4:	0670      	lsls	r0, r6, #25
 800b0b6:	d5fb      	bpl.n	800b0b0 <_printf_i+0x1c8>
 800b0b8:	8019      	strh	r1, [r3, #0]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	6123      	str	r3, [r4, #16]
 800b0be:	4615      	mov	r5, r2
 800b0c0:	e7ba      	b.n	800b038 <_printf_i+0x150>
 800b0c2:	682b      	ldr	r3, [r5, #0]
 800b0c4:	1d1a      	adds	r2, r3, #4
 800b0c6:	602a      	str	r2, [r5, #0]
 800b0c8:	681d      	ldr	r5, [r3, #0]
 800b0ca:	6862      	ldr	r2, [r4, #4]
 800b0cc:	2100      	movs	r1, #0
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	f7f5 f88e 	bl	80001f0 <memchr>
 800b0d4:	b108      	cbz	r0, 800b0da <_printf_i+0x1f2>
 800b0d6:	1b40      	subs	r0, r0, r5
 800b0d8:	6060      	str	r0, [r4, #4]
 800b0da:	6863      	ldr	r3, [r4, #4]
 800b0dc:	6123      	str	r3, [r4, #16]
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0e4:	e7a8      	b.n	800b038 <_printf_i+0x150>
 800b0e6:	6923      	ldr	r3, [r4, #16]
 800b0e8:	462a      	mov	r2, r5
 800b0ea:	4649      	mov	r1, r9
 800b0ec:	4640      	mov	r0, r8
 800b0ee:	47d0      	blx	sl
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d0ab      	beq.n	800b04c <_printf_i+0x164>
 800b0f4:	6823      	ldr	r3, [r4, #0]
 800b0f6:	079b      	lsls	r3, r3, #30
 800b0f8:	d413      	bmi.n	800b122 <_printf_i+0x23a>
 800b0fa:	68e0      	ldr	r0, [r4, #12]
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	4298      	cmp	r0, r3
 800b100:	bfb8      	it	lt
 800b102:	4618      	movlt	r0, r3
 800b104:	e7a4      	b.n	800b050 <_printf_i+0x168>
 800b106:	2301      	movs	r3, #1
 800b108:	4632      	mov	r2, r6
 800b10a:	4649      	mov	r1, r9
 800b10c:	4640      	mov	r0, r8
 800b10e:	47d0      	blx	sl
 800b110:	3001      	adds	r0, #1
 800b112:	d09b      	beq.n	800b04c <_printf_i+0x164>
 800b114:	3501      	adds	r5, #1
 800b116:	68e3      	ldr	r3, [r4, #12]
 800b118:	9903      	ldr	r1, [sp, #12]
 800b11a:	1a5b      	subs	r3, r3, r1
 800b11c:	42ab      	cmp	r3, r5
 800b11e:	dcf2      	bgt.n	800b106 <_printf_i+0x21e>
 800b120:	e7eb      	b.n	800b0fa <_printf_i+0x212>
 800b122:	2500      	movs	r5, #0
 800b124:	f104 0619 	add.w	r6, r4, #25
 800b128:	e7f5      	b.n	800b116 <_printf_i+0x22e>
 800b12a:	bf00      	nop
 800b12c:	08010d92 	.word	0x08010d92
 800b130:	08010da3 	.word	0x08010da3

0800b134 <_scanf_float>:
 800b134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b138:	b087      	sub	sp, #28
 800b13a:	4617      	mov	r7, r2
 800b13c:	9303      	str	r3, [sp, #12]
 800b13e:	688b      	ldr	r3, [r1, #8]
 800b140:	1e5a      	subs	r2, r3, #1
 800b142:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b146:	bf83      	ittte	hi
 800b148:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b14c:	195b      	addhi	r3, r3, r5
 800b14e:	9302      	strhi	r3, [sp, #8]
 800b150:	2300      	movls	r3, #0
 800b152:	bf86      	itte	hi
 800b154:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b158:	608b      	strhi	r3, [r1, #8]
 800b15a:	9302      	strls	r3, [sp, #8]
 800b15c:	680b      	ldr	r3, [r1, #0]
 800b15e:	468b      	mov	fp, r1
 800b160:	2500      	movs	r5, #0
 800b162:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b166:	f84b 3b1c 	str.w	r3, [fp], #28
 800b16a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b16e:	4680      	mov	r8, r0
 800b170:	460c      	mov	r4, r1
 800b172:	465e      	mov	r6, fp
 800b174:	46aa      	mov	sl, r5
 800b176:	46a9      	mov	r9, r5
 800b178:	9501      	str	r5, [sp, #4]
 800b17a:	68a2      	ldr	r2, [r4, #8]
 800b17c:	b152      	cbz	r2, 800b194 <_scanf_float+0x60>
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	2b4e      	cmp	r3, #78	; 0x4e
 800b184:	d864      	bhi.n	800b250 <_scanf_float+0x11c>
 800b186:	2b40      	cmp	r3, #64	; 0x40
 800b188:	d83c      	bhi.n	800b204 <_scanf_float+0xd0>
 800b18a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b18e:	b2c8      	uxtb	r0, r1
 800b190:	280e      	cmp	r0, #14
 800b192:	d93a      	bls.n	800b20a <_scanf_float+0xd6>
 800b194:	f1b9 0f00 	cmp.w	r9, #0
 800b198:	d003      	beq.n	800b1a2 <_scanf_float+0x6e>
 800b19a:	6823      	ldr	r3, [r4, #0]
 800b19c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1a0:	6023      	str	r3, [r4, #0]
 800b1a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1a6:	f1ba 0f01 	cmp.w	sl, #1
 800b1aa:	f200 8113 	bhi.w	800b3d4 <_scanf_float+0x2a0>
 800b1ae:	455e      	cmp	r6, fp
 800b1b0:	f200 8105 	bhi.w	800b3be <_scanf_float+0x28a>
 800b1b4:	2501      	movs	r5, #1
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	b007      	add	sp, #28
 800b1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b1c2:	2a0d      	cmp	r2, #13
 800b1c4:	d8e6      	bhi.n	800b194 <_scanf_float+0x60>
 800b1c6:	a101      	add	r1, pc, #4	; (adr r1, 800b1cc <_scanf_float+0x98>)
 800b1c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b1cc:	0800b30b 	.word	0x0800b30b
 800b1d0:	0800b195 	.word	0x0800b195
 800b1d4:	0800b195 	.word	0x0800b195
 800b1d8:	0800b195 	.word	0x0800b195
 800b1dc:	0800b36b 	.word	0x0800b36b
 800b1e0:	0800b343 	.word	0x0800b343
 800b1e4:	0800b195 	.word	0x0800b195
 800b1e8:	0800b195 	.word	0x0800b195
 800b1ec:	0800b319 	.word	0x0800b319
 800b1f0:	0800b195 	.word	0x0800b195
 800b1f4:	0800b195 	.word	0x0800b195
 800b1f8:	0800b195 	.word	0x0800b195
 800b1fc:	0800b195 	.word	0x0800b195
 800b200:	0800b2d1 	.word	0x0800b2d1
 800b204:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b208:	e7db      	b.n	800b1c2 <_scanf_float+0x8e>
 800b20a:	290e      	cmp	r1, #14
 800b20c:	d8c2      	bhi.n	800b194 <_scanf_float+0x60>
 800b20e:	a001      	add	r0, pc, #4	; (adr r0, 800b214 <_scanf_float+0xe0>)
 800b210:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b214:	0800b2c3 	.word	0x0800b2c3
 800b218:	0800b195 	.word	0x0800b195
 800b21c:	0800b2c3 	.word	0x0800b2c3
 800b220:	0800b357 	.word	0x0800b357
 800b224:	0800b195 	.word	0x0800b195
 800b228:	0800b271 	.word	0x0800b271
 800b22c:	0800b2ad 	.word	0x0800b2ad
 800b230:	0800b2ad 	.word	0x0800b2ad
 800b234:	0800b2ad 	.word	0x0800b2ad
 800b238:	0800b2ad 	.word	0x0800b2ad
 800b23c:	0800b2ad 	.word	0x0800b2ad
 800b240:	0800b2ad 	.word	0x0800b2ad
 800b244:	0800b2ad 	.word	0x0800b2ad
 800b248:	0800b2ad 	.word	0x0800b2ad
 800b24c:	0800b2ad 	.word	0x0800b2ad
 800b250:	2b6e      	cmp	r3, #110	; 0x6e
 800b252:	d809      	bhi.n	800b268 <_scanf_float+0x134>
 800b254:	2b60      	cmp	r3, #96	; 0x60
 800b256:	d8b2      	bhi.n	800b1be <_scanf_float+0x8a>
 800b258:	2b54      	cmp	r3, #84	; 0x54
 800b25a:	d077      	beq.n	800b34c <_scanf_float+0x218>
 800b25c:	2b59      	cmp	r3, #89	; 0x59
 800b25e:	d199      	bne.n	800b194 <_scanf_float+0x60>
 800b260:	2d07      	cmp	r5, #7
 800b262:	d197      	bne.n	800b194 <_scanf_float+0x60>
 800b264:	2508      	movs	r5, #8
 800b266:	e029      	b.n	800b2bc <_scanf_float+0x188>
 800b268:	2b74      	cmp	r3, #116	; 0x74
 800b26a:	d06f      	beq.n	800b34c <_scanf_float+0x218>
 800b26c:	2b79      	cmp	r3, #121	; 0x79
 800b26e:	e7f6      	b.n	800b25e <_scanf_float+0x12a>
 800b270:	6821      	ldr	r1, [r4, #0]
 800b272:	05c8      	lsls	r0, r1, #23
 800b274:	d51a      	bpl.n	800b2ac <_scanf_float+0x178>
 800b276:	9b02      	ldr	r3, [sp, #8]
 800b278:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b27c:	6021      	str	r1, [r4, #0]
 800b27e:	f109 0901 	add.w	r9, r9, #1
 800b282:	b11b      	cbz	r3, 800b28c <_scanf_float+0x158>
 800b284:	3b01      	subs	r3, #1
 800b286:	3201      	adds	r2, #1
 800b288:	9302      	str	r3, [sp, #8]
 800b28a:	60a2      	str	r2, [r4, #8]
 800b28c:	68a3      	ldr	r3, [r4, #8]
 800b28e:	3b01      	subs	r3, #1
 800b290:	60a3      	str	r3, [r4, #8]
 800b292:	6923      	ldr	r3, [r4, #16]
 800b294:	3301      	adds	r3, #1
 800b296:	6123      	str	r3, [r4, #16]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	3b01      	subs	r3, #1
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	607b      	str	r3, [r7, #4]
 800b2a0:	f340 8084 	ble.w	800b3ac <_scanf_float+0x278>
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	603b      	str	r3, [r7, #0]
 800b2aa:	e766      	b.n	800b17a <_scanf_float+0x46>
 800b2ac:	eb1a 0f05 	cmn.w	sl, r5
 800b2b0:	f47f af70 	bne.w	800b194 <_scanf_float+0x60>
 800b2b4:	6822      	ldr	r2, [r4, #0]
 800b2b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b2ba:	6022      	str	r2, [r4, #0]
 800b2bc:	f806 3b01 	strb.w	r3, [r6], #1
 800b2c0:	e7e4      	b.n	800b28c <_scanf_float+0x158>
 800b2c2:	6822      	ldr	r2, [r4, #0]
 800b2c4:	0610      	lsls	r0, r2, #24
 800b2c6:	f57f af65 	bpl.w	800b194 <_scanf_float+0x60>
 800b2ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b2ce:	e7f4      	b.n	800b2ba <_scanf_float+0x186>
 800b2d0:	f1ba 0f00 	cmp.w	sl, #0
 800b2d4:	d10e      	bne.n	800b2f4 <_scanf_float+0x1c0>
 800b2d6:	f1b9 0f00 	cmp.w	r9, #0
 800b2da:	d10e      	bne.n	800b2fa <_scanf_float+0x1c6>
 800b2dc:	6822      	ldr	r2, [r4, #0]
 800b2de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b2e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b2e6:	d108      	bne.n	800b2fa <_scanf_float+0x1c6>
 800b2e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b2ec:	6022      	str	r2, [r4, #0]
 800b2ee:	f04f 0a01 	mov.w	sl, #1
 800b2f2:	e7e3      	b.n	800b2bc <_scanf_float+0x188>
 800b2f4:	f1ba 0f02 	cmp.w	sl, #2
 800b2f8:	d055      	beq.n	800b3a6 <_scanf_float+0x272>
 800b2fa:	2d01      	cmp	r5, #1
 800b2fc:	d002      	beq.n	800b304 <_scanf_float+0x1d0>
 800b2fe:	2d04      	cmp	r5, #4
 800b300:	f47f af48 	bne.w	800b194 <_scanf_float+0x60>
 800b304:	3501      	adds	r5, #1
 800b306:	b2ed      	uxtb	r5, r5
 800b308:	e7d8      	b.n	800b2bc <_scanf_float+0x188>
 800b30a:	f1ba 0f01 	cmp.w	sl, #1
 800b30e:	f47f af41 	bne.w	800b194 <_scanf_float+0x60>
 800b312:	f04f 0a02 	mov.w	sl, #2
 800b316:	e7d1      	b.n	800b2bc <_scanf_float+0x188>
 800b318:	b97d      	cbnz	r5, 800b33a <_scanf_float+0x206>
 800b31a:	f1b9 0f00 	cmp.w	r9, #0
 800b31e:	f47f af3c 	bne.w	800b19a <_scanf_float+0x66>
 800b322:	6822      	ldr	r2, [r4, #0]
 800b324:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b328:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b32c:	f47f af39 	bne.w	800b1a2 <_scanf_float+0x6e>
 800b330:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b334:	6022      	str	r2, [r4, #0]
 800b336:	2501      	movs	r5, #1
 800b338:	e7c0      	b.n	800b2bc <_scanf_float+0x188>
 800b33a:	2d03      	cmp	r5, #3
 800b33c:	d0e2      	beq.n	800b304 <_scanf_float+0x1d0>
 800b33e:	2d05      	cmp	r5, #5
 800b340:	e7de      	b.n	800b300 <_scanf_float+0x1cc>
 800b342:	2d02      	cmp	r5, #2
 800b344:	f47f af26 	bne.w	800b194 <_scanf_float+0x60>
 800b348:	2503      	movs	r5, #3
 800b34a:	e7b7      	b.n	800b2bc <_scanf_float+0x188>
 800b34c:	2d06      	cmp	r5, #6
 800b34e:	f47f af21 	bne.w	800b194 <_scanf_float+0x60>
 800b352:	2507      	movs	r5, #7
 800b354:	e7b2      	b.n	800b2bc <_scanf_float+0x188>
 800b356:	6822      	ldr	r2, [r4, #0]
 800b358:	0591      	lsls	r1, r2, #22
 800b35a:	f57f af1b 	bpl.w	800b194 <_scanf_float+0x60>
 800b35e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b362:	6022      	str	r2, [r4, #0]
 800b364:	f8cd 9004 	str.w	r9, [sp, #4]
 800b368:	e7a8      	b.n	800b2bc <_scanf_float+0x188>
 800b36a:	6822      	ldr	r2, [r4, #0]
 800b36c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b370:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b374:	d006      	beq.n	800b384 <_scanf_float+0x250>
 800b376:	0550      	lsls	r0, r2, #21
 800b378:	f57f af0c 	bpl.w	800b194 <_scanf_float+0x60>
 800b37c:	f1b9 0f00 	cmp.w	r9, #0
 800b380:	f43f af0f 	beq.w	800b1a2 <_scanf_float+0x6e>
 800b384:	0591      	lsls	r1, r2, #22
 800b386:	bf58      	it	pl
 800b388:	9901      	ldrpl	r1, [sp, #4]
 800b38a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b38e:	bf58      	it	pl
 800b390:	eba9 0101 	subpl.w	r1, r9, r1
 800b394:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b398:	bf58      	it	pl
 800b39a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b39e:	6022      	str	r2, [r4, #0]
 800b3a0:	f04f 0900 	mov.w	r9, #0
 800b3a4:	e78a      	b.n	800b2bc <_scanf_float+0x188>
 800b3a6:	f04f 0a03 	mov.w	sl, #3
 800b3aa:	e787      	b.n	800b2bc <_scanf_float+0x188>
 800b3ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b3b0:	4639      	mov	r1, r7
 800b3b2:	4640      	mov	r0, r8
 800b3b4:	4798      	blx	r3
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	f43f aedf 	beq.w	800b17a <_scanf_float+0x46>
 800b3bc:	e6ea      	b.n	800b194 <_scanf_float+0x60>
 800b3be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b3c6:	463a      	mov	r2, r7
 800b3c8:	4640      	mov	r0, r8
 800b3ca:	4798      	blx	r3
 800b3cc:	6923      	ldr	r3, [r4, #16]
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	6123      	str	r3, [r4, #16]
 800b3d2:	e6ec      	b.n	800b1ae <_scanf_float+0x7a>
 800b3d4:	1e6b      	subs	r3, r5, #1
 800b3d6:	2b06      	cmp	r3, #6
 800b3d8:	d825      	bhi.n	800b426 <_scanf_float+0x2f2>
 800b3da:	2d02      	cmp	r5, #2
 800b3dc:	d836      	bhi.n	800b44c <_scanf_float+0x318>
 800b3de:	455e      	cmp	r6, fp
 800b3e0:	f67f aee8 	bls.w	800b1b4 <_scanf_float+0x80>
 800b3e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b3ec:	463a      	mov	r2, r7
 800b3ee:	4640      	mov	r0, r8
 800b3f0:	4798      	blx	r3
 800b3f2:	6923      	ldr	r3, [r4, #16]
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	6123      	str	r3, [r4, #16]
 800b3f8:	e7f1      	b.n	800b3de <_scanf_float+0x2aa>
 800b3fa:	9802      	ldr	r0, [sp, #8]
 800b3fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b400:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b404:	9002      	str	r0, [sp, #8]
 800b406:	463a      	mov	r2, r7
 800b408:	4640      	mov	r0, r8
 800b40a:	4798      	blx	r3
 800b40c:	6923      	ldr	r3, [r4, #16]
 800b40e:	3b01      	subs	r3, #1
 800b410:	6123      	str	r3, [r4, #16]
 800b412:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b416:	fa5f fa8a 	uxtb.w	sl, sl
 800b41a:	f1ba 0f02 	cmp.w	sl, #2
 800b41e:	d1ec      	bne.n	800b3fa <_scanf_float+0x2c6>
 800b420:	3d03      	subs	r5, #3
 800b422:	b2ed      	uxtb	r5, r5
 800b424:	1b76      	subs	r6, r6, r5
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	05da      	lsls	r2, r3, #23
 800b42a:	d52f      	bpl.n	800b48c <_scanf_float+0x358>
 800b42c:	055b      	lsls	r3, r3, #21
 800b42e:	d510      	bpl.n	800b452 <_scanf_float+0x31e>
 800b430:	455e      	cmp	r6, fp
 800b432:	f67f aebf 	bls.w	800b1b4 <_scanf_float+0x80>
 800b436:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b43a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b43e:	463a      	mov	r2, r7
 800b440:	4640      	mov	r0, r8
 800b442:	4798      	blx	r3
 800b444:	6923      	ldr	r3, [r4, #16]
 800b446:	3b01      	subs	r3, #1
 800b448:	6123      	str	r3, [r4, #16]
 800b44a:	e7f1      	b.n	800b430 <_scanf_float+0x2fc>
 800b44c:	46aa      	mov	sl, r5
 800b44e:	9602      	str	r6, [sp, #8]
 800b450:	e7df      	b.n	800b412 <_scanf_float+0x2de>
 800b452:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b456:	6923      	ldr	r3, [r4, #16]
 800b458:	2965      	cmp	r1, #101	; 0x65
 800b45a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b45e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b462:	6123      	str	r3, [r4, #16]
 800b464:	d00c      	beq.n	800b480 <_scanf_float+0x34c>
 800b466:	2945      	cmp	r1, #69	; 0x45
 800b468:	d00a      	beq.n	800b480 <_scanf_float+0x34c>
 800b46a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b46e:	463a      	mov	r2, r7
 800b470:	4640      	mov	r0, r8
 800b472:	4798      	blx	r3
 800b474:	6923      	ldr	r3, [r4, #16]
 800b476:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b47a:	3b01      	subs	r3, #1
 800b47c:	1eb5      	subs	r5, r6, #2
 800b47e:	6123      	str	r3, [r4, #16]
 800b480:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b484:	463a      	mov	r2, r7
 800b486:	4640      	mov	r0, r8
 800b488:	4798      	blx	r3
 800b48a:	462e      	mov	r6, r5
 800b48c:	6825      	ldr	r5, [r4, #0]
 800b48e:	f015 0510 	ands.w	r5, r5, #16
 800b492:	d159      	bne.n	800b548 <_scanf_float+0x414>
 800b494:	7035      	strb	r5, [r6, #0]
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b49c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4a0:	d11b      	bne.n	800b4da <_scanf_float+0x3a6>
 800b4a2:	9b01      	ldr	r3, [sp, #4]
 800b4a4:	454b      	cmp	r3, r9
 800b4a6:	eba3 0209 	sub.w	r2, r3, r9
 800b4aa:	d123      	bne.n	800b4f4 <_scanf_float+0x3c0>
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	4659      	mov	r1, fp
 800b4b0:	4640      	mov	r0, r8
 800b4b2:	f000 fe97 	bl	800c1e4 <_strtod_r>
 800b4b6:	6822      	ldr	r2, [r4, #0]
 800b4b8:	9b03      	ldr	r3, [sp, #12]
 800b4ba:	f012 0f02 	tst.w	r2, #2
 800b4be:	ec57 6b10 	vmov	r6, r7, d0
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	d021      	beq.n	800b50a <_scanf_float+0x3d6>
 800b4c6:	9903      	ldr	r1, [sp, #12]
 800b4c8:	1d1a      	adds	r2, r3, #4
 800b4ca:	600a      	str	r2, [r1, #0]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	e9c3 6700 	strd	r6, r7, [r3]
 800b4d2:	68e3      	ldr	r3, [r4, #12]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	60e3      	str	r3, [r4, #12]
 800b4d8:	e66d      	b.n	800b1b6 <_scanf_float+0x82>
 800b4da:	9b04      	ldr	r3, [sp, #16]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d0e5      	beq.n	800b4ac <_scanf_float+0x378>
 800b4e0:	9905      	ldr	r1, [sp, #20]
 800b4e2:	230a      	movs	r3, #10
 800b4e4:	462a      	mov	r2, r5
 800b4e6:	3101      	adds	r1, #1
 800b4e8:	4640      	mov	r0, r8
 800b4ea:	f000 ff03 	bl	800c2f4 <_strtol_r>
 800b4ee:	9b04      	ldr	r3, [sp, #16]
 800b4f0:	9e05      	ldr	r6, [sp, #20]
 800b4f2:	1ac2      	subs	r2, r0, r3
 800b4f4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b4f8:	429e      	cmp	r6, r3
 800b4fa:	bf28      	it	cs
 800b4fc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b500:	4912      	ldr	r1, [pc, #72]	; (800b54c <_scanf_float+0x418>)
 800b502:	4630      	mov	r0, r6
 800b504:	f000 f82c 	bl	800b560 <siprintf>
 800b508:	e7d0      	b.n	800b4ac <_scanf_float+0x378>
 800b50a:	9903      	ldr	r1, [sp, #12]
 800b50c:	f012 0f04 	tst.w	r2, #4
 800b510:	f103 0204 	add.w	r2, r3, #4
 800b514:	600a      	str	r2, [r1, #0]
 800b516:	d1d9      	bne.n	800b4cc <_scanf_float+0x398>
 800b518:	f8d3 8000 	ldr.w	r8, [r3]
 800b51c:	ee10 2a10 	vmov	r2, s0
 800b520:	ee10 0a10 	vmov	r0, s0
 800b524:	463b      	mov	r3, r7
 800b526:	4639      	mov	r1, r7
 800b528:	f7f5 fb08 	bl	8000b3c <__aeabi_dcmpun>
 800b52c:	b128      	cbz	r0, 800b53a <_scanf_float+0x406>
 800b52e:	4808      	ldr	r0, [pc, #32]	; (800b550 <_scanf_float+0x41c>)
 800b530:	f000 f810 	bl	800b554 <nanf>
 800b534:	ed88 0a00 	vstr	s0, [r8]
 800b538:	e7cb      	b.n	800b4d2 <_scanf_float+0x39e>
 800b53a:	4630      	mov	r0, r6
 800b53c:	4639      	mov	r1, r7
 800b53e:	f7f5 fb5b 	bl	8000bf8 <__aeabi_d2f>
 800b542:	f8c8 0000 	str.w	r0, [r8]
 800b546:	e7c4      	b.n	800b4d2 <_scanf_float+0x39e>
 800b548:	2500      	movs	r5, #0
 800b54a:	e634      	b.n	800b1b6 <_scanf_float+0x82>
 800b54c:	08010db4 	.word	0x08010db4
 800b550:	080111c0 	.word	0x080111c0

0800b554 <nanf>:
 800b554:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b55c <nanf+0x8>
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	7fc00000 	.word	0x7fc00000

0800b560 <siprintf>:
 800b560:	b40e      	push	{r1, r2, r3}
 800b562:	b500      	push	{lr}
 800b564:	b09c      	sub	sp, #112	; 0x70
 800b566:	ab1d      	add	r3, sp, #116	; 0x74
 800b568:	9002      	str	r0, [sp, #8]
 800b56a:	9006      	str	r0, [sp, #24]
 800b56c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b570:	4809      	ldr	r0, [pc, #36]	; (800b598 <siprintf+0x38>)
 800b572:	9107      	str	r1, [sp, #28]
 800b574:	9104      	str	r1, [sp, #16]
 800b576:	4909      	ldr	r1, [pc, #36]	; (800b59c <siprintf+0x3c>)
 800b578:	f853 2b04 	ldr.w	r2, [r3], #4
 800b57c:	9105      	str	r1, [sp, #20]
 800b57e:	6800      	ldr	r0, [r0, #0]
 800b580:	9301      	str	r3, [sp, #4]
 800b582:	a902      	add	r1, sp, #8
 800b584:	f002 fed4 	bl	800e330 <_svfiprintf_r>
 800b588:	9b02      	ldr	r3, [sp, #8]
 800b58a:	2200      	movs	r2, #0
 800b58c:	701a      	strb	r2, [r3, #0]
 800b58e:	b01c      	add	sp, #112	; 0x70
 800b590:	f85d eb04 	ldr.w	lr, [sp], #4
 800b594:	b003      	add	sp, #12
 800b596:	4770      	bx	lr
 800b598:	20000234 	.word	0x20000234
 800b59c:	ffff0208 	.word	0xffff0208

0800b5a0 <sulp>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	460d      	mov	r5, r1
 800b5a6:	ec45 4b10 	vmov	d0, r4, r5
 800b5aa:	4616      	mov	r6, r2
 800b5ac:	f002 fc1e 	bl	800ddec <__ulp>
 800b5b0:	ec51 0b10 	vmov	r0, r1, d0
 800b5b4:	b17e      	cbz	r6, 800b5d6 <sulp+0x36>
 800b5b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b5ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	dd09      	ble.n	800b5d6 <sulp+0x36>
 800b5c2:	051b      	lsls	r3, r3, #20
 800b5c4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b5c8:	2400      	movs	r4, #0
 800b5ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b5ce:	4622      	mov	r2, r4
 800b5d0:	462b      	mov	r3, r5
 800b5d2:	f7f5 f819 	bl	8000608 <__aeabi_dmul>
 800b5d6:	bd70      	pop	{r4, r5, r6, pc}

0800b5d8 <_strtod_l>:
 800b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5dc:	ed2d 8b02 	vpush	{d8}
 800b5e0:	b09d      	sub	sp, #116	; 0x74
 800b5e2:	461f      	mov	r7, r3
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	9318      	str	r3, [sp, #96]	; 0x60
 800b5e8:	4ba2      	ldr	r3, [pc, #648]	; (800b874 <_strtod_l+0x29c>)
 800b5ea:	9213      	str	r2, [sp, #76]	; 0x4c
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	9305      	str	r3, [sp, #20]
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	4688      	mov	r8, r1
 800b5f6:	f7f4 fdf3 	bl	80001e0 <strlen>
 800b5fa:	f04f 0a00 	mov.w	sl, #0
 800b5fe:	4605      	mov	r5, r0
 800b600:	f04f 0b00 	mov.w	fp, #0
 800b604:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b608:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b60a:	781a      	ldrb	r2, [r3, #0]
 800b60c:	2a2b      	cmp	r2, #43	; 0x2b
 800b60e:	d04e      	beq.n	800b6ae <_strtod_l+0xd6>
 800b610:	d83b      	bhi.n	800b68a <_strtod_l+0xb2>
 800b612:	2a0d      	cmp	r2, #13
 800b614:	d834      	bhi.n	800b680 <_strtod_l+0xa8>
 800b616:	2a08      	cmp	r2, #8
 800b618:	d834      	bhi.n	800b684 <_strtod_l+0xac>
 800b61a:	2a00      	cmp	r2, #0
 800b61c:	d03e      	beq.n	800b69c <_strtod_l+0xc4>
 800b61e:	2300      	movs	r3, #0
 800b620:	930a      	str	r3, [sp, #40]	; 0x28
 800b622:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b624:	7833      	ldrb	r3, [r6, #0]
 800b626:	2b30      	cmp	r3, #48	; 0x30
 800b628:	f040 80b0 	bne.w	800b78c <_strtod_l+0x1b4>
 800b62c:	7873      	ldrb	r3, [r6, #1]
 800b62e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b632:	2b58      	cmp	r3, #88	; 0x58
 800b634:	d168      	bne.n	800b708 <_strtod_l+0x130>
 800b636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b638:	9301      	str	r3, [sp, #4]
 800b63a:	ab18      	add	r3, sp, #96	; 0x60
 800b63c:	9702      	str	r7, [sp, #8]
 800b63e:	9300      	str	r3, [sp, #0]
 800b640:	4a8d      	ldr	r2, [pc, #564]	; (800b878 <_strtod_l+0x2a0>)
 800b642:	ab19      	add	r3, sp, #100	; 0x64
 800b644:	a917      	add	r1, sp, #92	; 0x5c
 800b646:	4620      	mov	r0, r4
 800b648:	f001 fd38 	bl	800d0bc <__gethex>
 800b64c:	f010 0707 	ands.w	r7, r0, #7
 800b650:	4605      	mov	r5, r0
 800b652:	d005      	beq.n	800b660 <_strtod_l+0x88>
 800b654:	2f06      	cmp	r7, #6
 800b656:	d12c      	bne.n	800b6b2 <_strtod_l+0xda>
 800b658:	3601      	adds	r6, #1
 800b65a:	2300      	movs	r3, #0
 800b65c:	9617      	str	r6, [sp, #92]	; 0x5c
 800b65e:	930a      	str	r3, [sp, #40]	; 0x28
 800b660:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b662:	2b00      	cmp	r3, #0
 800b664:	f040 8590 	bne.w	800c188 <_strtod_l+0xbb0>
 800b668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b66a:	b1eb      	cbz	r3, 800b6a8 <_strtod_l+0xd0>
 800b66c:	4652      	mov	r2, sl
 800b66e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b672:	ec43 2b10 	vmov	d0, r2, r3
 800b676:	b01d      	add	sp, #116	; 0x74
 800b678:	ecbd 8b02 	vpop	{d8}
 800b67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b680:	2a20      	cmp	r2, #32
 800b682:	d1cc      	bne.n	800b61e <_strtod_l+0x46>
 800b684:	3301      	adds	r3, #1
 800b686:	9317      	str	r3, [sp, #92]	; 0x5c
 800b688:	e7be      	b.n	800b608 <_strtod_l+0x30>
 800b68a:	2a2d      	cmp	r2, #45	; 0x2d
 800b68c:	d1c7      	bne.n	800b61e <_strtod_l+0x46>
 800b68e:	2201      	movs	r2, #1
 800b690:	920a      	str	r2, [sp, #40]	; 0x28
 800b692:	1c5a      	adds	r2, r3, #1
 800b694:	9217      	str	r2, [sp, #92]	; 0x5c
 800b696:	785b      	ldrb	r3, [r3, #1]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1c2      	bne.n	800b622 <_strtod_l+0x4a>
 800b69c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b69e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f040 856e 	bne.w	800c184 <_strtod_l+0xbac>
 800b6a8:	4652      	mov	r2, sl
 800b6aa:	465b      	mov	r3, fp
 800b6ac:	e7e1      	b.n	800b672 <_strtod_l+0x9a>
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	e7ee      	b.n	800b690 <_strtod_l+0xb8>
 800b6b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b6b4:	b13a      	cbz	r2, 800b6c6 <_strtod_l+0xee>
 800b6b6:	2135      	movs	r1, #53	; 0x35
 800b6b8:	a81a      	add	r0, sp, #104	; 0x68
 800b6ba:	f002 fca2 	bl	800e002 <__copybits>
 800b6be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	f002 f861 	bl	800d788 <_Bfree>
 800b6c6:	3f01      	subs	r7, #1
 800b6c8:	2f04      	cmp	r7, #4
 800b6ca:	d806      	bhi.n	800b6da <_strtod_l+0x102>
 800b6cc:	e8df f007 	tbb	[pc, r7]
 800b6d0:	1714030a 	.word	0x1714030a
 800b6d4:	0a          	.byte	0x0a
 800b6d5:	00          	.byte	0x00
 800b6d6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b6da:	0728      	lsls	r0, r5, #28
 800b6dc:	d5c0      	bpl.n	800b660 <_strtod_l+0x88>
 800b6de:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b6e2:	e7bd      	b.n	800b660 <_strtod_l+0x88>
 800b6e4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b6e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b6ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b6ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b6f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b6f6:	e7f0      	b.n	800b6da <_strtod_l+0x102>
 800b6f8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b87c <_strtod_l+0x2a4>
 800b6fc:	e7ed      	b.n	800b6da <_strtod_l+0x102>
 800b6fe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b702:	f04f 3aff 	mov.w	sl, #4294967295
 800b706:	e7e8      	b.n	800b6da <_strtod_l+0x102>
 800b708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b70e:	785b      	ldrb	r3, [r3, #1]
 800b710:	2b30      	cmp	r3, #48	; 0x30
 800b712:	d0f9      	beq.n	800b708 <_strtod_l+0x130>
 800b714:	2b00      	cmp	r3, #0
 800b716:	d0a3      	beq.n	800b660 <_strtod_l+0x88>
 800b718:	2301      	movs	r3, #1
 800b71a:	f04f 0900 	mov.w	r9, #0
 800b71e:	9304      	str	r3, [sp, #16]
 800b720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b722:	9308      	str	r3, [sp, #32]
 800b724:	f8cd 901c 	str.w	r9, [sp, #28]
 800b728:	464f      	mov	r7, r9
 800b72a:	220a      	movs	r2, #10
 800b72c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b72e:	7806      	ldrb	r6, [r0, #0]
 800b730:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b734:	b2d9      	uxtb	r1, r3
 800b736:	2909      	cmp	r1, #9
 800b738:	d92a      	bls.n	800b790 <_strtod_l+0x1b8>
 800b73a:	9905      	ldr	r1, [sp, #20]
 800b73c:	462a      	mov	r2, r5
 800b73e:	f002 ff0f 	bl	800e560 <strncmp>
 800b742:	b398      	cbz	r0, 800b7ac <_strtod_l+0x1d4>
 800b744:	2000      	movs	r0, #0
 800b746:	4632      	mov	r2, r6
 800b748:	463d      	mov	r5, r7
 800b74a:	9005      	str	r0, [sp, #20]
 800b74c:	4603      	mov	r3, r0
 800b74e:	2a65      	cmp	r2, #101	; 0x65
 800b750:	d001      	beq.n	800b756 <_strtod_l+0x17e>
 800b752:	2a45      	cmp	r2, #69	; 0x45
 800b754:	d118      	bne.n	800b788 <_strtod_l+0x1b0>
 800b756:	b91d      	cbnz	r5, 800b760 <_strtod_l+0x188>
 800b758:	9a04      	ldr	r2, [sp, #16]
 800b75a:	4302      	orrs	r2, r0
 800b75c:	d09e      	beq.n	800b69c <_strtod_l+0xc4>
 800b75e:	2500      	movs	r5, #0
 800b760:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b764:	f108 0201 	add.w	r2, r8, #1
 800b768:	9217      	str	r2, [sp, #92]	; 0x5c
 800b76a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b76e:	2a2b      	cmp	r2, #43	; 0x2b
 800b770:	d075      	beq.n	800b85e <_strtod_l+0x286>
 800b772:	2a2d      	cmp	r2, #45	; 0x2d
 800b774:	d07b      	beq.n	800b86e <_strtod_l+0x296>
 800b776:	f04f 0c00 	mov.w	ip, #0
 800b77a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b77e:	2909      	cmp	r1, #9
 800b780:	f240 8082 	bls.w	800b888 <_strtod_l+0x2b0>
 800b784:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b788:	2600      	movs	r6, #0
 800b78a:	e09d      	b.n	800b8c8 <_strtod_l+0x2f0>
 800b78c:	2300      	movs	r3, #0
 800b78e:	e7c4      	b.n	800b71a <_strtod_l+0x142>
 800b790:	2f08      	cmp	r7, #8
 800b792:	bfd8      	it	le
 800b794:	9907      	ldrle	r1, [sp, #28]
 800b796:	f100 0001 	add.w	r0, r0, #1
 800b79a:	bfda      	itte	le
 800b79c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b7a0:	9307      	strle	r3, [sp, #28]
 800b7a2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b7a6:	3701      	adds	r7, #1
 800b7a8:	9017      	str	r0, [sp, #92]	; 0x5c
 800b7aa:	e7bf      	b.n	800b72c <_strtod_l+0x154>
 800b7ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7ae:	195a      	adds	r2, r3, r5
 800b7b0:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7b2:	5d5a      	ldrb	r2, [r3, r5]
 800b7b4:	2f00      	cmp	r7, #0
 800b7b6:	d037      	beq.n	800b828 <_strtod_l+0x250>
 800b7b8:	9005      	str	r0, [sp, #20]
 800b7ba:	463d      	mov	r5, r7
 800b7bc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b7c0:	2b09      	cmp	r3, #9
 800b7c2:	d912      	bls.n	800b7ea <_strtod_l+0x212>
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e7c2      	b.n	800b74e <_strtod_l+0x176>
 800b7c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7ca:	1c5a      	adds	r2, r3, #1
 800b7cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7ce:	785a      	ldrb	r2, [r3, #1]
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	2a30      	cmp	r2, #48	; 0x30
 800b7d4:	d0f8      	beq.n	800b7c8 <_strtod_l+0x1f0>
 800b7d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b7da:	2b08      	cmp	r3, #8
 800b7dc:	f200 84d9 	bhi.w	800c192 <_strtod_l+0xbba>
 800b7e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7e2:	9005      	str	r0, [sp, #20]
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	9308      	str	r3, [sp, #32]
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	3a30      	subs	r2, #48	; 0x30
 800b7ec:	f100 0301 	add.w	r3, r0, #1
 800b7f0:	d014      	beq.n	800b81c <_strtod_l+0x244>
 800b7f2:	9905      	ldr	r1, [sp, #20]
 800b7f4:	4419      	add	r1, r3
 800b7f6:	9105      	str	r1, [sp, #20]
 800b7f8:	462b      	mov	r3, r5
 800b7fa:	eb00 0e05 	add.w	lr, r0, r5
 800b7fe:	210a      	movs	r1, #10
 800b800:	4573      	cmp	r3, lr
 800b802:	d113      	bne.n	800b82c <_strtod_l+0x254>
 800b804:	182b      	adds	r3, r5, r0
 800b806:	2b08      	cmp	r3, #8
 800b808:	f105 0501 	add.w	r5, r5, #1
 800b80c:	4405      	add	r5, r0
 800b80e:	dc1c      	bgt.n	800b84a <_strtod_l+0x272>
 800b810:	9907      	ldr	r1, [sp, #28]
 800b812:	230a      	movs	r3, #10
 800b814:	fb03 2301 	mla	r3, r3, r1, r2
 800b818:	9307      	str	r3, [sp, #28]
 800b81a:	2300      	movs	r3, #0
 800b81c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b81e:	1c51      	adds	r1, r2, #1
 800b820:	9117      	str	r1, [sp, #92]	; 0x5c
 800b822:	7852      	ldrb	r2, [r2, #1]
 800b824:	4618      	mov	r0, r3
 800b826:	e7c9      	b.n	800b7bc <_strtod_l+0x1e4>
 800b828:	4638      	mov	r0, r7
 800b82a:	e7d2      	b.n	800b7d2 <_strtod_l+0x1fa>
 800b82c:	2b08      	cmp	r3, #8
 800b82e:	dc04      	bgt.n	800b83a <_strtod_l+0x262>
 800b830:	9e07      	ldr	r6, [sp, #28]
 800b832:	434e      	muls	r6, r1
 800b834:	9607      	str	r6, [sp, #28]
 800b836:	3301      	adds	r3, #1
 800b838:	e7e2      	b.n	800b800 <_strtod_l+0x228>
 800b83a:	f103 0c01 	add.w	ip, r3, #1
 800b83e:	f1bc 0f10 	cmp.w	ip, #16
 800b842:	bfd8      	it	le
 800b844:	fb01 f909 	mulle.w	r9, r1, r9
 800b848:	e7f5      	b.n	800b836 <_strtod_l+0x25e>
 800b84a:	2d10      	cmp	r5, #16
 800b84c:	bfdc      	itt	le
 800b84e:	230a      	movle	r3, #10
 800b850:	fb03 2909 	mlale	r9, r3, r9, r2
 800b854:	e7e1      	b.n	800b81a <_strtod_l+0x242>
 800b856:	2300      	movs	r3, #0
 800b858:	9305      	str	r3, [sp, #20]
 800b85a:	2301      	movs	r3, #1
 800b85c:	e77c      	b.n	800b758 <_strtod_l+0x180>
 800b85e:	f04f 0c00 	mov.w	ip, #0
 800b862:	f108 0202 	add.w	r2, r8, #2
 800b866:	9217      	str	r2, [sp, #92]	; 0x5c
 800b868:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b86c:	e785      	b.n	800b77a <_strtod_l+0x1a2>
 800b86e:	f04f 0c01 	mov.w	ip, #1
 800b872:	e7f6      	b.n	800b862 <_strtod_l+0x28a>
 800b874:	08011008 	.word	0x08011008
 800b878:	08010dbc 	.word	0x08010dbc
 800b87c:	7ff00000 	.word	0x7ff00000
 800b880:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b882:	1c51      	adds	r1, r2, #1
 800b884:	9117      	str	r1, [sp, #92]	; 0x5c
 800b886:	7852      	ldrb	r2, [r2, #1]
 800b888:	2a30      	cmp	r2, #48	; 0x30
 800b88a:	d0f9      	beq.n	800b880 <_strtod_l+0x2a8>
 800b88c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b890:	2908      	cmp	r1, #8
 800b892:	f63f af79 	bhi.w	800b788 <_strtod_l+0x1b0>
 800b896:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b89a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b89c:	9206      	str	r2, [sp, #24]
 800b89e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b8a0:	1c51      	adds	r1, r2, #1
 800b8a2:	9117      	str	r1, [sp, #92]	; 0x5c
 800b8a4:	7852      	ldrb	r2, [r2, #1]
 800b8a6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b8aa:	2e09      	cmp	r6, #9
 800b8ac:	d937      	bls.n	800b91e <_strtod_l+0x346>
 800b8ae:	9e06      	ldr	r6, [sp, #24]
 800b8b0:	1b89      	subs	r1, r1, r6
 800b8b2:	2908      	cmp	r1, #8
 800b8b4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b8b8:	dc02      	bgt.n	800b8c0 <_strtod_l+0x2e8>
 800b8ba:	4576      	cmp	r6, lr
 800b8bc:	bfa8      	it	ge
 800b8be:	4676      	movge	r6, lr
 800b8c0:	f1bc 0f00 	cmp.w	ip, #0
 800b8c4:	d000      	beq.n	800b8c8 <_strtod_l+0x2f0>
 800b8c6:	4276      	negs	r6, r6
 800b8c8:	2d00      	cmp	r5, #0
 800b8ca:	d14d      	bne.n	800b968 <_strtod_l+0x390>
 800b8cc:	9904      	ldr	r1, [sp, #16]
 800b8ce:	4301      	orrs	r1, r0
 800b8d0:	f47f aec6 	bne.w	800b660 <_strtod_l+0x88>
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f47f aee1 	bne.w	800b69c <_strtod_l+0xc4>
 800b8da:	2a69      	cmp	r2, #105	; 0x69
 800b8dc:	d027      	beq.n	800b92e <_strtod_l+0x356>
 800b8de:	dc24      	bgt.n	800b92a <_strtod_l+0x352>
 800b8e0:	2a49      	cmp	r2, #73	; 0x49
 800b8e2:	d024      	beq.n	800b92e <_strtod_l+0x356>
 800b8e4:	2a4e      	cmp	r2, #78	; 0x4e
 800b8e6:	f47f aed9 	bne.w	800b69c <_strtod_l+0xc4>
 800b8ea:	499f      	ldr	r1, [pc, #636]	; (800bb68 <_strtod_l+0x590>)
 800b8ec:	a817      	add	r0, sp, #92	; 0x5c
 800b8ee:	f001 fe3d 	bl	800d56c <__match>
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	f43f aed2 	beq.w	800b69c <_strtod_l+0xc4>
 800b8f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	2b28      	cmp	r3, #40	; 0x28
 800b8fe:	d12d      	bne.n	800b95c <_strtod_l+0x384>
 800b900:	499a      	ldr	r1, [pc, #616]	; (800bb6c <_strtod_l+0x594>)
 800b902:	aa1a      	add	r2, sp, #104	; 0x68
 800b904:	a817      	add	r0, sp, #92	; 0x5c
 800b906:	f001 fe45 	bl	800d594 <__hexnan>
 800b90a:	2805      	cmp	r0, #5
 800b90c:	d126      	bne.n	800b95c <_strtod_l+0x384>
 800b90e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b910:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b914:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b918:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b91c:	e6a0      	b.n	800b660 <_strtod_l+0x88>
 800b91e:	210a      	movs	r1, #10
 800b920:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b924:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b928:	e7b9      	b.n	800b89e <_strtod_l+0x2c6>
 800b92a:	2a6e      	cmp	r2, #110	; 0x6e
 800b92c:	e7db      	b.n	800b8e6 <_strtod_l+0x30e>
 800b92e:	4990      	ldr	r1, [pc, #576]	; (800bb70 <_strtod_l+0x598>)
 800b930:	a817      	add	r0, sp, #92	; 0x5c
 800b932:	f001 fe1b 	bl	800d56c <__match>
 800b936:	2800      	cmp	r0, #0
 800b938:	f43f aeb0 	beq.w	800b69c <_strtod_l+0xc4>
 800b93c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b93e:	498d      	ldr	r1, [pc, #564]	; (800bb74 <_strtod_l+0x59c>)
 800b940:	3b01      	subs	r3, #1
 800b942:	a817      	add	r0, sp, #92	; 0x5c
 800b944:	9317      	str	r3, [sp, #92]	; 0x5c
 800b946:	f001 fe11 	bl	800d56c <__match>
 800b94a:	b910      	cbnz	r0, 800b952 <_strtod_l+0x37a>
 800b94c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b94e:	3301      	adds	r3, #1
 800b950:	9317      	str	r3, [sp, #92]	; 0x5c
 800b952:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bb84 <_strtod_l+0x5ac>
 800b956:	f04f 0a00 	mov.w	sl, #0
 800b95a:	e681      	b.n	800b660 <_strtod_l+0x88>
 800b95c:	4886      	ldr	r0, [pc, #536]	; (800bb78 <_strtod_l+0x5a0>)
 800b95e:	f002 fde7 	bl	800e530 <nan>
 800b962:	ec5b ab10 	vmov	sl, fp, d0
 800b966:	e67b      	b.n	800b660 <_strtod_l+0x88>
 800b968:	9b05      	ldr	r3, [sp, #20]
 800b96a:	9807      	ldr	r0, [sp, #28]
 800b96c:	1af3      	subs	r3, r6, r3
 800b96e:	2f00      	cmp	r7, #0
 800b970:	bf08      	it	eq
 800b972:	462f      	moveq	r7, r5
 800b974:	2d10      	cmp	r5, #16
 800b976:	9306      	str	r3, [sp, #24]
 800b978:	46a8      	mov	r8, r5
 800b97a:	bfa8      	it	ge
 800b97c:	f04f 0810 	movge.w	r8, #16
 800b980:	f7f4 fdc8 	bl	8000514 <__aeabi_ui2d>
 800b984:	2d09      	cmp	r5, #9
 800b986:	4682      	mov	sl, r0
 800b988:	468b      	mov	fp, r1
 800b98a:	dd13      	ble.n	800b9b4 <_strtod_l+0x3dc>
 800b98c:	4b7b      	ldr	r3, [pc, #492]	; (800bb7c <_strtod_l+0x5a4>)
 800b98e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b992:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b996:	f7f4 fe37 	bl	8000608 <__aeabi_dmul>
 800b99a:	4682      	mov	sl, r0
 800b99c:	4648      	mov	r0, r9
 800b99e:	468b      	mov	fp, r1
 800b9a0:	f7f4 fdb8 	bl	8000514 <__aeabi_ui2d>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	4650      	mov	r0, sl
 800b9aa:	4659      	mov	r1, fp
 800b9ac:	f7f4 fc76 	bl	800029c <__adddf3>
 800b9b0:	4682      	mov	sl, r0
 800b9b2:	468b      	mov	fp, r1
 800b9b4:	2d0f      	cmp	r5, #15
 800b9b6:	dc38      	bgt.n	800ba2a <_strtod_l+0x452>
 800b9b8:	9b06      	ldr	r3, [sp, #24]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f43f ae50 	beq.w	800b660 <_strtod_l+0x88>
 800b9c0:	dd24      	ble.n	800ba0c <_strtod_l+0x434>
 800b9c2:	2b16      	cmp	r3, #22
 800b9c4:	dc0b      	bgt.n	800b9de <_strtod_l+0x406>
 800b9c6:	496d      	ldr	r1, [pc, #436]	; (800bb7c <_strtod_l+0x5a4>)
 800b9c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9d0:	4652      	mov	r2, sl
 800b9d2:	465b      	mov	r3, fp
 800b9d4:	f7f4 fe18 	bl	8000608 <__aeabi_dmul>
 800b9d8:	4682      	mov	sl, r0
 800b9da:	468b      	mov	fp, r1
 800b9dc:	e640      	b.n	800b660 <_strtod_l+0x88>
 800b9de:	9a06      	ldr	r2, [sp, #24]
 800b9e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	db20      	blt.n	800ba2a <_strtod_l+0x452>
 800b9e8:	4c64      	ldr	r4, [pc, #400]	; (800bb7c <_strtod_l+0x5a4>)
 800b9ea:	f1c5 050f 	rsb	r5, r5, #15
 800b9ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b9f2:	4652      	mov	r2, sl
 800b9f4:	465b      	mov	r3, fp
 800b9f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9fa:	f7f4 fe05 	bl	8000608 <__aeabi_dmul>
 800b9fe:	9b06      	ldr	r3, [sp, #24]
 800ba00:	1b5d      	subs	r5, r3, r5
 800ba02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ba06:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba0a:	e7e3      	b.n	800b9d4 <_strtod_l+0x3fc>
 800ba0c:	9b06      	ldr	r3, [sp, #24]
 800ba0e:	3316      	adds	r3, #22
 800ba10:	db0b      	blt.n	800ba2a <_strtod_l+0x452>
 800ba12:	9b05      	ldr	r3, [sp, #20]
 800ba14:	1b9e      	subs	r6, r3, r6
 800ba16:	4b59      	ldr	r3, [pc, #356]	; (800bb7c <_strtod_l+0x5a4>)
 800ba18:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ba1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba20:	4650      	mov	r0, sl
 800ba22:	4659      	mov	r1, fp
 800ba24:	f7f4 ff1a 	bl	800085c <__aeabi_ddiv>
 800ba28:	e7d6      	b.n	800b9d8 <_strtod_l+0x400>
 800ba2a:	9b06      	ldr	r3, [sp, #24]
 800ba2c:	eba5 0808 	sub.w	r8, r5, r8
 800ba30:	4498      	add	r8, r3
 800ba32:	f1b8 0f00 	cmp.w	r8, #0
 800ba36:	dd74      	ble.n	800bb22 <_strtod_l+0x54a>
 800ba38:	f018 030f 	ands.w	r3, r8, #15
 800ba3c:	d00a      	beq.n	800ba54 <_strtod_l+0x47c>
 800ba3e:	494f      	ldr	r1, [pc, #316]	; (800bb7c <_strtod_l+0x5a4>)
 800ba40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba44:	4652      	mov	r2, sl
 800ba46:	465b      	mov	r3, fp
 800ba48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba4c:	f7f4 fddc 	bl	8000608 <__aeabi_dmul>
 800ba50:	4682      	mov	sl, r0
 800ba52:	468b      	mov	fp, r1
 800ba54:	f038 080f 	bics.w	r8, r8, #15
 800ba58:	d04f      	beq.n	800bafa <_strtod_l+0x522>
 800ba5a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ba5e:	dd22      	ble.n	800baa6 <_strtod_l+0x4ce>
 800ba60:	2500      	movs	r5, #0
 800ba62:	462e      	mov	r6, r5
 800ba64:	9507      	str	r5, [sp, #28]
 800ba66:	9505      	str	r5, [sp, #20]
 800ba68:	2322      	movs	r3, #34	; 0x22
 800ba6a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bb84 <_strtod_l+0x5ac>
 800ba6e:	6023      	str	r3, [r4, #0]
 800ba70:	f04f 0a00 	mov.w	sl, #0
 800ba74:	9b07      	ldr	r3, [sp, #28]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f43f adf2 	beq.w	800b660 <_strtod_l+0x88>
 800ba7c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f001 fe82 	bl	800d788 <_Bfree>
 800ba84:	9905      	ldr	r1, [sp, #20]
 800ba86:	4620      	mov	r0, r4
 800ba88:	f001 fe7e 	bl	800d788 <_Bfree>
 800ba8c:	4631      	mov	r1, r6
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f001 fe7a 	bl	800d788 <_Bfree>
 800ba94:	9907      	ldr	r1, [sp, #28]
 800ba96:	4620      	mov	r0, r4
 800ba98:	f001 fe76 	bl	800d788 <_Bfree>
 800ba9c:	4629      	mov	r1, r5
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f001 fe72 	bl	800d788 <_Bfree>
 800baa4:	e5dc      	b.n	800b660 <_strtod_l+0x88>
 800baa6:	4b36      	ldr	r3, [pc, #216]	; (800bb80 <_strtod_l+0x5a8>)
 800baa8:	9304      	str	r3, [sp, #16]
 800baaa:	2300      	movs	r3, #0
 800baac:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bab0:	4650      	mov	r0, sl
 800bab2:	4659      	mov	r1, fp
 800bab4:	4699      	mov	r9, r3
 800bab6:	f1b8 0f01 	cmp.w	r8, #1
 800baba:	dc21      	bgt.n	800bb00 <_strtod_l+0x528>
 800babc:	b10b      	cbz	r3, 800bac2 <_strtod_l+0x4ea>
 800babe:	4682      	mov	sl, r0
 800bac0:	468b      	mov	fp, r1
 800bac2:	4b2f      	ldr	r3, [pc, #188]	; (800bb80 <_strtod_l+0x5a8>)
 800bac4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bac8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bacc:	4652      	mov	r2, sl
 800bace:	465b      	mov	r3, fp
 800bad0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bad4:	f7f4 fd98 	bl	8000608 <__aeabi_dmul>
 800bad8:	4b2a      	ldr	r3, [pc, #168]	; (800bb84 <_strtod_l+0x5ac>)
 800bada:	460a      	mov	r2, r1
 800badc:	400b      	ands	r3, r1
 800bade:	492a      	ldr	r1, [pc, #168]	; (800bb88 <_strtod_l+0x5b0>)
 800bae0:	428b      	cmp	r3, r1
 800bae2:	4682      	mov	sl, r0
 800bae4:	d8bc      	bhi.n	800ba60 <_strtod_l+0x488>
 800bae6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800baea:	428b      	cmp	r3, r1
 800baec:	bf86      	itte	hi
 800baee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bb8c <_strtod_l+0x5b4>
 800baf2:	f04f 3aff 	movhi.w	sl, #4294967295
 800baf6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bafa:	2300      	movs	r3, #0
 800bafc:	9304      	str	r3, [sp, #16]
 800bafe:	e084      	b.n	800bc0a <_strtod_l+0x632>
 800bb00:	f018 0f01 	tst.w	r8, #1
 800bb04:	d005      	beq.n	800bb12 <_strtod_l+0x53a>
 800bb06:	9b04      	ldr	r3, [sp, #16]
 800bb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0c:	f7f4 fd7c 	bl	8000608 <__aeabi_dmul>
 800bb10:	2301      	movs	r3, #1
 800bb12:	9a04      	ldr	r2, [sp, #16]
 800bb14:	3208      	adds	r2, #8
 800bb16:	f109 0901 	add.w	r9, r9, #1
 800bb1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bb1e:	9204      	str	r2, [sp, #16]
 800bb20:	e7c9      	b.n	800bab6 <_strtod_l+0x4de>
 800bb22:	d0ea      	beq.n	800bafa <_strtod_l+0x522>
 800bb24:	f1c8 0800 	rsb	r8, r8, #0
 800bb28:	f018 020f 	ands.w	r2, r8, #15
 800bb2c:	d00a      	beq.n	800bb44 <_strtod_l+0x56c>
 800bb2e:	4b13      	ldr	r3, [pc, #76]	; (800bb7c <_strtod_l+0x5a4>)
 800bb30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb34:	4650      	mov	r0, sl
 800bb36:	4659      	mov	r1, fp
 800bb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3c:	f7f4 fe8e 	bl	800085c <__aeabi_ddiv>
 800bb40:	4682      	mov	sl, r0
 800bb42:	468b      	mov	fp, r1
 800bb44:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bb48:	d0d7      	beq.n	800bafa <_strtod_l+0x522>
 800bb4a:	f1b8 0f1f 	cmp.w	r8, #31
 800bb4e:	dd1f      	ble.n	800bb90 <_strtod_l+0x5b8>
 800bb50:	2500      	movs	r5, #0
 800bb52:	462e      	mov	r6, r5
 800bb54:	9507      	str	r5, [sp, #28]
 800bb56:	9505      	str	r5, [sp, #20]
 800bb58:	2322      	movs	r3, #34	; 0x22
 800bb5a:	f04f 0a00 	mov.w	sl, #0
 800bb5e:	f04f 0b00 	mov.w	fp, #0
 800bb62:	6023      	str	r3, [r4, #0]
 800bb64:	e786      	b.n	800ba74 <_strtod_l+0x49c>
 800bb66:	bf00      	nop
 800bb68:	08010d8d 	.word	0x08010d8d
 800bb6c:	08010dd0 	.word	0x08010dd0
 800bb70:	08010d85 	.word	0x08010d85
 800bb74:	08010f14 	.word	0x08010f14
 800bb78:	080111c0 	.word	0x080111c0
 800bb7c:	080110a0 	.word	0x080110a0
 800bb80:	08011078 	.word	0x08011078
 800bb84:	7ff00000 	.word	0x7ff00000
 800bb88:	7ca00000 	.word	0x7ca00000
 800bb8c:	7fefffff 	.word	0x7fefffff
 800bb90:	f018 0310 	ands.w	r3, r8, #16
 800bb94:	bf18      	it	ne
 800bb96:	236a      	movne	r3, #106	; 0x6a
 800bb98:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bf48 <_strtod_l+0x970>
 800bb9c:	9304      	str	r3, [sp, #16]
 800bb9e:	4650      	mov	r0, sl
 800bba0:	4659      	mov	r1, fp
 800bba2:	2300      	movs	r3, #0
 800bba4:	f018 0f01 	tst.w	r8, #1
 800bba8:	d004      	beq.n	800bbb4 <_strtod_l+0x5dc>
 800bbaa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bbae:	f7f4 fd2b 	bl	8000608 <__aeabi_dmul>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bbb8:	f109 0908 	add.w	r9, r9, #8
 800bbbc:	d1f2      	bne.n	800bba4 <_strtod_l+0x5cc>
 800bbbe:	b10b      	cbz	r3, 800bbc4 <_strtod_l+0x5ec>
 800bbc0:	4682      	mov	sl, r0
 800bbc2:	468b      	mov	fp, r1
 800bbc4:	9b04      	ldr	r3, [sp, #16]
 800bbc6:	b1c3      	cbz	r3, 800bbfa <_strtod_l+0x622>
 800bbc8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bbcc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	4659      	mov	r1, fp
 800bbd4:	dd11      	ble.n	800bbfa <_strtod_l+0x622>
 800bbd6:	2b1f      	cmp	r3, #31
 800bbd8:	f340 8124 	ble.w	800be24 <_strtod_l+0x84c>
 800bbdc:	2b34      	cmp	r3, #52	; 0x34
 800bbde:	bfde      	ittt	le
 800bbe0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bbe4:	f04f 33ff 	movle.w	r3, #4294967295
 800bbe8:	fa03 f202 	lslle.w	r2, r3, r2
 800bbec:	f04f 0a00 	mov.w	sl, #0
 800bbf0:	bfcc      	ite	gt
 800bbf2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bbf6:	ea02 0b01 	andle.w	fp, r2, r1
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	4650      	mov	r0, sl
 800bc00:	4659      	mov	r1, fp
 800bc02:	f7f4 ff69 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc06:	2800      	cmp	r0, #0
 800bc08:	d1a2      	bne.n	800bb50 <_strtod_l+0x578>
 800bc0a:	9b07      	ldr	r3, [sp, #28]
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	9908      	ldr	r1, [sp, #32]
 800bc10:	462b      	mov	r3, r5
 800bc12:	463a      	mov	r2, r7
 800bc14:	4620      	mov	r0, r4
 800bc16:	f001 fe1f 	bl	800d858 <__s2b>
 800bc1a:	9007      	str	r0, [sp, #28]
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	f43f af1f 	beq.w	800ba60 <_strtod_l+0x488>
 800bc22:	9b05      	ldr	r3, [sp, #20]
 800bc24:	1b9e      	subs	r6, r3, r6
 800bc26:	9b06      	ldr	r3, [sp, #24]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	bfb4      	ite	lt
 800bc2c:	4633      	movlt	r3, r6
 800bc2e:	2300      	movge	r3, #0
 800bc30:	930c      	str	r3, [sp, #48]	; 0x30
 800bc32:	9b06      	ldr	r3, [sp, #24]
 800bc34:	2500      	movs	r5, #0
 800bc36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bc3a:	9312      	str	r3, [sp, #72]	; 0x48
 800bc3c:	462e      	mov	r6, r5
 800bc3e:	9b07      	ldr	r3, [sp, #28]
 800bc40:	4620      	mov	r0, r4
 800bc42:	6859      	ldr	r1, [r3, #4]
 800bc44:	f001 fd60 	bl	800d708 <_Balloc>
 800bc48:	9005      	str	r0, [sp, #20]
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	f43f af0c 	beq.w	800ba68 <_strtod_l+0x490>
 800bc50:	9b07      	ldr	r3, [sp, #28]
 800bc52:	691a      	ldr	r2, [r3, #16]
 800bc54:	3202      	adds	r2, #2
 800bc56:	f103 010c 	add.w	r1, r3, #12
 800bc5a:	0092      	lsls	r2, r2, #2
 800bc5c:	300c      	adds	r0, #12
 800bc5e:	f7fe fde9 	bl	800a834 <memcpy>
 800bc62:	ec4b ab10 	vmov	d0, sl, fp
 800bc66:	aa1a      	add	r2, sp, #104	; 0x68
 800bc68:	a919      	add	r1, sp, #100	; 0x64
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	f002 f93a 	bl	800dee4 <__d2b>
 800bc70:	ec4b ab18 	vmov	d8, sl, fp
 800bc74:	9018      	str	r0, [sp, #96]	; 0x60
 800bc76:	2800      	cmp	r0, #0
 800bc78:	f43f aef6 	beq.w	800ba68 <_strtod_l+0x490>
 800bc7c:	2101      	movs	r1, #1
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f001 fe84 	bl	800d98c <__i2b>
 800bc84:	4606      	mov	r6, r0
 800bc86:	2800      	cmp	r0, #0
 800bc88:	f43f aeee 	beq.w	800ba68 <_strtod_l+0x490>
 800bc8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc8e:	9904      	ldr	r1, [sp, #16]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	bfab      	itete	ge
 800bc94:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bc96:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bc98:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bc9a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bc9e:	bfac      	ite	ge
 800bca0:	eb03 0902 	addge.w	r9, r3, r2
 800bca4:	1ad7      	sublt	r7, r2, r3
 800bca6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bca8:	eba3 0801 	sub.w	r8, r3, r1
 800bcac:	4490      	add	r8, r2
 800bcae:	4ba1      	ldr	r3, [pc, #644]	; (800bf34 <_strtod_l+0x95c>)
 800bcb0:	f108 38ff 	add.w	r8, r8, #4294967295
 800bcb4:	4598      	cmp	r8, r3
 800bcb6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bcba:	f280 80c7 	bge.w	800be4c <_strtod_l+0x874>
 800bcbe:	eba3 0308 	sub.w	r3, r3, r8
 800bcc2:	2b1f      	cmp	r3, #31
 800bcc4:	eba2 0203 	sub.w	r2, r2, r3
 800bcc8:	f04f 0101 	mov.w	r1, #1
 800bccc:	f300 80b1 	bgt.w	800be32 <_strtod_l+0x85a>
 800bcd0:	fa01 f303 	lsl.w	r3, r1, r3
 800bcd4:	930d      	str	r3, [sp, #52]	; 0x34
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	9308      	str	r3, [sp, #32]
 800bcda:	eb09 0802 	add.w	r8, r9, r2
 800bcde:	9b04      	ldr	r3, [sp, #16]
 800bce0:	45c1      	cmp	r9, r8
 800bce2:	4417      	add	r7, r2
 800bce4:	441f      	add	r7, r3
 800bce6:	464b      	mov	r3, r9
 800bce8:	bfa8      	it	ge
 800bcea:	4643      	movge	r3, r8
 800bcec:	42bb      	cmp	r3, r7
 800bcee:	bfa8      	it	ge
 800bcf0:	463b      	movge	r3, r7
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	bfc2      	ittt	gt
 800bcf6:	eba8 0803 	subgt.w	r8, r8, r3
 800bcfa:	1aff      	subgt	r7, r7, r3
 800bcfc:	eba9 0903 	subgt.w	r9, r9, r3
 800bd00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	dd17      	ble.n	800bd36 <_strtod_l+0x75e>
 800bd06:	4631      	mov	r1, r6
 800bd08:	461a      	mov	r2, r3
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f001 fefe 	bl	800db0c <__pow5mult>
 800bd10:	4606      	mov	r6, r0
 800bd12:	2800      	cmp	r0, #0
 800bd14:	f43f aea8 	beq.w	800ba68 <_strtod_l+0x490>
 800bd18:	4601      	mov	r1, r0
 800bd1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f001 fe4b 	bl	800d9b8 <__multiply>
 800bd22:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd24:	2800      	cmp	r0, #0
 800bd26:	f43f ae9f 	beq.w	800ba68 <_strtod_l+0x490>
 800bd2a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	f001 fd2b 	bl	800d788 <_Bfree>
 800bd32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd34:	9318      	str	r3, [sp, #96]	; 0x60
 800bd36:	f1b8 0f00 	cmp.w	r8, #0
 800bd3a:	f300 808c 	bgt.w	800be56 <_strtod_l+0x87e>
 800bd3e:	9b06      	ldr	r3, [sp, #24]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	dd08      	ble.n	800bd56 <_strtod_l+0x77e>
 800bd44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd46:	9905      	ldr	r1, [sp, #20]
 800bd48:	4620      	mov	r0, r4
 800bd4a:	f001 fedf 	bl	800db0c <__pow5mult>
 800bd4e:	9005      	str	r0, [sp, #20]
 800bd50:	2800      	cmp	r0, #0
 800bd52:	f43f ae89 	beq.w	800ba68 <_strtod_l+0x490>
 800bd56:	2f00      	cmp	r7, #0
 800bd58:	dd08      	ble.n	800bd6c <_strtod_l+0x794>
 800bd5a:	9905      	ldr	r1, [sp, #20]
 800bd5c:	463a      	mov	r2, r7
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f001 ff2e 	bl	800dbc0 <__lshift>
 800bd64:	9005      	str	r0, [sp, #20]
 800bd66:	2800      	cmp	r0, #0
 800bd68:	f43f ae7e 	beq.w	800ba68 <_strtod_l+0x490>
 800bd6c:	f1b9 0f00 	cmp.w	r9, #0
 800bd70:	dd08      	ble.n	800bd84 <_strtod_l+0x7ac>
 800bd72:	4631      	mov	r1, r6
 800bd74:	464a      	mov	r2, r9
 800bd76:	4620      	mov	r0, r4
 800bd78:	f001 ff22 	bl	800dbc0 <__lshift>
 800bd7c:	4606      	mov	r6, r0
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	f43f ae72 	beq.w	800ba68 <_strtod_l+0x490>
 800bd84:	9a05      	ldr	r2, [sp, #20]
 800bd86:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f001 ffa5 	bl	800dcd8 <__mdiff>
 800bd8e:	4605      	mov	r5, r0
 800bd90:	2800      	cmp	r0, #0
 800bd92:	f43f ae69 	beq.w	800ba68 <_strtod_l+0x490>
 800bd96:	68c3      	ldr	r3, [r0, #12]
 800bd98:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60c3      	str	r3, [r0, #12]
 800bd9e:	4631      	mov	r1, r6
 800bda0:	f001 ff7e 	bl	800dca0 <__mcmp>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	da60      	bge.n	800be6a <_strtod_l+0x892>
 800bda8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdaa:	ea53 030a 	orrs.w	r3, r3, sl
 800bdae:	f040 8082 	bne.w	800beb6 <_strtod_l+0x8de>
 800bdb2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d17d      	bne.n	800beb6 <_strtod_l+0x8de>
 800bdba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bdbe:	0d1b      	lsrs	r3, r3, #20
 800bdc0:	051b      	lsls	r3, r3, #20
 800bdc2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bdc6:	d976      	bls.n	800beb6 <_strtod_l+0x8de>
 800bdc8:	696b      	ldr	r3, [r5, #20]
 800bdca:	b913      	cbnz	r3, 800bdd2 <_strtod_l+0x7fa>
 800bdcc:	692b      	ldr	r3, [r5, #16]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	dd71      	ble.n	800beb6 <_strtod_l+0x8de>
 800bdd2:	4629      	mov	r1, r5
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f001 fef2 	bl	800dbc0 <__lshift>
 800bddc:	4631      	mov	r1, r6
 800bdde:	4605      	mov	r5, r0
 800bde0:	f001 ff5e 	bl	800dca0 <__mcmp>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	dd66      	ble.n	800beb6 <_strtod_l+0x8de>
 800bde8:	9904      	ldr	r1, [sp, #16]
 800bdea:	4a53      	ldr	r2, [pc, #332]	; (800bf38 <_strtod_l+0x960>)
 800bdec:	465b      	mov	r3, fp
 800bdee:	2900      	cmp	r1, #0
 800bdf0:	f000 8081 	beq.w	800bef6 <_strtod_l+0x91e>
 800bdf4:	ea02 010b 	and.w	r1, r2, fp
 800bdf8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bdfc:	dc7b      	bgt.n	800bef6 <_strtod_l+0x91e>
 800bdfe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800be02:	f77f aea9 	ble.w	800bb58 <_strtod_l+0x580>
 800be06:	4b4d      	ldr	r3, [pc, #308]	; (800bf3c <_strtod_l+0x964>)
 800be08:	4650      	mov	r0, sl
 800be0a:	4659      	mov	r1, fp
 800be0c:	2200      	movs	r2, #0
 800be0e:	f7f4 fbfb 	bl	8000608 <__aeabi_dmul>
 800be12:	460b      	mov	r3, r1
 800be14:	4303      	orrs	r3, r0
 800be16:	bf08      	it	eq
 800be18:	2322      	moveq	r3, #34	; 0x22
 800be1a:	4682      	mov	sl, r0
 800be1c:	468b      	mov	fp, r1
 800be1e:	bf08      	it	eq
 800be20:	6023      	streq	r3, [r4, #0]
 800be22:	e62b      	b.n	800ba7c <_strtod_l+0x4a4>
 800be24:	f04f 32ff 	mov.w	r2, #4294967295
 800be28:	fa02 f303 	lsl.w	r3, r2, r3
 800be2c:	ea03 0a0a 	and.w	sl, r3, sl
 800be30:	e6e3      	b.n	800bbfa <_strtod_l+0x622>
 800be32:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800be36:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800be3a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800be3e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800be42:	fa01 f308 	lsl.w	r3, r1, r8
 800be46:	9308      	str	r3, [sp, #32]
 800be48:	910d      	str	r1, [sp, #52]	; 0x34
 800be4a:	e746      	b.n	800bcda <_strtod_l+0x702>
 800be4c:	2300      	movs	r3, #0
 800be4e:	9308      	str	r3, [sp, #32]
 800be50:	2301      	movs	r3, #1
 800be52:	930d      	str	r3, [sp, #52]	; 0x34
 800be54:	e741      	b.n	800bcda <_strtod_l+0x702>
 800be56:	9918      	ldr	r1, [sp, #96]	; 0x60
 800be58:	4642      	mov	r2, r8
 800be5a:	4620      	mov	r0, r4
 800be5c:	f001 feb0 	bl	800dbc0 <__lshift>
 800be60:	9018      	str	r0, [sp, #96]	; 0x60
 800be62:	2800      	cmp	r0, #0
 800be64:	f47f af6b 	bne.w	800bd3e <_strtod_l+0x766>
 800be68:	e5fe      	b.n	800ba68 <_strtod_l+0x490>
 800be6a:	465f      	mov	r7, fp
 800be6c:	d16e      	bne.n	800bf4c <_strtod_l+0x974>
 800be6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be74:	b342      	cbz	r2, 800bec8 <_strtod_l+0x8f0>
 800be76:	4a32      	ldr	r2, [pc, #200]	; (800bf40 <_strtod_l+0x968>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d128      	bne.n	800bece <_strtod_l+0x8f6>
 800be7c:	9b04      	ldr	r3, [sp, #16]
 800be7e:	4651      	mov	r1, sl
 800be80:	b1eb      	cbz	r3, 800bebe <_strtod_l+0x8e6>
 800be82:	4b2d      	ldr	r3, [pc, #180]	; (800bf38 <_strtod_l+0x960>)
 800be84:	403b      	ands	r3, r7
 800be86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800be8a:	f04f 32ff 	mov.w	r2, #4294967295
 800be8e:	d819      	bhi.n	800bec4 <_strtod_l+0x8ec>
 800be90:	0d1b      	lsrs	r3, r3, #20
 800be92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800be96:	fa02 f303 	lsl.w	r3, r2, r3
 800be9a:	4299      	cmp	r1, r3
 800be9c:	d117      	bne.n	800bece <_strtod_l+0x8f6>
 800be9e:	4b29      	ldr	r3, [pc, #164]	; (800bf44 <_strtod_l+0x96c>)
 800bea0:	429f      	cmp	r7, r3
 800bea2:	d102      	bne.n	800beaa <_strtod_l+0x8d2>
 800bea4:	3101      	adds	r1, #1
 800bea6:	f43f addf 	beq.w	800ba68 <_strtod_l+0x490>
 800beaa:	4b23      	ldr	r3, [pc, #140]	; (800bf38 <_strtod_l+0x960>)
 800beac:	403b      	ands	r3, r7
 800beae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800beb2:	f04f 0a00 	mov.w	sl, #0
 800beb6:	9b04      	ldr	r3, [sp, #16]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1a4      	bne.n	800be06 <_strtod_l+0x82e>
 800bebc:	e5de      	b.n	800ba7c <_strtod_l+0x4a4>
 800bebe:	f04f 33ff 	mov.w	r3, #4294967295
 800bec2:	e7ea      	b.n	800be9a <_strtod_l+0x8c2>
 800bec4:	4613      	mov	r3, r2
 800bec6:	e7e8      	b.n	800be9a <_strtod_l+0x8c2>
 800bec8:	ea53 030a 	orrs.w	r3, r3, sl
 800becc:	d08c      	beq.n	800bde8 <_strtod_l+0x810>
 800bece:	9b08      	ldr	r3, [sp, #32]
 800bed0:	b1db      	cbz	r3, 800bf0a <_strtod_l+0x932>
 800bed2:	423b      	tst	r3, r7
 800bed4:	d0ef      	beq.n	800beb6 <_strtod_l+0x8de>
 800bed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bed8:	9a04      	ldr	r2, [sp, #16]
 800beda:	4650      	mov	r0, sl
 800bedc:	4659      	mov	r1, fp
 800bede:	b1c3      	cbz	r3, 800bf12 <_strtod_l+0x93a>
 800bee0:	f7ff fb5e 	bl	800b5a0 <sulp>
 800bee4:	4602      	mov	r2, r0
 800bee6:	460b      	mov	r3, r1
 800bee8:	ec51 0b18 	vmov	r0, r1, d8
 800beec:	f7f4 f9d6 	bl	800029c <__adddf3>
 800bef0:	4682      	mov	sl, r0
 800bef2:	468b      	mov	fp, r1
 800bef4:	e7df      	b.n	800beb6 <_strtod_l+0x8de>
 800bef6:	4013      	ands	r3, r2
 800bef8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800befc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bf00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bf04:	f04f 3aff 	mov.w	sl, #4294967295
 800bf08:	e7d5      	b.n	800beb6 <_strtod_l+0x8de>
 800bf0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf0c:	ea13 0f0a 	tst.w	r3, sl
 800bf10:	e7e0      	b.n	800bed4 <_strtod_l+0x8fc>
 800bf12:	f7ff fb45 	bl	800b5a0 <sulp>
 800bf16:	4602      	mov	r2, r0
 800bf18:	460b      	mov	r3, r1
 800bf1a:	ec51 0b18 	vmov	r0, r1, d8
 800bf1e:	f7f4 f9bb 	bl	8000298 <__aeabi_dsub>
 800bf22:	2200      	movs	r2, #0
 800bf24:	2300      	movs	r3, #0
 800bf26:	4682      	mov	sl, r0
 800bf28:	468b      	mov	fp, r1
 800bf2a:	f7f4 fdd5 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	d0c1      	beq.n	800beb6 <_strtod_l+0x8de>
 800bf32:	e611      	b.n	800bb58 <_strtod_l+0x580>
 800bf34:	fffffc02 	.word	0xfffffc02
 800bf38:	7ff00000 	.word	0x7ff00000
 800bf3c:	39500000 	.word	0x39500000
 800bf40:	000fffff 	.word	0x000fffff
 800bf44:	7fefffff 	.word	0x7fefffff
 800bf48:	08010de8 	.word	0x08010de8
 800bf4c:	4631      	mov	r1, r6
 800bf4e:	4628      	mov	r0, r5
 800bf50:	f002 f824 	bl	800df9c <__ratio>
 800bf54:	ec59 8b10 	vmov	r8, r9, d0
 800bf58:	ee10 0a10 	vmov	r0, s0
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf62:	4649      	mov	r1, r9
 800bf64:	f7f4 fdcc 	bl	8000b00 <__aeabi_dcmple>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	d07a      	beq.n	800c062 <_strtod_l+0xa8a>
 800bf6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d04a      	beq.n	800c008 <_strtod_l+0xa30>
 800bf72:	4b95      	ldr	r3, [pc, #596]	; (800c1c8 <_strtod_l+0xbf0>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bf7a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c1c8 <_strtod_l+0xbf0>
 800bf7e:	f04f 0800 	mov.w	r8, #0
 800bf82:	4b92      	ldr	r3, [pc, #584]	; (800c1cc <_strtod_l+0xbf4>)
 800bf84:	403b      	ands	r3, r7
 800bf86:	930d      	str	r3, [sp, #52]	; 0x34
 800bf88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf8a:	4b91      	ldr	r3, [pc, #580]	; (800c1d0 <_strtod_l+0xbf8>)
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	f040 80b0 	bne.w	800c0f2 <_strtod_l+0xb1a>
 800bf92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf96:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bf9a:	ec4b ab10 	vmov	d0, sl, fp
 800bf9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bfa2:	f001 ff23 	bl	800ddec <__ulp>
 800bfa6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bfaa:	ec53 2b10 	vmov	r2, r3, d0
 800bfae:	f7f4 fb2b 	bl	8000608 <__aeabi_dmul>
 800bfb2:	4652      	mov	r2, sl
 800bfb4:	465b      	mov	r3, fp
 800bfb6:	f7f4 f971 	bl	800029c <__adddf3>
 800bfba:	460b      	mov	r3, r1
 800bfbc:	4983      	ldr	r1, [pc, #524]	; (800c1cc <_strtod_l+0xbf4>)
 800bfbe:	4a85      	ldr	r2, [pc, #532]	; (800c1d4 <_strtod_l+0xbfc>)
 800bfc0:	4019      	ands	r1, r3
 800bfc2:	4291      	cmp	r1, r2
 800bfc4:	4682      	mov	sl, r0
 800bfc6:	d960      	bls.n	800c08a <_strtod_l+0xab2>
 800bfc8:	ee18 3a90 	vmov	r3, s17
 800bfcc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d104      	bne.n	800bfde <_strtod_l+0xa06>
 800bfd4:	ee18 3a10 	vmov	r3, s16
 800bfd8:	3301      	adds	r3, #1
 800bfda:	f43f ad45 	beq.w	800ba68 <_strtod_l+0x490>
 800bfde:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c1e0 <_strtod_l+0xc08>
 800bfe2:	f04f 3aff 	mov.w	sl, #4294967295
 800bfe6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f001 fbcd 	bl	800d788 <_Bfree>
 800bfee:	9905      	ldr	r1, [sp, #20]
 800bff0:	4620      	mov	r0, r4
 800bff2:	f001 fbc9 	bl	800d788 <_Bfree>
 800bff6:	4631      	mov	r1, r6
 800bff8:	4620      	mov	r0, r4
 800bffa:	f001 fbc5 	bl	800d788 <_Bfree>
 800bffe:	4629      	mov	r1, r5
 800c000:	4620      	mov	r0, r4
 800c002:	f001 fbc1 	bl	800d788 <_Bfree>
 800c006:	e61a      	b.n	800bc3e <_strtod_l+0x666>
 800c008:	f1ba 0f00 	cmp.w	sl, #0
 800c00c:	d11b      	bne.n	800c046 <_strtod_l+0xa6e>
 800c00e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c012:	b9f3      	cbnz	r3, 800c052 <_strtod_l+0xa7a>
 800c014:	4b6c      	ldr	r3, [pc, #432]	; (800c1c8 <_strtod_l+0xbf0>)
 800c016:	2200      	movs	r2, #0
 800c018:	4640      	mov	r0, r8
 800c01a:	4649      	mov	r1, r9
 800c01c:	f7f4 fd66 	bl	8000aec <__aeabi_dcmplt>
 800c020:	b9d0      	cbnz	r0, 800c058 <_strtod_l+0xa80>
 800c022:	4640      	mov	r0, r8
 800c024:	4649      	mov	r1, r9
 800c026:	4b6c      	ldr	r3, [pc, #432]	; (800c1d8 <_strtod_l+0xc00>)
 800c028:	2200      	movs	r2, #0
 800c02a:	f7f4 faed 	bl	8000608 <__aeabi_dmul>
 800c02e:	4680      	mov	r8, r0
 800c030:	4689      	mov	r9, r1
 800c032:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c036:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c03a:	9315      	str	r3, [sp, #84]	; 0x54
 800c03c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c040:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c044:	e79d      	b.n	800bf82 <_strtod_l+0x9aa>
 800c046:	f1ba 0f01 	cmp.w	sl, #1
 800c04a:	d102      	bne.n	800c052 <_strtod_l+0xa7a>
 800c04c:	2f00      	cmp	r7, #0
 800c04e:	f43f ad83 	beq.w	800bb58 <_strtod_l+0x580>
 800c052:	4b62      	ldr	r3, [pc, #392]	; (800c1dc <_strtod_l+0xc04>)
 800c054:	2200      	movs	r2, #0
 800c056:	e78e      	b.n	800bf76 <_strtod_l+0x99e>
 800c058:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c1d8 <_strtod_l+0xc00>
 800c05c:	f04f 0800 	mov.w	r8, #0
 800c060:	e7e7      	b.n	800c032 <_strtod_l+0xa5a>
 800c062:	4b5d      	ldr	r3, [pc, #372]	; (800c1d8 <_strtod_l+0xc00>)
 800c064:	4640      	mov	r0, r8
 800c066:	4649      	mov	r1, r9
 800c068:	2200      	movs	r2, #0
 800c06a:	f7f4 facd 	bl	8000608 <__aeabi_dmul>
 800c06e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c070:	4680      	mov	r8, r0
 800c072:	4689      	mov	r9, r1
 800c074:	b933      	cbnz	r3, 800c084 <_strtod_l+0xaac>
 800c076:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c07a:	900e      	str	r0, [sp, #56]	; 0x38
 800c07c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c07e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c082:	e7dd      	b.n	800c040 <_strtod_l+0xa68>
 800c084:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c088:	e7f9      	b.n	800c07e <_strtod_l+0xaa6>
 800c08a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c08e:	9b04      	ldr	r3, [sp, #16]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d1a8      	bne.n	800bfe6 <_strtod_l+0xa0e>
 800c094:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c098:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c09a:	0d1b      	lsrs	r3, r3, #20
 800c09c:	051b      	lsls	r3, r3, #20
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d1a1      	bne.n	800bfe6 <_strtod_l+0xa0e>
 800c0a2:	4640      	mov	r0, r8
 800c0a4:	4649      	mov	r1, r9
 800c0a6:	f7f4 fe0f 	bl	8000cc8 <__aeabi_d2lz>
 800c0aa:	f7f4 fa7f 	bl	80005ac <__aeabi_l2d>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	4640      	mov	r0, r8
 800c0b4:	4649      	mov	r1, r9
 800c0b6:	f7f4 f8ef 	bl	8000298 <__aeabi_dsub>
 800c0ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0c0:	ea43 030a 	orr.w	r3, r3, sl
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	4680      	mov	r8, r0
 800c0c8:	4689      	mov	r9, r1
 800c0ca:	d055      	beq.n	800c178 <_strtod_l+0xba0>
 800c0cc:	a336      	add	r3, pc, #216	; (adr r3, 800c1a8 <_strtod_l+0xbd0>)
 800c0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d2:	f7f4 fd0b 	bl	8000aec <__aeabi_dcmplt>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	f47f acd0 	bne.w	800ba7c <_strtod_l+0x4a4>
 800c0dc:	a334      	add	r3, pc, #208	; (adr r3, 800c1b0 <_strtod_l+0xbd8>)
 800c0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e2:	4640      	mov	r0, r8
 800c0e4:	4649      	mov	r1, r9
 800c0e6:	f7f4 fd1f 	bl	8000b28 <__aeabi_dcmpgt>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	f43f af7b 	beq.w	800bfe6 <_strtod_l+0xa0e>
 800c0f0:	e4c4      	b.n	800ba7c <_strtod_l+0x4a4>
 800c0f2:	9b04      	ldr	r3, [sp, #16]
 800c0f4:	b333      	cbz	r3, 800c144 <_strtod_l+0xb6c>
 800c0f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c0fc:	d822      	bhi.n	800c144 <_strtod_l+0xb6c>
 800c0fe:	a32e      	add	r3, pc, #184	; (adr r3, 800c1b8 <_strtod_l+0xbe0>)
 800c100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c104:	4640      	mov	r0, r8
 800c106:	4649      	mov	r1, r9
 800c108:	f7f4 fcfa 	bl	8000b00 <__aeabi_dcmple>
 800c10c:	b1a0      	cbz	r0, 800c138 <_strtod_l+0xb60>
 800c10e:	4649      	mov	r1, r9
 800c110:	4640      	mov	r0, r8
 800c112:	f7f4 fd51 	bl	8000bb8 <__aeabi_d2uiz>
 800c116:	2801      	cmp	r0, #1
 800c118:	bf38      	it	cc
 800c11a:	2001      	movcc	r0, #1
 800c11c:	f7f4 f9fa 	bl	8000514 <__aeabi_ui2d>
 800c120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c122:	4680      	mov	r8, r0
 800c124:	4689      	mov	r9, r1
 800c126:	bb23      	cbnz	r3, 800c172 <_strtod_l+0xb9a>
 800c128:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c12c:	9010      	str	r0, [sp, #64]	; 0x40
 800c12e:	9311      	str	r3, [sp, #68]	; 0x44
 800c130:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c134:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c13a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c13c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c140:	1a9b      	subs	r3, r3, r2
 800c142:	9309      	str	r3, [sp, #36]	; 0x24
 800c144:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c148:	eeb0 0a48 	vmov.f32	s0, s16
 800c14c:	eef0 0a68 	vmov.f32	s1, s17
 800c150:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c154:	f001 fe4a 	bl	800ddec <__ulp>
 800c158:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c15c:	ec53 2b10 	vmov	r2, r3, d0
 800c160:	f7f4 fa52 	bl	8000608 <__aeabi_dmul>
 800c164:	ec53 2b18 	vmov	r2, r3, d8
 800c168:	f7f4 f898 	bl	800029c <__adddf3>
 800c16c:	4682      	mov	sl, r0
 800c16e:	468b      	mov	fp, r1
 800c170:	e78d      	b.n	800c08e <_strtod_l+0xab6>
 800c172:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c176:	e7db      	b.n	800c130 <_strtod_l+0xb58>
 800c178:	a311      	add	r3, pc, #68	; (adr r3, 800c1c0 <_strtod_l+0xbe8>)
 800c17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17e:	f7f4 fcb5 	bl	8000aec <__aeabi_dcmplt>
 800c182:	e7b2      	b.n	800c0ea <_strtod_l+0xb12>
 800c184:	2300      	movs	r3, #0
 800c186:	930a      	str	r3, [sp, #40]	; 0x28
 800c188:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c18a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c18c:	6013      	str	r3, [r2, #0]
 800c18e:	f7ff ba6b 	b.w	800b668 <_strtod_l+0x90>
 800c192:	2a65      	cmp	r2, #101	; 0x65
 800c194:	f43f ab5f 	beq.w	800b856 <_strtod_l+0x27e>
 800c198:	2a45      	cmp	r2, #69	; 0x45
 800c19a:	f43f ab5c 	beq.w	800b856 <_strtod_l+0x27e>
 800c19e:	2301      	movs	r3, #1
 800c1a0:	f7ff bb94 	b.w	800b8cc <_strtod_l+0x2f4>
 800c1a4:	f3af 8000 	nop.w
 800c1a8:	94a03595 	.word	0x94a03595
 800c1ac:	3fdfffff 	.word	0x3fdfffff
 800c1b0:	35afe535 	.word	0x35afe535
 800c1b4:	3fe00000 	.word	0x3fe00000
 800c1b8:	ffc00000 	.word	0xffc00000
 800c1bc:	41dfffff 	.word	0x41dfffff
 800c1c0:	94a03595 	.word	0x94a03595
 800c1c4:	3fcfffff 	.word	0x3fcfffff
 800c1c8:	3ff00000 	.word	0x3ff00000
 800c1cc:	7ff00000 	.word	0x7ff00000
 800c1d0:	7fe00000 	.word	0x7fe00000
 800c1d4:	7c9fffff 	.word	0x7c9fffff
 800c1d8:	3fe00000 	.word	0x3fe00000
 800c1dc:	bff00000 	.word	0xbff00000
 800c1e0:	7fefffff 	.word	0x7fefffff

0800c1e4 <_strtod_r>:
 800c1e4:	4b01      	ldr	r3, [pc, #4]	; (800c1ec <_strtod_r+0x8>)
 800c1e6:	f7ff b9f7 	b.w	800b5d8 <_strtod_l>
 800c1ea:	bf00      	nop
 800c1ec:	2000029c 	.word	0x2000029c

0800c1f0 <_strtol_l.constprop.0>:
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f6:	d001      	beq.n	800c1fc <_strtol_l.constprop.0+0xc>
 800c1f8:	2b24      	cmp	r3, #36	; 0x24
 800c1fa:	d906      	bls.n	800c20a <_strtol_l.constprop.0+0x1a>
 800c1fc:	f7fe faf0 	bl	800a7e0 <__errno>
 800c200:	2316      	movs	r3, #22
 800c202:	6003      	str	r3, [r0, #0]
 800c204:	2000      	movs	r0, #0
 800c206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c20a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c2f0 <_strtol_l.constprop.0+0x100>
 800c20e:	460d      	mov	r5, r1
 800c210:	462e      	mov	r6, r5
 800c212:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c216:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c21a:	f017 0708 	ands.w	r7, r7, #8
 800c21e:	d1f7      	bne.n	800c210 <_strtol_l.constprop.0+0x20>
 800c220:	2c2d      	cmp	r4, #45	; 0x2d
 800c222:	d132      	bne.n	800c28a <_strtol_l.constprop.0+0x9a>
 800c224:	782c      	ldrb	r4, [r5, #0]
 800c226:	2701      	movs	r7, #1
 800c228:	1cb5      	adds	r5, r6, #2
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d05b      	beq.n	800c2e6 <_strtol_l.constprop.0+0xf6>
 800c22e:	2b10      	cmp	r3, #16
 800c230:	d109      	bne.n	800c246 <_strtol_l.constprop.0+0x56>
 800c232:	2c30      	cmp	r4, #48	; 0x30
 800c234:	d107      	bne.n	800c246 <_strtol_l.constprop.0+0x56>
 800c236:	782c      	ldrb	r4, [r5, #0]
 800c238:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c23c:	2c58      	cmp	r4, #88	; 0x58
 800c23e:	d14d      	bne.n	800c2dc <_strtol_l.constprop.0+0xec>
 800c240:	786c      	ldrb	r4, [r5, #1]
 800c242:	2310      	movs	r3, #16
 800c244:	3502      	adds	r5, #2
 800c246:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c24a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c24e:	f04f 0c00 	mov.w	ip, #0
 800c252:	fbb8 f9f3 	udiv	r9, r8, r3
 800c256:	4666      	mov	r6, ip
 800c258:	fb03 8a19 	mls	sl, r3, r9, r8
 800c25c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c260:	f1be 0f09 	cmp.w	lr, #9
 800c264:	d816      	bhi.n	800c294 <_strtol_l.constprop.0+0xa4>
 800c266:	4674      	mov	r4, lr
 800c268:	42a3      	cmp	r3, r4
 800c26a:	dd24      	ble.n	800c2b6 <_strtol_l.constprop.0+0xc6>
 800c26c:	f1bc 0f00 	cmp.w	ip, #0
 800c270:	db1e      	blt.n	800c2b0 <_strtol_l.constprop.0+0xc0>
 800c272:	45b1      	cmp	r9, r6
 800c274:	d31c      	bcc.n	800c2b0 <_strtol_l.constprop.0+0xc0>
 800c276:	d101      	bne.n	800c27c <_strtol_l.constprop.0+0x8c>
 800c278:	45a2      	cmp	sl, r4
 800c27a:	db19      	blt.n	800c2b0 <_strtol_l.constprop.0+0xc0>
 800c27c:	fb06 4603 	mla	r6, r6, r3, r4
 800c280:	f04f 0c01 	mov.w	ip, #1
 800c284:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c288:	e7e8      	b.n	800c25c <_strtol_l.constprop.0+0x6c>
 800c28a:	2c2b      	cmp	r4, #43	; 0x2b
 800c28c:	bf04      	itt	eq
 800c28e:	782c      	ldrbeq	r4, [r5, #0]
 800c290:	1cb5      	addeq	r5, r6, #2
 800c292:	e7ca      	b.n	800c22a <_strtol_l.constprop.0+0x3a>
 800c294:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c298:	f1be 0f19 	cmp.w	lr, #25
 800c29c:	d801      	bhi.n	800c2a2 <_strtol_l.constprop.0+0xb2>
 800c29e:	3c37      	subs	r4, #55	; 0x37
 800c2a0:	e7e2      	b.n	800c268 <_strtol_l.constprop.0+0x78>
 800c2a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c2a6:	f1be 0f19 	cmp.w	lr, #25
 800c2aa:	d804      	bhi.n	800c2b6 <_strtol_l.constprop.0+0xc6>
 800c2ac:	3c57      	subs	r4, #87	; 0x57
 800c2ae:	e7db      	b.n	800c268 <_strtol_l.constprop.0+0x78>
 800c2b0:	f04f 3cff 	mov.w	ip, #4294967295
 800c2b4:	e7e6      	b.n	800c284 <_strtol_l.constprop.0+0x94>
 800c2b6:	f1bc 0f00 	cmp.w	ip, #0
 800c2ba:	da05      	bge.n	800c2c8 <_strtol_l.constprop.0+0xd8>
 800c2bc:	2322      	movs	r3, #34	; 0x22
 800c2be:	6003      	str	r3, [r0, #0]
 800c2c0:	4646      	mov	r6, r8
 800c2c2:	b942      	cbnz	r2, 800c2d6 <_strtol_l.constprop.0+0xe6>
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	e79e      	b.n	800c206 <_strtol_l.constprop.0+0x16>
 800c2c8:	b107      	cbz	r7, 800c2cc <_strtol_l.constprop.0+0xdc>
 800c2ca:	4276      	negs	r6, r6
 800c2cc:	2a00      	cmp	r2, #0
 800c2ce:	d0f9      	beq.n	800c2c4 <_strtol_l.constprop.0+0xd4>
 800c2d0:	f1bc 0f00 	cmp.w	ip, #0
 800c2d4:	d000      	beq.n	800c2d8 <_strtol_l.constprop.0+0xe8>
 800c2d6:	1e69      	subs	r1, r5, #1
 800c2d8:	6011      	str	r1, [r2, #0]
 800c2da:	e7f3      	b.n	800c2c4 <_strtol_l.constprop.0+0xd4>
 800c2dc:	2430      	movs	r4, #48	; 0x30
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1b1      	bne.n	800c246 <_strtol_l.constprop.0+0x56>
 800c2e2:	2308      	movs	r3, #8
 800c2e4:	e7af      	b.n	800c246 <_strtol_l.constprop.0+0x56>
 800c2e6:	2c30      	cmp	r4, #48	; 0x30
 800c2e8:	d0a5      	beq.n	800c236 <_strtol_l.constprop.0+0x46>
 800c2ea:	230a      	movs	r3, #10
 800c2ec:	e7ab      	b.n	800c246 <_strtol_l.constprop.0+0x56>
 800c2ee:	bf00      	nop
 800c2f0:	08010e11 	.word	0x08010e11

0800c2f4 <_strtol_r>:
 800c2f4:	f7ff bf7c 	b.w	800c1f0 <_strtol_l.constprop.0>

0800c2f8 <quorem>:
 800c2f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fc:	6903      	ldr	r3, [r0, #16]
 800c2fe:	690c      	ldr	r4, [r1, #16]
 800c300:	42a3      	cmp	r3, r4
 800c302:	4607      	mov	r7, r0
 800c304:	f2c0 8081 	blt.w	800c40a <quorem+0x112>
 800c308:	3c01      	subs	r4, #1
 800c30a:	f101 0814 	add.w	r8, r1, #20
 800c30e:	f100 0514 	add.w	r5, r0, #20
 800c312:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c316:	9301      	str	r3, [sp, #4]
 800c318:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c31c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c320:	3301      	adds	r3, #1
 800c322:	429a      	cmp	r2, r3
 800c324:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c328:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c32c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c330:	d331      	bcc.n	800c396 <quorem+0x9e>
 800c332:	f04f 0e00 	mov.w	lr, #0
 800c336:	4640      	mov	r0, r8
 800c338:	46ac      	mov	ip, r5
 800c33a:	46f2      	mov	sl, lr
 800c33c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c340:	b293      	uxth	r3, r2
 800c342:	fb06 e303 	mla	r3, r6, r3, lr
 800c346:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	ebaa 0303 	sub.w	r3, sl, r3
 800c350:	f8dc a000 	ldr.w	sl, [ip]
 800c354:	0c12      	lsrs	r2, r2, #16
 800c356:	fa13 f38a 	uxtah	r3, r3, sl
 800c35a:	fb06 e202 	mla	r2, r6, r2, lr
 800c35e:	9300      	str	r3, [sp, #0]
 800c360:	9b00      	ldr	r3, [sp, #0]
 800c362:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c366:	b292      	uxth	r2, r2
 800c368:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c36c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c370:	f8bd 3000 	ldrh.w	r3, [sp]
 800c374:	4581      	cmp	r9, r0
 800c376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c37a:	f84c 3b04 	str.w	r3, [ip], #4
 800c37e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c382:	d2db      	bcs.n	800c33c <quorem+0x44>
 800c384:	f855 300b 	ldr.w	r3, [r5, fp]
 800c388:	b92b      	cbnz	r3, 800c396 <quorem+0x9e>
 800c38a:	9b01      	ldr	r3, [sp, #4]
 800c38c:	3b04      	subs	r3, #4
 800c38e:	429d      	cmp	r5, r3
 800c390:	461a      	mov	r2, r3
 800c392:	d32e      	bcc.n	800c3f2 <quorem+0xfa>
 800c394:	613c      	str	r4, [r7, #16]
 800c396:	4638      	mov	r0, r7
 800c398:	f001 fc82 	bl	800dca0 <__mcmp>
 800c39c:	2800      	cmp	r0, #0
 800c39e:	db24      	blt.n	800c3ea <quorem+0xf2>
 800c3a0:	3601      	adds	r6, #1
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f04f 0c00 	mov.w	ip, #0
 800c3a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c3ac:	f8d0 e000 	ldr.w	lr, [r0]
 800c3b0:	b293      	uxth	r3, r2
 800c3b2:	ebac 0303 	sub.w	r3, ip, r3
 800c3b6:	0c12      	lsrs	r2, r2, #16
 800c3b8:	fa13 f38e 	uxtah	r3, r3, lr
 800c3bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c3c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3ca:	45c1      	cmp	r9, r8
 800c3cc:	f840 3b04 	str.w	r3, [r0], #4
 800c3d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c3d4:	d2e8      	bcs.n	800c3a8 <quorem+0xb0>
 800c3d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3de:	b922      	cbnz	r2, 800c3ea <quorem+0xf2>
 800c3e0:	3b04      	subs	r3, #4
 800c3e2:	429d      	cmp	r5, r3
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	d30a      	bcc.n	800c3fe <quorem+0x106>
 800c3e8:	613c      	str	r4, [r7, #16]
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	b003      	add	sp, #12
 800c3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f2:	6812      	ldr	r2, [r2, #0]
 800c3f4:	3b04      	subs	r3, #4
 800c3f6:	2a00      	cmp	r2, #0
 800c3f8:	d1cc      	bne.n	800c394 <quorem+0x9c>
 800c3fa:	3c01      	subs	r4, #1
 800c3fc:	e7c7      	b.n	800c38e <quorem+0x96>
 800c3fe:	6812      	ldr	r2, [r2, #0]
 800c400:	3b04      	subs	r3, #4
 800c402:	2a00      	cmp	r2, #0
 800c404:	d1f0      	bne.n	800c3e8 <quorem+0xf0>
 800c406:	3c01      	subs	r4, #1
 800c408:	e7eb      	b.n	800c3e2 <quorem+0xea>
 800c40a:	2000      	movs	r0, #0
 800c40c:	e7ee      	b.n	800c3ec <quorem+0xf4>
	...

0800c410 <_dtoa_r>:
 800c410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	ed2d 8b04 	vpush	{d8-d9}
 800c418:	ec57 6b10 	vmov	r6, r7, d0
 800c41c:	b093      	sub	sp, #76	; 0x4c
 800c41e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c420:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c424:	9106      	str	r1, [sp, #24]
 800c426:	ee10 aa10 	vmov	sl, s0
 800c42a:	4604      	mov	r4, r0
 800c42c:	9209      	str	r2, [sp, #36]	; 0x24
 800c42e:	930c      	str	r3, [sp, #48]	; 0x30
 800c430:	46bb      	mov	fp, r7
 800c432:	b975      	cbnz	r5, 800c452 <_dtoa_r+0x42>
 800c434:	2010      	movs	r0, #16
 800c436:	f001 f94d 	bl	800d6d4 <malloc>
 800c43a:	4602      	mov	r2, r0
 800c43c:	6260      	str	r0, [r4, #36]	; 0x24
 800c43e:	b920      	cbnz	r0, 800c44a <_dtoa_r+0x3a>
 800c440:	4ba7      	ldr	r3, [pc, #668]	; (800c6e0 <_dtoa_r+0x2d0>)
 800c442:	21ea      	movs	r1, #234	; 0xea
 800c444:	48a7      	ldr	r0, [pc, #668]	; (800c6e4 <_dtoa_r+0x2d4>)
 800c446:	f002 f8ad 	bl	800e5a4 <__assert_func>
 800c44a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c44e:	6005      	str	r5, [r0, #0]
 800c450:	60c5      	str	r5, [r0, #12]
 800c452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c454:	6819      	ldr	r1, [r3, #0]
 800c456:	b151      	cbz	r1, 800c46e <_dtoa_r+0x5e>
 800c458:	685a      	ldr	r2, [r3, #4]
 800c45a:	604a      	str	r2, [r1, #4]
 800c45c:	2301      	movs	r3, #1
 800c45e:	4093      	lsls	r3, r2
 800c460:	608b      	str	r3, [r1, #8]
 800c462:	4620      	mov	r0, r4
 800c464:	f001 f990 	bl	800d788 <_Bfree>
 800c468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c46a:	2200      	movs	r2, #0
 800c46c:	601a      	str	r2, [r3, #0]
 800c46e:	1e3b      	subs	r3, r7, #0
 800c470:	bfaa      	itet	ge
 800c472:	2300      	movge	r3, #0
 800c474:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c478:	f8c8 3000 	strge.w	r3, [r8]
 800c47c:	4b9a      	ldr	r3, [pc, #616]	; (800c6e8 <_dtoa_r+0x2d8>)
 800c47e:	bfbc      	itt	lt
 800c480:	2201      	movlt	r2, #1
 800c482:	f8c8 2000 	strlt.w	r2, [r8]
 800c486:	ea33 030b 	bics.w	r3, r3, fp
 800c48a:	d11b      	bne.n	800c4c4 <_dtoa_r+0xb4>
 800c48c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c48e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c492:	6013      	str	r3, [r2, #0]
 800c494:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c498:	4333      	orrs	r3, r6
 800c49a:	f000 8592 	beq.w	800cfc2 <_dtoa_r+0xbb2>
 800c49e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4a0:	b963      	cbnz	r3, 800c4bc <_dtoa_r+0xac>
 800c4a2:	4b92      	ldr	r3, [pc, #584]	; (800c6ec <_dtoa_r+0x2dc>)
 800c4a4:	e022      	b.n	800c4ec <_dtoa_r+0xdc>
 800c4a6:	4b92      	ldr	r3, [pc, #584]	; (800c6f0 <_dtoa_r+0x2e0>)
 800c4a8:	9301      	str	r3, [sp, #4]
 800c4aa:	3308      	adds	r3, #8
 800c4ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c4ae:	6013      	str	r3, [r2, #0]
 800c4b0:	9801      	ldr	r0, [sp, #4]
 800c4b2:	b013      	add	sp, #76	; 0x4c
 800c4b4:	ecbd 8b04 	vpop	{d8-d9}
 800c4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4bc:	4b8b      	ldr	r3, [pc, #556]	; (800c6ec <_dtoa_r+0x2dc>)
 800c4be:	9301      	str	r3, [sp, #4]
 800c4c0:	3303      	adds	r3, #3
 800c4c2:	e7f3      	b.n	800c4ac <_dtoa_r+0x9c>
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	4650      	mov	r0, sl
 800c4ca:	4659      	mov	r1, fp
 800c4cc:	f7f4 fb04 	bl	8000ad8 <__aeabi_dcmpeq>
 800c4d0:	ec4b ab19 	vmov	d9, sl, fp
 800c4d4:	4680      	mov	r8, r0
 800c4d6:	b158      	cbz	r0, 800c4f0 <_dtoa_r+0xe0>
 800c4d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4da:	2301      	movs	r3, #1
 800c4dc:	6013      	str	r3, [r2, #0]
 800c4de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f000 856b 	beq.w	800cfbc <_dtoa_r+0xbac>
 800c4e6:	4883      	ldr	r0, [pc, #524]	; (800c6f4 <_dtoa_r+0x2e4>)
 800c4e8:	6018      	str	r0, [r3, #0]
 800c4ea:	1e43      	subs	r3, r0, #1
 800c4ec:	9301      	str	r3, [sp, #4]
 800c4ee:	e7df      	b.n	800c4b0 <_dtoa_r+0xa0>
 800c4f0:	ec4b ab10 	vmov	d0, sl, fp
 800c4f4:	aa10      	add	r2, sp, #64	; 0x40
 800c4f6:	a911      	add	r1, sp, #68	; 0x44
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	f001 fcf3 	bl	800dee4 <__d2b>
 800c4fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c502:	ee08 0a10 	vmov	s16, r0
 800c506:	2d00      	cmp	r5, #0
 800c508:	f000 8084 	beq.w	800c614 <_dtoa_r+0x204>
 800c50c:	ee19 3a90 	vmov	r3, s19
 800c510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c514:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c518:	4656      	mov	r6, sl
 800c51a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c51e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c522:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c526:	4b74      	ldr	r3, [pc, #464]	; (800c6f8 <_dtoa_r+0x2e8>)
 800c528:	2200      	movs	r2, #0
 800c52a:	4630      	mov	r0, r6
 800c52c:	4639      	mov	r1, r7
 800c52e:	f7f3 feb3 	bl	8000298 <__aeabi_dsub>
 800c532:	a365      	add	r3, pc, #404	; (adr r3, 800c6c8 <_dtoa_r+0x2b8>)
 800c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c538:	f7f4 f866 	bl	8000608 <__aeabi_dmul>
 800c53c:	a364      	add	r3, pc, #400	; (adr r3, 800c6d0 <_dtoa_r+0x2c0>)
 800c53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c542:	f7f3 feab 	bl	800029c <__adddf3>
 800c546:	4606      	mov	r6, r0
 800c548:	4628      	mov	r0, r5
 800c54a:	460f      	mov	r7, r1
 800c54c:	f7f3 fff2 	bl	8000534 <__aeabi_i2d>
 800c550:	a361      	add	r3, pc, #388	; (adr r3, 800c6d8 <_dtoa_r+0x2c8>)
 800c552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c556:	f7f4 f857 	bl	8000608 <__aeabi_dmul>
 800c55a:	4602      	mov	r2, r0
 800c55c:	460b      	mov	r3, r1
 800c55e:	4630      	mov	r0, r6
 800c560:	4639      	mov	r1, r7
 800c562:	f7f3 fe9b 	bl	800029c <__adddf3>
 800c566:	4606      	mov	r6, r0
 800c568:	460f      	mov	r7, r1
 800c56a:	f7f4 fafd 	bl	8000b68 <__aeabi_d2iz>
 800c56e:	2200      	movs	r2, #0
 800c570:	9000      	str	r0, [sp, #0]
 800c572:	2300      	movs	r3, #0
 800c574:	4630      	mov	r0, r6
 800c576:	4639      	mov	r1, r7
 800c578:	f7f4 fab8 	bl	8000aec <__aeabi_dcmplt>
 800c57c:	b150      	cbz	r0, 800c594 <_dtoa_r+0x184>
 800c57e:	9800      	ldr	r0, [sp, #0]
 800c580:	f7f3 ffd8 	bl	8000534 <__aeabi_i2d>
 800c584:	4632      	mov	r2, r6
 800c586:	463b      	mov	r3, r7
 800c588:	f7f4 faa6 	bl	8000ad8 <__aeabi_dcmpeq>
 800c58c:	b910      	cbnz	r0, 800c594 <_dtoa_r+0x184>
 800c58e:	9b00      	ldr	r3, [sp, #0]
 800c590:	3b01      	subs	r3, #1
 800c592:	9300      	str	r3, [sp, #0]
 800c594:	9b00      	ldr	r3, [sp, #0]
 800c596:	2b16      	cmp	r3, #22
 800c598:	d85a      	bhi.n	800c650 <_dtoa_r+0x240>
 800c59a:	9a00      	ldr	r2, [sp, #0]
 800c59c:	4b57      	ldr	r3, [pc, #348]	; (800c6fc <_dtoa_r+0x2ec>)
 800c59e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a6:	ec51 0b19 	vmov	r0, r1, d9
 800c5aa:	f7f4 fa9f 	bl	8000aec <__aeabi_dcmplt>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d050      	beq.n	800c654 <_dtoa_r+0x244>
 800c5b2:	9b00      	ldr	r3, [sp, #0]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	9300      	str	r3, [sp, #0]
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5be:	1b5d      	subs	r5, r3, r5
 800c5c0:	1e6b      	subs	r3, r5, #1
 800c5c2:	9305      	str	r3, [sp, #20]
 800c5c4:	bf45      	ittet	mi
 800c5c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800c5ca:	9304      	strmi	r3, [sp, #16]
 800c5cc:	2300      	movpl	r3, #0
 800c5ce:	2300      	movmi	r3, #0
 800c5d0:	bf4c      	ite	mi
 800c5d2:	9305      	strmi	r3, [sp, #20]
 800c5d4:	9304      	strpl	r3, [sp, #16]
 800c5d6:	9b00      	ldr	r3, [sp, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	db3d      	blt.n	800c658 <_dtoa_r+0x248>
 800c5dc:	9b05      	ldr	r3, [sp, #20]
 800c5de:	9a00      	ldr	r2, [sp, #0]
 800c5e0:	920a      	str	r2, [sp, #40]	; 0x28
 800c5e2:	4413      	add	r3, r2
 800c5e4:	9305      	str	r3, [sp, #20]
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	9307      	str	r3, [sp, #28]
 800c5ea:	9b06      	ldr	r3, [sp, #24]
 800c5ec:	2b09      	cmp	r3, #9
 800c5ee:	f200 8089 	bhi.w	800c704 <_dtoa_r+0x2f4>
 800c5f2:	2b05      	cmp	r3, #5
 800c5f4:	bfc4      	itt	gt
 800c5f6:	3b04      	subgt	r3, #4
 800c5f8:	9306      	strgt	r3, [sp, #24]
 800c5fa:	9b06      	ldr	r3, [sp, #24]
 800c5fc:	f1a3 0302 	sub.w	r3, r3, #2
 800c600:	bfcc      	ite	gt
 800c602:	2500      	movgt	r5, #0
 800c604:	2501      	movle	r5, #1
 800c606:	2b03      	cmp	r3, #3
 800c608:	f200 8087 	bhi.w	800c71a <_dtoa_r+0x30a>
 800c60c:	e8df f003 	tbb	[pc, r3]
 800c610:	59383a2d 	.word	0x59383a2d
 800c614:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c618:	441d      	add	r5, r3
 800c61a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c61e:	2b20      	cmp	r3, #32
 800c620:	bfc1      	itttt	gt
 800c622:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c626:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c62a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c62e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c632:	bfda      	itte	le
 800c634:	f1c3 0320 	rsble	r3, r3, #32
 800c638:	fa06 f003 	lslle.w	r0, r6, r3
 800c63c:	4318      	orrgt	r0, r3
 800c63e:	f7f3 ff69 	bl	8000514 <__aeabi_ui2d>
 800c642:	2301      	movs	r3, #1
 800c644:	4606      	mov	r6, r0
 800c646:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c64a:	3d01      	subs	r5, #1
 800c64c:	930e      	str	r3, [sp, #56]	; 0x38
 800c64e:	e76a      	b.n	800c526 <_dtoa_r+0x116>
 800c650:	2301      	movs	r3, #1
 800c652:	e7b2      	b.n	800c5ba <_dtoa_r+0x1aa>
 800c654:	900b      	str	r0, [sp, #44]	; 0x2c
 800c656:	e7b1      	b.n	800c5bc <_dtoa_r+0x1ac>
 800c658:	9b04      	ldr	r3, [sp, #16]
 800c65a:	9a00      	ldr	r2, [sp, #0]
 800c65c:	1a9b      	subs	r3, r3, r2
 800c65e:	9304      	str	r3, [sp, #16]
 800c660:	4253      	negs	r3, r2
 800c662:	9307      	str	r3, [sp, #28]
 800c664:	2300      	movs	r3, #0
 800c666:	930a      	str	r3, [sp, #40]	; 0x28
 800c668:	e7bf      	b.n	800c5ea <_dtoa_r+0x1da>
 800c66a:	2300      	movs	r3, #0
 800c66c:	9308      	str	r3, [sp, #32]
 800c66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c670:	2b00      	cmp	r3, #0
 800c672:	dc55      	bgt.n	800c720 <_dtoa_r+0x310>
 800c674:	2301      	movs	r3, #1
 800c676:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c67a:	461a      	mov	r2, r3
 800c67c:	9209      	str	r2, [sp, #36]	; 0x24
 800c67e:	e00c      	b.n	800c69a <_dtoa_r+0x28a>
 800c680:	2301      	movs	r3, #1
 800c682:	e7f3      	b.n	800c66c <_dtoa_r+0x25c>
 800c684:	2300      	movs	r3, #0
 800c686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c688:	9308      	str	r3, [sp, #32]
 800c68a:	9b00      	ldr	r3, [sp, #0]
 800c68c:	4413      	add	r3, r2
 800c68e:	9302      	str	r3, [sp, #8]
 800c690:	3301      	adds	r3, #1
 800c692:	2b01      	cmp	r3, #1
 800c694:	9303      	str	r3, [sp, #12]
 800c696:	bfb8      	it	lt
 800c698:	2301      	movlt	r3, #1
 800c69a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c69c:	2200      	movs	r2, #0
 800c69e:	6042      	str	r2, [r0, #4]
 800c6a0:	2204      	movs	r2, #4
 800c6a2:	f102 0614 	add.w	r6, r2, #20
 800c6a6:	429e      	cmp	r6, r3
 800c6a8:	6841      	ldr	r1, [r0, #4]
 800c6aa:	d93d      	bls.n	800c728 <_dtoa_r+0x318>
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	f001 f82b 	bl	800d708 <_Balloc>
 800c6b2:	9001      	str	r0, [sp, #4]
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	d13b      	bne.n	800c730 <_dtoa_r+0x320>
 800c6b8:	4b11      	ldr	r3, [pc, #68]	; (800c700 <_dtoa_r+0x2f0>)
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c6c0:	e6c0      	b.n	800c444 <_dtoa_r+0x34>
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	e7df      	b.n	800c686 <_dtoa_r+0x276>
 800c6c6:	bf00      	nop
 800c6c8:	636f4361 	.word	0x636f4361
 800c6cc:	3fd287a7 	.word	0x3fd287a7
 800c6d0:	8b60c8b3 	.word	0x8b60c8b3
 800c6d4:	3fc68a28 	.word	0x3fc68a28
 800c6d8:	509f79fb 	.word	0x509f79fb
 800c6dc:	3fd34413 	.word	0x3fd34413
 800c6e0:	08010f1e 	.word	0x08010f1e
 800c6e4:	08010f35 	.word	0x08010f35
 800c6e8:	7ff00000 	.word	0x7ff00000
 800c6ec:	08010f1a 	.word	0x08010f1a
 800c6f0:	08010f11 	.word	0x08010f11
 800c6f4:	08010d91 	.word	0x08010d91
 800c6f8:	3ff80000 	.word	0x3ff80000
 800c6fc:	080110a0 	.word	0x080110a0
 800c700:	08010f90 	.word	0x08010f90
 800c704:	2501      	movs	r5, #1
 800c706:	2300      	movs	r3, #0
 800c708:	9306      	str	r3, [sp, #24]
 800c70a:	9508      	str	r5, [sp, #32]
 800c70c:	f04f 33ff 	mov.w	r3, #4294967295
 800c710:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c714:	2200      	movs	r2, #0
 800c716:	2312      	movs	r3, #18
 800c718:	e7b0      	b.n	800c67c <_dtoa_r+0x26c>
 800c71a:	2301      	movs	r3, #1
 800c71c:	9308      	str	r3, [sp, #32]
 800c71e:	e7f5      	b.n	800c70c <_dtoa_r+0x2fc>
 800c720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c722:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c726:	e7b8      	b.n	800c69a <_dtoa_r+0x28a>
 800c728:	3101      	adds	r1, #1
 800c72a:	6041      	str	r1, [r0, #4]
 800c72c:	0052      	lsls	r2, r2, #1
 800c72e:	e7b8      	b.n	800c6a2 <_dtoa_r+0x292>
 800c730:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c732:	9a01      	ldr	r2, [sp, #4]
 800c734:	601a      	str	r2, [r3, #0]
 800c736:	9b03      	ldr	r3, [sp, #12]
 800c738:	2b0e      	cmp	r3, #14
 800c73a:	f200 809d 	bhi.w	800c878 <_dtoa_r+0x468>
 800c73e:	2d00      	cmp	r5, #0
 800c740:	f000 809a 	beq.w	800c878 <_dtoa_r+0x468>
 800c744:	9b00      	ldr	r3, [sp, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	dd32      	ble.n	800c7b0 <_dtoa_r+0x3a0>
 800c74a:	4ab7      	ldr	r2, [pc, #732]	; (800ca28 <_dtoa_r+0x618>)
 800c74c:	f003 030f 	and.w	r3, r3, #15
 800c750:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c754:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c758:	9b00      	ldr	r3, [sp, #0]
 800c75a:	05d8      	lsls	r0, r3, #23
 800c75c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c760:	d516      	bpl.n	800c790 <_dtoa_r+0x380>
 800c762:	4bb2      	ldr	r3, [pc, #712]	; (800ca2c <_dtoa_r+0x61c>)
 800c764:	ec51 0b19 	vmov	r0, r1, d9
 800c768:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c76c:	f7f4 f876 	bl	800085c <__aeabi_ddiv>
 800c770:	f007 070f 	and.w	r7, r7, #15
 800c774:	4682      	mov	sl, r0
 800c776:	468b      	mov	fp, r1
 800c778:	2503      	movs	r5, #3
 800c77a:	4eac      	ldr	r6, [pc, #688]	; (800ca2c <_dtoa_r+0x61c>)
 800c77c:	b957      	cbnz	r7, 800c794 <_dtoa_r+0x384>
 800c77e:	4642      	mov	r2, r8
 800c780:	464b      	mov	r3, r9
 800c782:	4650      	mov	r0, sl
 800c784:	4659      	mov	r1, fp
 800c786:	f7f4 f869 	bl	800085c <__aeabi_ddiv>
 800c78a:	4682      	mov	sl, r0
 800c78c:	468b      	mov	fp, r1
 800c78e:	e028      	b.n	800c7e2 <_dtoa_r+0x3d2>
 800c790:	2502      	movs	r5, #2
 800c792:	e7f2      	b.n	800c77a <_dtoa_r+0x36a>
 800c794:	07f9      	lsls	r1, r7, #31
 800c796:	d508      	bpl.n	800c7aa <_dtoa_r+0x39a>
 800c798:	4640      	mov	r0, r8
 800c79a:	4649      	mov	r1, r9
 800c79c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c7a0:	f7f3 ff32 	bl	8000608 <__aeabi_dmul>
 800c7a4:	3501      	adds	r5, #1
 800c7a6:	4680      	mov	r8, r0
 800c7a8:	4689      	mov	r9, r1
 800c7aa:	107f      	asrs	r7, r7, #1
 800c7ac:	3608      	adds	r6, #8
 800c7ae:	e7e5      	b.n	800c77c <_dtoa_r+0x36c>
 800c7b0:	f000 809b 	beq.w	800c8ea <_dtoa_r+0x4da>
 800c7b4:	9b00      	ldr	r3, [sp, #0]
 800c7b6:	4f9d      	ldr	r7, [pc, #628]	; (800ca2c <_dtoa_r+0x61c>)
 800c7b8:	425e      	negs	r6, r3
 800c7ba:	4b9b      	ldr	r3, [pc, #620]	; (800ca28 <_dtoa_r+0x618>)
 800c7bc:	f006 020f 	and.w	r2, r6, #15
 800c7c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c8:	ec51 0b19 	vmov	r0, r1, d9
 800c7cc:	f7f3 ff1c 	bl	8000608 <__aeabi_dmul>
 800c7d0:	1136      	asrs	r6, r6, #4
 800c7d2:	4682      	mov	sl, r0
 800c7d4:	468b      	mov	fp, r1
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	2502      	movs	r5, #2
 800c7da:	2e00      	cmp	r6, #0
 800c7dc:	d17a      	bne.n	800c8d4 <_dtoa_r+0x4c4>
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d1d3      	bne.n	800c78a <_dtoa_r+0x37a>
 800c7e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f000 8082 	beq.w	800c8ee <_dtoa_r+0x4de>
 800c7ea:	4b91      	ldr	r3, [pc, #580]	; (800ca30 <_dtoa_r+0x620>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	4650      	mov	r0, sl
 800c7f0:	4659      	mov	r1, fp
 800c7f2:	f7f4 f97b 	bl	8000aec <__aeabi_dcmplt>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d079      	beq.n	800c8ee <_dtoa_r+0x4de>
 800c7fa:	9b03      	ldr	r3, [sp, #12]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d076      	beq.n	800c8ee <_dtoa_r+0x4de>
 800c800:	9b02      	ldr	r3, [sp, #8]
 800c802:	2b00      	cmp	r3, #0
 800c804:	dd36      	ble.n	800c874 <_dtoa_r+0x464>
 800c806:	9b00      	ldr	r3, [sp, #0]
 800c808:	4650      	mov	r0, sl
 800c80a:	4659      	mov	r1, fp
 800c80c:	1e5f      	subs	r7, r3, #1
 800c80e:	2200      	movs	r2, #0
 800c810:	4b88      	ldr	r3, [pc, #544]	; (800ca34 <_dtoa_r+0x624>)
 800c812:	f7f3 fef9 	bl	8000608 <__aeabi_dmul>
 800c816:	9e02      	ldr	r6, [sp, #8]
 800c818:	4682      	mov	sl, r0
 800c81a:	468b      	mov	fp, r1
 800c81c:	3501      	adds	r5, #1
 800c81e:	4628      	mov	r0, r5
 800c820:	f7f3 fe88 	bl	8000534 <__aeabi_i2d>
 800c824:	4652      	mov	r2, sl
 800c826:	465b      	mov	r3, fp
 800c828:	f7f3 feee 	bl	8000608 <__aeabi_dmul>
 800c82c:	4b82      	ldr	r3, [pc, #520]	; (800ca38 <_dtoa_r+0x628>)
 800c82e:	2200      	movs	r2, #0
 800c830:	f7f3 fd34 	bl	800029c <__adddf3>
 800c834:	46d0      	mov	r8, sl
 800c836:	46d9      	mov	r9, fp
 800c838:	4682      	mov	sl, r0
 800c83a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c83e:	2e00      	cmp	r6, #0
 800c840:	d158      	bne.n	800c8f4 <_dtoa_r+0x4e4>
 800c842:	4b7e      	ldr	r3, [pc, #504]	; (800ca3c <_dtoa_r+0x62c>)
 800c844:	2200      	movs	r2, #0
 800c846:	4640      	mov	r0, r8
 800c848:	4649      	mov	r1, r9
 800c84a:	f7f3 fd25 	bl	8000298 <__aeabi_dsub>
 800c84e:	4652      	mov	r2, sl
 800c850:	465b      	mov	r3, fp
 800c852:	4680      	mov	r8, r0
 800c854:	4689      	mov	r9, r1
 800c856:	f7f4 f967 	bl	8000b28 <__aeabi_dcmpgt>
 800c85a:	2800      	cmp	r0, #0
 800c85c:	f040 8295 	bne.w	800cd8a <_dtoa_r+0x97a>
 800c860:	4652      	mov	r2, sl
 800c862:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c866:	4640      	mov	r0, r8
 800c868:	4649      	mov	r1, r9
 800c86a:	f7f4 f93f 	bl	8000aec <__aeabi_dcmplt>
 800c86e:	2800      	cmp	r0, #0
 800c870:	f040 8289 	bne.w	800cd86 <_dtoa_r+0x976>
 800c874:	ec5b ab19 	vmov	sl, fp, d9
 800c878:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	f2c0 8148 	blt.w	800cb10 <_dtoa_r+0x700>
 800c880:	9a00      	ldr	r2, [sp, #0]
 800c882:	2a0e      	cmp	r2, #14
 800c884:	f300 8144 	bgt.w	800cb10 <_dtoa_r+0x700>
 800c888:	4b67      	ldr	r3, [pc, #412]	; (800ca28 <_dtoa_r+0x618>)
 800c88a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c88e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c894:	2b00      	cmp	r3, #0
 800c896:	f280 80d5 	bge.w	800ca44 <_dtoa_r+0x634>
 800c89a:	9b03      	ldr	r3, [sp, #12]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	f300 80d1 	bgt.w	800ca44 <_dtoa_r+0x634>
 800c8a2:	f040 826f 	bne.w	800cd84 <_dtoa_r+0x974>
 800c8a6:	4b65      	ldr	r3, [pc, #404]	; (800ca3c <_dtoa_r+0x62c>)
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	4640      	mov	r0, r8
 800c8ac:	4649      	mov	r1, r9
 800c8ae:	f7f3 feab 	bl	8000608 <__aeabi_dmul>
 800c8b2:	4652      	mov	r2, sl
 800c8b4:	465b      	mov	r3, fp
 800c8b6:	f7f4 f92d 	bl	8000b14 <__aeabi_dcmpge>
 800c8ba:	9e03      	ldr	r6, [sp, #12]
 800c8bc:	4637      	mov	r7, r6
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	f040 8245 	bne.w	800cd4e <_dtoa_r+0x93e>
 800c8c4:	9d01      	ldr	r5, [sp, #4]
 800c8c6:	2331      	movs	r3, #49	; 0x31
 800c8c8:	f805 3b01 	strb.w	r3, [r5], #1
 800c8cc:	9b00      	ldr	r3, [sp, #0]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	e240      	b.n	800cd56 <_dtoa_r+0x946>
 800c8d4:	07f2      	lsls	r2, r6, #31
 800c8d6:	d505      	bpl.n	800c8e4 <_dtoa_r+0x4d4>
 800c8d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8dc:	f7f3 fe94 	bl	8000608 <__aeabi_dmul>
 800c8e0:	3501      	adds	r5, #1
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	1076      	asrs	r6, r6, #1
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	e777      	b.n	800c7da <_dtoa_r+0x3ca>
 800c8ea:	2502      	movs	r5, #2
 800c8ec:	e779      	b.n	800c7e2 <_dtoa_r+0x3d2>
 800c8ee:	9f00      	ldr	r7, [sp, #0]
 800c8f0:	9e03      	ldr	r6, [sp, #12]
 800c8f2:	e794      	b.n	800c81e <_dtoa_r+0x40e>
 800c8f4:	9901      	ldr	r1, [sp, #4]
 800c8f6:	4b4c      	ldr	r3, [pc, #304]	; (800ca28 <_dtoa_r+0x618>)
 800c8f8:	4431      	add	r1, r6
 800c8fa:	910d      	str	r1, [sp, #52]	; 0x34
 800c8fc:	9908      	ldr	r1, [sp, #32]
 800c8fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c902:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c906:	2900      	cmp	r1, #0
 800c908:	d043      	beq.n	800c992 <_dtoa_r+0x582>
 800c90a:	494d      	ldr	r1, [pc, #308]	; (800ca40 <_dtoa_r+0x630>)
 800c90c:	2000      	movs	r0, #0
 800c90e:	f7f3 ffa5 	bl	800085c <__aeabi_ddiv>
 800c912:	4652      	mov	r2, sl
 800c914:	465b      	mov	r3, fp
 800c916:	f7f3 fcbf 	bl	8000298 <__aeabi_dsub>
 800c91a:	9d01      	ldr	r5, [sp, #4]
 800c91c:	4682      	mov	sl, r0
 800c91e:	468b      	mov	fp, r1
 800c920:	4649      	mov	r1, r9
 800c922:	4640      	mov	r0, r8
 800c924:	f7f4 f920 	bl	8000b68 <__aeabi_d2iz>
 800c928:	4606      	mov	r6, r0
 800c92a:	f7f3 fe03 	bl	8000534 <__aeabi_i2d>
 800c92e:	4602      	mov	r2, r0
 800c930:	460b      	mov	r3, r1
 800c932:	4640      	mov	r0, r8
 800c934:	4649      	mov	r1, r9
 800c936:	f7f3 fcaf 	bl	8000298 <__aeabi_dsub>
 800c93a:	3630      	adds	r6, #48	; 0x30
 800c93c:	f805 6b01 	strb.w	r6, [r5], #1
 800c940:	4652      	mov	r2, sl
 800c942:	465b      	mov	r3, fp
 800c944:	4680      	mov	r8, r0
 800c946:	4689      	mov	r9, r1
 800c948:	f7f4 f8d0 	bl	8000aec <__aeabi_dcmplt>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	d163      	bne.n	800ca18 <_dtoa_r+0x608>
 800c950:	4642      	mov	r2, r8
 800c952:	464b      	mov	r3, r9
 800c954:	4936      	ldr	r1, [pc, #216]	; (800ca30 <_dtoa_r+0x620>)
 800c956:	2000      	movs	r0, #0
 800c958:	f7f3 fc9e 	bl	8000298 <__aeabi_dsub>
 800c95c:	4652      	mov	r2, sl
 800c95e:	465b      	mov	r3, fp
 800c960:	f7f4 f8c4 	bl	8000aec <__aeabi_dcmplt>
 800c964:	2800      	cmp	r0, #0
 800c966:	f040 80b5 	bne.w	800cad4 <_dtoa_r+0x6c4>
 800c96a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c96c:	429d      	cmp	r5, r3
 800c96e:	d081      	beq.n	800c874 <_dtoa_r+0x464>
 800c970:	4b30      	ldr	r3, [pc, #192]	; (800ca34 <_dtoa_r+0x624>)
 800c972:	2200      	movs	r2, #0
 800c974:	4650      	mov	r0, sl
 800c976:	4659      	mov	r1, fp
 800c978:	f7f3 fe46 	bl	8000608 <__aeabi_dmul>
 800c97c:	4b2d      	ldr	r3, [pc, #180]	; (800ca34 <_dtoa_r+0x624>)
 800c97e:	4682      	mov	sl, r0
 800c980:	468b      	mov	fp, r1
 800c982:	4640      	mov	r0, r8
 800c984:	4649      	mov	r1, r9
 800c986:	2200      	movs	r2, #0
 800c988:	f7f3 fe3e 	bl	8000608 <__aeabi_dmul>
 800c98c:	4680      	mov	r8, r0
 800c98e:	4689      	mov	r9, r1
 800c990:	e7c6      	b.n	800c920 <_dtoa_r+0x510>
 800c992:	4650      	mov	r0, sl
 800c994:	4659      	mov	r1, fp
 800c996:	f7f3 fe37 	bl	8000608 <__aeabi_dmul>
 800c99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c99c:	9d01      	ldr	r5, [sp, #4]
 800c99e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9a0:	4682      	mov	sl, r0
 800c9a2:	468b      	mov	fp, r1
 800c9a4:	4649      	mov	r1, r9
 800c9a6:	4640      	mov	r0, r8
 800c9a8:	f7f4 f8de 	bl	8000b68 <__aeabi_d2iz>
 800c9ac:	4606      	mov	r6, r0
 800c9ae:	f7f3 fdc1 	bl	8000534 <__aeabi_i2d>
 800c9b2:	3630      	adds	r6, #48	; 0x30
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	4640      	mov	r0, r8
 800c9ba:	4649      	mov	r1, r9
 800c9bc:	f7f3 fc6c 	bl	8000298 <__aeabi_dsub>
 800c9c0:	f805 6b01 	strb.w	r6, [r5], #1
 800c9c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9c6:	429d      	cmp	r5, r3
 800c9c8:	4680      	mov	r8, r0
 800c9ca:	4689      	mov	r9, r1
 800c9cc:	f04f 0200 	mov.w	r2, #0
 800c9d0:	d124      	bne.n	800ca1c <_dtoa_r+0x60c>
 800c9d2:	4b1b      	ldr	r3, [pc, #108]	; (800ca40 <_dtoa_r+0x630>)
 800c9d4:	4650      	mov	r0, sl
 800c9d6:	4659      	mov	r1, fp
 800c9d8:	f7f3 fc60 	bl	800029c <__adddf3>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	460b      	mov	r3, r1
 800c9e0:	4640      	mov	r0, r8
 800c9e2:	4649      	mov	r1, r9
 800c9e4:	f7f4 f8a0 	bl	8000b28 <__aeabi_dcmpgt>
 800c9e8:	2800      	cmp	r0, #0
 800c9ea:	d173      	bne.n	800cad4 <_dtoa_r+0x6c4>
 800c9ec:	4652      	mov	r2, sl
 800c9ee:	465b      	mov	r3, fp
 800c9f0:	4913      	ldr	r1, [pc, #76]	; (800ca40 <_dtoa_r+0x630>)
 800c9f2:	2000      	movs	r0, #0
 800c9f4:	f7f3 fc50 	bl	8000298 <__aeabi_dsub>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	4640      	mov	r0, r8
 800c9fe:	4649      	mov	r1, r9
 800ca00:	f7f4 f874 	bl	8000aec <__aeabi_dcmplt>
 800ca04:	2800      	cmp	r0, #0
 800ca06:	f43f af35 	beq.w	800c874 <_dtoa_r+0x464>
 800ca0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ca0c:	1e6b      	subs	r3, r5, #1
 800ca0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca14:	2b30      	cmp	r3, #48	; 0x30
 800ca16:	d0f8      	beq.n	800ca0a <_dtoa_r+0x5fa>
 800ca18:	9700      	str	r7, [sp, #0]
 800ca1a:	e049      	b.n	800cab0 <_dtoa_r+0x6a0>
 800ca1c:	4b05      	ldr	r3, [pc, #20]	; (800ca34 <_dtoa_r+0x624>)
 800ca1e:	f7f3 fdf3 	bl	8000608 <__aeabi_dmul>
 800ca22:	4680      	mov	r8, r0
 800ca24:	4689      	mov	r9, r1
 800ca26:	e7bd      	b.n	800c9a4 <_dtoa_r+0x594>
 800ca28:	080110a0 	.word	0x080110a0
 800ca2c:	08011078 	.word	0x08011078
 800ca30:	3ff00000 	.word	0x3ff00000
 800ca34:	40240000 	.word	0x40240000
 800ca38:	401c0000 	.word	0x401c0000
 800ca3c:	40140000 	.word	0x40140000
 800ca40:	3fe00000 	.word	0x3fe00000
 800ca44:	9d01      	ldr	r5, [sp, #4]
 800ca46:	4656      	mov	r6, sl
 800ca48:	465f      	mov	r7, fp
 800ca4a:	4642      	mov	r2, r8
 800ca4c:	464b      	mov	r3, r9
 800ca4e:	4630      	mov	r0, r6
 800ca50:	4639      	mov	r1, r7
 800ca52:	f7f3 ff03 	bl	800085c <__aeabi_ddiv>
 800ca56:	f7f4 f887 	bl	8000b68 <__aeabi_d2iz>
 800ca5a:	4682      	mov	sl, r0
 800ca5c:	f7f3 fd6a 	bl	8000534 <__aeabi_i2d>
 800ca60:	4642      	mov	r2, r8
 800ca62:	464b      	mov	r3, r9
 800ca64:	f7f3 fdd0 	bl	8000608 <__aeabi_dmul>
 800ca68:	4602      	mov	r2, r0
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	4639      	mov	r1, r7
 800ca70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ca74:	f7f3 fc10 	bl	8000298 <__aeabi_dsub>
 800ca78:	f805 6b01 	strb.w	r6, [r5], #1
 800ca7c:	9e01      	ldr	r6, [sp, #4]
 800ca7e:	9f03      	ldr	r7, [sp, #12]
 800ca80:	1bae      	subs	r6, r5, r6
 800ca82:	42b7      	cmp	r7, r6
 800ca84:	4602      	mov	r2, r0
 800ca86:	460b      	mov	r3, r1
 800ca88:	d135      	bne.n	800caf6 <_dtoa_r+0x6e6>
 800ca8a:	f7f3 fc07 	bl	800029c <__adddf3>
 800ca8e:	4642      	mov	r2, r8
 800ca90:	464b      	mov	r3, r9
 800ca92:	4606      	mov	r6, r0
 800ca94:	460f      	mov	r7, r1
 800ca96:	f7f4 f847 	bl	8000b28 <__aeabi_dcmpgt>
 800ca9a:	b9d0      	cbnz	r0, 800cad2 <_dtoa_r+0x6c2>
 800ca9c:	4642      	mov	r2, r8
 800ca9e:	464b      	mov	r3, r9
 800caa0:	4630      	mov	r0, r6
 800caa2:	4639      	mov	r1, r7
 800caa4:	f7f4 f818 	bl	8000ad8 <__aeabi_dcmpeq>
 800caa8:	b110      	cbz	r0, 800cab0 <_dtoa_r+0x6a0>
 800caaa:	f01a 0f01 	tst.w	sl, #1
 800caae:	d110      	bne.n	800cad2 <_dtoa_r+0x6c2>
 800cab0:	4620      	mov	r0, r4
 800cab2:	ee18 1a10 	vmov	r1, s16
 800cab6:	f000 fe67 	bl	800d788 <_Bfree>
 800caba:	2300      	movs	r3, #0
 800cabc:	9800      	ldr	r0, [sp, #0]
 800cabe:	702b      	strb	r3, [r5, #0]
 800cac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cac2:	3001      	adds	r0, #1
 800cac4:	6018      	str	r0, [r3, #0]
 800cac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f43f acf1 	beq.w	800c4b0 <_dtoa_r+0xa0>
 800cace:	601d      	str	r5, [r3, #0]
 800cad0:	e4ee      	b.n	800c4b0 <_dtoa_r+0xa0>
 800cad2:	9f00      	ldr	r7, [sp, #0]
 800cad4:	462b      	mov	r3, r5
 800cad6:	461d      	mov	r5, r3
 800cad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cadc:	2a39      	cmp	r2, #57	; 0x39
 800cade:	d106      	bne.n	800caee <_dtoa_r+0x6de>
 800cae0:	9a01      	ldr	r2, [sp, #4]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d1f7      	bne.n	800cad6 <_dtoa_r+0x6c6>
 800cae6:	9901      	ldr	r1, [sp, #4]
 800cae8:	2230      	movs	r2, #48	; 0x30
 800caea:	3701      	adds	r7, #1
 800caec:	700a      	strb	r2, [r1, #0]
 800caee:	781a      	ldrb	r2, [r3, #0]
 800caf0:	3201      	adds	r2, #1
 800caf2:	701a      	strb	r2, [r3, #0]
 800caf4:	e790      	b.n	800ca18 <_dtoa_r+0x608>
 800caf6:	4ba6      	ldr	r3, [pc, #664]	; (800cd90 <_dtoa_r+0x980>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	f7f3 fd85 	bl	8000608 <__aeabi_dmul>
 800cafe:	2200      	movs	r2, #0
 800cb00:	2300      	movs	r3, #0
 800cb02:	4606      	mov	r6, r0
 800cb04:	460f      	mov	r7, r1
 800cb06:	f7f3 ffe7 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	d09d      	beq.n	800ca4a <_dtoa_r+0x63a>
 800cb0e:	e7cf      	b.n	800cab0 <_dtoa_r+0x6a0>
 800cb10:	9a08      	ldr	r2, [sp, #32]
 800cb12:	2a00      	cmp	r2, #0
 800cb14:	f000 80d7 	beq.w	800ccc6 <_dtoa_r+0x8b6>
 800cb18:	9a06      	ldr	r2, [sp, #24]
 800cb1a:	2a01      	cmp	r2, #1
 800cb1c:	f300 80ba 	bgt.w	800cc94 <_dtoa_r+0x884>
 800cb20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb22:	2a00      	cmp	r2, #0
 800cb24:	f000 80b2 	beq.w	800cc8c <_dtoa_r+0x87c>
 800cb28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cb2c:	9e07      	ldr	r6, [sp, #28]
 800cb2e:	9d04      	ldr	r5, [sp, #16]
 800cb30:	9a04      	ldr	r2, [sp, #16]
 800cb32:	441a      	add	r2, r3
 800cb34:	9204      	str	r2, [sp, #16]
 800cb36:	9a05      	ldr	r2, [sp, #20]
 800cb38:	2101      	movs	r1, #1
 800cb3a:	441a      	add	r2, r3
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	9205      	str	r2, [sp, #20]
 800cb40:	f000 ff24 	bl	800d98c <__i2b>
 800cb44:	4607      	mov	r7, r0
 800cb46:	2d00      	cmp	r5, #0
 800cb48:	dd0c      	ble.n	800cb64 <_dtoa_r+0x754>
 800cb4a:	9b05      	ldr	r3, [sp, #20]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	dd09      	ble.n	800cb64 <_dtoa_r+0x754>
 800cb50:	42ab      	cmp	r3, r5
 800cb52:	9a04      	ldr	r2, [sp, #16]
 800cb54:	bfa8      	it	ge
 800cb56:	462b      	movge	r3, r5
 800cb58:	1ad2      	subs	r2, r2, r3
 800cb5a:	9204      	str	r2, [sp, #16]
 800cb5c:	9a05      	ldr	r2, [sp, #20]
 800cb5e:	1aed      	subs	r5, r5, r3
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	9305      	str	r3, [sp, #20]
 800cb64:	9b07      	ldr	r3, [sp, #28]
 800cb66:	b31b      	cbz	r3, 800cbb0 <_dtoa_r+0x7a0>
 800cb68:	9b08      	ldr	r3, [sp, #32]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f000 80af 	beq.w	800ccce <_dtoa_r+0x8be>
 800cb70:	2e00      	cmp	r6, #0
 800cb72:	dd13      	ble.n	800cb9c <_dtoa_r+0x78c>
 800cb74:	4639      	mov	r1, r7
 800cb76:	4632      	mov	r2, r6
 800cb78:	4620      	mov	r0, r4
 800cb7a:	f000 ffc7 	bl	800db0c <__pow5mult>
 800cb7e:	ee18 2a10 	vmov	r2, s16
 800cb82:	4601      	mov	r1, r0
 800cb84:	4607      	mov	r7, r0
 800cb86:	4620      	mov	r0, r4
 800cb88:	f000 ff16 	bl	800d9b8 <__multiply>
 800cb8c:	ee18 1a10 	vmov	r1, s16
 800cb90:	4680      	mov	r8, r0
 800cb92:	4620      	mov	r0, r4
 800cb94:	f000 fdf8 	bl	800d788 <_Bfree>
 800cb98:	ee08 8a10 	vmov	s16, r8
 800cb9c:	9b07      	ldr	r3, [sp, #28]
 800cb9e:	1b9a      	subs	r2, r3, r6
 800cba0:	d006      	beq.n	800cbb0 <_dtoa_r+0x7a0>
 800cba2:	ee18 1a10 	vmov	r1, s16
 800cba6:	4620      	mov	r0, r4
 800cba8:	f000 ffb0 	bl	800db0c <__pow5mult>
 800cbac:	ee08 0a10 	vmov	s16, r0
 800cbb0:	2101      	movs	r1, #1
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f000 feea 	bl	800d98c <__i2b>
 800cbb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	f340 8088 	ble.w	800ccd2 <_dtoa_r+0x8c2>
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	4601      	mov	r1, r0
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f000 ffa0 	bl	800db0c <__pow5mult>
 800cbcc:	9b06      	ldr	r3, [sp, #24]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	4606      	mov	r6, r0
 800cbd2:	f340 8081 	ble.w	800ccd8 <_dtoa_r+0x8c8>
 800cbd6:	f04f 0800 	mov.w	r8, #0
 800cbda:	6933      	ldr	r3, [r6, #16]
 800cbdc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cbe0:	6918      	ldr	r0, [r3, #16]
 800cbe2:	f000 fe83 	bl	800d8ec <__hi0bits>
 800cbe6:	f1c0 0020 	rsb	r0, r0, #32
 800cbea:	9b05      	ldr	r3, [sp, #20]
 800cbec:	4418      	add	r0, r3
 800cbee:	f010 001f 	ands.w	r0, r0, #31
 800cbf2:	f000 8092 	beq.w	800cd1a <_dtoa_r+0x90a>
 800cbf6:	f1c0 0320 	rsb	r3, r0, #32
 800cbfa:	2b04      	cmp	r3, #4
 800cbfc:	f340 808a 	ble.w	800cd14 <_dtoa_r+0x904>
 800cc00:	f1c0 001c 	rsb	r0, r0, #28
 800cc04:	9b04      	ldr	r3, [sp, #16]
 800cc06:	4403      	add	r3, r0
 800cc08:	9304      	str	r3, [sp, #16]
 800cc0a:	9b05      	ldr	r3, [sp, #20]
 800cc0c:	4403      	add	r3, r0
 800cc0e:	4405      	add	r5, r0
 800cc10:	9305      	str	r3, [sp, #20]
 800cc12:	9b04      	ldr	r3, [sp, #16]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	dd07      	ble.n	800cc28 <_dtoa_r+0x818>
 800cc18:	ee18 1a10 	vmov	r1, s16
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	4620      	mov	r0, r4
 800cc20:	f000 ffce 	bl	800dbc0 <__lshift>
 800cc24:	ee08 0a10 	vmov	s16, r0
 800cc28:	9b05      	ldr	r3, [sp, #20]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	dd05      	ble.n	800cc3a <_dtoa_r+0x82a>
 800cc2e:	4631      	mov	r1, r6
 800cc30:	461a      	mov	r2, r3
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 ffc4 	bl	800dbc0 <__lshift>
 800cc38:	4606      	mov	r6, r0
 800cc3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d06e      	beq.n	800cd1e <_dtoa_r+0x90e>
 800cc40:	ee18 0a10 	vmov	r0, s16
 800cc44:	4631      	mov	r1, r6
 800cc46:	f001 f82b 	bl	800dca0 <__mcmp>
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	da67      	bge.n	800cd1e <_dtoa_r+0x90e>
 800cc4e:	9b00      	ldr	r3, [sp, #0]
 800cc50:	3b01      	subs	r3, #1
 800cc52:	ee18 1a10 	vmov	r1, s16
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	220a      	movs	r2, #10
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	f000 fdb5 	bl	800d7cc <__multadd>
 800cc62:	9b08      	ldr	r3, [sp, #32]
 800cc64:	ee08 0a10 	vmov	s16, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f000 81b1 	beq.w	800cfd0 <_dtoa_r+0xbc0>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	4639      	mov	r1, r7
 800cc72:	220a      	movs	r2, #10
 800cc74:	4620      	mov	r0, r4
 800cc76:	f000 fda9 	bl	800d7cc <__multadd>
 800cc7a:	9b02      	ldr	r3, [sp, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	4607      	mov	r7, r0
 800cc80:	f300 808e 	bgt.w	800cda0 <_dtoa_r+0x990>
 800cc84:	9b06      	ldr	r3, [sp, #24]
 800cc86:	2b02      	cmp	r3, #2
 800cc88:	dc51      	bgt.n	800cd2e <_dtoa_r+0x91e>
 800cc8a:	e089      	b.n	800cda0 <_dtoa_r+0x990>
 800cc8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc92:	e74b      	b.n	800cb2c <_dtoa_r+0x71c>
 800cc94:	9b03      	ldr	r3, [sp, #12]
 800cc96:	1e5e      	subs	r6, r3, #1
 800cc98:	9b07      	ldr	r3, [sp, #28]
 800cc9a:	42b3      	cmp	r3, r6
 800cc9c:	bfbf      	itttt	lt
 800cc9e:	9b07      	ldrlt	r3, [sp, #28]
 800cca0:	9607      	strlt	r6, [sp, #28]
 800cca2:	1af2      	sublt	r2, r6, r3
 800cca4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cca6:	bfb6      	itet	lt
 800cca8:	189b      	addlt	r3, r3, r2
 800ccaa:	1b9e      	subge	r6, r3, r6
 800ccac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ccae:	9b03      	ldr	r3, [sp, #12]
 800ccb0:	bfb8      	it	lt
 800ccb2:	2600      	movlt	r6, #0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	bfb7      	itett	lt
 800ccb8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ccbc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ccc0:	1a9d      	sublt	r5, r3, r2
 800ccc2:	2300      	movlt	r3, #0
 800ccc4:	e734      	b.n	800cb30 <_dtoa_r+0x720>
 800ccc6:	9e07      	ldr	r6, [sp, #28]
 800ccc8:	9d04      	ldr	r5, [sp, #16]
 800ccca:	9f08      	ldr	r7, [sp, #32]
 800cccc:	e73b      	b.n	800cb46 <_dtoa_r+0x736>
 800ccce:	9a07      	ldr	r2, [sp, #28]
 800ccd0:	e767      	b.n	800cba2 <_dtoa_r+0x792>
 800ccd2:	9b06      	ldr	r3, [sp, #24]
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	dc18      	bgt.n	800cd0a <_dtoa_r+0x8fa>
 800ccd8:	f1ba 0f00 	cmp.w	sl, #0
 800ccdc:	d115      	bne.n	800cd0a <_dtoa_r+0x8fa>
 800ccde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cce2:	b993      	cbnz	r3, 800cd0a <_dtoa_r+0x8fa>
 800cce4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cce8:	0d1b      	lsrs	r3, r3, #20
 800ccea:	051b      	lsls	r3, r3, #20
 800ccec:	b183      	cbz	r3, 800cd10 <_dtoa_r+0x900>
 800ccee:	9b04      	ldr	r3, [sp, #16]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	9304      	str	r3, [sp, #16]
 800ccf4:	9b05      	ldr	r3, [sp, #20]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	9305      	str	r3, [sp, #20]
 800ccfa:	f04f 0801 	mov.w	r8, #1
 800ccfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f47f af6a 	bne.w	800cbda <_dtoa_r+0x7ca>
 800cd06:	2001      	movs	r0, #1
 800cd08:	e76f      	b.n	800cbea <_dtoa_r+0x7da>
 800cd0a:	f04f 0800 	mov.w	r8, #0
 800cd0e:	e7f6      	b.n	800ccfe <_dtoa_r+0x8ee>
 800cd10:	4698      	mov	r8, r3
 800cd12:	e7f4      	b.n	800ccfe <_dtoa_r+0x8ee>
 800cd14:	f43f af7d 	beq.w	800cc12 <_dtoa_r+0x802>
 800cd18:	4618      	mov	r0, r3
 800cd1a:	301c      	adds	r0, #28
 800cd1c:	e772      	b.n	800cc04 <_dtoa_r+0x7f4>
 800cd1e:	9b03      	ldr	r3, [sp, #12]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	dc37      	bgt.n	800cd94 <_dtoa_r+0x984>
 800cd24:	9b06      	ldr	r3, [sp, #24]
 800cd26:	2b02      	cmp	r3, #2
 800cd28:	dd34      	ble.n	800cd94 <_dtoa_r+0x984>
 800cd2a:	9b03      	ldr	r3, [sp, #12]
 800cd2c:	9302      	str	r3, [sp, #8]
 800cd2e:	9b02      	ldr	r3, [sp, #8]
 800cd30:	b96b      	cbnz	r3, 800cd4e <_dtoa_r+0x93e>
 800cd32:	4631      	mov	r1, r6
 800cd34:	2205      	movs	r2, #5
 800cd36:	4620      	mov	r0, r4
 800cd38:	f000 fd48 	bl	800d7cc <__multadd>
 800cd3c:	4601      	mov	r1, r0
 800cd3e:	4606      	mov	r6, r0
 800cd40:	ee18 0a10 	vmov	r0, s16
 800cd44:	f000 ffac 	bl	800dca0 <__mcmp>
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	f73f adbb 	bgt.w	800c8c4 <_dtoa_r+0x4b4>
 800cd4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd50:	9d01      	ldr	r5, [sp, #4]
 800cd52:	43db      	mvns	r3, r3
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	f04f 0800 	mov.w	r8, #0
 800cd5a:	4631      	mov	r1, r6
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	f000 fd13 	bl	800d788 <_Bfree>
 800cd62:	2f00      	cmp	r7, #0
 800cd64:	f43f aea4 	beq.w	800cab0 <_dtoa_r+0x6a0>
 800cd68:	f1b8 0f00 	cmp.w	r8, #0
 800cd6c:	d005      	beq.n	800cd7a <_dtoa_r+0x96a>
 800cd6e:	45b8      	cmp	r8, r7
 800cd70:	d003      	beq.n	800cd7a <_dtoa_r+0x96a>
 800cd72:	4641      	mov	r1, r8
 800cd74:	4620      	mov	r0, r4
 800cd76:	f000 fd07 	bl	800d788 <_Bfree>
 800cd7a:	4639      	mov	r1, r7
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	f000 fd03 	bl	800d788 <_Bfree>
 800cd82:	e695      	b.n	800cab0 <_dtoa_r+0x6a0>
 800cd84:	2600      	movs	r6, #0
 800cd86:	4637      	mov	r7, r6
 800cd88:	e7e1      	b.n	800cd4e <_dtoa_r+0x93e>
 800cd8a:	9700      	str	r7, [sp, #0]
 800cd8c:	4637      	mov	r7, r6
 800cd8e:	e599      	b.n	800c8c4 <_dtoa_r+0x4b4>
 800cd90:	40240000 	.word	0x40240000
 800cd94:	9b08      	ldr	r3, [sp, #32]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	f000 80ca 	beq.w	800cf30 <_dtoa_r+0xb20>
 800cd9c:	9b03      	ldr	r3, [sp, #12]
 800cd9e:	9302      	str	r3, [sp, #8]
 800cda0:	2d00      	cmp	r5, #0
 800cda2:	dd05      	ble.n	800cdb0 <_dtoa_r+0x9a0>
 800cda4:	4639      	mov	r1, r7
 800cda6:	462a      	mov	r2, r5
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f000 ff09 	bl	800dbc0 <__lshift>
 800cdae:	4607      	mov	r7, r0
 800cdb0:	f1b8 0f00 	cmp.w	r8, #0
 800cdb4:	d05b      	beq.n	800ce6e <_dtoa_r+0xa5e>
 800cdb6:	6879      	ldr	r1, [r7, #4]
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f000 fca5 	bl	800d708 <_Balloc>
 800cdbe:	4605      	mov	r5, r0
 800cdc0:	b928      	cbnz	r0, 800cdce <_dtoa_r+0x9be>
 800cdc2:	4b87      	ldr	r3, [pc, #540]	; (800cfe0 <_dtoa_r+0xbd0>)
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cdca:	f7ff bb3b 	b.w	800c444 <_dtoa_r+0x34>
 800cdce:	693a      	ldr	r2, [r7, #16]
 800cdd0:	3202      	adds	r2, #2
 800cdd2:	0092      	lsls	r2, r2, #2
 800cdd4:	f107 010c 	add.w	r1, r7, #12
 800cdd8:	300c      	adds	r0, #12
 800cdda:	f7fd fd2b 	bl	800a834 <memcpy>
 800cdde:	2201      	movs	r2, #1
 800cde0:	4629      	mov	r1, r5
 800cde2:	4620      	mov	r0, r4
 800cde4:	f000 feec 	bl	800dbc0 <__lshift>
 800cde8:	9b01      	ldr	r3, [sp, #4]
 800cdea:	f103 0901 	add.w	r9, r3, #1
 800cdee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cdf2:	4413      	add	r3, r2
 800cdf4:	9305      	str	r3, [sp, #20]
 800cdf6:	f00a 0301 	and.w	r3, sl, #1
 800cdfa:	46b8      	mov	r8, r7
 800cdfc:	9304      	str	r3, [sp, #16]
 800cdfe:	4607      	mov	r7, r0
 800ce00:	4631      	mov	r1, r6
 800ce02:	ee18 0a10 	vmov	r0, s16
 800ce06:	f7ff fa77 	bl	800c2f8 <quorem>
 800ce0a:	4641      	mov	r1, r8
 800ce0c:	9002      	str	r0, [sp, #8]
 800ce0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ce12:	ee18 0a10 	vmov	r0, s16
 800ce16:	f000 ff43 	bl	800dca0 <__mcmp>
 800ce1a:	463a      	mov	r2, r7
 800ce1c:	9003      	str	r0, [sp, #12]
 800ce1e:	4631      	mov	r1, r6
 800ce20:	4620      	mov	r0, r4
 800ce22:	f000 ff59 	bl	800dcd8 <__mdiff>
 800ce26:	68c2      	ldr	r2, [r0, #12]
 800ce28:	f109 3bff 	add.w	fp, r9, #4294967295
 800ce2c:	4605      	mov	r5, r0
 800ce2e:	bb02      	cbnz	r2, 800ce72 <_dtoa_r+0xa62>
 800ce30:	4601      	mov	r1, r0
 800ce32:	ee18 0a10 	vmov	r0, s16
 800ce36:	f000 ff33 	bl	800dca0 <__mcmp>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	4620      	mov	r0, r4
 800ce40:	9207      	str	r2, [sp, #28]
 800ce42:	f000 fca1 	bl	800d788 <_Bfree>
 800ce46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ce4a:	ea43 0102 	orr.w	r1, r3, r2
 800ce4e:	9b04      	ldr	r3, [sp, #16]
 800ce50:	430b      	orrs	r3, r1
 800ce52:	464d      	mov	r5, r9
 800ce54:	d10f      	bne.n	800ce76 <_dtoa_r+0xa66>
 800ce56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce5a:	d02a      	beq.n	800ceb2 <_dtoa_r+0xaa2>
 800ce5c:	9b03      	ldr	r3, [sp, #12]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	dd02      	ble.n	800ce68 <_dtoa_r+0xa58>
 800ce62:	9b02      	ldr	r3, [sp, #8]
 800ce64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ce68:	f88b a000 	strb.w	sl, [fp]
 800ce6c:	e775      	b.n	800cd5a <_dtoa_r+0x94a>
 800ce6e:	4638      	mov	r0, r7
 800ce70:	e7ba      	b.n	800cde8 <_dtoa_r+0x9d8>
 800ce72:	2201      	movs	r2, #1
 800ce74:	e7e2      	b.n	800ce3c <_dtoa_r+0xa2c>
 800ce76:	9b03      	ldr	r3, [sp, #12]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	db04      	blt.n	800ce86 <_dtoa_r+0xa76>
 800ce7c:	9906      	ldr	r1, [sp, #24]
 800ce7e:	430b      	orrs	r3, r1
 800ce80:	9904      	ldr	r1, [sp, #16]
 800ce82:	430b      	orrs	r3, r1
 800ce84:	d122      	bne.n	800cecc <_dtoa_r+0xabc>
 800ce86:	2a00      	cmp	r2, #0
 800ce88:	ddee      	ble.n	800ce68 <_dtoa_r+0xa58>
 800ce8a:	ee18 1a10 	vmov	r1, s16
 800ce8e:	2201      	movs	r2, #1
 800ce90:	4620      	mov	r0, r4
 800ce92:	f000 fe95 	bl	800dbc0 <__lshift>
 800ce96:	4631      	mov	r1, r6
 800ce98:	ee08 0a10 	vmov	s16, r0
 800ce9c:	f000 ff00 	bl	800dca0 <__mcmp>
 800cea0:	2800      	cmp	r0, #0
 800cea2:	dc03      	bgt.n	800ceac <_dtoa_r+0xa9c>
 800cea4:	d1e0      	bne.n	800ce68 <_dtoa_r+0xa58>
 800cea6:	f01a 0f01 	tst.w	sl, #1
 800ceaa:	d0dd      	beq.n	800ce68 <_dtoa_r+0xa58>
 800ceac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ceb0:	d1d7      	bne.n	800ce62 <_dtoa_r+0xa52>
 800ceb2:	2339      	movs	r3, #57	; 0x39
 800ceb4:	f88b 3000 	strb.w	r3, [fp]
 800ceb8:	462b      	mov	r3, r5
 800ceba:	461d      	mov	r5, r3
 800cebc:	3b01      	subs	r3, #1
 800cebe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cec2:	2a39      	cmp	r2, #57	; 0x39
 800cec4:	d071      	beq.n	800cfaa <_dtoa_r+0xb9a>
 800cec6:	3201      	adds	r2, #1
 800cec8:	701a      	strb	r2, [r3, #0]
 800ceca:	e746      	b.n	800cd5a <_dtoa_r+0x94a>
 800cecc:	2a00      	cmp	r2, #0
 800cece:	dd07      	ble.n	800cee0 <_dtoa_r+0xad0>
 800ced0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ced4:	d0ed      	beq.n	800ceb2 <_dtoa_r+0xaa2>
 800ced6:	f10a 0301 	add.w	r3, sl, #1
 800ceda:	f88b 3000 	strb.w	r3, [fp]
 800cede:	e73c      	b.n	800cd5a <_dtoa_r+0x94a>
 800cee0:	9b05      	ldr	r3, [sp, #20]
 800cee2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cee6:	4599      	cmp	r9, r3
 800cee8:	d047      	beq.n	800cf7a <_dtoa_r+0xb6a>
 800ceea:	ee18 1a10 	vmov	r1, s16
 800ceee:	2300      	movs	r3, #0
 800cef0:	220a      	movs	r2, #10
 800cef2:	4620      	mov	r0, r4
 800cef4:	f000 fc6a 	bl	800d7cc <__multadd>
 800cef8:	45b8      	cmp	r8, r7
 800cefa:	ee08 0a10 	vmov	s16, r0
 800cefe:	f04f 0300 	mov.w	r3, #0
 800cf02:	f04f 020a 	mov.w	r2, #10
 800cf06:	4641      	mov	r1, r8
 800cf08:	4620      	mov	r0, r4
 800cf0a:	d106      	bne.n	800cf1a <_dtoa_r+0xb0a>
 800cf0c:	f000 fc5e 	bl	800d7cc <__multadd>
 800cf10:	4680      	mov	r8, r0
 800cf12:	4607      	mov	r7, r0
 800cf14:	f109 0901 	add.w	r9, r9, #1
 800cf18:	e772      	b.n	800ce00 <_dtoa_r+0x9f0>
 800cf1a:	f000 fc57 	bl	800d7cc <__multadd>
 800cf1e:	4639      	mov	r1, r7
 800cf20:	4680      	mov	r8, r0
 800cf22:	2300      	movs	r3, #0
 800cf24:	220a      	movs	r2, #10
 800cf26:	4620      	mov	r0, r4
 800cf28:	f000 fc50 	bl	800d7cc <__multadd>
 800cf2c:	4607      	mov	r7, r0
 800cf2e:	e7f1      	b.n	800cf14 <_dtoa_r+0xb04>
 800cf30:	9b03      	ldr	r3, [sp, #12]
 800cf32:	9302      	str	r3, [sp, #8]
 800cf34:	9d01      	ldr	r5, [sp, #4]
 800cf36:	ee18 0a10 	vmov	r0, s16
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	f7ff f9dc 	bl	800c2f8 <quorem>
 800cf40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cf44:	9b01      	ldr	r3, [sp, #4]
 800cf46:	f805 ab01 	strb.w	sl, [r5], #1
 800cf4a:	1aea      	subs	r2, r5, r3
 800cf4c:	9b02      	ldr	r3, [sp, #8]
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	dd09      	ble.n	800cf66 <_dtoa_r+0xb56>
 800cf52:	ee18 1a10 	vmov	r1, s16
 800cf56:	2300      	movs	r3, #0
 800cf58:	220a      	movs	r2, #10
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f000 fc36 	bl	800d7cc <__multadd>
 800cf60:	ee08 0a10 	vmov	s16, r0
 800cf64:	e7e7      	b.n	800cf36 <_dtoa_r+0xb26>
 800cf66:	9b02      	ldr	r3, [sp, #8]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	bfc8      	it	gt
 800cf6c:	461d      	movgt	r5, r3
 800cf6e:	9b01      	ldr	r3, [sp, #4]
 800cf70:	bfd8      	it	le
 800cf72:	2501      	movle	r5, #1
 800cf74:	441d      	add	r5, r3
 800cf76:	f04f 0800 	mov.w	r8, #0
 800cf7a:	ee18 1a10 	vmov	r1, s16
 800cf7e:	2201      	movs	r2, #1
 800cf80:	4620      	mov	r0, r4
 800cf82:	f000 fe1d 	bl	800dbc0 <__lshift>
 800cf86:	4631      	mov	r1, r6
 800cf88:	ee08 0a10 	vmov	s16, r0
 800cf8c:	f000 fe88 	bl	800dca0 <__mcmp>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	dc91      	bgt.n	800ceb8 <_dtoa_r+0xaa8>
 800cf94:	d102      	bne.n	800cf9c <_dtoa_r+0xb8c>
 800cf96:	f01a 0f01 	tst.w	sl, #1
 800cf9a:	d18d      	bne.n	800ceb8 <_dtoa_r+0xaa8>
 800cf9c:	462b      	mov	r3, r5
 800cf9e:	461d      	mov	r5, r3
 800cfa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cfa4:	2a30      	cmp	r2, #48	; 0x30
 800cfa6:	d0fa      	beq.n	800cf9e <_dtoa_r+0xb8e>
 800cfa8:	e6d7      	b.n	800cd5a <_dtoa_r+0x94a>
 800cfaa:	9a01      	ldr	r2, [sp, #4]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d184      	bne.n	800ceba <_dtoa_r+0xaaa>
 800cfb0:	9b00      	ldr	r3, [sp, #0]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	9300      	str	r3, [sp, #0]
 800cfb6:	2331      	movs	r3, #49	; 0x31
 800cfb8:	7013      	strb	r3, [r2, #0]
 800cfba:	e6ce      	b.n	800cd5a <_dtoa_r+0x94a>
 800cfbc:	4b09      	ldr	r3, [pc, #36]	; (800cfe4 <_dtoa_r+0xbd4>)
 800cfbe:	f7ff ba95 	b.w	800c4ec <_dtoa_r+0xdc>
 800cfc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f47f aa6e 	bne.w	800c4a6 <_dtoa_r+0x96>
 800cfca:	4b07      	ldr	r3, [pc, #28]	; (800cfe8 <_dtoa_r+0xbd8>)
 800cfcc:	f7ff ba8e 	b.w	800c4ec <_dtoa_r+0xdc>
 800cfd0:	9b02      	ldr	r3, [sp, #8]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	dcae      	bgt.n	800cf34 <_dtoa_r+0xb24>
 800cfd6:	9b06      	ldr	r3, [sp, #24]
 800cfd8:	2b02      	cmp	r3, #2
 800cfda:	f73f aea8 	bgt.w	800cd2e <_dtoa_r+0x91e>
 800cfde:	e7a9      	b.n	800cf34 <_dtoa_r+0xb24>
 800cfe0:	08010f90 	.word	0x08010f90
 800cfe4:	08010d90 	.word	0x08010d90
 800cfe8:	08010f11 	.word	0x08010f11

0800cfec <rshift>:
 800cfec:	6903      	ldr	r3, [r0, #16]
 800cfee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cff2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cff6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cffa:	f100 0414 	add.w	r4, r0, #20
 800cffe:	dd45      	ble.n	800d08c <rshift+0xa0>
 800d000:	f011 011f 	ands.w	r1, r1, #31
 800d004:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d008:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d00c:	d10c      	bne.n	800d028 <rshift+0x3c>
 800d00e:	f100 0710 	add.w	r7, r0, #16
 800d012:	4629      	mov	r1, r5
 800d014:	42b1      	cmp	r1, r6
 800d016:	d334      	bcc.n	800d082 <rshift+0x96>
 800d018:	1a9b      	subs	r3, r3, r2
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	1eea      	subs	r2, r5, #3
 800d01e:	4296      	cmp	r6, r2
 800d020:	bf38      	it	cc
 800d022:	2300      	movcc	r3, #0
 800d024:	4423      	add	r3, r4
 800d026:	e015      	b.n	800d054 <rshift+0x68>
 800d028:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d02c:	f1c1 0820 	rsb	r8, r1, #32
 800d030:	40cf      	lsrs	r7, r1
 800d032:	f105 0e04 	add.w	lr, r5, #4
 800d036:	46a1      	mov	r9, r4
 800d038:	4576      	cmp	r6, lr
 800d03a:	46f4      	mov	ip, lr
 800d03c:	d815      	bhi.n	800d06a <rshift+0x7e>
 800d03e:	1a9a      	subs	r2, r3, r2
 800d040:	0092      	lsls	r2, r2, #2
 800d042:	3a04      	subs	r2, #4
 800d044:	3501      	adds	r5, #1
 800d046:	42ae      	cmp	r6, r5
 800d048:	bf38      	it	cc
 800d04a:	2200      	movcc	r2, #0
 800d04c:	18a3      	adds	r3, r4, r2
 800d04e:	50a7      	str	r7, [r4, r2]
 800d050:	b107      	cbz	r7, 800d054 <rshift+0x68>
 800d052:	3304      	adds	r3, #4
 800d054:	1b1a      	subs	r2, r3, r4
 800d056:	42a3      	cmp	r3, r4
 800d058:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d05c:	bf08      	it	eq
 800d05e:	2300      	moveq	r3, #0
 800d060:	6102      	str	r2, [r0, #16]
 800d062:	bf08      	it	eq
 800d064:	6143      	streq	r3, [r0, #20]
 800d066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d06a:	f8dc c000 	ldr.w	ip, [ip]
 800d06e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d072:	ea4c 0707 	orr.w	r7, ip, r7
 800d076:	f849 7b04 	str.w	r7, [r9], #4
 800d07a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d07e:	40cf      	lsrs	r7, r1
 800d080:	e7da      	b.n	800d038 <rshift+0x4c>
 800d082:	f851 cb04 	ldr.w	ip, [r1], #4
 800d086:	f847 cf04 	str.w	ip, [r7, #4]!
 800d08a:	e7c3      	b.n	800d014 <rshift+0x28>
 800d08c:	4623      	mov	r3, r4
 800d08e:	e7e1      	b.n	800d054 <rshift+0x68>

0800d090 <__hexdig_fun>:
 800d090:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d094:	2b09      	cmp	r3, #9
 800d096:	d802      	bhi.n	800d09e <__hexdig_fun+0xe>
 800d098:	3820      	subs	r0, #32
 800d09a:	b2c0      	uxtb	r0, r0
 800d09c:	4770      	bx	lr
 800d09e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d0a2:	2b05      	cmp	r3, #5
 800d0a4:	d801      	bhi.n	800d0aa <__hexdig_fun+0x1a>
 800d0a6:	3847      	subs	r0, #71	; 0x47
 800d0a8:	e7f7      	b.n	800d09a <__hexdig_fun+0xa>
 800d0aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d0ae:	2b05      	cmp	r3, #5
 800d0b0:	d801      	bhi.n	800d0b6 <__hexdig_fun+0x26>
 800d0b2:	3827      	subs	r0, #39	; 0x27
 800d0b4:	e7f1      	b.n	800d09a <__hexdig_fun+0xa>
 800d0b6:	2000      	movs	r0, #0
 800d0b8:	4770      	bx	lr
	...

0800d0bc <__gethex>:
 800d0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c0:	ed2d 8b02 	vpush	{d8}
 800d0c4:	b089      	sub	sp, #36	; 0x24
 800d0c6:	ee08 0a10 	vmov	s16, r0
 800d0ca:	9304      	str	r3, [sp, #16]
 800d0cc:	4bb4      	ldr	r3, [pc, #720]	; (800d3a0 <__gethex+0x2e4>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	9301      	str	r3, [sp, #4]
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	468b      	mov	fp, r1
 800d0d6:	4690      	mov	r8, r2
 800d0d8:	f7f3 f882 	bl	80001e0 <strlen>
 800d0dc:	9b01      	ldr	r3, [sp, #4]
 800d0de:	f8db 2000 	ldr.w	r2, [fp]
 800d0e2:	4403      	add	r3, r0
 800d0e4:	4682      	mov	sl, r0
 800d0e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d0ea:	9305      	str	r3, [sp, #20]
 800d0ec:	1c93      	adds	r3, r2, #2
 800d0ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d0f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d0f6:	32fe      	adds	r2, #254	; 0xfe
 800d0f8:	18d1      	adds	r1, r2, r3
 800d0fa:	461f      	mov	r7, r3
 800d0fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d100:	9100      	str	r1, [sp, #0]
 800d102:	2830      	cmp	r0, #48	; 0x30
 800d104:	d0f8      	beq.n	800d0f8 <__gethex+0x3c>
 800d106:	f7ff ffc3 	bl	800d090 <__hexdig_fun>
 800d10a:	4604      	mov	r4, r0
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d13a      	bne.n	800d186 <__gethex+0xca>
 800d110:	9901      	ldr	r1, [sp, #4]
 800d112:	4652      	mov	r2, sl
 800d114:	4638      	mov	r0, r7
 800d116:	f001 fa23 	bl	800e560 <strncmp>
 800d11a:	4605      	mov	r5, r0
 800d11c:	2800      	cmp	r0, #0
 800d11e:	d168      	bne.n	800d1f2 <__gethex+0x136>
 800d120:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d124:	eb07 060a 	add.w	r6, r7, sl
 800d128:	f7ff ffb2 	bl	800d090 <__hexdig_fun>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	d062      	beq.n	800d1f6 <__gethex+0x13a>
 800d130:	4633      	mov	r3, r6
 800d132:	7818      	ldrb	r0, [r3, #0]
 800d134:	2830      	cmp	r0, #48	; 0x30
 800d136:	461f      	mov	r7, r3
 800d138:	f103 0301 	add.w	r3, r3, #1
 800d13c:	d0f9      	beq.n	800d132 <__gethex+0x76>
 800d13e:	f7ff ffa7 	bl	800d090 <__hexdig_fun>
 800d142:	2301      	movs	r3, #1
 800d144:	fab0 f480 	clz	r4, r0
 800d148:	0964      	lsrs	r4, r4, #5
 800d14a:	4635      	mov	r5, r6
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	463a      	mov	r2, r7
 800d150:	4616      	mov	r6, r2
 800d152:	3201      	adds	r2, #1
 800d154:	7830      	ldrb	r0, [r6, #0]
 800d156:	f7ff ff9b 	bl	800d090 <__hexdig_fun>
 800d15a:	2800      	cmp	r0, #0
 800d15c:	d1f8      	bne.n	800d150 <__gethex+0x94>
 800d15e:	9901      	ldr	r1, [sp, #4]
 800d160:	4652      	mov	r2, sl
 800d162:	4630      	mov	r0, r6
 800d164:	f001 f9fc 	bl	800e560 <strncmp>
 800d168:	b980      	cbnz	r0, 800d18c <__gethex+0xd0>
 800d16a:	b94d      	cbnz	r5, 800d180 <__gethex+0xc4>
 800d16c:	eb06 050a 	add.w	r5, r6, sl
 800d170:	462a      	mov	r2, r5
 800d172:	4616      	mov	r6, r2
 800d174:	3201      	adds	r2, #1
 800d176:	7830      	ldrb	r0, [r6, #0]
 800d178:	f7ff ff8a 	bl	800d090 <__hexdig_fun>
 800d17c:	2800      	cmp	r0, #0
 800d17e:	d1f8      	bne.n	800d172 <__gethex+0xb6>
 800d180:	1bad      	subs	r5, r5, r6
 800d182:	00ad      	lsls	r5, r5, #2
 800d184:	e004      	b.n	800d190 <__gethex+0xd4>
 800d186:	2400      	movs	r4, #0
 800d188:	4625      	mov	r5, r4
 800d18a:	e7e0      	b.n	800d14e <__gethex+0x92>
 800d18c:	2d00      	cmp	r5, #0
 800d18e:	d1f7      	bne.n	800d180 <__gethex+0xc4>
 800d190:	7833      	ldrb	r3, [r6, #0]
 800d192:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d196:	2b50      	cmp	r3, #80	; 0x50
 800d198:	d13b      	bne.n	800d212 <__gethex+0x156>
 800d19a:	7873      	ldrb	r3, [r6, #1]
 800d19c:	2b2b      	cmp	r3, #43	; 0x2b
 800d19e:	d02c      	beq.n	800d1fa <__gethex+0x13e>
 800d1a0:	2b2d      	cmp	r3, #45	; 0x2d
 800d1a2:	d02e      	beq.n	800d202 <__gethex+0x146>
 800d1a4:	1c71      	adds	r1, r6, #1
 800d1a6:	f04f 0900 	mov.w	r9, #0
 800d1aa:	7808      	ldrb	r0, [r1, #0]
 800d1ac:	f7ff ff70 	bl	800d090 <__hexdig_fun>
 800d1b0:	1e43      	subs	r3, r0, #1
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	2b18      	cmp	r3, #24
 800d1b6:	d82c      	bhi.n	800d212 <__gethex+0x156>
 800d1b8:	f1a0 0210 	sub.w	r2, r0, #16
 800d1bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d1c0:	f7ff ff66 	bl	800d090 <__hexdig_fun>
 800d1c4:	1e43      	subs	r3, r0, #1
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	2b18      	cmp	r3, #24
 800d1ca:	d91d      	bls.n	800d208 <__gethex+0x14c>
 800d1cc:	f1b9 0f00 	cmp.w	r9, #0
 800d1d0:	d000      	beq.n	800d1d4 <__gethex+0x118>
 800d1d2:	4252      	negs	r2, r2
 800d1d4:	4415      	add	r5, r2
 800d1d6:	f8cb 1000 	str.w	r1, [fp]
 800d1da:	b1e4      	cbz	r4, 800d216 <__gethex+0x15a>
 800d1dc:	9b00      	ldr	r3, [sp, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	bf14      	ite	ne
 800d1e2:	2700      	movne	r7, #0
 800d1e4:	2706      	moveq	r7, #6
 800d1e6:	4638      	mov	r0, r7
 800d1e8:	b009      	add	sp, #36	; 0x24
 800d1ea:	ecbd 8b02 	vpop	{d8}
 800d1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f2:	463e      	mov	r6, r7
 800d1f4:	4625      	mov	r5, r4
 800d1f6:	2401      	movs	r4, #1
 800d1f8:	e7ca      	b.n	800d190 <__gethex+0xd4>
 800d1fa:	f04f 0900 	mov.w	r9, #0
 800d1fe:	1cb1      	adds	r1, r6, #2
 800d200:	e7d3      	b.n	800d1aa <__gethex+0xee>
 800d202:	f04f 0901 	mov.w	r9, #1
 800d206:	e7fa      	b.n	800d1fe <__gethex+0x142>
 800d208:	230a      	movs	r3, #10
 800d20a:	fb03 0202 	mla	r2, r3, r2, r0
 800d20e:	3a10      	subs	r2, #16
 800d210:	e7d4      	b.n	800d1bc <__gethex+0x100>
 800d212:	4631      	mov	r1, r6
 800d214:	e7df      	b.n	800d1d6 <__gethex+0x11a>
 800d216:	1bf3      	subs	r3, r6, r7
 800d218:	3b01      	subs	r3, #1
 800d21a:	4621      	mov	r1, r4
 800d21c:	2b07      	cmp	r3, #7
 800d21e:	dc0b      	bgt.n	800d238 <__gethex+0x17c>
 800d220:	ee18 0a10 	vmov	r0, s16
 800d224:	f000 fa70 	bl	800d708 <_Balloc>
 800d228:	4604      	mov	r4, r0
 800d22a:	b940      	cbnz	r0, 800d23e <__gethex+0x182>
 800d22c:	4b5d      	ldr	r3, [pc, #372]	; (800d3a4 <__gethex+0x2e8>)
 800d22e:	4602      	mov	r2, r0
 800d230:	21de      	movs	r1, #222	; 0xde
 800d232:	485d      	ldr	r0, [pc, #372]	; (800d3a8 <__gethex+0x2ec>)
 800d234:	f001 f9b6 	bl	800e5a4 <__assert_func>
 800d238:	3101      	adds	r1, #1
 800d23a:	105b      	asrs	r3, r3, #1
 800d23c:	e7ee      	b.n	800d21c <__gethex+0x160>
 800d23e:	f100 0914 	add.w	r9, r0, #20
 800d242:	f04f 0b00 	mov.w	fp, #0
 800d246:	f1ca 0301 	rsb	r3, sl, #1
 800d24a:	f8cd 9008 	str.w	r9, [sp, #8]
 800d24e:	f8cd b000 	str.w	fp, [sp]
 800d252:	9306      	str	r3, [sp, #24]
 800d254:	42b7      	cmp	r7, r6
 800d256:	d340      	bcc.n	800d2da <__gethex+0x21e>
 800d258:	9802      	ldr	r0, [sp, #8]
 800d25a:	9b00      	ldr	r3, [sp, #0]
 800d25c:	f840 3b04 	str.w	r3, [r0], #4
 800d260:	eba0 0009 	sub.w	r0, r0, r9
 800d264:	1080      	asrs	r0, r0, #2
 800d266:	0146      	lsls	r6, r0, #5
 800d268:	6120      	str	r0, [r4, #16]
 800d26a:	4618      	mov	r0, r3
 800d26c:	f000 fb3e 	bl	800d8ec <__hi0bits>
 800d270:	1a30      	subs	r0, r6, r0
 800d272:	f8d8 6000 	ldr.w	r6, [r8]
 800d276:	42b0      	cmp	r0, r6
 800d278:	dd63      	ble.n	800d342 <__gethex+0x286>
 800d27a:	1b87      	subs	r7, r0, r6
 800d27c:	4639      	mov	r1, r7
 800d27e:	4620      	mov	r0, r4
 800d280:	f000 fee2 	bl	800e048 <__any_on>
 800d284:	4682      	mov	sl, r0
 800d286:	b1a8      	cbz	r0, 800d2b4 <__gethex+0x1f8>
 800d288:	1e7b      	subs	r3, r7, #1
 800d28a:	1159      	asrs	r1, r3, #5
 800d28c:	f003 021f 	and.w	r2, r3, #31
 800d290:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d294:	f04f 0a01 	mov.w	sl, #1
 800d298:	fa0a f202 	lsl.w	r2, sl, r2
 800d29c:	420a      	tst	r2, r1
 800d29e:	d009      	beq.n	800d2b4 <__gethex+0x1f8>
 800d2a0:	4553      	cmp	r3, sl
 800d2a2:	dd05      	ble.n	800d2b0 <__gethex+0x1f4>
 800d2a4:	1eb9      	subs	r1, r7, #2
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	f000 fece 	bl	800e048 <__any_on>
 800d2ac:	2800      	cmp	r0, #0
 800d2ae:	d145      	bne.n	800d33c <__gethex+0x280>
 800d2b0:	f04f 0a02 	mov.w	sl, #2
 800d2b4:	4639      	mov	r1, r7
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	f7ff fe98 	bl	800cfec <rshift>
 800d2bc:	443d      	add	r5, r7
 800d2be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d2c2:	42ab      	cmp	r3, r5
 800d2c4:	da4c      	bge.n	800d360 <__gethex+0x2a4>
 800d2c6:	ee18 0a10 	vmov	r0, s16
 800d2ca:	4621      	mov	r1, r4
 800d2cc:	f000 fa5c 	bl	800d788 <_Bfree>
 800d2d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	6013      	str	r3, [r2, #0]
 800d2d6:	27a3      	movs	r7, #163	; 0xa3
 800d2d8:	e785      	b.n	800d1e6 <__gethex+0x12a>
 800d2da:	1e73      	subs	r3, r6, #1
 800d2dc:	9a05      	ldr	r2, [sp, #20]
 800d2de:	9303      	str	r3, [sp, #12]
 800d2e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d019      	beq.n	800d31c <__gethex+0x260>
 800d2e8:	f1bb 0f20 	cmp.w	fp, #32
 800d2ec:	d107      	bne.n	800d2fe <__gethex+0x242>
 800d2ee:	9b02      	ldr	r3, [sp, #8]
 800d2f0:	9a00      	ldr	r2, [sp, #0]
 800d2f2:	f843 2b04 	str.w	r2, [r3], #4
 800d2f6:	9302      	str	r3, [sp, #8]
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	469b      	mov	fp, r3
 800d2fe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d302:	f7ff fec5 	bl	800d090 <__hexdig_fun>
 800d306:	9b00      	ldr	r3, [sp, #0]
 800d308:	f000 000f 	and.w	r0, r0, #15
 800d30c:	fa00 f00b 	lsl.w	r0, r0, fp
 800d310:	4303      	orrs	r3, r0
 800d312:	9300      	str	r3, [sp, #0]
 800d314:	f10b 0b04 	add.w	fp, fp, #4
 800d318:	9b03      	ldr	r3, [sp, #12]
 800d31a:	e00d      	b.n	800d338 <__gethex+0x27c>
 800d31c:	9b03      	ldr	r3, [sp, #12]
 800d31e:	9a06      	ldr	r2, [sp, #24]
 800d320:	4413      	add	r3, r2
 800d322:	42bb      	cmp	r3, r7
 800d324:	d3e0      	bcc.n	800d2e8 <__gethex+0x22c>
 800d326:	4618      	mov	r0, r3
 800d328:	9901      	ldr	r1, [sp, #4]
 800d32a:	9307      	str	r3, [sp, #28]
 800d32c:	4652      	mov	r2, sl
 800d32e:	f001 f917 	bl	800e560 <strncmp>
 800d332:	9b07      	ldr	r3, [sp, #28]
 800d334:	2800      	cmp	r0, #0
 800d336:	d1d7      	bne.n	800d2e8 <__gethex+0x22c>
 800d338:	461e      	mov	r6, r3
 800d33a:	e78b      	b.n	800d254 <__gethex+0x198>
 800d33c:	f04f 0a03 	mov.w	sl, #3
 800d340:	e7b8      	b.n	800d2b4 <__gethex+0x1f8>
 800d342:	da0a      	bge.n	800d35a <__gethex+0x29e>
 800d344:	1a37      	subs	r7, r6, r0
 800d346:	4621      	mov	r1, r4
 800d348:	ee18 0a10 	vmov	r0, s16
 800d34c:	463a      	mov	r2, r7
 800d34e:	f000 fc37 	bl	800dbc0 <__lshift>
 800d352:	1bed      	subs	r5, r5, r7
 800d354:	4604      	mov	r4, r0
 800d356:	f100 0914 	add.w	r9, r0, #20
 800d35a:	f04f 0a00 	mov.w	sl, #0
 800d35e:	e7ae      	b.n	800d2be <__gethex+0x202>
 800d360:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d364:	42a8      	cmp	r0, r5
 800d366:	dd72      	ble.n	800d44e <__gethex+0x392>
 800d368:	1b45      	subs	r5, r0, r5
 800d36a:	42ae      	cmp	r6, r5
 800d36c:	dc36      	bgt.n	800d3dc <__gethex+0x320>
 800d36e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d372:	2b02      	cmp	r3, #2
 800d374:	d02a      	beq.n	800d3cc <__gethex+0x310>
 800d376:	2b03      	cmp	r3, #3
 800d378:	d02c      	beq.n	800d3d4 <__gethex+0x318>
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d11c      	bne.n	800d3b8 <__gethex+0x2fc>
 800d37e:	42ae      	cmp	r6, r5
 800d380:	d11a      	bne.n	800d3b8 <__gethex+0x2fc>
 800d382:	2e01      	cmp	r6, #1
 800d384:	d112      	bne.n	800d3ac <__gethex+0x2f0>
 800d386:	9a04      	ldr	r2, [sp, #16]
 800d388:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d38c:	6013      	str	r3, [r2, #0]
 800d38e:	2301      	movs	r3, #1
 800d390:	6123      	str	r3, [r4, #16]
 800d392:	f8c9 3000 	str.w	r3, [r9]
 800d396:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d398:	2762      	movs	r7, #98	; 0x62
 800d39a:	601c      	str	r4, [r3, #0]
 800d39c:	e723      	b.n	800d1e6 <__gethex+0x12a>
 800d39e:	bf00      	nop
 800d3a0:	08011008 	.word	0x08011008
 800d3a4:	08010f90 	.word	0x08010f90
 800d3a8:	08010fa1 	.word	0x08010fa1
 800d3ac:	1e71      	subs	r1, r6, #1
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	f000 fe4a 	bl	800e048 <__any_on>
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d1e6      	bne.n	800d386 <__gethex+0x2ca>
 800d3b8:	ee18 0a10 	vmov	r0, s16
 800d3bc:	4621      	mov	r1, r4
 800d3be:	f000 f9e3 	bl	800d788 <_Bfree>
 800d3c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	6013      	str	r3, [r2, #0]
 800d3c8:	2750      	movs	r7, #80	; 0x50
 800d3ca:	e70c      	b.n	800d1e6 <__gethex+0x12a>
 800d3cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d1f2      	bne.n	800d3b8 <__gethex+0x2fc>
 800d3d2:	e7d8      	b.n	800d386 <__gethex+0x2ca>
 800d3d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d1d5      	bne.n	800d386 <__gethex+0x2ca>
 800d3da:	e7ed      	b.n	800d3b8 <__gethex+0x2fc>
 800d3dc:	1e6f      	subs	r7, r5, #1
 800d3de:	f1ba 0f00 	cmp.w	sl, #0
 800d3e2:	d131      	bne.n	800d448 <__gethex+0x38c>
 800d3e4:	b127      	cbz	r7, 800d3f0 <__gethex+0x334>
 800d3e6:	4639      	mov	r1, r7
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f000 fe2d 	bl	800e048 <__any_on>
 800d3ee:	4682      	mov	sl, r0
 800d3f0:	117b      	asrs	r3, r7, #5
 800d3f2:	2101      	movs	r1, #1
 800d3f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d3f8:	f007 071f 	and.w	r7, r7, #31
 800d3fc:	fa01 f707 	lsl.w	r7, r1, r7
 800d400:	421f      	tst	r7, r3
 800d402:	4629      	mov	r1, r5
 800d404:	4620      	mov	r0, r4
 800d406:	bf18      	it	ne
 800d408:	f04a 0a02 	orrne.w	sl, sl, #2
 800d40c:	1b76      	subs	r6, r6, r5
 800d40e:	f7ff fded 	bl	800cfec <rshift>
 800d412:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d416:	2702      	movs	r7, #2
 800d418:	f1ba 0f00 	cmp.w	sl, #0
 800d41c:	d048      	beq.n	800d4b0 <__gethex+0x3f4>
 800d41e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d422:	2b02      	cmp	r3, #2
 800d424:	d015      	beq.n	800d452 <__gethex+0x396>
 800d426:	2b03      	cmp	r3, #3
 800d428:	d017      	beq.n	800d45a <__gethex+0x39e>
 800d42a:	2b01      	cmp	r3, #1
 800d42c:	d109      	bne.n	800d442 <__gethex+0x386>
 800d42e:	f01a 0f02 	tst.w	sl, #2
 800d432:	d006      	beq.n	800d442 <__gethex+0x386>
 800d434:	f8d9 0000 	ldr.w	r0, [r9]
 800d438:	ea4a 0a00 	orr.w	sl, sl, r0
 800d43c:	f01a 0f01 	tst.w	sl, #1
 800d440:	d10e      	bne.n	800d460 <__gethex+0x3a4>
 800d442:	f047 0710 	orr.w	r7, r7, #16
 800d446:	e033      	b.n	800d4b0 <__gethex+0x3f4>
 800d448:	f04f 0a01 	mov.w	sl, #1
 800d44c:	e7d0      	b.n	800d3f0 <__gethex+0x334>
 800d44e:	2701      	movs	r7, #1
 800d450:	e7e2      	b.n	800d418 <__gethex+0x35c>
 800d452:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d454:	f1c3 0301 	rsb	r3, r3, #1
 800d458:	9315      	str	r3, [sp, #84]	; 0x54
 800d45a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d0f0      	beq.n	800d442 <__gethex+0x386>
 800d460:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d464:	f104 0314 	add.w	r3, r4, #20
 800d468:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d46c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d470:	f04f 0c00 	mov.w	ip, #0
 800d474:	4618      	mov	r0, r3
 800d476:	f853 2b04 	ldr.w	r2, [r3], #4
 800d47a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d47e:	d01c      	beq.n	800d4ba <__gethex+0x3fe>
 800d480:	3201      	adds	r2, #1
 800d482:	6002      	str	r2, [r0, #0]
 800d484:	2f02      	cmp	r7, #2
 800d486:	f104 0314 	add.w	r3, r4, #20
 800d48a:	d13f      	bne.n	800d50c <__gethex+0x450>
 800d48c:	f8d8 2000 	ldr.w	r2, [r8]
 800d490:	3a01      	subs	r2, #1
 800d492:	42b2      	cmp	r2, r6
 800d494:	d10a      	bne.n	800d4ac <__gethex+0x3f0>
 800d496:	1171      	asrs	r1, r6, #5
 800d498:	2201      	movs	r2, #1
 800d49a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d49e:	f006 061f 	and.w	r6, r6, #31
 800d4a2:	fa02 f606 	lsl.w	r6, r2, r6
 800d4a6:	421e      	tst	r6, r3
 800d4a8:	bf18      	it	ne
 800d4aa:	4617      	movne	r7, r2
 800d4ac:	f047 0720 	orr.w	r7, r7, #32
 800d4b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d4b2:	601c      	str	r4, [r3, #0]
 800d4b4:	9b04      	ldr	r3, [sp, #16]
 800d4b6:	601d      	str	r5, [r3, #0]
 800d4b8:	e695      	b.n	800d1e6 <__gethex+0x12a>
 800d4ba:	4299      	cmp	r1, r3
 800d4bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800d4c0:	d8d8      	bhi.n	800d474 <__gethex+0x3b8>
 800d4c2:	68a3      	ldr	r3, [r4, #8]
 800d4c4:	459b      	cmp	fp, r3
 800d4c6:	db19      	blt.n	800d4fc <__gethex+0x440>
 800d4c8:	6861      	ldr	r1, [r4, #4]
 800d4ca:	ee18 0a10 	vmov	r0, s16
 800d4ce:	3101      	adds	r1, #1
 800d4d0:	f000 f91a 	bl	800d708 <_Balloc>
 800d4d4:	4681      	mov	r9, r0
 800d4d6:	b918      	cbnz	r0, 800d4e0 <__gethex+0x424>
 800d4d8:	4b1a      	ldr	r3, [pc, #104]	; (800d544 <__gethex+0x488>)
 800d4da:	4602      	mov	r2, r0
 800d4dc:	2184      	movs	r1, #132	; 0x84
 800d4de:	e6a8      	b.n	800d232 <__gethex+0x176>
 800d4e0:	6922      	ldr	r2, [r4, #16]
 800d4e2:	3202      	adds	r2, #2
 800d4e4:	f104 010c 	add.w	r1, r4, #12
 800d4e8:	0092      	lsls	r2, r2, #2
 800d4ea:	300c      	adds	r0, #12
 800d4ec:	f7fd f9a2 	bl	800a834 <memcpy>
 800d4f0:	4621      	mov	r1, r4
 800d4f2:	ee18 0a10 	vmov	r0, s16
 800d4f6:	f000 f947 	bl	800d788 <_Bfree>
 800d4fa:	464c      	mov	r4, r9
 800d4fc:	6923      	ldr	r3, [r4, #16]
 800d4fe:	1c5a      	adds	r2, r3, #1
 800d500:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d504:	6122      	str	r2, [r4, #16]
 800d506:	2201      	movs	r2, #1
 800d508:	615a      	str	r2, [r3, #20]
 800d50a:	e7bb      	b.n	800d484 <__gethex+0x3c8>
 800d50c:	6922      	ldr	r2, [r4, #16]
 800d50e:	455a      	cmp	r2, fp
 800d510:	dd0b      	ble.n	800d52a <__gethex+0x46e>
 800d512:	2101      	movs	r1, #1
 800d514:	4620      	mov	r0, r4
 800d516:	f7ff fd69 	bl	800cfec <rshift>
 800d51a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d51e:	3501      	adds	r5, #1
 800d520:	42ab      	cmp	r3, r5
 800d522:	f6ff aed0 	blt.w	800d2c6 <__gethex+0x20a>
 800d526:	2701      	movs	r7, #1
 800d528:	e7c0      	b.n	800d4ac <__gethex+0x3f0>
 800d52a:	f016 061f 	ands.w	r6, r6, #31
 800d52e:	d0fa      	beq.n	800d526 <__gethex+0x46a>
 800d530:	4453      	add	r3, sl
 800d532:	f1c6 0620 	rsb	r6, r6, #32
 800d536:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d53a:	f000 f9d7 	bl	800d8ec <__hi0bits>
 800d53e:	42b0      	cmp	r0, r6
 800d540:	dbe7      	blt.n	800d512 <__gethex+0x456>
 800d542:	e7f0      	b.n	800d526 <__gethex+0x46a>
 800d544:	08010f90 	.word	0x08010f90

0800d548 <L_shift>:
 800d548:	f1c2 0208 	rsb	r2, r2, #8
 800d54c:	0092      	lsls	r2, r2, #2
 800d54e:	b570      	push	{r4, r5, r6, lr}
 800d550:	f1c2 0620 	rsb	r6, r2, #32
 800d554:	6843      	ldr	r3, [r0, #4]
 800d556:	6804      	ldr	r4, [r0, #0]
 800d558:	fa03 f506 	lsl.w	r5, r3, r6
 800d55c:	432c      	orrs	r4, r5
 800d55e:	40d3      	lsrs	r3, r2
 800d560:	6004      	str	r4, [r0, #0]
 800d562:	f840 3f04 	str.w	r3, [r0, #4]!
 800d566:	4288      	cmp	r0, r1
 800d568:	d3f4      	bcc.n	800d554 <L_shift+0xc>
 800d56a:	bd70      	pop	{r4, r5, r6, pc}

0800d56c <__match>:
 800d56c:	b530      	push	{r4, r5, lr}
 800d56e:	6803      	ldr	r3, [r0, #0]
 800d570:	3301      	adds	r3, #1
 800d572:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d576:	b914      	cbnz	r4, 800d57e <__match+0x12>
 800d578:	6003      	str	r3, [r0, #0]
 800d57a:	2001      	movs	r0, #1
 800d57c:	bd30      	pop	{r4, r5, pc}
 800d57e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d582:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d586:	2d19      	cmp	r5, #25
 800d588:	bf98      	it	ls
 800d58a:	3220      	addls	r2, #32
 800d58c:	42a2      	cmp	r2, r4
 800d58e:	d0f0      	beq.n	800d572 <__match+0x6>
 800d590:	2000      	movs	r0, #0
 800d592:	e7f3      	b.n	800d57c <__match+0x10>

0800d594 <__hexnan>:
 800d594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d598:	680b      	ldr	r3, [r1, #0]
 800d59a:	115e      	asrs	r6, r3, #5
 800d59c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d5a0:	f013 031f 	ands.w	r3, r3, #31
 800d5a4:	b087      	sub	sp, #28
 800d5a6:	bf18      	it	ne
 800d5a8:	3604      	addne	r6, #4
 800d5aa:	2500      	movs	r5, #0
 800d5ac:	1f37      	subs	r7, r6, #4
 800d5ae:	4690      	mov	r8, r2
 800d5b0:	6802      	ldr	r2, [r0, #0]
 800d5b2:	9301      	str	r3, [sp, #4]
 800d5b4:	4682      	mov	sl, r0
 800d5b6:	f846 5c04 	str.w	r5, [r6, #-4]
 800d5ba:	46b9      	mov	r9, r7
 800d5bc:	463c      	mov	r4, r7
 800d5be:	9502      	str	r5, [sp, #8]
 800d5c0:	46ab      	mov	fp, r5
 800d5c2:	7851      	ldrb	r1, [r2, #1]
 800d5c4:	1c53      	adds	r3, r2, #1
 800d5c6:	9303      	str	r3, [sp, #12]
 800d5c8:	b341      	cbz	r1, 800d61c <__hexnan+0x88>
 800d5ca:	4608      	mov	r0, r1
 800d5cc:	9205      	str	r2, [sp, #20]
 800d5ce:	9104      	str	r1, [sp, #16]
 800d5d0:	f7ff fd5e 	bl	800d090 <__hexdig_fun>
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	d14f      	bne.n	800d678 <__hexnan+0xe4>
 800d5d8:	9904      	ldr	r1, [sp, #16]
 800d5da:	9a05      	ldr	r2, [sp, #20]
 800d5dc:	2920      	cmp	r1, #32
 800d5de:	d818      	bhi.n	800d612 <__hexnan+0x7e>
 800d5e0:	9b02      	ldr	r3, [sp, #8]
 800d5e2:	459b      	cmp	fp, r3
 800d5e4:	dd13      	ble.n	800d60e <__hexnan+0x7a>
 800d5e6:	454c      	cmp	r4, r9
 800d5e8:	d206      	bcs.n	800d5f8 <__hexnan+0x64>
 800d5ea:	2d07      	cmp	r5, #7
 800d5ec:	dc04      	bgt.n	800d5f8 <__hexnan+0x64>
 800d5ee:	462a      	mov	r2, r5
 800d5f0:	4649      	mov	r1, r9
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f7ff ffa8 	bl	800d548 <L_shift>
 800d5f8:	4544      	cmp	r4, r8
 800d5fa:	d950      	bls.n	800d69e <__hexnan+0x10a>
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	f1a4 0904 	sub.w	r9, r4, #4
 800d602:	f844 3c04 	str.w	r3, [r4, #-4]
 800d606:	f8cd b008 	str.w	fp, [sp, #8]
 800d60a:	464c      	mov	r4, r9
 800d60c:	461d      	mov	r5, r3
 800d60e:	9a03      	ldr	r2, [sp, #12]
 800d610:	e7d7      	b.n	800d5c2 <__hexnan+0x2e>
 800d612:	2929      	cmp	r1, #41	; 0x29
 800d614:	d156      	bne.n	800d6c4 <__hexnan+0x130>
 800d616:	3202      	adds	r2, #2
 800d618:	f8ca 2000 	str.w	r2, [sl]
 800d61c:	f1bb 0f00 	cmp.w	fp, #0
 800d620:	d050      	beq.n	800d6c4 <__hexnan+0x130>
 800d622:	454c      	cmp	r4, r9
 800d624:	d206      	bcs.n	800d634 <__hexnan+0xa0>
 800d626:	2d07      	cmp	r5, #7
 800d628:	dc04      	bgt.n	800d634 <__hexnan+0xa0>
 800d62a:	462a      	mov	r2, r5
 800d62c:	4649      	mov	r1, r9
 800d62e:	4620      	mov	r0, r4
 800d630:	f7ff ff8a 	bl	800d548 <L_shift>
 800d634:	4544      	cmp	r4, r8
 800d636:	d934      	bls.n	800d6a2 <__hexnan+0x10e>
 800d638:	f1a8 0204 	sub.w	r2, r8, #4
 800d63c:	4623      	mov	r3, r4
 800d63e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d642:	f842 1f04 	str.w	r1, [r2, #4]!
 800d646:	429f      	cmp	r7, r3
 800d648:	d2f9      	bcs.n	800d63e <__hexnan+0xaa>
 800d64a:	1b3b      	subs	r3, r7, r4
 800d64c:	f023 0303 	bic.w	r3, r3, #3
 800d650:	3304      	adds	r3, #4
 800d652:	3401      	adds	r4, #1
 800d654:	3e03      	subs	r6, #3
 800d656:	42b4      	cmp	r4, r6
 800d658:	bf88      	it	hi
 800d65a:	2304      	movhi	r3, #4
 800d65c:	4443      	add	r3, r8
 800d65e:	2200      	movs	r2, #0
 800d660:	f843 2b04 	str.w	r2, [r3], #4
 800d664:	429f      	cmp	r7, r3
 800d666:	d2fb      	bcs.n	800d660 <__hexnan+0xcc>
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	b91b      	cbnz	r3, 800d674 <__hexnan+0xe0>
 800d66c:	4547      	cmp	r7, r8
 800d66e:	d127      	bne.n	800d6c0 <__hexnan+0x12c>
 800d670:	2301      	movs	r3, #1
 800d672:	603b      	str	r3, [r7, #0]
 800d674:	2005      	movs	r0, #5
 800d676:	e026      	b.n	800d6c6 <__hexnan+0x132>
 800d678:	3501      	adds	r5, #1
 800d67a:	2d08      	cmp	r5, #8
 800d67c:	f10b 0b01 	add.w	fp, fp, #1
 800d680:	dd06      	ble.n	800d690 <__hexnan+0xfc>
 800d682:	4544      	cmp	r4, r8
 800d684:	d9c3      	bls.n	800d60e <__hexnan+0x7a>
 800d686:	2300      	movs	r3, #0
 800d688:	f844 3c04 	str.w	r3, [r4, #-4]
 800d68c:	2501      	movs	r5, #1
 800d68e:	3c04      	subs	r4, #4
 800d690:	6822      	ldr	r2, [r4, #0]
 800d692:	f000 000f 	and.w	r0, r0, #15
 800d696:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d69a:	6022      	str	r2, [r4, #0]
 800d69c:	e7b7      	b.n	800d60e <__hexnan+0x7a>
 800d69e:	2508      	movs	r5, #8
 800d6a0:	e7b5      	b.n	800d60e <__hexnan+0x7a>
 800d6a2:	9b01      	ldr	r3, [sp, #4]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d0df      	beq.n	800d668 <__hexnan+0xd4>
 800d6a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ac:	f1c3 0320 	rsb	r3, r3, #32
 800d6b0:	fa22 f303 	lsr.w	r3, r2, r3
 800d6b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d6b8:	401a      	ands	r2, r3
 800d6ba:	f846 2c04 	str.w	r2, [r6, #-4]
 800d6be:	e7d3      	b.n	800d668 <__hexnan+0xd4>
 800d6c0:	3f04      	subs	r7, #4
 800d6c2:	e7d1      	b.n	800d668 <__hexnan+0xd4>
 800d6c4:	2004      	movs	r0, #4
 800d6c6:	b007      	add	sp, #28
 800d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6cc <_localeconv_r>:
 800d6cc:	4800      	ldr	r0, [pc, #0]	; (800d6d0 <_localeconv_r+0x4>)
 800d6ce:	4770      	bx	lr
 800d6d0:	2000038c 	.word	0x2000038c

0800d6d4 <malloc>:
 800d6d4:	4b02      	ldr	r3, [pc, #8]	; (800d6e0 <malloc+0xc>)
 800d6d6:	4601      	mov	r1, r0
 800d6d8:	6818      	ldr	r0, [r3, #0]
 800d6da:	f000 bd59 	b.w	800e190 <_malloc_r>
 800d6de:	bf00      	nop
 800d6e0:	20000234 	.word	0x20000234

0800d6e4 <__ascii_mbtowc>:
 800d6e4:	b082      	sub	sp, #8
 800d6e6:	b901      	cbnz	r1, 800d6ea <__ascii_mbtowc+0x6>
 800d6e8:	a901      	add	r1, sp, #4
 800d6ea:	b142      	cbz	r2, 800d6fe <__ascii_mbtowc+0x1a>
 800d6ec:	b14b      	cbz	r3, 800d702 <__ascii_mbtowc+0x1e>
 800d6ee:	7813      	ldrb	r3, [r2, #0]
 800d6f0:	600b      	str	r3, [r1, #0]
 800d6f2:	7812      	ldrb	r2, [r2, #0]
 800d6f4:	1e10      	subs	r0, r2, #0
 800d6f6:	bf18      	it	ne
 800d6f8:	2001      	movne	r0, #1
 800d6fa:	b002      	add	sp, #8
 800d6fc:	4770      	bx	lr
 800d6fe:	4610      	mov	r0, r2
 800d700:	e7fb      	b.n	800d6fa <__ascii_mbtowc+0x16>
 800d702:	f06f 0001 	mvn.w	r0, #1
 800d706:	e7f8      	b.n	800d6fa <__ascii_mbtowc+0x16>

0800d708 <_Balloc>:
 800d708:	b570      	push	{r4, r5, r6, lr}
 800d70a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d70c:	4604      	mov	r4, r0
 800d70e:	460d      	mov	r5, r1
 800d710:	b976      	cbnz	r6, 800d730 <_Balloc+0x28>
 800d712:	2010      	movs	r0, #16
 800d714:	f7ff ffde 	bl	800d6d4 <malloc>
 800d718:	4602      	mov	r2, r0
 800d71a:	6260      	str	r0, [r4, #36]	; 0x24
 800d71c:	b920      	cbnz	r0, 800d728 <_Balloc+0x20>
 800d71e:	4b18      	ldr	r3, [pc, #96]	; (800d780 <_Balloc+0x78>)
 800d720:	4818      	ldr	r0, [pc, #96]	; (800d784 <_Balloc+0x7c>)
 800d722:	2166      	movs	r1, #102	; 0x66
 800d724:	f000 ff3e 	bl	800e5a4 <__assert_func>
 800d728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d72c:	6006      	str	r6, [r0, #0]
 800d72e:	60c6      	str	r6, [r0, #12]
 800d730:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d732:	68f3      	ldr	r3, [r6, #12]
 800d734:	b183      	cbz	r3, 800d758 <_Balloc+0x50>
 800d736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d738:	68db      	ldr	r3, [r3, #12]
 800d73a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d73e:	b9b8      	cbnz	r0, 800d770 <_Balloc+0x68>
 800d740:	2101      	movs	r1, #1
 800d742:	fa01 f605 	lsl.w	r6, r1, r5
 800d746:	1d72      	adds	r2, r6, #5
 800d748:	0092      	lsls	r2, r2, #2
 800d74a:	4620      	mov	r0, r4
 800d74c:	f000 fc9d 	bl	800e08a <_calloc_r>
 800d750:	b160      	cbz	r0, 800d76c <_Balloc+0x64>
 800d752:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d756:	e00e      	b.n	800d776 <_Balloc+0x6e>
 800d758:	2221      	movs	r2, #33	; 0x21
 800d75a:	2104      	movs	r1, #4
 800d75c:	4620      	mov	r0, r4
 800d75e:	f000 fc94 	bl	800e08a <_calloc_r>
 800d762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d764:	60f0      	str	r0, [r6, #12]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d1e4      	bne.n	800d736 <_Balloc+0x2e>
 800d76c:	2000      	movs	r0, #0
 800d76e:	bd70      	pop	{r4, r5, r6, pc}
 800d770:	6802      	ldr	r2, [r0, #0]
 800d772:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d776:	2300      	movs	r3, #0
 800d778:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d77c:	e7f7      	b.n	800d76e <_Balloc+0x66>
 800d77e:	bf00      	nop
 800d780:	08010f1e 	.word	0x08010f1e
 800d784:	0801101c 	.word	0x0801101c

0800d788 <_Bfree>:
 800d788:	b570      	push	{r4, r5, r6, lr}
 800d78a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d78c:	4605      	mov	r5, r0
 800d78e:	460c      	mov	r4, r1
 800d790:	b976      	cbnz	r6, 800d7b0 <_Bfree+0x28>
 800d792:	2010      	movs	r0, #16
 800d794:	f7ff ff9e 	bl	800d6d4 <malloc>
 800d798:	4602      	mov	r2, r0
 800d79a:	6268      	str	r0, [r5, #36]	; 0x24
 800d79c:	b920      	cbnz	r0, 800d7a8 <_Bfree+0x20>
 800d79e:	4b09      	ldr	r3, [pc, #36]	; (800d7c4 <_Bfree+0x3c>)
 800d7a0:	4809      	ldr	r0, [pc, #36]	; (800d7c8 <_Bfree+0x40>)
 800d7a2:	218a      	movs	r1, #138	; 0x8a
 800d7a4:	f000 fefe 	bl	800e5a4 <__assert_func>
 800d7a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7ac:	6006      	str	r6, [r0, #0]
 800d7ae:	60c6      	str	r6, [r0, #12]
 800d7b0:	b13c      	cbz	r4, 800d7c2 <_Bfree+0x3a>
 800d7b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d7b4:	6862      	ldr	r2, [r4, #4]
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7bc:	6021      	str	r1, [r4, #0]
 800d7be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d7c2:	bd70      	pop	{r4, r5, r6, pc}
 800d7c4:	08010f1e 	.word	0x08010f1e
 800d7c8:	0801101c 	.word	0x0801101c

0800d7cc <__multadd>:
 800d7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d0:	690d      	ldr	r5, [r1, #16]
 800d7d2:	4607      	mov	r7, r0
 800d7d4:	460c      	mov	r4, r1
 800d7d6:	461e      	mov	r6, r3
 800d7d8:	f101 0c14 	add.w	ip, r1, #20
 800d7dc:	2000      	movs	r0, #0
 800d7de:	f8dc 3000 	ldr.w	r3, [ip]
 800d7e2:	b299      	uxth	r1, r3
 800d7e4:	fb02 6101 	mla	r1, r2, r1, r6
 800d7e8:	0c1e      	lsrs	r6, r3, #16
 800d7ea:	0c0b      	lsrs	r3, r1, #16
 800d7ec:	fb02 3306 	mla	r3, r2, r6, r3
 800d7f0:	b289      	uxth	r1, r1
 800d7f2:	3001      	adds	r0, #1
 800d7f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7f8:	4285      	cmp	r5, r0
 800d7fa:	f84c 1b04 	str.w	r1, [ip], #4
 800d7fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d802:	dcec      	bgt.n	800d7de <__multadd+0x12>
 800d804:	b30e      	cbz	r6, 800d84a <__multadd+0x7e>
 800d806:	68a3      	ldr	r3, [r4, #8]
 800d808:	42ab      	cmp	r3, r5
 800d80a:	dc19      	bgt.n	800d840 <__multadd+0x74>
 800d80c:	6861      	ldr	r1, [r4, #4]
 800d80e:	4638      	mov	r0, r7
 800d810:	3101      	adds	r1, #1
 800d812:	f7ff ff79 	bl	800d708 <_Balloc>
 800d816:	4680      	mov	r8, r0
 800d818:	b928      	cbnz	r0, 800d826 <__multadd+0x5a>
 800d81a:	4602      	mov	r2, r0
 800d81c:	4b0c      	ldr	r3, [pc, #48]	; (800d850 <__multadd+0x84>)
 800d81e:	480d      	ldr	r0, [pc, #52]	; (800d854 <__multadd+0x88>)
 800d820:	21b5      	movs	r1, #181	; 0xb5
 800d822:	f000 febf 	bl	800e5a4 <__assert_func>
 800d826:	6922      	ldr	r2, [r4, #16]
 800d828:	3202      	adds	r2, #2
 800d82a:	f104 010c 	add.w	r1, r4, #12
 800d82e:	0092      	lsls	r2, r2, #2
 800d830:	300c      	adds	r0, #12
 800d832:	f7fc ffff 	bl	800a834 <memcpy>
 800d836:	4621      	mov	r1, r4
 800d838:	4638      	mov	r0, r7
 800d83a:	f7ff ffa5 	bl	800d788 <_Bfree>
 800d83e:	4644      	mov	r4, r8
 800d840:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d844:	3501      	adds	r5, #1
 800d846:	615e      	str	r6, [r3, #20]
 800d848:	6125      	str	r5, [r4, #16]
 800d84a:	4620      	mov	r0, r4
 800d84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d850:	08010f90 	.word	0x08010f90
 800d854:	0801101c 	.word	0x0801101c

0800d858 <__s2b>:
 800d858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d85c:	460c      	mov	r4, r1
 800d85e:	4615      	mov	r5, r2
 800d860:	461f      	mov	r7, r3
 800d862:	2209      	movs	r2, #9
 800d864:	3308      	adds	r3, #8
 800d866:	4606      	mov	r6, r0
 800d868:	fb93 f3f2 	sdiv	r3, r3, r2
 800d86c:	2100      	movs	r1, #0
 800d86e:	2201      	movs	r2, #1
 800d870:	429a      	cmp	r2, r3
 800d872:	db09      	blt.n	800d888 <__s2b+0x30>
 800d874:	4630      	mov	r0, r6
 800d876:	f7ff ff47 	bl	800d708 <_Balloc>
 800d87a:	b940      	cbnz	r0, 800d88e <__s2b+0x36>
 800d87c:	4602      	mov	r2, r0
 800d87e:	4b19      	ldr	r3, [pc, #100]	; (800d8e4 <__s2b+0x8c>)
 800d880:	4819      	ldr	r0, [pc, #100]	; (800d8e8 <__s2b+0x90>)
 800d882:	21ce      	movs	r1, #206	; 0xce
 800d884:	f000 fe8e 	bl	800e5a4 <__assert_func>
 800d888:	0052      	lsls	r2, r2, #1
 800d88a:	3101      	adds	r1, #1
 800d88c:	e7f0      	b.n	800d870 <__s2b+0x18>
 800d88e:	9b08      	ldr	r3, [sp, #32]
 800d890:	6143      	str	r3, [r0, #20]
 800d892:	2d09      	cmp	r5, #9
 800d894:	f04f 0301 	mov.w	r3, #1
 800d898:	6103      	str	r3, [r0, #16]
 800d89a:	dd16      	ble.n	800d8ca <__s2b+0x72>
 800d89c:	f104 0909 	add.w	r9, r4, #9
 800d8a0:	46c8      	mov	r8, r9
 800d8a2:	442c      	add	r4, r5
 800d8a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d8a8:	4601      	mov	r1, r0
 800d8aa:	3b30      	subs	r3, #48	; 0x30
 800d8ac:	220a      	movs	r2, #10
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	f7ff ff8c 	bl	800d7cc <__multadd>
 800d8b4:	45a0      	cmp	r8, r4
 800d8b6:	d1f5      	bne.n	800d8a4 <__s2b+0x4c>
 800d8b8:	f1a5 0408 	sub.w	r4, r5, #8
 800d8bc:	444c      	add	r4, r9
 800d8be:	1b2d      	subs	r5, r5, r4
 800d8c0:	1963      	adds	r3, r4, r5
 800d8c2:	42bb      	cmp	r3, r7
 800d8c4:	db04      	blt.n	800d8d0 <__s2b+0x78>
 800d8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8ca:	340a      	adds	r4, #10
 800d8cc:	2509      	movs	r5, #9
 800d8ce:	e7f6      	b.n	800d8be <__s2b+0x66>
 800d8d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d8d4:	4601      	mov	r1, r0
 800d8d6:	3b30      	subs	r3, #48	; 0x30
 800d8d8:	220a      	movs	r2, #10
 800d8da:	4630      	mov	r0, r6
 800d8dc:	f7ff ff76 	bl	800d7cc <__multadd>
 800d8e0:	e7ee      	b.n	800d8c0 <__s2b+0x68>
 800d8e2:	bf00      	nop
 800d8e4:	08010f90 	.word	0x08010f90
 800d8e8:	0801101c 	.word	0x0801101c

0800d8ec <__hi0bits>:
 800d8ec:	0c03      	lsrs	r3, r0, #16
 800d8ee:	041b      	lsls	r3, r3, #16
 800d8f0:	b9d3      	cbnz	r3, 800d928 <__hi0bits+0x3c>
 800d8f2:	0400      	lsls	r0, r0, #16
 800d8f4:	2310      	movs	r3, #16
 800d8f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d8fa:	bf04      	itt	eq
 800d8fc:	0200      	lsleq	r0, r0, #8
 800d8fe:	3308      	addeq	r3, #8
 800d900:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d904:	bf04      	itt	eq
 800d906:	0100      	lsleq	r0, r0, #4
 800d908:	3304      	addeq	r3, #4
 800d90a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d90e:	bf04      	itt	eq
 800d910:	0080      	lsleq	r0, r0, #2
 800d912:	3302      	addeq	r3, #2
 800d914:	2800      	cmp	r0, #0
 800d916:	db05      	blt.n	800d924 <__hi0bits+0x38>
 800d918:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d91c:	f103 0301 	add.w	r3, r3, #1
 800d920:	bf08      	it	eq
 800d922:	2320      	moveq	r3, #32
 800d924:	4618      	mov	r0, r3
 800d926:	4770      	bx	lr
 800d928:	2300      	movs	r3, #0
 800d92a:	e7e4      	b.n	800d8f6 <__hi0bits+0xa>

0800d92c <__lo0bits>:
 800d92c:	6803      	ldr	r3, [r0, #0]
 800d92e:	f013 0207 	ands.w	r2, r3, #7
 800d932:	4601      	mov	r1, r0
 800d934:	d00b      	beq.n	800d94e <__lo0bits+0x22>
 800d936:	07da      	lsls	r2, r3, #31
 800d938:	d423      	bmi.n	800d982 <__lo0bits+0x56>
 800d93a:	0798      	lsls	r0, r3, #30
 800d93c:	bf49      	itett	mi
 800d93e:	085b      	lsrmi	r3, r3, #1
 800d940:	089b      	lsrpl	r3, r3, #2
 800d942:	2001      	movmi	r0, #1
 800d944:	600b      	strmi	r3, [r1, #0]
 800d946:	bf5c      	itt	pl
 800d948:	600b      	strpl	r3, [r1, #0]
 800d94a:	2002      	movpl	r0, #2
 800d94c:	4770      	bx	lr
 800d94e:	b298      	uxth	r0, r3
 800d950:	b9a8      	cbnz	r0, 800d97e <__lo0bits+0x52>
 800d952:	0c1b      	lsrs	r3, r3, #16
 800d954:	2010      	movs	r0, #16
 800d956:	b2da      	uxtb	r2, r3
 800d958:	b90a      	cbnz	r2, 800d95e <__lo0bits+0x32>
 800d95a:	3008      	adds	r0, #8
 800d95c:	0a1b      	lsrs	r3, r3, #8
 800d95e:	071a      	lsls	r2, r3, #28
 800d960:	bf04      	itt	eq
 800d962:	091b      	lsreq	r3, r3, #4
 800d964:	3004      	addeq	r0, #4
 800d966:	079a      	lsls	r2, r3, #30
 800d968:	bf04      	itt	eq
 800d96a:	089b      	lsreq	r3, r3, #2
 800d96c:	3002      	addeq	r0, #2
 800d96e:	07da      	lsls	r2, r3, #31
 800d970:	d403      	bmi.n	800d97a <__lo0bits+0x4e>
 800d972:	085b      	lsrs	r3, r3, #1
 800d974:	f100 0001 	add.w	r0, r0, #1
 800d978:	d005      	beq.n	800d986 <__lo0bits+0x5a>
 800d97a:	600b      	str	r3, [r1, #0]
 800d97c:	4770      	bx	lr
 800d97e:	4610      	mov	r0, r2
 800d980:	e7e9      	b.n	800d956 <__lo0bits+0x2a>
 800d982:	2000      	movs	r0, #0
 800d984:	4770      	bx	lr
 800d986:	2020      	movs	r0, #32
 800d988:	4770      	bx	lr
	...

0800d98c <__i2b>:
 800d98c:	b510      	push	{r4, lr}
 800d98e:	460c      	mov	r4, r1
 800d990:	2101      	movs	r1, #1
 800d992:	f7ff feb9 	bl	800d708 <_Balloc>
 800d996:	4602      	mov	r2, r0
 800d998:	b928      	cbnz	r0, 800d9a6 <__i2b+0x1a>
 800d99a:	4b05      	ldr	r3, [pc, #20]	; (800d9b0 <__i2b+0x24>)
 800d99c:	4805      	ldr	r0, [pc, #20]	; (800d9b4 <__i2b+0x28>)
 800d99e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d9a2:	f000 fdff 	bl	800e5a4 <__assert_func>
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	6144      	str	r4, [r0, #20]
 800d9aa:	6103      	str	r3, [r0, #16]
 800d9ac:	bd10      	pop	{r4, pc}
 800d9ae:	bf00      	nop
 800d9b0:	08010f90 	.word	0x08010f90
 800d9b4:	0801101c 	.word	0x0801101c

0800d9b8 <__multiply>:
 800d9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9bc:	4691      	mov	r9, r2
 800d9be:	690a      	ldr	r2, [r1, #16]
 800d9c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	bfb8      	it	lt
 800d9c8:	460b      	movlt	r3, r1
 800d9ca:	460c      	mov	r4, r1
 800d9cc:	bfbc      	itt	lt
 800d9ce:	464c      	movlt	r4, r9
 800d9d0:	4699      	movlt	r9, r3
 800d9d2:	6927      	ldr	r7, [r4, #16]
 800d9d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d9d8:	68a3      	ldr	r3, [r4, #8]
 800d9da:	6861      	ldr	r1, [r4, #4]
 800d9dc:	eb07 060a 	add.w	r6, r7, sl
 800d9e0:	42b3      	cmp	r3, r6
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	bfb8      	it	lt
 800d9e6:	3101      	addlt	r1, #1
 800d9e8:	f7ff fe8e 	bl	800d708 <_Balloc>
 800d9ec:	b930      	cbnz	r0, 800d9fc <__multiply+0x44>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	4b44      	ldr	r3, [pc, #272]	; (800db04 <__multiply+0x14c>)
 800d9f2:	4845      	ldr	r0, [pc, #276]	; (800db08 <__multiply+0x150>)
 800d9f4:	f240 115d 	movw	r1, #349	; 0x15d
 800d9f8:	f000 fdd4 	bl	800e5a4 <__assert_func>
 800d9fc:	f100 0514 	add.w	r5, r0, #20
 800da00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800da04:	462b      	mov	r3, r5
 800da06:	2200      	movs	r2, #0
 800da08:	4543      	cmp	r3, r8
 800da0a:	d321      	bcc.n	800da50 <__multiply+0x98>
 800da0c:	f104 0314 	add.w	r3, r4, #20
 800da10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da14:	f109 0314 	add.w	r3, r9, #20
 800da18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800da1c:	9202      	str	r2, [sp, #8]
 800da1e:	1b3a      	subs	r2, r7, r4
 800da20:	3a15      	subs	r2, #21
 800da22:	f022 0203 	bic.w	r2, r2, #3
 800da26:	3204      	adds	r2, #4
 800da28:	f104 0115 	add.w	r1, r4, #21
 800da2c:	428f      	cmp	r7, r1
 800da2e:	bf38      	it	cc
 800da30:	2204      	movcc	r2, #4
 800da32:	9201      	str	r2, [sp, #4]
 800da34:	9a02      	ldr	r2, [sp, #8]
 800da36:	9303      	str	r3, [sp, #12]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d80c      	bhi.n	800da56 <__multiply+0x9e>
 800da3c:	2e00      	cmp	r6, #0
 800da3e:	dd03      	ble.n	800da48 <__multiply+0x90>
 800da40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800da44:	2b00      	cmp	r3, #0
 800da46:	d05a      	beq.n	800dafe <__multiply+0x146>
 800da48:	6106      	str	r6, [r0, #16]
 800da4a:	b005      	add	sp, #20
 800da4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da50:	f843 2b04 	str.w	r2, [r3], #4
 800da54:	e7d8      	b.n	800da08 <__multiply+0x50>
 800da56:	f8b3 a000 	ldrh.w	sl, [r3]
 800da5a:	f1ba 0f00 	cmp.w	sl, #0
 800da5e:	d024      	beq.n	800daaa <__multiply+0xf2>
 800da60:	f104 0e14 	add.w	lr, r4, #20
 800da64:	46a9      	mov	r9, r5
 800da66:	f04f 0c00 	mov.w	ip, #0
 800da6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800da6e:	f8d9 1000 	ldr.w	r1, [r9]
 800da72:	fa1f fb82 	uxth.w	fp, r2
 800da76:	b289      	uxth	r1, r1
 800da78:	fb0a 110b 	mla	r1, sl, fp, r1
 800da7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800da80:	f8d9 2000 	ldr.w	r2, [r9]
 800da84:	4461      	add	r1, ip
 800da86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da8a:	fb0a c20b 	mla	r2, sl, fp, ip
 800da8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800da92:	b289      	uxth	r1, r1
 800da94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800da98:	4577      	cmp	r7, lr
 800da9a:	f849 1b04 	str.w	r1, [r9], #4
 800da9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800daa2:	d8e2      	bhi.n	800da6a <__multiply+0xb2>
 800daa4:	9a01      	ldr	r2, [sp, #4]
 800daa6:	f845 c002 	str.w	ip, [r5, r2]
 800daaa:	9a03      	ldr	r2, [sp, #12]
 800daac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dab0:	3304      	adds	r3, #4
 800dab2:	f1b9 0f00 	cmp.w	r9, #0
 800dab6:	d020      	beq.n	800dafa <__multiply+0x142>
 800dab8:	6829      	ldr	r1, [r5, #0]
 800daba:	f104 0c14 	add.w	ip, r4, #20
 800dabe:	46ae      	mov	lr, r5
 800dac0:	f04f 0a00 	mov.w	sl, #0
 800dac4:	f8bc b000 	ldrh.w	fp, [ip]
 800dac8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dacc:	fb09 220b 	mla	r2, r9, fp, r2
 800dad0:	4492      	add	sl, r2
 800dad2:	b289      	uxth	r1, r1
 800dad4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dad8:	f84e 1b04 	str.w	r1, [lr], #4
 800dadc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dae0:	f8be 1000 	ldrh.w	r1, [lr]
 800dae4:	0c12      	lsrs	r2, r2, #16
 800dae6:	fb09 1102 	mla	r1, r9, r2, r1
 800daea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800daee:	4567      	cmp	r7, ip
 800daf0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800daf4:	d8e6      	bhi.n	800dac4 <__multiply+0x10c>
 800daf6:	9a01      	ldr	r2, [sp, #4]
 800daf8:	50a9      	str	r1, [r5, r2]
 800dafa:	3504      	adds	r5, #4
 800dafc:	e79a      	b.n	800da34 <__multiply+0x7c>
 800dafe:	3e01      	subs	r6, #1
 800db00:	e79c      	b.n	800da3c <__multiply+0x84>
 800db02:	bf00      	nop
 800db04:	08010f90 	.word	0x08010f90
 800db08:	0801101c 	.word	0x0801101c

0800db0c <__pow5mult>:
 800db0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db10:	4615      	mov	r5, r2
 800db12:	f012 0203 	ands.w	r2, r2, #3
 800db16:	4606      	mov	r6, r0
 800db18:	460f      	mov	r7, r1
 800db1a:	d007      	beq.n	800db2c <__pow5mult+0x20>
 800db1c:	4c25      	ldr	r4, [pc, #148]	; (800dbb4 <__pow5mult+0xa8>)
 800db1e:	3a01      	subs	r2, #1
 800db20:	2300      	movs	r3, #0
 800db22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db26:	f7ff fe51 	bl	800d7cc <__multadd>
 800db2a:	4607      	mov	r7, r0
 800db2c:	10ad      	asrs	r5, r5, #2
 800db2e:	d03d      	beq.n	800dbac <__pow5mult+0xa0>
 800db30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800db32:	b97c      	cbnz	r4, 800db54 <__pow5mult+0x48>
 800db34:	2010      	movs	r0, #16
 800db36:	f7ff fdcd 	bl	800d6d4 <malloc>
 800db3a:	4602      	mov	r2, r0
 800db3c:	6270      	str	r0, [r6, #36]	; 0x24
 800db3e:	b928      	cbnz	r0, 800db4c <__pow5mult+0x40>
 800db40:	4b1d      	ldr	r3, [pc, #116]	; (800dbb8 <__pow5mult+0xac>)
 800db42:	481e      	ldr	r0, [pc, #120]	; (800dbbc <__pow5mult+0xb0>)
 800db44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800db48:	f000 fd2c 	bl	800e5a4 <__assert_func>
 800db4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db50:	6004      	str	r4, [r0, #0]
 800db52:	60c4      	str	r4, [r0, #12]
 800db54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800db58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db5c:	b94c      	cbnz	r4, 800db72 <__pow5mult+0x66>
 800db5e:	f240 2171 	movw	r1, #625	; 0x271
 800db62:	4630      	mov	r0, r6
 800db64:	f7ff ff12 	bl	800d98c <__i2b>
 800db68:	2300      	movs	r3, #0
 800db6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800db6e:	4604      	mov	r4, r0
 800db70:	6003      	str	r3, [r0, #0]
 800db72:	f04f 0900 	mov.w	r9, #0
 800db76:	07eb      	lsls	r3, r5, #31
 800db78:	d50a      	bpl.n	800db90 <__pow5mult+0x84>
 800db7a:	4639      	mov	r1, r7
 800db7c:	4622      	mov	r2, r4
 800db7e:	4630      	mov	r0, r6
 800db80:	f7ff ff1a 	bl	800d9b8 <__multiply>
 800db84:	4639      	mov	r1, r7
 800db86:	4680      	mov	r8, r0
 800db88:	4630      	mov	r0, r6
 800db8a:	f7ff fdfd 	bl	800d788 <_Bfree>
 800db8e:	4647      	mov	r7, r8
 800db90:	106d      	asrs	r5, r5, #1
 800db92:	d00b      	beq.n	800dbac <__pow5mult+0xa0>
 800db94:	6820      	ldr	r0, [r4, #0]
 800db96:	b938      	cbnz	r0, 800dba8 <__pow5mult+0x9c>
 800db98:	4622      	mov	r2, r4
 800db9a:	4621      	mov	r1, r4
 800db9c:	4630      	mov	r0, r6
 800db9e:	f7ff ff0b 	bl	800d9b8 <__multiply>
 800dba2:	6020      	str	r0, [r4, #0]
 800dba4:	f8c0 9000 	str.w	r9, [r0]
 800dba8:	4604      	mov	r4, r0
 800dbaa:	e7e4      	b.n	800db76 <__pow5mult+0x6a>
 800dbac:	4638      	mov	r0, r7
 800dbae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbb2:	bf00      	nop
 800dbb4:	08011168 	.word	0x08011168
 800dbb8:	08010f1e 	.word	0x08010f1e
 800dbbc:	0801101c 	.word	0x0801101c

0800dbc0 <__lshift>:
 800dbc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbc4:	460c      	mov	r4, r1
 800dbc6:	6849      	ldr	r1, [r1, #4]
 800dbc8:	6923      	ldr	r3, [r4, #16]
 800dbca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dbce:	68a3      	ldr	r3, [r4, #8]
 800dbd0:	4607      	mov	r7, r0
 800dbd2:	4691      	mov	r9, r2
 800dbd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dbd8:	f108 0601 	add.w	r6, r8, #1
 800dbdc:	42b3      	cmp	r3, r6
 800dbde:	db0b      	blt.n	800dbf8 <__lshift+0x38>
 800dbe0:	4638      	mov	r0, r7
 800dbe2:	f7ff fd91 	bl	800d708 <_Balloc>
 800dbe6:	4605      	mov	r5, r0
 800dbe8:	b948      	cbnz	r0, 800dbfe <__lshift+0x3e>
 800dbea:	4602      	mov	r2, r0
 800dbec:	4b2a      	ldr	r3, [pc, #168]	; (800dc98 <__lshift+0xd8>)
 800dbee:	482b      	ldr	r0, [pc, #172]	; (800dc9c <__lshift+0xdc>)
 800dbf0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dbf4:	f000 fcd6 	bl	800e5a4 <__assert_func>
 800dbf8:	3101      	adds	r1, #1
 800dbfa:	005b      	lsls	r3, r3, #1
 800dbfc:	e7ee      	b.n	800dbdc <__lshift+0x1c>
 800dbfe:	2300      	movs	r3, #0
 800dc00:	f100 0114 	add.w	r1, r0, #20
 800dc04:	f100 0210 	add.w	r2, r0, #16
 800dc08:	4618      	mov	r0, r3
 800dc0a:	4553      	cmp	r3, sl
 800dc0c:	db37      	blt.n	800dc7e <__lshift+0xbe>
 800dc0e:	6920      	ldr	r0, [r4, #16]
 800dc10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc14:	f104 0314 	add.w	r3, r4, #20
 800dc18:	f019 091f 	ands.w	r9, r9, #31
 800dc1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dc24:	d02f      	beq.n	800dc86 <__lshift+0xc6>
 800dc26:	f1c9 0e20 	rsb	lr, r9, #32
 800dc2a:	468a      	mov	sl, r1
 800dc2c:	f04f 0c00 	mov.w	ip, #0
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	fa02 f209 	lsl.w	r2, r2, r9
 800dc36:	ea42 020c 	orr.w	r2, r2, ip
 800dc3a:	f84a 2b04 	str.w	r2, [sl], #4
 800dc3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc42:	4298      	cmp	r0, r3
 800dc44:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dc48:	d8f2      	bhi.n	800dc30 <__lshift+0x70>
 800dc4a:	1b03      	subs	r3, r0, r4
 800dc4c:	3b15      	subs	r3, #21
 800dc4e:	f023 0303 	bic.w	r3, r3, #3
 800dc52:	3304      	adds	r3, #4
 800dc54:	f104 0215 	add.w	r2, r4, #21
 800dc58:	4290      	cmp	r0, r2
 800dc5a:	bf38      	it	cc
 800dc5c:	2304      	movcc	r3, #4
 800dc5e:	f841 c003 	str.w	ip, [r1, r3]
 800dc62:	f1bc 0f00 	cmp.w	ip, #0
 800dc66:	d001      	beq.n	800dc6c <__lshift+0xac>
 800dc68:	f108 0602 	add.w	r6, r8, #2
 800dc6c:	3e01      	subs	r6, #1
 800dc6e:	4638      	mov	r0, r7
 800dc70:	612e      	str	r6, [r5, #16]
 800dc72:	4621      	mov	r1, r4
 800dc74:	f7ff fd88 	bl	800d788 <_Bfree>
 800dc78:	4628      	mov	r0, r5
 800dc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc82:	3301      	adds	r3, #1
 800dc84:	e7c1      	b.n	800dc0a <__lshift+0x4a>
 800dc86:	3904      	subs	r1, #4
 800dc88:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc8c:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc90:	4298      	cmp	r0, r3
 800dc92:	d8f9      	bhi.n	800dc88 <__lshift+0xc8>
 800dc94:	e7ea      	b.n	800dc6c <__lshift+0xac>
 800dc96:	bf00      	nop
 800dc98:	08010f90 	.word	0x08010f90
 800dc9c:	0801101c 	.word	0x0801101c

0800dca0 <__mcmp>:
 800dca0:	b530      	push	{r4, r5, lr}
 800dca2:	6902      	ldr	r2, [r0, #16]
 800dca4:	690c      	ldr	r4, [r1, #16]
 800dca6:	1b12      	subs	r2, r2, r4
 800dca8:	d10e      	bne.n	800dcc8 <__mcmp+0x28>
 800dcaa:	f100 0314 	add.w	r3, r0, #20
 800dcae:	3114      	adds	r1, #20
 800dcb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dcb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dcb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dcbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dcc0:	42a5      	cmp	r5, r4
 800dcc2:	d003      	beq.n	800dccc <__mcmp+0x2c>
 800dcc4:	d305      	bcc.n	800dcd2 <__mcmp+0x32>
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	4610      	mov	r0, r2
 800dcca:	bd30      	pop	{r4, r5, pc}
 800dccc:	4283      	cmp	r3, r0
 800dcce:	d3f3      	bcc.n	800dcb8 <__mcmp+0x18>
 800dcd0:	e7fa      	b.n	800dcc8 <__mcmp+0x28>
 800dcd2:	f04f 32ff 	mov.w	r2, #4294967295
 800dcd6:	e7f7      	b.n	800dcc8 <__mcmp+0x28>

0800dcd8 <__mdiff>:
 800dcd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcdc:	460c      	mov	r4, r1
 800dcde:	4606      	mov	r6, r0
 800dce0:	4611      	mov	r1, r2
 800dce2:	4620      	mov	r0, r4
 800dce4:	4690      	mov	r8, r2
 800dce6:	f7ff ffdb 	bl	800dca0 <__mcmp>
 800dcea:	1e05      	subs	r5, r0, #0
 800dcec:	d110      	bne.n	800dd10 <__mdiff+0x38>
 800dcee:	4629      	mov	r1, r5
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	f7ff fd09 	bl	800d708 <_Balloc>
 800dcf6:	b930      	cbnz	r0, 800dd06 <__mdiff+0x2e>
 800dcf8:	4b3a      	ldr	r3, [pc, #232]	; (800dde4 <__mdiff+0x10c>)
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	f240 2132 	movw	r1, #562	; 0x232
 800dd00:	4839      	ldr	r0, [pc, #228]	; (800dde8 <__mdiff+0x110>)
 800dd02:	f000 fc4f 	bl	800e5a4 <__assert_func>
 800dd06:	2301      	movs	r3, #1
 800dd08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dd0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd10:	bfa4      	itt	ge
 800dd12:	4643      	movge	r3, r8
 800dd14:	46a0      	movge	r8, r4
 800dd16:	4630      	mov	r0, r6
 800dd18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dd1c:	bfa6      	itte	ge
 800dd1e:	461c      	movge	r4, r3
 800dd20:	2500      	movge	r5, #0
 800dd22:	2501      	movlt	r5, #1
 800dd24:	f7ff fcf0 	bl	800d708 <_Balloc>
 800dd28:	b920      	cbnz	r0, 800dd34 <__mdiff+0x5c>
 800dd2a:	4b2e      	ldr	r3, [pc, #184]	; (800dde4 <__mdiff+0x10c>)
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dd32:	e7e5      	b.n	800dd00 <__mdiff+0x28>
 800dd34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dd38:	6926      	ldr	r6, [r4, #16]
 800dd3a:	60c5      	str	r5, [r0, #12]
 800dd3c:	f104 0914 	add.w	r9, r4, #20
 800dd40:	f108 0514 	add.w	r5, r8, #20
 800dd44:	f100 0e14 	add.w	lr, r0, #20
 800dd48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dd4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dd50:	f108 0210 	add.w	r2, r8, #16
 800dd54:	46f2      	mov	sl, lr
 800dd56:	2100      	movs	r1, #0
 800dd58:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dd60:	fa1f f883 	uxth.w	r8, r3
 800dd64:	fa11 f18b 	uxtah	r1, r1, fp
 800dd68:	0c1b      	lsrs	r3, r3, #16
 800dd6a:	eba1 0808 	sub.w	r8, r1, r8
 800dd6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dd72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dd76:	fa1f f888 	uxth.w	r8, r8
 800dd7a:	1419      	asrs	r1, r3, #16
 800dd7c:	454e      	cmp	r6, r9
 800dd7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dd82:	f84a 3b04 	str.w	r3, [sl], #4
 800dd86:	d8e7      	bhi.n	800dd58 <__mdiff+0x80>
 800dd88:	1b33      	subs	r3, r6, r4
 800dd8a:	3b15      	subs	r3, #21
 800dd8c:	f023 0303 	bic.w	r3, r3, #3
 800dd90:	3304      	adds	r3, #4
 800dd92:	3415      	adds	r4, #21
 800dd94:	42a6      	cmp	r6, r4
 800dd96:	bf38      	it	cc
 800dd98:	2304      	movcc	r3, #4
 800dd9a:	441d      	add	r5, r3
 800dd9c:	4473      	add	r3, lr
 800dd9e:	469e      	mov	lr, r3
 800dda0:	462e      	mov	r6, r5
 800dda2:	4566      	cmp	r6, ip
 800dda4:	d30e      	bcc.n	800ddc4 <__mdiff+0xec>
 800dda6:	f10c 0203 	add.w	r2, ip, #3
 800ddaa:	1b52      	subs	r2, r2, r5
 800ddac:	f022 0203 	bic.w	r2, r2, #3
 800ddb0:	3d03      	subs	r5, #3
 800ddb2:	45ac      	cmp	ip, r5
 800ddb4:	bf38      	it	cc
 800ddb6:	2200      	movcc	r2, #0
 800ddb8:	441a      	add	r2, r3
 800ddba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ddbe:	b17b      	cbz	r3, 800dde0 <__mdiff+0x108>
 800ddc0:	6107      	str	r7, [r0, #16]
 800ddc2:	e7a3      	b.n	800dd0c <__mdiff+0x34>
 800ddc4:	f856 8b04 	ldr.w	r8, [r6], #4
 800ddc8:	fa11 f288 	uxtah	r2, r1, r8
 800ddcc:	1414      	asrs	r4, r2, #16
 800ddce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ddd2:	b292      	uxth	r2, r2
 800ddd4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ddd8:	f84e 2b04 	str.w	r2, [lr], #4
 800dddc:	1421      	asrs	r1, r4, #16
 800ddde:	e7e0      	b.n	800dda2 <__mdiff+0xca>
 800dde0:	3f01      	subs	r7, #1
 800dde2:	e7ea      	b.n	800ddba <__mdiff+0xe2>
 800dde4:	08010f90 	.word	0x08010f90
 800dde8:	0801101c 	.word	0x0801101c

0800ddec <__ulp>:
 800ddec:	b082      	sub	sp, #8
 800ddee:	ed8d 0b00 	vstr	d0, [sp]
 800ddf2:	9b01      	ldr	r3, [sp, #4]
 800ddf4:	4912      	ldr	r1, [pc, #72]	; (800de40 <__ulp+0x54>)
 800ddf6:	4019      	ands	r1, r3
 800ddf8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ddfc:	2900      	cmp	r1, #0
 800ddfe:	dd05      	ble.n	800de0c <__ulp+0x20>
 800de00:	2200      	movs	r2, #0
 800de02:	460b      	mov	r3, r1
 800de04:	ec43 2b10 	vmov	d0, r2, r3
 800de08:	b002      	add	sp, #8
 800de0a:	4770      	bx	lr
 800de0c:	4249      	negs	r1, r1
 800de0e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800de12:	ea4f 5021 	mov.w	r0, r1, asr #20
 800de16:	f04f 0200 	mov.w	r2, #0
 800de1a:	f04f 0300 	mov.w	r3, #0
 800de1e:	da04      	bge.n	800de2a <__ulp+0x3e>
 800de20:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800de24:	fa41 f300 	asr.w	r3, r1, r0
 800de28:	e7ec      	b.n	800de04 <__ulp+0x18>
 800de2a:	f1a0 0114 	sub.w	r1, r0, #20
 800de2e:	291e      	cmp	r1, #30
 800de30:	bfda      	itte	le
 800de32:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800de36:	fa20 f101 	lsrle.w	r1, r0, r1
 800de3a:	2101      	movgt	r1, #1
 800de3c:	460a      	mov	r2, r1
 800de3e:	e7e1      	b.n	800de04 <__ulp+0x18>
 800de40:	7ff00000 	.word	0x7ff00000

0800de44 <__b2d>:
 800de44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de46:	6905      	ldr	r5, [r0, #16]
 800de48:	f100 0714 	add.w	r7, r0, #20
 800de4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800de50:	1f2e      	subs	r6, r5, #4
 800de52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800de56:	4620      	mov	r0, r4
 800de58:	f7ff fd48 	bl	800d8ec <__hi0bits>
 800de5c:	f1c0 0320 	rsb	r3, r0, #32
 800de60:	280a      	cmp	r0, #10
 800de62:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dee0 <__b2d+0x9c>
 800de66:	600b      	str	r3, [r1, #0]
 800de68:	dc14      	bgt.n	800de94 <__b2d+0x50>
 800de6a:	f1c0 0e0b 	rsb	lr, r0, #11
 800de6e:	fa24 f10e 	lsr.w	r1, r4, lr
 800de72:	42b7      	cmp	r7, r6
 800de74:	ea41 030c 	orr.w	r3, r1, ip
 800de78:	bf34      	ite	cc
 800de7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800de7e:	2100      	movcs	r1, #0
 800de80:	3015      	adds	r0, #21
 800de82:	fa04 f000 	lsl.w	r0, r4, r0
 800de86:	fa21 f10e 	lsr.w	r1, r1, lr
 800de8a:	ea40 0201 	orr.w	r2, r0, r1
 800de8e:	ec43 2b10 	vmov	d0, r2, r3
 800de92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de94:	42b7      	cmp	r7, r6
 800de96:	bf3a      	itte	cc
 800de98:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800de9c:	f1a5 0608 	subcc.w	r6, r5, #8
 800dea0:	2100      	movcs	r1, #0
 800dea2:	380b      	subs	r0, #11
 800dea4:	d017      	beq.n	800ded6 <__b2d+0x92>
 800dea6:	f1c0 0c20 	rsb	ip, r0, #32
 800deaa:	fa04 f500 	lsl.w	r5, r4, r0
 800deae:	42be      	cmp	r6, r7
 800deb0:	fa21 f40c 	lsr.w	r4, r1, ip
 800deb4:	ea45 0504 	orr.w	r5, r5, r4
 800deb8:	bf8c      	ite	hi
 800deba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800debe:	2400      	movls	r4, #0
 800dec0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dec4:	fa01 f000 	lsl.w	r0, r1, r0
 800dec8:	fa24 f40c 	lsr.w	r4, r4, ip
 800decc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ded0:	ea40 0204 	orr.w	r2, r0, r4
 800ded4:	e7db      	b.n	800de8e <__b2d+0x4a>
 800ded6:	ea44 030c 	orr.w	r3, r4, ip
 800deda:	460a      	mov	r2, r1
 800dedc:	e7d7      	b.n	800de8e <__b2d+0x4a>
 800dede:	bf00      	nop
 800dee0:	3ff00000 	.word	0x3ff00000

0800dee4 <__d2b>:
 800dee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dee8:	4689      	mov	r9, r1
 800deea:	2101      	movs	r1, #1
 800deec:	ec57 6b10 	vmov	r6, r7, d0
 800def0:	4690      	mov	r8, r2
 800def2:	f7ff fc09 	bl	800d708 <_Balloc>
 800def6:	4604      	mov	r4, r0
 800def8:	b930      	cbnz	r0, 800df08 <__d2b+0x24>
 800defa:	4602      	mov	r2, r0
 800defc:	4b25      	ldr	r3, [pc, #148]	; (800df94 <__d2b+0xb0>)
 800defe:	4826      	ldr	r0, [pc, #152]	; (800df98 <__d2b+0xb4>)
 800df00:	f240 310a 	movw	r1, #778	; 0x30a
 800df04:	f000 fb4e 	bl	800e5a4 <__assert_func>
 800df08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800df0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800df10:	bb35      	cbnz	r5, 800df60 <__d2b+0x7c>
 800df12:	2e00      	cmp	r6, #0
 800df14:	9301      	str	r3, [sp, #4]
 800df16:	d028      	beq.n	800df6a <__d2b+0x86>
 800df18:	4668      	mov	r0, sp
 800df1a:	9600      	str	r6, [sp, #0]
 800df1c:	f7ff fd06 	bl	800d92c <__lo0bits>
 800df20:	9900      	ldr	r1, [sp, #0]
 800df22:	b300      	cbz	r0, 800df66 <__d2b+0x82>
 800df24:	9a01      	ldr	r2, [sp, #4]
 800df26:	f1c0 0320 	rsb	r3, r0, #32
 800df2a:	fa02 f303 	lsl.w	r3, r2, r3
 800df2e:	430b      	orrs	r3, r1
 800df30:	40c2      	lsrs	r2, r0
 800df32:	6163      	str	r3, [r4, #20]
 800df34:	9201      	str	r2, [sp, #4]
 800df36:	9b01      	ldr	r3, [sp, #4]
 800df38:	61a3      	str	r3, [r4, #24]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	bf14      	ite	ne
 800df3e:	2202      	movne	r2, #2
 800df40:	2201      	moveq	r2, #1
 800df42:	6122      	str	r2, [r4, #16]
 800df44:	b1d5      	cbz	r5, 800df7c <__d2b+0x98>
 800df46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800df4a:	4405      	add	r5, r0
 800df4c:	f8c9 5000 	str.w	r5, [r9]
 800df50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df54:	f8c8 0000 	str.w	r0, [r8]
 800df58:	4620      	mov	r0, r4
 800df5a:	b003      	add	sp, #12
 800df5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df64:	e7d5      	b.n	800df12 <__d2b+0x2e>
 800df66:	6161      	str	r1, [r4, #20]
 800df68:	e7e5      	b.n	800df36 <__d2b+0x52>
 800df6a:	a801      	add	r0, sp, #4
 800df6c:	f7ff fcde 	bl	800d92c <__lo0bits>
 800df70:	9b01      	ldr	r3, [sp, #4]
 800df72:	6163      	str	r3, [r4, #20]
 800df74:	2201      	movs	r2, #1
 800df76:	6122      	str	r2, [r4, #16]
 800df78:	3020      	adds	r0, #32
 800df7a:	e7e3      	b.n	800df44 <__d2b+0x60>
 800df7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df84:	f8c9 0000 	str.w	r0, [r9]
 800df88:	6918      	ldr	r0, [r3, #16]
 800df8a:	f7ff fcaf 	bl	800d8ec <__hi0bits>
 800df8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df92:	e7df      	b.n	800df54 <__d2b+0x70>
 800df94:	08010f90 	.word	0x08010f90
 800df98:	0801101c 	.word	0x0801101c

0800df9c <__ratio>:
 800df9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa0:	4688      	mov	r8, r1
 800dfa2:	4669      	mov	r1, sp
 800dfa4:	4681      	mov	r9, r0
 800dfa6:	f7ff ff4d 	bl	800de44 <__b2d>
 800dfaa:	a901      	add	r1, sp, #4
 800dfac:	4640      	mov	r0, r8
 800dfae:	ec55 4b10 	vmov	r4, r5, d0
 800dfb2:	f7ff ff47 	bl	800de44 <__b2d>
 800dfb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dfba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dfbe:	eba3 0c02 	sub.w	ip, r3, r2
 800dfc2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dfc6:	1a9b      	subs	r3, r3, r2
 800dfc8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dfcc:	ec51 0b10 	vmov	r0, r1, d0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	bfd6      	itet	le
 800dfd4:	460a      	movle	r2, r1
 800dfd6:	462a      	movgt	r2, r5
 800dfd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dfdc:	468b      	mov	fp, r1
 800dfde:	462f      	mov	r7, r5
 800dfe0:	bfd4      	ite	le
 800dfe2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dfe6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dfea:	4620      	mov	r0, r4
 800dfec:	ee10 2a10 	vmov	r2, s0
 800dff0:	465b      	mov	r3, fp
 800dff2:	4639      	mov	r1, r7
 800dff4:	f7f2 fc32 	bl	800085c <__aeabi_ddiv>
 800dff8:	ec41 0b10 	vmov	d0, r0, r1
 800dffc:	b003      	add	sp, #12
 800dffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e002 <__copybits>:
 800e002:	3901      	subs	r1, #1
 800e004:	b570      	push	{r4, r5, r6, lr}
 800e006:	1149      	asrs	r1, r1, #5
 800e008:	6914      	ldr	r4, [r2, #16]
 800e00a:	3101      	adds	r1, #1
 800e00c:	f102 0314 	add.w	r3, r2, #20
 800e010:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e014:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e018:	1f05      	subs	r5, r0, #4
 800e01a:	42a3      	cmp	r3, r4
 800e01c:	d30c      	bcc.n	800e038 <__copybits+0x36>
 800e01e:	1aa3      	subs	r3, r4, r2
 800e020:	3b11      	subs	r3, #17
 800e022:	f023 0303 	bic.w	r3, r3, #3
 800e026:	3211      	adds	r2, #17
 800e028:	42a2      	cmp	r2, r4
 800e02a:	bf88      	it	hi
 800e02c:	2300      	movhi	r3, #0
 800e02e:	4418      	add	r0, r3
 800e030:	2300      	movs	r3, #0
 800e032:	4288      	cmp	r0, r1
 800e034:	d305      	bcc.n	800e042 <__copybits+0x40>
 800e036:	bd70      	pop	{r4, r5, r6, pc}
 800e038:	f853 6b04 	ldr.w	r6, [r3], #4
 800e03c:	f845 6f04 	str.w	r6, [r5, #4]!
 800e040:	e7eb      	b.n	800e01a <__copybits+0x18>
 800e042:	f840 3b04 	str.w	r3, [r0], #4
 800e046:	e7f4      	b.n	800e032 <__copybits+0x30>

0800e048 <__any_on>:
 800e048:	f100 0214 	add.w	r2, r0, #20
 800e04c:	6900      	ldr	r0, [r0, #16]
 800e04e:	114b      	asrs	r3, r1, #5
 800e050:	4298      	cmp	r0, r3
 800e052:	b510      	push	{r4, lr}
 800e054:	db11      	blt.n	800e07a <__any_on+0x32>
 800e056:	dd0a      	ble.n	800e06e <__any_on+0x26>
 800e058:	f011 011f 	ands.w	r1, r1, #31
 800e05c:	d007      	beq.n	800e06e <__any_on+0x26>
 800e05e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e062:	fa24 f001 	lsr.w	r0, r4, r1
 800e066:	fa00 f101 	lsl.w	r1, r0, r1
 800e06a:	428c      	cmp	r4, r1
 800e06c:	d10b      	bne.n	800e086 <__any_on+0x3e>
 800e06e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e072:	4293      	cmp	r3, r2
 800e074:	d803      	bhi.n	800e07e <__any_on+0x36>
 800e076:	2000      	movs	r0, #0
 800e078:	bd10      	pop	{r4, pc}
 800e07a:	4603      	mov	r3, r0
 800e07c:	e7f7      	b.n	800e06e <__any_on+0x26>
 800e07e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e082:	2900      	cmp	r1, #0
 800e084:	d0f5      	beq.n	800e072 <__any_on+0x2a>
 800e086:	2001      	movs	r0, #1
 800e088:	e7f6      	b.n	800e078 <__any_on+0x30>

0800e08a <_calloc_r>:
 800e08a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e08c:	fba1 2402 	umull	r2, r4, r1, r2
 800e090:	b94c      	cbnz	r4, 800e0a6 <_calloc_r+0x1c>
 800e092:	4611      	mov	r1, r2
 800e094:	9201      	str	r2, [sp, #4]
 800e096:	f000 f87b 	bl	800e190 <_malloc_r>
 800e09a:	9a01      	ldr	r2, [sp, #4]
 800e09c:	4605      	mov	r5, r0
 800e09e:	b930      	cbnz	r0, 800e0ae <_calloc_r+0x24>
 800e0a0:	4628      	mov	r0, r5
 800e0a2:	b003      	add	sp, #12
 800e0a4:	bd30      	pop	{r4, r5, pc}
 800e0a6:	220c      	movs	r2, #12
 800e0a8:	6002      	str	r2, [r0, #0]
 800e0aa:	2500      	movs	r5, #0
 800e0ac:	e7f8      	b.n	800e0a0 <_calloc_r+0x16>
 800e0ae:	4621      	mov	r1, r4
 800e0b0:	f7fc fbce 	bl	800a850 <memset>
 800e0b4:	e7f4      	b.n	800e0a0 <_calloc_r+0x16>
	...

0800e0b8 <_free_r>:
 800e0b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0ba:	2900      	cmp	r1, #0
 800e0bc:	d044      	beq.n	800e148 <_free_r+0x90>
 800e0be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0c2:	9001      	str	r0, [sp, #4]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	f1a1 0404 	sub.w	r4, r1, #4
 800e0ca:	bfb8      	it	lt
 800e0cc:	18e4      	addlt	r4, r4, r3
 800e0ce:	f000 fab3 	bl	800e638 <__malloc_lock>
 800e0d2:	4a1e      	ldr	r2, [pc, #120]	; (800e14c <_free_r+0x94>)
 800e0d4:	9801      	ldr	r0, [sp, #4]
 800e0d6:	6813      	ldr	r3, [r2, #0]
 800e0d8:	b933      	cbnz	r3, 800e0e8 <_free_r+0x30>
 800e0da:	6063      	str	r3, [r4, #4]
 800e0dc:	6014      	str	r4, [r2, #0]
 800e0de:	b003      	add	sp, #12
 800e0e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0e4:	f000 baae 	b.w	800e644 <__malloc_unlock>
 800e0e8:	42a3      	cmp	r3, r4
 800e0ea:	d908      	bls.n	800e0fe <_free_r+0x46>
 800e0ec:	6825      	ldr	r5, [r4, #0]
 800e0ee:	1961      	adds	r1, r4, r5
 800e0f0:	428b      	cmp	r3, r1
 800e0f2:	bf01      	itttt	eq
 800e0f4:	6819      	ldreq	r1, [r3, #0]
 800e0f6:	685b      	ldreq	r3, [r3, #4]
 800e0f8:	1949      	addeq	r1, r1, r5
 800e0fa:	6021      	streq	r1, [r4, #0]
 800e0fc:	e7ed      	b.n	800e0da <_free_r+0x22>
 800e0fe:	461a      	mov	r2, r3
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	b10b      	cbz	r3, 800e108 <_free_r+0x50>
 800e104:	42a3      	cmp	r3, r4
 800e106:	d9fa      	bls.n	800e0fe <_free_r+0x46>
 800e108:	6811      	ldr	r1, [r2, #0]
 800e10a:	1855      	adds	r5, r2, r1
 800e10c:	42a5      	cmp	r5, r4
 800e10e:	d10b      	bne.n	800e128 <_free_r+0x70>
 800e110:	6824      	ldr	r4, [r4, #0]
 800e112:	4421      	add	r1, r4
 800e114:	1854      	adds	r4, r2, r1
 800e116:	42a3      	cmp	r3, r4
 800e118:	6011      	str	r1, [r2, #0]
 800e11a:	d1e0      	bne.n	800e0de <_free_r+0x26>
 800e11c:	681c      	ldr	r4, [r3, #0]
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	6053      	str	r3, [r2, #4]
 800e122:	4421      	add	r1, r4
 800e124:	6011      	str	r1, [r2, #0]
 800e126:	e7da      	b.n	800e0de <_free_r+0x26>
 800e128:	d902      	bls.n	800e130 <_free_r+0x78>
 800e12a:	230c      	movs	r3, #12
 800e12c:	6003      	str	r3, [r0, #0]
 800e12e:	e7d6      	b.n	800e0de <_free_r+0x26>
 800e130:	6825      	ldr	r5, [r4, #0]
 800e132:	1961      	adds	r1, r4, r5
 800e134:	428b      	cmp	r3, r1
 800e136:	bf04      	itt	eq
 800e138:	6819      	ldreq	r1, [r3, #0]
 800e13a:	685b      	ldreq	r3, [r3, #4]
 800e13c:	6063      	str	r3, [r4, #4]
 800e13e:	bf04      	itt	eq
 800e140:	1949      	addeq	r1, r1, r5
 800e142:	6021      	streq	r1, [r4, #0]
 800e144:	6054      	str	r4, [r2, #4]
 800e146:	e7ca      	b.n	800e0de <_free_r+0x26>
 800e148:	b003      	add	sp, #12
 800e14a:	bd30      	pop	{r4, r5, pc}
 800e14c:	20001e40 	.word	0x20001e40

0800e150 <sbrk_aligned>:
 800e150:	b570      	push	{r4, r5, r6, lr}
 800e152:	4e0e      	ldr	r6, [pc, #56]	; (800e18c <sbrk_aligned+0x3c>)
 800e154:	460c      	mov	r4, r1
 800e156:	6831      	ldr	r1, [r6, #0]
 800e158:	4605      	mov	r5, r0
 800e15a:	b911      	cbnz	r1, 800e162 <sbrk_aligned+0x12>
 800e15c:	f000 f9f0 	bl	800e540 <_sbrk_r>
 800e160:	6030      	str	r0, [r6, #0]
 800e162:	4621      	mov	r1, r4
 800e164:	4628      	mov	r0, r5
 800e166:	f000 f9eb 	bl	800e540 <_sbrk_r>
 800e16a:	1c43      	adds	r3, r0, #1
 800e16c:	d00a      	beq.n	800e184 <sbrk_aligned+0x34>
 800e16e:	1cc4      	adds	r4, r0, #3
 800e170:	f024 0403 	bic.w	r4, r4, #3
 800e174:	42a0      	cmp	r0, r4
 800e176:	d007      	beq.n	800e188 <sbrk_aligned+0x38>
 800e178:	1a21      	subs	r1, r4, r0
 800e17a:	4628      	mov	r0, r5
 800e17c:	f000 f9e0 	bl	800e540 <_sbrk_r>
 800e180:	3001      	adds	r0, #1
 800e182:	d101      	bne.n	800e188 <sbrk_aligned+0x38>
 800e184:	f04f 34ff 	mov.w	r4, #4294967295
 800e188:	4620      	mov	r0, r4
 800e18a:	bd70      	pop	{r4, r5, r6, pc}
 800e18c:	20001e44 	.word	0x20001e44

0800e190 <_malloc_r>:
 800e190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e194:	1ccd      	adds	r5, r1, #3
 800e196:	f025 0503 	bic.w	r5, r5, #3
 800e19a:	3508      	adds	r5, #8
 800e19c:	2d0c      	cmp	r5, #12
 800e19e:	bf38      	it	cc
 800e1a0:	250c      	movcc	r5, #12
 800e1a2:	2d00      	cmp	r5, #0
 800e1a4:	4607      	mov	r7, r0
 800e1a6:	db01      	blt.n	800e1ac <_malloc_r+0x1c>
 800e1a8:	42a9      	cmp	r1, r5
 800e1aa:	d905      	bls.n	800e1b8 <_malloc_r+0x28>
 800e1ac:	230c      	movs	r3, #12
 800e1ae:	603b      	str	r3, [r7, #0]
 800e1b0:	2600      	movs	r6, #0
 800e1b2:	4630      	mov	r0, r6
 800e1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1b8:	4e2e      	ldr	r6, [pc, #184]	; (800e274 <_malloc_r+0xe4>)
 800e1ba:	f000 fa3d 	bl	800e638 <__malloc_lock>
 800e1be:	6833      	ldr	r3, [r6, #0]
 800e1c0:	461c      	mov	r4, r3
 800e1c2:	bb34      	cbnz	r4, 800e212 <_malloc_r+0x82>
 800e1c4:	4629      	mov	r1, r5
 800e1c6:	4638      	mov	r0, r7
 800e1c8:	f7ff ffc2 	bl	800e150 <sbrk_aligned>
 800e1cc:	1c43      	adds	r3, r0, #1
 800e1ce:	4604      	mov	r4, r0
 800e1d0:	d14d      	bne.n	800e26e <_malloc_r+0xde>
 800e1d2:	6834      	ldr	r4, [r6, #0]
 800e1d4:	4626      	mov	r6, r4
 800e1d6:	2e00      	cmp	r6, #0
 800e1d8:	d140      	bne.n	800e25c <_malloc_r+0xcc>
 800e1da:	6823      	ldr	r3, [r4, #0]
 800e1dc:	4631      	mov	r1, r6
 800e1de:	4638      	mov	r0, r7
 800e1e0:	eb04 0803 	add.w	r8, r4, r3
 800e1e4:	f000 f9ac 	bl	800e540 <_sbrk_r>
 800e1e8:	4580      	cmp	r8, r0
 800e1ea:	d13a      	bne.n	800e262 <_malloc_r+0xd2>
 800e1ec:	6821      	ldr	r1, [r4, #0]
 800e1ee:	3503      	adds	r5, #3
 800e1f0:	1a6d      	subs	r5, r5, r1
 800e1f2:	f025 0503 	bic.w	r5, r5, #3
 800e1f6:	3508      	adds	r5, #8
 800e1f8:	2d0c      	cmp	r5, #12
 800e1fa:	bf38      	it	cc
 800e1fc:	250c      	movcc	r5, #12
 800e1fe:	4629      	mov	r1, r5
 800e200:	4638      	mov	r0, r7
 800e202:	f7ff ffa5 	bl	800e150 <sbrk_aligned>
 800e206:	3001      	adds	r0, #1
 800e208:	d02b      	beq.n	800e262 <_malloc_r+0xd2>
 800e20a:	6823      	ldr	r3, [r4, #0]
 800e20c:	442b      	add	r3, r5
 800e20e:	6023      	str	r3, [r4, #0]
 800e210:	e00e      	b.n	800e230 <_malloc_r+0xa0>
 800e212:	6822      	ldr	r2, [r4, #0]
 800e214:	1b52      	subs	r2, r2, r5
 800e216:	d41e      	bmi.n	800e256 <_malloc_r+0xc6>
 800e218:	2a0b      	cmp	r2, #11
 800e21a:	d916      	bls.n	800e24a <_malloc_r+0xba>
 800e21c:	1961      	adds	r1, r4, r5
 800e21e:	42a3      	cmp	r3, r4
 800e220:	6025      	str	r5, [r4, #0]
 800e222:	bf18      	it	ne
 800e224:	6059      	strne	r1, [r3, #4]
 800e226:	6863      	ldr	r3, [r4, #4]
 800e228:	bf08      	it	eq
 800e22a:	6031      	streq	r1, [r6, #0]
 800e22c:	5162      	str	r2, [r4, r5]
 800e22e:	604b      	str	r3, [r1, #4]
 800e230:	4638      	mov	r0, r7
 800e232:	f104 060b 	add.w	r6, r4, #11
 800e236:	f000 fa05 	bl	800e644 <__malloc_unlock>
 800e23a:	f026 0607 	bic.w	r6, r6, #7
 800e23e:	1d23      	adds	r3, r4, #4
 800e240:	1af2      	subs	r2, r6, r3
 800e242:	d0b6      	beq.n	800e1b2 <_malloc_r+0x22>
 800e244:	1b9b      	subs	r3, r3, r6
 800e246:	50a3      	str	r3, [r4, r2]
 800e248:	e7b3      	b.n	800e1b2 <_malloc_r+0x22>
 800e24a:	6862      	ldr	r2, [r4, #4]
 800e24c:	42a3      	cmp	r3, r4
 800e24e:	bf0c      	ite	eq
 800e250:	6032      	streq	r2, [r6, #0]
 800e252:	605a      	strne	r2, [r3, #4]
 800e254:	e7ec      	b.n	800e230 <_malloc_r+0xa0>
 800e256:	4623      	mov	r3, r4
 800e258:	6864      	ldr	r4, [r4, #4]
 800e25a:	e7b2      	b.n	800e1c2 <_malloc_r+0x32>
 800e25c:	4634      	mov	r4, r6
 800e25e:	6876      	ldr	r6, [r6, #4]
 800e260:	e7b9      	b.n	800e1d6 <_malloc_r+0x46>
 800e262:	230c      	movs	r3, #12
 800e264:	603b      	str	r3, [r7, #0]
 800e266:	4638      	mov	r0, r7
 800e268:	f000 f9ec 	bl	800e644 <__malloc_unlock>
 800e26c:	e7a1      	b.n	800e1b2 <_malloc_r+0x22>
 800e26e:	6025      	str	r5, [r4, #0]
 800e270:	e7de      	b.n	800e230 <_malloc_r+0xa0>
 800e272:	bf00      	nop
 800e274:	20001e40 	.word	0x20001e40

0800e278 <__ssputs_r>:
 800e278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e27c:	688e      	ldr	r6, [r1, #8]
 800e27e:	429e      	cmp	r6, r3
 800e280:	4682      	mov	sl, r0
 800e282:	460c      	mov	r4, r1
 800e284:	4690      	mov	r8, r2
 800e286:	461f      	mov	r7, r3
 800e288:	d838      	bhi.n	800e2fc <__ssputs_r+0x84>
 800e28a:	898a      	ldrh	r2, [r1, #12]
 800e28c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e290:	d032      	beq.n	800e2f8 <__ssputs_r+0x80>
 800e292:	6825      	ldr	r5, [r4, #0]
 800e294:	6909      	ldr	r1, [r1, #16]
 800e296:	eba5 0901 	sub.w	r9, r5, r1
 800e29a:	6965      	ldr	r5, [r4, #20]
 800e29c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	444b      	add	r3, r9
 800e2a8:	106d      	asrs	r5, r5, #1
 800e2aa:	429d      	cmp	r5, r3
 800e2ac:	bf38      	it	cc
 800e2ae:	461d      	movcc	r5, r3
 800e2b0:	0553      	lsls	r3, r2, #21
 800e2b2:	d531      	bpl.n	800e318 <__ssputs_r+0xa0>
 800e2b4:	4629      	mov	r1, r5
 800e2b6:	f7ff ff6b 	bl	800e190 <_malloc_r>
 800e2ba:	4606      	mov	r6, r0
 800e2bc:	b950      	cbnz	r0, 800e2d4 <__ssputs_r+0x5c>
 800e2be:	230c      	movs	r3, #12
 800e2c0:	f8ca 3000 	str.w	r3, [sl]
 800e2c4:	89a3      	ldrh	r3, [r4, #12]
 800e2c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2ca:	81a3      	strh	r3, [r4, #12]
 800e2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2d4:	6921      	ldr	r1, [r4, #16]
 800e2d6:	464a      	mov	r2, r9
 800e2d8:	f7fc faac 	bl	800a834 <memcpy>
 800e2dc:	89a3      	ldrh	r3, [r4, #12]
 800e2de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e2e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2e6:	81a3      	strh	r3, [r4, #12]
 800e2e8:	6126      	str	r6, [r4, #16]
 800e2ea:	6165      	str	r5, [r4, #20]
 800e2ec:	444e      	add	r6, r9
 800e2ee:	eba5 0509 	sub.w	r5, r5, r9
 800e2f2:	6026      	str	r6, [r4, #0]
 800e2f4:	60a5      	str	r5, [r4, #8]
 800e2f6:	463e      	mov	r6, r7
 800e2f8:	42be      	cmp	r6, r7
 800e2fa:	d900      	bls.n	800e2fe <__ssputs_r+0x86>
 800e2fc:	463e      	mov	r6, r7
 800e2fe:	6820      	ldr	r0, [r4, #0]
 800e300:	4632      	mov	r2, r6
 800e302:	4641      	mov	r1, r8
 800e304:	f000 f97e 	bl	800e604 <memmove>
 800e308:	68a3      	ldr	r3, [r4, #8]
 800e30a:	1b9b      	subs	r3, r3, r6
 800e30c:	60a3      	str	r3, [r4, #8]
 800e30e:	6823      	ldr	r3, [r4, #0]
 800e310:	4433      	add	r3, r6
 800e312:	6023      	str	r3, [r4, #0]
 800e314:	2000      	movs	r0, #0
 800e316:	e7db      	b.n	800e2d0 <__ssputs_r+0x58>
 800e318:	462a      	mov	r2, r5
 800e31a:	f000 f999 	bl	800e650 <_realloc_r>
 800e31e:	4606      	mov	r6, r0
 800e320:	2800      	cmp	r0, #0
 800e322:	d1e1      	bne.n	800e2e8 <__ssputs_r+0x70>
 800e324:	6921      	ldr	r1, [r4, #16]
 800e326:	4650      	mov	r0, sl
 800e328:	f7ff fec6 	bl	800e0b8 <_free_r>
 800e32c:	e7c7      	b.n	800e2be <__ssputs_r+0x46>
	...

0800e330 <_svfiprintf_r>:
 800e330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e334:	4698      	mov	r8, r3
 800e336:	898b      	ldrh	r3, [r1, #12]
 800e338:	061b      	lsls	r3, r3, #24
 800e33a:	b09d      	sub	sp, #116	; 0x74
 800e33c:	4607      	mov	r7, r0
 800e33e:	460d      	mov	r5, r1
 800e340:	4614      	mov	r4, r2
 800e342:	d50e      	bpl.n	800e362 <_svfiprintf_r+0x32>
 800e344:	690b      	ldr	r3, [r1, #16]
 800e346:	b963      	cbnz	r3, 800e362 <_svfiprintf_r+0x32>
 800e348:	2140      	movs	r1, #64	; 0x40
 800e34a:	f7ff ff21 	bl	800e190 <_malloc_r>
 800e34e:	6028      	str	r0, [r5, #0]
 800e350:	6128      	str	r0, [r5, #16]
 800e352:	b920      	cbnz	r0, 800e35e <_svfiprintf_r+0x2e>
 800e354:	230c      	movs	r3, #12
 800e356:	603b      	str	r3, [r7, #0]
 800e358:	f04f 30ff 	mov.w	r0, #4294967295
 800e35c:	e0d1      	b.n	800e502 <_svfiprintf_r+0x1d2>
 800e35e:	2340      	movs	r3, #64	; 0x40
 800e360:	616b      	str	r3, [r5, #20]
 800e362:	2300      	movs	r3, #0
 800e364:	9309      	str	r3, [sp, #36]	; 0x24
 800e366:	2320      	movs	r3, #32
 800e368:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e36c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e370:	2330      	movs	r3, #48	; 0x30
 800e372:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e51c <_svfiprintf_r+0x1ec>
 800e376:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e37a:	f04f 0901 	mov.w	r9, #1
 800e37e:	4623      	mov	r3, r4
 800e380:	469a      	mov	sl, r3
 800e382:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e386:	b10a      	cbz	r2, 800e38c <_svfiprintf_r+0x5c>
 800e388:	2a25      	cmp	r2, #37	; 0x25
 800e38a:	d1f9      	bne.n	800e380 <_svfiprintf_r+0x50>
 800e38c:	ebba 0b04 	subs.w	fp, sl, r4
 800e390:	d00b      	beq.n	800e3aa <_svfiprintf_r+0x7a>
 800e392:	465b      	mov	r3, fp
 800e394:	4622      	mov	r2, r4
 800e396:	4629      	mov	r1, r5
 800e398:	4638      	mov	r0, r7
 800e39a:	f7ff ff6d 	bl	800e278 <__ssputs_r>
 800e39e:	3001      	adds	r0, #1
 800e3a0:	f000 80aa 	beq.w	800e4f8 <_svfiprintf_r+0x1c8>
 800e3a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3a6:	445a      	add	r2, fp
 800e3a8:	9209      	str	r2, [sp, #36]	; 0x24
 800e3aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	f000 80a2 	beq.w	800e4f8 <_svfiprintf_r+0x1c8>
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3be:	f10a 0a01 	add.w	sl, sl, #1
 800e3c2:	9304      	str	r3, [sp, #16]
 800e3c4:	9307      	str	r3, [sp, #28]
 800e3c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3ca:	931a      	str	r3, [sp, #104]	; 0x68
 800e3cc:	4654      	mov	r4, sl
 800e3ce:	2205      	movs	r2, #5
 800e3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3d4:	4851      	ldr	r0, [pc, #324]	; (800e51c <_svfiprintf_r+0x1ec>)
 800e3d6:	f7f1 ff0b 	bl	80001f0 <memchr>
 800e3da:	9a04      	ldr	r2, [sp, #16]
 800e3dc:	b9d8      	cbnz	r0, 800e416 <_svfiprintf_r+0xe6>
 800e3de:	06d0      	lsls	r0, r2, #27
 800e3e0:	bf44      	itt	mi
 800e3e2:	2320      	movmi	r3, #32
 800e3e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3e8:	0711      	lsls	r1, r2, #28
 800e3ea:	bf44      	itt	mi
 800e3ec:	232b      	movmi	r3, #43	; 0x2b
 800e3ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3f2:	f89a 3000 	ldrb.w	r3, [sl]
 800e3f6:	2b2a      	cmp	r3, #42	; 0x2a
 800e3f8:	d015      	beq.n	800e426 <_svfiprintf_r+0xf6>
 800e3fa:	9a07      	ldr	r2, [sp, #28]
 800e3fc:	4654      	mov	r4, sl
 800e3fe:	2000      	movs	r0, #0
 800e400:	f04f 0c0a 	mov.w	ip, #10
 800e404:	4621      	mov	r1, r4
 800e406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e40a:	3b30      	subs	r3, #48	; 0x30
 800e40c:	2b09      	cmp	r3, #9
 800e40e:	d94e      	bls.n	800e4ae <_svfiprintf_r+0x17e>
 800e410:	b1b0      	cbz	r0, 800e440 <_svfiprintf_r+0x110>
 800e412:	9207      	str	r2, [sp, #28]
 800e414:	e014      	b.n	800e440 <_svfiprintf_r+0x110>
 800e416:	eba0 0308 	sub.w	r3, r0, r8
 800e41a:	fa09 f303 	lsl.w	r3, r9, r3
 800e41e:	4313      	orrs	r3, r2
 800e420:	9304      	str	r3, [sp, #16]
 800e422:	46a2      	mov	sl, r4
 800e424:	e7d2      	b.n	800e3cc <_svfiprintf_r+0x9c>
 800e426:	9b03      	ldr	r3, [sp, #12]
 800e428:	1d19      	adds	r1, r3, #4
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	9103      	str	r1, [sp, #12]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	bfbb      	ittet	lt
 800e432:	425b      	neglt	r3, r3
 800e434:	f042 0202 	orrlt.w	r2, r2, #2
 800e438:	9307      	strge	r3, [sp, #28]
 800e43a:	9307      	strlt	r3, [sp, #28]
 800e43c:	bfb8      	it	lt
 800e43e:	9204      	strlt	r2, [sp, #16]
 800e440:	7823      	ldrb	r3, [r4, #0]
 800e442:	2b2e      	cmp	r3, #46	; 0x2e
 800e444:	d10c      	bne.n	800e460 <_svfiprintf_r+0x130>
 800e446:	7863      	ldrb	r3, [r4, #1]
 800e448:	2b2a      	cmp	r3, #42	; 0x2a
 800e44a:	d135      	bne.n	800e4b8 <_svfiprintf_r+0x188>
 800e44c:	9b03      	ldr	r3, [sp, #12]
 800e44e:	1d1a      	adds	r2, r3, #4
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	9203      	str	r2, [sp, #12]
 800e454:	2b00      	cmp	r3, #0
 800e456:	bfb8      	it	lt
 800e458:	f04f 33ff 	movlt.w	r3, #4294967295
 800e45c:	3402      	adds	r4, #2
 800e45e:	9305      	str	r3, [sp, #20]
 800e460:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e52c <_svfiprintf_r+0x1fc>
 800e464:	7821      	ldrb	r1, [r4, #0]
 800e466:	2203      	movs	r2, #3
 800e468:	4650      	mov	r0, sl
 800e46a:	f7f1 fec1 	bl	80001f0 <memchr>
 800e46e:	b140      	cbz	r0, 800e482 <_svfiprintf_r+0x152>
 800e470:	2340      	movs	r3, #64	; 0x40
 800e472:	eba0 000a 	sub.w	r0, r0, sl
 800e476:	fa03 f000 	lsl.w	r0, r3, r0
 800e47a:	9b04      	ldr	r3, [sp, #16]
 800e47c:	4303      	orrs	r3, r0
 800e47e:	3401      	adds	r4, #1
 800e480:	9304      	str	r3, [sp, #16]
 800e482:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e486:	4826      	ldr	r0, [pc, #152]	; (800e520 <_svfiprintf_r+0x1f0>)
 800e488:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e48c:	2206      	movs	r2, #6
 800e48e:	f7f1 feaf 	bl	80001f0 <memchr>
 800e492:	2800      	cmp	r0, #0
 800e494:	d038      	beq.n	800e508 <_svfiprintf_r+0x1d8>
 800e496:	4b23      	ldr	r3, [pc, #140]	; (800e524 <_svfiprintf_r+0x1f4>)
 800e498:	bb1b      	cbnz	r3, 800e4e2 <_svfiprintf_r+0x1b2>
 800e49a:	9b03      	ldr	r3, [sp, #12]
 800e49c:	3307      	adds	r3, #7
 800e49e:	f023 0307 	bic.w	r3, r3, #7
 800e4a2:	3308      	adds	r3, #8
 800e4a4:	9303      	str	r3, [sp, #12]
 800e4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4a8:	4433      	add	r3, r6
 800e4aa:	9309      	str	r3, [sp, #36]	; 0x24
 800e4ac:	e767      	b.n	800e37e <_svfiprintf_r+0x4e>
 800e4ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4b2:	460c      	mov	r4, r1
 800e4b4:	2001      	movs	r0, #1
 800e4b6:	e7a5      	b.n	800e404 <_svfiprintf_r+0xd4>
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	3401      	adds	r4, #1
 800e4bc:	9305      	str	r3, [sp, #20]
 800e4be:	4619      	mov	r1, r3
 800e4c0:	f04f 0c0a 	mov.w	ip, #10
 800e4c4:	4620      	mov	r0, r4
 800e4c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4ca:	3a30      	subs	r2, #48	; 0x30
 800e4cc:	2a09      	cmp	r2, #9
 800e4ce:	d903      	bls.n	800e4d8 <_svfiprintf_r+0x1a8>
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d0c5      	beq.n	800e460 <_svfiprintf_r+0x130>
 800e4d4:	9105      	str	r1, [sp, #20]
 800e4d6:	e7c3      	b.n	800e460 <_svfiprintf_r+0x130>
 800e4d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4dc:	4604      	mov	r4, r0
 800e4de:	2301      	movs	r3, #1
 800e4e0:	e7f0      	b.n	800e4c4 <_svfiprintf_r+0x194>
 800e4e2:	ab03      	add	r3, sp, #12
 800e4e4:	9300      	str	r3, [sp, #0]
 800e4e6:	462a      	mov	r2, r5
 800e4e8:	4b0f      	ldr	r3, [pc, #60]	; (800e528 <_svfiprintf_r+0x1f8>)
 800e4ea:	a904      	add	r1, sp, #16
 800e4ec:	4638      	mov	r0, r7
 800e4ee:	f7fc fa57 	bl	800a9a0 <_printf_float>
 800e4f2:	1c42      	adds	r2, r0, #1
 800e4f4:	4606      	mov	r6, r0
 800e4f6:	d1d6      	bne.n	800e4a6 <_svfiprintf_r+0x176>
 800e4f8:	89ab      	ldrh	r3, [r5, #12]
 800e4fa:	065b      	lsls	r3, r3, #25
 800e4fc:	f53f af2c 	bmi.w	800e358 <_svfiprintf_r+0x28>
 800e500:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e502:	b01d      	add	sp, #116	; 0x74
 800e504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e508:	ab03      	add	r3, sp, #12
 800e50a:	9300      	str	r3, [sp, #0]
 800e50c:	462a      	mov	r2, r5
 800e50e:	4b06      	ldr	r3, [pc, #24]	; (800e528 <_svfiprintf_r+0x1f8>)
 800e510:	a904      	add	r1, sp, #16
 800e512:	4638      	mov	r0, r7
 800e514:	f7fc fce8 	bl	800aee8 <_printf_i>
 800e518:	e7eb      	b.n	800e4f2 <_svfiprintf_r+0x1c2>
 800e51a:	bf00      	nop
 800e51c:	08011174 	.word	0x08011174
 800e520:	0801117e 	.word	0x0801117e
 800e524:	0800a9a1 	.word	0x0800a9a1
 800e528:	0800e279 	.word	0x0800e279
 800e52c:	0801117a 	.word	0x0801117a

0800e530 <nan>:
 800e530:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e538 <nan+0x8>
 800e534:	4770      	bx	lr
 800e536:	bf00      	nop
 800e538:	00000000 	.word	0x00000000
 800e53c:	7ff80000 	.word	0x7ff80000

0800e540 <_sbrk_r>:
 800e540:	b538      	push	{r3, r4, r5, lr}
 800e542:	4d06      	ldr	r5, [pc, #24]	; (800e55c <_sbrk_r+0x1c>)
 800e544:	2300      	movs	r3, #0
 800e546:	4604      	mov	r4, r0
 800e548:	4608      	mov	r0, r1
 800e54a:	602b      	str	r3, [r5, #0]
 800e54c:	f7f5 fb3c 	bl	8003bc8 <_sbrk>
 800e550:	1c43      	adds	r3, r0, #1
 800e552:	d102      	bne.n	800e55a <_sbrk_r+0x1a>
 800e554:	682b      	ldr	r3, [r5, #0]
 800e556:	b103      	cbz	r3, 800e55a <_sbrk_r+0x1a>
 800e558:	6023      	str	r3, [r4, #0]
 800e55a:	bd38      	pop	{r3, r4, r5, pc}
 800e55c:	20001e48 	.word	0x20001e48

0800e560 <strncmp>:
 800e560:	b510      	push	{r4, lr}
 800e562:	b17a      	cbz	r2, 800e584 <strncmp+0x24>
 800e564:	4603      	mov	r3, r0
 800e566:	3901      	subs	r1, #1
 800e568:	1884      	adds	r4, r0, r2
 800e56a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e56e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e572:	4290      	cmp	r0, r2
 800e574:	d101      	bne.n	800e57a <strncmp+0x1a>
 800e576:	42a3      	cmp	r3, r4
 800e578:	d101      	bne.n	800e57e <strncmp+0x1e>
 800e57a:	1a80      	subs	r0, r0, r2
 800e57c:	bd10      	pop	{r4, pc}
 800e57e:	2800      	cmp	r0, #0
 800e580:	d1f3      	bne.n	800e56a <strncmp+0xa>
 800e582:	e7fa      	b.n	800e57a <strncmp+0x1a>
 800e584:	4610      	mov	r0, r2
 800e586:	e7f9      	b.n	800e57c <strncmp+0x1c>

0800e588 <__ascii_wctomb>:
 800e588:	b149      	cbz	r1, 800e59e <__ascii_wctomb+0x16>
 800e58a:	2aff      	cmp	r2, #255	; 0xff
 800e58c:	bf85      	ittet	hi
 800e58e:	238a      	movhi	r3, #138	; 0x8a
 800e590:	6003      	strhi	r3, [r0, #0]
 800e592:	700a      	strbls	r2, [r1, #0]
 800e594:	f04f 30ff 	movhi.w	r0, #4294967295
 800e598:	bf98      	it	ls
 800e59a:	2001      	movls	r0, #1
 800e59c:	4770      	bx	lr
 800e59e:	4608      	mov	r0, r1
 800e5a0:	4770      	bx	lr
	...

0800e5a4 <__assert_func>:
 800e5a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5a6:	4614      	mov	r4, r2
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	4b09      	ldr	r3, [pc, #36]	; (800e5d0 <__assert_func+0x2c>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	4605      	mov	r5, r0
 800e5b0:	68d8      	ldr	r0, [r3, #12]
 800e5b2:	b14c      	cbz	r4, 800e5c8 <__assert_func+0x24>
 800e5b4:	4b07      	ldr	r3, [pc, #28]	; (800e5d4 <__assert_func+0x30>)
 800e5b6:	9100      	str	r1, [sp, #0]
 800e5b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5bc:	4906      	ldr	r1, [pc, #24]	; (800e5d8 <__assert_func+0x34>)
 800e5be:	462b      	mov	r3, r5
 800e5c0:	f000 f80e 	bl	800e5e0 <fiprintf>
 800e5c4:	f000 fa8c 	bl	800eae0 <abort>
 800e5c8:	4b04      	ldr	r3, [pc, #16]	; (800e5dc <__assert_func+0x38>)
 800e5ca:	461c      	mov	r4, r3
 800e5cc:	e7f3      	b.n	800e5b6 <__assert_func+0x12>
 800e5ce:	bf00      	nop
 800e5d0:	20000234 	.word	0x20000234
 800e5d4:	08011185 	.word	0x08011185
 800e5d8:	08011192 	.word	0x08011192
 800e5dc:	080111c0 	.word	0x080111c0

0800e5e0 <fiprintf>:
 800e5e0:	b40e      	push	{r1, r2, r3}
 800e5e2:	b503      	push	{r0, r1, lr}
 800e5e4:	4601      	mov	r1, r0
 800e5e6:	ab03      	add	r3, sp, #12
 800e5e8:	4805      	ldr	r0, [pc, #20]	; (800e600 <fiprintf+0x20>)
 800e5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5ee:	6800      	ldr	r0, [r0, #0]
 800e5f0:	9301      	str	r3, [sp, #4]
 800e5f2:	f000 f885 	bl	800e700 <_vfiprintf_r>
 800e5f6:	b002      	add	sp, #8
 800e5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5fc:	b003      	add	sp, #12
 800e5fe:	4770      	bx	lr
 800e600:	20000234 	.word	0x20000234

0800e604 <memmove>:
 800e604:	4288      	cmp	r0, r1
 800e606:	b510      	push	{r4, lr}
 800e608:	eb01 0402 	add.w	r4, r1, r2
 800e60c:	d902      	bls.n	800e614 <memmove+0x10>
 800e60e:	4284      	cmp	r4, r0
 800e610:	4623      	mov	r3, r4
 800e612:	d807      	bhi.n	800e624 <memmove+0x20>
 800e614:	1e43      	subs	r3, r0, #1
 800e616:	42a1      	cmp	r1, r4
 800e618:	d008      	beq.n	800e62c <memmove+0x28>
 800e61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e61e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e622:	e7f8      	b.n	800e616 <memmove+0x12>
 800e624:	4402      	add	r2, r0
 800e626:	4601      	mov	r1, r0
 800e628:	428a      	cmp	r2, r1
 800e62a:	d100      	bne.n	800e62e <memmove+0x2a>
 800e62c:	bd10      	pop	{r4, pc}
 800e62e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e636:	e7f7      	b.n	800e628 <memmove+0x24>

0800e638 <__malloc_lock>:
 800e638:	4801      	ldr	r0, [pc, #4]	; (800e640 <__malloc_lock+0x8>)
 800e63a:	f000 bc11 	b.w	800ee60 <__retarget_lock_acquire_recursive>
 800e63e:	bf00      	nop
 800e640:	20001e4c 	.word	0x20001e4c

0800e644 <__malloc_unlock>:
 800e644:	4801      	ldr	r0, [pc, #4]	; (800e64c <__malloc_unlock+0x8>)
 800e646:	f000 bc0c 	b.w	800ee62 <__retarget_lock_release_recursive>
 800e64a:	bf00      	nop
 800e64c:	20001e4c 	.word	0x20001e4c

0800e650 <_realloc_r>:
 800e650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e654:	4680      	mov	r8, r0
 800e656:	4614      	mov	r4, r2
 800e658:	460e      	mov	r6, r1
 800e65a:	b921      	cbnz	r1, 800e666 <_realloc_r+0x16>
 800e65c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e660:	4611      	mov	r1, r2
 800e662:	f7ff bd95 	b.w	800e190 <_malloc_r>
 800e666:	b92a      	cbnz	r2, 800e674 <_realloc_r+0x24>
 800e668:	f7ff fd26 	bl	800e0b8 <_free_r>
 800e66c:	4625      	mov	r5, r4
 800e66e:	4628      	mov	r0, r5
 800e670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e674:	f000 fc5c 	bl	800ef30 <_malloc_usable_size_r>
 800e678:	4284      	cmp	r4, r0
 800e67a:	4607      	mov	r7, r0
 800e67c:	d802      	bhi.n	800e684 <_realloc_r+0x34>
 800e67e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e682:	d812      	bhi.n	800e6aa <_realloc_r+0x5a>
 800e684:	4621      	mov	r1, r4
 800e686:	4640      	mov	r0, r8
 800e688:	f7ff fd82 	bl	800e190 <_malloc_r>
 800e68c:	4605      	mov	r5, r0
 800e68e:	2800      	cmp	r0, #0
 800e690:	d0ed      	beq.n	800e66e <_realloc_r+0x1e>
 800e692:	42bc      	cmp	r4, r7
 800e694:	4622      	mov	r2, r4
 800e696:	4631      	mov	r1, r6
 800e698:	bf28      	it	cs
 800e69a:	463a      	movcs	r2, r7
 800e69c:	f7fc f8ca 	bl	800a834 <memcpy>
 800e6a0:	4631      	mov	r1, r6
 800e6a2:	4640      	mov	r0, r8
 800e6a4:	f7ff fd08 	bl	800e0b8 <_free_r>
 800e6a8:	e7e1      	b.n	800e66e <_realloc_r+0x1e>
 800e6aa:	4635      	mov	r5, r6
 800e6ac:	e7df      	b.n	800e66e <_realloc_r+0x1e>

0800e6ae <__sfputc_r>:
 800e6ae:	6893      	ldr	r3, [r2, #8]
 800e6b0:	3b01      	subs	r3, #1
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	b410      	push	{r4}
 800e6b6:	6093      	str	r3, [r2, #8]
 800e6b8:	da08      	bge.n	800e6cc <__sfputc_r+0x1e>
 800e6ba:	6994      	ldr	r4, [r2, #24]
 800e6bc:	42a3      	cmp	r3, r4
 800e6be:	db01      	blt.n	800e6c4 <__sfputc_r+0x16>
 800e6c0:	290a      	cmp	r1, #10
 800e6c2:	d103      	bne.n	800e6cc <__sfputc_r+0x1e>
 800e6c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6c8:	f000 b94a 	b.w	800e960 <__swbuf_r>
 800e6cc:	6813      	ldr	r3, [r2, #0]
 800e6ce:	1c58      	adds	r0, r3, #1
 800e6d0:	6010      	str	r0, [r2, #0]
 800e6d2:	7019      	strb	r1, [r3, #0]
 800e6d4:	4608      	mov	r0, r1
 800e6d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <__sfputs_r>:
 800e6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6de:	4606      	mov	r6, r0
 800e6e0:	460f      	mov	r7, r1
 800e6e2:	4614      	mov	r4, r2
 800e6e4:	18d5      	adds	r5, r2, r3
 800e6e6:	42ac      	cmp	r4, r5
 800e6e8:	d101      	bne.n	800e6ee <__sfputs_r+0x12>
 800e6ea:	2000      	movs	r0, #0
 800e6ec:	e007      	b.n	800e6fe <__sfputs_r+0x22>
 800e6ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6f2:	463a      	mov	r2, r7
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	f7ff ffda 	bl	800e6ae <__sfputc_r>
 800e6fa:	1c43      	adds	r3, r0, #1
 800e6fc:	d1f3      	bne.n	800e6e6 <__sfputs_r+0xa>
 800e6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e700 <_vfiprintf_r>:
 800e700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e704:	460d      	mov	r5, r1
 800e706:	b09d      	sub	sp, #116	; 0x74
 800e708:	4614      	mov	r4, r2
 800e70a:	4698      	mov	r8, r3
 800e70c:	4606      	mov	r6, r0
 800e70e:	b118      	cbz	r0, 800e718 <_vfiprintf_r+0x18>
 800e710:	6983      	ldr	r3, [r0, #24]
 800e712:	b90b      	cbnz	r3, 800e718 <_vfiprintf_r+0x18>
 800e714:	f000 fb06 	bl	800ed24 <__sinit>
 800e718:	4b89      	ldr	r3, [pc, #548]	; (800e940 <_vfiprintf_r+0x240>)
 800e71a:	429d      	cmp	r5, r3
 800e71c:	d11b      	bne.n	800e756 <_vfiprintf_r+0x56>
 800e71e:	6875      	ldr	r5, [r6, #4]
 800e720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e722:	07d9      	lsls	r1, r3, #31
 800e724:	d405      	bmi.n	800e732 <_vfiprintf_r+0x32>
 800e726:	89ab      	ldrh	r3, [r5, #12]
 800e728:	059a      	lsls	r2, r3, #22
 800e72a:	d402      	bmi.n	800e732 <_vfiprintf_r+0x32>
 800e72c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e72e:	f000 fb97 	bl	800ee60 <__retarget_lock_acquire_recursive>
 800e732:	89ab      	ldrh	r3, [r5, #12]
 800e734:	071b      	lsls	r3, r3, #28
 800e736:	d501      	bpl.n	800e73c <_vfiprintf_r+0x3c>
 800e738:	692b      	ldr	r3, [r5, #16]
 800e73a:	b9eb      	cbnz	r3, 800e778 <_vfiprintf_r+0x78>
 800e73c:	4629      	mov	r1, r5
 800e73e:	4630      	mov	r0, r6
 800e740:	f000 f960 	bl	800ea04 <__swsetup_r>
 800e744:	b1c0      	cbz	r0, 800e778 <_vfiprintf_r+0x78>
 800e746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e748:	07dc      	lsls	r4, r3, #31
 800e74a:	d50e      	bpl.n	800e76a <_vfiprintf_r+0x6a>
 800e74c:	f04f 30ff 	mov.w	r0, #4294967295
 800e750:	b01d      	add	sp, #116	; 0x74
 800e752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e756:	4b7b      	ldr	r3, [pc, #492]	; (800e944 <_vfiprintf_r+0x244>)
 800e758:	429d      	cmp	r5, r3
 800e75a:	d101      	bne.n	800e760 <_vfiprintf_r+0x60>
 800e75c:	68b5      	ldr	r5, [r6, #8]
 800e75e:	e7df      	b.n	800e720 <_vfiprintf_r+0x20>
 800e760:	4b79      	ldr	r3, [pc, #484]	; (800e948 <_vfiprintf_r+0x248>)
 800e762:	429d      	cmp	r5, r3
 800e764:	bf08      	it	eq
 800e766:	68f5      	ldreq	r5, [r6, #12]
 800e768:	e7da      	b.n	800e720 <_vfiprintf_r+0x20>
 800e76a:	89ab      	ldrh	r3, [r5, #12]
 800e76c:	0598      	lsls	r0, r3, #22
 800e76e:	d4ed      	bmi.n	800e74c <_vfiprintf_r+0x4c>
 800e770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e772:	f000 fb76 	bl	800ee62 <__retarget_lock_release_recursive>
 800e776:	e7e9      	b.n	800e74c <_vfiprintf_r+0x4c>
 800e778:	2300      	movs	r3, #0
 800e77a:	9309      	str	r3, [sp, #36]	; 0x24
 800e77c:	2320      	movs	r3, #32
 800e77e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e782:	f8cd 800c 	str.w	r8, [sp, #12]
 800e786:	2330      	movs	r3, #48	; 0x30
 800e788:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e94c <_vfiprintf_r+0x24c>
 800e78c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e790:	f04f 0901 	mov.w	r9, #1
 800e794:	4623      	mov	r3, r4
 800e796:	469a      	mov	sl, r3
 800e798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e79c:	b10a      	cbz	r2, 800e7a2 <_vfiprintf_r+0xa2>
 800e79e:	2a25      	cmp	r2, #37	; 0x25
 800e7a0:	d1f9      	bne.n	800e796 <_vfiprintf_r+0x96>
 800e7a2:	ebba 0b04 	subs.w	fp, sl, r4
 800e7a6:	d00b      	beq.n	800e7c0 <_vfiprintf_r+0xc0>
 800e7a8:	465b      	mov	r3, fp
 800e7aa:	4622      	mov	r2, r4
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	f7ff ff94 	bl	800e6dc <__sfputs_r>
 800e7b4:	3001      	adds	r0, #1
 800e7b6:	f000 80aa 	beq.w	800e90e <_vfiprintf_r+0x20e>
 800e7ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7bc:	445a      	add	r2, fp
 800e7be:	9209      	str	r2, [sp, #36]	; 0x24
 800e7c0:	f89a 3000 	ldrb.w	r3, [sl]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	f000 80a2 	beq.w	800e90e <_vfiprintf_r+0x20e>
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e7d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7d4:	f10a 0a01 	add.w	sl, sl, #1
 800e7d8:	9304      	str	r3, [sp, #16]
 800e7da:	9307      	str	r3, [sp, #28]
 800e7dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7e0:	931a      	str	r3, [sp, #104]	; 0x68
 800e7e2:	4654      	mov	r4, sl
 800e7e4:	2205      	movs	r2, #5
 800e7e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ea:	4858      	ldr	r0, [pc, #352]	; (800e94c <_vfiprintf_r+0x24c>)
 800e7ec:	f7f1 fd00 	bl	80001f0 <memchr>
 800e7f0:	9a04      	ldr	r2, [sp, #16]
 800e7f2:	b9d8      	cbnz	r0, 800e82c <_vfiprintf_r+0x12c>
 800e7f4:	06d1      	lsls	r1, r2, #27
 800e7f6:	bf44      	itt	mi
 800e7f8:	2320      	movmi	r3, #32
 800e7fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7fe:	0713      	lsls	r3, r2, #28
 800e800:	bf44      	itt	mi
 800e802:	232b      	movmi	r3, #43	; 0x2b
 800e804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e808:	f89a 3000 	ldrb.w	r3, [sl]
 800e80c:	2b2a      	cmp	r3, #42	; 0x2a
 800e80e:	d015      	beq.n	800e83c <_vfiprintf_r+0x13c>
 800e810:	9a07      	ldr	r2, [sp, #28]
 800e812:	4654      	mov	r4, sl
 800e814:	2000      	movs	r0, #0
 800e816:	f04f 0c0a 	mov.w	ip, #10
 800e81a:	4621      	mov	r1, r4
 800e81c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e820:	3b30      	subs	r3, #48	; 0x30
 800e822:	2b09      	cmp	r3, #9
 800e824:	d94e      	bls.n	800e8c4 <_vfiprintf_r+0x1c4>
 800e826:	b1b0      	cbz	r0, 800e856 <_vfiprintf_r+0x156>
 800e828:	9207      	str	r2, [sp, #28]
 800e82a:	e014      	b.n	800e856 <_vfiprintf_r+0x156>
 800e82c:	eba0 0308 	sub.w	r3, r0, r8
 800e830:	fa09 f303 	lsl.w	r3, r9, r3
 800e834:	4313      	orrs	r3, r2
 800e836:	9304      	str	r3, [sp, #16]
 800e838:	46a2      	mov	sl, r4
 800e83a:	e7d2      	b.n	800e7e2 <_vfiprintf_r+0xe2>
 800e83c:	9b03      	ldr	r3, [sp, #12]
 800e83e:	1d19      	adds	r1, r3, #4
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	9103      	str	r1, [sp, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	bfbb      	ittet	lt
 800e848:	425b      	neglt	r3, r3
 800e84a:	f042 0202 	orrlt.w	r2, r2, #2
 800e84e:	9307      	strge	r3, [sp, #28]
 800e850:	9307      	strlt	r3, [sp, #28]
 800e852:	bfb8      	it	lt
 800e854:	9204      	strlt	r2, [sp, #16]
 800e856:	7823      	ldrb	r3, [r4, #0]
 800e858:	2b2e      	cmp	r3, #46	; 0x2e
 800e85a:	d10c      	bne.n	800e876 <_vfiprintf_r+0x176>
 800e85c:	7863      	ldrb	r3, [r4, #1]
 800e85e:	2b2a      	cmp	r3, #42	; 0x2a
 800e860:	d135      	bne.n	800e8ce <_vfiprintf_r+0x1ce>
 800e862:	9b03      	ldr	r3, [sp, #12]
 800e864:	1d1a      	adds	r2, r3, #4
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	9203      	str	r2, [sp, #12]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	bfb8      	it	lt
 800e86e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e872:	3402      	adds	r4, #2
 800e874:	9305      	str	r3, [sp, #20]
 800e876:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e95c <_vfiprintf_r+0x25c>
 800e87a:	7821      	ldrb	r1, [r4, #0]
 800e87c:	2203      	movs	r2, #3
 800e87e:	4650      	mov	r0, sl
 800e880:	f7f1 fcb6 	bl	80001f0 <memchr>
 800e884:	b140      	cbz	r0, 800e898 <_vfiprintf_r+0x198>
 800e886:	2340      	movs	r3, #64	; 0x40
 800e888:	eba0 000a 	sub.w	r0, r0, sl
 800e88c:	fa03 f000 	lsl.w	r0, r3, r0
 800e890:	9b04      	ldr	r3, [sp, #16]
 800e892:	4303      	orrs	r3, r0
 800e894:	3401      	adds	r4, #1
 800e896:	9304      	str	r3, [sp, #16]
 800e898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e89c:	482c      	ldr	r0, [pc, #176]	; (800e950 <_vfiprintf_r+0x250>)
 800e89e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8a2:	2206      	movs	r2, #6
 800e8a4:	f7f1 fca4 	bl	80001f0 <memchr>
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	d03f      	beq.n	800e92c <_vfiprintf_r+0x22c>
 800e8ac:	4b29      	ldr	r3, [pc, #164]	; (800e954 <_vfiprintf_r+0x254>)
 800e8ae:	bb1b      	cbnz	r3, 800e8f8 <_vfiprintf_r+0x1f8>
 800e8b0:	9b03      	ldr	r3, [sp, #12]
 800e8b2:	3307      	adds	r3, #7
 800e8b4:	f023 0307 	bic.w	r3, r3, #7
 800e8b8:	3308      	adds	r3, #8
 800e8ba:	9303      	str	r3, [sp, #12]
 800e8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8be:	443b      	add	r3, r7
 800e8c0:	9309      	str	r3, [sp, #36]	; 0x24
 800e8c2:	e767      	b.n	800e794 <_vfiprintf_r+0x94>
 800e8c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8c8:	460c      	mov	r4, r1
 800e8ca:	2001      	movs	r0, #1
 800e8cc:	e7a5      	b.n	800e81a <_vfiprintf_r+0x11a>
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	3401      	adds	r4, #1
 800e8d2:	9305      	str	r3, [sp, #20]
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	f04f 0c0a 	mov.w	ip, #10
 800e8da:	4620      	mov	r0, r4
 800e8dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8e0:	3a30      	subs	r2, #48	; 0x30
 800e8e2:	2a09      	cmp	r2, #9
 800e8e4:	d903      	bls.n	800e8ee <_vfiprintf_r+0x1ee>
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d0c5      	beq.n	800e876 <_vfiprintf_r+0x176>
 800e8ea:	9105      	str	r1, [sp, #20]
 800e8ec:	e7c3      	b.n	800e876 <_vfiprintf_r+0x176>
 800e8ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	e7f0      	b.n	800e8da <_vfiprintf_r+0x1da>
 800e8f8:	ab03      	add	r3, sp, #12
 800e8fa:	9300      	str	r3, [sp, #0]
 800e8fc:	462a      	mov	r2, r5
 800e8fe:	4b16      	ldr	r3, [pc, #88]	; (800e958 <_vfiprintf_r+0x258>)
 800e900:	a904      	add	r1, sp, #16
 800e902:	4630      	mov	r0, r6
 800e904:	f7fc f84c 	bl	800a9a0 <_printf_float>
 800e908:	4607      	mov	r7, r0
 800e90a:	1c78      	adds	r0, r7, #1
 800e90c:	d1d6      	bne.n	800e8bc <_vfiprintf_r+0x1bc>
 800e90e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e910:	07d9      	lsls	r1, r3, #31
 800e912:	d405      	bmi.n	800e920 <_vfiprintf_r+0x220>
 800e914:	89ab      	ldrh	r3, [r5, #12]
 800e916:	059a      	lsls	r2, r3, #22
 800e918:	d402      	bmi.n	800e920 <_vfiprintf_r+0x220>
 800e91a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e91c:	f000 faa1 	bl	800ee62 <__retarget_lock_release_recursive>
 800e920:	89ab      	ldrh	r3, [r5, #12]
 800e922:	065b      	lsls	r3, r3, #25
 800e924:	f53f af12 	bmi.w	800e74c <_vfiprintf_r+0x4c>
 800e928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e92a:	e711      	b.n	800e750 <_vfiprintf_r+0x50>
 800e92c:	ab03      	add	r3, sp, #12
 800e92e:	9300      	str	r3, [sp, #0]
 800e930:	462a      	mov	r2, r5
 800e932:	4b09      	ldr	r3, [pc, #36]	; (800e958 <_vfiprintf_r+0x258>)
 800e934:	a904      	add	r1, sp, #16
 800e936:	4630      	mov	r0, r6
 800e938:	f7fc fad6 	bl	800aee8 <_printf_i>
 800e93c:	e7e4      	b.n	800e908 <_vfiprintf_r+0x208>
 800e93e:	bf00      	nop
 800e940:	080111e4 	.word	0x080111e4
 800e944:	08011204 	.word	0x08011204
 800e948:	080111c4 	.word	0x080111c4
 800e94c:	08011174 	.word	0x08011174
 800e950:	0801117e 	.word	0x0801117e
 800e954:	0800a9a1 	.word	0x0800a9a1
 800e958:	0800e6dd 	.word	0x0800e6dd
 800e95c:	0801117a 	.word	0x0801117a

0800e960 <__swbuf_r>:
 800e960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e962:	460e      	mov	r6, r1
 800e964:	4614      	mov	r4, r2
 800e966:	4605      	mov	r5, r0
 800e968:	b118      	cbz	r0, 800e972 <__swbuf_r+0x12>
 800e96a:	6983      	ldr	r3, [r0, #24]
 800e96c:	b90b      	cbnz	r3, 800e972 <__swbuf_r+0x12>
 800e96e:	f000 f9d9 	bl	800ed24 <__sinit>
 800e972:	4b21      	ldr	r3, [pc, #132]	; (800e9f8 <__swbuf_r+0x98>)
 800e974:	429c      	cmp	r4, r3
 800e976:	d12b      	bne.n	800e9d0 <__swbuf_r+0x70>
 800e978:	686c      	ldr	r4, [r5, #4]
 800e97a:	69a3      	ldr	r3, [r4, #24]
 800e97c:	60a3      	str	r3, [r4, #8]
 800e97e:	89a3      	ldrh	r3, [r4, #12]
 800e980:	071a      	lsls	r2, r3, #28
 800e982:	d52f      	bpl.n	800e9e4 <__swbuf_r+0x84>
 800e984:	6923      	ldr	r3, [r4, #16]
 800e986:	b36b      	cbz	r3, 800e9e4 <__swbuf_r+0x84>
 800e988:	6923      	ldr	r3, [r4, #16]
 800e98a:	6820      	ldr	r0, [r4, #0]
 800e98c:	1ac0      	subs	r0, r0, r3
 800e98e:	6963      	ldr	r3, [r4, #20]
 800e990:	b2f6      	uxtb	r6, r6
 800e992:	4283      	cmp	r3, r0
 800e994:	4637      	mov	r7, r6
 800e996:	dc04      	bgt.n	800e9a2 <__swbuf_r+0x42>
 800e998:	4621      	mov	r1, r4
 800e99a:	4628      	mov	r0, r5
 800e99c:	f000 f92e 	bl	800ebfc <_fflush_r>
 800e9a0:	bb30      	cbnz	r0, 800e9f0 <__swbuf_r+0x90>
 800e9a2:	68a3      	ldr	r3, [r4, #8]
 800e9a4:	3b01      	subs	r3, #1
 800e9a6:	60a3      	str	r3, [r4, #8]
 800e9a8:	6823      	ldr	r3, [r4, #0]
 800e9aa:	1c5a      	adds	r2, r3, #1
 800e9ac:	6022      	str	r2, [r4, #0]
 800e9ae:	701e      	strb	r6, [r3, #0]
 800e9b0:	6963      	ldr	r3, [r4, #20]
 800e9b2:	3001      	adds	r0, #1
 800e9b4:	4283      	cmp	r3, r0
 800e9b6:	d004      	beq.n	800e9c2 <__swbuf_r+0x62>
 800e9b8:	89a3      	ldrh	r3, [r4, #12]
 800e9ba:	07db      	lsls	r3, r3, #31
 800e9bc:	d506      	bpl.n	800e9cc <__swbuf_r+0x6c>
 800e9be:	2e0a      	cmp	r6, #10
 800e9c0:	d104      	bne.n	800e9cc <__swbuf_r+0x6c>
 800e9c2:	4621      	mov	r1, r4
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	f000 f919 	bl	800ebfc <_fflush_r>
 800e9ca:	b988      	cbnz	r0, 800e9f0 <__swbuf_r+0x90>
 800e9cc:	4638      	mov	r0, r7
 800e9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9d0:	4b0a      	ldr	r3, [pc, #40]	; (800e9fc <__swbuf_r+0x9c>)
 800e9d2:	429c      	cmp	r4, r3
 800e9d4:	d101      	bne.n	800e9da <__swbuf_r+0x7a>
 800e9d6:	68ac      	ldr	r4, [r5, #8]
 800e9d8:	e7cf      	b.n	800e97a <__swbuf_r+0x1a>
 800e9da:	4b09      	ldr	r3, [pc, #36]	; (800ea00 <__swbuf_r+0xa0>)
 800e9dc:	429c      	cmp	r4, r3
 800e9de:	bf08      	it	eq
 800e9e0:	68ec      	ldreq	r4, [r5, #12]
 800e9e2:	e7ca      	b.n	800e97a <__swbuf_r+0x1a>
 800e9e4:	4621      	mov	r1, r4
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	f000 f80c 	bl	800ea04 <__swsetup_r>
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d0cb      	beq.n	800e988 <__swbuf_r+0x28>
 800e9f0:	f04f 37ff 	mov.w	r7, #4294967295
 800e9f4:	e7ea      	b.n	800e9cc <__swbuf_r+0x6c>
 800e9f6:	bf00      	nop
 800e9f8:	080111e4 	.word	0x080111e4
 800e9fc:	08011204 	.word	0x08011204
 800ea00:	080111c4 	.word	0x080111c4

0800ea04 <__swsetup_r>:
 800ea04:	4b32      	ldr	r3, [pc, #200]	; (800ead0 <__swsetup_r+0xcc>)
 800ea06:	b570      	push	{r4, r5, r6, lr}
 800ea08:	681d      	ldr	r5, [r3, #0]
 800ea0a:	4606      	mov	r6, r0
 800ea0c:	460c      	mov	r4, r1
 800ea0e:	b125      	cbz	r5, 800ea1a <__swsetup_r+0x16>
 800ea10:	69ab      	ldr	r3, [r5, #24]
 800ea12:	b913      	cbnz	r3, 800ea1a <__swsetup_r+0x16>
 800ea14:	4628      	mov	r0, r5
 800ea16:	f000 f985 	bl	800ed24 <__sinit>
 800ea1a:	4b2e      	ldr	r3, [pc, #184]	; (800ead4 <__swsetup_r+0xd0>)
 800ea1c:	429c      	cmp	r4, r3
 800ea1e:	d10f      	bne.n	800ea40 <__swsetup_r+0x3c>
 800ea20:	686c      	ldr	r4, [r5, #4]
 800ea22:	89a3      	ldrh	r3, [r4, #12]
 800ea24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea28:	0719      	lsls	r1, r3, #28
 800ea2a:	d42c      	bmi.n	800ea86 <__swsetup_r+0x82>
 800ea2c:	06dd      	lsls	r5, r3, #27
 800ea2e:	d411      	bmi.n	800ea54 <__swsetup_r+0x50>
 800ea30:	2309      	movs	r3, #9
 800ea32:	6033      	str	r3, [r6, #0]
 800ea34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ea38:	81a3      	strh	r3, [r4, #12]
 800ea3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea3e:	e03e      	b.n	800eabe <__swsetup_r+0xba>
 800ea40:	4b25      	ldr	r3, [pc, #148]	; (800ead8 <__swsetup_r+0xd4>)
 800ea42:	429c      	cmp	r4, r3
 800ea44:	d101      	bne.n	800ea4a <__swsetup_r+0x46>
 800ea46:	68ac      	ldr	r4, [r5, #8]
 800ea48:	e7eb      	b.n	800ea22 <__swsetup_r+0x1e>
 800ea4a:	4b24      	ldr	r3, [pc, #144]	; (800eadc <__swsetup_r+0xd8>)
 800ea4c:	429c      	cmp	r4, r3
 800ea4e:	bf08      	it	eq
 800ea50:	68ec      	ldreq	r4, [r5, #12]
 800ea52:	e7e6      	b.n	800ea22 <__swsetup_r+0x1e>
 800ea54:	0758      	lsls	r0, r3, #29
 800ea56:	d512      	bpl.n	800ea7e <__swsetup_r+0x7a>
 800ea58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea5a:	b141      	cbz	r1, 800ea6e <__swsetup_r+0x6a>
 800ea5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea60:	4299      	cmp	r1, r3
 800ea62:	d002      	beq.n	800ea6a <__swsetup_r+0x66>
 800ea64:	4630      	mov	r0, r6
 800ea66:	f7ff fb27 	bl	800e0b8 <_free_r>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	6363      	str	r3, [r4, #52]	; 0x34
 800ea6e:	89a3      	ldrh	r3, [r4, #12]
 800ea70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea74:	81a3      	strh	r3, [r4, #12]
 800ea76:	2300      	movs	r3, #0
 800ea78:	6063      	str	r3, [r4, #4]
 800ea7a:	6923      	ldr	r3, [r4, #16]
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	89a3      	ldrh	r3, [r4, #12]
 800ea80:	f043 0308 	orr.w	r3, r3, #8
 800ea84:	81a3      	strh	r3, [r4, #12]
 800ea86:	6923      	ldr	r3, [r4, #16]
 800ea88:	b94b      	cbnz	r3, 800ea9e <__swsetup_r+0x9a>
 800ea8a:	89a3      	ldrh	r3, [r4, #12]
 800ea8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea94:	d003      	beq.n	800ea9e <__swsetup_r+0x9a>
 800ea96:	4621      	mov	r1, r4
 800ea98:	4630      	mov	r0, r6
 800ea9a:	f000 fa09 	bl	800eeb0 <__smakebuf_r>
 800ea9e:	89a0      	ldrh	r0, [r4, #12]
 800eaa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eaa4:	f010 0301 	ands.w	r3, r0, #1
 800eaa8:	d00a      	beq.n	800eac0 <__swsetup_r+0xbc>
 800eaaa:	2300      	movs	r3, #0
 800eaac:	60a3      	str	r3, [r4, #8]
 800eaae:	6963      	ldr	r3, [r4, #20]
 800eab0:	425b      	negs	r3, r3
 800eab2:	61a3      	str	r3, [r4, #24]
 800eab4:	6923      	ldr	r3, [r4, #16]
 800eab6:	b943      	cbnz	r3, 800eaca <__swsetup_r+0xc6>
 800eab8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eabc:	d1ba      	bne.n	800ea34 <__swsetup_r+0x30>
 800eabe:	bd70      	pop	{r4, r5, r6, pc}
 800eac0:	0781      	lsls	r1, r0, #30
 800eac2:	bf58      	it	pl
 800eac4:	6963      	ldrpl	r3, [r4, #20]
 800eac6:	60a3      	str	r3, [r4, #8]
 800eac8:	e7f4      	b.n	800eab4 <__swsetup_r+0xb0>
 800eaca:	2000      	movs	r0, #0
 800eacc:	e7f7      	b.n	800eabe <__swsetup_r+0xba>
 800eace:	bf00      	nop
 800ead0:	20000234 	.word	0x20000234
 800ead4:	080111e4 	.word	0x080111e4
 800ead8:	08011204 	.word	0x08011204
 800eadc:	080111c4 	.word	0x080111c4

0800eae0 <abort>:
 800eae0:	b508      	push	{r3, lr}
 800eae2:	2006      	movs	r0, #6
 800eae4:	f000 fa54 	bl	800ef90 <raise>
 800eae8:	2001      	movs	r0, #1
 800eaea:	f7f4 fff5 	bl	8003ad8 <_exit>
	...

0800eaf0 <__sflush_r>:
 800eaf0:	898a      	ldrh	r2, [r1, #12]
 800eaf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaf6:	4605      	mov	r5, r0
 800eaf8:	0710      	lsls	r0, r2, #28
 800eafa:	460c      	mov	r4, r1
 800eafc:	d458      	bmi.n	800ebb0 <__sflush_r+0xc0>
 800eafe:	684b      	ldr	r3, [r1, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	dc05      	bgt.n	800eb10 <__sflush_r+0x20>
 800eb04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	dc02      	bgt.n	800eb10 <__sflush_r+0x20>
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb12:	2e00      	cmp	r6, #0
 800eb14:	d0f9      	beq.n	800eb0a <__sflush_r+0x1a>
 800eb16:	2300      	movs	r3, #0
 800eb18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb1c:	682f      	ldr	r7, [r5, #0]
 800eb1e:	602b      	str	r3, [r5, #0]
 800eb20:	d032      	beq.n	800eb88 <__sflush_r+0x98>
 800eb22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb24:	89a3      	ldrh	r3, [r4, #12]
 800eb26:	075a      	lsls	r2, r3, #29
 800eb28:	d505      	bpl.n	800eb36 <__sflush_r+0x46>
 800eb2a:	6863      	ldr	r3, [r4, #4]
 800eb2c:	1ac0      	subs	r0, r0, r3
 800eb2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb30:	b10b      	cbz	r3, 800eb36 <__sflush_r+0x46>
 800eb32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb34:	1ac0      	subs	r0, r0, r3
 800eb36:	2300      	movs	r3, #0
 800eb38:	4602      	mov	r2, r0
 800eb3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb3c:	6a21      	ldr	r1, [r4, #32]
 800eb3e:	4628      	mov	r0, r5
 800eb40:	47b0      	blx	r6
 800eb42:	1c43      	adds	r3, r0, #1
 800eb44:	89a3      	ldrh	r3, [r4, #12]
 800eb46:	d106      	bne.n	800eb56 <__sflush_r+0x66>
 800eb48:	6829      	ldr	r1, [r5, #0]
 800eb4a:	291d      	cmp	r1, #29
 800eb4c:	d82c      	bhi.n	800eba8 <__sflush_r+0xb8>
 800eb4e:	4a2a      	ldr	r2, [pc, #168]	; (800ebf8 <__sflush_r+0x108>)
 800eb50:	40ca      	lsrs	r2, r1
 800eb52:	07d6      	lsls	r6, r2, #31
 800eb54:	d528      	bpl.n	800eba8 <__sflush_r+0xb8>
 800eb56:	2200      	movs	r2, #0
 800eb58:	6062      	str	r2, [r4, #4]
 800eb5a:	04d9      	lsls	r1, r3, #19
 800eb5c:	6922      	ldr	r2, [r4, #16]
 800eb5e:	6022      	str	r2, [r4, #0]
 800eb60:	d504      	bpl.n	800eb6c <__sflush_r+0x7c>
 800eb62:	1c42      	adds	r2, r0, #1
 800eb64:	d101      	bne.n	800eb6a <__sflush_r+0x7a>
 800eb66:	682b      	ldr	r3, [r5, #0]
 800eb68:	b903      	cbnz	r3, 800eb6c <__sflush_r+0x7c>
 800eb6a:	6560      	str	r0, [r4, #84]	; 0x54
 800eb6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb6e:	602f      	str	r7, [r5, #0]
 800eb70:	2900      	cmp	r1, #0
 800eb72:	d0ca      	beq.n	800eb0a <__sflush_r+0x1a>
 800eb74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb78:	4299      	cmp	r1, r3
 800eb7a:	d002      	beq.n	800eb82 <__sflush_r+0x92>
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	f7ff fa9b 	bl	800e0b8 <_free_r>
 800eb82:	2000      	movs	r0, #0
 800eb84:	6360      	str	r0, [r4, #52]	; 0x34
 800eb86:	e7c1      	b.n	800eb0c <__sflush_r+0x1c>
 800eb88:	6a21      	ldr	r1, [r4, #32]
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	47b0      	blx	r6
 800eb90:	1c41      	adds	r1, r0, #1
 800eb92:	d1c7      	bne.n	800eb24 <__sflush_r+0x34>
 800eb94:	682b      	ldr	r3, [r5, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d0c4      	beq.n	800eb24 <__sflush_r+0x34>
 800eb9a:	2b1d      	cmp	r3, #29
 800eb9c:	d001      	beq.n	800eba2 <__sflush_r+0xb2>
 800eb9e:	2b16      	cmp	r3, #22
 800eba0:	d101      	bne.n	800eba6 <__sflush_r+0xb6>
 800eba2:	602f      	str	r7, [r5, #0]
 800eba4:	e7b1      	b.n	800eb0a <__sflush_r+0x1a>
 800eba6:	89a3      	ldrh	r3, [r4, #12]
 800eba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebac:	81a3      	strh	r3, [r4, #12]
 800ebae:	e7ad      	b.n	800eb0c <__sflush_r+0x1c>
 800ebb0:	690f      	ldr	r7, [r1, #16]
 800ebb2:	2f00      	cmp	r7, #0
 800ebb4:	d0a9      	beq.n	800eb0a <__sflush_r+0x1a>
 800ebb6:	0793      	lsls	r3, r2, #30
 800ebb8:	680e      	ldr	r6, [r1, #0]
 800ebba:	bf08      	it	eq
 800ebbc:	694b      	ldreq	r3, [r1, #20]
 800ebbe:	600f      	str	r7, [r1, #0]
 800ebc0:	bf18      	it	ne
 800ebc2:	2300      	movne	r3, #0
 800ebc4:	eba6 0807 	sub.w	r8, r6, r7
 800ebc8:	608b      	str	r3, [r1, #8]
 800ebca:	f1b8 0f00 	cmp.w	r8, #0
 800ebce:	dd9c      	ble.n	800eb0a <__sflush_r+0x1a>
 800ebd0:	6a21      	ldr	r1, [r4, #32]
 800ebd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebd4:	4643      	mov	r3, r8
 800ebd6:	463a      	mov	r2, r7
 800ebd8:	4628      	mov	r0, r5
 800ebda:	47b0      	blx	r6
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	dc06      	bgt.n	800ebee <__sflush_r+0xfe>
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebe6:	81a3      	strh	r3, [r4, #12]
 800ebe8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebec:	e78e      	b.n	800eb0c <__sflush_r+0x1c>
 800ebee:	4407      	add	r7, r0
 800ebf0:	eba8 0800 	sub.w	r8, r8, r0
 800ebf4:	e7e9      	b.n	800ebca <__sflush_r+0xda>
 800ebf6:	bf00      	nop
 800ebf8:	20400001 	.word	0x20400001

0800ebfc <_fflush_r>:
 800ebfc:	b538      	push	{r3, r4, r5, lr}
 800ebfe:	690b      	ldr	r3, [r1, #16]
 800ec00:	4605      	mov	r5, r0
 800ec02:	460c      	mov	r4, r1
 800ec04:	b913      	cbnz	r3, 800ec0c <_fflush_r+0x10>
 800ec06:	2500      	movs	r5, #0
 800ec08:	4628      	mov	r0, r5
 800ec0a:	bd38      	pop	{r3, r4, r5, pc}
 800ec0c:	b118      	cbz	r0, 800ec16 <_fflush_r+0x1a>
 800ec0e:	6983      	ldr	r3, [r0, #24]
 800ec10:	b90b      	cbnz	r3, 800ec16 <_fflush_r+0x1a>
 800ec12:	f000 f887 	bl	800ed24 <__sinit>
 800ec16:	4b14      	ldr	r3, [pc, #80]	; (800ec68 <_fflush_r+0x6c>)
 800ec18:	429c      	cmp	r4, r3
 800ec1a:	d11b      	bne.n	800ec54 <_fflush_r+0x58>
 800ec1c:	686c      	ldr	r4, [r5, #4]
 800ec1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d0ef      	beq.n	800ec06 <_fflush_r+0xa>
 800ec26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec28:	07d0      	lsls	r0, r2, #31
 800ec2a:	d404      	bmi.n	800ec36 <_fflush_r+0x3a>
 800ec2c:	0599      	lsls	r1, r3, #22
 800ec2e:	d402      	bmi.n	800ec36 <_fflush_r+0x3a>
 800ec30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec32:	f000 f915 	bl	800ee60 <__retarget_lock_acquire_recursive>
 800ec36:	4628      	mov	r0, r5
 800ec38:	4621      	mov	r1, r4
 800ec3a:	f7ff ff59 	bl	800eaf0 <__sflush_r>
 800ec3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec40:	07da      	lsls	r2, r3, #31
 800ec42:	4605      	mov	r5, r0
 800ec44:	d4e0      	bmi.n	800ec08 <_fflush_r+0xc>
 800ec46:	89a3      	ldrh	r3, [r4, #12]
 800ec48:	059b      	lsls	r3, r3, #22
 800ec4a:	d4dd      	bmi.n	800ec08 <_fflush_r+0xc>
 800ec4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec4e:	f000 f908 	bl	800ee62 <__retarget_lock_release_recursive>
 800ec52:	e7d9      	b.n	800ec08 <_fflush_r+0xc>
 800ec54:	4b05      	ldr	r3, [pc, #20]	; (800ec6c <_fflush_r+0x70>)
 800ec56:	429c      	cmp	r4, r3
 800ec58:	d101      	bne.n	800ec5e <_fflush_r+0x62>
 800ec5a:	68ac      	ldr	r4, [r5, #8]
 800ec5c:	e7df      	b.n	800ec1e <_fflush_r+0x22>
 800ec5e:	4b04      	ldr	r3, [pc, #16]	; (800ec70 <_fflush_r+0x74>)
 800ec60:	429c      	cmp	r4, r3
 800ec62:	bf08      	it	eq
 800ec64:	68ec      	ldreq	r4, [r5, #12]
 800ec66:	e7da      	b.n	800ec1e <_fflush_r+0x22>
 800ec68:	080111e4 	.word	0x080111e4
 800ec6c:	08011204 	.word	0x08011204
 800ec70:	080111c4 	.word	0x080111c4

0800ec74 <std>:
 800ec74:	2300      	movs	r3, #0
 800ec76:	b510      	push	{r4, lr}
 800ec78:	4604      	mov	r4, r0
 800ec7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ec7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec82:	6083      	str	r3, [r0, #8]
 800ec84:	8181      	strh	r1, [r0, #12]
 800ec86:	6643      	str	r3, [r0, #100]	; 0x64
 800ec88:	81c2      	strh	r2, [r0, #14]
 800ec8a:	6183      	str	r3, [r0, #24]
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	2208      	movs	r2, #8
 800ec90:	305c      	adds	r0, #92	; 0x5c
 800ec92:	f7fb fddd 	bl	800a850 <memset>
 800ec96:	4b05      	ldr	r3, [pc, #20]	; (800ecac <std+0x38>)
 800ec98:	6263      	str	r3, [r4, #36]	; 0x24
 800ec9a:	4b05      	ldr	r3, [pc, #20]	; (800ecb0 <std+0x3c>)
 800ec9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec9e:	4b05      	ldr	r3, [pc, #20]	; (800ecb4 <std+0x40>)
 800eca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eca2:	4b05      	ldr	r3, [pc, #20]	; (800ecb8 <std+0x44>)
 800eca4:	6224      	str	r4, [r4, #32]
 800eca6:	6323      	str	r3, [r4, #48]	; 0x30
 800eca8:	bd10      	pop	{r4, pc}
 800ecaa:	bf00      	nop
 800ecac:	0800efc9 	.word	0x0800efc9
 800ecb0:	0800efeb 	.word	0x0800efeb
 800ecb4:	0800f023 	.word	0x0800f023
 800ecb8:	0800f047 	.word	0x0800f047

0800ecbc <_cleanup_r>:
 800ecbc:	4901      	ldr	r1, [pc, #4]	; (800ecc4 <_cleanup_r+0x8>)
 800ecbe:	f000 b8af 	b.w	800ee20 <_fwalk_reent>
 800ecc2:	bf00      	nop
 800ecc4:	0800ebfd 	.word	0x0800ebfd

0800ecc8 <__sfmoreglue>:
 800ecc8:	b570      	push	{r4, r5, r6, lr}
 800ecca:	2268      	movs	r2, #104	; 0x68
 800eccc:	1e4d      	subs	r5, r1, #1
 800ecce:	4355      	muls	r5, r2
 800ecd0:	460e      	mov	r6, r1
 800ecd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ecd6:	f7ff fa5b 	bl	800e190 <_malloc_r>
 800ecda:	4604      	mov	r4, r0
 800ecdc:	b140      	cbz	r0, 800ecf0 <__sfmoreglue+0x28>
 800ecde:	2100      	movs	r1, #0
 800ece0:	e9c0 1600 	strd	r1, r6, [r0]
 800ece4:	300c      	adds	r0, #12
 800ece6:	60a0      	str	r0, [r4, #8]
 800ece8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ecec:	f7fb fdb0 	bl	800a850 <memset>
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	bd70      	pop	{r4, r5, r6, pc}

0800ecf4 <__sfp_lock_acquire>:
 800ecf4:	4801      	ldr	r0, [pc, #4]	; (800ecfc <__sfp_lock_acquire+0x8>)
 800ecf6:	f000 b8b3 	b.w	800ee60 <__retarget_lock_acquire_recursive>
 800ecfa:	bf00      	nop
 800ecfc:	20001e4d 	.word	0x20001e4d

0800ed00 <__sfp_lock_release>:
 800ed00:	4801      	ldr	r0, [pc, #4]	; (800ed08 <__sfp_lock_release+0x8>)
 800ed02:	f000 b8ae 	b.w	800ee62 <__retarget_lock_release_recursive>
 800ed06:	bf00      	nop
 800ed08:	20001e4d 	.word	0x20001e4d

0800ed0c <__sinit_lock_acquire>:
 800ed0c:	4801      	ldr	r0, [pc, #4]	; (800ed14 <__sinit_lock_acquire+0x8>)
 800ed0e:	f000 b8a7 	b.w	800ee60 <__retarget_lock_acquire_recursive>
 800ed12:	bf00      	nop
 800ed14:	20001e4e 	.word	0x20001e4e

0800ed18 <__sinit_lock_release>:
 800ed18:	4801      	ldr	r0, [pc, #4]	; (800ed20 <__sinit_lock_release+0x8>)
 800ed1a:	f000 b8a2 	b.w	800ee62 <__retarget_lock_release_recursive>
 800ed1e:	bf00      	nop
 800ed20:	20001e4e 	.word	0x20001e4e

0800ed24 <__sinit>:
 800ed24:	b510      	push	{r4, lr}
 800ed26:	4604      	mov	r4, r0
 800ed28:	f7ff fff0 	bl	800ed0c <__sinit_lock_acquire>
 800ed2c:	69a3      	ldr	r3, [r4, #24]
 800ed2e:	b11b      	cbz	r3, 800ed38 <__sinit+0x14>
 800ed30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed34:	f7ff bff0 	b.w	800ed18 <__sinit_lock_release>
 800ed38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ed3c:	6523      	str	r3, [r4, #80]	; 0x50
 800ed3e:	4b13      	ldr	r3, [pc, #76]	; (800ed8c <__sinit+0x68>)
 800ed40:	4a13      	ldr	r2, [pc, #76]	; (800ed90 <__sinit+0x6c>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	62a2      	str	r2, [r4, #40]	; 0x28
 800ed46:	42a3      	cmp	r3, r4
 800ed48:	bf04      	itt	eq
 800ed4a:	2301      	moveq	r3, #1
 800ed4c:	61a3      	streq	r3, [r4, #24]
 800ed4e:	4620      	mov	r0, r4
 800ed50:	f000 f820 	bl	800ed94 <__sfp>
 800ed54:	6060      	str	r0, [r4, #4]
 800ed56:	4620      	mov	r0, r4
 800ed58:	f000 f81c 	bl	800ed94 <__sfp>
 800ed5c:	60a0      	str	r0, [r4, #8]
 800ed5e:	4620      	mov	r0, r4
 800ed60:	f000 f818 	bl	800ed94 <__sfp>
 800ed64:	2200      	movs	r2, #0
 800ed66:	60e0      	str	r0, [r4, #12]
 800ed68:	2104      	movs	r1, #4
 800ed6a:	6860      	ldr	r0, [r4, #4]
 800ed6c:	f7ff ff82 	bl	800ec74 <std>
 800ed70:	68a0      	ldr	r0, [r4, #8]
 800ed72:	2201      	movs	r2, #1
 800ed74:	2109      	movs	r1, #9
 800ed76:	f7ff ff7d 	bl	800ec74 <std>
 800ed7a:	68e0      	ldr	r0, [r4, #12]
 800ed7c:	2202      	movs	r2, #2
 800ed7e:	2112      	movs	r1, #18
 800ed80:	f7ff ff78 	bl	800ec74 <std>
 800ed84:	2301      	movs	r3, #1
 800ed86:	61a3      	str	r3, [r4, #24]
 800ed88:	e7d2      	b.n	800ed30 <__sinit+0xc>
 800ed8a:	bf00      	nop
 800ed8c:	08010d7c 	.word	0x08010d7c
 800ed90:	0800ecbd 	.word	0x0800ecbd

0800ed94 <__sfp>:
 800ed94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed96:	4607      	mov	r7, r0
 800ed98:	f7ff ffac 	bl	800ecf4 <__sfp_lock_acquire>
 800ed9c:	4b1e      	ldr	r3, [pc, #120]	; (800ee18 <__sfp+0x84>)
 800ed9e:	681e      	ldr	r6, [r3, #0]
 800eda0:	69b3      	ldr	r3, [r6, #24]
 800eda2:	b913      	cbnz	r3, 800edaa <__sfp+0x16>
 800eda4:	4630      	mov	r0, r6
 800eda6:	f7ff ffbd 	bl	800ed24 <__sinit>
 800edaa:	3648      	adds	r6, #72	; 0x48
 800edac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800edb0:	3b01      	subs	r3, #1
 800edb2:	d503      	bpl.n	800edbc <__sfp+0x28>
 800edb4:	6833      	ldr	r3, [r6, #0]
 800edb6:	b30b      	cbz	r3, 800edfc <__sfp+0x68>
 800edb8:	6836      	ldr	r6, [r6, #0]
 800edba:	e7f7      	b.n	800edac <__sfp+0x18>
 800edbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800edc0:	b9d5      	cbnz	r5, 800edf8 <__sfp+0x64>
 800edc2:	4b16      	ldr	r3, [pc, #88]	; (800ee1c <__sfp+0x88>)
 800edc4:	60e3      	str	r3, [r4, #12]
 800edc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800edca:	6665      	str	r5, [r4, #100]	; 0x64
 800edcc:	f000 f847 	bl	800ee5e <__retarget_lock_init_recursive>
 800edd0:	f7ff ff96 	bl	800ed00 <__sfp_lock_release>
 800edd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800edd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eddc:	6025      	str	r5, [r4, #0]
 800edde:	61a5      	str	r5, [r4, #24]
 800ede0:	2208      	movs	r2, #8
 800ede2:	4629      	mov	r1, r5
 800ede4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ede8:	f7fb fd32 	bl	800a850 <memset>
 800edec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800edf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800edf4:	4620      	mov	r0, r4
 800edf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edf8:	3468      	adds	r4, #104	; 0x68
 800edfa:	e7d9      	b.n	800edb0 <__sfp+0x1c>
 800edfc:	2104      	movs	r1, #4
 800edfe:	4638      	mov	r0, r7
 800ee00:	f7ff ff62 	bl	800ecc8 <__sfmoreglue>
 800ee04:	4604      	mov	r4, r0
 800ee06:	6030      	str	r0, [r6, #0]
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	d1d5      	bne.n	800edb8 <__sfp+0x24>
 800ee0c:	f7ff ff78 	bl	800ed00 <__sfp_lock_release>
 800ee10:	230c      	movs	r3, #12
 800ee12:	603b      	str	r3, [r7, #0]
 800ee14:	e7ee      	b.n	800edf4 <__sfp+0x60>
 800ee16:	bf00      	nop
 800ee18:	08010d7c 	.word	0x08010d7c
 800ee1c:	ffff0001 	.word	0xffff0001

0800ee20 <_fwalk_reent>:
 800ee20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee24:	4606      	mov	r6, r0
 800ee26:	4688      	mov	r8, r1
 800ee28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ee2c:	2700      	movs	r7, #0
 800ee2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee32:	f1b9 0901 	subs.w	r9, r9, #1
 800ee36:	d505      	bpl.n	800ee44 <_fwalk_reent+0x24>
 800ee38:	6824      	ldr	r4, [r4, #0]
 800ee3a:	2c00      	cmp	r4, #0
 800ee3c:	d1f7      	bne.n	800ee2e <_fwalk_reent+0xe>
 800ee3e:	4638      	mov	r0, r7
 800ee40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee44:	89ab      	ldrh	r3, [r5, #12]
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d907      	bls.n	800ee5a <_fwalk_reent+0x3a>
 800ee4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee4e:	3301      	adds	r3, #1
 800ee50:	d003      	beq.n	800ee5a <_fwalk_reent+0x3a>
 800ee52:	4629      	mov	r1, r5
 800ee54:	4630      	mov	r0, r6
 800ee56:	47c0      	blx	r8
 800ee58:	4307      	orrs	r7, r0
 800ee5a:	3568      	adds	r5, #104	; 0x68
 800ee5c:	e7e9      	b.n	800ee32 <_fwalk_reent+0x12>

0800ee5e <__retarget_lock_init_recursive>:
 800ee5e:	4770      	bx	lr

0800ee60 <__retarget_lock_acquire_recursive>:
 800ee60:	4770      	bx	lr

0800ee62 <__retarget_lock_release_recursive>:
 800ee62:	4770      	bx	lr

0800ee64 <__swhatbuf_r>:
 800ee64:	b570      	push	{r4, r5, r6, lr}
 800ee66:	460e      	mov	r6, r1
 800ee68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee6c:	2900      	cmp	r1, #0
 800ee6e:	b096      	sub	sp, #88	; 0x58
 800ee70:	4614      	mov	r4, r2
 800ee72:	461d      	mov	r5, r3
 800ee74:	da08      	bge.n	800ee88 <__swhatbuf_r+0x24>
 800ee76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	602a      	str	r2, [r5, #0]
 800ee7e:	061a      	lsls	r2, r3, #24
 800ee80:	d410      	bmi.n	800eea4 <__swhatbuf_r+0x40>
 800ee82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee86:	e00e      	b.n	800eea6 <__swhatbuf_r+0x42>
 800ee88:	466a      	mov	r2, sp
 800ee8a:	f000 f903 	bl	800f094 <_fstat_r>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	dbf1      	blt.n	800ee76 <__swhatbuf_r+0x12>
 800ee92:	9a01      	ldr	r2, [sp, #4]
 800ee94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ee98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ee9c:	425a      	negs	r2, r3
 800ee9e:	415a      	adcs	r2, r3
 800eea0:	602a      	str	r2, [r5, #0]
 800eea2:	e7ee      	b.n	800ee82 <__swhatbuf_r+0x1e>
 800eea4:	2340      	movs	r3, #64	; 0x40
 800eea6:	2000      	movs	r0, #0
 800eea8:	6023      	str	r3, [r4, #0]
 800eeaa:	b016      	add	sp, #88	; 0x58
 800eeac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eeb0 <__smakebuf_r>:
 800eeb0:	898b      	ldrh	r3, [r1, #12]
 800eeb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eeb4:	079d      	lsls	r5, r3, #30
 800eeb6:	4606      	mov	r6, r0
 800eeb8:	460c      	mov	r4, r1
 800eeba:	d507      	bpl.n	800eecc <__smakebuf_r+0x1c>
 800eebc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eec0:	6023      	str	r3, [r4, #0]
 800eec2:	6123      	str	r3, [r4, #16]
 800eec4:	2301      	movs	r3, #1
 800eec6:	6163      	str	r3, [r4, #20]
 800eec8:	b002      	add	sp, #8
 800eeca:	bd70      	pop	{r4, r5, r6, pc}
 800eecc:	ab01      	add	r3, sp, #4
 800eece:	466a      	mov	r2, sp
 800eed0:	f7ff ffc8 	bl	800ee64 <__swhatbuf_r>
 800eed4:	9900      	ldr	r1, [sp, #0]
 800eed6:	4605      	mov	r5, r0
 800eed8:	4630      	mov	r0, r6
 800eeda:	f7ff f959 	bl	800e190 <_malloc_r>
 800eede:	b948      	cbnz	r0, 800eef4 <__smakebuf_r+0x44>
 800eee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eee4:	059a      	lsls	r2, r3, #22
 800eee6:	d4ef      	bmi.n	800eec8 <__smakebuf_r+0x18>
 800eee8:	f023 0303 	bic.w	r3, r3, #3
 800eeec:	f043 0302 	orr.w	r3, r3, #2
 800eef0:	81a3      	strh	r3, [r4, #12]
 800eef2:	e7e3      	b.n	800eebc <__smakebuf_r+0xc>
 800eef4:	4b0d      	ldr	r3, [pc, #52]	; (800ef2c <__smakebuf_r+0x7c>)
 800eef6:	62b3      	str	r3, [r6, #40]	; 0x28
 800eef8:	89a3      	ldrh	r3, [r4, #12]
 800eefa:	6020      	str	r0, [r4, #0]
 800eefc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef00:	81a3      	strh	r3, [r4, #12]
 800ef02:	9b00      	ldr	r3, [sp, #0]
 800ef04:	6163      	str	r3, [r4, #20]
 800ef06:	9b01      	ldr	r3, [sp, #4]
 800ef08:	6120      	str	r0, [r4, #16]
 800ef0a:	b15b      	cbz	r3, 800ef24 <__smakebuf_r+0x74>
 800ef0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef10:	4630      	mov	r0, r6
 800ef12:	f000 f8d1 	bl	800f0b8 <_isatty_r>
 800ef16:	b128      	cbz	r0, 800ef24 <__smakebuf_r+0x74>
 800ef18:	89a3      	ldrh	r3, [r4, #12]
 800ef1a:	f023 0303 	bic.w	r3, r3, #3
 800ef1e:	f043 0301 	orr.w	r3, r3, #1
 800ef22:	81a3      	strh	r3, [r4, #12]
 800ef24:	89a0      	ldrh	r0, [r4, #12]
 800ef26:	4305      	orrs	r5, r0
 800ef28:	81a5      	strh	r5, [r4, #12]
 800ef2a:	e7cd      	b.n	800eec8 <__smakebuf_r+0x18>
 800ef2c:	0800ecbd 	.word	0x0800ecbd

0800ef30 <_malloc_usable_size_r>:
 800ef30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef34:	1f18      	subs	r0, r3, #4
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	bfbc      	itt	lt
 800ef3a:	580b      	ldrlt	r3, [r1, r0]
 800ef3c:	18c0      	addlt	r0, r0, r3
 800ef3e:	4770      	bx	lr

0800ef40 <_raise_r>:
 800ef40:	291f      	cmp	r1, #31
 800ef42:	b538      	push	{r3, r4, r5, lr}
 800ef44:	4604      	mov	r4, r0
 800ef46:	460d      	mov	r5, r1
 800ef48:	d904      	bls.n	800ef54 <_raise_r+0x14>
 800ef4a:	2316      	movs	r3, #22
 800ef4c:	6003      	str	r3, [r0, #0]
 800ef4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef52:	bd38      	pop	{r3, r4, r5, pc}
 800ef54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef56:	b112      	cbz	r2, 800ef5e <_raise_r+0x1e>
 800ef58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef5c:	b94b      	cbnz	r3, 800ef72 <_raise_r+0x32>
 800ef5e:	4620      	mov	r0, r4
 800ef60:	f000 f830 	bl	800efc4 <_getpid_r>
 800ef64:	462a      	mov	r2, r5
 800ef66:	4601      	mov	r1, r0
 800ef68:	4620      	mov	r0, r4
 800ef6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef6e:	f000 b817 	b.w	800efa0 <_kill_r>
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	d00a      	beq.n	800ef8c <_raise_r+0x4c>
 800ef76:	1c59      	adds	r1, r3, #1
 800ef78:	d103      	bne.n	800ef82 <_raise_r+0x42>
 800ef7a:	2316      	movs	r3, #22
 800ef7c:	6003      	str	r3, [r0, #0]
 800ef7e:	2001      	movs	r0, #1
 800ef80:	e7e7      	b.n	800ef52 <_raise_r+0x12>
 800ef82:	2400      	movs	r4, #0
 800ef84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef88:	4628      	mov	r0, r5
 800ef8a:	4798      	blx	r3
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	e7e0      	b.n	800ef52 <_raise_r+0x12>

0800ef90 <raise>:
 800ef90:	4b02      	ldr	r3, [pc, #8]	; (800ef9c <raise+0xc>)
 800ef92:	4601      	mov	r1, r0
 800ef94:	6818      	ldr	r0, [r3, #0]
 800ef96:	f7ff bfd3 	b.w	800ef40 <_raise_r>
 800ef9a:	bf00      	nop
 800ef9c:	20000234 	.word	0x20000234

0800efa0 <_kill_r>:
 800efa0:	b538      	push	{r3, r4, r5, lr}
 800efa2:	4d07      	ldr	r5, [pc, #28]	; (800efc0 <_kill_r+0x20>)
 800efa4:	2300      	movs	r3, #0
 800efa6:	4604      	mov	r4, r0
 800efa8:	4608      	mov	r0, r1
 800efaa:	4611      	mov	r1, r2
 800efac:	602b      	str	r3, [r5, #0]
 800efae:	f7f4 fd83 	bl	8003ab8 <_kill>
 800efb2:	1c43      	adds	r3, r0, #1
 800efb4:	d102      	bne.n	800efbc <_kill_r+0x1c>
 800efb6:	682b      	ldr	r3, [r5, #0]
 800efb8:	b103      	cbz	r3, 800efbc <_kill_r+0x1c>
 800efba:	6023      	str	r3, [r4, #0]
 800efbc:	bd38      	pop	{r3, r4, r5, pc}
 800efbe:	bf00      	nop
 800efc0:	20001e48 	.word	0x20001e48

0800efc4 <_getpid_r>:
 800efc4:	f7f4 bd70 	b.w	8003aa8 <_getpid>

0800efc8 <__sread>:
 800efc8:	b510      	push	{r4, lr}
 800efca:	460c      	mov	r4, r1
 800efcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efd0:	f000 f894 	bl	800f0fc <_read_r>
 800efd4:	2800      	cmp	r0, #0
 800efd6:	bfab      	itete	ge
 800efd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800efda:	89a3      	ldrhlt	r3, [r4, #12]
 800efdc:	181b      	addge	r3, r3, r0
 800efde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800efe2:	bfac      	ite	ge
 800efe4:	6563      	strge	r3, [r4, #84]	; 0x54
 800efe6:	81a3      	strhlt	r3, [r4, #12]
 800efe8:	bd10      	pop	{r4, pc}

0800efea <__swrite>:
 800efea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efee:	461f      	mov	r7, r3
 800eff0:	898b      	ldrh	r3, [r1, #12]
 800eff2:	05db      	lsls	r3, r3, #23
 800eff4:	4605      	mov	r5, r0
 800eff6:	460c      	mov	r4, r1
 800eff8:	4616      	mov	r6, r2
 800effa:	d505      	bpl.n	800f008 <__swrite+0x1e>
 800effc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f000:	2302      	movs	r3, #2
 800f002:	2200      	movs	r2, #0
 800f004:	f000 f868 	bl	800f0d8 <_lseek_r>
 800f008:	89a3      	ldrh	r3, [r4, #12]
 800f00a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f00e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f012:	81a3      	strh	r3, [r4, #12]
 800f014:	4632      	mov	r2, r6
 800f016:	463b      	mov	r3, r7
 800f018:	4628      	mov	r0, r5
 800f01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f01e:	f000 b817 	b.w	800f050 <_write_r>

0800f022 <__sseek>:
 800f022:	b510      	push	{r4, lr}
 800f024:	460c      	mov	r4, r1
 800f026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f02a:	f000 f855 	bl	800f0d8 <_lseek_r>
 800f02e:	1c43      	adds	r3, r0, #1
 800f030:	89a3      	ldrh	r3, [r4, #12]
 800f032:	bf15      	itete	ne
 800f034:	6560      	strne	r0, [r4, #84]	; 0x54
 800f036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f03a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f03e:	81a3      	strheq	r3, [r4, #12]
 800f040:	bf18      	it	ne
 800f042:	81a3      	strhne	r3, [r4, #12]
 800f044:	bd10      	pop	{r4, pc}

0800f046 <__sclose>:
 800f046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f04a:	f000 b813 	b.w	800f074 <_close_r>
	...

0800f050 <_write_r>:
 800f050:	b538      	push	{r3, r4, r5, lr}
 800f052:	4d07      	ldr	r5, [pc, #28]	; (800f070 <_write_r+0x20>)
 800f054:	4604      	mov	r4, r0
 800f056:	4608      	mov	r0, r1
 800f058:	4611      	mov	r1, r2
 800f05a:	2200      	movs	r2, #0
 800f05c:	602a      	str	r2, [r5, #0]
 800f05e:	461a      	mov	r2, r3
 800f060:	f7f4 fd61 	bl	8003b26 <_write>
 800f064:	1c43      	adds	r3, r0, #1
 800f066:	d102      	bne.n	800f06e <_write_r+0x1e>
 800f068:	682b      	ldr	r3, [r5, #0]
 800f06a:	b103      	cbz	r3, 800f06e <_write_r+0x1e>
 800f06c:	6023      	str	r3, [r4, #0]
 800f06e:	bd38      	pop	{r3, r4, r5, pc}
 800f070:	20001e48 	.word	0x20001e48

0800f074 <_close_r>:
 800f074:	b538      	push	{r3, r4, r5, lr}
 800f076:	4d06      	ldr	r5, [pc, #24]	; (800f090 <_close_r+0x1c>)
 800f078:	2300      	movs	r3, #0
 800f07a:	4604      	mov	r4, r0
 800f07c:	4608      	mov	r0, r1
 800f07e:	602b      	str	r3, [r5, #0]
 800f080:	f7f4 fd6d 	bl	8003b5e <_close>
 800f084:	1c43      	adds	r3, r0, #1
 800f086:	d102      	bne.n	800f08e <_close_r+0x1a>
 800f088:	682b      	ldr	r3, [r5, #0]
 800f08a:	b103      	cbz	r3, 800f08e <_close_r+0x1a>
 800f08c:	6023      	str	r3, [r4, #0]
 800f08e:	bd38      	pop	{r3, r4, r5, pc}
 800f090:	20001e48 	.word	0x20001e48

0800f094 <_fstat_r>:
 800f094:	b538      	push	{r3, r4, r5, lr}
 800f096:	4d07      	ldr	r5, [pc, #28]	; (800f0b4 <_fstat_r+0x20>)
 800f098:	2300      	movs	r3, #0
 800f09a:	4604      	mov	r4, r0
 800f09c:	4608      	mov	r0, r1
 800f09e:	4611      	mov	r1, r2
 800f0a0:	602b      	str	r3, [r5, #0]
 800f0a2:	f7f4 fd68 	bl	8003b76 <_fstat>
 800f0a6:	1c43      	adds	r3, r0, #1
 800f0a8:	d102      	bne.n	800f0b0 <_fstat_r+0x1c>
 800f0aa:	682b      	ldr	r3, [r5, #0]
 800f0ac:	b103      	cbz	r3, 800f0b0 <_fstat_r+0x1c>
 800f0ae:	6023      	str	r3, [r4, #0]
 800f0b0:	bd38      	pop	{r3, r4, r5, pc}
 800f0b2:	bf00      	nop
 800f0b4:	20001e48 	.word	0x20001e48

0800f0b8 <_isatty_r>:
 800f0b8:	b538      	push	{r3, r4, r5, lr}
 800f0ba:	4d06      	ldr	r5, [pc, #24]	; (800f0d4 <_isatty_r+0x1c>)
 800f0bc:	2300      	movs	r3, #0
 800f0be:	4604      	mov	r4, r0
 800f0c0:	4608      	mov	r0, r1
 800f0c2:	602b      	str	r3, [r5, #0]
 800f0c4:	f7f4 fd67 	bl	8003b96 <_isatty>
 800f0c8:	1c43      	adds	r3, r0, #1
 800f0ca:	d102      	bne.n	800f0d2 <_isatty_r+0x1a>
 800f0cc:	682b      	ldr	r3, [r5, #0]
 800f0ce:	b103      	cbz	r3, 800f0d2 <_isatty_r+0x1a>
 800f0d0:	6023      	str	r3, [r4, #0]
 800f0d2:	bd38      	pop	{r3, r4, r5, pc}
 800f0d4:	20001e48 	.word	0x20001e48

0800f0d8 <_lseek_r>:
 800f0d8:	b538      	push	{r3, r4, r5, lr}
 800f0da:	4d07      	ldr	r5, [pc, #28]	; (800f0f8 <_lseek_r+0x20>)
 800f0dc:	4604      	mov	r4, r0
 800f0de:	4608      	mov	r0, r1
 800f0e0:	4611      	mov	r1, r2
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	602a      	str	r2, [r5, #0]
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	f7f4 fd60 	bl	8003bac <_lseek>
 800f0ec:	1c43      	adds	r3, r0, #1
 800f0ee:	d102      	bne.n	800f0f6 <_lseek_r+0x1e>
 800f0f0:	682b      	ldr	r3, [r5, #0]
 800f0f2:	b103      	cbz	r3, 800f0f6 <_lseek_r+0x1e>
 800f0f4:	6023      	str	r3, [r4, #0]
 800f0f6:	bd38      	pop	{r3, r4, r5, pc}
 800f0f8:	20001e48 	.word	0x20001e48

0800f0fc <_read_r>:
 800f0fc:	b538      	push	{r3, r4, r5, lr}
 800f0fe:	4d07      	ldr	r5, [pc, #28]	; (800f11c <_read_r+0x20>)
 800f100:	4604      	mov	r4, r0
 800f102:	4608      	mov	r0, r1
 800f104:	4611      	mov	r1, r2
 800f106:	2200      	movs	r2, #0
 800f108:	602a      	str	r2, [r5, #0]
 800f10a:	461a      	mov	r2, r3
 800f10c:	f7f4 fcee 	bl	8003aec <_read>
 800f110:	1c43      	adds	r3, r0, #1
 800f112:	d102      	bne.n	800f11a <_read_r+0x1e>
 800f114:	682b      	ldr	r3, [r5, #0]
 800f116:	b103      	cbz	r3, 800f11a <_read_r+0x1e>
 800f118:	6023      	str	r3, [r4, #0]
 800f11a:	bd38      	pop	{r3, r4, r5, pc}
 800f11c:	20001e48 	.word	0x20001e48

0800f120 <atan>:
 800f120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f124:	ec55 4b10 	vmov	r4, r5, d0
 800f128:	4bc3      	ldr	r3, [pc, #780]	; (800f438 <atan+0x318>)
 800f12a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f12e:	429e      	cmp	r6, r3
 800f130:	46ab      	mov	fp, r5
 800f132:	dd18      	ble.n	800f166 <atan+0x46>
 800f134:	4bc1      	ldr	r3, [pc, #772]	; (800f43c <atan+0x31c>)
 800f136:	429e      	cmp	r6, r3
 800f138:	dc01      	bgt.n	800f13e <atan+0x1e>
 800f13a:	d109      	bne.n	800f150 <atan+0x30>
 800f13c:	b144      	cbz	r4, 800f150 <atan+0x30>
 800f13e:	4622      	mov	r2, r4
 800f140:	462b      	mov	r3, r5
 800f142:	4620      	mov	r0, r4
 800f144:	4629      	mov	r1, r5
 800f146:	f7f1 f8a9 	bl	800029c <__adddf3>
 800f14a:	4604      	mov	r4, r0
 800f14c:	460d      	mov	r5, r1
 800f14e:	e006      	b.n	800f15e <atan+0x3e>
 800f150:	f1bb 0f00 	cmp.w	fp, #0
 800f154:	f300 8131 	bgt.w	800f3ba <atan+0x29a>
 800f158:	a59b      	add	r5, pc, #620	; (adr r5, 800f3c8 <atan+0x2a8>)
 800f15a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f15e:	ec45 4b10 	vmov	d0, r4, r5
 800f162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f166:	4bb6      	ldr	r3, [pc, #728]	; (800f440 <atan+0x320>)
 800f168:	429e      	cmp	r6, r3
 800f16a:	dc14      	bgt.n	800f196 <atan+0x76>
 800f16c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f170:	429e      	cmp	r6, r3
 800f172:	dc0d      	bgt.n	800f190 <atan+0x70>
 800f174:	a396      	add	r3, pc, #600	; (adr r3, 800f3d0 <atan+0x2b0>)
 800f176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f17a:	ee10 0a10 	vmov	r0, s0
 800f17e:	4629      	mov	r1, r5
 800f180:	f7f1 f88c 	bl	800029c <__adddf3>
 800f184:	4baf      	ldr	r3, [pc, #700]	; (800f444 <atan+0x324>)
 800f186:	2200      	movs	r2, #0
 800f188:	f7f1 fcce 	bl	8000b28 <__aeabi_dcmpgt>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d1e6      	bne.n	800f15e <atan+0x3e>
 800f190:	f04f 3aff 	mov.w	sl, #4294967295
 800f194:	e02b      	b.n	800f1ee <atan+0xce>
 800f196:	f000 f9b7 	bl	800f508 <fabs>
 800f19a:	4bab      	ldr	r3, [pc, #684]	; (800f448 <atan+0x328>)
 800f19c:	429e      	cmp	r6, r3
 800f19e:	ec55 4b10 	vmov	r4, r5, d0
 800f1a2:	f300 80bf 	bgt.w	800f324 <atan+0x204>
 800f1a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f1aa:	429e      	cmp	r6, r3
 800f1ac:	f300 80a0 	bgt.w	800f2f0 <atan+0x1d0>
 800f1b0:	ee10 2a10 	vmov	r2, s0
 800f1b4:	ee10 0a10 	vmov	r0, s0
 800f1b8:	462b      	mov	r3, r5
 800f1ba:	4629      	mov	r1, r5
 800f1bc:	f7f1 f86e 	bl	800029c <__adddf3>
 800f1c0:	4ba0      	ldr	r3, [pc, #640]	; (800f444 <atan+0x324>)
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	f7f1 f868 	bl	8000298 <__aeabi_dsub>
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	4606      	mov	r6, r0
 800f1cc:	460f      	mov	r7, r1
 800f1ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	4629      	mov	r1, r5
 800f1d6:	f7f1 f861 	bl	800029c <__adddf3>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	460b      	mov	r3, r1
 800f1de:	4630      	mov	r0, r6
 800f1e0:	4639      	mov	r1, r7
 800f1e2:	f7f1 fb3b 	bl	800085c <__aeabi_ddiv>
 800f1e6:	f04f 0a00 	mov.w	sl, #0
 800f1ea:	4604      	mov	r4, r0
 800f1ec:	460d      	mov	r5, r1
 800f1ee:	4622      	mov	r2, r4
 800f1f0:	462b      	mov	r3, r5
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	4629      	mov	r1, r5
 800f1f6:	f7f1 fa07 	bl	8000608 <__aeabi_dmul>
 800f1fa:	4602      	mov	r2, r0
 800f1fc:	460b      	mov	r3, r1
 800f1fe:	4680      	mov	r8, r0
 800f200:	4689      	mov	r9, r1
 800f202:	f7f1 fa01 	bl	8000608 <__aeabi_dmul>
 800f206:	a374      	add	r3, pc, #464	; (adr r3, 800f3d8 <atan+0x2b8>)
 800f208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20c:	4606      	mov	r6, r0
 800f20e:	460f      	mov	r7, r1
 800f210:	f7f1 f9fa 	bl	8000608 <__aeabi_dmul>
 800f214:	a372      	add	r3, pc, #456	; (adr r3, 800f3e0 <atan+0x2c0>)
 800f216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21a:	f7f1 f83f 	bl	800029c <__adddf3>
 800f21e:	4632      	mov	r2, r6
 800f220:	463b      	mov	r3, r7
 800f222:	f7f1 f9f1 	bl	8000608 <__aeabi_dmul>
 800f226:	a370      	add	r3, pc, #448	; (adr r3, 800f3e8 <atan+0x2c8>)
 800f228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22c:	f7f1 f836 	bl	800029c <__adddf3>
 800f230:	4632      	mov	r2, r6
 800f232:	463b      	mov	r3, r7
 800f234:	f7f1 f9e8 	bl	8000608 <__aeabi_dmul>
 800f238:	a36d      	add	r3, pc, #436	; (adr r3, 800f3f0 <atan+0x2d0>)
 800f23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23e:	f7f1 f82d 	bl	800029c <__adddf3>
 800f242:	4632      	mov	r2, r6
 800f244:	463b      	mov	r3, r7
 800f246:	f7f1 f9df 	bl	8000608 <__aeabi_dmul>
 800f24a:	a36b      	add	r3, pc, #428	; (adr r3, 800f3f8 <atan+0x2d8>)
 800f24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f250:	f7f1 f824 	bl	800029c <__adddf3>
 800f254:	4632      	mov	r2, r6
 800f256:	463b      	mov	r3, r7
 800f258:	f7f1 f9d6 	bl	8000608 <__aeabi_dmul>
 800f25c:	a368      	add	r3, pc, #416	; (adr r3, 800f400 <atan+0x2e0>)
 800f25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f262:	f7f1 f81b 	bl	800029c <__adddf3>
 800f266:	4642      	mov	r2, r8
 800f268:	464b      	mov	r3, r9
 800f26a:	f7f1 f9cd 	bl	8000608 <__aeabi_dmul>
 800f26e:	a366      	add	r3, pc, #408	; (adr r3, 800f408 <atan+0x2e8>)
 800f270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f274:	4680      	mov	r8, r0
 800f276:	4689      	mov	r9, r1
 800f278:	4630      	mov	r0, r6
 800f27a:	4639      	mov	r1, r7
 800f27c:	f7f1 f9c4 	bl	8000608 <__aeabi_dmul>
 800f280:	a363      	add	r3, pc, #396	; (adr r3, 800f410 <atan+0x2f0>)
 800f282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f286:	f7f1 f807 	bl	8000298 <__aeabi_dsub>
 800f28a:	4632      	mov	r2, r6
 800f28c:	463b      	mov	r3, r7
 800f28e:	f7f1 f9bb 	bl	8000608 <__aeabi_dmul>
 800f292:	a361      	add	r3, pc, #388	; (adr r3, 800f418 <atan+0x2f8>)
 800f294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f298:	f7f0 fffe 	bl	8000298 <__aeabi_dsub>
 800f29c:	4632      	mov	r2, r6
 800f29e:	463b      	mov	r3, r7
 800f2a0:	f7f1 f9b2 	bl	8000608 <__aeabi_dmul>
 800f2a4:	a35e      	add	r3, pc, #376	; (adr r3, 800f420 <atan+0x300>)
 800f2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2aa:	f7f0 fff5 	bl	8000298 <__aeabi_dsub>
 800f2ae:	4632      	mov	r2, r6
 800f2b0:	463b      	mov	r3, r7
 800f2b2:	f7f1 f9a9 	bl	8000608 <__aeabi_dmul>
 800f2b6:	a35c      	add	r3, pc, #368	; (adr r3, 800f428 <atan+0x308>)
 800f2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2bc:	f7f0 ffec 	bl	8000298 <__aeabi_dsub>
 800f2c0:	4632      	mov	r2, r6
 800f2c2:	463b      	mov	r3, r7
 800f2c4:	f7f1 f9a0 	bl	8000608 <__aeabi_dmul>
 800f2c8:	4602      	mov	r2, r0
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	4640      	mov	r0, r8
 800f2ce:	4649      	mov	r1, r9
 800f2d0:	f7f0 ffe4 	bl	800029c <__adddf3>
 800f2d4:	4622      	mov	r2, r4
 800f2d6:	462b      	mov	r3, r5
 800f2d8:	f7f1 f996 	bl	8000608 <__aeabi_dmul>
 800f2dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f2e0:	4602      	mov	r2, r0
 800f2e2:	460b      	mov	r3, r1
 800f2e4:	d14b      	bne.n	800f37e <atan+0x25e>
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	4629      	mov	r1, r5
 800f2ea:	f7f0 ffd5 	bl	8000298 <__aeabi_dsub>
 800f2ee:	e72c      	b.n	800f14a <atan+0x2a>
 800f2f0:	ee10 0a10 	vmov	r0, s0
 800f2f4:	4b53      	ldr	r3, [pc, #332]	; (800f444 <atan+0x324>)
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	4629      	mov	r1, r5
 800f2fa:	f7f0 ffcd 	bl	8000298 <__aeabi_dsub>
 800f2fe:	4b51      	ldr	r3, [pc, #324]	; (800f444 <atan+0x324>)
 800f300:	4606      	mov	r6, r0
 800f302:	460f      	mov	r7, r1
 800f304:	2200      	movs	r2, #0
 800f306:	4620      	mov	r0, r4
 800f308:	4629      	mov	r1, r5
 800f30a:	f7f0 ffc7 	bl	800029c <__adddf3>
 800f30e:	4602      	mov	r2, r0
 800f310:	460b      	mov	r3, r1
 800f312:	4630      	mov	r0, r6
 800f314:	4639      	mov	r1, r7
 800f316:	f7f1 faa1 	bl	800085c <__aeabi_ddiv>
 800f31a:	f04f 0a01 	mov.w	sl, #1
 800f31e:	4604      	mov	r4, r0
 800f320:	460d      	mov	r5, r1
 800f322:	e764      	b.n	800f1ee <atan+0xce>
 800f324:	4b49      	ldr	r3, [pc, #292]	; (800f44c <atan+0x32c>)
 800f326:	429e      	cmp	r6, r3
 800f328:	da1d      	bge.n	800f366 <atan+0x246>
 800f32a:	ee10 0a10 	vmov	r0, s0
 800f32e:	4b48      	ldr	r3, [pc, #288]	; (800f450 <atan+0x330>)
 800f330:	2200      	movs	r2, #0
 800f332:	4629      	mov	r1, r5
 800f334:	f7f0 ffb0 	bl	8000298 <__aeabi_dsub>
 800f338:	4b45      	ldr	r3, [pc, #276]	; (800f450 <atan+0x330>)
 800f33a:	4606      	mov	r6, r0
 800f33c:	460f      	mov	r7, r1
 800f33e:	2200      	movs	r2, #0
 800f340:	4620      	mov	r0, r4
 800f342:	4629      	mov	r1, r5
 800f344:	f7f1 f960 	bl	8000608 <__aeabi_dmul>
 800f348:	4b3e      	ldr	r3, [pc, #248]	; (800f444 <atan+0x324>)
 800f34a:	2200      	movs	r2, #0
 800f34c:	f7f0 ffa6 	bl	800029c <__adddf3>
 800f350:	4602      	mov	r2, r0
 800f352:	460b      	mov	r3, r1
 800f354:	4630      	mov	r0, r6
 800f356:	4639      	mov	r1, r7
 800f358:	f7f1 fa80 	bl	800085c <__aeabi_ddiv>
 800f35c:	f04f 0a02 	mov.w	sl, #2
 800f360:	4604      	mov	r4, r0
 800f362:	460d      	mov	r5, r1
 800f364:	e743      	b.n	800f1ee <atan+0xce>
 800f366:	462b      	mov	r3, r5
 800f368:	ee10 2a10 	vmov	r2, s0
 800f36c:	4939      	ldr	r1, [pc, #228]	; (800f454 <atan+0x334>)
 800f36e:	2000      	movs	r0, #0
 800f370:	f7f1 fa74 	bl	800085c <__aeabi_ddiv>
 800f374:	f04f 0a03 	mov.w	sl, #3
 800f378:	4604      	mov	r4, r0
 800f37a:	460d      	mov	r5, r1
 800f37c:	e737      	b.n	800f1ee <atan+0xce>
 800f37e:	4b36      	ldr	r3, [pc, #216]	; (800f458 <atan+0x338>)
 800f380:	4e36      	ldr	r6, [pc, #216]	; (800f45c <atan+0x33c>)
 800f382:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f386:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f38a:	e9da 2300 	ldrd	r2, r3, [sl]
 800f38e:	f7f0 ff83 	bl	8000298 <__aeabi_dsub>
 800f392:	4622      	mov	r2, r4
 800f394:	462b      	mov	r3, r5
 800f396:	f7f0 ff7f 	bl	8000298 <__aeabi_dsub>
 800f39a:	4602      	mov	r2, r0
 800f39c:	460b      	mov	r3, r1
 800f39e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f3a2:	f7f0 ff79 	bl	8000298 <__aeabi_dsub>
 800f3a6:	f1bb 0f00 	cmp.w	fp, #0
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	460d      	mov	r5, r1
 800f3ae:	f6bf aed6 	bge.w	800f15e <atan+0x3e>
 800f3b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f3b6:	461d      	mov	r5, r3
 800f3b8:	e6d1      	b.n	800f15e <atan+0x3e>
 800f3ba:	a51d      	add	r5, pc, #116	; (adr r5, 800f430 <atan+0x310>)
 800f3bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f3c0:	e6cd      	b.n	800f15e <atan+0x3e>
 800f3c2:	bf00      	nop
 800f3c4:	f3af 8000 	nop.w
 800f3c8:	54442d18 	.word	0x54442d18
 800f3cc:	bff921fb 	.word	0xbff921fb
 800f3d0:	8800759c 	.word	0x8800759c
 800f3d4:	7e37e43c 	.word	0x7e37e43c
 800f3d8:	e322da11 	.word	0xe322da11
 800f3dc:	3f90ad3a 	.word	0x3f90ad3a
 800f3e0:	24760deb 	.word	0x24760deb
 800f3e4:	3fa97b4b 	.word	0x3fa97b4b
 800f3e8:	a0d03d51 	.word	0xa0d03d51
 800f3ec:	3fb10d66 	.word	0x3fb10d66
 800f3f0:	c54c206e 	.word	0xc54c206e
 800f3f4:	3fb745cd 	.word	0x3fb745cd
 800f3f8:	920083ff 	.word	0x920083ff
 800f3fc:	3fc24924 	.word	0x3fc24924
 800f400:	5555550d 	.word	0x5555550d
 800f404:	3fd55555 	.word	0x3fd55555
 800f408:	2c6a6c2f 	.word	0x2c6a6c2f
 800f40c:	bfa2b444 	.word	0xbfa2b444
 800f410:	52defd9a 	.word	0x52defd9a
 800f414:	3fadde2d 	.word	0x3fadde2d
 800f418:	af749a6d 	.word	0xaf749a6d
 800f41c:	3fb3b0f2 	.word	0x3fb3b0f2
 800f420:	fe231671 	.word	0xfe231671
 800f424:	3fbc71c6 	.word	0x3fbc71c6
 800f428:	9998ebc4 	.word	0x9998ebc4
 800f42c:	3fc99999 	.word	0x3fc99999
 800f430:	54442d18 	.word	0x54442d18
 800f434:	3ff921fb 	.word	0x3ff921fb
 800f438:	440fffff 	.word	0x440fffff
 800f43c:	7ff00000 	.word	0x7ff00000
 800f440:	3fdbffff 	.word	0x3fdbffff
 800f444:	3ff00000 	.word	0x3ff00000
 800f448:	3ff2ffff 	.word	0x3ff2ffff
 800f44c:	40038000 	.word	0x40038000
 800f450:	3ff80000 	.word	0x3ff80000
 800f454:	bff00000 	.word	0xbff00000
 800f458:	08011248 	.word	0x08011248
 800f45c:	08011228 	.word	0x08011228

0800f460 <cos>:
 800f460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f462:	ec53 2b10 	vmov	r2, r3, d0
 800f466:	4826      	ldr	r0, [pc, #152]	; (800f500 <cos+0xa0>)
 800f468:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f46c:	4281      	cmp	r1, r0
 800f46e:	dc06      	bgt.n	800f47e <cos+0x1e>
 800f470:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800f4f8 <cos+0x98>
 800f474:	b005      	add	sp, #20
 800f476:	f85d eb04 	ldr.w	lr, [sp], #4
 800f47a:	f000 bc69 	b.w	800fd50 <__kernel_cos>
 800f47e:	4821      	ldr	r0, [pc, #132]	; (800f504 <cos+0xa4>)
 800f480:	4281      	cmp	r1, r0
 800f482:	dd09      	ble.n	800f498 <cos+0x38>
 800f484:	ee10 0a10 	vmov	r0, s0
 800f488:	4619      	mov	r1, r3
 800f48a:	f7f0 ff05 	bl	8000298 <__aeabi_dsub>
 800f48e:	ec41 0b10 	vmov	d0, r0, r1
 800f492:	b005      	add	sp, #20
 800f494:	f85d fb04 	ldr.w	pc, [sp], #4
 800f498:	4668      	mov	r0, sp
 800f49a:	f000 f919 	bl	800f6d0 <__ieee754_rem_pio2>
 800f49e:	f000 0003 	and.w	r0, r0, #3
 800f4a2:	2801      	cmp	r0, #1
 800f4a4:	d00b      	beq.n	800f4be <cos+0x5e>
 800f4a6:	2802      	cmp	r0, #2
 800f4a8:	d016      	beq.n	800f4d8 <cos+0x78>
 800f4aa:	b9e0      	cbnz	r0, 800f4e6 <cos+0x86>
 800f4ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f4b0:	ed9d 0b00 	vldr	d0, [sp]
 800f4b4:	f000 fc4c 	bl	800fd50 <__kernel_cos>
 800f4b8:	ec51 0b10 	vmov	r0, r1, d0
 800f4bc:	e7e7      	b.n	800f48e <cos+0x2e>
 800f4be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f4c2:	ed9d 0b00 	vldr	d0, [sp]
 800f4c6:	f001 f85b 	bl	8010580 <__kernel_sin>
 800f4ca:	ec53 2b10 	vmov	r2, r3, d0
 800f4ce:	ee10 0a10 	vmov	r0, s0
 800f4d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f4d6:	e7da      	b.n	800f48e <cos+0x2e>
 800f4d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f4dc:	ed9d 0b00 	vldr	d0, [sp]
 800f4e0:	f000 fc36 	bl	800fd50 <__kernel_cos>
 800f4e4:	e7f1      	b.n	800f4ca <cos+0x6a>
 800f4e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f4ea:	ed9d 0b00 	vldr	d0, [sp]
 800f4ee:	2001      	movs	r0, #1
 800f4f0:	f001 f846 	bl	8010580 <__kernel_sin>
 800f4f4:	e7e0      	b.n	800f4b8 <cos+0x58>
 800f4f6:	bf00      	nop
	...
 800f500:	3fe921fb 	.word	0x3fe921fb
 800f504:	7fefffff 	.word	0x7fefffff

0800f508 <fabs>:
 800f508:	ec51 0b10 	vmov	r0, r1, d0
 800f50c:	ee10 2a10 	vmov	r2, s0
 800f510:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f514:	ec43 2b10 	vmov	d0, r2, r3
 800f518:	4770      	bx	lr
 800f51a:	0000      	movs	r0, r0
 800f51c:	0000      	movs	r0, r0
	...

0800f520 <sin>:
 800f520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f522:	ec53 2b10 	vmov	r2, r3, d0
 800f526:	4828      	ldr	r0, [pc, #160]	; (800f5c8 <sin+0xa8>)
 800f528:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f52c:	4281      	cmp	r1, r0
 800f52e:	dc07      	bgt.n	800f540 <sin+0x20>
 800f530:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800f5c0 <sin+0xa0>
 800f534:	2000      	movs	r0, #0
 800f536:	b005      	add	sp, #20
 800f538:	f85d eb04 	ldr.w	lr, [sp], #4
 800f53c:	f001 b820 	b.w	8010580 <__kernel_sin>
 800f540:	4822      	ldr	r0, [pc, #136]	; (800f5cc <sin+0xac>)
 800f542:	4281      	cmp	r1, r0
 800f544:	dd09      	ble.n	800f55a <sin+0x3a>
 800f546:	ee10 0a10 	vmov	r0, s0
 800f54a:	4619      	mov	r1, r3
 800f54c:	f7f0 fea4 	bl	8000298 <__aeabi_dsub>
 800f550:	ec41 0b10 	vmov	d0, r0, r1
 800f554:	b005      	add	sp, #20
 800f556:	f85d fb04 	ldr.w	pc, [sp], #4
 800f55a:	4668      	mov	r0, sp
 800f55c:	f000 f8b8 	bl	800f6d0 <__ieee754_rem_pio2>
 800f560:	f000 0003 	and.w	r0, r0, #3
 800f564:	2801      	cmp	r0, #1
 800f566:	d00c      	beq.n	800f582 <sin+0x62>
 800f568:	2802      	cmp	r0, #2
 800f56a:	d011      	beq.n	800f590 <sin+0x70>
 800f56c:	b9f0      	cbnz	r0, 800f5ac <sin+0x8c>
 800f56e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f572:	ed9d 0b00 	vldr	d0, [sp]
 800f576:	2001      	movs	r0, #1
 800f578:	f001 f802 	bl	8010580 <__kernel_sin>
 800f57c:	ec51 0b10 	vmov	r0, r1, d0
 800f580:	e7e6      	b.n	800f550 <sin+0x30>
 800f582:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f586:	ed9d 0b00 	vldr	d0, [sp]
 800f58a:	f000 fbe1 	bl	800fd50 <__kernel_cos>
 800f58e:	e7f5      	b.n	800f57c <sin+0x5c>
 800f590:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f594:	ed9d 0b00 	vldr	d0, [sp]
 800f598:	2001      	movs	r0, #1
 800f59a:	f000 fff1 	bl	8010580 <__kernel_sin>
 800f59e:	ec53 2b10 	vmov	r2, r3, d0
 800f5a2:	ee10 0a10 	vmov	r0, s0
 800f5a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f5aa:	e7d1      	b.n	800f550 <sin+0x30>
 800f5ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5b0:	ed9d 0b00 	vldr	d0, [sp]
 800f5b4:	f000 fbcc 	bl	800fd50 <__kernel_cos>
 800f5b8:	e7f1      	b.n	800f59e <sin+0x7e>
 800f5ba:	bf00      	nop
 800f5bc:	f3af 8000 	nop.w
	...
 800f5c8:	3fe921fb 	.word	0x3fe921fb
 800f5cc:	7fefffff 	.word	0x7fefffff

0800f5d0 <tan>:
 800f5d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5d2:	ec53 2b10 	vmov	r2, r3, d0
 800f5d6:	4816      	ldr	r0, [pc, #88]	; (800f630 <tan+0x60>)
 800f5d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f5dc:	4281      	cmp	r1, r0
 800f5de:	dc07      	bgt.n	800f5f0 <tan+0x20>
 800f5e0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800f628 <tan+0x58>
 800f5e4:	2001      	movs	r0, #1
 800f5e6:	b005      	add	sp, #20
 800f5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5ec:	f001 b888 	b.w	8010700 <__kernel_tan>
 800f5f0:	4810      	ldr	r0, [pc, #64]	; (800f634 <tan+0x64>)
 800f5f2:	4281      	cmp	r1, r0
 800f5f4:	dd09      	ble.n	800f60a <tan+0x3a>
 800f5f6:	ee10 0a10 	vmov	r0, s0
 800f5fa:	4619      	mov	r1, r3
 800f5fc:	f7f0 fe4c 	bl	8000298 <__aeabi_dsub>
 800f600:	ec41 0b10 	vmov	d0, r0, r1
 800f604:	b005      	add	sp, #20
 800f606:	f85d fb04 	ldr.w	pc, [sp], #4
 800f60a:	4668      	mov	r0, sp
 800f60c:	f000 f860 	bl	800f6d0 <__ieee754_rem_pio2>
 800f610:	0040      	lsls	r0, r0, #1
 800f612:	f000 0002 	and.w	r0, r0, #2
 800f616:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f61a:	ed9d 0b00 	vldr	d0, [sp]
 800f61e:	f1c0 0001 	rsb	r0, r0, #1
 800f622:	f001 f86d 	bl	8010700 <__kernel_tan>
 800f626:	e7ed      	b.n	800f604 <tan+0x34>
	...
 800f630:	3fe921fb 	.word	0x3fe921fb
 800f634:	7fefffff 	.word	0x7fefffff

0800f638 <sqrt>:
 800f638:	b538      	push	{r3, r4, r5, lr}
 800f63a:	ed2d 8b02 	vpush	{d8}
 800f63e:	ec55 4b10 	vmov	r4, r5, d0
 800f642:	f000 fa51 	bl	800fae8 <__ieee754_sqrt>
 800f646:	4622      	mov	r2, r4
 800f648:	462b      	mov	r3, r5
 800f64a:	4620      	mov	r0, r4
 800f64c:	4629      	mov	r1, r5
 800f64e:	eeb0 8a40 	vmov.f32	s16, s0
 800f652:	eef0 8a60 	vmov.f32	s17, s1
 800f656:	f7f1 fa71 	bl	8000b3c <__aeabi_dcmpun>
 800f65a:	b990      	cbnz	r0, 800f682 <sqrt+0x4a>
 800f65c:	2200      	movs	r2, #0
 800f65e:	2300      	movs	r3, #0
 800f660:	4620      	mov	r0, r4
 800f662:	4629      	mov	r1, r5
 800f664:	f7f1 fa42 	bl	8000aec <__aeabi_dcmplt>
 800f668:	b158      	cbz	r0, 800f682 <sqrt+0x4a>
 800f66a:	f7fb f8b9 	bl	800a7e0 <__errno>
 800f66e:	2321      	movs	r3, #33	; 0x21
 800f670:	6003      	str	r3, [r0, #0]
 800f672:	2200      	movs	r2, #0
 800f674:	2300      	movs	r3, #0
 800f676:	4610      	mov	r0, r2
 800f678:	4619      	mov	r1, r3
 800f67a:	f7f1 f8ef 	bl	800085c <__aeabi_ddiv>
 800f67e:	ec41 0b18 	vmov	d8, r0, r1
 800f682:	eeb0 0a48 	vmov.f32	s0, s16
 800f686:	eef0 0a68 	vmov.f32	s1, s17
 800f68a:	ecbd 8b02 	vpop	{d8}
 800f68e:	bd38      	pop	{r3, r4, r5, pc}

0800f690 <fmodf>:
 800f690:	b508      	push	{r3, lr}
 800f692:	ed2d 8b02 	vpush	{d8}
 800f696:	eef0 8a40 	vmov.f32	s17, s0
 800f69a:	eeb0 8a60 	vmov.f32	s16, s1
 800f69e:	f000 fad5 	bl	800fc4c <__ieee754_fmodf>
 800f6a2:	eef4 8a48 	vcmp.f32	s17, s16
 800f6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6aa:	d60c      	bvs.n	800f6c6 <fmodf+0x36>
 800f6ac:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f6cc <fmodf+0x3c>
 800f6b0:	eeb4 8a68 	vcmp.f32	s16, s17
 800f6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b8:	d105      	bne.n	800f6c6 <fmodf+0x36>
 800f6ba:	f7fb f891 	bl	800a7e0 <__errno>
 800f6be:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f6c2:	2321      	movs	r3, #33	; 0x21
 800f6c4:	6003      	str	r3, [r0, #0]
 800f6c6:	ecbd 8b02 	vpop	{d8}
 800f6ca:	bd08      	pop	{r3, pc}
 800f6cc:	00000000 	.word	0x00000000

0800f6d0 <__ieee754_rem_pio2>:
 800f6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d4:	ed2d 8b02 	vpush	{d8}
 800f6d8:	ec55 4b10 	vmov	r4, r5, d0
 800f6dc:	4bca      	ldr	r3, [pc, #808]	; (800fa08 <__ieee754_rem_pio2+0x338>)
 800f6de:	b08b      	sub	sp, #44	; 0x2c
 800f6e0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f6e4:	4598      	cmp	r8, r3
 800f6e6:	4682      	mov	sl, r0
 800f6e8:	9502      	str	r5, [sp, #8]
 800f6ea:	dc08      	bgt.n	800f6fe <__ieee754_rem_pio2+0x2e>
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	ed80 0b00 	vstr	d0, [r0]
 800f6f4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f6f8:	f04f 0b00 	mov.w	fp, #0
 800f6fc:	e028      	b.n	800f750 <__ieee754_rem_pio2+0x80>
 800f6fe:	4bc3      	ldr	r3, [pc, #780]	; (800fa0c <__ieee754_rem_pio2+0x33c>)
 800f700:	4598      	cmp	r8, r3
 800f702:	dc78      	bgt.n	800f7f6 <__ieee754_rem_pio2+0x126>
 800f704:	9b02      	ldr	r3, [sp, #8]
 800f706:	4ec2      	ldr	r6, [pc, #776]	; (800fa10 <__ieee754_rem_pio2+0x340>)
 800f708:	2b00      	cmp	r3, #0
 800f70a:	ee10 0a10 	vmov	r0, s0
 800f70e:	a3b0      	add	r3, pc, #704	; (adr r3, 800f9d0 <__ieee754_rem_pio2+0x300>)
 800f710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f714:	4629      	mov	r1, r5
 800f716:	dd39      	ble.n	800f78c <__ieee754_rem_pio2+0xbc>
 800f718:	f7f0 fdbe 	bl	8000298 <__aeabi_dsub>
 800f71c:	45b0      	cmp	r8, r6
 800f71e:	4604      	mov	r4, r0
 800f720:	460d      	mov	r5, r1
 800f722:	d01b      	beq.n	800f75c <__ieee754_rem_pio2+0x8c>
 800f724:	a3ac      	add	r3, pc, #688	; (adr r3, 800f9d8 <__ieee754_rem_pio2+0x308>)
 800f726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72a:	f7f0 fdb5 	bl	8000298 <__aeabi_dsub>
 800f72e:	4602      	mov	r2, r0
 800f730:	460b      	mov	r3, r1
 800f732:	e9ca 2300 	strd	r2, r3, [sl]
 800f736:	4620      	mov	r0, r4
 800f738:	4629      	mov	r1, r5
 800f73a:	f7f0 fdad 	bl	8000298 <__aeabi_dsub>
 800f73e:	a3a6      	add	r3, pc, #664	; (adr r3, 800f9d8 <__ieee754_rem_pio2+0x308>)
 800f740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f744:	f7f0 fda8 	bl	8000298 <__aeabi_dsub>
 800f748:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f74c:	f04f 0b01 	mov.w	fp, #1
 800f750:	4658      	mov	r0, fp
 800f752:	b00b      	add	sp, #44	; 0x2c
 800f754:	ecbd 8b02 	vpop	{d8}
 800f758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f75c:	a3a0      	add	r3, pc, #640	; (adr r3, 800f9e0 <__ieee754_rem_pio2+0x310>)
 800f75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f762:	f7f0 fd99 	bl	8000298 <__aeabi_dsub>
 800f766:	a3a0      	add	r3, pc, #640	; (adr r3, 800f9e8 <__ieee754_rem_pio2+0x318>)
 800f768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76c:	4604      	mov	r4, r0
 800f76e:	460d      	mov	r5, r1
 800f770:	f7f0 fd92 	bl	8000298 <__aeabi_dsub>
 800f774:	4602      	mov	r2, r0
 800f776:	460b      	mov	r3, r1
 800f778:	e9ca 2300 	strd	r2, r3, [sl]
 800f77c:	4620      	mov	r0, r4
 800f77e:	4629      	mov	r1, r5
 800f780:	f7f0 fd8a 	bl	8000298 <__aeabi_dsub>
 800f784:	a398      	add	r3, pc, #608	; (adr r3, 800f9e8 <__ieee754_rem_pio2+0x318>)
 800f786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f78a:	e7db      	b.n	800f744 <__ieee754_rem_pio2+0x74>
 800f78c:	f7f0 fd86 	bl	800029c <__adddf3>
 800f790:	45b0      	cmp	r8, r6
 800f792:	4604      	mov	r4, r0
 800f794:	460d      	mov	r5, r1
 800f796:	d016      	beq.n	800f7c6 <__ieee754_rem_pio2+0xf6>
 800f798:	a38f      	add	r3, pc, #572	; (adr r3, 800f9d8 <__ieee754_rem_pio2+0x308>)
 800f79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79e:	f7f0 fd7d 	bl	800029c <__adddf3>
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	e9ca 2300 	strd	r2, r3, [sl]
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	4629      	mov	r1, r5
 800f7ae:	f7f0 fd73 	bl	8000298 <__aeabi_dsub>
 800f7b2:	a389      	add	r3, pc, #548	; (adr r3, 800f9d8 <__ieee754_rem_pio2+0x308>)
 800f7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b8:	f7f0 fd70 	bl	800029c <__adddf3>
 800f7bc:	f04f 3bff 	mov.w	fp, #4294967295
 800f7c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f7c4:	e7c4      	b.n	800f750 <__ieee754_rem_pio2+0x80>
 800f7c6:	a386      	add	r3, pc, #536	; (adr r3, 800f9e0 <__ieee754_rem_pio2+0x310>)
 800f7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7cc:	f7f0 fd66 	bl	800029c <__adddf3>
 800f7d0:	a385      	add	r3, pc, #532	; (adr r3, 800f9e8 <__ieee754_rem_pio2+0x318>)
 800f7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d6:	4604      	mov	r4, r0
 800f7d8:	460d      	mov	r5, r1
 800f7da:	f7f0 fd5f 	bl	800029c <__adddf3>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	e9ca 2300 	strd	r2, r3, [sl]
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	4629      	mov	r1, r5
 800f7ea:	f7f0 fd55 	bl	8000298 <__aeabi_dsub>
 800f7ee:	a37e      	add	r3, pc, #504	; (adr r3, 800f9e8 <__ieee754_rem_pio2+0x318>)
 800f7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f4:	e7e0      	b.n	800f7b8 <__ieee754_rem_pio2+0xe8>
 800f7f6:	4b87      	ldr	r3, [pc, #540]	; (800fa14 <__ieee754_rem_pio2+0x344>)
 800f7f8:	4598      	cmp	r8, r3
 800f7fa:	f300 80d9 	bgt.w	800f9b0 <__ieee754_rem_pio2+0x2e0>
 800f7fe:	f7ff fe83 	bl	800f508 <fabs>
 800f802:	ec55 4b10 	vmov	r4, r5, d0
 800f806:	ee10 0a10 	vmov	r0, s0
 800f80a:	a379      	add	r3, pc, #484	; (adr r3, 800f9f0 <__ieee754_rem_pio2+0x320>)
 800f80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f810:	4629      	mov	r1, r5
 800f812:	f7f0 fef9 	bl	8000608 <__aeabi_dmul>
 800f816:	4b80      	ldr	r3, [pc, #512]	; (800fa18 <__ieee754_rem_pio2+0x348>)
 800f818:	2200      	movs	r2, #0
 800f81a:	f7f0 fd3f 	bl	800029c <__adddf3>
 800f81e:	f7f1 f9a3 	bl	8000b68 <__aeabi_d2iz>
 800f822:	4683      	mov	fp, r0
 800f824:	f7f0 fe86 	bl	8000534 <__aeabi_i2d>
 800f828:	4602      	mov	r2, r0
 800f82a:	460b      	mov	r3, r1
 800f82c:	ec43 2b18 	vmov	d8, r2, r3
 800f830:	a367      	add	r3, pc, #412	; (adr r3, 800f9d0 <__ieee754_rem_pio2+0x300>)
 800f832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f836:	f7f0 fee7 	bl	8000608 <__aeabi_dmul>
 800f83a:	4602      	mov	r2, r0
 800f83c:	460b      	mov	r3, r1
 800f83e:	4620      	mov	r0, r4
 800f840:	4629      	mov	r1, r5
 800f842:	f7f0 fd29 	bl	8000298 <__aeabi_dsub>
 800f846:	a364      	add	r3, pc, #400	; (adr r3, 800f9d8 <__ieee754_rem_pio2+0x308>)
 800f848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84c:	4606      	mov	r6, r0
 800f84e:	460f      	mov	r7, r1
 800f850:	ec51 0b18 	vmov	r0, r1, d8
 800f854:	f7f0 fed8 	bl	8000608 <__aeabi_dmul>
 800f858:	f1bb 0f1f 	cmp.w	fp, #31
 800f85c:	4604      	mov	r4, r0
 800f85e:	460d      	mov	r5, r1
 800f860:	dc0d      	bgt.n	800f87e <__ieee754_rem_pio2+0x1ae>
 800f862:	4b6e      	ldr	r3, [pc, #440]	; (800fa1c <__ieee754_rem_pio2+0x34c>)
 800f864:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f86c:	4543      	cmp	r3, r8
 800f86e:	d006      	beq.n	800f87e <__ieee754_rem_pio2+0x1ae>
 800f870:	4622      	mov	r2, r4
 800f872:	462b      	mov	r3, r5
 800f874:	4630      	mov	r0, r6
 800f876:	4639      	mov	r1, r7
 800f878:	f7f0 fd0e 	bl	8000298 <__aeabi_dsub>
 800f87c:	e00f      	b.n	800f89e <__ieee754_rem_pio2+0x1ce>
 800f87e:	462b      	mov	r3, r5
 800f880:	4622      	mov	r2, r4
 800f882:	4630      	mov	r0, r6
 800f884:	4639      	mov	r1, r7
 800f886:	f7f0 fd07 	bl	8000298 <__aeabi_dsub>
 800f88a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f88e:	9303      	str	r3, [sp, #12]
 800f890:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f894:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f898:	f1b8 0f10 	cmp.w	r8, #16
 800f89c:	dc02      	bgt.n	800f8a4 <__ieee754_rem_pio2+0x1d4>
 800f89e:	e9ca 0100 	strd	r0, r1, [sl]
 800f8a2:	e039      	b.n	800f918 <__ieee754_rem_pio2+0x248>
 800f8a4:	a34e      	add	r3, pc, #312	; (adr r3, 800f9e0 <__ieee754_rem_pio2+0x310>)
 800f8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8aa:	ec51 0b18 	vmov	r0, r1, d8
 800f8ae:	f7f0 feab 	bl	8000608 <__aeabi_dmul>
 800f8b2:	4604      	mov	r4, r0
 800f8b4:	460d      	mov	r5, r1
 800f8b6:	4602      	mov	r2, r0
 800f8b8:	460b      	mov	r3, r1
 800f8ba:	4630      	mov	r0, r6
 800f8bc:	4639      	mov	r1, r7
 800f8be:	f7f0 fceb 	bl	8000298 <__aeabi_dsub>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	4680      	mov	r8, r0
 800f8c8:	4689      	mov	r9, r1
 800f8ca:	4630      	mov	r0, r6
 800f8cc:	4639      	mov	r1, r7
 800f8ce:	f7f0 fce3 	bl	8000298 <__aeabi_dsub>
 800f8d2:	4622      	mov	r2, r4
 800f8d4:	462b      	mov	r3, r5
 800f8d6:	f7f0 fcdf 	bl	8000298 <__aeabi_dsub>
 800f8da:	a343      	add	r3, pc, #268	; (adr r3, 800f9e8 <__ieee754_rem_pio2+0x318>)
 800f8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e0:	4604      	mov	r4, r0
 800f8e2:	460d      	mov	r5, r1
 800f8e4:	ec51 0b18 	vmov	r0, r1, d8
 800f8e8:	f7f0 fe8e 	bl	8000608 <__aeabi_dmul>
 800f8ec:	4622      	mov	r2, r4
 800f8ee:	462b      	mov	r3, r5
 800f8f0:	f7f0 fcd2 	bl	8000298 <__aeabi_dsub>
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	460b      	mov	r3, r1
 800f8f8:	4604      	mov	r4, r0
 800f8fa:	460d      	mov	r5, r1
 800f8fc:	4640      	mov	r0, r8
 800f8fe:	4649      	mov	r1, r9
 800f900:	f7f0 fcca 	bl	8000298 <__aeabi_dsub>
 800f904:	9a03      	ldr	r2, [sp, #12]
 800f906:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f90a:	1ad3      	subs	r3, r2, r3
 800f90c:	2b31      	cmp	r3, #49	; 0x31
 800f90e:	dc24      	bgt.n	800f95a <__ieee754_rem_pio2+0x28a>
 800f910:	e9ca 0100 	strd	r0, r1, [sl]
 800f914:	4646      	mov	r6, r8
 800f916:	464f      	mov	r7, r9
 800f918:	e9da 8900 	ldrd	r8, r9, [sl]
 800f91c:	4630      	mov	r0, r6
 800f91e:	4642      	mov	r2, r8
 800f920:	464b      	mov	r3, r9
 800f922:	4639      	mov	r1, r7
 800f924:	f7f0 fcb8 	bl	8000298 <__aeabi_dsub>
 800f928:	462b      	mov	r3, r5
 800f92a:	4622      	mov	r2, r4
 800f92c:	f7f0 fcb4 	bl	8000298 <__aeabi_dsub>
 800f930:	9b02      	ldr	r3, [sp, #8]
 800f932:	2b00      	cmp	r3, #0
 800f934:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f938:	f6bf af0a 	bge.w	800f750 <__ieee754_rem_pio2+0x80>
 800f93c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f940:	f8ca 3004 	str.w	r3, [sl, #4]
 800f944:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f948:	f8ca 8000 	str.w	r8, [sl]
 800f94c:	f8ca 0008 	str.w	r0, [sl, #8]
 800f950:	f8ca 300c 	str.w	r3, [sl, #12]
 800f954:	f1cb 0b00 	rsb	fp, fp, #0
 800f958:	e6fa      	b.n	800f750 <__ieee754_rem_pio2+0x80>
 800f95a:	a327      	add	r3, pc, #156	; (adr r3, 800f9f8 <__ieee754_rem_pio2+0x328>)
 800f95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f960:	ec51 0b18 	vmov	r0, r1, d8
 800f964:	f7f0 fe50 	bl	8000608 <__aeabi_dmul>
 800f968:	4604      	mov	r4, r0
 800f96a:	460d      	mov	r5, r1
 800f96c:	4602      	mov	r2, r0
 800f96e:	460b      	mov	r3, r1
 800f970:	4640      	mov	r0, r8
 800f972:	4649      	mov	r1, r9
 800f974:	f7f0 fc90 	bl	8000298 <__aeabi_dsub>
 800f978:	4602      	mov	r2, r0
 800f97a:	460b      	mov	r3, r1
 800f97c:	4606      	mov	r6, r0
 800f97e:	460f      	mov	r7, r1
 800f980:	4640      	mov	r0, r8
 800f982:	4649      	mov	r1, r9
 800f984:	f7f0 fc88 	bl	8000298 <__aeabi_dsub>
 800f988:	4622      	mov	r2, r4
 800f98a:	462b      	mov	r3, r5
 800f98c:	f7f0 fc84 	bl	8000298 <__aeabi_dsub>
 800f990:	a31b      	add	r3, pc, #108	; (adr r3, 800fa00 <__ieee754_rem_pio2+0x330>)
 800f992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f996:	4604      	mov	r4, r0
 800f998:	460d      	mov	r5, r1
 800f99a:	ec51 0b18 	vmov	r0, r1, d8
 800f99e:	f7f0 fe33 	bl	8000608 <__aeabi_dmul>
 800f9a2:	4622      	mov	r2, r4
 800f9a4:	462b      	mov	r3, r5
 800f9a6:	f7f0 fc77 	bl	8000298 <__aeabi_dsub>
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	460d      	mov	r5, r1
 800f9ae:	e75f      	b.n	800f870 <__ieee754_rem_pio2+0x1a0>
 800f9b0:	4b1b      	ldr	r3, [pc, #108]	; (800fa20 <__ieee754_rem_pio2+0x350>)
 800f9b2:	4598      	cmp	r8, r3
 800f9b4:	dd36      	ble.n	800fa24 <__ieee754_rem_pio2+0x354>
 800f9b6:	ee10 2a10 	vmov	r2, s0
 800f9ba:	462b      	mov	r3, r5
 800f9bc:	4620      	mov	r0, r4
 800f9be:	4629      	mov	r1, r5
 800f9c0:	f7f0 fc6a 	bl	8000298 <__aeabi_dsub>
 800f9c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f9c8:	e9ca 0100 	strd	r0, r1, [sl]
 800f9cc:	e694      	b.n	800f6f8 <__ieee754_rem_pio2+0x28>
 800f9ce:	bf00      	nop
 800f9d0:	54400000 	.word	0x54400000
 800f9d4:	3ff921fb 	.word	0x3ff921fb
 800f9d8:	1a626331 	.word	0x1a626331
 800f9dc:	3dd0b461 	.word	0x3dd0b461
 800f9e0:	1a600000 	.word	0x1a600000
 800f9e4:	3dd0b461 	.word	0x3dd0b461
 800f9e8:	2e037073 	.word	0x2e037073
 800f9ec:	3ba3198a 	.word	0x3ba3198a
 800f9f0:	6dc9c883 	.word	0x6dc9c883
 800f9f4:	3fe45f30 	.word	0x3fe45f30
 800f9f8:	2e000000 	.word	0x2e000000
 800f9fc:	3ba3198a 	.word	0x3ba3198a
 800fa00:	252049c1 	.word	0x252049c1
 800fa04:	397b839a 	.word	0x397b839a
 800fa08:	3fe921fb 	.word	0x3fe921fb
 800fa0c:	4002d97b 	.word	0x4002d97b
 800fa10:	3ff921fb 	.word	0x3ff921fb
 800fa14:	413921fb 	.word	0x413921fb
 800fa18:	3fe00000 	.word	0x3fe00000
 800fa1c:	08011268 	.word	0x08011268
 800fa20:	7fefffff 	.word	0x7fefffff
 800fa24:	ea4f 5428 	mov.w	r4, r8, asr #20
 800fa28:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800fa2c:	ee10 0a10 	vmov	r0, s0
 800fa30:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800fa34:	ee10 6a10 	vmov	r6, s0
 800fa38:	460f      	mov	r7, r1
 800fa3a:	f7f1 f895 	bl	8000b68 <__aeabi_d2iz>
 800fa3e:	f7f0 fd79 	bl	8000534 <__aeabi_i2d>
 800fa42:	4602      	mov	r2, r0
 800fa44:	460b      	mov	r3, r1
 800fa46:	4630      	mov	r0, r6
 800fa48:	4639      	mov	r1, r7
 800fa4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fa4e:	f7f0 fc23 	bl	8000298 <__aeabi_dsub>
 800fa52:	4b23      	ldr	r3, [pc, #140]	; (800fae0 <__ieee754_rem_pio2+0x410>)
 800fa54:	2200      	movs	r2, #0
 800fa56:	f7f0 fdd7 	bl	8000608 <__aeabi_dmul>
 800fa5a:	460f      	mov	r7, r1
 800fa5c:	4606      	mov	r6, r0
 800fa5e:	f7f1 f883 	bl	8000b68 <__aeabi_d2iz>
 800fa62:	f7f0 fd67 	bl	8000534 <__aeabi_i2d>
 800fa66:	4602      	mov	r2, r0
 800fa68:	460b      	mov	r3, r1
 800fa6a:	4630      	mov	r0, r6
 800fa6c:	4639      	mov	r1, r7
 800fa6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fa72:	f7f0 fc11 	bl	8000298 <__aeabi_dsub>
 800fa76:	4b1a      	ldr	r3, [pc, #104]	; (800fae0 <__ieee754_rem_pio2+0x410>)
 800fa78:	2200      	movs	r2, #0
 800fa7a:	f7f0 fdc5 	bl	8000608 <__aeabi_dmul>
 800fa7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fa82:	ad04      	add	r5, sp, #16
 800fa84:	f04f 0803 	mov.w	r8, #3
 800fa88:	46a9      	mov	r9, r5
 800fa8a:	2600      	movs	r6, #0
 800fa8c:	2700      	movs	r7, #0
 800fa8e:	4632      	mov	r2, r6
 800fa90:	463b      	mov	r3, r7
 800fa92:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800fa96:	46c3      	mov	fp, r8
 800fa98:	3d08      	subs	r5, #8
 800fa9a:	f108 38ff 	add.w	r8, r8, #4294967295
 800fa9e:	f7f1 f81b 	bl	8000ad8 <__aeabi_dcmpeq>
 800faa2:	2800      	cmp	r0, #0
 800faa4:	d1f3      	bne.n	800fa8e <__ieee754_rem_pio2+0x3be>
 800faa6:	4b0f      	ldr	r3, [pc, #60]	; (800fae4 <__ieee754_rem_pio2+0x414>)
 800faa8:	9301      	str	r3, [sp, #4]
 800faaa:	2302      	movs	r3, #2
 800faac:	9300      	str	r3, [sp, #0]
 800faae:	4622      	mov	r2, r4
 800fab0:	465b      	mov	r3, fp
 800fab2:	4651      	mov	r1, sl
 800fab4:	4648      	mov	r0, r9
 800fab6:	f000 fa13 	bl	800fee0 <__kernel_rem_pio2>
 800faba:	9b02      	ldr	r3, [sp, #8]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	4683      	mov	fp, r0
 800fac0:	f6bf ae46 	bge.w	800f750 <__ieee754_rem_pio2+0x80>
 800fac4:	e9da 2100 	ldrd	r2, r1, [sl]
 800fac8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800facc:	e9ca 2300 	strd	r2, r3, [sl]
 800fad0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800fad4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fad8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800fadc:	e73a      	b.n	800f954 <__ieee754_rem_pio2+0x284>
 800fade:	bf00      	nop
 800fae0:	41700000 	.word	0x41700000
 800fae4:	080112e8 	.word	0x080112e8

0800fae8 <__ieee754_sqrt>:
 800fae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faec:	ec55 4b10 	vmov	r4, r5, d0
 800faf0:	4e55      	ldr	r6, [pc, #340]	; (800fc48 <__ieee754_sqrt+0x160>)
 800faf2:	43ae      	bics	r6, r5
 800faf4:	ee10 0a10 	vmov	r0, s0
 800faf8:	ee10 3a10 	vmov	r3, s0
 800fafc:	462a      	mov	r2, r5
 800fafe:	4629      	mov	r1, r5
 800fb00:	d110      	bne.n	800fb24 <__ieee754_sqrt+0x3c>
 800fb02:	ee10 2a10 	vmov	r2, s0
 800fb06:	462b      	mov	r3, r5
 800fb08:	f7f0 fd7e 	bl	8000608 <__aeabi_dmul>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	460b      	mov	r3, r1
 800fb10:	4620      	mov	r0, r4
 800fb12:	4629      	mov	r1, r5
 800fb14:	f7f0 fbc2 	bl	800029c <__adddf3>
 800fb18:	4604      	mov	r4, r0
 800fb1a:	460d      	mov	r5, r1
 800fb1c:	ec45 4b10 	vmov	d0, r4, r5
 800fb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb24:	2d00      	cmp	r5, #0
 800fb26:	dc10      	bgt.n	800fb4a <__ieee754_sqrt+0x62>
 800fb28:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fb2c:	4330      	orrs	r0, r6
 800fb2e:	d0f5      	beq.n	800fb1c <__ieee754_sqrt+0x34>
 800fb30:	b15d      	cbz	r5, 800fb4a <__ieee754_sqrt+0x62>
 800fb32:	ee10 2a10 	vmov	r2, s0
 800fb36:	462b      	mov	r3, r5
 800fb38:	ee10 0a10 	vmov	r0, s0
 800fb3c:	f7f0 fbac 	bl	8000298 <__aeabi_dsub>
 800fb40:	4602      	mov	r2, r0
 800fb42:	460b      	mov	r3, r1
 800fb44:	f7f0 fe8a 	bl	800085c <__aeabi_ddiv>
 800fb48:	e7e6      	b.n	800fb18 <__ieee754_sqrt+0x30>
 800fb4a:	1512      	asrs	r2, r2, #20
 800fb4c:	d074      	beq.n	800fc38 <__ieee754_sqrt+0x150>
 800fb4e:	07d4      	lsls	r4, r2, #31
 800fb50:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fb54:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800fb58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fb5c:	bf5e      	ittt	pl
 800fb5e:	0fda      	lsrpl	r2, r3, #31
 800fb60:	005b      	lslpl	r3, r3, #1
 800fb62:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800fb66:	2400      	movs	r4, #0
 800fb68:	0fda      	lsrs	r2, r3, #31
 800fb6a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fb6e:	107f      	asrs	r7, r7, #1
 800fb70:	005b      	lsls	r3, r3, #1
 800fb72:	2516      	movs	r5, #22
 800fb74:	4620      	mov	r0, r4
 800fb76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fb7a:	1886      	adds	r6, r0, r2
 800fb7c:	428e      	cmp	r6, r1
 800fb7e:	bfde      	ittt	le
 800fb80:	1b89      	suble	r1, r1, r6
 800fb82:	18b0      	addle	r0, r6, r2
 800fb84:	18a4      	addle	r4, r4, r2
 800fb86:	0049      	lsls	r1, r1, #1
 800fb88:	3d01      	subs	r5, #1
 800fb8a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800fb8e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800fb92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fb96:	d1f0      	bne.n	800fb7a <__ieee754_sqrt+0x92>
 800fb98:	462a      	mov	r2, r5
 800fb9a:	f04f 0e20 	mov.w	lr, #32
 800fb9e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800fba2:	4281      	cmp	r1, r0
 800fba4:	eb06 0c05 	add.w	ip, r6, r5
 800fba8:	dc02      	bgt.n	800fbb0 <__ieee754_sqrt+0xc8>
 800fbaa:	d113      	bne.n	800fbd4 <__ieee754_sqrt+0xec>
 800fbac:	459c      	cmp	ip, r3
 800fbae:	d811      	bhi.n	800fbd4 <__ieee754_sqrt+0xec>
 800fbb0:	f1bc 0f00 	cmp.w	ip, #0
 800fbb4:	eb0c 0506 	add.w	r5, ip, r6
 800fbb8:	da43      	bge.n	800fc42 <__ieee754_sqrt+0x15a>
 800fbba:	2d00      	cmp	r5, #0
 800fbbc:	db41      	blt.n	800fc42 <__ieee754_sqrt+0x15a>
 800fbbe:	f100 0801 	add.w	r8, r0, #1
 800fbc2:	1a09      	subs	r1, r1, r0
 800fbc4:	459c      	cmp	ip, r3
 800fbc6:	bf88      	it	hi
 800fbc8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800fbcc:	eba3 030c 	sub.w	r3, r3, ip
 800fbd0:	4432      	add	r2, r6
 800fbd2:	4640      	mov	r0, r8
 800fbd4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800fbd8:	f1be 0e01 	subs.w	lr, lr, #1
 800fbdc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800fbe0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fbe4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fbe8:	d1db      	bne.n	800fba2 <__ieee754_sqrt+0xba>
 800fbea:	430b      	orrs	r3, r1
 800fbec:	d006      	beq.n	800fbfc <__ieee754_sqrt+0x114>
 800fbee:	1c50      	adds	r0, r2, #1
 800fbf0:	bf13      	iteet	ne
 800fbf2:	3201      	addne	r2, #1
 800fbf4:	3401      	addeq	r4, #1
 800fbf6:	4672      	moveq	r2, lr
 800fbf8:	f022 0201 	bicne.w	r2, r2, #1
 800fbfc:	1063      	asrs	r3, r4, #1
 800fbfe:	0852      	lsrs	r2, r2, #1
 800fc00:	07e1      	lsls	r1, r4, #31
 800fc02:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fc06:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fc0a:	bf48      	it	mi
 800fc0c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800fc10:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800fc14:	4614      	mov	r4, r2
 800fc16:	e781      	b.n	800fb1c <__ieee754_sqrt+0x34>
 800fc18:	0ad9      	lsrs	r1, r3, #11
 800fc1a:	3815      	subs	r0, #21
 800fc1c:	055b      	lsls	r3, r3, #21
 800fc1e:	2900      	cmp	r1, #0
 800fc20:	d0fa      	beq.n	800fc18 <__ieee754_sqrt+0x130>
 800fc22:	02cd      	lsls	r5, r1, #11
 800fc24:	d50a      	bpl.n	800fc3c <__ieee754_sqrt+0x154>
 800fc26:	f1c2 0420 	rsb	r4, r2, #32
 800fc2a:	fa23 f404 	lsr.w	r4, r3, r4
 800fc2e:	1e55      	subs	r5, r2, #1
 800fc30:	4093      	lsls	r3, r2
 800fc32:	4321      	orrs	r1, r4
 800fc34:	1b42      	subs	r2, r0, r5
 800fc36:	e78a      	b.n	800fb4e <__ieee754_sqrt+0x66>
 800fc38:	4610      	mov	r0, r2
 800fc3a:	e7f0      	b.n	800fc1e <__ieee754_sqrt+0x136>
 800fc3c:	0049      	lsls	r1, r1, #1
 800fc3e:	3201      	adds	r2, #1
 800fc40:	e7ef      	b.n	800fc22 <__ieee754_sqrt+0x13a>
 800fc42:	4680      	mov	r8, r0
 800fc44:	e7bd      	b.n	800fbc2 <__ieee754_sqrt+0xda>
 800fc46:	bf00      	nop
 800fc48:	7ff00000 	.word	0x7ff00000

0800fc4c <__ieee754_fmodf>:
 800fc4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc4e:	ee10 5a90 	vmov	r5, s1
 800fc52:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800fc56:	d009      	beq.n	800fc6c <__ieee754_fmodf+0x20>
 800fc58:	ee10 2a10 	vmov	r2, s0
 800fc5c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800fc60:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fc64:	da02      	bge.n	800fc6c <__ieee754_fmodf+0x20>
 800fc66:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800fc6a:	dd04      	ble.n	800fc76 <__ieee754_fmodf+0x2a>
 800fc6c:	ee60 0a20 	vmul.f32	s1, s0, s1
 800fc70:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800fc74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc76:	42a3      	cmp	r3, r4
 800fc78:	dbfc      	blt.n	800fc74 <__ieee754_fmodf+0x28>
 800fc7a:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800fc7e:	d105      	bne.n	800fc8c <__ieee754_fmodf+0x40>
 800fc80:	4b32      	ldr	r3, [pc, #200]	; (800fd4c <__ieee754_fmodf+0x100>)
 800fc82:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800fc86:	ed93 0a00 	vldr	s0, [r3]
 800fc8a:	e7f3      	b.n	800fc74 <__ieee754_fmodf+0x28>
 800fc8c:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800fc90:	d13f      	bne.n	800fd12 <__ieee754_fmodf+0xc6>
 800fc92:	0219      	lsls	r1, r3, #8
 800fc94:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800fc98:	2900      	cmp	r1, #0
 800fc9a:	dc37      	bgt.n	800fd0c <__ieee754_fmodf+0xc0>
 800fc9c:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800fca0:	d13d      	bne.n	800fd1e <__ieee754_fmodf+0xd2>
 800fca2:	0227      	lsls	r7, r4, #8
 800fca4:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800fca8:	2f00      	cmp	r7, #0
 800fcaa:	da35      	bge.n	800fd18 <__ieee754_fmodf+0xcc>
 800fcac:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800fcb0:	bfbb      	ittet	lt
 800fcb2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800fcb6:	1a12      	sublt	r2, r2, r0
 800fcb8:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800fcbc:	4093      	lsllt	r3, r2
 800fcbe:	bfa8      	it	ge
 800fcc0:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800fcc4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800fcc8:	bfb5      	itete	lt
 800fcca:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800fcce:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800fcd2:	1a52      	sublt	r2, r2, r1
 800fcd4:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800fcd8:	bfb8      	it	lt
 800fcda:	4094      	lsllt	r4, r2
 800fcdc:	1a40      	subs	r0, r0, r1
 800fcde:	1b1a      	subs	r2, r3, r4
 800fce0:	bb00      	cbnz	r0, 800fd24 <__ieee754_fmodf+0xd8>
 800fce2:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800fce6:	bf38      	it	cc
 800fce8:	4613      	movcc	r3, r2
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d0c8      	beq.n	800fc80 <__ieee754_fmodf+0x34>
 800fcee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fcf2:	db1f      	blt.n	800fd34 <__ieee754_fmodf+0xe8>
 800fcf4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800fcf8:	db1f      	blt.n	800fd3a <__ieee754_fmodf+0xee>
 800fcfa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800fcfe:	317f      	adds	r1, #127	; 0x7f
 800fd00:	4333      	orrs	r3, r6
 800fd02:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800fd06:	ee00 3a10 	vmov	s0, r3
 800fd0a:	e7b3      	b.n	800fc74 <__ieee754_fmodf+0x28>
 800fd0c:	3801      	subs	r0, #1
 800fd0e:	0049      	lsls	r1, r1, #1
 800fd10:	e7c2      	b.n	800fc98 <__ieee754_fmodf+0x4c>
 800fd12:	15d8      	asrs	r0, r3, #23
 800fd14:	387f      	subs	r0, #127	; 0x7f
 800fd16:	e7c1      	b.n	800fc9c <__ieee754_fmodf+0x50>
 800fd18:	3901      	subs	r1, #1
 800fd1a:	007f      	lsls	r7, r7, #1
 800fd1c:	e7c4      	b.n	800fca8 <__ieee754_fmodf+0x5c>
 800fd1e:	15e1      	asrs	r1, r4, #23
 800fd20:	397f      	subs	r1, #127	; 0x7f
 800fd22:	e7c3      	b.n	800fcac <__ieee754_fmodf+0x60>
 800fd24:	2a00      	cmp	r2, #0
 800fd26:	da02      	bge.n	800fd2e <__ieee754_fmodf+0xe2>
 800fd28:	005b      	lsls	r3, r3, #1
 800fd2a:	3801      	subs	r0, #1
 800fd2c:	e7d7      	b.n	800fcde <__ieee754_fmodf+0x92>
 800fd2e:	d0a7      	beq.n	800fc80 <__ieee754_fmodf+0x34>
 800fd30:	0053      	lsls	r3, r2, #1
 800fd32:	e7fa      	b.n	800fd2a <__ieee754_fmodf+0xde>
 800fd34:	005b      	lsls	r3, r3, #1
 800fd36:	3901      	subs	r1, #1
 800fd38:	e7d9      	b.n	800fcee <__ieee754_fmodf+0xa2>
 800fd3a:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800fd3e:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800fd42:	3182      	adds	r1, #130	; 0x82
 800fd44:	410b      	asrs	r3, r1
 800fd46:	4333      	orrs	r3, r6
 800fd48:	e7dd      	b.n	800fd06 <__ieee754_fmodf+0xba>
 800fd4a:	bf00      	nop
 800fd4c:	080113f0 	.word	0x080113f0

0800fd50 <__kernel_cos>:
 800fd50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd54:	ec57 6b10 	vmov	r6, r7, d0
 800fd58:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800fd5c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800fd60:	ed8d 1b00 	vstr	d1, [sp]
 800fd64:	da07      	bge.n	800fd76 <__kernel_cos+0x26>
 800fd66:	ee10 0a10 	vmov	r0, s0
 800fd6a:	4639      	mov	r1, r7
 800fd6c:	f7f0 fefc 	bl	8000b68 <__aeabi_d2iz>
 800fd70:	2800      	cmp	r0, #0
 800fd72:	f000 8088 	beq.w	800fe86 <__kernel_cos+0x136>
 800fd76:	4632      	mov	r2, r6
 800fd78:	463b      	mov	r3, r7
 800fd7a:	4630      	mov	r0, r6
 800fd7c:	4639      	mov	r1, r7
 800fd7e:	f7f0 fc43 	bl	8000608 <__aeabi_dmul>
 800fd82:	4b51      	ldr	r3, [pc, #324]	; (800fec8 <__kernel_cos+0x178>)
 800fd84:	2200      	movs	r2, #0
 800fd86:	4604      	mov	r4, r0
 800fd88:	460d      	mov	r5, r1
 800fd8a:	f7f0 fc3d 	bl	8000608 <__aeabi_dmul>
 800fd8e:	a340      	add	r3, pc, #256	; (adr r3, 800fe90 <__kernel_cos+0x140>)
 800fd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd94:	4682      	mov	sl, r0
 800fd96:	468b      	mov	fp, r1
 800fd98:	4620      	mov	r0, r4
 800fd9a:	4629      	mov	r1, r5
 800fd9c:	f7f0 fc34 	bl	8000608 <__aeabi_dmul>
 800fda0:	a33d      	add	r3, pc, #244	; (adr r3, 800fe98 <__kernel_cos+0x148>)
 800fda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda6:	f7f0 fa79 	bl	800029c <__adddf3>
 800fdaa:	4622      	mov	r2, r4
 800fdac:	462b      	mov	r3, r5
 800fdae:	f7f0 fc2b 	bl	8000608 <__aeabi_dmul>
 800fdb2:	a33b      	add	r3, pc, #236	; (adr r3, 800fea0 <__kernel_cos+0x150>)
 800fdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb8:	f7f0 fa6e 	bl	8000298 <__aeabi_dsub>
 800fdbc:	4622      	mov	r2, r4
 800fdbe:	462b      	mov	r3, r5
 800fdc0:	f7f0 fc22 	bl	8000608 <__aeabi_dmul>
 800fdc4:	a338      	add	r3, pc, #224	; (adr r3, 800fea8 <__kernel_cos+0x158>)
 800fdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdca:	f7f0 fa67 	bl	800029c <__adddf3>
 800fdce:	4622      	mov	r2, r4
 800fdd0:	462b      	mov	r3, r5
 800fdd2:	f7f0 fc19 	bl	8000608 <__aeabi_dmul>
 800fdd6:	a336      	add	r3, pc, #216	; (adr r3, 800feb0 <__kernel_cos+0x160>)
 800fdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fddc:	f7f0 fa5c 	bl	8000298 <__aeabi_dsub>
 800fde0:	4622      	mov	r2, r4
 800fde2:	462b      	mov	r3, r5
 800fde4:	f7f0 fc10 	bl	8000608 <__aeabi_dmul>
 800fde8:	a333      	add	r3, pc, #204	; (adr r3, 800feb8 <__kernel_cos+0x168>)
 800fdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdee:	f7f0 fa55 	bl	800029c <__adddf3>
 800fdf2:	4622      	mov	r2, r4
 800fdf4:	462b      	mov	r3, r5
 800fdf6:	f7f0 fc07 	bl	8000608 <__aeabi_dmul>
 800fdfa:	4622      	mov	r2, r4
 800fdfc:	462b      	mov	r3, r5
 800fdfe:	f7f0 fc03 	bl	8000608 <__aeabi_dmul>
 800fe02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe06:	4604      	mov	r4, r0
 800fe08:	460d      	mov	r5, r1
 800fe0a:	4630      	mov	r0, r6
 800fe0c:	4639      	mov	r1, r7
 800fe0e:	f7f0 fbfb 	bl	8000608 <__aeabi_dmul>
 800fe12:	460b      	mov	r3, r1
 800fe14:	4602      	mov	r2, r0
 800fe16:	4629      	mov	r1, r5
 800fe18:	4620      	mov	r0, r4
 800fe1a:	f7f0 fa3d 	bl	8000298 <__aeabi_dsub>
 800fe1e:	4b2b      	ldr	r3, [pc, #172]	; (800fecc <__kernel_cos+0x17c>)
 800fe20:	4598      	cmp	r8, r3
 800fe22:	4606      	mov	r6, r0
 800fe24:	460f      	mov	r7, r1
 800fe26:	dc10      	bgt.n	800fe4a <__kernel_cos+0xfa>
 800fe28:	4602      	mov	r2, r0
 800fe2a:	460b      	mov	r3, r1
 800fe2c:	4650      	mov	r0, sl
 800fe2e:	4659      	mov	r1, fp
 800fe30:	f7f0 fa32 	bl	8000298 <__aeabi_dsub>
 800fe34:	460b      	mov	r3, r1
 800fe36:	4926      	ldr	r1, [pc, #152]	; (800fed0 <__kernel_cos+0x180>)
 800fe38:	4602      	mov	r2, r0
 800fe3a:	2000      	movs	r0, #0
 800fe3c:	f7f0 fa2c 	bl	8000298 <__aeabi_dsub>
 800fe40:	ec41 0b10 	vmov	d0, r0, r1
 800fe44:	b003      	add	sp, #12
 800fe46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe4a:	4b22      	ldr	r3, [pc, #136]	; (800fed4 <__kernel_cos+0x184>)
 800fe4c:	4920      	ldr	r1, [pc, #128]	; (800fed0 <__kernel_cos+0x180>)
 800fe4e:	4598      	cmp	r8, r3
 800fe50:	bfcc      	ite	gt
 800fe52:	4d21      	ldrgt	r5, [pc, #132]	; (800fed8 <__kernel_cos+0x188>)
 800fe54:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800fe58:	2400      	movs	r4, #0
 800fe5a:	4622      	mov	r2, r4
 800fe5c:	462b      	mov	r3, r5
 800fe5e:	2000      	movs	r0, #0
 800fe60:	f7f0 fa1a 	bl	8000298 <__aeabi_dsub>
 800fe64:	4622      	mov	r2, r4
 800fe66:	4680      	mov	r8, r0
 800fe68:	4689      	mov	r9, r1
 800fe6a:	462b      	mov	r3, r5
 800fe6c:	4650      	mov	r0, sl
 800fe6e:	4659      	mov	r1, fp
 800fe70:	f7f0 fa12 	bl	8000298 <__aeabi_dsub>
 800fe74:	4632      	mov	r2, r6
 800fe76:	463b      	mov	r3, r7
 800fe78:	f7f0 fa0e 	bl	8000298 <__aeabi_dsub>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	460b      	mov	r3, r1
 800fe80:	4640      	mov	r0, r8
 800fe82:	4649      	mov	r1, r9
 800fe84:	e7da      	b.n	800fe3c <__kernel_cos+0xec>
 800fe86:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800fec0 <__kernel_cos+0x170>
 800fe8a:	e7db      	b.n	800fe44 <__kernel_cos+0xf4>
 800fe8c:	f3af 8000 	nop.w
 800fe90:	be8838d4 	.word	0xbe8838d4
 800fe94:	bda8fae9 	.word	0xbda8fae9
 800fe98:	bdb4b1c4 	.word	0xbdb4b1c4
 800fe9c:	3e21ee9e 	.word	0x3e21ee9e
 800fea0:	809c52ad 	.word	0x809c52ad
 800fea4:	3e927e4f 	.word	0x3e927e4f
 800fea8:	19cb1590 	.word	0x19cb1590
 800feac:	3efa01a0 	.word	0x3efa01a0
 800feb0:	16c15177 	.word	0x16c15177
 800feb4:	3f56c16c 	.word	0x3f56c16c
 800feb8:	5555554c 	.word	0x5555554c
 800febc:	3fa55555 	.word	0x3fa55555
 800fec0:	00000000 	.word	0x00000000
 800fec4:	3ff00000 	.word	0x3ff00000
 800fec8:	3fe00000 	.word	0x3fe00000
 800fecc:	3fd33332 	.word	0x3fd33332
 800fed0:	3ff00000 	.word	0x3ff00000
 800fed4:	3fe90000 	.word	0x3fe90000
 800fed8:	3fd20000 	.word	0x3fd20000
 800fedc:	00000000 	.word	0x00000000

0800fee0 <__kernel_rem_pio2>:
 800fee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fee4:	ed2d 8b02 	vpush	{d8}
 800fee8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800feec:	f112 0f14 	cmn.w	r2, #20
 800fef0:	9308      	str	r3, [sp, #32]
 800fef2:	9101      	str	r1, [sp, #4]
 800fef4:	4bc4      	ldr	r3, [pc, #784]	; (8010208 <__kernel_rem_pio2+0x328>)
 800fef6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800fef8:	900b      	str	r0, [sp, #44]	; 0x2c
 800fefa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fefe:	9302      	str	r3, [sp, #8]
 800ff00:	9b08      	ldr	r3, [sp, #32]
 800ff02:	f103 33ff 	add.w	r3, r3, #4294967295
 800ff06:	bfa8      	it	ge
 800ff08:	1ed4      	subge	r4, r2, #3
 800ff0a:	9306      	str	r3, [sp, #24]
 800ff0c:	bfb2      	itee	lt
 800ff0e:	2400      	movlt	r4, #0
 800ff10:	2318      	movge	r3, #24
 800ff12:	fb94 f4f3 	sdivge	r4, r4, r3
 800ff16:	f06f 0317 	mvn.w	r3, #23
 800ff1a:	fb04 3303 	mla	r3, r4, r3, r3
 800ff1e:	eb03 0a02 	add.w	sl, r3, r2
 800ff22:	9b02      	ldr	r3, [sp, #8]
 800ff24:	9a06      	ldr	r2, [sp, #24]
 800ff26:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80101f8 <__kernel_rem_pio2+0x318>
 800ff2a:	eb03 0802 	add.w	r8, r3, r2
 800ff2e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ff30:	1aa7      	subs	r7, r4, r2
 800ff32:	ae22      	add	r6, sp, #136	; 0x88
 800ff34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ff38:	2500      	movs	r5, #0
 800ff3a:	4545      	cmp	r5, r8
 800ff3c:	dd13      	ble.n	800ff66 <__kernel_rem_pio2+0x86>
 800ff3e:	9b08      	ldr	r3, [sp, #32]
 800ff40:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80101f8 <__kernel_rem_pio2+0x318>
 800ff44:	aa22      	add	r2, sp, #136	; 0x88
 800ff46:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ff4a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ff4e:	f04f 0800 	mov.w	r8, #0
 800ff52:	9b02      	ldr	r3, [sp, #8]
 800ff54:	4598      	cmp	r8, r3
 800ff56:	dc2f      	bgt.n	800ffb8 <__kernel_rem_pio2+0xd8>
 800ff58:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ff5c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ff60:	462f      	mov	r7, r5
 800ff62:	2600      	movs	r6, #0
 800ff64:	e01b      	b.n	800ff9e <__kernel_rem_pio2+0xbe>
 800ff66:	42ef      	cmn	r7, r5
 800ff68:	d407      	bmi.n	800ff7a <__kernel_rem_pio2+0x9a>
 800ff6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ff6e:	f7f0 fae1 	bl	8000534 <__aeabi_i2d>
 800ff72:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ff76:	3501      	adds	r5, #1
 800ff78:	e7df      	b.n	800ff3a <__kernel_rem_pio2+0x5a>
 800ff7a:	ec51 0b18 	vmov	r0, r1, d8
 800ff7e:	e7f8      	b.n	800ff72 <__kernel_rem_pio2+0x92>
 800ff80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff84:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ff88:	f7f0 fb3e 	bl	8000608 <__aeabi_dmul>
 800ff8c:	4602      	mov	r2, r0
 800ff8e:	460b      	mov	r3, r1
 800ff90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff94:	f7f0 f982 	bl	800029c <__adddf3>
 800ff98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ff9c:	3601      	adds	r6, #1
 800ff9e:	9b06      	ldr	r3, [sp, #24]
 800ffa0:	429e      	cmp	r6, r3
 800ffa2:	f1a7 0708 	sub.w	r7, r7, #8
 800ffa6:	ddeb      	ble.n	800ff80 <__kernel_rem_pio2+0xa0>
 800ffa8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ffac:	f108 0801 	add.w	r8, r8, #1
 800ffb0:	ecab 7b02 	vstmia	fp!, {d7}
 800ffb4:	3508      	adds	r5, #8
 800ffb6:	e7cc      	b.n	800ff52 <__kernel_rem_pio2+0x72>
 800ffb8:	9b02      	ldr	r3, [sp, #8]
 800ffba:	aa0e      	add	r2, sp, #56	; 0x38
 800ffbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ffc0:	930d      	str	r3, [sp, #52]	; 0x34
 800ffc2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ffc4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ffc8:	9c02      	ldr	r4, [sp, #8]
 800ffca:	930c      	str	r3, [sp, #48]	; 0x30
 800ffcc:	00e3      	lsls	r3, r4, #3
 800ffce:	930a      	str	r3, [sp, #40]	; 0x28
 800ffd0:	ab9a      	add	r3, sp, #616	; 0x268
 800ffd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ffd6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ffda:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ffde:	ab72      	add	r3, sp, #456	; 0x1c8
 800ffe0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ffe4:	46c3      	mov	fp, r8
 800ffe6:	46a1      	mov	r9, r4
 800ffe8:	f1b9 0f00 	cmp.w	r9, #0
 800ffec:	f1a5 0508 	sub.w	r5, r5, #8
 800fff0:	dc77      	bgt.n	80100e2 <__kernel_rem_pio2+0x202>
 800fff2:	ec47 6b10 	vmov	d0, r6, r7
 800fff6:	4650      	mov	r0, sl
 800fff8:	f000 fe0e 	bl	8010c18 <scalbn>
 800fffc:	ec57 6b10 	vmov	r6, r7, d0
 8010000:	2200      	movs	r2, #0
 8010002:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010006:	ee10 0a10 	vmov	r0, s0
 801000a:	4639      	mov	r1, r7
 801000c:	f7f0 fafc 	bl	8000608 <__aeabi_dmul>
 8010010:	ec41 0b10 	vmov	d0, r0, r1
 8010014:	f000 fd80 	bl	8010b18 <floor>
 8010018:	4b7c      	ldr	r3, [pc, #496]	; (801020c <__kernel_rem_pio2+0x32c>)
 801001a:	ec51 0b10 	vmov	r0, r1, d0
 801001e:	2200      	movs	r2, #0
 8010020:	f7f0 faf2 	bl	8000608 <__aeabi_dmul>
 8010024:	4602      	mov	r2, r0
 8010026:	460b      	mov	r3, r1
 8010028:	4630      	mov	r0, r6
 801002a:	4639      	mov	r1, r7
 801002c:	f7f0 f934 	bl	8000298 <__aeabi_dsub>
 8010030:	460f      	mov	r7, r1
 8010032:	4606      	mov	r6, r0
 8010034:	f7f0 fd98 	bl	8000b68 <__aeabi_d2iz>
 8010038:	9004      	str	r0, [sp, #16]
 801003a:	f7f0 fa7b 	bl	8000534 <__aeabi_i2d>
 801003e:	4602      	mov	r2, r0
 8010040:	460b      	mov	r3, r1
 8010042:	4630      	mov	r0, r6
 8010044:	4639      	mov	r1, r7
 8010046:	f7f0 f927 	bl	8000298 <__aeabi_dsub>
 801004a:	f1ba 0f00 	cmp.w	sl, #0
 801004e:	4606      	mov	r6, r0
 8010050:	460f      	mov	r7, r1
 8010052:	dd6d      	ble.n	8010130 <__kernel_rem_pio2+0x250>
 8010054:	1e62      	subs	r2, r4, #1
 8010056:	ab0e      	add	r3, sp, #56	; 0x38
 8010058:	9d04      	ldr	r5, [sp, #16]
 801005a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801005e:	f1ca 0118 	rsb	r1, sl, #24
 8010062:	fa40 f301 	asr.w	r3, r0, r1
 8010066:	441d      	add	r5, r3
 8010068:	408b      	lsls	r3, r1
 801006a:	1ac0      	subs	r0, r0, r3
 801006c:	ab0e      	add	r3, sp, #56	; 0x38
 801006e:	9504      	str	r5, [sp, #16]
 8010070:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010074:	f1ca 0317 	rsb	r3, sl, #23
 8010078:	fa40 fb03 	asr.w	fp, r0, r3
 801007c:	f1bb 0f00 	cmp.w	fp, #0
 8010080:	dd65      	ble.n	801014e <__kernel_rem_pio2+0x26e>
 8010082:	9b04      	ldr	r3, [sp, #16]
 8010084:	2200      	movs	r2, #0
 8010086:	3301      	adds	r3, #1
 8010088:	9304      	str	r3, [sp, #16]
 801008a:	4615      	mov	r5, r2
 801008c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010090:	4294      	cmp	r4, r2
 8010092:	f300 809c 	bgt.w	80101ce <__kernel_rem_pio2+0x2ee>
 8010096:	f1ba 0f00 	cmp.w	sl, #0
 801009a:	dd07      	ble.n	80100ac <__kernel_rem_pio2+0x1cc>
 801009c:	f1ba 0f01 	cmp.w	sl, #1
 80100a0:	f000 80c0 	beq.w	8010224 <__kernel_rem_pio2+0x344>
 80100a4:	f1ba 0f02 	cmp.w	sl, #2
 80100a8:	f000 80c6 	beq.w	8010238 <__kernel_rem_pio2+0x358>
 80100ac:	f1bb 0f02 	cmp.w	fp, #2
 80100b0:	d14d      	bne.n	801014e <__kernel_rem_pio2+0x26e>
 80100b2:	4632      	mov	r2, r6
 80100b4:	463b      	mov	r3, r7
 80100b6:	4956      	ldr	r1, [pc, #344]	; (8010210 <__kernel_rem_pio2+0x330>)
 80100b8:	2000      	movs	r0, #0
 80100ba:	f7f0 f8ed 	bl	8000298 <__aeabi_dsub>
 80100be:	4606      	mov	r6, r0
 80100c0:	460f      	mov	r7, r1
 80100c2:	2d00      	cmp	r5, #0
 80100c4:	d043      	beq.n	801014e <__kernel_rem_pio2+0x26e>
 80100c6:	4650      	mov	r0, sl
 80100c8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8010200 <__kernel_rem_pio2+0x320>
 80100cc:	f000 fda4 	bl	8010c18 <scalbn>
 80100d0:	4630      	mov	r0, r6
 80100d2:	4639      	mov	r1, r7
 80100d4:	ec53 2b10 	vmov	r2, r3, d0
 80100d8:	f7f0 f8de 	bl	8000298 <__aeabi_dsub>
 80100dc:	4606      	mov	r6, r0
 80100de:	460f      	mov	r7, r1
 80100e0:	e035      	b.n	801014e <__kernel_rem_pio2+0x26e>
 80100e2:	4b4c      	ldr	r3, [pc, #304]	; (8010214 <__kernel_rem_pio2+0x334>)
 80100e4:	2200      	movs	r2, #0
 80100e6:	4630      	mov	r0, r6
 80100e8:	4639      	mov	r1, r7
 80100ea:	f7f0 fa8d 	bl	8000608 <__aeabi_dmul>
 80100ee:	f7f0 fd3b 	bl	8000b68 <__aeabi_d2iz>
 80100f2:	f7f0 fa1f 	bl	8000534 <__aeabi_i2d>
 80100f6:	4602      	mov	r2, r0
 80100f8:	460b      	mov	r3, r1
 80100fa:	ec43 2b18 	vmov	d8, r2, r3
 80100fe:	4b46      	ldr	r3, [pc, #280]	; (8010218 <__kernel_rem_pio2+0x338>)
 8010100:	2200      	movs	r2, #0
 8010102:	f7f0 fa81 	bl	8000608 <__aeabi_dmul>
 8010106:	4602      	mov	r2, r0
 8010108:	460b      	mov	r3, r1
 801010a:	4630      	mov	r0, r6
 801010c:	4639      	mov	r1, r7
 801010e:	f7f0 f8c3 	bl	8000298 <__aeabi_dsub>
 8010112:	f7f0 fd29 	bl	8000b68 <__aeabi_d2iz>
 8010116:	e9d5 2300 	ldrd	r2, r3, [r5]
 801011a:	f84b 0b04 	str.w	r0, [fp], #4
 801011e:	ec51 0b18 	vmov	r0, r1, d8
 8010122:	f7f0 f8bb 	bl	800029c <__adddf3>
 8010126:	f109 39ff 	add.w	r9, r9, #4294967295
 801012a:	4606      	mov	r6, r0
 801012c:	460f      	mov	r7, r1
 801012e:	e75b      	b.n	800ffe8 <__kernel_rem_pio2+0x108>
 8010130:	d106      	bne.n	8010140 <__kernel_rem_pio2+0x260>
 8010132:	1e63      	subs	r3, r4, #1
 8010134:	aa0e      	add	r2, sp, #56	; 0x38
 8010136:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801013a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801013e:	e79d      	b.n	801007c <__kernel_rem_pio2+0x19c>
 8010140:	4b36      	ldr	r3, [pc, #216]	; (801021c <__kernel_rem_pio2+0x33c>)
 8010142:	2200      	movs	r2, #0
 8010144:	f7f0 fce6 	bl	8000b14 <__aeabi_dcmpge>
 8010148:	2800      	cmp	r0, #0
 801014a:	d13d      	bne.n	80101c8 <__kernel_rem_pio2+0x2e8>
 801014c:	4683      	mov	fp, r0
 801014e:	2200      	movs	r2, #0
 8010150:	2300      	movs	r3, #0
 8010152:	4630      	mov	r0, r6
 8010154:	4639      	mov	r1, r7
 8010156:	f7f0 fcbf 	bl	8000ad8 <__aeabi_dcmpeq>
 801015a:	2800      	cmp	r0, #0
 801015c:	f000 80c0 	beq.w	80102e0 <__kernel_rem_pio2+0x400>
 8010160:	1e65      	subs	r5, r4, #1
 8010162:	462b      	mov	r3, r5
 8010164:	2200      	movs	r2, #0
 8010166:	9902      	ldr	r1, [sp, #8]
 8010168:	428b      	cmp	r3, r1
 801016a:	da6c      	bge.n	8010246 <__kernel_rem_pio2+0x366>
 801016c:	2a00      	cmp	r2, #0
 801016e:	f000 8089 	beq.w	8010284 <__kernel_rem_pio2+0x3a4>
 8010172:	ab0e      	add	r3, sp, #56	; 0x38
 8010174:	f1aa 0a18 	sub.w	sl, sl, #24
 8010178:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801017c:	2b00      	cmp	r3, #0
 801017e:	f000 80ad 	beq.w	80102dc <__kernel_rem_pio2+0x3fc>
 8010182:	4650      	mov	r0, sl
 8010184:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8010200 <__kernel_rem_pio2+0x320>
 8010188:	f000 fd46 	bl	8010c18 <scalbn>
 801018c:	ab9a      	add	r3, sp, #616	; 0x268
 801018e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010192:	ec57 6b10 	vmov	r6, r7, d0
 8010196:	00ec      	lsls	r4, r5, #3
 8010198:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801019c:	46aa      	mov	sl, r5
 801019e:	f1ba 0f00 	cmp.w	sl, #0
 80101a2:	f280 80d6 	bge.w	8010352 <__kernel_rem_pio2+0x472>
 80101a6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80101f8 <__kernel_rem_pio2+0x318>
 80101aa:	462e      	mov	r6, r5
 80101ac:	2e00      	cmp	r6, #0
 80101ae:	f2c0 8104 	blt.w	80103ba <__kernel_rem_pio2+0x4da>
 80101b2:	ab72      	add	r3, sp, #456	; 0x1c8
 80101b4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80101b8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8010220 <__kernel_rem_pio2+0x340>
 80101bc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80101c0:	f04f 0800 	mov.w	r8, #0
 80101c4:	1baf      	subs	r7, r5, r6
 80101c6:	e0ea      	b.n	801039e <__kernel_rem_pio2+0x4be>
 80101c8:	f04f 0b02 	mov.w	fp, #2
 80101cc:	e759      	b.n	8010082 <__kernel_rem_pio2+0x1a2>
 80101ce:	f8d8 3000 	ldr.w	r3, [r8]
 80101d2:	b955      	cbnz	r5, 80101ea <__kernel_rem_pio2+0x30a>
 80101d4:	b123      	cbz	r3, 80101e0 <__kernel_rem_pio2+0x300>
 80101d6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80101da:	f8c8 3000 	str.w	r3, [r8]
 80101de:	2301      	movs	r3, #1
 80101e0:	3201      	adds	r2, #1
 80101e2:	f108 0804 	add.w	r8, r8, #4
 80101e6:	461d      	mov	r5, r3
 80101e8:	e752      	b.n	8010090 <__kernel_rem_pio2+0x1b0>
 80101ea:	1acb      	subs	r3, r1, r3
 80101ec:	f8c8 3000 	str.w	r3, [r8]
 80101f0:	462b      	mov	r3, r5
 80101f2:	e7f5      	b.n	80101e0 <__kernel_rem_pio2+0x300>
 80101f4:	f3af 8000 	nop.w
	...
 8010204:	3ff00000 	.word	0x3ff00000
 8010208:	08011438 	.word	0x08011438
 801020c:	40200000 	.word	0x40200000
 8010210:	3ff00000 	.word	0x3ff00000
 8010214:	3e700000 	.word	0x3e700000
 8010218:	41700000 	.word	0x41700000
 801021c:	3fe00000 	.word	0x3fe00000
 8010220:	080113f8 	.word	0x080113f8
 8010224:	1e62      	subs	r2, r4, #1
 8010226:	ab0e      	add	r3, sp, #56	; 0x38
 8010228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801022c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010230:	a90e      	add	r1, sp, #56	; 0x38
 8010232:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010236:	e739      	b.n	80100ac <__kernel_rem_pio2+0x1cc>
 8010238:	1e62      	subs	r2, r4, #1
 801023a:	ab0e      	add	r3, sp, #56	; 0x38
 801023c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010240:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010244:	e7f4      	b.n	8010230 <__kernel_rem_pio2+0x350>
 8010246:	a90e      	add	r1, sp, #56	; 0x38
 8010248:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801024c:	3b01      	subs	r3, #1
 801024e:	430a      	orrs	r2, r1
 8010250:	e789      	b.n	8010166 <__kernel_rem_pio2+0x286>
 8010252:	3301      	adds	r3, #1
 8010254:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010258:	2900      	cmp	r1, #0
 801025a:	d0fa      	beq.n	8010252 <__kernel_rem_pio2+0x372>
 801025c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801025e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8010262:	446a      	add	r2, sp
 8010264:	3a98      	subs	r2, #152	; 0x98
 8010266:	920a      	str	r2, [sp, #40]	; 0x28
 8010268:	9a08      	ldr	r2, [sp, #32]
 801026a:	18e3      	adds	r3, r4, r3
 801026c:	18a5      	adds	r5, r4, r2
 801026e:	aa22      	add	r2, sp, #136	; 0x88
 8010270:	f104 0801 	add.w	r8, r4, #1
 8010274:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8010278:	9304      	str	r3, [sp, #16]
 801027a:	9b04      	ldr	r3, [sp, #16]
 801027c:	4543      	cmp	r3, r8
 801027e:	da04      	bge.n	801028a <__kernel_rem_pio2+0x3aa>
 8010280:	461c      	mov	r4, r3
 8010282:	e6a3      	b.n	800ffcc <__kernel_rem_pio2+0xec>
 8010284:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010286:	2301      	movs	r3, #1
 8010288:	e7e4      	b.n	8010254 <__kernel_rem_pio2+0x374>
 801028a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801028c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010290:	f7f0 f950 	bl	8000534 <__aeabi_i2d>
 8010294:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801029a:	46ab      	mov	fp, r5
 801029c:	461c      	mov	r4, r3
 801029e:	f04f 0900 	mov.w	r9, #0
 80102a2:	2600      	movs	r6, #0
 80102a4:	2700      	movs	r7, #0
 80102a6:	9b06      	ldr	r3, [sp, #24]
 80102a8:	4599      	cmp	r9, r3
 80102aa:	dd06      	ble.n	80102ba <__kernel_rem_pio2+0x3da>
 80102ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102ae:	e8e3 6702 	strd	r6, r7, [r3], #8
 80102b2:	f108 0801 	add.w	r8, r8, #1
 80102b6:	930a      	str	r3, [sp, #40]	; 0x28
 80102b8:	e7df      	b.n	801027a <__kernel_rem_pio2+0x39a>
 80102ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80102be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80102c2:	f7f0 f9a1 	bl	8000608 <__aeabi_dmul>
 80102c6:	4602      	mov	r2, r0
 80102c8:	460b      	mov	r3, r1
 80102ca:	4630      	mov	r0, r6
 80102cc:	4639      	mov	r1, r7
 80102ce:	f7ef ffe5 	bl	800029c <__adddf3>
 80102d2:	f109 0901 	add.w	r9, r9, #1
 80102d6:	4606      	mov	r6, r0
 80102d8:	460f      	mov	r7, r1
 80102da:	e7e4      	b.n	80102a6 <__kernel_rem_pio2+0x3c6>
 80102dc:	3d01      	subs	r5, #1
 80102de:	e748      	b.n	8010172 <__kernel_rem_pio2+0x292>
 80102e0:	ec47 6b10 	vmov	d0, r6, r7
 80102e4:	f1ca 0000 	rsb	r0, sl, #0
 80102e8:	f000 fc96 	bl	8010c18 <scalbn>
 80102ec:	ec57 6b10 	vmov	r6, r7, d0
 80102f0:	4ba0      	ldr	r3, [pc, #640]	; (8010574 <__kernel_rem_pio2+0x694>)
 80102f2:	ee10 0a10 	vmov	r0, s0
 80102f6:	2200      	movs	r2, #0
 80102f8:	4639      	mov	r1, r7
 80102fa:	f7f0 fc0b 	bl	8000b14 <__aeabi_dcmpge>
 80102fe:	b1f8      	cbz	r0, 8010340 <__kernel_rem_pio2+0x460>
 8010300:	4b9d      	ldr	r3, [pc, #628]	; (8010578 <__kernel_rem_pio2+0x698>)
 8010302:	2200      	movs	r2, #0
 8010304:	4630      	mov	r0, r6
 8010306:	4639      	mov	r1, r7
 8010308:	f7f0 f97e 	bl	8000608 <__aeabi_dmul>
 801030c:	f7f0 fc2c 	bl	8000b68 <__aeabi_d2iz>
 8010310:	4680      	mov	r8, r0
 8010312:	f7f0 f90f 	bl	8000534 <__aeabi_i2d>
 8010316:	4b97      	ldr	r3, [pc, #604]	; (8010574 <__kernel_rem_pio2+0x694>)
 8010318:	2200      	movs	r2, #0
 801031a:	f7f0 f975 	bl	8000608 <__aeabi_dmul>
 801031e:	460b      	mov	r3, r1
 8010320:	4602      	mov	r2, r0
 8010322:	4639      	mov	r1, r7
 8010324:	4630      	mov	r0, r6
 8010326:	f7ef ffb7 	bl	8000298 <__aeabi_dsub>
 801032a:	f7f0 fc1d 	bl	8000b68 <__aeabi_d2iz>
 801032e:	1c65      	adds	r5, r4, #1
 8010330:	ab0e      	add	r3, sp, #56	; 0x38
 8010332:	f10a 0a18 	add.w	sl, sl, #24
 8010336:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801033a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801033e:	e720      	b.n	8010182 <__kernel_rem_pio2+0x2a2>
 8010340:	4630      	mov	r0, r6
 8010342:	4639      	mov	r1, r7
 8010344:	f7f0 fc10 	bl	8000b68 <__aeabi_d2iz>
 8010348:	ab0e      	add	r3, sp, #56	; 0x38
 801034a:	4625      	mov	r5, r4
 801034c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010350:	e717      	b.n	8010182 <__kernel_rem_pio2+0x2a2>
 8010352:	ab0e      	add	r3, sp, #56	; 0x38
 8010354:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8010358:	f7f0 f8ec 	bl	8000534 <__aeabi_i2d>
 801035c:	4632      	mov	r2, r6
 801035e:	463b      	mov	r3, r7
 8010360:	f7f0 f952 	bl	8000608 <__aeabi_dmul>
 8010364:	4b84      	ldr	r3, [pc, #528]	; (8010578 <__kernel_rem_pio2+0x698>)
 8010366:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801036a:	2200      	movs	r2, #0
 801036c:	4630      	mov	r0, r6
 801036e:	4639      	mov	r1, r7
 8010370:	f7f0 f94a 	bl	8000608 <__aeabi_dmul>
 8010374:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010378:	4606      	mov	r6, r0
 801037a:	460f      	mov	r7, r1
 801037c:	e70f      	b.n	801019e <__kernel_rem_pio2+0x2be>
 801037e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8010382:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8010386:	f7f0 f93f 	bl	8000608 <__aeabi_dmul>
 801038a:	4602      	mov	r2, r0
 801038c:	460b      	mov	r3, r1
 801038e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010392:	f7ef ff83 	bl	800029c <__adddf3>
 8010396:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801039a:	f108 0801 	add.w	r8, r8, #1
 801039e:	9b02      	ldr	r3, [sp, #8]
 80103a0:	4598      	cmp	r8, r3
 80103a2:	dc01      	bgt.n	80103a8 <__kernel_rem_pio2+0x4c8>
 80103a4:	45b8      	cmp	r8, r7
 80103a6:	ddea      	ble.n	801037e <__kernel_rem_pio2+0x49e>
 80103a8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80103ac:	ab4a      	add	r3, sp, #296	; 0x128
 80103ae:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80103b2:	ed87 7b00 	vstr	d7, [r7]
 80103b6:	3e01      	subs	r6, #1
 80103b8:	e6f8      	b.n	80101ac <__kernel_rem_pio2+0x2cc>
 80103ba:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80103bc:	2b02      	cmp	r3, #2
 80103be:	dc0b      	bgt.n	80103d8 <__kernel_rem_pio2+0x4f8>
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	dc35      	bgt.n	8010430 <__kernel_rem_pio2+0x550>
 80103c4:	d059      	beq.n	801047a <__kernel_rem_pio2+0x59a>
 80103c6:	9b04      	ldr	r3, [sp, #16]
 80103c8:	f003 0007 	and.w	r0, r3, #7
 80103cc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80103d0:	ecbd 8b02 	vpop	{d8}
 80103d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103d8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80103da:	2b03      	cmp	r3, #3
 80103dc:	d1f3      	bne.n	80103c6 <__kernel_rem_pio2+0x4e6>
 80103de:	ab4a      	add	r3, sp, #296	; 0x128
 80103e0:	4423      	add	r3, r4
 80103e2:	9306      	str	r3, [sp, #24]
 80103e4:	461c      	mov	r4, r3
 80103e6:	469a      	mov	sl, r3
 80103e8:	9502      	str	r5, [sp, #8]
 80103ea:	9b02      	ldr	r3, [sp, #8]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	f1aa 0a08 	sub.w	sl, sl, #8
 80103f2:	dc6b      	bgt.n	80104cc <__kernel_rem_pio2+0x5ec>
 80103f4:	46aa      	mov	sl, r5
 80103f6:	f1ba 0f01 	cmp.w	sl, #1
 80103fa:	f1a4 0408 	sub.w	r4, r4, #8
 80103fe:	f300 8085 	bgt.w	801050c <__kernel_rem_pio2+0x62c>
 8010402:	9c06      	ldr	r4, [sp, #24]
 8010404:	2000      	movs	r0, #0
 8010406:	3408      	adds	r4, #8
 8010408:	2100      	movs	r1, #0
 801040a:	2d01      	cmp	r5, #1
 801040c:	f300 809d 	bgt.w	801054a <__kernel_rem_pio2+0x66a>
 8010410:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010414:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8010418:	f1bb 0f00 	cmp.w	fp, #0
 801041c:	f040 809b 	bne.w	8010556 <__kernel_rem_pio2+0x676>
 8010420:	9b01      	ldr	r3, [sp, #4]
 8010422:	e9c3 5600 	strd	r5, r6, [r3]
 8010426:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801042a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801042e:	e7ca      	b.n	80103c6 <__kernel_rem_pio2+0x4e6>
 8010430:	3408      	adds	r4, #8
 8010432:	ab4a      	add	r3, sp, #296	; 0x128
 8010434:	441c      	add	r4, r3
 8010436:	462e      	mov	r6, r5
 8010438:	2000      	movs	r0, #0
 801043a:	2100      	movs	r1, #0
 801043c:	2e00      	cmp	r6, #0
 801043e:	da36      	bge.n	80104ae <__kernel_rem_pio2+0x5ce>
 8010440:	f1bb 0f00 	cmp.w	fp, #0
 8010444:	d039      	beq.n	80104ba <__kernel_rem_pio2+0x5da>
 8010446:	4602      	mov	r2, r0
 8010448:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801044c:	9c01      	ldr	r4, [sp, #4]
 801044e:	e9c4 2300 	strd	r2, r3, [r4]
 8010452:	4602      	mov	r2, r0
 8010454:	460b      	mov	r3, r1
 8010456:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801045a:	f7ef ff1d 	bl	8000298 <__aeabi_dsub>
 801045e:	ae4c      	add	r6, sp, #304	; 0x130
 8010460:	2401      	movs	r4, #1
 8010462:	42a5      	cmp	r5, r4
 8010464:	da2c      	bge.n	80104c0 <__kernel_rem_pio2+0x5e0>
 8010466:	f1bb 0f00 	cmp.w	fp, #0
 801046a:	d002      	beq.n	8010472 <__kernel_rem_pio2+0x592>
 801046c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010470:	4619      	mov	r1, r3
 8010472:	9b01      	ldr	r3, [sp, #4]
 8010474:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010478:	e7a5      	b.n	80103c6 <__kernel_rem_pio2+0x4e6>
 801047a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801047e:	eb0d 0403 	add.w	r4, sp, r3
 8010482:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010486:	2000      	movs	r0, #0
 8010488:	2100      	movs	r1, #0
 801048a:	2d00      	cmp	r5, #0
 801048c:	da09      	bge.n	80104a2 <__kernel_rem_pio2+0x5c2>
 801048e:	f1bb 0f00 	cmp.w	fp, #0
 8010492:	d002      	beq.n	801049a <__kernel_rem_pio2+0x5ba>
 8010494:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010498:	4619      	mov	r1, r3
 801049a:	9b01      	ldr	r3, [sp, #4]
 801049c:	e9c3 0100 	strd	r0, r1, [r3]
 80104a0:	e791      	b.n	80103c6 <__kernel_rem_pio2+0x4e6>
 80104a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80104a6:	f7ef fef9 	bl	800029c <__adddf3>
 80104aa:	3d01      	subs	r5, #1
 80104ac:	e7ed      	b.n	801048a <__kernel_rem_pio2+0x5aa>
 80104ae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80104b2:	f7ef fef3 	bl	800029c <__adddf3>
 80104b6:	3e01      	subs	r6, #1
 80104b8:	e7c0      	b.n	801043c <__kernel_rem_pio2+0x55c>
 80104ba:	4602      	mov	r2, r0
 80104bc:	460b      	mov	r3, r1
 80104be:	e7c5      	b.n	801044c <__kernel_rem_pio2+0x56c>
 80104c0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80104c4:	f7ef feea 	bl	800029c <__adddf3>
 80104c8:	3401      	adds	r4, #1
 80104ca:	e7ca      	b.n	8010462 <__kernel_rem_pio2+0x582>
 80104cc:	e9da 8900 	ldrd	r8, r9, [sl]
 80104d0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80104d4:	9b02      	ldr	r3, [sp, #8]
 80104d6:	3b01      	subs	r3, #1
 80104d8:	9302      	str	r3, [sp, #8]
 80104da:	4632      	mov	r2, r6
 80104dc:	463b      	mov	r3, r7
 80104de:	4640      	mov	r0, r8
 80104e0:	4649      	mov	r1, r9
 80104e2:	f7ef fedb 	bl	800029c <__adddf3>
 80104e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80104ea:	4602      	mov	r2, r0
 80104ec:	460b      	mov	r3, r1
 80104ee:	4640      	mov	r0, r8
 80104f0:	4649      	mov	r1, r9
 80104f2:	f7ef fed1 	bl	8000298 <__aeabi_dsub>
 80104f6:	4632      	mov	r2, r6
 80104f8:	463b      	mov	r3, r7
 80104fa:	f7ef fecf 	bl	800029c <__adddf3>
 80104fe:	ed9d 7b08 	vldr	d7, [sp, #32]
 8010502:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010506:	ed8a 7b00 	vstr	d7, [sl]
 801050a:	e76e      	b.n	80103ea <__kernel_rem_pio2+0x50a>
 801050c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010510:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8010514:	4640      	mov	r0, r8
 8010516:	4632      	mov	r2, r6
 8010518:	463b      	mov	r3, r7
 801051a:	4649      	mov	r1, r9
 801051c:	f7ef febe 	bl	800029c <__adddf3>
 8010520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010524:	4602      	mov	r2, r0
 8010526:	460b      	mov	r3, r1
 8010528:	4640      	mov	r0, r8
 801052a:	4649      	mov	r1, r9
 801052c:	f7ef feb4 	bl	8000298 <__aeabi_dsub>
 8010530:	4632      	mov	r2, r6
 8010532:	463b      	mov	r3, r7
 8010534:	f7ef feb2 	bl	800029c <__adddf3>
 8010538:	ed9d 7b02 	vldr	d7, [sp, #8]
 801053c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010540:	ed84 7b00 	vstr	d7, [r4]
 8010544:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010548:	e755      	b.n	80103f6 <__kernel_rem_pio2+0x516>
 801054a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801054e:	f7ef fea5 	bl	800029c <__adddf3>
 8010552:	3d01      	subs	r5, #1
 8010554:	e759      	b.n	801040a <__kernel_rem_pio2+0x52a>
 8010556:	9b01      	ldr	r3, [sp, #4]
 8010558:	9a01      	ldr	r2, [sp, #4]
 801055a:	601d      	str	r5, [r3, #0]
 801055c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8010560:	605c      	str	r4, [r3, #4]
 8010562:	609f      	str	r7, [r3, #8]
 8010564:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8010568:	60d3      	str	r3, [r2, #12]
 801056a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801056e:	6110      	str	r0, [r2, #16]
 8010570:	6153      	str	r3, [r2, #20]
 8010572:	e728      	b.n	80103c6 <__kernel_rem_pio2+0x4e6>
 8010574:	41700000 	.word	0x41700000
 8010578:	3e700000 	.word	0x3e700000
 801057c:	00000000 	.word	0x00000000

08010580 <__kernel_sin>:
 8010580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010584:	ed2d 8b04 	vpush	{d8-d9}
 8010588:	eeb0 8a41 	vmov.f32	s16, s2
 801058c:	eef0 8a61 	vmov.f32	s17, s3
 8010590:	ec55 4b10 	vmov	r4, r5, d0
 8010594:	b083      	sub	sp, #12
 8010596:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801059a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801059e:	9001      	str	r0, [sp, #4]
 80105a0:	da06      	bge.n	80105b0 <__kernel_sin+0x30>
 80105a2:	ee10 0a10 	vmov	r0, s0
 80105a6:	4629      	mov	r1, r5
 80105a8:	f7f0 fade 	bl	8000b68 <__aeabi_d2iz>
 80105ac:	2800      	cmp	r0, #0
 80105ae:	d051      	beq.n	8010654 <__kernel_sin+0xd4>
 80105b0:	4622      	mov	r2, r4
 80105b2:	462b      	mov	r3, r5
 80105b4:	4620      	mov	r0, r4
 80105b6:	4629      	mov	r1, r5
 80105b8:	f7f0 f826 	bl	8000608 <__aeabi_dmul>
 80105bc:	4682      	mov	sl, r0
 80105be:	468b      	mov	fp, r1
 80105c0:	4602      	mov	r2, r0
 80105c2:	460b      	mov	r3, r1
 80105c4:	4620      	mov	r0, r4
 80105c6:	4629      	mov	r1, r5
 80105c8:	f7f0 f81e 	bl	8000608 <__aeabi_dmul>
 80105cc:	a341      	add	r3, pc, #260	; (adr r3, 80106d4 <__kernel_sin+0x154>)
 80105ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d2:	4680      	mov	r8, r0
 80105d4:	4689      	mov	r9, r1
 80105d6:	4650      	mov	r0, sl
 80105d8:	4659      	mov	r1, fp
 80105da:	f7f0 f815 	bl	8000608 <__aeabi_dmul>
 80105de:	a33f      	add	r3, pc, #252	; (adr r3, 80106dc <__kernel_sin+0x15c>)
 80105e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e4:	f7ef fe58 	bl	8000298 <__aeabi_dsub>
 80105e8:	4652      	mov	r2, sl
 80105ea:	465b      	mov	r3, fp
 80105ec:	f7f0 f80c 	bl	8000608 <__aeabi_dmul>
 80105f0:	a33c      	add	r3, pc, #240	; (adr r3, 80106e4 <__kernel_sin+0x164>)
 80105f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f6:	f7ef fe51 	bl	800029c <__adddf3>
 80105fa:	4652      	mov	r2, sl
 80105fc:	465b      	mov	r3, fp
 80105fe:	f7f0 f803 	bl	8000608 <__aeabi_dmul>
 8010602:	a33a      	add	r3, pc, #232	; (adr r3, 80106ec <__kernel_sin+0x16c>)
 8010604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010608:	f7ef fe46 	bl	8000298 <__aeabi_dsub>
 801060c:	4652      	mov	r2, sl
 801060e:	465b      	mov	r3, fp
 8010610:	f7ef fffa 	bl	8000608 <__aeabi_dmul>
 8010614:	a337      	add	r3, pc, #220	; (adr r3, 80106f4 <__kernel_sin+0x174>)
 8010616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061a:	f7ef fe3f 	bl	800029c <__adddf3>
 801061e:	9b01      	ldr	r3, [sp, #4]
 8010620:	4606      	mov	r6, r0
 8010622:	460f      	mov	r7, r1
 8010624:	b9eb      	cbnz	r3, 8010662 <__kernel_sin+0xe2>
 8010626:	4602      	mov	r2, r0
 8010628:	460b      	mov	r3, r1
 801062a:	4650      	mov	r0, sl
 801062c:	4659      	mov	r1, fp
 801062e:	f7ef ffeb 	bl	8000608 <__aeabi_dmul>
 8010632:	a325      	add	r3, pc, #148	; (adr r3, 80106c8 <__kernel_sin+0x148>)
 8010634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010638:	f7ef fe2e 	bl	8000298 <__aeabi_dsub>
 801063c:	4642      	mov	r2, r8
 801063e:	464b      	mov	r3, r9
 8010640:	f7ef ffe2 	bl	8000608 <__aeabi_dmul>
 8010644:	4602      	mov	r2, r0
 8010646:	460b      	mov	r3, r1
 8010648:	4620      	mov	r0, r4
 801064a:	4629      	mov	r1, r5
 801064c:	f7ef fe26 	bl	800029c <__adddf3>
 8010650:	4604      	mov	r4, r0
 8010652:	460d      	mov	r5, r1
 8010654:	ec45 4b10 	vmov	d0, r4, r5
 8010658:	b003      	add	sp, #12
 801065a:	ecbd 8b04 	vpop	{d8-d9}
 801065e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010662:	4b1b      	ldr	r3, [pc, #108]	; (80106d0 <__kernel_sin+0x150>)
 8010664:	ec51 0b18 	vmov	r0, r1, d8
 8010668:	2200      	movs	r2, #0
 801066a:	f7ef ffcd 	bl	8000608 <__aeabi_dmul>
 801066e:	4632      	mov	r2, r6
 8010670:	ec41 0b19 	vmov	d9, r0, r1
 8010674:	463b      	mov	r3, r7
 8010676:	4640      	mov	r0, r8
 8010678:	4649      	mov	r1, r9
 801067a:	f7ef ffc5 	bl	8000608 <__aeabi_dmul>
 801067e:	4602      	mov	r2, r0
 8010680:	460b      	mov	r3, r1
 8010682:	ec51 0b19 	vmov	r0, r1, d9
 8010686:	f7ef fe07 	bl	8000298 <__aeabi_dsub>
 801068a:	4652      	mov	r2, sl
 801068c:	465b      	mov	r3, fp
 801068e:	f7ef ffbb 	bl	8000608 <__aeabi_dmul>
 8010692:	ec53 2b18 	vmov	r2, r3, d8
 8010696:	f7ef fdff 	bl	8000298 <__aeabi_dsub>
 801069a:	a30b      	add	r3, pc, #44	; (adr r3, 80106c8 <__kernel_sin+0x148>)
 801069c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a0:	4606      	mov	r6, r0
 80106a2:	460f      	mov	r7, r1
 80106a4:	4640      	mov	r0, r8
 80106a6:	4649      	mov	r1, r9
 80106a8:	f7ef ffae 	bl	8000608 <__aeabi_dmul>
 80106ac:	4602      	mov	r2, r0
 80106ae:	460b      	mov	r3, r1
 80106b0:	4630      	mov	r0, r6
 80106b2:	4639      	mov	r1, r7
 80106b4:	f7ef fdf2 	bl	800029c <__adddf3>
 80106b8:	4602      	mov	r2, r0
 80106ba:	460b      	mov	r3, r1
 80106bc:	4620      	mov	r0, r4
 80106be:	4629      	mov	r1, r5
 80106c0:	f7ef fdea 	bl	8000298 <__aeabi_dsub>
 80106c4:	e7c4      	b.n	8010650 <__kernel_sin+0xd0>
 80106c6:	bf00      	nop
 80106c8:	55555549 	.word	0x55555549
 80106cc:	3fc55555 	.word	0x3fc55555
 80106d0:	3fe00000 	.word	0x3fe00000
 80106d4:	5acfd57c 	.word	0x5acfd57c
 80106d8:	3de5d93a 	.word	0x3de5d93a
 80106dc:	8a2b9ceb 	.word	0x8a2b9ceb
 80106e0:	3e5ae5e6 	.word	0x3e5ae5e6
 80106e4:	57b1fe7d 	.word	0x57b1fe7d
 80106e8:	3ec71de3 	.word	0x3ec71de3
 80106ec:	19c161d5 	.word	0x19c161d5
 80106f0:	3f2a01a0 	.word	0x3f2a01a0
 80106f4:	1110f8a6 	.word	0x1110f8a6
 80106f8:	3f811111 	.word	0x3f811111
 80106fc:	00000000 	.word	0x00000000

08010700 <__kernel_tan>:
 8010700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010704:	ed2d 8b06 	vpush	{d8-d10}
 8010708:	ec5b ab10 	vmov	sl, fp, d0
 801070c:	4be0      	ldr	r3, [pc, #896]	; (8010a90 <__kernel_tan+0x390>)
 801070e:	b083      	sub	sp, #12
 8010710:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8010714:	429f      	cmp	r7, r3
 8010716:	ec59 8b11 	vmov	r8, r9, d1
 801071a:	4606      	mov	r6, r0
 801071c:	f8cd b000 	str.w	fp, [sp]
 8010720:	dc61      	bgt.n	80107e6 <__kernel_tan+0xe6>
 8010722:	ee10 0a10 	vmov	r0, s0
 8010726:	4659      	mov	r1, fp
 8010728:	f7f0 fa1e 	bl	8000b68 <__aeabi_d2iz>
 801072c:	4605      	mov	r5, r0
 801072e:	2800      	cmp	r0, #0
 8010730:	f040 8083 	bne.w	801083a <__kernel_tan+0x13a>
 8010734:	1c73      	adds	r3, r6, #1
 8010736:	4652      	mov	r2, sl
 8010738:	4313      	orrs	r3, r2
 801073a:	433b      	orrs	r3, r7
 801073c:	d112      	bne.n	8010764 <__kernel_tan+0x64>
 801073e:	ec4b ab10 	vmov	d0, sl, fp
 8010742:	f7fe fee1 	bl	800f508 <fabs>
 8010746:	49d3      	ldr	r1, [pc, #844]	; (8010a94 <__kernel_tan+0x394>)
 8010748:	ec53 2b10 	vmov	r2, r3, d0
 801074c:	2000      	movs	r0, #0
 801074e:	f7f0 f885 	bl	800085c <__aeabi_ddiv>
 8010752:	4682      	mov	sl, r0
 8010754:	468b      	mov	fp, r1
 8010756:	ec4b ab10 	vmov	d0, sl, fp
 801075a:	b003      	add	sp, #12
 801075c:	ecbd 8b06 	vpop	{d8-d10}
 8010760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010764:	2e01      	cmp	r6, #1
 8010766:	d0f6      	beq.n	8010756 <__kernel_tan+0x56>
 8010768:	4642      	mov	r2, r8
 801076a:	464b      	mov	r3, r9
 801076c:	4650      	mov	r0, sl
 801076e:	4659      	mov	r1, fp
 8010770:	f7ef fd94 	bl	800029c <__adddf3>
 8010774:	4602      	mov	r2, r0
 8010776:	460b      	mov	r3, r1
 8010778:	460f      	mov	r7, r1
 801077a:	2000      	movs	r0, #0
 801077c:	49c6      	ldr	r1, [pc, #792]	; (8010a98 <__kernel_tan+0x398>)
 801077e:	f7f0 f86d 	bl	800085c <__aeabi_ddiv>
 8010782:	e9cd 0100 	strd	r0, r1, [sp]
 8010786:	e9dd 2300 	ldrd	r2, r3, [sp]
 801078a:	462e      	mov	r6, r5
 801078c:	4652      	mov	r2, sl
 801078e:	462c      	mov	r4, r5
 8010790:	4630      	mov	r0, r6
 8010792:	461d      	mov	r5, r3
 8010794:	4639      	mov	r1, r7
 8010796:	465b      	mov	r3, fp
 8010798:	f7ef fd7e 	bl	8000298 <__aeabi_dsub>
 801079c:	4602      	mov	r2, r0
 801079e:	460b      	mov	r3, r1
 80107a0:	4640      	mov	r0, r8
 80107a2:	4649      	mov	r1, r9
 80107a4:	f7ef fd78 	bl	8000298 <__aeabi_dsub>
 80107a8:	4632      	mov	r2, r6
 80107aa:	462b      	mov	r3, r5
 80107ac:	f7ef ff2c 	bl	8000608 <__aeabi_dmul>
 80107b0:	4632      	mov	r2, r6
 80107b2:	4680      	mov	r8, r0
 80107b4:	4689      	mov	r9, r1
 80107b6:	462b      	mov	r3, r5
 80107b8:	4630      	mov	r0, r6
 80107ba:	4639      	mov	r1, r7
 80107bc:	f7ef ff24 	bl	8000608 <__aeabi_dmul>
 80107c0:	4bb4      	ldr	r3, [pc, #720]	; (8010a94 <__kernel_tan+0x394>)
 80107c2:	2200      	movs	r2, #0
 80107c4:	f7ef fd6a 	bl	800029c <__adddf3>
 80107c8:	4602      	mov	r2, r0
 80107ca:	460b      	mov	r3, r1
 80107cc:	4640      	mov	r0, r8
 80107ce:	4649      	mov	r1, r9
 80107d0:	f7ef fd64 	bl	800029c <__adddf3>
 80107d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107d8:	f7ef ff16 	bl	8000608 <__aeabi_dmul>
 80107dc:	4622      	mov	r2, r4
 80107de:	462b      	mov	r3, r5
 80107e0:	f7ef fd5c 	bl	800029c <__adddf3>
 80107e4:	e7b5      	b.n	8010752 <__kernel_tan+0x52>
 80107e6:	4bad      	ldr	r3, [pc, #692]	; (8010a9c <__kernel_tan+0x39c>)
 80107e8:	429f      	cmp	r7, r3
 80107ea:	dd26      	ble.n	801083a <__kernel_tan+0x13a>
 80107ec:	9b00      	ldr	r3, [sp, #0]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	da09      	bge.n	8010806 <__kernel_tan+0x106>
 80107f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80107f6:	469b      	mov	fp, r3
 80107f8:	ee10 aa10 	vmov	sl, s0
 80107fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010800:	ee11 8a10 	vmov	r8, s2
 8010804:	4699      	mov	r9, r3
 8010806:	4652      	mov	r2, sl
 8010808:	465b      	mov	r3, fp
 801080a:	a183      	add	r1, pc, #524	; (adr r1, 8010a18 <__kernel_tan+0x318>)
 801080c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010810:	f7ef fd42 	bl	8000298 <__aeabi_dsub>
 8010814:	4642      	mov	r2, r8
 8010816:	464b      	mov	r3, r9
 8010818:	4604      	mov	r4, r0
 801081a:	460d      	mov	r5, r1
 801081c:	a180      	add	r1, pc, #512	; (adr r1, 8010a20 <__kernel_tan+0x320>)
 801081e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010822:	f7ef fd39 	bl	8000298 <__aeabi_dsub>
 8010826:	4622      	mov	r2, r4
 8010828:	462b      	mov	r3, r5
 801082a:	f7ef fd37 	bl	800029c <__adddf3>
 801082e:	f04f 0800 	mov.w	r8, #0
 8010832:	4682      	mov	sl, r0
 8010834:	468b      	mov	fp, r1
 8010836:	f04f 0900 	mov.w	r9, #0
 801083a:	4652      	mov	r2, sl
 801083c:	465b      	mov	r3, fp
 801083e:	4650      	mov	r0, sl
 8010840:	4659      	mov	r1, fp
 8010842:	f7ef fee1 	bl	8000608 <__aeabi_dmul>
 8010846:	4602      	mov	r2, r0
 8010848:	460b      	mov	r3, r1
 801084a:	ec43 2b18 	vmov	d8, r2, r3
 801084e:	f7ef fedb 	bl	8000608 <__aeabi_dmul>
 8010852:	ec53 2b18 	vmov	r2, r3, d8
 8010856:	4604      	mov	r4, r0
 8010858:	460d      	mov	r5, r1
 801085a:	4650      	mov	r0, sl
 801085c:	4659      	mov	r1, fp
 801085e:	f7ef fed3 	bl	8000608 <__aeabi_dmul>
 8010862:	a371      	add	r3, pc, #452	; (adr r3, 8010a28 <__kernel_tan+0x328>)
 8010864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010868:	ec41 0b19 	vmov	d9, r0, r1
 801086c:	4620      	mov	r0, r4
 801086e:	4629      	mov	r1, r5
 8010870:	f7ef feca 	bl	8000608 <__aeabi_dmul>
 8010874:	a36e      	add	r3, pc, #440	; (adr r3, 8010a30 <__kernel_tan+0x330>)
 8010876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087a:	f7ef fd0f 	bl	800029c <__adddf3>
 801087e:	4622      	mov	r2, r4
 8010880:	462b      	mov	r3, r5
 8010882:	f7ef fec1 	bl	8000608 <__aeabi_dmul>
 8010886:	a36c      	add	r3, pc, #432	; (adr r3, 8010a38 <__kernel_tan+0x338>)
 8010888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088c:	f7ef fd06 	bl	800029c <__adddf3>
 8010890:	4622      	mov	r2, r4
 8010892:	462b      	mov	r3, r5
 8010894:	f7ef feb8 	bl	8000608 <__aeabi_dmul>
 8010898:	a369      	add	r3, pc, #420	; (adr r3, 8010a40 <__kernel_tan+0x340>)
 801089a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089e:	f7ef fcfd 	bl	800029c <__adddf3>
 80108a2:	4622      	mov	r2, r4
 80108a4:	462b      	mov	r3, r5
 80108a6:	f7ef feaf 	bl	8000608 <__aeabi_dmul>
 80108aa:	a367      	add	r3, pc, #412	; (adr r3, 8010a48 <__kernel_tan+0x348>)
 80108ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b0:	f7ef fcf4 	bl	800029c <__adddf3>
 80108b4:	4622      	mov	r2, r4
 80108b6:	462b      	mov	r3, r5
 80108b8:	f7ef fea6 	bl	8000608 <__aeabi_dmul>
 80108bc:	a364      	add	r3, pc, #400	; (adr r3, 8010a50 <__kernel_tan+0x350>)
 80108be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c2:	f7ef fceb 	bl	800029c <__adddf3>
 80108c6:	ec53 2b18 	vmov	r2, r3, d8
 80108ca:	f7ef fe9d 	bl	8000608 <__aeabi_dmul>
 80108ce:	a362      	add	r3, pc, #392	; (adr r3, 8010a58 <__kernel_tan+0x358>)
 80108d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d4:	ec41 0b1a 	vmov	d10, r0, r1
 80108d8:	4620      	mov	r0, r4
 80108da:	4629      	mov	r1, r5
 80108dc:	f7ef fe94 	bl	8000608 <__aeabi_dmul>
 80108e0:	a35f      	add	r3, pc, #380	; (adr r3, 8010a60 <__kernel_tan+0x360>)
 80108e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e6:	f7ef fcd9 	bl	800029c <__adddf3>
 80108ea:	4622      	mov	r2, r4
 80108ec:	462b      	mov	r3, r5
 80108ee:	f7ef fe8b 	bl	8000608 <__aeabi_dmul>
 80108f2:	a35d      	add	r3, pc, #372	; (adr r3, 8010a68 <__kernel_tan+0x368>)
 80108f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f8:	f7ef fcd0 	bl	800029c <__adddf3>
 80108fc:	4622      	mov	r2, r4
 80108fe:	462b      	mov	r3, r5
 8010900:	f7ef fe82 	bl	8000608 <__aeabi_dmul>
 8010904:	a35a      	add	r3, pc, #360	; (adr r3, 8010a70 <__kernel_tan+0x370>)
 8010906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090a:	f7ef fcc7 	bl	800029c <__adddf3>
 801090e:	4622      	mov	r2, r4
 8010910:	462b      	mov	r3, r5
 8010912:	f7ef fe79 	bl	8000608 <__aeabi_dmul>
 8010916:	a358      	add	r3, pc, #352	; (adr r3, 8010a78 <__kernel_tan+0x378>)
 8010918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091c:	f7ef fcbe 	bl	800029c <__adddf3>
 8010920:	4622      	mov	r2, r4
 8010922:	462b      	mov	r3, r5
 8010924:	f7ef fe70 	bl	8000608 <__aeabi_dmul>
 8010928:	a355      	add	r3, pc, #340	; (adr r3, 8010a80 <__kernel_tan+0x380>)
 801092a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092e:	f7ef fcb5 	bl	800029c <__adddf3>
 8010932:	4602      	mov	r2, r0
 8010934:	460b      	mov	r3, r1
 8010936:	ec51 0b1a 	vmov	r0, r1, d10
 801093a:	f7ef fcaf 	bl	800029c <__adddf3>
 801093e:	ec53 2b19 	vmov	r2, r3, d9
 8010942:	f7ef fe61 	bl	8000608 <__aeabi_dmul>
 8010946:	4642      	mov	r2, r8
 8010948:	464b      	mov	r3, r9
 801094a:	f7ef fca7 	bl	800029c <__adddf3>
 801094e:	ec53 2b18 	vmov	r2, r3, d8
 8010952:	f7ef fe59 	bl	8000608 <__aeabi_dmul>
 8010956:	4642      	mov	r2, r8
 8010958:	464b      	mov	r3, r9
 801095a:	f7ef fc9f 	bl	800029c <__adddf3>
 801095e:	a34a      	add	r3, pc, #296	; (adr r3, 8010a88 <__kernel_tan+0x388>)
 8010960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010964:	4604      	mov	r4, r0
 8010966:	460d      	mov	r5, r1
 8010968:	ec51 0b19 	vmov	r0, r1, d9
 801096c:	f7ef fe4c 	bl	8000608 <__aeabi_dmul>
 8010970:	4622      	mov	r2, r4
 8010972:	462b      	mov	r3, r5
 8010974:	f7ef fc92 	bl	800029c <__adddf3>
 8010978:	460b      	mov	r3, r1
 801097a:	ec41 0b18 	vmov	d8, r0, r1
 801097e:	4602      	mov	r2, r0
 8010980:	4659      	mov	r1, fp
 8010982:	4650      	mov	r0, sl
 8010984:	f7ef fc8a 	bl	800029c <__adddf3>
 8010988:	4b44      	ldr	r3, [pc, #272]	; (8010a9c <__kernel_tan+0x39c>)
 801098a:	429f      	cmp	r7, r3
 801098c:	4604      	mov	r4, r0
 801098e:	460d      	mov	r5, r1
 8010990:	f340 8086 	ble.w	8010aa0 <__kernel_tan+0x3a0>
 8010994:	4630      	mov	r0, r6
 8010996:	f7ef fdcd 	bl	8000534 <__aeabi_i2d>
 801099a:	4622      	mov	r2, r4
 801099c:	4680      	mov	r8, r0
 801099e:	4689      	mov	r9, r1
 80109a0:	462b      	mov	r3, r5
 80109a2:	4620      	mov	r0, r4
 80109a4:	4629      	mov	r1, r5
 80109a6:	f7ef fe2f 	bl	8000608 <__aeabi_dmul>
 80109aa:	4642      	mov	r2, r8
 80109ac:	4606      	mov	r6, r0
 80109ae:	460f      	mov	r7, r1
 80109b0:	464b      	mov	r3, r9
 80109b2:	4620      	mov	r0, r4
 80109b4:	4629      	mov	r1, r5
 80109b6:	f7ef fc71 	bl	800029c <__adddf3>
 80109ba:	4602      	mov	r2, r0
 80109bc:	460b      	mov	r3, r1
 80109be:	4630      	mov	r0, r6
 80109c0:	4639      	mov	r1, r7
 80109c2:	f7ef ff4b 	bl	800085c <__aeabi_ddiv>
 80109c6:	ec53 2b18 	vmov	r2, r3, d8
 80109ca:	f7ef fc65 	bl	8000298 <__aeabi_dsub>
 80109ce:	4602      	mov	r2, r0
 80109d0:	460b      	mov	r3, r1
 80109d2:	4650      	mov	r0, sl
 80109d4:	4659      	mov	r1, fp
 80109d6:	f7ef fc5f 	bl	8000298 <__aeabi_dsub>
 80109da:	4602      	mov	r2, r0
 80109dc:	460b      	mov	r3, r1
 80109de:	f7ef fc5d 	bl	800029c <__adddf3>
 80109e2:	4602      	mov	r2, r0
 80109e4:	460b      	mov	r3, r1
 80109e6:	4640      	mov	r0, r8
 80109e8:	4649      	mov	r1, r9
 80109ea:	f7ef fc55 	bl	8000298 <__aeabi_dsub>
 80109ee:	9b00      	ldr	r3, [sp, #0]
 80109f0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80109f4:	f00a 0a02 	and.w	sl, sl, #2
 80109f8:	4604      	mov	r4, r0
 80109fa:	f1ca 0001 	rsb	r0, sl, #1
 80109fe:	460d      	mov	r5, r1
 8010a00:	f7ef fd98 	bl	8000534 <__aeabi_i2d>
 8010a04:	4602      	mov	r2, r0
 8010a06:	460b      	mov	r3, r1
 8010a08:	4620      	mov	r0, r4
 8010a0a:	4629      	mov	r1, r5
 8010a0c:	f7ef fdfc 	bl	8000608 <__aeabi_dmul>
 8010a10:	e69f      	b.n	8010752 <__kernel_tan+0x52>
 8010a12:	bf00      	nop
 8010a14:	f3af 8000 	nop.w
 8010a18:	54442d18 	.word	0x54442d18
 8010a1c:	3fe921fb 	.word	0x3fe921fb
 8010a20:	33145c07 	.word	0x33145c07
 8010a24:	3c81a626 	.word	0x3c81a626
 8010a28:	74bf7ad4 	.word	0x74bf7ad4
 8010a2c:	3efb2a70 	.word	0x3efb2a70
 8010a30:	32f0a7e9 	.word	0x32f0a7e9
 8010a34:	3f12b80f 	.word	0x3f12b80f
 8010a38:	1a8d1068 	.word	0x1a8d1068
 8010a3c:	3f3026f7 	.word	0x3f3026f7
 8010a40:	fee08315 	.word	0xfee08315
 8010a44:	3f57dbc8 	.word	0x3f57dbc8
 8010a48:	e96e8493 	.word	0xe96e8493
 8010a4c:	3f8226e3 	.word	0x3f8226e3
 8010a50:	1bb341fe 	.word	0x1bb341fe
 8010a54:	3faba1ba 	.word	0x3faba1ba
 8010a58:	db605373 	.word	0xdb605373
 8010a5c:	bef375cb 	.word	0xbef375cb
 8010a60:	a03792a6 	.word	0xa03792a6
 8010a64:	3f147e88 	.word	0x3f147e88
 8010a68:	f2f26501 	.word	0xf2f26501
 8010a6c:	3f4344d8 	.word	0x3f4344d8
 8010a70:	c9560328 	.word	0xc9560328
 8010a74:	3f6d6d22 	.word	0x3f6d6d22
 8010a78:	8406d637 	.word	0x8406d637
 8010a7c:	3f9664f4 	.word	0x3f9664f4
 8010a80:	1110fe7a 	.word	0x1110fe7a
 8010a84:	3fc11111 	.word	0x3fc11111
 8010a88:	55555563 	.word	0x55555563
 8010a8c:	3fd55555 	.word	0x3fd55555
 8010a90:	3e2fffff 	.word	0x3e2fffff
 8010a94:	3ff00000 	.word	0x3ff00000
 8010a98:	bff00000 	.word	0xbff00000
 8010a9c:	3fe59427 	.word	0x3fe59427
 8010aa0:	2e01      	cmp	r6, #1
 8010aa2:	d02f      	beq.n	8010b04 <__kernel_tan+0x404>
 8010aa4:	460f      	mov	r7, r1
 8010aa6:	4602      	mov	r2, r0
 8010aa8:	460b      	mov	r3, r1
 8010aaa:	4689      	mov	r9, r1
 8010aac:	2000      	movs	r0, #0
 8010aae:	4917      	ldr	r1, [pc, #92]	; (8010b0c <__kernel_tan+0x40c>)
 8010ab0:	f7ef fed4 	bl	800085c <__aeabi_ddiv>
 8010ab4:	2600      	movs	r6, #0
 8010ab6:	e9cd 0100 	strd	r0, r1, [sp]
 8010aba:	4652      	mov	r2, sl
 8010abc:	465b      	mov	r3, fp
 8010abe:	4630      	mov	r0, r6
 8010ac0:	4639      	mov	r1, r7
 8010ac2:	f7ef fbe9 	bl	8000298 <__aeabi_dsub>
 8010ac6:	e9dd 4500 	ldrd	r4, r5, [sp]
 8010aca:	4602      	mov	r2, r0
 8010acc:	460b      	mov	r3, r1
 8010ace:	ec51 0b18 	vmov	r0, r1, d8
 8010ad2:	f7ef fbe1 	bl	8000298 <__aeabi_dsub>
 8010ad6:	4632      	mov	r2, r6
 8010ad8:	462b      	mov	r3, r5
 8010ada:	f7ef fd95 	bl	8000608 <__aeabi_dmul>
 8010ade:	46b0      	mov	r8, r6
 8010ae0:	460f      	mov	r7, r1
 8010ae2:	4642      	mov	r2, r8
 8010ae4:	462b      	mov	r3, r5
 8010ae6:	4634      	mov	r4, r6
 8010ae8:	4649      	mov	r1, r9
 8010aea:	4606      	mov	r6, r0
 8010aec:	4640      	mov	r0, r8
 8010aee:	f7ef fd8b 	bl	8000608 <__aeabi_dmul>
 8010af2:	4b07      	ldr	r3, [pc, #28]	; (8010b10 <__kernel_tan+0x410>)
 8010af4:	2200      	movs	r2, #0
 8010af6:	f7ef fbd1 	bl	800029c <__adddf3>
 8010afa:	4602      	mov	r2, r0
 8010afc:	460b      	mov	r3, r1
 8010afe:	4630      	mov	r0, r6
 8010b00:	4639      	mov	r1, r7
 8010b02:	e665      	b.n	80107d0 <__kernel_tan+0xd0>
 8010b04:	4682      	mov	sl, r0
 8010b06:	468b      	mov	fp, r1
 8010b08:	e625      	b.n	8010756 <__kernel_tan+0x56>
 8010b0a:	bf00      	nop
 8010b0c:	bff00000 	.word	0xbff00000
 8010b10:	3ff00000 	.word	0x3ff00000
 8010b14:	00000000 	.word	0x00000000

08010b18 <floor>:
 8010b18:	ec51 0b10 	vmov	r0, r1, d0
 8010b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010b24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010b28:	2e13      	cmp	r6, #19
 8010b2a:	ee10 5a10 	vmov	r5, s0
 8010b2e:	ee10 8a10 	vmov	r8, s0
 8010b32:	460c      	mov	r4, r1
 8010b34:	dc32      	bgt.n	8010b9c <floor+0x84>
 8010b36:	2e00      	cmp	r6, #0
 8010b38:	da14      	bge.n	8010b64 <floor+0x4c>
 8010b3a:	a333      	add	r3, pc, #204	; (adr r3, 8010c08 <floor+0xf0>)
 8010b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b40:	f7ef fbac 	bl	800029c <__adddf3>
 8010b44:	2200      	movs	r2, #0
 8010b46:	2300      	movs	r3, #0
 8010b48:	f7ef ffee 	bl	8000b28 <__aeabi_dcmpgt>
 8010b4c:	b138      	cbz	r0, 8010b5e <floor+0x46>
 8010b4e:	2c00      	cmp	r4, #0
 8010b50:	da57      	bge.n	8010c02 <floor+0xea>
 8010b52:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010b56:	431d      	orrs	r5, r3
 8010b58:	d001      	beq.n	8010b5e <floor+0x46>
 8010b5a:	4c2d      	ldr	r4, [pc, #180]	; (8010c10 <floor+0xf8>)
 8010b5c:	2500      	movs	r5, #0
 8010b5e:	4621      	mov	r1, r4
 8010b60:	4628      	mov	r0, r5
 8010b62:	e025      	b.n	8010bb0 <floor+0x98>
 8010b64:	4f2b      	ldr	r7, [pc, #172]	; (8010c14 <floor+0xfc>)
 8010b66:	4137      	asrs	r7, r6
 8010b68:	ea01 0307 	and.w	r3, r1, r7
 8010b6c:	4303      	orrs	r3, r0
 8010b6e:	d01f      	beq.n	8010bb0 <floor+0x98>
 8010b70:	a325      	add	r3, pc, #148	; (adr r3, 8010c08 <floor+0xf0>)
 8010b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b76:	f7ef fb91 	bl	800029c <__adddf3>
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	f7ef ffd3 	bl	8000b28 <__aeabi_dcmpgt>
 8010b82:	2800      	cmp	r0, #0
 8010b84:	d0eb      	beq.n	8010b5e <floor+0x46>
 8010b86:	2c00      	cmp	r4, #0
 8010b88:	bfbe      	ittt	lt
 8010b8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010b8e:	fa43 f606 	asrlt.w	r6, r3, r6
 8010b92:	19a4      	addlt	r4, r4, r6
 8010b94:	ea24 0407 	bic.w	r4, r4, r7
 8010b98:	2500      	movs	r5, #0
 8010b9a:	e7e0      	b.n	8010b5e <floor+0x46>
 8010b9c:	2e33      	cmp	r6, #51	; 0x33
 8010b9e:	dd0b      	ble.n	8010bb8 <floor+0xa0>
 8010ba0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010ba4:	d104      	bne.n	8010bb0 <floor+0x98>
 8010ba6:	ee10 2a10 	vmov	r2, s0
 8010baa:	460b      	mov	r3, r1
 8010bac:	f7ef fb76 	bl	800029c <__adddf3>
 8010bb0:	ec41 0b10 	vmov	d0, r0, r1
 8010bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bb8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8010bc0:	fa23 f707 	lsr.w	r7, r3, r7
 8010bc4:	4207      	tst	r7, r0
 8010bc6:	d0f3      	beq.n	8010bb0 <floor+0x98>
 8010bc8:	a30f      	add	r3, pc, #60	; (adr r3, 8010c08 <floor+0xf0>)
 8010bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bce:	f7ef fb65 	bl	800029c <__adddf3>
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	f7ef ffa7 	bl	8000b28 <__aeabi_dcmpgt>
 8010bda:	2800      	cmp	r0, #0
 8010bdc:	d0bf      	beq.n	8010b5e <floor+0x46>
 8010bde:	2c00      	cmp	r4, #0
 8010be0:	da02      	bge.n	8010be8 <floor+0xd0>
 8010be2:	2e14      	cmp	r6, #20
 8010be4:	d103      	bne.n	8010bee <floor+0xd6>
 8010be6:	3401      	adds	r4, #1
 8010be8:	ea25 0507 	bic.w	r5, r5, r7
 8010bec:	e7b7      	b.n	8010b5e <floor+0x46>
 8010bee:	2301      	movs	r3, #1
 8010bf0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010bf4:	fa03 f606 	lsl.w	r6, r3, r6
 8010bf8:	4435      	add	r5, r6
 8010bfa:	4545      	cmp	r5, r8
 8010bfc:	bf38      	it	cc
 8010bfe:	18e4      	addcc	r4, r4, r3
 8010c00:	e7f2      	b.n	8010be8 <floor+0xd0>
 8010c02:	2500      	movs	r5, #0
 8010c04:	462c      	mov	r4, r5
 8010c06:	e7aa      	b.n	8010b5e <floor+0x46>
 8010c08:	8800759c 	.word	0x8800759c
 8010c0c:	7e37e43c 	.word	0x7e37e43c
 8010c10:	bff00000 	.word	0xbff00000
 8010c14:	000fffff 	.word	0x000fffff

08010c18 <scalbn>:
 8010c18:	b570      	push	{r4, r5, r6, lr}
 8010c1a:	ec55 4b10 	vmov	r4, r5, d0
 8010c1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010c22:	4606      	mov	r6, r0
 8010c24:	462b      	mov	r3, r5
 8010c26:	b99a      	cbnz	r2, 8010c50 <scalbn+0x38>
 8010c28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010c2c:	4323      	orrs	r3, r4
 8010c2e:	d036      	beq.n	8010c9e <scalbn+0x86>
 8010c30:	4b39      	ldr	r3, [pc, #228]	; (8010d18 <scalbn+0x100>)
 8010c32:	4629      	mov	r1, r5
 8010c34:	ee10 0a10 	vmov	r0, s0
 8010c38:	2200      	movs	r2, #0
 8010c3a:	f7ef fce5 	bl	8000608 <__aeabi_dmul>
 8010c3e:	4b37      	ldr	r3, [pc, #220]	; (8010d1c <scalbn+0x104>)
 8010c40:	429e      	cmp	r6, r3
 8010c42:	4604      	mov	r4, r0
 8010c44:	460d      	mov	r5, r1
 8010c46:	da10      	bge.n	8010c6a <scalbn+0x52>
 8010c48:	a32b      	add	r3, pc, #172	; (adr r3, 8010cf8 <scalbn+0xe0>)
 8010c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4e:	e03a      	b.n	8010cc6 <scalbn+0xae>
 8010c50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010c54:	428a      	cmp	r2, r1
 8010c56:	d10c      	bne.n	8010c72 <scalbn+0x5a>
 8010c58:	ee10 2a10 	vmov	r2, s0
 8010c5c:	4620      	mov	r0, r4
 8010c5e:	4629      	mov	r1, r5
 8010c60:	f7ef fb1c 	bl	800029c <__adddf3>
 8010c64:	4604      	mov	r4, r0
 8010c66:	460d      	mov	r5, r1
 8010c68:	e019      	b.n	8010c9e <scalbn+0x86>
 8010c6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010c6e:	460b      	mov	r3, r1
 8010c70:	3a36      	subs	r2, #54	; 0x36
 8010c72:	4432      	add	r2, r6
 8010c74:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010c78:	428a      	cmp	r2, r1
 8010c7a:	dd08      	ble.n	8010c8e <scalbn+0x76>
 8010c7c:	2d00      	cmp	r5, #0
 8010c7e:	a120      	add	r1, pc, #128	; (adr r1, 8010d00 <scalbn+0xe8>)
 8010c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c84:	da1c      	bge.n	8010cc0 <scalbn+0xa8>
 8010c86:	a120      	add	r1, pc, #128	; (adr r1, 8010d08 <scalbn+0xf0>)
 8010c88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c8c:	e018      	b.n	8010cc0 <scalbn+0xa8>
 8010c8e:	2a00      	cmp	r2, #0
 8010c90:	dd08      	ble.n	8010ca4 <scalbn+0x8c>
 8010c92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010c96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010c9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c9e:	ec45 4b10 	vmov	d0, r4, r5
 8010ca2:	bd70      	pop	{r4, r5, r6, pc}
 8010ca4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010ca8:	da19      	bge.n	8010cde <scalbn+0xc6>
 8010caa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010cae:	429e      	cmp	r6, r3
 8010cb0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010cb4:	dd0a      	ble.n	8010ccc <scalbn+0xb4>
 8010cb6:	a112      	add	r1, pc, #72	; (adr r1, 8010d00 <scalbn+0xe8>)
 8010cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d1e2      	bne.n	8010c86 <scalbn+0x6e>
 8010cc0:	a30f      	add	r3, pc, #60	; (adr r3, 8010d00 <scalbn+0xe8>)
 8010cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc6:	f7ef fc9f 	bl	8000608 <__aeabi_dmul>
 8010cca:	e7cb      	b.n	8010c64 <scalbn+0x4c>
 8010ccc:	a10a      	add	r1, pc, #40	; (adr r1, 8010cf8 <scalbn+0xe0>)
 8010cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d0b8      	beq.n	8010c48 <scalbn+0x30>
 8010cd6:	a10e      	add	r1, pc, #56	; (adr r1, 8010d10 <scalbn+0xf8>)
 8010cd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cdc:	e7b4      	b.n	8010c48 <scalbn+0x30>
 8010cde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010ce2:	3236      	adds	r2, #54	; 0x36
 8010ce4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010ce8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010cec:	4620      	mov	r0, r4
 8010cee:	4b0c      	ldr	r3, [pc, #48]	; (8010d20 <scalbn+0x108>)
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	e7e8      	b.n	8010cc6 <scalbn+0xae>
 8010cf4:	f3af 8000 	nop.w
 8010cf8:	c2f8f359 	.word	0xc2f8f359
 8010cfc:	01a56e1f 	.word	0x01a56e1f
 8010d00:	8800759c 	.word	0x8800759c
 8010d04:	7e37e43c 	.word	0x7e37e43c
 8010d08:	8800759c 	.word	0x8800759c
 8010d0c:	fe37e43c 	.word	0xfe37e43c
 8010d10:	c2f8f359 	.word	0xc2f8f359
 8010d14:	81a56e1f 	.word	0x81a56e1f
 8010d18:	43500000 	.word	0x43500000
 8010d1c:	ffff3cb0 	.word	0xffff3cb0
 8010d20:	3c900000 	.word	0x3c900000

08010d24 <_init>:
 8010d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d26:	bf00      	nop
 8010d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d2a:	bc08      	pop	{r3}
 8010d2c:	469e      	mov	lr, r3
 8010d2e:	4770      	bx	lr

08010d30 <_fini>:
 8010d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d32:	bf00      	nop
 8010d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d36:	bc08      	pop	{r3}
 8010d38:	469e      	mov	lr, r3
 8010d3a:	4770      	bx	lr
