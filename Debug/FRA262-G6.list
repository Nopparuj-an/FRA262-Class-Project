
FRA262-G6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009314  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  080094b0  080094b0  000194b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009700  08009700  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  08009700  08009700  00019700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009708  08009708  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009708  08009708  00019708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800970c  0800970c  0001970c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  08009710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae8  20000270  08009980  00020270  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d58  08009980  00020d58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145d5  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002536  00000000  00000000  00034875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00036db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  00037ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181a4  00000000  00000000  00038ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143ba  00000000  00000000  00051084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db2a  00000000  00000000  0006543e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102f68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e58  00000000  00000000  00102fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000270 	.word	0x20000270
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009494 	.word	0x08009494

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000274 	.word	0x20000274
 80001d4:	08009494 	.word	0x08009494

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <modbus_1t5_Timeout+0x1c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	751a      	strb	r2, [r3, #20]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	2000028c 	.word	0x2000028c

08000ec4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <modbus_3t5_Timeout+0x1c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	755a      	strb	r2, [r3, #21]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	2000028c 	.word	0x2000028c

08000ee4 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000efe:	1c59      	adds	r1, r3, #1
 8000f00:	b289      	uxth	r1, r1
 8000f02:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000f06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f0a:	d210      	bcs.n	8000f2e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68d8      	ldr	r0, [r3, #12]
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f1e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f22:	4413      	add	r3, r2
 8000f24:	3302      	adds	r3, #2
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f005 fdb9 	bl	8006aa0 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000028c 	.word	0x2000028c

08000f48 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f52:	4a24      	ldr	r2, [pc, #144]	; (8000fe4 <Modbus_init+0x9c>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <Modbus_init+0x9c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <Modbus_init+0x9c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <Modbus_init+0xa0>)
 8000f68:	2114      	movs	r1, #20
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f004 ff4a 	bl	8005e04 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <Modbus_init+0x9c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <Modbus_init+0xa4>)
 8000f78:	210e      	movs	r1, #14
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f004 ff42 	bl	8005e04 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <Modbus_init+0x9c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <Modbus_init+0xa8>)
 8000f88:	2103      	movs	r1, #3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f005 fce0 	bl	8006950 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <Modbus_init+0x9c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68d8      	ldr	r0, [r3, #12]
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <Modbus_init+0x9c>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <Modbus_init+0x9c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000fa2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	2201      	movs	r2, #1
 8000fac:	4619      	mov	r1, r3
 8000fae:	f005 fd77 	bl	8006aa0 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <Modbus_init+0x9c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d10c      	bne.n	8000fdc <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <Modbus_init+0x9c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f003 ffbb 	bl	8004f44 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <Modbus_init+0x9c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 f9fa 	bl	80053d0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000028c 	.word	0x2000028c
 8000fe8:	08000ea5 	.word	0x08000ea5
 8000fec:	08000ec5 	.word	0x08000ec5
 8000ff0:	08000ee5 	.word	0x08000ee5

08000ff4 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001000:	23ff      	movs	r3, #255	; 0xff
 8001002:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001004:	23ff      	movs	r3, #255	; 0xff
 8001006:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001008:	e013      	b.n	8001032 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	4053      	eors	r3, r2
 8001016:	b2db      	uxtb	r3, r3
 8001018:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <CRC16+0x64>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4413      	add	r3, r2
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	4053      	eors	r3, r2
 8001026:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001028:	4a0c      	ldr	r2, [pc, #48]	; (800105c <CRC16+0x68>)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001032:	883b      	ldrh	r3, [r7, #0]
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	803a      	strh	r2, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e6      	bne.n	800100a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20000100 	.word	0x20000100
 800105c:	20000000 	.word	0x20000000

08001060 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001066:	4b81      	ldr	r3, [pc, #516]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	7e1b      	ldrb	r3, [r3, #24]
 800106c:	3b01      	subs	r3, #1
 800106e:	2b03      	cmp	r3, #3
 8001070:	d80a      	bhi.n	8001088 <Modbus_Protocal_Worker+0x28>
 8001072:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <Modbus_Protocal_Worker+0x18>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	08001093 	.word	0x08001093
 800107c:	08001233 	.word	0x08001233
 8001080:	0800111f 	.word	0x0800111f
 8001084:	08001145 	.word	0x08001145
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001088:	4b78      	ldr	r3, [pc, #480]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2201      	movs	r2, #1
 800108e:	761a      	strb	r2, [r3, #24]
		break;
 8001090:	e0e8      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001092:	4b76      	ldr	r3, [pc, #472]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800109e:	f000 f9dd 	bl	800145c <Modbus_Emission>
 80010a2:	e01c      	b.n	80010de <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80010a4:	4b71      	ldr	r3, [pc, #452]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	7d9b      	ldrb	r3, [r3, #22]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d017      	beq.n	80010de <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80010ae:	4b6f      	ldr	r3, [pc, #444]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80010b6:	4b6d      	ldr	r3, [pc, #436]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80010be:	4b6b      	ldr	r3, [pc, #428]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b68      	ldr	r3, [pc, #416]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 0201 	orr.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010d6:	4b65      	ldr	r3, [pc, #404]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2203      	movs	r2, #3
 80010dc:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010de:	4b63      	ldr	r3, [pc, #396]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b20      	cmp	r3, #32
 80010ec:	f040 80b3 	bne.w	8001256 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80010f0:	4b5e      	ldr	r3, [pc, #376]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010fa:	4b5c      	ldr	r3, [pc, #368]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68d8      	ldr	r0, [r3, #12]
 8001100:	4b5a      	ldr	r3, [pc, #360]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b59      	ldr	r3, [pc, #356]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800110c:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001110:	4413      	add	r3, r2
 8001112:	3302      	adds	r3, #2
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	f005 fcc2 	bl	8006aa0 <HAL_UART_Receive_IT>
		}
		break;
 800111c:	e09b      	b.n	8001256 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800111e:	4b53      	ldr	r3, [pc, #332]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	7d1b      	ldrb	r3, [r3, #20]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 8098 	beq.w	800125a <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800112a:	4b50      	ldr	r3, [pc, #320]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001132:	4b4e      	ldr	r3, [pc, #312]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	22fe      	movs	r2, #254	; 0xfe
 8001138:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800113a:	4b4c      	ldr	r3, [pc, #304]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2204      	movs	r2, #4
 8001140:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001142:	e08a      	b.n	800125a <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001144:	4b49      	ldr	r3, [pc, #292]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	7d9b      	ldrb	r3, [r3, #22]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d009      	beq.n	8001162 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d103      	bne.n	8001162 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800115a:	4b44      	ldr	r3, [pc, #272]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	22ff      	movs	r2, #255	; 0xff
 8001160:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001162:	4b42      	ldr	r3, [pc, #264]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800116a:	f113 0f02 	cmn.w	r3, #2
 800116e:	d150      	bne.n	8001212 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001170:	4b3e      	ldr	r3, [pc, #248]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2200      	movs	r2, #0
 8001176:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001178:	4b3c      	ldr	r3, [pc, #240]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001180:	4b3a      	ldr	r3, [pc, #232]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001188:	3b02      	subs	r3, #2
 800118a:	4619      	mov	r1, r3
 800118c:	4610      	mov	r0, r2
 800118e:	f7ff ff31 	bl	8000ff4 <CRC16>
 8001192:	4603      	mov	r3, r0
 8001194:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001196:	793a      	ldrb	r2, [r7, #4]
 8001198:	4b34      	ldr	r3, [pc, #208]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800119a:	6819      	ldr	r1, [r3, #0]
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011a4:	3b02      	subs	r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d10c      	bne.n	80011ca <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80011b0:	797a      	ldrb	r2, [r7, #5]
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011b4:	6819      	ldr	r1, [r3, #0]
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011be:	3b01      	subs	r3, #1
 80011c0:	440b      	add	r3, r1
 80011c2:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d004      	beq.n	80011d4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	22ff      	movs	r2, #255	; 0xff
 80011d0:	75da      	strb	r2, [r3, #23]
				break;
 80011d2:	e047      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d113      	bne.n	800120e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80011f6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001200:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001202:	461a      	mov	r2, r3
 8001204:	f006 fe0e 	bl	8007e24 <memcpy>

			//execute command
			Modbus_frame_response();
 8001208:	f000 f910 	bl	800142c <Modbus_frame_response>
 800120c:	e001      	b.n	8001212 <Modbus_Protocal_Worker+0x1b2>
				break;
 800120e:	bf00      	nop
					}
		break;


	}
}
 8001210:	e028      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	7d5b      	ldrb	r3, [r3, #21]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2201      	movs	r2, #1
 8001222:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	4618      	mov	r0, r3
 800122c:	f005 fce6 	bl	8006bfc <HAL_UART_AbortReceive>
		break;
 8001230:	e015      	b.n	800125e <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b20      	cmp	r3, #32
 8001240:	d10f      	bne.n	8001262 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	761a      	strb	r2, [r3, #24]
		break;
 8001254:	e005      	b.n	8001262 <Modbus_Protocal_Worker+0x202>
		break;
 8001256:	bf00      	nop
 8001258:	e004      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 800125a:	bf00      	nop
 800125c:	e002      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 800125e:	bf00      	nop
 8001260:	e000      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 8001262:	bf00      	nop
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000028c 	.word	0x2000028c

08001270 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <modbusWrite1Register+0x80>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	7e9b      	ldrb	r3, [r3, #26]
 800127c:	b29b      	uxth	r3, r3
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <modbusWrite1Register+0x80>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7edb      	ldrb	r3, [r3, #27]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4413      	add	r3, r2
 800128c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800128e:	88fa      	ldrh	r2, [r7, #6]
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <modbusWrite1Register+0x80>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	429a      	cmp	r2, r3
 8001298:	d903      	bls.n	80012a2 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800129a:	2002      	movs	r0, #2
 800129c:	f000 f8a4 	bl	80013e8 <ModbusErrorReply>
			 return;
 80012a0:	e023      	b.n	80012ea <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <modbusWrite1Register+0x80>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <modbusWrite1Register+0x80>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	440b      	add	r3, r1
 80012b2:	7f12      	ldrb	r2, [r2, #28]
 80012b4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <modbusWrite1Register+0x80>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <modbusWrite1Register+0x80>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6859      	ldr	r1, [r3, #4]
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	440b      	add	r3, r1
 80012c6:	7f52      	ldrb	r2, [r2, #29]
 80012c8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <modbusWrite1Register+0x80>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <modbusWrite1Register+0x80>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 80012d8:	2208      	movs	r2, #8
 80012da:	4619      	mov	r1, r3
 80012dc:	f006 fda2 	bl	8007e24 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <modbusWrite1Register+0x80>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2205      	movs	r2, #5
 80012e6:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000028c 	.word	0x2000028c

080012f4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <modbusRead1Register+0xf0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	7f1b      	ldrb	r3, [r3, #28]
 8001300:	b29b      	uxth	r3, r3
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <modbusRead1Register+0xf0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	7f5b      	ldrb	r3, [r3, #29]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <modbusRead1Register+0xf0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	7e9b      	ldrb	r3, [r3, #26]
 8001318:	b29b      	uxth	r3, r3
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <modbusRead1Register+0xf0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	7edb      	ldrb	r3, [r3, #27]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4413      	add	r3, r2
 8001328:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <modbusRead1Register+0x42>
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	2b7d      	cmp	r3, #125	; 0x7d
 8001334:	d903      	bls.n	800133e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001336:	2003      	movs	r0, #3
 8001338:	f000 f856 	bl	80013e8 <ModbusErrorReply>
		 return;
 800133c:	e04e      	b.n	80013dc <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800133e:	88ba      	ldrh	r2, [r7, #4]
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <modbusRead1Register+0xf0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	429a      	cmp	r2, r3
 8001348:	d808      	bhi.n	800135c <modbusRead1Register+0x68>
 800134a:	88ba      	ldrh	r2, [r7, #4]
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	4413      	add	r3, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <modbusRead1Register+0xf0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	429a      	cmp	r2, r3
 800135a:	d903      	bls.n	8001364 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800135c:	2002      	movs	r0, #2
 800135e:	f000 f843 	bl	80013e8 <ModbusErrorReply>
		 return;
 8001362:	e03b      	b.n	80013dc <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <modbusRead1Register+0xf0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2203      	movs	r2, #3
 800136a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <modbusRead1Register+0xf0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	0052      	lsls	r2, r2, #1
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800137e:	2400      	movs	r4, #0
 8001380:	e020      	b.n	80013c4 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <modbusRead1Register+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	4423      	add	r3, r4
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	18d1      	adds	r1, r2, r3
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <modbusRead1Register+0xf0>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	1c63      	adds	r3, r4, #1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	7849      	ldrb	r1, [r1, #1]
 800139a:	4413      	add	r3, r2
 800139c:	460a      	mov	r2, r1
 800139e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <modbusRead1Register+0xf0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	4423      	add	r3, r4
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	18d1      	adds	r1, r2, r3
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <modbusRead1Register+0xf0>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	0063      	lsls	r3, r4, #1
 80013b6:	3303      	adds	r3, #3
 80013b8:	7809      	ldrb	r1, [r1, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	460a      	mov	r2, r1
 80013be:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80013c2:	3401      	adds	r4, #1
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	429c      	cmp	r4, r3
 80013c8:	dbdb      	blt.n	8001382 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <modbusRead1Register+0xf0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0052      	lsls	r2, r2, #1
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000028c 	.word	0x2000028c

080013e8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <ModbusErrorReply+0x40>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	7e5a      	ldrb	r2, [r3, #25]
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <ModbusErrorReply+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <ModbusErrorReply+0x40>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <ModbusErrorReply+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2202      	movs	r2, #2
 8001416:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	2000028c 	.word	0x2000028c

0800142c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <Modbus_frame_response+0x2c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	7e5b      	ldrb	r3, [r3, #25]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d004      	beq.n	8001444 <Modbus_frame_response+0x18>
 800143a:	2b06      	cmp	r3, #6
 800143c:	d105      	bne.n	800144a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800143e:	f7ff ff17 	bl	8001270 <modbusWrite1Register>
		break;
 8001442:	e006      	b.n	8001452 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001444:	f7ff ff56 	bl	80012f4 <modbusRead1Register>
		break;
 8001448:	e003      	b.n	8001452 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800144a:	2001      	movs	r0, #1
 800144c:	f7ff ffcc 	bl	80013e8 <ModbusErrorReply>
		break;
 8001450:	bf00      	nop

	}
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000028c 	.word	0x2000028c

0800145c <Modbus_Emission>:

void Modbus_Emission()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <Modbus_Emission+0xfc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b20      	cmp	r3, #32
 8001470:	d15e      	bne.n	8001530 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <Modbus_Emission+0xfc>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <Modbus_Emission+0xfc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001480:	4b35      	ldr	r3, [pc, #212]	; (8001558 <Modbus_Emission+0xfc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001488:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <Modbus_Emission+0xfc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <Modbus_Emission+0xfc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800149a:	461a      	mov	r2, r3
 800149c:	f006 fcc2 	bl	8007e24 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <Modbus_Emission+0xfc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <Modbus_Emission+0xfc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3203      	adds	r2, #3
 80014b0:	b292      	uxth	r2, r2
 80014b2:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <Modbus_Emission+0xfc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <Modbus_Emission+0xfc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014c6:	3b02      	subs	r3, #2
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f7ff fd92 	bl	8000ff4 <CRC16>
 80014d0:	4603      	mov	r3, r0
 80014d2:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <Modbus_Emission+0xfc>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <Modbus_Emission+0xfc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014e0:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80014e2:	7939      	ldrb	r1, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	460a      	mov	r2, r1
 80014e8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <Modbus_Emission+0xfc>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <Modbus_Emission+0xfc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014f8:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014fa:	7979      	ldrb	r1, [r7, #5]
 80014fc:	4413      	add	r3, r2
 80014fe:	460a      	mov	r2, r1
 8001500:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <Modbus_Emission+0xfc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b20      	cmp	r3, #32
 8001512:	d10d      	bne.n	8001530 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <Modbus_Emission+0xfc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <Modbus_Emission+0xfc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <Modbus_Emission+0xfc>)
 8001524:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001526:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800152a:	461a      	mov	r2, r3
 800152c:	f005 fae8 	bl	8006b00 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <Modbus_Emission+0xfc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <Modbus_Emission+0xfc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <Modbus_Emission+0xfc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <Modbus_Emission+0xfc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2202      	movs	r2, #2
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	2000028c 	.word	0x2000028c
 800155c:	00000000 	.word	0x00000000

08001560 <localize>:
float calculateNorm(Coordinate coord);
Coordinate negateCoordinate(Coordinate coord);

// USER CODE ======================================================================================

void localize(Coordinate *inputs, Coordinate *outputs, Coordinate *origin, float *angle) {
 8001560:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001564:	b0a2      	sub	sp, #136	; 0x88
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	603b      	str	r3, [r7, #0]
	Coordinate point1 = inputs[0];
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001576:	e892 0003 	ldmia.w	r2, {r0, r1}
 800157a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point2 = inputs[1];
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001584:	3208      	adds	r2, #8
 8001586:	e892 0003 	ldmia.w	r2, {r0, r1}
 800158a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point3 = inputs[2];
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001594:	3210      	adds	r2, #16
 8001596:	e892 0003 	ldmia.w	r2, {r0, r1}
 800159a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate vectA = subtractCoordinates(point2, point1);
 800159e:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 80015a2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80015a6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80015aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80015ae:	eeb0 1a46 	vmov.f32	s2, s12
 80015b2:	eef0 1a66 	vmov.f32	s3, s13
 80015b6:	eeb0 0a47 	vmov.f32	s0, s14
 80015ba:	eef0 0a67 	vmov.f32	s1, s15
 80015be:	f000 fba7 	bl	8001d10 <subtractCoordinates>
 80015c2:	eeb0 7a40 	vmov.f32	s14, s0
 80015c6:	eef0 7a60 	vmov.f32	s15, s1
 80015ca:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 80015ce:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	Coordinate vectB = subtractCoordinates(point3, point2);
 80015d2:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 80015d6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80015da:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80015de:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80015e2:	eeb0 1a46 	vmov.f32	s2, s12
 80015e6:	eef0 1a66 	vmov.f32	s3, s13
 80015ea:	eeb0 0a47 	vmov.f32	s0, s14
 80015ee:	eef0 0a67 	vmov.f32	s1, s15
 80015f2:	f000 fb8d 	bl	8001d10 <subtractCoordinates>
 80015f6:	eeb0 7a40 	vmov.f32	s14, s0
 80015fa:	eef0 7a60 	vmov.f32	s15, s1
 80015fe:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8001602:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	Coordinate vectC = subtractCoordinates(point3, point1);
 8001606:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 800160a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800160e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001612:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001616:	eeb0 1a46 	vmov.f32	s2, s12
 800161a:	eef0 1a66 	vmov.f32	s3, s13
 800161e:	eeb0 0a47 	vmov.f32	s0, s14
 8001622:	eef0 0a67 	vmov.f32	s1, s15
 8001626:	f000 fb73 	bl	8001d10 <subtractCoordinates>
 800162a:	eeb0 7a40 	vmov.f32	s14, s0
 800162e:	eef0 7a60 	vmov.f32	s15, s1
 8001632:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8001636:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float lenA = calculateNorm(vectA);
 800163a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800163e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001642:	eeb0 0a47 	vmov.f32	s0, s14
 8001646:	eef0 0a67 	vmov.f32	s1, s15
 800164a:	f000 fb9b 	bl	8001d84 <calculateNorm>
 800164e:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
	float lenB = calculateNorm(vectB);
 8001652:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001656:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800165a:	eeb0 0a47 	vmov.f32	s0, s14
 800165e:	eef0 0a67 	vmov.f32	s1, s15
 8001662:	f000 fb8f 	bl	8001d84 <calculateNorm>
 8001666:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	float lenC = calculateNorm(vectC);
 800166a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800166e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001672:	eeb0 0a47 	vmov.f32	s0, s14
 8001676:	eef0 0a67 	vmov.f32	s1, s15
 800167a:	f000 fb83 	bl	8001d84 <calculateNorm>
 800167e:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	Coordinate vector1;
	Coordinate vector2;

	if (lenA < lenB && lenB < lenC && lenA < lenC) {
 8001682:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001686:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800168a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	d534      	bpl.n	80016fe <localize+0x19e>
 8001694:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001698:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800169c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	d52b      	bpl.n	80016fe <localize+0x19e>
 80016a6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80016aa:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80016ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	d522      	bpl.n	80016fe <localize+0x19e>
		// CASE 1
		*origin = point2;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	461a      	mov	r2, r3
 80016bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016c4:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectB;
 80016c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016cc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80016d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016d4:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = negateCoordinate(vectA);
 80016d8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80016dc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80016e0:	eeb0 0a47 	vmov.f32	s0, s14
 80016e4:	eef0 0a67 	vmov.f32	s1, s15
 80016e8:	f000 fb7f 	bl	8001dea <negateCoordinate>
 80016ec:	eeb0 7a40 	vmov.f32	s14, s0
 80016f0:	eef0 7a60 	vmov.f32	s15, s1
 80016f4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80016f8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80016fc:	e134      	b.n	8001968 <localize+0x408>
	} else if (lenC < lenB && lenB < lenA && lenC < lenA) {
 80016fe:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001702:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170e:	d53e      	bpl.n	800178e <localize+0x22e>
 8001710:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001714:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001718:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800171c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001720:	d535      	bpl.n	800178e <localize+0x22e>
 8001722:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001726:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800172a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800172e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001732:	d52c      	bpl.n	800178e <localize+0x22e>
		// CASE 2
		*origin = point3;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	461a      	mov	r2, r3
 8001738:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800173c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001740:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectB);
 8001744:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001748:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800174c:	eeb0 0a47 	vmov.f32	s0, s14
 8001750:	eef0 0a67 	vmov.f32	s1, s15
 8001754:	f000 fb49 	bl	8001dea <negateCoordinate>
 8001758:	eeb0 7a40 	vmov.f32	s14, s0
 800175c:	eef0 7a60 	vmov.f32	s15, s1
 8001760:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8001764:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectC);
 8001768:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800176c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001770:	eeb0 0a47 	vmov.f32	s0, s14
 8001774:	eef0 0a67 	vmov.f32	s1, s15
 8001778:	f000 fb37 	bl	8001dea <negateCoordinate>
 800177c:	eeb0 7a40 	vmov.f32	s14, s0
 8001780:	eef0 7a60 	vmov.f32	s15, s1
 8001784:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8001788:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800178c:	e0ec      	b.n	8001968 <localize+0x408>
	} else if (lenA < lenC && lenC < lenB && lenA < lenB) {
 800178e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001792:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001796:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	d52a      	bpl.n	80017f6 <localize+0x296>
 80017a0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80017a4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80017a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	d521      	bpl.n	80017f6 <localize+0x296>
 80017b2:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80017b6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80017ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	d518      	bpl.n	80017f6 <localize+0x296>
		// CASE 3
		*origin = point1;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	461a      	mov	r2, r3
 80017c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017d0:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectC;
 80017d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017e0:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectA;
 80017e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80017ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80017f4:	e0b8      	b.n	8001968 <localize+0x408>
	} else if (lenC < lenA && lenA < lenB && lenC < lenB) {
 80017f6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80017fa:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80017fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	d52a      	bpl.n	800185e <localize+0x2fe>
 8001808:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800180c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001810:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	d521      	bpl.n	800185e <localize+0x2fe>
 800181a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800181e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001822:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	d518      	bpl.n	800185e <localize+0x2fe>
		// CASE 4
		*origin = point1;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	461a      	mov	r2, r3
 8001830:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001834:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001838:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectA;
 800183c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001840:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001848:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectC;
 800184c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001850:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001854:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001858:	e883 0003 	stmia.w	r3, {r0, r1}
 800185c:	e084      	b.n	8001968 <localize+0x408>
	} else if (lenB < lenC && lenC < lenA && lenB < lenA) {
 800185e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001862:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186e:	d53e      	bpl.n	80018ee <localize+0x38e>
 8001870:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001874:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001880:	d535      	bpl.n	80018ee <localize+0x38e>
 8001882:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001886:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800188a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001892:	d52c      	bpl.n	80018ee <localize+0x38e>
		// CASE 5
		*origin = point3;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	461a      	mov	r2, r3
 8001898:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800189c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018a0:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectC);
 80018a4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80018a8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80018ac:	eeb0 0a47 	vmov.f32	s0, s14
 80018b0:	eef0 0a67 	vmov.f32	s1, s15
 80018b4:	f000 fa99 	bl	8001dea <negateCoordinate>
 80018b8:	eeb0 7a40 	vmov.f32	s14, s0
 80018bc:	eef0 7a60 	vmov.f32	s15, s1
 80018c0:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80018c4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectB);
 80018c8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80018cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018d0:	eeb0 0a47 	vmov.f32	s0, s14
 80018d4:	eef0 0a67 	vmov.f32	s1, s15
 80018d8:	f000 fa87 	bl	8001dea <negateCoordinate>
 80018dc:	eeb0 7a40 	vmov.f32	s14, s0
 80018e0:	eef0 7a60 	vmov.f32	s15, s1
 80018e4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80018e8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80018ec:	e03c      	b.n	8001968 <localize+0x408>
	} else if (lenB < lenA && lenA < lenC && lenB < lenC) {
 80018ee:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80018f2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80018f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fe:	d533      	bpl.n	8001968 <localize+0x408>
 8001900:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001904:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001908:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001910:	d52a      	bpl.n	8001968 <localize+0x408>
 8001912:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001916:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800191a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001922:	d521      	bpl.n	8001968 <localize+0x408>
		// CASE 6
		*origin = point2;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	461a      	mov	r2, r3
 8001928:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800192c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001930:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectA);
 8001934:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001938:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800193c:	eeb0 0a47 	vmov.f32	s0, s14
 8001940:	eef0 0a67 	vmov.f32	s1, s15
 8001944:	f000 fa51 	bl	8001dea <negateCoordinate>
 8001948:	eeb0 7a40 	vmov.f32	s14, s0
 800194c:	eef0 7a60 	vmov.f32	s15, s1
 8001950:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8001954:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = vectB;
 8001958:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001960:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001964:	e883 0003 	stmia.w	r3, {r0, r1}
	}

	// calculate vector angle
	if (vector1.x == 0) {
 8001968:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800196c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	d10e      	bne.n	8001994 <localize+0x434>
		if (vector1.y > 0) {
 8001976:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800197a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	dd03      	ble.n	800198c <localize+0x42c>
			*angle = M_PI / 2.0;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4a72      	ldr	r2, [pc, #456]	; (8001b50 <localize+0x5f0>)
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	e096      	b.n	8001aba <localize+0x55a>
		} else {
			*angle = 1.5 * M_PI;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4a71      	ldr	r2, [pc, #452]	; (8001b54 <localize+0x5f4>)
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e092      	b.n	8001aba <localize+0x55a>
		}
	} else if (vector1.y == 0) {
 8001994:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001998:	eef5 7a40 	vcmp.f32	s15, #0.0
 800199c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a0:	d10f      	bne.n	80019c2 <localize+0x462>
		if (vector1.x >= 0) {
 80019a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ae:	db04      	blt.n	80019ba <localize+0x45a>
			*angle = 0;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e07f      	b.n	8001aba <localize+0x55a>
		} else {
			*angle = M_PI;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	4a66      	ldr	r2, [pc, #408]	; (8001b58 <localize+0x5f8>)
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	e07b      	b.n	8001aba <localize+0x55a>
		}
	} else {
		*angle = abs(atan(vector1.y / vector1.x));
 80019c2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80019c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019ce:	ee16 0a90 	vmov	r0, s13
 80019d2:	f7fe fd65 	bl	80004a0 <__aeabi_f2d>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	ec43 2b10 	vmov	d0, r2, r3
 80019de:	f006 fa37 	bl	8007e50 <atan>
 80019e2:	ec53 2b10 	vmov	r2, r3, d0
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff f861 	bl	8000ab0 <__aeabi_d2iz>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bfb8      	it	lt
 80019f4:	425b      	neglt	r3, r3
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	edc3 7a00 	vstr	s15, [r3]
		if (vector1.x < 0 && vector1.y < 0) {
 8001a04:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	d51a      	bpl.n	8001a48 <localize+0x4e8>
 8001a12:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1e:	d513      	bpl.n	8001a48 <localize+0x4e8>
			*angle = M_PI + *angle;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fd3b 	bl	80004a0 <__aeabi_f2d>
 8001a2a:	a345      	add	r3, pc, #276	; (adr r3, 8001b40 <localize+0x5e0>)
 8001a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a30:	f7fe fbd8 	bl	80001e4 <__adddf3>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f860 	bl	8000b00 <__aeabi_d2f>
 8001a40:	4602      	mov	r2, r0
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e038      	b.n	8001aba <localize+0x55a>
		} else if (vector1.x < 0) {
 8001a48:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a54:	d515      	bpl.n	8001a82 <localize+0x522>
			*angle = M_PI - *angle;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd20 	bl	80004a0 <__aeabi_f2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	a136      	add	r1, pc, #216	; (adr r1, 8001b40 <localize+0x5e0>)
 8001a66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a6a:	f7fe fbb9 	bl	80001e0 <__aeabi_dsub>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff f843 	bl	8000b00 <__aeabi_d2f>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	e01b      	b.n	8001aba <localize+0x55a>
		} else if (vector1.y < 0) {
 8001a82:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	d514      	bpl.n	8001aba <localize+0x55a>
			*angle = 2.0 * M_PI - *angle;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fd03 	bl	80004a0 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	a12a      	add	r1, pc, #168	; (adr r1, 8001b48 <localize+0x5e8>)
 8001aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aa4:	f7fe fb9c 	bl	80001e0 <__aeabi_dsub>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f7ff f826 	bl	8000b00 <__aeabi_d2f>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	601a      	str	r2, [r3, #0]
		}
	}

	// calculate for matrix directions
	float dir = vector1.x * vector2.y - vector1.y * vector2.x;
 8001aba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001abe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ac2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac6:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001aca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	if (dir < 0) {
 8001ada:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001ade:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae6:	d515      	bpl.n	8001b14 <localize+0x5b4>
		*angle = *angle + M_PI;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fcd7 	bl	80004a0 <__aeabi_f2d>
 8001af2:	a313      	add	r3, pc, #76	; (adr r3, 8001b40 <localize+0x5e0>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fb74 	bl	80001e4 <__adddf3>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7fe fffc 	bl	8000b00 <__aeabi_d2f>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	601a      	str	r2, [r3, #0]
		dir = -1.0;
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <localize+0x5fc>)
 8001b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	}

	// create 9 points
	float X[] = { 10.0, 30.0, 50.0 };
 8001b14:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <localize+0x600>)
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float Y[] = { 10.0, 25.0, 40.0 };
 8001b20:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <localize+0x604>)
 8001b22:	f107 0310 	add.w	r3, r7, #16
 8001b26:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < 3; i++) {
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b32:	e0e2      	b.n	8001cfa <localize+0x79a>
		for (int j = 0; j < 3; j++) {
 8001b34:	2300      	movs	r3, #0
 8001b36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b38:	e0d6      	b.n	8001ce8 <localize+0x788>
 8001b3a:	bf00      	nop
 8001b3c:	f3af 8000 	nop.w
 8001b40:	54442d18 	.word	0x54442d18
 8001b44:	400921fb 	.word	0x400921fb
 8001b48:	54442d18 	.word	0x54442d18
 8001b4c:	401921fb 	.word	0x401921fb
 8001b50:	3fc90fdb 	.word	0x3fc90fdb
 8001b54:	4096cbe4 	.word	0x4096cbe4
 8001b58:	40490fdb 	.word	0x40490fdb
 8001b5c:	bf800000 	.word	0xbf800000
 8001b60:	080094b0 	.word	0x080094b0
 8001b64:	080094bc 	.word	0x080094bc
			double angleValue = (double) (*angle);  // Dereference and convert to double
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fc97 	bl	80004a0 <__aeabi_f2d>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			outputs[i * 3 + j].x = origin->x + X[i] * dir * cos(angleValue) - Y[j] * sin(angleValue);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fc8e 	bl	80004a0 <__aeabi_f2d>
 8001b84:	4604      	mov	r4, r0
 8001b86:	460d      	mov	r5, r1
 8001b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	3388      	adds	r3, #136	; 0x88
 8001b90:	443b      	add	r3, r7
 8001b92:	3b6c      	subs	r3, #108	; 0x6c
 8001b94:	ed93 7a00 	vldr	s14, [r3]
 8001b98:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba0:	ee17 0a90 	vmov	r0, s15
 8001ba4:	f7fe fc7c 	bl	80004a0 <__aeabi_f2d>
 8001ba8:	4680      	mov	r8, r0
 8001baa:	4689      	mov	r9, r1
 8001bac:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001bb0:	f006 faee 	bl	8008190 <cos>
 8001bb4:	ec53 2b10 	vmov	r2, r3, d0
 8001bb8:	4640      	mov	r0, r8
 8001bba:	4649      	mov	r1, r9
 8001bbc:	f7fe fcc8 	bl	8000550 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	f7fe fb0c 	bl	80001e4 <__adddf3>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4690      	mov	r8, r2
 8001bd2:	4699      	mov	r9, r3
 8001bd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	3388      	adds	r3, #136	; 0x88
 8001bda:	443b      	add	r3, r7
 8001bdc:	3b78      	subs	r3, #120	; 0x78
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fc5d 	bl	80004a0 <__aeabi_f2d>
 8001be6:	4604      	mov	r4, r0
 8001be8:	460d      	mov	r5, r1
 8001bea:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001bee:	f006 fb2f 	bl	8008250 <sin>
 8001bf2:	ec53 2b10 	vmov	r2, r3, d0
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	f7fe fca9 	bl	8000550 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4640      	mov	r0, r8
 8001c04:	4649      	mov	r1, r9
 8001c06:	f7fe faeb 	bl	80001e0 <__aeabi_dsub>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	441a      	add	r2, r3
 8001c1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	18d4      	adds	r4, r2, r3
 8001c26:	f7fe ff6b 	bl	8000b00 <__aeabi_d2f>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6023      	str	r3, [r4, #0]
			outputs[i * 3 + j].y = origin->y + X[i] * dir * sin(angleValue) + Y[j] * cos(angleValue);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc34 	bl	80004a0 <__aeabi_f2d>
 8001c38:	4604      	mov	r4, r0
 8001c3a:	460d      	mov	r5, r1
 8001c3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	3388      	adds	r3, #136	; 0x88
 8001c44:	443b      	add	r3, r7
 8001c46:	3b6c      	subs	r3, #108	; 0x6c
 8001c48:	ed93 7a00 	vldr	s14, [r3]
 8001c4c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c54:	ee17 0a90 	vmov	r0, s15
 8001c58:	f7fe fc22 	bl	80004a0 <__aeabi_f2d>
 8001c5c:	4680      	mov	r8, r0
 8001c5e:	4689      	mov	r9, r1
 8001c60:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001c64:	f006 faf4 	bl	8008250 <sin>
 8001c68:	ec53 2b10 	vmov	r2, r3, d0
 8001c6c:	4640      	mov	r0, r8
 8001c6e:	4649      	mov	r1, r9
 8001c70:	f7fe fc6e 	bl	8000550 <__aeabi_dmul>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4620      	mov	r0, r4
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	f7fe fab2 	bl	80001e4 <__adddf3>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4690      	mov	r8, r2
 8001c86:	4699      	mov	r9, r3
 8001c88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	3388      	adds	r3, #136	; 0x88
 8001c8e:	443b      	add	r3, r7
 8001c90:	3b78      	subs	r3, #120	; 0x78
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc03 	bl	80004a0 <__aeabi_f2d>
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	460d      	mov	r5, r1
 8001c9e:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001ca2:	f006 fa75 	bl	8008190 <cos>
 8001ca6:	ec53 2b10 	vmov	r2, r3, d0
 8001caa:	4620      	mov	r0, r4
 8001cac:	4629      	mov	r1, r5
 8001cae:	f7fe fc4f 	bl	8000550 <__aeabi_dmul>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4640      	mov	r0, r8
 8001cb8:	4649      	mov	r1, r9
 8001cba:	f7fe fa93 	bl	80001e4 <__adddf3>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	441a      	add	r2, r3
 8001cd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	18d4      	adds	r4, r2, r3
 8001cda:	f7fe ff11 	bl	8000b00 <__aeabi_d2f>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6063      	str	r3, [r4, #4]
		for (int j = 0; j < 3; j++) {
 8001ce2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ce8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	f77f af3c 	ble.w	8001b68 <localize+0x608>
	for (int i = 0; i < 3; i++) {
 8001cf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001cfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	f77f af18 	ble.w	8001b34 <localize+0x5d4>
		}
	}
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3788      	adds	r7, #136	; 0x88
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001d10 <subtractCoordinates>:

Coordinate subtractCoordinates(Coordinate coord1, Coordinate coord2) {
 8001d10:	b480      	push	{r7}
 8001d12:	b08b      	sub	sp, #44	; 0x2c
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	eeb0 6a40 	vmov.f32	s12, s0
 8001d1a:	eef0 6a60 	vmov.f32	s13, s1
 8001d1e:	eeb0 7a41 	vmov.f32	s14, s2
 8001d22:	eef0 7a61 	vmov.f32	s15, s3
 8001d26:	ed87 6a04 	vstr	s12, [r7, #16]
 8001d2a:	edc7 6a05 	vstr	s13, [r7, #20]
 8001d2e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001d32:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = coord1.x - coord2.x;
 8001d36:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d42:	edc7 7a06 	vstr	s15, [r7, #24]
	result.y = coord1.y - coord2.y;
 8001d46:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d52:	edc7 7a07 	vstr	s15, [r7, #28]
	return result;
 8001d56:	f107 0320 	add.w	r3, r7, #32
 8001d5a:	f107 0218 	add.w	r2, r7, #24
 8001d5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d62:	e883 0003 	stmia.w	r3, {r0, r1}
 8001d66:	6a3a      	ldr	r2, [r7, #32]
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	ee07 2a10 	vmov	s14, r2
 8001d6e:	ee07 3a90 	vmov	s15, r3
}
 8001d72:	eeb0 0a47 	vmov.f32	s0, s14
 8001d76:	eef0 0a67 	vmov.f32	s1, s15
 8001d7a:	372c      	adds	r7, #44	; 0x2c
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <calculateNorm>:

float calculateNorm(Coordinate coord) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	eeb0 7a40 	vmov.f32	s14, s0
 8001d8e:	eef0 7a60 	vmov.f32	s15, s1
 8001d92:	ed87 7a00 	vstr	s14, [r7]
 8001d96:	edc7 7a01 	vstr	s15, [r7, #4]
	float norm = sqrt(coord.x * coord.x + coord.y * coord.y);
 8001d9a:	ed97 7a00 	vldr	s14, [r7]
 8001d9e:	edd7 7a00 	vldr	s15, [r7]
 8001da2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001daa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db6:	ee17 0a90 	vmov	r0, s15
 8001dba:	f7fe fb71 	bl	80004a0 <__aeabi_f2d>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	ec43 2b10 	vmov	d0, r2, r3
 8001dc6:	f006 fa9b 	bl	8008300 <sqrt>
 8001dca:	ec53 2b10 	vmov	r2, r3, d0
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7fe fe95 	bl	8000b00 <__aeabi_d2f>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	60fb      	str	r3, [r7, #12]
	return norm;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	ee07 3a90 	vmov	s15, r3
}
 8001de0:	eeb0 0a67 	vmov.f32	s0, s15
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <negateCoordinate>:

Coordinate negateCoordinate(Coordinate coord) {
 8001dea:	b480      	push	{r7}
 8001dec:	b089      	sub	sp, #36	; 0x24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	eeb0 7a40 	vmov.f32	s14, s0
 8001df4:	eef0 7a60 	vmov.f32	s15, s1
 8001df8:	ed87 7a02 	vstr	s14, [r7, #8]
 8001dfc:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = -coord.x;
 8001e00:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e04:	eef1 7a67 	vneg.f32	s15, s15
 8001e08:	edc7 7a04 	vstr	s15, [r7, #16]
	result.y = -coord.y;
 8001e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e10:	eef1 7a67 	vneg.f32	s15, s15
 8001e14:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 8001e18:	f107 0318 	add.w	r3, r7, #24
 8001e1c:	f107 0210 	add.w	r2, r7, #16
 8001e20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e24:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	ee07 2a10 	vmov	s14, r2
 8001e30:	ee07 3a90 	vmov	s15, r3
}
 8001e34:	eeb0 0a47 	vmov.f32	s0, s14
 8001e38:	eef0 0a67 	vmov.f32	s1, s15
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	corners[0].x = -67.9771505376344;
 8001e4c:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <main+0xb8>)
 8001e4e:	4a2d      	ldr	r2, [pc, #180]	; (8001f04 <main+0xbc>)
 8001e50:	601a      	str	r2, [r3, #0]
	corners[0].y = 6.58602150537627;
 8001e52:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <main+0xb8>)
 8001e54:	4a2c      	ldr	r2, [pc, #176]	; (8001f08 <main+0xc0>)
 8001e56:	605a      	str	r2, [r3, #4]
	corners[1].x = -29.8723118279570;
 8001e58:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <main+0xb8>)
 8001e5a:	4a2c      	ldr	r2, [pc, #176]	; (8001f0c <main+0xc4>)
 8001e5c:	609a      	str	r2, [r3, #8]
	corners[1].y = -24.9327956989248;
 8001e5e:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <main+0xb8>)
 8001e60:	4a2b      	ldr	r2, [pc, #172]	; (8001f10 <main+0xc8>)
 8001e62:	60da      	str	r2, [r3, #12]
	corners[2].x = 8.23252688172050;
 8001e64:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <main+0xb8>)
 8001e66:	4a2b      	ldr	r2, [pc, #172]	; (8001f14 <main+0xcc>)
 8001e68:	611a      	str	r2, [r3, #16]
	corners[2].y = 21.1693548387096;
 8001e6a:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <main+0xb8>)
 8001e6c:	4a2a      	ldr	r2, [pc, #168]	; (8001f18 <main+0xd0>)
 8001e6e:	615a      	str	r2, [r3, #20]
	localize(corners, pick, &origin, &angle);
 8001e70:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <main+0xd4>)
 8001e72:	4a2b      	ldr	r2, [pc, #172]	; (8001f20 <main+0xd8>)
 8001e74:	492b      	ldr	r1, [pc, #172]	; (8001f24 <main+0xdc>)
 8001e76:	4822      	ldr	r0, [pc, #136]	; (8001f00 <main+0xb8>)
 8001e78:	f7ff fb72 	bl	8001560 <localize>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e7c:	f001 f82e 	bl	8002edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e80:	f000 f862 	bl	8001f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e84:	f000 fb40 	bl	8002508 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e88:	f000 fb1e 	bl	80024c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001e8c:	f000 faf0 	bl	8002470 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001e90:	f000 f914 	bl	80020bc <MX_I2C1_Init>
  MX_TIM1_Init();
 8001e94:	f000 f940 	bl	8002118 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e98:	f000 f9de 	bl	8002258 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001e9c:	f000 fabe 	bl	800241c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001ea0:	f000 f8ba 	bl	8002018 <MX_ADC1_Init>
  MX_TIM9_Init();
 8001ea4:	f000 fa2c 	bl	8002300 <MX_TIM9_Init>
  MX_TIM11_Init();
 8001ea8:	f000 fa64 	bl	8002374 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

	// start timer 1 in PWM for motor
	HAL_TIM_Base_Start(&htim1);
 8001eac:	481e      	ldr	r0, [pc, #120]	; (8001f28 <main+0xe0>)
 8001eae:	f002 ffef 	bl	8004e90 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	481c      	ldr	r0, [pc, #112]	; (8001f28 <main+0xe0>)
 8001eb6:	f003 f973 	bl	80051a0 <HAL_TIM_PWM_Start>

	// Start timer in encoder mode
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001eba:	2104      	movs	r1, #4
 8001ebc:	481b      	ldr	r0, [pc, #108]	; (8001f2c <main+0xe4>)
 8001ebe:	f003 fba1 	bl	8005604 <HAL_TIM_Encoder_Start>

	// Timer 9 Timer Interrupt (1000Hz)
	HAL_TIM_Base_Start_IT(&htim9);
 8001ec2:	481b      	ldr	r0, [pc, #108]	; (8001f30 <main+0xe8>)
 8001ec4:	f003 f83e 	bl	8004f44 <HAL_TIM_Base_Start_IT>

	// Initialize modbus
	hmodbus.huart = &huart2;
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <main+0xec>)
 8001eca:	4a1b      	ldr	r2, [pc, #108]	; (8001f38 <main+0xf0>)
 8001ecc:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <main+0xec>)
 8001ed0:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <main+0xf4>)
 8001ed2:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <main+0xec>)
 8001ed6:	2215      	movs	r2, #21
 8001ed8:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <main+0xec>)
 8001edc:	2246      	movs	r2, #70	; 0x46
 8001ede:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001ee0:	4917      	ldr	r1, [pc, #92]	; (8001f40 <main+0xf8>)
 8001ee2:	4814      	ldr	r0, [pc, #80]	; (8001f34 <main+0xec>)
 8001ee4:	f7ff f830 	bl	8000f48 <Modbus_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		Modbus_Protocal_Worker();
 8001ee8:	f7ff f8ba 	bl	8001060 <Modbus_Protocal_Worker>
		modbus_heartbeat_handler();
 8001eec:	f000 fba4 	bl	8002638 <modbus_heartbeat_handler>
		modbus_data_sync();
 8001ef0:	f000 fbe2 	bl	80026b8 <modbus_data_sync>
		QEIReadRaw = getRawPosition();
 8001ef4:	f000 fb94 	bl	8002620 <getRawPosition>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <main+0xfc>)
 8001efc:	6013      	str	r3, [r2, #0]
		Modbus_Protocal_Worker();
 8001efe:	e7f3      	b.n	8001ee8 <main+0xa0>
 8001f00:	20000748 	.word	0x20000748
 8001f04:	c287f44d 	.word	0xc287f44d
 8001f08:	40d2c0b0 	.word	0x40d2c0b0
 8001f0c:	c1eefa7f 	.word	0xc1eefa7f
 8001f10:	c1c7765e 	.word	0xc1c7765e
 8001f14:	4103b86e 	.word	0x4103b86e
 8001f18:	41a95ad7 	.word	0x41a95ad7
 8001f1c:	200007b0 	.word	0x200007b0
 8001f20:	200007a8 	.word	0x200007a8
 8001f24:	20000760 	.word	0x20000760
 8001f28:	2000032c 	.word	0x2000032c
 8001f2c:	200003e0 	.word	0x200003e0
 8001f30:	20000494 	.word	0x20000494
 8001f34:	200007b4 	.word	0x200007b4
 8001f38:	20000670 	.word	0x20000670
 8001f3c:	20000548 	.word	0x20000548
 8001f40:	20000c8c 	.word	0x20000c8c
 8001f44:	20000744 	.word	0x20000744

08001f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b094      	sub	sp, #80	; 0x50
 8001f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f4e:	f107 0320 	add.w	r3, r7, #32
 8001f52:	2230      	movs	r2, #48	; 0x30
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f005 ff72 	bl	8007e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	4b27      	ldr	r3, [pc, #156]	; (8002010 <SystemClock_Config+0xc8>)
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	4a26      	ldr	r2, [pc, #152]	; (8002010 <SystemClock_Config+0xc8>)
 8001f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7c:	4b24      	ldr	r3, [pc, #144]	; (8002010 <SystemClock_Config+0xc8>)
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f88:	2300      	movs	r3, #0
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	4b21      	ldr	r3, [pc, #132]	; (8002014 <SystemClock_Config+0xcc>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a20      	ldr	r2, [pc, #128]	; (8002014 <SystemClock_Config+0xcc>)
 8001f92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <SystemClock_Config+0xcc>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fac:	2310      	movs	r3, #16
 8001fae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001fbc:	2364      	movs	r3, #100	; 0x64
 8001fbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc8:	f107 0320 	add.w	r3, r7, #32
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f002 fa6b 	bl	80044a8 <HAL_RCC_OscConfig>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fd8:	f000 fc8e 	bl	80028f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fdc:	230f      	movs	r3, #15
 8001fde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	2103      	movs	r1, #3
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f002 fccd 	bl	8004998 <HAL_RCC_ClockConfig>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002004:	f000 fc78 	bl	80028f8 <Error_Handler>
  }
}
 8002008:	bf00      	nop
 800200a:	3750      	adds	r7, #80	; 0x50
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	40007000 	.word	0x40007000

08002018 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800201e:	463b      	mov	r3, r7
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800202a:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <MX_ADC1_Init+0x98>)
 800202c:	4a21      	ldr	r2, [pc, #132]	; (80020b4 <MX_ADC1_Init+0x9c>)
 800202e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002030:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <MX_ADC1_Init+0x98>)
 8002032:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002036:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002038:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <MX_ADC1_Init+0x98>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800203e:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <MX_ADC1_Init+0x98>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002044:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <MX_ADC1_Init+0x98>)
 8002046:	2200      	movs	r2, #0
 8002048:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800204a:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <MX_ADC1_Init+0x98>)
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <MX_ADC1_Init+0x98>)
 8002054:	2200      	movs	r2, #0
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <MX_ADC1_Init+0x98>)
 800205a:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <MX_ADC1_Init+0xa0>)
 800205c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800205e:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <MX_ADC1_Init+0x98>)
 8002060:	2200      	movs	r2, #0
 8002062:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <MX_ADC1_Init+0x98>)
 8002066:	2201      	movs	r2, #1
 8002068:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <MX_ADC1_Init+0x98>)
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <MX_ADC1_Init+0x98>)
 8002074:	2201      	movs	r2, #1
 8002076:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002078:	480d      	ldr	r0, [pc, #52]	; (80020b0 <MX_ADC1_Init+0x98>)
 800207a:	f000 ffa1 	bl	8002fc0 <HAL_ADC_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002084:	f000 fc38 	bl	80028f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002088:	230a      	movs	r3, #10
 800208a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800208c:	2301      	movs	r3, #1
 800208e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002094:	463b      	mov	r3, r7
 8002096:	4619      	mov	r1, r3
 8002098:	4805      	ldr	r0, [pc, #20]	; (80020b0 <MX_ADC1_Init+0x98>)
 800209a:	f000 ffd5 	bl	8003048 <HAL_ADC_ConfigChannel>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020a4:	f000 fc28 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000290 	.word	0x20000290
 80020b4:	40012000 	.word	0x40012000
 80020b8:	0f000001 	.word	0x0f000001

080020bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <MX_I2C1_Init+0x50>)
 80020c2:	4a13      	ldr	r2, [pc, #76]	; (8002110 <MX_I2C1_Init+0x54>)
 80020c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <MX_I2C1_Init+0x50>)
 80020c8:	4a12      	ldr	r2, [pc, #72]	; (8002114 <MX_I2C1_Init+0x58>)
 80020ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <MX_I2C1_Init+0x50>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <MX_I2C1_Init+0x50>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <MX_I2C1_Init+0x50>)
 80020da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <MX_I2C1_Init+0x50>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <MX_I2C1_Init+0x50>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <MX_I2C1_Init+0x50>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <MX_I2C1_Init+0x50>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020f8:	4804      	ldr	r0, [pc, #16]	; (800210c <MX_I2C1_Init+0x50>)
 80020fa:	f002 f891 	bl	8004220 <HAL_I2C_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002104:	f000 fbf8 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200002d8 	.word	0x200002d8
 8002110:	40005400 	.word	0x40005400
 8002114:	000186a0 	.word	0x000186a0

08002118 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b096      	sub	sp, #88	; 0x58
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
 8002144:	611a      	str	r2, [r3, #16]
 8002146:	615a      	str	r2, [r3, #20]
 8002148:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2220      	movs	r2, #32
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f005 fe75 	bl	8007e40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002156:	4b3e      	ldr	r3, [pc, #248]	; (8002250 <MX_TIM1_Init+0x138>)
 8002158:	4a3e      	ldr	r2, [pc, #248]	; (8002254 <MX_TIM1_Init+0x13c>)
 800215a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 800215c:	4b3c      	ldr	r3, [pc, #240]	; (8002250 <MX_TIM1_Init+0x138>)
 800215e:	2204      	movs	r2, #4
 8002160:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002162:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <MX_TIM1_Init+0x138>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25000-1;
 8002168:	4b39      	ldr	r3, [pc, #228]	; (8002250 <MX_TIM1_Init+0x138>)
 800216a:	f246 12a7 	movw	r2, #24999	; 0x61a7
 800216e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002170:	4b37      	ldr	r3, [pc, #220]	; (8002250 <MX_TIM1_Init+0x138>)
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002176:	4b36      	ldr	r3, [pc, #216]	; (8002250 <MX_TIM1_Init+0x138>)
 8002178:	2200      	movs	r2, #0
 800217a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217c:	4b34      	ldr	r3, [pc, #208]	; (8002250 <MX_TIM1_Init+0x138>)
 800217e:	2200      	movs	r2, #0
 8002180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002182:	4833      	ldr	r0, [pc, #204]	; (8002250 <MX_TIM1_Init+0x138>)
 8002184:	f002 fe28 	bl	8004dd8 <HAL_TIM_Base_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800218e:	f000 fbb3 	bl	80028f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002196:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002198:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800219c:	4619      	mov	r1, r3
 800219e:	482c      	ldr	r0, [pc, #176]	; (8002250 <MX_TIM1_Init+0x138>)
 80021a0:	f003 fd04 	bl	8005bac <HAL_TIM_ConfigClockSource>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80021aa:	f000 fba5 	bl	80028f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021ae:	4828      	ldr	r0, [pc, #160]	; (8002250 <MX_TIM1_Init+0x138>)
 80021b0:	f002 ff90 	bl	80050d4 <HAL_TIM_PWM_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80021ba:	f000 fb9d 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021ca:	4619      	mov	r1, r3
 80021cc:	4820      	ldr	r0, [pc, #128]	; (8002250 <MX_TIM1_Init+0x138>)
 80021ce:	f004 fa87 	bl	80066e0 <HAL_TIMEx_MasterConfigSynchronization>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80021d8:	f000 fb8e 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021dc:	2360      	movs	r3, #96	; 0x60
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021e8:	2300      	movs	r3, #0
 80021ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021f0:	2300      	movs	r3, #0
 80021f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021f4:	2300      	movs	r3, #0
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fc:	2200      	movs	r2, #0
 80021fe:	4619      	mov	r1, r3
 8002200:	4813      	ldr	r0, [pc, #76]	; (8002250 <MX_TIM1_Init+0x138>)
 8002202:	f003 fc11 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800220c:	f000 fb74 	bl	80028f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002228:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	4619      	mov	r1, r3
 8002232:	4807      	ldr	r0, [pc, #28]	; (8002250 <MX_TIM1_Init+0x138>)
 8002234:	f004 fac2 	bl	80067bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800223e:	f000 fb5b 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002242:	4803      	ldr	r0, [pc, #12]	; (8002250 <MX_TIM1_Init+0x138>)
 8002244:	f000 fcc4 	bl	8002bd0 <HAL_TIM_MspPostInit>

}
 8002248:	bf00      	nop
 800224a:	3758      	adds	r7, #88	; 0x58
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	2000032c 	.word	0x2000032c
 8002254:	40010000 	.word	0x40010000

08002258 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08c      	sub	sp, #48	; 0x30
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800225e:	f107 030c 	add.w	r3, r7, #12
 8002262:	2224      	movs	r2, #36	; 0x24
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f005 fdea 	bl	8007e40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <MX_TIM2_Init+0xa4>)
 8002276:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800227a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800227c:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <MX_TIM2_Init+0xa4>)
 800227e:	2200      	movs	r2, #0
 8002280:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002282:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <MX_TIM2_Init+0xa4>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002288:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <MX_TIM2_Init+0xa4>)
 800228a:	f04f 32ff 	mov.w	r2, #4294967295
 800228e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <MX_TIM2_Init+0xa4>)
 8002292:	2200      	movs	r2, #0
 8002294:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <MX_TIM2_Init+0xa4>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800229c:	2303      	movs	r3, #3
 800229e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022a4:	2301      	movs	r3, #1
 80022a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022b0:	2300      	movs	r3, #0
 80022b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022b4:	2301      	movs	r3, #1
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	4619      	mov	r1, r3
 80022c6:	480d      	ldr	r0, [pc, #52]	; (80022fc <MX_TIM2_Init+0xa4>)
 80022c8:	f003 f8e8 	bl	800549c <HAL_TIM_Encoder_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80022d2:	f000 fb11 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	4619      	mov	r1, r3
 80022e2:	4806      	ldr	r0, [pc, #24]	; (80022fc <MX_TIM2_Init+0xa4>)
 80022e4:	f004 f9fc 	bl	80066e0 <HAL_TIMEx_MasterConfigSynchronization>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80022ee:	f000 fb03 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022f2:	bf00      	nop
 80022f4:	3730      	adds	r7, #48	; 0x30
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200003e0 	.word	0x200003e0

08002300 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002306:	463b      	mov	r3, r7
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <MX_TIM9_Init+0x6c>)
 8002314:	4a16      	ldr	r2, [pc, #88]	; (8002370 <MX_TIM9_Init+0x70>)
 8002316:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <MX_TIM9_Init+0x6c>)
 800231a:	2263      	movs	r2, #99	; 0x63
 800231c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <MX_TIM9_Init+0x6c>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <MX_TIM9_Init+0x6c>)
 8002326:	f240 32e7 	movw	r2, #999	; 0x3e7
 800232a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <MX_TIM9_Init+0x6c>)
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <MX_TIM9_Init+0x6c>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002338:	480c      	ldr	r0, [pc, #48]	; (800236c <MX_TIM9_Init+0x6c>)
 800233a:	f002 fd4d 	bl	8004dd8 <HAL_TIM_Base_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002344:	f000 fad8 	bl	80028f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800234c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800234e:	463b      	mov	r3, r7
 8002350:	4619      	mov	r1, r3
 8002352:	4806      	ldr	r0, [pc, #24]	; (800236c <MX_TIM9_Init+0x6c>)
 8002354:	f003 fc2a 	bl	8005bac <HAL_TIM_ConfigClockSource>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800235e:	f000 facb 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000494 	.word	0x20000494
 8002370:	40014000 	.word	0x40014000

08002374 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
 8002388:	615a      	str	r2, [r3, #20]
 800238a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800238c:	4b21      	ldr	r3, [pc, #132]	; (8002414 <MX_TIM11_Init+0xa0>)
 800238e:	4a22      	ldr	r2, [pc, #136]	; (8002418 <MX_TIM11_Init+0xa4>)
 8002390:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <MX_TIM11_Init+0xa0>)
 8002394:	2263      	movs	r2, #99	; 0x63
 8002396:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002398:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <MX_TIM11_Init+0xa0>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <MX_TIM11_Init+0xa0>)
 80023a0:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80023a4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <MX_TIM11_Init+0xa0>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <MX_TIM11_Init+0xa0>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80023b2:	4818      	ldr	r0, [pc, #96]	; (8002414 <MX_TIM11_Init+0xa0>)
 80023b4:	f002 fd10 	bl	8004dd8 <HAL_TIM_Base_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80023be:	f000 fa9b 	bl	80028f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80023c2:	4814      	ldr	r0, [pc, #80]	; (8002414 <MX_TIM11_Init+0xa0>)
 80023c4:	f002 fe20 	bl	8005008 <HAL_TIM_OC_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80023ce:	f000 fa93 	bl	80028f8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 80023d2:	2108      	movs	r1, #8
 80023d4:	480f      	ldr	r0, [pc, #60]	; (8002414 <MX_TIM11_Init+0xa0>)
 80023d6:	f002 ff93 	bl	8005300 <HAL_TIM_OnePulse_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 80023e0:	f000 fa8a 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80023e4:	2310      	movs	r3, #16
 80023e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 80023e8:	f240 5399 	movw	r3, #1433	; 0x599
 80023ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	2200      	movs	r2, #0
 80023fa:	4619      	mov	r1, r3
 80023fc:	4805      	ldr	r0, [pc, #20]	; (8002414 <MX_TIM11_Init+0xa0>)
 80023fe:	f003 fab7 	bl	8005970 <HAL_TIM_OC_ConfigChannel>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8002408:	f000 fa76 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800240c:	bf00      	nop
 800240e:	3720      	adds	r7, #32
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000548 	.word	0x20000548
 8002418:	40014800 	.word	0x40014800

0800241c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <MX_USART1_UART_Init+0x4c>)
 8002422:	4a12      	ldr	r2, [pc, #72]	; (800246c <MX_USART1_UART_Init+0x50>)
 8002424:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <MX_USART1_UART_Init+0x4c>)
 8002428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800242c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <MX_USART1_UART_Init+0x4c>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <MX_USART1_UART_Init+0x4c>)
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <MX_USART1_UART_Init+0x4c>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <MX_USART1_UART_Init+0x4c>)
 8002442:	220c      	movs	r2, #12
 8002444:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <MX_USART1_UART_Init+0x4c>)
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <MX_USART1_UART_Init+0x4c>)
 800244e:	2200      	movs	r2, #0
 8002450:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002452:	4805      	ldr	r0, [pc, #20]	; (8002468 <MX_USART1_UART_Init+0x4c>)
 8002454:	f004 fa22 	bl	800689c <HAL_UART_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800245e:	f000 fa4b 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200005fc 	.word	0x200005fc
 800246c:	40011000 	.word	0x40011000

08002470 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <MX_USART2_UART_Init+0x50>)
 8002476:	4a13      	ldr	r2, [pc, #76]	; (80024c4 <MX_USART2_UART_Init+0x54>)
 8002478:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <MX_USART2_UART_Init+0x50>)
 800247c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002480:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002482:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <MX_USART2_UART_Init+0x50>)
 8002484:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002488:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <MX_USART2_UART_Init+0x50>)
 800248c:	2200      	movs	r2, #0
 800248e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <MX_USART2_UART_Init+0x50>)
 8002492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002496:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <MX_USART2_UART_Init+0x50>)
 800249a:	220c      	movs	r2, #12
 800249c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <MX_USART2_UART_Init+0x50>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <MX_USART2_UART_Init+0x50>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024aa:	4805      	ldr	r0, [pc, #20]	; (80024c0 <MX_USART2_UART_Init+0x50>)
 80024ac:	f004 f9f6 	bl	800689c <HAL_UART_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80024b6:	f000 fa1f 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000670 	.word	0x20000670
 80024c4:	40004400 	.word	0x40004400

080024c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <MX_DMA_Init+0x3c>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <MX_DMA_Init+0x3c>)
 80024d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <MX_DMA_Init+0x3c>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	2011      	movs	r0, #17
 80024f0:	f001 f8b3 	bl	800365a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80024f4:	2011      	movs	r0, #17
 80024f6:	f001 f8cc 	bl	8003692 <HAL_NVIC_EnableIRQ>

}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800

08002508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
 800251c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <MX_GPIO_Init+0x108>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a3a      	ldr	r2, [pc, #232]	; (8002610 <MX_GPIO_Init+0x108>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b38      	ldr	r3, [pc, #224]	; (8002610 <MX_GPIO_Init+0x108>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b34      	ldr	r3, [pc, #208]	; (8002610 <MX_GPIO_Init+0x108>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a33      	ldr	r2, [pc, #204]	; (8002610 <MX_GPIO_Init+0x108>)
 8002544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b31      	ldr	r3, [pc, #196]	; (8002610 <MX_GPIO_Init+0x108>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <MX_GPIO_Init+0x108>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a2c      	ldr	r2, [pc, #176]	; (8002610 <MX_GPIO_Init+0x108>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <MX_GPIO_Init+0x108>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	4b26      	ldr	r3, [pc, #152]	; (8002610 <MX_GPIO_Init+0x108>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a25      	ldr	r2, [pc, #148]	; (8002610 <MX_GPIO_Init+0x108>)
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b23      	ldr	r3, [pc, #140]	; (8002610 <MX_GPIO_Init+0x108>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 800258e:	2200      	movs	r2, #0
 8002590:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8002594:	481f      	ldr	r0, [pc, #124]	; (8002614 <MX_GPIO_Init+0x10c>)
 8002596:	f001 fe29 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800259a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800259e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	4619      	mov	r1, r3
 80025b0:	4819      	ldr	r0, [pc, #100]	; (8002618 <MX_GPIO_Init+0x110>)
 80025b2:	f001 fc97 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025b6:	230c      	movs	r3, #12
 80025b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4619      	mov	r1, r3
 80025ca:	4813      	ldr	r0, [pc, #76]	; (8002618 <MX_GPIO_Init+0x110>)
 80025cc:	f001 fc8a 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 80025d0:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80025d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d6:	2301      	movs	r3, #1
 80025d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e2:	f107 0314 	add.w	r3, r7, #20
 80025e6:	4619      	mov	r1, r3
 80025e8:	480a      	ldr	r0, [pc, #40]	; (8002614 <MX_GPIO_Init+0x10c>)
 80025ea:	f001 fc7b 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	4806      	ldr	r0, [pc, #24]	; (800261c <MX_GPIO_Init+0x114>)
 8002604:	f001 fc6e 	bl	8003ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002608:	bf00      	nop
 800260a:	3728      	adds	r7, #40	; 0x28
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40023800 	.word	0x40023800
 8002614:	40020000 	.word	0x40020000
 8002618:	40020800 	.word	0x40020800
 800261c:	40020400 	.word	0x40020400

08002620 <getRawPosition>:
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, voltage * 25000.0 / 12.0);
}

int32_t getRawPosition() {
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <getRawPosition+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	200003e0 	.word	0x200003e0

08002638 <modbus_heartbeat_handler>:

void modbus_heartbeat_handler() {
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
	static int8_t fail = 0;
	static uint32_t timestamp = 0;
	if (HAL_GetTick() >= timestamp) {
 800263c:	f000 fcb4 	bl	8002fa8 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <modbus_heartbeat_handler+0x70>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d32c      	bcc.n	80026a4 <modbus_heartbeat_handler+0x6c>
		timestamp = HAL_GetTick() + 200;
 800264a:	f000 fcad 	bl	8002fa8 <HAL_GetTick>
 800264e:	4603      	mov	r3, r0
 8002650:	33c8      	adds	r3, #200	; 0xc8
 8002652:	4a15      	ldr	r2, [pc, #84]	; (80026a8 <modbus_heartbeat_handler+0x70>)
 8002654:	6013      	str	r3, [r2, #0]

		// check if the base system send heartbeat
		if (registerFrame[0].U16 == 18537) {
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <modbus_heartbeat_handler+0x74>)
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	f644 0269 	movw	r2, #18537	; 0x4869
 800265e:	4293      	cmp	r3, r2
 8002660:	d106      	bne.n	8002670 <modbus_heartbeat_handler+0x38>
			// success
			heartbeat = 1;
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <modbus_heartbeat_handler+0x78>)
 8002664:	2201      	movs	r2, #1
 8002666:	801a      	strh	r2, [r3, #0]
			fail = 0;
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <modbus_heartbeat_handler+0x7c>)
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	e015      	b.n	800269c <modbus_heartbeat_handler+0x64>
		} else {
			// fail, count failure
			if (fail < 126) {
 8002670:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <modbus_heartbeat_handler+0x7c>)
 8002672:	f993 3000 	ldrsb.w	r3, [r3]
 8002676:	2b7d      	cmp	r3, #125	; 0x7d
 8002678:	dc08      	bgt.n	800268c <modbus_heartbeat_handler+0x54>
				fail++;
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <modbus_heartbeat_handler+0x7c>)
 800267c:	f993 3000 	ldrsb.w	r3, [r3]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	3301      	adds	r3, #1
 8002684:	b2db      	uxtb	r3, r3
 8002686:	b25a      	sxtb	r2, r3
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <modbus_heartbeat_handler+0x7c>)
 800268a:	701a      	strb	r2, [r3, #0]
			}
			// if fail is too high then system is disconnected
			if (fail > 9) {
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <modbus_heartbeat_handler+0x7c>)
 800268e:	f993 3000 	ldrsb.w	r3, [r3]
 8002692:	2b09      	cmp	r3, #9
 8002694:	dd02      	ble.n	800269c <modbus_heartbeat_handler+0x64>
				heartbeat = 0;
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <modbus_heartbeat_handler+0x78>)
 8002698:	2200      	movs	r2, #0
 800269a:	801a      	strh	r2, [r3, #0]
			}
		}

		// set heartbeat for base system to see
		registerFrame[0].U16 = 22881;
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <modbus_heartbeat_handler+0x74>)
 800269e:	f645 1261 	movw	r2, #22881	; 0x5961
 80026a2:	801a      	strh	r2, [r3, #0]
	}
}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000d44 	.word	0x20000d44
 80026ac:	20000c8c 	.word	0x20000c8c
 80026b0:	20000d3c 	.word	0x20000d3c
 80026b4:	20000d48 	.word	0x20000d48

080026b8 <modbus_data_sync>:

void modbus_data_sync() {
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
	// report data back to base system
	registerFrame[0x10].U16 = y_moving_status;
 80026bc:	4b74      	ldr	r3, [pc, #464]	; (8002890 <modbus_data_sync+0x1d8>)
 80026be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	4b73      	ldr	r3, [pc, #460]	; (8002894 <modbus_data_sync+0x1dc>)
 80026c6:	841a      	strh	r2, [r3, #32]
	registerFrame[0x11].U16 = y_actual_position;
 80026c8:	4b73      	ldr	r3, [pc, #460]	; (8002898 <modbus_data_sync+0x1e0>)
 80026ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	4b70      	ldr	r3, [pc, #448]	; (8002894 <modbus_data_sync+0x1dc>)
 80026d2:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[0x12].U16 = y_actual_speed;
 80026d4:	4b71      	ldr	r3, [pc, #452]	; (800289c <modbus_data_sync+0x1e4>)
 80026d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026da:	b29a      	uxth	r2, r3
 80026dc:	4b6d      	ldr	r3, [pc, #436]	; (8002894 <modbus_data_sync+0x1dc>)
 80026de:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[0x13].U16 = y_actual_acceleration;
 80026e0:	4b6f      	ldr	r3, [pc, #444]	; (80028a0 <modbus_data_sync+0x1e8>)
 80026e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	4b6a      	ldr	r3, [pc, #424]	; (8002894 <modbus_data_sync+0x1dc>)
 80026ea:	84da      	strh	r2, [r3, #38]	; 0x26
	registerFrame[0x20].U16 = pick_tray_origin_x;
 80026ec:	4b6d      	ldr	r3, [pc, #436]	; (80028a4 <modbus_data_sync+0x1ec>)
 80026ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	4b67      	ldr	r3, [pc, #412]	; (8002894 <modbus_data_sync+0x1dc>)
 80026f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	registerFrame[0x21].U16 = pick_tray_origin_y;
 80026fa:	4b6b      	ldr	r3, [pc, #428]	; (80028a8 <modbus_data_sync+0x1f0>)
 80026fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002700:	b29a      	uxth	r2, r3
 8002702:	4b64      	ldr	r3, [pc, #400]	; (8002894 <modbus_data_sync+0x1dc>)
 8002704:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	registerFrame[0x22].U16 = pick_tray_orientation;
 8002708:	4b68      	ldr	r3, [pc, #416]	; (80028ac <modbus_data_sync+0x1f4>)
 800270a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270e:	b29a      	uxth	r2, r3
 8002710:	4b60      	ldr	r3, [pc, #384]	; (8002894 <modbus_data_sync+0x1dc>)
 8002712:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	registerFrame[0x23].U16 = place_tray_origin_x;
 8002716:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <modbus_data_sync+0x1f8>)
 8002718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800271c:	b29a      	uxth	r2, r3
 800271e:	4b5d      	ldr	r3, [pc, #372]	; (8002894 <modbus_data_sync+0x1dc>)
 8002720:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	registerFrame[0x24].U16 = place_tray_origin_y;
 8002724:	4b63      	ldr	r3, [pc, #396]	; (80028b4 <modbus_data_sync+0x1fc>)
 8002726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800272a:	b29a      	uxth	r2, r3
 800272c:	4b59      	ldr	r3, [pc, #356]	; (8002894 <modbus_data_sync+0x1dc>)
 800272e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	registerFrame[0x25].U16 = place_tray_orientation;
 8002732:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <modbus_data_sync+0x200>)
 8002734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002738:	b29a      	uxth	r2, r3
 800273a:	4b56      	ldr	r3, [pc, #344]	; (8002894 <modbus_data_sync+0x1dc>)
 800273c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	registerFrame[0x41].U16 = x_target_position;
 8002740:	4b5e      	ldr	r3, [pc, #376]	; (80028bc <modbus_data_sync+0x204>)
 8002742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002746:	b29a      	uxth	r2, r3
 8002748:	4b52      	ldr	r3, [pc, #328]	; (8002894 <modbus_data_sync+0x1dc>)
 800274a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	registerFrame[0x42].U16 = x_target_speed;
 800274e:	4b5c      	ldr	r3, [pc, #368]	; (80028c0 <modbus_data_sync+0x208>)
 8002750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002754:	b29a      	uxth	r2, r3
 8002756:	4b4f      	ldr	r3, [pc, #316]	; (8002894 <modbus_data_sync+0x1dc>)
 8002758:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	registerFrame[0x43].U16 = x_target_acceleration_time;
 800275c:	4b59      	ldr	r3, [pc, #356]	; (80028c4 <modbus_data_sync+0x20c>)
 800275e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002762:	b29a      	uxth	r2, r3
 8002764:	4b4b      	ldr	r3, [pc, #300]	; (8002894 <modbus_data_sync+0x1dc>)
 8002766:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

	// get data from base system
	goal_point_x = registerFrame[0x30].U16;
 800276a:	4b4a      	ldr	r3, [pc, #296]	; (8002894 <modbus_data_sync+0x1dc>)
 800276c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002770:	b21a      	sxth	r2, r3
 8002772:	4b55      	ldr	r3, [pc, #340]	; (80028c8 <modbus_data_sync+0x210>)
 8002774:	801a      	strh	r2, [r3, #0]
	goal_point_y = registerFrame[0x31].U16;
 8002776:	4b47      	ldr	r3, [pc, #284]	; (8002894 <modbus_data_sync+0x1dc>)
 8002778:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800277c:	b21a      	sxth	r2, r3
 800277e:	4b53      	ldr	r3, [pc, #332]	; (80028cc <modbus_data_sync+0x214>)
 8002780:	801a      	strh	r2, [r3, #0]
	x_actual_position = registerFrame[0x44].U16;
 8002782:	4b44      	ldr	r3, [pc, #272]	; (8002894 <modbus_data_sync+0x1dc>)
 8002784:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002788:	b21a      	sxth	r2, r3
 800278a:	4b51      	ldr	r3, [pc, #324]	; (80028d0 <modbus_data_sync+0x218>)
 800278c:	801a      	strh	r2, [r3, #0]
	x_actual_speed = registerFrame[0x45].U16;
 800278e:	4b41      	ldr	r3, [pc, #260]	; (8002894 <modbus_data_sync+0x1dc>)
 8002790:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002794:	b21a      	sxth	r2, r3
 8002796:	4b4f      	ldr	r3, [pc, #316]	; (80028d4 <modbus_data_sync+0x21c>)
 8002798:	801a      	strh	r2, [r3, #0]

	static int16_t base_system_status_master_temp;
	if (base_system_status_master_temp != registerFrame[0x01].U16) {
 800279a:	4b4f      	ldr	r3, [pc, #316]	; (80028d8 <modbus_data_sync+0x220>)
 800279c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b3c      	ldr	r3, [pc, #240]	; (8002894 <modbus_data_sync+0x1dc>)
 80027a4:	885b      	ldrh	r3, [r3, #2]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d009      	beq.n	80027be <modbus_data_sync+0x106>
		base_system_status = registerFrame[0x01].U16;
 80027aa:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <modbus_data_sync+0x1dc>)
 80027ac:	885b      	ldrh	r3, [r3, #2]
 80027ae:	b21a      	sxth	r2, r3
 80027b0:	4b4a      	ldr	r3, [pc, #296]	; (80028dc <modbus_data_sync+0x224>)
 80027b2:	801a      	strh	r2, [r3, #0]
		base_system_status_master_temp = base_system_status;
 80027b4:	4b49      	ldr	r3, [pc, #292]	; (80028dc <modbus_data_sync+0x224>)
 80027b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027ba:	4b47      	ldr	r3, [pc, #284]	; (80028d8 <modbus_data_sync+0x220>)
 80027bc:	801a      	strh	r2, [r3, #0]
	}

	// update read/write variable
	static int16_t end_effector_status_slave_temp;
	static int16_t end_effector_status_master_temp;
	if (end_effector_status_master_temp != registerFrame[0x02].U16) {
 80027be:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <modbus_data_sync+0x228>)
 80027c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b33      	ldr	r3, [pc, #204]	; (8002894 <modbus_data_sync+0x1dc>)
 80027c8:	889b      	ldrh	r3, [r3, #4]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d00f      	beq.n	80027ee <modbus_data_sync+0x136>
		// there is an update from master
		end_effector_status = registerFrame[0x02].U16;
 80027ce:	4b31      	ldr	r3, [pc, #196]	; (8002894 <modbus_data_sync+0x1dc>)
 80027d0:	889b      	ldrh	r3, [r3, #4]
 80027d2:	b21a      	sxth	r2, r3
 80027d4:	4b43      	ldr	r3, [pc, #268]	; (80028e4 <modbus_data_sync+0x22c>)
 80027d6:	801a      	strh	r2, [r3, #0]
		end_effector_status_master_temp = end_effector_status;
 80027d8:	4b42      	ldr	r3, [pc, #264]	; (80028e4 <modbus_data_sync+0x22c>)
 80027da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027de:	4b40      	ldr	r3, [pc, #256]	; (80028e0 <modbus_data_sync+0x228>)
 80027e0:	801a      	strh	r2, [r3, #0]
		end_effector_status_slave_temp = end_effector_status;
 80027e2:	4b40      	ldr	r3, [pc, #256]	; (80028e4 <modbus_data_sync+0x22c>)
 80027e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027e8:	4b3f      	ldr	r3, [pc, #252]	; (80028e8 <modbus_data_sync+0x230>)
 80027ea:	801a      	strh	r2, [r3, #0]
 80027ec:	e017      	b.n	800281e <modbus_data_sync+0x166>
	} else if (end_effector_status_slave_temp != end_effector_status) {
 80027ee:	4b3e      	ldr	r3, [pc, #248]	; (80028e8 <modbus_data_sync+0x230>)
 80027f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027f4:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <modbus_data_sync+0x22c>)
 80027f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d00f      	beq.n	800281e <modbus_data_sync+0x166>
		// there is an update locally
		registerFrame[0x02].U16 = end_effector_status;
 80027fe:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <modbus_data_sync+0x22c>)
 8002800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002804:	b29a      	uxth	r2, r3
 8002806:	4b23      	ldr	r3, [pc, #140]	; (8002894 <modbus_data_sync+0x1dc>)
 8002808:	809a      	strh	r2, [r3, #4]
		end_effector_status_slave_temp = end_effector_status;
 800280a:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <modbus_data_sync+0x22c>)
 800280c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002810:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <modbus_data_sync+0x230>)
 8002812:	801a      	strh	r2, [r3, #0]
		end_effector_status_master_temp = end_effector_status;
 8002814:	4b33      	ldr	r3, [pc, #204]	; (80028e4 <modbus_data_sync+0x22c>)
 8002816:	f9b3 2000 	ldrsh.w	r2, [r3]
 800281a:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <modbus_data_sync+0x228>)
 800281c:	801a      	strh	r2, [r3, #0]
	}
	static int16_t x_moving_status_slave_temp;
	static int16_t x_moving_status_master_temp;
	if (x_moving_status_master_temp != registerFrame[0x40].U16) {
 800281e:	4b33      	ldr	r3, [pc, #204]	; (80028ec <modbus_data_sync+0x234>)
 8002820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002824:	461a      	mov	r2, r3
 8002826:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <modbus_data_sync+0x1dc>)
 8002828:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800282c:	429a      	cmp	r2, r3
 800282e:	d010      	beq.n	8002852 <modbus_data_sync+0x19a>
		// there is an update from master
		x_moving_status = registerFrame[0x40].U16;
 8002830:	4b18      	ldr	r3, [pc, #96]	; (8002894 <modbus_data_sync+0x1dc>)
 8002832:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002836:	b21a      	sxth	r2, r3
 8002838:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <modbus_data_sync+0x238>)
 800283a:	801a      	strh	r2, [r3, #0]
		x_moving_status_master_temp = x_moving_status;
 800283c:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <modbus_data_sync+0x238>)
 800283e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002842:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <modbus_data_sync+0x234>)
 8002844:	801a      	strh	r2, [r3, #0]
		x_moving_status_slave_temp = x_moving_status;
 8002846:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <modbus_data_sync+0x238>)
 8002848:	f9b3 2000 	ldrsh.w	r2, [r3]
 800284c:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <modbus_data_sync+0x23c>)
 800284e:	801a      	strh	r2, [r3, #0]
		// there is an update locally
		registerFrame[0x40].U16 = x_moving_status;
		x_moving_status_slave_temp = x_moving_status;
		x_moving_status_master_temp = x_moving_status;
	}
}
 8002850:	e018      	b.n	8002884 <modbus_data_sync+0x1cc>
	} else if (x_moving_status_slave_temp != x_moving_status) {
 8002852:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <modbus_data_sync+0x23c>)
 8002854:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002858:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <modbus_data_sync+0x238>)
 800285a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800285e:	429a      	cmp	r2, r3
 8002860:	d010      	beq.n	8002884 <modbus_data_sync+0x1cc>
		registerFrame[0x40].U16 = x_moving_status;
 8002862:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <modbus_data_sync+0x238>)
 8002864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002868:	b29a      	uxth	r2, r3
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <modbus_data_sync+0x1dc>)
 800286c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		x_moving_status_slave_temp = x_moving_status;
 8002870:	4b1f      	ldr	r3, [pc, #124]	; (80028f0 <modbus_data_sync+0x238>)
 8002872:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002876:	4b1f      	ldr	r3, [pc, #124]	; (80028f4 <modbus_data_sync+0x23c>)
 8002878:	801a      	strh	r2, [r3, #0]
		x_moving_status_master_temp = x_moving_status;
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <modbus_data_sync+0x238>)
 800287c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <modbus_data_sync+0x234>)
 8002882:	801a      	strh	r2, [r3, #0]
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20000d22 	.word	0x20000d22
 8002894:	20000c8c 	.word	0x20000c8c
 8002898:	20000d24 	.word	0x20000d24
 800289c:	20000d26 	.word	0x20000d26
 80028a0:	20000d28 	.word	0x20000d28
 80028a4:	20000d2a 	.word	0x20000d2a
 80028a8:	20000d2c 	.word	0x20000d2c
 80028ac:	20000d2e 	.word	0x20000d2e
 80028b0:	20000d30 	.word	0x20000d30
 80028b4:	20000d32 	.word	0x20000d32
 80028b8:	20000d34 	.word	0x20000d34
 80028bc:	20000d36 	.word	0x20000d36
 80028c0:	20000d38 	.word	0x20000d38
 80028c4:	20000d3a 	.word	0x20000d3a
 80028c8:	20000d1a 	.word	0x20000d1a
 80028cc:	20000d1c 	.word	0x20000d1c
 80028d0:	20000d1e 	.word	0x20000d1e
 80028d4:	20000d20 	.word	0x20000d20
 80028d8:	20000d4a 	.word	0x20000d4a
 80028dc:	20000d18 	.word	0x20000d18
 80028e0:	20000d4c 	.word	0x20000d4c
 80028e4:	20000d3e 	.word	0x20000d3e
 80028e8:	20000d4e 	.word	0x20000d4e
 80028ec:	20000d50 	.word	0x20000d50
 80028f0:	20000d40 	.word	0x20000d40
 80028f4:	20000d52 	.word	0x20000d52

080028f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028fc:	b672      	cpsid	i
}
 80028fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002900:	e7fe      	b.n	8002900 <Error_Handler+0x8>
	...

08002904 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_MspInit+0x4c>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <HAL_MspInit+0x4c>)
 8002914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002918:	6453      	str	r3, [r2, #68]	; 0x44
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_MspInit+0x4c>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_MspInit+0x4c>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_MspInit+0x4c>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002934:	6413      	str	r3, [r2, #64]	; 0x40
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_MspInit+0x4c>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002942:	2007      	movs	r0, #7
 8002944:	f000 fe7e 	bl	8003644 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800

08002954 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	; 0x28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <HAL_ADC_MspInit+0x7c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d127      	bne.n	80029c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <HAL_ADC_MspInit+0x80>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <HAL_ADC_MspInit+0x80>)
 8002980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002984:	6453      	str	r3, [r2, #68]	; 0x44
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <HAL_ADC_MspInit+0x80>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <HAL_ADC_MspInit+0x80>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a0e      	ldr	r2, [pc, #56]	; (80029d4 <HAL_ADC_MspInit+0x80>)
 800299c:	f043 0304 	orr.w	r3, r3, #4
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <HAL_ADC_MspInit+0x80>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029ae:	2303      	movs	r3, #3
 80029b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029b2:	2303      	movs	r3, #3
 80029b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ba:	f107 0314 	add.w	r3, r7, #20
 80029be:	4619      	mov	r1, r3
 80029c0:	4805      	ldr	r0, [pc, #20]	; (80029d8 <HAL_ADC_MspInit+0x84>)
 80029c2:	f001 fa8f 	bl	8003ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029c6:	bf00      	nop
 80029c8:	3728      	adds	r7, #40	; 0x28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40012000 	.word	0x40012000
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40020800 	.word	0x40020800

080029dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a19      	ldr	r2, [pc, #100]	; (8002a60 <HAL_I2C_MspInit+0x84>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d12b      	bne.n	8002a56 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	4b18      	ldr	r3, [pc, #96]	; (8002a64 <HAL_I2C_MspInit+0x88>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <HAL_I2C_MspInit+0x88>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <HAL_I2C_MspInit+0x88>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a1a:	23c0      	movs	r3, #192	; 0xc0
 8002a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a1e:	2312      	movs	r3, #18
 8002a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a26:	2303      	movs	r3, #3
 8002a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	480c      	ldr	r0, [pc, #48]	; (8002a68 <HAL_I2C_MspInit+0x8c>)
 8002a36:	f001 fa55 	bl	8003ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <HAL_I2C_MspInit+0x88>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <HAL_I2C_MspInit+0x88>)
 8002a44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a48:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_I2C_MspInit+0x88>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a56:	bf00      	nop
 8002a58:	3728      	adds	r7, #40	; 0x28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40005400 	.word	0x40005400
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40020400 	.word	0x40020400

08002a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a2e      	ldr	r2, [pc, #184]	; (8002b34 <HAL_TIM_Base_MspInit+0xc8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d11e      	bne.n	8002abc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	4b2d      	ldr	r3, [pc, #180]	; (8002b38 <HAL_TIM_Base_MspInit+0xcc>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	4a2c      	ldr	r2, [pc, #176]	; (8002b38 <HAL_TIM_Base_MspInit+0xcc>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <HAL_TIM_Base_MspInit+0xcc>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	2018      	movs	r0, #24
 8002aa0:	f000 fddb 	bl	800365a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002aa4:	2018      	movs	r0, #24
 8002aa6:	f000 fdf4 	bl	8003692 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2100      	movs	r1, #0
 8002aae:	201a      	movs	r0, #26
 8002ab0:	f000 fdd3 	bl	800365a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002ab4:	201a      	movs	r0, #26
 8002ab6:	f000 fdec 	bl	8003692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002aba:	e036      	b.n	8002b2a <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM9)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1e      	ldr	r2, [pc, #120]	; (8002b3c <HAL_TIM_Base_MspInit+0xd0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d116      	bne.n	8002af4 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <HAL_TIM_Base_MspInit+0xcc>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	4a1a      	ldr	r2, [pc, #104]	; (8002b38 <HAL_TIM_Base_MspInit+0xcc>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <HAL_TIM_Base_MspInit+0xcc>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2018      	movs	r0, #24
 8002ae8:	f000 fdb7 	bl	800365a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002aec:	2018      	movs	r0, #24
 8002aee:	f000 fdd0 	bl	8003692 <HAL_NVIC_EnableIRQ>
}
 8002af2:	e01a      	b.n	8002b2a <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM11)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a11      	ldr	r2, [pc, #68]	; (8002b40 <HAL_TIM_Base_MspInit+0xd4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d115      	bne.n	8002b2a <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <HAL_TIM_Base_MspInit+0xcc>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <HAL_TIM_Base_MspInit+0xcc>)
 8002b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_TIM_Base_MspInit+0xcc>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	201a      	movs	r0, #26
 8002b20:	f000 fd9b 	bl	800365a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002b24:	201a      	movs	r0, #26
 8002b26:	f000 fdb4 	bl	8003692 <HAL_NVIC_EnableIRQ>
}
 8002b2a:	bf00      	nop
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40010000 	.word	0x40010000
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40014000 	.word	0x40014000
 8002b40:	40014800 	.word	0x40014800

08002b44 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	; 0x28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b64:	d12b      	bne.n	8002bbe <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	4a16      	ldr	r2, [pc, #88]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6413      	str	r3, [r2, #64]	; 0x40
 8002b76:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a0f      	ldr	r2, [pc, #60]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4804      	ldr	r0, [pc, #16]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x88>)
 8002bba:	f001 f993 	bl	8003ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002bbe:	bf00      	nop
 8002bc0:	3728      	adds	r7, #40	; 0x28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40020000 	.word	0x40020000

08002bd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 030c 	add.w	r3, r7, #12
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <HAL_TIM_MspPostInit+0x68>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d11e      	bne.n	8002c30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <HAL_TIM_MspPostInit+0x6c>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	4a10      	ldr	r2, [pc, #64]	; (8002c3c <HAL_TIM_MspPostInit+0x6c>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6313      	str	r3, [r2, #48]	; 0x30
 8002c02:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <HAL_TIM_MspPostInit+0x6c>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c20:	2301      	movs	r3, #1
 8002c22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c24:	f107 030c 	add.w	r3, r7, #12
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4805      	ldr	r0, [pc, #20]	; (8002c40 <HAL_TIM_MspPostInit+0x70>)
 8002c2c:	f001 f95a 	bl	8003ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c30:	bf00      	nop
 8002c32:	3720      	adds	r7, #32
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40010000 	.word	0x40010000
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40020000 	.word	0x40020000

08002c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08c      	sub	sp, #48	; 0x30
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4c:	f107 031c 	add.w	r3, r7, #28
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a4d      	ldr	r2, [pc, #308]	; (8002d98 <HAL_UART_MspInit+0x154>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d12d      	bne.n	8002cc2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	4b4c      	ldr	r3, [pc, #304]	; (8002d9c <HAL_UART_MspInit+0x158>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	4a4b      	ldr	r2, [pc, #300]	; (8002d9c <HAL_UART_MspInit+0x158>)
 8002c70:	f043 0310 	orr.w	r3, r3, #16
 8002c74:	6453      	str	r3, [r2, #68]	; 0x44
 8002c76:	4b49      	ldr	r3, [pc, #292]	; (8002d9c <HAL_UART_MspInit+0x158>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	61bb      	str	r3, [r7, #24]
 8002c80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	4b45      	ldr	r3, [pc, #276]	; (8002d9c <HAL_UART_MspInit+0x158>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4a44      	ldr	r2, [pc, #272]	; (8002d9c <HAL_UART_MspInit+0x158>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b42      	ldr	r3, [pc, #264]	; (8002d9c <HAL_UART_MspInit+0x158>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cac:	2303      	movs	r3, #3
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cb0:	2307      	movs	r3, #7
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb4:	f107 031c 	add.w	r3, r7, #28
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4839      	ldr	r0, [pc, #228]	; (8002da0 <HAL_UART_MspInit+0x15c>)
 8002cbc:	f001 f912 	bl	8003ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cc0:	e066      	b.n	8002d90 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a37      	ldr	r2, [pc, #220]	; (8002da4 <HAL_UART_MspInit+0x160>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d161      	bne.n	8002d90 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ccc:	2300      	movs	r3, #0
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	4b32      	ldr	r3, [pc, #200]	; (8002d9c <HAL_UART_MspInit+0x158>)
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	4a31      	ldr	r2, [pc, #196]	; (8002d9c <HAL_UART_MspInit+0x158>)
 8002cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cda:	6413      	str	r3, [r2, #64]	; 0x40
 8002cdc:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <HAL_UART_MspInit+0x158>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <HAL_UART_MspInit+0x158>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	4a2a      	ldr	r2, [pc, #168]	; (8002d9c <HAL_UART_MspInit+0x158>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf8:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <HAL_UART_MspInit+0x158>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d04:	230c      	movs	r3, #12
 8002d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d10:	2303      	movs	r3, #3
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d14:	2307      	movs	r3, #7
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d18:	f107 031c 	add.w	r3, r7, #28
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4820      	ldr	r0, [pc, #128]	; (8002da0 <HAL_UART_MspInit+0x15c>)
 8002d20:	f001 f8e0 	bl	8003ee4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002d24:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <HAL_UART_MspInit+0x164>)
 8002d26:	4a21      	ldr	r2, [pc, #132]	; (8002dac <HAL_UART_MspInit+0x168>)
 8002d28:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002d2a:	4b1f      	ldr	r3, [pc, #124]	; (8002da8 <HAL_UART_MspInit+0x164>)
 8002d2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d30:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d32:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_UART_MspInit+0x164>)
 8002d34:	2240      	movs	r2, #64	; 0x40
 8002d36:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_UART_MspInit+0x164>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d3e:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <HAL_UART_MspInit+0x164>)
 8002d40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d44:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d46:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <HAL_UART_MspInit+0x164>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d4c:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_UART_MspInit+0x164>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <HAL_UART_MspInit+0x164>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <HAL_UART_MspInit+0x164>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_UART_MspInit+0x164>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002d64:	4810      	ldr	r0, [pc, #64]	; (8002da8 <HAL_UART_MspInit+0x164>)
 8002d66:	f000 fcaf 	bl	80036c8 <HAL_DMA_Init>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8002d70:	f7ff fdc2 	bl	80028f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <HAL_UART_MspInit+0x164>)
 8002d78:	635a      	str	r2, [r3, #52]	; 0x34
 8002d7a:	4a0b      	ldr	r2, [pc, #44]	; (8002da8 <HAL_UART_MspInit+0x164>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2100      	movs	r1, #0
 8002d84:	2026      	movs	r0, #38	; 0x26
 8002d86:	f000 fc68 	bl	800365a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d8a:	2026      	movs	r0, #38	; 0x26
 8002d8c:	f000 fc81 	bl	8003692 <HAL_NVIC_EnableIRQ>
}
 8002d90:	bf00      	nop
 8002d92:	3730      	adds	r7, #48	; 0x30
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40011000 	.word	0x40011000
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40020000 	.word	0x40020000
 8002da4:	40004400 	.word	0x40004400
 8002da8:	200006e4 	.word	0x200006e4
 8002dac:	400260a0 	.word	0x400260a0

08002db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002db4:	e7fe      	b.n	8002db4 <NMI_Handler+0x4>

08002db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dba:	e7fe      	b.n	8002dba <HardFault_Handler+0x4>

08002dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <MemManage_Handler+0x4>

08002dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dc6:	e7fe      	b.n	8002dc6 <BusFault_Handler+0x4>

08002dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <UsageFault_Handler+0x4>

08002dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dfc:	f000 f8c0 	bl	8002f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <DMA1_Stream6_IRQHandler+0x10>)
 8002e0a:	f000 fdf5 	bl	80039f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	200006e4 	.word	0x200006e4

08002e18 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e1c:	4803      	ldr	r0, [pc, #12]	; (8002e2c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002e1e:	f002 fc7f 	bl	8005720 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002e22:	4803      	ldr	r0, [pc, #12]	; (8002e30 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002e24:	f002 fc7c 	bl	8005720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	2000032c 	.word	0x2000032c
 8002e30:	20000494 	.word	0x20000494

08002e34 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e38:	4803      	ldr	r0, [pc, #12]	; (8002e48 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002e3a:	f002 fc71 	bl	8005720 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002e3e:	4803      	ldr	r0, [pc, #12]	; (8002e4c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002e40:	f002 fc6e 	bl	8005720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	2000032c 	.word	0x2000032c
 8002e4c:	20000548 	.word	0x20000548

08002e50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <USART2_IRQHandler+0x10>)
 8002e56:	f003 ff75 	bl	8006d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000670 	.word	0x20000670

08002e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <SystemInit+0x20>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <SystemInit+0x20>)
 8002e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ec0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e8c:	480d      	ldr	r0, [pc, #52]	; (8002ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e8e:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e90:	4a0e      	ldr	r2, [pc, #56]	; (8002ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e94:	e002      	b.n	8002e9c <LoopCopyDataInit>

08002e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e9a:	3304      	adds	r3, #4

08002e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea0:	d3f9      	bcc.n	8002e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ea2:	4a0b      	ldr	r2, [pc, #44]	; (8002ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ea4:	4c0b      	ldr	r4, [pc, #44]	; (8002ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea8:	e001      	b.n	8002eae <LoopFillZerobss>

08002eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eac:	3204      	adds	r2, #4

08002eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb0:	d3fb      	bcc.n	8002eaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002eb2:	f7ff ffd7 	bl	8002e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eb6:	f004 ff91 	bl	8007ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eba:	f7fe ffc5 	bl	8001e48 <main>
  bx  lr    
 8002ebe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ec8:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8002ecc:	08009710 	.word	0x08009710
  ldr r2, =_sbss
 8002ed0:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8002ed4:	20000d58 	.word	0x20000d58

08002ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ed8:	e7fe      	b.n	8002ed8 <ADC_IRQHandler>
	...

08002edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <HAL_Init+0x40>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <HAL_Init+0x40>)
 8002ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_Init+0x40>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <HAL_Init+0x40>)
 8002ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef8:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <HAL_Init+0x40>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <HAL_Init+0x40>)
 8002efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f04:	2003      	movs	r0, #3
 8002f06:	f000 fb9d 	bl	8003644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f000 f808 	bl	8002f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f10:	f7ff fcf8 	bl	8002904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00

08002f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_InitTick+0x54>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <HAL_InitTick+0x58>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	4619      	mov	r1, r3
 8002f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fbb5 	bl	80036ae <HAL_SYSTICK_Config>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e00e      	b.n	8002f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b0f      	cmp	r3, #15
 8002f52:	d80a      	bhi.n	8002f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f54:	2200      	movs	r2, #0
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5c:	f000 fb7d 	bl	800365a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f60:	4a06      	ldr	r2, [pc, #24]	; (8002f7c <HAL_InitTick+0x5c>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e000      	b.n	8002f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000200 	.word	0x20000200
 8002f78:	20000208 	.word	0x20000208
 8002f7c:	20000204 	.word	0x20000204

08002f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_IncTick+0x20>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_IncTick+0x24>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4413      	add	r3, r2
 8002f90:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <HAL_IncTick+0x24>)
 8002f92:	6013      	str	r3, [r2, #0]
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000208 	.word	0x20000208
 8002fa4:	20000d54 	.word	0x20000d54

08002fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return uwTick;
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <HAL_GetTick+0x14>)
 8002fae:	681b      	ldr	r3, [r3, #0]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000d54 	.word	0x20000d54

08002fc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e033      	b.n	800303e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fcb8 	bl	8002954 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d118      	bne.n	8003030 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003006:	f023 0302 	bic.w	r3, r3, #2
 800300a:	f043 0202 	orr.w	r2, r3, #2
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f94a 	bl	80032ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f023 0303 	bic.w	r3, r3, #3
 8003026:	f043 0201 	orr.w	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
 800302e:	e001      	b.n	8003034 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x1c>
 8003060:	2302      	movs	r3, #2
 8003062:	e113      	b.n	800328c <HAL_ADC_ConfigChannel+0x244>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b09      	cmp	r3, #9
 8003072:	d925      	bls.n	80030c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68d9      	ldr	r1, [r3, #12]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	4613      	mov	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4413      	add	r3, r2
 8003088:	3b1e      	subs	r3, #30
 800308a:	2207      	movs	r2, #7
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43da      	mvns	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	400a      	ands	r2, r1
 8003098:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68d9      	ldr	r1, [r3, #12]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	4618      	mov	r0, r3
 80030ac:	4603      	mov	r3, r0
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4403      	add	r3, r0
 80030b2:	3b1e      	subs	r3, #30
 80030b4:	409a      	lsls	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	e022      	b.n	8003106 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6919      	ldr	r1, [r3, #16]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	2207      	movs	r2, #7
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	400a      	ands	r2, r1
 80030e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6919      	ldr	r1, [r3, #16]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	4618      	mov	r0, r3
 80030f6:	4603      	mov	r3, r0
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4403      	add	r3, r0
 80030fc:	409a      	lsls	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b06      	cmp	r3, #6
 800310c:	d824      	bhi.n	8003158 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	3b05      	subs	r3, #5
 8003120:	221f      	movs	r2, #31
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43da      	mvns	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	400a      	ands	r2, r1
 800312e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	4618      	mov	r0, r3
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	3b05      	subs	r3, #5
 800314a:	fa00 f203 	lsl.w	r2, r0, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	635a      	str	r2, [r3, #52]	; 0x34
 8003156:	e04c      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b0c      	cmp	r3, #12
 800315e:	d824      	bhi.n	80031aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	3b23      	subs	r3, #35	; 0x23
 8003172:	221f      	movs	r2, #31
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43da      	mvns	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	400a      	ands	r2, r1
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	b29b      	uxth	r3, r3
 800318e:	4618      	mov	r0, r3
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	3b23      	subs	r3, #35	; 0x23
 800319c:	fa00 f203 	lsl.w	r2, r0, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
 80031a8:	e023      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	3b41      	subs	r3, #65	; 0x41
 80031bc:	221f      	movs	r2, #31
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43da      	mvns	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	400a      	ands	r2, r1
 80031ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	4618      	mov	r0, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	3b41      	subs	r3, #65	; 0x41
 80031e6:	fa00 f203 	lsl.w	r2, r0, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031f2:	4b29      	ldr	r3, [pc, #164]	; (8003298 <HAL_ADC_ConfigChannel+0x250>)
 80031f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a28      	ldr	r2, [pc, #160]	; (800329c <HAL_ADC_ConfigChannel+0x254>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d10f      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x1d8>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b12      	cmp	r3, #18
 8003206:	d10b      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1d      	ldr	r2, [pc, #116]	; (800329c <HAL_ADC_ConfigChannel+0x254>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d12b      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x23a>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1c      	ldr	r2, [pc, #112]	; (80032a0 <HAL_ADC_ConfigChannel+0x258>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <HAL_ADC_ConfigChannel+0x1f4>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b11      	cmp	r3, #17
 800323a:	d122      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <HAL_ADC_ConfigChannel+0x258>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d111      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800325e:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_ADC_ConfigChannel+0x25c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a11      	ldr	r2, [pc, #68]	; (80032a8 <HAL_ADC_ConfigChannel+0x260>)
 8003264:	fba2 2303 	umull	r2, r3, r2, r3
 8003268:	0c9a      	lsrs	r2, r3, #18
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003274:	e002      	b.n	800327c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	3b01      	subs	r3, #1
 800327a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f9      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	40012300 	.word	0x40012300
 800329c:	40012000 	.word	0x40012000
 80032a0:	10000012 	.word	0x10000012
 80032a4:	20000200 	.word	0x20000200
 80032a8:	431bde83 	.word	0x431bde83

080032ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032b4:	4b79      	ldr	r3, [pc, #484]	; (800349c <ADC_Init+0x1f0>)
 80032b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6859      	ldr	r1, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	021a      	lsls	r2, r3, #8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003304:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6899      	ldr	r1, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	4a58      	ldr	r2, [pc, #352]	; (80034a0 <ADC_Init+0x1f4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d022      	beq.n	800338a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003352:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6899      	ldr	r1, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6899      	ldr	r1, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	e00f      	b.n	80033aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003398:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0202 	bic.w	r2, r2, #2
 80033b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6899      	ldr	r1, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	7e1b      	ldrb	r3, [r3, #24]
 80033c4:	005a      	lsls	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01b      	beq.n	8003410 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6859      	ldr	r1, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	3b01      	subs	r3, #1
 8003404:	035a      	lsls	r2, r3, #13
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	e007      	b.n	8003420 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800341e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	3b01      	subs	r3, #1
 800343c:	051a      	lsls	r2, r3, #20
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6899      	ldr	r1, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003462:	025a      	lsls	r2, r3, #9
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6899      	ldr	r1, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	029a      	lsls	r2, r3, #10
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	40012300 	.word	0x40012300
 80034a0:	0f000001 	.word	0x0f000001

080034a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b4:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034c0:	4013      	ands	r3, r2
 80034c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034d6:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <__NVIC_SetPriorityGrouping+0x44>)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	60d3      	str	r3, [r2, #12]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f0:	4b04      	ldr	r3, [pc, #16]	; (8003504 <__NVIC_GetPriorityGrouping+0x18>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	0a1b      	lsrs	r3, r3, #8
 80034f6:	f003 0307 	and.w	r3, r3, #7
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	2b00      	cmp	r3, #0
 8003518:	db0b      	blt.n	8003532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	f003 021f 	and.w	r2, r3, #31
 8003520:	4907      	ldr	r1, [pc, #28]	; (8003540 <__NVIC_EnableIRQ+0x38>)
 8003522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	2001      	movs	r0, #1
 800352a:	fa00 f202 	lsl.w	r2, r0, r2
 800352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	e000e100 	.word	0xe000e100

08003544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	6039      	str	r1, [r7, #0]
 800354e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003554:	2b00      	cmp	r3, #0
 8003556:	db0a      	blt.n	800356e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	b2da      	uxtb	r2, r3
 800355c:	490c      	ldr	r1, [pc, #48]	; (8003590 <__NVIC_SetPriority+0x4c>)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	0112      	lsls	r2, r2, #4
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	440b      	add	r3, r1
 8003568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800356c:	e00a      	b.n	8003584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	b2da      	uxtb	r2, r3
 8003572:	4908      	ldr	r1, [pc, #32]	; (8003594 <__NVIC_SetPriority+0x50>)
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	3b04      	subs	r3, #4
 800357c:	0112      	lsls	r2, r2, #4
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	440b      	add	r3, r1
 8003582:	761a      	strb	r2, [r3, #24]
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	e000e100 	.word	0xe000e100
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003598:	b480      	push	{r7}
 800359a:	b089      	sub	sp, #36	; 0x24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f1c3 0307 	rsb	r3, r3, #7
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	bf28      	it	cs
 80035b6:	2304      	movcs	r3, #4
 80035b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3304      	adds	r3, #4
 80035be:	2b06      	cmp	r3, #6
 80035c0:	d902      	bls.n	80035c8 <NVIC_EncodePriority+0x30>
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3b03      	subs	r3, #3
 80035c6:	e000      	b.n	80035ca <NVIC_EncodePriority+0x32>
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035cc:	f04f 32ff 	mov.w	r2, #4294967295
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43da      	mvns	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	401a      	ands	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e0:	f04f 31ff 	mov.w	r1, #4294967295
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ea:	43d9      	mvns	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f0:	4313      	orrs	r3, r2
         );
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3724      	adds	r7, #36	; 0x24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3b01      	subs	r3, #1
 800360c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003610:	d301      	bcc.n	8003616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003612:	2301      	movs	r3, #1
 8003614:	e00f      	b.n	8003636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003616:	4a0a      	ldr	r2, [pc, #40]	; (8003640 <SysTick_Config+0x40>)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3b01      	subs	r3, #1
 800361c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800361e:	210f      	movs	r1, #15
 8003620:	f04f 30ff 	mov.w	r0, #4294967295
 8003624:	f7ff ff8e 	bl	8003544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <SysTick_Config+0x40>)
 800362a:	2200      	movs	r2, #0
 800362c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800362e:	4b04      	ldr	r3, [pc, #16]	; (8003640 <SysTick_Config+0x40>)
 8003630:	2207      	movs	r2, #7
 8003632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	e000e010 	.word	0xe000e010

08003644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ff29 	bl	80034a4 <__NVIC_SetPriorityGrouping>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	4603      	mov	r3, r0
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800366c:	f7ff ff3e 	bl	80034ec <__NVIC_GetPriorityGrouping>
 8003670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	6978      	ldr	r0, [r7, #20]
 8003678:	f7ff ff8e 	bl	8003598 <NVIC_EncodePriority>
 800367c:	4602      	mov	r2, r0
 800367e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff5d 	bl	8003544 <__NVIC_SetPriority>
}
 800368a:	bf00      	nop
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	4603      	mov	r3, r0
 800369a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800369c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ff31 	bl	8003508 <__NVIC_EnableIRQ>
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff ffa2 	bl	8003600 <SysTick_Config>
 80036bc:	4603      	mov	r3, r0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036d4:	f7ff fc68 	bl	8002fa8 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e099      	b.n	8003818 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003704:	e00f      	b.n	8003726 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003706:	f7ff fc4f 	bl	8002fa8 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b05      	cmp	r3, #5
 8003712:	d908      	bls.n	8003726 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2203      	movs	r2, #3
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e078      	b.n	8003818 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e8      	bne.n	8003706 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4b38      	ldr	r3, [pc, #224]	; (8003820 <HAL_DMA_Init+0x158>)
 8003740:	4013      	ands	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003752:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800375e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	2b04      	cmp	r3, #4
 800377e:	d107      	bne.n	8003790 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	4313      	orrs	r3, r2
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f023 0307 	bic.w	r3, r3, #7
 80037a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d117      	bne.n	80037ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00e      	beq.n	80037ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fb0d 	bl	8003dec <DMA_CheckFifoParam>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2240      	movs	r2, #64	; 0x40
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037e6:	2301      	movs	r3, #1
 80037e8:	e016      	b.n	8003818 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fac4 	bl	8003d80 <DMA_CalcBaseAndBitshift>
 80037f8:	4603      	mov	r3, r0
 80037fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	223f      	movs	r2, #63	; 0x3f
 8003802:	409a      	lsls	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	f010803f 	.word	0xf010803f

08003824 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_DMA_Start_IT+0x26>
 8003846:	2302      	movs	r3, #2
 8003848:	e040      	b.n	80038cc <HAL_DMA_Start_IT+0xa8>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b01      	cmp	r3, #1
 800385c:	d12f      	bne.n	80038be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 fa56 	bl	8003d24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	223f      	movs	r2, #63	; 0x3f
 800387e:	409a      	lsls	r2, r3
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0216 	orr.w	r2, r2, #22
 8003892:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	d007      	beq.n	80038ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0208 	orr.w	r2, r2, #8
 80038aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	e005      	b.n	80038ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038c6:	2302      	movs	r3, #2
 80038c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038e2:	f7ff fb61 	bl	8002fa8 <HAL_GetTick>
 80038e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d008      	beq.n	8003906 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2280      	movs	r2, #128	; 0x80
 80038f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e052      	b.n	80039ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0216 	bic.w	r2, r2, #22
 8003914:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003924:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	d103      	bne.n	8003936 <HAL_DMA_Abort+0x62>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0208 	bic.w	r2, r2, #8
 8003944:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003956:	e013      	b.n	8003980 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003958:	f7ff fb26 	bl	8002fa8 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b05      	cmp	r3, #5
 8003964:	d90c      	bls.n	8003980 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2203      	movs	r2, #3
 8003970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e015      	b.n	80039ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1e4      	bne.n	8003958 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	223f      	movs	r2, #63	; 0x3f
 8003994:	409a      	lsls	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d004      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2280      	movs	r2, #128	; 0x80
 80039cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e00c      	b.n	80039ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2205      	movs	r2, #5
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a04:	4b8e      	ldr	r3, [pc, #568]	; (8003c40 <HAL_DMA_IRQHandler+0x248>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a8e      	ldr	r2, [pc, #568]	; (8003c44 <HAL_DMA_IRQHandler+0x24c>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	0a9b      	lsrs	r3, r3, #10
 8003a10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a22:	2208      	movs	r2, #8
 8003a24:	409a      	lsls	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d01a      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d013      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0204 	bic.w	r2, r2, #4
 8003a4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a50:	2208      	movs	r2, #8
 8003a52:	409a      	lsls	r2, r3
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	f043 0201 	orr.w	r2, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a68:	2201      	movs	r2, #1
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d012      	beq.n	8003a9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a86:	2201      	movs	r2, #1
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a92:	f043 0202 	orr.w	r2, r3, #2
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	409a      	lsls	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d012      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abc:	2204      	movs	r2, #4
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac8:	f043 0204 	orr.w	r2, r3, #4
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d043      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d03c      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af2:	2210      	movs	r2, #16
 8003af4:	409a      	lsls	r2, r3
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d018      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d108      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d024      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	4798      	blx	r3
 8003b26:	e01f      	b.n	8003b68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01b      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
 8003b38:	e016      	b.n	8003b68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d107      	bne.n	8003b58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0208 	bic.w	r2, r2, #8
 8003b56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 808f 	beq.w	8003c98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8087 	beq.w	8003c98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	2220      	movs	r2, #32
 8003b90:	409a      	lsls	r2, r3
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b05      	cmp	r3, #5
 8003ba0:	d136      	bne.n	8003c10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0216 	bic.w	r2, r2, #22
 8003bb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d103      	bne.n	8003bd2 <HAL_DMA_IRQHandler+0x1da>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0208 	bic.w	r2, r2, #8
 8003be0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be6:	223f      	movs	r2, #63	; 0x3f
 8003be8:	409a      	lsls	r2, r3
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d07e      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	4798      	blx	r3
        }
        return;
 8003c0e:	e079      	b.n	8003d04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d01d      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10d      	bne.n	8003c48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d031      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	4798      	blx	r3
 8003c3c:	e02c      	b.n	8003c98 <HAL_DMA_IRQHandler+0x2a0>
 8003c3e:	bf00      	nop
 8003c40:	20000200 	.word	0x20000200
 8003c44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d023      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
 8003c58:	e01e      	b.n	8003c98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10f      	bne.n	8003c88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0210 	bic.w	r2, r2, #16
 8003c76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d032      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d022      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2205      	movs	r2, #5
 8003cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d307      	bcc.n	8003ce0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f2      	bne.n	8003cc4 <HAL_DMA_IRQHandler+0x2cc>
 8003cde:	e000      	b.n	8003ce2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ce0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	4798      	blx	r3
 8003d02:	e000      	b.n	8003d06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d04:	bf00      	nop
    }
  }
}
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b40      	cmp	r3, #64	; 0x40
 8003d50:	d108      	bne.n	8003d64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d62:	e007      	b.n	8003d74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	60da      	str	r2, [r3, #12]
}
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	3b10      	subs	r3, #16
 8003d90:	4a14      	ldr	r2, [pc, #80]	; (8003de4 <DMA_CalcBaseAndBitshift+0x64>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d9a:	4a13      	ldr	r2, [pc, #76]	; (8003de8 <DMA_CalcBaseAndBitshift+0x68>)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4413      	add	r3, r2
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d909      	bls.n	8003dc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003db6:	f023 0303 	bic.w	r3, r3, #3
 8003dba:	1d1a      	adds	r2, r3, #4
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	659a      	str	r2, [r3, #88]	; 0x58
 8003dc0:	e007      	b.n	8003dd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	aaaaaaab 	.word	0xaaaaaaab
 8003de8:	080094e0 	.word	0x080094e0

08003dec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d11f      	bne.n	8003e46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d856      	bhi.n	8003eba <DMA_CheckFifoParam+0xce>
 8003e0c:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <DMA_CheckFifoParam+0x28>)
 8003e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e12:	bf00      	nop
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003e37 	.word	0x08003e37
 8003e1c:	08003e25 	.word	0x08003e25
 8003e20:	08003ebb 	.word	0x08003ebb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d046      	beq.n	8003ebe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e34:	e043      	b.n	8003ebe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e3e:	d140      	bne.n	8003ec2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e44:	e03d      	b.n	8003ec2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4e:	d121      	bne.n	8003e94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d837      	bhi.n	8003ec6 <DMA_CheckFifoParam+0xda>
 8003e56:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <DMA_CheckFifoParam+0x70>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	08003e6d 	.word	0x08003e6d
 8003e60:	08003e73 	.word	0x08003e73
 8003e64:	08003e6d 	.word	0x08003e6d
 8003e68:	08003e85 	.word	0x08003e85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e70:	e030      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d025      	beq.n	8003eca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e82:	e022      	b.n	8003eca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e8c:	d11f      	bne.n	8003ece <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e92:	e01c      	b.n	8003ece <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d903      	bls.n	8003ea2 <DMA_CheckFifoParam+0xb6>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d003      	beq.n	8003ea8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ea0:	e018      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea6:	e015      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00e      	beq.n	8003ed2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb8:	e00b      	b.n	8003ed2 <DMA_CheckFifoParam+0xe6>
      break;
 8003eba:	bf00      	nop
 8003ebc:	e00a      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ebe:	bf00      	nop
 8003ec0:	e008      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e006      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e004      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ed2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop

08003ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b089      	sub	sp, #36	; 0x24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	e159      	b.n	80041b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f00:	2201      	movs	r2, #1
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4013      	ands	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	f040 8148 	bne.w	80041ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d005      	beq.n	8003f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d130      	bne.n	8003f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	2203      	movs	r2, #3
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	091b      	lsrs	r3, r3, #4
 8003f82:	f003 0201 	and.w	r2, r3, #1
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d017      	beq.n	8003fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	2203      	movs	r2, #3
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d123      	bne.n	8004028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	08da      	lsrs	r2, r3, #3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3208      	adds	r2, #8
 8003fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	220f      	movs	r2, #15
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4013      	ands	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4313      	orrs	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	08da      	lsrs	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3208      	adds	r2, #8
 8004022:	69b9      	ldr	r1, [r7, #24]
 8004024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	2203      	movs	r2, #3
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 0203 	and.w	r2, r3, #3
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	4313      	orrs	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80a2 	beq.w	80041ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	4b57      	ldr	r3, [pc, #348]	; (80041cc <HAL_GPIO_Init+0x2e8>)
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	4a56      	ldr	r2, [pc, #344]	; (80041cc <HAL_GPIO_Init+0x2e8>)
 8004074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004078:	6453      	str	r3, [r2, #68]	; 0x44
 800407a:	4b54      	ldr	r3, [pc, #336]	; (80041cc <HAL_GPIO_Init+0x2e8>)
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004086:	4a52      	ldr	r2, [pc, #328]	; (80041d0 <HAL_GPIO_Init+0x2ec>)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	089b      	lsrs	r3, r3, #2
 800408c:	3302      	adds	r3, #2
 800408e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	220f      	movs	r2, #15
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43db      	mvns	r3, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4013      	ands	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a49      	ldr	r2, [pc, #292]	; (80041d4 <HAL_GPIO_Init+0x2f0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d019      	beq.n	80040e6 <HAL_GPIO_Init+0x202>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a48      	ldr	r2, [pc, #288]	; (80041d8 <HAL_GPIO_Init+0x2f4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d013      	beq.n	80040e2 <HAL_GPIO_Init+0x1fe>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a47      	ldr	r2, [pc, #284]	; (80041dc <HAL_GPIO_Init+0x2f8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00d      	beq.n	80040de <HAL_GPIO_Init+0x1fa>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a46      	ldr	r2, [pc, #280]	; (80041e0 <HAL_GPIO_Init+0x2fc>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d007      	beq.n	80040da <HAL_GPIO_Init+0x1f6>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a45      	ldr	r2, [pc, #276]	; (80041e4 <HAL_GPIO_Init+0x300>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d101      	bne.n	80040d6 <HAL_GPIO_Init+0x1f2>
 80040d2:	2304      	movs	r3, #4
 80040d4:	e008      	b.n	80040e8 <HAL_GPIO_Init+0x204>
 80040d6:	2307      	movs	r3, #7
 80040d8:	e006      	b.n	80040e8 <HAL_GPIO_Init+0x204>
 80040da:	2303      	movs	r3, #3
 80040dc:	e004      	b.n	80040e8 <HAL_GPIO_Init+0x204>
 80040de:	2302      	movs	r3, #2
 80040e0:	e002      	b.n	80040e8 <HAL_GPIO_Init+0x204>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <HAL_GPIO_Init+0x204>
 80040e6:	2300      	movs	r3, #0
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	f002 0203 	and.w	r2, r2, #3
 80040ee:	0092      	lsls	r2, r2, #2
 80040f0:	4093      	lsls	r3, r2
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040f8:	4935      	ldr	r1, [pc, #212]	; (80041d0 <HAL_GPIO_Init+0x2ec>)
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	089b      	lsrs	r3, r3, #2
 80040fe:	3302      	adds	r3, #2
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004106:	4b38      	ldr	r3, [pc, #224]	; (80041e8 <HAL_GPIO_Init+0x304>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	43db      	mvns	r3, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4013      	ands	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800412a:	4a2f      	ldr	r2, [pc, #188]	; (80041e8 <HAL_GPIO_Init+0x304>)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004130:	4b2d      	ldr	r3, [pc, #180]	; (80041e8 <HAL_GPIO_Init+0x304>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	43db      	mvns	r3, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4013      	ands	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004154:	4a24      	ldr	r2, [pc, #144]	; (80041e8 <HAL_GPIO_Init+0x304>)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800415a:	4b23      	ldr	r3, [pc, #140]	; (80041e8 <HAL_GPIO_Init+0x304>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	43db      	mvns	r3, r3
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	4013      	ands	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800417e:	4a1a      	ldr	r2, [pc, #104]	; (80041e8 <HAL_GPIO_Init+0x304>)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004184:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <HAL_GPIO_Init+0x304>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	43db      	mvns	r3, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4013      	ands	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041a8:	4a0f      	ldr	r2, [pc, #60]	; (80041e8 <HAL_GPIO_Init+0x304>)
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3301      	adds	r3, #1
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	2b0f      	cmp	r3, #15
 80041b8:	f67f aea2 	bls.w	8003f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	3724      	adds	r7, #36	; 0x24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40013800 	.word	0x40013800
 80041d4:	40020000 	.word	0x40020000
 80041d8:	40020400 	.word	0x40020400
 80041dc:	40020800 	.word	0x40020800
 80041e0:	40020c00 	.word	0x40020c00
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40013c00 	.word	0x40013c00

080041ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
 80041f8:	4613      	mov	r3, r2
 80041fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041fc:	787b      	ldrb	r3, [r7, #1]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004208:	e003      	b.n	8004212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800420a:	887b      	ldrh	r3, [r7, #2]
 800420c:	041a      	lsls	r2, r3, #16
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	619a      	str	r2, [r3, #24]
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e12b      	b.n	800448a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fe fbc8 	bl	80029dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2224      	movs	r2, #36	; 0x24
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0201 	bic.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004272:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004282:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004284:	f000 fd80 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 8004288:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	4a81      	ldr	r2, [pc, #516]	; (8004494 <HAL_I2C_Init+0x274>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d807      	bhi.n	80042a4 <HAL_I2C_Init+0x84>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4a80      	ldr	r2, [pc, #512]	; (8004498 <HAL_I2C_Init+0x278>)
 8004298:	4293      	cmp	r3, r2
 800429a:	bf94      	ite	ls
 800429c:	2301      	movls	r3, #1
 800429e:	2300      	movhi	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	e006      	b.n	80042b2 <HAL_I2C_Init+0x92>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4a7d      	ldr	r2, [pc, #500]	; (800449c <HAL_I2C_Init+0x27c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	bf94      	ite	ls
 80042ac:	2301      	movls	r3, #1
 80042ae:	2300      	movhi	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e0e7      	b.n	800448a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4a78      	ldr	r2, [pc, #480]	; (80044a0 <HAL_I2C_Init+0x280>)
 80042be:	fba2 2303 	umull	r2, r3, r2, r3
 80042c2:	0c9b      	lsrs	r3, r3, #18
 80042c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4a6a      	ldr	r2, [pc, #424]	; (8004494 <HAL_I2C_Init+0x274>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d802      	bhi.n	80042f4 <HAL_I2C_Init+0xd4>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	3301      	adds	r3, #1
 80042f2:	e009      	b.n	8004308 <HAL_I2C_Init+0xe8>
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	4a69      	ldr	r2, [pc, #420]	; (80044a4 <HAL_I2C_Init+0x284>)
 8004300:	fba2 2303 	umull	r2, r3, r2, r3
 8004304:	099b      	lsrs	r3, r3, #6
 8004306:	3301      	adds	r3, #1
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	430b      	orrs	r3, r1
 800430e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800431a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	495c      	ldr	r1, [pc, #368]	; (8004494 <HAL_I2C_Init+0x274>)
 8004324:	428b      	cmp	r3, r1
 8004326:	d819      	bhi.n	800435c <HAL_I2C_Init+0x13c>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	1e59      	subs	r1, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	fbb1 f3f3 	udiv	r3, r1, r3
 8004336:	1c59      	adds	r1, r3, #1
 8004338:	f640 73fc 	movw	r3, #4092	; 0xffc
 800433c:	400b      	ands	r3, r1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <HAL_I2C_Init+0x138>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1e59      	subs	r1, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004350:	3301      	adds	r3, #1
 8004352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004356:	e051      	b.n	80043fc <HAL_I2C_Init+0x1dc>
 8004358:	2304      	movs	r3, #4
 800435a:	e04f      	b.n	80043fc <HAL_I2C_Init+0x1dc>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d111      	bne.n	8004388 <HAL_I2C_Init+0x168>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	1e58      	subs	r0, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6859      	ldr	r1, [r3, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	440b      	add	r3, r1
 8004372:	fbb0 f3f3 	udiv	r3, r0, r3
 8004376:	3301      	adds	r3, #1
 8004378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e012      	b.n	80043ae <HAL_I2C_Init+0x18e>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	1e58      	subs	r0, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6859      	ldr	r1, [r3, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	0099      	lsls	r1, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	fbb0 f3f3 	udiv	r3, r0, r3
 800439e:	3301      	adds	r3, #1
 80043a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	bf0c      	ite	eq
 80043a8:	2301      	moveq	r3, #1
 80043aa:	2300      	movne	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_I2C_Init+0x196>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e022      	b.n	80043fc <HAL_I2C_Init+0x1dc>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10e      	bne.n	80043dc <HAL_I2C_Init+0x1bc>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1e58      	subs	r0, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6859      	ldr	r1, [r3, #4]
 80043c6:	460b      	mov	r3, r1
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	440b      	add	r3, r1
 80043cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80043d0:	3301      	adds	r3, #1
 80043d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043da:	e00f      	b.n	80043fc <HAL_I2C_Init+0x1dc>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	1e58      	subs	r0, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6859      	ldr	r1, [r3, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	0099      	lsls	r1, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f2:	3301      	adds	r3, #1
 80043f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	6809      	ldr	r1, [r1, #0]
 8004400:	4313      	orrs	r3, r2
 8004402:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69da      	ldr	r2, [r3, #28]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800442a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6911      	ldr	r1, [r2, #16]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68d2      	ldr	r2, [r2, #12]
 8004436:	4311      	orrs	r1, r2
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	430b      	orrs	r3, r1
 800443e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695a      	ldr	r2, [r3, #20]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	000186a0 	.word	0x000186a0
 8004498:	001e847f 	.word	0x001e847f
 800449c:	003d08ff 	.word	0x003d08ff
 80044a0:	431bde83 	.word	0x431bde83
 80044a4:	10624dd3 	.word	0x10624dd3

080044a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e267      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d075      	beq.n	80045b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044c6:	4b88      	ldr	r3, [pc, #544]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d00c      	beq.n	80044ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d2:	4b85      	ldr	r3, [pc, #532]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d112      	bne.n	8004504 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044de:	4b82      	ldr	r3, [pc, #520]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ea:	d10b      	bne.n	8004504 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ec:	4b7e      	ldr	r3, [pc, #504]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d05b      	beq.n	80045b0 <HAL_RCC_OscConfig+0x108>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d157      	bne.n	80045b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e242      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450c:	d106      	bne.n	800451c <HAL_RCC_OscConfig+0x74>
 800450e:	4b76      	ldr	r3, [pc, #472]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a75      	ldr	r2, [pc, #468]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e01d      	b.n	8004558 <HAL_RCC_OscConfig+0xb0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004524:	d10c      	bne.n	8004540 <HAL_RCC_OscConfig+0x98>
 8004526:	4b70      	ldr	r3, [pc, #448]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a6f      	ldr	r2, [pc, #444]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 800452c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	4b6d      	ldr	r3, [pc, #436]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a6c      	ldr	r2, [pc, #432]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	e00b      	b.n	8004558 <HAL_RCC_OscConfig+0xb0>
 8004540:	4b69      	ldr	r3, [pc, #420]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a68      	ldr	r2, [pc, #416]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	4b66      	ldr	r3, [pc, #408]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a65      	ldr	r2, [pc, #404]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d013      	beq.n	8004588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004560:	f7fe fd22 	bl	8002fa8 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004568:	f7fe fd1e 	bl	8002fa8 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	; 0x64
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e207      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	4b5b      	ldr	r3, [pc, #364]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0xc0>
 8004586:	e014      	b.n	80045b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004588:	f7fe fd0e 	bl	8002fa8 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004590:	f7fe fd0a 	bl	8002fa8 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b64      	cmp	r3, #100	; 0x64
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e1f3      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a2:	4b51      	ldr	r3, [pc, #324]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0xe8>
 80045ae:	e000      	b.n	80045b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d063      	beq.n	8004686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045be:	4b4a      	ldr	r3, [pc, #296]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ca:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d11c      	bne.n	8004610 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d6:	4b44      	ldr	r3, [pc, #272]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d116      	bne.n	8004610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e2:	4b41      	ldr	r3, [pc, #260]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <HAL_RCC_OscConfig+0x152>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d001      	beq.n	80045fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e1c7      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fa:	4b3b      	ldr	r3, [pc, #236]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4937      	ldr	r1, [pc, #220]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460e:	e03a      	b.n	8004686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d020      	beq.n	800465a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004618:	4b34      	ldr	r3, [pc, #208]	; (80046ec <HAL_RCC_OscConfig+0x244>)
 800461a:	2201      	movs	r2, #1
 800461c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7fe fcc3 	bl	8002fa8 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004626:	f7fe fcbf 	bl	8002fa8 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e1a8      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004638:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0f0      	beq.n	8004626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004644:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4925      	ldr	r1, [pc, #148]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004654:	4313      	orrs	r3, r2
 8004656:	600b      	str	r3, [r1, #0]
 8004658:	e015      	b.n	8004686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800465a:	4b24      	ldr	r3, [pc, #144]	; (80046ec <HAL_RCC_OscConfig+0x244>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004660:	f7fe fca2 	bl	8002fa8 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004668:	f7fe fc9e 	bl	8002fa8 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e187      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467a:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d036      	beq.n	8004700 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d016      	beq.n	80046c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800469a:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <HAL_RCC_OscConfig+0x248>)
 800469c:	2201      	movs	r2, #1
 800469e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a0:	f7fe fc82 	bl	8002fa8 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a8:	f7fe fc7e 	bl	8002fa8 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e167      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80046bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0f0      	beq.n	80046a8 <HAL_RCC_OscConfig+0x200>
 80046c6:	e01b      	b.n	8004700 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c8:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <HAL_RCC_OscConfig+0x248>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ce:	f7fe fc6b 	bl	8002fa8 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d4:	e00e      	b.n	80046f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046d6:	f7fe fc67 	bl	8002fa8 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d907      	bls.n	80046f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e150      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
 80046e8:	40023800 	.word	0x40023800
 80046ec:	42470000 	.word	0x42470000
 80046f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f4:	4b88      	ldr	r3, [pc, #544]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80046f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1ea      	bne.n	80046d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8097 	beq.w	800483c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470e:	2300      	movs	r3, #0
 8004710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004712:	4b81      	ldr	r3, [pc, #516]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10f      	bne.n	800473e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800471e:	2300      	movs	r3, #0
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	4b7d      	ldr	r3, [pc, #500]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	4a7c      	ldr	r2, [pc, #496]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472c:	6413      	str	r3, [r2, #64]	; 0x40
 800472e:	4b7a      	ldr	r3, [pc, #488]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004736:	60bb      	str	r3, [r7, #8]
 8004738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800473a:	2301      	movs	r3, #1
 800473c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473e:	4b77      	ldr	r3, [pc, #476]	; (800491c <HAL_RCC_OscConfig+0x474>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d118      	bne.n	800477c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800474a:	4b74      	ldr	r3, [pc, #464]	; (800491c <HAL_RCC_OscConfig+0x474>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a73      	ldr	r2, [pc, #460]	; (800491c <HAL_RCC_OscConfig+0x474>)
 8004750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004756:	f7fe fc27 	bl	8002fa8 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475e:	f7fe fc23 	bl	8002fa8 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e10c      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004770:	4b6a      	ldr	r3, [pc, #424]	; (800491c <HAL_RCC_OscConfig+0x474>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d106      	bne.n	8004792 <HAL_RCC_OscConfig+0x2ea>
 8004784:	4b64      	ldr	r3, [pc, #400]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004788:	4a63      	ldr	r2, [pc, #396]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	6713      	str	r3, [r2, #112]	; 0x70
 8004790:	e01c      	b.n	80047cc <HAL_RCC_OscConfig+0x324>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b05      	cmp	r3, #5
 8004798:	d10c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x30c>
 800479a:	4b5f      	ldr	r3, [pc, #380]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479e:	4a5e      	ldr	r2, [pc, #376]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80047a0:	f043 0304 	orr.w	r3, r3, #4
 80047a4:	6713      	str	r3, [r2, #112]	; 0x70
 80047a6:	4b5c      	ldr	r3, [pc, #368]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047aa:	4a5b      	ldr	r2, [pc, #364]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	6713      	str	r3, [r2, #112]	; 0x70
 80047b2:	e00b      	b.n	80047cc <HAL_RCC_OscConfig+0x324>
 80047b4:	4b58      	ldr	r3, [pc, #352]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b8:	4a57      	ldr	r2, [pc, #348]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80047ba:	f023 0301 	bic.w	r3, r3, #1
 80047be:	6713      	str	r3, [r2, #112]	; 0x70
 80047c0:	4b55      	ldr	r3, [pc, #340]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c4:	4a54      	ldr	r2, [pc, #336]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80047c6:	f023 0304 	bic.w	r3, r3, #4
 80047ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d015      	beq.n	8004800 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d4:	f7fe fbe8 	bl	8002fa8 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047da:	e00a      	b.n	80047f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047dc:	f7fe fbe4 	bl	8002fa8 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e0cb      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f2:	4b49      	ldr	r3, [pc, #292]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0ee      	beq.n	80047dc <HAL_RCC_OscConfig+0x334>
 80047fe:	e014      	b.n	800482a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004800:	f7fe fbd2 	bl	8002fa8 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004806:	e00a      	b.n	800481e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004808:	f7fe fbce 	bl	8002fa8 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	; 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e0b5      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800481e:	4b3e      	ldr	r3, [pc, #248]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1ee      	bne.n	8004808 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800482a:	7dfb      	ldrb	r3, [r7, #23]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d105      	bne.n	800483c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004830:	4b39      	ldr	r3, [pc, #228]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	4a38      	ldr	r2, [pc, #224]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80a1 	beq.w	8004988 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004846:	4b34      	ldr	r3, [pc, #208]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 030c 	and.w	r3, r3, #12
 800484e:	2b08      	cmp	r3, #8
 8004850:	d05c      	beq.n	800490c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d141      	bne.n	80048de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800485a:	4b31      	ldr	r3, [pc, #196]	; (8004920 <HAL_RCC_OscConfig+0x478>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7fe fba2 	bl	8002fa8 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004868:	f7fe fb9e 	bl	8002fa8 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e087      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487a:	4b27      	ldr	r3, [pc, #156]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69da      	ldr	r2, [r3, #28]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	019b      	lsls	r3, r3, #6
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	085b      	lsrs	r3, r3, #1
 800489e:	3b01      	subs	r3, #1
 80048a0:	041b      	lsls	r3, r3, #16
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	061b      	lsls	r3, r3, #24
 80048aa:	491b      	ldr	r1, [pc, #108]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048b0:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <HAL_RCC_OscConfig+0x478>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b6:	f7fe fb77 	bl	8002fa8 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048be:	f7fe fb73 	bl	8002fa8 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e05c      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d0:	4b11      	ldr	r3, [pc, #68]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0f0      	beq.n	80048be <HAL_RCC_OscConfig+0x416>
 80048dc:	e054      	b.n	8004988 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048de:	4b10      	ldr	r3, [pc, #64]	; (8004920 <HAL_RCC_OscConfig+0x478>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e4:	f7fe fb60 	bl	8002fa8 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ec:	f7fe fb5c 	bl	8002fa8 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e045      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fe:	4b06      	ldr	r3, [pc, #24]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x444>
 800490a:	e03d      	b.n	8004988 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d107      	bne.n	8004924 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e038      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
 8004918:	40023800 	.word	0x40023800
 800491c:	40007000 	.word	0x40007000
 8004920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004924:	4b1b      	ldr	r3, [pc, #108]	; (8004994 <HAL_RCC_OscConfig+0x4ec>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d028      	beq.n	8004984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d121      	bne.n	8004984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d11a      	bne.n	8004984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004954:	4013      	ands	r3, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800495a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800495c:	4293      	cmp	r3, r2
 800495e:	d111      	bne.n	8004984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	3b01      	subs	r3, #1
 800496e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d107      	bne.n	8004984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004980:	429a      	cmp	r2, r3
 8004982:	d001      	beq.n	8004988 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40023800 	.word	0x40023800

08004998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0cc      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049ac:	4b68      	ldr	r3, [pc, #416]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d90c      	bls.n	80049d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b65      	ldr	r3, [pc, #404]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b63      	ldr	r3, [pc, #396]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0b8      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d020      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049ec:	4b59      	ldr	r3, [pc, #356]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	4a58      	ldr	r2, [pc, #352]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a04:	4b53      	ldr	r3, [pc, #332]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4a52      	ldr	r2, [pc, #328]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a10:	4b50      	ldr	r3, [pc, #320]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	494d      	ldr	r1, [pc, #308]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d044      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d107      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a36:	4b47      	ldr	r3, [pc, #284]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d119      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e07f      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d003      	beq.n	8004a56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d107      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a56:	4b3f      	ldr	r3, [pc, #252]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e06f      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a66:	4b3b      	ldr	r3, [pc, #236]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e067      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a76:	4b37      	ldr	r3, [pc, #220]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f023 0203 	bic.w	r2, r3, #3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4934      	ldr	r1, [pc, #208]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a88:	f7fe fa8e 	bl	8002fa8 <HAL_GetTick>
 8004a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8e:	e00a      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a90:	f7fe fa8a 	bl	8002fa8 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e04f      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa6:	4b2b      	ldr	r3, [pc, #172]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 020c 	and.w	r2, r3, #12
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d1eb      	bne.n	8004a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab8:	4b25      	ldr	r3, [pc, #148]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d20c      	bcs.n	8004ae0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac6:	4b22      	ldr	r3, [pc, #136]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ace:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e032      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d008      	beq.n	8004afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aec:	4b19      	ldr	r3, [pc, #100]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	4916      	ldr	r1, [pc, #88]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b0a:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	490e      	ldr	r1, [pc, #56]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b1e:	f000 f821 	bl	8004b64 <HAL_RCC_GetSysClockFreq>
 8004b22:	4602      	mov	r2, r0
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	490a      	ldr	r1, [pc, #40]	; (8004b58 <HAL_RCC_ClockConfig+0x1c0>)
 8004b30:	5ccb      	ldrb	r3, [r1, r3]
 8004b32:	fa22 f303 	lsr.w	r3, r2, r3
 8004b36:	4a09      	ldr	r2, [pc, #36]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b3a:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fe f9ee 	bl	8002f20 <HAL_InitTick>

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40023c00 	.word	0x40023c00
 8004b54:	40023800 	.word	0x40023800
 8004b58:	080094c8 	.word	0x080094c8
 8004b5c:	20000200 	.word	0x20000200
 8004b60:	20000204 	.word	0x20000204

08004b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b68:	b094      	sub	sp, #80	; 0x50
 8004b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b70:	2300      	movs	r3, #0
 8004b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b74:	2300      	movs	r3, #0
 8004b76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b7c:	4b79      	ldr	r3, [pc, #484]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 030c 	and.w	r3, r3, #12
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d00d      	beq.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	f200 80e1 	bhi.w	8004d50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <HAL_RCC_GetSysClockFreq+0x34>
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d003      	beq.n	8004b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b96:	e0db      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b98:	4b73      	ldr	r3, [pc, #460]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004b9c:	e0db      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b9e:	4b73      	ldr	r3, [pc, #460]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x208>)
 8004ba0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ba2:	e0d8      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ba4:	4b6f      	ldr	r3, [pc, #444]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bae:	4b6d      	ldr	r3, [pc, #436]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d063      	beq.n	8004c82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bba:	4b6a      	ldr	r3, [pc, #424]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	099b      	lsrs	r3, r3, #6
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8004bce:	2300      	movs	r3, #0
 8004bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	462b      	mov	r3, r5
 8004bda:	f04f 0000 	mov.w	r0, #0
 8004bde:	f04f 0100 	mov.w	r1, #0
 8004be2:	0159      	lsls	r1, r3, #5
 8004be4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004be8:	0150      	lsls	r0, r2, #5
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4621      	mov	r1, r4
 8004bf0:	1a51      	subs	r1, r2, r1
 8004bf2:	6139      	str	r1, [r7, #16]
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c08:	4659      	mov	r1, fp
 8004c0a:	018b      	lsls	r3, r1, #6
 8004c0c:	4651      	mov	r1, sl
 8004c0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c12:	4651      	mov	r1, sl
 8004c14:	018a      	lsls	r2, r1, #6
 8004c16:	4651      	mov	r1, sl
 8004c18:	ebb2 0801 	subs.w	r8, r2, r1
 8004c1c:	4659      	mov	r1, fp
 8004c1e:	eb63 0901 	sbc.w	r9, r3, r1
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c36:	4690      	mov	r8, r2
 8004c38:	4699      	mov	r9, r3
 8004c3a:	4623      	mov	r3, r4
 8004c3c:	eb18 0303 	adds.w	r3, r8, r3
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	462b      	mov	r3, r5
 8004c44:	eb49 0303 	adc.w	r3, r9, r3
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c56:	4629      	mov	r1, r5
 8004c58:	024b      	lsls	r3, r1, #9
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c60:	4621      	mov	r1, r4
 8004c62:	024a      	lsls	r2, r1, #9
 8004c64:	4610      	mov	r0, r2
 8004c66:	4619      	mov	r1, r3
 8004c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c74:	f7fb ff94 	bl	8000ba0 <__aeabi_uldivmod>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c80:	e058      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c82:	4b38      	ldr	r3, [pc, #224]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	099b      	lsrs	r3, r3, #6
 8004c88:	2200      	movs	r2, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c92:	623b      	str	r3, [r7, #32]
 8004c94:	2300      	movs	r3, #0
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
 8004c98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	f04f 0000 	mov.w	r0, #0
 8004ca4:	f04f 0100 	mov.w	r1, #0
 8004ca8:	0159      	lsls	r1, r3, #5
 8004caa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cae:	0150      	lsls	r0, r2, #5
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cba:	4649      	mov	r1, r9
 8004cbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ccc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cd4:	ebb2 040a 	subs.w	r4, r2, sl
 8004cd8:	eb63 050b 	sbc.w	r5, r3, fp
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	00eb      	lsls	r3, r5, #3
 8004ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cea:	00e2      	lsls	r2, r4, #3
 8004cec:	4614      	mov	r4, r2
 8004cee:	461d      	mov	r5, r3
 8004cf0:	4643      	mov	r3, r8
 8004cf2:	18e3      	adds	r3, r4, r3
 8004cf4:	603b      	str	r3, [r7, #0]
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	eb45 0303 	adc.w	r3, r5, r3
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	028b      	lsls	r3, r1, #10
 8004d0e:	4621      	mov	r1, r4
 8004d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d14:	4621      	mov	r1, r4
 8004d16:	028a      	lsls	r2, r1, #10
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d1e:	2200      	movs	r2, #0
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	61fa      	str	r2, [r7, #28]
 8004d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d28:	f7fb ff3a 	bl	8000ba0 <__aeabi_uldivmod>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4613      	mov	r3, r2
 8004d32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	0c1b      	lsrs	r3, r3, #16
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	3301      	adds	r3, #1
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d4e:	e002      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3750      	adds	r7, #80	; 0x50
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d62:	bf00      	nop
 8004d64:	40023800 	.word	0x40023800
 8004d68:	00f42400 	.word	0x00f42400
 8004d6c:	007a1200 	.word	0x007a1200

08004d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d74:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d76:	681b      	ldr	r3, [r3, #0]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20000200 	.word	0x20000200

08004d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d8c:	f7ff fff0 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 8004d90:	4602      	mov	r2, r0
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	0a9b      	lsrs	r3, r3, #10
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	4903      	ldr	r1, [pc, #12]	; (8004dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d9e:	5ccb      	ldrb	r3, [r1, r3]
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40023800 	.word	0x40023800
 8004dac:	080094d8 	.word	0x080094d8

08004db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004db4:	f7ff ffdc 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 8004db8:	4602      	mov	r2, r0
 8004dba:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	0b5b      	lsrs	r3, r3, #13
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	4903      	ldr	r1, [pc, #12]	; (8004dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dc6:	5ccb      	ldrb	r3, [r1, r3]
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	080094d8 	.word	0x080094d8

08004dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e04c      	b.n	8004e84 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d111      	bne.n	8004e1a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f001 fc16 	bl	8006630 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d102      	bne.n	8004e12 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a1f      	ldr	r2, [pc, #124]	; (8004e8c <HAL_TIM_Base_Init+0xb4>)
 8004e10:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f001 f933 	bl	8006098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	08002a6d 	.word	0x08002a6d

08004e90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d001      	beq.n	8004ea8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e03c      	b.n	8004f22 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1e      	ldr	r2, [pc, #120]	; (8004f30 <HAL_TIM_Base_Start+0xa0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d018      	beq.n	8004eec <HAL_TIM_Base_Start+0x5c>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec2:	d013      	beq.n	8004eec <HAL_TIM_Base_Start+0x5c>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1a      	ldr	r2, [pc, #104]	; (8004f34 <HAL_TIM_Base_Start+0xa4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00e      	beq.n	8004eec <HAL_TIM_Base_Start+0x5c>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a19      	ldr	r2, [pc, #100]	; (8004f38 <HAL_TIM_Base_Start+0xa8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d009      	beq.n	8004eec <HAL_TIM_Base_Start+0x5c>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a17      	ldr	r2, [pc, #92]	; (8004f3c <HAL_TIM_Base_Start+0xac>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d004      	beq.n	8004eec <HAL_TIM_Base_Start+0x5c>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a16      	ldr	r2, [pc, #88]	; (8004f40 <HAL_TIM_Base_Start+0xb0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d111      	bne.n	8004f10 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b06      	cmp	r3, #6
 8004efc:	d010      	beq.n	8004f20 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0201 	orr.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0e:	e007      	b.n	8004f20 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40010000 	.word	0x40010000
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800
 8004f3c:	40000c00 	.word	0x40000c00
 8004f40:	40014000 	.word	0x40014000

08004f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d001      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e044      	b.n	8004fe6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0201 	orr.w	r2, r2, #1
 8004f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1e      	ldr	r2, [pc, #120]	; (8004ff4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d018      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f86:	d013      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00e      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a19      	ldr	r2, [pc, #100]	; (8004ffc <HAL_TIM_Base_Start_IT+0xb8>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d009      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a17      	ldr	r2, [pc, #92]	; (8005000 <HAL_TIM_Base_Start_IT+0xbc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d004      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a16      	ldr	r2, [pc, #88]	; (8005004 <HAL_TIM_Base_Start_IT+0xc0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d111      	bne.n	8004fd4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b06      	cmp	r3, #6
 8004fc0:	d010      	beq.n	8004fe4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0201 	orr.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd2:	e007      	b.n	8004fe4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	40000400 	.word	0x40000400
 8004ffc:	40000800 	.word	0x40000800
 8005000:	40000c00 	.word	0x40000c00
 8005004:	40014000 	.word	0x40014000

08005008 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e04c      	b.n	80050b4 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d111      	bne.n	800504a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f001 fafe 	bl	8006630 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a1f      	ldr	r2, [pc, #124]	; (80050bc <HAL_TIM_OC_Init+0xb4>)
 8005040:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2202      	movs	r2, #2
 800504e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3304      	adds	r3, #4
 800505a:	4619      	mov	r1, r3
 800505c:	4610      	mov	r0, r2
 800505e:	f001 f81b 	bl	8006098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	080050c1 	.word	0x080050c1

080050c0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e04c      	b.n	8005180 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d111      	bne.n	8005116 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f001 fa98 	bl	8006630 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005104:	2b00      	cmp	r3, #0
 8005106:	d102      	bne.n	800510e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a1f      	ldr	r2, [pc, #124]	; (8005188 <HAL_TIM_PWM_Init+0xb4>)
 800510c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2202      	movs	r2, #2
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3304      	adds	r3, #4
 8005126:	4619      	mov	r1, r3
 8005128:	4610      	mov	r0, r2
 800512a:	f000 ffb5 	bl	8006098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	0800518d 	.word	0x0800518d

0800518c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d109      	bne.n	80051c4 <HAL_TIM_PWM_Start+0x24>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	bf14      	ite	ne
 80051bc:	2301      	movne	r3, #1
 80051be:	2300      	moveq	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	e022      	b.n	800520a <HAL_TIM_PWM_Start+0x6a>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d109      	bne.n	80051de <HAL_TIM_PWM_Start+0x3e>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	bf14      	ite	ne
 80051d6:	2301      	movne	r3, #1
 80051d8:	2300      	moveq	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	e015      	b.n	800520a <HAL_TIM_PWM_Start+0x6a>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d109      	bne.n	80051f8 <HAL_TIM_PWM_Start+0x58>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	bf14      	ite	ne
 80051f0:	2301      	movne	r3, #1
 80051f2:	2300      	moveq	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	e008      	b.n	800520a <HAL_TIM_PWM_Start+0x6a>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	bf14      	ite	ne
 8005204:	2301      	movne	r3, #1
 8005206:	2300      	moveq	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e068      	b.n	80052e4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d104      	bne.n	8005222 <HAL_TIM_PWM_Start+0x82>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005220:	e013      	b.n	800524a <HAL_TIM_PWM_Start+0xaa>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b04      	cmp	r3, #4
 8005226:	d104      	bne.n	8005232 <HAL_TIM_PWM_Start+0x92>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005230:	e00b      	b.n	800524a <HAL_TIM_PWM_Start+0xaa>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b08      	cmp	r3, #8
 8005236:	d104      	bne.n	8005242 <HAL_TIM_PWM_Start+0xa2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005240:	e003      	b.n	800524a <HAL_TIM_PWM_Start+0xaa>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2202      	movs	r2, #2
 8005246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2201      	movs	r2, #1
 8005250:	6839      	ldr	r1, [r7, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f001 f9c6 	bl	80065e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a23      	ldr	r2, [pc, #140]	; (80052ec <HAL_TIM_PWM_Start+0x14c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d107      	bne.n	8005272 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005270:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1d      	ldr	r2, [pc, #116]	; (80052ec <HAL_TIM_PWM_Start+0x14c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d018      	beq.n	80052ae <HAL_TIM_PWM_Start+0x10e>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005284:	d013      	beq.n	80052ae <HAL_TIM_PWM_Start+0x10e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a19      	ldr	r2, [pc, #100]	; (80052f0 <HAL_TIM_PWM_Start+0x150>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00e      	beq.n	80052ae <HAL_TIM_PWM_Start+0x10e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a17      	ldr	r2, [pc, #92]	; (80052f4 <HAL_TIM_PWM_Start+0x154>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d009      	beq.n	80052ae <HAL_TIM_PWM_Start+0x10e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a16      	ldr	r2, [pc, #88]	; (80052f8 <HAL_TIM_PWM_Start+0x158>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d004      	beq.n	80052ae <HAL_TIM_PWM_Start+0x10e>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a14      	ldr	r2, [pc, #80]	; (80052fc <HAL_TIM_PWM_Start+0x15c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d111      	bne.n	80052d2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b06      	cmp	r3, #6
 80052be:	d010      	beq.n	80052e2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d0:	e007      	b.n	80052e2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0201 	orr.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40010000 	.word	0x40010000
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800
 80052f8:	40000c00 	.word	0x40000c00
 80052fc:	40014000 	.word	0x40014000

08005300 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e04c      	b.n	80053ae <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d111      	bne.n	8005344 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f001 f981 	bl	8006630 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005332:	2b00      	cmp	r3, #0
 8005334:	d102      	bne.n	800533c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a1f      	ldr	r2, [pc, #124]	; (80053b8 <HAL_TIM_OnePulse_Init+0xb8>)
 800533a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f000 fe9e 	bl	8006098 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0208 	bic.w	r2, r2, #8
 800536a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6819      	ldr	r1, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	080053bd 	.word	0x080053bd

080053bc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053f8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d108      	bne.n	8005412 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005400:	7bbb      	ldrb	r3, [r7, #14]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d105      	bne.n	8005412 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005406:	7b7b      	ldrb	r3, [r7, #13]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d102      	bne.n	8005412 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800540c:	7b3b      	ldrb	r3, [r7, #12]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d001      	beq.n	8005416 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e03b      	b.n	800548e <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2202      	movs	r2, #2
 800541a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2202      	movs	r2, #2
 8005422:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2202      	movs	r2, #2
 800542a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2202      	movs	r2, #2
 8005432:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0202 	orr.w	r2, r2, #2
 8005444:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0204 	orr.w	r2, r2, #4
 8005454:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2201      	movs	r2, #1
 800545c:	2100      	movs	r1, #0
 800545e:	4618      	mov	r0, r3
 8005460:	f001 f8c0 	bl	80065e4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2201      	movs	r2, #1
 800546a:	2104      	movs	r1, #4
 800546c:	4618      	mov	r0, r3
 800546e:	f001 f8b9 	bl	80065e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a08      	ldr	r2, [pc, #32]	; (8005498 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d107      	bne.n	800548c <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800548a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40010000 	.word	0x40010000

0800549c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0a2      	b.n	80055f6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d111      	bne.n	80054e0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f001 f8b3 	bl	8006630 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d102      	bne.n	80054d8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a4a      	ldr	r2, [pc, #296]	; (8005600 <HAL_TIM_Encoder_Init+0x164>)
 80054d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6812      	ldr	r2, [r2, #0]
 80054f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054f6:	f023 0307 	bic.w	r3, r3, #7
 80054fa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3304      	adds	r3, #4
 8005504:	4619      	mov	r1, r3
 8005506:	4610      	mov	r0, r2
 8005508:	f000 fdc6 	bl	8006098 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005534:	f023 0303 	bic.w	r3, r3, #3
 8005538:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	4313      	orrs	r3, r2
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005552:	f023 030c 	bic.w	r3, r3, #12
 8005556:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800555e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	4313      	orrs	r3, r2
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	011a      	lsls	r2, r3, #4
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	031b      	lsls	r3, r3, #12
 8005582:	4313      	orrs	r3, r2
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005590:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005598:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	4313      	orrs	r3, r2
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	08002b45 	.word	0x08002b45

08005604 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005614:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800561c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005624:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800562c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d110      	bne.n	8005656 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d102      	bne.n	8005640 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800563a:	7b7b      	ldrb	r3, [r7, #13]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d001      	beq.n	8005644 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e069      	b.n	8005718 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005654:	e031      	b.n	80056ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b04      	cmp	r3, #4
 800565a:	d110      	bne.n	800567e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800565c:	7bbb      	ldrb	r3, [r7, #14]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d102      	bne.n	8005668 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005662:	7b3b      	ldrb	r3, [r7, #12]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d001      	beq.n	800566c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e055      	b.n	8005718 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800567c:	e01d      	b.n	80056ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d108      	bne.n	8005696 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005684:	7bbb      	ldrb	r3, [r7, #14]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d105      	bne.n	8005696 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800568a:	7b7b      	ldrb	r3, [r7, #13]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d102      	bne.n	8005696 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005690:	7b3b      	ldrb	r3, [r7, #12]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d001      	beq.n	800569a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e03e      	b.n	8005718 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2202      	movs	r2, #2
 800569e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2202      	movs	r2, #2
 80056a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2202      	movs	r2, #2
 80056b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <HAL_TIM_Encoder_Start+0xc4>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d008      	beq.n	80056d8 <HAL_TIM_Encoder_Start+0xd4>
 80056c6:	e00f      	b.n	80056e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2201      	movs	r2, #1
 80056ce:	2100      	movs	r1, #0
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 ff87 	bl	80065e4 <TIM_CCxChannelCmd>
      break;
 80056d6:	e016      	b.n	8005706 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2201      	movs	r2, #1
 80056de:	2104      	movs	r1, #4
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 ff7f 	bl	80065e4 <TIM_CCxChannelCmd>
      break;
 80056e6:	e00e      	b.n	8005706 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2201      	movs	r2, #1
 80056ee:	2100      	movs	r1, #0
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 ff77 	bl	80065e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2201      	movs	r2, #1
 80056fc:	2104      	movs	r1, #4
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 ff70 	bl	80065e4 <TIM_CCxChannelCmd>
      break;
 8005704:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0201 	orr.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b02      	cmp	r3, #2
 8005734:	d128      	bne.n	8005788 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b02      	cmp	r3, #2
 8005742:	d121      	bne.n	8005788 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0202 	mvn.w	r2, #2
 800574c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	4798      	blx	r3
 800576c:	e009      	b.n	8005782 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b04      	cmp	r3, #4
 8005794:	d128      	bne.n	80057e8 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d121      	bne.n	80057e8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0204 	mvn.w	r2, #4
 80057ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	4798      	blx	r3
 80057cc:	e009      	b.n	80057e2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0308 	and.w	r3, r3, #8
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d128      	bne.n	8005848 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b08      	cmp	r3, #8
 8005802:	d121      	bne.n	8005848 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0208 	mvn.w	r2, #8
 800580c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2204      	movs	r2, #4
 8005812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	4798      	blx	r3
 800582c:	e009      	b.n	8005842 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f003 0310 	and.w	r3, r3, #16
 8005852:	2b10      	cmp	r3, #16
 8005854:	d128      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b10      	cmp	r3, #16
 8005862:	d121      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0210 	mvn.w	r2, #16
 800586c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2208      	movs	r2, #8
 8005872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587e:	2b00      	cmp	r3, #0
 8005880:	d005      	beq.n	800588e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	4798      	blx	r3
 800588c:	e009      	b.n	80058a2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d110      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d109      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0201 	mvn.w	r2, #1
 80058cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e2:	2b80      	cmp	r3, #128	; 0x80
 80058e4:	d110      	bne.n	8005908 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f0:	2b80      	cmp	r3, #128	; 0x80
 80058f2:	d109      	bne.n	8005908 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005912:	2b40      	cmp	r3, #64	; 0x40
 8005914:	d110      	bne.n	8005938 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005920:	2b40      	cmp	r3, #64	; 0x40
 8005922:	d109      	bne.n	8005938 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800592c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b20      	cmp	r3, #32
 8005944:	d110      	bne.n	8005968 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b20      	cmp	r3, #32
 8005952:	d109      	bne.n	8005968 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0220 	mvn.w	r2, #32
 800595c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005968:	bf00      	nop
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_TIM_OC_ConfigChannel+0x1e>
 800598a:	2302      	movs	r3, #2
 800598c:	e048      	b.n	8005a20 <HAL_TIM_OC_ConfigChannel+0xb0>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b0c      	cmp	r3, #12
 800599a:	d839      	bhi.n	8005a10 <HAL_TIM_OC_ConfigChannel+0xa0>
 800599c:	a201      	add	r2, pc, #4	; (adr r2, 80059a4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800599e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a2:	bf00      	nop
 80059a4:	080059d9 	.word	0x080059d9
 80059a8:	08005a11 	.word	0x08005a11
 80059ac:	08005a11 	.word	0x08005a11
 80059b0:	08005a11 	.word	0x08005a11
 80059b4:	080059e7 	.word	0x080059e7
 80059b8:	08005a11 	.word	0x08005a11
 80059bc:	08005a11 	.word	0x08005a11
 80059c0:	08005a11 	.word	0x08005a11
 80059c4:	080059f5 	.word	0x080059f5
 80059c8:	08005a11 	.word	0x08005a11
 80059cc:	08005a11 	.word	0x08005a11
 80059d0:	08005a11 	.word	0x08005a11
 80059d4:	08005a03 	.word	0x08005a03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68b9      	ldr	r1, [r7, #8]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fbda 	bl	8006198 <TIM_OC1_SetConfig>
      break;
 80059e4:	e017      	b.n	8005a16 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fc39 	bl	8006264 <TIM_OC2_SetConfig>
      break;
 80059f2:	e010      	b.n	8005a16 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fc9e 	bl	800633c <TIM_OC3_SetConfig>
      break;
 8005a00:	e009      	b.n	8005a16 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 fd01 	bl	8006410 <TIM_OC4_SetConfig>
      break;
 8005a0e:	e002      	b.n	8005a16 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	75fb      	strb	r3, [r7, #23]
      break;
 8005a14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a34:	2300      	movs	r3, #0
 8005a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e0ae      	b.n	8005ba4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b0c      	cmp	r3, #12
 8005a52:	f200 809f 	bhi.w	8005b94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a56:	a201      	add	r2, pc, #4	; (adr r2, 8005a5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5c:	08005a91 	.word	0x08005a91
 8005a60:	08005b95 	.word	0x08005b95
 8005a64:	08005b95 	.word	0x08005b95
 8005a68:	08005b95 	.word	0x08005b95
 8005a6c:	08005ad1 	.word	0x08005ad1
 8005a70:	08005b95 	.word	0x08005b95
 8005a74:	08005b95 	.word	0x08005b95
 8005a78:	08005b95 	.word	0x08005b95
 8005a7c:	08005b13 	.word	0x08005b13
 8005a80:	08005b95 	.word	0x08005b95
 8005a84:	08005b95 	.word	0x08005b95
 8005a88:	08005b95 	.word	0x08005b95
 8005a8c:	08005b53 	.word	0x08005b53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fb7e 	bl	8006198 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0208 	orr.w	r2, r2, #8
 8005aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0204 	bic.w	r2, r2, #4
 8005aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6999      	ldr	r1, [r3, #24]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	619a      	str	r2, [r3, #24]
      break;
 8005ace:	e064      	b.n	8005b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fbc4 	bl	8006264 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6999      	ldr	r1, [r3, #24]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	021a      	lsls	r2, r3, #8
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	619a      	str	r2, [r3, #24]
      break;
 8005b10:	e043      	b.n	8005b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fc0f 	bl	800633c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0208 	orr.w	r2, r2, #8
 8005b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0204 	bic.w	r2, r2, #4
 8005b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69d9      	ldr	r1, [r3, #28]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	61da      	str	r2, [r3, #28]
      break;
 8005b50:	e023      	b.n	8005b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68b9      	ldr	r1, [r7, #8]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fc59 	bl	8006410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69d9      	ldr	r1, [r3, #28]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	021a      	lsls	r2, r3, #8
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	61da      	str	r2, [r3, #28]
      break;
 8005b92:	e002      	b.n	8005b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	75fb      	strb	r3, [r7, #23]
      break;
 8005b98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e0b4      	b.n	8005d32 <HAL_TIM_ConfigClockSource+0x186>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c00:	d03e      	beq.n	8005c80 <HAL_TIM_ConfigClockSource+0xd4>
 8005c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c06:	f200 8087 	bhi.w	8005d18 <HAL_TIM_ConfigClockSource+0x16c>
 8005c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0e:	f000 8086 	beq.w	8005d1e <HAL_TIM_ConfigClockSource+0x172>
 8005c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c16:	d87f      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x16c>
 8005c18:	2b70      	cmp	r3, #112	; 0x70
 8005c1a:	d01a      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0xa6>
 8005c1c:	2b70      	cmp	r3, #112	; 0x70
 8005c1e:	d87b      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x16c>
 8005c20:	2b60      	cmp	r3, #96	; 0x60
 8005c22:	d050      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0x11a>
 8005c24:	2b60      	cmp	r3, #96	; 0x60
 8005c26:	d877      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x16c>
 8005c28:	2b50      	cmp	r3, #80	; 0x50
 8005c2a:	d03c      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0xfa>
 8005c2c:	2b50      	cmp	r3, #80	; 0x50
 8005c2e:	d873      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x16c>
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d058      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x13a>
 8005c34:	2b40      	cmp	r3, #64	; 0x40
 8005c36:	d86f      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x16c>
 8005c38:	2b30      	cmp	r3, #48	; 0x30
 8005c3a:	d064      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x15a>
 8005c3c:	2b30      	cmp	r3, #48	; 0x30
 8005c3e:	d86b      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x16c>
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d060      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x15a>
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d867      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x16c>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d05c      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x15a>
 8005c4c:	2b10      	cmp	r3, #16
 8005c4e:	d05a      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x15a>
 8005c50:	e062      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	6899      	ldr	r1, [r3, #8]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f000 fc9f 	bl	80065a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	609a      	str	r2, [r3, #8]
      break;
 8005c7e:	e04f      	b.n	8005d20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	6899      	ldr	r1, [r3, #8]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f000 fc88 	bl	80065a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ca2:	609a      	str	r2, [r3, #8]
      break;
 8005ca4:	e03c      	b.n	8005d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6859      	ldr	r1, [r3, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f000 fbfc 	bl	80064b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2150      	movs	r1, #80	; 0x50
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fc55 	bl	800656e <TIM_ITRx_SetConfig>
      break;
 8005cc4:	e02c      	b.n	8005d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6859      	ldr	r1, [r3, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f000 fc1b 	bl	800650e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2160      	movs	r1, #96	; 0x60
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fc45 	bl	800656e <TIM_ITRx_SetConfig>
      break;
 8005ce4:	e01c      	b.n	8005d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6859      	ldr	r1, [r3, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f000 fbdc 	bl	80064b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2140      	movs	r1, #64	; 0x40
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fc35 	bl	800656e <TIM_ITRx_SetConfig>
      break;
 8005d04:	e00c      	b.n	8005d20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f000 fc2c 	bl	800656e <TIM_ITRx_SetConfig>
      break;
 8005d16:	e003      	b.n	8005d20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d1c:	e000      	b.n	8005d20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005df6:	bf00      	nop
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e135      	b.n	800608c <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_TIM_RegisterCallback+0x2a>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e12e      	b.n	800608c <HAL_TIM_RegisterCallback+0x288>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	f040 80ba 	bne.w	8005fb8 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8005e44:	7afb      	ldrb	r3, [r7, #11]
 8005e46:	2b1a      	cmp	r3, #26
 8005e48:	f200 80b3 	bhi.w	8005fb2 <HAL_TIM_RegisterCallback+0x1ae>
 8005e4c:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <HAL_TIM_RegisterCallback+0x50>)
 8005e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005ec1 	.word	0x08005ec1
 8005e58:	08005ec9 	.word	0x08005ec9
 8005e5c:	08005ed1 	.word	0x08005ed1
 8005e60:	08005ed9 	.word	0x08005ed9
 8005e64:	08005ee1 	.word	0x08005ee1
 8005e68:	08005ee9 	.word	0x08005ee9
 8005e6c:	08005ef1 	.word	0x08005ef1
 8005e70:	08005ef9 	.word	0x08005ef9
 8005e74:	08005f01 	.word	0x08005f01
 8005e78:	08005f09 	.word	0x08005f09
 8005e7c:	08005f11 	.word	0x08005f11
 8005e80:	08005f19 	.word	0x08005f19
 8005e84:	08005f21 	.word	0x08005f21
 8005e88:	08005f29 	.word	0x08005f29
 8005e8c:	08005f31 	.word	0x08005f31
 8005e90:	08005f3b 	.word	0x08005f3b
 8005e94:	08005f45 	.word	0x08005f45
 8005e98:	08005f4f 	.word	0x08005f4f
 8005e9c:	08005f59 	.word	0x08005f59
 8005ea0:	08005f63 	.word	0x08005f63
 8005ea4:	08005f6d 	.word	0x08005f6d
 8005ea8:	08005f77 	.word	0x08005f77
 8005eac:	08005f81 	.word	0x08005f81
 8005eb0:	08005f8b 	.word	0x08005f8b
 8005eb4:	08005f95 	.word	0x08005f95
 8005eb8:	08005f9f 	.word	0x08005f9f
 8005ebc:	08005fa9 	.word	0x08005fa9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8005ec6:	e0dc      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8005ece:	e0d8      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8005ed6:	e0d4      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8005ede:	e0d0      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8005ee6:	e0cc      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8005eee:	e0c8      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8005ef6:	e0c4      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8005efe:	e0c0      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8005f06:	e0bc      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8005f0e:	e0b8      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005f16:	e0b4      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8005f1e:	e0b0      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8005f26:	e0ac      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8005f2e:	e0a8      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8005f38:	e0a3      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8005f42:	e09e      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8005f4c:	e099      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8005f56:	e094      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8005f60:	e08f      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8005f6a:	e08a      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8005f74:	e085      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8005f7e:	e080      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8005f88:	e07b      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8005f92:	e076      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8005f9c:	e071      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8005fa6:	e06c      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8005fb0:	e067      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	75fb      	strb	r3, [r7, #23]
        break;
 8005fb6:	e064      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d15c      	bne.n	800607e <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8005fc4:	7afb      	ldrb	r3, [r7, #11]
 8005fc6:	2b0d      	cmp	r3, #13
 8005fc8:	d856      	bhi.n	8006078 <HAL_TIM_RegisterCallback+0x274>
 8005fca:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <HAL_TIM_RegisterCallback+0x1cc>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	08006009 	.word	0x08006009
 8005fd4:	08006011 	.word	0x08006011
 8005fd8:	08006019 	.word	0x08006019
 8005fdc:	08006021 	.word	0x08006021
 8005fe0:	08006029 	.word	0x08006029
 8005fe4:	08006031 	.word	0x08006031
 8005fe8:	08006039 	.word	0x08006039
 8005fec:	08006041 	.word	0x08006041
 8005ff0:	08006049 	.word	0x08006049
 8005ff4:	08006051 	.word	0x08006051
 8005ff8:	08006059 	.word	0x08006059
 8005ffc:	08006061 	.word	0x08006061
 8006000:	08006069 	.word	0x08006069
 8006004:	08006071 	.word	0x08006071
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800600e:	e038      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006016:	e034      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800601e:	e030      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006026:	e02c      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800602e:	e028      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006036:	e024      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800603e:	e020      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006046:	e01c      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800604e:	e018      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006056:	e014      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800605e:	e010      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006066:	e00c      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800606e:	e008      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006076:	e004      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	75fb      	strb	r3, [r7, #23]
        break;
 800607c:	e001      	b.n	8006082 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800608a:	7dfb      	ldrb	r3, [r7, #23]
}
 800608c:	4618      	mov	r0, r3
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a34      	ldr	r2, [pc, #208]	; (800617c <TIM_Base_SetConfig+0xe4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00f      	beq.n	80060d0 <TIM_Base_SetConfig+0x38>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b6:	d00b      	beq.n	80060d0 <TIM_Base_SetConfig+0x38>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a31      	ldr	r2, [pc, #196]	; (8006180 <TIM_Base_SetConfig+0xe8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d007      	beq.n	80060d0 <TIM_Base_SetConfig+0x38>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a30      	ldr	r2, [pc, #192]	; (8006184 <TIM_Base_SetConfig+0xec>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d003      	beq.n	80060d0 <TIM_Base_SetConfig+0x38>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a2f      	ldr	r2, [pc, #188]	; (8006188 <TIM_Base_SetConfig+0xf0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d108      	bne.n	80060e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a25      	ldr	r2, [pc, #148]	; (800617c <TIM_Base_SetConfig+0xe4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d01b      	beq.n	8006122 <TIM_Base_SetConfig+0x8a>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f0:	d017      	beq.n	8006122 <TIM_Base_SetConfig+0x8a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a22      	ldr	r2, [pc, #136]	; (8006180 <TIM_Base_SetConfig+0xe8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <TIM_Base_SetConfig+0x8a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a21      	ldr	r2, [pc, #132]	; (8006184 <TIM_Base_SetConfig+0xec>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00f      	beq.n	8006122 <TIM_Base_SetConfig+0x8a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a20      	ldr	r2, [pc, #128]	; (8006188 <TIM_Base_SetConfig+0xf0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00b      	beq.n	8006122 <TIM_Base_SetConfig+0x8a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a1f      	ldr	r2, [pc, #124]	; (800618c <TIM_Base_SetConfig+0xf4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d007      	beq.n	8006122 <TIM_Base_SetConfig+0x8a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a1e      	ldr	r2, [pc, #120]	; (8006190 <TIM_Base_SetConfig+0xf8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d003      	beq.n	8006122 <TIM_Base_SetConfig+0x8a>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a1d      	ldr	r2, [pc, #116]	; (8006194 <TIM_Base_SetConfig+0xfc>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d108      	bne.n	8006134 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4313      	orrs	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a08      	ldr	r2, [pc, #32]	; (800617c <TIM_Base_SetConfig+0xe4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d103      	bne.n	8006168 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	615a      	str	r2, [r3, #20]
}
 800616e:	bf00      	nop
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	40010000 	.word	0x40010000
 8006180:	40000400 	.word	0x40000400
 8006184:	40000800 	.word	0x40000800
 8006188:	40000c00 	.word	0x40000c00
 800618c:	40014000 	.word	0x40014000
 8006190:	40014400 	.word	0x40014400
 8006194:	40014800 	.word	0x40014800

08006198 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	f023 0201 	bic.w	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0303 	bic.w	r3, r3, #3
 80061ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f023 0302 	bic.w	r3, r3, #2
 80061e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a1c      	ldr	r2, [pc, #112]	; (8006260 <TIM_OC1_SetConfig+0xc8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d10c      	bne.n	800620e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f023 0308 	bic.w	r3, r3, #8
 80061fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f023 0304 	bic.w	r3, r3, #4
 800620c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a13      	ldr	r2, [pc, #76]	; (8006260 <TIM_OC1_SetConfig+0xc8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d111      	bne.n	800623a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800621c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	621a      	str	r2, [r3, #32]
}
 8006254:	bf00      	nop
 8006256:	371c      	adds	r7, #28
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	40010000 	.word	0x40010000

08006264 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	f023 0210 	bic.w	r2, r3, #16
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800629a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	021b      	lsls	r3, r3, #8
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f023 0320 	bic.w	r3, r3, #32
 80062ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	011b      	lsls	r3, r3, #4
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a1e      	ldr	r2, [pc, #120]	; (8006338 <TIM_OC2_SetConfig+0xd4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d10d      	bne.n	80062e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a15      	ldr	r2, [pc, #84]	; (8006338 <TIM_OC2_SetConfig+0xd4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d113      	bne.n	8006310 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	4313      	orrs	r3, r2
 8006302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	621a      	str	r2, [r3, #32]
}
 800632a:	bf00      	nop
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	40010000 	.word	0x40010000

0800633c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0303 	bic.w	r3, r3, #3
 8006372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	021b      	lsls	r3, r3, #8
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	4313      	orrs	r3, r2
 8006390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a1d      	ldr	r2, [pc, #116]	; (800640c <TIM_OC3_SetConfig+0xd0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d10d      	bne.n	80063b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a14      	ldr	r2, [pc, #80]	; (800640c <TIM_OC3_SetConfig+0xd0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d113      	bne.n	80063e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	011b      	lsls	r3, r3, #4
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	621a      	str	r2, [r3, #32]
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	40010000 	.word	0x40010000

08006410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800645a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	031b      	lsls	r3, r3, #12
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4313      	orrs	r3, r2
 8006466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a10      	ldr	r2, [pc, #64]	; (80064ac <TIM_OC4_SetConfig+0x9c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d109      	bne.n	8006484 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006476:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	019b      	lsls	r3, r3, #6
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	621a      	str	r2, [r3, #32]
}
 800649e:	bf00      	nop
 80064a0:	371c      	adds	r7, #28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	40010000 	.word	0x40010000

080064b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	f023 0201 	bic.w	r2, r3, #1
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	011b      	lsls	r3, r3, #4
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f023 030a 	bic.w	r3, r3, #10
 80064ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	621a      	str	r2, [r3, #32]
}
 8006502:	bf00      	nop
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800650e:	b480      	push	{r7}
 8006510:	b087      	sub	sp, #28
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	f023 0210 	bic.w	r2, r3, #16
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006538:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	031b      	lsls	r3, r3, #12
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4313      	orrs	r3, r2
 8006542:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800654a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	621a      	str	r2, [r3, #32]
}
 8006562:	bf00      	nop
 8006564:	371c      	adds	r7, #28
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800656e:	b480      	push	{r7}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4313      	orrs	r3, r2
 800658c:	f043 0307 	orr.w	r3, r3, #7
 8006590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	609a      	str	r2, [r3, #8]
}
 8006598:	bf00      	nop
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	021a      	lsls	r2, r3, #8
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	431a      	orrs	r2, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	609a      	str	r2, [r3, #8]
}
 80065d8:	bf00      	nop
 80065da:	371c      	adds	r7, #28
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f003 031f 	and.w	r3, r3, #31
 80065f6:	2201      	movs	r2, #1
 80065f8:	fa02 f303 	lsl.w	r3, r2, r3
 80065fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a1a      	ldr	r2, [r3, #32]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	43db      	mvns	r3, r3
 8006606:	401a      	ands	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1a      	ldr	r2, [r3, #32]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f003 031f 	and.w	r3, r3, #31
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	fa01 f303 	lsl.w	r3, r1, r3
 800661c:	431a      	orrs	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	621a      	str	r2, [r3, #32]
}
 8006622:	bf00      	nop
 8006624:	371c      	adds	r7, #28
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
	...

08006630 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a1c      	ldr	r2, [pc, #112]	; (80066ac <TIM_ResetCallback+0x7c>)
 800663c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a1b      	ldr	r2, [pc, #108]	; (80066b0 <TIM_ResetCallback+0x80>)
 8006644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a1a      	ldr	r2, [pc, #104]	; (80066b4 <TIM_ResetCallback+0x84>)
 800664c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a19      	ldr	r2, [pc, #100]	; (80066b8 <TIM_ResetCallback+0x88>)
 8006654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a18      	ldr	r2, [pc, #96]	; (80066bc <TIM_ResetCallback+0x8c>)
 800665c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a17      	ldr	r2, [pc, #92]	; (80066c0 <TIM_ResetCallback+0x90>)
 8006664:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a16      	ldr	r2, [pc, #88]	; (80066c4 <TIM_ResetCallback+0x94>)
 800666c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a15      	ldr	r2, [pc, #84]	; (80066c8 <TIM_ResetCallback+0x98>)
 8006674:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a14      	ldr	r2, [pc, #80]	; (80066cc <TIM_ResetCallback+0x9c>)
 800667c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a13      	ldr	r2, [pc, #76]	; (80066d0 <TIM_ResetCallback+0xa0>)
 8006684:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a12      	ldr	r2, [pc, #72]	; (80066d4 <TIM_ResetCallback+0xa4>)
 800668c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a11      	ldr	r2, [pc, #68]	; (80066d8 <TIM_ResetCallback+0xa8>)
 8006694:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a10      	ldr	r2, [pc, #64]	; (80066dc <TIM_ResetCallback+0xac>)
 800669c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	08005d3b 	.word	0x08005d3b
 80066b0:	08005d4f 	.word	0x08005d4f
 80066b4:	08005dc7 	.word	0x08005dc7
 80066b8:	08005ddb 	.word	0x08005ddb
 80066bc:	08005d77 	.word	0x08005d77
 80066c0:	08005d8b 	.word	0x08005d8b
 80066c4:	08005d63 	.word	0x08005d63
 80066c8:	08005d9f 	.word	0x08005d9f
 80066cc:	08005db3 	.word	0x08005db3
 80066d0:	08005def 	.word	0x08005def
 80066d4:	08006861 	.word	0x08006861
 80066d8:	08006875 	.word	0x08006875
 80066dc:	08006889 	.word	0x08006889

080066e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e050      	b.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a1c      	ldr	r2, [pc, #112]	; (80067a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d018      	beq.n	800676e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006744:	d013      	beq.n	800676e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a18      	ldr	r2, [pc, #96]	; (80067ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00e      	beq.n	800676e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a16      	ldr	r2, [pc, #88]	; (80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d009      	beq.n	800676e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a15      	ldr	r2, [pc, #84]	; (80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d004      	beq.n	800676e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a13      	ldr	r2, [pc, #76]	; (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d10c      	bne.n	8006788 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	4313      	orrs	r3, r2
 800677e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40010000 	.word	0x40010000
 80067ac:	40000400 	.word	0x40000400
 80067b0:	40000800 	.word	0x40000800
 80067b4:	40000c00 	.word	0x40000c00
 80067b8:	40014000 	.word	0x40014000

080067bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d101      	bne.n	80067d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80067d4:	2302      	movs	r3, #2
 80067d6:	e03d      	b.n	8006854 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4313      	orrs	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	4313      	orrs	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e04a      	b.n	8006944 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d111      	bne.n	80068de <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fd2c 	bl	8007320 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d102      	bne.n	80068d6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a1e      	ldr	r2, [pc, #120]	; (800694c <HAL_UART_Init+0xb0>)
 80068d4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2224      	movs	r2, #36	; 0x24
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fff6 	bl	80078e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691a      	ldr	r2, [r3, #16]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800690a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	695a      	ldr	r2, [r3, #20]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800691a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800692a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	08002c45 	.word	0x08002c45

08006950 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	460b      	mov	r3, r1
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d107      	bne.n	8006978 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696c:	f043 0220 	orr.w	r2, r3, #32
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e08c      	b.n	8006a92 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <HAL_UART_RegisterCallback+0x36>
 8006982:	2302      	movs	r3, #2
 8006984:	e085      	b.n	8006a92 <HAL_UART_RegisterCallback+0x142>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b20      	cmp	r3, #32
 8006998:	d151      	bne.n	8006a3e <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800699a:	7afb      	ldrb	r3, [r7, #11]
 800699c:	2b0c      	cmp	r3, #12
 800699e:	d845      	bhi.n	8006a2c <HAL_UART_RegisterCallback+0xdc>
 80069a0:	a201      	add	r2, pc, #4	; (adr r2, 80069a8 <HAL_UART_RegisterCallback+0x58>)
 80069a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a6:	bf00      	nop
 80069a8:	080069dd 	.word	0x080069dd
 80069ac:	080069e5 	.word	0x080069e5
 80069b0:	080069ed 	.word	0x080069ed
 80069b4:	080069f5 	.word	0x080069f5
 80069b8:	080069fd 	.word	0x080069fd
 80069bc:	08006a05 	.word	0x08006a05
 80069c0:	08006a0d 	.word	0x08006a0d
 80069c4:	08006a15 	.word	0x08006a15
 80069c8:	08006a2d 	.word	0x08006a2d
 80069cc:	08006a2d 	.word	0x08006a2d
 80069d0:	08006a2d 	.word	0x08006a2d
 80069d4:	08006a1d 	.word	0x08006a1d
 80069d8:	08006a25 	.word	0x08006a25
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80069e2:	e051      	b.n	8006a88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80069ea:	e04d      	b.n	8006a88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80069f2:	e049      	b.n	8006a88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80069fa:	e045      	b.n	8006a88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006a02:	e041      	b.n	8006a88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006a0a:	e03d      	b.n	8006a88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006a12:	e039      	b.n	8006a88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006a1a:	e035      	b.n	8006a88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006a22:	e031      	b.n	8006a88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006a2a:	e02d      	b.n	8006a88 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	75fb      	strb	r3, [r7, #23]
        break;
 8006a3c:	e024      	b.n	8006a88 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d116      	bne.n	8006a78 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8006a4a:	7afb      	ldrb	r3, [r7, #11]
 8006a4c:	2b0b      	cmp	r3, #11
 8006a4e:	d002      	beq.n	8006a56 <HAL_UART_RegisterCallback+0x106>
 8006a50:	2b0c      	cmp	r3, #12
 8006a52:	d004      	beq.n	8006a5e <HAL_UART_RegisterCallback+0x10e>
 8006a54:	e007      	b.n	8006a66 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006a5c:	e014      	b.n	8006a88 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006a64:	e010      	b.n	8006a88 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	f043 0220 	orr.w	r2, r3, #32
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	75fb      	strb	r3, [r7, #23]
        break;
 8006a76:	e007      	b.n	8006a88 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7c:	f043 0220 	orr.w	r2, r3, #32
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	371c      	adds	r7, #28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop

08006aa0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b20      	cmp	r3, #32
 8006ab8:	d11d      	bne.n	8006af6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <HAL_UART_Receive_IT+0x26>
 8006ac0:	88fb      	ldrh	r3, [r7, #6]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e016      	b.n	8006af8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d101      	bne.n	8006ad8 <HAL_UART_Receive_IT+0x38>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e00f      	b.n	8006af8 <HAL_UART_Receive_IT+0x58>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ae6:	88fb      	ldrh	r3, [r7, #6]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	68b9      	ldr	r1, [r7, #8]
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 fcf7 	bl	80074e0 <UART_Start_Receive_IT>
 8006af2:	4603      	mov	r3, r0
 8006af4:	e000      	b.n	8006af8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006af6:	2302      	movs	r3, #2
  }
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08c      	sub	sp, #48	; 0x30
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d165      	bne.n	8006be6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <HAL_UART_Transmit_DMA+0x26>
 8006b20:	88fb      	ldrh	r3, [r7, #6]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e05e      	b.n	8006be8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_UART_Transmit_DMA+0x38>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e057      	b.n	8006be8 <HAL_UART_Transmit_DMA+0xe8>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	88fa      	ldrh	r2, [r7, #6]
 8006b4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	88fa      	ldrh	r2, [r7, #6]
 8006b50:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2221      	movs	r2, #33	; 0x21
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b64:	4a22      	ldr	r2, [pc, #136]	; (8006bf0 <HAL_UART_Transmit_DMA+0xf0>)
 8006b66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6c:	4a21      	ldr	r2, [pc, #132]	; (8006bf4 <HAL_UART_Transmit_DMA+0xf4>)
 8006b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b74:	4a20      	ldr	r2, [pc, #128]	; (8006bf8 <HAL_UART_Transmit_DMA+0xf8>)
 8006b76:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006b80:	f107 0308 	add.w	r3, r7, #8
 8006b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8c:	6819      	ldr	r1, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3304      	adds	r3, #4
 8006b94:	461a      	mov	r2, r3
 8006b96:	88fb      	ldrh	r3, [r7, #6]
 8006b98:	f7fc fe44 	bl	8003824 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ba4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3314      	adds	r3, #20
 8006bb4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3314      	adds	r3, #20
 8006bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bce:	627a      	str	r2, [r7, #36]	; 0x24
 8006bd0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd2:	6a39      	ldr	r1, [r7, #32]
 8006bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e5      	bne.n	8006bae <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e000      	b.n	8006be8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006be6:	2302      	movs	r3, #2
  }
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3730      	adds	r7, #48	; 0x30
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	08007391 	.word	0x08007391
 8006bf4:	0800742d 	.word	0x0800742d
 8006bf8:	0800744b 	.word	0x0800744b

08006bfc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b09a      	sub	sp, #104	; 0x68
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	330c      	adds	r3, #12
 8006c0a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c1a:	667b      	str	r3, [r7, #100]	; 0x64
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	330c      	adds	r3, #12
 8006c22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c24:	657a      	str	r2, [r7, #84]	; 0x54
 8006c26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e5      	bne.n	8006c04 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3314      	adds	r3, #20
 8006c3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	f023 0301 	bic.w	r3, r3, #1
 8006c4e:	663b      	str	r3, [r7, #96]	; 0x60
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3314      	adds	r3, #20
 8006c56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c58:	643a      	str	r2, [r7, #64]	; 0x40
 8006c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e5      	bne.n	8006c38 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d119      	bne.n	8006ca8 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	330c      	adds	r3, #12
 8006c7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f023 0310 	bic.w	r3, r3, #16
 8006c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	330c      	adds	r3, #12
 8006c92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c9c:	e841 2300 	strex	r3, r2, [r1]
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e5      	bne.n	8006c74 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb2:	2b40      	cmp	r3, #64	; 0x40
 8006cb4:	d136      	bne.n	8006d24 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	3314      	adds	r3, #20
 8006cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	e853 3f00 	ldrex	r3, [r3]
 8006cc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ccc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3314      	adds	r3, #20
 8006cd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cd6:	61ba      	str	r2, [r7, #24]
 8006cd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	6979      	ldr	r1, [r7, #20]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e5      	bne.n	8006cb6 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d018      	beq.n	8006d24 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fc fde8 	bl	80038d4 <HAL_DMA_Abort>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00c      	beq.n	8006d24 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fc fffc 	bl	8003d0c <HAL_DMA_GetError>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b20      	cmp	r3, #32
 8006d18:	d104      	bne.n	8006d24 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2210      	movs	r2, #16
 8006d1e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e00a      	b.n	8006d3a <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3768      	adds	r7, #104	; 0x68
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b0ba      	sub	sp, #232	; 0xe8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7a:	f003 030f 	and.w	r3, r3, #15
 8006d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10f      	bne.n	8006daa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <HAL_UART_IRQHandler+0x66>
 8006d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fce3 	bl	800776e <UART_Receive_IT>
      return;
 8006da8:	e25b      	b.n	8007262 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 80e1 	beq.w	8006f76 <HAL_UART_IRQHandler+0x232>
 8006db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d106      	bne.n	8006dce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 80d4 	beq.w	8006f76 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00b      	beq.n	8006df2 <HAL_UART_IRQHandler+0xae>
 8006dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d005      	beq.n	8006df2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	f043 0201 	orr.w	r2, r3, #1
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df6:	f003 0304 	and.w	r3, r3, #4
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00b      	beq.n	8006e16 <HAL_UART_IRQHandler+0xd2>
 8006dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	f043 0202 	orr.w	r2, r3, #2
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00b      	beq.n	8006e3a <HAL_UART_IRQHandler+0xf6>
 8006e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d005      	beq.n	8006e3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e32:	f043 0204 	orr.w	r2, r3, #4
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e3e:	f003 0308 	and.w	r3, r3, #8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d011      	beq.n	8006e6a <HAL_UART_IRQHandler+0x126>
 8006e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e4a:	f003 0320 	and.w	r3, r3, #32
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d105      	bne.n	8006e5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d005      	beq.n	8006e6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	f043 0208 	orr.w	r2, r3, #8
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 81f2 	beq.w	8007258 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e78:	f003 0320 	and.w	r3, r3, #32
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d008      	beq.n	8006e92 <HAL_UART_IRQHandler+0x14e>
 8006e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fc6e 	bl	800776e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9c:	2b40      	cmp	r3, #64	; 0x40
 8006e9e:	bf0c      	ite	eq
 8006ea0:	2301      	moveq	r3, #1
 8006ea2:	2300      	movne	r3, #0
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d103      	bne.n	8006ebe <HAL_UART_IRQHandler+0x17a>
 8006eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d051      	beq.n	8006f62 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fb74 	bl	80075ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ece:	2b40      	cmp	r3, #64	; 0x40
 8006ed0:	d142      	bne.n	8006f58 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3314      	adds	r3, #20
 8006ed8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3314      	adds	r3, #20
 8006efa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006efe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1d9      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d013      	beq.n	8006f4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2a:	4a7f      	ldr	r2, [pc, #508]	; (8007128 <HAL_UART_IRQHandler+0x3e4>)
 8006f2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fc fd3e 	bl	80039b4 <HAL_DMA_Abort_IT>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d019      	beq.n	8006f72 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f48:	4610      	mov	r0, r2
 8006f4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f4c:	e011      	b.n	8006f72 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f56:	e00c      	b.n	8006f72 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f60:	e007      	b.n	8006f72 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006f70:	e172      	b.n	8007258 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f72:	bf00      	nop
    return;
 8006f74:	e170      	b.n	8007258 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	f040 814c 	bne.w	8007218 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f84:	f003 0310 	and.w	r3, r3, #16
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 8145 	beq.w	8007218 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 813e 	beq.w	8007218 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60bb      	str	r3, [r7, #8]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	60bb      	str	r3, [r7, #8]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	60bb      	str	r3, [r7, #8]
 8006fb0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fbc:	2b40      	cmp	r3, #64	; 0x40
 8006fbe:	f040 80b5 	bne.w	800712c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 8142 	beq.w	800725c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fdc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	f080 813b 	bcs.w	800725c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff8:	f000 8088 	beq.w	800710c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800700a:	e853 3f00 	ldrex	r3, [r3]
 800700e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800701a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	330c      	adds	r3, #12
 8007024:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007028:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800702c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007030:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007034:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007038:	e841 2300 	strex	r3, r2, [r1]
 800703c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1d9      	bne.n	8006ffc <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3314      	adds	r3, #20
 800704e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007052:	e853 3f00 	ldrex	r3, [r3]
 8007056:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800705a:	f023 0301 	bic.w	r3, r3, #1
 800705e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3314      	adds	r3, #20
 8007068:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800706c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007070:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007074:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800707e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e1      	bne.n	8007048 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3314      	adds	r3, #20
 800708a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800709a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3314      	adds	r3, #20
 80070a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070b0:	e841 2300 	strex	r3, r2, [r1]
 80070b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1e3      	bne.n	8007084 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	330c      	adds	r3, #12
 80070d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070dc:	f023 0310 	bic.w	r3, r3, #16
 80070e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	330c      	adds	r3, #12
 80070ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80070ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80070f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e3      	bne.n	80070ca <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007106:	4618      	mov	r0, r3
 8007108:	f7fc fbe4 	bl	80038d4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007118:	b292      	uxth	r2, r2
 800711a:	1a8a      	subs	r2, r1, r2
 800711c:	b292      	uxth	r2, r2
 800711e:	4611      	mov	r1, r2
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007124:	e09a      	b.n	800725c <HAL_UART_IRQHandler+0x518>
 8007126:	bf00      	nop
 8007128:	08007673 	.word	0x08007673
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007134:	b29b      	uxth	r3, r3
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 808c 	beq.w	8007260 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 8087 	beq.w	8007260 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	330c      	adds	r3, #12
 8007158:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007168:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	330c      	adds	r3, #12
 8007172:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007176:	647a      	str	r2, [r7, #68]	; 0x44
 8007178:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800717c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e3      	bne.n	8007152 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3314      	adds	r3, #20
 8007190:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	623b      	str	r3, [r7, #32]
   return(result);
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	f023 0301 	bic.w	r3, r3, #1
 80071a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3314      	adds	r3, #20
 80071aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80071ae:	633a      	str	r2, [r7, #48]	; 0x30
 80071b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e3      	bne.n	800718a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	330c      	adds	r3, #12
 80071d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	e853 3f00 	ldrex	r3, [r3]
 80071de:	60fb      	str	r3, [r7, #12]
   return(result);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f023 0310 	bic.w	r3, r3, #16
 80071e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	330c      	adds	r3, #12
 80071f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80071f4:	61fa      	str	r2, [r7, #28]
 80071f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f8:	69b9      	ldr	r1, [r7, #24]
 80071fa:	69fa      	ldr	r2, [r7, #28]
 80071fc:	e841 2300 	strex	r3, r2, [r1]
 8007200:	617b      	str	r3, [r7, #20]
   return(result);
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1e3      	bne.n	80071d0 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800720c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8007210:	4611      	mov	r1, r2
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007216:	e023      	b.n	8007260 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800721c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007220:	2b00      	cmp	r3, #0
 8007222:	d009      	beq.n	8007238 <HAL_UART_IRQHandler+0x4f4>
 8007224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fa33 	bl	800769c <UART_Transmit_IT>
    return;
 8007236:	e014      	b.n	8007262 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800723c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00e      	beq.n	8007262 <HAL_UART_IRQHandler+0x51e>
 8007244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724c:	2b00      	cmp	r3, #0
 800724e:	d008      	beq.n	8007262 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fa73 	bl	800773c <UART_EndTransmit_IT>
    return;
 8007256:	e004      	b.n	8007262 <HAL_UART_IRQHandler+0x51e>
    return;
 8007258:	bf00      	nop
 800725a:	e002      	b.n	8007262 <HAL_UART_IRQHandler+0x51e>
      return;
 800725c:	bf00      	nop
 800725e:	e000      	b.n	8007262 <HAL_UART_IRQHandler+0x51e>
      return;
 8007260:	bf00      	nop
  }
}
 8007262:	37e8      	adds	r7, #232	; 0xe8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a10      	ldr	r2, [pc, #64]	; (800736c <UART_InitCallbacksToDefault+0x4c>)
 800732c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a0f      	ldr	r2, [pc, #60]	; (8007370 <UART_InitCallbacksToDefault+0x50>)
 8007332:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a0f      	ldr	r2, [pc, #60]	; (8007374 <UART_InitCallbacksToDefault+0x54>)
 8007338:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a0e      	ldr	r2, [pc, #56]	; (8007378 <UART_InitCallbacksToDefault+0x58>)
 800733e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a0e      	ldr	r2, [pc, #56]	; (800737c <UART_InitCallbacksToDefault+0x5c>)
 8007344:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a0d      	ldr	r2, [pc, #52]	; (8007380 <UART_InitCallbacksToDefault+0x60>)
 800734a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a0d      	ldr	r2, [pc, #52]	; (8007384 <UART_InitCallbacksToDefault+0x64>)
 8007350:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a0c      	ldr	r2, [pc, #48]	; (8007388 <UART_InitCallbacksToDefault+0x68>)
 8007356:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a0c      	ldr	r2, [pc, #48]	; (800738c <UART_InitCallbacksToDefault+0x6c>)
 800735c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800735e:	bf00      	nop
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	0800727d 	.word	0x0800727d
 8007370:	08007269 	.word	0x08007269
 8007374:	080072a5 	.word	0x080072a5
 8007378:	08007291 	.word	0x08007291
 800737c:	080072b9 	.word	0x080072b9
 8007380:	080072cd 	.word	0x080072cd
 8007384:	080072e1 	.word	0x080072e1
 8007388:	080072f5 	.word	0x080072f5
 800738c:	08007309 	.word	0x08007309

08007390 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b090      	sub	sp, #64	; 0x40
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d137      	bne.n	800741c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80073ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ae:	2200      	movs	r2, #0
 80073b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80073b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3314      	adds	r3, #20
 80073b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	e853 3f00 	ldrex	r3, [r3]
 80073c0:	623b      	str	r3, [r7, #32]
   return(result);
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80073ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3314      	adds	r3, #20
 80073d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073d2:	633a      	str	r2, [r7, #48]	; 0x30
 80073d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e5      	bne.n	80073b2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	330c      	adds	r3, #12
 80073ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
 80073fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	330c      	adds	r3, #12
 8007404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007406:	61fa      	str	r2, [r7, #28]
 8007408:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	69b9      	ldr	r1, [r7, #24]
 800740c:	69fa      	ldr	r2, [r7, #28]
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	617b      	str	r3, [r7, #20]
   return(result);
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e5      	bne.n	80073e6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800741a:	e003      	b.n	8007424 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800741c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800741e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007420:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007422:	4798      	blx	r3
}
 8007424:	bf00      	nop
 8007426:	3740      	adds	r7, #64	; 0x40
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007438:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007442:	bf00      	nop
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007466:	2b80      	cmp	r3, #128	; 0x80
 8007468:	bf0c      	ite	eq
 800746a:	2301      	moveq	r3, #1
 800746c:	2300      	movne	r3, #0
 800746e:	b2db      	uxtb	r3, r3
 8007470:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b21      	cmp	r3, #33	; 0x21
 800747c:	d108      	bne.n	8007490 <UART_DMAError+0x46>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2200      	movs	r2, #0
 8007488:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800748a:	68b8      	ldr	r0, [r7, #8]
 800748c:	f000 f866 	bl	800755c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749a:	2b40      	cmp	r3, #64	; 0x40
 800749c:	bf0c      	ite	eq
 800749e:	2301      	moveq	r3, #1
 80074a0:	2300      	movne	r3, #0
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b22      	cmp	r3, #34	; 0x22
 80074b0:	d108      	bne.n	80074c4 <UART_DMAError+0x7a>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2200      	movs	r2, #0
 80074bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80074be:	68b8      	ldr	r0, [r7, #8]
 80074c0:	f000 f874 	bl	80075ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c8:	f043 0210 	orr.w	r2, r3, #16
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d4:	68b8      	ldr	r0, [r7, #8]
 80074d6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074d8:	bf00      	nop
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	4613      	mov	r3, r2
 80074ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	88fa      	ldrh	r2, [r7, #6]
 80074f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	88fa      	ldrh	r2, [r7, #6]
 80074fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2222      	movs	r2, #34	; 0x22
 800750a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d007      	beq.n	800752e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800752c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	695a      	ldr	r2, [r3, #20]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f042 0201 	orr.w	r2, r2, #1
 800753c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f042 0220 	orr.w	r2, r2, #32
 800754c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800755c:	b480      	push	{r7}
 800755e:	b089      	sub	sp, #36	; 0x24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	330c      	adds	r3, #12
 800756a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	60bb      	str	r3, [r7, #8]
   return(result);
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800757a:	61fb      	str	r3, [r7, #28]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	330c      	adds	r3, #12
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	61ba      	str	r2, [r7, #24]
 8007586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007588:	6979      	ldr	r1, [r7, #20]
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	e841 2300 	strex	r3, r2, [r1]
 8007590:	613b      	str	r3, [r7, #16]
   return(result);
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e5      	bne.n	8007564 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2220      	movs	r2, #32
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80075a0:	bf00      	nop
 80075a2:	3724      	adds	r7, #36	; 0x24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b095      	sub	sp, #84	; 0x54
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	330c      	adds	r3, #12
 80075ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	330c      	adds	r3, #12
 80075d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075d4:	643a      	str	r2, [r7, #64]	; 0x40
 80075d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075dc:	e841 2300 	strex	r3, r2, [r1]
 80075e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e5      	bne.n	80075b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3314      	adds	r3, #20
 80075ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	f023 0301 	bic.w	r3, r3, #1
 80075fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3314      	adds	r3, #20
 8007606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800760a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800760e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e5      	bne.n	80075e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007620:	2b01      	cmp	r3, #1
 8007622:	d119      	bne.n	8007658 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	330c      	adds	r3, #12
 800762a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	e853 3f00 	ldrex	r3, [r3]
 8007632:	60bb      	str	r3, [r7, #8]
   return(result);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f023 0310 	bic.w	r3, r3, #16
 800763a:	647b      	str	r3, [r7, #68]	; 0x44
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	330c      	adds	r3, #12
 8007642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007644:	61ba      	str	r2, [r7, #24]
 8007646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	6979      	ldr	r1, [r7, #20]
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	e841 2300 	strex	r3, r2, [r1]
 8007650:	613b      	str	r3, [r7, #16]
   return(result);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e5      	bne.n	8007624 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007666:	bf00      	nop
 8007668:	3754      	adds	r7, #84	; 0x54
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007694:	bf00      	nop
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b21      	cmp	r3, #33	; 0x21
 80076ae:	d13e      	bne.n	800772e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b8:	d114      	bne.n	80076e4 <UART_Transmit_IT+0x48>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d110      	bne.n	80076e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	461a      	mov	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	1c9a      	adds	r2, r3, #2
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	621a      	str	r2, [r3, #32]
 80076e2:	e008      	b.n	80076f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	1c59      	adds	r1, r3, #1
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	6211      	str	r1, [r2, #32]
 80076ee:	781a      	ldrb	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	3b01      	subs	r3, #1
 80076fe:	b29b      	uxth	r3, r3
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	4619      	mov	r1, r3
 8007704:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10f      	bne.n	800772a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007718:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68da      	ldr	r2, [r3, #12]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007728:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	e000      	b.n	8007730 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800772e:	2302      	movs	r3, #2
  }
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68da      	ldr	r2, [r3, #12]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007752:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2220      	movs	r2, #32
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b08c      	sub	sp, #48	; 0x30
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b22      	cmp	r3, #34	; 0x22
 8007780:	f040 80ad 	bne.w	80078de <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778c:	d117      	bne.n	80077be <UART_Receive_IT+0x50>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d113      	bne.n	80077be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007796:	2300      	movs	r3, #0
 8007798:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	1c9a      	adds	r2, r3, #2
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	629a      	str	r2, [r3, #40]	; 0x28
 80077bc:	e026      	b.n	800780c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80077c4:	2300      	movs	r3, #0
 80077c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d0:	d007      	beq.n	80077e2 <UART_Receive_IT+0x74>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10a      	bne.n	80077f0 <UART_Receive_IT+0x82>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d106      	bne.n	80077f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	e008      	b.n	8007802 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007800:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007810:	b29b      	uxth	r3, r3
 8007812:	3b01      	subs	r3, #1
 8007814:	b29b      	uxth	r3, r3
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	4619      	mov	r1, r3
 800781a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800781c:	2b00      	cmp	r3, #0
 800781e:	d15c      	bne.n	80078da <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f022 0220 	bic.w	r2, r2, #32
 800782e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68da      	ldr	r2, [r3, #12]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800783e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	695a      	ldr	r2, [r3, #20]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 0201 	bic.w	r2, r2, #1
 800784e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2220      	movs	r2, #32
 8007854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785c:	2b01      	cmp	r3, #1
 800785e:	d136      	bne.n	80078ce <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	330c      	adds	r3, #12
 800786c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	613b      	str	r3, [r7, #16]
   return(result);
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f023 0310 	bic.w	r3, r3, #16
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	330c      	adds	r3, #12
 8007884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007886:	623a      	str	r2, [r7, #32]
 8007888:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	69f9      	ldr	r1, [r7, #28]
 800788c:	6a3a      	ldr	r2, [r7, #32]
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	61bb      	str	r3, [r7, #24]
   return(result);
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e5      	bne.n	8007866 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0310 	and.w	r3, r3, #16
 80078a4:	2b10      	cmp	r3, #16
 80078a6:	d10a      	bne.n	80078be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078a8:	2300      	movs	r3, #0
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80078c6:	4611      	mov	r1, r2
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	4798      	blx	r3
 80078cc:	e003      	b.n	80078d6 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e002      	b.n	80078e0 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	e000      	b.n	80078e0 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 80078de:	2302      	movs	r3, #2
  }
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3730      	adds	r7, #48	; 0x30
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078ec:	b0c0      	sub	sp, #256	; 0x100
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007904:	68d9      	ldr	r1, [r3, #12]
 8007906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	ea40 0301 	orr.w	r3, r0, r1
 8007910:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	431a      	orrs	r2, r3
 8007920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	431a      	orrs	r2, r3
 8007928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	4313      	orrs	r3, r2
 8007930:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007940:	f021 010c 	bic.w	r1, r1, #12
 8007944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800794e:	430b      	orrs	r3, r1
 8007950:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800795e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007962:	6999      	ldr	r1, [r3, #24]
 8007964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	ea40 0301 	orr.w	r3, r0, r1
 800796e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	4b8f      	ldr	r3, [pc, #572]	; (8007bb4 <UART_SetConfig+0x2cc>)
 8007978:	429a      	cmp	r2, r3
 800797a:	d005      	beq.n	8007988 <UART_SetConfig+0xa0>
 800797c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	4b8d      	ldr	r3, [pc, #564]	; (8007bb8 <UART_SetConfig+0x2d0>)
 8007984:	429a      	cmp	r2, r3
 8007986:	d104      	bne.n	8007992 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007988:	f7fd fa12 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 800798c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007990:	e003      	b.n	800799a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007992:	f7fd f9f9 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 8007996:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800799a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799e:	69db      	ldr	r3, [r3, #28]
 80079a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079a4:	f040 810c 	bne.w	8007bc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079ac:	2200      	movs	r2, #0
 80079ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80079b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80079ba:	4622      	mov	r2, r4
 80079bc:	462b      	mov	r3, r5
 80079be:	1891      	adds	r1, r2, r2
 80079c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80079c2:	415b      	adcs	r3, r3
 80079c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80079ca:	4621      	mov	r1, r4
 80079cc:	eb12 0801 	adds.w	r8, r2, r1
 80079d0:	4629      	mov	r1, r5
 80079d2:	eb43 0901 	adc.w	r9, r3, r1
 80079d6:	f04f 0200 	mov.w	r2, #0
 80079da:	f04f 0300 	mov.w	r3, #0
 80079de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079ea:	4690      	mov	r8, r2
 80079ec:	4699      	mov	r9, r3
 80079ee:	4623      	mov	r3, r4
 80079f0:	eb18 0303 	adds.w	r3, r8, r3
 80079f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079f8:	462b      	mov	r3, r5
 80079fa:	eb49 0303 	adc.w	r3, r9, r3
 80079fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007a12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a16:	460b      	mov	r3, r1
 8007a18:	18db      	adds	r3, r3, r3
 8007a1a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	eb42 0303 	adc.w	r3, r2, r3
 8007a22:	657b      	str	r3, [r7, #84]	; 0x54
 8007a24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a2c:	f7f9 f8b8 	bl	8000ba0 <__aeabi_uldivmod>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	4b61      	ldr	r3, [pc, #388]	; (8007bbc <UART_SetConfig+0x2d4>)
 8007a36:	fba3 2302 	umull	r2, r3, r3, r2
 8007a3a:	095b      	lsrs	r3, r3, #5
 8007a3c:	011c      	lsls	r4, r3, #4
 8007a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007a4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007a50:	4642      	mov	r2, r8
 8007a52:	464b      	mov	r3, r9
 8007a54:	1891      	adds	r1, r2, r2
 8007a56:	64b9      	str	r1, [r7, #72]	; 0x48
 8007a58:	415b      	adcs	r3, r3
 8007a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a60:	4641      	mov	r1, r8
 8007a62:	eb12 0a01 	adds.w	sl, r2, r1
 8007a66:	4649      	mov	r1, r9
 8007a68:	eb43 0b01 	adc.w	fp, r3, r1
 8007a6c:	f04f 0200 	mov.w	r2, #0
 8007a70:	f04f 0300 	mov.w	r3, #0
 8007a74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a80:	4692      	mov	sl, r2
 8007a82:	469b      	mov	fp, r3
 8007a84:	4643      	mov	r3, r8
 8007a86:	eb1a 0303 	adds.w	r3, sl, r3
 8007a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a8e:	464b      	mov	r3, r9
 8007a90:	eb4b 0303 	adc.w	r3, fp, r3
 8007a94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007aa4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007aa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007aac:	460b      	mov	r3, r1
 8007aae:	18db      	adds	r3, r3, r3
 8007ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	eb42 0303 	adc.w	r3, r2, r3
 8007ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8007aba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007abe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007ac2:	f7f9 f86d 	bl	8000ba0 <__aeabi_uldivmod>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	460b      	mov	r3, r1
 8007aca:	4611      	mov	r1, r2
 8007acc:	4b3b      	ldr	r3, [pc, #236]	; (8007bbc <UART_SetConfig+0x2d4>)
 8007ace:	fba3 2301 	umull	r2, r3, r3, r1
 8007ad2:	095b      	lsrs	r3, r3, #5
 8007ad4:	2264      	movs	r2, #100	; 0x64
 8007ad6:	fb02 f303 	mul.w	r3, r2, r3
 8007ada:	1acb      	subs	r3, r1, r3
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007ae2:	4b36      	ldr	r3, [pc, #216]	; (8007bbc <UART_SetConfig+0x2d4>)
 8007ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8007ae8:	095b      	lsrs	r3, r3, #5
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007af0:	441c      	add	r4, r3
 8007af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007af6:	2200      	movs	r2, #0
 8007af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007afc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007b00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007b04:	4642      	mov	r2, r8
 8007b06:	464b      	mov	r3, r9
 8007b08:	1891      	adds	r1, r2, r2
 8007b0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b0c:	415b      	adcs	r3, r3
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b14:	4641      	mov	r1, r8
 8007b16:	1851      	adds	r1, r2, r1
 8007b18:	6339      	str	r1, [r7, #48]	; 0x30
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	414b      	adcs	r3, r1
 8007b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b20:	f04f 0200 	mov.w	r2, #0
 8007b24:	f04f 0300 	mov.w	r3, #0
 8007b28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007b2c:	4659      	mov	r1, fp
 8007b2e:	00cb      	lsls	r3, r1, #3
 8007b30:	4651      	mov	r1, sl
 8007b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b36:	4651      	mov	r1, sl
 8007b38:	00ca      	lsls	r2, r1, #3
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4603      	mov	r3, r0
 8007b40:	4642      	mov	r2, r8
 8007b42:	189b      	adds	r3, r3, r2
 8007b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b48:	464b      	mov	r3, r9
 8007b4a:	460a      	mov	r2, r1
 8007b4c:	eb42 0303 	adc.w	r3, r2, r3
 8007b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007b68:	460b      	mov	r3, r1
 8007b6a:	18db      	adds	r3, r3, r3
 8007b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b6e:	4613      	mov	r3, r2
 8007b70:	eb42 0303 	adc.w	r3, r2, r3
 8007b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007b7e:	f7f9 f80f 	bl	8000ba0 <__aeabi_uldivmod>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	4b0d      	ldr	r3, [pc, #52]	; (8007bbc <UART_SetConfig+0x2d4>)
 8007b88:	fba3 1302 	umull	r1, r3, r3, r2
 8007b8c:	095b      	lsrs	r3, r3, #5
 8007b8e:	2164      	movs	r1, #100	; 0x64
 8007b90:	fb01 f303 	mul.w	r3, r1, r3
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	00db      	lsls	r3, r3, #3
 8007b98:	3332      	adds	r3, #50	; 0x32
 8007b9a:	4a08      	ldr	r2, [pc, #32]	; (8007bbc <UART_SetConfig+0x2d4>)
 8007b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba0:	095b      	lsrs	r3, r3, #5
 8007ba2:	f003 0207 	and.w	r2, r3, #7
 8007ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4422      	add	r2, r4
 8007bae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007bb0:	e105      	b.n	8007dbe <UART_SetConfig+0x4d6>
 8007bb2:	bf00      	nop
 8007bb4:	40011000 	.word	0x40011000
 8007bb8:	40011400 	.word	0x40011400
 8007bbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007bca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007bce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007bd2:	4642      	mov	r2, r8
 8007bd4:	464b      	mov	r3, r9
 8007bd6:	1891      	adds	r1, r2, r2
 8007bd8:	6239      	str	r1, [r7, #32]
 8007bda:	415b      	adcs	r3, r3
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8007bde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007be2:	4641      	mov	r1, r8
 8007be4:	1854      	adds	r4, r2, r1
 8007be6:	4649      	mov	r1, r9
 8007be8:	eb43 0501 	adc.w	r5, r3, r1
 8007bec:	f04f 0200 	mov.w	r2, #0
 8007bf0:	f04f 0300 	mov.w	r3, #0
 8007bf4:	00eb      	lsls	r3, r5, #3
 8007bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bfa:	00e2      	lsls	r2, r4, #3
 8007bfc:	4614      	mov	r4, r2
 8007bfe:	461d      	mov	r5, r3
 8007c00:	4643      	mov	r3, r8
 8007c02:	18e3      	adds	r3, r4, r3
 8007c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c08:	464b      	mov	r3, r9
 8007c0a:	eb45 0303 	adc.w	r3, r5, r3
 8007c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c22:	f04f 0200 	mov.w	r2, #0
 8007c26:	f04f 0300 	mov.w	r3, #0
 8007c2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c2e:	4629      	mov	r1, r5
 8007c30:	008b      	lsls	r3, r1, #2
 8007c32:	4621      	mov	r1, r4
 8007c34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c38:	4621      	mov	r1, r4
 8007c3a:	008a      	lsls	r2, r1, #2
 8007c3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c40:	f7f8 ffae 	bl	8000ba0 <__aeabi_uldivmod>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4b60      	ldr	r3, [pc, #384]	; (8007dcc <UART_SetConfig+0x4e4>)
 8007c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c4e:	095b      	lsrs	r3, r3, #5
 8007c50:	011c      	lsls	r4, r3, #4
 8007c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c64:	4642      	mov	r2, r8
 8007c66:	464b      	mov	r3, r9
 8007c68:	1891      	adds	r1, r2, r2
 8007c6a:	61b9      	str	r1, [r7, #24]
 8007c6c:	415b      	adcs	r3, r3
 8007c6e:	61fb      	str	r3, [r7, #28]
 8007c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c74:	4641      	mov	r1, r8
 8007c76:	1851      	adds	r1, r2, r1
 8007c78:	6139      	str	r1, [r7, #16]
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	414b      	adcs	r3, r1
 8007c7e:	617b      	str	r3, [r7, #20]
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	f04f 0300 	mov.w	r3, #0
 8007c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c8c:	4659      	mov	r1, fp
 8007c8e:	00cb      	lsls	r3, r1, #3
 8007c90:	4651      	mov	r1, sl
 8007c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c96:	4651      	mov	r1, sl
 8007c98:	00ca      	lsls	r2, r1, #3
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	4642      	mov	r2, r8
 8007ca2:	189b      	adds	r3, r3, r2
 8007ca4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ca8:	464b      	mov	r3, r9
 8007caa:	460a      	mov	r2, r1
 8007cac:	eb42 0303 	adc.w	r3, r2, r3
 8007cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007cc0:	f04f 0200 	mov.w	r2, #0
 8007cc4:	f04f 0300 	mov.w	r3, #0
 8007cc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ccc:	4649      	mov	r1, r9
 8007cce:	008b      	lsls	r3, r1, #2
 8007cd0:	4641      	mov	r1, r8
 8007cd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cd6:	4641      	mov	r1, r8
 8007cd8:	008a      	lsls	r2, r1, #2
 8007cda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007cde:	f7f8 ff5f 	bl	8000ba0 <__aeabi_uldivmod>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4b39      	ldr	r3, [pc, #228]	; (8007dcc <UART_SetConfig+0x4e4>)
 8007ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cec:	095b      	lsrs	r3, r3, #5
 8007cee:	2164      	movs	r1, #100	; 0x64
 8007cf0:	fb01 f303 	mul.w	r3, r1, r3
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	011b      	lsls	r3, r3, #4
 8007cf8:	3332      	adds	r3, #50	; 0x32
 8007cfa:	4a34      	ldr	r2, [pc, #208]	; (8007dcc <UART_SetConfig+0x4e4>)
 8007cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007d00:	095b      	lsrs	r3, r3, #5
 8007d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d06:	441c      	add	r4, r3
 8007d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	673b      	str	r3, [r7, #112]	; 0x70
 8007d10:	677a      	str	r2, [r7, #116]	; 0x74
 8007d12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007d16:	4642      	mov	r2, r8
 8007d18:	464b      	mov	r3, r9
 8007d1a:	1891      	adds	r1, r2, r2
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	415b      	adcs	r3, r3
 8007d20:	60fb      	str	r3, [r7, #12]
 8007d22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d26:	4641      	mov	r1, r8
 8007d28:	1851      	adds	r1, r2, r1
 8007d2a:	6039      	str	r1, [r7, #0]
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	414b      	adcs	r3, r1
 8007d30:	607b      	str	r3, [r7, #4]
 8007d32:	f04f 0200 	mov.w	r2, #0
 8007d36:	f04f 0300 	mov.w	r3, #0
 8007d3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d3e:	4659      	mov	r1, fp
 8007d40:	00cb      	lsls	r3, r1, #3
 8007d42:	4651      	mov	r1, sl
 8007d44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d48:	4651      	mov	r1, sl
 8007d4a:	00ca      	lsls	r2, r1, #3
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4603      	mov	r3, r0
 8007d52:	4642      	mov	r2, r8
 8007d54:	189b      	adds	r3, r3, r2
 8007d56:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d58:	464b      	mov	r3, r9
 8007d5a:	460a      	mov	r2, r1
 8007d5c:	eb42 0303 	adc.w	r3, r2, r3
 8007d60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	663b      	str	r3, [r7, #96]	; 0x60
 8007d6c:	667a      	str	r2, [r7, #100]	; 0x64
 8007d6e:	f04f 0200 	mov.w	r2, #0
 8007d72:	f04f 0300 	mov.w	r3, #0
 8007d76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007d7a:	4649      	mov	r1, r9
 8007d7c:	008b      	lsls	r3, r1, #2
 8007d7e:	4641      	mov	r1, r8
 8007d80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d84:	4641      	mov	r1, r8
 8007d86:	008a      	lsls	r2, r1, #2
 8007d88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007d8c:	f7f8 ff08 	bl	8000ba0 <__aeabi_uldivmod>
 8007d90:	4602      	mov	r2, r0
 8007d92:	460b      	mov	r3, r1
 8007d94:	4b0d      	ldr	r3, [pc, #52]	; (8007dcc <UART_SetConfig+0x4e4>)
 8007d96:	fba3 1302 	umull	r1, r3, r3, r2
 8007d9a:	095b      	lsrs	r3, r3, #5
 8007d9c:	2164      	movs	r1, #100	; 0x64
 8007d9e:	fb01 f303 	mul.w	r3, r1, r3
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	011b      	lsls	r3, r3, #4
 8007da6:	3332      	adds	r3, #50	; 0x32
 8007da8:	4a08      	ldr	r2, [pc, #32]	; (8007dcc <UART_SetConfig+0x4e4>)
 8007daa:	fba2 2303 	umull	r2, r3, r2, r3
 8007dae:	095b      	lsrs	r3, r3, #5
 8007db0:	f003 020f 	and.w	r2, r3, #15
 8007db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4422      	add	r2, r4
 8007dbc:	609a      	str	r2, [r3, #8]
}
 8007dbe:	bf00      	nop
 8007dc0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dca:	bf00      	nop
 8007dcc:	51eb851f 	.word	0x51eb851f

08007dd0 <__errno>:
 8007dd0:	4b01      	ldr	r3, [pc, #4]	; (8007dd8 <__errno+0x8>)
 8007dd2:	6818      	ldr	r0, [r3, #0]
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	2000020c 	.word	0x2000020c

08007ddc <__libc_init_array>:
 8007ddc:	b570      	push	{r4, r5, r6, lr}
 8007dde:	4d0d      	ldr	r5, [pc, #52]	; (8007e14 <__libc_init_array+0x38>)
 8007de0:	4c0d      	ldr	r4, [pc, #52]	; (8007e18 <__libc_init_array+0x3c>)
 8007de2:	1b64      	subs	r4, r4, r5
 8007de4:	10a4      	asrs	r4, r4, #2
 8007de6:	2600      	movs	r6, #0
 8007de8:	42a6      	cmp	r6, r4
 8007dea:	d109      	bne.n	8007e00 <__libc_init_array+0x24>
 8007dec:	4d0b      	ldr	r5, [pc, #44]	; (8007e1c <__libc_init_array+0x40>)
 8007dee:	4c0c      	ldr	r4, [pc, #48]	; (8007e20 <__libc_init_array+0x44>)
 8007df0:	f001 fb50 	bl	8009494 <_init>
 8007df4:	1b64      	subs	r4, r4, r5
 8007df6:	10a4      	asrs	r4, r4, #2
 8007df8:	2600      	movs	r6, #0
 8007dfa:	42a6      	cmp	r6, r4
 8007dfc:	d105      	bne.n	8007e0a <__libc_init_array+0x2e>
 8007dfe:	bd70      	pop	{r4, r5, r6, pc}
 8007e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e04:	4798      	blx	r3
 8007e06:	3601      	adds	r6, #1
 8007e08:	e7ee      	b.n	8007de8 <__libc_init_array+0xc>
 8007e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e0e:	4798      	blx	r3
 8007e10:	3601      	adds	r6, #1
 8007e12:	e7f2      	b.n	8007dfa <__libc_init_array+0x1e>
 8007e14:	08009708 	.word	0x08009708
 8007e18:	08009708 	.word	0x08009708
 8007e1c:	08009708 	.word	0x08009708
 8007e20:	0800970c 	.word	0x0800970c

08007e24 <memcpy>:
 8007e24:	440a      	add	r2, r1
 8007e26:	4291      	cmp	r1, r2
 8007e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e2c:	d100      	bne.n	8007e30 <memcpy+0xc>
 8007e2e:	4770      	bx	lr
 8007e30:	b510      	push	{r4, lr}
 8007e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e3a:	4291      	cmp	r1, r2
 8007e3c:	d1f9      	bne.n	8007e32 <memcpy+0xe>
 8007e3e:	bd10      	pop	{r4, pc}

08007e40 <memset>:
 8007e40:	4402      	add	r2, r0
 8007e42:	4603      	mov	r3, r0
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d100      	bne.n	8007e4a <memset+0xa>
 8007e48:	4770      	bx	lr
 8007e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e4e:	e7f9      	b.n	8007e44 <memset+0x4>

08007e50 <atan>:
 8007e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	ec55 4b10 	vmov	r4, r5, d0
 8007e58:	4bc3      	ldr	r3, [pc, #780]	; (8008168 <atan+0x318>)
 8007e5a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007e5e:	429e      	cmp	r6, r3
 8007e60:	46ab      	mov	fp, r5
 8007e62:	dd18      	ble.n	8007e96 <atan+0x46>
 8007e64:	4bc1      	ldr	r3, [pc, #772]	; (800816c <atan+0x31c>)
 8007e66:	429e      	cmp	r6, r3
 8007e68:	dc01      	bgt.n	8007e6e <atan+0x1e>
 8007e6a:	d109      	bne.n	8007e80 <atan+0x30>
 8007e6c:	b144      	cbz	r4, 8007e80 <atan+0x30>
 8007e6e:	4622      	mov	r2, r4
 8007e70:	462b      	mov	r3, r5
 8007e72:	4620      	mov	r0, r4
 8007e74:	4629      	mov	r1, r5
 8007e76:	f7f8 f9b5 	bl	80001e4 <__adddf3>
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	460d      	mov	r5, r1
 8007e7e:	e006      	b.n	8007e8e <atan+0x3e>
 8007e80:	f1bb 0f00 	cmp.w	fp, #0
 8007e84:	f300 8131 	bgt.w	80080ea <atan+0x29a>
 8007e88:	a59b      	add	r5, pc, #620	; (adr r5, 80080f8 <atan+0x2a8>)
 8007e8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e8e:	ec45 4b10 	vmov	d0, r4, r5
 8007e92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e96:	4bb6      	ldr	r3, [pc, #728]	; (8008170 <atan+0x320>)
 8007e98:	429e      	cmp	r6, r3
 8007e9a:	dc14      	bgt.n	8007ec6 <atan+0x76>
 8007e9c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007ea0:	429e      	cmp	r6, r3
 8007ea2:	dc0d      	bgt.n	8007ec0 <atan+0x70>
 8007ea4:	a396      	add	r3, pc, #600	; (adr r3, 8008100 <atan+0x2b0>)
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	ee10 0a10 	vmov	r0, s0
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f7f8 f998 	bl	80001e4 <__adddf3>
 8007eb4:	4baf      	ldr	r3, [pc, #700]	; (8008174 <atan+0x324>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f7f8 fdda 	bl	8000a70 <__aeabi_dcmpgt>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d1e6      	bne.n	8007e8e <atan+0x3e>
 8007ec0:	f04f 3aff 	mov.w	sl, #4294967295
 8007ec4:	e02b      	b.n	8007f1e <atan+0xce>
 8007ec6:	f000 f9b7 	bl	8008238 <fabs>
 8007eca:	4bab      	ldr	r3, [pc, #684]	; (8008178 <atan+0x328>)
 8007ecc:	429e      	cmp	r6, r3
 8007ece:	ec55 4b10 	vmov	r4, r5, d0
 8007ed2:	f300 80bf 	bgt.w	8008054 <atan+0x204>
 8007ed6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007eda:	429e      	cmp	r6, r3
 8007edc:	f300 80a0 	bgt.w	8008020 <atan+0x1d0>
 8007ee0:	ee10 2a10 	vmov	r2, s0
 8007ee4:	ee10 0a10 	vmov	r0, s0
 8007ee8:	462b      	mov	r3, r5
 8007eea:	4629      	mov	r1, r5
 8007eec:	f7f8 f97a 	bl	80001e4 <__adddf3>
 8007ef0:	4ba0      	ldr	r3, [pc, #640]	; (8008174 <atan+0x324>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f7f8 f974 	bl	80001e0 <__aeabi_dsub>
 8007ef8:	2200      	movs	r2, #0
 8007efa:	4606      	mov	r6, r0
 8007efc:	460f      	mov	r7, r1
 8007efe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f02:	4620      	mov	r0, r4
 8007f04:	4629      	mov	r1, r5
 8007f06:	f7f8 f96d 	bl	80001e4 <__adddf3>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	4630      	mov	r0, r6
 8007f10:	4639      	mov	r1, r7
 8007f12:	f7f8 fc47 	bl	80007a4 <__aeabi_ddiv>
 8007f16:	f04f 0a00 	mov.w	sl, #0
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	460d      	mov	r5, r1
 8007f1e:	4622      	mov	r2, r4
 8007f20:	462b      	mov	r3, r5
 8007f22:	4620      	mov	r0, r4
 8007f24:	4629      	mov	r1, r5
 8007f26:	f7f8 fb13 	bl	8000550 <__aeabi_dmul>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4680      	mov	r8, r0
 8007f30:	4689      	mov	r9, r1
 8007f32:	f7f8 fb0d 	bl	8000550 <__aeabi_dmul>
 8007f36:	a374      	add	r3, pc, #464	; (adr r3, 8008108 <atan+0x2b8>)
 8007f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3c:	4606      	mov	r6, r0
 8007f3e:	460f      	mov	r7, r1
 8007f40:	f7f8 fb06 	bl	8000550 <__aeabi_dmul>
 8007f44:	a372      	add	r3, pc, #456	; (adr r3, 8008110 <atan+0x2c0>)
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	f7f8 f94b 	bl	80001e4 <__adddf3>
 8007f4e:	4632      	mov	r2, r6
 8007f50:	463b      	mov	r3, r7
 8007f52:	f7f8 fafd 	bl	8000550 <__aeabi_dmul>
 8007f56:	a370      	add	r3, pc, #448	; (adr r3, 8008118 <atan+0x2c8>)
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	f7f8 f942 	bl	80001e4 <__adddf3>
 8007f60:	4632      	mov	r2, r6
 8007f62:	463b      	mov	r3, r7
 8007f64:	f7f8 faf4 	bl	8000550 <__aeabi_dmul>
 8007f68:	a36d      	add	r3, pc, #436	; (adr r3, 8008120 <atan+0x2d0>)
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	f7f8 f939 	bl	80001e4 <__adddf3>
 8007f72:	4632      	mov	r2, r6
 8007f74:	463b      	mov	r3, r7
 8007f76:	f7f8 faeb 	bl	8000550 <__aeabi_dmul>
 8007f7a:	a36b      	add	r3, pc, #428	; (adr r3, 8008128 <atan+0x2d8>)
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	f7f8 f930 	bl	80001e4 <__adddf3>
 8007f84:	4632      	mov	r2, r6
 8007f86:	463b      	mov	r3, r7
 8007f88:	f7f8 fae2 	bl	8000550 <__aeabi_dmul>
 8007f8c:	a368      	add	r3, pc, #416	; (adr r3, 8008130 <atan+0x2e0>)
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	f7f8 f927 	bl	80001e4 <__adddf3>
 8007f96:	4642      	mov	r2, r8
 8007f98:	464b      	mov	r3, r9
 8007f9a:	f7f8 fad9 	bl	8000550 <__aeabi_dmul>
 8007f9e:	a366      	add	r3, pc, #408	; (adr r3, 8008138 <atan+0x2e8>)
 8007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa4:	4680      	mov	r8, r0
 8007fa6:	4689      	mov	r9, r1
 8007fa8:	4630      	mov	r0, r6
 8007faa:	4639      	mov	r1, r7
 8007fac:	f7f8 fad0 	bl	8000550 <__aeabi_dmul>
 8007fb0:	a363      	add	r3, pc, #396	; (adr r3, 8008140 <atan+0x2f0>)
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	f7f8 f913 	bl	80001e0 <__aeabi_dsub>
 8007fba:	4632      	mov	r2, r6
 8007fbc:	463b      	mov	r3, r7
 8007fbe:	f7f8 fac7 	bl	8000550 <__aeabi_dmul>
 8007fc2:	a361      	add	r3, pc, #388	; (adr r3, 8008148 <atan+0x2f8>)
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	f7f8 f90a 	bl	80001e0 <__aeabi_dsub>
 8007fcc:	4632      	mov	r2, r6
 8007fce:	463b      	mov	r3, r7
 8007fd0:	f7f8 fabe 	bl	8000550 <__aeabi_dmul>
 8007fd4:	a35e      	add	r3, pc, #376	; (adr r3, 8008150 <atan+0x300>)
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	f7f8 f901 	bl	80001e0 <__aeabi_dsub>
 8007fde:	4632      	mov	r2, r6
 8007fe0:	463b      	mov	r3, r7
 8007fe2:	f7f8 fab5 	bl	8000550 <__aeabi_dmul>
 8007fe6:	a35c      	add	r3, pc, #368	; (adr r3, 8008158 <atan+0x308>)
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	f7f8 f8f8 	bl	80001e0 <__aeabi_dsub>
 8007ff0:	4632      	mov	r2, r6
 8007ff2:	463b      	mov	r3, r7
 8007ff4:	f7f8 faac 	bl	8000550 <__aeabi_dmul>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4640      	mov	r0, r8
 8007ffe:	4649      	mov	r1, r9
 8008000:	f7f8 f8f0 	bl	80001e4 <__adddf3>
 8008004:	4622      	mov	r2, r4
 8008006:	462b      	mov	r3, r5
 8008008:	f7f8 faa2 	bl	8000550 <__aeabi_dmul>
 800800c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	d14b      	bne.n	80080ae <atan+0x25e>
 8008016:	4620      	mov	r0, r4
 8008018:	4629      	mov	r1, r5
 800801a:	f7f8 f8e1 	bl	80001e0 <__aeabi_dsub>
 800801e:	e72c      	b.n	8007e7a <atan+0x2a>
 8008020:	ee10 0a10 	vmov	r0, s0
 8008024:	4b53      	ldr	r3, [pc, #332]	; (8008174 <atan+0x324>)
 8008026:	2200      	movs	r2, #0
 8008028:	4629      	mov	r1, r5
 800802a:	f7f8 f8d9 	bl	80001e0 <__aeabi_dsub>
 800802e:	4b51      	ldr	r3, [pc, #324]	; (8008174 <atan+0x324>)
 8008030:	4606      	mov	r6, r0
 8008032:	460f      	mov	r7, r1
 8008034:	2200      	movs	r2, #0
 8008036:	4620      	mov	r0, r4
 8008038:	4629      	mov	r1, r5
 800803a:	f7f8 f8d3 	bl	80001e4 <__adddf3>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	4630      	mov	r0, r6
 8008044:	4639      	mov	r1, r7
 8008046:	f7f8 fbad 	bl	80007a4 <__aeabi_ddiv>
 800804a:	f04f 0a01 	mov.w	sl, #1
 800804e:	4604      	mov	r4, r0
 8008050:	460d      	mov	r5, r1
 8008052:	e764      	b.n	8007f1e <atan+0xce>
 8008054:	4b49      	ldr	r3, [pc, #292]	; (800817c <atan+0x32c>)
 8008056:	429e      	cmp	r6, r3
 8008058:	da1d      	bge.n	8008096 <atan+0x246>
 800805a:	ee10 0a10 	vmov	r0, s0
 800805e:	4b48      	ldr	r3, [pc, #288]	; (8008180 <atan+0x330>)
 8008060:	2200      	movs	r2, #0
 8008062:	4629      	mov	r1, r5
 8008064:	f7f8 f8bc 	bl	80001e0 <__aeabi_dsub>
 8008068:	4b45      	ldr	r3, [pc, #276]	; (8008180 <atan+0x330>)
 800806a:	4606      	mov	r6, r0
 800806c:	460f      	mov	r7, r1
 800806e:	2200      	movs	r2, #0
 8008070:	4620      	mov	r0, r4
 8008072:	4629      	mov	r1, r5
 8008074:	f7f8 fa6c 	bl	8000550 <__aeabi_dmul>
 8008078:	4b3e      	ldr	r3, [pc, #248]	; (8008174 <atan+0x324>)
 800807a:	2200      	movs	r2, #0
 800807c:	f7f8 f8b2 	bl	80001e4 <__adddf3>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4630      	mov	r0, r6
 8008086:	4639      	mov	r1, r7
 8008088:	f7f8 fb8c 	bl	80007a4 <__aeabi_ddiv>
 800808c:	f04f 0a02 	mov.w	sl, #2
 8008090:	4604      	mov	r4, r0
 8008092:	460d      	mov	r5, r1
 8008094:	e743      	b.n	8007f1e <atan+0xce>
 8008096:	462b      	mov	r3, r5
 8008098:	ee10 2a10 	vmov	r2, s0
 800809c:	4939      	ldr	r1, [pc, #228]	; (8008184 <atan+0x334>)
 800809e:	2000      	movs	r0, #0
 80080a0:	f7f8 fb80 	bl	80007a4 <__aeabi_ddiv>
 80080a4:	f04f 0a03 	mov.w	sl, #3
 80080a8:	4604      	mov	r4, r0
 80080aa:	460d      	mov	r5, r1
 80080ac:	e737      	b.n	8007f1e <atan+0xce>
 80080ae:	4b36      	ldr	r3, [pc, #216]	; (8008188 <atan+0x338>)
 80080b0:	4e36      	ldr	r6, [pc, #216]	; (800818c <atan+0x33c>)
 80080b2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80080b6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80080ba:	e9da 2300 	ldrd	r2, r3, [sl]
 80080be:	f7f8 f88f 	bl	80001e0 <__aeabi_dsub>
 80080c2:	4622      	mov	r2, r4
 80080c4:	462b      	mov	r3, r5
 80080c6:	f7f8 f88b 	bl	80001e0 <__aeabi_dsub>
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 80080d2:	f7f8 f885 	bl	80001e0 <__aeabi_dsub>
 80080d6:	f1bb 0f00 	cmp.w	fp, #0
 80080da:	4604      	mov	r4, r0
 80080dc:	460d      	mov	r5, r1
 80080de:	f6bf aed6 	bge.w	8007e8e <atan+0x3e>
 80080e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080e6:	461d      	mov	r5, r3
 80080e8:	e6d1      	b.n	8007e8e <atan+0x3e>
 80080ea:	a51d      	add	r5, pc, #116	; (adr r5, 8008160 <atan+0x310>)
 80080ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080f0:	e6cd      	b.n	8007e8e <atan+0x3e>
 80080f2:	bf00      	nop
 80080f4:	f3af 8000 	nop.w
 80080f8:	54442d18 	.word	0x54442d18
 80080fc:	bff921fb 	.word	0xbff921fb
 8008100:	8800759c 	.word	0x8800759c
 8008104:	7e37e43c 	.word	0x7e37e43c
 8008108:	e322da11 	.word	0xe322da11
 800810c:	3f90ad3a 	.word	0x3f90ad3a
 8008110:	24760deb 	.word	0x24760deb
 8008114:	3fa97b4b 	.word	0x3fa97b4b
 8008118:	a0d03d51 	.word	0xa0d03d51
 800811c:	3fb10d66 	.word	0x3fb10d66
 8008120:	c54c206e 	.word	0xc54c206e
 8008124:	3fb745cd 	.word	0x3fb745cd
 8008128:	920083ff 	.word	0x920083ff
 800812c:	3fc24924 	.word	0x3fc24924
 8008130:	5555550d 	.word	0x5555550d
 8008134:	3fd55555 	.word	0x3fd55555
 8008138:	2c6a6c2f 	.word	0x2c6a6c2f
 800813c:	bfa2b444 	.word	0xbfa2b444
 8008140:	52defd9a 	.word	0x52defd9a
 8008144:	3fadde2d 	.word	0x3fadde2d
 8008148:	af749a6d 	.word	0xaf749a6d
 800814c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008150:	fe231671 	.word	0xfe231671
 8008154:	3fbc71c6 	.word	0x3fbc71c6
 8008158:	9998ebc4 	.word	0x9998ebc4
 800815c:	3fc99999 	.word	0x3fc99999
 8008160:	54442d18 	.word	0x54442d18
 8008164:	3ff921fb 	.word	0x3ff921fb
 8008168:	440fffff 	.word	0x440fffff
 800816c:	7ff00000 	.word	0x7ff00000
 8008170:	3fdbffff 	.word	0x3fdbffff
 8008174:	3ff00000 	.word	0x3ff00000
 8008178:	3ff2ffff 	.word	0x3ff2ffff
 800817c:	40038000 	.word	0x40038000
 8008180:	3ff80000 	.word	0x3ff80000
 8008184:	bff00000 	.word	0xbff00000
 8008188:	08009508 	.word	0x08009508
 800818c:	080094e8 	.word	0x080094e8

08008190 <cos>:
 8008190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008192:	ec53 2b10 	vmov	r2, r3, d0
 8008196:	4826      	ldr	r0, [pc, #152]	; (8008230 <cos+0xa0>)
 8008198:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800819c:	4281      	cmp	r1, r0
 800819e:	dc06      	bgt.n	80081ae <cos+0x1e>
 80081a0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008228 <cos+0x98>
 80081a4:	b005      	add	sp, #20
 80081a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80081aa:	f000 bb95 	b.w	80088d8 <__kernel_cos>
 80081ae:	4821      	ldr	r0, [pc, #132]	; (8008234 <cos+0xa4>)
 80081b0:	4281      	cmp	r1, r0
 80081b2:	dd09      	ble.n	80081c8 <cos+0x38>
 80081b4:	ee10 0a10 	vmov	r0, s0
 80081b8:	4619      	mov	r1, r3
 80081ba:	f7f8 f811 	bl	80001e0 <__aeabi_dsub>
 80081be:	ec41 0b10 	vmov	d0, r0, r1
 80081c2:	b005      	add	sp, #20
 80081c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80081c8:	4668      	mov	r0, sp
 80081ca:	f000 f8c5 	bl	8008358 <__ieee754_rem_pio2>
 80081ce:	f000 0003 	and.w	r0, r0, #3
 80081d2:	2801      	cmp	r0, #1
 80081d4:	d00b      	beq.n	80081ee <cos+0x5e>
 80081d6:	2802      	cmp	r0, #2
 80081d8:	d016      	beq.n	8008208 <cos+0x78>
 80081da:	b9e0      	cbnz	r0, 8008216 <cos+0x86>
 80081dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80081e0:	ed9d 0b00 	vldr	d0, [sp]
 80081e4:	f000 fb78 	bl	80088d8 <__kernel_cos>
 80081e8:	ec51 0b10 	vmov	r0, r1, d0
 80081ec:	e7e7      	b.n	80081be <cos+0x2e>
 80081ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80081f2:	ed9d 0b00 	vldr	d0, [sp]
 80081f6:	f000 ff87 	bl	8009108 <__kernel_sin>
 80081fa:	ec53 2b10 	vmov	r2, r3, d0
 80081fe:	ee10 0a10 	vmov	r0, s0
 8008202:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008206:	e7da      	b.n	80081be <cos+0x2e>
 8008208:	ed9d 1b02 	vldr	d1, [sp, #8]
 800820c:	ed9d 0b00 	vldr	d0, [sp]
 8008210:	f000 fb62 	bl	80088d8 <__kernel_cos>
 8008214:	e7f1      	b.n	80081fa <cos+0x6a>
 8008216:	ed9d 1b02 	vldr	d1, [sp, #8]
 800821a:	ed9d 0b00 	vldr	d0, [sp]
 800821e:	2001      	movs	r0, #1
 8008220:	f000 ff72 	bl	8009108 <__kernel_sin>
 8008224:	e7e0      	b.n	80081e8 <cos+0x58>
 8008226:	bf00      	nop
	...
 8008230:	3fe921fb 	.word	0x3fe921fb
 8008234:	7fefffff 	.word	0x7fefffff

08008238 <fabs>:
 8008238:	ec51 0b10 	vmov	r0, r1, d0
 800823c:	ee10 2a10 	vmov	r2, s0
 8008240:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008244:	ec43 2b10 	vmov	d0, r2, r3
 8008248:	4770      	bx	lr
 800824a:	0000      	movs	r0, r0
 800824c:	0000      	movs	r0, r0
	...

08008250 <sin>:
 8008250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008252:	ec53 2b10 	vmov	r2, r3, d0
 8008256:	4828      	ldr	r0, [pc, #160]	; (80082f8 <sin+0xa8>)
 8008258:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800825c:	4281      	cmp	r1, r0
 800825e:	dc07      	bgt.n	8008270 <sin+0x20>
 8008260:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80082f0 <sin+0xa0>
 8008264:	2000      	movs	r0, #0
 8008266:	b005      	add	sp, #20
 8008268:	f85d eb04 	ldr.w	lr, [sp], #4
 800826c:	f000 bf4c 	b.w	8009108 <__kernel_sin>
 8008270:	4822      	ldr	r0, [pc, #136]	; (80082fc <sin+0xac>)
 8008272:	4281      	cmp	r1, r0
 8008274:	dd09      	ble.n	800828a <sin+0x3a>
 8008276:	ee10 0a10 	vmov	r0, s0
 800827a:	4619      	mov	r1, r3
 800827c:	f7f7 ffb0 	bl	80001e0 <__aeabi_dsub>
 8008280:	ec41 0b10 	vmov	d0, r0, r1
 8008284:	b005      	add	sp, #20
 8008286:	f85d fb04 	ldr.w	pc, [sp], #4
 800828a:	4668      	mov	r0, sp
 800828c:	f000 f864 	bl	8008358 <__ieee754_rem_pio2>
 8008290:	f000 0003 	and.w	r0, r0, #3
 8008294:	2801      	cmp	r0, #1
 8008296:	d00c      	beq.n	80082b2 <sin+0x62>
 8008298:	2802      	cmp	r0, #2
 800829a:	d011      	beq.n	80082c0 <sin+0x70>
 800829c:	b9f0      	cbnz	r0, 80082dc <sin+0x8c>
 800829e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80082a2:	ed9d 0b00 	vldr	d0, [sp]
 80082a6:	2001      	movs	r0, #1
 80082a8:	f000 ff2e 	bl	8009108 <__kernel_sin>
 80082ac:	ec51 0b10 	vmov	r0, r1, d0
 80082b0:	e7e6      	b.n	8008280 <sin+0x30>
 80082b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80082b6:	ed9d 0b00 	vldr	d0, [sp]
 80082ba:	f000 fb0d 	bl	80088d8 <__kernel_cos>
 80082be:	e7f5      	b.n	80082ac <sin+0x5c>
 80082c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80082c4:	ed9d 0b00 	vldr	d0, [sp]
 80082c8:	2001      	movs	r0, #1
 80082ca:	f000 ff1d 	bl	8009108 <__kernel_sin>
 80082ce:	ec53 2b10 	vmov	r2, r3, d0
 80082d2:	ee10 0a10 	vmov	r0, s0
 80082d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80082da:	e7d1      	b.n	8008280 <sin+0x30>
 80082dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80082e0:	ed9d 0b00 	vldr	d0, [sp]
 80082e4:	f000 faf8 	bl	80088d8 <__kernel_cos>
 80082e8:	e7f1      	b.n	80082ce <sin+0x7e>
 80082ea:	bf00      	nop
 80082ec:	f3af 8000 	nop.w
	...
 80082f8:	3fe921fb 	.word	0x3fe921fb
 80082fc:	7fefffff 	.word	0x7fefffff

08008300 <sqrt>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	ed2d 8b02 	vpush	{d8}
 8008306:	ec55 4b10 	vmov	r4, r5, d0
 800830a:	f000 fa31 	bl	8008770 <__ieee754_sqrt>
 800830e:	4622      	mov	r2, r4
 8008310:	462b      	mov	r3, r5
 8008312:	4620      	mov	r0, r4
 8008314:	4629      	mov	r1, r5
 8008316:	eeb0 8a40 	vmov.f32	s16, s0
 800831a:	eef0 8a60 	vmov.f32	s17, s1
 800831e:	f7f8 fbb1 	bl	8000a84 <__aeabi_dcmpun>
 8008322:	b990      	cbnz	r0, 800834a <sqrt+0x4a>
 8008324:	2200      	movs	r2, #0
 8008326:	2300      	movs	r3, #0
 8008328:	4620      	mov	r0, r4
 800832a:	4629      	mov	r1, r5
 800832c:	f7f8 fb82 	bl	8000a34 <__aeabi_dcmplt>
 8008330:	b158      	cbz	r0, 800834a <sqrt+0x4a>
 8008332:	f7ff fd4d 	bl	8007dd0 <__errno>
 8008336:	2321      	movs	r3, #33	; 0x21
 8008338:	6003      	str	r3, [r0, #0]
 800833a:	2200      	movs	r2, #0
 800833c:	2300      	movs	r3, #0
 800833e:	4610      	mov	r0, r2
 8008340:	4619      	mov	r1, r3
 8008342:	f7f8 fa2f 	bl	80007a4 <__aeabi_ddiv>
 8008346:	ec41 0b18 	vmov	d8, r0, r1
 800834a:	eeb0 0a48 	vmov.f32	s0, s16
 800834e:	eef0 0a68 	vmov.f32	s1, s17
 8008352:	ecbd 8b02 	vpop	{d8}
 8008356:	bd38      	pop	{r3, r4, r5, pc}

08008358 <__ieee754_rem_pio2>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	ed2d 8b02 	vpush	{d8}
 8008360:	ec55 4b10 	vmov	r4, r5, d0
 8008364:	4bca      	ldr	r3, [pc, #808]	; (8008690 <__ieee754_rem_pio2+0x338>)
 8008366:	b08b      	sub	sp, #44	; 0x2c
 8008368:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800836c:	4598      	cmp	r8, r3
 800836e:	4682      	mov	sl, r0
 8008370:	9502      	str	r5, [sp, #8]
 8008372:	dc08      	bgt.n	8008386 <__ieee754_rem_pio2+0x2e>
 8008374:	2200      	movs	r2, #0
 8008376:	2300      	movs	r3, #0
 8008378:	ed80 0b00 	vstr	d0, [r0]
 800837c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008380:	f04f 0b00 	mov.w	fp, #0
 8008384:	e028      	b.n	80083d8 <__ieee754_rem_pio2+0x80>
 8008386:	4bc3      	ldr	r3, [pc, #780]	; (8008694 <__ieee754_rem_pio2+0x33c>)
 8008388:	4598      	cmp	r8, r3
 800838a:	dc78      	bgt.n	800847e <__ieee754_rem_pio2+0x126>
 800838c:	9b02      	ldr	r3, [sp, #8]
 800838e:	4ec2      	ldr	r6, [pc, #776]	; (8008698 <__ieee754_rem_pio2+0x340>)
 8008390:	2b00      	cmp	r3, #0
 8008392:	ee10 0a10 	vmov	r0, s0
 8008396:	a3b0      	add	r3, pc, #704	; (adr r3, 8008658 <__ieee754_rem_pio2+0x300>)
 8008398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839c:	4629      	mov	r1, r5
 800839e:	dd39      	ble.n	8008414 <__ieee754_rem_pio2+0xbc>
 80083a0:	f7f7 ff1e 	bl	80001e0 <__aeabi_dsub>
 80083a4:	45b0      	cmp	r8, r6
 80083a6:	4604      	mov	r4, r0
 80083a8:	460d      	mov	r5, r1
 80083aa:	d01b      	beq.n	80083e4 <__ieee754_rem_pio2+0x8c>
 80083ac:	a3ac      	add	r3, pc, #688	; (adr r3, 8008660 <__ieee754_rem_pio2+0x308>)
 80083ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b2:	f7f7 ff15 	bl	80001e0 <__aeabi_dsub>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	e9ca 2300 	strd	r2, r3, [sl]
 80083be:	4620      	mov	r0, r4
 80083c0:	4629      	mov	r1, r5
 80083c2:	f7f7 ff0d 	bl	80001e0 <__aeabi_dsub>
 80083c6:	a3a6      	add	r3, pc, #664	; (adr r3, 8008660 <__ieee754_rem_pio2+0x308>)
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f7f7 ff08 	bl	80001e0 <__aeabi_dsub>
 80083d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80083d4:	f04f 0b01 	mov.w	fp, #1
 80083d8:	4658      	mov	r0, fp
 80083da:	b00b      	add	sp, #44	; 0x2c
 80083dc:	ecbd 8b02 	vpop	{d8}
 80083e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e4:	a3a0      	add	r3, pc, #640	; (adr r3, 8008668 <__ieee754_rem_pio2+0x310>)
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	f7f7 fef9 	bl	80001e0 <__aeabi_dsub>
 80083ee:	a3a0      	add	r3, pc, #640	; (adr r3, 8008670 <__ieee754_rem_pio2+0x318>)
 80083f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f4:	4604      	mov	r4, r0
 80083f6:	460d      	mov	r5, r1
 80083f8:	f7f7 fef2 	bl	80001e0 <__aeabi_dsub>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	e9ca 2300 	strd	r2, r3, [sl]
 8008404:	4620      	mov	r0, r4
 8008406:	4629      	mov	r1, r5
 8008408:	f7f7 feea 	bl	80001e0 <__aeabi_dsub>
 800840c:	a398      	add	r3, pc, #608	; (adr r3, 8008670 <__ieee754_rem_pio2+0x318>)
 800840e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008412:	e7db      	b.n	80083cc <__ieee754_rem_pio2+0x74>
 8008414:	f7f7 fee6 	bl	80001e4 <__adddf3>
 8008418:	45b0      	cmp	r8, r6
 800841a:	4604      	mov	r4, r0
 800841c:	460d      	mov	r5, r1
 800841e:	d016      	beq.n	800844e <__ieee754_rem_pio2+0xf6>
 8008420:	a38f      	add	r3, pc, #572	; (adr r3, 8008660 <__ieee754_rem_pio2+0x308>)
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	f7f7 fedd 	bl	80001e4 <__adddf3>
 800842a:	4602      	mov	r2, r0
 800842c:	460b      	mov	r3, r1
 800842e:	e9ca 2300 	strd	r2, r3, [sl]
 8008432:	4620      	mov	r0, r4
 8008434:	4629      	mov	r1, r5
 8008436:	f7f7 fed3 	bl	80001e0 <__aeabi_dsub>
 800843a:	a389      	add	r3, pc, #548	; (adr r3, 8008660 <__ieee754_rem_pio2+0x308>)
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	f7f7 fed0 	bl	80001e4 <__adddf3>
 8008444:	f04f 3bff 	mov.w	fp, #4294967295
 8008448:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800844c:	e7c4      	b.n	80083d8 <__ieee754_rem_pio2+0x80>
 800844e:	a386      	add	r3, pc, #536	; (adr r3, 8008668 <__ieee754_rem_pio2+0x310>)
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	f7f7 fec6 	bl	80001e4 <__adddf3>
 8008458:	a385      	add	r3, pc, #532	; (adr r3, 8008670 <__ieee754_rem_pio2+0x318>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	4604      	mov	r4, r0
 8008460:	460d      	mov	r5, r1
 8008462:	f7f7 febf 	bl	80001e4 <__adddf3>
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	e9ca 2300 	strd	r2, r3, [sl]
 800846e:	4620      	mov	r0, r4
 8008470:	4629      	mov	r1, r5
 8008472:	f7f7 feb5 	bl	80001e0 <__aeabi_dsub>
 8008476:	a37e      	add	r3, pc, #504	; (adr r3, 8008670 <__ieee754_rem_pio2+0x318>)
 8008478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847c:	e7e0      	b.n	8008440 <__ieee754_rem_pio2+0xe8>
 800847e:	4b87      	ldr	r3, [pc, #540]	; (800869c <__ieee754_rem_pio2+0x344>)
 8008480:	4598      	cmp	r8, r3
 8008482:	f300 80d9 	bgt.w	8008638 <__ieee754_rem_pio2+0x2e0>
 8008486:	f7ff fed7 	bl	8008238 <fabs>
 800848a:	ec55 4b10 	vmov	r4, r5, d0
 800848e:	ee10 0a10 	vmov	r0, s0
 8008492:	a379      	add	r3, pc, #484	; (adr r3, 8008678 <__ieee754_rem_pio2+0x320>)
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	4629      	mov	r1, r5
 800849a:	f7f8 f859 	bl	8000550 <__aeabi_dmul>
 800849e:	4b80      	ldr	r3, [pc, #512]	; (80086a0 <__ieee754_rem_pio2+0x348>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	f7f7 fe9f 	bl	80001e4 <__adddf3>
 80084a6:	f7f8 fb03 	bl	8000ab0 <__aeabi_d2iz>
 80084aa:	4683      	mov	fp, r0
 80084ac:	f7f7 ffe6 	bl	800047c <__aeabi_i2d>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	ec43 2b18 	vmov	d8, r2, r3
 80084b8:	a367      	add	r3, pc, #412	; (adr r3, 8008658 <__ieee754_rem_pio2+0x300>)
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	f7f8 f847 	bl	8000550 <__aeabi_dmul>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	4620      	mov	r0, r4
 80084c8:	4629      	mov	r1, r5
 80084ca:	f7f7 fe89 	bl	80001e0 <__aeabi_dsub>
 80084ce:	a364      	add	r3, pc, #400	; (adr r3, 8008660 <__ieee754_rem_pio2+0x308>)
 80084d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d4:	4606      	mov	r6, r0
 80084d6:	460f      	mov	r7, r1
 80084d8:	ec51 0b18 	vmov	r0, r1, d8
 80084dc:	f7f8 f838 	bl	8000550 <__aeabi_dmul>
 80084e0:	f1bb 0f1f 	cmp.w	fp, #31
 80084e4:	4604      	mov	r4, r0
 80084e6:	460d      	mov	r5, r1
 80084e8:	dc0d      	bgt.n	8008506 <__ieee754_rem_pio2+0x1ae>
 80084ea:	4b6e      	ldr	r3, [pc, #440]	; (80086a4 <__ieee754_rem_pio2+0x34c>)
 80084ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 80084f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f4:	4543      	cmp	r3, r8
 80084f6:	d006      	beq.n	8008506 <__ieee754_rem_pio2+0x1ae>
 80084f8:	4622      	mov	r2, r4
 80084fa:	462b      	mov	r3, r5
 80084fc:	4630      	mov	r0, r6
 80084fe:	4639      	mov	r1, r7
 8008500:	f7f7 fe6e 	bl	80001e0 <__aeabi_dsub>
 8008504:	e00f      	b.n	8008526 <__ieee754_rem_pio2+0x1ce>
 8008506:	462b      	mov	r3, r5
 8008508:	4622      	mov	r2, r4
 800850a:	4630      	mov	r0, r6
 800850c:	4639      	mov	r1, r7
 800850e:	f7f7 fe67 	bl	80001e0 <__aeabi_dsub>
 8008512:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008516:	9303      	str	r3, [sp, #12]
 8008518:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800851c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008520:	f1b8 0f10 	cmp.w	r8, #16
 8008524:	dc02      	bgt.n	800852c <__ieee754_rem_pio2+0x1d4>
 8008526:	e9ca 0100 	strd	r0, r1, [sl]
 800852a:	e039      	b.n	80085a0 <__ieee754_rem_pio2+0x248>
 800852c:	a34e      	add	r3, pc, #312	; (adr r3, 8008668 <__ieee754_rem_pio2+0x310>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	ec51 0b18 	vmov	r0, r1, d8
 8008536:	f7f8 f80b 	bl	8000550 <__aeabi_dmul>
 800853a:	4604      	mov	r4, r0
 800853c:	460d      	mov	r5, r1
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	4630      	mov	r0, r6
 8008544:	4639      	mov	r1, r7
 8008546:	f7f7 fe4b 	bl	80001e0 <__aeabi_dsub>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	4680      	mov	r8, r0
 8008550:	4689      	mov	r9, r1
 8008552:	4630      	mov	r0, r6
 8008554:	4639      	mov	r1, r7
 8008556:	f7f7 fe43 	bl	80001e0 <__aeabi_dsub>
 800855a:	4622      	mov	r2, r4
 800855c:	462b      	mov	r3, r5
 800855e:	f7f7 fe3f 	bl	80001e0 <__aeabi_dsub>
 8008562:	a343      	add	r3, pc, #268	; (adr r3, 8008670 <__ieee754_rem_pio2+0x318>)
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	4604      	mov	r4, r0
 800856a:	460d      	mov	r5, r1
 800856c:	ec51 0b18 	vmov	r0, r1, d8
 8008570:	f7f7 ffee 	bl	8000550 <__aeabi_dmul>
 8008574:	4622      	mov	r2, r4
 8008576:	462b      	mov	r3, r5
 8008578:	f7f7 fe32 	bl	80001e0 <__aeabi_dsub>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4604      	mov	r4, r0
 8008582:	460d      	mov	r5, r1
 8008584:	4640      	mov	r0, r8
 8008586:	4649      	mov	r1, r9
 8008588:	f7f7 fe2a 	bl	80001e0 <__aeabi_dsub>
 800858c:	9a03      	ldr	r2, [sp, #12]
 800858e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	2b31      	cmp	r3, #49	; 0x31
 8008596:	dc24      	bgt.n	80085e2 <__ieee754_rem_pio2+0x28a>
 8008598:	e9ca 0100 	strd	r0, r1, [sl]
 800859c:	4646      	mov	r6, r8
 800859e:	464f      	mov	r7, r9
 80085a0:	e9da 8900 	ldrd	r8, r9, [sl]
 80085a4:	4630      	mov	r0, r6
 80085a6:	4642      	mov	r2, r8
 80085a8:	464b      	mov	r3, r9
 80085aa:	4639      	mov	r1, r7
 80085ac:	f7f7 fe18 	bl	80001e0 <__aeabi_dsub>
 80085b0:	462b      	mov	r3, r5
 80085b2:	4622      	mov	r2, r4
 80085b4:	f7f7 fe14 	bl	80001e0 <__aeabi_dsub>
 80085b8:	9b02      	ldr	r3, [sp, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80085c0:	f6bf af0a 	bge.w	80083d8 <__ieee754_rem_pio2+0x80>
 80085c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80085c8:	f8ca 3004 	str.w	r3, [sl, #4]
 80085cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085d0:	f8ca 8000 	str.w	r8, [sl]
 80085d4:	f8ca 0008 	str.w	r0, [sl, #8]
 80085d8:	f8ca 300c 	str.w	r3, [sl, #12]
 80085dc:	f1cb 0b00 	rsb	fp, fp, #0
 80085e0:	e6fa      	b.n	80083d8 <__ieee754_rem_pio2+0x80>
 80085e2:	a327      	add	r3, pc, #156	; (adr r3, 8008680 <__ieee754_rem_pio2+0x328>)
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	ec51 0b18 	vmov	r0, r1, d8
 80085ec:	f7f7 ffb0 	bl	8000550 <__aeabi_dmul>
 80085f0:	4604      	mov	r4, r0
 80085f2:	460d      	mov	r5, r1
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	4640      	mov	r0, r8
 80085fa:	4649      	mov	r1, r9
 80085fc:	f7f7 fdf0 	bl	80001e0 <__aeabi_dsub>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	4606      	mov	r6, r0
 8008606:	460f      	mov	r7, r1
 8008608:	4640      	mov	r0, r8
 800860a:	4649      	mov	r1, r9
 800860c:	f7f7 fde8 	bl	80001e0 <__aeabi_dsub>
 8008610:	4622      	mov	r2, r4
 8008612:	462b      	mov	r3, r5
 8008614:	f7f7 fde4 	bl	80001e0 <__aeabi_dsub>
 8008618:	a31b      	add	r3, pc, #108	; (adr r3, 8008688 <__ieee754_rem_pio2+0x330>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	4604      	mov	r4, r0
 8008620:	460d      	mov	r5, r1
 8008622:	ec51 0b18 	vmov	r0, r1, d8
 8008626:	f7f7 ff93 	bl	8000550 <__aeabi_dmul>
 800862a:	4622      	mov	r2, r4
 800862c:	462b      	mov	r3, r5
 800862e:	f7f7 fdd7 	bl	80001e0 <__aeabi_dsub>
 8008632:	4604      	mov	r4, r0
 8008634:	460d      	mov	r5, r1
 8008636:	e75f      	b.n	80084f8 <__ieee754_rem_pio2+0x1a0>
 8008638:	4b1b      	ldr	r3, [pc, #108]	; (80086a8 <__ieee754_rem_pio2+0x350>)
 800863a:	4598      	cmp	r8, r3
 800863c:	dd36      	ble.n	80086ac <__ieee754_rem_pio2+0x354>
 800863e:	ee10 2a10 	vmov	r2, s0
 8008642:	462b      	mov	r3, r5
 8008644:	4620      	mov	r0, r4
 8008646:	4629      	mov	r1, r5
 8008648:	f7f7 fdca 	bl	80001e0 <__aeabi_dsub>
 800864c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008650:	e9ca 0100 	strd	r0, r1, [sl]
 8008654:	e694      	b.n	8008380 <__ieee754_rem_pio2+0x28>
 8008656:	bf00      	nop
 8008658:	54400000 	.word	0x54400000
 800865c:	3ff921fb 	.word	0x3ff921fb
 8008660:	1a626331 	.word	0x1a626331
 8008664:	3dd0b461 	.word	0x3dd0b461
 8008668:	1a600000 	.word	0x1a600000
 800866c:	3dd0b461 	.word	0x3dd0b461
 8008670:	2e037073 	.word	0x2e037073
 8008674:	3ba3198a 	.word	0x3ba3198a
 8008678:	6dc9c883 	.word	0x6dc9c883
 800867c:	3fe45f30 	.word	0x3fe45f30
 8008680:	2e000000 	.word	0x2e000000
 8008684:	3ba3198a 	.word	0x3ba3198a
 8008688:	252049c1 	.word	0x252049c1
 800868c:	397b839a 	.word	0x397b839a
 8008690:	3fe921fb 	.word	0x3fe921fb
 8008694:	4002d97b 	.word	0x4002d97b
 8008698:	3ff921fb 	.word	0x3ff921fb
 800869c:	413921fb 	.word	0x413921fb
 80086a0:	3fe00000 	.word	0x3fe00000
 80086a4:	08009528 	.word	0x08009528
 80086a8:	7fefffff 	.word	0x7fefffff
 80086ac:	ea4f 5428 	mov.w	r4, r8, asr #20
 80086b0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80086b4:	ee10 0a10 	vmov	r0, s0
 80086b8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80086bc:	ee10 6a10 	vmov	r6, s0
 80086c0:	460f      	mov	r7, r1
 80086c2:	f7f8 f9f5 	bl	8000ab0 <__aeabi_d2iz>
 80086c6:	f7f7 fed9 	bl	800047c <__aeabi_i2d>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4630      	mov	r0, r6
 80086d0:	4639      	mov	r1, r7
 80086d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086d6:	f7f7 fd83 	bl	80001e0 <__aeabi_dsub>
 80086da:	4b23      	ldr	r3, [pc, #140]	; (8008768 <__ieee754_rem_pio2+0x410>)
 80086dc:	2200      	movs	r2, #0
 80086de:	f7f7 ff37 	bl	8000550 <__aeabi_dmul>
 80086e2:	460f      	mov	r7, r1
 80086e4:	4606      	mov	r6, r0
 80086e6:	f7f8 f9e3 	bl	8000ab0 <__aeabi_d2iz>
 80086ea:	f7f7 fec7 	bl	800047c <__aeabi_i2d>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	4630      	mov	r0, r6
 80086f4:	4639      	mov	r1, r7
 80086f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80086fa:	f7f7 fd71 	bl	80001e0 <__aeabi_dsub>
 80086fe:	4b1a      	ldr	r3, [pc, #104]	; (8008768 <__ieee754_rem_pio2+0x410>)
 8008700:	2200      	movs	r2, #0
 8008702:	f7f7 ff25 	bl	8000550 <__aeabi_dmul>
 8008706:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800870a:	ad04      	add	r5, sp, #16
 800870c:	f04f 0803 	mov.w	r8, #3
 8008710:	46a9      	mov	r9, r5
 8008712:	2600      	movs	r6, #0
 8008714:	2700      	movs	r7, #0
 8008716:	4632      	mov	r2, r6
 8008718:	463b      	mov	r3, r7
 800871a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800871e:	46c3      	mov	fp, r8
 8008720:	3d08      	subs	r5, #8
 8008722:	f108 38ff 	add.w	r8, r8, #4294967295
 8008726:	f7f8 f97b 	bl	8000a20 <__aeabi_dcmpeq>
 800872a:	2800      	cmp	r0, #0
 800872c:	d1f3      	bne.n	8008716 <__ieee754_rem_pio2+0x3be>
 800872e:	4b0f      	ldr	r3, [pc, #60]	; (800876c <__ieee754_rem_pio2+0x414>)
 8008730:	9301      	str	r3, [sp, #4]
 8008732:	2302      	movs	r3, #2
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	4622      	mov	r2, r4
 8008738:	465b      	mov	r3, fp
 800873a:	4651      	mov	r1, sl
 800873c:	4648      	mov	r0, r9
 800873e:	f000 f993 	bl	8008a68 <__kernel_rem_pio2>
 8008742:	9b02      	ldr	r3, [sp, #8]
 8008744:	2b00      	cmp	r3, #0
 8008746:	4683      	mov	fp, r0
 8008748:	f6bf ae46 	bge.w	80083d8 <__ieee754_rem_pio2+0x80>
 800874c:	e9da 2100 	ldrd	r2, r1, [sl]
 8008750:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008754:	e9ca 2300 	strd	r2, r3, [sl]
 8008758:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800875c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008760:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008764:	e73a      	b.n	80085dc <__ieee754_rem_pio2+0x284>
 8008766:	bf00      	nop
 8008768:	41700000 	.word	0x41700000
 800876c:	080095a8 	.word	0x080095a8

08008770 <__ieee754_sqrt>:
 8008770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008774:	ec55 4b10 	vmov	r4, r5, d0
 8008778:	4e55      	ldr	r6, [pc, #340]	; (80088d0 <__ieee754_sqrt+0x160>)
 800877a:	43ae      	bics	r6, r5
 800877c:	ee10 0a10 	vmov	r0, s0
 8008780:	ee10 3a10 	vmov	r3, s0
 8008784:	462a      	mov	r2, r5
 8008786:	4629      	mov	r1, r5
 8008788:	d110      	bne.n	80087ac <__ieee754_sqrt+0x3c>
 800878a:	ee10 2a10 	vmov	r2, s0
 800878e:	462b      	mov	r3, r5
 8008790:	f7f7 fede 	bl	8000550 <__aeabi_dmul>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4620      	mov	r0, r4
 800879a:	4629      	mov	r1, r5
 800879c:	f7f7 fd22 	bl	80001e4 <__adddf3>
 80087a0:	4604      	mov	r4, r0
 80087a2:	460d      	mov	r5, r1
 80087a4:	ec45 4b10 	vmov	d0, r4, r5
 80087a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ac:	2d00      	cmp	r5, #0
 80087ae:	dc10      	bgt.n	80087d2 <__ieee754_sqrt+0x62>
 80087b0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80087b4:	4330      	orrs	r0, r6
 80087b6:	d0f5      	beq.n	80087a4 <__ieee754_sqrt+0x34>
 80087b8:	b15d      	cbz	r5, 80087d2 <__ieee754_sqrt+0x62>
 80087ba:	ee10 2a10 	vmov	r2, s0
 80087be:	462b      	mov	r3, r5
 80087c0:	ee10 0a10 	vmov	r0, s0
 80087c4:	f7f7 fd0c 	bl	80001e0 <__aeabi_dsub>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	f7f7 ffea 	bl	80007a4 <__aeabi_ddiv>
 80087d0:	e7e6      	b.n	80087a0 <__ieee754_sqrt+0x30>
 80087d2:	1512      	asrs	r2, r2, #20
 80087d4:	d074      	beq.n	80088c0 <__ieee754_sqrt+0x150>
 80087d6:	07d4      	lsls	r4, r2, #31
 80087d8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80087dc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80087e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80087e4:	bf5e      	ittt	pl
 80087e6:	0fda      	lsrpl	r2, r3, #31
 80087e8:	005b      	lslpl	r3, r3, #1
 80087ea:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80087ee:	2400      	movs	r4, #0
 80087f0:	0fda      	lsrs	r2, r3, #31
 80087f2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80087f6:	107f      	asrs	r7, r7, #1
 80087f8:	005b      	lsls	r3, r3, #1
 80087fa:	2516      	movs	r5, #22
 80087fc:	4620      	mov	r0, r4
 80087fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008802:	1886      	adds	r6, r0, r2
 8008804:	428e      	cmp	r6, r1
 8008806:	bfde      	ittt	le
 8008808:	1b89      	suble	r1, r1, r6
 800880a:	18b0      	addle	r0, r6, r2
 800880c:	18a4      	addle	r4, r4, r2
 800880e:	0049      	lsls	r1, r1, #1
 8008810:	3d01      	subs	r5, #1
 8008812:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008816:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800881a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800881e:	d1f0      	bne.n	8008802 <__ieee754_sqrt+0x92>
 8008820:	462a      	mov	r2, r5
 8008822:	f04f 0e20 	mov.w	lr, #32
 8008826:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800882a:	4281      	cmp	r1, r0
 800882c:	eb06 0c05 	add.w	ip, r6, r5
 8008830:	dc02      	bgt.n	8008838 <__ieee754_sqrt+0xc8>
 8008832:	d113      	bne.n	800885c <__ieee754_sqrt+0xec>
 8008834:	459c      	cmp	ip, r3
 8008836:	d811      	bhi.n	800885c <__ieee754_sqrt+0xec>
 8008838:	f1bc 0f00 	cmp.w	ip, #0
 800883c:	eb0c 0506 	add.w	r5, ip, r6
 8008840:	da43      	bge.n	80088ca <__ieee754_sqrt+0x15a>
 8008842:	2d00      	cmp	r5, #0
 8008844:	db41      	blt.n	80088ca <__ieee754_sqrt+0x15a>
 8008846:	f100 0801 	add.w	r8, r0, #1
 800884a:	1a09      	subs	r1, r1, r0
 800884c:	459c      	cmp	ip, r3
 800884e:	bf88      	it	hi
 8008850:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008854:	eba3 030c 	sub.w	r3, r3, ip
 8008858:	4432      	add	r2, r6
 800885a:	4640      	mov	r0, r8
 800885c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008860:	f1be 0e01 	subs.w	lr, lr, #1
 8008864:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800886c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008870:	d1db      	bne.n	800882a <__ieee754_sqrt+0xba>
 8008872:	430b      	orrs	r3, r1
 8008874:	d006      	beq.n	8008884 <__ieee754_sqrt+0x114>
 8008876:	1c50      	adds	r0, r2, #1
 8008878:	bf13      	iteet	ne
 800887a:	3201      	addne	r2, #1
 800887c:	3401      	addeq	r4, #1
 800887e:	4672      	moveq	r2, lr
 8008880:	f022 0201 	bicne.w	r2, r2, #1
 8008884:	1063      	asrs	r3, r4, #1
 8008886:	0852      	lsrs	r2, r2, #1
 8008888:	07e1      	lsls	r1, r4, #31
 800888a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800888e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008892:	bf48      	it	mi
 8008894:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008898:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800889c:	4614      	mov	r4, r2
 800889e:	e781      	b.n	80087a4 <__ieee754_sqrt+0x34>
 80088a0:	0ad9      	lsrs	r1, r3, #11
 80088a2:	3815      	subs	r0, #21
 80088a4:	055b      	lsls	r3, r3, #21
 80088a6:	2900      	cmp	r1, #0
 80088a8:	d0fa      	beq.n	80088a0 <__ieee754_sqrt+0x130>
 80088aa:	02cd      	lsls	r5, r1, #11
 80088ac:	d50a      	bpl.n	80088c4 <__ieee754_sqrt+0x154>
 80088ae:	f1c2 0420 	rsb	r4, r2, #32
 80088b2:	fa23 f404 	lsr.w	r4, r3, r4
 80088b6:	1e55      	subs	r5, r2, #1
 80088b8:	4093      	lsls	r3, r2
 80088ba:	4321      	orrs	r1, r4
 80088bc:	1b42      	subs	r2, r0, r5
 80088be:	e78a      	b.n	80087d6 <__ieee754_sqrt+0x66>
 80088c0:	4610      	mov	r0, r2
 80088c2:	e7f0      	b.n	80088a6 <__ieee754_sqrt+0x136>
 80088c4:	0049      	lsls	r1, r1, #1
 80088c6:	3201      	adds	r2, #1
 80088c8:	e7ef      	b.n	80088aa <__ieee754_sqrt+0x13a>
 80088ca:	4680      	mov	r8, r0
 80088cc:	e7bd      	b.n	800884a <__ieee754_sqrt+0xda>
 80088ce:	bf00      	nop
 80088d0:	7ff00000 	.word	0x7ff00000
 80088d4:	00000000 	.word	0x00000000

080088d8 <__kernel_cos>:
 80088d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	ec57 6b10 	vmov	r6, r7, d0
 80088e0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80088e4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80088e8:	ed8d 1b00 	vstr	d1, [sp]
 80088ec:	da07      	bge.n	80088fe <__kernel_cos+0x26>
 80088ee:	ee10 0a10 	vmov	r0, s0
 80088f2:	4639      	mov	r1, r7
 80088f4:	f7f8 f8dc 	bl	8000ab0 <__aeabi_d2iz>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	f000 8088 	beq.w	8008a0e <__kernel_cos+0x136>
 80088fe:	4632      	mov	r2, r6
 8008900:	463b      	mov	r3, r7
 8008902:	4630      	mov	r0, r6
 8008904:	4639      	mov	r1, r7
 8008906:	f7f7 fe23 	bl	8000550 <__aeabi_dmul>
 800890a:	4b51      	ldr	r3, [pc, #324]	; (8008a50 <__kernel_cos+0x178>)
 800890c:	2200      	movs	r2, #0
 800890e:	4604      	mov	r4, r0
 8008910:	460d      	mov	r5, r1
 8008912:	f7f7 fe1d 	bl	8000550 <__aeabi_dmul>
 8008916:	a340      	add	r3, pc, #256	; (adr r3, 8008a18 <__kernel_cos+0x140>)
 8008918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891c:	4682      	mov	sl, r0
 800891e:	468b      	mov	fp, r1
 8008920:	4620      	mov	r0, r4
 8008922:	4629      	mov	r1, r5
 8008924:	f7f7 fe14 	bl	8000550 <__aeabi_dmul>
 8008928:	a33d      	add	r3, pc, #244	; (adr r3, 8008a20 <__kernel_cos+0x148>)
 800892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892e:	f7f7 fc59 	bl	80001e4 <__adddf3>
 8008932:	4622      	mov	r2, r4
 8008934:	462b      	mov	r3, r5
 8008936:	f7f7 fe0b 	bl	8000550 <__aeabi_dmul>
 800893a:	a33b      	add	r3, pc, #236	; (adr r3, 8008a28 <__kernel_cos+0x150>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f7f7 fc4e 	bl	80001e0 <__aeabi_dsub>
 8008944:	4622      	mov	r2, r4
 8008946:	462b      	mov	r3, r5
 8008948:	f7f7 fe02 	bl	8000550 <__aeabi_dmul>
 800894c:	a338      	add	r3, pc, #224	; (adr r3, 8008a30 <__kernel_cos+0x158>)
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	f7f7 fc47 	bl	80001e4 <__adddf3>
 8008956:	4622      	mov	r2, r4
 8008958:	462b      	mov	r3, r5
 800895a:	f7f7 fdf9 	bl	8000550 <__aeabi_dmul>
 800895e:	a336      	add	r3, pc, #216	; (adr r3, 8008a38 <__kernel_cos+0x160>)
 8008960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008964:	f7f7 fc3c 	bl	80001e0 <__aeabi_dsub>
 8008968:	4622      	mov	r2, r4
 800896a:	462b      	mov	r3, r5
 800896c:	f7f7 fdf0 	bl	8000550 <__aeabi_dmul>
 8008970:	a333      	add	r3, pc, #204	; (adr r3, 8008a40 <__kernel_cos+0x168>)
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	f7f7 fc35 	bl	80001e4 <__adddf3>
 800897a:	4622      	mov	r2, r4
 800897c:	462b      	mov	r3, r5
 800897e:	f7f7 fde7 	bl	8000550 <__aeabi_dmul>
 8008982:	4622      	mov	r2, r4
 8008984:	462b      	mov	r3, r5
 8008986:	f7f7 fde3 	bl	8000550 <__aeabi_dmul>
 800898a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800898e:	4604      	mov	r4, r0
 8008990:	460d      	mov	r5, r1
 8008992:	4630      	mov	r0, r6
 8008994:	4639      	mov	r1, r7
 8008996:	f7f7 fddb 	bl	8000550 <__aeabi_dmul>
 800899a:	460b      	mov	r3, r1
 800899c:	4602      	mov	r2, r0
 800899e:	4629      	mov	r1, r5
 80089a0:	4620      	mov	r0, r4
 80089a2:	f7f7 fc1d 	bl	80001e0 <__aeabi_dsub>
 80089a6:	4b2b      	ldr	r3, [pc, #172]	; (8008a54 <__kernel_cos+0x17c>)
 80089a8:	4598      	cmp	r8, r3
 80089aa:	4606      	mov	r6, r0
 80089ac:	460f      	mov	r7, r1
 80089ae:	dc10      	bgt.n	80089d2 <__kernel_cos+0xfa>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4650      	mov	r0, sl
 80089b6:	4659      	mov	r1, fp
 80089b8:	f7f7 fc12 	bl	80001e0 <__aeabi_dsub>
 80089bc:	460b      	mov	r3, r1
 80089be:	4926      	ldr	r1, [pc, #152]	; (8008a58 <__kernel_cos+0x180>)
 80089c0:	4602      	mov	r2, r0
 80089c2:	2000      	movs	r0, #0
 80089c4:	f7f7 fc0c 	bl	80001e0 <__aeabi_dsub>
 80089c8:	ec41 0b10 	vmov	d0, r0, r1
 80089cc:	b003      	add	sp, #12
 80089ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d2:	4b22      	ldr	r3, [pc, #136]	; (8008a5c <__kernel_cos+0x184>)
 80089d4:	4920      	ldr	r1, [pc, #128]	; (8008a58 <__kernel_cos+0x180>)
 80089d6:	4598      	cmp	r8, r3
 80089d8:	bfcc      	ite	gt
 80089da:	4d21      	ldrgt	r5, [pc, #132]	; (8008a60 <__kernel_cos+0x188>)
 80089dc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80089e0:	2400      	movs	r4, #0
 80089e2:	4622      	mov	r2, r4
 80089e4:	462b      	mov	r3, r5
 80089e6:	2000      	movs	r0, #0
 80089e8:	f7f7 fbfa 	bl	80001e0 <__aeabi_dsub>
 80089ec:	4622      	mov	r2, r4
 80089ee:	4680      	mov	r8, r0
 80089f0:	4689      	mov	r9, r1
 80089f2:	462b      	mov	r3, r5
 80089f4:	4650      	mov	r0, sl
 80089f6:	4659      	mov	r1, fp
 80089f8:	f7f7 fbf2 	bl	80001e0 <__aeabi_dsub>
 80089fc:	4632      	mov	r2, r6
 80089fe:	463b      	mov	r3, r7
 8008a00:	f7f7 fbee 	bl	80001e0 <__aeabi_dsub>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	4640      	mov	r0, r8
 8008a0a:	4649      	mov	r1, r9
 8008a0c:	e7da      	b.n	80089c4 <__kernel_cos+0xec>
 8008a0e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008a48 <__kernel_cos+0x170>
 8008a12:	e7db      	b.n	80089cc <__kernel_cos+0xf4>
 8008a14:	f3af 8000 	nop.w
 8008a18:	be8838d4 	.word	0xbe8838d4
 8008a1c:	bda8fae9 	.word	0xbda8fae9
 8008a20:	bdb4b1c4 	.word	0xbdb4b1c4
 8008a24:	3e21ee9e 	.word	0x3e21ee9e
 8008a28:	809c52ad 	.word	0x809c52ad
 8008a2c:	3e927e4f 	.word	0x3e927e4f
 8008a30:	19cb1590 	.word	0x19cb1590
 8008a34:	3efa01a0 	.word	0x3efa01a0
 8008a38:	16c15177 	.word	0x16c15177
 8008a3c:	3f56c16c 	.word	0x3f56c16c
 8008a40:	5555554c 	.word	0x5555554c
 8008a44:	3fa55555 	.word	0x3fa55555
 8008a48:	00000000 	.word	0x00000000
 8008a4c:	3ff00000 	.word	0x3ff00000
 8008a50:	3fe00000 	.word	0x3fe00000
 8008a54:	3fd33332 	.word	0x3fd33332
 8008a58:	3ff00000 	.word	0x3ff00000
 8008a5c:	3fe90000 	.word	0x3fe90000
 8008a60:	3fd20000 	.word	0x3fd20000
 8008a64:	00000000 	.word	0x00000000

08008a68 <__kernel_rem_pio2>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	ed2d 8b02 	vpush	{d8}
 8008a70:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008a74:	f112 0f14 	cmn.w	r2, #20
 8008a78:	9308      	str	r3, [sp, #32]
 8008a7a:	9101      	str	r1, [sp, #4]
 8008a7c:	4bc4      	ldr	r3, [pc, #784]	; (8008d90 <__kernel_rem_pio2+0x328>)
 8008a7e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008a80:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a86:	9302      	str	r3, [sp, #8]
 8008a88:	9b08      	ldr	r3, [sp, #32]
 8008a8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a8e:	bfa8      	it	ge
 8008a90:	1ed4      	subge	r4, r2, #3
 8008a92:	9306      	str	r3, [sp, #24]
 8008a94:	bfb2      	itee	lt
 8008a96:	2400      	movlt	r4, #0
 8008a98:	2318      	movge	r3, #24
 8008a9a:	fb94 f4f3 	sdivge	r4, r4, r3
 8008a9e:	f06f 0317 	mvn.w	r3, #23
 8008aa2:	fb04 3303 	mla	r3, r4, r3, r3
 8008aa6:	eb03 0a02 	add.w	sl, r3, r2
 8008aaa:	9b02      	ldr	r3, [sp, #8]
 8008aac:	9a06      	ldr	r2, [sp, #24]
 8008aae:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008d80 <__kernel_rem_pio2+0x318>
 8008ab2:	eb03 0802 	add.w	r8, r3, r2
 8008ab6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008ab8:	1aa7      	subs	r7, r4, r2
 8008aba:	ae22      	add	r6, sp, #136	; 0x88
 8008abc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008ac0:	2500      	movs	r5, #0
 8008ac2:	4545      	cmp	r5, r8
 8008ac4:	dd13      	ble.n	8008aee <__kernel_rem_pio2+0x86>
 8008ac6:	9b08      	ldr	r3, [sp, #32]
 8008ac8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008d80 <__kernel_rem_pio2+0x318>
 8008acc:	aa22      	add	r2, sp, #136	; 0x88
 8008ace:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008ad2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008ad6:	f04f 0800 	mov.w	r8, #0
 8008ada:	9b02      	ldr	r3, [sp, #8]
 8008adc:	4598      	cmp	r8, r3
 8008ade:	dc2f      	bgt.n	8008b40 <__kernel_rem_pio2+0xd8>
 8008ae0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008ae4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008ae8:	462f      	mov	r7, r5
 8008aea:	2600      	movs	r6, #0
 8008aec:	e01b      	b.n	8008b26 <__kernel_rem_pio2+0xbe>
 8008aee:	42ef      	cmn	r7, r5
 8008af0:	d407      	bmi.n	8008b02 <__kernel_rem_pio2+0x9a>
 8008af2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008af6:	f7f7 fcc1 	bl	800047c <__aeabi_i2d>
 8008afa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008afe:	3501      	adds	r5, #1
 8008b00:	e7df      	b.n	8008ac2 <__kernel_rem_pio2+0x5a>
 8008b02:	ec51 0b18 	vmov	r0, r1, d8
 8008b06:	e7f8      	b.n	8008afa <__kernel_rem_pio2+0x92>
 8008b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008b10:	f7f7 fd1e 	bl	8000550 <__aeabi_dmul>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b1c:	f7f7 fb62 	bl	80001e4 <__adddf3>
 8008b20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b24:	3601      	adds	r6, #1
 8008b26:	9b06      	ldr	r3, [sp, #24]
 8008b28:	429e      	cmp	r6, r3
 8008b2a:	f1a7 0708 	sub.w	r7, r7, #8
 8008b2e:	ddeb      	ble.n	8008b08 <__kernel_rem_pio2+0xa0>
 8008b30:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008b34:	f108 0801 	add.w	r8, r8, #1
 8008b38:	ecab 7b02 	vstmia	fp!, {d7}
 8008b3c:	3508      	adds	r5, #8
 8008b3e:	e7cc      	b.n	8008ada <__kernel_rem_pio2+0x72>
 8008b40:	9b02      	ldr	r3, [sp, #8]
 8008b42:	aa0e      	add	r2, sp, #56	; 0x38
 8008b44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b48:	930d      	str	r3, [sp, #52]	; 0x34
 8008b4a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008b4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008b50:	9c02      	ldr	r4, [sp, #8]
 8008b52:	930c      	str	r3, [sp, #48]	; 0x30
 8008b54:	00e3      	lsls	r3, r4, #3
 8008b56:	930a      	str	r3, [sp, #40]	; 0x28
 8008b58:	ab9a      	add	r3, sp, #616	; 0x268
 8008b5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b5e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008b62:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008b66:	ab72      	add	r3, sp, #456	; 0x1c8
 8008b68:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008b6c:	46c3      	mov	fp, r8
 8008b6e:	46a1      	mov	r9, r4
 8008b70:	f1b9 0f00 	cmp.w	r9, #0
 8008b74:	f1a5 0508 	sub.w	r5, r5, #8
 8008b78:	dc77      	bgt.n	8008c6a <__kernel_rem_pio2+0x202>
 8008b7a:	ec47 6b10 	vmov	d0, r6, r7
 8008b7e:	4650      	mov	r0, sl
 8008b80:	f000 fc02 	bl	8009388 <scalbn>
 8008b84:	ec57 6b10 	vmov	r6, r7, d0
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008b8e:	ee10 0a10 	vmov	r0, s0
 8008b92:	4639      	mov	r1, r7
 8008b94:	f7f7 fcdc 	bl	8000550 <__aeabi_dmul>
 8008b98:	ec41 0b10 	vmov	d0, r0, r1
 8008b9c:	f000 fb74 	bl	8009288 <floor>
 8008ba0:	4b7c      	ldr	r3, [pc, #496]	; (8008d94 <__kernel_rem_pio2+0x32c>)
 8008ba2:	ec51 0b10 	vmov	r0, r1, d0
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f7f7 fcd2 	bl	8000550 <__aeabi_dmul>
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	4639      	mov	r1, r7
 8008bb4:	f7f7 fb14 	bl	80001e0 <__aeabi_dsub>
 8008bb8:	460f      	mov	r7, r1
 8008bba:	4606      	mov	r6, r0
 8008bbc:	f7f7 ff78 	bl	8000ab0 <__aeabi_d2iz>
 8008bc0:	9004      	str	r0, [sp, #16]
 8008bc2:	f7f7 fc5b 	bl	800047c <__aeabi_i2d>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4630      	mov	r0, r6
 8008bcc:	4639      	mov	r1, r7
 8008bce:	f7f7 fb07 	bl	80001e0 <__aeabi_dsub>
 8008bd2:	f1ba 0f00 	cmp.w	sl, #0
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	460f      	mov	r7, r1
 8008bda:	dd6d      	ble.n	8008cb8 <__kernel_rem_pio2+0x250>
 8008bdc:	1e62      	subs	r2, r4, #1
 8008bde:	ab0e      	add	r3, sp, #56	; 0x38
 8008be0:	9d04      	ldr	r5, [sp, #16]
 8008be2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008be6:	f1ca 0118 	rsb	r1, sl, #24
 8008bea:	fa40 f301 	asr.w	r3, r0, r1
 8008bee:	441d      	add	r5, r3
 8008bf0:	408b      	lsls	r3, r1
 8008bf2:	1ac0      	subs	r0, r0, r3
 8008bf4:	ab0e      	add	r3, sp, #56	; 0x38
 8008bf6:	9504      	str	r5, [sp, #16]
 8008bf8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008bfc:	f1ca 0317 	rsb	r3, sl, #23
 8008c00:	fa40 fb03 	asr.w	fp, r0, r3
 8008c04:	f1bb 0f00 	cmp.w	fp, #0
 8008c08:	dd65      	ble.n	8008cd6 <__kernel_rem_pio2+0x26e>
 8008c0a:	9b04      	ldr	r3, [sp, #16]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	3301      	adds	r3, #1
 8008c10:	9304      	str	r3, [sp, #16]
 8008c12:	4615      	mov	r5, r2
 8008c14:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008c18:	4294      	cmp	r4, r2
 8008c1a:	f300 809c 	bgt.w	8008d56 <__kernel_rem_pio2+0x2ee>
 8008c1e:	f1ba 0f00 	cmp.w	sl, #0
 8008c22:	dd07      	ble.n	8008c34 <__kernel_rem_pio2+0x1cc>
 8008c24:	f1ba 0f01 	cmp.w	sl, #1
 8008c28:	f000 80c0 	beq.w	8008dac <__kernel_rem_pio2+0x344>
 8008c2c:	f1ba 0f02 	cmp.w	sl, #2
 8008c30:	f000 80c6 	beq.w	8008dc0 <__kernel_rem_pio2+0x358>
 8008c34:	f1bb 0f02 	cmp.w	fp, #2
 8008c38:	d14d      	bne.n	8008cd6 <__kernel_rem_pio2+0x26e>
 8008c3a:	4632      	mov	r2, r6
 8008c3c:	463b      	mov	r3, r7
 8008c3e:	4956      	ldr	r1, [pc, #344]	; (8008d98 <__kernel_rem_pio2+0x330>)
 8008c40:	2000      	movs	r0, #0
 8008c42:	f7f7 facd 	bl	80001e0 <__aeabi_dsub>
 8008c46:	4606      	mov	r6, r0
 8008c48:	460f      	mov	r7, r1
 8008c4a:	2d00      	cmp	r5, #0
 8008c4c:	d043      	beq.n	8008cd6 <__kernel_rem_pio2+0x26e>
 8008c4e:	4650      	mov	r0, sl
 8008c50:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008d88 <__kernel_rem_pio2+0x320>
 8008c54:	f000 fb98 	bl	8009388 <scalbn>
 8008c58:	4630      	mov	r0, r6
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	ec53 2b10 	vmov	r2, r3, d0
 8008c60:	f7f7 fabe 	bl	80001e0 <__aeabi_dsub>
 8008c64:	4606      	mov	r6, r0
 8008c66:	460f      	mov	r7, r1
 8008c68:	e035      	b.n	8008cd6 <__kernel_rem_pio2+0x26e>
 8008c6a:	4b4c      	ldr	r3, [pc, #304]	; (8008d9c <__kernel_rem_pio2+0x334>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	4630      	mov	r0, r6
 8008c70:	4639      	mov	r1, r7
 8008c72:	f7f7 fc6d 	bl	8000550 <__aeabi_dmul>
 8008c76:	f7f7 ff1b 	bl	8000ab0 <__aeabi_d2iz>
 8008c7a:	f7f7 fbff 	bl	800047c <__aeabi_i2d>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	ec43 2b18 	vmov	d8, r2, r3
 8008c86:	4b46      	ldr	r3, [pc, #280]	; (8008da0 <__kernel_rem_pio2+0x338>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f7f7 fc61 	bl	8000550 <__aeabi_dmul>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	4630      	mov	r0, r6
 8008c94:	4639      	mov	r1, r7
 8008c96:	f7f7 faa3 	bl	80001e0 <__aeabi_dsub>
 8008c9a:	f7f7 ff09 	bl	8000ab0 <__aeabi_d2iz>
 8008c9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ca2:	f84b 0b04 	str.w	r0, [fp], #4
 8008ca6:	ec51 0b18 	vmov	r0, r1, d8
 8008caa:	f7f7 fa9b 	bl	80001e4 <__adddf3>
 8008cae:	f109 39ff 	add.w	r9, r9, #4294967295
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	460f      	mov	r7, r1
 8008cb6:	e75b      	b.n	8008b70 <__kernel_rem_pio2+0x108>
 8008cb8:	d106      	bne.n	8008cc8 <__kernel_rem_pio2+0x260>
 8008cba:	1e63      	subs	r3, r4, #1
 8008cbc:	aa0e      	add	r2, sp, #56	; 0x38
 8008cbe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008cc2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008cc6:	e79d      	b.n	8008c04 <__kernel_rem_pio2+0x19c>
 8008cc8:	4b36      	ldr	r3, [pc, #216]	; (8008da4 <__kernel_rem_pio2+0x33c>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f7f7 fec6 	bl	8000a5c <__aeabi_dcmpge>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	d13d      	bne.n	8008d50 <__kernel_rem_pio2+0x2e8>
 8008cd4:	4683      	mov	fp, r0
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2300      	movs	r3, #0
 8008cda:	4630      	mov	r0, r6
 8008cdc:	4639      	mov	r1, r7
 8008cde:	f7f7 fe9f 	bl	8000a20 <__aeabi_dcmpeq>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	f000 80c0 	beq.w	8008e68 <__kernel_rem_pio2+0x400>
 8008ce8:	1e65      	subs	r5, r4, #1
 8008cea:	462b      	mov	r3, r5
 8008cec:	2200      	movs	r2, #0
 8008cee:	9902      	ldr	r1, [sp, #8]
 8008cf0:	428b      	cmp	r3, r1
 8008cf2:	da6c      	bge.n	8008dce <__kernel_rem_pio2+0x366>
 8008cf4:	2a00      	cmp	r2, #0
 8008cf6:	f000 8089 	beq.w	8008e0c <__kernel_rem_pio2+0x3a4>
 8008cfa:	ab0e      	add	r3, sp, #56	; 0x38
 8008cfc:	f1aa 0a18 	sub.w	sl, sl, #24
 8008d00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 80ad 	beq.w	8008e64 <__kernel_rem_pio2+0x3fc>
 8008d0a:	4650      	mov	r0, sl
 8008d0c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008d88 <__kernel_rem_pio2+0x320>
 8008d10:	f000 fb3a 	bl	8009388 <scalbn>
 8008d14:	ab9a      	add	r3, sp, #616	; 0x268
 8008d16:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008d1a:	ec57 6b10 	vmov	r6, r7, d0
 8008d1e:	00ec      	lsls	r4, r5, #3
 8008d20:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8008d24:	46aa      	mov	sl, r5
 8008d26:	f1ba 0f00 	cmp.w	sl, #0
 8008d2a:	f280 80d6 	bge.w	8008eda <__kernel_rem_pio2+0x472>
 8008d2e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008d80 <__kernel_rem_pio2+0x318>
 8008d32:	462e      	mov	r6, r5
 8008d34:	2e00      	cmp	r6, #0
 8008d36:	f2c0 8104 	blt.w	8008f42 <__kernel_rem_pio2+0x4da>
 8008d3a:	ab72      	add	r3, sp, #456	; 0x1c8
 8008d3c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008d40:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008da8 <__kernel_rem_pio2+0x340>
 8008d44:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008d48:	f04f 0800 	mov.w	r8, #0
 8008d4c:	1baf      	subs	r7, r5, r6
 8008d4e:	e0ea      	b.n	8008f26 <__kernel_rem_pio2+0x4be>
 8008d50:	f04f 0b02 	mov.w	fp, #2
 8008d54:	e759      	b.n	8008c0a <__kernel_rem_pio2+0x1a2>
 8008d56:	f8d8 3000 	ldr.w	r3, [r8]
 8008d5a:	b955      	cbnz	r5, 8008d72 <__kernel_rem_pio2+0x30a>
 8008d5c:	b123      	cbz	r3, 8008d68 <__kernel_rem_pio2+0x300>
 8008d5e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008d62:	f8c8 3000 	str.w	r3, [r8]
 8008d66:	2301      	movs	r3, #1
 8008d68:	3201      	adds	r2, #1
 8008d6a:	f108 0804 	add.w	r8, r8, #4
 8008d6e:	461d      	mov	r5, r3
 8008d70:	e752      	b.n	8008c18 <__kernel_rem_pio2+0x1b0>
 8008d72:	1acb      	subs	r3, r1, r3
 8008d74:	f8c8 3000 	str.w	r3, [r8]
 8008d78:	462b      	mov	r3, r5
 8008d7a:	e7f5      	b.n	8008d68 <__kernel_rem_pio2+0x300>
 8008d7c:	f3af 8000 	nop.w
	...
 8008d8c:	3ff00000 	.word	0x3ff00000
 8008d90:	080096f0 	.word	0x080096f0
 8008d94:	40200000 	.word	0x40200000
 8008d98:	3ff00000 	.word	0x3ff00000
 8008d9c:	3e700000 	.word	0x3e700000
 8008da0:	41700000 	.word	0x41700000
 8008da4:	3fe00000 	.word	0x3fe00000
 8008da8:	080096b0 	.word	0x080096b0
 8008dac:	1e62      	subs	r2, r4, #1
 8008dae:	ab0e      	add	r3, sp, #56	; 0x38
 8008db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008db8:	a90e      	add	r1, sp, #56	; 0x38
 8008dba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008dbe:	e739      	b.n	8008c34 <__kernel_rem_pio2+0x1cc>
 8008dc0:	1e62      	subs	r2, r4, #1
 8008dc2:	ab0e      	add	r3, sp, #56	; 0x38
 8008dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008dcc:	e7f4      	b.n	8008db8 <__kernel_rem_pio2+0x350>
 8008dce:	a90e      	add	r1, sp, #56	; 0x38
 8008dd0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	430a      	orrs	r2, r1
 8008dd8:	e789      	b.n	8008cee <__kernel_rem_pio2+0x286>
 8008dda:	3301      	adds	r3, #1
 8008ddc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008de0:	2900      	cmp	r1, #0
 8008de2:	d0fa      	beq.n	8008dda <__kernel_rem_pio2+0x372>
 8008de4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008de6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008dea:	446a      	add	r2, sp
 8008dec:	3a98      	subs	r2, #152	; 0x98
 8008dee:	920a      	str	r2, [sp, #40]	; 0x28
 8008df0:	9a08      	ldr	r2, [sp, #32]
 8008df2:	18e3      	adds	r3, r4, r3
 8008df4:	18a5      	adds	r5, r4, r2
 8008df6:	aa22      	add	r2, sp, #136	; 0x88
 8008df8:	f104 0801 	add.w	r8, r4, #1
 8008dfc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	9b04      	ldr	r3, [sp, #16]
 8008e04:	4543      	cmp	r3, r8
 8008e06:	da04      	bge.n	8008e12 <__kernel_rem_pio2+0x3aa>
 8008e08:	461c      	mov	r4, r3
 8008e0a:	e6a3      	b.n	8008b54 <__kernel_rem_pio2+0xec>
 8008e0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e7e4      	b.n	8008ddc <__kernel_rem_pio2+0x374>
 8008e12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e14:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008e18:	f7f7 fb30 	bl	800047c <__aeabi_i2d>
 8008e1c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e22:	46ab      	mov	fp, r5
 8008e24:	461c      	mov	r4, r3
 8008e26:	f04f 0900 	mov.w	r9, #0
 8008e2a:	2600      	movs	r6, #0
 8008e2c:	2700      	movs	r7, #0
 8008e2e:	9b06      	ldr	r3, [sp, #24]
 8008e30:	4599      	cmp	r9, r3
 8008e32:	dd06      	ble.n	8008e42 <__kernel_rem_pio2+0x3da>
 8008e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e36:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008e3a:	f108 0801 	add.w	r8, r8, #1
 8008e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e40:	e7df      	b.n	8008e02 <__kernel_rem_pio2+0x39a>
 8008e42:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008e46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008e4a:	f7f7 fb81 	bl	8000550 <__aeabi_dmul>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	460b      	mov	r3, r1
 8008e52:	4630      	mov	r0, r6
 8008e54:	4639      	mov	r1, r7
 8008e56:	f7f7 f9c5 	bl	80001e4 <__adddf3>
 8008e5a:	f109 0901 	add.w	r9, r9, #1
 8008e5e:	4606      	mov	r6, r0
 8008e60:	460f      	mov	r7, r1
 8008e62:	e7e4      	b.n	8008e2e <__kernel_rem_pio2+0x3c6>
 8008e64:	3d01      	subs	r5, #1
 8008e66:	e748      	b.n	8008cfa <__kernel_rem_pio2+0x292>
 8008e68:	ec47 6b10 	vmov	d0, r6, r7
 8008e6c:	f1ca 0000 	rsb	r0, sl, #0
 8008e70:	f000 fa8a 	bl	8009388 <scalbn>
 8008e74:	ec57 6b10 	vmov	r6, r7, d0
 8008e78:	4ba0      	ldr	r3, [pc, #640]	; (80090fc <__kernel_rem_pio2+0x694>)
 8008e7a:	ee10 0a10 	vmov	r0, s0
 8008e7e:	2200      	movs	r2, #0
 8008e80:	4639      	mov	r1, r7
 8008e82:	f7f7 fdeb 	bl	8000a5c <__aeabi_dcmpge>
 8008e86:	b1f8      	cbz	r0, 8008ec8 <__kernel_rem_pio2+0x460>
 8008e88:	4b9d      	ldr	r3, [pc, #628]	; (8009100 <__kernel_rem_pio2+0x698>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	4639      	mov	r1, r7
 8008e90:	f7f7 fb5e 	bl	8000550 <__aeabi_dmul>
 8008e94:	f7f7 fe0c 	bl	8000ab0 <__aeabi_d2iz>
 8008e98:	4680      	mov	r8, r0
 8008e9a:	f7f7 faef 	bl	800047c <__aeabi_i2d>
 8008e9e:	4b97      	ldr	r3, [pc, #604]	; (80090fc <__kernel_rem_pio2+0x694>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f7f7 fb55 	bl	8000550 <__aeabi_dmul>
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	4639      	mov	r1, r7
 8008eac:	4630      	mov	r0, r6
 8008eae:	f7f7 f997 	bl	80001e0 <__aeabi_dsub>
 8008eb2:	f7f7 fdfd 	bl	8000ab0 <__aeabi_d2iz>
 8008eb6:	1c65      	adds	r5, r4, #1
 8008eb8:	ab0e      	add	r3, sp, #56	; 0x38
 8008eba:	f10a 0a18 	add.w	sl, sl, #24
 8008ebe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008ec2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008ec6:	e720      	b.n	8008d0a <__kernel_rem_pio2+0x2a2>
 8008ec8:	4630      	mov	r0, r6
 8008eca:	4639      	mov	r1, r7
 8008ecc:	f7f7 fdf0 	bl	8000ab0 <__aeabi_d2iz>
 8008ed0:	ab0e      	add	r3, sp, #56	; 0x38
 8008ed2:	4625      	mov	r5, r4
 8008ed4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008ed8:	e717      	b.n	8008d0a <__kernel_rem_pio2+0x2a2>
 8008eda:	ab0e      	add	r3, sp, #56	; 0x38
 8008edc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008ee0:	f7f7 facc 	bl	800047c <__aeabi_i2d>
 8008ee4:	4632      	mov	r2, r6
 8008ee6:	463b      	mov	r3, r7
 8008ee8:	f7f7 fb32 	bl	8000550 <__aeabi_dmul>
 8008eec:	4b84      	ldr	r3, [pc, #528]	; (8009100 <__kernel_rem_pio2+0x698>)
 8008eee:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	4639      	mov	r1, r7
 8008ef8:	f7f7 fb2a 	bl	8000550 <__aeabi_dmul>
 8008efc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f00:	4606      	mov	r6, r0
 8008f02:	460f      	mov	r7, r1
 8008f04:	e70f      	b.n	8008d26 <__kernel_rem_pio2+0x2be>
 8008f06:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008f0a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008f0e:	f7f7 fb1f 	bl	8000550 <__aeabi_dmul>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f1a:	f7f7 f963 	bl	80001e4 <__adddf3>
 8008f1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008f22:	f108 0801 	add.w	r8, r8, #1
 8008f26:	9b02      	ldr	r3, [sp, #8]
 8008f28:	4598      	cmp	r8, r3
 8008f2a:	dc01      	bgt.n	8008f30 <__kernel_rem_pio2+0x4c8>
 8008f2c:	45b8      	cmp	r8, r7
 8008f2e:	ddea      	ble.n	8008f06 <__kernel_rem_pio2+0x49e>
 8008f30:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008f34:	ab4a      	add	r3, sp, #296	; 0x128
 8008f36:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008f3a:	ed87 7b00 	vstr	d7, [r7]
 8008f3e:	3e01      	subs	r6, #1
 8008f40:	e6f8      	b.n	8008d34 <__kernel_rem_pio2+0x2cc>
 8008f42:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	dc0b      	bgt.n	8008f60 <__kernel_rem_pio2+0x4f8>
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	dc35      	bgt.n	8008fb8 <__kernel_rem_pio2+0x550>
 8008f4c:	d059      	beq.n	8009002 <__kernel_rem_pio2+0x59a>
 8008f4e:	9b04      	ldr	r3, [sp, #16]
 8008f50:	f003 0007 	and.w	r0, r3, #7
 8008f54:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008f58:	ecbd 8b02 	vpop	{d8}
 8008f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f60:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d1f3      	bne.n	8008f4e <__kernel_rem_pio2+0x4e6>
 8008f66:	ab4a      	add	r3, sp, #296	; 0x128
 8008f68:	4423      	add	r3, r4
 8008f6a:	9306      	str	r3, [sp, #24]
 8008f6c:	461c      	mov	r4, r3
 8008f6e:	469a      	mov	sl, r3
 8008f70:	9502      	str	r5, [sp, #8]
 8008f72:	9b02      	ldr	r3, [sp, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f1aa 0a08 	sub.w	sl, sl, #8
 8008f7a:	dc6b      	bgt.n	8009054 <__kernel_rem_pio2+0x5ec>
 8008f7c:	46aa      	mov	sl, r5
 8008f7e:	f1ba 0f01 	cmp.w	sl, #1
 8008f82:	f1a4 0408 	sub.w	r4, r4, #8
 8008f86:	f300 8085 	bgt.w	8009094 <__kernel_rem_pio2+0x62c>
 8008f8a:	9c06      	ldr	r4, [sp, #24]
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	3408      	adds	r4, #8
 8008f90:	2100      	movs	r1, #0
 8008f92:	2d01      	cmp	r5, #1
 8008f94:	f300 809d 	bgt.w	80090d2 <__kernel_rem_pio2+0x66a>
 8008f98:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008f9c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008fa0:	f1bb 0f00 	cmp.w	fp, #0
 8008fa4:	f040 809b 	bne.w	80090de <__kernel_rem_pio2+0x676>
 8008fa8:	9b01      	ldr	r3, [sp, #4]
 8008faa:	e9c3 5600 	strd	r5, r6, [r3]
 8008fae:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008fb2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008fb6:	e7ca      	b.n	8008f4e <__kernel_rem_pio2+0x4e6>
 8008fb8:	3408      	adds	r4, #8
 8008fba:	ab4a      	add	r3, sp, #296	; 0x128
 8008fbc:	441c      	add	r4, r3
 8008fbe:	462e      	mov	r6, r5
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	2e00      	cmp	r6, #0
 8008fc6:	da36      	bge.n	8009036 <__kernel_rem_pio2+0x5ce>
 8008fc8:	f1bb 0f00 	cmp.w	fp, #0
 8008fcc:	d039      	beq.n	8009042 <__kernel_rem_pio2+0x5da>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fd4:	9c01      	ldr	r4, [sp, #4]
 8008fd6:	e9c4 2300 	strd	r2, r3, [r4]
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008fe2:	f7f7 f8fd 	bl	80001e0 <__aeabi_dsub>
 8008fe6:	ae4c      	add	r6, sp, #304	; 0x130
 8008fe8:	2401      	movs	r4, #1
 8008fea:	42a5      	cmp	r5, r4
 8008fec:	da2c      	bge.n	8009048 <__kernel_rem_pio2+0x5e0>
 8008fee:	f1bb 0f00 	cmp.w	fp, #0
 8008ff2:	d002      	beq.n	8008ffa <__kernel_rem_pio2+0x592>
 8008ff4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	9b01      	ldr	r3, [sp, #4]
 8008ffc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009000:	e7a5      	b.n	8008f4e <__kernel_rem_pio2+0x4e6>
 8009002:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8009006:	eb0d 0403 	add.w	r4, sp, r3
 800900a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800900e:	2000      	movs	r0, #0
 8009010:	2100      	movs	r1, #0
 8009012:	2d00      	cmp	r5, #0
 8009014:	da09      	bge.n	800902a <__kernel_rem_pio2+0x5c2>
 8009016:	f1bb 0f00 	cmp.w	fp, #0
 800901a:	d002      	beq.n	8009022 <__kernel_rem_pio2+0x5ba>
 800901c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009020:	4619      	mov	r1, r3
 8009022:	9b01      	ldr	r3, [sp, #4]
 8009024:	e9c3 0100 	strd	r0, r1, [r3]
 8009028:	e791      	b.n	8008f4e <__kernel_rem_pio2+0x4e6>
 800902a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800902e:	f7f7 f8d9 	bl	80001e4 <__adddf3>
 8009032:	3d01      	subs	r5, #1
 8009034:	e7ed      	b.n	8009012 <__kernel_rem_pio2+0x5aa>
 8009036:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800903a:	f7f7 f8d3 	bl	80001e4 <__adddf3>
 800903e:	3e01      	subs	r6, #1
 8009040:	e7c0      	b.n	8008fc4 <__kernel_rem_pio2+0x55c>
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	e7c5      	b.n	8008fd4 <__kernel_rem_pio2+0x56c>
 8009048:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800904c:	f7f7 f8ca 	bl	80001e4 <__adddf3>
 8009050:	3401      	adds	r4, #1
 8009052:	e7ca      	b.n	8008fea <__kernel_rem_pio2+0x582>
 8009054:	e9da 8900 	ldrd	r8, r9, [sl]
 8009058:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800905c:	9b02      	ldr	r3, [sp, #8]
 800905e:	3b01      	subs	r3, #1
 8009060:	9302      	str	r3, [sp, #8]
 8009062:	4632      	mov	r2, r6
 8009064:	463b      	mov	r3, r7
 8009066:	4640      	mov	r0, r8
 8009068:	4649      	mov	r1, r9
 800906a:	f7f7 f8bb 	bl	80001e4 <__adddf3>
 800906e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	4640      	mov	r0, r8
 8009078:	4649      	mov	r1, r9
 800907a:	f7f7 f8b1 	bl	80001e0 <__aeabi_dsub>
 800907e:	4632      	mov	r2, r6
 8009080:	463b      	mov	r3, r7
 8009082:	f7f7 f8af 	bl	80001e4 <__adddf3>
 8009086:	ed9d 7b08 	vldr	d7, [sp, #32]
 800908a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800908e:	ed8a 7b00 	vstr	d7, [sl]
 8009092:	e76e      	b.n	8008f72 <__kernel_rem_pio2+0x50a>
 8009094:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009098:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800909c:	4640      	mov	r0, r8
 800909e:	4632      	mov	r2, r6
 80090a0:	463b      	mov	r3, r7
 80090a2:	4649      	mov	r1, r9
 80090a4:	f7f7 f89e 	bl	80001e4 <__adddf3>
 80090a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4640      	mov	r0, r8
 80090b2:	4649      	mov	r1, r9
 80090b4:	f7f7 f894 	bl	80001e0 <__aeabi_dsub>
 80090b8:	4632      	mov	r2, r6
 80090ba:	463b      	mov	r3, r7
 80090bc:	f7f7 f892 	bl	80001e4 <__adddf3>
 80090c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80090c8:	ed84 7b00 	vstr	d7, [r4]
 80090cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090d0:	e755      	b.n	8008f7e <__kernel_rem_pio2+0x516>
 80090d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80090d6:	f7f7 f885 	bl	80001e4 <__adddf3>
 80090da:	3d01      	subs	r5, #1
 80090dc:	e759      	b.n	8008f92 <__kernel_rem_pio2+0x52a>
 80090de:	9b01      	ldr	r3, [sp, #4]
 80090e0:	9a01      	ldr	r2, [sp, #4]
 80090e2:	601d      	str	r5, [r3, #0]
 80090e4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80090e8:	605c      	str	r4, [r3, #4]
 80090ea:	609f      	str	r7, [r3, #8]
 80090ec:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80090f0:	60d3      	str	r3, [r2, #12]
 80090f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090f6:	6110      	str	r0, [r2, #16]
 80090f8:	6153      	str	r3, [r2, #20]
 80090fa:	e728      	b.n	8008f4e <__kernel_rem_pio2+0x4e6>
 80090fc:	41700000 	.word	0x41700000
 8009100:	3e700000 	.word	0x3e700000
 8009104:	00000000 	.word	0x00000000

08009108 <__kernel_sin>:
 8009108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910c:	ed2d 8b04 	vpush	{d8-d9}
 8009110:	eeb0 8a41 	vmov.f32	s16, s2
 8009114:	eef0 8a61 	vmov.f32	s17, s3
 8009118:	ec55 4b10 	vmov	r4, r5, d0
 800911c:	b083      	sub	sp, #12
 800911e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009122:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009126:	9001      	str	r0, [sp, #4]
 8009128:	da06      	bge.n	8009138 <__kernel_sin+0x30>
 800912a:	ee10 0a10 	vmov	r0, s0
 800912e:	4629      	mov	r1, r5
 8009130:	f7f7 fcbe 	bl	8000ab0 <__aeabi_d2iz>
 8009134:	2800      	cmp	r0, #0
 8009136:	d051      	beq.n	80091dc <__kernel_sin+0xd4>
 8009138:	4622      	mov	r2, r4
 800913a:	462b      	mov	r3, r5
 800913c:	4620      	mov	r0, r4
 800913e:	4629      	mov	r1, r5
 8009140:	f7f7 fa06 	bl	8000550 <__aeabi_dmul>
 8009144:	4682      	mov	sl, r0
 8009146:	468b      	mov	fp, r1
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4620      	mov	r0, r4
 800914e:	4629      	mov	r1, r5
 8009150:	f7f7 f9fe 	bl	8000550 <__aeabi_dmul>
 8009154:	a341      	add	r3, pc, #260	; (adr r3, 800925c <__kernel_sin+0x154>)
 8009156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915a:	4680      	mov	r8, r0
 800915c:	4689      	mov	r9, r1
 800915e:	4650      	mov	r0, sl
 8009160:	4659      	mov	r1, fp
 8009162:	f7f7 f9f5 	bl	8000550 <__aeabi_dmul>
 8009166:	a33f      	add	r3, pc, #252	; (adr r3, 8009264 <__kernel_sin+0x15c>)
 8009168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916c:	f7f7 f838 	bl	80001e0 <__aeabi_dsub>
 8009170:	4652      	mov	r2, sl
 8009172:	465b      	mov	r3, fp
 8009174:	f7f7 f9ec 	bl	8000550 <__aeabi_dmul>
 8009178:	a33c      	add	r3, pc, #240	; (adr r3, 800926c <__kernel_sin+0x164>)
 800917a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917e:	f7f7 f831 	bl	80001e4 <__adddf3>
 8009182:	4652      	mov	r2, sl
 8009184:	465b      	mov	r3, fp
 8009186:	f7f7 f9e3 	bl	8000550 <__aeabi_dmul>
 800918a:	a33a      	add	r3, pc, #232	; (adr r3, 8009274 <__kernel_sin+0x16c>)
 800918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009190:	f7f7 f826 	bl	80001e0 <__aeabi_dsub>
 8009194:	4652      	mov	r2, sl
 8009196:	465b      	mov	r3, fp
 8009198:	f7f7 f9da 	bl	8000550 <__aeabi_dmul>
 800919c:	a337      	add	r3, pc, #220	; (adr r3, 800927c <__kernel_sin+0x174>)
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	f7f7 f81f 	bl	80001e4 <__adddf3>
 80091a6:	9b01      	ldr	r3, [sp, #4]
 80091a8:	4606      	mov	r6, r0
 80091aa:	460f      	mov	r7, r1
 80091ac:	b9eb      	cbnz	r3, 80091ea <__kernel_sin+0xe2>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	4650      	mov	r0, sl
 80091b4:	4659      	mov	r1, fp
 80091b6:	f7f7 f9cb 	bl	8000550 <__aeabi_dmul>
 80091ba:	a325      	add	r3, pc, #148	; (adr r3, 8009250 <__kernel_sin+0x148>)
 80091bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c0:	f7f7 f80e 	bl	80001e0 <__aeabi_dsub>
 80091c4:	4642      	mov	r2, r8
 80091c6:	464b      	mov	r3, r9
 80091c8:	f7f7 f9c2 	bl	8000550 <__aeabi_dmul>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	4620      	mov	r0, r4
 80091d2:	4629      	mov	r1, r5
 80091d4:	f7f7 f806 	bl	80001e4 <__adddf3>
 80091d8:	4604      	mov	r4, r0
 80091da:	460d      	mov	r5, r1
 80091dc:	ec45 4b10 	vmov	d0, r4, r5
 80091e0:	b003      	add	sp, #12
 80091e2:	ecbd 8b04 	vpop	{d8-d9}
 80091e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ea:	4b1b      	ldr	r3, [pc, #108]	; (8009258 <__kernel_sin+0x150>)
 80091ec:	ec51 0b18 	vmov	r0, r1, d8
 80091f0:	2200      	movs	r2, #0
 80091f2:	f7f7 f9ad 	bl	8000550 <__aeabi_dmul>
 80091f6:	4632      	mov	r2, r6
 80091f8:	ec41 0b19 	vmov	d9, r0, r1
 80091fc:	463b      	mov	r3, r7
 80091fe:	4640      	mov	r0, r8
 8009200:	4649      	mov	r1, r9
 8009202:	f7f7 f9a5 	bl	8000550 <__aeabi_dmul>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	ec51 0b19 	vmov	r0, r1, d9
 800920e:	f7f6 ffe7 	bl	80001e0 <__aeabi_dsub>
 8009212:	4652      	mov	r2, sl
 8009214:	465b      	mov	r3, fp
 8009216:	f7f7 f99b 	bl	8000550 <__aeabi_dmul>
 800921a:	ec53 2b18 	vmov	r2, r3, d8
 800921e:	f7f6 ffdf 	bl	80001e0 <__aeabi_dsub>
 8009222:	a30b      	add	r3, pc, #44	; (adr r3, 8009250 <__kernel_sin+0x148>)
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	4606      	mov	r6, r0
 800922a:	460f      	mov	r7, r1
 800922c:	4640      	mov	r0, r8
 800922e:	4649      	mov	r1, r9
 8009230:	f7f7 f98e 	bl	8000550 <__aeabi_dmul>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	4630      	mov	r0, r6
 800923a:	4639      	mov	r1, r7
 800923c:	f7f6 ffd2 	bl	80001e4 <__adddf3>
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	4620      	mov	r0, r4
 8009246:	4629      	mov	r1, r5
 8009248:	f7f6 ffca 	bl	80001e0 <__aeabi_dsub>
 800924c:	e7c4      	b.n	80091d8 <__kernel_sin+0xd0>
 800924e:	bf00      	nop
 8009250:	55555549 	.word	0x55555549
 8009254:	3fc55555 	.word	0x3fc55555
 8009258:	3fe00000 	.word	0x3fe00000
 800925c:	5acfd57c 	.word	0x5acfd57c
 8009260:	3de5d93a 	.word	0x3de5d93a
 8009264:	8a2b9ceb 	.word	0x8a2b9ceb
 8009268:	3e5ae5e6 	.word	0x3e5ae5e6
 800926c:	57b1fe7d 	.word	0x57b1fe7d
 8009270:	3ec71de3 	.word	0x3ec71de3
 8009274:	19c161d5 	.word	0x19c161d5
 8009278:	3f2a01a0 	.word	0x3f2a01a0
 800927c:	1110f8a6 	.word	0x1110f8a6
 8009280:	3f811111 	.word	0x3f811111
 8009284:	00000000 	.word	0x00000000

08009288 <floor>:
 8009288:	ec51 0b10 	vmov	r0, r1, d0
 800928c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009290:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009294:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009298:	2e13      	cmp	r6, #19
 800929a:	ee10 5a10 	vmov	r5, s0
 800929e:	ee10 8a10 	vmov	r8, s0
 80092a2:	460c      	mov	r4, r1
 80092a4:	dc32      	bgt.n	800930c <floor+0x84>
 80092a6:	2e00      	cmp	r6, #0
 80092a8:	da14      	bge.n	80092d4 <floor+0x4c>
 80092aa:	a333      	add	r3, pc, #204	; (adr r3, 8009378 <floor+0xf0>)
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	f7f6 ff98 	bl	80001e4 <__adddf3>
 80092b4:	2200      	movs	r2, #0
 80092b6:	2300      	movs	r3, #0
 80092b8:	f7f7 fbda 	bl	8000a70 <__aeabi_dcmpgt>
 80092bc:	b138      	cbz	r0, 80092ce <floor+0x46>
 80092be:	2c00      	cmp	r4, #0
 80092c0:	da57      	bge.n	8009372 <floor+0xea>
 80092c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80092c6:	431d      	orrs	r5, r3
 80092c8:	d001      	beq.n	80092ce <floor+0x46>
 80092ca:	4c2d      	ldr	r4, [pc, #180]	; (8009380 <floor+0xf8>)
 80092cc:	2500      	movs	r5, #0
 80092ce:	4621      	mov	r1, r4
 80092d0:	4628      	mov	r0, r5
 80092d2:	e025      	b.n	8009320 <floor+0x98>
 80092d4:	4f2b      	ldr	r7, [pc, #172]	; (8009384 <floor+0xfc>)
 80092d6:	4137      	asrs	r7, r6
 80092d8:	ea01 0307 	and.w	r3, r1, r7
 80092dc:	4303      	orrs	r3, r0
 80092de:	d01f      	beq.n	8009320 <floor+0x98>
 80092e0:	a325      	add	r3, pc, #148	; (adr r3, 8009378 <floor+0xf0>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	f7f6 ff7d 	bl	80001e4 <__adddf3>
 80092ea:	2200      	movs	r2, #0
 80092ec:	2300      	movs	r3, #0
 80092ee:	f7f7 fbbf 	bl	8000a70 <__aeabi_dcmpgt>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d0eb      	beq.n	80092ce <floor+0x46>
 80092f6:	2c00      	cmp	r4, #0
 80092f8:	bfbe      	ittt	lt
 80092fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80092fe:	fa43 f606 	asrlt.w	r6, r3, r6
 8009302:	19a4      	addlt	r4, r4, r6
 8009304:	ea24 0407 	bic.w	r4, r4, r7
 8009308:	2500      	movs	r5, #0
 800930a:	e7e0      	b.n	80092ce <floor+0x46>
 800930c:	2e33      	cmp	r6, #51	; 0x33
 800930e:	dd0b      	ble.n	8009328 <floor+0xa0>
 8009310:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009314:	d104      	bne.n	8009320 <floor+0x98>
 8009316:	ee10 2a10 	vmov	r2, s0
 800931a:	460b      	mov	r3, r1
 800931c:	f7f6 ff62 	bl	80001e4 <__adddf3>
 8009320:	ec41 0b10 	vmov	d0, r0, r1
 8009324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009328:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800932c:	f04f 33ff 	mov.w	r3, #4294967295
 8009330:	fa23 f707 	lsr.w	r7, r3, r7
 8009334:	4207      	tst	r7, r0
 8009336:	d0f3      	beq.n	8009320 <floor+0x98>
 8009338:	a30f      	add	r3, pc, #60	; (adr r3, 8009378 <floor+0xf0>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f7f6 ff51 	bl	80001e4 <__adddf3>
 8009342:	2200      	movs	r2, #0
 8009344:	2300      	movs	r3, #0
 8009346:	f7f7 fb93 	bl	8000a70 <__aeabi_dcmpgt>
 800934a:	2800      	cmp	r0, #0
 800934c:	d0bf      	beq.n	80092ce <floor+0x46>
 800934e:	2c00      	cmp	r4, #0
 8009350:	da02      	bge.n	8009358 <floor+0xd0>
 8009352:	2e14      	cmp	r6, #20
 8009354:	d103      	bne.n	800935e <floor+0xd6>
 8009356:	3401      	adds	r4, #1
 8009358:	ea25 0507 	bic.w	r5, r5, r7
 800935c:	e7b7      	b.n	80092ce <floor+0x46>
 800935e:	2301      	movs	r3, #1
 8009360:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009364:	fa03 f606 	lsl.w	r6, r3, r6
 8009368:	4435      	add	r5, r6
 800936a:	4545      	cmp	r5, r8
 800936c:	bf38      	it	cc
 800936e:	18e4      	addcc	r4, r4, r3
 8009370:	e7f2      	b.n	8009358 <floor+0xd0>
 8009372:	2500      	movs	r5, #0
 8009374:	462c      	mov	r4, r5
 8009376:	e7aa      	b.n	80092ce <floor+0x46>
 8009378:	8800759c 	.word	0x8800759c
 800937c:	7e37e43c 	.word	0x7e37e43c
 8009380:	bff00000 	.word	0xbff00000
 8009384:	000fffff 	.word	0x000fffff

08009388 <scalbn>:
 8009388:	b570      	push	{r4, r5, r6, lr}
 800938a:	ec55 4b10 	vmov	r4, r5, d0
 800938e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009392:	4606      	mov	r6, r0
 8009394:	462b      	mov	r3, r5
 8009396:	b99a      	cbnz	r2, 80093c0 <scalbn+0x38>
 8009398:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800939c:	4323      	orrs	r3, r4
 800939e:	d036      	beq.n	800940e <scalbn+0x86>
 80093a0:	4b39      	ldr	r3, [pc, #228]	; (8009488 <scalbn+0x100>)
 80093a2:	4629      	mov	r1, r5
 80093a4:	ee10 0a10 	vmov	r0, s0
 80093a8:	2200      	movs	r2, #0
 80093aa:	f7f7 f8d1 	bl	8000550 <__aeabi_dmul>
 80093ae:	4b37      	ldr	r3, [pc, #220]	; (800948c <scalbn+0x104>)
 80093b0:	429e      	cmp	r6, r3
 80093b2:	4604      	mov	r4, r0
 80093b4:	460d      	mov	r5, r1
 80093b6:	da10      	bge.n	80093da <scalbn+0x52>
 80093b8:	a32b      	add	r3, pc, #172	; (adr r3, 8009468 <scalbn+0xe0>)
 80093ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093be:	e03a      	b.n	8009436 <scalbn+0xae>
 80093c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80093c4:	428a      	cmp	r2, r1
 80093c6:	d10c      	bne.n	80093e2 <scalbn+0x5a>
 80093c8:	ee10 2a10 	vmov	r2, s0
 80093cc:	4620      	mov	r0, r4
 80093ce:	4629      	mov	r1, r5
 80093d0:	f7f6 ff08 	bl	80001e4 <__adddf3>
 80093d4:	4604      	mov	r4, r0
 80093d6:	460d      	mov	r5, r1
 80093d8:	e019      	b.n	800940e <scalbn+0x86>
 80093da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80093de:	460b      	mov	r3, r1
 80093e0:	3a36      	subs	r2, #54	; 0x36
 80093e2:	4432      	add	r2, r6
 80093e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80093e8:	428a      	cmp	r2, r1
 80093ea:	dd08      	ble.n	80093fe <scalbn+0x76>
 80093ec:	2d00      	cmp	r5, #0
 80093ee:	a120      	add	r1, pc, #128	; (adr r1, 8009470 <scalbn+0xe8>)
 80093f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093f4:	da1c      	bge.n	8009430 <scalbn+0xa8>
 80093f6:	a120      	add	r1, pc, #128	; (adr r1, 8009478 <scalbn+0xf0>)
 80093f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093fc:	e018      	b.n	8009430 <scalbn+0xa8>
 80093fe:	2a00      	cmp	r2, #0
 8009400:	dd08      	ble.n	8009414 <scalbn+0x8c>
 8009402:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009406:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800940a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800940e:	ec45 4b10 	vmov	d0, r4, r5
 8009412:	bd70      	pop	{r4, r5, r6, pc}
 8009414:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009418:	da19      	bge.n	800944e <scalbn+0xc6>
 800941a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800941e:	429e      	cmp	r6, r3
 8009420:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009424:	dd0a      	ble.n	800943c <scalbn+0xb4>
 8009426:	a112      	add	r1, pc, #72	; (adr r1, 8009470 <scalbn+0xe8>)
 8009428:	e9d1 0100 	ldrd	r0, r1, [r1]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1e2      	bne.n	80093f6 <scalbn+0x6e>
 8009430:	a30f      	add	r3, pc, #60	; (adr r3, 8009470 <scalbn+0xe8>)
 8009432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009436:	f7f7 f88b 	bl	8000550 <__aeabi_dmul>
 800943a:	e7cb      	b.n	80093d4 <scalbn+0x4c>
 800943c:	a10a      	add	r1, pc, #40	; (adr r1, 8009468 <scalbn+0xe0>)
 800943e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d0b8      	beq.n	80093b8 <scalbn+0x30>
 8009446:	a10e      	add	r1, pc, #56	; (adr r1, 8009480 <scalbn+0xf8>)
 8009448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800944c:	e7b4      	b.n	80093b8 <scalbn+0x30>
 800944e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009452:	3236      	adds	r2, #54	; 0x36
 8009454:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009458:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800945c:	4620      	mov	r0, r4
 800945e:	4b0c      	ldr	r3, [pc, #48]	; (8009490 <scalbn+0x108>)
 8009460:	2200      	movs	r2, #0
 8009462:	e7e8      	b.n	8009436 <scalbn+0xae>
 8009464:	f3af 8000 	nop.w
 8009468:	c2f8f359 	.word	0xc2f8f359
 800946c:	01a56e1f 	.word	0x01a56e1f
 8009470:	8800759c 	.word	0x8800759c
 8009474:	7e37e43c 	.word	0x7e37e43c
 8009478:	8800759c 	.word	0x8800759c
 800947c:	fe37e43c 	.word	0xfe37e43c
 8009480:	c2f8f359 	.word	0xc2f8f359
 8009484:	81a56e1f 	.word	0x81a56e1f
 8009488:	43500000 	.word	0x43500000
 800948c:	ffff3cb0 	.word	0xffff3cb0
 8009490:	3c900000 	.word	0x3c900000

08009494 <_init>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	bf00      	nop
 8009498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949a:	bc08      	pop	{r3}
 800949c:	469e      	mov	lr, r3
 800949e:	4770      	bx	lr

080094a0 <_fini>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	bf00      	nop
 80094a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a6:	bc08      	pop	{r3}
 80094a8:	469e      	mov	lr, r3
 80094aa:	4770      	bx	lr
