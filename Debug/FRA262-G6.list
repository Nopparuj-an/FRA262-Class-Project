
FRA262-G6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e024  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800e1c8  0800e1c8  0001e1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8c0  0800e8c0  000203e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8c0  0800e8c0  0001e8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8c8  0800e8c8  000203e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8c8  0800e8c8  0001e8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8cc  0800e8cc  0001e8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003e0  20000000  0800e8d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000afc  200003e0  0800ecb0  000203e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000edc  0800ecb0  00020edc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168a7  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003087  00000000  00000000  00036cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00039d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  0003afa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0a8  00000000  00000000  0003c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ddf  00000000  00000000  00056188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0311  00000000  00000000  0006df67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e278  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065c4  00000000  00000000  0010e2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003e0 	.word	0x200003e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e1ac 	.word	0x0800e1ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003e4 	.word	0x200003e4
 80001dc:	0800e1ac 	.word	0x0800e1ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <modbus_1t5_Timeout>:
void modbusRead1Register(); // function 03
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();

// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim) {
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <modbus_1t5_Timeout+0x1c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	751a      	strb	r2, [r3, #20]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	200003fc 	.word	0x200003fc

08001028 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <modbus_3t5_Timeout+0x1c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	755a      	strb	r2, [r3, #21]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	200003fc 	.word	0x200003fc

08001048 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart, uint32_t pos) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev = 1;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	759a      	strb	r2, [r3, #22]
	if (hModbus->modbusUartStructure.RxTail++ < MODBUS_MESSAGEBUFFER_SIZE) {
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <modbus_UART_Recived+0x60>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001062:	1c59      	adds	r1, r3, #1
 8001064:	b289      	uxth	r1, r1
 8001066:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800106a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800106e:	d210      	bcs.n	8001092 <modbus_UART_Recived+0x4a>

		HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68d8      	ldr	r0, [r3, #12]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <modbus_UART_Recived+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001082:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001086:	4413      	add	r3, r2
 8001088:	3302      	adds	r3, #2
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	f005 ff31 	bl	8006ef4 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200003fc 	.word	0x200003fc

080010ac <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <Modbus_init+0x9c>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <Modbus_init+0x9c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, (void*) modbus_1t5_Timeout);
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <Modbus_init+0x9c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	4a20      	ldr	r2, [pc, #128]	; (800114c <Modbus_init+0xa0>)
 80010cc:	2114      	movs	r1, #20
 80010ce:	4618      	mov	r0, r3
 80010d0:	f005 f8c2 	bl	8006258 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID, (void*) modbus_3t5_Timeout);
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <Modbus_init+0x9c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <Modbus_init+0xa4>)
 80010dc:	210e      	movs	r1, #14
 80010de:	4618      	mov	r0, r3
 80010e0:	f005 f8ba 	bl	8006258 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart, HAL_UART_RX_COMPLETE_CB_ID, (void*) modbus_UART_Recived);
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <Modbus_init+0x9c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <Modbus_init+0xa8>)
 80010ec:	2103      	movs	r1, #3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f005 fe58 	bl	8006da4 <HAL_UART_RegisterCallback>
	//start Receive
	HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <Modbus_init+0x9c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d8      	ldr	r0, [r3, #12]
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <Modbus_init+0x9c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <Modbus_init+0x9c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001106:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800110a:	4413      	add	r3, r2
 800110c:	3302      	adds	r3, #2
 800110e:	2201      	movs	r2, #1
 8001110:	4619      	mov	r1, r3
 8001112:	f005 feef 	bl	8006ef4 <HAL_UART_Receive_IT>

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <Modbus_init+0x9c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10c      	bne.n	8001140 <Modbus_init+0x94>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <Modbus_init+0x9c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4618      	mov	r0, r3
 800112e:	f004 f933 	bl	8005398 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <Modbus_init+0x9c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f004 fb72 	bl	8005824 <HAL_TIM_OnePulse_Start_IT>
	}

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200003fc 	.word	0x200003fc
 800114c:	08001009 	.word	0x08001009
 8001150:	08001029 	.word	0x08001029
 8001154:	08001049 	.word	0x08001049

08001158 <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800116c:	e013      	b.n	8001196 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	4053      	eors	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <CRC16+0x64>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4053      	eors	r3, r2
 800118a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <CRC16+0x68>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	803a      	strh	r2, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e6      	bne.n	800116e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000100 	.word	0x20000100
 80011c0:	20000000 	.word	0x20000000

080011c4 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	switch (hModbus->Mstatus) {
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	7e1b      	ldrb	r3, [r3, #24]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d80a      	bhi.n	80011ec <Modbus_Protocal_Worker+0x28>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <Modbus_Protocal_Worker+0x18>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	080011f7 	.word	0x080011f7
 80011e0:	08001397 	.word	0x08001397
 80011e4:	08001283 	.word	0x08001283
 80011e8:	080012a9 	.word	0x080012a9
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	761a      	strb	r2, [r3, #24]
		break;
 80011f4:	e0e8      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <Modbus_Protocal_Worker+0x44>
			Modbus_Emission();
 8001202:	f000 f9dd 	bl	80015c0 <Modbus_Emission>
 8001206:	e01c      	b.n	8001242 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if (hModbus->Flag_URev) {
 8001208:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	7d9b      	ldrb	r3, [r3, #22]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <Modbus_Protocal_Worker+0x7e>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2203      	movs	r2, #3
 8001240:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b20      	cmp	r3, #32
 8001250:	f040 80b3 	bne.w	80013ba <Modbus_Protocal_Worker+0x1f6>
			hModbus->modbusUartStructure.RxTail = 0;
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001270:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001274:	4413      	add	r3, r2
 8001276:	3302      	adds	r3, #2
 8001278:	2201      	movs	r2, #1
 800127a:	4619      	mov	r1, r3
 800127c:	f005 fe3a 	bl	8006ef4 <HAL_UART_Receive_IT>
		}
		break;
 8001280:	e09b      	b.n	80013ba <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7d1b      	ldrb	r3, [r3, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8098 	beq.w	80013be <Modbus_Protocal_Worker+0x1fa>
			/*reset recived flag*/
			hModbus->Flag_URev = 0;
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001296:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	22fe      	movs	r2, #254	; 0xfe
 800129c:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2204      	movs	r2, #4
 80012a4:	761a      	strb	r2, [r3, #24]
		}
		break;
 80012a6:	e08a      	b.n	80013be <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if (hModbus->Flag_URev) {
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	7d9b      	ldrb	r3, [r3, #22]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <Modbus_Protocal_Worker+0x102>

			if (!hModbus->RecvStatus) {
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <Modbus_Protocal_Worker+0x102>
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 80012c6:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ce:	f113 0f02 	cmn.w	r3, #2
 80012d2:	d150      	bne.n	8001376 <Modbus_Protocal_Worker+0x1b2>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx, hModbus->modbusUartStructure.RxTail - 2);
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f203 2272 	addw	r2, r3, #626	; 0x272
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80012ec:	3b02      	subs	r3, #2
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f7ff ff31 	bl	8001158 <CRC16>
 80012f6:	4603      	mov	r3, r0
 80012f8:	80bb      	strh	r3, [r7, #4]

			if (!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012fa:	793a      	ldrb	r2, [r7, #4]
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001308:	3b02      	subs	r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001310:	429a      	cmp	r2, r3
 8001312:	d10c      	bne.n	800132e <Modbus_Protocal_Worker+0x16a>
					&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 1])) {
 8001314:	797a      	ldrb	r2, [r7, #5]
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001322:	3b01      	subs	r3, #1
 8001324:	440b      	add	r3, r1
 8001326:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if (!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800132a:	429a      	cmp	r2, r3
 800132c:	d004      	beq.n	8001338 <Modbus_Protocal_Worker+0x174>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	75da      	strb	r2, [r3, #23]
				break;
 8001336:	e047      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d113      	bne.n	8001372 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe, hModbus->modbusUartStructure.MessageBufferRx + 1, hModbus->modbusUartStructure.RxTail - 3);
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f103 0019 	add.w	r0, r3, #25
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f203 2372 	addw	r3, r3, #626	; 0x272
 800135a:	1c59      	adds	r1, r3, #1
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001364:	3b03      	subs	r3, #3
 8001366:	461a      	mov	r2, r3
 8001368:	f006 ff86 	bl	8008278 <memcpy>

			//execute command
			Modbus_frame_response();
 800136c:	f000 f910 	bl	8001590 <Modbus_frame_response>
 8001370:	e001      	b.n	8001376 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001372:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 8001374:	e028      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		if (hModbus->Flag_T35TimeOut) {
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7d5b      	ldrb	r3, [r3, #21]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f005 fe5e 	bl	8007050 <HAL_UART_AbortReceive>
		break;
 8001394:	e015      	b.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d10f      	bne.n	80013c6 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount = 0;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	761a      	strb	r2, [r3, #24]
		break;
 80013b8:	e005      	b.n	80013c6 <Modbus_Protocal_Worker+0x202>
		break;
 80013ba:	bf00      	nop
 80013bc:	e004      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013be:	bf00      	nop
 80013c0:	e002      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c6:	bf00      	nop
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200003fc 	.word	0x200003fc

080013d4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <modbusWrite1Register+0x80>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	7e9b      	ldrb	r3, [r3, #26]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <modbusWrite1Register+0x80>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	7edb      	ldrb	r3, [r3, #27]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <modbusWrite1Register+0x80>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d903      	bls.n	8001406 <modbusWrite1Register+0x32>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013fe:	2002      	movs	r0, #2
 8001400:	f000 f8a4 	bl	800154c <ModbusErrorReply>
		return;
 8001404:	e023      	b.n	800144e <modbusWrite1Register+0x7a>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <modbusWrite1Register+0x80>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <modbusWrite1Register+0x80>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	7f12      	ldrb	r2, [r2, #28]
 8001418:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <modbusWrite1Register+0x80>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <modbusWrite1Register+0x80>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	440b      	add	r3, r1
 800142a:	7f52      	ldrb	r2, [r2, #29]
 800142c:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <modbusWrite1Register+0x80>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f203 1045 	addw	r0, r3, #325	; 0x145
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <modbusWrite1Register+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3319      	adds	r3, #25
 800143c:	2208      	movs	r2, #8
 800143e:	4619      	mov	r1, r3
 8001440:	f006 ff1a 	bl	8008278 <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <modbusWrite1Register+0x80>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2205      	movs	r2, #5
 800144a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200003fc 	.word	0x200003fc

08001458 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8) + (hModbus->Rxframe[4]));
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <modbusRead1Register+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	7f1b      	ldrb	r3, [r3, #28]
 8001464:	b29b      	uxth	r3, r3
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <modbusRead1Register+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	7f5b      	ldrb	r3, [r3, #29]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <modbusRead1Register+0xf0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7e9b      	ldrb	r3, [r3, #26]
 800147c:	b29b      	uxth	r3, r3
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <modbusRead1Register+0xf0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	7edb      	ldrb	r3, [r3, #27]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <modbusRead1Register+0x42>
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2b7d      	cmp	r3, #125	; 0x7d
 8001498:	d903      	bls.n	80014a2 <modbusRead1Register+0x4a>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f856 	bl	800154c <ModbusErrorReply>
		return;
 80014a0:	e04e      	b.n	8001540 <modbusRead1Register+0xe8>
	}

	if (startAddress > hModbus->RegisterSize || (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 80014a2:	88ba      	ldrh	r2, [r7, #4]
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <modbusRead1Register+0xf0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d808      	bhi.n	80014c0 <modbusRead1Register+0x68>
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <modbusRead1Register+0xf0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d903      	bls.n	80014c8 <modbusRead1Register+0x70>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f000 f843 	bl	800154c <ModbusErrorReply>
		return;
 80014c6:	e03b      	b.n	8001540 <modbusRead1Register+0xe8>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <modbusRead1Register+0xf0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <modbusRead1Register+0xf0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0052      	lsls	r2, r2, #1
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 80014e2:	2400      	movs	r4, #0
 80014e4:	e020      	b.n	8001528 <modbusRead1Register+0xd0>
		hModbus->Txframe[2 * i + 2] = hModbus->RegisterAddress[startAddress + i].U8[1];
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <modbusRead1Register+0xf0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	4423      	add	r3, r4
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	18d1      	adds	r1, r2, r3
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <modbusRead1Register+0xf0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	7849      	ldrb	r1, [r1, #1]
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2 * i + 3] = hModbus->RegisterAddress[startAddress + i].U8[0];
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <modbusRead1Register+0xf0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	4423      	add	r3, r4
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <modbusRead1Register+0xf0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	0063      	lsls	r3, r4, #1
 800151a:	3303      	adds	r3, #3
 800151c:	7809      	ldrb	r1, [r1, #0]
 800151e:	4413      	add	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for (i = 0; i < numberOfDataToRead; i++) {
 8001526:	3401      	adds	r4, #1
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	429c      	cmp	r4, r3
 800152c:	dbdb      	blt.n	80014e6 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <modbusRead1Register+0xf0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	200003fc 	.word	0x200003fc

0800154c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <ModbusErrorReply+0x40>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	7e5a      	ldrb	r2, [r3, #25]
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <ModbusErrorReply+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <ModbusErrorReply+0x40>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <ModbusErrorReply+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200003fc 	.word	0x200003fc

08001590 <Modbus_frame_response>:

void Modbus_frame_response() {
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <Modbus_frame_response+0x2c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	7e5b      	ldrb	r3, [r3, #25]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d004      	beq.n	80015a8 <Modbus_frame_response+0x18>
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d105      	bne.n	80015ae <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80015a2:	f7ff ff17 	bl	80013d4 <modbusWrite1Register>
		break;
 80015a6:	e006      	b.n	80015b6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80015a8:	f7ff ff56 	bl	8001458 <modbusRead1Register>
		break;
 80015ac:	e003      	b.n	80015b6 <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff ffcc 	bl	800154c <ModbusErrorReply>
		break;
 80015b4:	bf00      	nop

	}
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200003fc 	.word	0x200003fc

080015c0 <Modbus_Emission>:

void Modbus_Emission() {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 80015c6:	4b3e      	ldr	r3, [pc, #248]	; (80016c0 <Modbus_Emission+0x100>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b20      	cmp	r3, #32
 80015d4:	d160      	bne.n	8001698 <Modbus_Emission+0xd8>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80015d6:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <Modbus_Emission+0x100>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <Modbus_Emission+0x100>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1, hModbus->Txframe, hModbus->TxCount);
 80015e4:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <Modbus_Emission+0x100>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80015ec:	1c58      	adds	r0, r3, #1
 80015ee:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <Modbus_Emission+0x100>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f203 1145 	addw	r1, r3, #325	; 0x145
 80015f6:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <Modbus_Emission+0x100>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80015fe:	461a      	mov	r2, r3
 8001600:	f006 fe3a 	bl	8008278 <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 8001604:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <Modbus_Emission+0x100>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800160c:	b29a      	uxth	r2, r3
 800160e:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <Modbus_Emission+0x100>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	3203      	adds	r2, #3
 8001614:	b292      	uxth	r2, r2
 8001616:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx, hModbus->modbusUartStructure.TxTail - 2);
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <Modbus_Emission+0x100>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
 8001622:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <Modbus_Emission+0x100>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800162a:	3b02      	subs	r3, #2
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f7ff fd92 	bl	8001158 <CRC16>
 8001634:	4603      	mov	r3, r0
 8001636:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail - 2] = CalculateCRC.U8[0];
 8001638:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <Modbus_Emission+0x100>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <Modbus_Emission+0x100>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001644:	3b02      	subs	r3, #2
 8001646:	7939      	ldrb	r1, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	460a      	mov	r2, r1
 800164c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail - 1] = CalculateCRC.U8[1];
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <Modbus_Emission+0x100>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <Modbus_Emission+0x100>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800165c:	3b01      	subs	r3, #1
 800165e:	7979      	ldrb	r1, [r7, #5]
 8001660:	4413      	add	r3, r2
 8001662:	460a      	mov	r2, r1
 8001664:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		//sent modbus

		modbus_callback();
 8001668:	f001 f958 	bl	800291c <modbus_callback>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <Modbus_Emission+0x100>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b20      	cmp	r3, #32
 800167a:	d10d      	bne.n	8001698 <Modbus_Emission+0xd8>
			HAL_UART_Transmit_DMA(hModbus->huart, hModbus->modbusUartStructure.MessageBufferTx, hModbus->modbusUartStructure.TxTail);
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <Modbus_Emission+0x100>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68d8      	ldr	r0, [r3, #12]
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <Modbus_Emission+0x100>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <Modbus_Emission+0x100>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001692:	461a      	mov	r2, r3
 8001694:	f005 fc5e 	bl	8006f54 <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <Modbus_Emission+0x100>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <Modbus_Emission+0x100>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2200      	movs	r2, #0
 80016a6:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev = 0;
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <Modbus_Emission+0x100>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2200      	movs	r2, #0
 80016ae:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus = Modbus_state_Emission;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <Modbus_Emission+0x100>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2202      	movs	r2, #2
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200003fc 	.word	0x200003fc

080016c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ca:	463b      	mov	r3, r7
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016d6:	4b21      	ldr	r3, [pc, #132]	; (800175c <MX_ADC1_Init+0x98>)
 80016d8:	4a21      	ldr	r2, [pc, #132]	; (8001760 <MX_ADC1_Init+0x9c>)
 80016da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <MX_ADC1_Init+0x98>)
 80016de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <MX_ADC1_Init+0x98>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <MX_ADC1_Init+0x98>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_ADC1_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <MX_ADC1_Init+0x98>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_ADC1_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_ADC1_Init+0x98>)
 8001706:	4a17      	ldr	r2, [pc, #92]	; (8001764 <MX_ADC1_Init+0xa0>)
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_ADC1_Init+0x98>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_ADC1_Init+0x98>)
 8001712:	2201      	movs	r2, #1
 8001714:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_ADC1_Init+0x98>)
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_ADC1_Init+0x98>)
 8001720:	2201      	movs	r2, #1
 8001722:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001724:	480d      	ldr	r0, [pc, #52]	; (800175c <MX_ADC1_Init+0x98>)
 8001726:	f001 fe75 	bl	8003414 <HAL_ADC_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001730:	f001 f8fb 	bl	800292a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001734:	230a      	movs	r3, #10
 8001736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001738:	2301      	movs	r3, #1
 800173a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001740:	463b      	mov	r3, r7
 8001742:	4619      	mov	r1, r3
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_ADC1_Init+0x98>)
 8001746:	f001 fea9 	bl	800349c <HAL_ADC_ConfigChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001750:	f001 f8eb 	bl	800292a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001754:	bf00      	nop
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000400 	.word	0x20000400
 8001760:	40012000 	.word	0x40012000
 8001764:	0f000001 	.word	0x0f000001

08001768 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <HAL_ADC_MspInit+0x7c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d127      	bne.n	80017da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_ADC_MspInit+0x80>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <HAL_ADC_MspInit+0x80>)
 8001794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <HAL_ADC_MspInit+0x80>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_ADC_MspInit+0x80>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <HAL_ADC_MspInit+0x80>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_ADC_MspInit+0x80>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017c2:	2303      	movs	r3, #3
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c6:	2303      	movs	r3, #3
 80017c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_ADC_MspInit+0x84>)
 80017d6:	f002 fdaf 	bl	8004338 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40012000 	.word	0x40012000
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020800 	.word	0x40020800

080017f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_DMA_Init+0x3c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <MX_DMA_Init+0x3c>)
 8001800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_DMA_Init+0x3c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	2011      	movs	r0, #17
 8001818:	f002 f949 	bl	8003aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800181c:	2011      	movs	r0, #17
 800181e:	f002 f962 	bl	8003ae6 <HAL_NVIC_EnableIRQ>

}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800

08001830 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <MX_GPIO_Init+0x108>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a3a      	ldr	r2, [pc, #232]	; (8001938 <MX_GPIO_Init+0x108>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b38      	ldr	r3, [pc, #224]	; (8001938 <MX_GPIO_Init+0x108>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b34      	ldr	r3, [pc, #208]	; (8001938 <MX_GPIO_Init+0x108>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a33      	ldr	r2, [pc, #204]	; (8001938 <MX_GPIO_Init+0x108>)
 800186c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b31      	ldr	r3, [pc, #196]	; (8001938 <MX_GPIO_Init+0x108>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <MX_GPIO_Init+0x108>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a2c      	ldr	r2, [pc, #176]	; (8001938 <MX_GPIO_Init+0x108>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <MX_GPIO_Init+0x108>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <MX_GPIO_Init+0x108>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a25      	ldr	r2, [pc, #148]	; (8001938 <MX_GPIO_Init+0x108>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <MX_GPIO_Init+0x108>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 6102 	mov.w	r1, #2080	; 0x820
 80018bc:	481f      	ldr	r0, [pc, #124]	; (800193c <MX_GPIO_Init+0x10c>)
 80018be:	f002 febf 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	4819      	ldr	r0, [pc, #100]	; (8001940 <MX_GPIO_Init+0x110>)
 80018da:	f002 fd2d 	bl	8004338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018de:	230c      	movs	r3, #12
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	4813      	ldr	r0, [pc, #76]	; (8001940 <MX_GPIO_Init+0x110>)
 80018f4:	f002 fd20 	bl	8004338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 80018f8:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80018fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	480a      	ldr	r0, [pc, #40]	; (800193c <MX_GPIO_Init+0x10c>)
 8001912:	f002 fd11 	bl	8004338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	4806      	ldr	r0, [pc, #24]	; (8001944 <MX_GPIO_Init+0x114>)
 800192c:	f002 fd04 	bl	8004338 <HAL_GPIO_Init>

}
 8001930:	bf00      	nop
 8001932:	3728      	adds	r7, #40	; 0x28
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40023800 	.word	0x40023800
 800193c:	40020000 	.word	0x40020000
 8001940:	40020800 	.word	0x40020800
 8001944:	40020400 	.word	0x40020400

08001948 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_I2C1_Init+0x50>)
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <MX_I2C1_Init+0x54>)
 8001950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_I2C1_Init+0x50>)
 8001954:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <MX_I2C1_Init+0x58>)
 8001956:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_I2C1_Init+0x50>)
 8001966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800196a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <MX_I2C1_Init+0x50>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_I2C1_Init+0x50>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <MX_I2C1_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_I2C1_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <MX_I2C1_Init+0x50>)
 8001986:	f002 fe75 	bl	8004674 <HAL_I2C_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001990:	f000 ffcb 	bl	800292a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000448 	.word	0x20000448
 800199c:	40005400 	.word	0x40005400
 80019a0:	000186a0 	.word	0x000186a0

080019a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_I2C_MspInit+0x84>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d12b      	bne.n	8001a1e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <HAL_I2C_MspInit+0x88>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a17      	ldr	r2, [pc, #92]	; (8001a2c <HAL_I2C_MspInit+0x88>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_I2C_MspInit+0x88>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019e2:	23c0      	movs	r3, #192	; 0xc0
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e6:	2312      	movs	r3, #18
 80019e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019f2:	2304      	movs	r3, #4
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <HAL_I2C_MspInit+0x8c>)
 80019fe:	f002 fc9b 	bl	8004338 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_I2C_MspInit+0x88>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <HAL_I2C_MspInit+0x88>)
 8001a0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_I2C_MspInit+0x88>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a1e:	bf00      	nop
 8001a20:	3728      	adds	r7, #40	; 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40005400 	.word	0x40005400
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020400 	.word	0x40020400
 8001a34:	00000000 	.word	0x00000000

08001a38 <localize>:
float calculateNorm(Coordinate coord);
Coordinate negateCoordinate(Coordinate coord);

// USER CODE ======================================================================================

void localize(Coordinate *inputs, Coordinate *outputs, Coordinate *origin, float *angle) {
 8001a38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a3c:	b0a2      	sub	sp, #136	; 0x88
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	603b      	str	r3, [r7, #0]
	Coordinate point1 = inputs[0];
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a52:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point2 = inputs[1];
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a5c:	3208      	adds	r2, #8
 8001a5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a62:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point3 = inputs[2];
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a6c:	3210      	adds	r2, #16
 8001a6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a72:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate vectA = subtractCoordinates(point2, point1);
 8001a76:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8001a7a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001a7e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001a82:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a86:	eeb0 1a46 	vmov.f32	s2, s12
 8001a8a:	eef0 1a66 	vmov.f32	s3, s13
 8001a8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a92:	eef0 0a67 	vmov.f32	s1, s15
 8001a96:	f000 fbc7 	bl	8002228 <subtractCoordinates>
 8001a9a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a9e:	eef0 7a60 	vmov.f32	s15, s1
 8001aa2:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8001aa6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	Coordinate vectB = subtractCoordinates(point3, point2);
 8001aaa:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8001aae:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001ab2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ab6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001aba:	eeb0 1a46 	vmov.f32	s2, s12
 8001abe:	eef0 1a66 	vmov.f32	s3, s13
 8001ac2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac6:	eef0 0a67 	vmov.f32	s1, s15
 8001aca:	f000 fbad 	bl	8002228 <subtractCoordinates>
 8001ace:	eeb0 7a40 	vmov.f32	s14, s0
 8001ad2:	eef0 7a60 	vmov.f32	s15, s1
 8001ad6:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8001ada:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	Coordinate vectC = subtractCoordinates(point3, point1);
 8001ade:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8001ae2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001ae6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001aea:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001aee:	eeb0 1a46 	vmov.f32	s2, s12
 8001af2:	eef0 1a66 	vmov.f32	s3, s13
 8001af6:	eeb0 0a47 	vmov.f32	s0, s14
 8001afa:	eef0 0a67 	vmov.f32	s1, s15
 8001afe:	f000 fb93 	bl	8002228 <subtractCoordinates>
 8001b02:	eeb0 7a40 	vmov.f32	s14, s0
 8001b06:	eef0 7a60 	vmov.f32	s15, s1
 8001b0a:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8001b0e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float lenA = calculateNorm(vectA);
 8001b12:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001b16:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001b1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b1e:	eef0 0a67 	vmov.f32	s1, s15
 8001b22:	f000 fbbb 	bl	800229c <calculateNorm>
 8001b26:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
	float lenB = calculateNorm(vectB);
 8001b2a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001b2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b32:	eeb0 0a47 	vmov.f32	s0, s14
 8001b36:	eef0 0a67 	vmov.f32	s1, s15
 8001b3a:	f000 fbaf 	bl	800229c <calculateNorm>
 8001b3e:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	float lenC = calculateNorm(vectC);
 8001b42:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001b46:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b4e:	eef0 0a67 	vmov.f32	s1, s15
 8001b52:	f000 fba3 	bl	800229c <calculateNorm>
 8001b56:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	Coordinate vector1;
	Coordinate vector2;

	if (lenA < lenB && lenB < lenC && lenA < lenC) {
 8001b5a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001b5e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6a:	d534      	bpl.n	8001bd6 <localize+0x19e>
 8001b6c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001b70:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001b74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7c:	d52b      	bpl.n	8001bd6 <localize+0x19e>
 8001b7e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001b82:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001b86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	d522      	bpl.n	8001bd6 <localize+0x19e>
		// CASE 1
		*origin = point2;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	461a      	mov	r2, r3
 8001b94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b9c:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectB;
 8001ba0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ba4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001ba8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bac:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = negateCoordinate(vectA);
 8001bb0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001bb4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001bb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bbc:	eef0 0a67 	vmov.f32	s1, s15
 8001bc0:	f000 fb9f 	bl	8002302 <negateCoordinate>
 8001bc4:	eeb0 7a40 	vmov.f32	s14, s0
 8001bc8:	eef0 7a60 	vmov.f32	s15, s1
 8001bcc:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8001bd0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8001bd4:	e134      	b.n	8001e40 <localize+0x408>
	} else if (lenC < lenB && lenB < lenA && lenC < lenA) {
 8001bd6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001bda:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001bde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be6:	d53e      	bpl.n	8001c66 <localize+0x22e>
 8001be8:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001bec:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001bf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf8:	d535      	bpl.n	8001c66 <localize+0x22e>
 8001bfa:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001bfe:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	d52c      	bpl.n	8001c66 <localize+0x22e>
		// CASE 2
		*origin = point3;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c18:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectB);
 8001c1c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001c20:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c24:	eeb0 0a47 	vmov.f32	s0, s14
 8001c28:	eef0 0a67 	vmov.f32	s1, s15
 8001c2c:	f000 fb69 	bl	8002302 <negateCoordinate>
 8001c30:	eeb0 7a40 	vmov.f32	s14, s0
 8001c34:	eef0 7a60 	vmov.f32	s15, s1
 8001c38:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8001c3c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectC);
 8001c40:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001c44:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c48:	eeb0 0a47 	vmov.f32	s0, s14
 8001c4c:	eef0 0a67 	vmov.f32	s1, s15
 8001c50:	f000 fb57 	bl	8002302 <negateCoordinate>
 8001c54:	eeb0 7a40 	vmov.f32	s14, s0
 8001c58:	eef0 7a60 	vmov.f32	s15, s1
 8001c5c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8001c60:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8001c64:	e0ec      	b.n	8001e40 <localize+0x408>
	} else if (lenA < lenC && lenC < lenB && lenA < lenB) {
 8001c66:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001c6a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c76:	d52a      	bpl.n	8001cce <localize+0x296>
 8001c78:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001c7c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c88:	d521      	bpl.n	8001cce <localize+0x296>
 8001c8a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001c8e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9a:	d518      	bpl.n	8001cce <localize+0x296>
		// CASE 3
		*origin = point1;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ca4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ca8:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectC;
 8001cac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cb0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cb8:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectA;
 8001cbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001cc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cc8:	e883 0003 	stmia.w	r3, {r0, r1}
 8001ccc:	e0b8      	b.n	8001e40 <localize+0x408>
	} else if (lenC < lenA && lenA < lenB && lenC < lenB) {
 8001cce:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001cd2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001cd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	d52a      	bpl.n	8001d36 <localize+0x2fe>
 8001ce0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001ce4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001ce8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf0:	d521      	bpl.n	8001d36 <localize+0x2fe>
 8001cf2:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001cf6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001cfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d02:	d518      	bpl.n	8001d36 <localize+0x2fe>
		// CASE 4
		*origin = point1;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	461a      	mov	r2, r3
 8001d08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d10:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectA;
 8001d14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d18:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001d1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d20:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectC;
 8001d24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d30:	e883 0003 	stmia.w	r3, {r0, r1}
 8001d34:	e084      	b.n	8001e40 <localize+0x408>
	} else if (lenB < lenC && lenC < lenA && lenB < lenA) {
 8001d36:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001d3a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001d3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	d53e      	bpl.n	8001dc6 <localize+0x38e>
 8001d48:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001d4c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001d50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d58:	d535      	bpl.n	8001dc6 <localize+0x38e>
 8001d5a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001d5e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001d62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	d52c      	bpl.n	8001dc6 <localize+0x38e>
		// CASE 5
		*origin = point3;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d78:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectC);
 8001d7c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001d80:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d84:	eeb0 0a47 	vmov.f32	s0, s14
 8001d88:	eef0 0a67 	vmov.f32	s1, s15
 8001d8c:	f000 fab9 	bl	8002302 <negateCoordinate>
 8001d90:	eeb0 7a40 	vmov.f32	s14, s0
 8001d94:	eef0 7a60 	vmov.f32	s15, s1
 8001d98:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8001d9c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectB);
 8001da0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001da4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001da8:	eeb0 0a47 	vmov.f32	s0, s14
 8001dac:	eef0 0a67 	vmov.f32	s1, s15
 8001db0:	f000 faa7 	bl	8002302 <negateCoordinate>
 8001db4:	eeb0 7a40 	vmov.f32	s14, s0
 8001db8:	eef0 7a60 	vmov.f32	s15, s1
 8001dbc:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8001dc0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8001dc4:	e03c      	b.n	8001e40 <localize+0x408>
	} else if (lenB < lenA && lenA < lenC && lenB < lenC) {
 8001dc6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001dca:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	d533      	bpl.n	8001e40 <localize+0x408>
 8001dd8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001ddc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001de0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de8:	d52a      	bpl.n	8001e40 <localize+0x408>
 8001dea:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001dee:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001df2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfa:	d521      	bpl.n	8001e40 <localize+0x408>
		// CASE 6
		*origin = point2;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e08:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectA);
 8001e0c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001e10:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001e14:	eeb0 0a47 	vmov.f32	s0, s14
 8001e18:	eef0 0a67 	vmov.f32	s1, s15
 8001e1c:	f000 fa71 	bl	8002302 <negateCoordinate>
 8001e20:	eeb0 7a40 	vmov.f32	s14, s0
 8001e24:	eef0 7a60 	vmov.f32	s15, s1
 8001e28:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8001e2c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = vectB;
 8001e30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e34:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e3c:	e883 0003 	stmia.w	r3, {r0, r1}
	}

	// calculate vector angle
	if (vector1.x == 0) {
 8001e40:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4c:	d10e      	bne.n	8001e6c <localize+0x434>
		if (vector1.y > 0) {
 8001e4e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5a:	dd03      	ble.n	8001e64 <localize+0x42c>
			*angle = M_PI / 2.0;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4a72      	ldr	r2, [pc, #456]	; (8002028 <localize+0x5f0>)
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	e092      	b.n	8001f8a <localize+0x552>
		} else {
			*angle = 1.5 * M_PI;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4a71      	ldr	r2, [pc, #452]	; (800202c <localize+0x5f4>)
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e08e      	b.n	8001f8a <localize+0x552>
		}
	} else if (vector1.y == 0) {
 8001e6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e70:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e78:	d10f      	bne.n	8001e9a <localize+0x462>
		if (vector1.x >= 0) {
 8001e7a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e86:	db04      	blt.n	8001e92 <localize+0x45a>
			*angle = 0;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e07b      	b.n	8001f8a <localize+0x552>
		} else {
			*angle = M_PI;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	4a66      	ldr	r2, [pc, #408]	; (8002030 <localize+0x5f8>)
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e077      	b.n	8001f8a <localize+0x552>
		}
	} else {
		*angle = fabs(atan(vector1.y / vector1.x));
 8001e9a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001e9e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ea2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ea6:	ee16 0a90 	vmov	r0, s13
 8001eaa:	f7fe fb55 	bl	8000558 <__aeabi_f2d>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	ec43 2b10 	vmov	d0, r2, r3
 8001eb6:	f00a fe57 	bl	800cb68 <atan>
 8001eba:	ec53 2b10 	vmov	r2, r3, d0
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f7fe fe99 	bl	8000bf8 <__aeabi_d2f>
 8001ec6:	ee07 0a90 	vmov	s15, r0
 8001eca:	eef0 7ae7 	vabs.f32	s15, s15
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	edc3 7a00 	vstr	s15, [r3]
		if (vector1.x < 0 && vector1.y < 0) {
 8001ed4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee0:	d51a      	bpl.n	8001f18 <localize+0x4e0>
 8001ee2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ee6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eee:	d513      	bpl.n	8001f18 <localize+0x4e0>
			*angle = M_PI + *angle;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb2f 	bl	8000558 <__aeabi_f2d>
 8001efa:	a347      	add	r3, pc, #284	; (adr r3, 8002018 <localize+0x5e0>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe f9cc 	bl	800029c <__adddf3>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f7fe fe74 	bl	8000bf8 <__aeabi_d2f>
 8001f10:	4602      	mov	r2, r0
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e038      	b.n	8001f8a <localize+0x552>
		} else if (vector1.x < 0) {
 8001f18:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f24:	d515      	bpl.n	8001f52 <localize+0x51a>
			*angle = M_PI - *angle;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fb14 	bl	8000558 <__aeabi_f2d>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	a138      	add	r1, pc, #224	; (adr r1, 8002018 <localize+0x5e0>)
 8001f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f3a:	f7fe f9ad 	bl	8000298 <__aeabi_dsub>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	f7fe fe57 	bl	8000bf8 <__aeabi_d2f>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	e01b      	b.n	8001f8a <localize+0x552>
		} else if (vector1.y < 0) {
 8001f52:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5e:	d514      	bpl.n	8001f8a <localize+0x552>
			*angle = 2.0 * M_PI - *angle;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe faf7 	bl	8000558 <__aeabi_f2d>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	a12c      	add	r1, pc, #176	; (adr r1, 8002020 <localize+0x5e8>)
 8001f70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f74:	f7fe f990 	bl	8000298 <__aeabi_dsub>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7fe fe3a 	bl	8000bf8 <__aeabi_d2f>
 8001f84:	4602      	mov	r2, r0
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	601a      	str	r2, [r3, #0]
		}
	}

	// calculate for matrix directions
	float dir = vector1.x * vector2.y - vector1.y * vector2.x;
 8001f8a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f8e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f96:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001f9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	if (dir < 0) {
 8001faa:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001fae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb6:	d516      	bpl.n	8001fe6 <localize+0x5ae>
		*angle = *angle + M_PI;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe facb 	bl	8000558 <__aeabi_f2d>
 8001fc2:	a315      	add	r3, pc, #84	; (adr r3, 8002018 <localize+0x5e0>)
 8001fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc8:	f7fe f968 	bl	800029c <__adddf3>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f7fe fe10 	bl	8000bf8 <__aeabi_d2f>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	601a      	str	r2, [r3, #0]
		dir = -1.0;
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <localize+0x5fc>)
 8001fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001fe4:	e003      	b.n	8001fee <localize+0x5b6>
	} else {
		dir = 1.0;
 8001fe6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	}

	// create 9 points
	float X[] = { 10.0, 30.0, 50.0 };
 8001fee:	4a12      	ldr	r2, [pc, #72]	; (8002038 <localize+0x600>)
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ff6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float Y[] = { 10.0, 25.0, 40.0 };
 8001ffa:	4a10      	ldr	r2, [pc, #64]	; (800203c <localize+0x604>)
 8001ffc:	f107 0310 	add.w	r3, r7, #16
 8002000:	ca07      	ldmia	r2, {r0, r1, r2}
 8002002:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < 3; i++) {
 8002006:	2300      	movs	r3, #0
 8002008:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800200c:	e0e1      	b.n	80021d2 <localize+0x79a>
		for (int j = 0; j < 3; j++) {
 800200e:	2300      	movs	r3, #0
 8002010:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002012:	e0d5      	b.n	80021c0 <localize+0x788>
 8002014:	f3af 8000 	nop.w
 8002018:	54442d18 	.word	0x54442d18
 800201c:	400921fb 	.word	0x400921fb
 8002020:	54442d18 	.word	0x54442d18
 8002024:	401921fb 	.word	0x401921fb
 8002028:	3fc90fdb 	.word	0x3fc90fdb
 800202c:	4096cbe4 	.word	0x4096cbe4
 8002030:	40490fdb 	.word	0x40490fdb
 8002034:	bf800000 	.word	0xbf800000
 8002038:	0800e1c8 	.word	0x0800e1c8
 800203c:	0800e1d4 	.word	0x0800e1d4
			double angleValue = (double) (*angle);  // Dereference and convert to double
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fa87 	bl	8000558 <__aeabi_f2d>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			outputs[i * 3 + j].x = origin->x + X[i] * dir * cos(angleValue) - Y[j] * sin(angleValue);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fa7e 	bl	8000558 <__aeabi_f2d>
 800205c:	4604      	mov	r4, r0
 800205e:	460d      	mov	r5, r1
 8002060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	3388      	adds	r3, #136	; 0x88
 8002068:	443b      	add	r3, r7
 800206a:	3b6c      	subs	r3, #108	; 0x6c
 800206c:	ed93 7a00 	vldr	s14, [r3]
 8002070:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002078:	ee17 0a90 	vmov	r0, s15
 800207c:	f7fe fa6c 	bl	8000558 <__aeabi_f2d>
 8002080:	4680      	mov	r8, r0
 8002082:	4689      	mov	r9, r1
 8002084:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002088:	f00a ff0e 	bl	800cea8 <cos>
 800208c:	ec53 2b10 	vmov	r2, r3, d0
 8002090:	4640      	mov	r0, r8
 8002092:	4649      	mov	r1, r9
 8002094:	f7fe fab8 	bl	8000608 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4620      	mov	r0, r4
 800209e:	4629      	mov	r1, r5
 80020a0:	f7fe f8fc 	bl	800029c <__adddf3>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4690      	mov	r8, r2
 80020aa:	4699      	mov	r9, r3
 80020ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	3388      	adds	r3, #136	; 0x88
 80020b2:	443b      	add	r3, r7
 80020b4:	3b78      	subs	r3, #120	; 0x78
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa4d 	bl	8000558 <__aeabi_f2d>
 80020be:	4604      	mov	r4, r0
 80020c0:	460d      	mov	r5, r1
 80020c2:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80020c6:	f00a ff4f 	bl	800cf68 <sin>
 80020ca:	ec53 2b10 	vmov	r2, r3, d0
 80020ce:	4620      	mov	r0, r4
 80020d0:	4629      	mov	r1, r5
 80020d2:	f7fe fa99 	bl	8000608 <__aeabi_dmul>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4640      	mov	r0, r8
 80020dc:	4649      	mov	r1, r9
 80020de:	f7fe f8db 	bl	8000298 <__aeabi_dsub>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	441a      	add	r2, r3
 80020f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	18d4      	adds	r4, r2, r3
 80020fe:	f7fe fd7b 	bl	8000bf8 <__aeabi_d2f>
 8002102:	4603      	mov	r3, r0
 8002104:	6023      	str	r3, [r4, #0]
			outputs[i * 3 + j].y = origin->y + X[i] * dir * sin(angleValue) + Y[j] * cos(angleValue);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fa24 	bl	8000558 <__aeabi_f2d>
 8002110:	4604      	mov	r4, r0
 8002112:	460d      	mov	r5, r1
 8002114:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	3388      	adds	r3, #136	; 0x88
 800211c:	443b      	add	r3, r7
 800211e:	3b6c      	subs	r3, #108	; 0x6c
 8002120:	ed93 7a00 	vldr	s14, [r3]
 8002124:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212c:	ee17 0a90 	vmov	r0, s15
 8002130:	f7fe fa12 	bl	8000558 <__aeabi_f2d>
 8002134:	4680      	mov	r8, r0
 8002136:	4689      	mov	r9, r1
 8002138:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800213c:	f00a ff14 	bl	800cf68 <sin>
 8002140:	ec53 2b10 	vmov	r2, r3, d0
 8002144:	4640      	mov	r0, r8
 8002146:	4649      	mov	r1, r9
 8002148:	f7fe fa5e 	bl	8000608 <__aeabi_dmul>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4620      	mov	r0, r4
 8002152:	4629      	mov	r1, r5
 8002154:	f7fe f8a2 	bl	800029c <__adddf3>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4690      	mov	r8, r2
 800215e:	4699      	mov	r9, r3
 8002160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	3388      	adds	r3, #136	; 0x88
 8002166:	443b      	add	r3, r7
 8002168:	3b78      	subs	r3, #120	; 0x78
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe f9f3 	bl	8000558 <__aeabi_f2d>
 8002172:	4604      	mov	r4, r0
 8002174:	460d      	mov	r5, r1
 8002176:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800217a:	f00a fe95 	bl	800cea8 <cos>
 800217e:	ec53 2b10 	vmov	r2, r3, d0
 8002182:	4620      	mov	r0, r4
 8002184:	4629      	mov	r1, r5
 8002186:	f7fe fa3f 	bl	8000608 <__aeabi_dmul>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4640      	mov	r0, r8
 8002190:	4649      	mov	r1, r9
 8002192:	f7fe f883 	bl	800029c <__adddf3>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80021a2:	4613      	mov	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	441a      	add	r2, r3
 80021a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	18d4      	adds	r4, r2, r3
 80021b2:	f7fe fd21 	bl	8000bf8 <__aeabi_d2f>
 80021b6:	4603      	mov	r3, r0
 80021b8:	6063      	str	r3, [r4, #4]
		for (int j = 0; j < 3; j++) {
 80021ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021bc:	3301      	adds	r3, #1
 80021be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	f77f af3c 	ble.w	8002040 <localize+0x608>
	for (int i = 0; i < 3; i++) {
 80021c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021cc:	3301      	adds	r3, #1
 80021ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	f77f af19 	ble.w	800200e <localize+0x5d6>
		}
	}

	// dirty fix for angle error
	if (dir < 0){
 80021dc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80021e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	d400      	bmi.n	80021ec <localize+0x7b4>
		*angle = *angle - M_PI;
	}
}
 80021ea:	e012      	b.n	8002212 <localize+0x7da>
		*angle = *angle - M_PI;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f9b1 	bl	8000558 <__aeabi_f2d>
 80021f6:	a30a      	add	r3, pc, #40	; (adr r3, 8002220 <localize+0x7e8>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	f7fe f84c 	bl	8000298 <__aeabi_dsub>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	f7fe fcf6 	bl	8000bf8 <__aeabi_d2f>
 800220c:	4602      	mov	r2, r0
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	601a      	str	r2, [r3, #0]
}
 8002212:	bf00      	nop
 8002214:	3788      	adds	r7, #136	; 0x88
 8002216:	46bd      	mov	sp, r7
 8002218:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800221c:	f3af 8000 	nop.w
 8002220:	54442d18 	.word	0x54442d18
 8002224:	400921fb 	.word	0x400921fb

08002228 <subtractCoordinates>:

Coordinate subtractCoordinates(Coordinate coord1, Coordinate coord2) {
 8002228:	b480      	push	{r7}
 800222a:	b08b      	sub	sp, #44	; 0x2c
 800222c:	af00      	add	r7, sp, #0
 800222e:	eeb0 6a40 	vmov.f32	s12, s0
 8002232:	eef0 6a60 	vmov.f32	s13, s1
 8002236:	eeb0 7a41 	vmov.f32	s14, s2
 800223a:	eef0 7a61 	vmov.f32	s15, s3
 800223e:	ed87 6a04 	vstr	s12, [r7, #16]
 8002242:	edc7 6a05 	vstr	s13, [r7, #20]
 8002246:	ed87 7a02 	vstr	s14, [r7, #8]
 800224a:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = coord1.x - coord2.x;
 800224e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002252:	edd7 7a02 	vldr	s15, [r7, #8]
 8002256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800225a:	edc7 7a06 	vstr	s15, [r7, #24]
	result.y = coord1.y - coord2.y;
 800225e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002262:	edd7 7a03 	vldr	s15, [r7, #12]
 8002266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800226a:	edc7 7a07 	vstr	s15, [r7, #28]
	return result;
 800226e:	f107 0320 	add.w	r3, r7, #32
 8002272:	f107 0218 	add.w	r2, r7, #24
 8002276:	e892 0003 	ldmia.w	r2, {r0, r1}
 800227a:	e883 0003 	stmia.w	r3, {r0, r1}
 800227e:	6a3a      	ldr	r2, [r7, #32]
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	ee07 2a10 	vmov	s14, r2
 8002286:	ee07 3a90 	vmov	s15, r3
}
 800228a:	eeb0 0a47 	vmov.f32	s0, s14
 800228e:	eef0 0a67 	vmov.f32	s1, s15
 8002292:	372c      	adds	r7, #44	; 0x2c
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <calculateNorm>:

float calculateNorm(Coordinate coord) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	eeb0 7a40 	vmov.f32	s14, s0
 80022a6:	eef0 7a60 	vmov.f32	s15, s1
 80022aa:	ed87 7a00 	vstr	s14, [r7]
 80022ae:	edc7 7a01 	vstr	s15, [r7, #4]
	float norm = sqrt(coord.x * coord.x + coord.y * coord.y);
 80022b2:	ed97 7a00 	vldr	s14, [r7]
 80022b6:	edd7 7a00 	vldr	s15, [r7]
 80022ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022be:	edd7 6a01 	vldr	s13, [r7, #4]
 80022c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80022c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ce:	ee17 0a90 	vmov	r0, s15
 80022d2:	f7fe f941 	bl	8000558 <__aeabi_f2d>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	ec43 2b10 	vmov	d0, r2, r3
 80022de:	f00a fe9b 	bl	800d018 <sqrt>
 80022e2:	ec53 2b10 	vmov	r2, r3, d0
 80022e6:	4610      	mov	r0, r2
 80022e8:	4619      	mov	r1, r3
 80022ea:	f7fe fc85 	bl	8000bf8 <__aeabi_d2f>
 80022ee:	4603      	mov	r3, r0
 80022f0:	60fb      	str	r3, [r7, #12]
	return norm;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	ee07 3a90 	vmov	s15, r3
}
 80022f8:	eeb0 0a67 	vmov.f32	s0, s15
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <negateCoordinate>:

Coordinate negateCoordinate(Coordinate coord) {
 8002302:	b480      	push	{r7}
 8002304:	b089      	sub	sp, #36	; 0x24
 8002306:	af00      	add	r7, sp, #0
 8002308:	eeb0 7a40 	vmov.f32	s14, s0
 800230c:	eef0 7a60 	vmov.f32	s15, s1
 8002310:	ed87 7a02 	vstr	s14, [r7, #8]
 8002314:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = -coord.x;
 8002318:	edd7 7a02 	vldr	s15, [r7, #8]
 800231c:	eef1 7a67 	vneg.f32	s15, s15
 8002320:	edc7 7a04 	vstr	s15, [r7, #16]
	result.y = -coord.y;
 8002324:	edd7 7a03 	vldr	s15, [r7, #12]
 8002328:	eef1 7a67 	vneg.f32	s15, s15
 800232c:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 8002330:	f107 0318 	add.w	r3, r7, #24
 8002334:	f107 0210 	add.w	r2, r7, #16
 8002338:	e892 0003 	ldmia.w	r2, {r0, r1}
 800233c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	ee07 2a10 	vmov	s14, r2
 8002348:	ee07 3a90 	vmov	s15, r3
}
 800234c:	eeb0 0a47 	vmov.f32	s0, s14
 8002350:	eef0 0a67 	vmov.f32	s1, s15
 8002354:	3724      	adds	r7, #36	; 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <modbus_heartbeat_handler>:
void modbus_heartbeat_handler(u16u8_t *registerFrame, MB *variables);
void modbus_data_sync(u16u8_t *registerFrame, MB *variables);

// USER CODE ======================================================================================

void modbus_heartbeat_handler(u16u8_t *registerFrame, MB *variables) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
	static int8_t fail = 0;
	static uint32_t timestamp = 0;
	if (HAL_GetTick() >= timestamp) {
 800236a:	f001 f847 	bl	80033fc <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <modbus_heartbeat_handler+0x7c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d32c      	bcc.n	80023d2 <modbus_heartbeat_handler+0x72>
		timestamp = HAL_GetTick() + 200;
 8002378:	f001 f840 	bl	80033fc <HAL_GetTick>
 800237c:	4603      	mov	r3, r0
 800237e:	33c8      	adds	r3, #200	; 0xc8
 8002380:	4a16      	ldr	r2, [pc, #88]	; (80023dc <modbus_heartbeat_handler+0x7c>)
 8002382:	6013      	str	r3, [r2, #0]

		// check if the base system send heartbeat
		if (registerFrame[0].U16 == 18537) {
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	f644 0269 	movw	r2, #18537	; 0x4869
 800238c:	4293      	cmp	r3, r2
 800238e:	d106      	bne.n	800239e <modbus_heartbeat_handler+0x3e>
			// success
			variables->heartbeat = 1;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2201      	movs	r2, #1
 8002394:	849a      	strh	r2, [r3, #36]	; 0x24
			fail = 0;
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <modbus_heartbeat_handler+0x80>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	e015      	b.n	80023ca <modbus_heartbeat_handler+0x6a>
		} else {
			// fail, count failure
			if (fail < 126) {
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <modbus_heartbeat_handler+0x80>)
 80023a0:	f993 3000 	ldrsb.w	r3, [r3]
 80023a4:	2b7d      	cmp	r3, #125	; 0x7d
 80023a6:	dc08      	bgt.n	80023ba <modbus_heartbeat_handler+0x5a>
				fail++;
 80023a8:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <modbus_heartbeat_handler+0x80>)
 80023aa:	f993 3000 	ldrsb.w	r3, [r3]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	3301      	adds	r3, #1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	b25a      	sxtb	r2, r3
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <modbus_heartbeat_handler+0x80>)
 80023b8:	701a      	strb	r2, [r3, #0]
			}
			// if fail is too high then system is disconnected
			if (fail > 9) {
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <modbus_heartbeat_handler+0x80>)
 80023bc:	f993 3000 	ldrsb.w	r3, [r3]
 80023c0:	2b09      	cmp	r3, #9
 80023c2:	dd02      	ble.n	80023ca <modbus_heartbeat_handler+0x6a>
				variables->heartbeat = 0;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2200      	movs	r2, #0
 80023c8:	849a      	strh	r2, [r3, #36]	; 0x24
			}
		}

		// set heartbeat for base system to see
		registerFrame[0].U16 = 22881;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f645 1261 	movw	r2, #22881	; 0x5961
 80023d0:	801a      	strh	r2, [r3, #0]
	}
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000a9c 	.word	0x20000a9c
 80023e0:	20000aa0 	.word	0x20000aa0

080023e4 <modbus_data_sync>:

void modbus_data_sync(u16u8_t *registerFrame, MB *variables) {
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
	// report data back to base system
	registerFrame[0x10].U16 = variables->y_moving_status;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3320      	adds	r3, #32
 80023f8:	b292      	uxth	r2, r2
 80023fa:	801a      	strh	r2, [r3, #0]
	registerFrame[0x11].U16 = variables->y_actual_position;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3322      	adds	r3, #34	; 0x22
 8002406:	b292      	uxth	r2, r2
 8002408:	801a      	strh	r2, [r3, #0]
	registerFrame[0x12].U16 = variables->y_actual_speed;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3324      	adds	r3, #36	; 0x24
 8002414:	b292      	uxth	r2, r2
 8002416:	801a      	strh	r2, [r3, #0]
	registerFrame[0x13].U16 = variables->y_actual_acceleration;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3326      	adds	r3, #38	; 0x26
 8002422:	b292      	uxth	r2, r2
 8002424:	801a      	strh	r2, [r3, #0]
	registerFrame[0x20].U16 = variables->pick_tray_origin_x;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3340      	adds	r3, #64	; 0x40
 8002430:	b292      	uxth	r2, r2
 8002432:	801a      	strh	r2, [r3, #0]
	registerFrame[0x21].U16 = variables->pick_tray_origin_y;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3342      	adds	r3, #66	; 0x42
 800243e:	b292      	uxth	r2, r2
 8002440:	801a      	strh	r2, [r3, #0]
	registerFrame[0x22].U16 = variables->pick_tray_orientation;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3344      	adds	r3, #68	; 0x44
 800244c:	b292      	uxth	r2, r2
 800244e:	801a      	strh	r2, [r3, #0]
	registerFrame[0x23].U16 = variables->place_tray_origin_x;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3346      	adds	r3, #70	; 0x46
 800245a:	b292      	uxth	r2, r2
 800245c:	801a      	strh	r2, [r3, #0]
	registerFrame[0x24].U16 = variables->place_tray_origin_y;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3348      	adds	r3, #72	; 0x48
 8002468:	b292      	uxth	r2, r2
 800246a:	801a      	strh	r2, [r3, #0]
	registerFrame[0x25].U16 = variables->place_tray_orientation;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	334a      	adds	r3, #74	; 0x4a
 8002476:	b292      	uxth	r2, r2
 8002478:	801a      	strh	r2, [r3, #0]
	registerFrame[0x41].U16 = variables->x_target_position;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3382      	adds	r3, #130	; 0x82
 8002484:	b292      	uxth	r2, r2
 8002486:	801a      	strh	r2, [r3, #0]
	registerFrame[0x42].U16 = variables->x_target_speed;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3384      	adds	r3, #132	; 0x84
 8002492:	b292      	uxth	r2, r2
 8002494:	801a      	strh	r2, [r3, #0]
	registerFrame[0x43].U16 = variables->x_target_acceleration_time;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3386      	adds	r3, #134	; 0x86
 80024a0:	b292      	uxth	r2, r2
 80024a2:	801a      	strh	r2, [r3, #0]

	// get data from base system
	variables->goal_point_x = registerFrame[0x30].U16;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3360      	adds	r3, #96	; 0x60
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b21a      	sxth	r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	805a      	strh	r2, [r3, #2]
	variables->goal_point_y = registerFrame[0x31].U16;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3362      	adds	r3, #98	; 0x62
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	b21a      	sxth	r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	809a      	strh	r2, [r3, #4]
	variables->x_actual_position = registerFrame[0x44].U16;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3388      	adds	r3, #136	; 0x88
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	b21a      	sxth	r2, r3
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	80da      	strh	r2, [r3, #6]
	variables->x_actual_speed = registerFrame[0x45].U16;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	338a      	adds	r3, #138	; 0x8a
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b21a      	sxth	r2, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	811a      	strh	r2, [r3, #8]

	static int16_t base_system_status_master_temp;
	if (base_system_status_master_temp != registerFrame[0x01].U16) {
 80024d4:	4b3f      	ldr	r3, [pc, #252]	; (80025d4 <modbus_data_sync+0x1f0>)
 80024d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024da:	461a      	mov	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3302      	adds	r3, #2
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d00a      	beq.n	80024fc <modbus_data_sync+0x118>
		variables->base_system_status = registerFrame[0x01].U16;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3302      	adds	r3, #2
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	b21a      	sxth	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	801a      	strh	r2, [r3, #0]
		base_system_status_master_temp = variables->base_system_status;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024f8:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <modbus_data_sync+0x1f0>)
 80024fa:	801a      	strh	r2, [r3, #0]
	}

	// update read/write variable
	static int16_t end_effector_status_slave_temp;
	static int16_t end_effector_status_master_temp;
	if (end_effector_status_master_temp != registerFrame[0x02].U16) {
 80024fc:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <modbus_data_sync+0x1f4>)
 80024fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002502:	461a      	mov	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3304      	adds	r3, #4
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d010      	beq.n	8002530 <modbus_data_sync+0x14c>
		// there is an update from master
		variables->end_effector_status = registerFrame[0x02].U16;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3304      	adds	r3, #4
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	b21a      	sxth	r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	84da      	strh	r2, [r3, #38]	; 0x26
		end_effector_status_master_temp = variables->end_effector_status;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002520:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <modbus_data_sync+0x1f4>)
 8002522:	801a      	strh	r2, [r3, #0]
		end_effector_status_slave_temp = variables->end_effector_status;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800252a:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <modbus_data_sync+0x1f8>)
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	e018      	b.n	8002562 <modbus_data_sync+0x17e>
	} else if (end_effector_status_slave_temp != variables->end_effector_status) {
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002536:	4b29      	ldr	r3, [pc, #164]	; (80025dc <modbus_data_sync+0x1f8>)
 8002538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800253c:	429a      	cmp	r2, r3
 800253e:	d010      	beq.n	8002562 <modbus_data_sync+0x17e>
		// there is an update locally
		registerFrame[0x02].U16 = variables->end_effector_status;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3304      	adds	r3, #4
 800254a:	b292      	uxth	r2, r2
 800254c:	801a      	strh	r2, [r3, #0]
		end_effector_status_slave_temp = variables->end_effector_status;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002554:	4b21      	ldr	r3, [pc, #132]	; (80025dc <modbus_data_sync+0x1f8>)
 8002556:	801a      	strh	r2, [r3, #0]
		end_effector_status_master_temp = variables->end_effector_status;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800255e:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <modbus_data_sync+0x1f4>)
 8002560:	801a      	strh	r2, [r3, #0]
	}
	static int16_t x_moving_status_slave_temp;
	static int16_t x_moving_status_master_temp;
	if (x_moving_status_master_temp != registerFrame[0x40].U16) {
 8002562:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <modbus_data_sync+0x1fc>)
 8002564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002568:	461a      	mov	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3380      	adds	r3, #128	; 0x80
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d010      	beq.n	8002596 <modbus_data_sync+0x1b2>
		// there is an update from master
		variables->x_moving_status = registerFrame[0x40].U16;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3380      	adds	r3, #128	; 0x80
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b21a      	sxth	r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	851a      	strh	r2, [r3, #40]	; 0x28
		x_moving_status_master_temp = variables->x_moving_status;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <modbus_data_sync+0x1fc>)
 8002588:	801a      	strh	r2, [r3, #0]
		x_moving_status_slave_temp = variables->x_moving_status;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <modbus_data_sync+0x200>)
 8002592:	801a      	strh	r2, [r3, #0]
		// there is an update locally
		registerFrame[0x40].U16 = variables->x_moving_status;
		x_moving_status_slave_temp = variables->x_moving_status;
		x_moving_status_master_temp = variables->x_moving_status;
	}
}
 8002594:	e018      	b.n	80025c8 <modbus_data_sync+0x1e4>
	} else if (x_moving_status_slave_temp != variables->x_moving_status) {
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <modbus_data_sync+0x200>)
 800259e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d010      	beq.n	80025c8 <modbus_data_sync+0x1e4>
		registerFrame[0x40].U16 = variables->x_moving_status;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3380      	adds	r3, #128	; 0x80
 80025b0:	b292      	uxth	r2, r2
 80025b2:	801a      	strh	r2, [r3, #0]
		x_moving_status_slave_temp = variables->x_moving_status;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <modbus_data_sync+0x200>)
 80025bc:	801a      	strh	r2, [r3, #0]
		x_moving_status_master_temp = variables->x_moving_status;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <modbus_data_sync+0x1fc>)
 80025c6:	801a      	strh	r2, [r3, #0]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	20000aa2 	.word	0x20000aa2
 80025d8:	20000aa4 	.word	0x20000aa4
 80025dc:	20000aa6 	.word	0x20000aa6
 80025e0:	20000aa8 	.word	0x20000aa8
 80025e4:	20000aaa 	.word	0x20000aaa

080025e8 <main_logic>:
void end_effector_handler();
void end_effector_gripper(MB variables, uint8_t mode);	// 0 pick, 1 place

// USER CODE ======================================================================================

void main_logic(MB variables) {
 80025e8:	b084      	sub	sp, #16
 80025ea:	b5b0      	push	{r4, r5, r7, lr}
 80025ec:	b088      	sub	sp, #32
 80025ee:	af08      	add	r7, sp, #32
 80025f0:	f107 0410 	add.w	r4, r7, #16
 80025f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	end_effector_handler(variables);
 80025f8:	466c      	mov	r4, sp
 80025fa:	f107 0520 	add.w	r5, r7, #32
 80025fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002602:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002606:	c403      	stmia	r4!, {r0, r1}
 8002608:	8022      	strh	r2, [r4, #0]
 800260a:	f107 0310 	add.w	r3, r7, #16
 800260e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002610:	f000 f806 	bl	8002620 <end_effector_handler>
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800261c:	b004      	add	sp, #16
 800261e:	4770      	bx	lr

08002620 <end_effector_handler>:

void end_effector_handler(MB variables) {
 8002620:	b084      	sub	sp, #16
 8002622:	b5b0      	push	{r4, r5, r7, lr}
 8002624:	b088      	sub	sp, #32
 8002626:	af08      	add	r7, sp, #32
 8002628:	f107 0410 	add.w	r4, r7, #16
 800262c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		// laser off
		// TODO insert laser off command here
	}

	// handle base system pick/place
	if (variables.end_effector_status & 0b0100) {
 8002630:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002634:	b29b      	uxth	r3, r3
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b00      	cmp	r3, #0
 800263c:	d010      	beq.n	8002660 <end_effector_handler+0x40>
		// gripper pick
		end_effector_gripper(variables, 0);
 800263e:	2300      	movs	r3, #0
 8002640:	9307      	str	r3, [sp, #28]
 8002642:	466c      	mov	r4, sp
 8002644:	f107 0520 	add.w	r5, r7, #32
 8002648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800264a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800264c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002650:	c403      	stmia	r4!, {r0, r1}
 8002652:	8022      	strh	r2, [r4, #0]
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800265a:	f000 f81e 	bl	800269a <end_effector_gripper>
	} else if (variables.end_effector_status & 0b1000) {
		// gripper place
		end_effector_gripper(variables, 1);
	}
}
 800265e:	e016      	b.n	800268e <end_effector_handler+0x6e>
	} else if (variables.end_effector_status & 0b1000) {
 8002660:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002664:	b29b      	uxth	r3, r3
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00f      	beq.n	800268e <end_effector_handler+0x6e>
		end_effector_gripper(variables, 1);
 800266e:	2301      	movs	r3, #1
 8002670:	9307      	str	r3, [sp, #28]
 8002672:	466c      	mov	r4, sp
 8002674:	f107 0520 	add.w	r5, r7, #32
 8002678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800267a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800267c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002680:	c403      	stmia	r4!, {r0, r1}
 8002682:	8022      	strh	r2, [r4, #0]
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800268a:	f000 f806 	bl	800269a <end_effector_gripper>
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002696:	b004      	add	sp, #16
 8002698:	4770      	bx	lr

0800269a <end_effector_gripper>:

void end_effector_gripper(MB variables, uint8_t mode) {
 800269a:	b084      	sub	sp, #16
 800269c:	b490      	push	{r4, r7}
 800269e:	af00      	add	r7, sp, #0
 80026a0:	f107 0408 	add.w	r4, r7, #8
 80026a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if ((variables.end_effector_status & 0b0010) == 0) {
 80026a8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d01d      	beq.n	80026f2 <end_effector_gripper+0x58>
		return;
	}

	if (!mode) {
 80026b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10c      	bne.n	80026d8 <end_effector_gripper+0x3e>
		// pick
		variables.end_effector_status |= 0b0100;
 80026be:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	b21b      	sxth	r3, r3
 80026c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		// TODO insert I2C pick command here
		variables.end_effector_status &= 0b1011;
 80026ca:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80026ce:	f003 030b 	and.w	r3, r3, #11
 80026d2:	b21b      	sxth	r3, r3
 80026d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80026d6:	e00d      	b.n	80026f4 <end_effector_gripper+0x5a>
	} else {
		// place
		variables.end_effector_status |= 0b1000;
 80026d8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80026dc:	f043 0308 	orr.w	r3, r3, #8
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		// TODO insert I2C place command here
		variables.end_effector_status &= 0b0111;
 80026e4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	b21b      	sxth	r3, r3
 80026ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80026f0:	e000      	b.n	80026f4 <end_effector_gripper+0x5a>
		return;
 80026f2:	bf00      	nop
	}
}
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc90      	pop	{r4, r7}
 80026f8:	b004      	add	sp, #16
 80026fa:	4770      	bx	lr

080026fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80026fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af08      	add	r7, sp, #32
	/* USER CODE BEGIN 1 */

	MBvariables.x_target_acceleration_time = 1;
 8002702:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <main+0xec>)
 8002704:	2201      	movs	r2, #1
 8002706:	845a      	strh	r2, [r3, #34]	; 0x22
	MBvariables.x_target_speed = 3000;
 8002708:	4b37      	ldr	r3, [pc, #220]	; (80027e8 <main+0xec>)
 800270a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800270e:	841a      	strh	r2, [r3, #32]

	corners[0].x = -68.0;
 8002710:	4b36      	ldr	r3, [pc, #216]	; (80027ec <main+0xf0>)
 8002712:	4a37      	ldr	r2, [pc, #220]	; (80027f0 <main+0xf4>)
 8002714:	601a      	str	r2, [r3, #0]
	corners[0].y = 7.1;
 8002716:	4b35      	ldr	r3, [pc, #212]	; (80027ec <main+0xf0>)
 8002718:	4a36      	ldr	r2, [pc, #216]	; (80027f4 <main+0xf8>)
 800271a:	605a      	str	r2, [r3, #4]
	corners[1].x = -29.4;
 800271c:	4b33      	ldr	r3, [pc, #204]	; (80027ec <main+0xf0>)
 800271e:	4a36      	ldr	r2, [pc, #216]	; (80027f8 <main+0xfc>)
 8002720:	609a      	str	r2, [r3, #8]
	corners[1].y = 52.7;
 8002722:	4b32      	ldr	r3, [pc, #200]	; (80027ec <main+0xf0>)
 8002724:	4a35      	ldr	r2, [pc, #212]	; (80027fc <main+0x100>)
 8002726:	60da      	str	r2, [r3, #12]
	corners[2].x = 8.2;
 8002728:	4b30      	ldr	r3, [pc, #192]	; (80027ec <main+0xf0>)
 800272a:	4a35      	ldr	r2, [pc, #212]	; (8002800 <main+0x104>)
 800272c:	611a      	str	r2, [r3, #16]
	corners[2].y = 21.2;
 800272e:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <main+0xf0>)
 8002730:	4a34      	ldr	r2, [pc, #208]	; (8002804 <main+0x108>)
 8002732:	615a      	str	r2, [r3, #20]
	localize(corners, pick, &origin, &angle);
 8002734:	4b34      	ldr	r3, [pc, #208]	; (8002808 <main+0x10c>)
 8002736:	4a35      	ldr	r2, [pc, #212]	; (800280c <main+0x110>)
 8002738:	4935      	ldr	r1, [pc, #212]	; (8002810 <main+0x114>)
 800273a:	482c      	ldr	r0, [pc, #176]	; (80027ec <main+0xf0>)
 800273c:	f7ff f97c 	bl	8001a38 <localize>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002740:	f000 fdf6 	bl	8003330 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002744:	f000 f876 	bl	8002834 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002748:	f7ff f872 	bl	8001830 <MX_GPIO_Init>
	MX_DMA_Init();
 800274c:	f7ff f850 	bl	80017f0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002750:	f000 fce2 	bl	8003118 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8002754:	f7ff f8f8 	bl	8001948 <MX_I2C1_Init>
	MX_TIM1_Init();
 8002758:	f000 fa46 	bl	8002be8 <MX_TIM1_Init>
	MX_TIM2_Init();
 800275c:	f000 fae4 	bl	8002d28 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8002760:	f000 fcb0 	bl	80030c4 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8002764:	f7fe ffae 	bl	80016c4 <MX_ADC1_Init>
	MX_TIM9_Init();
 8002768:	f000 fb32 	bl	8002dd0 <MX_TIM9_Init>
	MX_TIM11_Init();
 800276c:	f000 fb6a 	bl	8002e44 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */

	// start timer 1 in PWM for motor
	HAL_TIM_Base_Start(&htim1);
 8002770:	4828      	ldr	r0, [pc, #160]	; (8002814 <main+0x118>)
 8002772:	f002 fdb7 	bl	80052e4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002776:	2100      	movs	r1, #0
 8002778:	4826      	ldr	r0, [pc, #152]	; (8002814 <main+0x118>)
 800277a:	f002 ff3b 	bl	80055f4 <HAL_TIM_PWM_Start>

	// Start timer in encoder mode
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800277e:	2104      	movs	r1, #4
 8002780:	4825      	ldr	r0, [pc, #148]	; (8002818 <main+0x11c>)
 8002782:	f003 f969 	bl	8005a58 <HAL_TIM_Encoder_Start>

	// Timer 9 Timer Interrupt (1000Hz)
	HAL_TIM_Base_Start_IT(&htim9);
 8002786:	4825      	ldr	r0, [pc, #148]	; (800281c <main+0x120>)
 8002788:	f002 fe06 	bl	8005398 <HAL_TIM_Base_Start_IT>

	// Initialize modbus
	hmodbus.huart = &huart2;
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <main+0x124>)
 800278e:	4a25      	ldr	r2, [pc, #148]	; (8002824 <main+0x128>)
 8002790:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 8002792:	4b23      	ldr	r3, [pc, #140]	; (8002820 <main+0x124>)
 8002794:	4a24      	ldr	r2, [pc, #144]	; (8002828 <main+0x12c>)
 8002796:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8002798:	4b21      	ldr	r3, [pc, #132]	; (8002820 <main+0x124>)
 800279a:	2215      	movs	r2, #21
 800279c:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <main+0x124>)
 80027a0:	2246      	movs	r2, #70	; 0x46
 80027a2:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, MBregisterFrame);
 80027a4:	4921      	ldr	r1, [pc, #132]	; (800282c <main+0x130>)
 80027a6:	481e      	ldr	r0, [pc, #120]	; (8002820 <main+0x124>)
 80027a8:	f7fe fc80 	bl	80010ac <Modbus_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Modbus_Protocal_Worker();
 80027ac:	f7fe fd0a 	bl	80011c4 <Modbus_Protocal_Worker>
		modbus_heartbeat_handler(MBregisterFrame, &MBvariables);
 80027b0:	490d      	ldr	r1, [pc, #52]	; (80027e8 <main+0xec>)
 80027b2:	481e      	ldr	r0, [pc, #120]	; (800282c <main+0x130>)
 80027b4:	f7ff fdd4 	bl	8002360 <modbus_heartbeat_handler>
		modbus_data_sync(MBregisterFrame, &MBvariables);
 80027b8:	490b      	ldr	r1, [pc, #44]	; (80027e8 <main+0xec>)
 80027ba:	481c      	ldr	r0, [pc, #112]	; (800282c <main+0x130>)
 80027bc:	f7ff fe12 	bl	80023e4 <modbus_data_sync>
		QEIReadRaw = getRawPosition();
 80027c0:	f000 f8a0 	bl	8002904 <getRawPosition>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4a1a      	ldr	r2, [pc, #104]	; (8002830 <main+0x134>)
 80027c8:	6013      	str	r3, [r2, #0]
		main_logic(MBvariables);
 80027ca:	4e07      	ldr	r6, [pc, #28]	; (80027e8 <main+0xec>)
 80027cc:	466c      	mov	r4, sp
 80027ce:	f106 0510 	add.w	r5, r6, #16
 80027d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027da:	c403      	stmia	r4!, {r0, r1}
 80027dc:	8022      	strh	r2, [r4, #0]
 80027de:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80027e2:	f7ff ff01 	bl	80025e8 <main_logic>
		Modbus_Protocal_Worker();
 80027e6:	e7e1      	b.n	80027ac <main+0xb0>
 80027e8:	20000a70 	.word	0x20000a70
 80027ec:	200004a0 	.word	0x200004a0
 80027f0:	c2880000 	.word	0xc2880000
 80027f4:	40e33333 	.word	0x40e33333
 80027f8:	c1eb3333 	.word	0xc1eb3333
 80027fc:	4252cccd 	.word	0x4252cccd
 8002800:	41033333 	.word	0x41033333
 8002804:	41a9999a 	.word	0x41a9999a
 8002808:	20000508 	.word	0x20000508
 800280c:	20000500 	.word	0x20000500
 8002810:	200004b8 	.word	0x200004b8
 8002814:	20000ab0 	.word	0x20000ab0
 8002818:	20000b64 	.word	0x20000b64
 800281c:	20000c18 	.word	0x20000c18
 8002820:	2000050c 	.word	0x2000050c
 8002824:	20000df4 	.word	0x20000df4
 8002828:	20000ccc 	.word	0x20000ccc
 800282c:	200009e4 	.word	0x200009e4
 8002830:	2000049c 	.word	0x2000049c

08002834 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b094      	sub	sp, #80	; 0x50
 8002838:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800283a:	f107 0320 	add.w	r3, r7, #32
 800283e:	2230      	movs	r2, #48	; 0x30
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f005 fd26 	bl	8008294 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002848:	f107 030c 	add.w	r3, r7, #12
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002858:	2300      	movs	r3, #0
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	4b27      	ldr	r3, [pc, #156]	; (80028fc <SystemClock_Config+0xc8>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	4a26      	ldr	r2, [pc, #152]	; (80028fc <SystemClock_Config+0xc8>)
 8002862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002866:	6413      	str	r3, [r2, #64]	; 0x40
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <SystemClock_Config+0xc8>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002874:	2300      	movs	r3, #0
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	4b21      	ldr	r3, [pc, #132]	; (8002900 <SystemClock_Config+0xcc>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a20      	ldr	r2, [pc, #128]	; (8002900 <SystemClock_Config+0xcc>)
 800287e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <SystemClock_Config+0xcc>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002890:	2302      	movs	r3, #2
 8002892:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002894:	2301      	movs	r3, #1
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002898:	2310      	movs	r3, #16
 800289a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800289c:	2302      	movs	r3, #2
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028a0:	2300      	movs	r3, #0
 80028a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80028a4:	2308      	movs	r3, #8
 80028a6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80028a8:	2364      	movs	r3, #100	; 0x64
 80028aa:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028ac:	2302      	movs	r3, #2
 80028ae:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80028b0:	2304      	movs	r3, #4
 80028b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80028b4:	f107 0320 	add.w	r3, r7, #32
 80028b8:	4618      	mov	r0, r3
 80028ba:	f002 f81f 	bl	80048fc <HAL_RCC_OscConfig>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <SystemClock_Config+0x94>
		Error_Handler();
 80028c4:	f000 f831 	bl	800292a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028c8:	230f      	movs	r3, #15
 80028ca:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028cc:	2302      	movs	r3, #2
 80028ce:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80028de:	f107 030c 	add.w	r3, r7, #12
 80028e2:	2103      	movs	r1, #3
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 fa81 	bl	8004dec <HAL_RCC_ClockConfig>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <SystemClock_Config+0xc0>
		Error_Handler();
 80028f0:	f000 f81b 	bl	800292a <Error_Handler>
	}
}
 80028f4:	bf00      	nop
 80028f6:	3750      	adds	r7, #80	; 0x50
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	40007000 	.word	0x40007000

08002904 <getRawPosition>:
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, voltage * 25000.0 / 12.0);
}

int32_t getRawPosition() {
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <getRawPosition+0x14>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	20000b64 	.word	0x20000b64

0800291c <modbus_callback>:

void modbus_callback() {
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
	return; // not implemented yet
 8002920:	bf00      	nop
		} else if (flip == 1) {
			MBvariables.x_moving_status = 0;
			flip = 0;
		}
	}
}
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800292e:	b672      	cpsid	i
}
 8002930:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002932:	e7fe      	b.n	8002932 <Error_Handler+0x8>

08002934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <HAL_MspInit+0x4c>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	4a0f      	ldr	r2, [pc, #60]	; (8002980 <HAL_MspInit+0x4c>)
 8002944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002948:	6453      	str	r3, [r2, #68]	; 0x44
 800294a:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <HAL_MspInit+0x4c>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_MspInit+0x4c>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a08      	ldr	r2, [pc, #32]	; (8002980 <HAL_MspInit+0x4c>)
 8002960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_MspInit+0x4c>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002972:	2007      	movs	r0, #7
 8002974:	f001 f890 	bl	8003a98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40023800 	.word	0x40023800

08002984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002988:	e7fe      	b.n	8002988 <NMI_Handler+0x4>

0800298a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800298e:	e7fe      	b.n	800298e <HardFault_Handler+0x4>

08002990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002994:	e7fe      	b.n	8002994 <MemManage_Handler+0x4>

08002996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800299a:	e7fe      	b.n	800299a <BusFault_Handler+0x4>

0800299c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a0:	e7fe      	b.n	80029a0 <UsageFault_Handler+0x4>

080029a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029d0:	f000 fd00 	bl	80033d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80029dc:	4802      	ldr	r0, [pc, #8]	; (80029e8 <DMA1_Stream6_IRQHandler+0x10>)
 80029de:	f001 fa35 	bl	8003e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000e68 	.word	0x20000e68

080029ec <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029f0:	4803      	ldr	r0, [pc, #12]	; (8002a00 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80029f2:	f003 f8bf 	bl	8005b74 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80029f6:	4803      	ldr	r0, [pc, #12]	; (8002a04 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80029f8:	f003 f8bc 	bl	8005b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000ab0 	.word	0x20000ab0
 8002a04:	20000c18 	.word	0x20000c18

08002a08 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a0c:	4803      	ldr	r0, [pc, #12]	; (8002a1c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002a0e:	f003 f8b1 	bl	8005b74 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002a12:	4803      	ldr	r0, [pc, #12]	; (8002a20 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002a14:	f003 f8ae 	bl	8005b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000ab0 	.word	0x20000ab0
 8002a20:	20000ccc 	.word	0x20000ccc

08002a24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <USART2_IRQHandler+0x10>)
 8002a2a:	f004 fbb5 	bl	8007198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000df4 	.word	0x20000df4

08002a38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return 1;
 8002a3c:	2301      	movs	r3, #1
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <_kill>:

int _kill(int pid, int sig)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a52:	f005 fbe7 	bl	8008224 <__errno>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2216      	movs	r2, #22
 8002a5a:	601a      	str	r2, [r3, #0]
  return -1;
 8002a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_exit>:

void _exit (int status)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ffe7 	bl	8002a48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a7a:	e7fe      	b.n	8002a7a <_exit+0x12>

08002a7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	e00a      	b.n	8002aa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a8e:	f3af 8000 	nop.w
 8002a92:	4601      	mov	r1, r0
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	60ba      	str	r2, [r7, #8]
 8002a9a:	b2ca      	uxtb	r2, r1
 8002a9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	dbf0      	blt.n	8002a8e <_read+0x12>
  }

  return len;
 8002aac:	687b      	ldr	r3, [r7, #4]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	e009      	b.n	8002adc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	60ba      	str	r2, [r7, #8]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	dbf1      	blt.n	8002ac8 <_write+0x12>
  }
  return len;
 8002ae4:	687b      	ldr	r3, [r7, #4]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <_close>:

int _close(int file)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b16:	605a      	str	r2, [r3, #4]
  return 0;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <_isatty>:

int _isatty(int file)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b2e:	2301      	movs	r3, #1
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b60:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <_sbrk+0x5c>)
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <_sbrk+0x60>)
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <_sbrk+0x64>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <_sbrk+0x64>)
 8002b76:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <_sbrk+0x68>)
 8002b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <_sbrk+0x64>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d207      	bcs.n	8002b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b88:	f005 fb4c 	bl	8008224 <__errno>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	220c      	movs	r2, #12
 8002b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b92:	f04f 33ff 	mov.w	r3, #4294967295
 8002b96:	e009      	b.n	8002bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <_sbrk+0x64>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <_sbrk+0x64>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <_sbrk+0x64>)
 8002ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002baa:	68fb      	ldr	r3, [r7, #12]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20020000 	.word	0x20020000
 8002bb8:	00000400 	.word	0x00000400
 8002bbc:	20000aac 	.word	0x20000aac
 8002bc0:	20000ee0 	.word	0x20000ee0

08002bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <SystemInit+0x20>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <SystemInit+0x20>)
 8002bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b096      	sub	sp, #88	; 0x58
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	60da      	str	r2, [r3, #12]
 8002c14:	611a      	str	r2, [r3, #16]
 8002c16:	615a      	str	r2, [r3, #20]
 8002c18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f005 fb37 	bl	8008294 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c26:	4b3e      	ldr	r3, [pc, #248]	; (8002d20 <MX_TIM1_Init+0x138>)
 8002c28:	4a3e      	ldr	r2, [pc, #248]	; (8002d24 <MX_TIM1_Init+0x13c>)
 8002c2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8002c2c:	4b3c      	ldr	r3, [pc, #240]	; (8002d20 <MX_TIM1_Init+0x138>)
 8002c2e:	2204      	movs	r2, #4
 8002c30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c32:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <MX_TIM1_Init+0x138>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25000-1;
 8002c38:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <MX_TIM1_Init+0x138>)
 8002c3a:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8002c3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c40:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <MX_TIM1_Init+0x138>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c46:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <MX_TIM1_Init+0x138>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c4c:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <MX_TIM1_Init+0x138>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c52:	4833      	ldr	r0, [pc, #204]	; (8002d20 <MX_TIM1_Init+0x138>)
 8002c54:	f002 faea 	bl	800522c <HAL_TIM_Base_Init>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002c5e:	f7ff fe64 	bl	800292a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	482c      	ldr	r0, [pc, #176]	; (8002d20 <MX_TIM1_Init+0x138>)
 8002c70:	f003 f9c6 	bl	8006000 <HAL_TIM_ConfigClockSource>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002c7a:	f7ff fe56 	bl	800292a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c7e:	4828      	ldr	r0, [pc, #160]	; (8002d20 <MX_TIM1_Init+0x138>)
 8002c80:	f002 fc52 	bl	8005528 <HAL_TIM_PWM_Init>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002c8a:	f7ff fe4e 	bl	800292a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4820      	ldr	r0, [pc, #128]	; (8002d20 <MX_TIM1_Init+0x138>)
 8002c9e:	f003 ff49 	bl	8006b34 <HAL_TIMEx_MasterConfigSynchronization>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002ca8:	f7ff fe3f 	bl	800292a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cac:	2360      	movs	r3, #96	; 0x60
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4813      	ldr	r0, [pc, #76]	; (8002d20 <MX_TIM1_Init+0x138>)
 8002cd2:	f003 f8d3 	bl	8005e7c <HAL_TIM_PWM_ConfigChannel>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002cdc:	f7ff fe25 	bl	800292a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cf8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	4619      	mov	r1, r3
 8002d02:	4807      	ldr	r0, [pc, #28]	; (8002d20 <MX_TIM1_Init+0x138>)
 8002d04:	f003 ff84 	bl	8006c10 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002d0e:	f7ff fe0c 	bl	800292a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d12:	4803      	ldr	r0, [pc, #12]	; (8002d20 <MX_TIM1_Init+0x138>)
 8002d14:	f000 f99c 	bl	8003050 <HAL_TIM_MspPostInit>

}
 8002d18:	bf00      	nop
 8002d1a:	3758      	adds	r7, #88	; 0x58
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000ab0 	.word	0x20000ab0
 8002d24:	40010000 	.word	0x40010000

08002d28 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08c      	sub	sp, #48	; 0x30
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d2e:	f107 030c 	add.w	r3, r7, #12
 8002d32:	2224      	movs	r2, #36	; 0x24
 8002d34:	2100      	movs	r1, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f005 faac 	bl	8008294 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d44:	4b21      	ldr	r3, [pc, #132]	; (8002dcc <MX_TIM2_Init+0xa4>)
 8002d46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <MX_TIM2_Init+0xa4>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d52:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <MX_TIM2_Init+0xa4>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002d58:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <MX_TIM2_Init+0xa4>)
 8002d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d60:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <MX_TIM2_Init+0xa4>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d66:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <MX_TIM2_Init+0xa4>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d74:	2301      	movs	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d80:	2300      	movs	r3, #0
 8002d82:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d84:	2301      	movs	r3, #1
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002d90:	f107 030c 	add.w	r3, r7, #12
 8002d94:	4619      	mov	r1, r3
 8002d96:	480d      	ldr	r0, [pc, #52]	; (8002dcc <MX_TIM2_Init+0xa4>)
 8002d98:	f002 fdaa 	bl	80058f0 <HAL_TIM_Encoder_Init>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002da2:	f7ff fdc2 	bl	800292a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002da6:	2300      	movs	r3, #0
 8002da8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dae:	1d3b      	adds	r3, r7, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4806      	ldr	r0, [pc, #24]	; (8002dcc <MX_TIM2_Init+0xa4>)
 8002db4:	f003 febe 	bl	8006b34 <HAL_TIMEx_MasterConfigSynchronization>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002dbe:	f7ff fdb4 	bl	800292a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dc2:	bf00      	nop
 8002dc4:	3730      	adds	r7, #48	; 0x30
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000b64 	.word	0x20000b64

08002dd0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dd6:	463b      	mov	r3, r7
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002de2:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <MX_TIM9_Init+0x6c>)
 8002de4:	4a16      	ldr	r2, [pc, #88]	; (8002e40 <MX_TIM9_Init+0x70>)
 8002de6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8002de8:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <MX_TIM9_Init+0x6c>)
 8002dea:	2263      	movs	r2, #99	; 0x63
 8002dec:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dee:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <MX_TIM9_Init+0x6c>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <MX_TIM9_Init+0x6c>)
 8002df6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002dfa:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <MX_TIM9_Init+0x6c>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e02:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <MX_TIM9_Init+0x6c>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002e08:	480c      	ldr	r0, [pc, #48]	; (8002e3c <MX_TIM9_Init+0x6c>)
 8002e0a:	f002 fa0f 	bl	800522c <HAL_TIM_Base_Init>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002e14:	f7ff fd89 	bl	800292a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e1c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002e1e:	463b      	mov	r3, r7
 8002e20:	4619      	mov	r1, r3
 8002e22:	4806      	ldr	r0, [pc, #24]	; (8002e3c <MX_TIM9_Init+0x6c>)
 8002e24:	f003 f8ec 	bl	8006000 <HAL_TIM_ConfigClockSource>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002e2e:	f7ff fd7c 	bl	800292a <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000c18 	.word	0x20000c18
 8002e40:	40014000 	.word	0x40014000

08002e44 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e4a:	1d3b      	adds	r3, r7, #4
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	611a      	str	r2, [r3, #16]
 8002e58:	615a      	str	r2, [r3, #20]
 8002e5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002e5c:	4b21      	ldr	r3, [pc, #132]	; (8002ee4 <MX_TIM11_Init+0xa0>)
 8002e5e:	4a22      	ldr	r2, [pc, #136]	; (8002ee8 <MX_TIM11_Init+0xa4>)
 8002e60:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <MX_TIM11_Init+0xa0>)
 8002e64:	2263      	movs	r2, #99	; 0x63
 8002e66:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e68:	4b1e      	ldr	r3, [pc, #120]	; (8002ee4 <MX_TIM11_Init+0xa0>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <MX_TIM11_Init+0xa0>)
 8002e70:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8002e74:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <MX_TIM11_Init+0xa0>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e7c:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <MX_TIM11_Init+0xa0>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002e82:	4818      	ldr	r0, [pc, #96]	; (8002ee4 <MX_TIM11_Init+0xa0>)
 8002e84:	f002 f9d2 	bl	800522c <HAL_TIM_Base_Init>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002e8e:	f7ff fd4c 	bl	800292a <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8002e92:	4814      	ldr	r0, [pc, #80]	; (8002ee4 <MX_TIM11_Init+0xa0>)
 8002e94:	f002 fae2 	bl	800545c <HAL_TIM_OC_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002e9e:	f7ff fd44 	bl	800292a <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8002ea2:	2108      	movs	r1, #8
 8002ea4:	480f      	ldr	r0, [pc, #60]	; (8002ee4 <MX_TIM11_Init+0xa0>)
 8002ea6:	f002 fc55 	bl	8005754 <HAL_TIM_OnePulse_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8002eb0:	f7ff fd3b 	bl	800292a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8002eb8:	f240 5399 	movw	r3, #1433	; 0x599
 8002ebc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	2200      	movs	r2, #0
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4805      	ldr	r0, [pc, #20]	; (8002ee4 <MX_TIM11_Init+0xa0>)
 8002ece:	f002 ff79 	bl	8005dc4 <HAL_TIM_OC_ConfigChannel>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8002ed8:	f7ff fd27 	bl	800292a <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002edc:	bf00      	nop
 8002ede:	3720      	adds	r7, #32
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000ccc 	.word	0x20000ccc
 8002ee8:	40014800 	.word	0x40014800

08002eec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2e      	ldr	r2, [pc, #184]	; (8002fb4 <HAL_TIM_Base_MspInit+0xc8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d11e      	bne.n	8002f3c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	4b2d      	ldr	r3, [pc, #180]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	4a2c      	ldr	r2, [pc, #176]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0e:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	2018      	movs	r0, #24
 8002f20:	f000 fdc5 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002f24:	2018      	movs	r0, #24
 8002f26:	f000 fdde 	bl	8003ae6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	201a      	movs	r0, #26
 8002f30:	f000 fdbd 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002f34:	201a      	movs	r0, #26
 8002f36:	f000 fdd6 	bl	8003ae6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002f3a:	e036      	b.n	8002faa <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM9)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1e      	ldr	r2, [pc, #120]	; (8002fbc <HAL_TIM_Base_MspInit+0xd0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d116      	bne.n	8002f74 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	4a1a      	ldr	r2, [pc, #104]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f54:	6453      	str	r3, [r2, #68]	; 0x44
 8002f56:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2100      	movs	r1, #0
 8002f66:	2018      	movs	r0, #24
 8002f68:	f000 fda1 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002f6c:	2018      	movs	r0, #24
 8002f6e:	f000 fdba 	bl	8003ae6 <HAL_NVIC_EnableIRQ>
}
 8002f72:	e01a      	b.n	8002faa <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM11)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a11      	ldr	r2, [pc, #68]	; (8002fc0 <HAL_TIM_Base_MspInit+0xd4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d115      	bne.n	8002faa <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	4a0c      	ldr	r2, [pc, #48]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	201a      	movs	r0, #26
 8002fa0:	f000 fd85 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002fa4:	201a      	movs	r0, #26
 8002fa6:	f000 fd9e 	bl	8003ae6 <HAL_NVIC_EnableIRQ>
}
 8002faa:	bf00      	nop
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40010000 	.word	0x40010000
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40014000 	.word	0x40014000
 8002fc0:	40014800 	.word	0x40014800

08002fc4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe4:	d12b      	bne.n	800303e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <HAL_TIM_Encoder_MspInit+0x84>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a16      	ldr	r2, [pc, #88]	; (8003048 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	4b10      	ldr	r3, [pc, #64]	; (8003048 <HAL_TIM_Encoder_MspInit+0x84>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	4a0f      	ldr	r2, [pc, #60]	; (8003048 <HAL_TIM_Encoder_MspInit+0x84>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6313      	str	r3, [r2, #48]	; 0x30
 8003012:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <HAL_TIM_Encoder_MspInit+0x84>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800301e:	2303      	movs	r3, #3
 8003020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302a:	2300      	movs	r3, #0
 800302c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800302e:	2301      	movs	r3, #1
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003032:	f107 0314 	add.w	r3, r7, #20
 8003036:	4619      	mov	r1, r3
 8003038:	4804      	ldr	r0, [pc, #16]	; (800304c <HAL_TIM_Encoder_MspInit+0x88>)
 800303a:	f001 f97d 	bl	8004338 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800303e:	bf00      	nop
 8003040:	3728      	adds	r7, #40	; 0x28
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	40020000 	.word	0x40020000

08003050 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	f107 030c 	add.w	r3, r7, #12
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a12      	ldr	r2, [pc, #72]	; (80030b8 <HAL_TIM_MspPostInit+0x68>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d11e      	bne.n	80030b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	4b11      	ldr	r3, [pc, #68]	; (80030bc <HAL_TIM_MspPostInit+0x6c>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a10      	ldr	r2, [pc, #64]	; (80030bc <HAL_TIM_MspPostInit+0x6c>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <HAL_TIM_MspPostInit+0x6c>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800308e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003092:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030a0:	2301      	movs	r3, #1
 80030a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a4:	f107 030c 	add.w	r3, r7, #12
 80030a8:	4619      	mov	r1, r3
 80030aa:	4805      	ldr	r0, [pc, #20]	; (80030c0 <HAL_TIM_MspPostInit+0x70>)
 80030ac:	f001 f944 	bl	8004338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80030b0:	bf00      	nop
 80030b2:	3720      	adds	r7, #32
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40010000 	.word	0x40010000
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40020000 	.word	0x40020000

080030c4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030ca:	4a12      	ldr	r2, [pc, #72]	; (8003114 <MX_USART1_UART_Init+0x50>)
 80030cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030d6:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030de:	2200      	movs	r2, #0
 80030e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030ea:	220c      	movs	r2, #12
 80030ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ee:	4b08      	ldr	r3, [pc, #32]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030fa:	4805      	ldr	r0, [pc, #20]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030fc:	f003 fdf8 	bl	8006cf0 <HAL_UART_Init>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003106:	f7ff fc10 	bl	800292a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000d80 	.word	0x20000d80
 8003114:	40011000 	.word	0x40011000

08003118 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800311c:	4b12      	ldr	r3, [pc, #72]	; (8003168 <MX_USART2_UART_Init+0x50>)
 800311e:	4a13      	ldr	r2, [pc, #76]	; (800316c <MX_USART2_UART_Init+0x54>)
 8003120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <MX_USART2_UART_Init+0x50>)
 8003124:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <MX_USART2_UART_Init+0x50>)
 800312c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003130:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <MX_USART2_UART_Init+0x50>)
 8003134:	2200      	movs	r2, #0
 8003136:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <MX_USART2_UART_Init+0x50>)
 800313a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800313e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003140:	4b09      	ldr	r3, [pc, #36]	; (8003168 <MX_USART2_UART_Init+0x50>)
 8003142:	220c      	movs	r2, #12
 8003144:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <MX_USART2_UART_Init+0x50>)
 8003148:	2200      	movs	r2, #0
 800314a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <MX_USART2_UART_Init+0x50>)
 800314e:	2200      	movs	r2, #0
 8003150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003152:	4805      	ldr	r0, [pc, #20]	; (8003168 <MX_USART2_UART_Init+0x50>)
 8003154:	f003 fdcc 	bl	8006cf0 <HAL_UART_Init>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800315e:	f7ff fbe4 	bl	800292a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20000df4 	.word	0x20000df4
 800316c:	40004400 	.word	0x40004400

08003170 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08c      	sub	sp, #48	; 0x30
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 031c 	add.w	r3, r7, #28
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a4d      	ldr	r2, [pc, #308]	; (80032c4 <HAL_UART_MspInit+0x154>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d12d      	bne.n	80031ee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	4b4c      	ldr	r3, [pc, #304]	; (80032c8 <HAL_UART_MspInit+0x158>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	4a4b      	ldr	r2, [pc, #300]	; (80032c8 <HAL_UART_MspInit+0x158>)
 800319c:	f043 0310 	orr.w	r3, r3, #16
 80031a0:	6453      	str	r3, [r2, #68]	; 0x44
 80031a2:	4b49      	ldr	r3, [pc, #292]	; (80032c8 <HAL_UART_MspInit+0x158>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	61bb      	str	r3, [r7, #24]
 80031ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	4b45      	ldr	r3, [pc, #276]	; (80032c8 <HAL_UART_MspInit+0x158>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a44      	ldr	r2, [pc, #272]	; (80032c8 <HAL_UART_MspInit+0x158>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b42      	ldr	r3, [pc, #264]	; (80032c8 <HAL_UART_MspInit+0x158>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d0:	2302      	movs	r3, #2
 80031d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d8:	2303      	movs	r3, #3
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031dc:	2307      	movs	r3, #7
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e0:	f107 031c 	add.w	r3, r7, #28
 80031e4:	4619      	mov	r1, r3
 80031e6:	4839      	ldr	r0, [pc, #228]	; (80032cc <HAL_UART_MspInit+0x15c>)
 80031e8:	f001 f8a6 	bl	8004338 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80031ec:	e066      	b.n	80032bc <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a37      	ldr	r2, [pc, #220]	; (80032d0 <HAL_UART_MspInit+0x160>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d161      	bne.n	80032bc <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031f8:	2300      	movs	r3, #0
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	4b32      	ldr	r3, [pc, #200]	; (80032c8 <HAL_UART_MspInit+0x158>)
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	4a31      	ldr	r2, [pc, #196]	; (80032c8 <HAL_UART_MspInit+0x158>)
 8003202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003206:	6413      	str	r3, [r2, #64]	; 0x40
 8003208:	4b2f      	ldr	r3, [pc, #188]	; (80032c8 <HAL_UART_MspInit+0x158>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <HAL_UART_MspInit+0x158>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	4a2a      	ldr	r2, [pc, #168]	; (80032c8 <HAL_UART_MspInit+0x158>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6313      	str	r3, [r2, #48]	; 0x30
 8003224:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <HAL_UART_MspInit+0x158>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003230:	230c      	movs	r3, #12
 8003232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323c:	2303      	movs	r3, #3
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003240:	2307      	movs	r3, #7
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003244:	f107 031c 	add.w	r3, r7, #28
 8003248:	4619      	mov	r1, r3
 800324a:	4820      	ldr	r0, [pc, #128]	; (80032cc <HAL_UART_MspInit+0x15c>)
 800324c:	f001 f874 	bl	8004338 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003250:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <HAL_UART_MspInit+0x164>)
 8003252:	4a21      	ldr	r2, [pc, #132]	; (80032d8 <HAL_UART_MspInit+0x168>)
 8003254:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003256:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <HAL_UART_MspInit+0x164>)
 8003258:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800325c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800325e:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_UART_MspInit+0x164>)
 8003260:	2240      	movs	r2, #64	; 0x40
 8003262:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <HAL_UART_MspInit+0x164>)
 8003266:	2200      	movs	r2, #0
 8003268:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800326a:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <HAL_UART_MspInit+0x164>)
 800326c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003270:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003272:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <HAL_UART_MspInit+0x164>)
 8003274:	2200      	movs	r2, #0
 8003276:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003278:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <HAL_UART_MspInit+0x164>)
 800327a:	2200      	movs	r2, #0
 800327c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <HAL_UART_MspInit+0x164>)
 8003280:	2200      	movs	r2, #0
 8003282:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003284:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <HAL_UART_MspInit+0x164>)
 8003286:	2200      	movs	r2, #0
 8003288:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_UART_MspInit+0x164>)
 800328c:	2200      	movs	r2, #0
 800328e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003290:	4810      	ldr	r0, [pc, #64]	; (80032d4 <HAL_UART_MspInit+0x164>)
 8003292:	f000 fc43 	bl	8003b1c <HAL_DMA_Init>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_UART_MspInit+0x130>
      Error_Handler();
 800329c:	f7ff fb45 	bl	800292a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a0c      	ldr	r2, [pc, #48]	; (80032d4 <HAL_UART_MspInit+0x164>)
 80032a4:	635a      	str	r2, [r3, #52]	; 0x34
 80032a6:	4a0b      	ldr	r2, [pc, #44]	; (80032d4 <HAL_UART_MspInit+0x164>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032ac:	2200      	movs	r2, #0
 80032ae:	2100      	movs	r1, #0
 80032b0:	2026      	movs	r0, #38	; 0x26
 80032b2:	f000 fbfc 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032b6:	2026      	movs	r0, #38	; 0x26
 80032b8:	f000 fc15 	bl	8003ae6 <HAL_NVIC_EnableIRQ>
}
 80032bc:	bf00      	nop
 80032be:	3730      	adds	r7, #48	; 0x30
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40011000 	.word	0x40011000
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40020000 	.word	0x40020000
 80032d0:	40004400 	.word	0x40004400
 80032d4:	20000e68 	.word	0x20000e68
 80032d8:	400260a0 	.word	0x400260a0

080032dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80032dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003314 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032e0:	480d      	ldr	r0, [pc, #52]	; (8003318 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032e2:	490e      	ldr	r1, [pc, #56]	; (800331c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032e4:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032e8:	e002      	b.n	80032f0 <LoopCopyDataInit>

080032ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ee:	3304      	adds	r3, #4

080032f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f4:	d3f9      	bcc.n	80032ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032f6:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032f8:	4c0b      	ldr	r4, [pc, #44]	; (8003328 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032fc:	e001      	b.n	8003302 <LoopFillZerobss>

080032fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003300:	3204      	adds	r2, #4

08003302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003304:	d3fb      	bcc.n	80032fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003306:	f7ff fc5d 	bl	8002bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800330a:	f004 ff91 	bl	8008230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800330e:	f7ff f9f5 	bl	80026fc <main>
  bx  lr    
 8003312:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800331c:	200003e0 	.word	0x200003e0
  ldr r2, =_sidata
 8003320:	0800e8d0 	.word	0x0800e8d0
  ldr r2, =_sbss
 8003324:	200003e0 	.word	0x200003e0
  ldr r4, =_ebss
 8003328:	20000edc 	.word	0x20000edc

0800332c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800332c:	e7fe      	b.n	800332c <ADC_IRQHandler>
	...

08003330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003334:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <HAL_Init+0x40>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0d      	ldr	r2, [pc, #52]	; (8003370 <HAL_Init+0x40>)
 800333a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800333e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_Init+0x40>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <HAL_Init+0x40>)
 8003346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800334a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800334c:	4b08      	ldr	r3, [pc, #32]	; (8003370 <HAL_Init+0x40>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a07      	ldr	r2, [pc, #28]	; (8003370 <HAL_Init+0x40>)
 8003352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003356:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003358:	2003      	movs	r0, #3
 800335a:	f000 fb9d 	bl	8003a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800335e:	2000      	movs	r0, #0
 8003360:	f000 f808 	bl	8003374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003364:	f7ff fae6 	bl	8002934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40023c00 	.word	0x40023c00

08003374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800337c:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <HAL_InitTick+0x54>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_InitTick+0x58>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	4619      	mov	r1, r3
 8003386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800338a:	fbb3 f3f1 	udiv	r3, r3, r1
 800338e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fbb5 	bl	8003b02 <HAL_SYSTICK_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e00e      	b.n	80033c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b0f      	cmp	r3, #15
 80033a6:	d80a      	bhi.n	80033be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033a8:	2200      	movs	r2, #0
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	f04f 30ff 	mov.w	r0, #4294967295
 80033b0:	f000 fb7d 	bl	8003aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033b4:	4a06      	ldr	r2, [pc, #24]	; (80033d0 <HAL_InitTick+0x5c>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	e000      	b.n	80033c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000200 	.word	0x20000200
 80033cc:	20000208 	.word	0x20000208
 80033d0:	20000204 	.word	0x20000204

080033d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_IncTick+0x20>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_IncTick+0x24>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4413      	add	r3, r2
 80033e4:	4a04      	ldr	r2, [pc, #16]	; (80033f8 <HAL_IncTick+0x24>)
 80033e6:	6013      	str	r3, [r2, #0]
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000208 	.word	0x20000208
 80033f8:	20000ec8 	.word	0x20000ec8

080033fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <HAL_GetTick+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000ec8 	.word	0x20000ec8

08003414 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e033      	b.n	8003492 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe f998 	bl	8001768 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b00      	cmp	r3, #0
 8003450:	d118      	bne.n	8003484 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800345a:	f023 0302 	bic.w	r3, r3, #2
 800345e:	f043 0202 	orr.w	r2, r3, #2
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f94a 	bl	8003700 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f023 0303 	bic.w	r3, r3, #3
 800347a:	f043 0201 	orr.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
 8003482:	e001      	b.n	8003488 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003490:	7bfb      	ldrb	r3, [r7, #15]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x1c>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e113      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x244>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b09      	cmp	r3, #9
 80034c6:	d925      	bls.n	8003514 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68d9      	ldr	r1, [r3, #12]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	3b1e      	subs	r3, #30
 80034de:	2207      	movs	r2, #7
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43da      	mvns	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	400a      	ands	r2, r1
 80034ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68d9      	ldr	r1, [r3, #12]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	4618      	mov	r0, r3
 8003500:	4603      	mov	r3, r0
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4403      	add	r3, r0
 8003506:	3b1e      	subs	r3, #30
 8003508:	409a      	lsls	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	e022      	b.n	800355a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6919      	ldr	r1, [r3, #16]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	4613      	mov	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4413      	add	r3, r2
 8003528:	2207      	movs	r2, #7
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43da      	mvns	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	400a      	ands	r2, r1
 8003536:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6919      	ldr	r1, [r3, #16]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	b29b      	uxth	r3, r3
 8003548:	4618      	mov	r0, r3
 800354a:	4603      	mov	r3, r0
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4403      	add	r3, r0
 8003550:	409a      	lsls	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b06      	cmp	r3, #6
 8003560:	d824      	bhi.n	80035ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	3b05      	subs	r3, #5
 8003574:	221f      	movs	r2, #31
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43da      	mvns	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	400a      	ands	r2, r1
 8003582:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	4618      	mov	r0, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	3b05      	subs	r3, #5
 800359e:	fa00 f203 	lsl.w	r2, r0, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	635a      	str	r2, [r3, #52]	; 0x34
 80035aa:	e04c      	b.n	8003646 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b0c      	cmp	r3, #12
 80035b2:	d824      	bhi.n	80035fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	3b23      	subs	r3, #35	; 0x23
 80035c6:	221f      	movs	r2, #31
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43da      	mvns	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	400a      	ands	r2, r1
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	4618      	mov	r0, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	3b23      	subs	r3, #35	; 0x23
 80035f0:	fa00 f203 	lsl.w	r2, r0, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
 80035fc:	e023      	b.n	8003646 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	3b41      	subs	r3, #65	; 0x41
 8003610:	221f      	movs	r2, #31
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43da      	mvns	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	400a      	ands	r2, r1
 800361e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	b29b      	uxth	r3, r3
 800362c:	4618      	mov	r0, r3
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	3b41      	subs	r3, #65	; 0x41
 800363a:	fa00 f203 	lsl.w	r2, r0, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003646:	4b29      	ldr	r3, [pc, #164]	; (80036ec <HAL_ADC_ConfigChannel+0x250>)
 8003648:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a28      	ldr	r2, [pc, #160]	; (80036f0 <HAL_ADC_ConfigChannel+0x254>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d10f      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x1d8>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b12      	cmp	r3, #18
 800365a:	d10b      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <HAL_ADC_ConfigChannel+0x254>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d12b      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x23a>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <HAL_ADC_ConfigChannel+0x258>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d003      	beq.n	8003690 <HAL_ADC_ConfigChannel+0x1f4>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b11      	cmp	r3, #17
 800368e:	d122      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a11      	ldr	r2, [pc, #68]	; (80036f4 <HAL_ADC_ConfigChannel+0x258>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d111      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036b2:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <HAL_ADC_ConfigChannel+0x25c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a11      	ldr	r2, [pc, #68]	; (80036fc <HAL_ADC_ConfigChannel+0x260>)
 80036b8:	fba2 2303 	umull	r2, r3, r2, r3
 80036bc:	0c9a      	lsrs	r2, r3, #18
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036c8:	e002      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f9      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	40012300 	.word	0x40012300
 80036f0:	40012000 	.word	0x40012000
 80036f4:	10000012 	.word	0x10000012
 80036f8:	20000200 	.word	0x20000200
 80036fc:	431bde83 	.word	0x431bde83

08003700 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003708:	4b79      	ldr	r3, [pc, #484]	; (80038f0 <ADC_Init+0x1f0>)
 800370a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	431a      	orrs	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003734:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	021a      	lsls	r2, r3, #8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6899      	ldr	r1, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	4a58      	ldr	r2, [pc, #352]	; (80038f4 <ADC_Init+0x1f4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d022      	beq.n	80037de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6899      	ldr	r1, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6899      	ldr	r1, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	e00f      	b.n	80037fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0202 	bic.w	r2, r2, #2
 800380c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6899      	ldr	r1, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	7e1b      	ldrb	r3, [r3, #24]
 8003818:	005a      	lsls	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01b      	beq.n	8003864 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800383a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800384a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	3b01      	subs	r3, #1
 8003858:	035a      	lsls	r2, r3, #13
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	e007      	b.n	8003874 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003872:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003882:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	3b01      	subs	r3, #1
 8003890:	051a      	lsls	r2, r3, #20
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6899      	ldr	r1, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038b6:	025a      	lsls	r2, r3, #9
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6899      	ldr	r1, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	029a      	lsls	r2, r3, #10
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	609a      	str	r2, [r3, #8]
}
 80038e4:	bf00      	nop
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40012300 	.word	0x40012300
 80038f4:	0f000001 	.word	0x0f000001

080038f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <__NVIC_SetPriorityGrouping+0x44>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003914:	4013      	ands	r3, r2
 8003916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800392a:	4a04      	ldr	r2, [pc, #16]	; (800393c <__NVIC_SetPriorityGrouping+0x44>)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	60d3      	str	r3, [r2, #12]
}
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003944:	4b04      	ldr	r3, [pc, #16]	; (8003958 <__NVIC_GetPriorityGrouping+0x18>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	f003 0307 	and.w	r3, r3, #7
}
 800394e:	4618      	mov	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	2b00      	cmp	r3, #0
 800396c:	db0b      	blt.n	8003986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	f003 021f 	and.w	r2, r3, #31
 8003974:	4907      	ldr	r1, [pc, #28]	; (8003994 <__NVIC_EnableIRQ+0x38>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2001      	movs	r0, #1
 800397e:	fa00 f202 	lsl.w	r2, r0, r2
 8003982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	e000e100 	.word	0xe000e100

08003998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	6039      	str	r1, [r7, #0]
 80039a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	db0a      	blt.n	80039c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	490c      	ldr	r1, [pc, #48]	; (80039e4 <__NVIC_SetPriority+0x4c>)
 80039b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b6:	0112      	lsls	r2, r2, #4
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	440b      	add	r3, r1
 80039bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039c0:	e00a      	b.n	80039d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	4908      	ldr	r1, [pc, #32]	; (80039e8 <__NVIC_SetPriority+0x50>)
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	3b04      	subs	r3, #4
 80039d0:	0112      	lsls	r2, r2, #4
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	440b      	add	r3, r1
 80039d6:	761a      	strb	r2, [r3, #24]
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000e100 	.word	0xe000e100
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b089      	sub	sp, #36	; 0x24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f1c3 0307 	rsb	r3, r3, #7
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	bf28      	it	cs
 8003a0a:	2304      	movcs	r3, #4
 8003a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	3304      	adds	r3, #4
 8003a12:	2b06      	cmp	r3, #6
 8003a14:	d902      	bls.n	8003a1c <NVIC_EncodePriority+0x30>
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	3b03      	subs	r3, #3
 8003a1a:	e000      	b.n	8003a1e <NVIC_EncodePriority+0x32>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a20:	f04f 32ff 	mov.w	r2, #4294967295
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	43da      	mvns	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	401a      	ands	r2, r3
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a34:	f04f 31ff 	mov.w	r1, #4294967295
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3e:	43d9      	mvns	r1, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a44:	4313      	orrs	r3, r2
         );
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3724      	adds	r7, #36	; 0x24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a64:	d301      	bcc.n	8003a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a66:	2301      	movs	r3, #1
 8003a68:	e00f      	b.n	8003a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <SysTick_Config+0x40>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a72:	210f      	movs	r1, #15
 8003a74:	f04f 30ff 	mov.w	r0, #4294967295
 8003a78:	f7ff ff8e 	bl	8003998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a7c:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <SysTick_Config+0x40>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a82:	4b04      	ldr	r3, [pc, #16]	; (8003a94 <SysTick_Config+0x40>)
 8003a84:	2207      	movs	r2, #7
 8003a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	e000e010 	.word	0xe000e010

08003a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ff29 	bl	80038f8 <__NVIC_SetPriorityGrouping>
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b086      	sub	sp, #24
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	607a      	str	r2, [r7, #4]
 8003aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ac0:	f7ff ff3e 	bl	8003940 <__NVIC_GetPriorityGrouping>
 8003ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	6978      	ldr	r0, [r7, #20]
 8003acc:	f7ff ff8e 	bl	80039ec <NVIC_EncodePriority>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff ff5d 	bl	8003998 <__NVIC_SetPriority>
}
 8003ade:	bf00      	nop
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	4603      	mov	r3, r0
 8003aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff ff31 	bl	800395c <__NVIC_EnableIRQ>
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff ffa2 	bl	8003a54 <SysTick_Config>
 8003b10:	4603      	mov	r3, r0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b28:	f7ff fc68 	bl	80033fc <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e099      	b.n	8003c6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0201 	bic.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b58:	e00f      	b.n	8003b7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b5a:	f7ff fc4f 	bl	80033fc <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b05      	cmp	r3, #5
 8003b66:	d908      	bls.n	8003b7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2203      	movs	r2, #3
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e078      	b.n	8003c6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e8      	bne.n	8003b5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4b38      	ldr	r3, [pc, #224]	; (8003c74 <HAL_DMA_Init+0x158>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d107      	bne.n	8003be4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f023 0307 	bic.w	r3, r3, #7
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d117      	bne.n	8003c3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00e      	beq.n	8003c3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fb0d 	bl	8004240 <DMA_CheckFifoParam>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2240      	movs	r2, #64	; 0x40
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e016      	b.n	8003c6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fac4 	bl	80041d4 <DMA_CalcBaseAndBitshift>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	223f      	movs	r2, #63	; 0x3f
 8003c56:	409a      	lsls	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	f010803f 	.word	0xf010803f

08003c78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_DMA_Start_IT+0x26>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e040      	b.n	8003d20 <HAL_DMA_Start_IT+0xa8>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d12f      	bne.n	8003d12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fa56 	bl	8004178 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd0:	223f      	movs	r2, #63	; 0x3f
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0216 	orr.w	r2, r2, #22
 8003ce6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0208 	orr.w	r2, r2, #8
 8003cfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	e005      	b.n	8003d1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d36:	f7ff fb61 	bl	80033fc <HAL_GetTick>
 8003d3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d008      	beq.n	8003d5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2280      	movs	r2, #128	; 0x80
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e052      	b.n	8003e00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0216 	bic.w	r2, r2, #22
 8003d68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <HAL_DMA_Abort+0x62>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0208 	bic.w	r2, r2, #8
 8003d98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003daa:	e013      	b.n	8003dd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dac:	f7ff fb26 	bl	80033fc <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b05      	cmp	r3, #5
 8003db8:	d90c      	bls.n	8003dd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e015      	b.n	8003e00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e4      	bne.n	8003dac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de6:	223f      	movs	r2, #63	; 0x3f
 8003de8:	409a      	lsls	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d004      	beq.n	8003e26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2280      	movs	r2, #128	; 0x80
 8003e20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e00c      	b.n	8003e40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2205      	movs	r2, #5
 8003e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0201 	bic.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e58:	4b8e      	ldr	r3, [pc, #568]	; (8004094 <HAL_DMA_IRQHandler+0x248>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a8e      	ldr	r2, [pc, #568]	; (8004098 <HAL_DMA_IRQHandler+0x24c>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	0a9b      	lsrs	r3, r3, #10
 8003e64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e76:	2208      	movs	r2, #8
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01a      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d013      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0204 	bic.w	r2, r2, #4
 8003e9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb0:	f043 0201 	orr.w	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d012      	beq.n	8003eee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eda:	2201      	movs	r2, #1
 8003edc:	409a      	lsls	r2, r3
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	f043 0202 	orr.w	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d012      	beq.n	8003f24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00b      	beq.n	8003f24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f10:	2204      	movs	r2, #4
 8003f12:	409a      	lsls	r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	f043 0204 	orr.w	r2, r3, #4
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f28:	2210      	movs	r2, #16
 8003f2a:	409a      	lsls	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d043      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d03c      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f46:	2210      	movs	r2, #16
 8003f48:	409a      	lsls	r2, r3
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d018      	beq.n	8003f8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d108      	bne.n	8003f7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d024      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
 8003f7a:	e01f      	b.n	8003fbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01b      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	4798      	blx	r3
 8003f8c:	e016      	b.n	8003fbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d107      	bne.n	8003fac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0208 	bic.w	r2, r2, #8
 8003faa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 808f 	beq.w	80040ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 8087 	beq.w	80040ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d136      	bne.n	8004064 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0216 	bic.w	r2, r2, #22
 8004004:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004014:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d103      	bne.n	8004026 <HAL_DMA_IRQHandler+0x1da>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004022:	2b00      	cmp	r3, #0
 8004024:	d007      	beq.n	8004036 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0208 	bic.w	r2, r2, #8
 8004034:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403a:	223f      	movs	r2, #63	; 0x3f
 800403c:	409a      	lsls	r2, r3
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004056:	2b00      	cmp	r3, #0
 8004058:	d07e      	beq.n	8004158 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
        }
        return;
 8004062:	e079      	b.n	8004158 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d01d      	beq.n	80040ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10d      	bne.n	800409c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	2b00      	cmp	r3, #0
 8004086:	d031      	beq.n	80040ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
 8004090:	e02c      	b.n	80040ec <HAL_DMA_IRQHandler+0x2a0>
 8004092:	bf00      	nop
 8004094:	20000200 	.word	0x20000200
 8004098:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d023      	beq.n	80040ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
 80040ac:	e01e      	b.n	80040ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10f      	bne.n	80040dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0210 	bic.w	r2, r2, #16
 80040ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d032      	beq.n	800415a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d022      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2205      	movs	r2, #5
 8004104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0201 	bic.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	3301      	adds	r3, #1
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	429a      	cmp	r2, r3
 8004122:	d307      	bcc.n	8004134 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f2      	bne.n	8004118 <HAL_DMA_IRQHandler+0x2cc>
 8004132:	e000      	b.n	8004136 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004134:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	4798      	blx	r3
 8004156:	e000      	b.n	800415a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004158:	bf00      	nop
    }
  }
}
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004194:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b40      	cmp	r3, #64	; 0x40
 80041a4:	d108      	bne.n	80041b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041b6:	e007      	b.n	80041c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	60da      	str	r2, [r3, #12]
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	3b10      	subs	r3, #16
 80041e4:	4a14      	ldr	r2, [pc, #80]	; (8004238 <DMA_CalcBaseAndBitshift+0x64>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	091b      	lsrs	r3, r3, #4
 80041ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041ee:	4a13      	ldr	r2, [pc, #76]	; (800423c <DMA_CalcBaseAndBitshift+0x68>)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d909      	bls.n	8004216 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800420a:	f023 0303 	bic.w	r3, r3, #3
 800420e:	1d1a      	adds	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	659a      	str	r2, [r3, #88]	; 0x58
 8004214:	e007      	b.n	8004226 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800421e:	f023 0303 	bic.w	r3, r3, #3
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	aaaaaaab 	.word	0xaaaaaaab
 800423c:	0800e1f8 	.word	0x0800e1f8

08004240 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d11f      	bne.n	800429a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b03      	cmp	r3, #3
 800425e:	d856      	bhi.n	800430e <DMA_CheckFifoParam+0xce>
 8004260:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <DMA_CheckFifoParam+0x28>)
 8004262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004266:	bf00      	nop
 8004268:	08004279 	.word	0x08004279
 800426c:	0800428b 	.word	0x0800428b
 8004270:	08004279 	.word	0x08004279
 8004274:	0800430f 	.word	0x0800430f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d046      	beq.n	8004312 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004288:	e043      	b.n	8004312 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004292:	d140      	bne.n	8004316 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004298:	e03d      	b.n	8004316 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a2:	d121      	bne.n	80042e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d837      	bhi.n	800431a <DMA_CheckFifoParam+0xda>
 80042aa:	a201      	add	r2, pc, #4	; (adr r2, 80042b0 <DMA_CheckFifoParam+0x70>)
 80042ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b0:	080042c1 	.word	0x080042c1
 80042b4:	080042c7 	.word	0x080042c7
 80042b8:	080042c1 	.word	0x080042c1
 80042bc:	080042d9 	.word	0x080042d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
      break;
 80042c4:	e030      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d025      	beq.n	800431e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042d6:	e022      	b.n	800431e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042e0:	d11f      	bne.n	8004322 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042e6:	e01c      	b.n	8004322 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d903      	bls.n	80042f6 <DMA_CheckFifoParam+0xb6>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d003      	beq.n	80042fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042f4:	e018      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
      break;
 80042fa:	e015      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00e      	beq.n	8004326 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	73fb      	strb	r3, [r7, #15]
      break;
 800430c:	e00b      	b.n	8004326 <DMA_CheckFifoParam+0xe6>
      break;
 800430e:	bf00      	nop
 8004310:	e00a      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
      break;
 8004312:	bf00      	nop
 8004314:	e008      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
      break;
 8004316:	bf00      	nop
 8004318:	e006      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
      break;
 800431a:	bf00      	nop
 800431c:	e004      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
      break;
 800431e:	bf00      	nop
 8004320:	e002      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
      break;   
 8004322:	bf00      	nop
 8004324:	e000      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
      break;
 8004326:	bf00      	nop
    }
  } 
  
  return status; 
 8004328:	7bfb      	ldrb	r3, [r7, #15]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop

08004338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004338:	b480      	push	{r7}
 800433a:	b089      	sub	sp, #36	; 0x24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800434a:	2300      	movs	r3, #0
 800434c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	e159      	b.n	8004608 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004354:	2201      	movs	r2, #1
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4013      	ands	r3, r2
 8004366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	429a      	cmp	r2, r3
 800436e:	f040 8148 	bne.w	8004602 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b01      	cmp	r3, #1
 800437c:	d005      	beq.n	800438a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004386:	2b02      	cmp	r3, #2
 8004388:	d130      	bne.n	80043ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	2203      	movs	r2, #3
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43db      	mvns	r3, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4013      	ands	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043c0:	2201      	movs	r2, #1
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 0201 	and.w	r2, r3, #1
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d017      	beq.n	8004428 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	2203      	movs	r2, #3
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4013      	ands	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4313      	orrs	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d123      	bne.n	800447c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	08da      	lsrs	r2, r3, #3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3208      	adds	r2, #8
 800443c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	220f      	movs	r2, #15
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	43db      	mvns	r3, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4013      	ands	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4313      	orrs	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	08da      	lsrs	r2, r3, #3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3208      	adds	r2, #8
 8004476:	69b9      	ldr	r1, [r7, #24]
 8004478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	2203      	movs	r2, #3
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 0203 	and.w	r2, r3, #3
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a2 	beq.w	8004602 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	4b57      	ldr	r3, [pc, #348]	; (8004620 <HAL_GPIO_Init+0x2e8>)
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	4a56      	ldr	r2, [pc, #344]	; (8004620 <HAL_GPIO_Init+0x2e8>)
 80044c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044cc:	6453      	str	r3, [r2, #68]	; 0x44
 80044ce:	4b54      	ldr	r3, [pc, #336]	; (8004620 <HAL_GPIO_Init+0x2e8>)
 80044d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044da:	4a52      	ldr	r2, [pc, #328]	; (8004624 <HAL_GPIO_Init+0x2ec>)
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	089b      	lsrs	r3, r3, #2
 80044e0:	3302      	adds	r3, #2
 80044e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	220f      	movs	r2, #15
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43db      	mvns	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a49      	ldr	r2, [pc, #292]	; (8004628 <HAL_GPIO_Init+0x2f0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d019      	beq.n	800453a <HAL_GPIO_Init+0x202>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a48      	ldr	r2, [pc, #288]	; (800462c <HAL_GPIO_Init+0x2f4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d013      	beq.n	8004536 <HAL_GPIO_Init+0x1fe>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a47      	ldr	r2, [pc, #284]	; (8004630 <HAL_GPIO_Init+0x2f8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00d      	beq.n	8004532 <HAL_GPIO_Init+0x1fa>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a46      	ldr	r2, [pc, #280]	; (8004634 <HAL_GPIO_Init+0x2fc>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d007      	beq.n	800452e <HAL_GPIO_Init+0x1f6>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a45      	ldr	r2, [pc, #276]	; (8004638 <HAL_GPIO_Init+0x300>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d101      	bne.n	800452a <HAL_GPIO_Init+0x1f2>
 8004526:	2304      	movs	r3, #4
 8004528:	e008      	b.n	800453c <HAL_GPIO_Init+0x204>
 800452a:	2307      	movs	r3, #7
 800452c:	e006      	b.n	800453c <HAL_GPIO_Init+0x204>
 800452e:	2303      	movs	r3, #3
 8004530:	e004      	b.n	800453c <HAL_GPIO_Init+0x204>
 8004532:	2302      	movs	r3, #2
 8004534:	e002      	b.n	800453c <HAL_GPIO_Init+0x204>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <HAL_GPIO_Init+0x204>
 800453a:	2300      	movs	r3, #0
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	f002 0203 	and.w	r2, r2, #3
 8004542:	0092      	lsls	r2, r2, #2
 8004544:	4093      	lsls	r3, r2
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4313      	orrs	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800454c:	4935      	ldr	r1, [pc, #212]	; (8004624 <HAL_GPIO_Init+0x2ec>)
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	089b      	lsrs	r3, r3, #2
 8004552:	3302      	adds	r3, #2
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800455a:	4b38      	ldr	r3, [pc, #224]	; (800463c <HAL_GPIO_Init+0x304>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	43db      	mvns	r3, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4013      	ands	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800457e:	4a2f      	ldr	r2, [pc, #188]	; (800463c <HAL_GPIO_Init+0x304>)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004584:	4b2d      	ldr	r3, [pc, #180]	; (800463c <HAL_GPIO_Init+0x304>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	43db      	mvns	r3, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4013      	ands	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045a8:	4a24      	ldr	r2, [pc, #144]	; (800463c <HAL_GPIO_Init+0x304>)
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045ae:	4b23      	ldr	r3, [pc, #140]	; (800463c <HAL_GPIO_Init+0x304>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	43db      	mvns	r3, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4013      	ands	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045d2:	4a1a      	ldr	r2, [pc, #104]	; (800463c <HAL_GPIO_Init+0x304>)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045d8:	4b18      	ldr	r3, [pc, #96]	; (800463c <HAL_GPIO_Init+0x304>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045fc:	4a0f      	ldr	r2, [pc, #60]	; (800463c <HAL_GPIO_Init+0x304>)
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	3301      	adds	r3, #1
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	2b0f      	cmp	r3, #15
 800460c:	f67f aea2 	bls.w	8004354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004610:	bf00      	nop
 8004612:	bf00      	nop
 8004614:	3724      	adds	r7, #36	; 0x24
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800
 8004624:	40013800 	.word	0x40013800
 8004628:	40020000 	.word	0x40020000
 800462c:	40020400 	.word	0x40020400
 8004630:	40020800 	.word	0x40020800
 8004634:	40020c00 	.word	0x40020c00
 8004638:	40021000 	.word	0x40021000
 800463c:	40013c00 	.word	0x40013c00

08004640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	807b      	strh	r3, [r7, #2]
 800464c:	4613      	mov	r3, r2
 800464e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004650:	787b      	ldrb	r3, [r7, #1]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004656:	887a      	ldrh	r2, [r7, #2]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800465c:	e003      	b.n	8004666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800465e:	887b      	ldrh	r3, [r7, #2]
 8004660:	041a      	lsls	r2, r3, #16
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	619a      	str	r2, [r3, #24]
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e12b      	b.n	80048de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fd f982 	bl	80019a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2224      	movs	r2, #36	; 0x24
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046d8:	f000 fd80 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 80046dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4a81      	ldr	r2, [pc, #516]	; (80048e8 <HAL_I2C_Init+0x274>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d807      	bhi.n	80046f8 <HAL_I2C_Init+0x84>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4a80      	ldr	r2, [pc, #512]	; (80048ec <HAL_I2C_Init+0x278>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	bf94      	ite	ls
 80046f0:	2301      	movls	r3, #1
 80046f2:	2300      	movhi	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e006      	b.n	8004706 <HAL_I2C_Init+0x92>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4a7d      	ldr	r2, [pc, #500]	; (80048f0 <HAL_I2C_Init+0x27c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	bf94      	ite	ls
 8004700:	2301      	movls	r3, #1
 8004702:	2300      	movhi	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e0e7      	b.n	80048de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4a78      	ldr	r2, [pc, #480]	; (80048f4 <HAL_I2C_Init+0x280>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	0c9b      	lsrs	r3, r3, #18
 8004718:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	4a6a      	ldr	r2, [pc, #424]	; (80048e8 <HAL_I2C_Init+0x274>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d802      	bhi.n	8004748 <HAL_I2C_Init+0xd4>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3301      	adds	r3, #1
 8004746:	e009      	b.n	800475c <HAL_I2C_Init+0xe8>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	4a69      	ldr	r2, [pc, #420]	; (80048f8 <HAL_I2C_Init+0x284>)
 8004754:	fba2 2303 	umull	r2, r3, r2, r3
 8004758:	099b      	lsrs	r3, r3, #6
 800475a:	3301      	adds	r3, #1
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	430b      	orrs	r3, r1
 8004762:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800476e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	495c      	ldr	r1, [pc, #368]	; (80048e8 <HAL_I2C_Init+0x274>)
 8004778:	428b      	cmp	r3, r1
 800477a:	d819      	bhi.n	80047b0 <HAL_I2C_Init+0x13c>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	1e59      	subs	r1, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	fbb1 f3f3 	udiv	r3, r1, r3
 800478a:	1c59      	adds	r1, r3, #1
 800478c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004790:	400b      	ands	r3, r1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_I2C_Init+0x138>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1e59      	subs	r1, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80047a4:	3301      	adds	r3, #1
 80047a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047aa:	e051      	b.n	8004850 <HAL_I2C_Init+0x1dc>
 80047ac:	2304      	movs	r3, #4
 80047ae:	e04f      	b.n	8004850 <HAL_I2C_Init+0x1dc>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d111      	bne.n	80047dc <HAL_I2C_Init+0x168>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	1e58      	subs	r0, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6859      	ldr	r1, [r3, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	440b      	add	r3, r1
 80047c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ca:	3301      	adds	r3, #1
 80047cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bf0c      	ite	eq
 80047d4:	2301      	moveq	r3, #1
 80047d6:	2300      	movne	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	e012      	b.n	8004802 <HAL_I2C_Init+0x18e>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	1e58      	subs	r0, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6859      	ldr	r1, [r3, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	0099      	lsls	r1, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f2:	3301      	adds	r3, #1
 80047f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_I2C_Init+0x196>
 8004806:	2301      	movs	r3, #1
 8004808:	e022      	b.n	8004850 <HAL_I2C_Init+0x1dc>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10e      	bne.n	8004830 <HAL_I2C_Init+0x1bc>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1e58      	subs	r0, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6859      	ldr	r1, [r3, #4]
 800481a:	460b      	mov	r3, r1
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	440b      	add	r3, r1
 8004820:	fbb0 f3f3 	udiv	r3, r0, r3
 8004824:	3301      	adds	r3, #1
 8004826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800482a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482e:	e00f      	b.n	8004850 <HAL_I2C_Init+0x1dc>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1e58      	subs	r0, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6859      	ldr	r1, [r3, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	0099      	lsls	r1, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	fbb0 f3f3 	udiv	r3, r0, r3
 8004846:	3301      	adds	r3, #1
 8004848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800484c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	6809      	ldr	r1, [r1, #0]
 8004854:	4313      	orrs	r3, r2
 8004856:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69da      	ldr	r2, [r3, #28]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800487e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6911      	ldr	r1, [r2, #16]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68d2      	ldr	r2, [r2, #12]
 800488a:	4311      	orrs	r1, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	430b      	orrs	r3, r1
 8004892:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	000186a0 	.word	0x000186a0
 80048ec:	001e847f 	.word	0x001e847f
 80048f0:	003d08ff 	.word	0x003d08ff
 80048f4:	431bde83 	.word	0x431bde83
 80048f8:	10624dd3 	.word	0x10624dd3

080048fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e267      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d075      	beq.n	8004a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800491a:	4b88      	ldr	r3, [pc, #544]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b04      	cmp	r3, #4
 8004924:	d00c      	beq.n	8004940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004926:	4b85      	ldr	r3, [pc, #532]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800492e:	2b08      	cmp	r3, #8
 8004930:	d112      	bne.n	8004958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004932:	4b82      	ldr	r3, [pc, #520]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800493e:	d10b      	bne.n	8004958 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	4b7e      	ldr	r3, [pc, #504]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d05b      	beq.n	8004a04 <HAL_RCC_OscConfig+0x108>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d157      	bne.n	8004a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e242      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004960:	d106      	bne.n	8004970 <HAL_RCC_OscConfig+0x74>
 8004962:	4b76      	ldr	r3, [pc, #472]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a75      	ldr	r2, [pc, #468]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	e01d      	b.n	80049ac <HAL_RCC_OscConfig+0xb0>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004978:	d10c      	bne.n	8004994 <HAL_RCC_OscConfig+0x98>
 800497a:	4b70      	ldr	r3, [pc, #448]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a6f      	ldr	r2, [pc, #444]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	4b6d      	ldr	r3, [pc, #436]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a6c      	ldr	r2, [pc, #432]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 800498c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	e00b      	b.n	80049ac <HAL_RCC_OscConfig+0xb0>
 8004994:	4b69      	ldr	r3, [pc, #420]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a68      	ldr	r2, [pc, #416]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 800499a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	4b66      	ldr	r3, [pc, #408]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a65      	ldr	r2, [pc, #404]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 80049a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d013      	beq.n	80049dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b4:	f7fe fd22 	bl	80033fc <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049bc:	f7fe fd1e 	bl	80033fc <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b64      	cmp	r3, #100	; 0x64
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e207      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ce:	4b5b      	ldr	r3, [pc, #364]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0xc0>
 80049da:	e014      	b.n	8004a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049dc:	f7fe fd0e 	bl	80033fc <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e4:	f7fe fd0a 	bl	80033fc <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b64      	cmp	r3, #100	; 0x64
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e1f3      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f6:	4b51      	ldr	r3, [pc, #324]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0xe8>
 8004a02:	e000      	b.n	8004a06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d063      	beq.n	8004ada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a12:	4b4a      	ldr	r3, [pc, #296]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a1e:	4b47      	ldr	r3, [pc, #284]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d11c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a2a:	4b44      	ldr	r3, [pc, #272]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d116      	bne.n	8004a64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a36:	4b41      	ldr	r3, [pc, #260]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <HAL_RCC_OscConfig+0x152>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d001      	beq.n	8004a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e1c7      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a4e:	4b3b      	ldr	r3, [pc, #236]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4937      	ldr	r1, [pc, #220]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a62:	e03a      	b.n	8004ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d020      	beq.n	8004aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a6c:	4b34      	ldr	r3, [pc, #208]	; (8004b40 <HAL_RCC_OscConfig+0x244>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a72:	f7fe fcc3 	bl	80033fc <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a7a:	f7fe fcbf 	bl	80033fc <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e1a8      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8c:	4b2b      	ldr	r3, [pc, #172]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a98:	4b28      	ldr	r3, [pc, #160]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	4925      	ldr	r1, [pc, #148]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	600b      	str	r3, [r1, #0]
 8004aac:	e015      	b.n	8004ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aae:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <HAL_RCC_OscConfig+0x244>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fe fca2 	bl	80033fc <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004abc:	f7fe fc9e 	bl	80033fc <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e187      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ace:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d036      	beq.n	8004b54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d016      	beq.n	8004b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aee:	4b15      	ldr	r3, [pc, #84]	; (8004b44 <HAL_RCC_OscConfig+0x248>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fe fc82 	bl	80033fc <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004afc:	f7fe fc7e 	bl	80033fc <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e167      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b0e:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f0      	beq.n	8004afc <HAL_RCC_OscConfig+0x200>
 8004b1a:	e01b      	b.n	8004b54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b1c:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <HAL_RCC_OscConfig+0x248>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b22:	f7fe fc6b 	bl	80033fc <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b28:	e00e      	b.n	8004b48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b2a:	f7fe fc67 	bl	80033fc <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d907      	bls.n	8004b48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e150      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	42470000 	.word	0x42470000
 8004b44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b48:	4b88      	ldr	r3, [pc, #544]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1ea      	bne.n	8004b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8097 	beq.w	8004c90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b62:	2300      	movs	r3, #0
 8004b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b66:	4b81      	ldr	r3, [pc, #516]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10f      	bne.n	8004b92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	4b7d      	ldr	r3, [pc, #500]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	4a7c      	ldr	r2, [pc, #496]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b80:	6413      	str	r3, [r2, #64]	; 0x40
 8004b82:	4b7a      	ldr	r3, [pc, #488]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b92:	4b77      	ldr	r3, [pc, #476]	; (8004d70 <HAL_RCC_OscConfig+0x474>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d118      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b9e:	4b74      	ldr	r3, [pc, #464]	; (8004d70 <HAL_RCC_OscConfig+0x474>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a73      	ldr	r2, [pc, #460]	; (8004d70 <HAL_RCC_OscConfig+0x474>)
 8004ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004baa:	f7fe fc27 	bl	80033fc <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb2:	f7fe fc23 	bl	80033fc <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e10c      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc4:	4b6a      	ldr	r3, [pc, #424]	; (8004d70 <HAL_RCC_OscConfig+0x474>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d106      	bne.n	8004be6 <HAL_RCC_OscConfig+0x2ea>
 8004bd8:	4b64      	ldr	r3, [pc, #400]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	4a63      	ldr	r2, [pc, #396]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	6713      	str	r3, [r2, #112]	; 0x70
 8004be4:	e01c      	b.n	8004c20 <HAL_RCC_OscConfig+0x324>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b05      	cmp	r3, #5
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCC_OscConfig+0x30c>
 8004bee:	4b5f      	ldr	r3, [pc, #380]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf2:	4a5e      	ldr	r2, [pc, #376]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004bf4:	f043 0304 	orr.w	r3, r3, #4
 8004bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bfa:	4b5c      	ldr	r3, [pc, #368]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	4a5b      	ldr	r2, [pc, #364]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	6713      	str	r3, [r2, #112]	; 0x70
 8004c06:	e00b      	b.n	8004c20 <HAL_RCC_OscConfig+0x324>
 8004c08:	4b58      	ldr	r3, [pc, #352]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0c:	4a57      	ldr	r2, [pc, #348]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c0e:	f023 0301 	bic.w	r3, r3, #1
 8004c12:	6713      	str	r3, [r2, #112]	; 0x70
 8004c14:	4b55      	ldr	r3, [pc, #340]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	4a54      	ldr	r2, [pc, #336]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c1a:	f023 0304 	bic.w	r3, r3, #4
 8004c1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d015      	beq.n	8004c54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c28:	f7fe fbe8 	bl	80033fc <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c2e:	e00a      	b.n	8004c46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c30:	f7fe fbe4 	bl	80033fc <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e0cb      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c46:	4b49      	ldr	r3, [pc, #292]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0ee      	beq.n	8004c30 <HAL_RCC_OscConfig+0x334>
 8004c52:	e014      	b.n	8004c7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c54:	f7fe fbd2 	bl	80033fc <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c5a:	e00a      	b.n	8004c72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c5c:	f7fe fbce 	bl	80033fc <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e0b5      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c72:	4b3e      	ldr	r3, [pc, #248]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1ee      	bne.n	8004c5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c7e:	7dfb      	ldrb	r3, [r7, #23]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d105      	bne.n	8004c90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c84:	4b39      	ldr	r3, [pc, #228]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	4a38      	ldr	r2, [pc, #224]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80a1 	beq.w	8004ddc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c9a:	4b34      	ldr	r3, [pc, #208]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d05c      	beq.n	8004d60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d141      	bne.n	8004d32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cae:	4b31      	ldr	r3, [pc, #196]	; (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb4:	f7fe fba2 	bl	80033fc <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cbc:	f7fe fb9e 	bl	80033fc <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e087      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cce:	4b27      	ldr	r3, [pc, #156]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f0      	bne.n	8004cbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69da      	ldr	r2, [r3, #28]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	019b      	lsls	r3, r3, #6
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	085b      	lsrs	r3, r3, #1
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	041b      	lsls	r3, r3, #16
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfc:	061b      	lsls	r3, r3, #24
 8004cfe:	491b      	ldr	r1, [pc, #108]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d04:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0a:	f7fe fb77 	bl	80033fc <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d12:	f7fe fb73 	bl	80033fc <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e05c      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d24:	4b11      	ldr	r3, [pc, #68]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f0      	beq.n	8004d12 <HAL_RCC_OscConfig+0x416>
 8004d30:	e054      	b.n	8004ddc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d32:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d38:	f7fe fb60 	bl	80033fc <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fe fb5c 	bl	80033fc <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e045      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d52:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <HAL_RCC_OscConfig+0x470>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0x444>
 8004d5e:	e03d      	b.n	8004ddc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d107      	bne.n	8004d78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e038      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	40007000 	.word	0x40007000
 8004d74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d78:	4b1b      	ldr	r3, [pc, #108]	; (8004de8 <HAL_RCC_OscConfig+0x4ec>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d028      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d121      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d11a      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004da8:	4013      	ands	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d111      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	085b      	lsrs	r3, r3, #1
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d107      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d001      	beq.n	8004ddc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e000      	b.n	8004dde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40023800 	.word	0x40023800

08004dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0cc      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e00:	4b68      	ldr	r3, [pc, #416]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d90c      	bls.n	8004e28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b65      	ldr	r3, [pc, #404]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e16:	4b63      	ldr	r3, [pc, #396]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d001      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0b8      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d020      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e40:	4b59      	ldr	r3, [pc, #356]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4a58      	ldr	r2, [pc, #352]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e58:	4b53      	ldr	r3, [pc, #332]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4a52      	ldr	r2, [pc, #328]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e64:	4b50      	ldr	r3, [pc, #320]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	494d      	ldr	r1, [pc, #308]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d044      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d107      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8a:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d119      	bne.n	8004eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e07f      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d003      	beq.n	8004eaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d107      	bne.n	8004eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eaa:	4b3f      	ldr	r3, [pc, #252]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e06f      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eba:	4b3b      	ldr	r3, [pc, #236]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e067      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eca:	4b37      	ldr	r3, [pc, #220]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f023 0203 	bic.w	r2, r3, #3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4934      	ldr	r1, [pc, #208]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004edc:	f7fe fa8e 	bl	80033fc <HAL_GetTick>
 8004ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee2:	e00a      	b.n	8004efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee4:	f7fe fa8a 	bl	80033fc <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e04f      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efa:	4b2b      	ldr	r3, [pc, #172]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 020c 	and.w	r2, r3, #12
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d1eb      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f0c:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d20c      	bcs.n	8004f34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1a:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f22:	4b20      	ldr	r3, [pc, #128]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d001      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e032      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f40:	4b19      	ldr	r3, [pc, #100]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4916      	ldr	r1, [pc, #88]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f5e:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	490e      	ldr	r1, [pc, #56]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f72:	f000 f821 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8004f76:	4602      	mov	r2, r0
 8004f78:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	490a      	ldr	r1, [pc, #40]	; (8004fac <HAL_RCC_ClockConfig+0x1c0>)
 8004f84:	5ccb      	ldrb	r3, [r1, r3]
 8004f86:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8a:	4a09      	ldr	r2, [pc, #36]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f8e:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fe f9ee 	bl	8003374 <HAL_InitTick>

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40023c00 	.word	0x40023c00
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	0800e1e0 	.word	0x0800e1e0
 8004fb0:	20000200 	.word	0x20000200
 8004fb4:	20000204 	.word	0x20000204

08004fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fbc:	b094      	sub	sp, #80	; 0x50
 8004fbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc8:	2300      	movs	r3, #0
 8004fca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fd0:	4b79      	ldr	r3, [pc, #484]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f003 030c 	and.w	r3, r3, #12
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d00d      	beq.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	f200 80e1 	bhi.w	80051a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <HAL_RCC_GetSysClockFreq+0x34>
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d003      	beq.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fea:	e0db      	b.n	80051a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fec:	4b73      	ldr	r3, [pc, #460]	; (80051bc <HAL_RCC_GetSysClockFreq+0x204>)
 8004fee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ff0:	e0db      	b.n	80051aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ff2:	4b73      	ldr	r3, [pc, #460]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ff4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ff6:	e0d8      	b.n	80051aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ff8:	4b6f      	ldr	r3, [pc, #444]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005002:	4b6d      	ldr	r3, [pc, #436]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d063      	beq.n	80050d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800500e:	4b6a      	ldr	r3, [pc, #424]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	099b      	lsrs	r3, r3, #6
 8005014:	2200      	movs	r2, #0
 8005016:	63bb      	str	r3, [r7, #56]	; 0x38
 8005018:	63fa      	str	r2, [r7, #60]	; 0x3c
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005020:	633b      	str	r3, [r7, #48]	; 0x30
 8005022:	2300      	movs	r3, #0
 8005024:	637b      	str	r3, [r7, #52]	; 0x34
 8005026:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800502a:	4622      	mov	r2, r4
 800502c:	462b      	mov	r3, r5
 800502e:	f04f 0000 	mov.w	r0, #0
 8005032:	f04f 0100 	mov.w	r1, #0
 8005036:	0159      	lsls	r1, r3, #5
 8005038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800503c:	0150      	lsls	r0, r2, #5
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4621      	mov	r1, r4
 8005044:	1a51      	subs	r1, r2, r1
 8005046:	6139      	str	r1, [r7, #16]
 8005048:	4629      	mov	r1, r5
 800504a:	eb63 0301 	sbc.w	r3, r3, r1
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800505c:	4659      	mov	r1, fp
 800505e:	018b      	lsls	r3, r1, #6
 8005060:	4651      	mov	r1, sl
 8005062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005066:	4651      	mov	r1, sl
 8005068:	018a      	lsls	r2, r1, #6
 800506a:	4651      	mov	r1, sl
 800506c:	ebb2 0801 	subs.w	r8, r2, r1
 8005070:	4659      	mov	r1, fp
 8005072:	eb63 0901 	sbc.w	r9, r3, r1
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800508a:	4690      	mov	r8, r2
 800508c:	4699      	mov	r9, r3
 800508e:	4623      	mov	r3, r4
 8005090:	eb18 0303 	adds.w	r3, r8, r3
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	462b      	mov	r3, r5
 8005098:	eb49 0303 	adc.w	r3, r9, r3
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050aa:	4629      	mov	r1, r5
 80050ac:	024b      	lsls	r3, r1, #9
 80050ae:	4621      	mov	r1, r4
 80050b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050b4:	4621      	mov	r1, r4
 80050b6:	024a      	lsls	r2, r1, #9
 80050b8:	4610      	mov	r0, r2
 80050ba:	4619      	mov	r1, r3
 80050bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050be:	2200      	movs	r2, #0
 80050c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050c8:	f7fb fde6 	bl	8000c98 <__aeabi_uldivmod>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4613      	mov	r3, r2
 80050d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d4:	e058      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050d6:	4b38      	ldr	r3, [pc, #224]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	099b      	lsrs	r3, r3, #6
 80050dc:	2200      	movs	r2, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	4611      	mov	r1, r2
 80050e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050e6:	623b      	str	r3, [r7, #32]
 80050e8:	2300      	movs	r3, #0
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
 80050ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050f0:	4642      	mov	r2, r8
 80050f2:	464b      	mov	r3, r9
 80050f4:	f04f 0000 	mov.w	r0, #0
 80050f8:	f04f 0100 	mov.w	r1, #0
 80050fc:	0159      	lsls	r1, r3, #5
 80050fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005102:	0150      	lsls	r0, r2, #5
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4641      	mov	r1, r8
 800510a:	ebb2 0a01 	subs.w	sl, r2, r1
 800510e:	4649      	mov	r1, r9
 8005110:	eb63 0b01 	sbc.w	fp, r3, r1
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005120:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005124:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005128:	ebb2 040a 	subs.w	r4, r2, sl
 800512c:	eb63 050b 	sbc.w	r5, r3, fp
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	00eb      	lsls	r3, r5, #3
 800513a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800513e:	00e2      	lsls	r2, r4, #3
 8005140:	4614      	mov	r4, r2
 8005142:	461d      	mov	r5, r3
 8005144:	4643      	mov	r3, r8
 8005146:	18e3      	adds	r3, r4, r3
 8005148:	603b      	str	r3, [r7, #0]
 800514a:	464b      	mov	r3, r9
 800514c:	eb45 0303 	adc.w	r3, r5, r3
 8005150:	607b      	str	r3, [r7, #4]
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800515e:	4629      	mov	r1, r5
 8005160:	028b      	lsls	r3, r1, #10
 8005162:	4621      	mov	r1, r4
 8005164:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005168:	4621      	mov	r1, r4
 800516a:	028a      	lsls	r2, r1, #10
 800516c:	4610      	mov	r0, r2
 800516e:	4619      	mov	r1, r3
 8005170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005172:	2200      	movs	r2, #0
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	61fa      	str	r2, [r7, #28]
 8005178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800517c:	f7fb fd8c 	bl	8000c98 <__aeabi_uldivmod>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4613      	mov	r3, r2
 8005186:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	0c1b      	lsrs	r3, r3, #16
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	3301      	adds	r3, #1
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005198:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800519a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800519c:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051a2:	e002      	b.n	80051aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051a4:	4b05      	ldr	r3, [pc, #20]	; (80051bc <HAL_RCC_GetSysClockFreq+0x204>)
 80051a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3750      	adds	r7, #80	; 0x50
 80051b0:	46bd      	mov	sp, r7
 80051b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051b6:	bf00      	nop
 80051b8:	40023800 	.word	0x40023800
 80051bc:	00f42400 	.word	0x00f42400
 80051c0:	007a1200 	.word	0x007a1200

080051c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c8:	4b03      	ldr	r3, [pc, #12]	; (80051d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051ca:	681b      	ldr	r3, [r3, #0]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	20000200 	.word	0x20000200

080051dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051e0:	f7ff fff0 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 80051e4:	4602      	mov	r2, r0
 80051e6:	4b05      	ldr	r3, [pc, #20]	; (80051fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	0a9b      	lsrs	r3, r3, #10
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	4903      	ldr	r1, [pc, #12]	; (8005200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051f2:	5ccb      	ldrb	r3, [r1, r3]
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40023800 	.word	0x40023800
 8005200:	0800e1f0 	.word	0x0800e1f0

08005204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005208:	f7ff ffdc 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 800520c:	4602      	mov	r2, r0
 800520e:	4b05      	ldr	r3, [pc, #20]	; (8005224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	0b5b      	lsrs	r3, r3, #13
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	4903      	ldr	r1, [pc, #12]	; (8005228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800521a:	5ccb      	ldrb	r3, [r1, r3]
 800521c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005220:	4618      	mov	r0, r3
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40023800 	.word	0x40023800
 8005228:	0800e1f0 	.word	0x0800e1f0

0800522c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e04c      	b.n	80052d8 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d111      	bne.n	800526e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f001 fc16 	bl	8006a84 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800525c:	2b00      	cmp	r3, #0
 800525e:	d102      	bne.n	8005266 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <HAL_TIM_Base_Init+0xb4>)
 8005264:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2202      	movs	r2, #2
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3304      	adds	r3, #4
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f001 f933 	bl	80064ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	08002eed 	.word	0x08002eed

080052e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d001      	beq.n	80052fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e03c      	b.n	8005376 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a1e      	ldr	r2, [pc, #120]	; (8005384 <HAL_TIM_Base_Start+0xa0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d018      	beq.n	8005340 <HAL_TIM_Base_Start+0x5c>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005316:	d013      	beq.n	8005340 <HAL_TIM_Base_Start+0x5c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a1a      	ldr	r2, [pc, #104]	; (8005388 <HAL_TIM_Base_Start+0xa4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00e      	beq.n	8005340 <HAL_TIM_Base_Start+0x5c>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a19      	ldr	r2, [pc, #100]	; (800538c <HAL_TIM_Base_Start+0xa8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d009      	beq.n	8005340 <HAL_TIM_Base_Start+0x5c>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a17      	ldr	r2, [pc, #92]	; (8005390 <HAL_TIM_Base_Start+0xac>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d004      	beq.n	8005340 <HAL_TIM_Base_Start+0x5c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a16      	ldr	r2, [pc, #88]	; (8005394 <HAL_TIM_Base_Start+0xb0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d111      	bne.n	8005364 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b06      	cmp	r3, #6
 8005350:	d010      	beq.n	8005374 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0201 	orr.w	r2, r2, #1
 8005360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005362:	e007      	b.n	8005374 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0201 	orr.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40010000 	.word	0x40010000
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40014000 	.word	0x40014000

08005398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d001      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e044      	b.n	800543a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1e      	ldr	r2, [pc, #120]	; (8005448 <HAL_TIM_Base_Start_IT+0xb0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d018      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x6c>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053da:	d013      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x6c>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1a      	ldr	r2, [pc, #104]	; (800544c <HAL_TIM_Base_Start_IT+0xb4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00e      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x6c>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a19      	ldr	r2, [pc, #100]	; (8005450 <HAL_TIM_Base_Start_IT+0xb8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d009      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x6c>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a17      	ldr	r2, [pc, #92]	; (8005454 <HAL_TIM_Base_Start_IT+0xbc>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d004      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x6c>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a16      	ldr	r2, [pc, #88]	; (8005458 <HAL_TIM_Base_Start_IT+0xc0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d111      	bne.n	8005428 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b06      	cmp	r3, #6
 8005414:	d010      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0201 	orr.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005426:	e007      	b.n	8005438 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40010000 	.word	0x40010000
 800544c:	40000400 	.word	0x40000400
 8005450:	40000800 	.word	0x40000800
 8005454:	40000c00 	.word	0x40000c00
 8005458:	40014000 	.word	0x40014000

0800545c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e04c      	b.n	8005508 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d111      	bne.n	800549e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f001 fafe 	bl	8006a84 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548c:	2b00      	cmp	r3, #0
 800548e:	d102      	bne.n	8005496 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <HAL_TIM_OC_Init+0xb4>)
 8005494:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4619      	mov	r1, r3
 80054b0:	4610      	mov	r0, r2
 80054b2:	f001 f81b 	bl	80064ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	08005515 	.word	0x08005515

08005514 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e04c      	b.n	80055d4 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d111      	bne.n	800556a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f001 fa98 	bl	8006a84 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005558:	2b00      	cmp	r3, #0
 800555a:	d102      	bne.n	8005562 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a1f      	ldr	r2, [pc, #124]	; (80055dc <HAL_TIM_PWM_Init+0xb4>)
 8005560:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2202      	movs	r2, #2
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3304      	adds	r3, #4
 800557a:	4619      	mov	r1, r3
 800557c:	4610      	mov	r0, r2
 800557e:	f000 ffb5 	bl	80064ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	080055e1 	.word	0x080055e1

080055e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d109      	bne.n	8005618 <HAL_TIM_PWM_Start+0x24>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b01      	cmp	r3, #1
 800560e:	bf14      	ite	ne
 8005610:	2301      	movne	r3, #1
 8005612:	2300      	moveq	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	e022      	b.n	800565e <HAL_TIM_PWM_Start+0x6a>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b04      	cmp	r3, #4
 800561c:	d109      	bne.n	8005632 <HAL_TIM_PWM_Start+0x3e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b01      	cmp	r3, #1
 8005628:	bf14      	ite	ne
 800562a:	2301      	movne	r3, #1
 800562c:	2300      	moveq	r3, #0
 800562e:	b2db      	uxtb	r3, r3
 8005630:	e015      	b.n	800565e <HAL_TIM_PWM_Start+0x6a>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b08      	cmp	r3, #8
 8005636:	d109      	bne.n	800564c <HAL_TIM_PWM_Start+0x58>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	bf14      	ite	ne
 8005644:	2301      	movne	r3, #1
 8005646:	2300      	moveq	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	e008      	b.n	800565e <HAL_TIM_PWM_Start+0x6a>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	bf14      	ite	ne
 8005658:	2301      	movne	r3, #1
 800565a:	2300      	moveq	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e068      	b.n	8005738 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d104      	bne.n	8005676 <HAL_TIM_PWM_Start+0x82>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005674:	e013      	b.n	800569e <HAL_TIM_PWM_Start+0xaa>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b04      	cmp	r3, #4
 800567a:	d104      	bne.n	8005686 <HAL_TIM_PWM_Start+0x92>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005684:	e00b      	b.n	800569e <HAL_TIM_PWM_Start+0xaa>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b08      	cmp	r3, #8
 800568a:	d104      	bne.n	8005696 <HAL_TIM_PWM_Start+0xa2>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005694:	e003      	b.n	800569e <HAL_TIM_PWM_Start+0xaa>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2202      	movs	r2, #2
 800569a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2201      	movs	r2, #1
 80056a4:	6839      	ldr	r1, [r7, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 f9c6 	bl	8006a38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a23      	ldr	r2, [pc, #140]	; (8005740 <HAL_TIM_PWM_Start+0x14c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d107      	bne.n	80056c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1d      	ldr	r2, [pc, #116]	; (8005740 <HAL_TIM_PWM_Start+0x14c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d018      	beq.n	8005702 <HAL_TIM_PWM_Start+0x10e>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d8:	d013      	beq.n	8005702 <HAL_TIM_PWM_Start+0x10e>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a19      	ldr	r2, [pc, #100]	; (8005744 <HAL_TIM_PWM_Start+0x150>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00e      	beq.n	8005702 <HAL_TIM_PWM_Start+0x10e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a17      	ldr	r2, [pc, #92]	; (8005748 <HAL_TIM_PWM_Start+0x154>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d009      	beq.n	8005702 <HAL_TIM_PWM_Start+0x10e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a16      	ldr	r2, [pc, #88]	; (800574c <HAL_TIM_PWM_Start+0x158>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d004      	beq.n	8005702 <HAL_TIM_PWM_Start+0x10e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a14      	ldr	r2, [pc, #80]	; (8005750 <HAL_TIM_PWM_Start+0x15c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d111      	bne.n	8005726 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b06      	cmp	r3, #6
 8005712:	d010      	beq.n	8005736 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005724:	e007      	b.n	8005736 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0201 	orr.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40010000 	.word	0x40010000
 8005744:	40000400 	.word	0x40000400
 8005748:	40000800 	.word	0x40000800
 800574c:	40000c00 	.word	0x40000c00
 8005750:	40014000 	.word	0x40014000

08005754 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e04c      	b.n	8005802 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d111      	bne.n	8005798 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f001 f981 	bl	8006a84 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005786:	2b00      	cmp	r3, #0
 8005788:	d102      	bne.n	8005790 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a1f      	ldr	r2, [pc, #124]	; (800580c <HAL_TIM_OnePulse_Init+0xb8>)
 800578e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3304      	adds	r3, #4
 80057a8:	4619      	mov	r1, r3
 80057aa:	4610      	mov	r0, r2
 80057ac:	f000 fe9e 	bl	80064ec <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0208 	bic.w	r2, r2, #8
 80057be:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6819      	ldr	r1, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	08005811 	.word	0x08005811

08005810 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005834:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800583c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005844:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800584c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d108      	bne.n	8005866 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005854:	7bbb      	ldrb	r3, [r7, #14]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d105      	bne.n	8005866 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800585a:	7b7b      	ldrb	r3, [r7, #13]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d102      	bne.n	8005866 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005860:	7b3b      	ldrb	r3, [r7, #12]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d001      	beq.n	800586a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e03b      	b.n	80058e2 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2202      	movs	r2, #2
 800586e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2202      	movs	r2, #2
 8005876:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2202      	movs	r2, #2
 800587e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2202      	movs	r2, #2
 8005886:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0202 	orr.w	r2, r2, #2
 8005898:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0204 	orr.w	r2, r2, #4
 80058a8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2201      	movs	r2, #1
 80058b0:	2100      	movs	r1, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	f001 f8c0 	bl	8006a38 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2201      	movs	r2, #1
 80058be:	2104      	movs	r1, #4
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 f8b9 	bl	8006a38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a08      	ldr	r2, [pc, #32]	; (80058ec <HAL_TIM_OnePulse_Start_IT+0xc8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d107      	bne.n	80058e0 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	40010000 	.word	0x40010000

080058f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e0a2      	b.n	8005a4a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d111      	bne.n	8005934 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f001 f8b3 	bl	8006a84 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a4a      	ldr	r2, [pc, #296]	; (8005a54 <HAL_TIM_Encoder_Init+0x164>)
 800592a:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800594a:	f023 0307 	bic.w	r3, r3, #7
 800594e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3304      	adds	r3, #4
 8005958:	4619      	mov	r1, r3
 800595a:	4610      	mov	r0, r2
 800595c:	f000 fdc6 	bl	80064ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005988:	f023 0303 	bic.w	r3, r3, #3
 800598c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	4313      	orrs	r3, r2
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80059a6:	f023 030c 	bic.w	r3, r3, #12
 80059aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	4313      	orrs	r3, r2
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	011a      	lsls	r2, r3, #4
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	031b      	lsls	r3, r3, #12
 80059d6:	4313      	orrs	r3, r2
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80059e4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80059ec:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	4313      	orrs	r3, r2
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3718      	adds	r7, #24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	08002fc5 	.word	0x08002fc5

08005a58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d110      	bne.n	8005aaa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d102      	bne.n	8005a94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a8e:	7b7b      	ldrb	r3, [r7, #13]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d001      	beq.n	8005a98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e069      	b.n	8005b6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aa8:	e031      	b.n	8005b0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d110      	bne.n	8005ad2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ab0:	7bbb      	ldrb	r3, [r7, #14]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d102      	bne.n	8005abc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ab6:	7b3b      	ldrb	r3, [r7, #12]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d001      	beq.n	8005ac0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e055      	b.n	8005b6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ad0:	e01d      	b.n	8005b0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d108      	bne.n	8005aea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ad8:	7bbb      	ldrb	r3, [r7, #14]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d105      	bne.n	8005aea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ade:	7b7b      	ldrb	r3, [r7, #13]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d102      	bne.n	8005aea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ae4:	7b3b      	ldrb	r3, [r7, #12]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d001      	beq.n	8005aee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e03e      	b.n	8005b6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2202      	movs	r2, #2
 8005af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2202      	movs	r2, #2
 8005b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <HAL_TIM_Encoder_Start+0xc4>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d008      	beq.n	8005b2c <HAL_TIM_Encoder_Start+0xd4>
 8005b1a:	e00f      	b.n	8005b3c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2201      	movs	r2, #1
 8005b22:	2100      	movs	r1, #0
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 ff87 	bl	8006a38 <TIM_CCxChannelCmd>
      break;
 8005b2a:	e016      	b.n	8005b5a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2201      	movs	r2, #1
 8005b32:	2104      	movs	r1, #4
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 ff7f 	bl	8006a38 <TIM_CCxChannelCmd>
      break;
 8005b3a:	e00e      	b.n	8005b5a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2201      	movs	r2, #1
 8005b42:	2100      	movs	r1, #0
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 ff77 	bl	8006a38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	2104      	movs	r1, #4
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 ff70 	bl	8006a38 <TIM_CCxChannelCmd>
      break;
 8005b58:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f042 0201 	orr.w	r2, r2, #1
 8005b68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d128      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d121      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0202 	mvn.w	r2, #2
 8005ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d005      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	4798      	blx	r3
 8005bc0:	e009      	b.n	8005bd6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d128      	bne.n	8005c3c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d121      	bne.n	8005c3c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0204 	mvn.w	r2, #4
 8005c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2202      	movs	r2, #2
 8005c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d005      	beq.n	8005c22 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
 8005c20:	e009      	b.n	8005c36 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	d128      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d121      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f06f 0208 	mvn.w	r2, #8
 8005c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2204      	movs	r2, #4
 8005c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d005      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	4798      	blx	r3
 8005c80:	e009      	b.n	8005c96 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	2b10      	cmp	r3, #16
 8005ca8:	d128      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d121      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0210 	mvn.w	r2, #16
 8005cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d005      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	4798      	blx	r3
 8005ce0:	e009      	b.n	8005cf6 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d110      	bne.n	8005d2c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d109      	bne.n	8005d2c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f06f 0201 	mvn.w	r2, #1
 8005d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d36:	2b80      	cmp	r3, #128	; 0x80
 8005d38:	d110      	bne.n	8005d5c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d44:	2b80      	cmp	r3, #128	; 0x80
 8005d46:	d109      	bne.n	8005d5c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d66:	2b40      	cmp	r3, #64	; 0x40
 8005d68:	d110      	bne.n	8005d8c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d74:	2b40      	cmp	r3, #64	; 0x40
 8005d76:	d109      	bne.n	8005d8c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d110      	bne.n	8005dbc <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d109      	bne.n	8005dbc <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f06f 0220 	mvn.w	r2, #32
 8005db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dbc:	bf00      	nop
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d101      	bne.n	8005de2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005dde:	2302      	movs	r3, #2
 8005de0:	e048      	b.n	8005e74 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b0c      	cmp	r3, #12
 8005dee:	d839      	bhi.n	8005e64 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005df0:	a201      	add	r2, pc, #4	; (adr r2, 8005df8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df6:	bf00      	nop
 8005df8:	08005e2d 	.word	0x08005e2d
 8005dfc:	08005e65 	.word	0x08005e65
 8005e00:	08005e65 	.word	0x08005e65
 8005e04:	08005e65 	.word	0x08005e65
 8005e08:	08005e3b 	.word	0x08005e3b
 8005e0c:	08005e65 	.word	0x08005e65
 8005e10:	08005e65 	.word	0x08005e65
 8005e14:	08005e65 	.word	0x08005e65
 8005e18:	08005e49 	.word	0x08005e49
 8005e1c:	08005e65 	.word	0x08005e65
 8005e20:	08005e65 	.word	0x08005e65
 8005e24:	08005e65 	.word	0x08005e65
 8005e28:	08005e57 	.word	0x08005e57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68b9      	ldr	r1, [r7, #8]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 fbda 	bl	80065ec <TIM_OC1_SetConfig>
      break;
 8005e38:	e017      	b.n	8005e6a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68b9      	ldr	r1, [r7, #8]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 fc39 	bl	80066b8 <TIM_OC2_SetConfig>
      break;
 8005e46:	e010      	b.n	8005e6a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68b9      	ldr	r1, [r7, #8]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fc9e 	bl	8006790 <TIM_OC3_SetConfig>
      break;
 8005e54:	e009      	b.n	8005e6a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fd01 	bl	8006864 <TIM_OC4_SetConfig>
      break;
 8005e62:	e002      	b.n	8005e6a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	75fb      	strb	r3, [r7, #23]
      break;
 8005e68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e0ae      	b.n	8005ff8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b0c      	cmp	r3, #12
 8005ea6:	f200 809f 	bhi.w	8005fe8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005eaa:	a201      	add	r2, pc, #4	; (adr r2, 8005eb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb0:	08005ee5 	.word	0x08005ee5
 8005eb4:	08005fe9 	.word	0x08005fe9
 8005eb8:	08005fe9 	.word	0x08005fe9
 8005ebc:	08005fe9 	.word	0x08005fe9
 8005ec0:	08005f25 	.word	0x08005f25
 8005ec4:	08005fe9 	.word	0x08005fe9
 8005ec8:	08005fe9 	.word	0x08005fe9
 8005ecc:	08005fe9 	.word	0x08005fe9
 8005ed0:	08005f67 	.word	0x08005f67
 8005ed4:	08005fe9 	.word	0x08005fe9
 8005ed8:	08005fe9 	.word	0x08005fe9
 8005edc:	08005fe9 	.word	0x08005fe9
 8005ee0:	08005fa7 	.word	0x08005fa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68b9      	ldr	r1, [r7, #8]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fb7e 	bl	80065ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699a      	ldr	r2, [r3, #24]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0208 	orr.w	r2, r2, #8
 8005efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699a      	ldr	r2, [r3, #24]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0204 	bic.w	r2, r2, #4
 8005f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6999      	ldr	r1, [r3, #24]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	691a      	ldr	r2, [r3, #16]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	619a      	str	r2, [r3, #24]
      break;
 8005f22:	e064      	b.n	8005fee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fbc4 	bl	80066b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6999      	ldr	r1, [r3, #24]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	021a      	lsls	r2, r3, #8
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	619a      	str	r2, [r3, #24]
      break;
 8005f64:	e043      	b.n	8005fee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fc0f 	bl	8006790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f042 0208 	orr.w	r2, r2, #8
 8005f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0204 	bic.w	r2, r2, #4
 8005f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69d9      	ldr	r1, [r3, #28]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	691a      	ldr	r2, [r3, #16]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	61da      	str	r2, [r3, #28]
      break;
 8005fa4:	e023      	b.n	8005fee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fc59 	bl	8006864 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69da      	ldr	r2, [r3, #28]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69d9      	ldr	r1, [r3, #28]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	021a      	lsls	r2, r3, #8
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	61da      	str	r2, [r3, #28]
      break;
 8005fe6:	e002      	b.n	8005fee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	75fb      	strb	r3, [r7, #23]
      break;
 8005fec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_TIM_ConfigClockSource+0x1c>
 8006018:	2302      	movs	r3, #2
 800601a:	e0b4      	b.n	8006186 <HAL_TIM_ConfigClockSource+0x186>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800603a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006042:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006054:	d03e      	beq.n	80060d4 <HAL_TIM_ConfigClockSource+0xd4>
 8006056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800605a:	f200 8087 	bhi.w	800616c <HAL_TIM_ConfigClockSource+0x16c>
 800605e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006062:	f000 8086 	beq.w	8006172 <HAL_TIM_ConfigClockSource+0x172>
 8006066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606a:	d87f      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 800606c:	2b70      	cmp	r3, #112	; 0x70
 800606e:	d01a      	beq.n	80060a6 <HAL_TIM_ConfigClockSource+0xa6>
 8006070:	2b70      	cmp	r3, #112	; 0x70
 8006072:	d87b      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 8006074:	2b60      	cmp	r3, #96	; 0x60
 8006076:	d050      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x11a>
 8006078:	2b60      	cmp	r3, #96	; 0x60
 800607a:	d877      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 800607c:	2b50      	cmp	r3, #80	; 0x50
 800607e:	d03c      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0xfa>
 8006080:	2b50      	cmp	r3, #80	; 0x50
 8006082:	d873      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d058      	beq.n	800613a <HAL_TIM_ConfigClockSource+0x13a>
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d86f      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 800608c:	2b30      	cmp	r3, #48	; 0x30
 800608e:	d064      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15a>
 8006090:	2b30      	cmp	r3, #48	; 0x30
 8006092:	d86b      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 8006094:	2b20      	cmp	r3, #32
 8006096:	d060      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15a>
 8006098:	2b20      	cmp	r3, #32
 800609a:	d867      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d05c      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15a>
 80060a0:	2b10      	cmp	r3, #16
 80060a2:	d05a      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15a>
 80060a4:	e062      	b.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6899      	ldr	r1, [r3, #8]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f000 fc9f 	bl	80069f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	609a      	str	r2, [r3, #8]
      break;
 80060d2:	e04f      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	6899      	ldr	r1, [r3, #8]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f000 fc88 	bl	80069f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060f6:	609a      	str	r2, [r3, #8]
      break;
 80060f8:	e03c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	6859      	ldr	r1, [r3, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	461a      	mov	r2, r3
 8006108:	f000 fbfc 	bl	8006904 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2150      	movs	r1, #80	; 0x50
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fc55 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8006118:	e02c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6818      	ldr	r0, [r3, #0]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	6859      	ldr	r1, [r3, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	461a      	mov	r2, r3
 8006128:	f000 fc1b 	bl	8006962 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2160      	movs	r1, #96	; 0x60
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fc45 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8006138:	e01c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6859      	ldr	r1, [r3, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	461a      	mov	r2, r3
 8006148:	f000 fbdc 	bl	8006904 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2140      	movs	r1, #64	; 0x40
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fc35 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8006158:	e00c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4619      	mov	r1, r3
 8006164:	4610      	mov	r0, r2
 8006166:	f000 fc2c 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 800616a:	e003      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	73fb      	strb	r3, [r7, #15]
      break;
 8006170:	e000      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80061aa:	bf00      	nop
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
	...

08006258 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	460b      	mov	r3, r1
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e135      	b.n	80064e0 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_TIM_RegisterCallback+0x2a>
 800627e:	2302      	movs	r3, #2
 8006280:	e12e      	b.n	80064e0 <HAL_TIM_RegisterCallback+0x288>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b01      	cmp	r3, #1
 8006294:	f040 80ba 	bne.w	800640c <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8006298:	7afb      	ldrb	r3, [r7, #11]
 800629a:	2b1a      	cmp	r3, #26
 800629c:	f200 80b3 	bhi.w	8006406 <HAL_TIM_RegisterCallback+0x1ae>
 80062a0:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <HAL_TIM_RegisterCallback+0x50>)
 80062a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a6:	bf00      	nop
 80062a8:	08006315 	.word	0x08006315
 80062ac:	0800631d 	.word	0x0800631d
 80062b0:	08006325 	.word	0x08006325
 80062b4:	0800632d 	.word	0x0800632d
 80062b8:	08006335 	.word	0x08006335
 80062bc:	0800633d 	.word	0x0800633d
 80062c0:	08006345 	.word	0x08006345
 80062c4:	0800634d 	.word	0x0800634d
 80062c8:	08006355 	.word	0x08006355
 80062cc:	0800635d 	.word	0x0800635d
 80062d0:	08006365 	.word	0x08006365
 80062d4:	0800636d 	.word	0x0800636d
 80062d8:	08006375 	.word	0x08006375
 80062dc:	0800637d 	.word	0x0800637d
 80062e0:	08006385 	.word	0x08006385
 80062e4:	0800638f 	.word	0x0800638f
 80062e8:	08006399 	.word	0x08006399
 80062ec:	080063a3 	.word	0x080063a3
 80062f0:	080063ad 	.word	0x080063ad
 80062f4:	080063b7 	.word	0x080063b7
 80062f8:	080063c1 	.word	0x080063c1
 80062fc:	080063cb 	.word	0x080063cb
 8006300:	080063d5 	.word	0x080063d5
 8006304:	080063df 	.word	0x080063df
 8006308:	080063e9 	.word	0x080063e9
 800630c:	080063f3 	.word	0x080063f3
 8006310:	080063fd 	.word	0x080063fd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800631a:	e0dc      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006322:	e0d8      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800632a:	e0d4      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006332:	e0d0      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800633a:	e0cc      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006342:	e0c8      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800634a:	e0c4      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006352:	e0c0      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800635a:	e0bc      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006362:	e0b8      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800636a:	e0b4      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006372:	e0b0      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800637a:	e0ac      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006382:	e0a8      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800638c:	e0a3      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8006396:	e09e      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80063a0:	e099      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80063aa:	e094      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80063b4:	e08f      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80063be:	e08a      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80063c8:	e085      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80063d2:	e080      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80063dc:	e07b      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80063e6:	e076      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80063f0:	e071      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80063fa:	e06c      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8006404:	e067      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	75fb      	strb	r3, [r7, #23]
        break;
 800640a:	e064      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d15c      	bne.n	80064d2 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8006418:	7afb      	ldrb	r3, [r7, #11]
 800641a:	2b0d      	cmp	r3, #13
 800641c:	d856      	bhi.n	80064cc <HAL_TIM_RegisterCallback+0x274>
 800641e:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <HAL_TIM_RegisterCallback+0x1cc>)
 8006420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006424:	0800645d 	.word	0x0800645d
 8006428:	08006465 	.word	0x08006465
 800642c:	0800646d 	.word	0x0800646d
 8006430:	08006475 	.word	0x08006475
 8006434:	0800647d 	.word	0x0800647d
 8006438:	08006485 	.word	0x08006485
 800643c:	0800648d 	.word	0x0800648d
 8006440:	08006495 	.word	0x08006495
 8006444:	0800649d 	.word	0x0800649d
 8006448:	080064a5 	.word	0x080064a5
 800644c:	080064ad 	.word	0x080064ad
 8006450:	080064b5 	.word	0x080064b5
 8006454:	080064bd 	.word	0x080064bd
 8006458:	080064c5 	.word	0x080064c5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006462:	e038      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800646a:	e034      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006472:	e030      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800647a:	e02c      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006482:	e028      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800648a:	e024      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006492:	e020      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800649a:	e01c      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80064a2:	e018      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80064aa:	e014      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80064b2:	e010      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80064ba:	e00c      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80064c2:	e008      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80064ca:	e004      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	75fb      	strb	r3, [r7, #23]
        break;
 80064d0:	e001      	b.n	80064d6 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064de:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	371c      	adds	r7, #28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a34      	ldr	r2, [pc, #208]	; (80065d0 <TIM_Base_SetConfig+0xe4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00f      	beq.n	8006524 <TIM_Base_SetConfig+0x38>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650a:	d00b      	beq.n	8006524 <TIM_Base_SetConfig+0x38>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a31      	ldr	r2, [pc, #196]	; (80065d4 <TIM_Base_SetConfig+0xe8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d007      	beq.n	8006524 <TIM_Base_SetConfig+0x38>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a30      	ldr	r2, [pc, #192]	; (80065d8 <TIM_Base_SetConfig+0xec>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_Base_SetConfig+0x38>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a2f      	ldr	r2, [pc, #188]	; (80065dc <TIM_Base_SetConfig+0xf0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d108      	bne.n	8006536 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a25      	ldr	r2, [pc, #148]	; (80065d0 <TIM_Base_SetConfig+0xe4>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d01b      	beq.n	8006576 <TIM_Base_SetConfig+0x8a>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006544:	d017      	beq.n	8006576 <TIM_Base_SetConfig+0x8a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a22      	ldr	r2, [pc, #136]	; (80065d4 <TIM_Base_SetConfig+0xe8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d013      	beq.n	8006576 <TIM_Base_SetConfig+0x8a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a21      	ldr	r2, [pc, #132]	; (80065d8 <TIM_Base_SetConfig+0xec>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00f      	beq.n	8006576 <TIM_Base_SetConfig+0x8a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a20      	ldr	r2, [pc, #128]	; (80065dc <TIM_Base_SetConfig+0xf0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00b      	beq.n	8006576 <TIM_Base_SetConfig+0x8a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a1f      	ldr	r2, [pc, #124]	; (80065e0 <TIM_Base_SetConfig+0xf4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d007      	beq.n	8006576 <TIM_Base_SetConfig+0x8a>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a1e      	ldr	r2, [pc, #120]	; (80065e4 <TIM_Base_SetConfig+0xf8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d003      	beq.n	8006576 <TIM_Base_SetConfig+0x8a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a1d      	ldr	r2, [pc, #116]	; (80065e8 <TIM_Base_SetConfig+0xfc>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d108      	bne.n	8006588 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800657c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	4313      	orrs	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a08      	ldr	r2, [pc, #32]	; (80065d0 <TIM_Base_SetConfig+0xe4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d103      	bne.n	80065bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	691a      	ldr	r2, [r3, #16]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	615a      	str	r2, [r3, #20]
}
 80065c2:	bf00      	nop
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40010000 	.word	0x40010000
 80065d4:	40000400 	.word	0x40000400
 80065d8:	40000800 	.word	0x40000800
 80065dc:	40000c00 	.word	0x40000c00
 80065e0:	40014000 	.word	0x40014000
 80065e4:	40014400 	.word	0x40014400
 80065e8:	40014800 	.word	0x40014800

080065ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f023 0201 	bic.w	r2, r3, #1
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0303 	bic.w	r3, r3, #3
 8006622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f023 0302 	bic.w	r3, r3, #2
 8006634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a1c      	ldr	r2, [pc, #112]	; (80066b4 <TIM_OC1_SetConfig+0xc8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d10c      	bne.n	8006662 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f023 0308 	bic.w	r3, r3, #8
 800664e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f023 0304 	bic.w	r3, r3, #4
 8006660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a13      	ldr	r2, [pc, #76]	; (80066b4 <TIM_OC1_SetConfig+0xc8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d111      	bne.n	800668e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	4313      	orrs	r3, r2
 8006682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	621a      	str	r2, [r3, #32]
}
 80066a8:	bf00      	nop
 80066aa:	371c      	adds	r7, #28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	40010000 	.word	0x40010000

080066b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	f023 0210 	bic.w	r2, r3, #16
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	021b      	lsls	r3, r3, #8
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f023 0320 	bic.w	r3, r3, #32
 8006702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a1e      	ldr	r2, [pc, #120]	; (800678c <TIM_OC2_SetConfig+0xd4>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d10d      	bne.n	8006734 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800671e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006732:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a15      	ldr	r2, [pc, #84]	; (800678c <TIM_OC2_SetConfig+0xd4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d113      	bne.n	8006764 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006742:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800674a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	4313      	orrs	r3, r2
 8006756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	4313      	orrs	r3, r2
 8006762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	621a      	str	r2, [r3, #32]
}
 800677e:	bf00      	nop
 8006780:	371c      	adds	r7, #28
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40010000 	.word	0x40010000

08006790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0303 	bic.w	r3, r3, #3
 80067c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a1d      	ldr	r2, [pc, #116]	; (8006860 <TIM_OC3_SetConfig+0xd0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d10d      	bne.n	800680a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	4313      	orrs	r3, r2
 8006800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a14      	ldr	r2, [pc, #80]	; (8006860 <TIM_OC3_SetConfig+0xd0>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d113      	bne.n	800683a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	011b      	lsls	r3, r3, #4
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	621a      	str	r2, [r3, #32]
}
 8006854:	bf00      	nop
 8006856:	371c      	adds	r7, #28
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	40010000 	.word	0x40010000

08006864 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	021b      	lsls	r3, r3, #8
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	031b      	lsls	r3, r3, #12
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a10      	ldr	r2, [pc, #64]	; (8006900 <TIM_OC4_SetConfig+0x9c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d109      	bne.n	80068d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	019b      	lsls	r3, r3, #6
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	621a      	str	r2, [r3, #32]
}
 80068f2:	bf00      	nop
 80068f4:	371c      	adds	r7, #28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40010000 	.word	0x40010000

08006904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	f023 0201 	bic.w	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800692e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	4313      	orrs	r3, r2
 8006938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f023 030a 	bic.w	r3, r3, #10
 8006940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006962:	b480      	push	{r7}
 8006964:	b087      	sub	sp, #28
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	f023 0210 	bic.w	r2, r3, #16
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800698c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	031b      	lsls	r3, r3, #12
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	4313      	orrs	r3, r2
 8006996:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800699e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	621a      	str	r2, [r3, #32]
}
 80069b6:	bf00      	nop
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b085      	sub	sp, #20
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	f043 0307 	orr.w	r3, r3, #7
 80069e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	609a      	str	r2, [r3, #8]
}
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	021a      	lsls	r2, r3, #8
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	609a      	str	r2, [r3, #8]
}
 8006a2c:	bf00      	nop
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f003 031f 	and.w	r3, r3, #31
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1a      	ldr	r2, [r3, #32]
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	401a      	ands	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a1a      	ldr	r2, [r3, #32]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a70:	431a      	orrs	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	621a      	str	r2, [r3, #32]
}
 8006a76:	bf00      	nop
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
	...

08006a84 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a1c      	ldr	r2, [pc, #112]	; (8006b00 <TIM_ResetCallback+0x7c>)
 8006a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a1b      	ldr	r2, [pc, #108]	; (8006b04 <TIM_ResetCallback+0x80>)
 8006a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a1a      	ldr	r2, [pc, #104]	; (8006b08 <TIM_ResetCallback+0x84>)
 8006aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <TIM_ResetCallback+0x88>)
 8006aa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a18      	ldr	r2, [pc, #96]	; (8006b10 <TIM_ResetCallback+0x8c>)
 8006ab0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a17      	ldr	r2, [pc, #92]	; (8006b14 <TIM_ResetCallback+0x90>)
 8006ab8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a16      	ldr	r2, [pc, #88]	; (8006b18 <TIM_ResetCallback+0x94>)
 8006ac0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a15      	ldr	r2, [pc, #84]	; (8006b1c <TIM_ResetCallback+0x98>)
 8006ac8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a14      	ldr	r2, [pc, #80]	; (8006b20 <TIM_ResetCallback+0x9c>)
 8006ad0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a13      	ldr	r2, [pc, #76]	; (8006b24 <TIM_ResetCallback+0xa0>)
 8006ad8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a12      	ldr	r2, [pc, #72]	; (8006b28 <TIM_ResetCallback+0xa4>)
 8006ae0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a11      	ldr	r2, [pc, #68]	; (8006b2c <TIM_ResetCallback+0xa8>)
 8006ae8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a10      	ldr	r2, [pc, #64]	; (8006b30 <TIM_ResetCallback+0xac>)
 8006af0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	0800618f 	.word	0x0800618f
 8006b04:	080061a3 	.word	0x080061a3
 8006b08:	0800621b 	.word	0x0800621b
 8006b0c:	0800622f 	.word	0x0800622f
 8006b10:	080061cb 	.word	0x080061cb
 8006b14:	080061df 	.word	0x080061df
 8006b18:	080061b7 	.word	0x080061b7
 8006b1c:	080061f3 	.word	0x080061f3
 8006b20:	08006207 	.word	0x08006207
 8006b24:	08006243 	.word	0x08006243
 8006b28:	08006cb5 	.word	0x08006cb5
 8006b2c:	08006cc9 	.word	0x08006cc9
 8006b30:	08006cdd 	.word	0x08006cdd

08006b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d101      	bne.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e050      	b.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a1c      	ldr	r2, [pc, #112]	; (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d018      	beq.n	8006bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b98:	d013      	beq.n	8006bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a18      	ldr	r2, [pc, #96]	; (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d00e      	beq.n	8006bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a16      	ldr	r2, [pc, #88]	; (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d009      	beq.n	8006bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a15      	ldr	r2, [pc, #84]	; (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d004      	beq.n	8006bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a13      	ldr	r2, [pc, #76]	; (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d10c      	bne.n	8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	40010000 	.word	0x40010000
 8006c00:	40000400 	.word	0x40000400
 8006c04:	40000800 	.word	0x40000800
 8006c08:	40000c00 	.word	0x40000c00
 8006c0c:	40014000 	.word	0x40014000

08006c10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d101      	bne.n	8006c2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e03d      	b.n	8006ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e04a      	b.n	8006d98 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d111      	bne.n	8006d32 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fd2c 	bl	8007774 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d102      	bne.n	8006d2a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a1e      	ldr	r2, [pc, #120]	; (8006da0 <HAL_UART_Init+0xb0>)
 8006d28:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2224      	movs	r2, #36	; 0x24
 8006d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d48:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fff6 	bl	8007d3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691a      	ldr	r2, [r3, #16]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	695a      	ldr	r2, [r3, #20]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d6e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d7e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	08003171 	.word	0x08003171

08006da4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	460b      	mov	r3, r1
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d107      	bne.n	8006dcc <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	f043 0220 	orr.w	r2, r3, #32
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e08c      	b.n	8006ee6 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d101      	bne.n	8006dda <HAL_UART_RegisterCallback+0x36>
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	e085      	b.n	8006ee6 <HAL_UART_RegisterCallback+0x142>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b20      	cmp	r3, #32
 8006dec:	d151      	bne.n	8006e92 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8006dee:	7afb      	ldrb	r3, [r7, #11]
 8006df0:	2b0c      	cmp	r3, #12
 8006df2:	d845      	bhi.n	8006e80 <HAL_UART_RegisterCallback+0xdc>
 8006df4:	a201      	add	r2, pc, #4	; (adr r2, 8006dfc <HAL_UART_RegisterCallback+0x58>)
 8006df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfa:	bf00      	nop
 8006dfc:	08006e31 	.word	0x08006e31
 8006e00:	08006e39 	.word	0x08006e39
 8006e04:	08006e41 	.word	0x08006e41
 8006e08:	08006e49 	.word	0x08006e49
 8006e0c:	08006e51 	.word	0x08006e51
 8006e10:	08006e59 	.word	0x08006e59
 8006e14:	08006e61 	.word	0x08006e61
 8006e18:	08006e69 	.word	0x08006e69
 8006e1c:	08006e81 	.word	0x08006e81
 8006e20:	08006e81 	.word	0x08006e81
 8006e24:	08006e81 	.word	0x08006e81
 8006e28:	08006e71 	.word	0x08006e71
 8006e2c:	08006e79 	.word	0x08006e79
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8006e36:	e051      	b.n	8006edc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006e3e:	e04d      	b.n	8006edc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006e46:	e049      	b.n	8006edc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006e4e:	e045      	b.n	8006edc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006e56:	e041      	b.n	8006edc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006e5e:	e03d      	b.n	8006edc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006e66:	e039      	b.n	8006edc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006e6e:	e035      	b.n	8006edc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006e76:	e031      	b.n	8006edc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006e7e:	e02d      	b.n	8006edc <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e84:	f043 0220 	orr.w	r2, r3, #32
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	75fb      	strb	r3, [r7, #23]
        break;
 8006e90:	e024      	b.n	8006edc <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d116      	bne.n	8006ecc <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8006e9e:	7afb      	ldrb	r3, [r7, #11]
 8006ea0:	2b0b      	cmp	r3, #11
 8006ea2:	d002      	beq.n	8006eaa <HAL_UART_RegisterCallback+0x106>
 8006ea4:	2b0c      	cmp	r3, #12
 8006ea6:	d004      	beq.n	8006eb2 <HAL_UART_RegisterCallback+0x10e>
 8006ea8:	e007      	b.n	8006eba <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006eb0:	e014      	b.n	8006edc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006eb8:	e010      	b.n	8006edc <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	f043 0220 	orr.w	r2, r3, #32
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	75fb      	strb	r3, [r7, #23]
        break;
 8006eca:	e007      	b.n	8006edc <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed0:	f043 0220 	orr.w	r2, r3, #32
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop

08006ef4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	4613      	mov	r3, r2
 8006f00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	d11d      	bne.n	8006f4a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <HAL_UART_Receive_IT+0x26>
 8006f14:	88fb      	ldrh	r3, [r7, #6]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e016      	b.n	8006f4c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d101      	bne.n	8006f2c <HAL_UART_Receive_IT+0x38>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e00f      	b.n	8006f4c <HAL_UART_Receive_IT+0x58>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f3a:	88fb      	ldrh	r3, [r7, #6]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 fcf7 	bl	8007934 <UART_Start_Receive_IT>
 8006f46:	4603      	mov	r3, r0
 8006f48:	e000      	b.n	8006f4c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006f4a:	2302      	movs	r3, #2
  }
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08c      	sub	sp, #48	; 0x30
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b20      	cmp	r3, #32
 8006f6c:	d165      	bne.n	800703a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <HAL_UART_Transmit_DMA+0x26>
 8006f74:	88fb      	ldrh	r3, [r7, #6]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e05e      	b.n	800703c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d101      	bne.n	8006f8c <HAL_UART_Transmit_DMA+0x38>
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e057      	b.n	800703c <HAL_UART_Transmit_DMA+0xe8>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	88fa      	ldrh	r2, [r7, #6]
 8006f9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	88fa      	ldrh	r2, [r7, #6]
 8006fa4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2221      	movs	r2, #33	; 0x21
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb8:	4a22      	ldr	r2, [pc, #136]	; (8007044 <HAL_UART_Transmit_DMA+0xf0>)
 8006fba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc0:	4a21      	ldr	r2, [pc, #132]	; (8007048 <HAL_UART_Transmit_DMA+0xf4>)
 8006fc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc8:	4a20      	ldr	r2, [pc, #128]	; (800704c <HAL_UART_Transmit_DMA+0xf8>)
 8006fca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006fd4:	f107 0308 	add.w	r3, r7, #8
 8006fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe0:	6819      	ldr	r1, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	461a      	mov	r2, r3
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	f7fc fe44 	bl	8003c78 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ff8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3314      	adds	r3, #20
 8007008:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	617b      	str	r3, [r7, #20]
   return(result);
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007018:	62bb      	str	r3, [r7, #40]	; 0x28
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3314      	adds	r3, #20
 8007020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007022:	627a      	str	r2, [r7, #36]	; 0x24
 8007024:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	6a39      	ldr	r1, [r7, #32]
 8007028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800702a:	e841 2300 	strex	r3, r2, [r1]
 800702e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e5      	bne.n	8007002 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	e000      	b.n	800703c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800703a:	2302      	movs	r3, #2
  }
}
 800703c:	4618      	mov	r0, r3
 800703e:	3730      	adds	r7, #48	; 0x30
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	080077e5 	.word	0x080077e5
 8007048:	08007881 	.word	0x08007881
 800704c:	0800789f 	.word	0x0800789f

08007050 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b09a      	sub	sp, #104	; 0x68
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	330c      	adds	r3, #12
 800705e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800706a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800706e:	667b      	str	r3, [r7, #100]	; 0x64
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	330c      	adds	r3, #12
 8007076:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007078:	657a      	str	r2, [r7, #84]	; 0x54
 800707a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800707e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007080:	e841 2300 	strex	r3, r2, [r1]
 8007084:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e5      	bne.n	8007058 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3314      	adds	r3, #20
 8007092:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007096:	e853 3f00 	ldrex	r3, [r3]
 800709a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709e:	f023 0301 	bic.w	r3, r3, #1
 80070a2:	663b      	str	r3, [r7, #96]	; 0x60
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	3314      	adds	r3, #20
 80070aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070ac:	643a      	str	r2, [r7, #64]	; 0x40
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070b4:	e841 2300 	strex	r3, r2, [r1]
 80070b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1e5      	bne.n	800708c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d119      	bne.n	80070fc <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	330c      	adds	r3, #12
 80070ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f023 0310 	bic.w	r3, r3, #16
 80070de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	330c      	adds	r3, #12
 80070e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e5      	bne.n	80070c8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007106:	2b40      	cmp	r3, #64	; 0x40
 8007108:	d136      	bne.n	8007178 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3314      	adds	r3, #20
 8007110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	e853 3f00 	ldrex	r3, [r3]
 8007118:	60bb      	str	r3, [r7, #8]
   return(result);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007120:	65bb      	str	r3, [r7, #88]	; 0x58
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3314      	adds	r3, #20
 8007128:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800712a:	61ba      	str	r2, [r7, #24]
 800712c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712e:	6979      	ldr	r1, [r7, #20]
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	613b      	str	r3, [r7, #16]
   return(result);
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1e5      	bne.n	800710a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007142:	2b00      	cmp	r3, #0
 8007144:	d018      	beq.n	8007178 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714a:	2200      	movs	r2, #0
 800714c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007152:	4618      	mov	r0, r3
 8007154:	f7fc fde8 	bl	8003d28 <HAL_DMA_Abort>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00c      	beq.n	8007178 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007162:	4618      	mov	r0, r3
 8007164:	f7fc fffc 	bl	8004160 <HAL_DMA_GetError>
 8007168:	4603      	mov	r3, r0
 800716a:	2b20      	cmp	r3, #32
 800716c:	d104      	bne.n	8007178 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2210      	movs	r2, #16
 8007172:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e00a      	b.n	800718e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2220      	movs	r2, #32
 8007182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3768      	adds	r7, #104	; 0x68
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b0ba      	sub	sp, #232	; 0xe8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80071be:	2300      	movs	r3, #0
 80071c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80071d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10f      	bne.n	80071fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e2:	f003 0320 	and.w	r3, r3, #32
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d009      	beq.n	80071fe <HAL_UART_IRQHandler+0x66>
 80071ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fce3 	bl	8007bc2 <UART_Receive_IT>
      return;
 80071fc:	e25b      	b.n	80076b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 80e1 	beq.w	80073ca <HAL_UART_IRQHandler+0x232>
 8007208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d106      	bne.n	8007222 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007218:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 80d4 	beq.w	80073ca <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00b      	beq.n	8007246 <HAL_UART_IRQHandler+0xae>
 800722e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007236:	2b00      	cmp	r3, #0
 8007238:	d005      	beq.n	8007246 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	f043 0201 	orr.w	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724a:	f003 0304 	and.w	r3, r3, #4
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <HAL_UART_IRQHandler+0xd2>
 8007252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f043 0202 	orr.w	r2, r3, #2
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800726a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00b      	beq.n	800728e <HAL_UART_IRQHandler+0xf6>
 8007276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	f043 0204 	orr.w	r2, r3, #4
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800728e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007292:	f003 0308 	and.w	r3, r3, #8
 8007296:	2b00      	cmp	r3, #0
 8007298:	d011      	beq.n	80072be <HAL_UART_IRQHandler+0x126>
 800729a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800729e:	f003 0320 	and.w	r3, r3, #32
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d105      	bne.n	80072b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d005      	beq.n	80072be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	f043 0208 	orr.w	r2, r3, #8
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 81f2 	beq.w	80076ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072cc:	f003 0320 	and.w	r3, r3, #32
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d008      	beq.n	80072e6 <HAL_UART_IRQHandler+0x14e>
 80072d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d8:	f003 0320 	and.w	r3, r3, #32
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fc6e 	bl	8007bc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f0:	2b40      	cmp	r3, #64	; 0x40
 80072f2:	bf0c      	ite	eq
 80072f4:	2301      	moveq	r3, #1
 80072f6:	2300      	movne	r3, #0
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	f003 0308 	and.w	r3, r3, #8
 8007306:	2b00      	cmp	r3, #0
 8007308:	d103      	bne.n	8007312 <HAL_UART_IRQHandler+0x17a>
 800730a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800730e:	2b00      	cmp	r3, #0
 8007310:	d051      	beq.n	80073b6 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fb74 	bl	8007a00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007322:	2b40      	cmp	r3, #64	; 0x40
 8007324:	d142      	bne.n	80073ac <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3314      	adds	r3, #20
 800732c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800733c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3314      	adds	r3, #20
 800734e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007352:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800735e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800736a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1d9      	bne.n	8007326 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	2b00      	cmp	r3, #0
 8007378:	d013      	beq.n	80073a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737e:	4a7f      	ldr	r2, [pc, #508]	; (800757c <HAL_UART_IRQHandler+0x3e4>)
 8007380:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	4618      	mov	r0, r3
 8007388:	f7fc fd3e 	bl	8003e08 <HAL_DMA_Abort_IT>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d019      	beq.n	80073c6 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800739c:	4610      	mov	r0, r2
 800739e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a0:	e011      	b.n	80073c6 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073aa:	e00c      	b.n	80073c6 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b4:	e007      	b.n	80073c6 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80073c4:	e172      	b.n	80076ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c6:	bf00      	nop
    return;
 80073c8:	e170      	b.n	80076ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	f040 814c 	bne.w	800766c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d8:	f003 0310 	and.w	r3, r3, #16
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8145 	beq.w	800766c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e6:	f003 0310 	and.w	r3, r3, #16
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 813e 	beq.w	800766c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073f0:	2300      	movs	r3, #0
 80073f2:	60bb      	str	r3, [r7, #8]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	60bb      	str	r3, [r7, #8]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	60bb      	str	r3, [r7, #8]
 8007404:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007410:	2b40      	cmp	r3, #64	; 0x40
 8007412:	f040 80b5 	bne.w	8007580 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007422:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 8142 	beq.w	80076b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007430:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007434:	429a      	cmp	r2, r3
 8007436:	f080 813b 	bcs.w	80076b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007440:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800744c:	f000 8088 	beq.w	8007560 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	330c      	adds	r3, #12
 8007456:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800745e:	e853 3f00 	ldrex	r3, [r3]
 8007462:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007466:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800746a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800746e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	330c      	adds	r3, #12
 8007478:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800747c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007480:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007484:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007488:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1d9      	bne.n	8007450 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3314      	adds	r3, #20
 80074a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074ae:	f023 0301 	bic.w	r3, r3, #1
 80074b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3314      	adds	r3, #20
 80074bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074cc:	e841 2300 	strex	r3, r2, [r1]
 80074d0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e1      	bne.n	800749c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3314      	adds	r3, #20
 80074de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074e2:	e853 3f00 	ldrex	r3, [r3]
 80074e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3314      	adds	r3, #20
 80074f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007502:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007504:	e841 2300 	strex	r3, r2, [r1]
 8007508:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800750a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1e3      	bne.n	80074d8 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2220      	movs	r2, #32
 8007514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	330c      	adds	r3, #12
 8007524:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800752e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007530:	f023 0310 	bic.w	r3, r3, #16
 8007534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	330c      	adds	r3, #12
 800753e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007542:	65ba      	str	r2, [r7, #88]	; 0x58
 8007544:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007546:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007548:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800754a:	e841 2300 	strex	r3, r2, [r1]
 800754e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1e3      	bne.n	800751e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755a:	4618      	mov	r0, r3
 800755c:	f7fc fbe4 	bl	8003d28 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800756c:	b292      	uxth	r2, r2
 800756e:	1a8a      	subs	r2, r1, r2
 8007570:	b292      	uxth	r2, r2
 8007572:	4611      	mov	r1, r2
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007578:	e09a      	b.n	80076b0 <HAL_UART_IRQHandler+0x518>
 800757a:	bf00      	nop
 800757c:	08007ac7 	.word	0x08007ac7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007588:	b29b      	uxth	r3, r3
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007594:	b29b      	uxth	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	f000 808c 	beq.w	80076b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800759c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 8087 	beq.w	80076b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	330c      	adds	r3, #12
 80075ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	330c      	adds	r3, #12
 80075c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80075ca:	647a      	str	r2, [r7, #68]	; 0x44
 80075cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075d2:	e841 2300 	strex	r3, r2, [r1]
 80075d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e3      	bne.n	80075a6 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3314      	adds	r3, #20
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	e853 3f00 	ldrex	r3, [r3]
 80075ec:	623b      	str	r3, [r7, #32]
   return(result);
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	f023 0301 	bic.w	r3, r3, #1
 80075f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3314      	adds	r3, #20
 80075fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007602:	633a      	str	r2, [r7, #48]	; 0x30
 8007604:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1e3      	bne.n	80075de <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2220      	movs	r2, #32
 800761a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	330c      	adds	r3, #12
 800762a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	e853 3f00 	ldrex	r3, [r3]
 8007632:	60fb      	str	r3, [r7, #12]
   return(result);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0310 	bic.w	r3, r3, #16
 800763a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	330c      	adds	r3, #12
 8007644:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007648:	61fa      	str	r2, [r7, #28]
 800764a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	69b9      	ldr	r1, [r7, #24]
 800764e:	69fa      	ldr	r2, [r7, #28]
 8007650:	e841 2300 	strex	r3, r2, [r1]
 8007654:	617b      	str	r3, [r7, #20]
   return(result);
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e3      	bne.n	8007624 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007660:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8007664:	4611      	mov	r1, r2
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800766a:	e023      	b.n	80076b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800766c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007674:	2b00      	cmp	r3, #0
 8007676:	d009      	beq.n	800768c <HAL_UART_IRQHandler+0x4f4>
 8007678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800767c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007680:	2b00      	cmp	r3, #0
 8007682:	d003      	beq.n	800768c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fa33 	bl	8007af0 <UART_Transmit_IT>
    return;
 800768a:	e014      	b.n	80076b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800768c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00e      	beq.n	80076b6 <HAL_UART_IRQHandler+0x51e>
 8007698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800769c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d008      	beq.n	80076b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fa73 	bl	8007b90 <UART_EndTransmit_IT>
    return;
 80076aa:	e004      	b.n	80076b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80076ac:	bf00      	nop
 80076ae:	e002      	b.n	80076b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80076b0:	bf00      	nop
 80076b2:	e000      	b.n	80076b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80076b4:	bf00      	nop
  }
}
 80076b6:	37e8      	adds	r7, #232	; 0xe8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a10      	ldr	r2, [pc, #64]	; (80077c0 <UART_InitCallbacksToDefault+0x4c>)
 8007780:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a0f      	ldr	r2, [pc, #60]	; (80077c4 <UART_InitCallbacksToDefault+0x50>)
 8007786:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a0f      	ldr	r2, [pc, #60]	; (80077c8 <UART_InitCallbacksToDefault+0x54>)
 800778c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a0e      	ldr	r2, [pc, #56]	; (80077cc <UART_InitCallbacksToDefault+0x58>)
 8007792:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a0e      	ldr	r2, [pc, #56]	; (80077d0 <UART_InitCallbacksToDefault+0x5c>)
 8007798:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a0d      	ldr	r2, [pc, #52]	; (80077d4 <UART_InitCallbacksToDefault+0x60>)
 800779e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a0d      	ldr	r2, [pc, #52]	; (80077d8 <UART_InitCallbacksToDefault+0x64>)
 80077a4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a0c      	ldr	r2, [pc, #48]	; (80077dc <UART_InitCallbacksToDefault+0x68>)
 80077aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a0c      	ldr	r2, [pc, #48]	; (80077e0 <UART_InitCallbacksToDefault+0x6c>)
 80077b0:	669a      	str	r2, [r3, #104]	; 0x68

}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	080076d1 	.word	0x080076d1
 80077c4:	080076bd 	.word	0x080076bd
 80077c8:	080076f9 	.word	0x080076f9
 80077cc:	080076e5 	.word	0x080076e5
 80077d0:	0800770d 	.word	0x0800770d
 80077d4:	08007721 	.word	0x08007721
 80077d8:	08007735 	.word	0x08007735
 80077dc:	08007749 	.word	0x08007749
 80077e0:	0800775d 	.word	0x0800775d

080077e4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b090      	sub	sp, #64	; 0x40
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d137      	bne.n	8007870 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007802:	2200      	movs	r2, #0
 8007804:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3314      	adds	r3, #20
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	623b      	str	r3, [r7, #32]
   return(result);
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800781c:	63bb      	str	r3, [r7, #56]	; 0x38
 800781e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3314      	adds	r3, #20
 8007824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007826:	633a      	str	r2, [r7, #48]	; 0x30
 8007828:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800782c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e5      	bne.n	8007806 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800783a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	330c      	adds	r3, #12
 8007840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	60fb      	str	r3, [r7, #12]
   return(result);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007850:	637b      	str	r3, [r7, #52]	; 0x34
 8007852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	330c      	adds	r3, #12
 8007858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800785a:	61fa      	str	r2, [r7, #28]
 800785c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	69b9      	ldr	r1, [r7, #24]
 8007860:	69fa      	ldr	r2, [r7, #28]
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	617b      	str	r3, [r7, #20]
   return(result);
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e5      	bne.n	800783a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800786e:	e003      	b.n	8007878 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8007870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007874:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007876:	4798      	blx	r3
}
 8007878:	bf00      	nop
 800787a:	3740      	adds	r7, #64	; 0x40
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007896:	bf00      	nop
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b084      	sub	sp, #16
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ba:	2b80      	cmp	r3, #128	; 0x80
 80078bc:	bf0c      	ite	eq
 80078be:	2301      	moveq	r3, #1
 80078c0:	2300      	movne	r3, #0
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b21      	cmp	r3, #33	; 0x21
 80078d0:	d108      	bne.n	80078e4 <UART_DMAError+0x46>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2200      	movs	r2, #0
 80078dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80078de:	68b8      	ldr	r0, [r7, #8]
 80078e0:	f000 f866 	bl	80079b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ee:	2b40      	cmp	r3, #64	; 0x40
 80078f0:	bf0c      	ite	eq
 80078f2:	2301      	moveq	r3, #1
 80078f4:	2300      	movne	r3, #0
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b22      	cmp	r3, #34	; 0x22
 8007904:	d108      	bne.n	8007918 <UART_DMAError+0x7a>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d005      	beq.n	8007918 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2200      	movs	r2, #0
 8007910:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007912:	68b8      	ldr	r0, [r7, #8]
 8007914:	f000 f874 	bl	8007a00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791c:	f043 0210 	orr.w	r2, r3, #16
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007928:	68b8      	ldr	r0, [r7, #8]
 800792a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800792c:	bf00      	nop
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	4613      	mov	r3, r2
 8007940:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	88fa      	ldrh	r2, [r7, #6]
 800794c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	88fa      	ldrh	r2, [r7, #6]
 8007952:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2222      	movs	r2, #34	; 0x22
 800795e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d007      	beq.n	8007982 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007980:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	695a      	ldr	r2, [r3, #20]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f042 0201 	orr.w	r2, r2, #1
 8007990:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68da      	ldr	r2, [r3, #12]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f042 0220 	orr.w	r2, r2, #32
 80079a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b089      	sub	sp, #36	; 0x24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	330c      	adds	r3, #12
 80079be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80079ce:	61fb      	str	r3, [r7, #28]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	330c      	adds	r3, #12
 80079d6:	69fa      	ldr	r2, [r7, #28]
 80079d8:	61ba      	str	r2, [r7, #24]
 80079da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	6979      	ldr	r1, [r7, #20]
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	e841 2300 	strex	r3, r2, [r1]
 80079e4:	613b      	str	r3, [r7, #16]
   return(result);
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1e5      	bne.n	80079b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2220      	movs	r2, #32
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80079f4:	bf00      	nop
 80079f6:	3724      	adds	r7, #36	; 0x24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b095      	sub	sp, #84	; 0x54
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	330c      	adds	r3, #12
 8007a26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a28:	643a      	str	r2, [r7, #64]	; 0x40
 8007a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a30:	e841 2300 	strex	r3, r2, [r1]
 8007a34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e5      	bne.n	8007a08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3314      	adds	r3, #20
 8007a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	f023 0301 	bic.w	r3, r3, #1
 8007a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3314      	adds	r3, #20
 8007a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e5      	bne.n	8007a3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d119      	bne.n	8007aac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	330c      	adds	r3, #12
 8007a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	e853 3f00 	ldrex	r3, [r3]
 8007a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f023 0310 	bic.w	r3, r3, #16
 8007a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	330c      	adds	r3, #12
 8007a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a98:	61ba      	str	r2, [r7, #24]
 8007a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9c:	6979      	ldr	r1, [r7, #20]
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	e841 2300 	strex	r3, r2, [r1]
 8007aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e5      	bne.n	8007a78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007aba:	bf00      	nop
 8007abc:	3754      	adds	r7, #84	; 0x54
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ae8:	bf00      	nop
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b21      	cmp	r3, #33	; 0x21
 8007b02:	d13e      	bne.n	8007b82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0c:	d114      	bne.n	8007b38 <UART_Transmit_IT+0x48>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d110      	bne.n	8007b38 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	461a      	mov	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	1c9a      	adds	r2, r3, #2
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	621a      	str	r2, [r3, #32]
 8007b36:	e008      	b.n	8007b4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	1c59      	adds	r1, r3, #1
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6211      	str	r1, [r2, #32]
 8007b42:	781a      	ldrb	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	3b01      	subs	r3, #1
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	4619      	mov	r1, r3
 8007b58:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10f      	bne.n	8007b7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68da      	ldr	r2, [r3, #12]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68da      	ldr	r2, [r3, #12]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	e000      	b.n	8007b84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b82:	2302      	movs	r3, #2
  }
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ba6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2220      	movs	r2, #32
 8007bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b08c      	sub	sp, #48	; 0x30
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b22      	cmp	r3, #34	; 0x22
 8007bd4:	f040 80ad 	bne.w	8007d32 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be0:	d117      	bne.n	8007c12 <UART_Receive_IT+0x50>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d113      	bne.n	8007c12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0a:	1c9a      	adds	r2, r3, #2
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	629a      	str	r2, [r3, #40]	; 0x28
 8007c10:	e026      	b.n	8007c60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c24:	d007      	beq.n	8007c36 <UART_Receive_IT+0x74>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10a      	bne.n	8007c44 <UART_Receive_IT+0x82>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d106      	bne.n	8007c44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c40:	701a      	strb	r2, [r3, #0]
 8007c42:	e008      	b.n	8007c56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d15c      	bne.n	8007d2e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0220 	bic.w	r2, r2, #32
 8007c82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68da      	ldr	r2, [r3, #12]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	695a      	ldr	r2, [r3, #20]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0201 	bic.w	r2, r2, #1
 8007ca2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d136      	bne.n	8007d22 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	330c      	adds	r3, #12
 8007cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f023 0310 	bic.w	r3, r3, #16
 8007cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	330c      	adds	r3, #12
 8007cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cda:	623a      	str	r2, [r7, #32]
 8007cdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	69f9      	ldr	r1, [r7, #28]
 8007ce0:	6a3a      	ldr	r2, [r7, #32]
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e5      	bne.n	8007cba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0310 	and.w	r3, r3, #16
 8007cf8:	2b10      	cmp	r3, #16
 8007cfa:	d10a      	bne.n	8007d12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60fb      	str	r3, [r7, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	4798      	blx	r3
 8007d20:	e003      	b.n	8007d2a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	e002      	b.n	8007d34 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e000      	b.n	8007d34 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8007d32:	2302      	movs	r3, #2
  }
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3730      	adds	r7, #48	; 0x30
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d40:	b0c0      	sub	sp, #256	; 0x100
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d58:	68d9      	ldr	r1, [r3, #12]
 8007d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	ea40 0301 	orr.w	r3, r0, r1
 8007d64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d94:	f021 010c 	bic.w	r1, r1, #12
 8007d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007da2:	430b      	orrs	r3, r1
 8007da4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db6:	6999      	ldr	r1, [r3, #24]
 8007db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	ea40 0301 	orr.w	r3, r0, r1
 8007dc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	4b8f      	ldr	r3, [pc, #572]	; (8008008 <UART_SetConfig+0x2cc>)
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d005      	beq.n	8007ddc <UART_SetConfig+0xa0>
 8007dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	4b8d      	ldr	r3, [pc, #564]	; (800800c <UART_SetConfig+0x2d0>)
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d104      	bne.n	8007de6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ddc:	f7fd fa12 	bl	8005204 <HAL_RCC_GetPCLK2Freq>
 8007de0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007de4:	e003      	b.n	8007dee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007de6:	f7fd f9f9 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 8007dea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007df8:	f040 810c 	bne.w	8008014 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e00:	2200      	movs	r2, #0
 8007e02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007e0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007e0e:	4622      	mov	r2, r4
 8007e10:	462b      	mov	r3, r5
 8007e12:	1891      	adds	r1, r2, r2
 8007e14:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e16:	415b      	adcs	r3, r3
 8007e18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e1e:	4621      	mov	r1, r4
 8007e20:	eb12 0801 	adds.w	r8, r2, r1
 8007e24:	4629      	mov	r1, r5
 8007e26:	eb43 0901 	adc.w	r9, r3, r1
 8007e2a:	f04f 0200 	mov.w	r2, #0
 8007e2e:	f04f 0300 	mov.w	r3, #0
 8007e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e3e:	4690      	mov	r8, r2
 8007e40:	4699      	mov	r9, r3
 8007e42:	4623      	mov	r3, r4
 8007e44:	eb18 0303 	adds.w	r3, r8, r3
 8007e48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e4c:	462b      	mov	r3, r5
 8007e4e:	eb49 0303 	adc.w	r3, r9, r3
 8007e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007e66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	18db      	adds	r3, r3, r3
 8007e6e:	653b      	str	r3, [r7, #80]	; 0x50
 8007e70:	4613      	mov	r3, r2
 8007e72:	eb42 0303 	adc.w	r3, r2, r3
 8007e76:	657b      	str	r3, [r7, #84]	; 0x54
 8007e78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e80:	f7f8 ff0a 	bl	8000c98 <__aeabi_uldivmod>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	4b61      	ldr	r3, [pc, #388]	; (8008010 <UART_SetConfig+0x2d4>)
 8007e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8007e8e:	095b      	lsrs	r3, r3, #5
 8007e90:	011c      	lsls	r4, r3, #4
 8007e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ea0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ea4:	4642      	mov	r2, r8
 8007ea6:	464b      	mov	r3, r9
 8007ea8:	1891      	adds	r1, r2, r2
 8007eaa:	64b9      	str	r1, [r7, #72]	; 0x48
 8007eac:	415b      	adcs	r3, r3
 8007eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007eb4:	4641      	mov	r1, r8
 8007eb6:	eb12 0a01 	adds.w	sl, r2, r1
 8007eba:	4649      	mov	r1, r9
 8007ebc:	eb43 0b01 	adc.w	fp, r3, r1
 8007ec0:	f04f 0200 	mov.w	r2, #0
 8007ec4:	f04f 0300 	mov.w	r3, #0
 8007ec8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ecc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ed4:	4692      	mov	sl, r2
 8007ed6:	469b      	mov	fp, r3
 8007ed8:	4643      	mov	r3, r8
 8007eda:	eb1a 0303 	adds.w	r3, sl, r3
 8007ede:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ee2:	464b      	mov	r3, r9
 8007ee4:	eb4b 0303 	adc.w	r3, fp, r3
 8007ee8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ef8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007efc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007f00:	460b      	mov	r3, r1
 8007f02:	18db      	adds	r3, r3, r3
 8007f04:	643b      	str	r3, [r7, #64]	; 0x40
 8007f06:	4613      	mov	r3, r2
 8007f08:	eb42 0303 	adc.w	r3, r2, r3
 8007f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007f16:	f7f8 febf 	bl	8000c98 <__aeabi_uldivmod>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	4b3b      	ldr	r3, [pc, #236]	; (8008010 <UART_SetConfig+0x2d4>)
 8007f22:	fba3 2301 	umull	r2, r3, r3, r1
 8007f26:	095b      	lsrs	r3, r3, #5
 8007f28:	2264      	movs	r2, #100	; 0x64
 8007f2a:	fb02 f303 	mul.w	r3, r2, r3
 8007f2e:	1acb      	subs	r3, r1, r3
 8007f30:	00db      	lsls	r3, r3, #3
 8007f32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f36:	4b36      	ldr	r3, [pc, #216]	; (8008010 <UART_SetConfig+0x2d4>)
 8007f38:	fba3 2302 	umull	r2, r3, r3, r2
 8007f3c:	095b      	lsrs	r3, r3, #5
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f44:	441c      	add	r4, r3
 8007f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007f54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007f58:	4642      	mov	r2, r8
 8007f5a:	464b      	mov	r3, r9
 8007f5c:	1891      	adds	r1, r2, r2
 8007f5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f60:	415b      	adcs	r3, r3
 8007f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f68:	4641      	mov	r1, r8
 8007f6a:	1851      	adds	r1, r2, r1
 8007f6c:	6339      	str	r1, [r7, #48]	; 0x30
 8007f6e:	4649      	mov	r1, r9
 8007f70:	414b      	adcs	r3, r1
 8007f72:	637b      	str	r3, [r7, #52]	; 0x34
 8007f74:	f04f 0200 	mov.w	r2, #0
 8007f78:	f04f 0300 	mov.w	r3, #0
 8007f7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f80:	4659      	mov	r1, fp
 8007f82:	00cb      	lsls	r3, r1, #3
 8007f84:	4651      	mov	r1, sl
 8007f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f8a:	4651      	mov	r1, sl
 8007f8c:	00ca      	lsls	r2, r1, #3
 8007f8e:	4610      	mov	r0, r2
 8007f90:	4619      	mov	r1, r3
 8007f92:	4603      	mov	r3, r0
 8007f94:	4642      	mov	r2, r8
 8007f96:	189b      	adds	r3, r3, r2
 8007f98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f9c:	464b      	mov	r3, r9
 8007f9e:	460a      	mov	r2, r1
 8007fa0:	eb42 0303 	adc.w	r3, r2, r3
 8007fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007fb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007fb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	18db      	adds	r3, r3, r3
 8007fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	eb42 0303 	adc.w	r3, r2, r3
 8007fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007fd2:	f7f8 fe61 	bl	8000c98 <__aeabi_uldivmod>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4b0d      	ldr	r3, [pc, #52]	; (8008010 <UART_SetConfig+0x2d4>)
 8007fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8007fe0:	095b      	lsrs	r3, r3, #5
 8007fe2:	2164      	movs	r1, #100	; 0x64
 8007fe4:	fb01 f303 	mul.w	r3, r1, r3
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	3332      	adds	r3, #50	; 0x32
 8007fee:	4a08      	ldr	r2, [pc, #32]	; (8008010 <UART_SetConfig+0x2d4>)
 8007ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff4:	095b      	lsrs	r3, r3, #5
 8007ff6:	f003 0207 	and.w	r2, r3, #7
 8007ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4422      	add	r2, r4
 8008002:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008004:	e105      	b.n	8008212 <UART_SetConfig+0x4d6>
 8008006:	bf00      	nop
 8008008:	40011000 	.word	0x40011000
 800800c:	40011400 	.word	0x40011400
 8008010:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008018:	2200      	movs	r2, #0
 800801a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800801e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008022:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008026:	4642      	mov	r2, r8
 8008028:	464b      	mov	r3, r9
 800802a:	1891      	adds	r1, r2, r2
 800802c:	6239      	str	r1, [r7, #32]
 800802e:	415b      	adcs	r3, r3
 8008030:	627b      	str	r3, [r7, #36]	; 0x24
 8008032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008036:	4641      	mov	r1, r8
 8008038:	1854      	adds	r4, r2, r1
 800803a:	4649      	mov	r1, r9
 800803c:	eb43 0501 	adc.w	r5, r3, r1
 8008040:	f04f 0200 	mov.w	r2, #0
 8008044:	f04f 0300 	mov.w	r3, #0
 8008048:	00eb      	lsls	r3, r5, #3
 800804a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800804e:	00e2      	lsls	r2, r4, #3
 8008050:	4614      	mov	r4, r2
 8008052:	461d      	mov	r5, r3
 8008054:	4643      	mov	r3, r8
 8008056:	18e3      	adds	r3, r4, r3
 8008058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800805c:	464b      	mov	r3, r9
 800805e:	eb45 0303 	adc.w	r3, r5, r3
 8008062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008072:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008076:	f04f 0200 	mov.w	r2, #0
 800807a:	f04f 0300 	mov.w	r3, #0
 800807e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008082:	4629      	mov	r1, r5
 8008084:	008b      	lsls	r3, r1, #2
 8008086:	4621      	mov	r1, r4
 8008088:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800808c:	4621      	mov	r1, r4
 800808e:	008a      	lsls	r2, r1, #2
 8008090:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008094:	f7f8 fe00 	bl	8000c98 <__aeabi_uldivmod>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	4b60      	ldr	r3, [pc, #384]	; (8008220 <UART_SetConfig+0x4e4>)
 800809e:	fba3 2302 	umull	r2, r3, r3, r2
 80080a2:	095b      	lsrs	r3, r3, #5
 80080a4:	011c      	lsls	r4, r3, #4
 80080a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80080b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80080b8:	4642      	mov	r2, r8
 80080ba:	464b      	mov	r3, r9
 80080bc:	1891      	adds	r1, r2, r2
 80080be:	61b9      	str	r1, [r7, #24]
 80080c0:	415b      	adcs	r3, r3
 80080c2:	61fb      	str	r3, [r7, #28]
 80080c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080c8:	4641      	mov	r1, r8
 80080ca:	1851      	adds	r1, r2, r1
 80080cc:	6139      	str	r1, [r7, #16]
 80080ce:	4649      	mov	r1, r9
 80080d0:	414b      	adcs	r3, r1
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	f04f 0200 	mov.w	r2, #0
 80080d8:	f04f 0300 	mov.w	r3, #0
 80080dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080e0:	4659      	mov	r1, fp
 80080e2:	00cb      	lsls	r3, r1, #3
 80080e4:	4651      	mov	r1, sl
 80080e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080ea:	4651      	mov	r1, sl
 80080ec:	00ca      	lsls	r2, r1, #3
 80080ee:	4610      	mov	r0, r2
 80080f0:	4619      	mov	r1, r3
 80080f2:	4603      	mov	r3, r0
 80080f4:	4642      	mov	r2, r8
 80080f6:	189b      	adds	r3, r3, r2
 80080f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080fc:	464b      	mov	r3, r9
 80080fe:	460a      	mov	r2, r1
 8008100:	eb42 0303 	adc.w	r3, r2, r3
 8008104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	67bb      	str	r3, [r7, #120]	; 0x78
 8008112:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008114:	f04f 0200 	mov.w	r2, #0
 8008118:	f04f 0300 	mov.w	r3, #0
 800811c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008120:	4649      	mov	r1, r9
 8008122:	008b      	lsls	r3, r1, #2
 8008124:	4641      	mov	r1, r8
 8008126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800812a:	4641      	mov	r1, r8
 800812c:	008a      	lsls	r2, r1, #2
 800812e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008132:	f7f8 fdb1 	bl	8000c98 <__aeabi_uldivmod>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	4b39      	ldr	r3, [pc, #228]	; (8008220 <UART_SetConfig+0x4e4>)
 800813c:	fba3 1302 	umull	r1, r3, r3, r2
 8008140:	095b      	lsrs	r3, r3, #5
 8008142:	2164      	movs	r1, #100	; 0x64
 8008144:	fb01 f303 	mul.w	r3, r1, r3
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	011b      	lsls	r3, r3, #4
 800814c:	3332      	adds	r3, #50	; 0x32
 800814e:	4a34      	ldr	r2, [pc, #208]	; (8008220 <UART_SetConfig+0x4e4>)
 8008150:	fba2 2303 	umull	r2, r3, r2, r3
 8008154:	095b      	lsrs	r3, r3, #5
 8008156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800815a:	441c      	add	r4, r3
 800815c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008160:	2200      	movs	r2, #0
 8008162:	673b      	str	r3, [r7, #112]	; 0x70
 8008164:	677a      	str	r2, [r7, #116]	; 0x74
 8008166:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800816a:	4642      	mov	r2, r8
 800816c:	464b      	mov	r3, r9
 800816e:	1891      	adds	r1, r2, r2
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	415b      	adcs	r3, r3
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800817a:	4641      	mov	r1, r8
 800817c:	1851      	adds	r1, r2, r1
 800817e:	6039      	str	r1, [r7, #0]
 8008180:	4649      	mov	r1, r9
 8008182:	414b      	adcs	r3, r1
 8008184:	607b      	str	r3, [r7, #4]
 8008186:	f04f 0200 	mov.w	r2, #0
 800818a:	f04f 0300 	mov.w	r3, #0
 800818e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008192:	4659      	mov	r1, fp
 8008194:	00cb      	lsls	r3, r1, #3
 8008196:	4651      	mov	r1, sl
 8008198:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800819c:	4651      	mov	r1, sl
 800819e:	00ca      	lsls	r2, r1, #3
 80081a0:	4610      	mov	r0, r2
 80081a2:	4619      	mov	r1, r3
 80081a4:	4603      	mov	r3, r0
 80081a6:	4642      	mov	r2, r8
 80081a8:	189b      	adds	r3, r3, r2
 80081aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80081ac:	464b      	mov	r3, r9
 80081ae:	460a      	mov	r2, r1
 80081b0:	eb42 0303 	adc.w	r3, r2, r3
 80081b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	663b      	str	r3, [r7, #96]	; 0x60
 80081c0:	667a      	str	r2, [r7, #100]	; 0x64
 80081c2:	f04f 0200 	mov.w	r2, #0
 80081c6:	f04f 0300 	mov.w	r3, #0
 80081ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80081ce:	4649      	mov	r1, r9
 80081d0:	008b      	lsls	r3, r1, #2
 80081d2:	4641      	mov	r1, r8
 80081d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081d8:	4641      	mov	r1, r8
 80081da:	008a      	lsls	r2, r1, #2
 80081dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80081e0:	f7f8 fd5a 	bl	8000c98 <__aeabi_uldivmod>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4b0d      	ldr	r3, [pc, #52]	; (8008220 <UART_SetConfig+0x4e4>)
 80081ea:	fba3 1302 	umull	r1, r3, r3, r2
 80081ee:	095b      	lsrs	r3, r3, #5
 80081f0:	2164      	movs	r1, #100	; 0x64
 80081f2:	fb01 f303 	mul.w	r3, r1, r3
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	011b      	lsls	r3, r3, #4
 80081fa:	3332      	adds	r3, #50	; 0x32
 80081fc:	4a08      	ldr	r2, [pc, #32]	; (8008220 <UART_SetConfig+0x4e4>)
 80081fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008202:	095b      	lsrs	r3, r3, #5
 8008204:	f003 020f 	and.w	r2, r3, #15
 8008208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4422      	add	r2, r4
 8008210:	609a      	str	r2, [r3, #8]
}
 8008212:	bf00      	nop
 8008214:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008218:	46bd      	mov	sp, r7
 800821a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800821e:	bf00      	nop
 8008220:	51eb851f 	.word	0x51eb851f

08008224 <__errno>:
 8008224:	4b01      	ldr	r3, [pc, #4]	; (800822c <__errno+0x8>)
 8008226:	6818      	ldr	r0, [r3, #0]
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	2000020c 	.word	0x2000020c

08008230 <__libc_init_array>:
 8008230:	b570      	push	{r4, r5, r6, lr}
 8008232:	4d0d      	ldr	r5, [pc, #52]	; (8008268 <__libc_init_array+0x38>)
 8008234:	4c0d      	ldr	r4, [pc, #52]	; (800826c <__libc_init_array+0x3c>)
 8008236:	1b64      	subs	r4, r4, r5
 8008238:	10a4      	asrs	r4, r4, #2
 800823a:	2600      	movs	r6, #0
 800823c:	42a6      	cmp	r6, r4
 800823e:	d109      	bne.n	8008254 <__libc_init_array+0x24>
 8008240:	4d0b      	ldr	r5, [pc, #44]	; (8008270 <__libc_init_array+0x40>)
 8008242:	4c0c      	ldr	r4, [pc, #48]	; (8008274 <__libc_init_array+0x44>)
 8008244:	f005 ffb2 	bl	800e1ac <_init>
 8008248:	1b64      	subs	r4, r4, r5
 800824a:	10a4      	asrs	r4, r4, #2
 800824c:	2600      	movs	r6, #0
 800824e:	42a6      	cmp	r6, r4
 8008250:	d105      	bne.n	800825e <__libc_init_array+0x2e>
 8008252:	bd70      	pop	{r4, r5, r6, pc}
 8008254:	f855 3b04 	ldr.w	r3, [r5], #4
 8008258:	4798      	blx	r3
 800825a:	3601      	adds	r6, #1
 800825c:	e7ee      	b.n	800823c <__libc_init_array+0xc>
 800825e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008262:	4798      	blx	r3
 8008264:	3601      	adds	r6, #1
 8008266:	e7f2      	b.n	800824e <__libc_init_array+0x1e>
 8008268:	0800e8c8 	.word	0x0800e8c8
 800826c:	0800e8c8 	.word	0x0800e8c8
 8008270:	0800e8c8 	.word	0x0800e8c8
 8008274:	0800e8cc 	.word	0x0800e8cc

08008278 <memcpy>:
 8008278:	440a      	add	r2, r1
 800827a:	4291      	cmp	r1, r2
 800827c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008280:	d100      	bne.n	8008284 <memcpy+0xc>
 8008282:	4770      	bx	lr
 8008284:	b510      	push	{r4, lr}
 8008286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800828a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800828e:	4291      	cmp	r1, r2
 8008290:	d1f9      	bne.n	8008286 <memcpy+0xe>
 8008292:	bd10      	pop	{r4, pc}

08008294 <memset>:
 8008294:	4402      	add	r2, r0
 8008296:	4603      	mov	r3, r0
 8008298:	4293      	cmp	r3, r2
 800829a:	d100      	bne.n	800829e <memset+0xa>
 800829c:	4770      	bx	lr
 800829e:	f803 1b01 	strb.w	r1, [r3], #1
 80082a2:	e7f9      	b.n	8008298 <memset+0x4>

080082a4 <__cvt>:
 80082a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082a8:	ec55 4b10 	vmov	r4, r5, d0
 80082ac:	2d00      	cmp	r5, #0
 80082ae:	460e      	mov	r6, r1
 80082b0:	4619      	mov	r1, r3
 80082b2:	462b      	mov	r3, r5
 80082b4:	bfbb      	ittet	lt
 80082b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80082ba:	461d      	movlt	r5, r3
 80082bc:	2300      	movge	r3, #0
 80082be:	232d      	movlt	r3, #45	; 0x2d
 80082c0:	700b      	strb	r3, [r1, #0]
 80082c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80082c8:	4691      	mov	r9, r2
 80082ca:	f023 0820 	bic.w	r8, r3, #32
 80082ce:	bfbc      	itt	lt
 80082d0:	4622      	movlt	r2, r4
 80082d2:	4614      	movlt	r4, r2
 80082d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082d8:	d005      	beq.n	80082e6 <__cvt+0x42>
 80082da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80082de:	d100      	bne.n	80082e2 <__cvt+0x3e>
 80082e0:	3601      	adds	r6, #1
 80082e2:	2102      	movs	r1, #2
 80082e4:	e000      	b.n	80082e8 <__cvt+0x44>
 80082e6:	2103      	movs	r1, #3
 80082e8:	ab03      	add	r3, sp, #12
 80082ea:	9301      	str	r3, [sp, #4]
 80082ec:	ab02      	add	r3, sp, #8
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	ec45 4b10 	vmov	d0, r4, r5
 80082f4:	4653      	mov	r3, sl
 80082f6:	4632      	mov	r2, r6
 80082f8:	f001 fdae 	bl	8009e58 <_dtoa_r>
 80082fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008300:	4607      	mov	r7, r0
 8008302:	d102      	bne.n	800830a <__cvt+0x66>
 8008304:	f019 0f01 	tst.w	r9, #1
 8008308:	d022      	beq.n	8008350 <__cvt+0xac>
 800830a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800830e:	eb07 0906 	add.w	r9, r7, r6
 8008312:	d110      	bne.n	8008336 <__cvt+0x92>
 8008314:	783b      	ldrb	r3, [r7, #0]
 8008316:	2b30      	cmp	r3, #48	; 0x30
 8008318:	d10a      	bne.n	8008330 <__cvt+0x8c>
 800831a:	2200      	movs	r2, #0
 800831c:	2300      	movs	r3, #0
 800831e:	4620      	mov	r0, r4
 8008320:	4629      	mov	r1, r5
 8008322:	f7f8 fbd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008326:	b918      	cbnz	r0, 8008330 <__cvt+0x8c>
 8008328:	f1c6 0601 	rsb	r6, r6, #1
 800832c:	f8ca 6000 	str.w	r6, [sl]
 8008330:	f8da 3000 	ldr.w	r3, [sl]
 8008334:	4499      	add	r9, r3
 8008336:	2200      	movs	r2, #0
 8008338:	2300      	movs	r3, #0
 800833a:	4620      	mov	r0, r4
 800833c:	4629      	mov	r1, r5
 800833e:	f7f8 fbcb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008342:	b108      	cbz	r0, 8008348 <__cvt+0xa4>
 8008344:	f8cd 900c 	str.w	r9, [sp, #12]
 8008348:	2230      	movs	r2, #48	; 0x30
 800834a:	9b03      	ldr	r3, [sp, #12]
 800834c:	454b      	cmp	r3, r9
 800834e:	d307      	bcc.n	8008360 <__cvt+0xbc>
 8008350:	9b03      	ldr	r3, [sp, #12]
 8008352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008354:	1bdb      	subs	r3, r3, r7
 8008356:	4638      	mov	r0, r7
 8008358:	6013      	str	r3, [r2, #0]
 800835a:	b004      	add	sp, #16
 800835c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008360:	1c59      	adds	r1, r3, #1
 8008362:	9103      	str	r1, [sp, #12]
 8008364:	701a      	strb	r2, [r3, #0]
 8008366:	e7f0      	b.n	800834a <__cvt+0xa6>

08008368 <__exponent>:
 8008368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800836a:	4603      	mov	r3, r0
 800836c:	2900      	cmp	r1, #0
 800836e:	bfb8      	it	lt
 8008370:	4249      	neglt	r1, r1
 8008372:	f803 2b02 	strb.w	r2, [r3], #2
 8008376:	bfb4      	ite	lt
 8008378:	222d      	movlt	r2, #45	; 0x2d
 800837a:	222b      	movge	r2, #43	; 0x2b
 800837c:	2909      	cmp	r1, #9
 800837e:	7042      	strb	r2, [r0, #1]
 8008380:	dd2a      	ble.n	80083d8 <__exponent+0x70>
 8008382:	f10d 0407 	add.w	r4, sp, #7
 8008386:	46a4      	mov	ip, r4
 8008388:	270a      	movs	r7, #10
 800838a:	46a6      	mov	lr, r4
 800838c:	460a      	mov	r2, r1
 800838e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008392:	fb07 1516 	mls	r5, r7, r6, r1
 8008396:	3530      	adds	r5, #48	; 0x30
 8008398:	2a63      	cmp	r2, #99	; 0x63
 800839a:	f104 34ff 	add.w	r4, r4, #4294967295
 800839e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80083a2:	4631      	mov	r1, r6
 80083a4:	dcf1      	bgt.n	800838a <__exponent+0x22>
 80083a6:	3130      	adds	r1, #48	; 0x30
 80083a8:	f1ae 0502 	sub.w	r5, lr, #2
 80083ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80083b0:	1c44      	adds	r4, r0, #1
 80083b2:	4629      	mov	r1, r5
 80083b4:	4561      	cmp	r1, ip
 80083b6:	d30a      	bcc.n	80083ce <__exponent+0x66>
 80083b8:	f10d 0209 	add.w	r2, sp, #9
 80083bc:	eba2 020e 	sub.w	r2, r2, lr
 80083c0:	4565      	cmp	r5, ip
 80083c2:	bf88      	it	hi
 80083c4:	2200      	movhi	r2, #0
 80083c6:	4413      	add	r3, r2
 80083c8:	1a18      	subs	r0, r3, r0
 80083ca:	b003      	add	sp, #12
 80083cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80083d6:	e7ed      	b.n	80083b4 <__exponent+0x4c>
 80083d8:	2330      	movs	r3, #48	; 0x30
 80083da:	3130      	adds	r1, #48	; 0x30
 80083dc:	7083      	strb	r3, [r0, #2]
 80083de:	70c1      	strb	r1, [r0, #3]
 80083e0:	1d03      	adds	r3, r0, #4
 80083e2:	e7f1      	b.n	80083c8 <__exponent+0x60>

080083e4 <_printf_float>:
 80083e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e8:	ed2d 8b02 	vpush	{d8}
 80083ec:	b08d      	sub	sp, #52	; 0x34
 80083ee:	460c      	mov	r4, r1
 80083f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80083f4:	4616      	mov	r6, r2
 80083f6:	461f      	mov	r7, r3
 80083f8:	4605      	mov	r5, r0
 80083fa:	f002 fe8b 	bl	800b114 <_localeconv_r>
 80083fe:	f8d0 a000 	ldr.w	sl, [r0]
 8008402:	4650      	mov	r0, sl
 8008404:	f7f7 feec 	bl	80001e0 <strlen>
 8008408:	2300      	movs	r3, #0
 800840a:	930a      	str	r3, [sp, #40]	; 0x28
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	9305      	str	r3, [sp, #20]
 8008410:	f8d8 3000 	ldr.w	r3, [r8]
 8008414:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008418:	3307      	adds	r3, #7
 800841a:	f023 0307 	bic.w	r3, r3, #7
 800841e:	f103 0208 	add.w	r2, r3, #8
 8008422:	f8c8 2000 	str.w	r2, [r8]
 8008426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800842e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008432:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008436:	9307      	str	r3, [sp, #28]
 8008438:	f8cd 8018 	str.w	r8, [sp, #24]
 800843c:	ee08 0a10 	vmov	s16, r0
 8008440:	4b9f      	ldr	r3, [pc, #636]	; (80086c0 <_printf_float+0x2dc>)
 8008442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008446:	f04f 32ff 	mov.w	r2, #4294967295
 800844a:	f7f8 fb77 	bl	8000b3c <__aeabi_dcmpun>
 800844e:	bb88      	cbnz	r0, 80084b4 <_printf_float+0xd0>
 8008450:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008454:	4b9a      	ldr	r3, [pc, #616]	; (80086c0 <_printf_float+0x2dc>)
 8008456:	f04f 32ff 	mov.w	r2, #4294967295
 800845a:	f7f8 fb51 	bl	8000b00 <__aeabi_dcmple>
 800845e:	bb48      	cbnz	r0, 80084b4 <_printf_float+0xd0>
 8008460:	2200      	movs	r2, #0
 8008462:	2300      	movs	r3, #0
 8008464:	4640      	mov	r0, r8
 8008466:	4649      	mov	r1, r9
 8008468:	f7f8 fb40 	bl	8000aec <__aeabi_dcmplt>
 800846c:	b110      	cbz	r0, 8008474 <_printf_float+0x90>
 800846e:	232d      	movs	r3, #45	; 0x2d
 8008470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008474:	4b93      	ldr	r3, [pc, #588]	; (80086c4 <_printf_float+0x2e0>)
 8008476:	4894      	ldr	r0, [pc, #592]	; (80086c8 <_printf_float+0x2e4>)
 8008478:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800847c:	bf94      	ite	ls
 800847e:	4698      	movls	r8, r3
 8008480:	4680      	movhi	r8, r0
 8008482:	2303      	movs	r3, #3
 8008484:	6123      	str	r3, [r4, #16]
 8008486:	9b05      	ldr	r3, [sp, #20]
 8008488:	f023 0204 	bic.w	r2, r3, #4
 800848c:	6022      	str	r2, [r4, #0]
 800848e:	f04f 0900 	mov.w	r9, #0
 8008492:	9700      	str	r7, [sp, #0]
 8008494:	4633      	mov	r3, r6
 8008496:	aa0b      	add	r2, sp, #44	; 0x2c
 8008498:	4621      	mov	r1, r4
 800849a:	4628      	mov	r0, r5
 800849c:	f000 f9d8 	bl	8008850 <_printf_common>
 80084a0:	3001      	adds	r0, #1
 80084a2:	f040 8090 	bne.w	80085c6 <_printf_float+0x1e2>
 80084a6:	f04f 30ff 	mov.w	r0, #4294967295
 80084aa:	b00d      	add	sp, #52	; 0x34
 80084ac:	ecbd 8b02 	vpop	{d8}
 80084b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b4:	4642      	mov	r2, r8
 80084b6:	464b      	mov	r3, r9
 80084b8:	4640      	mov	r0, r8
 80084ba:	4649      	mov	r1, r9
 80084bc:	f7f8 fb3e 	bl	8000b3c <__aeabi_dcmpun>
 80084c0:	b140      	cbz	r0, 80084d4 <_printf_float+0xf0>
 80084c2:	464b      	mov	r3, r9
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	bfbc      	itt	lt
 80084c8:	232d      	movlt	r3, #45	; 0x2d
 80084ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80084ce:	487f      	ldr	r0, [pc, #508]	; (80086cc <_printf_float+0x2e8>)
 80084d0:	4b7f      	ldr	r3, [pc, #508]	; (80086d0 <_printf_float+0x2ec>)
 80084d2:	e7d1      	b.n	8008478 <_printf_float+0x94>
 80084d4:	6863      	ldr	r3, [r4, #4]
 80084d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80084da:	9206      	str	r2, [sp, #24]
 80084dc:	1c5a      	adds	r2, r3, #1
 80084de:	d13f      	bne.n	8008560 <_printf_float+0x17c>
 80084e0:	2306      	movs	r3, #6
 80084e2:	6063      	str	r3, [r4, #4]
 80084e4:	9b05      	ldr	r3, [sp, #20]
 80084e6:	6861      	ldr	r1, [r4, #4]
 80084e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80084ec:	2300      	movs	r3, #0
 80084ee:	9303      	str	r3, [sp, #12]
 80084f0:	ab0a      	add	r3, sp, #40	; 0x28
 80084f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80084f6:	ab09      	add	r3, sp, #36	; 0x24
 80084f8:	ec49 8b10 	vmov	d0, r8, r9
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	6022      	str	r2, [r4, #0]
 8008500:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008504:	4628      	mov	r0, r5
 8008506:	f7ff fecd 	bl	80082a4 <__cvt>
 800850a:	9b06      	ldr	r3, [sp, #24]
 800850c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800850e:	2b47      	cmp	r3, #71	; 0x47
 8008510:	4680      	mov	r8, r0
 8008512:	d108      	bne.n	8008526 <_printf_float+0x142>
 8008514:	1cc8      	adds	r0, r1, #3
 8008516:	db02      	blt.n	800851e <_printf_float+0x13a>
 8008518:	6863      	ldr	r3, [r4, #4]
 800851a:	4299      	cmp	r1, r3
 800851c:	dd41      	ble.n	80085a2 <_printf_float+0x1be>
 800851e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008522:	fa5f fb8b 	uxtb.w	fp, fp
 8008526:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800852a:	d820      	bhi.n	800856e <_printf_float+0x18a>
 800852c:	3901      	subs	r1, #1
 800852e:	465a      	mov	r2, fp
 8008530:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008534:	9109      	str	r1, [sp, #36]	; 0x24
 8008536:	f7ff ff17 	bl	8008368 <__exponent>
 800853a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800853c:	1813      	adds	r3, r2, r0
 800853e:	2a01      	cmp	r2, #1
 8008540:	4681      	mov	r9, r0
 8008542:	6123      	str	r3, [r4, #16]
 8008544:	dc02      	bgt.n	800854c <_printf_float+0x168>
 8008546:	6822      	ldr	r2, [r4, #0]
 8008548:	07d2      	lsls	r2, r2, #31
 800854a:	d501      	bpl.n	8008550 <_printf_float+0x16c>
 800854c:	3301      	adds	r3, #1
 800854e:	6123      	str	r3, [r4, #16]
 8008550:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008554:	2b00      	cmp	r3, #0
 8008556:	d09c      	beq.n	8008492 <_printf_float+0xae>
 8008558:	232d      	movs	r3, #45	; 0x2d
 800855a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800855e:	e798      	b.n	8008492 <_printf_float+0xae>
 8008560:	9a06      	ldr	r2, [sp, #24]
 8008562:	2a47      	cmp	r2, #71	; 0x47
 8008564:	d1be      	bne.n	80084e4 <_printf_float+0x100>
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1bc      	bne.n	80084e4 <_printf_float+0x100>
 800856a:	2301      	movs	r3, #1
 800856c:	e7b9      	b.n	80084e2 <_printf_float+0xfe>
 800856e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008572:	d118      	bne.n	80085a6 <_printf_float+0x1c2>
 8008574:	2900      	cmp	r1, #0
 8008576:	6863      	ldr	r3, [r4, #4]
 8008578:	dd0b      	ble.n	8008592 <_printf_float+0x1ae>
 800857a:	6121      	str	r1, [r4, #16]
 800857c:	b913      	cbnz	r3, 8008584 <_printf_float+0x1a0>
 800857e:	6822      	ldr	r2, [r4, #0]
 8008580:	07d0      	lsls	r0, r2, #31
 8008582:	d502      	bpl.n	800858a <_printf_float+0x1a6>
 8008584:	3301      	adds	r3, #1
 8008586:	440b      	add	r3, r1
 8008588:	6123      	str	r3, [r4, #16]
 800858a:	65a1      	str	r1, [r4, #88]	; 0x58
 800858c:	f04f 0900 	mov.w	r9, #0
 8008590:	e7de      	b.n	8008550 <_printf_float+0x16c>
 8008592:	b913      	cbnz	r3, 800859a <_printf_float+0x1b6>
 8008594:	6822      	ldr	r2, [r4, #0]
 8008596:	07d2      	lsls	r2, r2, #31
 8008598:	d501      	bpl.n	800859e <_printf_float+0x1ba>
 800859a:	3302      	adds	r3, #2
 800859c:	e7f4      	b.n	8008588 <_printf_float+0x1a4>
 800859e:	2301      	movs	r3, #1
 80085a0:	e7f2      	b.n	8008588 <_printf_float+0x1a4>
 80085a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80085a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a8:	4299      	cmp	r1, r3
 80085aa:	db05      	blt.n	80085b8 <_printf_float+0x1d4>
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	6121      	str	r1, [r4, #16]
 80085b0:	07d8      	lsls	r0, r3, #31
 80085b2:	d5ea      	bpl.n	800858a <_printf_float+0x1a6>
 80085b4:	1c4b      	adds	r3, r1, #1
 80085b6:	e7e7      	b.n	8008588 <_printf_float+0x1a4>
 80085b8:	2900      	cmp	r1, #0
 80085ba:	bfd4      	ite	le
 80085bc:	f1c1 0202 	rsble	r2, r1, #2
 80085c0:	2201      	movgt	r2, #1
 80085c2:	4413      	add	r3, r2
 80085c4:	e7e0      	b.n	8008588 <_printf_float+0x1a4>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	055a      	lsls	r2, r3, #21
 80085ca:	d407      	bmi.n	80085dc <_printf_float+0x1f8>
 80085cc:	6923      	ldr	r3, [r4, #16]
 80085ce:	4642      	mov	r2, r8
 80085d0:	4631      	mov	r1, r6
 80085d2:	4628      	mov	r0, r5
 80085d4:	47b8      	blx	r7
 80085d6:	3001      	adds	r0, #1
 80085d8:	d12c      	bne.n	8008634 <_printf_float+0x250>
 80085da:	e764      	b.n	80084a6 <_printf_float+0xc2>
 80085dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80085e0:	f240 80e0 	bls.w	80087a4 <_printf_float+0x3c0>
 80085e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085e8:	2200      	movs	r2, #0
 80085ea:	2300      	movs	r3, #0
 80085ec:	f7f8 fa74 	bl	8000ad8 <__aeabi_dcmpeq>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d034      	beq.n	800865e <_printf_float+0x27a>
 80085f4:	4a37      	ldr	r2, [pc, #220]	; (80086d4 <_printf_float+0x2f0>)
 80085f6:	2301      	movs	r3, #1
 80085f8:	4631      	mov	r1, r6
 80085fa:	4628      	mov	r0, r5
 80085fc:	47b8      	blx	r7
 80085fe:	3001      	adds	r0, #1
 8008600:	f43f af51 	beq.w	80084a6 <_printf_float+0xc2>
 8008604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008608:	429a      	cmp	r2, r3
 800860a:	db02      	blt.n	8008612 <_printf_float+0x22e>
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	07d8      	lsls	r0, r3, #31
 8008610:	d510      	bpl.n	8008634 <_printf_float+0x250>
 8008612:	ee18 3a10 	vmov	r3, s16
 8008616:	4652      	mov	r2, sl
 8008618:	4631      	mov	r1, r6
 800861a:	4628      	mov	r0, r5
 800861c:	47b8      	blx	r7
 800861e:	3001      	adds	r0, #1
 8008620:	f43f af41 	beq.w	80084a6 <_printf_float+0xc2>
 8008624:	f04f 0800 	mov.w	r8, #0
 8008628:	f104 091a 	add.w	r9, r4, #26
 800862c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800862e:	3b01      	subs	r3, #1
 8008630:	4543      	cmp	r3, r8
 8008632:	dc09      	bgt.n	8008648 <_printf_float+0x264>
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	079b      	lsls	r3, r3, #30
 8008638:	f100 8105 	bmi.w	8008846 <_printf_float+0x462>
 800863c:	68e0      	ldr	r0, [r4, #12]
 800863e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008640:	4298      	cmp	r0, r3
 8008642:	bfb8      	it	lt
 8008644:	4618      	movlt	r0, r3
 8008646:	e730      	b.n	80084aa <_printf_float+0xc6>
 8008648:	2301      	movs	r3, #1
 800864a:	464a      	mov	r2, r9
 800864c:	4631      	mov	r1, r6
 800864e:	4628      	mov	r0, r5
 8008650:	47b8      	blx	r7
 8008652:	3001      	adds	r0, #1
 8008654:	f43f af27 	beq.w	80084a6 <_printf_float+0xc2>
 8008658:	f108 0801 	add.w	r8, r8, #1
 800865c:	e7e6      	b.n	800862c <_printf_float+0x248>
 800865e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008660:	2b00      	cmp	r3, #0
 8008662:	dc39      	bgt.n	80086d8 <_printf_float+0x2f4>
 8008664:	4a1b      	ldr	r2, [pc, #108]	; (80086d4 <_printf_float+0x2f0>)
 8008666:	2301      	movs	r3, #1
 8008668:	4631      	mov	r1, r6
 800866a:	4628      	mov	r0, r5
 800866c:	47b8      	blx	r7
 800866e:	3001      	adds	r0, #1
 8008670:	f43f af19 	beq.w	80084a6 <_printf_float+0xc2>
 8008674:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008678:	4313      	orrs	r3, r2
 800867a:	d102      	bne.n	8008682 <_printf_float+0x29e>
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	07d9      	lsls	r1, r3, #31
 8008680:	d5d8      	bpl.n	8008634 <_printf_float+0x250>
 8008682:	ee18 3a10 	vmov	r3, s16
 8008686:	4652      	mov	r2, sl
 8008688:	4631      	mov	r1, r6
 800868a:	4628      	mov	r0, r5
 800868c:	47b8      	blx	r7
 800868e:	3001      	adds	r0, #1
 8008690:	f43f af09 	beq.w	80084a6 <_printf_float+0xc2>
 8008694:	f04f 0900 	mov.w	r9, #0
 8008698:	f104 0a1a 	add.w	sl, r4, #26
 800869c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869e:	425b      	negs	r3, r3
 80086a0:	454b      	cmp	r3, r9
 80086a2:	dc01      	bgt.n	80086a8 <_printf_float+0x2c4>
 80086a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a6:	e792      	b.n	80085ce <_printf_float+0x1ea>
 80086a8:	2301      	movs	r3, #1
 80086aa:	4652      	mov	r2, sl
 80086ac:	4631      	mov	r1, r6
 80086ae:	4628      	mov	r0, r5
 80086b0:	47b8      	blx	r7
 80086b2:	3001      	adds	r0, #1
 80086b4:	f43f aef7 	beq.w	80084a6 <_printf_float+0xc2>
 80086b8:	f109 0901 	add.w	r9, r9, #1
 80086bc:	e7ee      	b.n	800869c <_printf_float+0x2b8>
 80086be:	bf00      	nop
 80086c0:	7fefffff 	.word	0x7fefffff
 80086c4:	0800e204 	.word	0x0800e204
 80086c8:	0800e208 	.word	0x0800e208
 80086cc:	0800e210 	.word	0x0800e210
 80086d0:	0800e20c 	.word	0x0800e20c
 80086d4:	0800e214 	.word	0x0800e214
 80086d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086dc:	429a      	cmp	r2, r3
 80086de:	bfa8      	it	ge
 80086e0:	461a      	movge	r2, r3
 80086e2:	2a00      	cmp	r2, #0
 80086e4:	4691      	mov	r9, r2
 80086e6:	dc37      	bgt.n	8008758 <_printf_float+0x374>
 80086e8:	f04f 0b00 	mov.w	fp, #0
 80086ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086f0:	f104 021a 	add.w	r2, r4, #26
 80086f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086f6:	9305      	str	r3, [sp, #20]
 80086f8:	eba3 0309 	sub.w	r3, r3, r9
 80086fc:	455b      	cmp	r3, fp
 80086fe:	dc33      	bgt.n	8008768 <_printf_float+0x384>
 8008700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008704:	429a      	cmp	r2, r3
 8008706:	db3b      	blt.n	8008780 <_printf_float+0x39c>
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	07da      	lsls	r2, r3, #31
 800870c:	d438      	bmi.n	8008780 <_printf_float+0x39c>
 800870e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008710:	9a05      	ldr	r2, [sp, #20]
 8008712:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008714:	1a9a      	subs	r2, r3, r2
 8008716:	eba3 0901 	sub.w	r9, r3, r1
 800871a:	4591      	cmp	r9, r2
 800871c:	bfa8      	it	ge
 800871e:	4691      	movge	r9, r2
 8008720:	f1b9 0f00 	cmp.w	r9, #0
 8008724:	dc35      	bgt.n	8008792 <_printf_float+0x3ae>
 8008726:	f04f 0800 	mov.w	r8, #0
 800872a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800872e:	f104 0a1a 	add.w	sl, r4, #26
 8008732:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008736:	1a9b      	subs	r3, r3, r2
 8008738:	eba3 0309 	sub.w	r3, r3, r9
 800873c:	4543      	cmp	r3, r8
 800873e:	f77f af79 	ble.w	8008634 <_printf_float+0x250>
 8008742:	2301      	movs	r3, #1
 8008744:	4652      	mov	r2, sl
 8008746:	4631      	mov	r1, r6
 8008748:	4628      	mov	r0, r5
 800874a:	47b8      	blx	r7
 800874c:	3001      	adds	r0, #1
 800874e:	f43f aeaa 	beq.w	80084a6 <_printf_float+0xc2>
 8008752:	f108 0801 	add.w	r8, r8, #1
 8008756:	e7ec      	b.n	8008732 <_printf_float+0x34e>
 8008758:	4613      	mov	r3, r2
 800875a:	4631      	mov	r1, r6
 800875c:	4642      	mov	r2, r8
 800875e:	4628      	mov	r0, r5
 8008760:	47b8      	blx	r7
 8008762:	3001      	adds	r0, #1
 8008764:	d1c0      	bne.n	80086e8 <_printf_float+0x304>
 8008766:	e69e      	b.n	80084a6 <_printf_float+0xc2>
 8008768:	2301      	movs	r3, #1
 800876a:	4631      	mov	r1, r6
 800876c:	4628      	mov	r0, r5
 800876e:	9205      	str	r2, [sp, #20]
 8008770:	47b8      	blx	r7
 8008772:	3001      	adds	r0, #1
 8008774:	f43f ae97 	beq.w	80084a6 <_printf_float+0xc2>
 8008778:	9a05      	ldr	r2, [sp, #20]
 800877a:	f10b 0b01 	add.w	fp, fp, #1
 800877e:	e7b9      	b.n	80086f4 <_printf_float+0x310>
 8008780:	ee18 3a10 	vmov	r3, s16
 8008784:	4652      	mov	r2, sl
 8008786:	4631      	mov	r1, r6
 8008788:	4628      	mov	r0, r5
 800878a:	47b8      	blx	r7
 800878c:	3001      	adds	r0, #1
 800878e:	d1be      	bne.n	800870e <_printf_float+0x32a>
 8008790:	e689      	b.n	80084a6 <_printf_float+0xc2>
 8008792:	9a05      	ldr	r2, [sp, #20]
 8008794:	464b      	mov	r3, r9
 8008796:	4442      	add	r2, r8
 8008798:	4631      	mov	r1, r6
 800879a:	4628      	mov	r0, r5
 800879c:	47b8      	blx	r7
 800879e:	3001      	adds	r0, #1
 80087a0:	d1c1      	bne.n	8008726 <_printf_float+0x342>
 80087a2:	e680      	b.n	80084a6 <_printf_float+0xc2>
 80087a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087a6:	2a01      	cmp	r2, #1
 80087a8:	dc01      	bgt.n	80087ae <_printf_float+0x3ca>
 80087aa:	07db      	lsls	r3, r3, #31
 80087ac:	d538      	bpl.n	8008820 <_printf_float+0x43c>
 80087ae:	2301      	movs	r3, #1
 80087b0:	4642      	mov	r2, r8
 80087b2:	4631      	mov	r1, r6
 80087b4:	4628      	mov	r0, r5
 80087b6:	47b8      	blx	r7
 80087b8:	3001      	adds	r0, #1
 80087ba:	f43f ae74 	beq.w	80084a6 <_printf_float+0xc2>
 80087be:	ee18 3a10 	vmov	r3, s16
 80087c2:	4652      	mov	r2, sl
 80087c4:	4631      	mov	r1, r6
 80087c6:	4628      	mov	r0, r5
 80087c8:	47b8      	blx	r7
 80087ca:	3001      	adds	r0, #1
 80087cc:	f43f ae6b 	beq.w	80084a6 <_printf_float+0xc2>
 80087d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087d4:	2200      	movs	r2, #0
 80087d6:	2300      	movs	r3, #0
 80087d8:	f7f8 f97e 	bl	8000ad8 <__aeabi_dcmpeq>
 80087dc:	b9d8      	cbnz	r0, 8008816 <_printf_float+0x432>
 80087de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e0:	f108 0201 	add.w	r2, r8, #1
 80087e4:	3b01      	subs	r3, #1
 80087e6:	4631      	mov	r1, r6
 80087e8:	4628      	mov	r0, r5
 80087ea:	47b8      	blx	r7
 80087ec:	3001      	adds	r0, #1
 80087ee:	d10e      	bne.n	800880e <_printf_float+0x42a>
 80087f0:	e659      	b.n	80084a6 <_printf_float+0xc2>
 80087f2:	2301      	movs	r3, #1
 80087f4:	4652      	mov	r2, sl
 80087f6:	4631      	mov	r1, r6
 80087f8:	4628      	mov	r0, r5
 80087fa:	47b8      	blx	r7
 80087fc:	3001      	adds	r0, #1
 80087fe:	f43f ae52 	beq.w	80084a6 <_printf_float+0xc2>
 8008802:	f108 0801 	add.w	r8, r8, #1
 8008806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008808:	3b01      	subs	r3, #1
 800880a:	4543      	cmp	r3, r8
 800880c:	dcf1      	bgt.n	80087f2 <_printf_float+0x40e>
 800880e:	464b      	mov	r3, r9
 8008810:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008814:	e6dc      	b.n	80085d0 <_printf_float+0x1ec>
 8008816:	f04f 0800 	mov.w	r8, #0
 800881a:	f104 0a1a 	add.w	sl, r4, #26
 800881e:	e7f2      	b.n	8008806 <_printf_float+0x422>
 8008820:	2301      	movs	r3, #1
 8008822:	4642      	mov	r2, r8
 8008824:	e7df      	b.n	80087e6 <_printf_float+0x402>
 8008826:	2301      	movs	r3, #1
 8008828:	464a      	mov	r2, r9
 800882a:	4631      	mov	r1, r6
 800882c:	4628      	mov	r0, r5
 800882e:	47b8      	blx	r7
 8008830:	3001      	adds	r0, #1
 8008832:	f43f ae38 	beq.w	80084a6 <_printf_float+0xc2>
 8008836:	f108 0801 	add.w	r8, r8, #1
 800883a:	68e3      	ldr	r3, [r4, #12]
 800883c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800883e:	1a5b      	subs	r3, r3, r1
 8008840:	4543      	cmp	r3, r8
 8008842:	dcf0      	bgt.n	8008826 <_printf_float+0x442>
 8008844:	e6fa      	b.n	800863c <_printf_float+0x258>
 8008846:	f04f 0800 	mov.w	r8, #0
 800884a:	f104 0919 	add.w	r9, r4, #25
 800884e:	e7f4      	b.n	800883a <_printf_float+0x456>

08008850 <_printf_common>:
 8008850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008854:	4616      	mov	r6, r2
 8008856:	4699      	mov	r9, r3
 8008858:	688a      	ldr	r2, [r1, #8]
 800885a:	690b      	ldr	r3, [r1, #16]
 800885c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008860:	4293      	cmp	r3, r2
 8008862:	bfb8      	it	lt
 8008864:	4613      	movlt	r3, r2
 8008866:	6033      	str	r3, [r6, #0]
 8008868:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800886c:	4607      	mov	r7, r0
 800886e:	460c      	mov	r4, r1
 8008870:	b10a      	cbz	r2, 8008876 <_printf_common+0x26>
 8008872:	3301      	adds	r3, #1
 8008874:	6033      	str	r3, [r6, #0]
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	0699      	lsls	r1, r3, #26
 800887a:	bf42      	ittt	mi
 800887c:	6833      	ldrmi	r3, [r6, #0]
 800887e:	3302      	addmi	r3, #2
 8008880:	6033      	strmi	r3, [r6, #0]
 8008882:	6825      	ldr	r5, [r4, #0]
 8008884:	f015 0506 	ands.w	r5, r5, #6
 8008888:	d106      	bne.n	8008898 <_printf_common+0x48>
 800888a:	f104 0a19 	add.w	sl, r4, #25
 800888e:	68e3      	ldr	r3, [r4, #12]
 8008890:	6832      	ldr	r2, [r6, #0]
 8008892:	1a9b      	subs	r3, r3, r2
 8008894:	42ab      	cmp	r3, r5
 8008896:	dc26      	bgt.n	80088e6 <_printf_common+0x96>
 8008898:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800889c:	1e13      	subs	r3, r2, #0
 800889e:	6822      	ldr	r2, [r4, #0]
 80088a0:	bf18      	it	ne
 80088a2:	2301      	movne	r3, #1
 80088a4:	0692      	lsls	r2, r2, #26
 80088a6:	d42b      	bmi.n	8008900 <_printf_common+0xb0>
 80088a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088ac:	4649      	mov	r1, r9
 80088ae:	4638      	mov	r0, r7
 80088b0:	47c0      	blx	r8
 80088b2:	3001      	adds	r0, #1
 80088b4:	d01e      	beq.n	80088f4 <_printf_common+0xa4>
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	68e5      	ldr	r5, [r4, #12]
 80088ba:	6832      	ldr	r2, [r6, #0]
 80088bc:	f003 0306 	and.w	r3, r3, #6
 80088c0:	2b04      	cmp	r3, #4
 80088c2:	bf08      	it	eq
 80088c4:	1aad      	subeq	r5, r5, r2
 80088c6:	68a3      	ldr	r3, [r4, #8]
 80088c8:	6922      	ldr	r2, [r4, #16]
 80088ca:	bf0c      	ite	eq
 80088cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088d0:	2500      	movne	r5, #0
 80088d2:	4293      	cmp	r3, r2
 80088d4:	bfc4      	itt	gt
 80088d6:	1a9b      	subgt	r3, r3, r2
 80088d8:	18ed      	addgt	r5, r5, r3
 80088da:	2600      	movs	r6, #0
 80088dc:	341a      	adds	r4, #26
 80088de:	42b5      	cmp	r5, r6
 80088e0:	d11a      	bne.n	8008918 <_printf_common+0xc8>
 80088e2:	2000      	movs	r0, #0
 80088e4:	e008      	b.n	80088f8 <_printf_common+0xa8>
 80088e6:	2301      	movs	r3, #1
 80088e8:	4652      	mov	r2, sl
 80088ea:	4649      	mov	r1, r9
 80088ec:	4638      	mov	r0, r7
 80088ee:	47c0      	blx	r8
 80088f0:	3001      	adds	r0, #1
 80088f2:	d103      	bne.n	80088fc <_printf_common+0xac>
 80088f4:	f04f 30ff 	mov.w	r0, #4294967295
 80088f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088fc:	3501      	adds	r5, #1
 80088fe:	e7c6      	b.n	800888e <_printf_common+0x3e>
 8008900:	18e1      	adds	r1, r4, r3
 8008902:	1c5a      	adds	r2, r3, #1
 8008904:	2030      	movs	r0, #48	; 0x30
 8008906:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800890a:	4422      	add	r2, r4
 800890c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008910:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008914:	3302      	adds	r3, #2
 8008916:	e7c7      	b.n	80088a8 <_printf_common+0x58>
 8008918:	2301      	movs	r3, #1
 800891a:	4622      	mov	r2, r4
 800891c:	4649      	mov	r1, r9
 800891e:	4638      	mov	r0, r7
 8008920:	47c0      	blx	r8
 8008922:	3001      	adds	r0, #1
 8008924:	d0e6      	beq.n	80088f4 <_printf_common+0xa4>
 8008926:	3601      	adds	r6, #1
 8008928:	e7d9      	b.n	80088de <_printf_common+0x8e>
	...

0800892c <_printf_i>:
 800892c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008930:	7e0f      	ldrb	r7, [r1, #24]
 8008932:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008934:	2f78      	cmp	r7, #120	; 0x78
 8008936:	4691      	mov	r9, r2
 8008938:	4680      	mov	r8, r0
 800893a:	460c      	mov	r4, r1
 800893c:	469a      	mov	sl, r3
 800893e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008942:	d807      	bhi.n	8008954 <_printf_i+0x28>
 8008944:	2f62      	cmp	r7, #98	; 0x62
 8008946:	d80a      	bhi.n	800895e <_printf_i+0x32>
 8008948:	2f00      	cmp	r7, #0
 800894a:	f000 80d8 	beq.w	8008afe <_printf_i+0x1d2>
 800894e:	2f58      	cmp	r7, #88	; 0x58
 8008950:	f000 80a3 	beq.w	8008a9a <_printf_i+0x16e>
 8008954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008958:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800895c:	e03a      	b.n	80089d4 <_printf_i+0xa8>
 800895e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008962:	2b15      	cmp	r3, #21
 8008964:	d8f6      	bhi.n	8008954 <_printf_i+0x28>
 8008966:	a101      	add	r1, pc, #4	; (adr r1, 800896c <_printf_i+0x40>)
 8008968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800896c:	080089c5 	.word	0x080089c5
 8008970:	080089d9 	.word	0x080089d9
 8008974:	08008955 	.word	0x08008955
 8008978:	08008955 	.word	0x08008955
 800897c:	08008955 	.word	0x08008955
 8008980:	08008955 	.word	0x08008955
 8008984:	080089d9 	.word	0x080089d9
 8008988:	08008955 	.word	0x08008955
 800898c:	08008955 	.word	0x08008955
 8008990:	08008955 	.word	0x08008955
 8008994:	08008955 	.word	0x08008955
 8008998:	08008ae5 	.word	0x08008ae5
 800899c:	08008a09 	.word	0x08008a09
 80089a0:	08008ac7 	.word	0x08008ac7
 80089a4:	08008955 	.word	0x08008955
 80089a8:	08008955 	.word	0x08008955
 80089ac:	08008b07 	.word	0x08008b07
 80089b0:	08008955 	.word	0x08008955
 80089b4:	08008a09 	.word	0x08008a09
 80089b8:	08008955 	.word	0x08008955
 80089bc:	08008955 	.word	0x08008955
 80089c0:	08008acf 	.word	0x08008acf
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	1d1a      	adds	r2, r3, #4
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	602a      	str	r2, [r5, #0]
 80089cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089d4:	2301      	movs	r3, #1
 80089d6:	e0a3      	b.n	8008b20 <_printf_i+0x1f4>
 80089d8:	6820      	ldr	r0, [r4, #0]
 80089da:	6829      	ldr	r1, [r5, #0]
 80089dc:	0606      	lsls	r6, r0, #24
 80089de:	f101 0304 	add.w	r3, r1, #4
 80089e2:	d50a      	bpl.n	80089fa <_printf_i+0xce>
 80089e4:	680e      	ldr	r6, [r1, #0]
 80089e6:	602b      	str	r3, [r5, #0]
 80089e8:	2e00      	cmp	r6, #0
 80089ea:	da03      	bge.n	80089f4 <_printf_i+0xc8>
 80089ec:	232d      	movs	r3, #45	; 0x2d
 80089ee:	4276      	negs	r6, r6
 80089f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089f4:	485e      	ldr	r0, [pc, #376]	; (8008b70 <_printf_i+0x244>)
 80089f6:	230a      	movs	r3, #10
 80089f8:	e019      	b.n	8008a2e <_printf_i+0x102>
 80089fa:	680e      	ldr	r6, [r1, #0]
 80089fc:	602b      	str	r3, [r5, #0]
 80089fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a02:	bf18      	it	ne
 8008a04:	b236      	sxthne	r6, r6
 8008a06:	e7ef      	b.n	80089e8 <_printf_i+0xbc>
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	6820      	ldr	r0, [r4, #0]
 8008a0c:	1d19      	adds	r1, r3, #4
 8008a0e:	6029      	str	r1, [r5, #0]
 8008a10:	0601      	lsls	r1, r0, #24
 8008a12:	d501      	bpl.n	8008a18 <_printf_i+0xec>
 8008a14:	681e      	ldr	r6, [r3, #0]
 8008a16:	e002      	b.n	8008a1e <_printf_i+0xf2>
 8008a18:	0646      	lsls	r6, r0, #25
 8008a1a:	d5fb      	bpl.n	8008a14 <_printf_i+0xe8>
 8008a1c:	881e      	ldrh	r6, [r3, #0]
 8008a1e:	4854      	ldr	r0, [pc, #336]	; (8008b70 <_printf_i+0x244>)
 8008a20:	2f6f      	cmp	r7, #111	; 0x6f
 8008a22:	bf0c      	ite	eq
 8008a24:	2308      	moveq	r3, #8
 8008a26:	230a      	movne	r3, #10
 8008a28:	2100      	movs	r1, #0
 8008a2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a2e:	6865      	ldr	r5, [r4, #4]
 8008a30:	60a5      	str	r5, [r4, #8]
 8008a32:	2d00      	cmp	r5, #0
 8008a34:	bfa2      	ittt	ge
 8008a36:	6821      	ldrge	r1, [r4, #0]
 8008a38:	f021 0104 	bicge.w	r1, r1, #4
 8008a3c:	6021      	strge	r1, [r4, #0]
 8008a3e:	b90e      	cbnz	r6, 8008a44 <_printf_i+0x118>
 8008a40:	2d00      	cmp	r5, #0
 8008a42:	d04d      	beq.n	8008ae0 <_printf_i+0x1b4>
 8008a44:	4615      	mov	r5, r2
 8008a46:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a4a:	fb03 6711 	mls	r7, r3, r1, r6
 8008a4e:	5dc7      	ldrb	r7, [r0, r7]
 8008a50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a54:	4637      	mov	r7, r6
 8008a56:	42bb      	cmp	r3, r7
 8008a58:	460e      	mov	r6, r1
 8008a5a:	d9f4      	bls.n	8008a46 <_printf_i+0x11a>
 8008a5c:	2b08      	cmp	r3, #8
 8008a5e:	d10b      	bne.n	8008a78 <_printf_i+0x14c>
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	07de      	lsls	r6, r3, #31
 8008a64:	d508      	bpl.n	8008a78 <_printf_i+0x14c>
 8008a66:	6923      	ldr	r3, [r4, #16]
 8008a68:	6861      	ldr	r1, [r4, #4]
 8008a6a:	4299      	cmp	r1, r3
 8008a6c:	bfde      	ittt	le
 8008a6e:	2330      	movle	r3, #48	; 0x30
 8008a70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a78:	1b52      	subs	r2, r2, r5
 8008a7a:	6122      	str	r2, [r4, #16]
 8008a7c:	f8cd a000 	str.w	sl, [sp]
 8008a80:	464b      	mov	r3, r9
 8008a82:	aa03      	add	r2, sp, #12
 8008a84:	4621      	mov	r1, r4
 8008a86:	4640      	mov	r0, r8
 8008a88:	f7ff fee2 	bl	8008850 <_printf_common>
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	d14c      	bne.n	8008b2a <_printf_i+0x1fe>
 8008a90:	f04f 30ff 	mov.w	r0, #4294967295
 8008a94:	b004      	add	sp, #16
 8008a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a9a:	4835      	ldr	r0, [pc, #212]	; (8008b70 <_printf_i+0x244>)
 8008a9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008aa0:	6829      	ldr	r1, [r5, #0]
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008aa8:	6029      	str	r1, [r5, #0]
 8008aaa:	061d      	lsls	r5, r3, #24
 8008aac:	d514      	bpl.n	8008ad8 <_printf_i+0x1ac>
 8008aae:	07df      	lsls	r7, r3, #31
 8008ab0:	bf44      	itt	mi
 8008ab2:	f043 0320 	orrmi.w	r3, r3, #32
 8008ab6:	6023      	strmi	r3, [r4, #0]
 8008ab8:	b91e      	cbnz	r6, 8008ac2 <_printf_i+0x196>
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	f023 0320 	bic.w	r3, r3, #32
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	2310      	movs	r3, #16
 8008ac4:	e7b0      	b.n	8008a28 <_printf_i+0xfc>
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	f043 0320 	orr.w	r3, r3, #32
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	2378      	movs	r3, #120	; 0x78
 8008ad0:	4828      	ldr	r0, [pc, #160]	; (8008b74 <_printf_i+0x248>)
 8008ad2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ad6:	e7e3      	b.n	8008aa0 <_printf_i+0x174>
 8008ad8:	0659      	lsls	r1, r3, #25
 8008ada:	bf48      	it	mi
 8008adc:	b2b6      	uxthmi	r6, r6
 8008ade:	e7e6      	b.n	8008aae <_printf_i+0x182>
 8008ae0:	4615      	mov	r5, r2
 8008ae2:	e7bb      	b.n	8008a5c <_printf_i+0x130>
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	6826      	ldr	r6, [r4, #0]
 8008ae8:	6961      	ldr	r1, [r4, #20]
 8008aea:	1d18      	adds	r0, r3, #4
 8008aec:	6028      	str	r0, [r5, #0]
 8008aee:	0635      	lsls	r5, r6, #24
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	d501      	bpl.n	8008af8 <_printf_i+0x1cc>
 8008af4:	6019      	str	r1, [r3, #0]
 8008af6:	e002      	b.n	8008afe <_printf_i+0x1d2>
 8008af8:	0670      	lsls	r0, r6, #25
 8008afa:	d5fb      	bpl.n	8008af4 <_printf_i+0x1c8>
 8008afc:	8019      	strh	r1, [r3, #0]
 8008afe:	2300      	movs	r3, #0
 8008b00:	6123      	str	r3, [r4, #16]
 8008b02:	4615      	mov	r5, r2
 8008b04:	e7ba      	b.n	8008a7c <_printf_i+0x150>
 8008b06:	682b      	ldr	r3, [r5, #0]
 8008b08:	1d1a      	adds	r2, r3, #4
 8008b0a:	602a      	str	r2, [r5, #0]
 8008b0c:	681d      	ldr	r5, [r3, #0]
 8008b0e:	6862      	ldr	r2, [r4, #4]
 8008b10:	2100      	movs	r1, #0
 8008b12:	4628      	mov	r0, r5
 8008b14:	f7f7 fb6c 	bl	80001f0 <memchr>
 8008b18:	b108      	cbz	r0, 8008b1e <_printf_i+0x1f2>
 8008b1a:	1b40      	subs	r0, r0, r5
 8008b1c:	6060      	str	r0, [r4, #4]
 8008b1e:	6863      	ldr	r3, [r4, #4]
 8008b20:	6123      	str	r3, [r4, #16]
 8008b22:	2300      	movs	r3, #0
 8008b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b28:	e7a8      	b.n	8008a7c <_printf_i+0x150>
 8008b2a:	6923      	ldr	r3, [r4, #16]
 8008b2c:	462a      	mov	r2, r5
 8008b2e:	4649      	mov	r1, r9
 8008b30:	4640      	mov	r0, r8
 8008b32:	47d0      	blx	sl
 8008b34:	3001      	adds	r0, #1
 8008b36:	d0ab      	beq.n	8008a90 <_printf_i+0x164>
 8008b38:	6823      	ldr	r3, [r4, #0]
 8008b3a:	079b      	lsls	r3, r3, #30
 8008b3c:	d413      	bmi.n	8008b66 <_printf_i+0x23a>
 8008b3e:	68e0      	ldr	r0, [r4, #12]
 8008b40:	9b03      	ldr	r3, [sp, #12]
 8008b42:	4298      	cmp	r0, r3
 8008b44:	bfb8      	it	lt
 8008b46:	4618      	movlt	r0, r3
 8008b48:	e7a4      	b.n	8008a94 <_printf_i+0x168>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	4632      	mov	r2, r6
 8008b4e:	4649      	mov	r1, r9
 8008b50:	4640      	mov	r0, r8
 8008b52:	47d0      	blx	sl
 8008b54:	3001      	adds	r0, #1
 8008b56:	d09b      	beq.n	8008a90 <_printf_i+0x164>
 8008b58:	3501      	adds	r5, #1
 8008b5a:	68e3      	ldr	r3, [r4, #12]
 8008b5c:	9903      	ldr	r1, [sp, #12]
 8008b5e:	1a5b      	subs	r3, r3, r1
 8008b60:	42ab      	cmp	r3, r5
 8008b62:	dcf2      	bgt.n	8008b4a <_printf_i+0x21e>
 8008b64:	e7eb      	b.n	8008b3e <_printf_i+0x212>
 8008b66:	2500      	movs	r5, #0
 8008b68:	f104 0619 	add.w	r6, r4, #25
 8008b6c:	e7f5      	b.n	8008b5a <_printf_i+0x22e>
 8008b6e:	bf00      	nop
 8008b70:	0800e216 	.word	0x0800e216
 8008b74:	0800e227 	.word	0x0800e227

08008b78 <_scanf_float>:
 8008b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b7c:	b087      	sub	sp, #28
 8008b7e:	4617      	mov	r7, r2
 8008b80:	9303      	str	r3, [sp, #12]
 8008b82:	688b      	ldr	r3, [r1, #8]
 8008b84:	1e5a      	subs	r2, r3, #1
 8008b86:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008b8a:	bf83      	ittte	hi
 8008b8c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008b90:	195b      	addhi	r3, r3, r5
 8008b92:	9302      	strhi	r3, [sp, #8]
 8008b94:	2300      	movls	r3, #0
 8008b96:	bf86      	itte	hi
 8008b98:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008b9c:	608b      	strhi	r3, [r1, #8]
 8008b9e:	9302      	strls	r3, [sp, #8]
 8008ba0:	680b      	ldr	r3, [r1, #0]
 8008ba2:	468b      	mov	fp, r1
 8008ba4:	2500      	movs	r5, #0
 8008ba6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008baa:	f84b 3b1c 	str.w	r3, [fp], #28
 8008bae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008bb2:	4680      	mov	r8, r0
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	465e      	mov	r6, fp
 8008bb8:	46aa      	mov	sl, r5
 8008bba:	46a9      	mov	r9, r5
 8008bbc:	9501      	str	r5, [sp, #4]
 8008bbe:	68a2      	ldr	r2, [r4, #8]
 8008bc0:	b152      	cbz	r2, 8008bd8 <_scanf_float+0x60>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	2b4e      	cmp	r3, #78	; 0x4e
 8008bc8:	d864      	bhi.n	8008c94 <_scanf_float+0x11c>
 8008bca:	2b40      	cmp	r3, #64	; 0x40
 8008bcc:	d83c      	bhi.n	8008c48 <_scanf_float+0xd0>
 8008bce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008bd2:	b2c8      	uxtb	r0, r1
 8008bd4:	280e      	cmp	r0, #14
 8008bd6:	d93a      	bls.n	8008c4e <_scanf_float+0xd6>
 8008bd8:	f1b9 0f00 	cmp.w	r9, #0
 8008bdc:	d003      	beq.n	8008be6 <_scanf_float+0x6e>
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008bea:	f1ba 0f01 	cmp.w	sl, #1
 8008bee:	f200 8113 	bhi.w	8008e18 <_scanf_float+0x2a0>
 8008bf2:	455e      	cmp	r6, fp
 8008bf4:	f200 8105 	bhi.w	8008e02 <_scanf_float+0x28a>
 8008bf8:	2501      	movs	r5, #1
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	b007      	add	sp, #28
 8008bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008c06:	2a0d      	cmp	r2, #13
 8008c08:	d8e6      	bhi.n	8008bd8 <_scanf_float+0x60>
 8008c0a:	a101      	add	r1, pc, #4	; (adr r1, 8008c10 <_scanf_float+0x98>)
 8008c0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c10:	08008d4f 	.word	0x08008d4f
 8008c14:	08008bd9 	.word	0x08008bd9
 8008c18:	08008bd9 	.word	0x08008bd9
 8008c1c:	08008bd9 	.word	0x08008bd9
 8008c20:	08008daf 	.word	0x08008daf
 8008c24:	08008d87 	.word	0x08008d87
 8008c28:	08008bd9 	.word	0x08008bd9
 8008c2c:	08008bd9 	.word	0x08008bd9
 8008c30:	08008d5d 	.word	0x08008d5d
 8008c34:	08008bd9 	.word	0x08008bd9
 8008c38:	08008bd9 	.word	0x08008bd9
 8008c3c:	08008bd9 	.word	0x08008bd9
 8008c40:	08008bd9 	.word	0x08008bd9
 8008c44:	08008d15 	.word	0x08008d15
 8008c48:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008c4c:	e7db      	b.n	8008c06 <_scanf_float+0x8e>
 8008c4e:	290e      	cmp	r1, #14
 8008c50:	d8c2      	bhi.n	8008bd8 <_scanf_float+0x60>
 8008c52:	a001      	add	r0, pc, #4	; (adr r0, 8008c58 <_scanf_float+0xe0>)
 8008c54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008c58:	08008d07 	.word	0x08008d07
 8008c5c:	08008bd9 	.word	0x08008bd9
 8008c60:	08008d07 	.word	0x08008d07
 8008c64:	08008d9b 	.word	0x08008d9b
 8008c68:	08008bd9 	.word	0x08008bd9
 8008c6c:	08008cb5 	.word	0x08008cb5
 8008c70:	08008cf1 	.word	0x08008cf1
 8008c74:	08008cf1 	.word	0x08008cf1
 8008c78:	08008cf1 	.word	0x08008cf1
 8008c7c:	08008cf1 	.word	0x08008cf1
 8008c80:	08008cf1 	.word	0x08008cf1
 8008c84:	08008cf1 	.word	0x08008cf1
 8008c88:	08008cf1 	.word	0x08008cf1
 8008c8c:	08008cf1 	.word	0x08008cf1
 8008c90:	08008cf1 	.word	0x08008cf1
 8008c94:	2b6e      	cmp	r3, #110	; 0x6e
 8008c96:	d809      	bhi.n	8008cac <_scanf_float+0x134>
 8008c98:	2b60      	cmp	r3, #96	; 0x60
 8008c9a:	d8b2      	bhi.n	8008c02 <_scanf_float+0x8a>
 8008c9c:	2b54      	cmp	r3, #84	; 0x54
 8008c9e:	d077      	beq.n	8008d90 <_scanf_float+0x218>
 8008ca0:	2b59      	cmp	r3, #89	; 0x59
 8008ca2:	d199      	bne.n	8008bd8 <_scanf_float+0x60>
 8008ca4:	2d07      	cmp	r5, #7
 8008ca6:	d197      	bne.n	8008bd8 <_scanf_float+0x60>
 8008ca8:	2508      	movs	r5, #8
 8008caa:	e029      	b.n	8008d00 <_scanf_float+0x188>
 8008cac:	2b74      	cmp	r3, #116	; 0x74
 8008cae:	d06f      	beq.n	8008d90 <_scanf_float+0x218>
 8008cb0:	2b79      	cmp	r3, #121	; 0x79
 8008cb2:	e7f6      	b.n	8008ca2 <_scanf_float+0x12a>
 8008cb4:	6821      	ldr	r1, [r4, #0]
 8008cb6:	05c8      	lsls	r0, r1, #23
 8008cb8:	d51a      	bpl.n	8008cf0 <_scanf_float+0x178>
 8008cba:	9b02      	ldr	r3, [sp, #8]
 8008cbc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008cc0:	6021      	str	r1, [r4, #0]
 8008cc2:	f109 0901 	add.w	r9, r9, #1
 8008cc6:	b11b      	cbz	r3, 8008cd0 <_scanf_float+0x158>
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	3201      	adds	r2, #1
 8008ccc:	9302      	str	r3, [sp, #8]
 8008cce:	60a2      	str	r2, [r4, #8]
 8008cd0:	68a3      	ldr	r3, [r4, #8]
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	60a3      	str	r3, [r4, #8]
 8008cd6:	6923      	ldr	r3, [r4, #16]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	6123      	str	r3, [r4, #16]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	607b      	str	r3, [r7, #4]
 8008ce4:	f340 8084 	ble.w	8008df0 <_scanf_float+0x278>
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	3301      	adds	r3, #1
 8008cec:	603b      	str	r3, [r7, #0]
 8008cee:	e766      	b.n	8008bbe <_scanf_float+0x46>
 8008cf0:	eb1a 0f05 	cmn.w	sl, r5
 8008cf4:	f47f af70 	bne.w	8008bd8 <_scanf_float+0x60>
 8008cf8:	6822      	ldr	r2, [r4, #0]
 8008cfa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008cfe:	6022      	str	r2, [r4, #0]
 8008d00:	f806 3b01 	strb.w	r3, [r6], #1
 8008d04:	e7e4      	b.n	8008cd0 <_scanf_float+0x158>
 8008d06:	6822      	ldr	r2, [r4, #0]
 8008d08:	0610      	lsls	r0, r2, #24
 8008d0a:	f57f af65 	bpl.w	8008bd8 <_scanf_float+0x60>
 8008d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d12:	e7f4      	b.n	8008cfe <_scanf_float+0x186>
 8008d14:	f1ba 0f00 	cmp.w	sl, #0
 8008d18:	d10e      	bne.n	8008d38 <_scanf_float+0x1c0>
 8008d1a:	f1b9 0f00 	cmp.w	r9, #0
 8008d1e:	d10e      	bne.n	8008d3e <_scanf_float+0x1c6>
 8008d20:	6822      	ldr	r2, [r4, #0]
 8008d22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008d26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008d2a:	d108      	bne.n	8008d3e <_scanf_float+0x1c6>
 8008d2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d30:	6022      	str	r2, [r4, #0]
 8008d32:	f04f 0a01 	mov.w	sl, #1
 8008d36:	e7e3      	b.n	8008d00 <_scanf_float+0x188>
 8008d38:	f1ba 0f02 	cmp.w	sl, #2
 8008d3c:	d055      	beq.n	8008dea <_scanf_float+0x272>
 8008d3e:	2d01      	cmp	r5, #1
 8008d40:	d002      	beq.n	8008d48 <_scanf_float+0x1d0>
 8008d42:	2d04      	cmp	r5, #4
 8008d44:	f47f af48 	bne.w	8008bd8 <_scanf_float+0x60>
 8008d48:	3501      	adds	r5, #1
 8008d4a:	b2ed      	uxtb	r5, r5
 8008d4c:	e7d8      	b.n	8008d00 <_scanf_float+0x188>
 8008d4e:	f1ba 0f01 	cmp.w	sl, #1
 8008d52:	f47f af41 	bne.w	8008bd8 <_scanf_float+0x60>
 8008d56:	f04f 0a02 	mov.w	sl, #2
 8008d5a:	e7d1      	b.n	8008d00 <_scanf_float+0x188>
 8008d5c:	b97d      	cbnz	r5, 8008d7e <_scanf_float+0x206>
 8008d5e:	f1b9 0f00 	cmp.w	r9, #0
 8008d62:	f47f af3c 	bne.w	8008bde <_scanf_float+0x66>
 8008d66:	6822      	ldr	r2, [r4, #0]
 8008d68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008d6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008d70:	f47f af39 	bne.w	8008be6 <_scanf_float+0x6e>
 8008d74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d78:	6022      	str	r2, [r4, #0]
 8008d7a:	2501      	movs	r5, #1
 8008d7c:	e7c0      	b.n	8008d00 <_scanf_float+0x188>
 8008d7e:	2d03      	cmp	r5, #3
 8008d80:	d0e2      	beq.n	8008d48 <_scanf_float+0x1d0>
 8008d82:	2d05      	cmp	r5, #5
 8008d84:	e7de      	b.n	8008d44 <_scanf_float+0x1cc>
 8008d86:	2d02      	cmp	r5, #2
 8008d88:	f47f af26 	bne.w	8008bd8 <_scanf_float+0x60>
 8008d8c:	2503      	movs	r5, #3
 8008d8e:	e7b7      	b.n	8008d00 <_scanf_float+0x188>
 8008d90:	2d06      	cmp	r5, #6
 8008d92:	f47f af21 	bne.w	8008bd8 <_scanf_float+0x60>
 8008d96:	2507      	movs	r5, #7
 8008d98:	e7b2      	b.n	8008d00 <_scanf_float+0x188>
 8008d9a:	6822      	ldr	r2, [r4, #0]
 8008d9c:	0591      	lsls	r1, r2, #22
 8008d9e:	f57f af1b 	bpl.w	8008bd8 <_scanf_float+0x60>
 8008da2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008da6:	6022      	str	r2, [r4, #0]
 8008da8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008dac:	e7a8      	b.n	8008d00 <_scanf_float+0x188>
 8008dae:	6822      	ldr	r2, [r4, #0]
 8008db0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008db4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008db8:	d006      	beq.n	8008dc8 <_scanf_float+0x250>
 8008dba:	0550      	lsls	r0, r2, #21
 8008dbc:	f57f af0c 	bpl.w	8008bd8 <_scanf_float+0x60>
 8008dc0:	f1b9 0f00 	cmp.w	r9, #0
 8008dc4:	f43f af0f 	beq.w	8008be6 <_scanf_float+0x6e>
 8008dc8:	0591      	lsls	r1, r2, #22
 8008dca:	bf58      	it	pl
 8008dcc:	9901      	ldrpl	r1, [sp, #4]
 8008dce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008dd2:	bf58      	it	pl
 8008dd4:	eba9 0101 	subpl.w	r1, r9, r1
 8008dd8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008ddc:	bf58      	it	pl
 8008dde:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008de2:	6022      	str	r2, [r4, #0]
 8008de4:	f04f 0900 	mov.w	r9, #0
 8008de8:	e78a      	b.n	8008d00 <_scanf_float+0x188>
 8008dea:	f04f 0a03 	mov.w	sl, #3
 8008dee:	e787      	b.n	8008d00 <_scanf_float+0x188>
 8008df0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008df4:	4639      	mov	r1, r7
 8008df6:	4640      	mov	r0, r8
 8008df8:	4798      	blx	r3
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	f43f aedf 	beq.w	8008bbe <_scanf_float+0x46>
 8008e00:	e6ea      	b.n	8008bd8 <_scanf_float+0x60>
 8008e02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e0a:	463a      	mov	r2, r7
 8008e0c:	4640      	mov	r0, r8
 8008e0e:	4798      	blx	r3
 8008e10:	6923      	ldr	r3, [r4, #16]
 8008e12:	3b01      	subs	r3, #1
 8008e14:	6123      	str	r3, [r4, #16]
 8008e16:	e6ec      	b.n	8008bf2 <_scanf_float+0x7a>
 8008e18:	1e6b      	subs	r3, r5, #1
 8008e1a:	2b06      	cmp	r3, #6
 8008e1c:	d825      	bhi.n	8008e6a <_scanf_float+0x2f2>
 8008e1e:	2d02      	cmp	r5, #2
 8008e20:	d836      	bhi.n	8008e90 <_scanf_float+0x318>
 8008e22:	455e      	cmp	r6, fp
 8008e24:	f67f aee8 	bls.w	8008bf8 <_scanf_float+0x80>
 8008e28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e30:	463a      	mov	r2, r7
 8008e32:	4640      	mov	r0, r8
 8008e34:	4798      	blx	r3
 8008e36:	6923      	ldr	r3, [r4, #16]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	6123      	str	r3, [r4, #16]
 8008e3c:	e7f1      	b.n	8008e22 <_scanf_float+0x2aa>
 8008e3e:	9802      	ldr	r0, [sp, #8]
 8008e40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e44:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008e48:	9002      	str	r0, [sp, #8]
 8008e4a:	463a      	mov	r2, r7
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	4798      	blx	r3
 8008e50:	6923      	ldr	r3, [r4, #16]
 8008e52:	3b01      	subs	r3, #1
 8008e54:	6123      	str	r3, [r4, #16]
 8008e56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e5a:	fa5f fa8a 	uxtb.w	sl, sl
 8008e5e:	f1ba 0f02 	cmp.w	sl, #2
 8008e62:	d1ec      	bne.n	8008e3e <_scanf_float+0x2c6>
 8008e64:	3d03      	subs	r5, #3
 8008e66:	b2ed      	uxtb	r5, r5
 8008e68:	1b76      	subs	r6, r6, r5
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	05da      	lsls	r2, r3, #23
 8008e6e:	d52f      	bpl.n	8008ed0 <_scanf_float+0x358>
 8008e70:	055b      	lsls	r3, r3, #21
 8008e72:	d510      	bpl.n	8008e96 <_scanf_float+0x31e>
 8008e74:	455e      	cmp	r6, fp
 8008e76:	f67f aebf 	bls.w	8008bf8 <_scanf_float+0x80>
 8008e7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e82:	463a      	mov	r2, r7
 8008e84:	4640      	mov	r0, r8
 8008e86:	4798      	blx	r3
 8008e88:	6923      	ldr	r3, [r4, #16]
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	6123      	str	r3, [r4, #16]
 8008e8e:	e7f1      	b.n	8008e74 <_scanf_float+0x2fc>
 8008e90:	46aa      	mov	sl, r5
 8008e92:	9602      	str	r6, [sp, #8]
 8008e94:	e7df      	b.n	8008e56 <_scanf_float+0x2de>
 8008e96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008e9a:	6923      	ldr	r3, [r4, #16]
 8008e9c:	2965      	cmp	r1, #101	; 0x65
 8008e9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ea2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008ea6:	6123      	str	r3, [r4, #16]
 8008ea8:	d00c      	beq.n	8008ec4 <_scanf_float+0x34c>
 8008eaa:	2945      	cmp	r1, #69	; 0x45
 8008eac:	d00a      	beq.n	8008ec4 <_scanf_float+0x34c>
 8008eae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008eb2:	463a      	mov	r2, r7
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	4798      	blx	r3
 8008eb8:	6923      	ldr	r3, [r4, #16]
 8008eba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	1eb5      	subs	r5, r6, #2
 8008ec2:	6123      	str	r3, [r4, #16]
 8008ec4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ec8:	463a      	mov	r2, r7
 8008eca:	4640      	mov	r0, r8
 8008ecc:	4798      	blx	r3
 8008ece:	462e      	mov	r6, r5
 8008ed0:	6825      	ldr	r5, [r4, #0]
 8008ed2:	f015 0510 	ands.w	r5, r5, #16
 8008ed6:	d159      	bne.n	8008f8c <_scanf_float+0x414>
 8008ed8:	7035      	strb	r5, [r6, #0]
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ee4:	d11b      	bne.n	8008f1e <_scanf_float+0x3a6>
 8008ee6:	9b01      	ldr	r3, [sp, #4]
 8008ee8:	454b      	cmp	r3, r9
 8008eea:	eba3 0209 	sub.w	r2, r3, r9
 8008eee:	d123      	bne.n	8008f38 <_scanf_float+0x3c0>
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	4659      	mov	r1, fp
 8008ef4:	4640      	mov	r0, r8
 8008ef6:	f000 fe99 	bl	8009c2c <_strtod_r>
 8008efa:	6822      	ldr	r2, [r4, #0]
 8008efc:	9b03      	ldr	r3, [sp, #12]
 8008efe:	f012 0f02 	tst.w	r2, #2
 8008f02:	ec57 6b10 	vmov	r6, r7, d0
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	d021      	beq.n	8008f4e <_scanf_float+0x3d6>
 8008f0a:	9903      	ldr	r1, [sp, #12]
 8008f0c:	1d1a      	adds	r2, r3, #4
 8008f0e:	600a      	str	r2, [r1, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	e9c3 6700 	strd	r6, r7, [r3]
 8008f16:	68e3      	ldr	r3, [r4, #12]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	60e3      	str	r3, [r4, #12]
 8008f1c:	e66d      	b.n	8008bfa <_scanf_float+0x82>
 8008f1e:	9b04      	ldr	r3, [sp, #16]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d0e5      	beq.n	8008ef0 <_scanf_float+0x378>
 8008f24:	9905      	ldr	r1, [sp, #20]
 8008f26:	230a      	movs	r3, #10
 8008f28:	462a      	mov	r2, r5
 8008f2a:	3101      	adds	r1, #1
 8008f2c:	4640      	mov	r0, r8
 8008f2e:	f000 ff05 	bl	8009d3c <_strtol_r>
 8008f32:	9b04      	ldr	r3, [sp, #16]
 8008f34:	9e05      	ldr	r6, [sp, #20]
 8008f36:	1ac2      	subs	r2, r0, r3
 8008f38:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008f3c:	429e      	cmp	r6, r3
 8008f3e:	bf28      	it	cs
 8008f40:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008f44:	4912      	ldr	r1, [pc, #72]	; (8008f90 <_scanf_float+0x418>)
 8008f46:	4630      	mov	r0, r6
 8008f48:	f000 f82c 	bl	8008fa4 <siprintf>
 8008f4c:	e7d0      	b.n	8008ef0 <_scanf_float+0x378>
 8008f4e:	9903      	ldr	r1, [sp, #12]
 8008f50:	f012 0f04 	tst.w	r2, #4
 8008f54:	f103 0204 	add.w	r2, r3, #4
 8008f58:	600a      	str	r2, [r1, #0]
 8008f5a:	d1d9      	bne.n	8008f10 <_scanf_float+0x398>
 8008f5c:	f8d3 8000 	ldr.w	r8, [r3]
 8008f60:	ee10 2a10 	vmov	r2, s0
 8008f64:	ee10 0a10 	vmov	r0, s0
 8008f68:	463b      	mov	r3, r7
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	f7f7 fde6 	bl	8000b3c <__aeabi_dcmpun>
 8008f70:	b128      	cbz	r0, 8008f7e <_scanf_float+0x406>
 8008f72:	4808      	ldr	r0, [pc, #32]	; (8008f94 <_scanf_float+0x41c>)
 8008f74:	f000 f810 	bl	8008f98 <nanf>
 8008f78:	ed88 0a00 	vstr	s0, [r8]
 8008f7c:	e7cb      	b.n	8008f16 <_scanf_float+0x39e>
 8008f7e:	4630      	mov	r0, r6
 8008f80:	4639      	mov	r1, r7
 8008f82:	f7f7 fe39 	bl	8000bf8 <__aeabi_d2f>
 8008f86:	f8c8 0000 	str.w	r0, [r8]
 8008f8a:	e7c4      	b.n	8008f16 <_scanf_float+0x39e>
 8008f8c:	2500      	movs	r5, #0
 8008f8e:	e634      	b.n	8008bfa <_scanf_float+0x82>
 8008f90:	0800e238 	.word	0x0800e238
 8008f94:	0800e640 	.word	0x0800e640

08008f98 <nanf>:
 8008f98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008fa0 <nanf+0x8>
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	7fc00000 	.word	0x7fc00000

08008fa4 <siprintf>:
 8008fa4:	b40e      	push	{r1, r2, r3}
 8008fa6:	b500      	push	{lr}
 8008fa8:	b09c      	sub	sp, #112	; 0x70
 8008faa:	ab1d      	add	r3, sp, #116	; 0x74
 8008fac:	9002      	str	r0, [sp, #8]
 8008fae:	9006      	str	r0, [sp, #24]
 8008fb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fb4:	4809      	ldr	r0, [pc, #36]	; (8008fdc <siprintf+0x38>)
 8008fb6:	9107      	str	r1, [sp, #28]
 8008fb8:	9104      	str	r1, [sp, #16]
 8008fba:	4909      	ldr	r1, [pc, #36]	; (8008fe0 <siprintf+0x3c>)
 8008fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fc0:	9105      	str	r1, [sp, #20]
 8008fc2:	6800      	ldr	r0, [r0, #0]
 8008fc4:	9301      	str	r3, [sp, #4]
 8008fc6:	a902      	add	r1, sp, #8
 8008fc8:	f002 fed6 	bl	800bd78 <_svfiprintf_r>
 8008fcc:	9b02      	ldr	r3, [sp, #8]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	701a      	strb	r2, [r3, #0]
 8008fd2:	b01c      	add	sp, #112	; 0x70
 8008fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fd8:	b003      	add	sp, #12
 8008fda:	4770      	bx	lr
 8008fdc:	2000020c 	.word	0x2000020c
 8008fe0:	ffff0208 	.word	0xffff0208

08008fe4 <sulp>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	460d      	mov	r5, r1
 8008fea:	ec45 4b10 	vmov	d0, r4, r5
 8008fee:	4616      	mov	r6, r2
 8008ff0:	f002 fc20 	bl	800b834 <__ulp>
 8008ff4:	ec51 0b10 	vmov	r0, r1, d0
 8008ff8:	b17e      	cbz	r6, 800901a <sulp+0x36>
 8008ffa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ffe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009002:	2b00      	cmp	r3, #0
 8009004:	dd09      	ble.n	800901a <sulp+0x36>
 8009006:	051b      	lsls	r3, r3, #20
 8009008:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800900c:	2400      	movs	r4, #0
 800900e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009012:	4622      	mov	r2, r4
 8009014:	462b      	mov	r3, r5
 8009016:	f7f7 faf7 	bl	8000608 <__aeabi_dmul>
 800901a:	bd70      	pop	{r4, r5, r6, pc}
 800901c:	0000      	movs	r0, r0
	...

08009020 <_strtod_l>:
 8009020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009024:	ed2d 8b02 	vpush	{d8}
 8009028:	b09d      	sub	sp, #116	; 0x74
 800902a:	461f      	mov	r7, r3
 800902c:	2300      	movs	r3, #0
 800902e:	9318      	str	r3, [sp, #96]	; 0x60
 8009030:	4ba2      	ldr	r3, [pc, #648]	; (80092bc <_strtod_l+0x29c>)
 8009032:	9213      	str	r2, [sp, #76]	; 0x4c
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	9305      	str	r3, [sp, #20]
 8009038:	4604      	mov	r4, r0
 800903a:	4618      	mov	r0, r3
 800903c:	4688      	mov	r8, r1
 800903e:	f7f7 f8cf 	bl	80001e0 <strlen>
 8009042:	f04f 0a00 	mov.w	sl, #0
 8009046:	4605      	mov	r5, r0
 8009048:	f04f 0b00 	mov.w	fp, #0
 800904c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009052:	781a      	ldrb	r2, [r3, #0]
 8009054:	2a2b      	cmp	r2, #43	; 0x2b
 8009056:	d04e      	beq.n	80090f6 <_strtod_l+0xd6>
 8009058:	d83b      	bhi.n	80090d2 <_strtod_l+0xb2>
 800905a:	2a0d      	cmp	r2, #13
 800905c:	d834      	bhi.n	80090c8 <_strtod_l+0xa8>
 800905e:	2a08      	cmp	r2, #8
 8009060:	d834      	bhi.n	80090cc <_strtod_l+0xac>
 8009062:	2a00      	cmp	r2, #0
 8009064:	d03e      	beq.n	80090e4 <_strtod_l+0xc4>
 8009066:	2300      	movs	r3, #0
 8009068:	930a      	str	r3, [sp, #40]	; 0x28
 800906a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800906c:	7833      	ldrb	r3, [r6, #0]
 800906e:	2b30      	cmp	r3, #48	; 0x30
 8009070:	f040 80b0 	bne.w	80091d4 <_strtod_l+0x1b4>
 8009074:	7873      	ldrb	r3, [r6, #1]
 8009076:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800907a:	2b58      	cmp	r3, #88	; 0x58
 800907c:	d168      	bne.n	8009150 <_strtod_l+0x130>
 800907e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009080:	9301      	str	r3, [sp, #4]
 8009082:	ab18      	add	r3, sp, #96	; 0x60
 8009084:	9702      	str	r7, [sp, #8]
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	4a8d      	ldr	r2, [pc, #564]	; (80092c0 <_strtod_l+0x2a0>)
 800908a:	ab19      	add	r3, sp, #100	; 0x64
 800908c:	a917      	add	r1, sp, #92	; 0x5c
 800908e:	4620      	mov	r0, r4
 8009090:	f001 fd38 	bl	800ab04 <__gethex>
 8009094:	f010 0707 	ands.w	r7, r0, #7
 8009098:	4605      	mov	r5, r0
 800909a:	d005      	beq.n	80090a8 <_strtod_l+0x88>
 800909c:	2f06      	cmp	r7, #6
 800909e:	d12c      	bne.n	80090fa <_strtod_l+0xda>
 80090a0:	3601      	adds	r6, #1
 80090a2:	2300      	movs	r3, #0
 80090a4:	9617      	str	r6, [sp, #92]	; 0x5c
 80090a6:	930a      	str	r3, [sp, #40]	; 0x28
 80090a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f040 8590 	bne.w	8009bd0 <_strtod_l+0xbb0>
 80090b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090b2:	b1eb      	cbz	r3, 80090f0 <_strtod_l+0xd0>
 80090b4:	4652      	mov	r2, sl
 80090b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80090ba:	ec43 2b10 	vmov	d0, r2, r3
 80090be:	b01d      	add	sp, #116	; 0x74
 80090c0:	ecbd 8b02 	vpop	{d8}
 80090c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c8:	2a20      	cmp	r2, #32
 80090ca:	d1cc      	bne.n	8009066 <_strtod_l+0x46>
 80090cc:	3301      	adds	r3, #1
 80090ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80090d0:	e7be      	b.n	8009050 <_strtod_l+0x30>
 80090d2:	2a2d      	cmp	r2, #45	; 0x2d
 80090d4:	d1c7      	bne.n	8009066 <_strtod_l+0x46>
 80090d6:	2201      	movs	r2, #1
 80090d8:	920a      	str	r2, [sp, #40]	; 0x28
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80090de:	785b      	ldrb	r3, [r3, #1]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1c2      	bne.n	800906a <_strtod_l+0x4a>
 80090e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f040 856e 	bne.w	8009bcc <_strtod_l+0xbac>
 80090f0:	4652      	mov	r2, sl
 80090f2:	465b      	mov	r3, fp
 80090f4:	e7e1      	b.n	80090ba <_strtod_l+0x9a>
 80090f6:	2200      	movs	r2, #0
 80090f8:	e7ee      	b.n	80090d8 <_strtod_l+0xb8>
 80090fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80090fc:	b13a      	cbz	r2, 800910e <_strtod_l+0xee>
 80090fe:	2135      	movs	r1, #53	; 0x35
 8009100:	a81a      	add	r0, sp, #104	; 0x68
 8009102:	f002 fca2 	bl	800ba4a <__copybits>
 8009106:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009108:	4620      	mov	r0, r4
 800910a:	f002 f861 	bl	800b1d0 <_Bfree>
 800910e:	3f01      	subs	r7, #1
 8009110:	2f04      	cmp	r7, #4
 8009112:	d806      	bhi.n	8009122 <_strtod_l+0x102>
 8009114:	e8df f007 	tbb	[pc, r7]
 8009118:	1714030a 	.word	0x1714030a
 800911c:	0a          	.byte	0x0a
 800911d:	00          	.byte	0x00
 800911e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009122:	0728      	lsls	r0, r5, #28
 8009124:	d5c0      	bpl.n	80090a8 <_strtod_l+0x88>
 8009126:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800912a:	e7bd      	b.n	80090a8 <_strtod_l+0x88>
 800912c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009130:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009132:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009136:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800913a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800913e:	e7f0      	b.n	8009122 <_strtod_l+0x102>
 8009140:	f8df b180 	ldr.w	fp, [pc, #384]	; 80092c4 <_strtod_l+0x2a4>
 8009144:	e7ed      	b.n	8009122 <_strtod_l+0x102>
 8009146:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800914a:	f04f 3aff 	mov.w	sl, #4294967295
 800914e:	e7e8      	b.n	8009122 <_strtod_l+0x102>
 8009150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009152:	1c5a      	adds	r2, r3, #1
 8009154:	9217      	str	r2, [sp, #92]	; 0x5c
 8009156:	785b      	ldrb	r3, [r3, #1]
 8009158:	2b30      	cmp	r3, #48	; 0x30
 800915a:	d0f9      	beq.n	8009150 <_strtod_l+0x130>
 800915c:	2b00      	cmp	r3, #0
 800915e:	d0a3      	beq.n	80090a8 <_strtod_l+0x88>
 8009160:	2301      	movs	r3, #1
 8009162:	f04f 0900 	mov.w	r9, #0
 8009166:	9304      	str	r3, [sp, #16]
 8009168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800916a:	9308      	str	r3, [sp, #32]
 800916c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009170:	464f      	mov	r7, r9
 8009172:	220a      	movs	r2, #10
 8009174:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009176:	7806      	ldrb	r6, [r0, #0]
 8009178:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800917c:	b2d9      	uxtb	r1, r3
 800917e:	2909      	cmp	r1, #9
 8009180:	d92a      	bls.n	80091d8 <_strtod_l+0x1b8>
 8009182:	9905      	ldr	r1, [sp, #20]
 8009184:	462a      	mov	r2, r5
 8009186:	f002 ff0f 	bl	800bfa8 <strncmp>
 800918a:	b398      	cbz	r0, 80091f4 <_strtod_l+0x1d4>
 800918c:	2000      	movs	r0, #0
 800918e:	4632      	mov	r2, r6
 8009190:	463d      	mov	r5, r7
 8009192:	9005      	str	r0, [sp, #20]
 8009194:	4603      	mov	r3, r0
 8009196:	2a65      	cmp	r2, #101	; 0x65
 8009198:	d001      	beq.n	800919e <_strtod_l+0x17e>
 800919a:	2a45      	cmp	r2, #69	; 0x45
 800919c:	d118      	bne.n	80091d0 <_strtod_l+0x1b0>
 800919e:	b91d      	cbnz	r5, 80091a8 <_strtod_l+0x188>
 80091a0:	9a04      	ldr	r2, [sp, #16]
 80091a2:	4302      	orrs	r2, r0
 80091a4:	d09e      	beq.n	80090e4 <_strtod_l+0xc4>
 80091a6:	2500      	movs	r5, #0
 80091a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80091ac:	f108 0201 	add.w	r2, r8, #1
 80091b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80091b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80091b6:	2a2b      	cmp	r2, #43	; 0x2b
 80091b8:	d075      	beq.n	80092a6 <_strtod_l+0x286>
 80091ba:	2a2d      	cmp	r2, #45	; 0x2d
 80091bc:	d07b      	beq.n	80092b6 <_strtod_l+0x296>
 80091be:	f04f 0c00 	mov.w	ip, #0
 80091c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80091c6:	2909      	cmp	r1, #9
 80091c8:	f240 8082 	bls.w	80092d0 <_strtod_l+0x2b0>
 80091cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80091d0:	2600      	movs	r6, #0
 80091d2:	e09d      	b.n	8009310 <_strtod_l+0x2f0>
 80091d4:	2300      	movs	r3, #0
 80091d6:	e7c4      	b.n	8009162 <_strtod_l+0x142>
 80091d8:	2f08      	cmp	r7, #8
 80091da:	bfd8      	it	le
 80091dc:	9907      	ldrle	r1, [sp, #28]
 80091de:	f100 0001 	add.w	r0, r0, #1
 80091e2:	bfda      	itte	le
 80091e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80091e8:	9307      	strle	r3, [sp, #28]
 80091ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 80091ee:	3701      	adds	r7, #1
 80091f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80091f2:	e7bf      	b.n	8009174 <_strtod_l+0x154>
 80091f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091f6:	195a      	adds	r2, r3, r5
 80091f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80091fa:	5d5a      	ldrb	r2, [r3, r5]
 80091fc:	2f00      	cmp	r7, #0
 80091fe:	d037      	beq.n	8009270 <_strtod_l+0x250>
 8009200:	9005      	str	r0, [sp, #20]
 8009202:	463d      	mov	r5, r7
 8009204:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009208:	2b09      	cmp	r3, #9
 800920a:	d912      	bls.n	8009232 <_strtod_l+0x212>
 800920c:	2301      	movs	r3, #1
 800920e:	e7c2      	b.n	8009196 <_strtod_l+0x176>
 8009210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009212:	1c5a      	adds	r2, r3, #1
 8009214:	9217      	str	r2, [sp, #92]	; 0x5c
 8009216:	785a      	ldrb	r2, [r3, #1]
 8009218:	3001      	adds	r0, #1
 800921a:	2a30      	cmp	r2, #48	; 0x30
 800921c:	d0f8      	beq.n	8009210 <_strtod_l+0x1f0>
 800921e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009222:	2b08      	cmp	r3, #8
 8009224:	f200 84d9 	bhi.w	8009bda <_strtod_l+0xbba>
 8009228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800922a:	9005      	str	r0, [sp, #20]
 800922c:	2000      	movs	r0, #0
 800922e:	9308      	str	r3, [sp, #32]
 8009230:	4605      	mov	r5, r0
 8009232:	3a30      	subs	r2, #48	; 0x30
 8009234:	f100 0301 	add.w	r3, r0, #1
 8009238:	d014      	beq.n	8009264 <_strtod_l+0x244>
 800923a:	9905      	ldr	r1, [sp, #20]
 800923c:	4419      	add	r1, r3
 800923e:	9105      	str	r1, [sp, #20]
 8009240:	462b      	mov	r3, r5
 8009242:	eb00 0e05 	add.w	lr, r0, r5
 8009246:	210a      	movs	r1, #10
 8009248:	4573      	cmp	r3, lr
 800924a:	d113      	bne.n	8009274 <_strtod_l+0x254>
 800924c:	182b      	adds	r3, r5, r0
 800924e:	2b08      	cmp	r3, #8
 8009250:	f105 0501 	add.w	r5, r5, #1
 8009254:	4405      	add	r5, r0
 8009256:	dc1c      	bgt.n	8009292 <_strtod_l+0x272>
 8009258:	9907      	ldr	r1, [sp, #28]
 800925a:	230a      	movs	r3, #10
 800925c:	fb03 2301 	mla	r3, r3, r1, r2
 8009260:	9307      	str	r3, [sp, #28]
 8009262:	2300      	movs	r3, #0
 8009264:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009266:	1c51      	adds	r1, r2, #1
 8009268:	9117      	str	r1, [sp, #92]	; 0x5c
 800926a:	7852      	ldrb	r2, [r2, #1]
 800926c:	4618      	mov	r0, r3
 800926e:	e7c9      	b.n	8009204 <_strtod_l+0x1e4>
 8009270:	4638      	mov	r0, r7
 8009272:	e7d2      	b.n	800921a <_strtod_l+0x1fa>
 8009274:	2b08      	cmp	r3, #8
 8009276:	dc04      	bgt.n	8009282 <_strtod_l+0x262>
 8009278:	9e07      	ldr	r6, [sp, #28]
 800927a:	434e      	muls	r6, r1
 800927c:	9607      	str	r6, [sp, #28]
 800927e:	3301      	adds	r3, #1
 8009280:	e7e2      	b.n	8009248 <_strtod_l+0x228>
 8009282:	f103 0c01 	add.w	ip, r3, #1
 8009286:	f1bc 0f10 	cmp.w	ip, #16
 800928a:	bfd8      	it	le
 800928c:	fb01 f909 	mulle.w	r9, r1, r9
 8009290:	e7f5      	b.n	800927e <_strtod_l+0x25e>
 8009292:	2d10      	cmp	r5, #16
 8009294:	bfdc      	itt	le
 8009296:	230a      	movle	r3, #10
 8009298:	fb03 2909 	mlale	r9, r3, r9, r2
 800929c:	e7e1      	b.n	8009262 <_strtod_l+0x242>
 800929e:	2300      	movs	r3, #0
 80092a0:	9305      	str	r3, [sp, #20]
 80092a2:	2301      	movs	r3, #1
 80092a4:	e77c      	b.n	80091a0 <_strtod_l+0x180>
 80092a6:	f04f 0c00 	mov.w	ip, #0
 80092aa:	f108 0202 	add.w	r2, r8, #2
 80092ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80092b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80092b4:	e785      	b.n	80091c2 <_strtod_l+0x1a2>
 80092b6:	f04f 0c01 	mov.w	ip, #1
 80092ba:	e7f6      	b.n	80092aa <_strtod_l+0x28a>
 80092bc:	0800e488 	.word	0x0800e488
 80092c0:	0800e240 	.word	0x0800e240
 80092c4:	7ff00000 	.word	0x7ff00000
 80092c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80092ca:	1c51      	adds	r1, r2, #1
 80092cc:	9117      	str	r1, [sp, #92]	; 0x5c
 80092ce:	7852      	ldrb	r2, [r2, #1]
 80092d0:	2a30      	cmp	r2, #48	; 0x30
 80092d2:	d0f9      	beq.n	80092c8 <_strtod_l+0x2a8>
 80092d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80092d8:	2908      	cmp	r1, #8
 80092da:	f63f af79 	bhi.w	80091d0 <_strtod_l+0x1b0>
 80092de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80092e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80092e4:	9206      	str	r2, [sp, #24]
 80092e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80092e8:	1c51      	adds	r1, r2, #1
 80092ea:	9117      	str	r1, [sp, #92]	; 0x5c
 80092ec:	7852      	ldrb	r2, [r2, #1]
 80092ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80092f2:	2e09      	cmp	r6, #9
 80092f4:	d937      	bls.n	8009366 <_strtod_l+0x346>
 80092f6:	9e06      	ldr	r6, [sp, #24]
 80092f8:	1b89      	subs	r1, r1, r6
 80092fa:	2908      	cmp	r1, #8
 80092fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009300:	dc02      	bgt.n	8009308 <_strtod_l+0x2e8>
 8009302:	4576      	cmp	r6, lr
 8009304:	bfa8      	it	ge
 8009306:	4676      	movge	r6, lr
 8009308:	f1bc 0f00 	cmp.w	ip, #0
 800930c:	d000      	beq.n	8009310 <_strtod_l+0x2f0>
 800930e:	4276      	negs	r6, r6
 8009310:	2d00      	cmp	r5, #0
 8009312:	d14d      	bne.n	80093b0 <_strtod_l+0x390>
 8009314:	9904      	ldr	r1, [sp, #16]
 8009316:	4301      	orrs	r1, r0
 8009318:	f47f aec6 	bne.w	80090a8 <_strtod_l+0x88>
 800931c:	2b00      	cmp	r3, #0
 800931e:	f47f aee1 	bne.w	80090e4 <_strtod_l+0xc4>
 8009322:	2a69      	cmp	r2, #105	; 0x69
 8009324:	d027      	beq.n	8009376 <_strtod_l+0x356>
 8009326:	dc24      	bgt.n	8009372 <_strtod_l+0x352>
 8009328:	2a49      	cmp	r2, #73	; 0x49
 800932a:	d024      	beq.n	8009376 <_strtod_l+0x356>
 800932c:	2a4e      	cmp	r2, #78	; 0x4e
 800932e:	f47f aed9 	bne.w	80090e4 <_strtod_l+0xc4>
 8009332:	499f      	ldr	r1, [pc, #636]	; (80095b0 <_strtod_l+0x590>)
 8009334:	a817      	add	r0, sp, #92	; 0x5c
 8009336:	f001 fe3d 	bl	800afb4 <__match>
 800933a:	2800      	cmp	r0, #0
 800933c:	f43f aed2 	beq.w	80090e4 <_strtod_l+0xc4>
 8009340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	2b28      	cmp	r3, #40	; 0x28
 8009346:	d12d      	bne.n	80093a4 <_strtod_l+0x384>
 8009348:	499a      	ldr	r1, [pc, #616]	; (80095b4 <_strtod_l+0x594>)
 800934a:	aa1a      	add	r2, sp, #104	; 0x68
 800934c:	a817      	add	r0, sp, #92	; 0x5c
 800934e:	f001 fe45 	bl	800afdc <__hexnan>
 8009352:	2805      	cmp	r0, #5
 8009354:	d126      	bne.n	80093a4 <_strtod_l+0x384>
 8009356:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009358:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800935c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009360:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009364:	e6a0      	b.n	80090a8 <_strtod_l+0x88>
 8009366:	210a      	movs	r1, #10
 8009368:	fb01 2e0e 	mla	lr, r1, lr, r2
 800936c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009370:	e7b9      	b.n	80092e6 <_strtod_l+0x2c6>
 8009372:	2a6e      	cmp	r2, #110	; 0x6e
 8009374:	e7db      	b.n	800932e <_strtod_l+0x30e>
 8009376:	4990      	ldr	r1, [pc, #576]	; (80095b8 <_strtod_l+0x598>)
 8009378:	a817      	add	r0, sp, #92	; 0x5c
 800937a:	f001 fe1b 	bl	800afb4 <__match>
 800937e:	2800      	cmp	r0, #0
 8009380:	f43f aeb0 	beq.w	80090e4 <_strtod_l+0xc4>
 8009384:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009386:	498d      	ldr	r1, [pc, #564]	; (80095bc <_strtod_l+0x59c>)
 8009388:	3b01      	subs	r3, #1
 800938a:	a817      	add	r0, sp, #92	; 0x5c
 800938c:	9317      	str	r3, [sp, #92]	; 0x5c
 800938e:	f001 fe11 	bl	800afb4 <__match>
 8009392:	b910      	cbnz	r0, 800939a <_strtod_l+0x37a>
 8009394:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009396:	3301      	adds	r3, #1
 8009398:	9317      	str	r3, [sp, #92]	; 0x5c
 800939a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80095cc <_strtod_l+0x5ac>
 800939e:	f04f 0a00 	mov.w	sl, #0
 80093a2:	e681      	b.n	80090a8 <_strtod_l+0x88>
 80093a4:	4886      	ldr	r0, [pc, #536]	; (80095c0 <_strtod_l+0x5a0>)
 80093a6:	f002 fde7 	bl	800bf78 <nan>
 80093aa:	ec5b ab10 	vmov	sl, fp, d0
 80093ae:	e67b      	b.n	80090a8 <_strtod_l+0x88>
 80093b0:	9b05      	ldr	r3, [sp, #20]
 80093b2:	9807      	ldr	r0, [sp, #28]
 80093b4:	1af3      	subs	r3, r6, r3
 80093b6:	2f00      	cmp	r7, #0
 80093b8:	bf08      	it	eq
 80093ba:	462f      	moveq	r7, r5
 80093bc:	2d10      	cmp	r5, #16
 80093be:	9306      	str	r3, [sp, #24]
 80093c0:	46a8      	mov	r8, r5
 80093c2:	bfa8      	it	ge
 80093c4:	f04f 0810 	movge.w	r8, #16
 80093c8:	f7f7 f8a4 	bl	8000514 <__aeabi_ui2d>
 80093cc:	2d09      	cmp	r5, #9
 80093ce:	4682      	mov	sl, r0
 80093d0:	468b      	mov	fp, r1
 80093d2:	dd13      	ble.n	80093fc <_strtod_l+0x3dc>
 80093d4:	4b7b      	ldr	r3, [pc, #492]	; (80095c4 <_strtod_l+0x5a4>)
 80093d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80093da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80093de:	f7f7 f913 	bl	8000608 <__aeabi_dmul>
 80093e2:	4682      	mov	sl, r0
 80093e4:	4648      	mov	r0, r9
 80093e6:	468b      	mov	fp, r1
 80093e8:	f7f7 f894 	bl	8000514 <__aeabi_ui2d>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4650      	mov	r0, sl
 80093f2:	4659      	mov	r1, fp
 80093f4:	f7f6 ff52 	bl	800029c <__adddf3>
 80093f8:	4682      	mov	sl, r0
 80093fa:	468b      	mov	fp, r1
 80093fc:	2d0f      	cmp	r5, #15
 80093fe:	dc38      	bgt.n	8009472 <_strtod_l+0x452>
 8009400:	9b06      	ldr	r3, [sp, #24]
 8009402:	2b00      	cmp	r3, #0
 8009404:	f43f ae50 	beq.w	80090a8 <_strtod_l+0x88>
 8009408:	dd24      	ble.n	8009454 <_strtod_l+0x434>
 800940a:	2b16      	cmp	r3, #22
 800940c:	dc0b      	bgt.n	8009426 <_strtod_l+0x406>
 800940e:	496d      	ldr	r1, [pc, #436]	; (80095c4 <_strtod_l+0x5a4>)
 8009410:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009418:	4652      	mov	r2, sl
 800941a:	465b      	mov	r3, fp
 800941c:	f7f7 f8f4 	bl	8000608 <__aeabi_dmul>
 8009420:	4682      	mov	sl, r0
 8009422:	468b      	mov	fp, r1
 8009424:	e640      	b.n	80090a8 <_strtod_l+0x88>
 8009426:	9a06      	ldr	r2, [sp, #24]
 8009428:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800942c:	4293      	cmp	r3, r2
 800942e:	db20      	blt.n	8009472 <_strtod_l+0x452>
 8009430:	4c64      	ldr	r4, [pc, #400]	; (80095c4 <_strtod_l+0x5a4>)
 8009432:	f1c5 050f 	rsb	r5, r5, #15
 8009436:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800943a:	4652      	mov	r2, sl
 800943c:	465b      	mov	r3, fp
 800943e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009442:	f7f7 f8e1 	bl	8000608 <__aeabi_dmul>
 8009446:	9b06      	ldr	r3, [sp, #24]
 8009448:	1b5d      	subs	r5, r3, r5
 800944a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800944e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009452:	e7e3      	b.n	800941c <_strtod_l+0x3fc>
 8009454:	9b06      	ldr	r3, [sp, #24]
 8009456:	3316      	adds	r3, #22
 8009458:	db0b      	blt.n	8009472 <_strtod_l+0x452>
 800945a:	9b05      	ldr	r3, [sp, #20]
 800945c:	1b9e      	subs	r6, r3, r6
 800945e:	4b59      	ldr	r3, [pc, #356]	; (80095c4 <_strtod_l+0x5a4>)
 8009460:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009464:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009468:	4650      	mov	r0, sl
 800946a:	4659      	mov	r1, fp
 800946c:	f7f7 f9f6 	bl	800085c <__aeabi_ddiv>
 8009470:	e7d6      	b.n	8009420 <_strtod_l+0x400>
 8009472:	9b06      	ldr	r3, [sp, #24]
 8009474:	eba5 0808 	sub.w	r8, r5, r8
 8009478:	4498      	add	r8, r3
 800947a:	f1b8 0f00 	cmp.w	r8, #0
 800947e:	dd74      	ble.n	800956a <_strtod_l+0x54a>
 8009480:	f018 030f 	ands.w	r3, r8, #15
 8009484:	d00a      	beq.n	800949c <_strtod_l+0x47c>
 8009486:	494f      	ldr	r1, [pc, #316]	; (80095c4 <_strtod_l+0x5a4>)
 8009488:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800948c:	4652      	mov	r2, sl
 800948e:	465b      	mov	r3, fp
 8009490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009494:	f7f7 f8b8 	bl	8000608 <__aeabi_dmul>
 8009498:	4682      	mov	sl, r0
 800949a:	468b      	mov	fp, r1
 800949c:	f038 080f 	bics.w	r8, r8, #15
 80094a0:	d04f      	beq.n	8009542 <_strtod_l+0x522>
 80094a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80094a6:	dd22      	ble.n	80094ee <_strtod_l+0x4ce>
 80094a8:	2500      	movs	r5, #0
 80094aa:	462e      	mov	r6, r5
 80094ac:	9507      	str	r5, [sp, #28]
 80094ae:	9505      	str	r5, [sp, #20]
 80094b0:	2322      	movs	r3, #34	; 0x22
 80094b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80095cc <_strtod_l+0x5ac>
 80094b6:	6023      	str	r3, [r4, #0]
 80094b8:	f04f 0a00 	mov.w	sl, #0
 80094bc:	9b07      	ldr	r3, [sp, #28]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f43f adf2 	beq.w	80090a8 <_strtod_l+0x88>
 80094c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80094c6:	4620      	mov	r0, r4
 80094c8:	f001 fe82 	bl	800b1d0 <_Bfree>
 80094cc:	9905      	ldr	r1, [sp, #20]
 80094ce:	4620      	mov	r0, r4
 80094d0:	f001 fe7e 	bl	800b1d0 <_Bfree>
 80094d4:	4631      	mov	r1, r6
 80094d6:	4620      	mov	r0, r4
 80094d8:	f001 fe7a 	bl	800b1d0 <_Bfree>
 80094dc:	9907      	ldr	r1, [sp, #28]
 80094de:	4620      	mov	r0, r4
 80094e0:	f001 fe76 	bl	800b1d0 <_Bfree>
 80094e4:	4629      	mov	r1, r5
 80094e6:	4620      	mov	r0, r4
 80094e8:	f001 fe72 	bl	800b1d0 <_Bfree>
 80094ec:	e5dc      	b.n	80090a8 <_strtod_l+0x88>
 80094ee:	4b36      	ldr	r3, [pc, #216]	; (80095c8 <_strtod_l+0x5a8>)
 80094f0:	9304      	str	r3, [sp, #16]
 80094f2:	2300      	movs	r3, #0
 80094f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80094f8:	4650      	mov	r0, sl
 80094fa:	4659      	mov	r1, fp
 80094fc:	4699      	mov	r9, r3
 80094fe:	f1b8 0f01 	cmp.w	r8, #1
 8009502:	dc21      	bgt.n	8009548 <_strtod_l+0x528>
 8009504:	b10b      	cbz	r3, 800950a <_strtod_l+0x4ea>
 8009506:	4682      	mov	sl, r0
 8009508:	468b      	mov	fp, r1
 800950a:	4b2f      	ldr	r3, [pc, #188]	; (80095c8 <_strtod_l+0x5a8>)
 800950c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009510:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009514:	4652      	mov	r2, sl
 8009516:	465b      	mov	r3, fp
 8009518:	e9d9 0100 	ldrd	r0, r1, [r9]
 800951c:	f7f7 f874 	bl	8000608 <__aeabi_dmul>
 8009520:	4b2a      	ldr	r3, [pc, #168]	; (80095cc <_strtod_l+0x5ac>)
 8009522:	460a      	mov	r2, r1
 8009524:	400b      	ands	r3, r1
 8009526:	492a      	ldr	r1, [pc, #168]	; (80095d0 <_strtod_l+0x5b0>)
 8009528:	428b      	cmp	r3, r1
 800952a:	4682      	mov	sl, r0
 800952c:	d8bc      	bhi.n	80094a8 <_strtod_l+0x488>
 800952e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009532:	428b      	cmp	r3, r1
 8009534:	bf86      	itte	hi
 8009536:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80095d4 <_strtod_l+0x5b4>
 800953a:	f04f 3aff 	movhi.w	sl, #4294967295
 800953e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009542:	2300      	movs	r3, #0
 8009544:	9304      	str	r3, [sp, #16]
 8009546:	e084      	b.n	8009652 <_strtod_l+0x632>
 8009548:	f018 0f01 	tst.w	r8, #1
 800954c:	d005      	beq.n	800955a <_strtod_l+0x53a>
 800954e:	9b04      	ldr	r3, [sp, #16]
 8009550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009554:	f7f7 f858 	bl	8000608 <__aeabi_dmul>
 8009558:	2301      	movs	r3, #1
 800955a:	9a04      	ldr	r2, [sp, #16]
 800955c:	3208      	adds	r2, #8
 800955e:	f109 0901 	add.w	r9, r9, #1
 8009562:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009566:	9204      	str	r2, [sp, #16]
 8009568:	e7c9      	b.n	80094fe <_strtod_l+0x4de>
 800956a:	d0ea      	beq.n	8009542 <_strtod_l+0x522>
 800956c:	f1c8 0800 	rsb	r8, r8, #0
 8009570:	f018 020f 	ands.w	r2, r8, #15
 8009574:	d00a      	beq.n	800958c <_strtod_l+0x56c>
 8009576:	4b13      	ldr	r3, [pc, #76]	; (80095c4 <_strtod_l+0x5a4>)
 8009578:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800957c:	4650      	mov	r0, sl
 800957e:	4659      	mov	r1, fp
 8009580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009584:	f7f7 f96a 	bl	800085c <__aeabi_ddiv>
 8009588:	4682      	mov	sl, r0
 800958a:	468b      	mov	fp, r1
 800958c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009590:	d0d7      	beq.n	8009542 <_strtod_l+0x522>
 8009592:	f1b8 0f1f 	cmp.w	r8, #31
 8009596:	dd1f      	ble.n	80095d8 <_strtod_l+0x5b8>
 8009598:	2500      	movs	r5, #0
 800959a:	462e      	mov	r6, r5
 800959c:	9507      	str	r5, [sp, #28]
 800959e:	9505      	str	r5, [sp, #20]
 80095a0:	2322      	movs	r3, #34	; 0x22
 80095a2:	f04f 0a00 	mov.w	sl, #0
 80095a6:	f04f 0b00 	mov.w	fp, #0
 80095aa:	6023      	str	r3, [r4, #0]
 80095ac:	e786      	b.n	80094bc <_strtod_l+0x49c>
 80095ae:	bf00      	nop
 80095b0:	0800e211 	.word	0x0800e211
 80095b4:	0800e254 	.word	0x0800e254
 80095b8:	0800e209 	.word	0x0800e209
 80095bc:	0800e394 	.word	0x0800e394
 80095c0:	0800e640 	.word	0x0800e640
 80095c4:	0800e520 	.word	0x0800e520
 80095c8:	0800e4f8 	.word	0x0800e4f8
 80095cc:	7ff00000 	.word	0x7ff00000
 80095d0:	7ca00000 	.word	0x7ca00000
 80095d4:	7fefffff 	.word	0x7fefffff
 80095d8:	f018 0310 	ands.w	r3, r8, #16
 80095dc:	bf18      	it	ne
 80095de:	236a      	movne	r3, #106	; 0x6a
 80095e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009990 <_strtod_l+0x970>
 80095e4:	9304      	str	r3, [sp, #16]
 80095e6:	4650      	mov	r0, sl
 80095e8:	4659      	mov	r1, fp
 80095ea:	2300      	movs	r3, #0
 80095ec:	f018 0f01 	tst.w	r8, #1
 80095f0:	d004      	beq.n	80095fc <_strtod_l+0x5dc>
 80095f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80095f6:	f7f7 f807 	bl	8000608 <__aeabi_dmul>
 80095fa:	2301      	movs	r3, #1
 80095fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009600:	f109 0908 	add.w	r9, r9, #8
 8009604:	d1f2      	bne.n	80095ec <_strtod_l+0x5cc>
 8009606:	b10b      	cbz	r3, 800960c <_strtod_l+0x5ec>
 8009608:	4682      	mov	sl, r0
 800960a:	468b      	mov	fp, r1
 800960c:	9b04      	ldr	r3, [sp, #16]
 800960e:	b1c3      	cbz	r3, 8009642 <_strtod_l+0x622>
 8009610:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009614:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009618:	2b00      	cmp	r3, #0
 800961a:	4659      	mov	r1, fp
 800961c:	dd11      	ble.n	8009642 <_strtod_l+0x622>
 800961e:	2b1f      	cmp	r3, #31
 8009620:	f340 8124 	ble.w	800986c <_strtod_l+0x84c>
 8009624:	2b34      	cmp	r3, #52	; 0x34
 8009626:	bfde      	ittt	le
 8009628:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800962c:	f04f 33ff 	movle.w	r3, #4294967295
 8009630:	fa03 f202 	lslle.w	r2, r3, r2
 8009634:	f04f 0a00 	mov.w	sl, #0
 8009638:	bfcc      	ite	gt
 800963a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800963e:	ea02 0b01 	andle.w	fp, r2, r1
 8009642:	2200      	movs	r2, #0
 8009644:	2300      	movs	r3, #0
 8009646:	4650      	mov	r0, sl
 8009648:	4659      	mov	r1, fp
 800964a:	f7f7 fa45 	bl	8000ad8 <__aeabi_dcmpeq>
 800964e:	2800      	cmp	r0, #0
 8009650:	d1a2      	bne.n	8009598 <_strtod_l+0x578>
 8009652:	9b07      	ldr	r3, [sp, #28]
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	9908      	ldr	r1, [sp, #32]
 8009658:	462b      	mov	r3, r5
 800965a:	463a      	mov	r2, r7
 800965c:	4620      	mov	r0, r4
 800965e:	f001 fe1f 	bl	800b2a0 <__s2b>
 8009662:	9007      	str	r0, [sp, #28]
 8009664:	2800      	cmp	r0, #0
 8009666:	f43f af1f 	beq.w	80094a8 <_strtod_l+0x488>
 800966a:	9b05      	ldr	r3, [sp, #20]
 800966c:	1b9e      	subs	r6, r3, r6
 800966e:	9b06      	ldr	r3, [sp, #24]
 8009670:	2b00      	cmp	r3, #0
 8009672:	bfb4      	ite	lt
 8009674:	4633      	movlt	r3, r6
 8009676:	2300      	movge	r3, #0
 8009678:	930c      	str	r3, [sp, #48]	; 0x30
 800967a:	9b06      	ldr	r3, [sp, #24]
 800967c:	2500      	movs	r5, #0
 800967e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009682:	9312      	str	r3, [sp, #72]	; 0x48
 8009684:	462e      	mov	r6, r5
 8009686:	9b07      	ldr	r3, [sp, #28]
 8009688:	4620      	mov	r0, r4
 800968a:	6859      	ldr	r1, [r3, #4]
 800968c:	f001 fd60 	bl	800b150 <_Balloc>
 8009690:	9005      	str	r0, [sp, #20]
 8009692:	2800      	cmp	r0, #0
 8009694:	f43f af0c 	beq.w	80094b0 <_strtod_l+0x490>
 8009698:	9b07      	ldr	r3, [sp, #28]
 800969a:	691a      	ldr	r2, [r3, #16]
 800969c:	3202      	adds	r2, #2
 800969e:	f103 010c 	add.w	r1, r3, #12
 80096a2:	0092      	lsls	r2, r2, #2
 80096a4:	300c      	adds	r0, #12
 80096a6:	f7fe fde7 	bl	8008278 <memcpy>
 80096aa:	ec4b ab10 	vmov	d0, sl, fp
 80096ae:	aa1a      	add	r2, sp, #104	; 0x68
 80096b0:	a919      	add	r1, sp, #100	; 0x64
 80096b2:	4620      	mov	r0, r4
 80096b4:	f002 f93a 	bl	800b92c <__d2b>
 80096b8:	ec4b ab18 	vmov	d8, sl, fp
 80096bc:	9018      	str	r0, [sp, #96]	; 0x60
 80096be:	2800      	cmp	r0, #0
 80096c0:	f43f aef6 	beq.w	80094b0 <_strtod_l+0x490>
 80096c4:	2101      	movs	r1, #1
 80096c6:	4620      	mov	r0, r4
 80096c8:	f001 fe84 	bl	800b3d4 <__i2b>
 80096cc:	4606      	mov	r6, r0
 80096ce:	2800      	cmp	r0, #0
 80096d0:	f43f aeee 	beq.w	80094b0 <_strtod_l+0x490>
 80096d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80096d6:	9904      	ldr	r1, [sp, #16]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	bfab      	itete	ge
 80096dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80096de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80096e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80096e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80096e6:	bfac      	ite	ge
 80096e8:	eb03 0902 	addge.w	r9, r3, r2
 80096ec:	1ad7      	sublt	r7, r2, r3
 80096ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80096f0:	eba3 0801 	sub.w	r8, r3, r1
 80096f4:	4490      	add	r8, r2
 80096f6:	4ba1      	ldr	r3, [pc, #644]	; (800997c <_strtod_l+0x95c>)
 80096f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80096fc:	4598      	cmp	r8, r3
 80096fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009702:	f280 80c7 	bge.w	8009894 <_strtod_l+0x874>
 8009706:	eba3 0308 	sub.w	r3, r3, r8
 800970a:	2b1f      	cmp	r3, #31
 800970c:	eba2 0203 	sub.w	r2, r2, r3
 8009710:	f04f 0101 	mov.w	r1, #1
 8009714:	f300 80b1 	bgt.w	800987a <_strtod_l+0x85a>
 8009718:	fa01 f303 	lsl.w	r3, r1, r3
 800971c:	930d      	str	r3, [sp, #52]	; 0x34
 800971e:	2300      	movs	r3, #0
 8009720:	9308      	str	r3, [sp, #32]
 8009722:	eb09 0802 	add.w	r8, r9, r2
 8009726:	9b04      	ldr	r3, [sp, #16]
 8009728:	45c1      	cmp	r9, r8
 800972a:	4417      	add	r7, r2
 800972c:	441f      	add	r7, r3
 800972e:	464b      	mov	r3, r9
 8009730:	bfa8      	it	ge
 8009732:	4643      	movge	r3, r8
 8009734:	42bb      	cmp	r3, r7
 8009736:	bfa8      	it	ge
 8009738:	463b      	movge	r3, r7
 800973a:	2b00      	cmp	r3, #0
 800973c:	bfc2      	ittt	gt
 800973e:	eba8 0803 	subgt.w	r8, r8, r3
 8009742:	1aff      	subgt	r7, r7, r3
 8009744:	eba9 0903 	subgt.w	r9, r9, r3
 8009748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800974a:	2b00      	cmp	r3, #0
 800974c:	dd17      	ble.n	800977e <_strtod_l+0x75e>
 800974e:	4631      	mov	r1, r6
 8009750:	461a      	mov	r2, r3
 8009752:	4620      	mov	r0, r4
 8009754:	f001 fefe 	bl	800b554 <__pow5mult>
 8009758:	4606      	mov	r6, r0
 800975a:	2800      	cmp	r0, #0
 800975c:	f43f aea8 	beq.w	80094b0 <_strtod_l+0x490>
 8009760:	4601      	mov	r1, r0
 8009762:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009764:	4620      	mov	r0, r4
 8009766:	f001 fe4b 	bl	800b400 <__multiply>
 800976a:	900b      	str	r0, [sp, #44]	; 0x2c
 800976c:	2800      	cmp	r0, #0
 800976e:	f43f ae9f 	beq.w	80094b0 <_strtod_l+0x490>
 8009772:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009774:	4620      	mov	r0, r4
 8009776:	f001 fd2b 	bl	800b1d0 <_Bfree>
 800977a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800977c:	9318      	str	r3, [sp, #96]	; 0x60
 800977e:	f1b8 0f00 	cmp.w	r8, #0
 8009782:	f300 808c 	bgt.w	800989e <_strtod_l+0x87e>
 8009786:	9b06      	ldr	r3, [sp, #24]
 8009788:	2b00      	cmp	r3, #0
 800978a:	dd08      	ble.n	800979e <_strtod_l+0x77e>
 800978c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800978e:	9905      	ldr	r1, [sp, #20]
 8009790:	4620      	mov	r0, r4
 8009792:	f001 fedf 	bl	800b554 <__pow5mult>
 8009796:	9005      	str	r0, [sp, #20]
 8009798:	2800      	cmp	r0, #0
 800979a:	f43f ae89 	beq.w	80094b0 <_strtod_l+0x490>
 800979e:	2f00      	cmp	r7, #0
 80097a0:	dd08      	ble.n	80097b4 <_strtod_l+0x794>
 80097a2:	9905      	ldr	r1, [sp, #20]
 80097a4:	463a      	mov	r2, r7
 80097a6:	4620      	mov	r0, r4
 80097a8:	f001 ff2e 	bl	800b608 <__lshift>
 80097ac:	9005      	str	r0, [sp, #20]
 80097ae:	2800      	cmp	r0, #0
 80097b0:	f43f ae7e 	beq.w	80094b0 <_strtod_l+0x490>
 80097b4:	f1b9 0f00 	cmp.w	r9, #0
 80097b8:	dd08      	ble.n	80097cc <_strtod_l+0x7ac>
 80097ba:	4631      	mov	r1, r6
 80097bc:	464a      	mov	r2, r9
 80097be:	4620      	mov	r0, r4
 80097c0:	f001 ff22 	bl	800b608 <__lshift>
 80097c4:	4606      	mov	r6, r0
 80097c6:	2800      	cmp	r0, #0
 80097c8:	f43f ae72 	beq.w	80094b0 <_strtod_l+0x490>
 80097cc:	9a05      	ldr	r2, [sp, #20]
 80097ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80097d0:	4620      	mov	r0, r4
 80097d2:	f001 ffa5 	bl	800b720 <__mdiff>
 80097d6:	4605      	mov	r5, r0
 80097d8:	2800      	cmp	r0, #0
 80097da:	f43f ae69 	beq.w	80094b0 <_strtod_l+0x490>
 80097de:	68c3      	ldr	r3, [r0, #12]
 80097e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80097e2:	2300      	movs	r3, #0
 80097e4:	60c3      	str	r3, [r0, #12]
 80097e6:	4631      	mov	r1, r6
 80097e8:	f001 ff7e 	bl	800b6e8 <__mcmp>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	da60      	bge.n	80098b2 <_strtod_l+0x892>
 80097f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097f2:	ea53 030a 	orrs.w	r3, r3, sl
 80097f6:	f040 8082 	bne.w	80098fe <_strtod_l+0x8de>
 80097fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d17d      	bne.n	80098fe <_strtod_l+0x8de>
 8009802:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009806:	0d1b      	lsrs	r3, r3, #20
 8009808:	051b      	lsls	r3, r3, #20
 800980a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800980e:	d976      	bls.n	80098fe <_strtod_l+0x8de>
 8009810:	696b      	ldr	r3, [r5, #20]
 8009812:	b913      	cbnz	r3, 800981a <_strtod_l+0x7fa>
 8009814:	692b      	ldr	r3, [r5, #16]
 8009816:	2b01      	cmp	r3, #1
 8009818:	dd71      	ble.n	80098fe <_strtod_l+0x8de>
 800981a:	4629      	mov	r1, r5
 800981c:	2201      	movs	r2, #1
 800981e:	4620      	mov	r0, r4
 8009820:	f001 fef2 	bl	800b608 <__lshift>
 8009824:	4631      	mov	r1, r6
 8009826:	4605      	mov	r5, r0
 8009828:	f001 ff5e 	bl	800b6e8 <__mcmp>
 800982c:	2800      	cmp	r0, #0
 800982e:	dd66      	ble.n	80098fe <_strtod_l+0x8de>
 8009830:	9904      	ldr	r1, [sp, #16]
 8009832:	4a53      	ldr	r2, [pc, #332]	; (8009980 <_strtod_l+0x960>)
 8009834:	465b      	mov	r3, fp
 8009836:	2900      	cmp	r1, #0
 8009838:	f000 8081 	beq.w	800993e <_strtod_l+0x91e>
 800983c:	ea02 010b 	and.w	r1, r2, fp
 8009840:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009844:	dc7b      	bgt.n	800993e <_strtod_l+0x91e>
 8009846:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800984a:	f77f aea9 	ble.w	80095a0 <_strtod_l+0x580>
 800984e:	4b4d      	ldr	r3, [pc, #308]	; (8009984 <_strtod_l+0x964>)
 8009850:	4650      	mov	r0, sl
 8009852:	4659      	mov	r1, fp
 8009854:	2200      	movs	r2, #0
 8009856:	f7f6 fed7 	bl	8000608 <__aeabi_dmul>
 800985a:	460b      	mov	r3, r1
 800985c:	4303      	orrs	r3, r0
 800985e:	bf08      	it	eq
 8009860:	2322      	moveq	r3, #34	; 0x22
 8009862:	4682      	mov	sl, r0
 8009864:	468b      	mov	fp, r1
 8009866:	bf08      	it	eq
 8009868:	6023      	streq	r3, [r4, #0]
 800986a:	e62b      	b.n	80094c4 <_strtod_l+0x4a4>
 800986c:	f04f 32ff 	mov.w	r2, #4294967295
 8009870:	fa02 f303 	lsl.w	r3, r2, r3
 8009874:	ea03 0a0a 	and.w	sl, r3, sl
 8009878:	e6e3      	b.n	8009642 <_strtod_l+0x622>
 800987a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800987e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009882:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009886:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800988a:	fa01 f308 	lsl.w	r3, r1, r8
 800988e:	9308      	str	r3, [sp, #32]
 8009890:	910d      	str	r1, [sp, #52]	; 0x34
 8009892:	e746      	b.n	8009722 <_strtod_l+0x702>
 8009894:	2300      	movs	r3, #0
 8009896:	9308      	str	r3, [sp, #32]
 8009898:	2301      	movs	r3, #1
 800989a:	930d      	str	r3, [sp, #52]	; 0x34
 800989c:	e741      	b.n	8009722 <_strtod_l+0x702>
 800989e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80098a0:	4642      	mov	r2, r8
 80098a2:	4620      	mov	r0, r4
 80098a4:	f001 feb0 	bl	800b608 <__lshift>
 80098a8:	9018      	str	r0, [sp, #96]	; 0x60
 80098aa:	2800      	cmp	r0, #0
 80098ac:	f47f af6b 	bne.w	8009786 <_strtod_l+0x766>
 80098b0:	e5fe      	b.n	80094b0 <_strtod_l+0x490>
 80098b2:	465f      	mov	r7, fp
 80098b4:	d16e      	bne.n	8009994 <_strtod_l+0x974>
 80098b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098bc:	b342      	cbz	r2, 8009910 <_strtod_l+0x8f0>
 80098be:	4a32      	ldr	r2, [pc, #200]	; (8009988 <_strtod_l+0x968>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d128      	bne.n	8009916 <_strtod_l+0x8f6>
 80098c4:	9b04      	ldr	r3, [sp, #16]
 80098c6:	4651      	mov	r1, sl
 80098c8:	b1eb      	cbz	r3, 8009906 <_strtod_l+0x8e6>
 80098ca:	4b2d      	ldr	r3, [pc, #180]	; (8009980 <_strtod_l+0x960>)
 80098cc:	403b      	ands	r3, r7
 80098ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80098d2:	f04f 32ff 	mov.w	r2, #4294967295
 80098d6:	d819      	bhi.n	800990c <_strtod_l+0x8ec>
 80098d8:	0d1b      	lsrs	r3, r3, #20
 80098da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098de:	fa02 f303 	lsl.w	r3, r2, r3
 80098e2:	4299      	cmp	r1, r3
 80098e4:	d117      	bne.n	8009916 <_strtod_l+0x8f6>
 80098e6:	4b29      	ldr	r3, [pc, #164]	; (800998c <_strtod_l+0x96c>)
 80098e8:	429f      	cmp	r7, r3
 80098ea:	d102      	bne.n	80098f2 <_strtod_l+0x8d2>
 80098ec:	3101      	adds	r1, #1
 80098ee:	f43f addf 	beq.w	80094b0 <_strtod_l+0x490>
 80098f2:	4b23      	ldr	r3, [pc, #140]	; (8009980 <_strtod_l+0x960>)
 80098f4:	403b      	ands	r3, r7
 80098f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80098fa:	f04f 0a00 	mov.w	sl, #0
 80098fe:	9b04      	ldr	r3, [sp, #16]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1a4      	bne.n	800984e <_strtod_l+0x82e>
 8009904:	e5de      	b.n	80094c4 <_strtod_l+0x4a4>
 8009906:	f04f 33ff 	mov.w	r3, #4294967295
 800990a:	e7ea      	b.n	80098e2 <_strtod_l+0x8c2>
 800990c:	4613      	mov	r3, r2
 800990e:	e7e8      	b.n	80098e2 <_strtod_l+0x8c2>
 8009910:	ea53 030a 	orrs.w	r3, r3, sl
 8009914:	d08c      	beq.n	8009830 <_strtod_l+0x810>
 8009916:	9b08      	ldr	r3, [sp, #32]
 8009918:	b1db      	cbz	r3, 8009952 <_strtod_l+0x932>
 800991a:	423b      	tst	r3, r7
 800991c:	d0ef      	beq.n	80098fe <_strtod_l+0x8de>
 800991e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009920:	9a04      	ldr	r2, [sp, #16]
 8009922:	4650      	mov	r0, sl
 8009924:	4659      	mov	r1, fp
 8009926:	b1c3      	cbz	r3, 800995a <_strtod_l+0x93a>
 8009928:	f7ff fb5c 	bl	8008fe4 <sulp>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	ec51 0b18 	vmov	r0, r1, d8
 8009934:	f7f6 fcb2 	bl	800029c <__adddf3>
 8009938:	4682      	mov	sl, r0
 800993a:	468b      	mov	fp, r1
 800993c:	e7df      	b.n	80098fe <_strtod_l+0x8de>
 800993e:	4013      	ands	r3, r2
 8009940:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009944:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009948:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800994c:	f04f 3aff 	mov.w	sl, #4294967295
 8009950:	e7d5      	b.n	80098fe <_strtod_l+0x8de>
 8009952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009954:	ea13 0f0a 	tst.w	r3, sl
 8009958:	e7e0      	b.n	800991c <_strtod_l+0x8fc>
 800995a:	f7ff fb43 	bl	8008fe4 <sulp>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	ec51 0b18 	vmov	r0, r1, d8
 8009966:	f7f6 fc97 	bl	8000298 <__aeabi_dsub>
 800996a:	2200      	movs	r2, #0
 800996c:	2300      	movs	r3, #0
 800996e:	4682      	mov	sl, r0
 8009970:	468b      	mov	fp, r1
 8009972:	f7f7 f8b1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009976:	2800      	cmp	r0, #0
 8009978:	d0c1      	beq.n	80098fe <_strtod_l+0x8de>
 800997a:	e611      	b.n	80095a0 <_strtod_l+0x580>
 800997c:	fffffc02 	.word	0xfffffc02
 8009980:	7ff00000 	.word	0x7ff00000
 8009984:	39500000 	.word	0x39500000
 8009988:	000fffff 	.word	0x000fffff
 800998c:	7fefffff 	.word	0x7fefffff
 8009990:	0800e268 	.word	0x0800e268
 8009994:	4631      	mov	r1, r6
 8009996:	4628      	mov	r0, r5
 8009998:	f002 f824 	bl	800b9e4 <__ratio>
 800999c:	ec59 8b10 	vmov	r8, r9, d0
 80099a0:	ee10 0a10 	vmov	r0, s0
 80099a4:	2200      	movs	r2, #0
 80099a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099aa:	4649      	mov	r1, r9
 80099ac:	f7f7 f8a8 	bl	8000b00 <__aeabi_dcmple>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d07a      	beq.n	8009aaa <_strtod_l+0xa8a>
 80099b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d04a      	beq.n	8009a50 <_strtod_l+0xa30>
 80099ba:	4b95      	ldr	r3, [pc, #596]	; (8009c10 <_strtod_l+0xbf0>)
 80099bc:	2200      	movs	r2, #0
 80099be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80099c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009c10 <_strtod_l+0xbf0>
 80099c6:	f04f 0800 	mov.w	r8, #0
 80099ca:	4b92      	ldr	r3, [pc, #584]	; (8009c14 <_strtod_l+0xbf4>)
 80099cc:	403b      	ands	r3, r7
 80099ce:	930d      	str	r3, [sp, #52]	; 0x34
 80099d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099d2:	4b91      	ldr	r3, [pc, #580]	; (8009c18 <_strtod_l+0xbf8>)
 80099d4:	429a      	cmp	r2, r3
 80099d6:	f040 80b0 	bne.w	8009b3a <_strtod_l+0xb1a>
 80099da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099de:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80099e2:	ec4b ab10 	vmov	d0, sl, fp
 80099e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80099ea:	f001 ff23 	bl	800b834 <__ulp>
 80099ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099f2:	ec53 2b10 	vmov	r2, r3, d0
 80099f6:	f7f6 fe07 	bl	8000608 <__aeabi_dmul>
 80099fa:	4652      	mov	r2, sl
 80099fc:	465b      	mov	r3, fp
 80099fe:	f7f6 fc4d 	bl	800029c <__adddf3>
 8009a02:	460b      	mov	r3, r1
 8009a04:	4983      	ldr	r1, [pc, #524]	; (8009c14 <_strtod_l+0xbf4>)
 8009a06:	4a85      	ldr	r2, [pc, #532]	; (8009c1c <_strtod_l+0xbfc>)
 8009a08:	4019      	ands	r1, r3
 8009a0a:	4291      	cmp	r1, r2
 8009a0c:	4682      	mov	sl, r0
 8009a0e:	d960      	bls.n	8009ad2 <_strtod_l+0xab2>
 8009a10:	ee18 3a90 	vmov	r3, s17
 8009a14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d104      	bne.n	8009a26 <_strtod_l+0xa06>
 8009a1c:	ee18 3a10 	vmov	r3, s16
 8009a20:	3301      	adds	r3, #1
 8009a22:	f43f ad45 	beq.w	80094b0 <_strtod_l+0x490>
 8009a26:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009c28 <_strtod_l+0xc08>
 8009a2a:	f04f 3aff 	mov.w	sl, #4294967295
 8009a2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a30:	4620      	mov	r0, r4
 8009a32:	f001 fbcd 	bl	800b1d0 <_Bfree>
 8009a36:	9905      	ldr	r1, [sp, #20]
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f001 fbc9 	bl	800b1d0 <_Bfree>
 8009a3e:	4631      	mov	r1, r6
 8009a40:	4620      	mov	r0, r4
 8009a42:	f001 fbc5 	bl	800b1d0 <_Bfree>
 8009a46:	4629      	mov	r1, r5
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f001 fbc1 	bl	800b1d0 <_Bfree>
 8009a4e:	e61a      	b.n	8009686 <_strtod_l+0x666>
 8009a50:	f1ba 0f00 	cmp.w	sl, #0
 8009a54:	d11b      	bne.n	8009a8e <_strtod_l+0xa6e>
 8009a56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a5a:	b9f3      	cbnz	r3, 8009a9a <_strtod_l+0xa7a>
 8009a5c:	4b6c      	ldr	r3, [pc, #432]	; (8009c10 <_strtod_l+0xbf0>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	4640      	mov	r0, r8
 8009a62:	4649      	mov	r1, r9
 8009a64:	f7f7 f842 	bl	8000aec <__aeabi_dcmplt>
 8009a68:	b9d0      	cbnz	r0, 8009aa0 <_strtod_l+0xa80>
 8009a6a:	4640      	mov	r0, r8
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	4b6c      	ldr	r3, [pc, #432]	; (8009c20 <_strtod_l+0xc00>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	f7f6 fdc9 	bl	8000608 <__aeabi_dmul>
 8009a76:	4680      	mov	r8, r0
 8009a78:	4689      	mov	r9, r1
 8009a7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009a7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009a82:	9315      	str	r3, [sp, #84]	; 0x54
 8009a84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009a88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a8c:	e79d      	b.n	80099ca <_strtod_l+0x9aa>
 8009a8e:	f1ba 0f01 	cmp.w	sl, #1
 8009a92:	d102      	bne.n	8009a9a <_strtod_l+0xa7a>
 8009a94:	2f00      	cmp	r7, #0
 8009a96:	f43f ad83 	beq.w	80095a0 <_strtod_l+0x580>
 8009a9a:	4b62      	ldr	r3, [pc, #392]	; (8009c24 <_strtod_l+0xc04>)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	e78e      	b.n	80099be <_strtod_l+0x99e>
 8009aa0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009c20 <_strtod_l+0xc00>
 8009aa4:	f04f 0800 	mov.w	r8, #0
 8009aa8:	e7e7      	b.n	8009a7a <_strtod_l+0xa5a>
 8009aaa:	4b5d      	ldr	r3, [pc, #372]	; (8009c20 <_strtod_l+0xc00>)
 8009aac:	4640      	mov	r0, r8
 8009aae:	4649      	mov	r1, r9
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f7f6 fda9 	bl	8000608 <__aeabi_dmul>
 8009ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ab8:	4680      	mov	r8, r0
 8009aba:	4689      	mov	r9, r1
 8009abc:	b933      	cbnz	r3, 8009acc <_strtod_l+0xaac>
 8009abe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ac2:	900e      	str	r0, [sp, #56]	; 0x38
 8009ac4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ac6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009aca:	e7dd      	b.n	8009a88 <_strtod_l+0xa68>
 8009acc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009ad0:	e7f9      	b.n	8009ac6 <_strtod_l+0xaa6>
 8009ad2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009ad6:	9b04      	ldr	r3, [sp, #16]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1a8      	bne.n	8009a2e <_strtod_l+0xa0e>
 8009adc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ae0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ae2:	0d1b      	lsrs	r3, r3, #20
 8009ae4:	051b      	lsls	r3, r3, #20
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d1a1      	bne.n	8009a2e <_strtod_l+0xa0e>
 8009aea:	4640      	mov	r0, r8
 8009aec:	4649      	mov	r1, r9
 8009aee:	f7f7 f8eb 	bl	8000cc8 <__aeabi_d2lz>
 8009af2:	f7f6 fd5b 	bl	80005ac <__aeabi_l2d>
 8009af6:	4602      	mov	r2, r0
 8009af8:	460b      	mov	r3, r1
 8009afa:	4640      	mov	r0, r8
 8009afc:	4649      	mov	r1, r9
 8009afe:	f7f6 fbcb 	bl	8000298 <__aeabi_dsub>
 8009b02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b08:	ea43 030a 	orr.w	r3, r3, sl
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	4680      	mov	r8, r0
 8009b10:	4689      	mov	r9, r1
 8009b12:	d055      	beq.n	8009bc0 <_strtod_l+0xba0>
 8009b14:	a336      	add	r3, pc, #216	; (adr r3, 8009bf0 <_strtod_l+0xbd0>)
 8009b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1a:	f7f6 ffe7 	bl	8000aec <__aeabi_dcmplt>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	f47f acd0 	bne.w	80094c4 <_strtod_l+0x4a4>
 8009b24:	a334      	add	r3, pc, #208	; (adr r3, 8009bf8 <_strtod_l+0xbd8>)
 8009b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	4649      	mov	r1, r9
 8009b2e:	f7f6 fffb 	bl	8000b28 <__aeabi_dcmpgt>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	f43f af7b 	beq.w	8009a2e <_strtod_l+0xa0e>
 8009b38:	e4c4      	b.n	80094c4 <_strtod_l+0x4a4>
 8009b3a:	9b04      	ldr	r3, [sp, #16]
 8009b3c:	b333      	cbz	r3, 8009b8c <_strtod_l+0xb6c>
 8009b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b40:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b44:	d822      	bhi.n	8009b8c <_strtod_l+0xb6c>
 8009b46:	a32e      	add	r3, pc, #184	; (adr r3, 8009c00 <_strtod_l+0xbe0>)
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	4640      	mov	r0, r8
 8009b4e:	4649      	mov	r1, r9
 8009b50:	f7f6 ffd6 	bl	8000b00 <__aeabi_dcmple>
 8009b54:	b1a0      	cbz	r0, 8009b80 <_strtod_l+0xb60>
 8009b56:	4649      	mov	r1, r9
 8009b58:	4640      	mov	r0, r8
 8009b5a:	f7f7 f82d 	bl	8000bb8 <__aeabi_d2uiz>
 8009b5e:	2801      	cmp	r0, #1
 8009b60:	bf38      	it	cc
 8009b62:	2001      	movcc	r0, #1
 8009b64:	f7f6 fcd6 	bl	8000514 <__aeabi_ui2d>
 8009b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b6a:	4680      	mov	r8, r0
 8009b6c:	4689      	mov	r9, r1
 8009b6e:	bb23      	cbnz	r3, 8009bba <_strtod_l+0xb9a>
 8009b70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b74:	9010      	str	r0, [sp, #64]	; 0x40
 8009b76:	9311      	str	r3, [sp, #68]	; 0x44
 8009b78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b84:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009b88:	1a9b      	subs	r3, r3, r2
 8009b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b90:	eeb0 0a48 	vmov.f32	s0, s16
 8009b94:	eef0 0a68 	vmov.f32	s1, s17
 8009b98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b9c:	f001 fe4a 	bl	800b834 <__ulp>
 8009ba0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ba4:	ec53 2b10 	vmov	r2, r3, d0
 8009ba8:	f7f6 fd2e 	bl	8000608 <__aeabi_dmul>
 8009bac:	ec53 2b18 	vmov	r2, r3, d8
 8009bb0:	f7f6 fb74 	bl	800029c <__adddf3>
 8009bb4:	4682      	mov	sl, r0
 8009bb6:	468b      	mov	fp, r1
 8009bb8:	e78d      	b.n	8009ad6 <_strtod_l+0xab6>
 8009bba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009bbe:	e7db      	b.n	8009b78 <_strtod_l+0xb58>
 8009bc0:	a311      	add	r3, pc, #68	; (adr r3, 8009c08 <_strtod_l+0xbe8>)
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	f7f6 ff91 	bl	8000aec <__aeabi_dcmplt>
 8009bca:	e7b2      	b.n	8009b32 <_strtod_l+0xb12>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	930a      	str	r3, [sp, #40]	; 0x28
 8009bd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009bd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bd4:	6013      	str	r3, [r2, #0]
 8009bd6:	f7ff ba6b 	b.w	80090b0 <_strtod_l+0x90>
 8009bda:	2a65      	cmp	r2, #101	; 0x65
 8009bdc:	f43f ab5f 	beq.w	800929e <_strtod_l+0x27e>
 8009be0:	2a45      	cmp	r2, #69	; 0x45
 8009be2:	f43f ab5c 	beq.w	800929e <_strtod_l+0x27e>
 8009be6:	2301      	movs	r3, #1
 8009be8:	f7ff bb94 	b.w	8009314 <_strtod_l+0x2f4>
 8009bec:	f3af 8000 	nop.w
 8009bf0:	94a03595 	.word	0x94a03595
 8009bf4:	3fdfffff 	.word	0x3fdfffff
 8009bf8:	35afe535 	.word	0x35afe535
 8009bfc:	3fe00000 	.word	0x3fe00000
 8009c00:	ffc00000 	.word	0xffc00000
 8009c04:	41dfffff 	.word	0x41dfffff
 8009c08:	94a03595 	.word	0x94a03595
 8009c0c:	3fcfffff 	.word	0x3fcfffff
 8009c10:	3ff00000 	.word	0x3ff00000
 8009c14:	7ff00000 	.word	0x7ff00000
 8009c18:	7fe00000 	.word	0x7fe00000
 8009c1c:	7c9fffff 	.word	0x7c9fffff
 8009c20:	3fe00000 	.word	0x3fe00000
 8009c24:	bff00000 	.word	0xbff00000
 8009c28:	7fefffff 	.word	0x7fefffff

08009c2c <_strtod_r>:
 8009c2c:	4b01      	ldr	r3, [pc, #4]	; (8009c34 <_strtod_r+0x8>)
 8009c2e:	f7ff b9f7 	b.w	8009020 <_strtod_l>
 8009c32:	bf00      	nop
 8009c34:	20000274 	.word	0x20000274

08009c38 <_strtol_l.constprop.0>:
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c3e:	d001      	beq.n	8009c44 <_strtol_l.constprop.0+0xc>
 8009c40:	2b24      	cmp	r3, #36	; 0x24
 8009c42:	d906      	bls.n	8009c52 <_strtol_l.constprop.0+0x1a>
 8009c44:	f7fe faee 	bl	8008224 <__errno>
 8009c48:	2316      	movs	r3, #22
 8009c4a:	6003      	str	r3, [r0, #0]
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009d38 <_strtol_l.constprop.0+0x100>
 8009c56:	460d      	mov	r5, r1
 8009c58:	462e      	mov	r6, r5
 8009c5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009c62:	f017 0708 	ands.w	r7, r7, #8
 8009c66:	d1f7      	bne.n	8009c58 <_strtol_l.constprop.0+0x20>
 8009c68:	2c2d      	cmp	r4, #45	; 0x2d
 8009c6a:	d132      	bne.n	8009cd2 <_strtol_l.constprop.0+0x9a>
 8009c6c:	782c      	ldrb	r4, [r5, #0]
 8009c6e:	2701      	movs	r7, #1
 8009c70:	1cb5      	adds	r5, r6, #2
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d05b      	beq.n	8009d2e <_strtol_l.constprop.0+0xf6>
 8009c76:	2b10      	cmp	r3, #16
 8009c78:	d109      	bne.n	8009c8e <_strtol_l.constprop.0+0x56>
 8009c7a:	2c30      	cmp	r4, #48	; 0x30
 8009c7c:	d107      	bne.n	8009c8e <_strtol_l.constprop.0+0x56>
 8009c7e:	782c      	ldrb	r4, [r5, #0]
 8009c80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009c84:	2c58      	cmp	r4, #88	; 0x58
 8009c86:	d14d      	bne.n	8009d24 <_strtol_l.constprop.0+0xec>
 8009c88:	786c      	ldrb	r4, [r5, #1]
 8009c8a:	2310      	movs	r3, #16
 8009c8c:	3502      	adds	r5, #2
 8009c8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009c92:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c96:	f04f 0c00 	mov.w	ip, #0
 8009c9a:	fbb8 f9f3 	udiv	r9, r8, r3
 8009c9e:	4666      	mov	r6, ip
 8009ca0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009ca4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009ca8:	f1be 0f09 	cmp.w	lr, #9
 8009cac:	d816      	bhi.n	8009cdc <_strtol_l.constprop.0+0xa4>
 8009cae:	4674      	mov	r4, lr
 8009cb0:	42a3      	cmp	r3, r4
 8009cb2:	dd24      	ble.n	8009cfe <_strtol_l.constprop.0+0xc6>
 8009cb4:	f1bc 0f00 	cmp.w	ip, #0
 8009cb8:	db1e      	blt.n	8009cf8 <_strtol_l.constprop.0+0xc0>
 8009cba:	45b1      	cmp	r9, r6
 8009cbc:	d31c      	bcc.n	8009cf8 <_strtol_l.constprop.0+0xc0>
 8009cbe:	d101      	bne.n	8009cc4 <_strtol_l.constprop.0+0x8c>
 8009cc0:	45a2      	cmp	sl, r4
 8009cc2:	db19      	blt.n	8009cf8 <_strtol_l.constprop.0+0xc0>
 8009cc4:	fb06 4603 	mla	r6, r6, r3, r4
 8009cc8:	f04f 0c01 	mov.w	ip, #1
 8009ccc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cd0:	e7e8      	b.n	8009ca4 <_strtol_l.constprop.0+0x6c>
 8009cd2:	2c2b      	cmp	r4, #43	; 0x2b
 8009cd4:	bf04      	itt	eq
 8009cd6:	782c      	ldrbeq	r4, [r5, #0]
 8009cd8:	1cb5      	addeq	r5, r6, #2
 8009cda:	e7ca      	b.n	8009c72 <_strtol_l.constprop.0+0x3a>
 8009cdc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009ce0:	f1be 0f19 	cmp.w	lr, #25
 8009ce4:	d801      	bhi.n	8009cea <_strtol_l.constprop.0+0xb2>
 8009ce6:	3c37      	subs	r4, #55	; 0x37
 8009ce8:	e7e2      	b.n	8009cb0 <_strtol_l.constprop.0+0x78>
 8009cea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009cee:	f1be 0f19 	cmp.w	lr, #25
 8009cf2:	d804      	bhi.n	8009cfe <_strtol_l.constprop.0+0xc6>
 8009cf4:	3c57      	subs	r4, #87	; 0x57
 8009cf6:	e7db      	b.n	8009cb0 <_strtol_l.constprop.0+0x78>
 8009cf8:	f04f 3cff 	mov.w	ip, #4294967295
 8009cfc:	e7e6      	b.n	8009ccc <_strtol_l.constprop.0+0x94>
 8009cfe:	f1bc 0f00 	cmp.w	ip, #0
 8009d02:	da05      	bge.n	8009d10 <_strtol_l.constprop.0+0xd8>
 8009d04:	2322      	movs	r3, #34	; 0x22
 8009d06:	6003      	str	r3, [r0, #0]
 8009d08:	4646      	mov	r6, r8
 8009d0a:	b942      	cbnz	r2, 8009d1e <_strtol_l.constprop.0+0xe6>
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	e79e      	b.n	8009c4e <_strtol_l.constprop.0+0x16>
 8009d10:	b107      	cbz	r7, 8009d14 <_strtol_l.constprop.0+0xdc>
 8009d12:	4276      	negs	r6, r6
 8009d14:	2a00      	cmp	r2, #0
 8009d16:	d0f9      	beq.n	8009d0c <_strtol_l.constprop.0+0xd4>
 8009d18:	f1bc 0f00 	cmp.w	ip, #0
 8009d1c:	d000      	beq.n	8009d20 <_strtol_l.constprop.0+0xe8>
 8009d1e:	1e69      	subs	r1, r5, #1
 8009d20:	6011      	str	r1, [r2, #0]
 8009d22:	e7f3      	b.n	8009d0c <_strtol_l.constprop.0+0xd4>
 8009d24:	2430      	movs	r4, #48	; 0x30
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1b1      	bne.n	8009c8e <_strtol_l.constprop.0+0x56>
 8009d2a:	2308      	movs	r3, #8
 8009d2c:	e7af      	b.n	8009c8e <_strtol_l.constprop.0+0x56>
 8009d2e:	2c30      	cmp	r4, #48	; 0x30
 8009d30:	d0a5      	beq.n	8009c7e <_strtol_l.constprop.0+0x46>
 8009d32:	230a      	movs	r3, #10
 8009d34:	e7ab      	b.n	8009c8e <_strtol_l.constprop.0+0x56>
 8009d36:	bf00      	nop
 8009d38:	0800e291 	.word	0x0800e291

08009d3c <_strtol_r>:
 8009d3c:	f7ff bf7c 	b.w	8009c38 <_strtol_l.constprop.0>

08009d40 <quorem>:
 8009d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	6903      	ldr	r3, [r0, #16]
 8009d46:	690c      	ldr	r4, [r1, #16]
 8009d48:	42a3      	cmp	r3, r4
 8009d4a:	4607      	mov	r7, r0
 8009d4c:	f2c0 8081 	blt.w	8009e52 <quorem+0x112>
 8009d50:	3c01      	subs	r4, #1
 8009d52:	f101 0814 	add.w	r8, r1, #20
 8009d56:	f100 0514 	add.w	r5, r0, #20
 8009d5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d5e:	9301      	str	r3, [sp, #4]
 8009d60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d74:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d78:	d331      	bcc.n	8009dde <quorem+0x9e>
 8009d7a:	f04f 0e00 	mov.w	lr, #0
 8009d7e:	4640      	mov	r0, r8
 8009d80:	46ac      	mov	ip, r5
 8009d82:	46f2      	mov	sl, lr
 8009d84:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d88:	b293      	uxth	r3, r2
 8009d8a:	fb06 e303 	mla	r3, r6, r3, lr
 8009d8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	ebaa 0303 	sub.w	r3, sl, r3
 8009d98:	f8dc a000 	ldr.w	sl, [ip]
 8009d9c:	0c12      	lsrs	r2, r2, #16
 8009d9e:	fa13 f38a 	uxtah	r3, r3, sl
 8009da2:	fb06 e202 	mla	r2, r6, r2, lr
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	9b00      	ldr	r3, [sp, #0]
 8009daa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009dae:	b292      	uxth	r2, r2
 8009db0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009db4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009db8:	f8bd 3000 	ldrh.w	r3, [sp]
 8009dbc:	4581      	cmp	r9, r0
 8009dbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dc2:	f84c 3b04 	str.w	r3, [ip], #4
 8009dc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009dca:	d2db      	bcs.n	8009d84 <quorem+0x44>
 8009dcc:	f855 300b 	ldr.w	r3, [r5, fp]
 8009dd0:	b92b      	cbnz	r3, 8009dde <quorem+0x9e>
 8009dd2:	9b01      	ldr	r3, [sp, #4]
 8009dd4:	3b04      	subs	r3, #4
 8009dd6:	429d      	cmp	r5, r3
 8009dd8:	461a      	mov	r2, r3
 8009dda:	d32e      	bcc.n	8009e3a <quorem+0xfa>
 8009ddc:	613c      	str	r4, [r7, #16]
 8009dde:	4638      	mov	r0, r7
 8009de0:	f001 fc82 	bl	800b6e8 <__mcmp>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	db24      	blt.n	8009e32 <quorem+0xf2>
 8009de8:	3601      	adds	r6, #1
 8009dea:	4628      	mov	r0, r5
 8009dec:	f04f 0c00 	mov.w	ip, #0
 8009df0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009df4:	f8d0 e000 	ldr.w	lr, [r0]
 8009df8:	b293      	uxth	r3, r2
 8009dfa:	ebac 0303 	sub.w	r3, ip, r3
 8009dfe:	0c12      	lsrs	r2, r2, #16
 8009e00:	fa13 f38e 	uxtah	r3, r3, lr
 8009e04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e12:	45c1      	cmp	r9, r8
 8009e14:	f840 3b04 	str.w	r3, [r0], #4
 8009e18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009e1c:	d2e8      	bcs.n	8009df0 <quorem+0xb0>
 8009e1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e26:	b922      	cbnz	r2, 8009e32 <quorem+0xf2>
 8009e28:	3b04      	subs	r3, #4
 8009e2a:	429d      	cmp	r5, r3
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	d30a      	bcc.n	8009e46 <quorem+0x106>
 8009e30:	613c      	str	r4, [r7, #16]
 8009e32:	4630      	mov	r0, r6
 8009e34:	b003      	add	sp, #12
 8009e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3a:	6812      	ldr	r2, [r2, #0]
 8009e3c:	3b04      	subs	r3, #4
 8009e3e:	2a00      	cmp	r2, #0
 8009e40:	d1cc      	bne.n	8009ddc <quorem+0x9c>
 8009e42:	3c01      	subs	r4, #1
 8009e44:	e7c7      	b.n	8009dd6 <quorem+0x96>
 8009e46:	6812      	ldr	r2, [r2, #0]
 8009e48:	3b04      	subs	r3, #4
 8009e4a:	2a00      	cmp	r2, #0
 8009e4c:	d1f0      	bne.n	8009e30 <quorem+0xf0>
 8009e4e:	3c01      	subs	r4, #1
 8009e50:	e7eb      	b.n	8009e2a <quorem+0xea>
 8009e52:	2000      	movs	r0, #0
 8009e54:	e7ee      	b.n	8009e34 <quorem+0xf4>
	...

08009e58 <_dtoa_r>:
 8009e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5c:	ed2d 8b04 	vpush	{d8-d9}
 8009e60:	ec57 6b10 	vmov	r6, r7, d0
 8009e64:	b093      	sub	sp, #76	; 0x4c
 8009e66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e6c:	9106      	str	r1, [sp, #24]
 8009e6e:	ee10 aa10 	vmov	sl, s0
 8009e72:	4604      	mov	r4, r0
 8009e74:	9209      	str	r2, [sp, #36]	; 0x24
 8009e76:	930c      	str	r3, [sp, #48]	; 0x30
 8009e78:	46bb      	mov	fp, r7
 8009e7a:	b975      	cbnz	r5, 8009e9a <_dtoa_r+0x42>
 8009e7c:	2010      	movs	r0, #16
 8009e7e:	f001 f94d 	bl	800b11c <malloc>
 8009e82:	4602      	mov	r2, r0
 8009e84:	6260      	str	r0, [r4, #36]	; 0x24
 8009e86:	b920      	cbnz	r0, 8009e92 <_dtoa_r+0x3a>
 8009e88:	4ba7      	ldr	r3, [pc, #668]	; (800a128 <_dtoa_r+0x2d0>)
 8009e8a:	21ea      	movs	r1, #234	; 0xea
 8009e8c:	48a7      	ldr	r0, [pc, #668]	; (800a12c <_dtoa_r+0x2d4>)
 8009e8e:	f002 f8ad 	bl	800bfec <__assert_func>
 8009e92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e96:	6005      	str	r5, [r0, #0]
 8009e98:	60c5      	str	r5, [r0, #12]
 8009e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e9c:	6819      	ldr	r1, [r3, #0]
 8009e9e:	b151      	cbz	r1, 8009eb6 <_dtoa_r+0x5e>
 8009ea0:	685a      	ldr	r2, [r3, #4]
 8009ea2:	604a      	str	r2, [r1, #4]
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	4093      	lsls	r3, r2
 8009ea8:	608b      	str	r3, [r1, #8]
 8009eaa:	4620      	mov	r0, r4
 8009eac:	f001 f990 	bl	800b1d0 <_Bfree>
 8009eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]
 8009eb6:	1e3b      	subs	r3, r7, #0
 8009eb8:	bfaa      	itet	ge
 8009eba:	2300      	movge	r3, #0
 8009ebc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009ec0:	f8c8 3000 	strge.w	r3, [r8]
 8009ec4:	4b9a      	ldr	r3, [pc, #616]	; (800a130 <_dtoa_r+0x2d8>)
 8009ec6:	bfbc      	itt	lt
 8009ec8:	2201      	movlt	r2, #1
 8009eca:	f8c8 2000 	strlt.w	r2, [r8]
 8009ece:	ea33 030b 	bics.w	r3, r3, fp
 8009ed2:	d11b      	bne.n	8009f0c <_dtoa_r+0xb4>
 8009ed4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ed6:	f242 730f 	movw	r3, #9999	; 0x270f
 8009eda:	6013      	str	r3, [r2, #0]
 8009edc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ee0:	4333      	orrs	r3, r6
 8009ee2:	f000 8592 	beq.w	800aa0a <_dtoa_r+0xbb2>
 8009ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ee8:	b963      	cbnz	r3, 8009f04 <_dtoa_r+0xac>
 8009eea:	4b92      	ldr	r3, [pc, #584]	; (800a134 <_dtoa_r+0x2dc>)
 8009eec:	e022      	b.n	8009f34 <_dtoa_r+0xdc>
 8009eee:	4b92      	ldr	r3, [pc, #584]	; (800a138 <_dtoa_r+0x2e0>)
 8009ef0:	9301      	str	r3, [sp, #4]
 8009ef2:	3308      	adds	r3, #8
 8009ef4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	9801      	ldr	r0, [sp, #4]
 8009efa:	b013      	add	sp, #76	; 0x4c
 8009efc:	ecbd 8b04 	vpop	{d8-d9}
 8009f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f04:	4b8b      	ldr	r3, [pc, #556]	; (800a134 <_dtoa_r+0x2dc>)
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	3303      	adds	r3, #3
 8009f0a:	e7f3      	b.n	8009ef4 <_dtoa_r+0x9c>
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	2300      	movs	r3, #0
 8009f10:	4650      	mov	r0, sl
 8009f12:	4659      	mov	r1, fp
 8009f14:	f7f6 fde0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f18:	ec4b ab19 	vmov	d9, sl, fp
 8009f1c:	4680      	mov	r8, r0
 8009f1e:	b158      	cbz	r0, 8009f38 <_dtoa_r+0xe0>
 8009f20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f22:	2301      	movs	r3, #1
 8009f24:	6013      	str	r3, [r2, #0]
 8009f26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f000 856b 	beq.w	800aa04 <_dtoa_r+0xbac>
 8009f2e:	4883      	ldr	r0, [pc, #524]	; (800a13c <_dtoa_r+0x2e4>)
 8009f30:	6018      	str	r0, [r3, #0]
 8009f32:	1e43      	subs	r3, r0, #1
 8009f34:	9301      	str	r3, [sp, #4]
 8009f36:	e7df      	b.n	8009ef8 <_dtoa_r+0xa0>
 8009f38:	ec4b ab10 	vmov	d0, sl, fp
 8009f3c:	aa10      	add	r2, sp, #64	; 0x40
 8009f3e:	a911      	add	r1, sp, #68	; 0x44
 8009f40:	4620      	mov	r0, r4
 8009f42:	f001 fcf3 	bl	800b92c <__d2b>
 8009f46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009f4a:	ee08 0a10 	vmov	s16, r0
 8009f4e:	2d00      	cmp	r5, #0
 8009f50:	f000 8084 	beq.w	800a05c <_dtoa_r+0x204>
 8009f54:	ee19 3a90 	vmov	r3, s19
 8009f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009f60:	4656      	mov	r6, sl
 8009f62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009f66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009f6e:	4b74      	ldr	r3, [pc, #464]	; (800a140 <_dtoa_r+0x2e8>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	4630      	mov	r0, r6
 8009f74:	4639      	mov	r1, r7
 8009f76:	f7f6 f98f 	bl	8000298 <__aeabi_dsub>
 8009f7a:	a365      	add	r3, pc, #404	; (adr r3, 800a110 <_dtoa_r+0x2b8>)
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	f7f6 fb42 	bl	8000608 <__aeabi_dmul>
 8009f84:	a364      	add	r3, pc, #400	; (adr r3, 800a118 <_dtoa_r+0x2c0>)
 8009f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8a:	f7f6 f987 	bl	800029c <__adddf3>
 8009f8e:	4606      	mov	r6, r0
 8009f90:	4628      	mov	r0, r5
 8009f92:	460f      	mov	r7, r1
 8009f94:	f7f6 face 	bl	8000534 <__aeabi_i2d>
 8009f98:	a361      	add	r3, pc, #388	; (adr r3, 800a120 <_dtoa_r+0x2c8>)
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	f7f6 fb33 	bl	8000608 <__aeabi_dmul>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	4639      	mov	r1, r7
 8009faa:	f7f6 f977 	bl	800029c <__adddf3>
 8009fae:	4606      	mov	r6, r0
 8009fb0:	460f      	mov	r7, r1
 8009fb2:	f7f6 fdd9 	bl	8000b68 <__aeabi_d2iz>
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	9000      	str	r0, [sp, #0]
 8009fba:	2300      	movs	r3, #0
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	4639      	mov	r1, r7
 8009fc0:	f7f6 fd94 	bl	8000aec <__aeabi_dcmplt>
 8009fc4:	b150      	cbz	r0, 8009fdc <_dtoa_r+0x184>
 8009fc6:	9800      	ldr	r0, [sp, #0]
 8009fc8:	f7f6 fab4 	bl	8000534 <__aeabi_i2d>
 8009fcc:	4632      	mov	r2, r6
 8009fce:	463b      	mov	r3, r7
 8009fd0:	f7f6 fd82 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fd4:	b910      	cbnz	r0, 8009fdc <_dtoa_r+0x184>
 8009fd6:	9b00      	ldr	r3, [sp, #0]
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	9b00      	ldr	r3, [sp, #0]
 8009fde:	2b16      	cmp	r3, #22
 8009fe0:	d85a      	bhi.n	800a098 <_dtoa_r+0x240>
 8009fe2:	9a00      	ldr	r2, [sp, #0]
 8009fe4:	4b57      	ldr	r3, [pc, #348]	; (800a144 <_dtoa_r+0x2ec>)
 8009fe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	ec51 0b19 	vmov	r0, r1, d9
 8009ff2:	f7f6 fd7b 	bl	8000aec <__aeabi_dcmplt>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d050      	beq.n	800a09c <_dtoa_r+0x244>
 8009ffa:	9b00      	ldr	r3, [sp, #0]
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	2300      	movs	r3, #0
 800a002:	930b      	str	r3, [sp, #44]	; 0x2c
 800a004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a006:	1b5d      	subs	r5, r3, r5
 800a008:	1e6b      	subs	r3, r5, #1
 800a00a:	9305      	str	r3, [sp, #20]
 800a00c:	bf45      	ittet	mi
 800a00e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a012:	9304      	strmi	r3, [sp, #16]
 800a014:	2300      	movpl	r3, #0
 800a016:	2300      	movmi	r3, #0
 800a018:	bf4c      	ite	mi
 800a01a:	9305      	strmi	r3, [sp, #20]
 800a01c:	9304      	strpl	r3, [sp, #16]
 800a01e:	9b00      	ldr	r3, [sp, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	db3d      	blt.n	800a0a0 <_dtoa_r+0x248>
 800a024:	9b05      	ldr	r3, [sp, #20]
 800a026:	9a00      	ldr	r2, [sp, #0]
 800a028:	920a      	str	r2, [sp, #40]	; 0x28
 800a02a:	4413      	add	r3, r2
 800a02c:	9305      	str	r3, [sp, #20]
 800a02e:	2300      	movs	r3, #0
 800a030:	9307      	str	r3, [sp, #28]
 800a032:	9b06      	ldr	r3, [sp, #24]
 800a034:	2b09      	cmp	r3, #9
 800a036:	f200 8089 	bhi.w	800a14c <_dtoa_r+0x2f4>
 800a03a:	2b05      	cmp	r3, #5
 800a03c:	bfc4      	itt	gt
 800a03e:	3b04      	subgt	r3, #4
 800a040:	9306      	strgt	r3, [sp, #24]
 800a042:	9b06      	ldr	r3, [sp, #24]
 800a044:	f1a3 0302 	sub.w	r3, r3, #2
 800a048:	bfcc      	ite	gt
 800a04a:	2500      	movgt	r5, #0
 800a04c:	2501      	movle	r5, #1
 800a04e:	2b03      	cmp	r3, #3
 800a050:	f200 8087 	bhi.w	800a162 <_dtoa_r+0x30a>
 800a054:	e8df f003 	tbb	[pc, r3]
 800a058:	59383a2d 	.word	0x59383a2d
 800a05c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a060:	441d      	add	r5, r3
 800a062:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a066:	2b20      	cmp	r3, #32
 800a068:	bfc1      	itttt	gt
 800a06a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a06e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a072:	fa0b f303 	lslgt.w	r3, fp, r3
 800a076:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a07a:	bfda      	itte	le
 800a07c:	f1c3 0320 	rsble	r3, r3, #32
 800a080:	fa06 f003 	lslle.w	r0, r6, r3
 800a084:	4318      	orrgt	r0, r3
 800a086:	f7f6 fa45 	bl	8000514 <__aeabi_ui2d>
 800a08a:	2301      	movs	r3, #1
 800a08c:	4606      	mov	r6, r0
 800a08e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a092:	3d01      	subs	r5, #1
 800a094:	930e      	str	r3, [sp, #56]	; 0x38
 800a096:	e76a      	b.n	8009f6e <_dtoa_r+0x116>
 800a098:	2301      	movs	r3, #1
 800a09a:	e7b2      	b.n	800a002 <_dtoa_r+0x1aa>
 800a09c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a09e:	e7b1      	b.n	800a004 <_dtoa_r+0x1ac>
 800a0a0:	9b04      	ldr	r3, [sp, #16]
 800a0a2:	9a00      	ldr	r2, [sp, #0]
 800a0a4:	1a9b      	subs	r3, r3, r2
 800a0a6:	9304      	str	r3, [sp, #16]
 800a0a8:	4253      	negs	r3, r2
 800a0aa:	9307      	str	r3, [sp, #28]
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	930a      	str	r3, [sp, #40]	; 0x28
 800a0b0:	e7bf      	b.n	800a032 <_dtoa_r+0x1da>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	9308      	str	r3, [sp, #32]
 800a0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	dc55      	bgt.n	800a168 <_dtoa_r+0x310>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a0c6:	e00c      	b.n	800a0e2 <_dtoa_r+0x28a>
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e7f3      	b.n	800a0b4 <_dtoa_r+0x25c>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0d0:	9308      	str	r3, [sp, #32]
 800a0d2:	9b00      	ldr	r3, [sp, #0]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	9302      	str	r3, [sp, #8]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	9303      	str	r3, [sp, #12]
 800a0de:	bfb8      	it	lt
 800a0e0:	2301      	movlt	r3, #1
 800a0e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	6042      	str	r2, [r0, #4]
 800a0e8:	2204      	movs	r2, #4
 800a0ea:	f102 0614 	add.w	r6, r2, #20
 800a0ee:	429e      	cmp	r6, r3
 800a0f0:	6841      	ldr	r1, [r0, #4]
 800a0f2:	d93d      	bls.n	800a170 <_dtoa_r+0x318>
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f001 f82b 	bl	800b150 <_Balloc>
 800a0fa:	9001      	str	r0, [sp, #4]
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d13b      	bne.n	800a178 <_dtoa_r+0x320>
 800a100:	4b11      	ldr	r3, [pc, #68]	; (800a148 <_dtoa_r+0x2f0>)
 800a102:	4602      	mov	r2, r0
 800a104:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a108:	e6c0      	b.n	8009e8c <_dtoa_r+0x34>
 800a10a:	2301      	movs	r3, #1
 800a10c:	e7df      	b.n	800a0ce <_dtoa_r+0x276>
 800a10e:	bf00      	nop
 800a110:	636f4361 	.word	0x636f4361
 800a114:	3fd287a7 	.word	0x3fd287a7
 800a118:	8b60c8b3 	.word	0x8b60c8b3
 800a11c:	3fc68a28 	.word	0x3fc68a28
 800a120:	509f79fb 	.word	0x509f79fb
 800a124:	3fd34413 	.word	0x3fd34413
 800a128:	0800e39e 	.word	0x0800e39e
 800a12c:	0800e3b5 	.word	0x0800e3b5
 800a130:	7ff00000 	.word	0x7ff00000
 800a134:	0800e39a 	.word	0x0800e39a
 800a138:	0800e391 	.word	0x0800e391
 800a13c:	0800e215 	.word	0x0800e215
 800a140:	3ff80000 	.word	0x3ff80000
 800a144:	0800e520 	.word	0x0800e520
 800a148:	0800e410 	.word	0x0800e410
 800a14c:	2501      	movs	r5, #1
 800a14e:	2300      	movs	r3, #0
 800a150:	9306      	str	r3, [sp, #24]
 800a152:	9508      	str	r5, [sp, #32]
 800a154:	f04f 33ff 	mov.w	r3, #4294967295
 800a158:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a15c:	2200      	movs	r2, #0
 800a15e:	2312      	movs	r3, #18
 800a160:	e7b0      	b.n	800a0c4 <_dtoa_r+0x26c>
 800a162:	2301      	movs	r3, #1
 800a164:	9308      	str	r3, [sp, #32]
 800a166:	e7f5      	b.n	800a154 <_dtoa_r+0x2fc>
 800a168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a16a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a16e:	e7b8      	b.n	800a0e2 <_dtoa_r+0x28a>
 800a170:	3101      	adds	r1, #1
 800a172:	6041      	str	r1, [r0, #4]
 800a174:	0052      	lsls	r2, r2, #1
 800a176:	e7b8      	b.n	800a0ea <_dtoa_r+0x292>
 800a178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a17a:	9a01      	ldr	r2, [sp, #4]
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	9b03      	ldr	r3, [sp, #12]
 800a180:	2b0e      	cmp	r3, #14
 800a182:	f200 809d 	bhi.w	800a2c0 <_dtoa_r+0x468>
 800a186:	2d00      	cmp	r5, #0
 800a188:	f000 809a 	beq.w	800a2c0 <_dtoa_r+0x468>
 800a18c:	9b00      	ldr	r3, [sp, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	dd32      	ble.n	800a1f8 <_dtoa_r+0x3a0>
 800a192:	4ab7      	ldr	r2, [pc, #732]	; (800a470 <_dtoa_r+0x618>)
 800a194:	f003 030f 	and.w	r3, r3, #15
 800a198:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a19c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1a0:	9b00      	ldr	r3, [sp, #0]
 800a1a2:	05d8      	lsls	r0, r3, #23
 800a1a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a1a8:	d516      	bpl.n	800a1d8 <_dtoa_r+0x380>
 800a1aa:	4bb2      	ldr	r3, [pc, #712]	; (800a474 <_dtoa_r+0x61c>)
 800a1ac:	ec51 0b19 	vmov	r0, r1, d9
 800a1b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1b4:	f7f6 fb52 	bl	800085c <__aeabi_ddiv>
 800a1b8:	f007 070f 	and.w	r7, r7, #15
 800a1bc:	4682      	mov	sl, r0
 800a1be:	468b      	mov	fp, r1
 800a1c0:	2503      	movs	r5, #3
 800a1c2:	4eac      	ldr	r6, [pc, #688]	; (800a474 <_dtoa_r+0x61c>)
 800a1c4:	b957      	cbnz	r7, 800a1dc <_dtoa_r+0x384>
 800a1c6:	4642      	mov	r2, r8
 800a1c8:	464b      	mov	r3, r9
 800a1ca:	4650      	mov	r0, sl
 800a1cc:	4659      	mov	r1, fp
 800a1ce:	f7f6 fb45 	bl	800085c <__aeabi_ddiv>
 800a1d2:	4682      	mov	sl, r0
 800a1d4:	468b      	mov	fp, r1
 800a1d6:	e028      	b.n	800a22a <_dtoa_r+0x3d2>
 800a1d8:	2502      	movs	r5, #2
 800a1da:	e7f2      	b.n	800a1c2 <_dtoa_r+0x36a>
 800a1dc:	07f9      	lsls	r1, r7, #31
 800a1de:	d508      	bpl.n	800a1f2 <_dtoa_r+0x39a>
 800a1e0:	4640      	mov	r0, r8
 800a1e2:	4649      	mov	r1, r9
 800a1e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a1e8:	f7f6 fa0e 	bl	8000608 <__aeabi_dmul>
 800a1ec:	3501      	adds	r5, #1
 800a1ee:	4680      	mov	r8, r0
 800a1f0:	4689      	mov	r9, r1
 800a1f2:	107f      	asrs	r7, r7, #1
 800a1f4:	3608      	adds	r6, #8
 800a1f6:	e7e5      	b.n	800a1c4 <_dtoa_r+0x36c>
 800a1f8:	f000 809b 	beq.w	800a332 <_dtoa_r+0x4da>
 800a1fc:	9b00      	ldr	r3, [sp, #0]
 800a1fe:	4f9d      	ldr	r7, [pc, #628]	; (800a474 <_dtoa_r+0x61c>)
 800a200:	425e      	negs	r6, r3
 800a202:	4b9b      	ldr	r3, [pc, #620]	; (800a470 <_dtoa_r+0x618>)
 800a204:	f006 020f 	and.w	r2, r6, #15
 800a208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	ec51 0b19 	vmov	r0, r1, d9
 800a214:	f7f6 f9f8 	bl	8000608 <__aeabi_dmul>
 800a218:	1136      	asrs	r6, r6, #4
 800a21a:	4682      	mov	sl, r0
 800a21c:	468b      	mov	fp, r1
 800a21e:	2300      	movs	r3, #0
 800a220:	2502      	movs	r5, #2
 800a222:	2e00      	cmp	r6, #0
 800a224:	d17a      	bne.n	800a31c <_dtoa_r+0x4c4>
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1d3      	bne.n	800a1d2 <_dtoa_r+0x37a>
 800a22a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f000 8082 	beq.w	800a336 <_dtoa_r+0x4de>
 800a232:	4b91      	ldr	r3, [pc, #580]	; (800a478 <_dtoa_r+0x620>)
 800a234:	2200      	movs	r2, #0
 800a236:	4650      	mov	r0, sl
 800a238:	4659      	mov	r1, fp
 800a23a:	f7f6 fc57 	bl	8000aec <__aeabi_dcmplt>
 800a23e:	2800      	cmp	r0, #0
 800a240:	d079      	beq.n	800a336 <_dtoa_r+0x4de>
 800a242:	9b03      	ldr	r3, [sp, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d076      	beq.n	800a336 <_dtoa_r+0x4de>
 800a248:	9b02      	ldr	r3, [sp, #8]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	dd36      	ble.n	800a2bc <_dtoa_r+0x464>
 800a24e:	9b00      	ldr	r3, [sp, #0]
 800a250:	4650      	mov	r0, sl
 800a252:	4659      	mov	r1, fp
 800a254:	1e5f      	subs	r7, r3, #1
 800a256:	2200      	movs	r2, #0
 800a258:	4b88      	ldr	r3, [pc, #544]	; (800a47c <_dtoa_r+0x624>)
 800a25a:	f7f6 f9d5 	bl	8000608 <__aeabi_dmul>
 800a25e:	9e02      	ldr	r6, [sp, #8]
 800a260:	4682      	mov	sl, r0
 800a262:	468b      	mov	fp, r1
 800a264:	3501      	adds	r5, #1
 800a266:	4628      	mov	r0, r5
 800a268:	f7f6 f964 	bl	8000534 <__aeabi_i2d>
 800a26c:	4652      	mov	r2, sl
 800a26e:	465b      	mov	r3, fp
 800a270:	f7f6 f9ca 	bl	8000608 <__aeabi_dmul>
 800a274:	4b82      	ldr	r3, [pc, #520]	; (800a480 <_dtoa_r+0x628>)
 800a276:	2200      	movs	r2, #0
 800a278:	f7f6 f810 	bl	800029c <__adddf3>
 800a27c:	46d0      	mov	r8, sl
 800a27e:	46d9      	mov	r9, fp
 800a280:	4682      	mov	sl, r0
 800a282:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a286:	2e00      	cmp	r6, #0
 800a288:	d158      	bne.n	800a33c <_dtoa_r+0x4e4>
 800a28a:	4b7e      	ldr	r3, [pc, #504]	; (800a484 <_dtoa_r+0x62c>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	4640      	mov	r0, r8
 800a290:	4649      	mov	r1, r9
 800a292:	f7f6 f801 	bl	8000298 <__aeabi_dsub>
 800a296:	4652      	mov	r2, sl
 800a298:	465b      	mov	r3, fp
 800a29a:	4680      	mov	r8, r0
 800a29c:	4689      	mov	r9, r1
 800a29e:	f7f6 fc43 	bl	8000b28 <__aeabi_dcmpgt>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	f040 8295 	bne.w	800a7d2 <_dtoa_r+0x97a>
 800a2a8:	4652      	mov	r2, sl
 800a2aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a2ae:	4640      	mov	r0, r8
 800a2b0:	4649      	mov	r1, r9
 800a2b2:	f7f6 fc1b 	bl	8000aec <__aeabi_dcmplt>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	f040 8289 	bne.w	800a7ce <_dtoa_r+0x976>
 800a2bc:	ec5b ab19 	vmov	sl, fp, d9
 800a2c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f2c0 8148 	blt.w	800a558 <_dtoa_r+0x700>
 800a2c8:	9a00      	ldr	r2, [sp, #0]
 800a2ca:	2a0e      	cmp	r2, #14
 800a2cc:	f300 8144 	bgt.w	800a558 <_dtoa_r+0x700>
 800a2d0:	4b67      	ldr	r3, [pc, #412]	; (800a470 <_dtoa_r+0x618>)
 800a2d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f280 80d5 	bge.w	800a48c <_dtoa_r+0x634>
 800a2e2:	9b03      	ldr	r3, [sp, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f300 80d1 	bgt.w	800a48c <_dtoa_r+0x634>
 800a2ea:	f040 826f 	bne.w	800a7cc <_dtoa_r+0x974>
 800a2ee:	4b65      	ldr	r3, [pc, #404]	; (800a484 <_dtoa_r+0x62c>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	4649      	mov	r1, r9
 800a2f6:	f7f6 f987 	bl	8000608 <__aeabi_dmul>
 800a2fa:	4652      	mov	r2, sl
 800a2fc:	465b      	mov	r3, fp
 800a2fe:	f7f6 fc09 	bl	8000b14 <__aeabi_dcmpge>
 800a302:	9e03      	ldr	r6, [sp, #12]
 800a304:	4637      	mov	r7, r6
 800a306:	2800      	cmp	r0, #0
 800a308:	f040 8245 	bne.w	800a796 <_dtoa_r+0x93e>
 800a30c:	9d01      	ldr	r5, [sp, #4]
 800a30e:	2331      	movs	r3, #49	; 0x31
 800a310:	f805 3b01 	strb.w	r3, [r5], #1
 800a314:	9b00      	ldr	r3, [sp, #0]
 800a316:	3301      	adds	r3, #1
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	e240      	b.n	800a79e <_dtoa_r+0x946>
 800a31c:	07f2      	lsls	r2, r6, #31
 800a31e:	d505      	bpl.n	800a32c <_dtoa_r+0x4d4>
 800a320:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a324:	f7f6 f970 	bl	8000608 <__aeabi_dmul>
 800a328:	3501      	adds	r5, #1
 800a32a:	2301      	movs	r3, #1
 800a32c:	1076      	asrs	r6, r6, #1
 800a32e:	3708      	adds	r7, #8
 800a330:	e777      	b.n	800a222 <_dtoa_r+0x3ca>
 800a332:	2502      	movs	r5, #2
 800a334:	e779      	b.n	800a22a <_dtoa_r+0x3d2>
 800a336:	9f00      	ldr	r7, [sp, #0]
 800a338:	9e03      	ldr	r6, [sp, #12]
 800a33a:	e794      	b.n	800a266 <_dtoa_r+0x40e>
 800a33c:	9901      	ldr	r1, [sp, #4]
 800a33e:	4b4c      	ldr	r3, [pc, #304]	; (800a470 <_dtoa_r+0x618>)
 800a340:	4431      	add	r1, r6
 800a342:	910d      	str	r1, [sp, #52]	; 0x34
 800a344:	9908      	ldr	r1, [sp, #32]
 800a346:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a34a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a34e:	2900      	cmp	r1, #0
 800a350:	d043      	beq.n	800a3da <_dtoa_r+0x582>
 800a352:	494d      	ldr	r1, [pc, #308]	; (800a488 <_dtoa_r+0x630>)
 800a354:	2000      	movs	r0, #0
 800a356:	f7f6 fa81 	bl	800085c <__aeabi_ddiv>
 800a35a:	4652      	mov	r2, sl
 800a35c:	465b      	mov	r3, fp
 800a35e:	f7f5 ff9b 	bl	8000298 <__aeabi_dsub>
 800a362:	9d01      	ldr	r5, [sp, #4]
 800a364:	4682      	mov	sl, r0
 800a366:	468b      	mov	fp, r1
 800a368:	4649      	mov	r1, r9
 800a36a:	4640      	mov	r0, r8
 800a36c:	f7f6 fbfc 	bl	8000b68 <__aeabi_d2iz>
 800a370:	4606      	mov	r6, r0
 800a372:	f7f6 f8df 	bl	8000534 <__aeabi_i2d>
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	4640      	mov	r0, r8
 800a37c:	4649      	mov	r1, r9
 800a37e:	f7f5 ff8b 	bl	8000298 <__aeabi_dsub>
 800a382:	3630      	adds	r6, #48	; 0x30
 800a384:	f805 6b01 	strb.w	r6, [r5], #1
 800a388:	4652      	mov	r2, sl
 800a38a:	465b      	mov	r3, fp
 800a38c:	4680      	mov	r8, r0
 800a38e:	4689      	mov	r9, r1
 800a390:	f7f6 fbac 	bl	8000aec <__aeabi_dcmplt>
 800a394:	2800      	cmp	r0, #0
 800a396:	d163      	bne.n	800a460 <_dtoa_r+0x608>
 800a398:	4642      	mov	r2, r8
 800a39a:	464b      	mov	r3, r9
 800a39c:	4936      	ldr	r1, [pc, #216]	; (800a478 <_dtoa_r+0x620>)
 800a39e:	2000      	movs	r0, #0
 800a3a0:	f7f5 ff7a 	bl	8000298 <__aeabi_dsub>
 800a3a4:	4652      	mov	r2, sl
 800a3a6:	465b      	mov	r3, fp
 800a3a8:	f7f6 fba0 	bl	8000aec <__aeabi_dcmplt>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	f040 80b5 	bne.w	800a51c <_dtoa_r+0x6c4>
 800a3b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3b4:	429d      	cmp	r5, r3
 800a3b6:	d081      	beq.n	800a2bc <_dtoa_r+0x464>
 800a3b8:	4b30      	ldr	r3, [pc, #192]	; (800a47c <_dtoa_r+0x624>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	4650      	mov	r0, sl
 800a3be:	4659      	mov	r1, fp
 800a3c0:	f7f6 f922 	bl	8000608 <__aeabi_dmul>
 800a3c4:	4b2d      	ldr	r3, [pc, #180]	; (800a47c <_dtoa_r+0x624>)
 800a3c6:	4682      	mov	sl, r0
 800a3c8:	468b      	mov	fp, r1
 800a3ca:	4640      	mov	r0, r8
 800a3cc:	4649      	mov	r1, r9
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f7f6 f91a 	bl	8000608 <__aeabi_dmul>
 800a3d4:	4680      	mov	r8, r0
 800a3d6:	4689      	mov	r9, r1
 800a3d8:	e7c6      	b.n	800a368 <_dtoa_r+0x510>
 800a3da:	4650      	mov	r0, sl
 800a3dc:	4659      	mov	r1, fp
 800a3de:	f7f6 f913 	bl	8000608 <__aeabi_dmul>
 800a3e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3e4:	9d01      	ldr	r5, [sp, #4]
 800a3e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3e8:	4682      	mov	sl, r0
 800a3ea:	468b      	mov	fp, r1
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	4640      	mov	r0, r8
 800a3f0:	f7f6 fbba 	bl	8000b68 <__aeabi_d2iz>
 800a3f4:	4606      	mov	r6, r0
 800a3f6:	f7f6 f89d 	bl	8000534 <__aeabi_i2d>
 800a3fa:	3630      	adds	r6, #48	; 0x30
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	460b      	mov	r3, r1
 800a400:	4640      	mov	r0, r8
 800a402:	4649      	mov	r1, r9
 800a404:	f7f5 ff48 	bl	8000298 <__aeabi_dsub>
 800a408:	f805 6b01 	strb.w	r6, [r5], #1
 800a40c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a40e:	429d      	cmp	r5, r3
 800a410:	4680      	mov	r8, r0
 800a412:	4689      	mov	r9, r1
 800a414:	f04f 0200 	mov.w	r2, #0
 800a418:	d124      	bne.n	800a464 <_dtoa_r+0x60c>
 800a41a:	4b1b      	ldr	r3, [pc, #108]	; (800a488 <_dtoa_r+0x630>)
 800a41c:	4650      	mov	r0, sl
 800a41e:	4659      	mov	r1, fp
 800a420:	f7f5 ff3c 	bl	800029c <__adddf3>
 800a424:	4602      	mov	r2, r0
 800a426:	460b      	mov	r3, r1
 800a428:	4640      	mov	r0, r8
 800a42a:	4649      	mov	r1, r9
 800a42c:	f7f6 fb7c 	bl	8000b28 <__aeabi_dcmpgt>
 800a430:	2800      	cmp	r0, #0
 800a432:	d173      	bne.n	800a51c <_dtoa_r+0x6c4>
 800a434:	4652      	mov	r2, sl
 800a436:	465b      	mov	r3, fp
 800a438:	4913      	ldr	r1, [pc, #76]	; (800a488 <_dtoa_r+0x630>)
 800a43a:	2000      	movs	r0, #0
 800a43c:	f7f5 ff2c 	bl	8000298 <__aeabi_dsub>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4640      	mov	r0, r8
 800a446:	4649      	mov	r1, r9
 800a448:	f7f6 fb50 	bl	8000aec <__aeabi_dcmplt>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	f43f af35 	beq.w	800a2bc <_dtoa_r+0x464>
 800a452:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a454:	1e6b      	subs	r3, r5, #1
 800a456:	930f      	str	r3, [sp, #60]	; 0x3c
 800a458:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a45c:	2b30      	cmp	r3, #48	; 0x30
 800a45e:	d0f8      	beq.n	800a452 <_dtoa_r+0x5fa>
 800a460:	9700      	str	r7, [sp, #0]
 800a462:	e049      	b.n	800a4f8 <_dtoa_r+0x6a0>
 800a464:	4b05      	ldr	r3, [pc, #20]	; (800a47c <_dtoa_r+0x624>)
 800a466:	f7f6 f8cf 	bl	8000608 <__aeabi_dmul>
 800a46a:	4680      	mov	r8, r0
 800a46c:	4689      	mov	r9, r1
 800a46e:	e7bd      	b.n	800a3ec <_dtoa_r+0x594>
 800a470:	0800e520 	.word	0x0800e520
 800a474:	0800e4f8 	.word	0x0800e4f8
 800a478:	3ff00000 	.word	0x3ff00000
 800a47c:	40240000 	.word	0x40240000
 800a480:	401c0000 	.word	0x401c0000
 800a484:	40140000 	.word	0x40140000
 800a488:	3fe00000 	.word	0x3fe00000
 800a48c:	9d01      	ldr	r5, [sp, #4]
 800a48e:	4656      	mov	r6, sl
 800a490:	465f      	mov	r7, fp
 800a492:	4642      	mov	r2, r8
 800a494:	464b      	mov	r3, r9
 800a496:	4630      	mov	r0, r6
 800a498:	4639      	mov	r1, r7
 800a49a:	f7f6 f9df 	bl	800085c <__aeabi_ddiv>
 800a49e:	f7f6 fb63 	bl	8000b68 <__aeabi_d2iz>
 800a4a2:	4682      	mov	sl, r0
 800a4a4:	f7f6 f846 	bl	8000534 <__aeabi_i2d>
 800a4a8:	4642      	mov	r2, r8
 800a4aa:	464b      	mov	r3, r9
 800a4ac:	f7f6 f8ac 	bl	8000608 <__aeabi_dmul>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	4639      	mov	r1, r7
 800a4b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a4bc:	f7f5 feec 	bl	8000298 <__aeabi_dsub>
 800a4c0:	f805 6b01 	strb.w	r6, [r5], #1
 800a4c4:	9e01      	ldr	r6, [sp, #4]
 800a4c6:	9f03      	ldr	r7, [sp, #12]
 800a4c8:	1bae      	subs	r6, r5, r6
 800a4ca:	42b7      	cmp	r7, r6
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	d135      	bne.n	800a53e <_dtoa_r+0x6e6>
 800a4d2:	f7f5 fee3 	bl	800029c <__adddf3>
 800a4d6:	4642      	mov	r2, r8
 800a4d8:	464b      	mov	r3, r9
 800a4da:	4606      	mov	r6, r0
 800a4dc:	460f      	mov	r7, r1
 800a4de:	f7f6 fb23 	bl	8000b28 <__aeabi_dcmpgt>
 800a4e2:	b9d0      	cbnz	r0, 800a51a <_dtoa_r+0x6c2>
 800a4e4:	4642      	mov	r2, r8
 800a4e6:	464b      	mov	r3, r9
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	4639      	mov	r1, r7
 800a4ec:	f7f6 faf4 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4f0:	b110      	cbz	r0, 800a4f8 <_dtoa_r+0x6a0>
 800a4f2:	f01a 0f01 	tst.w	sl, #1
 800a4f6:	d110      	bne.n	800a51a <_dtoa_r+0x6c2>
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	ee18 1a10 	vmov	r1, s16
 800a4fe:	f000 fe67 	bl	800b1d0 <_Bfree>
 800a502:	2300      	movs	r3, #0
 800a504:	9800      	ldr	r0, [sp, #0]
 800a506:	702b      	strb	r3, [r5, #0]
 800a508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a50a:	3001      	adds	r0, #1
 800a50c:	6018      	str	r0, [r3, #0]
 800a50e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a510:	2b00      	cmp	r3, #0
 800a512:	f43f acf1 	beq.w	8009ef8 <_dtoa_r+0xa0>
 800a516:	601d      	str	r5, [r3, #0]
 800a518:	e4ee      	b.n	8009ef8 <_dtoa_r+0xa0>
 800a51a:	9f00      	ldr	r7, [sp, #0]
 800a51c:	462b      	mov	r3, r5
 800a51e:	461d      	mov	r5, r3
 800a520:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a524:	2a39      	cmp	r2, #57	; 0x39
 800a526:	d106      	bne.n	800a536 <_dtoa_r+0x6de>
 800a528:	9a01      	ldr	r2, [sp, #4]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d1f7      	bne.n	800a51e <_dtoa_r+0x6c6>
 800a52e:	9901      	ldr	r1, [sp, #4]
 800a530:	2230      	movs	r2, #48	; 0x30
 800a532:	3701      	adds	r7, #1
 800a534:	700a      	strb	r2, [r1, #0]
 800a536:	781a      	ldrb	r2, [r3, #0]
 800a538:	3201      	adds	r2, #1
 800a53a:	701a      	strb	r2, [r3, #0]
 800a53c:	e790      	b.n	800a460 <_dtoa_r+0x608>
 800a53e:	4ba6      	ldr	r3, [pc, #664]	; (800a7d8 <_dtoa_r+0x980>)
 800a540:	2200      	movs	r2, #0
 800a542:	f7f6 f861 	bl	8000608 <__aeabi_dmul>
 800a546:	2200      	movs	r2, #0
 800a548:	2300      	movs	r3, #0
 800a54a:	4606      	mov	r6, r0
 800a54c:	460f      	mov	r7, r1
 800a54e:	f7f6 fac3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a552:	2800      	cmp	r0, #0
 800a554:	d09d      	beq.n	800a492 <_dtoa_r+0x63a>
 800a556:	e7cf      	b.n	800a4f8 <_dtoa_r+0x6a0>
 800a558:	9a08      	ldr	r2, [sp, #32]
 800a55a:	2a00      	cmp	r2, #0
 800a55c:	f000 80d7 	beq.w	800a70e <_dtoa_r+0x8b6>
 800a560:	9a06      	ldr	r2, [sp, #24]
 800a562:	2a01      	cmp	r2, #1
 800a564:	f300 80ba 	bgt.w	800a6dc <_dtoa_r+0x884>
 800a568:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a56a:	2a00      	cmp	r2, #0
 800a56c:	f000 80b2 	beq.w	800a6d4 <_dtoa_r+0x87c>
 800a570:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a574:	9e07      	ldr	r6, [sp, #28]
 800a576:	9d04      	ldr	r5, [sp, #16]
 800a578:	9a04      	ldr	r2, [sp, #16]
 800a57a:	441a      	add	r2, r3
 800a57c:	9204      	str	r2, [sp, #16]
 800a57e:	9a05      	ldr	r2, [sp, #20]
 800a580:	2101      	movs	r1, #1
 800a582:	441a      	add	r2, r3
 800a584:	4620      	mov	r0, r4
 800a586:	9205      	str	r2, [sp, #20]
 800a588:	f000 ff24 	bl	800b3d4 <__i2b>
 800a58c:	4607      	mov	r7, r0
 800a58e:	2d00      	cmp	r5, #0
 800a590:	dd0c      	ble.n	800a5ac <_dtoa_r+0x754>
 800a592:	9b05      	ldr	r3, [sp, #20]
 800a594:	2b00      	cmp	r3, #0
 800a596:	dd09      	ble.n	800a5ac <_dtoa_r+0x754>
 800a598:	42ab      	cmp	r3, r5
 800a59a:	9a04      	ldr	r2, [sp, #16]
 800a59c:	bfa8      	it	ge
 800a59e:	462b      	movge	r3, r5
 800a5a0:	1ad2      	subs	r2, r2, r3
 800a5a2:	9204      	str	r2, [sp, #16]
 800a5a4:	9a05      	ldr	r2, [sp, #20]
 800a5a6:	1aed      	subs	r5, r5, r3
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	9305      	str	r3, [sp, #20]
 800a5ac:	9b07      	ldr	r3, [sp, #28]
 800a5ae:	b31b      	cbz	r3, 800a5f8 <_dtoa_r+0x7a0>
 800a5b0:	9b08      	ldr	r3, [sp, #32]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f000 80af 	beq.w	800a716 <_dtoa_r+0x8be>
 800a5b8:	2e00      	cmp	r6, #0
 800a5ba:	dd13      	ble.n	800a5e4 <_dtoa_r+0x78c>
 800a5bc:	4639      	mov	r1, r7
 800a5be:	4632      	mov	r2, r6
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f000 ffc7 	bl	800b554 <__pow5mult>
 800a5c6:	ee18 2a10 	vmov	r2, s16
 800a5ca:	4601      	mov	r1, r0
 800a5cc:	4607      	mov	r7, r0
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f000 ff16 	bl	800b400 <__multiply>
 800a5d4:	ee18 1a10 	vmov	r1, s16
 800a5d8:	4680      	mov	r8, r0
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f000 fdf8 	bl	800b1d0 <_Bfree>
 800a5e0:	ee08 8a10 	vmov	s16, r8
 800a5e4:	9b07      	ldr	r3, [sp, #28]
 800a5e6:	1b9a      	subs	r2, r3, r6
 800a5e8:	d006      	beq.n	800a5f8 <_dtoa_r+0x7a0>
 800a5ea:	ee18 1a10 	vmov	r1, s16
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f000 ffb0 	bl	800b554 <__pow5mult>
 800a5f4:	ee08 0a10 	vmov	s16, r0
 800a5f8:	2101      	movs	r1, #1
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f000 feea 	bl	800b3d4 <__i2b>
 800a600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a602:	2b00      	cmp	r3, #0
 800a604:	4606      	mov	r6, r0
 800a606:	f340 8088 	ble.w	800a71a <_dtoa_r+0x8c2>
 800a60a:	461a      	mov	r2, r3
 800a60c:	4601      	mov	r1, r0
 800a60e:	4620      	mov	r0, r4
 800a610:	f000 ffa0 	bl	800b554 <__pow5mult>
 800a614:	9b06      	ldr	r3, [sp, #24]
 800a616:	2b01      	cmp	r3, #1
 800a618:	4606      	mov	r6, r0
 800a61a:	f340 8081 	ble.w	800a720 <_dtoa_r+0x8c8>
 800a61e:	f04f 0800 	mov.w	r8, #0
 800a622:	6933      	ldr	r3, [r6, #16]
 800a624:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a628:	6918      	ldr	r0, [r3, #16]
 800a62a:	f000 fe83 	bl	800b334 <__hi0bits>
 800a62e:	f1c0 0020 	rsb	r0, r0, #32
 800a632:	9b05      	ldr	r3, [sp, #20]
 800a634:	4418      	add	r0, r3
 800a636:	f010 001f 	ands.w	r0, r0, #31
 800a63a:	f000 8092 	beq.w	800a762 <_dtoa_r+0x90a>
 800a63e:	f1c0 0320 	rsb	r3, r0, #32
 800a642:	2b04      	cmp	r3, #4
 800a644:	f340 808a 	ble.w	800a75c <_dtoa_r+0x904>
 800a648:	f1c0 001c 	rsb	r0, r0, #28
 800a64c:	9b04      	ldr	r3, [sp, #16]
 800a64e:	4403      	add	r3, r0
 800a650:	9304      	str	r3, [sp, #16]
 800a652:	9b05      	ldr	r3, [sp, #20]
 800a654:	4403      	add	r3, r0
 800a656:	4405      	add	r5, r0
 800a658:	9305      	str	r3, [sp, #20]
 800a65a:	9b04      	ldr	r3, [sp, #16]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	dd07      	ble.n	800a670 <_dtoa_r+0x818>
 800a660:	ee18 1a10 	vmov	r1, s16
 800a664:	461a      	mov	r2, r3
 800a666:	4620      	mov	r0, r4
 800a668:	f000 ffce 	bl	800b608 <__lshift>
 800a66c:	ee08 0a10 	vmov	s16, r0
 800a670:	9b05      	ldr	r3, [sp, #20]
 800a672:	2b00      	cmp	r3, #0
 800a674:	dd05      	ble.n	800a682 <_dtoa_r+0x82a>
 800a676:	4631      	mov	r1, r6
 800a678:	461a      	mov	r2, r3
 800a67a:	4620      	mov	r0, r4
 800a67c:	f000 ffc4 	bl	800b608 <__lshift>
 800a680:	4606      	mov	r6, r0
 800a682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a684:	2b00      	cmp	r3, #0
 800a686:	d06e      	beq.n	800a766 <_dtoa_r+0x90e>
 800a688:	ee18 0a10 	vmov	r0, s16
 800a68c:	4631      	mov	r1, r6
 800a68e:	f001 f82b 	bl	800b6e8 <__mcmp>
 800a692:	2800      	cmp	r0, #0
 800a694:	da67      	bge.n	800a766 <_dtoa_r+0x90e>
 800a696:	9b00      	ldr	r3, [sp, #0]
 800a698:	3b01      	subs	r3, #1
 800a69a:	ee18 1a10 	vmov	r1, s16
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	220a      	movs	r2, #10
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f000 fdb5 	bl	800b214 <__multadd>
 800a6aa:	9b08      	ldr	r3, [sp, #32]
 800a6ac:	ee08 0a10 	vmov	s16, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f000 81b1 	beq.w	800aa18 <_dtoa_r+0xbc0>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	4639      	mov	r1, r7
 800a6ba:	220a      	movs	r2, #10
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f000 fda9 	bl	800b214 <__multadd>
 800a6c2:	9b02      	ldr	r3, [sp, #8]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	4607      	mov	r7, r0
 800a6c8:	f300 808e 	bgt.w	800a7e8 <_dtoa_r+0x990>
 800a6cc:	9b06      	ldr	r3, [sp, #24]
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	dc51      	bgt.n	800a776 <_dtoa_r+0x91e>
 800a6d2:	e089      	b.n	800a7e8 <_dtoa_r+0x990>
 800a6d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a6da:	e74b      	b.n	800a574 <_dtoa_r+0x71c>
 800a6dc:	9b03      	ldr	r3, [sp, #12]
 800a6de:	1e5e      	subs	r6, r3, #1
 800a6e0:	9b07      	ldr	r3, [sp, #28]
 800a6e2:	42b3      	cmp	r3, r6
 800a6e4:	bfbf      	itttt	lt
 800a6e6:	9b07      	ldrlt	r3, [sp, #28]
 800a6e8:	9607      	strlt	r6, [sp, #28]
 800a6ea:	1af2      	sublt	r2, r6, r3
 800a6ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a6ee:	bfb6      	itet	lt
 800a6f0:	189b      	addlt	r3, r3, r2
 800a6f2:	1b9e      	subge	r6, r3, r6
 800a6f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a6f6:	9b03      	ldr	r3, [sp, #12]
 800a6f8:	bfb8      	it	lt
 800a6fa:	2600      	movlt	r6, #0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	bfb7      	itett	lt
 800a700:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a704:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a708:	1a9d      	sublt	r5, r3, r2
 800a70a:	2300      	movlt	r3, #0
 800a70c:	e734      	b.n	800a578 <_dtoa_r+0x720>
 800a70e:	9e07      	ldr	r6, [sp, #28]
 800a710:	9d04      	ldr	r5, [sp, #16]
 800a712:	9f08      	ldr	r7, [sp, #32]
 800a714:	e73b      	b.n	800a58e <_dtoa_r+0x736>
 800a716:	9a07      	ldr	r2, [sp, #28]
 800a718:	e767      	b.n	800a5ea <_dtoa_r+0x792>
 800a71a:	9b06      	ldr	r3, [sp, #24]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	dc18      	bgt.n	800a752 <_dtoa_r+0x8fa>
 800a720:	f1ba 0f00 	cmp.w	sl, #0
 800a724:	d115      	bne.n	800a752 <_dtoa_r+0x8fa>
 800a726:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a72a:	b993      	cbnz	r3, 800a752 <_dtoa_r+0x8fa>
 800a72c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a730:	0d1b      	lsrs	r3, r3, #20
 800a732:	051b      	lsls	r3, r3, #20
 800a734:	b183      	cbz	r3, 800a758 <_dtoa_r+0x900>
 800a736:	9b04      	ldr	r3, [sp, #16]
 800a738:	3301      	adds	r3, #1
 800a73a:	9304      	str	r3, [sp, #16]
 800a73c:	9b05      	ldr	r3, [sp, #20]
 800a73e:	3301      	adds	r3, #1
 800a740:	9305      	str	r3, [sp, #20]
 800a742:	f04f 0801 	mov.w	r8, #1
 800a746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f47f af6a 	bne.w	800a622 <_dtoa_r+0x7ca>
 800a74e:	2001      	movs	r0, #1
 800a750:	e76f      	b.n	800a632 <_dtoa_r+0x7da>
 800a752:	f04f 0800 	mov.w	r8, #0
 800a756:	e7f6      	b.n	800a746 <_dtoa_r+0x8ee>
 800a758:	4698      	mov	r8, r3
 800a75a:	e7f4      	b.n	800a746 <_dtoa_r+0x8ee>
 800a75c:	f43f af7d 	beq.w	800a65a <_dtoa_r+0x802>
 800a760:	4618      	mov	r0, r3
 800a762:	301c      	adds	r0, #28
 800a764:	e772      	b.n	800a64c <_dtoa_r+0x7f4>
 800a766:	9b03      	ldr	r3, [sp, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	dc37      	bgt.n	800a7dc <_dtoa_r+0x984>
 800a76c:	9b06      	ldr	r3, [sp, #24]
 800a76e:	2b02      	cmp	r3, #2
 800a770:	dd34      	ble.n	800a7dc <_dtoa_r+0x984>
 800a772:	9b03      	ldr	r3, [sp, #12]
 800a774:	9302      	str	r3, [sp, #8]
 800a776:	9b02      	ldr	r3, [sp, #8]
 800a778:	b96b      	cbnz	r3, 800a796 <_dtoa_r+0x93e>
 800a77a:	4631      	mov	r1, r6
 800a77c:	2205      	movs	r2, #5
 800a77e:	4620      	mov	r0, r4
 800a780:	f000 fd48 	bl	800b214 <__multadd>
 800a784:	4601      	mov	r1, r0
 800a786:	4606      	mov	r6, r0
 800a788:	ee18 0a10 	vmov	r0, s16
 800a78c:	f000 ffac 	bl	800b6e8 <__mcmp>
 800a790:	2800      	cmp	r0, #0
 800a792:	f73f adbb 	bgt.w	800a30c <_dtoa_r+0x4b4>
 800a796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a798:	9d01      	ldr	r5, [sp, #4]
 800a79a:	43db      	mvns	r3, r3
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	f04f 0800 	mov.w	r8, #0
 800a7a2:	4631      	mov	r1, r6
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f000 fd13 	bl	800b1d0 <_Bfree>
 800a7aa:	2f00      	cmp	r7, #0
 800a7ac:	f43f aea4 	beq.w	800a4f8 <_dtoa_r+0x6a0>
 800a7b0:	f1b8 0f00 	cmp.w	r8, #0
 800a7b4:	d005      	beq.n	800a7c2 <_dtoa_r+0x96a>
 800a7b6:	45b8      	cmp	r8, r7
 800a7b8:	d003      	beq.n	800a7c2 <_dtoa_r+0x96a>
 800a7ba:	4641      	mov	r1, r8
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f000 fd07 	bl	800b1d0 <_Bfree>
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f000 fd03 	bl	800b1d0 <_Bfree>
 800a7ca:	e695      	b.n	800a4f8 <_dtoa_r+0x6a0>
 800a7cc:	2600      	movs	r6, #0
 800a7ce:	4637      	mov	r7, r6
 800a7d0:	e7e1      	b.n	800a796 <_dtoa_r+0x93e>
 800a7d2:	9700      	str	r7, [sp, #0]
 800a7d4:	4637      	mov	r7, r6
 800a7d6:	e599      	b.n	800a30c <_dtoa_r+0x4b4>
 800a7d8:	40240000 	.word	0x40240000
 800a7dc:	9b08      	ldr	r3, [sp, #32]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	f000 80ca 	beq.w	800a978 <_dtoa_r+0xb20>
 800a7e4:	9b03      	ldr	r3, [sp, #12]
 800a7e6:	9302      	str	r3, [sp, #8]
 800a7e8:	2d00      	cmp	r5, #0
 800a7ea:	dd05      	ble.n	800a7f8 <_dtoa_r+0x9a0>
 800a7ec:	4639      	mov	r1, r7
 800a7ee:	462a      	mov	r2, r5
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f000 ff09 	bl	800b608 <__lshift>
 800a7f6:	4607      	mov	r7, r0
 800a7f8:	f1b8 0f00 	cmp.w	r8, #0
 800a7fc:	d05b      	beq.n	800a8b6 <_dtoa_r+0xa5e>
 800a7fe:	6879      	ldr	r1, [r7, #4]
 800a800:	4620      	mov	r0, r4
 800a802:	f000 fca5 	bl	800b150 <_Balloc>
 800a806:	4605      	mov	r5, r0
 800a808:	b928      	cbnz	r0, 800a816 <_dtoa_r+0x9be>
 800a80a:	4b87      	ldr	r3, [pc, #540]	; (800aa28 <_dtoa_r+0xbd0>)
 800a80c:	4602      	mov	r2, r0
 800a80e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a812:	f7ff bb3b 	b.w	8009e8c <_dtoa_r+0x34>
 800a816:	693a      	ldr	r2, [r7, #16]
 800a818:	3202      	adds	r2, #2
 800a81a:	0092      	lsls	r2, r2, #2
 800a81c:	f107 010c 	add.w	r1, r7, #12
 800a820:	300c      	adds	r0, #12
 800a822:	f7fd fd29 	bl	8008278 <memcpy>
 800a826:	2201      	movs	r2, #1
 800a828:	4629      	mov	r1, r5
 800a82a:	4620      	mov	r0, r4
 800a82c:	f000 feec 	bl	800b608 <__lshift>
 800a830:	9b01      	ldr	r3, [sp, #4]
 800a832:	f103 0901 	add.w	r9, r3, #1
 800a836:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a83a:	4413      	add	r3, r2
 800a83c:	9305      	str	r3, [sp, #20]
 800a83e:	f00a 0301 	and.w	r3, sl, #1
 800a842:	46b8      	mov	r8, r7
 800a844:	9304      	str	r3, [sp, #16]
 800a846:	4607      	mov	r7, r0
 800a848:	4631      	mov	r1, r6
 800a84a:	ee18 0a10 	vmov	r0, s16
 800a84e:	f7ff fa77 	bl	8009d40 <quorem>
 800a852:	4641      	mov	r1, r8
 800a854:	9002      	str	r0, [sp, #8]
 800a856:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a85a:	ee18 0a10 	vmov	r0, s16
 800a85e:	f000 ff43 	bl	800b6e8 <__mcmp>
 800a862:	463a      	mov	r2, r7
 800a864:	9003      	str	r0, [sp, #12]
 800a866:	4631      	mov	r1, r6
 800a868:	4620      	mov	r0, r4
 800a86a:	f000 ff59 	bl	800b720 <__mdiff>
 800a86e:	68c2      	ldr	r2, [r0, #12]
 800a870:	f109 3bff 	add.w	fp, r9, #4294967295
 800a874:	4605      	mov	r5, r0
 800a876:	bb02      	cbnz	r2, 800a8ba <_dtoa_r+0xa62>
 800a878:	4601      	mov	r1, r0
 800a87a:	ee18 0a10 	vmov	r0, s16
 800a87e:	f000 ff33 	bl	800b6e8 <__mcmp>
 800a882:	4602      	mov	r2, r0
 800a884:	4629      	mov	r1, r5
 800a886:	4620      	mov	r0, r4
 800a888:	9207      	str	r2, [sp, #28]
 800a88a:	f000 fca1 	bl	800b1d0 <_Bfree>
 800a88e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a892:	ea43 0102 	orr.w	r1, r3, r2
 800a896:	9b04      	ldr	r3, [sp, #16]
 800a898:	430b      	orrs	r3, r1
 800a89a:	464d      	mov	r5, r9
 800a89c:	d10f      	bne.n	800a8be <_dtoa_r+0xa66>
 800a89e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a8a2:	d02a      	beq.n	800a8fa <_dtoa_r+0xaa2>
 800a8a4:	9b03      	ldr	r3, [sp, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	dd02      	ble.n	800a8b0 <_dtoa_r+0xa58>
 800a8aa:	9b02      	ldr	r3, [sp, #8]
 800a8ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a8b0:	f88b a000 	strb.w	sl, [fp]
 800a8b4:	e775      	b.n	800a7a2 <_dtoa_r+0x94a>
 800a8b6:	4638      	mov	r0, r7
 800a8b8:	e7ba      	b.n	800a830 <_dtoa_r+0x9d8>
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	e7e2      	b.n	800a884 <_dtoa_r+0xa2c>
 800a8be:	9b03      	ldr	r3, [sp, #12]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	db04      	blt.n	800a8ce <_dtoa_r+0xa76>
 800a8c4:	9906      	ldr	r1, [sp, #24]
 800a8c6:	430b      	orrs	r3, r1
 800a8c8:	9904      	ldr	r1, [sp, #16]
 800a8ca:	430b      	orrs	r3, r1
 800a8cc:	d122      	bne.n	800a914 <_dtoa_r+0xabc>
 800a8ce:	2a00      	cmp	r2, #0
 800a8d0:	ddee      	ble.n	800a8b0 <_dtoa_r+0xa58>
 800a8d2:	ee18 1a10 	vmov	r1, s16
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f000 fe95 	bl	800b608 <__lshift>
 800a8de:	4631      	mov	r1, r6
 800a8e0:	ee08 0a10 	vmov	s16, r0
 800a8e4:	f000 ff00 	bl	800b6e8 <__mcmp>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	dc03      	bgt.n	800a8f4 <_dtoa_r+0xa9c>
 800a8ec:	d1e0      	bne.n	800a8b0 <_dtoa_r+0xa58>
 800a8ee:	f01a 0f01 	tst.w	sl, #1
 800a8f2:	d0dd      	beq.n	800a8b0 <_dtoa_r+0xa58>
 800a8f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a8f8:	d1d7      	bne.n	800a8aa <_dtoa_r+0xa52>
 800a8fa:	2339      	movs	r3, #57	; 0x39
 800a8fc:	f88b 3000 	strb.w	r3, [fp]
 800a900:	462b      	mov	r3, r5
 800a902:	461d      	mov	r5, r3
 800a904:	3b01      	subs	r3, #1
 800a906:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a90a:	2a39      	cmp	r2, #57	; 0x39
 800a90c:	d071      	beq.n	800a9f2 <_dtoa_r+0xb9a>
 800a90e:	3201      	adds	r2, #1
 800a910:	701a      	strb	r2, [r3, #0]
 800a912:	e746      	b.n	800a7a2 <_dtoa_r+0x94a>
 800a914:	2a00      	cmp	r2, #0
 800a916:	dd07      	ble.n	800a928 <_dtoa_r+0xad0>
 800a918:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a91c:	d0ed      	beq.n	800a8fa <_dtoa_r+0xaa2>
 800a91e:	f10a 0301 	add.w	r3, sl, #1
 800a922:	f88b 3000 	strb.w	r3, [fp]
 800a926:	e73c      	b.n	800a7a2 <_dtoa_r+0x94a>
 800a928:	9b05      	ldr	r3, [sp, #20]
 800a92a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a92e:	4599      	cmp	r9, r3
 800a930:	d047      	beq.n	800a9c2 <_dtoa_r+0xb6a>
 800a932:	ee18 1a10 	vmov	r1, s16
 800a936:	2300      	movs	r3, #0
 800a938:	220a      	movs	r2, #10
 800a93a:	4620      	mov	r0, r4
 800a93c:	f000 fc6a 	bl	800b214 <__multadd>
 800a940:	45b8      	cmp	r8, r7
 800a942:	ee08 0a10 	vmov	s16, r0
 800a946:	f04f 0300 	mov.w	r3, #0
 800a94a:	f04f 020a 	mov.w	r2, #10
 800a94e:	4641      	mov	r1, r8
 800a950:	4620      	mov	r0, r4
 800a952:	d106      	bne.n	800a962 <_dtoa_r+0xb0a>
 800a954:	f000 fc5e 	bl	800b214 <__multadd>
 800a958:	4680      	mov	r8, r0
 800a95a:	4607      	mov	r7, r0
 800a95c:	f109 0901 	add.w	r9, r9, #1
 800a960:	e772      	b.n	800a848 <_dtoa_r+0x9f0>
 800a962:	f000 fc57 	bl	800b214 <__multadd>
 800a966:	4639      	mov	r1, r7
 800a968:	4680      	mov	r8, r0
 800a96a:	2300      	movs	r3, #0
 800a96c:	220a      	movs	r2, #10
 800a96e:	4620      	mov	r0, r4
 800a970:	f000 fc50 	bl	800b214 <__multadd>
 800a974:	4607      	mov	r7, r0
 800a976:	e7f1      	b.n	800a95c <_dtoa_r+0xb04>
 800a978:	9b03      	ldr	r3, [sp, #12]
 800a97a:	9302      	str	r3, [sp, #8]
 800a97c:	9d01      	ldr	r5, [sp, #4]
 800a97e:	ee18 0a10 	vmov	r0, s16
 800a982:	4631      	mov	r1, r6
 800a984:	f7ff f9dc 	bl	8009d40 <quorem>
 800a988:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a98c:	9b01      	ldr	r3, [sp, #4]
 800a98e:	f805 ab01 	strb.w	sl, [r5], #1
 800a992:	1aea      	subs	r2, r5, r3
 800a994:	9b02      	ldr	r3, [sp, #8]
 800a996:	4293      	cmp	r3, r2
 800a998:	dd09      	ble.n	800a9ae <_dtoa_r+0xb56>
 800a99a:	ee18 1a10 	vmov	r1, s16
 800a99e:	2300      	movs	r3, #0
 800a9a0:	220a      	movs	r2, #10
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f000 fc36 	bl	800b214 <__multadd>
 800a9a8:	ee08 0a10 	vmov	s16, r0
 800a9ac:	e7e7      	b.n	800a97e <_dtoa_r+0xb26>
 800a9ae:	9b02      	ldr	r3, [sp, #8]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	bfc8      	it	gt
 800a9b4:	461d      	movgt	r5, r3
 800a9b6:	9b01      	ldr	r3, [sp, #4]
 800a9b8:	bfd8      	it	le
 800a9ba:	2501      	movle	r5, #1
 800a9bc:	441d      	add	r5, r3
 800a9be:	f04f 0800 	mov.w	r8, #0
 800a9c2:	ee18 1a10 	vmov	r1, s16
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f000 fe1d 	bl	800b608 <__lshift>
 800a9ce:	4631      	mov	r1, r6
 800a9d0:	ee08 0a10 	vmov	s16, r0
 800a9d4:	f000 fe88 	bl	800b6e8 <__mcmp>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	dc91      	bgt.n	800a900 <_dtoa_r+0xaa8>
 800a9dc:	d102      	bne.n	800a9e4 <_dtoa_r+0xb8c>
 800a9de:	f01a 0f01 	tst.w	sl, #1
 800a9e2:	d18d      	bne.n	800a900 <_dtoa_r+0xaa8>
 800a9e4:	462b      	mov	r3, r5
 800a9e6:	461d      	mov	r5, r3
 800a9e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9ec:	2a30      	cmp	r2, #48	; 0x30
 800a9ee:	d0fa      	beq.n	800a9e6 <_dtoa_r+0xb8e>
 800a9f0:	e6d7      	b.n	800a7a2 <_dtoa_r+0x94a>
 800a9f2:	9a01      	ldr	r2, [sp, #4]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d184      	bne.n	800a902 <_dtoa_r+0xaaa>
 800a9f8:	9b00      	ldr	r3, [sp, #0]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	2331      	movs	r3, #49	; 0x31
 800aa00:	7013      	strb	r3, [r2, #0]
 800aa02:	e6ce      	b.n	800a7a2 <_dtoa_r+0x94a>
 800aa04:	4b09      	ldr	r3, [pc, #36]	; (800aa2c <_dtoa_r+0xbd4>)
 800aa06:	f7ff ba95 	b.w	8009f34 <_dtoa_r+0xdc>
 800aa0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f47f aa6e 	bne.w	8009eee <_dtoa_r+0x96>
 800aa12:	4b07      	ldr	r3, [pc, #28]	; (800aa30 <_dtoa_r+0xbd8>)
 800aa14:	f7ff ba8e 	b.w	8009f34 <_dtoa_r+0xdc>
 800aa18:	9b02      	ldr	r3, [sp, #8]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	dcae      	bgt.n	800a97c <_dtoa_r+0xb24>
 800aa1e:	9b06      	ldr	r3, [sp, #24]
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	f73f aea8 	bgt.w	800a776 <_dtoa_r+0x91e>
 800aa26:	e7a9      	b.n	800a97c <_dtoa_r+0xb24>
 800aa28:	0800e410 	.word	0x0800e410
 800aa2c:	0800e214 	.word	0x0800e214
 800aa30:	0800e391 	.word	0x0800e391

0800aa34 <rshift>:
 800aa34:	6903      	ldr	r3, [r0, #16]
 800aa36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aa3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aa42:	f100 0414 	add.w	r4, r0, #20
 800aa46:	dd45      	ble.n	800aad4 <rshift+0xa0>
 800aa48:	f011 011f 	ands.w	r1, r1, #31
 800aa4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa54:	d10c      	bne.n	800aa70 <rshift+0x3c>
 800aa56:	f100 0710 	add.w	r7, r0, #16
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	42b1      	cmp	r1, r6
 800aa5e:	d334      	bcc.n	800aaca <rshift+0x96>
 800aa60:	1a9b      	subs	r3, r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	1eea      	subs	r2, r5, #3
 800aa66:	4296      	cmp	r6, r2
 800aa68:	bf38      	it	cc
 800aa6a:	2300      	movcc	r3, #0
 800aa6c:	4423      	add	r3, r4
 800aa6e:	e015      	b.n	800aa9c <rshift+0x68>
 800aa70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aa74:	f1c1 0820 	rsb	r8, r1, #32
 800aa78:	40cf      	lsrs	r7, r1
 800aa7a:	f105 0e04 	add.w	lr, r5, #4
 800aa7e:	46a1      	mov	r9, r4
 800aa80:	4576      	cmp	r6, lr
 800aa82:	46f4      	mov	ip, lr
 800aa84:	d815      	bhi.n	800aab2 <rshift+0x7e>
 800aa86:	1a9a      	subs	r2, r3, r2
 800aa88:	0092      	lsls	r2, r2, #2
 800aa8a:	3a04      	subs	r2, #4
 800aa8c:	3501      	adds	r5, #1
 800aa8e:	42ae      	cmp	r6, r5
 800aa90:	bf38      	it	cc
 800aa92:	2200      	movcc	r2, #0
 800aa94:	18a3      	adds	r3, r4, r2
 800aa96:	50a7      	str	r7, [r4, r2]
 800aa98:	b107      	cbz	r7, 800aa9c <rshift+0x68>
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	1b1a      	subs	r2, r3, r4
 800aa9e:	42a3      	cmp	r3, r4
 800aaa0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aaa4:	bf08      	it	eq
 800aaa6:	2300      	moveq	r3, #0
 800aaa8:	6102      	str	r2, [r0, #16]
 800aaaa:	bf08      	it	eq
 800aaac:	6143      	streq	r3, [r0, #20]
 800aaae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aab2:	f8dc c000 	ldr.w	ip, [ip]
 800aab6:	fa0c fc08 	lsl.w	ip, ip, r8
 800aaba:	ea4c 0707 	orr.w	r7, ip, r7
 800aabe:	f849 7b04 	str.w	r7, [r9], #4
 800aac2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aac6:	40cf      	lsrs	r7, r1
 800aac8:	e7da      	b.n	800aa80 <rshift+0x4c>
 800aaca:	f851 cb04 	ldr.w	ip, [r1], #4
 800aace:	f847 cf04 	str.w	ip, [r7, #4]!
 800aad2:	e7c3      	b.n	800aa5c <rshift+0x28>
 800aad4:	4623      	mov	r3, r4
 800aad6:	e7e1      	b.n	800aa9c <rshift+0x68>

0800aad8 <__hexdig_fun>:
 800aad8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aadc:	2b09      	cmp	r3, #9
 800aade:	d802      	bhi.n	800aae6 <__hexdig_fun+0xe>
 800aae0:	3820      	subs	r0, #32
 800aae2:	b2c0      	uxtb	r0, r0
 800aae4:	4770      	bx	lr
 800aae6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aaea:	2b05      	cmp	r3, #5
 800aaec:	d801      	bhi.n	800aaf2 <__hexdig_fun+0x1a>
 800aaee:	3847      	subs	r0, #71	; 0x47
 800aaf0:	e7f7      	b.n	800aae2 <__hexdig_fun+0xa>
 800aaf2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aaf6:	2b05      	cmp	r3, #5
 800aaf8:	d801      	bhi.n	800aafe <__hexdig_fun+0x26>
 800aafa:	3827      	subs	r0, #39	; 0x27
 800aafc:	e7f1      	b.n	800aae2 <__hexdig_fun+0xa>
 800aafe:	2000      	movs	r0, #0
 800ab00:	4770      	bx	lr
	...

0800ab04 <__gethex>:
 800ab04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab08:	ed2d 8b02 	vpush	{d8}
 800ab0c:	b089      	sub	sp, #36	; 0x24
 800ab0e:	ee08 0a10 	vmov	s16, r0
 800ab12:	9304      	str	r3, [sp, #16]
 800ab14:	4bb4      	ldr	r3, [pc, #720]	; (800ade8 <__gethex+0x2e4>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	9301      	str	r3, [sp, #4]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	468b      	mov	fp, r1
 800ab1e:	4690      	mov	r8, r2
 800ab20:	f7f5 fb5e 	bl	80001e0 <strlen>
 800ab24:	9b01      	ldr	r3, [sp, #4]
 800ab26:	f8db 2000 	ldr.w	r2, [fp]
 800ab2a:	4403      	add	r3, r0
 800ab2c:	4682      	mov	sl, r0
 800ab2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ab32:	9305      	str	r3, [sp, #20]
 800ab34:	1c93      	adds	r3, r2, #2
 800ab36:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ab3a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ab3e:	32fe      	adds	r2, #254	; 0xfe
 800ab40:	18d1      	adds	r1, r2, r3
 800ab42:	461f      	mov	r7, r3
 800ab44:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab48:	9100      	str	r1, [sp, #0]
 800ab4a:	2830      	cmp	r0, #48	; 0x30
 800ab4c:	d0f8      	beq.n	800ab40 <__gethex+0x3c>
 800ab4e:	f7ff ffc3 	bl	800aad8 <__hexdig_fun>
 800ab52:	4604      	mov	r4, r0
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d13a      	bne.n	800abce <__gethex+0xca>
 800ab58:	9901      	ldr	r1, [sp, #4]
 800ab5a:	4652      	mov	r2, sl
 800ab5c:	4638      	mov	r0, r7
 800ab5e:	f001 fa23 	bl	800bfa8 <strncmp>
 800ab62:	4605      	mov	r5, r0
 800ab64:	2800      	cmp	r0, #0
 800ab66:	d168      	bne.n	800ac3a <__gethex+0x136>
 800ab68:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ab6c:	eb07 060a 	add.w	r6, r7, sl
 800ab70:	f7ff ffb2 	bl	800aad8 <__hexdig_fun>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d062      	beq.n	800ac3e <__gethex+0x13a>
 800ab78:	4633      	mov	r3, r6
 800ab7a:	7818      	ldrb	r0, [r3, #0]
 800ab7c:	2830      	cmp	r0, #48	; 0x30
 800ab7e:	461f      	mov	r7, r3
 800ab80:	f103 0301 	add.w	r3, r3, #1
 800ab84:	d0f9      	beq.n	800ab7a <__gethex+0x76>
 800ab86:	f7ff ffa7 	bl	800aad8 <__hexdig_fun>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	fab0 f480 	clz	r4, r0
 800ab90:	0964      	lsrs	r4, r4, #5
 800ab92:	4635      	mov	r5, r6
 800ab94:	9300      	str	r3, [sp, #0]
 800ab96:	463a      	mov	r2, r7
 800ab98:	4616      	mov	r6, r2
 800ab9a:	3201      	adds	r2, #1
 800ab9c:	7830      	ldrb	r0, [r6, #0]
 800ab9e:	f7ff ff9b 	bl	800aad8 <__hexdig_fun>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d1f8      	bne.n	800ab98 <__gethex+0x94>
 800aba6:	9901      	ldr	r1, [sp, #4]
 800aba8:	4652      	mov	r2, sl
 800abaa:	4630      	mov	r0, r6
 800abac:	f001 f9fc 	bl	800bfa8 <strncmp>
 800abb0:	b980      	cbnz	r0, 800abd4 <__gethex+0xd0>
 800abb2:	b94d      	cbnz	r5, 800abc8 <__gethex+0xc4>
 800abb4:	eb06 050a 	add.w	r5, r6, sl
 800abb8:	462a      	mov	r2, r5
 800abba:	4616      	mov	r6, r2
 800abbc:	3201      	adds	r2, #1
 800abbe:	7830      	ldrb	r0, [r6, #0]
 800abc0:	f7ff ff8a 	bl	800aad8 <__hexdig_fun>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d1f8      	bne.n	800abba <__gethex+0xb6>
 800abc8:	1bad      	subs	r5, r5, r6
 800abca:	00ad      	lsls	r5, r5, #2
 800abcc:	e004      	b.n	800abd8 <__gethex+0xd4>
 800abce:	2400      	movs	r4, #0
 800abd0:	4625      	mov	r5, r4
 800abd2:	e7e0      	b.n	800ab96 <__gethex+0x92>
 800abd4:	2d00      	cmp	r5, #0
 800abd6:	d1f7      	bne.n	800abc8 <__gethex+0xc4>
 800abd8:	7833      	ldrb	r3, [r6, #0]
 800abda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800abde:	2b50      	cmp	r3, #80	; 0x50
 800abe0:	d13b      	bne.n	800ac5a <__gethex+0x156>
 800abe2:	7873      	ldrb	r3, [r6, #1]
 800abe4:	2b2b      	cmp	r3, #43	; 0x2b
 800abe6:	d02c      	beq.n	800ac42 <__gethex+0x13e>
 800abe8:	2b2d      	cmp	r3, #45	; 0x2d
 800abea:	d02e      	beq.n	800ac4a <__gethex+0x146>
 800abec:	1c71      	adds	r1, r6, #1
 800abee:	f04f 0900 	mov.w	r9, #0
 800abf2:	7808      	ldrb	r0, [r1, #0]
 800abf4:	f7ff ff70 	bl	800aad8 <__hexdig_fun>
 800abf8:	1e43      	subs	r3, r0, #1
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b18      	cmp	r3, #24
 800abfe:	d82c      	bhi.n	800ac5a <__gethex+0x156>
 800ac00:	f1a0 0210 	sub.w	r2, r0, #16
 800ac04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac08:	f7ff ff66 	bl	800aad8 <__hexdig_fun>
 800ac0c:	1e43      	subs	r3, r0, #1
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	2b18      	cmp	r3, #24
 800ac12:	d91d      	bls.n	800ac50 <__gethex+0x14c>
 800ac14:	f1b9 0f00 	cmp.w	r9, #0
 800ac18:	d000      	beq.n	800ac1c <__gethex+0x118>
 800ac1a:	4252      	negs	r2, r2
 800ac1c:	4415      	add	r5, r2
 800ac1e:	f8cb 1000 	str.w	r1, [fp]
 800ac22:	b1e4      	cbz	r4, 800ac5e <__gethex+0x15a>
 800ac24:	9b00      	ldr	r3, [sp, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	bf14      	ite	ne
 800ac2a:	2700      	movne	r7, #0
 800ac2c:	2706      	moveq	r7, #6
 800ac2e:	4638      	mov	r0, r7
 800ac30:	b009      	add	sp, #36	; 0x24
 800ac32:	ecbd 8b02 	vpop	{d8}
 800ac36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3a:	463e      	mov	r6, r7
 800ac3c:	4625      	mov	r5, r4
 800ac3e:	2401      	movs	r4, #1
 800ac40:	e7ca      	b.n	800abd8 <__gethex+0xd4>
 800ac42:	f04f 0900 	mov.w	r9, #0
 800ac46:	1cb1      	adds	r1, r6, #2
 800ac48:	e7d3      	b.n	800abf2 <__gethex+0xee>
 800ac4a:	f04f 0901 	mov.w	r9, #1
 800ac4e:	e7fa      	b.n	800ac46 <__gethex+0x142>
 800ac50:	230a      	movs	r3, #10
 800ac52:	fb03 0202 	mla	r2, r3, r2, r0
 800ac56:	3a10      	subs	r2, #16
 800ac58:	e7d4      	b.n	800ac04 <__gethex+0x100>
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	e7df      	b.n	800ac1e <__gethex+0x11a>
 800ac5e:	1bf3      	subs	r3, r6, r7
 800ac60:	3b01      	subs	r3, #1
 800ac62:	4621      	mov	r1, r4
 800ac64:	2b07      	cmp	r3, #7
 800ac66:	dc0b      	bgt.n	800ac80 <__gethex+0x17c>
 800ac68:	ee18 0a10 	vmov	r0, s16
 800ac6c:	f000 fa70 	bl	800b150 <_Balloc>
 800ac70:	4604      	mov	r4, r0
 800ac72:	b940      	cbnz	r0, 800ac86 <__gethex+0x182>
 800ac74:	4b5d      	ldr	r3, [pc, #372]	; (800adec <__gethex+0x2e8>)
 800ac76:	4602      	mov	r2, r0
 800ac78:	21de      	movs	r1, #222	; 0xde
 800ac7a:	485d      	ldr	r0, [pc, #372]	; (800adf0 <__gethex+0x2ec>)
 800ac7c:	f001 f9b6 	bl	800bfec <__assert_func>
 800ac80:	3101      	adds	r1, #1
 800ac82:	105b      	asrs	r3, r3, #1
 800ac84:	e7ee      	b.n	800ac64 <__gethex+0x160>
 800ac86:	f100 0914 	add.w	r9, r0, #20
 800ac8a:	f04f 0b00 	mov.w	fp, #0
 800ac8e:	f1ca 0301 	rsb	r3, sl, #1
 800ac92:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac96:	f8cd b000 	str.w	fp, [sp]
 800ac9a:	9306      	str	r3, [sp, #24]
 800ac9c:	42b7      	cmp	r7, r6
 800ac9e:	d340      	bcc.n	800ad22 <__gethex+0x21e>
 800aca0:	9802      	ldr	r0, [sp, #8]
 800aca2:	9b00      	ldr	r3, [sp, #0]
 800aca4:	f840 3b04 	str.w	r3, [r0], #4
 800aca8:	eba0 0009 	sub.w	r0, r0, r9
 800acac:	1080      	asrs	r0, r0, #2
 800acae:	0146      	lsls	r6, r0, #5
 800acb0:	6120      	str	r0, [r4, #16]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 fb3e 	bl	800b334 <__hi0bits>
 800acb8:	1a30      	subs	r0, r6, r0
 800acba:	f8d8 6000 	ldr.w	r6, [r8]
 800acbe:	42b0      	cmp	r0, r6
 800acc0:	dd63      	ble.n	800ad8a <__gethex+0x286>
 800acc2:	1b87      	subs	r7, r0, r6
 800acc4:	4639      	mov	r1, r7
 800acc6:	4620      	mov	r0, r4
 800acc8:	f000 fee2 	bl	800ba90 <__any_on>
 800accc:	4682      	mov	sl, r0
 800acce:	b1a8      	cbz	r0, 800acfc <__gethex+0x1f8>
 800acd0:	1e7b      	subs	r3, r7, #1
 800acd2:	1159      	asrs	r1, r3, #5
 800acd4:	f003 021f 	and.w	r2, r3, #31
 800acd8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800acdc:	f04f 0a01 	mov.w	sl, #1
 800ace0:	fa0a f202 	lsl.w	r2, sl, r2
 800ace4:	420a      	tst	r2, r1
 800ace6:	d009      	beq.n	800acfc <__gethex+0x1f8>
 800ace8:	4553      	cmp	r3, sl
 800acea:	dd05      	ble.n	800acf8 <__gethex+0x1f4>
 800acec:	1eb9      	subs	r1, r7, #2
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 fece 	bl	800ba90 <__any_on>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d145      	bne.n	800ad84 <__gethex+0x280>
 800acf8:	f04f 0a02 	mov.w	sl, #2
 800acfc:	4639      	mov	r1, r7
 800acfe:	4620      	mov	r0, r4
 800ad00:	f7ff fe98 	bl	800aa34 <rshift>
 800ad04:	443d      	add	r5, r7
 800ad06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad0a:	42ab      	cmp	r3, r5
 800ad0c:	da4c      	bge.n	800ada8 <__gethex+0x2a4>
 800ad0e:	ee18 0a10 	vmov	r0, s16
 800ad12:	4621      	mov	r1, r4
 800ad14:	f000 fa5c 	bl	800b1d0 <_Bfree>
 800ad18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	6013      	str	r3, [r2, #0]
 800ad1e:	27a3      	movs	r7, #163	; 0xa3
 800ad20:	e785      	b.n	800ac2e <__gethex+0x12a>
 800ad22:	1e73      	subs	r3, r6, #1
 800ad24:	9a05      	ldr	r2, [sp, #20]
 800ad26:	9303      	str	r3, [sp, #12]
 800ad28:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d019      	beq.n	800ad64 <__gethex+0x260>
 800ad30:	f1bb 0f20 	cmp.w	fp, #32
 800ad34:	d107      	bne.n	800ad46 <__gethex+0x242>
 800ad36:	9b02      	ldr	r3, [sp, #8]
 800ad38:	9a00      	ldr	r2, [sp, #0]
 800ad3a:	f843 2b04 	str.w	r2, [r3], #4
 800ad3e:	9302      	str	r3, [sp, #8]
 800ad40:	2300      	movs	r3, #0
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	469b      	mov	fp, r3
 800ad46:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ad4a:	f7ff fec5 	bl	800aad8 <__hexdig_fun>
 800ad4e:	9b00      	ldr	r3, [sp, #0]
 800ad50:	f000 000f 	and.w	r0, r0, #15
 800ad54:	fa00 f00b 	lsl.w	r0, r0, fp
 800ad58:	4303      	orrs	r3, r0
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	f10b 0b04 	add.w	fp, fp, #4
 800ad60:	9b03      	ldr	r3, [sp, #12]
 800ad62:	e00d      	b.n	800ad80 <__gethex+0x27c>
 800ad64:	9b03      	ldr	r3, [sp, #12]
 800ad66:	9a06      	ldr	r2, [sp, #24]
 800ad68:	4413      	add	r3, r2
 800ad6a:	42bb      	cmp	r3, r7
 800ad6c:	d3e0      	bcc.n	800ad30 <__gethex+0x22c>
 800ad6e:	4618      	mov	r0, r3
 800ad70:	9901      	ldr	r1, [sp, #4]
 800ad72:	9307      	str	r3, [sp, #28]
 800ad74:	4652      	mov	r2, sl
 800ad76:	f001 f917 	bl	800bfa8 <strncmp>
 800ad7a:	9b07      	ldr	r3, [sp, #28]
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	d1d7      	bne.n	800ad30 <__gethex+0x22c>
 800ad80:	461e      	mov	r6, r3
 800ad82:	e78b      	b.n	800ac9c <__gethex+0x198>
 800ad84:	f04f 0a03 	mov.w	sl, #3
 800ad88:	e7b8      	b.n	800acfc <__gethex+0x1f8>
 800ad8a:	da0a      	bge.n	800ada2 <__gethex+0x29e>
 800ad8c:	1a37      	subs	r7, r6, r0
 800ad8e:	4621      	mov	r1, r4
 800ad90:	ee18 0a10 	vmov	r0, s16
 800ad94:	463a      	mov	r2, r7
 800ad96:	f000 fc37 	bl	800b608 <__lshift>
 800ad9a:	1bed      	subs	r5, r5, r7
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	f100 0914 	add.w	r9, r0, #20
 800ada2:	f04f 0a00 	mov.w	sl, #0
 800ada6:	e7ae      	b.n	800ad06 <__gethex+0x202>
 800ada8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800adac:	42a8      	cmp	r0, r5
 800adae:	dd72      	ble.n	800ae96 <__gethex+0x392>
 800adb0:	1b45      	subs	r5, r0, r5
 800adb2:	42ae      	cmp	r6, r5
 800adb4:	dc36      	bgt.n	800ae24 <__gethex+0x320>
 800adb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d02a      	beq.n	800ae14 <__gethex+0x310>
 800adbe:	2b03      	cmp	r3, #3
 800adc0:	d02c      	beq.n	800ae1c <__gethex+0x318>
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d11c      	bne.n	800ae00 <__gethex+0x2fc>
 800adc6:	42ae      	cmp	r6, r5
 800adc8:	d11a      	bne.n	800ae00 <__gethex+0x2fc>
 800adca:	2e01      	cmp	r6, #1
 800adcc:	d112      	bne.n	800adf4 <__gethex+0x2f0>
 800adce:	9a04      	ldr	r2, [sp, #16]
 800add0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800add4:	6013      	str	r3, [r2, #0]
 800add6:	2301      	movs	r3, #1
 800add8:	6123      	str	r3, [r4, #16]
 800adda:	f8c9 3000 	str.w	r3, [r9]
 800adde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ade0:	2762      	movs	r7, #98	; 0x62
 800ade2:	601c      	str	r4, [r3, #0]
 800ade4:	e723      	b.n	800ac2e <__gethex+0x12a>
 800ade6:	bf00      	nop
 800ade8:	0800e488 	.word	0x0800e488
 800adec:	0800e410 	.word	0x0800e410
 800adf0:	0800e421 	.word	0x0800e421
 800adf4:	1e71      	subs	r1, r6, #1
 800adf6:	4620      	mov	r0, r4
 800adf8:	f000 fe4a 	bl	800ba90 <__any_on>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d1e6      	bne.n	800adce <__gethex+0x2ca>
 800ae00:	ee18 0a10 	vmov	r0, s16
 800ae04:	4621      	mov	r1, r4
 800ae06:	f000 f9e3 	bl	800b1d0 <_Bfree>
 800ae0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	2750      	movs	r7, #80	; 0x50
 800ae12:	e70c      	b.n	800ac2e <__gethex+0x12a>
 800ae14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d1f2      	bne.n	800ae00 <__gethex+0x2fc>
 800ae1a:	e7d8      	b.n	800adce <__gethex+0x2ca>
 800ae1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1d5      	bne.n	800adce <__gethex+0x2ca>
 800ae22:	e7ed      	b.n	800ae00 <__gethex+0x2fc>
 800ae24:	1e6f      	subs	r7, r5, #1
 800ae26:	f1ba 0f00 	cmp.w	sl, #0
 800ae2a:	d131      	bne.n	800ae90 <__gethex+0x38c>
 800ae2c:	b127      	cbz	r7, 800ae38 <__gethex+0x334>
 800ae2e:	4639      	mov	r1, r7
 800ae30:	4620      	mov	r0, r4
 800ae32:	f000 fe2d 	bl	800ba90 <__any_on>
 800ae36:	4682      	mov	sl, r0
 800ae38:	117b      	asrs	r3, r7, #5
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ae40:	f007 071f 	and.w	r7, r7, #31
 800ae44:	fa01 f707 	lsl.w	r7, r1, r7
 800ae48:	421f      	tst	r7, r3
 800ae4a:	4629      	mov	r1, r5
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	bf18      	it	ne
 800ae50:	f04a 0a02 	orrne.w	sl, sl, #2
 800ae54:	1b76      	subs	r6, r6, r5
 800ae56:	f7ff fded 	bl	800aa34 <rshift>
 800ae5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ae5e:	2702      	movs	r7, #2
 800ae60:	f1ba 0f00 	cmp.w	sl, #0
 800ae64:	d048      	beq.n	800aef8 <__gethex+0x3f4>
 800ae66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d015      	beq.n	800ae9a <__gethex+0x396>
 800ae6e:	2b03      	cmp	r3, #3
 800ae70:	d017      	beq.n	800aea2 <__gethex+0x39e>
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d109      	bne.n	800ae8a <__gethex+0x386>
 800ae76:	f01a 0f02 	tst.w	sl, #2
 800ae7a:	d006      	beq.n	800ae8a <__gethex+0x386>
 800ae7c:	f8d9 0000 	ldr.w	r0, [r9]
 800ae80:	ea4a 0a00 	orr.w	sl, sl, r0
 800ae84:	f01a 0f01 	tst.w	sl, #1
 800ae88:	d10e      	bne.n	800aea8 <__gethex+0x3a4>
 800ae8a:	f047 0710 	orr.w	r7, r7, #16
 800ae8e:	e033      	b.n	800aef8 <__gethex+0x3f4>
 800ae90:	f04f 0a01 	mov.w	sl, #1
 800ae94:	e7d0      	b.n	800ae38 <__gethex+0x334>
 800ae96:	2701      	movs	r7, #1
 800ae98:	e7e2      	b.n	800ae60 <__gethex+0x35c>
 800ae9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae9c:	f1c3 0301 	rsb	r3, r3, #1
 800aea0:	9315      	str	r3, [sp, #84]	; 0x54
 800aea2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d0f0      	beq.n	800ae8a <__gethex+0x386>
 800aea8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aeac:	f104 0314 	add.w	r3, r4, #20
 800aeb0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aeb4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aeb8:	f04f 0c00 	mov.w	ip, #0
 800aebc:	4618      	mov	r0, r3
 800aebe:	f853 2b04 	ldr.w	r2, [r3], #4
 800aec2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aec6:	d01c      	beq.n	800af02 <__gethex+0x3fe>
 800aec8:	3201      	adds	r2, #1
 800aeca:	6002      	str	r2, [r0, #0]
 800aecc:	2f02      	cmp	r7, #2
 800aece:	f104 0314 	add.w	r3, r4, #20
 800aed2:	d13f      	bne.n	800af54 <__gethex+0x450>
 800aed4:	f8d8 2000 	ldr.w	r2, [r8]
 800aed8:	3a01      	subs	r2, #1
 800aeda:	42b2      	cmp	r2, r6
 800aedc:	d10a      	bne.n	800aef4 <__gethex+0x3f0>
 800aede:	1171      	asrs	r1, r6, #5
 800aee0:	2201      	movs	r2, #1
 800aee2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aee6:	f006 061f 	and.w	r6, r6, #31
 800aeea:	fa02 f606 	lsl.w	r6, r2, r6
 800aeee:	421e      	tst	r6, r3
 800aef0:	bf18      	it	ne
 800aef2:	4617      	movne	r7, r2
 800aef4:	f047 0720 	orr.w	r7, r7, #32
 800aef8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aefa:	601c      	str	r4, [r3, #0]
 800aefc:	9b04      	ldr	r3, [sp, #16]
 800aefe:	601d      	str	r5, [r3, #0]
 800af00:	e695      	b.n	800ac2e <__gethex+0x12a>
 800af02:	4299      	cmp	r1, r3
 800af04:	f843 cc04 	str.w	ip, [r3, #-4]
 800af08:	d8d8      	bhi.n	800aebc <__gethex+0x3b8>
 800af0a:	68a3      	ldr	r3, [r4, #8]
 800af0c:	459b      	cmp	fp, r3
 800af0e:	db19      	blt.n	800af44 <__gethex+0x440>
 800af10:	6861      	ldr	r1, [r4, #4]
 800af12:	ee18 0a10 	vmov	r0, s16
 800af16:	3101      	adds	r1, #1
 800af18:	f000 f91a 	bl	800b150 <_Balloc>
 800af1c:	4681      	mov	r9, r0
 800af1e:	b918      	cbnz	r0, 800af28 <__gethex+0x424>
 800af20:	4b1a      	ldr	r3, [pc, #104]	; (800af8c <__gethex+0x488>)
 800af22:	4602      	mov	r2, r0
 800af24:	2184      	movs	r1, #132	; 0x84
 800af26:	e6a8      	b.n	800ac7a <__gethex+0x176>
 800af28:	6922      	ldr	r2, [r4, #16]
 800af2a:	3202      	adds	r2, #2
 800af2c:	f104 010c 	add.w	r1, r4, #12
 800af30:	0092      	lsls	r2, r2, #2
 800af32:	300c      	adds	r0, #12
 800af34:	f7fd f9a0 	bl	8008278 <memcpy>
 800af38:	4621      	mov	r1, r4
 800af3a:	ee18 0a10 	vmov	r0, s16
 800af3e:	f000 f947 	bl	800b1d0 <_Bfree>
 800af42:	464c      	mov	r4, r9
 800af44:	6923      	ldr	r3, [r4, #16]
 800af46:	1c5a      	adds	r2, r3, #1
 800af48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af4c:	6122      	str	r2, [r4, #16]
 800af4e:	2201      	movs	r2, #1
 800af50:	615a      	str	r2, [r3, #20]
 800af52:	e7bb      	b.n	800aecc <__gethex+0x3c8>
 800af54:	6922      	ldr	r2, [r4, #16]
 800af56:	455a      	cmp	r2, fp
 800af58:	dd0b      	ble.n	800af72 <__gethex+0x46e>
 800af5a:	2101      	movs	r1, #1
 800af5c:	4620      	mov	r0, r4
 800af5e:	f7ff fd69 	bl	800aa34 <rshift>
 800af62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af66:	3501      	adds	r5, #1
 800af68:	42ab      	cmp	r3, r5
 800af6a:	f6ff aed0 	blt.w	800ad0e <__gethex+0x20a>
 800af6e:	2701      	movs	r7, #1
 800af70:	e7c0      	b.n	800aef4 <__gethex+0x3f0>
 800af72:	f016 061f 	ands.w	r6, r6, #31
 800af76:	d0fa      	beq.n	800af6e <__gethex+0x46a>
 800af78:	4453      	add	r3, sl
 800af7a:	f1c6 0620 	rsb	r6, r6, #32
 800af7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800af82:	f000 f9d7 	bl	800b334 <__hi0bits>
 800af86:	42b0      	cmp	r0, r6
 800af88:	dbe7      	blt.n	800af5a <__gethex+0x456>
 800af8a:	e7f0      	b.n	800af6e <__gethex+0x46a>
 800af8c:	0800e410 	.word	0x0800e410

0800af90 <L_shift>:
 800af90:	f1c2 0208 	rsb	r2, r2, #8
 800af94:	0092      	lsls	r2, r2, #2
 800af96:	b570      	push	{r4, r5, r6, lr}
 800af98:	f1c2 0620 	rsb	r6, r2, #32
 800af9c:	6843      	ldr	r3, [r0, #4]
 800af9e:	6804      	ldr	r4, [r0, #0]
 800afa0:	fa03 f506 	lsl.w	r5, r3, r6
 800afa4:	432c      	orrs	r4, r5
 800afa6:	40d3      	lsrs	r3, r2
 800afa8:	6004      	str	r4, [r0, #0]
 800afaa:	f840 3f04 	str.w	r3, [r0, #4]!
 800afae:	4288      	cmp	r0, r1
 800afb0:	d3f4      	bcc.n	800af9c <L_shift+0xc>
 800afb2:	bd70      	pop	{r4, r5, r6, pc}

0800afb4 <__match>:
 800afb4:	b530      	push	{r4, r5, lr}
 800afb6:	6803      	ldr	r3, [r0, #0]
 800afb8:	3301      	adds	r3, #1
 800afba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afbe:	b914      	cbnz	r4, 800afc6 <__match+0x12>
 800afc0:	6003      	str	r3, [r0, #0]
 800afc2:	2001      	movs	r0, #1
 800afc4:	bd30      	pop	{r4, r5, pc}
 800afc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800afce:	2d19      	cmp	r5, #25
 800afd0:	bf98      	it	ls
 800afd2:	3220      	addls	r2, #32
 800afd4:	42a2      	cmp	r2, r4
 800afd6:	d0f0      	beq.n	800afba <__match+0x6>
 800afd8:	2000      	movs	r0, #0
 800afda:	e7f3      	b.n	800afc4 <__match+0x10>

0800afdc <__hexnan>:
 800afdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe0:	680b      	ldr	r3, [r1, #0]
 800afe2:	115e      	asrs	r6, r3, #5
 800afe4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800afe8:	f013 031f 	ands.w	r3, r3, #31
 800afec:	b087      	sub	sp, #28
 800afee:	bf18      	it	ne
 800aff0:	3604      	addne	r6, #4
 800aff2:	2500      	movs	r5, #0
 800aff4:	1f37      	subs	r7, r6, #4
 800aff6:	4690      	mov	r8, r2
 800aff8:	6802      	ldr	r2, [r0, #0]
 800affa:	9301      	str	r3, [sp, #4]
 800affc:	4682      	mov	sl, r0
 800affe:	f846 5c04 	str.w	r5, [r6, #-4]
 800b002:	46b9      	mov	r9, r7
 800b004:	463c      	mov	r4, r7
 800b006:	9502      	str	r5, [sp, #8]
 800b008:	46ab      	mov	fp, r5
 800b00a:	7851      	ldrb	r1, [r2, #1]
 800b00c:	1c53      	adds	r3, r2, #1
 800b00e:	9303      	str	r3, [sp, #12]
 800b010:	b341      	cbz	r1, 800b064 <__hexnan+0x88>
 800b012:	4608      	mov	r0, r1
 800b014:	9205      	str	r2, [sp, #20]
 800b016:	9104      	str	r1, [sp, #16]
 800b018:	f7ff fd5e 	bl	800aad8 <__hexdig_fun>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d14f      	bne.n	800b0c0 <__hexnan+0xe4>
 800b020:	9904      	ldr	r1, [sp, #16]
 800b022:	9a05      	ldr	r2, [sp, #20]
 800b024:	2920      	cmp	r1, #32
 800b026:	d818      	bhi.n	800b05a <__hexnan+0x7e>
 800b028:	9b02      	ldr	r3, [sp, #8]
 800b02a:	459b      	cmp	fp, r3
 800b02c:	dd13      	ble.n	800b056 <__hexnan+0x7a>
 800b02e:	454c      	cmp	r4, r9
 800b030:	d206      	bcs.n	800b040 <__hexnan+0x64>
 800b032:	2d07      	cmp	r5, #7
 800b034:	dc04      	bgt.n	800b040 <__hexnan+0x64>
 800b036:	462a      	mov	r2, r5
 800b038:	4649      	mov	r1, r9
 800b03a:	4620      	mov	r0, r4
 800b03c:	f7ff ffa8 	bl	800af90 <L_shift>
 800b040:	4544      	cmp	r4, r8
 800b042:	d950      	bls.n	800b0e6 <__hexnan+0x10a>
 800b044:	2300      	movs	r3, #0
 800b046:	f1a4 0904 	sub.w	r9, r4, #4
 800b04a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b04e:	f8cd b008 	str.w	fp, [sp, #8]
 800b052:	464c      	mov	r4, r9
 800b054:	461d      	mov	r5, r3
 800b056:	9a03      	ldr	r2, [sp, #12]
 800b058:	e7d7      	b.n	800b00a <__hexnan+0x2e>
 800b05a:	2929      	cmp	r1, #41	; 0x29
 800b05c:	d156      	bne.n	800b10c <__hexnan+0x130>
 800b05e:	3202      	adds	r2, #2
 800b060:	f8ca 2000 	str.w	r2, [sl]
 800b064:	f1bb 0f00 	cmp.w	fp, #0
 800b068:	d050      	beq.n	800b10c <__hexnan+0x130>
 800b06a:	454c      	cmp	r4, r9
 800b06c:	d206      	bcs.n	800b07c <__hexnan+0xa0>
 800b06e:	2d07      	cmp	r5, #7
 800b070:	dc04      	bgt.n	800b07c <__hexnan+0xa0>
 800b072:	462a      	mov	r2, r5
 800b074:	4649      	mov	r1, r9
 800b076:	4620      	mov	r0, r4
 800b078:	f7ff ff8a 	bl	800af90 <L_shift>
 800b07c:	4544      	cmp	r4, r8
 800b07e:	d934      	bls.n	800b0ea <__hexnan+0x10e>
 800b080:	f1a8 0204 	sub.w	r2, r8, #4
 800b084:	4623      	mov	r3, r4
 800b086:	f853 1b04 	ldr.w	r1, [r3], #4
 800b08a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b08e:	429f      	cmp	r7, r3
 800b090:	d2f9      	bcs.n	800b086 <__hexnan+0xaa>
 800b092:	1b3b      	subs	r3, r7, r4
 800b094:	f023 0303 	bic.w	r3, r3, #3
 800b098:	3304      	adds	r3, #4
 800b09a:	3401      	adds	r4, #1
 800b09c:	3e03      	subs	r6, #3
 800b09e:	42b4      	cmp	r4, r6
 800b0a0:	bf88      	it	hi
 800b0a2:	2304      	movhi	r3, #4
 800b0a4:	4443      	add	r3, r8
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f843 2b04 	str.w	r2, [r3], #4
 800b0ac:	429f      	cmp	r7, r3
 800b0ae:	d2fb      	bcs.n	800b0a8 <__hexnan+0xcc>
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	b91b      	cbnz	r3, 800b0bc <__hexnan+0xe0>
 800b0b4:	4547      	cmp	r7, r8
 800b0b6:	d127      	bne.n	800b108 <__hexnan+0x12c>
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	603b      	str	r3, [r7, #0]
 800b0bc:	2005      	movs	r0, #5
 800b0be:	e026      	b.n	800b10e <__hexnan+0x132>
 800b0c0:	3501      	adds	r5, #1
 800b0c2:	2d08      	cmp	r5, #8
 800b0c4:	f10b 0b01 	add.w	fp, fp, #1
 800b0c8:	dd06      	ble.n	800b0d8 <__hexnan+0xfc>
 800b0ca:	4544      	cmp	r4, r8
 800b0cc:	d9c3      	bls.n	800b056 <__hexnan+0x7a>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0d4:	2501      	movs	r5, #1
 800b0d6:	3c04      	subs	r4, #4
 800b0d8:	6822      	ldr	r2, [r4, #0]
 800b0da:	f000 000f 	and.w	r0, r0, #15
 800b0de:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b0e2:	6022      	str	r2, [r4, #0]
 800b0e4:	e7b7      	b.n	800b056 <__hexnan+0x7a>
 800b0e6:	2508      	movs	r5, #8
 800b0e8:	e7b5      	b.n	800b056 <__hexnan+0x7a>
 800b0ea:	9b01      	ldr	r3, [sp, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d0df      	beq.n	800b0b0 <__hexnan+0xd4>
 800b0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f4:	f1c3 0320 	rsb	r3, r3, #32
 800b0f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b100:	401a      	ands	r2, r3
 800b102:	f846 2c04 	str.w	r2, [r6, #-4]
 800b106:	e7d3      	b.n	800b0b0 <__hexnan+0xd4>
 800b108:	3f04      	subs	r7, #4
 800b10a:	e7d1      	b.n	800b0b0 <__hexnan+0xd4>
 800b10c:	2004      	movs	r0, #4
 800b10e:	b007      	add	sp, #28
 800b110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b114 <_localeconv_r>:
 800b114:	4800      	ldr	r0, [pc, #0]	; (800b118 <_localeconv_r+0x4>)
 800b116:	4770      	bx	lr
 800b118:	20000364 	.word	0x20000364

0800b11c <malloc>:
 800b11c:	4b02      	ldr	r3, [pc, #8]	; (800b128 <malloc+0xc>)
 800b11e:	4601      	mov	r1, r0
 800b120:	6818      	ldr	r0, [r3, #0]
 800b122:	f000 bd59 	b.w	800bbd8 <_malloc_r>
 800b126:	bf00      	nop
 800b128:	2000020c 	.word	0x2000020c

0800b12c <__ascii_mbtowc>:
 800b12c:	b082      	sub	sp, #8
 800b12e:	b901      	cbnz	r1, 800b132 <__ascii_mbtowc+0x6>
 800b130:	a901      	add	r1, sp, #4
 800b132:	b142      	cbz	r2, 800b146 <__ascii_mbtowc+0x1a>
 800b134:	b14b      	cbz	r3, 800b14a <__ascii_mbtowc+0x1e>
 800b136:	7813      	ldrb	r3, [r2, #0]
 800b138:	600b      	str	r3, [r1, #0]
 800b13a:	7812      	ldrb	r2, [r2, #0]
 800b13c:	1e10      	subs	r0, r2, #0
 800b13e:	bf18      	it	ne
 800b140:	2001      	movne	r0, #1
 800b142:	b002      	add	sp, #8
 800b144:	4770      	bx	lr
 800b146:	4610      	mov	r0, r2
 800b148:	e7fb      	b.n	800b142 <__ascii_mbtowc+0x16>
 800b14a:	f06f 0001 	mvn.w	r0, #1
 800b14e:	e7f8      	b.n	800b142 <__ascii_mbtowc+0x16>

0800b150 <_Balloc>:
 800b150:	b570      	push	{r4, r5, r6, lr}
 800b152:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b154:	4604      	mov	r4, r0
 800b156:	460d      	mov	r5, r1
 800b158:	b976      	cbnz	r6, 800b178 <_Balloc+0x28>
 800b15a:	2010      	movs	r0, #16
 800b15c:	f7ff ffde 	bl	800b11c <malloc>
 800b160:	4602      	mov	r2, r0
 800b162:	6260      	str	r0, [r4, #36]	; 0x24
 800b164:	b920      	cbnz	r0, 800b170 <_Balloc+0x20>
 800b166:	4b18      	ldr	r3, [pc, #96]	; (800b1c8 <_Balloc+0x78>)
 800b168:	4818      	ldr	r0, [pc, #96]	; (800b1cc <_Balloc+0x7c>)
 800b16a:	2166      	movs	r1, #102	; 0x66
 800b16c:	f000 ff3e 	bl	800bfec <__assert_func>
 800b170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b174:	6006      	str	r6, [r0, #0]
 800b176:	60c6      	str	r6, [r0, #12]
 800b178:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b17a:	68f3      	ldr	r3, [r6, #12]
 800b17c:	b183      	cbz	r3, 800b1a0 <_Balloc+0x50>
 800b17e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b186:	b9b8      	cbnz	r0, 800b1b8 <_Balloc+0x68>
 800b188:	2101      	movs	r1, #1
 800b18a:	fa01 f605 	lsl.w	r6, r1, r5
 800b18e:	1d72      	adds	r2, r6, #5
 800b190:	0092      	lsls	r2, r2, #2
 800b192:	4620      	mov	r0, r4
 800b194:	f000 fc9d 	bl	800bad2 <_calloc_r>
 800b198:	b160      	cbz	r0, 800b1b4 <_Balloc+0x64>
 800b19a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b19e:	e00e      	b.n	800b1be <_Balloc+0x6e>
 800b1a0:	2221      	movs	r2, #33	; 0x21
 800b1a2:	2104      	movs	r1, #4
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f000 fc94 	bl	800bad2 <_calloc_r>
 800b1aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1ac:	60f0      	str	r0, [r6, #12]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1e4      	bne.n	800b17e <_Balloc+0x2e>
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	bd70      	pop	{r4, r5, r6, pc}
 800b1b8:	6802      	ldr	r2, [r0, #0]
 800b1ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1be:	2300      	movs	r3, #0
 800b1c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1c4:	e7f7      	b.n	800b1b6 <_Balloc+0x66>
 800b1c6:	bf00      	nop
 800b1c8:	0800e39e 	.word	0x0800e39e
 800b1cc:	0800e49c 	.word	0x0800e49c

0800b1d0 <_Bfree>:
 800b1d0:	b570      	push	{r4, r5, r6, lr}
 800b1d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1d4:	4605      	mov	r5, r0
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	b976      	cbnz	r6, 800b1f8 <_Bfree+0x28>
 800b1da:	2010      	movs	r0, #16
 800b1dc:	f7ff ff9e 	bl	800b11c <malloc>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	6268      	str	r0, [r5, #36]	; 0x24
 800b1e4:	b920      	cbnz	r0, 800b1f0 <_Bfree+0x20>
 800b1e6:	4b09      	ldr	r3, [pc, #36]	; (800b20c <_Bfree+0x3c>)
 800b1e8:	4809      	ldr	r0, [pc, #36]	; (800b210 <_Bfree+0x40>)
 800b1ea:	218a      	movs	r1, #138	; 0x8a
 800b1ec:	f000 fefe 	bl	800bfec <__assert_func>
 800b1f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1f4:	6006      	str	r6, [r0, #0]
 800b1f6:	60c6      	str	r6, [r0, #12]
 800b1f8:	b13c      	cbz	r4, 800b20a <_Bfree+0x3a>
 800b1fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1fc:	6862      	ldr	r2, [r4, #4]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b204:	6021      	str	r1, [r4, #0]
 800b206:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b20a:	bd70      	pop	{r4, r5, r6, pc}
 800b20c:	0800e39e 	.word	0x0800e39e
 800b210:	0800e49c 	.word	0x0800e49c

0800b214 <__multadd>:
 800b214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b218:	690d      	ldr	r5, [r1, #16]
 800b21a:	4607      	mov	r7, r0
 800b21c:	460c      	mov	r4, r1
 800b21e:	461e      	mov	r6, r3
 800b220:	f101 0c14 	add.w	ip, r1, #20
 800b224:	2000      	movs	r0, #0
 800b226:	f8dc 3000 	ldr.w	r3, [ip]
 800b22a:	b299      	uxth	r1, r3
 800b22c:	fb02 6101 	mla	r1, r2, r1, r6
 800b230:	0c1e      	lsrs	r6, r3, #16
 800b232:	0c0b      	lsrs	r3, r1, #16
 800b234:	fb02 3306 	mla	r3, r2, r6, r3
 800b238:	b289      	uxth	r1, r1
 800b23a:	3001      	adds	r0, #1
 800b23c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b240:	4285      	cmp	r5, r0
 800b242:	f84c 1b04 	str.w	r1, [ip], #4
 800b246:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b24a:	dcec      	bgt.n	800b226 <__multadd+0x12>
 800b24c:	b30e      	cbz	r6, 800b292 <__multadd+0x7e>
 800b24e:	68a3      	ldr	r3, [r4, #8]
 800b250:	42ab      	cmp	r3, r5
 800b252:	dc19      	bgt.n	800b288 <__multadd+0x74>
 800b254:	6861      	ldr	r1, [r4, #4]
 800b256:	4638      	mov	r0, r7
 800b258:	3101      	adds	r1, #1
 800b25a:	f7ff ff79 	bl	800b150 <_Balloc>
 800b25e:	4680      	mov	r8, r0
 800b260:	b928      	cbnz	r0, 800b26e <__multadd+0x5a>
 800b262:	4602      	mov	r2, r0
 800b264:	4b0c      	ldr	r3, [pc, #48]	; (800b298 <__multadd+0x84>)
 800b266:	480d      	ldr	r0, [pc, #52]	; (800b29c <__multadd+0x88>)
 800b268:	21b5      	movs	r1, #181	; 0xb5
 800b26a:	f000 febf 	bl	800bfec <__assert_func>
 800b26e:	6922      	ldr	r2, [r4, #16]
 800b270:	3202      	adds	r2, #2
 800b272:	f104 010c 	add.w	r1, r4, #12
 800b276:	0092      	lsls	r2, r2, #2
 800b278:	300c      	adds	r0, #12
 800b27a:	f7fc fffd 	bl	8008278 <memcpy>
 800b27e:	4621      	mov	r1, r4
 800b280:	4638      	mov	r0, r7
 800b282:	f7ff ffa5 	bl	800b1d0 <_Bfree>
 800b286:	4644      	mov	r4, r8
 800b288:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b28c:	3501      	adds	r5, #1
 800b28e:	615e      	str	r6, [r3, #20]
 800b290:	6125      	str	r5, [r4, #16]
 800b292:	4620      	mov	r0, r4
 800b294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b298:	0800e410 	.word	0x0800e410
 800b29c:	0800e49c 	.word	0x0800e49c

0800b2a0 <__s2b>:
 800b2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2a4:	460c      	mov	r4, r1
 800b2a6:	4615      	mov	r5, r2
 800b2a8:	461f      	mov	r7, r3
 800b2aa:	2209      	movs	r2, #9
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	4606      	mov	r6, r0
 800b2b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	db09      	blt.n	800b2d0 <__s2b+0x30>
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f7ff ff47 	bl	800b150 <_Balloc>
 800b2c2:	b940      	cbnz	r0, 800b2d6 <__s2b+0x36>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	4b19      	ldr	r3, [pc, #100]	; (800b32c <__s2b+0x8c>)
 800b2c8:	4819      	ldr	r0, [pc, #100]	; (800b330 <__s2b+0x90>)
 800b2ca:	21ce      	movs	r1, #206	; 0xce
 800b2cc:	f000 fe8e 	bl	800bfec <__assert_func>
 800b2d0:	0052      	lsls	r2, r2, #1
 800b2d2:	3101      	adds	r1, #1
 800b2d4:	e7f0      	b.n	800b2b8 <__s2b+0x18>
 800b2d6:	9b08      	ldr	r3, [sp, #32]
 800b2d8:	6143      	str	r3, [r0, #20]
 800b2da:	2d09      	cmp	r5, #9
 800b2dc:	f04f 0301 	mov.w	r3, #1
 800b2e0:	6103      	str	r3, [r0, #16]
 800b2e2:	dd16      	ble.n	800b312 <__s2b+0x72>
 800b2e4:	f104 0909 	add.w	r9, r4, #9
 800b2e8:	46c8      	mov	r8, r9
 800b2ea:	442c      	add	r4, r5
 800b2ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b2f0:	4601      	mov	r1, r0
 800b2f2:	3b30      	subs	r3, #48	; 0x30
 800b2f4:	220a      	movs	r2, #10
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f7ff ff8c 	bl	800b214 <__multadd>
 800b2fc:	45a0      	cmp	r8, r4
 800b2fe:	d1f5      	bne.n	800b2ec <__s2b+0x4c>
 800b300:	f1a5 0408 	sub.w	r4, r5, #8
 800b304:	444c      	add	r4, r9
 800b306:	1b2d      	subs	r5, r5, r4
 800b308:	1963      	adds	r3, r4, r5
 800b30a:	42bb      	cmp	r3, r7
 800b30c:	db04      	blt.n	800b318 <__s2b+0x78>
 800b30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b312:	340a      	adds	r4, #10
 800b314:	2509      	movs	r5, #9
 800b316:	e7f6      	b.n	800b306 <__s2b+0x66>
 800b318:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b31c:	4601      	mov	r1, r0
 800b31e:	3b30      	subs	r3, #48	; 0x30
 800b320:	220a      	movs	r2, #10
 800b322:	4630      	mov	r0, r6
 800b324:	f7ff ff76 	bl	800b214 <__multadd>
 800b328:	e7ee      	b.n	800b308 <__s2b+0x68>
 800b32a:	bf00      	nop
 800b32c:	0800e410 	.word	0x0800e410
 800b330:	0800e49c 	.word	0x0800e49c

0800b334 <__hi0bits>:
 800b334:	0c03      	lsrs	r3, r0, #16
 800b336:	041b      	lsls	r3, r3, #16
 800b338:	b9d3      	cbnz	r3, 800b370 <__hi0bits+0x3c>
 800b33a:	0400      	lsls	r0, r0, #16
 800b33c:	2310      	movs	r3, #16
 800b33e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b342:	bf04      	itt	eq
 800b344:	0200      	lsleq	r0, r0, #8
 800b346:	3308      	addeq	r3, #8
 800b348:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b34c:	bf04      	itt	eq
 800b34e:	0100      	lsleq	r0, r0, #4
 800b350:	3304      	addeq	r3, #4
 800b352:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b356:	bf04      	itt	eq
 800b358:	0080      	lsleq	r0, r0, #2
 800b35a:	3302      	addeq	r3, #2
 800b35c:	2800      	cmp	r0, #0
 800b35e:	db05      	blt.n	800b36c <__hi0bits+0x38>
 800b360:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b364:	f103 0301 	add.w	r3, r3, #1
 800b368:	bf08      	it	eq
 800b36a:	2320      	moveq	r3, #32
 800b36c:	4618      	mov	r0, r3
 800b36e:	4770      	bx	lr
 800b370:	2300      	movs	r3, #0
 800b372:	e7e4      	b.n	800b33e <__hi0bits+0xa>

0800b374 <__lo0bits>:
 800b374:	6803      	ldr	r3, [r0, #0]
 800b376:	f013 0207 	ands.w	r2, r3, #7
 800b37a:	4601      	mov	r1, r0
 800b37c:	d00b      	beq.n	800b396 <__lo0bits+0x22>
 800b37e:	07da      	lsls	r2, r3, #31
 800b380:	d423      	bmi.n	800b3ca <__lo0bits+0x56>
 800b382:	0798      	lsls	r0, r3, #30
 800b384:	bf49      	itett	mi
 800b386:	085b      	lsrmi	r3, r3, #1
 800b388:	089b      	lsrpl	r3, r3, #2
 800b38a:	2001      	movmi	r0, #1
 800b38c:	600b      	strmi	r3, [r1, #0]
 800b38e:	bf5c      	itt	pl
 800b390:	600b      	strpl	r3, [r1, #0]
 800b392:	2002      	movpl	r0, #2
 800b394:	4770      	bx	lr
 800b396:	b298      	uxth	r0, r3
 800b398:	b9a8      	cbnz	r0, 800b3c6 <__lo0bits+0x52>
 800b39a:	0c1b      	lsrs	r3, r3, #16
 800b39c:	2010      	movs	r0, #16
 800b39e:	b2da      	uxtb	r2, r3
 800b3a0:	b90a      	cbnz	r2, 800b3a6 <__lo0bits+0x32>
 800b3a2:	3008      	adds	r0, #8
 800b3a4:	0a1b      	lsrs	r3, r3, #8
 800b3a6:	071a      	lsls	r2, r3, #28
 800b3a8:	bf04      	itt	eq
 800b3aa:	091b      	lsreq	r3, r3, #4
 800b3ac:	3004      	addeq	r0, #4
 800b3ae:	079a      	lsls	r2, r3, #30
 800b3b0:	bf04      	itt	eq
 800b3b2:	089b      	lsreq	r3, r3, #2
 800b3b4:	3002      	addeq	r0, #2
 800b3b6:	07da      	lsls	r2, r3, #31
 800b3b8:	d403      	bmi.n	800b3c2 <__lo0bits+0x4e>
 800b3ba:	085b      	lsrs	r3, r3, #1
 800b3bc:	f100 0001 	add.w	r0, r0, #1
 800b3c0:	d005      	beq.n	800b3ce <__lo0bits+0x5a>
 800b3c2:	600b      	str	r3, [r1, #0]
 800b3c4:	4770      	bx	lr
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	e7e9      	b.n	800b39e <__lo0bits+0x2a>
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	4770      	bx	lr
 800b3ce:	2020      	movs	r0, #32
 800b3d0:	4770      	bx	lr
	...

0800b3d4 <__i2b>:
 800b3d4:	b510      	push	{r4, lr}
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	2101      	movs	r1, #1
 800b3da:	f7ff feb9 	bl	800b150 <_Balloc>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	b928      	cbnz	r0, 800b3ee <__i2b+0x1a>
 800b3e2:	4b05      	ldr	r3, [pc, #20]	; (800b3f8 <__i2b+0x24>)
 800b3e4:	4805      	ldr	r0, [pc, #20]	; (800b3fc <__i2b+0x28>)
 800b3e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b3ea:	f000 fdff 	bl	800bfec <__assert_func>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	6144      	str	r4, [r0, #20]
 800b3f2:	6103      	str	r3, [r0, #16]
 800b3f4:	bd10      	pop	{r4, pc}
 800b3f6:	bf00      	nop
 800b3f8:	0800e410 	.word	0x0800e410
 800b3fc:	0800e49c 	.word	0x0800e49c

0800b400 <__multiply>:
 800b400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b404:	4691      	mov	r9, r2
 800b406:	690a      	ldr	r2, [r1, #16]
 800b408:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	bfb8      	it	lt
 800b410:	460b      	movlt	r3, r1
 800b412:	460c      	mov	r4, r1
 800b414:	bfbc      	itt	lt
 800b416:	464c      	movlt	r4, r9
 800b418:	4699      	movlt	r9, r3
 800b41a:	6927      	ldr	r7, [r4, #16]
 800b41c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b420:	68a3      	ldr	r3, [r4, #8]
 800b422:	6861      	ldr	r1, [r4, #4]
 800b424:	eb07 060a 	add.w	r6, r7, sl
 800b428:	42b3      	cmp	r3, r6
 800b42a:	b085      	sub	sp, #20
 800b42c:	bfb8      	it	lt
 800b42e:	3101      	addlt	r1, #1
 800b430:	f7ff fe8e 	bl	800b150 <_Balloc>
 800b434:	b930      	cbnz	r0, 800b444 <__multiply+0x44>
 800b436:	4602      	mov	r2, r0
 800b438:	4b44      	ldr	r3, [pc, #272]	; (800b54c <__multiply+0x14c>)
 800b43a:	4845      	ldr	r0, [pc, #276]	; (800b550 <__multiply+0x150>)
 800b43c:	f240 115d 	movw	r1, #349	; 0x15d
 800b440:	f000 fdd4 	bl	800bfec <__assert_func>
 800b444:	f100 0514 	add.w	r5, r0, #20
 800b448:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b44c:	462b      	mov	r3, r5
 800b44e:	2200      	movs	r2, #0
 800b450:	4543      	cmp	r3, r8
 800b452:	d321      	bcc.n	800b498 <__multiply+0x98>
 800b454:	f104 0314 	add.w	r3, r4, #20
 800b458:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b45c:	f109 0314 	add.w	r3, r9, #20
 800b460:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b464:	9202      	str	r2, [sp, #8]
 800b466:	1b3a      	subs	r2, r7, r4
 800b468:	3a15      	subs	r2, #21
 800b46a:	f022 0203 	bic.w	r2, r2, #3
 800b46e:	3204      	adds	r2, #4
 800b470:	f104 0115 	add.w	r1, r4, #21
 800b474:	428f      	cmp	r7, r1
 800b476:	bf38      	it	cc
 800b478:	2204      	movcc	r2, #4
 800b47a:	9201      	str	r2, [sp, #4]
 800b47c:	9a02      	ldr	r2, [sp, #8]
 800b47e:	9303      	str	r3, [sp, #12]
 800b480:	429a      	cmp	r2, r3
 800b482:	d80c      	bhi.n	800b49e <__multiply+0x9e>
 800b484:	2e00      	cmp	r6, #0
 800b486:	dd03      	ble.n	800b490 <__multiply+0x90>
 800b488:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d05a      	beq.n	800b546 <__multiply+0x146>
 800b490:	6106      	str	r6, [r0, #16]
 800b492:	b005      	add	sp, #20
 800b494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b498:	f843 2b04 	str.w	r2, [r3], #4
 800b49c:	e7d8      	b.n	800b450 <__multiply+0x50>
 800b49e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b4a2:	f1ba 0f00 	cmp.w	sl, #0
 800b4a6:	d024      	beq.n	800b4f2 <__multiply+0xf2>
 800b4a8:	f104 0e14 	add.w	lr, r4, #20
 800b4ac:	46a9      	mov	r9, r5
 800b4ae:	f04f 0c00 	mov.w	ip, #0
 800b4b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b4b6:	f8d9 1000 	ldr.w	r1, [r9]
 800b4ba:	fa1f fb82 	uxth.w	fp, r2
 800b4be:	b289      	uxth	r1, r1
 800b4c0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b4c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b4c8:	f8d9 2000 	ldr.w	r2, [r9]
 800b4cc:	4461      	add	r1, ip
 800b4ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4d2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b4d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4da:	b289      	uxth	r1, r1
 800b4dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4e0:	4577      	cmp	r7, lr
 800b4e2:	f849 1b04 	str.w	r1, [r9], #4
 800b4e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4ea:	d8e2      	bhi.n	800b4b2 <__multiply+0xb2>
 800b4ec:	9a01      	ldr	r2, [sp, #4]
 800b4ee:	f845 c002 	str.w	ip, [r5, r2]
 800b4f2:	9a03      	ldr	r2, [sp, #12]
 800b4f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4f8:	3304      	adds	r3, #4
 800b4fa:	f1b9 0f00 	cmp.w	r9, #0
 800b4fe:	d020      	beq.n	800b542 <__multiply+0x142>
 800b500:	6829      	ldr	r1, [r5, #0]
 800b502:	f104 0c14 	add.w	ip, r4, #20
 800b506:	46ae      	mov	lr, r5
 800b508:	f04f 0a00 	mov.w	sl, #0
 800b50c:	f8bc b000 	ldrh.w	fp, [ip]
 800b510:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b514:	fb09 220b 	mla	r2, r9, fp, r2
 800b518:	4492      	add	sl, r2
 800b51a:	b289      	uxth	r1, r1
 800b51c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b520:	f84e 1b04 	str.w	r1, [lr], #4
 800b524:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b528:	f8be 1000 	ldrh.w	r1, [lr]
 800b52c:	0c12      	lsrs	r2, r2, #16
 800b52e:	fb09 1102 	mla	r1, r9, r2, r1
 800b532:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b536:	4567      	cmp	r7, ip
 800b538:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b53c:	d8e6      	bhi.n	800b50c <__multiply+0x10c>
 800b53e:	9a01      	ldr	r2, [sp, #4]
 800b540:	50a9      	str	r1, [r5, r2]
 800b542:	3504      	adds	r5, #4
 800b544:	e79a      	b.n	800b47c <__multiply+0x7c>
 800b546:	3e01      	subs	r6, #1
 800b548:	e79c      	b.n	800b484 <__multiply+0x84>
 800b54a:	bf00      	nop
 800b54c:	0800e410 	.word	0x0800e410
 800b550:	0800e49c 	.word	0x0800e49c

0800b554 <__pow5mult>:
 800b554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b558:	4615      	mov	r5, r2
 800b55a:	f012 0203 	ands.w	r2, r2, #3
 800b55e:	4606      	mov	r6, r0
 800b560:	460f      	mov	r7, r1
 800b562:	d007      	beq.n	800b574 <__pow5mult+0x20>
 800b564:	4c25      	ldr	r4, [pc, #148]	; (800b5fc <__pow5mult+0xa8>)
 800b566:	3a01      	subs	r2, #1
 800b568:	2300      	movs	r3, #0
 800b56a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b56e:	f7ff fe51 	bl	800b214 <__multadd>
 800b572:	4607      	mov	r7, r0
 800b574:	10ad      	asrs	r5, r5, #2
 800b576:	d03d      	beq.n	800b5f4 <__pow5mult+0xa0>
 800b578:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b57a:	b97c      	cbnz	r4, 800b59c <__pow5mult+0x48>
 800b57c:	2010      	movs	r0, #16
 800b57e:	f7ff fdcd 	bl	800b11c <malloc>
 800b582:	4602      	mov	r2, r0
 800b584:	6270      	str	r0, [r6, #36]	; 0x24
 800b586:	b928      	cbnz	r0, 800b594 <__pow5mult+0x40>
 800b588:	4b1d      	ldr	r3, [pc, #116]	; (800b600 <__pow5mult+0xac>)
 800b58a:	481e      	ldr	r0, [pc, #120]	; (800b604 <__pow5mult+0xb0>)
 800b58c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b590:	f000 fd2c 	bl	800bfec <__assert_func>
 800b594:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b598:	6004      	str	r4, [r0, #0]
 800b59a:	60c4      	str	r4, [r0, #12]
 800b59c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5a4:	b94c      	cbnz	r4, 800b5ba <__pow5mult+0x66>
 800b5a6:	f240 2171 	movw	r1, #625	; 0x271
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	f7ff ff12 	bl	800b3d4 <__i2b>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	6003      	str	r3, [r0, #0]
 800b5ba:	f04f 0900 	mov.w	r9, #0
 800b5be:	07eb      	lsls	r3, r5, #31
 800b5c0:	d50a      	bpl.n	800b5d8 <__pow5mult+0x84>
 800b5c2:	4639      	mov	r1, r7
 800b5c4:	4622      	mov	r2, r4
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	f7ff ff1a 	bl	800b400 <__multiply>
 800b5cc:	4639      	mov	r1, r7
 800b5ce:	4680      	mov	r8, r0
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	f7ff fdfd 	bl	800b1d0 <_Bfree>
 800b5d6:	4647      	mov	r7, r8
 800b5d8:	106d      	asrs	r5, r5, #1
 800b5da:	d00b      	beq.n	800b5f4 <__pow5mult+0xa0>
 800b5dc:	6820      	ldr	r0, [r4, #0]
 800b5de:	b938      	cbnz	r0, 800b5f0 <__pow5mult+0x9c>
 800b5e0:	4622      	mov	r2, r4
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	f7ff ff0b 	bl	800b400 <__multiply>
 800b5ea:	6020      	str	r0, [r4, #0]
 800b5ec:	f8c0 9000 	str.w	r9, [r0]
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	e7e4      	b.n	800b5be <__pow5mult+0x6a>
 800b5f4:	4638      	mov	r0, r7
 800b5f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5fa:	bf00      	nop
 800b5fc:	0800e5e8 	.word	0x0800e5e8
 800b600:	0800e39e 	.word	0x0800e39e
 800b604:	0800e49c 	.word	0x0800e49c

0800b608 <__lshift>:
 800b608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b60c:	460c      	mov	r4, r1
 800b60e:	6849      	ldr	r1, [r1, #4]
 800b610:	6923      	ldr	r3, [r4, #16]
 800b612:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b616:	68a3      	ldr	r3, [r4, #8]
 800b618:	4607      	mov	r7, r0
 800b61a:	4691      	mov	r9, r2
 800b61c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b620:	f108 0601 	add.w	r6, r8, #1
 800b624:	42b3      	cmp	r3, r6
 800b626:	db0b      	blt.n	800b640 <__lshift+0x38>
 800b628:	4638      	mov	r0, r7
 800b62a:	f7ff fd91 	bl	800b150 <_Balloc>
 800b62e:	4605      	mov	r5, r0
 800b630:	b948      	cbnz	r0, 800b646 <__lshift+0x3e>
 800b632:	4602      	mov	r2, r0
 800b634:	4b2a      	ldr	r3, [pc, #168]	; (800b6e0 <__lshift+0xd8>)
 800b636:	482b      	ldr	r0, [pc, #172]	; (800b6e4 <__lshift+0xdc>)
 800b638:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b63c:	f000 fcd6 	bl	800bfec <__assert_func>
 800b640:	3101      	adds	r1, #1
 800b642:	005b      	lsls	r3, r3, #1
 800b644:	e7ee      	b.n	800b624 <__lshift+0x1c>
 800b646:	2300      	movs	r3, #0
 800b648:	f100 0114 	add.w	r1, r0, #20
 800b64c:	f100 0210 	add.w	r2, r0, #16
 800b650:	4618      	mov	r0, r3
 800b652:	4553      	cmp	r3, sl
 800b654:	db37      	blt.n	800b6c6 <__lshift+0xbe>
 800b656:	6920      	ldr	r0, [r4, #16]
 800b658:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b65c:	f104 0314 	add.w	r3, r4, #20
 800b660:	f019 091f 	ands.w	r9, r9, #31
 800b664:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b668:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b66c:	d02f      	beq.n	800b6ce <__lshift+0xc6>
 800b66e:	f1c9 0e20 	rsb	lr, r9, #32
 800b672:	468a      	mov	sl, r1
 800b674:	f04f 0c00 	mov.w	ip, #0
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	fa02 f209 	lsl.w	r2, r2, r9
 800b67e:	ea42 020c 	orr.w	r2, r2, ip
 800b682:	f84a 2b04 	str.w	r2, [sl], #4
 800b686:	f853 2b04 	ldr.w	r2, [r3], #4
 800b68a:	4298      	cmp	r0, r3
 800b68c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b690:	d8f2      	bhi.n	800b678 <__lshift+0x70>
 800b692:	1b03      	subs	r3, r0, r4
 800b694:	3b15      	subs	r3, #21
 800b696:	f023 0303 	bic.w	r3, r3, #3
 800b69a:	3304      	adds	r3, #4
 800b69c:	f104 0215 	add.w	r2, r4, #21
 800b6a0:	4290      	cmp	r0, r2
 800b6a2:	bf38      	it	cc
 800b6a4:	2304      	movcc	r3, #4
 800b6a6:	f841 c003 	str.w	ip, [r1, r3]
 800b6aa:	f1bc 0f00 	cmp.w	ip, #0
 800b6ae:	d001      	beq.n	800b6b4 <__lshift+0xac>
 800b6b0:	f108 0602 	add.w	r6, r8, #2
 800b6b4:	3e01      	subs	r6, #1
 800b6b6:	4638      	mov	r0, r7
 800b6b8:	612e      	str	r6, [r5, #16]
 800b6ba:	4621      	mov	r1, r4
 800b6bc:	f7ff fd88 	bl	800b1d0 <_Bfree>
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	e7c1      	b.n	800b652 <__lshift+0x4a>
 800b6ce:	3904      	subs	r1, #4
 800b6d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6d8:	4298      	cmp	r0, r3
 800b6da:	d8f9      	bhi.n	800b6d0 <__lshift+0xc8>
 800b6dc:	e7ea      	b.n	800b6b4 <__lshift+0xac>
 800b6de:	bf00      	nop
 800b6e0:	0800e410 	.word	0x0800e410
 800b6e4:	0800e49c 	.word	0x0800e49c

0800b6e8 <__mcmp>:
 800b6e8:	b530      	push	{r4, r5, lr}
 800b6ea:	6902      	ldr	r2, [r0, #16]
 800b6ec:	690c      	ldr	r4, [r1, #16]
 800b6ee:	1b12      	subs	r2, r2, r4
 800b6f0:	d10e      	bne.n	800b710 <__mcmp+0x28>
 800b6f2:	f100 0314 	add.w	r3, r0, #20
 800b6f6:	3114      	adds	r1, #20
 800b6f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b6fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b700:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b704:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b708:	42a5      	cmp	r5, r4
 800b70a:	d003      	beq.n	800b714 <__mcmp+0x2c>
 800b70c:	d305      	bcc.n	800b71a <__mcmp+0x32>
 800b70e:	2201      	movs	r2, #1
 800b710:	4610      	mov	r0, r2
 800b712:	bd30      	pop	{r4, r5, pc}
 800b714:	4283      	cmp	r3, r0
 800b716:	d3f3      	bcc.n	800b700 <__mcmp+0x18>
 800b718:	e7fa      	b.n	800b710 <__mcmp+0x28>
 800b71a:	f04f 32ff 	mov.w	r2, #4294967295
 800b71e:	e7f7      	b.n	800b710 <__mcmp+0x28>

0800b720 <__mdiff>:
 800b720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b724:	460c      	mov	r4, r1
 800b726:	4606      	mov	r6, r0
 800b728:	4611      	mov	r1, r2
 800b72a:	4620      	mov	r0, r4
 800b72c:	4690      	mov	r8, r2
 800b72e:	f7ff ffdb 	bl	800b6e8 <__mcmp>
 800b732:	1e05      	subs	r5, r0, #0
 800b734:	d110      	bne.n	800b758 <__mdiff+0x38>
 800b736:	4629      	mov	r1, r5
 800b738:	4630      	mov	r0, r6
 800b73a:	f7ff fd09 	bl	800b150 <_Balloc>
 800b73e:	b930      	cbnz	r0, 800b74e <__mdiff+0x2e>
 800b740:	4b3a      	ldr	r3, [pc, #232]	; (800b82c <__mdiff+0x10c>)
 800b742:	4602      	mov	r2, r0
 800b744:	f240 2132 	movw	r1, #562	; 0x232
 800b748:	4839      	ldr	r0, [pc, #228]	; (800b830 <__mdiff+0x110>)
 800b74a:	f000 fc4f 	bl	800bfec <__assert_func>
 800b74e:	2301      	movs	r3, #1
 800b750:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b754:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b758:	bfa4      	itt	ge
 800b75a:	4643      	movge	r3, r8
 800b75c:	46a0      	movge	r8, r4
 800b75e:	4630      	mov	r0, r6
 800b760:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b764:	bfa6      	itte	ge
 800b766:	461c      	movge	r4, r3
 800b768:	2500      	movge	r5, #0
 800b76a:	2501      	movlt	r5, #1
 800b76c:	f7ff fcf0 	bl	800b150 <_Balloc>
 800b770:	b920      	cbnz	r0, 800b77c <__mdiff+0x5c>
 800b772:	4b2e      	ldr	r3, [pc, #184]	; (800b82c <__mdiff+0x10c>)
 800b774:	4602      	mov	r2, r0
 800b776:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b77a:	e7e5      	b.n	800b748 <__mdiff+0x28>
 800b77c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b780:	6926      	ldr	r6, [r4, #16]
 800b782:	60c5      	str	r5, [r0, #12]
 800b784:	f104 0914 	add.w	r9, r4, #20
 800b788:	f108 0514 	add.w	r5, r8, #20
 800b78c:	f100 0e14 	add.w	lr, r0, #20
 800b790:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b794:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b798:	f108 0210 	add.w	r2, r8, #16
 800b79c:	46f2      	mov	sl, lr
 800b79e:	2100      	movs	r1, #0
 800b7a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b7a8:	fa1f f883 	uxth.w	r8, r3
 800b7ac:	fa11 f18b 	uxtah	r1, r1, fp
 800b7b0:	0c1b      	lsrs	r3, r3, #16
 800b7b2:	eba1 0808 	sub.w	r8, r1, r8
 800b7b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b7ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b7be:	fa1f f888 	uxth.w	r8, r8
 800b7c2:	1419      	asrs	r1, r3, #16
 800b7c4:	454e      	cmp	r6, r9
 800b7c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b7ca:	f84a 3b04 	str.w	r3, [sl], #4
 800b7ce:	d8e7      	bhi.n	800b7a0 <__mdiff+0x80>
 800b7d0:	1b33      	subs	r3, r6, r4
 800b7d2:	3b15      	subs	r3, #21
 800b7d4:	f023 0303 	bic.w	r3, r3, #3
 800b7d8:	3304      	adds	r3, #4
 800b7da:	3415      	adds	r4, #21
 800b7dc:	42a6      	cmp	r6, r4
 800b7de:	bf38      	it	cc
 800b7e0:	2304      	movcc	r3, #4
 800b7e2:	441d      	add	r5, r3
 800b7e4:	4473      	add	r3, lr
 800b7e6:	469e      	mov	lr, r3
 800b7e8:	462e      	mov	r6, r5
 800b7ea:	4566      	cmp	r6, ip
 800b7ec:	d30e      	bcc.n	800b80c <__mdiff+0xec>
 800b7ee:	f10c 0203 	add.w	r2, ip, #3
 800b7f2:	1b52      	subs	r2, r2, r5
 800b7f4:	f022 0203 	bic.w	r2, r2, #3
 800b7f8:	3d03      	subs	r5, #3
 800b7fa:	45ac      	cmp	ip, r5
 800b7fc:	bf38      	it	cc
 800b7fe:	2200      	movcc	r2, #0
 800b800:	441a      	add	r2, r3
 800b802:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b806:	b17b      	cbz	r3, 800b828 <__mdiff+0x108>
 800b808:	6107      	str	r7, [r0, #16]
 800b80a:	e7a3      	b.n	800b754 <__mdiff+0x34>
 800b80c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b810:	fa11 f288 	uxtah	r2, r1, r8
 800b814:	1414      	asrs	r4, r2, #16
 800b816:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b81a:	b292      	uxth	r2, r2
 800b81c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b820:	f84e 2b04 	str.w	r2, [lr], #4
 800b824:	1421      	asrs	r1, r4, #16
 800b826:	e7e0      	b.n	800b7ea <__mdiff+0xca>
 800b828:	3f01      	subs	r7, #1
 800b82a:	e7ea      	b.n	800b802 <__mdiff+0xe2>
 800b82c:	0800e410 	.word	0x0800e410
 800b830:	0800e49c 	.word	0x0800e49c

0800b834 <__ulp>:
 800b834:	b082      	sub	sp, #8
 800b836:	ed8d 0b00 	vstr	d0, [sp]
 800b83a:	9b01      	ldr	r3, [sp, #4]
 800b83c:	4912      	ldr	r1, [pc, #72]	; (800b888 <__ulp+0x54>)
 800b83e:	4019      	ands	r1, r3
 800b840:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b844:	2900      	cmp	r1, #0
 800b846:	dd05      	ble.n	800b854 <__ulp+0x20>
 800b848:	2200      	movs	r2, #0
 800b84a:	460b      	mov	r3, r1
 800b84c:	ec43 2b10 	vmov	d0, r2, r3
 800b850:	b002      	add	sp, #8
 800b852:	4770      	bx	lr
 800b854:	4249      	negs	r1, r1
 800b856:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b85a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b85e:	f04f 0200 	mov.w	r2, #0
 800b862:	f04f 0300 	mov.w	r3, #0
 800b866:	da04      	bge.n	800b872 <__ulp+0x3e>
 800b868:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b86c:	fa41 f300 	asr.w	r3, r1, r0
 800b870:	e7ec      	b.n	800b84c <__ulp+0x18>
 800b872:	f1a0 0114 	sub.w	r1, r0, #20
 800b876:	291e      	cmp	r1, #30
 800b878:	bfda      	itte	le
 800b87a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b87e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b882:	2101      	movgt	r1, #1
 800b884:	460a      	mov	r2, r1
 800b886:	e7e1      	b.n	800b84c <__ulp+0x18>
 800b888:	7ff00000 	.word	0x7ff00000

0800b88c <__b2d>:
 800b88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88e:	6905      	ldr	r5, [r0, #16]
 800b890:	f100 0714 	add.w	r7, r0, #20
 800b894:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b898:	1f2e      	subs	r6, r5, #4
 800b89a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f7ff fd48 	bl	800b334 <__hi0bits>
 800b8a4:	f1c0 0320 	rsb	r3, r0, #32
 800b8a8:	280a      	cmp	r0, #10
 800b8aa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b928 <__b2d+0x9c>
 800b8ae:	600b      	str	r3, [r1, #0]
 800b8b0:	dc14      	bgt.n	800b8dc <__b2d+0x50>
 800b8b2:	f1c0 0e0b 	rsb	lr, r0, #11
 800b8b6:	fa24 f10e 	lsr.w	r1, r4, lr
 800b8ba:	42b7      	cmp	r7, r6
 800b8bc:	ea41 030c 	orr.w	r3, r1, ip
 800b8c0:	bf34      	ite	cc
 800b8c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b8c6:	2100      	movcs	r1, #0
 800b8c8:	3015      	adds	r0, #21
 800b8ca:	fa04 f000 	lsl.w	r0, r4, r0
 800b8ce:	fa21 f10e 	lsr.w	r1, r1, lr
 800b8d2:	ea40 0201 	orr.w	r2, r0, r1
 800b8d6:	ec43 2b10 	vmov	d0, r2, r3
 800b8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8dc:	42b7      	cmp	r7, r6
 800b8de:	bf3a      	itte	cc
 800b8e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b8e4:	f1a5 0608 	subcc.w	r6, r5, #8
 800b8e8:	2100      	movcs	r1, #0
 800b8ea:	380b      	subs	r0, #11
 800b8ec:	d017      	beq.n	800b91e <__b2d+0x92>
 800b8ee:	f1c0 0c20 	rsb	ip, r0, #32
 800b8f2:	fa04 f500 	lsl.w	r5, r4, r0
 800b8f6:	42be      	cmp	r6, r7
 800b8f8:	fa21 f40c 	lsr.w	r4, r1, ip
 800b8fc:	ea45 0504 	orr.w	r5, r5, r4
 800b900:	bf8c      	ite	hi
 800b902:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b906:	2400      	movls	r4, #0
 800b908:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b90c:	fa01 f000 	lsl.w	r0, r1, r0
 800b910:	fa24 f40c 	lsr.w	r4, r4, ip
 800b914:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b918:	ea40 0204 	orr.w	r2, r0, r4
 800b91c:	e7db      	b.n	800b8d6 <__b2d+0x4a>
 800b91e:	ea44 030c 	orr.w	r3, r4, ip
 800b922:	460a      	mov	r2, r1
 800b924:	e7d7      	b.n	800b8d6 <__b2d+0x4a>
 800b926:	bf00      	nop
 800b928:	3ff00000 	.word	0x3ff00000

0800b92c <__d2b>:
 800b92c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b930:	4689      	mov	r9, r1
 800b932:	2101      	movs	r1, #1
 800b934:	ec57 6b10 	vmov	r6, r7, d0
 800b938:	4690      	mov	r8, r2
 800b93a:	f7ff fc09 	bl	800b150 <_Balloc>
 800b93e:	4604      	mov	r4, r0
 800b940:	b930      	cbnz	r0, 800b950 <__d2b+0x24>
 800b942:	4602      	mov	r2, r0
 800b944:	4b25      	ldr	r3, [pc, #148]	; (800b9dc <__d2b+0xb0>)
 800b946:	4826      	ldr	r0, [pc, #152]	; (800b9e0 <__d2b+0xb4>)
 800b948:	f240 310a 	movw	r1, #778	; 0x30a
 800b94c:	f000 fb4e 	bl	800bfec <__assert_func>
 800b950:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b954:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b958:	bb35      	cbnz	r5, 800b9a8 <__d2b+0x7c>
 800b95a:	2e00      	cmp	r6, #0
 800b95c:	9301      	str	r3, [sp, #4]
 800b95e:	d028      	beq.n	800b9b2 <__d2b+0x86>
 800b960:	4668      	mov	r0, sp
 800b962:	9600      	str	r6, [sp, #0]
 800b964:	f7ff fd06 	bl	800b374 <__lo0bits>
 800b968:	9900      	ldr	r1, [sp, #0]
 800b96a:	b300      	cbz	r0, 800b9ae <__d2b+0x82>
 800b96c:	9a01      	ldr	r2, [sp, #4]
 800b96e:	f1c0 0320 	rsb	r3, r0, #32
 800b972:	fa02 f303 	lsl.w	r3, r2, r3
 800b976:	430b      	orrs	r3, r1
 800b978:	40c2      	lsrs	r2, r0
 800b97a:	6163      	str	r3, [r4, #20]
 800b97c:	9201      	str	r2, [sp, #4]
 800b97e:	9b01      	ldr	r3, [sp, #4]
 800b980:	61a3      	str	r3, [r4, #24]
 800b982:	2b00      	cmp	r3, #0
 800b984:	bf14      	ite	ne
 800b986:	2202      	movne	r2, #2
 800b988:	2201      	moveq	r2, #1
 800b98a:	6122      	str	r2, [r4, #16]
 800b98c:	b1d5      	cbz	r5, 800b9c4 <__d2b+0x98>
 800b98e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b992:	4405      	add	r5, r0
 800b994:	f8c9 5000 	str.w	r5, [r9]
 800b998:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b99c:	f8c8 0000 	str.w	r0, [r8]
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	b003      	add	sp, #12
 800b9a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9ac:	e7d5      	b.n	800b95a <__d2b+0x2e>
 800b9ae:	6161      	str	r1, [r4, #20]
 800b9b0:	e7e5      	b.n	800b97e <__d2b+0x52>
 800b9b2:	a801      	add	r0, sp, #4
 800b9b4:	f7ff fcde 	bl	800b374 <__lo0bits>
 800b9b8:	9b01      	ldr	r3, [sp, #4]
 800b9ba:	6163      	str	r3, [r4, #20]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	6122      	str	r2, [r4, #16]
 800b9c0:	3020      	adds	r0, #32
 800b9c2:	e7e3      	b.n	800b98c <__d2b+0x60>
 800b9c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9cc:	f8c9 0000 	str.w	r0, [r9]
 800b9d0:	6918      	ldr	r0, [r3, #16]
 800b9d2:	f7ff fcaf 	bl	800b334 <__hi0bits>
 800b9d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9da:	e7df      	b.n	800b99c <__d2b+0x70>
 800b9dc:	0800e410 	.word	0x0800e410
 800b9e0:	0800e49c 	.word	0x0800e49c

0800b9e4 <__ratio>:
 800b9e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e8:	4688      	mov	r8, r1
 800b9ea:	4669      	mov	r1, sp
 800b9ec:	4681      	mov	r9, r0
 800b9ee:	f7ff ff4d 	bl	800b88c <__b2d>
 800b9f2:	a901      	add	r1, sp, #4
 800b9f4:	4640      	mov	r0, r8
 800b9f6:	ec55 4b10 	vmov	r4, r5, d0
 800b9fa:	f7ff ff47 	bl	800b88c <__b2d>
 800b9fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba02:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ba06:	eba3 0c02 	sub.w	ip, r3, r2
 800ba0a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba0e:	1a9b      	subs	r3, r3, r2
 800ba10:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ba14:	ec51 0b10 	vmov	r0, r1, d0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	bfd6      	itet	le
 800ba1c:	460a      	movle	r2, r1
 800ba1e:	462a      	movgt	r2, r5
 800ba20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba24:	468b      	mov	fp, r1
 800ba26:	462f      	mov	r7, r5
 800ba28:	bfd4      	ite	le
 800ba2a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ba2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ba32:	4620      	mov	r0, r4
 800ba34:	ee10 2a10 	vmov	r2, s0
 800ba38:	465b      	mov	r3, fp
 800ba3a:	4639      	mov	r1, r7
 800ba3c:	f7f4 ff0e 	bl	800085c <__aeabi_ddiv>
 800ba40:	ec41 0b10 	vmov	d0, r0, r1
 800ba44:	b003      	add	sp, #12
 800ba46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba4a <__copybits>:
 800ba4a:	3901      	subs	r1, #1
 800ba4c:	b570      	push	{r4, r5, r6, lr}
 800ba4e:	1149      	asrs	r1, r1, #5
 800ba50:	6914      	ldr	r4, [r2, #16]
 800ba52:	3101      	adds	r1, #1
 800ba54:	f102 0314 	add.w	r3, r2, #20
 800ba58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba60:	1f05      	subs	r5, r0, #4
 800ba62:	42a3      	cmp	r3, r4
 800ba64:	d30c      	bcc.n	800ba80 <__copybits+0x36>
 800ba66:	1aa3      	subs	r3, r4, r2
 800ba68:	3b11      	subs	r3, #17
 800ba6a:	f023 0303 	bic.w	r3, r3, #3
 800ba6e:	3211      	adds	r2, #17
 800ba70:	42a2      	cmp	r2, r4
 800ba72:	bf88      	it	hi
 800ba74:	2300      	movhi	r3, #0
 800ba76:	4418      	add	r0, r3
 800ba78:	2300      	movs	r3, #0
 800ba7a:	4288      	cmp	r0, r1
 800ba7c:	d305      	bcc.n	800ba8a <__copybits+0x40>
 800ba7e:	bd70      	pop	{r4, r5, r6, pc}
 800ba80:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba84:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba88:	e7eb      	b.n	800ba62 <__copybits+0x18>
 800ba8a:	f840 3b04 	str.w	r3, [r0], #4
 800ba8e:	e7f4      	b.n	800ba7a <__copybits+0x30>

0800ba90 <__any_on>:
 800ba90:	f100 0214 	add.w	r2, r0, #20
 800ba94:	6900      	ldr	r0, [r0, #16]
 800ba96:	114b      	asrs	r3, r1, #5
 800ba98:	4298      	cmp	r0, r3
 800ba9a:	b510      	push	{r4, lr}
 800ba9c:	db11      	blt.n	800bac2 <__any_on+0x32>
 800ba9e:	dd0a      	ble.n	800bab6 <__any_on+0x26>
 800baa0:	f011 011f 	ands.w	r1, r1, #31
 800baa4:	d007      	beq.n	800bab6 <__any_on+0x26>
 800baa6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800baaa:	fa24 f001 	lsr.w	r0, r4, r1
 800baae:	fa00 f101 	lsl.w	r1, r0, r1
 800bab2:	428c      	cmp	r4, r1
 800bab4:	d10b      	bne.n	800bace <__any_on+0x3e>
 800bab6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800baba:	4293      	cmp	r3, r2
 800babc:	d803      	bhi.n	800bac6 <__any_on+0x36>
 800babe:	2000      	movs	r0, #0
 800bac0:	bd10      	pop	{r4, pc}
 800bac2:	4603      	mov	r3, r0
 800bac4:	e7f7      	b.n	800bab6 <__any_on+0x26>
 800bac6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800baca:	2900      	cmp	r1, #0
 800bacc:	d0f5      	beq.n	800baba <__any_on+0x2a>
 800bace:	2001      	movs	r0, #1
 800bad0:	e7f6      	b.n	800bac0 <__any_on+0x30>

0800bad2 <_calloc_r>:
 800bad2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bad4:	fba1 2402 	umull	r2, r4, r1, r2
 800bad8:	b94c      	cbnz	r4, 800baee <_calloc_r+0x1c>
 800bada:	4611      	mov	r1, r2
 800badc:	9201      	str	r2, [sp, #4]
 800bade:	f000 f87b 	bl	800bbd8 <_malloc_r>
 800bae2:	9a01      	ldr	r2, [sp, #4]
 800bae4:	4605      	mov	r5, r0
 800bae6:	b930      	cbnz	r0, 800baf6 <_calloc_r+0x24>
 800bae8:	4628      	mov	r0, r5
 800baea:	b003      	add	sp, #12
 800baec:	bd30      	pop	{r4, r5, pc}
 800baee:	220c      	movs	r2, #12
 800baf0:	6002      	str	r2, [r0, #0]
 800baf2:	2500      	movs	r5, #0
 800baf4:	e7f8      	b.n	800bae8 <_calloc_r+0x16>
 800baf6:	4621      	mov	r1, r4
 800baf8:	f7fc fbcc 	bl	8008294 <memset>
 800bafc:	e7f4      	b.n	800bae8 <_calloc_r+0x16>
	...

0800bb00 <_free_r>:
 800bb00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb02:	2900      	cmp	r1, #0
 800bb04:	d044      	beq.n	800bb90 <_free_r+0x90>
 800bb06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb0a:	9001      	str	r0, [sp, #4]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f1a1 0404 	sub.w	r4, r1, #4
 800bb12:	bfb8      	it	lt
 800bb14:	18e4      	addlt	r4, r4, r3
 800bb16:	f000 fab3 	bl	800c080 <__malloc_lock>
 800bb1a:	4a1e      	ldr	r2, [pc, #120]	; (800bb94 <_free_r+0x94>)
 800bb1c:	9801      	ldr	r0, [sp, #4]
 800bb1e:	6813      	ldr	r3, [r2, #0]
 800bb20:	b933      	cbnz	r3, 800bb30 <_free_r+0x30>
 800bb22:	6063      	str	r3, [r4, #4]
 800bb24:	6014      	str	r4, [r2, #0]
 800bb26:	b003      	add	sp, #12
 800bb28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb2c:	f000 baae 	b.w	800c08c <__malloc_unlock>
 800bb30:	42a3      	cmp	r3, r4
 800bb32:	d908      	bls.n	800bb46 <_free_r+0x46>
 800bb34:	6825      	ldr	r5, [r4, #0]
 800bb36:	1961      	adds	r1, r4, r5
 800bb38:	428b      	cmp	r3, r1
 800bb3a:	bf01      	itttt	eq
 800bb3c:	6819      	ldreq	r1, [r3, #0]
 800bb3e:	685b      	ldreq	r3, [r3, #4]
 800bb40:	1949      	addeq	r1, r1, r5
 800bb42:	6021      	streq	r1, [r4, #0]
 800bb44:	e7ed      	b.n	800bb22 <_free_r+0x22>
 800bb46:	461a      	mov	r2, r3
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	b10b      	cbz	r3, 800bb50 <_free_r+0x50>
 800bb4c:	42a3      	cmp	r3, r4
 800bb4e:	d9fa      	bls.n	800bb46 <_free_r+0x46>
 800bb50:	6811      	ldr	r1, [r2, #0]
 800bb52:	1855      	adds	r5, r2, r1
 800bb54:	42a5      	cmp	r5, r4
 800bb56:	d10b      	bne.n	800bb70 <_free_r+0x70>
 800bb58:	6824      	ldr	r4, [r4, #0]
 800bb5a:	4421      	add	r1, r4
 800bb5c:	1854      	adds	r4, r2, r1
 800bb5e:	42a3      	cmp	r3, r4
 800bb60:	6011      	str	r1, [r2, #0]
 800bb62:	d1e0      	bne.n	800bb26 <_free_r+0x26>
 800bb64:	681c      	ldr	r4, [r3, #0]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	6053      	str	r3, [r2, #4]
 800bb6a:	4421      	add	r1, r4
 800bb6c:	6011      	str	r1, [r2, #0]
 800bb6e:	e7da      	b.n	800bb26 <_free_r+0x26>
 800bb70:	d902      	bls.n	800bb78 <_free_r+0x78>
 800bb72:	230c      	movs	r3, #12
 800bb74:	6003      	str	r3, [r0, #0]
 800bb76:	e7d6      	b.n	800bb26 <_free_r+0x26>
 800bb78:	6825      	ldr	r5, [r4, #0]
 800bb7a:	1961      	adds	r1, r4, r5
 800bb7c:	428b      	cmp	r3, r1
 800bb7e:	bf04      	itt	eq
 800bb80:	6819      	ldreq	r1, [r3, #0]
 800bb82:	685b      	ldreq	r3, [r3, #4]
 800bb84:	6063      	str	r3, [r4, #4]
 800bb86:	bf04      	itt	eq
 800bb88:	1949      	addeq	r1, r1, r5
 800bb8a:	6021      	streq	r1, [r4, #0]
 800bb8c:	6054      	str	r4, [r2, #4]
 800bb8e:	e7ca      	b.n	800bb26 <_free_r+0x26>
 800bb90:	b003      	add	sp, #12
 800bb92:	bd30      	pop	{r4, r5, pc}
 800bb94:	20000ecc 	.word	0x20000ecc

0800bb98 <sbrk_aligned>:
 800bb98:	b570      	push	{r4, r5, r6, lr}
 800bb9a:	4e0e      	ldr	r6, [pc, #56]	; (800bbd4 <sbrk_aligned+0x3c>)
 800bb9c:	460c      	mov	r4, r1
 800bb9e:	6831      	ldr	r1, [r6, #0]
 800bba0:	4605      	mov	r5, r0
 800bba2:	b911      	cbnz	r1, 800bbaa <sbrk_aligned+0x12>
 800bba4:	f000 f9f0 	bl	800bf88 <_sbrk_r>
 800bba8:	6030      	str	r0, [r6, #0]
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4628      	mov	r0, r5
 800bbae:	f000 f9eb 	bl	800bf88 <_sbrk_r>
 800bbb2:	1c43      	adds	r3, r0, #1
 800bbb4:	d00a      	beq.n	800bbcc <sbrk_aligned+0x34>
 800bbb6:	1cc4      	adds	r4, r0, #3
 800bbb8:	f024 0403 	bic.w	r4, r4, #3
 800bbbc:	42a0      	cmp	r0, r4
 800bbbe:	d007      	beq.n	800bbd0 <sbrk_aligned+0x38>
 800bbc0:	1a21      	subs	r1, r4, r0
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	f000 f9e0 	bl	800bf88 <_sbrk_r>
 800bbc8:	3001      	adds	r0, #1
 800bbca:	d101      	bne.n	800bbd0 <sbrk_aligned+0x38>
 800bbcc:	f04f 34ff 	mov.w	r4, #4294967295
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	bd70      	pop	{r4, r5, r6, pc}
 800bbd4:	20000ed0 	.word	0x20000ed0

0800bbd8 <_malloc_r>:
 800bbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbdc:	1ccd      	adds	r5, r1, #3
 800bbde:	f025 0503 	bic.w	r5, r5, #3
 800bbe2:	3508      	adds	r5, #8
 800bbe4:	2d0c      	cmp	r5, #12
 800bbe6:	bf38      	it	cc
 800bbe8:	250c      	movcc	r5, #12
 800bbea:	2d00      	cmp	r5, #0
 800bbec:	4607      	mov	r7, r0
 800bbee:	db01      	blt.n	800bbf4 <_malloc_r+0x1c>
 800bbf0:	42a9      	cmp	r1, r5
 800bbf2:	d905      	bls.n	800bc00 <_malloc_r+0x28>
 800bbf4:	230c      	movs	r3, #12
 800bbf6:	603b      	str	r3, [r7, #0]
 800bbf8:	2600      	movs	r6, #0
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc00:	4e2e      	ldr	r6, [pc, #184]	; (800bcbc <_malloc_r+0xe4>)
 800bc02:	f000 fa3d 	bl	800c080 <__malloc_lock>
 800bc06:	6833      	ldr	r3, [r6, #0]
 800bc08:	461c      	mov	r4, r3
 800bc0a:	bb34      	cbnz	r4, 800bc5a <_malloc_r+0x82>
 800bc0c:	4629      	mov	r1, r5
 800bc0e:	4638      	mov	r0, r7
 800bc10:	f7ff ffc2 	bl	800bb98 <sbrk_aligned>
 800bc14:	1c43      	adds	r3, r0, #1
 800bc16:	4604      	mov	r4, r0
 800bc18:	d14d      	bne.n	800bcb6 <_malloc_r+0xde>
 800bc1a:	6834      	ldr	r4, [r6, #0]
 800bc1c:	4626      	mov	r6, r4
 800bc1e:	2e00      	cmp	r6, #0
 800bc20:	d140      	bne.n	800bca4 <_malloc_r+0xcc>
 800bc22:	6823      	ldr	r3, [r4, #0]
 800bc24:	4631      	mov	r1, r6
 800bc26:	4638      	mov	r0, r7
 800bc28:	eb04 0803 	add.w	r8, r4, r3
 800bc2c:	f000 f9ac 	bl	800bf88 <_sbrk_r>
 800bc30:	4580      	cmp	r8, r0
 800bc32:	d13a      	bne.n	800bcaa <_malloc_r+0xd2>
 800bc34:	6821      	ldr	r1, [r4, #0]
 800bc36:	3503      	adds	r5, #3
 800bc38:	1a6d      	subs	r5, r5, r1
 800bc3a:	f025 0503 	bic.w	r5, r5, #3
 800bc3e:	3508      	adds	r5, #8
 800bc40:	2d0c      	cmp	r5, #12
 800bc42:	bf38      	it	cc
 800bc44:	250c      	movcc	r5, #12
 800bc46:	4629      	mov	r1, r5
 800bc48:	4638      	mov	r0, r7
 800bc4a:	f7ff ffa5 	bl	800bb98 <sbrk_aligned>
 800bc4e:	3001      	adds	r0, #1
 800bc50:	d02b      	beq.n	800bcaa <_malloc_r+0xd2>
 800bc52:	6823      	ldr	r3, [r4, #0]
 800bc54:	442b      	add	r3, r5
 800bc56:	6023      	str	r3, [r4, #0]
 800bc58:	e00e      	b.n	800bc78 <_malloc_r+0xa0>
 800bc5a:	6822      	ldr	r2, [r4, #0]
 800bc5c:	1b52      	subs	r2, r2, r5
 800bc5e:	d41e      	bmi.n	800bc9e <_malloc_r+0xc6>
 800bc60:	2a0b      	cmp	r2, #11
 800bc62:	d916      	bls.n	800bc92 <_malloc_r+0xba>
 800bc64:	1961      	adds	r1, r4, r5
 800bc66:	42a3      	cmp	r3, r4
 800bc68:	6025      	str	r5, [r4, #0]
 800bc6a:	bf18      	it	ne
 800bc6c:	6059      	strne	r1, [r3, #4]
 800bc6e:	6863      	ldr	r3, [r4, #4]
 800bc70:	bf08      	it	eq
 800bc72:	6031      	streq	r1, [r6, #0]
 800bc74:	5162      	str	r2, [r4, r5]
 800bc76:	604b      	str	r3, [r1, #4]
 800bc78:	4638      	mov	r0, r7
 800bc7a:	f104 060b 	add.w	r6, r4, #11
 800bc7e:	f000 fa05 	bl	800c08c <__malloc_unlock>
 800bc82:	f026 0607 	bic.w	r6, r6, #7
 800bc86:	1d23      	adds	r3, r4, #4
 800bc88:	1af2      	subs	r2, r6, r3
 800bc8a:	d0b6      	beq.n	800bbfa <_malloc_r+0x22>
 800bc8c:	1b9b      	subs	r3, r3, r6
 800bc8e:	50a3      	str	r3, [r4, r2]
 800bc90:	e7b3      	b.n	800bbfa <_malloc_r+0x22>
 800bc92:	6862      	ldr	r2, [r4, #4]
 800bc94:	42a3      	cmp	r3, r4
 800bc96:	bf0c      	ite	eq
 800bc98:	6032      	streq	r2, [r6, #0]
 800bc9a:	605a      	strne	r2, [r3, #4]
 800bc9c:	e7ec      	b.n	800bc78 <_malloc_r+0xa0>
 800bc9e:	4623      	mov	r3, r4
 800bca0:	6864      	ldr	r4, [r4, #4]
 800bca2:	e7b2      	b.n	800bc0a <_malloc_r+0x32>
 800bca4:	4634      	mov	r4, r6
 800bca6:	6876      	ldr	r6, [r6, #4]
 800bca8:	e7b9      	b.n	800bc1e <_malloc_r+0x46>
 800bcaa:	230c      	movs	r3, #12
 800bcac:	603b      	str	r3, [r7, #0]
 800bcae:	4638      	mov	r0, r7
 800bcb0:	f000 f9ec 	bl	800c08c <__malloc_unlock>
 800bcb4:	e7a1      	b.n	800bbfa <_malloc_r+0x22>
 800bcb6:	6025      	str	r5, [r4, #0]
 800bcb8:	e7de      	b.n	800bc78 <_malloc_r+0xa0>
 800bcba:	bf00      	nop
 800bcbc:	20000ecc 	.word	0x20000ecc

0800bcc0 <__ssputs_r>:
 800bcc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcc4:	688e      	ldr	r6, [r1, #8]
 800bcc6:	429e      	cmp	r6, r3
 800bcc8:	4682      	mov	sl, r0
 800bcca:	460c      	mov	r4, r1
 800bccc:	4690      	mov	r8, r2
 800bcce:	461f      	mov	r7, r3
 800bcd0:	d838      	bhi.n	800bd44 <__ssputs_r+0x84>
 800bcd2:	898a      	ldrh	r2, [r1, #12]
 800bcd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bcd8:	d032      	beq.n	800bd40 <__ssputs_r+0x80>
 800bcda:	6825      	ldr	r5, [r4, #0]
 800bcdc:	6909      	ldr	r1, [r1, #16]
 800bcde:	eba5 0901 	sub.w	r9, r5, r1
 800bce2:	6965      	ldr	r5, [r4, #20]
 800bce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bce8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bcec:	3301      	adds	r3, #1
 800bcee:	444b      	add	r3, r9
 800bcf0:	106d      	asrs	r5, r5, #1
 800bcf2:	429d      	cmp	r5, r3
 800bcf4:	bf38      	it	cc
 800bcf6:	461d      	movcc	r5, r3
 800bcf8:	0553      	lsls	r3, r2, #21
 800bcfa:	d531      	bpl.n	800bd60 <__ssputs_r+0xa0>
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	f7ff ff6b 	bl	800bbd8 <_malloc_r>
 800bd02:	4606      	mov	r6, r0
 800bd04:	b950      	cbnz	r0, 800bd1c <__ssputs_r+0x5c>
 800bd06:	230c      	movs	r3, #12
 800bd08:	f8ca 3000 	str.w	r3, [sl]
 800bd0c:	89a3      	ldrh	r3, [r4, #12]
 800bd0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd12:	81a3      	strh	r3, [r4, #12]
 800bd14:	f04f 30ff 	mov.w	r0, #4294967295
 800bd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd1c:	6921      	ldr	r1, [r4, #16]
 800bd1e:	464a      	mov	r2, r9
 800bd20:	f7fc faaa 	bl	8008278 <memcpy>
 800bd24:	89a3      	ldrh	r3, [r4, #12]
 800bd26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd2e:	81a3      	strh	r3, [r4, #12]
 800bd30:	6126      	str	r6, [r4, #16]
 800bd32:	6165      	str	r5, [r4, #20]
 800bd34:	444e      	add	r6, r9
 800bd36:	eba5 0509 	sub.w	r5, r5, r9
 800bd3a:	6026      	str	r6, [r4, #0]
 800bd3c:	60a5      	str	r5, [r4, #8]
 800bd3e:	463e      	mov	r6, r7
 800bd40:	42be      	cmp	r6, r7
 800bd42:	d900      	bls.n	800bd46 <__ssputs_r+0x86>
 800bd44:	463e      	mov	r6, r7
 800bd46:	6820      	ldr	r0, [r4, #0]
 800bd48:	4632      	mov	r2, r6
 800bd4a:	4641      	mov	r1, r8
 800bd4c:	f000 f97e 	bl	800c04c <memmove>
 800bd50:	68a3      	ldr	r3, [r4, #8]
 800bd52:	1b9b      	subs	r3, r3, r6
 800bd54:	60a3      	str	r3, [r4, #8]
 800bd56:	6823      	ldr	r3, [r4, #0]
 800bd58:	4433      	add	r3, r6
 800bd5a:	6023      	str	r3, [r4, #0]
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	e7db      	b.n	800bd18 <__ssputs_r+0x58>
 800bd60:	462a      	mov	r2, r5
 800bd62:	f000 f999 	bl	800c098 <_realloc_r>
 800bd66:	4606      	mov	r6, r0
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d1e1      	bne.n	800bd30 <__ssputs_r+0x70>
 800bd6c:	6921      	ldr	r1, [r4, #16]
 800bd6e:	4650      	mov	r0, sl
 800bd70:	f7ff fec6 	bl	800bb00 <_free_r>
 800bd74:	e7c7      	b.n	800bd06 <__ssputs_r+0x46>
	...

0800bd78 <_svfiprintf_r>:
 800bd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7c:	4698      	mov	r8, r3
 800bd7e:	898b      	ldrh	r3, [r1, #12]
 800bd80:	061b      	lsls	r3, r3, #24
 800bd82:	b09d      	sub	sp, #116	; 0x74
 800bd84:	4607      	mov	r7, r0
 800bd86:	460d      	mov	r5, r1
 800bd88:	4614      	mov	r4, r2
 800bd8a:	d50e      	bpl.n	800bdaa <_svfiprintf_r+0x32>
 800bd8c:	690b      	ldr	r3, [r1, #16]
 800bd8e:	b963      	cbnz	r3, 800bdaa <_svfiprintf_r+0x32>
 800bd90:	2140      	movs	r1, #64	; 0x40
 800bd92:	f7ff ff21 	bl	800bbd8 <_malloc_r>
 800bd96:	6028      	str	r0, [r5, #0]
 800bd98:	6128      	str	r0, [r5, #16]
 800bd9a:	b920      	cbnz	r0, 800bda6 <_svfiprintf_r+0x2e>
 800bd9c:	230c      	movs	r3, #12
 800bd9e:	603b      	str	r3, [r7, #0]
 800bda0:	f04f 30ff 	mov.w	r0, #4294967295
 800bda4:	e0d1      	b.n	800bf4a <_svfiprintf_r+0x1d2>
 800bda6:	2340      	movs	r3, #64	; 0x40
 800bda8:	616b      	str	r3, [r5, #20]
 800bdaa:	2300      	movs	r3, #0
 800bdac:	9309      	str	r3, [sp, #36]	; 0x24
 800bdae:	2320      	movs	r3, #32
 800bdb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdb8:	2330      	movs	r3, #48	; 0x30
 800bdba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bf64 <_svfiprintf_r+0x1ec>
 800bdbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdc2:	f04f 0901 	mov.w	r9, #1
 800bdc6:	4623      	mov	r3, r4
 800bdc8:	469a      	mov	sl, r3
 800bdca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdce:	b10a      	cbz	r2, 800bdd4 <_svfiprintf_r+0x5c>
 800bdd0:	2a25      	cmp	r2, #37	; 0x25
 800bdd2:	d1f9      	bne.n	800bdc8 <_svfiprintf_r+0x50>
 800bdd4:	ebba 0b04 	subs.w	fp, sl, r4
 800bdd8:	d00b      	beq.n	800bdf2 <_svfiprintf_r+0x7a>
 800bdda:	465b      	mov	r3, fp
 800bddc:	4622      	mov	r2, r4
 800bdde:	4629      	mov	r1, r5
 800bde0:	4638      	mov	r0, r7
 800bde2:	f7ff ff6d 	bl	800bcc0 <__ssputs_r>
 800bde6:	3001      	adds	r0, #1
 800bde8:	f000 80aa 	beq.w	800bf40 <_svfiprintf_r+0x1c8>
 800bdec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdee:	445a      	add	r2, fp
 800bdf0:	9209      	str	r2, [sp, #36]	; 0x24
 800bdf2:	f89a 3000 	ldrb.w	r3, [sl]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f000 80a2 	beq.w	800bf40 <_svfiprintf_r+0x1c8>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	f04f 32ff 	mov.w	r2, #4294967295
 800be02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be06:	f10a 0a01 	add.w	sl, sl, #1
 800be0a:	9304      	str	r3, [sp, #16]
 800be0c:	9307      	str	r3, [sp, #28]
 800be0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be12:	931a      	str	r3, [sp, #104]	; 0x68
 800be14:	4654      	mov	r4, sl
 800be16:	2205      	movs	r2, #5
 800be18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be1c:	4851      	ldr	r0, [pc, #324]	; (800bf64 <_svfiprintf_r+0x1ec>)
 800be1e:	f7f4 f9e7 	bl	80001f0 <memchr>
 800be22:	9a04      	ldr	r2, [sp, #16]
 800be24:	b9d8      	cbnz	r0, 800be5e <_svfiprintf_r+0xe6>
 800be26:	06d0      	lsls	r0, r2, #27
 800be28:	bf44      	itt	mi
 800be2a:	2320      	movmi	r3, #32
 800be2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be30:	0711      	lsls	r1, r2, #28
 800be32:	bf44      	itt	mi
 800be34:	232b      	movmi	r3, #43	; 0x2b
 800be36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be3a:	f89a 3000 	ldrb.w	r3, [sl]
 800be3e:	2b2a      	cmp	r3, #42	; 0x2a
 800be40:	d015      	beq.n	800be6e <_svfiprintf_r+0xf6>
 800be42:	9a07      	ldr	r2, [sp, #28]
 800be44:	4654      	mov	r4, sl
 800be46:	2000      	movs	r0, #0
 800be48:	f04f 0c0a 	mov.w	ip, #10
 800be4c:	4621      	mov	r1, r4
 800be4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be52:	3b30      	subs	r3, #48	; 0x30
 800be54:	2b09      	cmp	r3, #9
 800be56:	d94e      	bls.n	800bef6 <_svfiprintf_r+0x17e>
 800be58:	b1b0      	cbz	r0, 800be88 <_svfiprintf_r+0x110>
 800be5a:	9207      	str	r2, [sp, #28]
 800be5c:	e014      	b.n	800be88 <_svfiprintf_r+0x110>
 800be5e:	eba0 0308 	sub.w	r3, r0, r8
 800be62:	fa09 f303 	lsl.w	r3, r9, r3
 800be66:	4313      	orrs	r3, r2
 800be68:	9304      	str	r3, [sp, #16]
 800be6a:	46a2      	mov	sl, r4
 800be6c:	e7d2      	b.n	800be14 <_svfiprintf_r+0x9c>
 800be6e:	9b03      	ldr	r3, [sp, #12]
 800be70:	1d19      	adds	r1, r3, #4
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	9103      	str	r1, [sp, #12]
 800be76:	2b00      	cmp	r3, #0
 800be78:	bfbb      	ittet	lt
 800be7a:	425b      	neglt	r3, r3
 800be7c:	f042 0202 	orrlt.w	r2, r2, #2
 800be80:	9307      	strge	r3, [sp, #28]
 800be82:	9307      	strlt	r3, [sp, #28]
 800be84:	bfb8      	it	lt
 800be86:	9204      	strlt	r2, [sp, #16]
 800be88:	7823      	ldrb	r3, [r4, #0]
 800be8a:	2b2e      	cmp	r3, #46	; 0x2e
 800be8c:	d10c      	bne.n	800bea8 <_svfiprintf_r+0x130>
 800be8e:	7863      	ldrb	r3, [r4, #1]
 800be90:	2b2a      	cmp	r3, #42	; 0x2a
 800be92:	d135      	bne.n	800bf00 <_svfiprintf_r+0x188>
 800be94:	9b03      	ldr	r3, [sp, #12]
 800be96:	1d1a      	adds	r2, r3, #4
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	9203      	str	r2, [sp, #12]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	bfb8      	it	lt
 800bea0:	f04f 33ff 	movlt.w	r3, #4294967295
 800bea4:	3402      	adds	r4, #2
 800bea6:	9305      	str	r3, [sp, #20]
 800bea8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bf74 <_svfiprintf_r+0x1fc>
 800beac:	7821      	ldrb	r1, [r4, #0]
 800beae:	2203      	movs	r2, #3
 800beb0:	4650      	mov	r0, sl
 800beb2:	f7f4 f99d 	bl	80001f0 <memchr>
 800beb6:	b140      	cbz	r0, 800beca <_svfiprintf_r+0x152>
 800beb8:	2340      	movs	r3, #64	; 0x40
 800beba:	eba0 000a 	sub.w	r0, r0, sl
 800bebe:	fa03 f000 	lsl.w	r0, r3, r0
 800bec2:	9b04      	ldr	r3, [sp, #16]
 800bec4:	4303      	orrs	r3, r0
 800bec6:	3401      	adds	r4, #1
 800bec8:	9304      	str	r3, [sp, #16]
 800beca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bece:	4826      	ldr	r0, [pc, #152]	; (800bf68 <_svfiprintf_r+0x1f0>)
 800bed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bed4:	2206      	movs	r2, #6
 800bed6:	f7f4 f98b 	bl	80001f0 <memchr>
 800beda:	2800      	cmp	r0, #0
 800bedc:	d038      	beq.n	800bf50 <_svfiprintf_r+0x1d8>
 800bede:	4b23      	ldr	r3, [pc, #140]	; (800bf6c <_svfiprintf_r+0x1f4>)
 800bee0:	bb1b      	cbnz	r3, 800bf2a <_svfiprintf_r+0x1b2>
 800bee2:	9b03      	ldr	r3, [sp, #12]
 800bee4:	3307      	adds	r3, #7
 800bee6:	f023 0307 	bic.w	r3, r3, #7
 800beea:	3308      	adds	r3, #8
 800beec:	9303      	str	r3, [sp, #12]
 800beee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bef0:	4433      	add	r3, r6
 800bef2:	9309      	str	r3, [sp, #36]	; 0x24
 800bef4:	e767      	b.n	800bdc6 <_svfiprintf_r+0x4e>
 800bef6:	fb0c 3202 	mla	r2, ip, r2, r3
 800befa:	460c      	mov	r4, r1
 800befc:	2001      	movs	r0, #1
 800befe:	e7a5      	b.n	800be4c <_svfiprintf_r+0xd4>
 800bf00:	2300      	movs	r3, #0
 800bf02:	3401      	adds	r4, #1
 800bf04:	9305      	str	r3, [sp, #20]
 800bf06:	4619      	mov	r1, r3
 800bf08:	f04f 0c0a 	mov.w	ip, #10
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf12:	3a30      	subs	r2, #48	; 0x30
 800bf14:	2a09      	cmp	r2, #9
 800bf16:	d903      	bls.n	800bf20 <_svfiprintf_r+0x1a8>
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d0c5      	beq.n	800bea8 <_svfiprintf_r+0x130>
 800bf1c:	9105      	str	r1, [sp, #20]
 800bf1e:	e7c3      	b.n	800bea8 <_svfiprintf_r+0x130>
 800bf20:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf24:	4604      	mov	r4, r0
 800bf26:	2301      	movs	r3, #1
 800bf28:	e7f0      	b.n	800bf0c <_svfiprintf_r+0x194>
 800bf2a:	ab03      	add	r3, sp, #12
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	462a      	mov	r2, r5
 800bf30:	4b0f      	ldr	r3, [pc, #60]	; (800bf70 <_svfiprintf_r+0x1f8>)
 800bf32:	a904      	add	r1, sp, #16
 800bf34:	4638      	mov	r0, r7
 800bf36:	f7fc fa55 	bl	80083e4 <_printf_float>
 800bf3a:	1c42      	adds	r2, r0, #1
 800bf3c:	4606      	mov	r6, r0
 800bf3e:	d1d6      	bne.n	800beee <_svfiprintf_r+0x176>
 800bf40:	89ab      	ldrh	r3, [r5, #12]
 800bf42:	065b      	lsls	r3, r3, #25
 800bf44:	f53f af2c 	bmi.w	800bda0 <_svfiprintf_r+0x28>
 800bf48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf4a:	b01d      	add	sp, #116	; 0x74
 800bf4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf50:	ab03      	add	r3, sp, #12
 800bf52:	9300      	str	r3, [sp, #0]
 800bf54:	462a      	mov	r2, r5
 800bf56:	4b06      	ldr	r3, [pc, #24]	; (800bf70 <_svfiprintf_r+0x1f8>)
 800bf58:	a904      	add	r1, sp, #16
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	f7fc fce6 	bl	800892c <_printf_i>
 800bf60:	e7eb      	b.n	800bf3a <_svfiprintf_r+0x1c2>
 800bf62:	bf00      	nop
 800bf64:	0800e5f4 	.word	0x0800e5f4
 800bf68:	0800e5fe 	.word	0x0800e5fe
 800bf6c:	080083e5 	.word	0x080083e5
 800bf70:	0800bcc1 	.word	0x0800bcc1
 800bf74:	0800e5fa 	.word	0x0800e5fa

0800bf78 <nan>:
 800bf78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bf80 <nan+0x8>
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	00000000 	.word	0x00000000
 800bf84:	7ff80000 	.word	0x7ff80000

0800bf88 <_sbrk_r>:
 800bf88:	b538      	push	{r3, r4, r5, lr}
 800bf8a:	4d06      	ldr	r5, [pc, #24]	; (800bfa4 <_sbrk_r+0x1c>)
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	4604      	mov	r4, r0
 800bf90:	4608      	mov	r0, r1
 800bf92:	602b      	str	r3, [r5, #0]
 800bf94:	f7f6 fde0 	bl	8002b58 <_sbrk>
 800bf98:	1c43      	adds	r3, r0, #1
 800bf9a:	d102      	bne.n	800bfa2 <_sbrk_r+0x1a>
 800bf9c:	682b      	ldr	r3, [r5, #0]
 800bf9e:	b103      	cbz	r3, 800bfa2 <_sbrk_r+0x1a>
 800bfa0:	6023      	str	r3, [r4, #0]
 800bfa2:	bd38      	pop	{r3, r4, r5, pc}
 800bfa4:	20000ed4 	.word	0x20000ed4

0800bfa8 <strncmp>:
 800bfa8:	b510      	push	{r4, lr}
 800bfaa:	b17a      	cbz	r2, 800bfcc <strncmp+0x24>
 800bfac:	4603      	mov	r3, r0
 800bfae:	3901      	subs	r1, #1
 800bfb0:	1884      	adds	r4, r0, r2
 800bfb2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bfb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bfba:	4290      	cmp	r0, r2
 800bfbc:	d101      	bne.n	800bfc2 <strncmp+0x1a>
 800bfbe:	42a3      	cmp	r3, r4
 800bfc0:	d101      	bne.n	800bfc6 <strncmp+0x1e>
 800bfc2:	1a80      	subs	r0, r0, r2
 800bfc4:	bd10      	pop	{r4, pc}
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	d1f3      	bne.n	800bfb2 <strncmp+0xa>
 800bfca:	e7fa      	b.n	800bfc2 <strncmp+0x1a>
 800bfcc:	4610      	mov	r0, r2
 800bfce:	e7f9      	b.n	800bfc4 <strncmp+0x1c>

0800bfd0 <__ascii_wctomb>:
 800bfd0:	b149      	cbz	r1, 800bfe6 <__ascii_wctomb+0x16>
 800bfd2:	2aff      	cmp	r2, #255	; 0xff
 800bfd4:	bf85      	ittet	hi
 800bfd6:	238a      	movhi	r3, #138	; 0x8a
 800bfd8:	6003      	strhi	r3, [r0, #0]
 800bfda:	700a      	strbls	r2, [r1, #0]
 800bfdc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bfe0:	bf98      	it	ls
 800bfe2:	2001      	movls	r0, #1
 800bfe4:	4770      	bx	lr
 800bfe6:	4608      	mov	r0, r1
 800bfe8:	4770      	bx	lr
	...

0800bfec <__assert_func>:
 800bfec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfee:	4614      	mov	r4, r2
 800bff0:	461a      	mov	r2, r3
 800bff2:	4b09      	ldr	r3, [pc, #36]	; (800c018 <__assert_func+0x2c>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4605      	mov	r5, r0
 800bff8:	68d8      	ldr	r0, [r3, #12]
 800bffa:	b14c      	cbz	r4, 800c010 <__assert_func+0x24>
 800bffc:	4b07      	ldr	r3, [pc, #28]	; (800c01c <__assert_func+0x30>)
 800bffe:	9100      	str	r1, [sp, #0]
 800c000:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c004:	4906      	ldr	r1, [pc, #24]	; (800c020 <__assert_func+0x34>)
 800c006:	462b      	mov	r3, r5
 800c008:	f000 f80e 	bl	800c028 <fiprintf>
 800c00c:	f000 fa8c 	bl	800c528 <abort>
 800c010:	4b04      	ldr	r3, [pc, #16]	; (800c024 <__assert_func+0x38>)
 800c012:	461c      	mov	r4, r3
 800c014:	e7f3      	b.n	800bffe <__assert_func+0x12>
 800c016:	bf00      	nop
 800c018:	2000020c 	.word	0x2000020c
 800c01c:	0800e605 	.word	0x0800e605
 800c020:	0800e612 	.word	0x0800e612
 800c024:	0800e640 	.word	0x0800e640

0800c028 <fiprintf>:
 800c028:	b40e      	push	{r1, r2, r3}
 800c02a:	b503      	push	{r0, r1, lr}
 800c02c:	4601      	mov	r1, r0
 800c02e:	ab03      	add	r3, sp, #12
 800c030:	4805      	ldr	r0, [pc, #20]	; (800c048 <fiprintf+0x20>)
 800c032:	f853 2b04 	ldr.w	r2, [r3], #4
 800c036:	6800      	ldr	r0, [r0, #0]
 800c038:	9301      	str	r3, [sp, #4]
 800c03a:	f000 f885 	bl	800c148 <_vfiprintf_r>
 800c03e:	b002      	add	sp, #8
 800c040:	f85d eb04 	ldr.w	lr, [sp], #4
 800c044:	b003      	add	sp, #12
 800c046:	4770      	bx	lr
 800c048:	2000020c 	.word	0x2000020c

0800c04c <memmove>:
 800c04c:	4288      	cmp	r0, r1
 800c04e:	b510      	push	{r4, lr}
 800c050:	eb01 0402 	add.w	r4, r1, r2
 800c054:	d902      	bls.n	800c05c <memmove+0x10>
 800c056:	4284      	cmp	r4, r0
 800c058:	4623      	mov	r3, r4
 800c05a:	d807      	bhi.n	800c06c <memmove+0x20>
 800c05c:	1e43      	subs	r3, r0, #1
 800c05e:	42a1      	cmp	r1, r4
 800c060:	d008      	beq.n	800c074 <memmove+0x28>
 800c062:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c06a:	e7f8      	b.n	800c05e <memmove+0x12>
 800c06c:	4402      	add	r2, r0
 800c06e:	4601      	mov	r1, r0
 800c070:	428a      	cmp	r2, r1
 800c072:	d100      	bne.n	800c076 <memmove+0x2a>
 800c074:	bd10      	pop	{r4, pc}
 800c076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c07a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c07e:	e7f7      	b.n	800c070 <memmove+0x24>

0800c080 <__malloc_lock>:
 800c080:	4801      	ldr	r0, [pc, #4]	; (800c088 <__malloc_lock+0x8>)
 800c082:	f000 bc11 	b.w	800c8a8 <__retarget_lock_acquire_recursive>
 800c086:	bf00      	nop
 800c088:	20000ed8 	.word	0x20000ed8

0800c08c <__malloc_unlock>:
 800c08c:	4801      	ldr	r0, [pc, #4]	; (800c094 <__malloc_unlock+0x8>)
 800c08e:	f000 bc0c 	b.w	800c8aa <__retarget_lock_release_recursive>
 800c092:	bf00      	nop
 800c094:	20000ed8 	.word	0x20000ed8

0800c098 <_realloc_r>:
 800c098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c09c:	4680      	mov	r8, r0
 800c09e:	4614      	mov	r4, r2
 800c0a0:	460e      	mov	r6, r1
 800c0a2:	b921      	cbnz	r1, 800c0ae <_realloc_r+0x16>
 800c0a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a8:	4611      	mov	r1, r2
 800c0aa:	f7ff bd95 	b.w	800bbd8 <_malloc_r>
 800c0ae:	b92a      	cbnz	r2, 800c0bc <_realloc_r+0x24>
 800c0b0:	f7ff fd26 	bl	800bb00 <_free_r>
 800c0b4:	4625      	mov	r5, r4
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0bc:	f000 fc5c 	bl	800c978 <_malloc_usable_size_r>
 800c0c0:	4284      	cmp	r4, r0
 800c0c2:	4607      	mov	r7, r0
 800c0c4:	d802      	bhi.n	800c0cc <_realloc_r+0x34>
 800c0c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0ca:	d812      	bhi.n	800c0f2 <_realloc_r+0x5a>
 800c0cc:	4621      	mov	r1, r4
 800c0ce:	4640      	mov	r0, r8
 800c0d0:	f7ff fd82 	bl	800bbd8 <_malloc_r>
 800c0d4:	4605      	mov	r5, r0
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	d0ed      	beq.n	800c0b6 <_realloc_r+0x1e>
 800c0da:	42bc      	cmp	r4, r7
 800c0dc:	4622      	mov	r2, r4
 800c0de:	4631      	mov	r1, r6
 800c0e0:	bf28      	it	cs
 800c0e2:	463a      	movcs	r2, r7
 800c0e4:	f7fc f8c8 	bl	8008278 <memcpy>
 800c0e8:	4631      	mov	r1, r6
 800c0ea:	4640      	mov	r0, r8
 800c0ec:	f7ff fd08 	bl	800bb00 <_free_r>
 800c0f0:	e7e1      	b.n	800c0b6 <_realloc_r+0x1e>
 800c0f2:	4635      	mov	r5, r6
 800c0f4:	e7df      	b.n	800c0b6 <_realloc_r+0x1e>

0800c0f6 <__sfputc_r>:
 800c0f6:	6893      	ldr	r3, [r2, #8]
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	b410      	push	{r4}
 800c0fe:	6093      	str	r3, [r2, #8]
 800c100:	da08      	bge.n	800c114 <__sfputc_r+0x1e>
 800c102:	6994      	ldr	r4, [r2, #24]
 800c104:	42a3      	cmp	r3, r4
 800c106:	db01      	blt.n	800c10c <__sfputc_r+0x16>
 800c108:	290a      	cmp	r1, #10
 800c10a:	d103      	bne.n	800c114 <__sfputc_r+0x1e>
 800c10c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c110:	f000 b94a 	b.w	800c3a8 <__swbuf_r>
 800c114:	6813      	ldr	r3, [r2, #0]
 800c116:	1c58      	adds	r0, r3, #1
 800c118:	6010      	str	r0, [r2, #0]
 800c11a:	7019      	strb	r1, [r3, #0]
 800c11c:	4608      	mov	r0, r1
 800c11e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <__sfputs_r>:
 800c124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c126:	4606      	mov	r6, r0
 800c128:	460f      	mov	r7, r1
 800c12a:	4614      	mov	r4, r2
 800c12c:	18d5      	adds	r5, r2, r3
 800c12e:	42ac      	cmp	r4, r5
 800c130:	d101      	bne.n	800c136 <__sfputs_r+0x12>
 800c132:	2000      	movs	r0, #0
 800c134:	e007      	b.n	800c146 <__sfputs_r+0x22>
 800c136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c13a:	463a      	mov	r2, r7
 800c13c:	4630      	mov	r0, r6
 800c13e:	f7ff ffda 	bl	800c0f6 <__sfputc_r>
 800c142:	1c43      	adds	r3, r0, #1
 800c144:	d1f3      	bne.n	800c12e <__sfputs_r+0xa>
 800c146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c148 <_vfiprintf_r>:
 800c148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14c:	460d      	mov	r5, r1
 800c14e:	b09d      	sub	sp, #116	; 0x74
 800c150:	4614      	mov	r4, r2
 800c152:	4698      	mov	r8, r3
 800c154:	4606      	mov	r6, r0
 800c156:	b118      	cbz	r0, 800c160 <_vfiprintf_r+0x18>
 800c158:	6983      	ldr	r3, [r0, #24]
 800c15a:	b90b      	cbnz	r3, 800c160 <_vfiprintf_r+0x18>
 800c15c:	f000 fb06 	bl	800c76c <__sinit>
 800c160:	4b89      	ldr	r3, [pc, #548]	; (800c388 <_vfiprintf_r+0x240>)
 800c162:	429d      	cmp	r5, r3
 800c164:	d11b      	bne.n	800c19e <_vfiprintf_r+0x56>
 800c166:	6875      	ldr	r5, [r6, #4]
 800c168:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c16a:	07d9      	lsls	r1, r3, #31
 800c16c:	d405      	bmi.n	800c17a <_vfiprintf_r+0x32>
 800c16e:	89ab      	ldrh	r3, [r5, #12]
 800c170:	059a      	lsls	r2, r3, #22
 800c172:	d402      	bmi.n	800c17a <_vfiprintf_r+0x32>
 800c174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c176:	f000 fb97 	bl	800c8a8 <__retarget_lock_acquire_recursive>
 800c17a:	89ab      	ldrh	r3, [r5, #12]
 800c17c:	071b      	lsls	r3, r3, #28
 800c17e:	d501      	bpl.n	800c184 <_vfiprintf_r+0x3c>
 800c180:	692b      	ldr	r3, [r5, #16]
 800c182:	b9eb      	cbnz	r3, 800c1c0 <_vfiprintf_r+0x78>
 800c184:	4629      	mov	r1, r5
 800c186:	4630      	mov	r0, r6
 800c188:	f000 f960 	bl	800c44c <__swsetup_r>
 800c18c:	b1c0      	cbz	r0, 800c1c0 <_vfiprintf_r+0x78>
 800c18e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c190:	07dc      	lsls	r4, r3, #31
 800c192:	d50e      	bpl.n	800c1b2 <_vfiprintf_r+0x6a>
 800c194:	f04f 30ff 	mov.w	r0, #4294967295
 800c198:	b01d      	add	sp, #116	; 0x74
 800c19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c19e:	4b7b      	ldr	r3, [pc, #492]	; (800c38c <_vfiprintf_r+0x244>)
 800c1a0:	429d      	cmp	r5, r3
 800c1a2:	d101      	bne.n	800c1a8 <_vfiprintf_r+0x60>
 800c1a4:	68b5      	ldr	r5, [r6, #8]
 800c1a6:	e7df      	b.n	800c168 <_vfiprintf_r+0x20>
 800c1a8:	4b79      	ldr	r3, [pc, #484]	; (800c390 <_vfiprintf_r+0x248>)
 800c1aa:	429d      	cmp	r5, r3
 800c1ac:	bf08      	it	eq
 800c1ae:	68f5      	ldreq	r5, [r6, #12]
 800c1b0:	e7da      	b.n	800c168 <_vfiprintf_r+0x20>
 800c1b2:	89ab      	ldrh	r3, [r5, #12]
 800c1b4:	0598      	lsls	r0, r3, #22
 800c1b6:	d4ed      	bmi.n	800c194 <_vfiprintf_r+0x4c>
 800c1b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1ba:	f000 fb76 	bl	800c8aa <__retarget_lock_release_recursive>
 800c1be:	e7e9      	b.n	800c194 <_vfiprintf_r+0x4c>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1c4:	2320      	movs	r3, #32
 800c1c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1ce:	2330      	movs	r3, #48	; 0x30
 800c1d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c394 <_vfiprintf_r+0x24c>
 800c1d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1d8:	f04f 0901 	mov.w	r9, #1
 800c1dc:	4623      	mov	r3, r4
 800c1de:	469a      	mov	sl, r3
 800c1e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1e4:	b10a      	cbz	r2, 800c1ea <_vfiprintf_r+0xa2>
 800c1e6:	2a25      	cmp	r2, #37	; 0x25
 800c1e8:	d1f9      	bne.n	800c1de <_vfiprintf_r+0x96>
 800c1ea:	ebba 0b04 	subs.w	fp, sl, r4
 800c1ee:	d00b      	beq.n	800c208 <_vfiprintf_r+0xc0>
 800c1f0:	465b      	mov	r3, fp
 800c1f2:	4622      	mov	r2, r4
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f7ff ff94 	bl	800c124 <__sfputs_r>
 800c1fc:	3001      	adds	r0, #1
 800c1fe:	f000 80aa 	beq.w	800c356 <_vfiprintf_r+0x20e>
 800c202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c204:	445a      	add	r2, fp
 800c206:	9209      	str	r2, [sp, #36]	; 0x24
 800c208:	f89a 3000 	ldrb.w	r3, [sl]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 80a2 	beq.w	800c356 <_vfiprintf_r+0x20e>
 800c212:	2300      	movs	r3, #0
 800c214:	f04f 32ff 	mov.w	r2, #4294967295
 800c218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c21c:	f10a 0a01 	add.w	sl, sl, #1
 800c220:	9304      	str	r3, [sp, #16]
 800c222:	9307      	str	r3, [sp, #28]
 800c224:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c228:	931a      	str	r3, [sp, #104]	; 0x68
 800c22a:	4654      	mov	r4, sl
 800c22c:	2205      	movs	r2, #5
 800c22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c232:	4858      	ldr	r0, [pc, #352]	; (800c394 <_vfiprintf_r+0x24c>)
 800c234:	f7f3 ffdc 	bl	80001f0 <memchr>
 800c238:	9a04      	ldr	r2, [sp, #16]
 800c23a:	b9d8      	cbnz	r0, 800c274 <_vfiprintf_r+0x12c>
 800c23c:	06d1      	lsls	r1, r2, #27
 800c23e:	bf44      	itt	mi
 800c240:	2320      	movmi	r3, #32
 800c242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c246:	0713      	lsls	r3, r2, #28
 800c248:	bf44      	itt	mi
 800c24a:	232b      	movmi	r3, #43	; 0x2b
 800c24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c250:	f89a 3000 	ldrb.w	r3, [sl]
 800c254:	2b2a      	cmp	r3, #42	; 0x2a
 800c256:	d015      	beq.n	800c284 <_vfiprintf_r+0x13c>
 800c258:	9a07      	ldr	r2, [sp, #28]
 800c25a:	4654      	mov	r4, sl
 800c25c:	2000      	movs	r0, #0
 800c25e:	f04f 0c0a 	mov.w	ip, #10
 800c262:	4621      	mov	r1, r4
 800c264:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c268:	3b30      	subs	r3, #48	; 0x30
 800c26a:	2b09      	cmp	r3, #9
 800c26c:	d94e      	bls.n	800c30c <_vfiprintf_r+0x1c4>
 800c26e:	b1b0      	cbz	r0, 800c29e <_vfiprintf_r+0x156>
 800c270:	9207      	str	r2, [sp, #28]
 800c272:	e014      	b.n	800c29e <_vfiprintf_r+0x156>
 800c274:	eba0 0308 	sub.w	r3, r0, r8
 800c278:	fa09 f303 	lsl.w	r3, r9, r3
 800c27c:	4313      	orrs	r3, r2
 800c27e:	9304      	str	r3, [sp, #16]
 800c280:	46a2      	mov	sl, r4
 800c282:	e7d2      	b.n	800c22a <_vfiprintf_r+0xe2>
 800c284:	9b03      	ldr	r3, [sp, #12]
 800c286:	1d19      	adds	r1, r3, #4
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	9103      	str	r1, [sp, #12]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	bfbb      	ittet	lt
 800c290:	425b      	neglt	r3, r3
 800c292:	f042 0202 	orrlt.w	r2, r2, #2
 800c296:	9307      	strge	r3, [sp, #28]
 800c298:	9307      	strlt	r3, [sp, #28]
 800c29a:	bfb8      	it	lt
 800c29c:	9204      	strlt	r2, [sp, #16]
 800c29e:	7823      	ldrb	r3, [r4, #0]
 800c2a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c2a2:	d10c      	bne.n	800c2be <_vfiprintf_r+0x176>
 800c2a4:	7863      	ldrb	r3, [r4, #1]
 800c2a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c2a8:	d135      	bne.n	800c316 <_vfiprintf_r+0x1ce>
 800c2aa:	9b03      	ldr	r3, [sp, #12]
 800c2ac:	1d1a      	adds	r2, r3, #4
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	9203      	str	r2, [sp, #12]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	bfb8      	it	lt
 800c2b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2ba:	3402      	adds	r4, #2
 800c2bc:	9305      	str	r3, [sp, #20]
 800c2be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c3a4 <_vfiprintf_r+0x25c>
 800c2c2:	7821      	ldrb	r1, [r4, #0]
 800c2c4:	2203      	movs	r2, #3
 800c2c6:	4650      	mov	r0, sl
 800c2c8:	f7f3 ff92 	bl	80001f0 <memchr>
 800c2cc:	b140      	cbz	r0, 800c2e0 <_vfiprintf_r+0x198>
 800c2ce:	2340      	movs	r3, #64	; 0x40
 800c2d0:	eba0 000a 	sub.w	r0, r0, sl
 800c2d4:	fa03 f000 	lsl.w	r0, r3, r0
 800c2d8:	9b04      	ldr	r3, [sp, #16]
 800c2da:	4303      	orrs	r3, r0
 800c2dc:	3401      	adds	r4, #1
 800c2de:	9304      	str	r3, [sp, #16]
 800c2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2e4:	482c      	ldr	r0, [pc, #176]	; (800c398 <_vfiprintf_r+0x250>)
 800c2e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2ea:	2206      	movs	r2, #6
 800c2ec:	f7f3 ff80 	bl	80001f0 <memchr>
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	d03f      	beq.n	800c374 <_vfiprintf_r+0x22c>
 800c2f4:	4b29      	ldr	r3, [pc, #164]	; (800c39c <_vfiprintf_r+0x254>)
 800c2f6:	bb1b      	cbnz	r3, 800c340 <_vfiprintf_r+0x1f8>
 800c2f8:	9b03      	ldr	r3, [sp, #12]
 800c2fa:	3307      	adds	r3, #7
 800c2fc:	f023 0307 	bic.w	r3, r3, #7
 800c300:	3308      	adds	r3, #8
 800c302:	9303      	str	r3, [sp, #12]
 800c304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c306:	443b      	add	r3, r7
 800c308:	9309      	str	r3, [sp, #36]	; 0x24
 800c30a:	e767      	b.n	800c1dc <_vfiprintf_r+0x94>
 800c30c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c310:	460c      	mov	r4, r1
 800c312:	2001      	movs	r0, #1
 800c314:	e7a5      	b.n	800c262 <_vfiprintf_r+0x11a>
 800c316:	2300      	movs	r3, #0
 800c318:	3401      	adds	r4, #1
 800c31a:	9305      	str	r3, [sp, #20]
 800c31c:	4619      	mov	r1, r3
 800c31e:	f04f 0c0a 	mov.w	ip, #10
 800c322:	4620      	mov	r0, r4
 800c324:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c328:	3a30      	subs	r2, #48	; 0x30
 800c32a:	2a09      	cmp	r2, #9
 800c32c:	d903      	bls.n	800c336 <_vfiprintf_r+0x1ee>
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d0c5      	beq.n	800c2be <_vfiprintf_r+0x176>
 800c332:	9105      	str	r1, [sp, #20]
 800c334:	e7c3      	b.n	800c2be <_vfiprintf_r+0x176>
 800c336:	fb0c 2101 	mla	r1, ip, r1, r2
 800c33a:	4604      	mov	r4, r0
 800c33c:	2301      	movs	r3, #1
 800c33e:	e7f0      	b.n	800c322 <_vfiprintf_r+0x1da>
 800c340:	ab03      	add	r3, sp, #12
 800c342:	9300      	str	r3, [sp, #0]
 800c344:	462a      	mov	r2, r5
 800c346:	4b16      	ldr	r3, [pc, #88]	; (800c3a0 <_vfiprintf_r+0x258>)
 800c348:	a904      	add	r1, sp, #16
 800c34a:	4630      	mov	r0, r6
 800c34c:	f7fc f84a 	bl	80083e4 <_printf_float>
 800c350:	4607      	mov	r7, r0
 800c352:	1c78      	adds	r0, r7, #1
 800c354:	d1d6      	bne.n	800c304 <_vfiprintf_r+0x1bc>
 800c356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c358:	07d9      	lsls	r1, r3, #31
 800c35a:	d405      	bmi.n	800c368 <_vfiprintf_r+0x220>
 800c35c:	89ab      	ldrh	r3, [r5, #12]
 800c35e:	059a      	lsls	r2, r3, #22
 800c360:	d402      	bmi.n	800c368 <_vfiprintf_r+0x220>
 800c362:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c364:	f000 faa1 	bl	800c8aa <__retarget_lock_release_recursive>
 800c368:	89ab      	ldrh	r3, [r5, #12]
 800c36a:	065b      	lsls	r3, r3, #25
 800c36c:	f53f af12 	bmi.w	800c194 <_vfiprintf_r+0x4c>
 800c370:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c372:	e711      	b.n	800c198 <_vfiprintf_r+0x50>
 800c374:	ab03      	add	r3, sp, #12
 800c376:	9300      	str	r3, [sp, #0]
 800c378:	462a      	mov	r2, r5
 800c37a:	4b09      	ldr	r3, [pc, #36]	; (800c3a0 <_vfiprintf_r+0x258>)
 800c37c:	a904      	add	r1, sp, #16
 800c37e:	4630      	mov	r0, r6
 800c380:	f7fc fad4 	bl	800892c <_printf_i>
 800c384:	e7e4      	b.n	800c350 <_vfiprintf_r+0x208>
 800c386:	bf00      	nop
 800c388:	0800e664 	.word	0x0800e664
 800c38c:	0800e684 	.word	0x0800e684
 800c390:	0800e644 	.word	0x0800e644
 800c394:	0800e5f4 	.word	0x0800e5f4
 800c398:	0800e5fe 	.word	0x0800e5fe
 800c39c:	080083e5 	.word	0x080083e5
 800c3a0:	0800c125 	.word	0x0800c125
 800c3a4:	0800e5fa 	.word	0x0800e5fa

0800c3a8 <__swbuf_r>:
 800c3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3aa:	460e      	mov	r6, r1
 800c3ac:	4614      	mov	r4, r2
 800c3ae:	4605      	mov	r5, r0
 800c3b0:	b118      	cbz	r0, 800c3ba <__swbuf_r+0x12>
 800c3b2:	6983      	ldr	r3, [r0, #24]
 800c3b4:	b90b      	cbnz	r3, 800c3ba <__swbuf_r+0x12>
 800c3b6:	f000 f9d9 	bl	800c76c <__sinit>
 800c3ba:	4b21      	ldr	r3, [pc, #132]	; (800c440 <__swbuf_r+0x98>)
 800c3bc:	429c      	cmp	r4, r3
 800c3be:	d12b      	bne.n	800c418 <__swbuf_r+0x70>
 800c3c0:	686c      	ldr	r4, [r5, #4]
 800c3c2:	69a3      	ldr	r3, [r4, #24]
 800c3c4:	60a3      	str	r3, [r4, #8]
 800c3c6:	89a3      	ldrh	r3, [r4, #12]
 800c3c8:	071a      	lsls	r2, r3, #28
 800c3ca:	d52f      	bpl.n	800c42c <__swbuf_r+0x84>
 800c3cc:	6923      	ldr	r3, [r4, #16]
 800c3ce:	b36b      	cbz	r3, 800c42c <__swbuf_r+0x84>
 800c3d0:	6923      	ldr	r3, [r4, #16]
 800c3d2:	6820      	ldr	r0, [r4, #0]
 800c3d4:	1ac0      	subs	r0, r0, r3
 800c3d6:	6963      	ldr	r3, [r4, #20]
 800c3d8:	b2f6      	uxtb	r6, r6
 800c3da:	4283      	cmp	r3, r0
 800c3dc:	4637      	mov	r7, r6
 800c3de:	dc04      	bgt.n	800c3ea <__swbuf_r+0x42>
 800c3e0:	4621      	mov	r1, r4
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	f000 f92e 	bl	800c644 <_fflush_r>
 800c3e8:	bb30      	cbnz	r0, 800c438 <__swbuf_r+0x90>
 800c3ea:	68a3      	ldr	r3, [r4, #8]
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	60a3      	str	r3, [r4, #8]
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	1c5a      	adds	r2, r3, #1
 800c3f4:	6022      	str	r2, [r4, #0]
 800c3f6:	701e      	strb	r6, [r3, #0]
 800c3f8:	6963      	ldr	r3, [r4, #20]
 800c3fa:	3001      	adds	r0, #1
 800c3fc:	4283      	cmp	r3, r0
 800c3fe:	d004      	beq.n	800c40a <__swbuf_r+0x62>
 800c400:	89a3      	ldrh	r3, [r4, #12]
 800c402:	07db      	lsls	r3, r3, #31
 800c404:	d506      	bpl.n	800c414 <__swbuf_r+0x6c>
 800c406:	2e0a      	cmp	r6, #10
 800c408:	d104      	bne.n	800c414 <__swbuf_r+0x6c>
 800c40a:	4621      	mov	r1, r4
 800c40c:	4628      	mov	r0, r5
 800c40e:	f000 f919 	bl	800c644 <_fflush_r>
 800c412:	b988      	cbnz	r0, 800c438 <__swbuf_r+0x90>
 800c414:	4638      	mov	r0, r7
 800c416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c418:	4b0a      	ldr	r3, [pc, #40]	; (800c444 <__swbuf_r+0x9c>)
 800c41a:	429c      	cmp	r4, r3
 800c41c:	d101      	bne.n	800c422 <__swbuf_r+0x7a>
 800c41e:	68ac      	ldr	r4, [r5, #8]
 800c420:	e7cf      	b.n	800c3c2 <__swbuf_r+0x1a>
 800c422:	4b09      	ldr	r3, [pc, #36]	; (800c448 <__swbuf_r+0xa0>)
 800c424:	429c      	cmp	r4, r3
 800c426:	bf08      	it	eq
 800c428:	68ec      	ldreq	r4, [r5, #12]
 800c42a:	e7ca      	b.n	800c3c2 <__swbuf_r+0x1a>
 800c42c:	4621      	mov	r1, r4
 800c42e:	4628      	mov	r0, r5
 800c430:	f000 f80c 	bl	800c44c <__swsetup_r>
 800c434:	2800      	cmp	r0, #0
 800c436:	d0cb      	beq.n	800c3d0 <__swbuf_r+0x28>
 800c438:	f04f 37ff 	mov.w	r7, #4294967295
 800c43c:	e7ea      	b.n	800c414 <__swbuf_r+0x6c>
 800c43e:	bf00      	nop
 800c440:	0800e664 	.word	0x0800e664
 800c444:	0800e684 	.word	0x0800e684
 800c448:	0800e644 	.word	0x0800e644

0800c44c <__swsetup_r>:
 800c44c:	4b32      	ldr	r3, [pc, #200]	; (800c518 <__swsetup_r+0xcc>)
 800c44e:	b570      	push	{r4, r5, r6, lr}
 800c450:	681d      	ldr	r5, [r3, #0]
 800c452:	4606      	mov	r6, r0
 800c454:	460c      	mov	r4, r1
 800c456:	b125      	cbz	r5, 800c462 <__swsetup_r+0x16>
 800c458:	69ab      	ldr	r3, [r5, #24]
 800c45a:	b913      	cbnz	r3, 800c462 <__swsetup_r+0x16>
 800c45c:	4628      	mov	r0, r5
 800c45e:	f000 f985 	bl	800c76c <__sinit>
 800c462:	4b2e      	ldr	r3, [pc, #184]	; (800c51c <__swsetup_r+0xd0>)
 800c464:	429c      	cmp	r4, r3
 800c466:	d10f      	bne.n	800c488 <__swsetup_r+0x3c>
 800c468:	686c      	ldr	r4, [r5, #4]
 800c46a:	89a3      	ldrh	r3, [r4, #12]
 800c46c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c470:	0719      	lsls	r1, r3, #28
 800c472:	d42c      	bmi.n	800c4ce <__swsetup_r+0x82>
 800c474:	06dd      	lsls	r5, r3, #27
 800c476:	d411      	bmi.n	800c49c <__swsetup_r+0x50>
 800c478:	2309      	movs	r3, #9
 800c47a:	6033      	str	r3, [r6, #0]
 800c47c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c480:	81a3      	strh	r3, [r4, #12]
 800c482:	f04f 30ff 	mov.w	r0, #4294967295
 800c486:	e03e      	b.n	800c506 <__swsetup_r+0xba>
 800c488:	4b25      	ldr	r3, [pc, #148]	; (800c520 <__swsetup_r+0xd4>)
 800c48a:	429c      	cmp	r4, r3
 800c48c:	d101      	bne.n	800c492 <__swsetup_r+0x46>
 800c48e:	68ac      	ldr	r4, [r5, #8]
 800c490:	e7eb      	b.n	800c46a <__swsetup_r+0x1e>
 800c492:	4b24      	ldr	r3, [pc, #144]	; (800c524 <__swsetup_r+0xd8>)
 800c494:	429c      	cmp	r4, r3
 800c496:	bf08      	it	eq
 800c498:	68ec      	ldreq	r4, [r5, #12]
 800c49a:	e7e6      	b.n	800c46a <__swsetup_r+0x1e>
 800c49c:	0758      	lsls	r0, r3, #29
 800c49e:	d512      	bpl.n	800c4c6 <__swsetup_r+0x7a>
 800c4a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4a2:	b141      	cbz	r1, 800c4b6 <__swsetup_r+0x6a>
 800c4a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4a8:	4299      	cmp	r1, r3
 800c4aa:	d002      	beq.n	800c4b2 <__swsetup_r+0x66>
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	f7ff fb27 	bl	800bb00 <_free_r>
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	6363      	str	r3, [r4, #52]	; 0x34
 800c4b6:	89a3      	ldrh	r3, [r4, #12]
 800c4b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c4bc:	81a3      	strh	r3, [r4, #12]
 800c4be:	2300      	movs	r3, #0
 800c4c0:	6063      	str	r3, [r4, #4]
 800c4c2:	6923      	ldr	r3, [r4, #16]
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	89a3      	ldrh	r3, [r4, #12]
 800c4c8:	f043 0308 	orr.w	r3, r3, #8
 800c4cc:	81a3      	strh	r3, [r4, #12]
 800c4ce:	6923      	ldr	r3, [r4, #16]
 800c4d0:	b94b      	cbnz	r3, 800c4e6 <__swsetup_r+0x9a>
 800c4d2:	89a3      	ldrh	r3, [r4, #12]
 800c4d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c4d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4dc:	d003      	beq.n	800c4e6 <__swsetup_r+0x9a>
 800c4de:	4621      	mov	r1, r4
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	f000 fa09 	bl	800c8f8 <__smakebuf_r>
 800c4e6:	89a0      	ldrh	r0, [r4, #12]
 800c4e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4ec:	f010 0301 	ands.w	r3, r0, #1
 800c4f0:	d00a      	beq.n	800c508 <__swsetup_r+0xbc>
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	60a3      	str	r3, [r4, #8]
 800c4f6:	6963      	ldr	r3, [r4, #20]
 800c4f8:	425b      	negs	r3, r3
 800c4fa:	61a3      	str	r3, [r4, #24]
 800c4fc:	6923      	ldr	r3, [r4, #16]
 800c4fe:	b943      	cbnz	r3, 800c512 <__swsetup_r+0xc6>
 800c500:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c504:	d1ba      	bne.n	800c47c <__swsetup_r+0x30>
 800c506:	bd70      	pop	{r4, r5, r6, pc}
 800c508:	0781      	lsls	r1, r0, #30
 800c50a:	bf58      	it	pl
 800c50c:	6963      	ldrpl	r3, [r4, #20]
 800c50e:	60a3      	str	r3, [r4, #8]
 800c510:	e7f4      	b.n	800c4fc <__swsetup_r+0xb0>
 800c512:	2000      	movs	r0, #0
 800c514:	e7f7      	b.n	800c506 <__swsetup_r+0xba>
 800c516:	bf00      	nop
 800c518:	2000020c 	.word	0x2000020c
 800c51c:	0800e664 	.word	0x0800e664
 800c520:	0800e684 	.word	0x0800e684
 800c524:	0800e644 	.word	0x0800e644

0800c528 <abort>:
 800c528:	b508      	push	{r3, lr}
 800c52a:	2006      	movs	r0, #6
 800c52c:	f000 fa54 	bl	800c9d8 <raise>
 800c530:	2001      	movs	r0, #1
 800c532:	f7f6 fa99 	bl	8002a68 <_exit>
	...

0800c538 <__sflush_r>:
 800c538:	898a      	ldrh	r2, [r1, #12]
 800c53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c53e:	4605      	mov	r5, r0
 800c540:	0710      	lsls	r0, r2, #28
 800c542:	460c      	mov	r4, r1
 800c544:	d458      	bmi.n	800c5f8 <__sflush_r+0xc0>
 800c546:	684b      	ldr	r3, [r1, #4]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	dc05      	bgt.n	800c558 <__sflush_r+0x20>
 800c54c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c54e:	2b00      	cmp	r3, #0
 800c550:	dc02      	bgt.n	800c558 <__sflush_r+0x20>
 800c552:	2000      	movs	r0, #0
 800c554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c55a:	2e00      	cmp	r6, #0
 800c55c:	d0f9      	beq.n	800c552 <__sflush_r+0x1a>
 800c55e:	2300      	movs	r3, #0
 800c560:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c564:	682f      	ldr	r7, [r5, #0]
 800c566:	602b      	str	r3, [r5, #0]
 800c568:	d032      	beq.n	800c5d0 <__sflush_r+0x98>
 800c56a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c56c:	89a3      	ldrh	r3, [r4, #12]
 800c56e:	075a      	lsls	r2, r3, #29
 800c570:	d505      	bpl.n	800c57e <__sflush_r+0x46>
 800c572:	6863      	ldr	r3, [r4, #4]
 800c574:	1ac0      	subs	r0, r0, r3
 800c576:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c578:	b10b      	cbz	r3, 800c57e <__sflush_r+0x46>
 800c57a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c57c:	1ac0      	subs	r0, r0, r3
 800c57e:	2300      	movs	r3, #0
 800c580:	4602      	mov	r2, r0
 800c582:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c584:	6a21      	ldr	r1, [r4, #32]
 800c586:	4628      	mov	r0, r5
 800c588:	47b0      	blx	r6
 800c58a:	1c43      	adds	r3, r0, #1
 800c58c:	89a3      	ldrh	r3, [r4, #12]
 800c58e:	d106      	bne.n	800c59e <__sflush_r+0x66>
 800c590:	6829      	ldr	r1, [r5, #0]
 800c592:	291d      	cmp	r1, #29
 800c594:	d82c      	bhi.n	800c5f0 <__sflush_r+0xb8>
 800c596:	4a2a      	ldr	r2, [pc, #168]	; (800c640 <__sflush_r+0x108>)
 800c598:	40ca      	lsrs	r2, r1
 800c59a:	07d6      	lsls	r6, r2, #31
 800c59c:	d528      	bpl.n	800c5f0 <__sflush_r+0xb8>
 800c59e:	2200      	movs	r2, #0
 800c5a0:	6062      	str	r2, [r4, #4]
 800c5a2:	04d9      	lsls	r1, r3, #19
 800c5a4:	6922      	ldr	r2, [r4, #16]
 800c5a6:	6022      	str	r2, [r4, #0]
 800c5a8:	d504      	bpl.n	800c5b4 <__sflush_r+0x7c>
 800c5aa:	1c42      	adds	r2, r0, #1
 800c5ac:	d101      	bne.n	800c5b2 <__sflush_r+0x7a>
 800c5ae:	682b      	ldr	r3, [r5, #0]
 800c5b0:	b903      	cbnz	r3, 800c5b4 <__sflush_r+0x7c>
 800c5b2:	6560      	str	r0, [r4, #84]	; 0x54
 800c5b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5b6:	602f      	str	r7, [r5, #0]
 800c5b8:	2900      	cmp	r1, #0
 800c5ba:	d0ca      	beq.n	800c552 <__sflush_r+0x1a>
 800c5bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5c0:	4299      	cmp	r1, r3
 800c5c2:	d002      	beq.n	800c5ca <__sflush_r+0x92>
 800c5c4:	4628      	mov	r0, r5
 800c5c6:	f7ff fa9b 	bl	800bb00 <_free_r>
 800c5ca:	2000      	movs	r0, #0
 800c5cc:	6360      	str	r0, [r4, #52]	; 0x34
 800c5ce:	e7c1      	b.n	800c554 <__sflush_r+0x1c>
 800c5d0:	6a21      	ldr	r1, [r4, #32]
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	47b0      	blx	r6
 800c5d8:	1c41      	adds	r1, r0, #1
 800c5da:	d1c7      	bne.n	800c56c <__sflush_r+0x34>
 800c5dc:	682b      	ldr	r3, [r5, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d0c4      	beq.n	800c56c <__sflush_r+0x34>
 800c5e2:	2b1d      	cmp	r3, #29
 800c5e4:	d001      	beq.n	800c5ea <__sflush_r+0xb2>
 800c5e6:	2b16      	cmp	r3, #22
 800c5e8:	d101      	bne.n	800c5ee <__sflush_r+0xb6>
 800c5ea:	602f      	str	r7, [r5, #0]
 800c5ec:	e7b1      	b.n	800c552 <__sflush_r+0x1a>
 800c5ee:	89a3      	ldrh	r3, [r4, #12]
 800c5f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5f4:	81a3      	strh	r3, [r4, #12]
 800c5f6:	e7ad      	b.n	800c554 <__sflush_r+0x1c>
 800c5f8:	690f      	ldr	r7, [r1, #16]
 800c5fa:	2f00      	cmp	r7, #0
 800c5fc:	d0a9      	beq.n	800c552 <__sflush_r+0x1a>
 800c5fe:	0793      	lsls	r3, r2, #30
 800c600:	680e      	ldr	r6, [r1, #0]
 800c602:	bf08      	it	eq
 800c604:	694b      	ldreq	r3, [r1, #20]
 800c606:	600f      	str	r7, [r1, #0]
 800c608:	bf18      	it	ne
 800c60a:	2300      	movne	r3, #0
 800c60c:	eba6 0807 	sub.w	r8, r6, r7
 800c610:	608b      	str	r3, [r1, #8]
 800c612:	f1b8 0f00 	cmp.w	r8, #0
 800c616:	dd9c      	ble.n	800c552 <__sflush_r+0x1a>
 800c618:	6a21      	ldr	r1, [r4, #32]
 800c61a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c61c:	4643      	mov	r3, r8
 800c61e:	463a      	mov	r2, r7
 800c620:	4628      	mov	r0, r5
 800c622:	47b0      	blx	r6
 800c624:	2800      	cmp	r0, #0
 800c626:	dc06      	bgt.n	800c636 <__sflush_r+0xfe>
 800c628:	89a3      	ldrh	r3, [r4, #12]
 800c62a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c62e:	81a3      	strh	r3, [r4, #12]
 800c630:	f04f 30ff 	mov.w	r0, #4294967295
 800c634:	e78e      	b.n	800c554 <__sflush_r+0x1c>
 800c636:	4407      	add	r7, r0
 800c638:	eba8 0800 	sub.w	r8, r8, r0
 800c63c:	e7e9      	b.n	800c612 <__sflush_r+0xda>
 800c63e:	bf00      	nop
 800c640:	20400001 	.word	0x20400001

0800c644 <_fflush_r>:
 800c644:	b538      	push	{r3, r4, r5, lr}
 800c646:	690b      	ldr	r3, [r1, #16]
 800c648:	4605      	mov	r5, r0
 800c64a:	460c      	mov	r4, r1
 800c64c:	b913      	cbnz	r3, 800c654 <_fflush_r+0x10>
 800c64e:	2500      	movs	r5, #0
 800c650:	4628      	mov	r0, r5
 800c652:	bd38      	pop	{r3, r4, r5, pc}
 800c654:	b118      	cbz	r0, 800c65e <_fflush_r+0x1a>
 800c656:	6983      	ldr	r3, [r0, #24]
 800c658:	b90b      	cbnz	r3, 800c65e <_fflush_r+0x1a>
 800c65a:	f000 f887 	bl	800c76c <__sinit>
 800c65e:	4b14      	ldr	r3, [pc, #80]	; (800c6b0 <_fflush_r+0x6c>)
 800c660:	429c      	cmp	r4, r3
 800c662:	d11b      	bne.n	800c69c <_fflush_r+0x58>
 800c664:	686c      	ldr	r4, [r5, #4]
 800c666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d0ef      	beq.n	800c64e <_fflush_r+0xa>
 800c66e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c670:	07d0      	lsls	r0, r2, #31
 800c672:	d404      	bmi.n	800c67e <_fflush_r+0x3a>
 800c674:	0599      	lsls	r1, r3, #22
 800c676:	d402      	bmi.n	800c67e <_fflush_r+0x3a>
 800c678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c67a:	f000 f915 	bl	800c8a8 <__retarget_lock_acquire_recursive>
 800c67e:	4628      	mov	r0, r5
 800c680:	4621      	mov	r1, r4
 800c682:	f7ff ff59 	bl	800c538 <__sflush_r>
 800c686:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c688:	07da      	lsls	r2, r3, #31
 800c68a:	4605      	mov	r5, r0
 800c68c:	d4e0      	bmi.n	800c650 <_fflush_r+0xc>
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	059b      	lsls	r3, r3, #22
 800c692:	d4dd      	bmi.n	800c650 <_fflush_r+0xc>
 800c694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c696:	f000 f908 	bl	800c8aa <__retarget_lock_release_recursive>
 800c69a:	e7d9      	b.n	800c650 <_fflush_r+0xc>
 800c69c:	4b05      	ldr	r3, [pc, #20]	; (800c6b4 <_fflush_r+0x70>)
 800c69e:	429c      	cmp	r4, r3
 800c6a0:	d101      	bne.n	800c6a6 <_fflush_r+0x62>
 800c6a2:	68ac      	ldr	r4, [r5, #8]
 800c6a4:	e7df      	b.n	800c666 <_fflush_r+0x22>
 800c6a6:	4b04      	ldr	r3, [pc, #16]	; (800c6b8 <_fflush_r+0x74>)
 800c6a8:	429c      	cmp	r4, r3
 800c6aa:	bf08      	it	eq
 800c6ac:	68ec      	ldreq	r4, [r5, #12]
 800c6ae:	e7da      	b.n	800c666 <_fflush_r+0x22>
 800c6b0:	0800e664 	.word	0x0800e664
 800c6b4:	0800e684 	.word	0x0800e684
 800c6b8:	0800e644 	.word	0x0800e644

0800c6bc <std>:
 800c6bc:	2300      	movs	r3, #0
 800c6be:	b510      	push	{r4, lr}
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	e9c0 3300 	strd	r3, r3, [r0]
 800c6c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6ca:	6083      	str	r3, [r0, #8]
 800c6cc:	8181      	strh	r1, [r0, #12]
 800c6ce:	6643      	str	r3, [r0, #100]	; 0x64
 800c6d0:	81c2      	strh	r2, [r0, #14]
 800c6d2:	6183      	str	r3, [r0, #24]
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	2208      	movs	r2, #8
 800c6d8:	305c      	adds	r0, #92	; 0x5c
 800c6da:	f7fb fddb 	bl	8008294 <memset>
 800c6de:	4b05      	ldr	r3, [pc, #20]	; (800c6f4 <std+0x38>)
 800c6e0:	6263      	str	r3, [r4, #36]	; 0x24
 800c6e2:	4b05      	ldr	r3, [pc, #20]	; (800c6f8 <std+0x3c>)
 800c6e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c6e6:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <std+0x40>)
 800c6e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c6ea:	4b05      	ldr	r3, [pc, #20]	; (800c700 <std+0x44>)
 800c6ec:	6224      	str	r4, [r4, #32]
 800c6ee:	6323      	str	r3, [r4, #48]	; 0x30
 800c6f0:	bd10      	pop	{r4, pc}
 800c6f2:	bf00      	nop
 800c6f4:	0800ca11 	.word	0x0800ca11
 800c6f8:	0800ca33 	.word	0x0800ca33
 800c6fc:	0800ca6b 	.word	0x0800ca6b
 800c700:	0800ca8f 	.word	0x0800ca8f

0800c704 <_cleanup_r>:
 800c704:	4901      	ldr	r1, [pc, #4]	; (800c70c <_cleanup_r+0x8>)
 800c706:	f000 b8af 	b.w	800c868 <_fwalk_reent>
 800c70a:	bf00      	nop
 800c70c:	0800c645 	.word	0x0800c645

0800c710 <__sfmoreglue>:
 800c710:	b570      	push	{r4, r5, r6, lr}
 800c712:	2268      	movs	r2, #104	; 0x68
 800c714:	1e4d      	subs	r5, r1, #1
 800c716:	4355      	muls	r5, r2
 800c718:	460e      	mov	r6, r1
 800c71a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c71e:	f7ff fa5b 	bl	800bbd8 <_malloc_r>
 800c722:	4604      	mov	r4, r0
 800c724:	b140      	cbz	r0, 800c738 <__sfmoreglue+0x28>
 800c726:	2100      	movs	r1, #0
 800c728:	e9c0 1600 	strd	r1, r6, [r0]
 800c72c:	300c      	adds	r0, #12
 800c72e:	60a0      	str	r0, [r4, #8]
 800c730:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c734:	f7fb fdae 	bl	8008294 <memset>
 800c738:	4620      	mov	r0, r4
 800c73a:	bd70      	pop	{r4, r5, r6, pc}

0800c73c <__sfp_lock_acquire>:
 800c73c:	4801      	ldr	r0, [pc, #4]	; (800c744 <__sfp_lock_acquire+0x8>)
 800c73e:	f000 b8b3 	b.w	800c8a8 <__retarget_lock_acquire_recursive>
 800c742:	bf00      	nop
 800c744:	20000ed9 	.word	0x20000ed9

0800c748 <__sfp_lock_release>:
 800c748:	4801      	ldr	r0, [pc, #4]	; (800c750 <__sfp_lock_release+0x8>)
 800c74a:	f000 b8ae 	b.w	800c8aa <__retarget_lock_release_recursive>
 800c74e:	bf00      	nop
 800c750:	20000ed9 	.word	0x20000ed9

0800c754 <__sinit_lock_acquire>:
 800c754:	4801      	ldr	r0, [pc, #4]	; (800c75c <__sinit_lock_acquire+0x8>)
 800c756:	f000 b8a7 	b.w	800c8a8 <__retarget_lock_acquire_recursive>
 800c75a:	bf00      	nop
 800c75c:	20000eda 	.word	0x20000eda

0800c760 <__sinit_lock_release>:
 800c760:	4801      	ldr	r0, [pc, #4]	; (800c768 <__sinit_lock_release+0x8>)
 800c762:	f000 b8a2 	b.w	800c8aa <__retarget_lock_release_recursive>
 800c766:	bf00      	nop
 800c768:	20000eda 	.word	0x20000eda

0800c76c <__sinit>:
 800c76c:	b510      	push	{r4, lr}
 800c76e:	4604      	mov	r4, r0
 800c770:	f7ff fff0 	bl	800c754 <__sinit_lock_acquire>
 800c774:	69a3      	ldr	r3, [r4, #24]
 800c776:	b11b      	cbz	r3, 800c780 <__sinit+0x14>
 800c778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c77c:	f7ff bff0 	b.w	800c760 <__sinit_lock_release>
 800c780:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c784:	6523      	str	r3, [r4, #80]	; 0x50
 800c786:	4b13      	ldr	r3, [pc, #76]	; (800c7d4 <__sinit+0x68>)
 800c788:	4a13      	ldr	r2, [pc, #76]	; (800c7d8 <__sinit+0x6c>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c78e:	42a3      	cmp	r3, r4
 800c790:	bf04      	itt	eq
 800c792:	2301      	moveq	r3, #1
 800c794:	61a3      	streq	r3, [r4, #24]
 800c796:	4620      	mov	r0, r4
 800c798:	f000 f820 	bl	800c7dc <__sfp>
 800c79c:	6060      	str	r0, [r4, #4]
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f000 f81c 	bl	800c7dc <__sfp>
 800c7a4:	60a0      	str	r0, [r4, #8]
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f000 f818 	bl	800c7dc <__sfp>
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	60e0      	str	r0, [r4, #12]
 800c7b0:	2104      	movs	r1, #4
 800c7b2:	6860      	ldr	r0, [r4, #4]
 800c7b4:	f7ff ff82 	bl	800c6bc <std>
 800c7b8:	68a0      	ldr	r0, [r4, #8]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	2109      	movs	r1, #9
 800c7be:	f7ff ff7d 	bl	800c6bc <std>
 800c7c2:	68e0      	ldr	r0, [r4, #12]
 800c7c4:	2202      	movs	r2, #2
 800c7c6:	2112      	movs	r1, #18
 800c7c8:	f7ff ff78 	bl	800c6bc <std>
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	61a3      	str	r3, [r4, #24]
 800c7d0:	e7d2      	b.n	800c778 <__sinit+0xc>
 800c7d2:	bf00      	nop
 800c7d4:	0800e200 	.word	0x0800e200
 800c7d8:	0800c705 	.word	0x0800c705

0800c7dc <__sfp>:
 800c7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7de:	4607      	mov	r7, r0
 800c7e0:	f7ff ffac 	bl	800c73c <__sfp_lock_acquire>
 800c7e4:	4b1e      	ldr	r3, [pc, #120]	; (800c860 <__sfp+0x84>)
 800c7e6:	681e      	ldr	r6, [r3, #0]
 800c7e8:	69b3      	ldr	r3, [r6, #24]
 800c7ea:	b913      	cbnz	r3, 800c7f2 <__sfp+0x16>
 800c7ec:	4630      	mov	r0, r6
 800c7ee:	f7ff ffbd 	bl	800c76c <__sinit>
 800c7f2:	3648      	adds	r6, #72	; 0x48
 800c7f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	d503      	bpl.n	800c804 <__sfp+0x28>
 800c7fc:	6833      	ldr	r3, [r6, #0]
 800c7fe:	b30b      	cbz	r3, 800c844 <__sfp+0x68>
 800c800:	6836      	ldr	r6, [r6, #0]
 800c802:	e7f7      	b.n	800c7f4 <__sfp+0x18>
 800c804:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c808:	b9d5      	cbnz	r5, 800c840 <__sfp+0x64>
 800c80a:	4b16      	ldr	r3, [pc, #88]	; (800c864 <__sfp+0x88>)
 800c80c:	60e3      	str	r3, [r4, #12]
 800c80e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c812:	6665      	str	r5, [r4, #100]	; 0x64
 800c814:	f000 f847 	bl	800c8a6 <__retarget_lock_init_recursive>
 800c818:	f7ff ff96 	bl	800c748 <__sfp_lock_release>
 800c81c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c820:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c824:	6025      	str	r5, [r4, #0]
 800c826:	61a5      	str	r5, [r4, #24]
 800c828:	2208      	movs	r2, #8
 800c82a:	4629      	mov	r1, r5
 800c82c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c830:	f7fb fd30 	bl	8008294 <memset>
 800c834:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c838:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c83c:	4620      	mov	r0, r4
 800c83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c840:	3468      	adds	r4, #104	; 0x68
 800c842:	e7d9      	b.n	800c7f8 <__sfp+0x1c>
 800c844:	2104      	movs	r1, #4
 800c846:	4638      	mov	r0, r7
 800c848:	f7ff ff62 	bl	800c710 <__sfmoreglue>
 800c84c:	4604      	mov	r4, r0
 800c84e:	6030      	str	r0, [r6, #0]
 800c850:	2800      	cmp	r0, #0
 800c852:	d1d5      	bne.n	800c800 <__sfp+0x24>
 800c854:	f7ff ff78 	bl	800c748 <__sfp_lock_release>
 800c858:	230c      	movs	r3, #12
 800c85a:	603b      	str	r3, [r7, #0]
 800c85c:	e7ee      	b.n	800c83c <__sfp+0x60>
 800c85e:	bf00      	nop
 800c860:	0800e200 	.word	0x0800e200
 800c864:	ffff0001 	.word	0xffff0001

0800c868 <_fwalk_reent>:
 800c868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c86c:	4606      	mov	r6, r0
 800c86e:	4688      	mov	r8, r1
 800c870:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c874:	2700      	movs	r7, #0
 800c876:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c87a:	f1b9 0901 	subs.w	r9, r9, #1
 800c87e:	d505      	bpl.n	800c88c <_fwalk_reent+0x24>
 800c880:	6824      	ldr	r4, [r4, #0]
 800c882:	2c00      	cmp	r4, #0
 800c884:	d1f7      	bne.n	800c876 <_fwalk_reent+0xe>
 800c886:	4638      	mov	r0, r7
 800c888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c88c:	89ab      	ldrh	r3, [r5, #12]
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d907      	bls.n	800c8a2 <_fwalk_reent+0x3a>
 800c892:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c896:	3301      	adds	r3, #1
 800c898:	d003      	beq.n	800c8a2 <_fwalk_reent+0x3a>
 800c89a:	4629      	mov	r1, r5
 800c89c:	4630      	mov	r0, r6
 800c89e:	47c0      	blx	r8
 800c8a0:	4307      	orrs	r7, r0
 800c8a2:	3568      	adds	r5, #104	; 0x68
 800c8a4:	e7e9      	b.n	800c87a <_fwalk_reent+0x12>

0800c8a6 <__retarget_lock_init_recursive>:
 800c8a6:	4770      	bx	lr

0800c8a8 <__retarget_lock_acquire_recursive>:
 800c8a8:	4770      	bx	lr

0800c8aa <__retarget_lock_release_recursive>:
 800c8aa:	4770      	bx	lr

0800c8ac <__swhatbuf_r>:
 800c8ac:	b570      	push	{r4, r5, r6, lr}
 800c8ae:	460e      	mov	r6, r1
 800c8b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8b4:	2900      	cmp	r1, #0
 800c8b6:	b096      	sub	sp, #88	; 0x58
 800c8b8:	4614      	mov	r4, r2
 800c8ba:	461d      	mov	r5, r3
 800c8bc:	da08      	bge.n	800c8d0 <__swhatbuf_r+0x24>
 800c8be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	602a      	str	r2, [r5, #0]
 800c8c6:	061a      	lsls	r2, r3, #24
 800c8c8:	d410      	bmi.n	800c8ec <__swhatbuf_r+0x40>
 800c8ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8ce:	e00e      	b.n	800c8ee <__swhatbuf_r+0x42>
 800c8d0:	466a      	mov	r2, sp
 800c8d2:	f000 f903 	bl	800cadc <_fstat_r>
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	dbf1      	blt.n	800c8be <__swhatbuf_r+0x12>
 800c8da:	9a01      	ldr	r2, [sp, #4]
 800c8dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c8e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c8e4:	425a      	negs	r2, r3
 800c8e6:	415a      	adcs	r2, r3
 800c8e8:	602a      	str	r2, [r5, #0]
 800c8ea:	e7ee      	b.n	800c8ca <__swhatbuf_r+0x1e>
 800c8ec:	2340      	movs	r3, #64	; 0x40
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	6023      	str	r3, [r4, #0]
 800c8f2:	b016      	add	sp, #88	; 0x58
 800c8f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c8f8 <__smakebuf_r>:
 800c8f8:	898b      	ldrh	r3, [r1, #12]
 800c8fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c8fc:	079d      	lsls	r5, r3, #30
 800c8fe:	4606      	mov	r6, r0
 800c900:	460c      	mov	r4, r1
 800c902:	d507      	bpl.n	800c914 <__smakebuf_r+0x1c>
 800c904:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c908:	6023      	str	r3, [r4, #0]
 800c90a:	6123      	str	r3, [r4, #16]
 800c90c:	2301      	movs	r3, #1
 800c90e:	6163      	str	r3, [r4, #20]
 800c910:	b002      	add	sp, #8
 800c912:	bd70      	pop	{r4, r5, r6, pc}
 800c914:	ab01      	add	r3, sp, #4
 800c916:	466a      	mov	r2, sp
 800c918:	f7ff ffc8 	bl	800c8ac <__swhatbuf_r>
 800c91c:	9900      	ldr	r1, [sp, #0]
 800c91e:	4605      	mov	r5, r0
 800c920:	4630      	mov	r0, r6
 800c922:	f7ff f959 	bl	800bbd8 <_malloc_r>
 800c926:	b948      	cbnz	r0, 800c93c <__smakebuf_r+0x44>
 800c928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c92c:	059a      	lsls	r2, r3, #22
 800c92e:	d4ef      	bmi.n	800c910 <__smakebuf_r+0x18>
 800c930:	f023 0303 	bic.w	r3, r3, #3
 800c934:	f043 0302 	orr.w	r3, r3, #2
 800c938:	81a3      	strh	r3, [r4, #12]
 800c93a:	e7e3      	b.n	800c904 <__smakebuf_r+0xc>
 800c93c:	4b0d      	ldr	r3, [pc, #52]	; (800c974 <__smakebuf_r+0x7c>)
 800c93e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c940:	89a3      	ldrh	r3, [r4, #12]
 800c942:	6020      	str	r0, [r4, #0]
 800c944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c948:	81a3      	strh	r3, [r4, #12]
 800c94a:	9b00      	ldr	r3, [sp, #0]
 800c94c:	6163      	str	r3, [r4, #20]
 800c94e:	9b01      	ldr	r3, [sp, #4]
 800c950:	6120      	str	r0, [r4, #16]
 800c952:	b15b      	cbz	r3, 800c96c <__smakebuf_r+0x74>
 800c954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c958:	4630      	mov	r0, r6
 800c95a:	f000 f8d1 	bl	800cb00 <_isatty_r>
 800c95e:	b128      	cbz	r0, 800c96c <__smakebuf_r+0x74>
 800c960:	89a3      	ldrh	r3, [r4, #12]
 800c962:	f023 0303 	bic.w	r3, r3, #3
 800c966:	f043 0301 	orr.w	r3, r3, #1
 800c96a:	81a3      	strh	r3, [r4, #12]
 800c96c:	89a0      	ldrh	r0, [r4, #12]
 800c96e:	4305      	orrs	r5, r0
 800c970:	81a5      	strh	r5, [r4, #12]
 800c972:	e7cd      	b.n	800c910 <__smakebuf_r+0x18>
 800c974:	0800c705 	.word	0x0800c705

0800c978 <_malloc_usable_size_r>:
 800c978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c97c:	1f18      	subs	r0, r3, #4
 800c97e:	2b00      	cmp	r3, #0
 800c980:	bfbc      	itt	lt
 800c982:	580b      	ldrlt	r3, [r1, r0]
 800c984:	18c0      	addlt	r0, r0, r3
 800c986:	4770      	bx	lr

0800c988 <_raise_r>:
 800c988:	291f      	cmp	r1, #31
 800c98a:	b538      	push	{r3, r4, r5, lr}
 800c98c:	4604      	mov	r4, r0
 800c98e:	460d      	mov	r5, r1
 800c990:	d904      	bls.n	800c99c <_raise_r+0x14>
 800c992:	2316      	movs	r3, #22
 800c994:	6003      	str	r3, [r0, #0]
 800c996:	f04f 30ff 	mov.w	r0, #4294967295
 800c99a:	bd38      	pop	{r3, r4, r5, pc}
 800c99c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c99e:	b112      	cbz	r2, 800c9a6 <_raise_r+0x1e>
 800c9a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c9a4:	b94b      	cbnz	r3, 800c9ba <_raise_r+0x32>
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f000 f830 	bl	800ca0c <_getpid_r>
 800c9ac:	462a      	mov	r2, r5
 800c9ae:	4601      	mov	r1, r0
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9b6:	f000 b817 	b.w	800c9e8 <_kill_r>
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d00a      	beq.n	800c9d4 <_raise_r+0x4c>
 800c9be:	1c59      	adds	r1, r3, #1
 800c9c0:	d103      	bne.n	800c9ca <_raise_r+0x42>
 800c9c2:	2316      	movs	r3, #22
 800c9c4:	6003      	str	r3, [r0, #0]
 800c9c6:	2001      	movs	r0, #1
 800c9c8:	e7e7      	b.n	800c99a <_raise_r+0x12>
 800c9ca:	2400      	movs	r4, #0
 800c9cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	4798      	blx	r3
 800c9d4:	2000      	movs	r0, #0
 800c9d6:	e7e0      	b.n	800c99a <_raise_r+0x12>

0800c9d8 <raise>:
 800c9d8:	4b02      	ldr	r3, [pc, #8]	; (800c9e4 <raise+0xc>)
 800c9da:	4601      	mov	r1, r0
 800c9dc:	6818      	ldr	r0, [r3, #0]
 800c9de:	f7ff bfd3 	b.w	800c988 <_raise_r>
 800c9e2:	bf00      	nop
 800c9e4:	2000020c 	.word	0x2000020c

0800c9e8 <_kill_r>:
 800c9e8:	b538      	push	{r3, r4, r5, lr}
 800c9ea:	4d07      	ldr	r5, [pc, #28]	; (800ca08 <_kill_r+0x20>)
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	4608      	mov	r0, r1
 800c9f2:	4611      	mov	r1, r2
 800c9f4:	602b      	str	r3, [r5, #0]
 800c9f6:	f7f6 f827 	bl	8002a48 <_kill>
 800c9fa:	1c43      	adds	r3, r0, #1
 800c9fc:	d102      	bne.n	800ca04 <_kill_r+0x1c>
 800c9fe:	682b      	ldr	r3, [r5, #0]
 800ca00:	b103      	cbz	r3, 800ca04 <_kill_r+0x1c>
 800ca02:	6023      	str	r3, [r4, #0]
 800ca04:	bd38      	pop	{r3, r4, r5, pc}
 800ca06:	bf00      	nop
 800ca08:	20000ed4 	.word	0x20000ed4

0800ca0c <_getpid_r>:
 800ca0c:	f7f6 b814 	b.w	8002a38 <_getpid>

0800ca10 <__sread>:
 800ca10:	b510      	push	{r4, lr}
 800ca12:	460c      	mov	r4, r1
 800ca14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca18:	f000 f894 	bl	800cb44 <_read_r>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	bfab      	itete	ge
 800ca20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ca22:	89a3      	ldrhlt	r3, [r4, #12]
 800ca24:	181b      	addge	r3, r3, r0
 800ca26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ca2a:	bfac      	ite	ge
 800ca2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ca2e:	81a3      	strhlt	r3, [r4, #12]
 800ca30:	bd10      	pop	{r4, pc}

0800ca32 <__swrite>:
 800ca32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca36:	461f      	mov	r7, r3
 800ca38:	898b      	ldrh	r3, [r1, #12]
 800ca3a:	05db      	lsls	r3, r3, #23
 800ca3c:	4605      	mov	r5, r0
 800ca3e:	460c      	mov	r4, r1
 800ca40:	4616      	mov	r6, r2
 800ca42:	d505      	bpl.n	800ca50 <__swrite+0x1e>
 800ca44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca48:	2302      	movs	r3, #2
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f000 f868 	bl	800cb20 <_lseek_r>
 800ca50:	89a3      	ldrh	r3, [r4, #12]
 800ca52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca5a:	81a3      	strh	r3, [r4, #12]
 800ca5c:	4632      	mov	r2, r6
 800ca5e:	463b      	mov	r3, r7
 800ca60:	4628      	mov	r0, r5
 800ca62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca66:	f000 b817 	b.w	800ca98 <_write_r>

0800ca6a <__sseek>:
 800ca6a:	b510      	push	{r4, lr}
 800ca6c:	460c      	mov	r4, r1
 800ca6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca72:	f000 f855 	bl	800cb20 <_lseek_r>
 800ca76:	1c43      	adds	r3, r0, #1
 800ca78:	89a3      	ldrh	r3, [r4, #12]
 800ca7a:	bf15      	itete	ne
 800ca7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ca7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ca82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ca86:	81a3      	strheq	r3, [r4, #12]
 800ca88:	bf18      	it	ne
 800ca8a:	81a3      	strhne	r3, [r4, #12]
 800ca8c:	bd10      	pop	{r4, pc}

0800ca8e <__sclose>:
 800ca8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca92:	f000 b813 	b.w	800cabc <_close_r>
	...

0800ca98 <_write_r>:
 800ca98:	b538      	push	{r3, r4, r5, lr}
 800ca9a:	4d07      	ldr	r5, [pc, #28]	; (800cab8 <_write_r+0x20>)
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	4608      	mov	r0, r1
 800caa0:	4611      	mov	r1, r2
 800caa2:	2200      	movs	r2, #0
 800caa4:	602a      	str	r2, [r5, #0]
 800caa6:	461a      	mov	r2, r3
 800caa8:	f7f6 f805 	bl	8002ab6 <_write>
 800caac:	1c43      	adds	r3, r0, #1
 800caae:	d102      	bne.n	800cab6 <_write_r+0x1e>
 800cab0:	682b      	ldr	r3, [r5, #0]
 800cab2:	b103      	cbz	r3, 800cab6 <_write_r+0x1e>
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	bd38      	pop	{r3, r4, r5, pc}
 800cab8:	20000ed4 	.word	0x20000ed4

0800cabc <_close_r>:
 800cabc:	b538      	push	{r3, r4, r5, lr}
 800cabe:	4d06      	ldr	r5, [pc, #24]	; (800cad8 <_close_r+0x1c>)
 800cac0:	2300      	movs	r3, #0
 800cac2:	4604      	mov	r4, r0
 800cac4:	4608      	mov	r0, r1
 800cac6:	602b      	str	r3, [r5, #0]
 800cac8:	f7f6 f811 	bl	8002aee <_close>
 800cacc:	1c43      	adds	r3, r0, #1
 800cace:	d102      	bne.n	800cad6 <_close_r+0x1a>
 800cad0:	682b      	ldr	r3, [r5, #0]
 800cad2:	b103      	cbz	r3, 800cad6 <_close_r+0x1a>
 800cad4:	6023      	str	r3, [r4, #0]
 800cad6:	bd38      	pop	{r3, r4, r5, pc}
 800cad8:	20000ed4 	.word	0x20000ed4

0800cadc <_fstat_r>:
 800cadc:	b538      	push	{r3, r4, r5, lr}
 800cade:	4d07      	ldr	r5, [pc, #28]	; (800cafc <_fstat_r+0x20>)
 800cae0:	2300      	movs	r3, #0
 800cae2:	4604      	mov	r4, r0
 800cae4:	4608      	mov	r0, r1
 800cae6:	4611      	mov	r1, r2
 800cae8:	602b      	str	r3, [r5, #0]
 800caea:	f7f6 f80c 	bl	8002b06 <_fstat>
 800caee:	1c43      	adds	r3, r0, #1
 800caf0:	d102      	bne.n	800caf8 <_fstat_r+0x1c>
 800caf2:	682b      	ldr	r3, [r5, #0]
 800caf4:	b103      	cbz	r3, 800caf8 <_fstat_r+0x1c>
 800caf6:	6023      	str	r3, [r4, #0]
 800caf8:	bd38      	pop	{r3, r4, r5, pc}
 800cafa:	bf00      	nop
 800cafc:	20000ed4 	.word	0x20000ed4

0800cb00 <_isatty_r>:
 800cb00:	b538      	push	{r3, r4, r5, lr}
 800cb02:	4d06      	ldr	r5, [pc, #24]	; (800cb1c <_isatty_r+0x1c>)
 800cb04:	2300      	movs	r3, #0
 800cb06:	4604      	mov	r4, r0
 800cb08:	4608      	mov	r0, r1
 800cb0a:	602b      	str	r3, [r5, #0]
 800cb0c:	f7f6 f80b 	bl	8002b26 <_isatty>
 800cb10:	1c43      	adds	r3, r0, #1
 800cb12:	d102      	bne.n	800cb1a <_isatty_r+0x1a>
 800cb14:	682b      	ldr	r3, [r5, #0]
 800cb16:	b103      	cbz	r3, 800cb1a <_isatty_r+0x1a>
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	bd38      	pop	{r3, r4, r5, pc}
 800cb1c:	20000ed4 	.word	0x20000ed4

0800cb20 <_lseek_r>:
 800cb20:	b538      	push	{r3, r4, r5, lr}
 800cb22:	4d07      	ldr	r5, [pc, #28]	; (800cb40 <_lseek_r+0x20>)
 800cb24:	4604      	mov	r4, r0
 800cb26:	4608      	mov	r0, r1
 800cb28:	4611      	mov	r1, r2
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	602a      	str	r2, [r5, #0]
 800cb2e:	461a      	mov	r2, r3
 800cb30:	f7f6 f804 	bl	8002b3c <_lseek>
 800cb34:	1c43      	adds	r3, r0, #1
 800cb36:	d102      	bne.n	800cb3e <_lseek_r+0x1e>
 800cb38:	682b      	ldr	r3, [r5, #0]
 800cb3a:	b103      	cbz	r3, 800cb3e <_lseek_r+0x1e>
 800cb3c:	6023      	str	r3, [r4, #0]
 800cb3e:	bd38      	pop	{r3, r4, r5, pc}
 800cb40:	20000ed4 	.word	0x20000ed4

0800cb44 <_read_r>:
 800cb44:	b538      	push	{r3, r4, r5, lr}
 800cb46:	4d07      	ldr	r5, [pc, #28]	; (800cb64 <_read_r+0x20>)
 800cb48:	4604      	mov	r4, r0
 800cb4a:	4608      	mov	r0, r1
 800cb4c:	4611      	mov	r1, r2
 800cb4e:	2200      	movs	r2, #0
 800cb50:	602a      	str	r2, [r5, #0]
 800cb52:	461a      	mov	r2, r3
 800cb54:	f7f5 ff92 	bl	8002a7c <_read>
 800cb58:	1c43      	adds	r3, r0, #1
 800cb5a:	d102      	bne.n	800cb62 <_read_r+0x1e>
 800cb5c:	682b      	ldr	r3, [r5, #0]
 800cb5e:	b103      	cbz	r3, 800cb62 <_read_r+0x1e>
 800cb60:	6023      	str	r3, [r4, #0]
 800cb62:	bd38      	pop	{r3, r4, r5, pc}
 800cb64:	20000ed4 	.word	0x20000ed4

0800cb68 <atan>:
 800cb68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb6c:	ec55 4b10 	vmov	r4, r5, d0
 800cb70:	4bc3      	ldr	r3, [pc, #780]	; (800ce80 <atan+0x318>)
 800cb72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cb76:	429e      	cmp	r6, r3
 800cb78:	46ab      	mov	fp, r5
 800cb7a:	dd18      	ble.n	800cbae <atan+0x46>
 800cb7c:	4bc1      	ldr	r3, [pc, #772]	; (800ce84 <atan+0x31c>)
 800cb7e:	429e      	cmp	r6, r3
 800cb80:	dc01      	bgt.n	800cb86 <atan+0x1e>
 800cb82:	d109      	bne.n	800cb98 <atan+0x30>
 800cb84:	b144      	cbz	r4, 800cb98 <atan+0x30>
 800cb86:	4622      	mov	r2, r4
 800cb88:	462b      	mov	r3, r5
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	f7f3 fb85 	bl	800029c <__adddf3>
 800cb92:	4604      	mov	r4, r0
 800cb94:	460d      	mov	r5, r1
 800cb96:	e006      	b.n	800cba6 <atan+0x3e>
 800cb98:	f1bb 0f00 	cmp.w	fp, #0
 800cb9c:	f300 8131 	bgt.w	800ce02 <atan+0x29a>
 800cba0:	a59b      	add	r5, pc, #620	; (adr r5, 800ce10 <atan+0x2a8>)
 800cba2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cba6:	ec45 4b10 	vmov	d0, r4, r5
 800cbaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbae:	4bb6      	ldr	r3, [pc, #728]	; (800ce88 <atan+0x320>)
 800cbb0:	429e      	cmp	r6, r3
 800cbb2:	dc14      	bgt.n	800cbde <atan+0x76>
 800cbb4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cbb8:	429e      	cmp	r6, r3
 800cbba:	dc0d      	bgt.n	800cbd8 <atan+0x70>
 800cbbc:	a396      	add	r3, pc, #600	; (adr r3, 800ce18 <atan+0x2b0>)
 800cbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc2:	ee10 0a10 	vmov	r0, s0
 800cbc6:	4629      	mov	r1, r5
 800cbc8:	f7f3 fb68 	bl	800029c <__adddf3>
 800cbcc:	4baf      	ldr	r3, [pc, #700]	; (800ce8c <atan+0x324>)
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f7f3 ffaa 	bl	8000b28 <__aeabi_dcmpgt>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d1e6      	bne.n	800cba6 <atan+0x3e>
 800cbd8:	f04f 3aff 	mov.w	sl, #4294967295
 800cbdc:	e02b      	b.n	800cc36 <atan+0xce>
 800cbde:	f000 f9b7 	bl	800cf50 <fabs>
 800cbe2:	4bab      	ldr	r3, [pc, #684]	; (800ce90 <atan+0x328>)
 800cbe4:	429e      	cmp	r6, r3
 800cbe6:	ec55 4b10 	vmov	r4, r5, d0
 800cbea:	f300 80bf 	bgt.w	800cd6c <atan+0x204>
 800cbee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cbf2:	429e      	cmp	r6, r3
 800cbf4:	f300 80a0 	bgt.w	800cd38 <atan+0x1d0>
 800cbf8:	ee10 2a10 	vmov	r2, s0
 800cbfc:	ee10 0a10 	vmov	r0, s0
 800cc00:	462b      	mov	r3, r5
 800cc02:	4629      	mov	r1, r5
 800cc04:	f7f3 fb4a 	bl	800029c <__adddf3>
 800cc08:	4ba0      	ldr	r3, [pc, #640]	; (800ce8c <atan+0x324>)
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f7f3 fb44 	bl	8000298 <__aeabi_dsub>
 800cc10:	2200      	movs	r2, #0
 800cc12:	4606      	mov	r6, r0
 800cc14:	460f      	mov	r7, r1
 800cc16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	4629      	mov	r1, r5
 800cc1e:	f7f3 fb3d 	bl	800029c <__adddf3>
 800cc22:	4602      	mov	r2, r0
 800cc24:	460b      	mov	r3, r1
 800cc26:	4630      	mov	r0, r6
 800cc28:	4639      	mov	r1, r7
 800cc2a:	f7f3 fe17 	bl	800085c <__aeabi_ddiv>
 800cc2e:	f04f 0a00 	mov.w	sl, #0
 800cc32:	4604      	mov	r4, r0
 800cc34:	460d      	mov	r5, r1
 800cc36:	4622      	mov	r2, r4
 800cc38:	462b      	mov	r3, r5
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	4629      	mov	r1, r5
 800cc3e:	f7f3 fce3 	bl	8000608 <__aeabi_dmul>
 800cc42:	4602      	mov	r2, r0
 800cc44:	460b      	mov	r3, r1
 800cc46:	4680      	mov	r8, r0
 800cc48:	4689      	mov	r9, r1
 800cc4a:	f7f3 fcdd 	bl	8000608 <__aeabi_dmul>
 800cc4e:	a374      	add	r3, pc, #464	; (adr r3, 800ce20 <atan+0x2b8>)
 800cc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc54:	4606      	mov	r6, r0
 800cc56:	460f      	mov	r7, r1
 800cc58:	f7f3 fcd6 	bl	8000608 <__aeabi_dmul>
 800cc5c:	a372      	add	r3, pc, #456	; (adr r3, 800ce28 <atan+0x2c0>)
 800cc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc62:	f7f3 fb1b 	bl	800029c <__adddf3>
 800cc66:	4632      	mov	r2, r6
 800cc68:	463b      	mov	r3, r7
 800cc6a:	f7f3 fccd 	bl	8000608 <__aeabi_dmul>
 800cc6e:	a370      	add	r3, pc, #448	; (adr r3, 800ce30 <atan+0x2c8>)
 800cc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc74:	f7f3 fb12 	bl	800029c <__adddf3>
 800cc78:	4632      	mov	r2, r6
 800cc7a:	463b      	mov	r3, r7
 800cc7c:	f7f3 fcc4 	bl	8000608 <__aeabi_dmul>
 800cc80:	a36d      	add	r3, pc, #436	; (adr r3, 800ce38 <atan+0x2d0>)
 800cc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc86:	f7f3 fb09 	bl	800029c <__adddf3>
 800cc8a:	4632      	mov	r2, r6
 800cc8c:	463b      	mov	r3, r7
 800cc8e:	f7f3 fcbb 	bl	8000608 <__aeabi_dmul>
 800cc92:	a36b      	add	r3, pc, #428	; (adr r3, 800ce40 <atan+0x2d8>)
 800cc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc98:	f7f3 fb00 	bl	800029c <__adddf3>
 800cc9c:	4632      	mov	r2, r6
 800cc9e:	463b      	mov	r3, r7
 800cca0:	f7f3 fcb2 	bl	8000608 <__aeabi_dmul>
 800cca4:	a368      	add	r3, pc, #416	; (adr r3, 800ce48 <atan+0x2e0>)
 800cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccaa:	f7f3 faf7 	bl	800029c <__adddf3>
 800ccae:	4642      	mov	r2, r8
 800ccb0:	464b      	mov	r3, r9
 800ccb2:	f7f3 fca9 	bl	8000608 <__aeabi_dmul>
 800ccb6:	a366      	add	r3, pc, #408	; (adr r3, 800ce50 <atan+0x2e8>)
 800ccb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbc:	4680      	mov	r8, r0
 800ccbe:	4689      	mov	r9, r1
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	4639      	mov	r1, r7
 800ccc4:	f7f3 fca0 	bl	8000608 <__aeabi_dmul>
 800ccc8:	a363      	add	r3, pc, #396	; (adr r3, 800ce58 <atan+0x2f0>)
 800ccca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccce:	f7f3 fae3 	bl	8000298 <__aeabi_dsub>
 800ccd2:	4632      	mov	r2, r6
 800ccd4:	463b      	mov	r3, r7
 800ccd6:	f7f3 fc97 	bl	8000608 <__aeabi_dmul>
 800ccda:	a361      	add	r3, pc, #388	; (adr r3, 800ce60 <atan+0x2f8>)
 800ccdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce0:	f7f3 fada 	bl	8000298 <__aeabi_dsub>
 800cce4:	4632      	mov	r2, r6
 800cce6:	463b      	mov	r3, r7
 800cce8:	f7f3 fc8e 	bl	8000608 <__aeabi_dmul>
 800ccec:	a35e      	add	r3, pc, #376	; (adr r3, 800ce68 <atan+0x300>)
 800ccee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf2:	f7f3 fad1 	bl	8000298 <__aeabi_dsub>
 800ccf6:	4632      	mov	r2, r6
 800ccf8:	463b      	mov	r3, r7
 800ccfa:	f7f3 fc85 	bl	8000608 <__aeabi_dmul>
 800ccfe:	a35c      	add	r3, pc, #368	; (adr r3, 800ce70 <atan+0x308>)
 800cd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd04:	f7f3 fac8 	bl	8000298 <__aeabi_dsub>
 800cd08:	4632      	mov	r2, r6
 800cd0a:	463b      	mov	r3, r7
 800cd0c:	f7f3 fc7c 	bl	8000608 <__aeabi_dmul>
 800cd10:	4602      	mov	r2, r0
 800cd12:	460b      	mov	r3, r1
 800cd14:	4640      	mov	r0, r8
 800cd16:	4649      	mov	r1, r9
 800cd18:	f7f3 fac0 	bl	800029c <__adddf3>
 800cd1c:	4622      	mov	r2, r4
 800cd1e:	462b      	mov	r3, r5
 800cd20:	f7f3 fc72 	bl	8000608 <__aeabi_dmul>
 800cd24:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cd28:	4602      	mov	r2, r0
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	d14b      	bne.n	800cdc6 <atan+0x25e>
 800cd2e:	4620      	mov	r0, r4
 800cd30:	4629      	mov	r1, r5
 800cd32:	f7f3 fab1 	bl	8000298 <__aeabi_dsub>
 800cd36:	e72c      	b.n	800cb92 <atan+0x2a>
 800cd38:	ee10 0a10 	vmov	r0, s0
 800cd3c:	4b53      	ldr	r3, [pc, #332]	; (800ce8c <atan+0x324>)
 800cd3e:	2200      	movs	r2, #0
 800cd40:	4629      	mov	r1, r5
 800cd42:	f7f3 faa9 	bl	8000298 <__aeabi_dsub>
 800cd46:	4b51      	ldr	r3, [pc, #324]	; (800ce8c <atan+0x324>)
 800cd48:	4606      	mov	r6, r0
 800cd4a:	460f      	mov	r7, r1
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	4620      	mov	r0, r4
 800cd50:	4629      	mov	r1, r5
 800cd52:	f7f3 faa3 	bl	800029c <__adddf3>
 800cd56:	4602      	mov	r2, r0
 800cd58:	460b      	mov	r3, r1
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	4639      	mov	r1, r7
 800cd5e:	f7f3 fd7d 	bl	800085c <__aeabi_ddiv>
 800cd62:	f04f 0a01 	mov.w	sl, #1
 800cd66:	4604      	mov	r4, r0
 800cd68:	460d      	mov	r5, r1
 800cd6a:	e764      	b.n	800cc36 <atan+0xce>
 800cd6c:	4b49      	ldr	r3, [pc, #292]	; (800ce94 <atan+0x32c>)
 800cd6e:	429e      	cmp	r6, r3
 800cd70:	da1d      	bge.n	800cdae <atan+0x246>
 800cd72:	ee10 0a10 	vmov	r0, s0
 800cd76:	4b48      	ldr	r3, [pc, #288]	; (800ce98 <atan+0x330>)
 800cd78:	2200      	movs	r2, #0
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	f7f3 fa8c 	bl	8000298 <__aeabi_dsub>
 800cd80:	4b45      	ldr	r3, [pc, #276]	; (800ce98 <atan+0x330>)
 800cd82:	4606      	mov	r6, r0
 800cd84:	460f      	mov	r7, r1
 800cd86:	2200      	movs	r2, #0
 800cd88:	4620      	mov	r0, r4
 800cd8a:	4629      	mov	r1, r5
 800cd8c:	f7f3 fc3c 	bl	8000608 <__aeabi_dmul>
 800cd90:	4b3e      	ldr	r3, [pc, #248]	; (800ce8c <atan+0x324>)
 800cd92:	2200      	movs	r2, #0
 800cd94:	f7f3 fa82 	bl	800029c <__adddf3>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	460b      	mov	r3, r1
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	4639      	mov	r1, r7
 800cda0:	f7f3 fd5c 	bl	800085c <__aeabi_ddiv>
 800cda4:	f04f 0a02 	mov.w	sl, #2
 800cda8:	4604      	mov	r4, r0
 800cdaa:	460d      	mov	r5, r1
 800cdac:	e743      	b.n	800cc36 <atan+0xce>
 800cdae:	462b      	mov	r3, r5
 800cdb0:	ee10 2a10 	vmov	r2, s0
 800cdb4:	4939      	ldr	r1, [pc, #228]	; (800ce9c <atan+0x334>)
 800cdb6:	2000      	movs	r0, #0
 800cdb8:	f7f3 fd50 	bl	800085c <__aeabi_ddiv>
 800cdbc:	f04f 0a03 	mov.w	sl, #3
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	460d      	mov	r5, r1
 800cdc4:	e737      	b.n	800cc36 <atan+0xce>
 800cdc6:	4b36      	ldr	r3, [pc, #216]	; (800cea0 <atan+0x338>)
 800cdc8:	4e36      	ldr	r6, [pc, #216]	; (800cea4 <atan+0x33c>)
 800cdca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cdce:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800cdd2:	e9da 2300 	ldrd	r2, r3, [sl]
 800cdd6:	f7f3 fa5f 	bl	8000298 <__aeabi_dsub>
 800cdda:	4622      	mov	r2, r4
 800cddc:	462b      	mov	r3, r5
 800cdde:	f7f3 fa5b 	bl	8000298 <__aeabi_dsub>
 800cde2:	4602      	mov	r2, r0
 800cde4:	460b      	mov	r3, r1
 800cde6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cdea:	f7f3 fa55 	bl	8000298 <__aeabi_dsub>
 800cdee:	f1bb 0f00 	cmp.w	fp, #0
 800cdf2:	4604      	mov	r4, r0
 800cdf4:	460d      	mov	r5, r1
 800cdf6:	f6bf aed6 	bge.w	800cba6 <atan+0x3e>
 800cdfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdfe:	461d      	mov	r5, r3
 800ce00:	e6d1      	b.n	800cba6 <atan+0x3e>
 800ce02:	a51d      	add	r5, pc, #116	; (adr r5, 800ce78 <atan+0x310>)
 800ce04:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ce08:	e6cd      	b.n	800cba6 <atan+0x3e>
 800ce0a:	bf00      	nop
 800ce0c:	f3af 8000 	nop.w
 800ce10:	54442d18 	.word	0x54442d18
 800ce14:	bff921fb 	.word	0xbff921fb
 800ce18:	8800759c 	.word	0x8800759c
 800ce1c:	7e37e43c 	.word	0x7e37e43c
 800ce20:	e322da11 	.word	0xe322da11
 800ce24:	3f90ad3a 	.word	0x3f90ad3a
 800ce28:	24760deb 	.word	0x24760deb
 800ce2c:	3fa97b4b 	.word	0x3fa97b4b
 800ce30:	a0d03d51 	.word	0xa0d03d51
 800ce34:	3fb10d66 	.word	0x3fb10d66
 800ce38:	c54c206e 	.word	0xc54c206e
 800ce3c:	3fb745cd 	.word	0x3fb745cd
 800ce40:	920083ff 	.word	0x920083ff
 800ce44:	3fc24924 	.word	0x3fc24924
 800ce48:	5555550d 	.word	0x5555550d
 800ce4c:	3fd55555 	.word	0x3fd55555
 800ce50:	2c6a6c2f 	.word	0x2c6a6c2f
 800ce54:	bfa2b444 	.word	0xbfa2b444
 800ce58:	52defd9a 	.word	0x52defd9a
 800ce5c:	3fadde2d 	.word	0x3fadde2d
 800ce60:	af749a6d 	.word	0xaf749a6d
 800ce64:	3fb3b0f2 	.word	0x3fb3b0f2
 800ce68:	fe231671 	.word	0xfe231671
 800ce6c:	3fbc71c6 	.word	0x3fbc71c6
 800ce70:	9998ebc4 	.word	0x9998ebc4
 800ce74:	3fc99999 	.word	0x3fc99999
 800ce78:	54442d18 	.word	0x54442d18
 800ce7c:	3ff921fb 	.word	0x3ff921fb
 800ce80:	440fffff 	.word	0x440fffff
 800ce84:	7ff00000 	.word	0x7ff00000
 800ce88:	3fdbffff 	.word	0x3fdbffff
 800ce8c:	3ff00000 	.word	0x3ff00000
 800ce90:	3ff2ffff 	.word	0x3ff2ffff
 800ce94:	40038000 	.word	0x40038000
 800ce98:	3ff80000 	.word	0x3ff80000
 800ce9c:	bff00000 	.word	0xbff00000
 800cea0:	0800e6c8 	.word	0x0800e6c8
 800cea4:	0800e6a8 	.word	0x0800e6a8

0800cea8 <cos>:
 800cea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ceaa:	ec53 2b10 	vmov	r2, r3, d0
 800ceae:	4826      	ldr	r0, [pc, #152]	; (800cf48 <cos+0xa0>)
 800ceb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ceb4:	4281      	cmp	r1, r0
 800ceb6:	dc06      	bgt.n	800cec6 <cos+0x1e>
 800ceb8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800cf40 <cos+0x98>
 800cebc:	b005      	add	sp, #20
 800cebe:	f85d eb04 	ldr.w	lr, [sp], #4
 800cec2:	f000 bb95 	b.w	800d5f0 <__kernel_cos>
 800cec6:	4821      	ldr	r0, [pc, #132]	; (800cf4c <cos+0xa4>)
 800cec8:	4281      	cmp	r1, r0
 800ceca:	dd09      	ble.n	800cee0 <cos+0x38>
 800cecc:	ee10 0a10 	vmov	r0, s0
 800ced0:	4619      	mov	r1, r3
 800ced2:	f7f3 f9e1 	bl	8000298 <__aeabi_dsub>
 800ced6:	ec41 0b10 	vmov	d0, r0, r1
 800ceda:	b005      	add	sp, #20
 800cedc:	f85d fb04 	ldr.w	pc, [sp], #4
 800cee0:	4668      	mov	r0, sp
 800cee2:	f000 f8c5 	bl	800d070 <__ieee754_rem_pio2>
 800cee6:	f000 0003 	and.w	r0, r0, #3
 800ceea:	2801      	cmp	r0, #1
 800ceec:	d00b      	beq.n	800cf06 <cos+0x5e>
 800ceee:	2802      	cmp	r0, #2
 800cef0:	d016      	beq.n	800cf20 <cos+0x78>
 800cef2:	b9e0      	cbnz	r0, 800cf2e <cos+0x86>
 800cef4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cef8:	ed9d 0b00 	vldr	d0, [sp]
 800cefc:	f000 fb78 	bl	800d5f0 <__kernel_cos>
 800cf00:	ec51 0b10 	vmov	r0, r1, d0
 800cf04:	e7e7      	b.n	800ced6 <cos+0x2e>
 800cf06:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf0a:	ed9d 0b00 	vldr	d0, [sp]
 800cf0e:	f000 ff87 	bl	800de20 <__kernel_sin>
 800cf12:	ec53 2b10 	vmov	r2, r3, d0
 800cf16:	ee10 0a10 	vmov	r0, s0
 800cf1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cf1e:	e7da      	b.n	800ced6 <cos+0x2e>
 800cf20:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf24:	ed9d 0b00 	vldr	d0, [sp]
 800cf28:	f000 fb62 	bl	800d5f0 <__kernel_cos>
 800cf2c:	e7f1      	b.n	800cf12 <cos+0x6a>
 800cf2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf32:	ed9d 0b00 	vldr	d0, [sp]
 800cf36:	2001      	movs	r0, #1
 800cf38:	f000 ff72 	bl	800de20 <__kernel_sin>
 800cf3c:	e7e0      	b.n	800cf00 <cos+0x58>
 800cf3e:	bf00      	nop
	...
 800cf48:	3fe921fb 	.word	0x3fe921fb
 800cf4c:	7fefffff 	.word	0x7fefffff

0800cf50 <fabs>:
 800cf50:	ec51 0b10 	vmov	r0, r1, d0
 800cf54:	ee10 2a10 	vmov	r2, s0
 800cf58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cf5c:	ec43 2b10 	vmov	d0, r2, r3
 800cf60:	4770      	bx	lr
 800cf62:	0000      	movs	r0, r0
 800cf64:	0000      	movs	r0, r0
	...

0800cf68 <sin>:
 800cf68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf6a:	ec53 2b10 	vmov	r2, r3, d0
 800cf6e:	4828      	ldr	r0, [pc, #160]	; (800d010 <sin+0xa8>)
 800cf70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cf74:	4281      	cmp	r1, r0
 800cf76:	dc07      	bgt.n	800cf88 <sin+0x20>
 800cf78:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d008 <sin+0xa0>
 800cf7c:	2000      	movs	r0, #0
 800cf7e:	b005      	add	sp, #20
 800cf80:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf84:	f000 bf4c 	b.w	800de20 <__kernel_sin>
 800cf88:	4822      	ldr	r0, [pc, #136]	; (800d014 <sin+0xac>)
 800cf8a:	4281      	cmp	r1, r0
 800cf8c:	dd09      	ble.n	800cfa2 <sin+0x3a>
 800cf8e:	ee10 0a10 	vmov	r0, s0
 800cf92:	4619      	mov	r1, r3
 800cf94:	f7f3 f980 	bl	8000298 <__aeabi_dsub>
 800cf98:	ec41 0b10 	vmov	d0, r0, r1
 800cf9c:	b005      	add	sp, #20
 800cf9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cfa2:	4668      	mov	r0, sp
 800cfa4:	f000 f864 	bl	800d070 <__ieee754_rem_pio2>
 800cfa8:	f000 0003 	and.w	r0, r0, #3
 800cfac:	2801      	cmp	r0, #1
 800cfae:	d00c      	beq.n	800cfca <sin+0x62>
 800cfb0:	2802      	cmp	r0, #2
 800cfb2:	d011      	beq.n	800cfd8 <sin+0x70>
 800cfb4:	b9f0      	cbnz	r0, 800cff4 <sin+0x8c>
 800cfb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfba:	ed9d 0b00 	vldr	d0, [sp]
 800cfbe:	2001      	movs	r0, #1
 800cfc0:	f000 ff2e 	bl	800de20 <__kernel_sin>
 800cfc4:	ec51 0b10 	vmov	r0, r1, d0
 800cfc8:	e7e6      	b.n	800cf98 <sin+0x30>
 800cfca:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfce:	ed9d 0b00 	vldr	d0, [sp]
 800cfd2:	f000 fb0d 	bl	800d5f0 <__kernel_cos>
 800cfd6:	e7f5      	b.n	800cfc4 <sin+0x5c>
 800cfd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfdc:	ed9d 0b00 	vldr	d0, [sp]
 800cfe0:	2001      	movs	r0, #1
 800cfe2:	f000 ff1d 	bl	800de20 <__kernel_sin>
 800cfe6:	ec53 2b10 	vmov	r2, r3, d0
 800cfea:	ee10 0a10 	vmov	r0, s0
 800cfee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cff2:	e7d1      	b.n	800cf98 <sin+0x30>
 800cff4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cff8:	ed9d 0b00 	vldr	d0, [sp]
 800cffc:	f000 faf8 	bl	800d5f0 <__kernel_cos>
 800d000:	e7f1      	b.n	800cfe6 <sin+0x7e>
 800d002:	bf00      	nop
 800d004:	f3af 8000 	nop.w
	...
 800d010:	3fe921fb 	.word	0x3fe921fb
 800d014:	7fefffff 	.word	0x7fefffff

0800d018 <sqrt>:
 800d018:	b538      	push	{r3, r4, r5, lr}
 800d01a:	ed2d 8b02 	vpush	{d8}
 800d01e:	ec55 4b10 	vmov	r4, r5, d0
 800d022:	f000 fa31 	bl	800d488 <__ieee754_sqrt>
 800d026:	4622      	mov	r2, r4
 800d028:	462b      	mov	r3, r5
 800d02a:	4620      	mov	r0, r4
 800d02c:	4629      	mov	r1, r5
 800d02e:	eeb0 8a40 	vmov.f32	s16, s0
 800d032:	eef0 8a60 	vmov.f32	s17, s1
 800d036:	f7f3 fd81 	bl	8000b3c <__aeabi_dcmpun>
 800d03a:	b990      	cbnz	r0, 800d062 <sqrt+0x4a>
 800d03c:	2200      	movs	r2, #0
 800d03e:	2300      	movs	r3, #0
 800d040:	4620      	mov	r0, r4
 800d042:	4629      	mov	r1, r5
 800d044:	f7f3 fd52 	bl	8000aec <__aeabi_dcmplt>
 800d048:	b158      	cbz	r0, 800d062 <sqrt+0x4a>
 800d04a:	f7fb f8eb 	bl	8008224 <__errno>
 800d04e:	2321      	movs	r3, #33	; 0x21
 800d050:	6003      	str	r3, [r0, #0]
 800d052:	2200      	movs	r2, #0
 800d054:	2300      	movs	r3, #0
 800d056:	4610      	mov	r0, r2
 800d058:	4619      	mov	r1, r3
 800d05a:	f7f3 fbff 	bl	800085c <__aeabi_ddiv>
 800d05e:	ec41 0b18 	vmov	d8, r0, r1
 800d062:	eeb0 0a48 	vmov.f32	s0, s16
 800d066:	eef0 0a68 	vmov.f32	s1, s17
 800d06a:	ecbd 8b02 	vpop	{d8}
 800d06e:	bd38      	pop	{r3, r4, r5, pc}

0800d070 <__ieee754_rem_pio2>:
 800d070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d074:	ed2d 8b02 	vpush	{d8}
 800d078:	ec55 4b10 	vmov	r4, r5, d0
 800d07c:	4bca      	ldr	r3, [pc, #808]	; (800d3a8 <__ieee754_rem_pio2+0x338>)
 800d07e:	b08b      	sub	sp, #44	; 0x2c
 800d080:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d084:	4598      	cmp	r8, r3
 800d086:	4682      	mov	sl, r0
 800d088:	9502      	str	r5, [sp, #8]
 800d08a:	dc08      	bgt.n	800d09e <__ieee754_rem_pio2+0x2e>
 800d08c:	2200      	movs	r2, #0
 800d08e:	2300      	movs	r3, #0
 800d090:	ed80 0b00 	vstr	d0, [r0]
 800d094:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d098:	f04f 0b00 	mov.w	fp, #0
 800d09c:	e028      	b.n	800d0f0 <__ieee754_rem_pio2+0x80>
 800d09e:	4bc3      	ldr	r3, [pc, #780]	; (800d3ac <__ieee754_rem_pio2+0x33c>)
 800d0a0:	4598      	cmp	r8, r3
 800d0a2:	dc78      	bgt.n	800d196 <__ieee754_rem_pio2+0x126>
 800d0a4:	9b02      	ldr	r3, [sp, #8]
 800d0a6:	4ec2      	ldr	r6, [pc, #776]	; (800d3b0 <__ieee754_rem_pio2+0x340>)
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	ee10 0a10 	vmov	r0, s0
 800d0ae:	a3b0      	add	r3, pc, #704	; (adr r3, 800d370 <__ieee754_rem_pio2+0x300>)
 800d0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b4:	4629      	mov	r1, r5
 800d0b6:	dd39      	ble.n	800d12c <__ieee754_rem_pio2+0xbc>
 800d0b8:	f7f3 f8ee 	bl	8000298 <__aeabi_dsub>
 800d0bc:	45b0      	cmp	r8, r6
 800d0be:	4604      	mov	r4, r0
 800d0c0:	460d      	mov	r5, r1
 800d0c2:	d01b      	beq.n	800d0fc <__ieee754_rem_pio2+0x8c>
 800d0c4:	a3ac      	add	r3, pc, #688	; (adr r3, 800d378 <__ieee754_rem_pio2+0x308>)
 800d0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ca:	f7f3 f8e5 	bl	8000298 <__aeabi_dsub>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	e9ca 2300 	strd	r2, r3, [sl]
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	4629      	mov	r1, r5
 800d0da:	f7f3 f8dd 	bl	8000298 <__aeabi_dsub>
 800d0de:	a3a6      	add	r3, pc, #664	; (adr r3, 800d378 <__ieee754_rem_pio2+0x308>)
 800d0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e4:	f7f3 f8d8 	bl	8000298 <__aeabi_dsub>
 800d0e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d0ec:	f04f 0b01 	mov.w	fp, #1
 800d0f0:	4658      	mov	r0, fp
 800d0f2:	b00b      	add	sp, #44	; 0x2c
 800d0f4:	ecbd 8b02 	vpop	{d8}
 800d0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0fc:	a3a0      	add	r3, pc, #640	; (adr r3, 800d380 <__ieee754_rem_pio2+0x310>)
 800d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d102:	f7f3 f8c9 	bl	8000298 <__aeabi_dsub>
 800d106:	a3a0      	add	r3, pc, #640	; (adr r3, 800d388 <__ieee754_rem_pio2+0x318>)
 800d108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10c:	4604      	mov	r4, r0
 800d10e:	460d      	mov	r5, r1
 800d110:	f7f3 f8c2 	bl	8000298 <__aeabi_dsub>
 800d114:	4602      	mov	r2, r0
 800d116:	460b      	mov	r3, r1
 800d118:	e9ca 2300 	strd	r2, r3, [sl]
 800d11c:	4620      	mov	r0, r4
 800d11e:	4629      	mov	r1, r5
 800d120:	f7f3 f8ba 	bl	8000298 <__aeabi_dsub>
 800d124:	a398      	add	r3, pc, #608	; (adr r3, 800d388 <__ieee754_rem_pio2+0x318>)
 800d126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12a:	e7db      	b.n	800d0e4 <__ieee754_rem_pio2+0x74>
 800d12c:	f7f3 f8b6 	bl	800029c <__adddf3>
 800d130:	45b0      	cmp	r8, r6
 800d132:	4604      	mov	r4, r0
 800d134:	460d      	mov	r5, r1
 800d136:	d016      	beq.n	800d166 <__ieee754_rem_pio2+0xf6>
 800d138:	a38f      	add	r3, pc, #572	; (adr r3, 800d378 <__ieee754_rem_pio2+0x308>)
 800d13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13e:	f7f3 f8ad 	bl	800029c <__adddf3>
 800d142:	4602      	mov	r2, r0
 800d144:	460b      	mov	r3, r1
 800d146:	e9ca 2300 	strd	r2, r3, [sl]
 800d14a:	4620      	mov	r0, r4
 800d14c:	4629      	mov	r1, r5
 800d14e:	f7f3 f8a3 	bl	8000298 <__aeabi_dsub>
 800d152:	a389      	add	r3, pc, #548	; (adr r3, 800d378 <__ieee754_rem_pio2+0x308>)
 800d154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d158:	f7f3 f8a0 	bl	800029c <__adddf3>
 800d15c:	f04f 3bff 	mov.w	fp, #4294967295
 800d160:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d164:	e7c4      	b.n	800d0f0 <__ieee754_rem_pio2+0x80>
 800d166:	a386      	add	r3, pc, #536	; (adr r3, 800d380 <__ieee754_rem_pio2+0x310>)
 800d168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16c:	f7f3 f896 	bl	800029c <__adddf3>
 800d170:	a385      	add	r3, pc, #532	; (adr r3, 800d388 <__ieee754_rem_pio2+0x318>)
 800d172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d176:	4604      	mov	r4, r0
 800d178:	460d      	mov	r5, r1
 800d17a:	f7f3 f88f 	bl	800029c <__adddf3>
 800d17e:	4602      	mov	r2, r0
 800d180:	460b      	mov	r3, r1
 800d182:	e9ca 2300 	strd	r2, r3, [sl]
 800d186:	4620      	mov	r0, r4
 800d188:	4629      	mov	r1, r5
 800d18a:	f7f3 f885 	bl	8000298 <__aeabi_dsub>
 800d18e:	a37e      	add	r3, pc, #504	; (adr r3, 800d388 <__ieee754_rem_pio2+0x318>)
 800d190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d194:	e7e0      	b.n	800d158 <__ieee754_rem_pio2+0xe8>
 800d196:	4b87      	ldr	r3, [pc, #540]	; (800d3b4 <__ieee754_rem_pio2+0x344>)
 800d198:	4598      	cmp	r8, r3
 800d19a:	f300 80d9 	bgt.w	800d350 <__ieee754_rem_pio2+0x2e0>
 800d19e:	f7ff fed7 	bl	800cf50 <fabs>
 800d1a2:	ec55 4b10 	vmov	r4, r5, d0
 800d1a6:	ee10 0a10 	vmov	r0, s0
 800d1aa:	a379      	add	r3, pc, #484	; (adr r3, 800d390 <__ieee754_rem_pio2+0x320>)
 800d1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b0:	4629      	mov	r1, r5
 800d1b2:	f7f3 fa29 	bl	8000608 <__aeabi_dmul>
 800d1b6:	4b80      	ldr	r3, [pc, #512]	; (800d3b8 <__ieee754_rem_pio2+0x348>)
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f7f3 f86f 	bl	800029c <__adddf3>
 800d1be:	f7f3 fcd3 	bl	8000b68 <__aeabi_d2iz>
 800d1c2:	4683      	mov	fp, r0
 800d1c4:	f7f3 f9b6 	bl	8000534 <__aeabi_i2d>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	460b      	mov	r3, r1
 800d1cc:	ec43 2b18 	vmov	d8, r2, r3
 800d1d0:	a367      	add	r3, pc, #412	; (adr r3, 800d370 <__ieee754_rem_pio2+0x300>)
 800d1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d6:	f7f3 fa17 	bl	8000608 <__aeabi_dmul>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	460b      	mov	r3, r1
 800d1de:	4620      	mov	r0, r4
 800d1e0:	4629      	mov	r1, r5
 800d1e2:	f7f3 f859 	bl	8000298 <__aeabi_dsub>
 800d1e6:	a364      	add	r3, pc, #400	; (adr r3, 800d378 <__ieee754_rem_pio2+0x308>)
 800d1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ec:	4606      	mov	r6, r0
 800d1ee:	460f      	mov	r7, r1
 800d1f0:	ec51 0b18 	vmov	r0, r1, d8
 800d1f4:	f7f3 fa08 	bl	8000608 <__aeabi_dmul>
 800d1f8:	f1bb 0f1f 	cmp.w	fp, #31
 800d1fc:	4604      	mov	r4, r0
 800d1fe:	460d      	mov	r5, r1
 800d200:	dc0d      	bgt.n	800d21e <__ieee754_rem_pio2+0x1ae>
 800d202:	4b6e      	ldr	r3, [pc, #440]	; (800d3bc <__ieee754_rem_pio2+0x34c>)
 800d204:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d20c:	4543      	cmp	r3, r8
 800d20e:	d006      	beq.n	800d21e <__ieee754_rem_pio2+0x1ae>
 800d210:	4622      	mov	r2, r4
 800d212:	462b      	mov	r3, r5
 800d214:	4630      	mov	r0, r6
 800d216:	4639      	mov	r1, r7
 800d218:	f7f3 f83e 	bl	8000298 <__aeabi_dsub>
 800d21c:	e00f      	b.n	800d23e <__ieee754_rem_pio2+0x1ce>
 800d21e:	462b      	mov	r3, r5
 800d220:	4622      	mov	r2, r4
 800d222:	4630      	mov	r0, r6
 800d224:	4639      	mov	r1, r7
 800d226:	f7f3 f837 	bl	8000298 <__aeabi_dsub>
 800d22a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d22e:	9303      	str	r3, [sp, #12]
 800d230:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d234:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d238:	f1b8 0f10 	cmp.w	r8, #16
 800d23c:	dc02      	bgt.n	800d244 <__ieee754_rem_pio2+0x1d4>
 800d23e:	e9ca 0100 	strd	r0, r1, [sl]
 800d242:	e039      	b.n	800d2b8 <__ieee754_rem_pio2+0x248>
 800d244:	a34e      	add	r3, pc, #312	; (adr r3, 800d380 <__ieee754_rem_pio2+0x310>)
 800d246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24a:	ec51 0b18 	vmov	r0, r1, d8
 800d24e:	f7f3 f9db 	bl	8000608 <__aeabi_dmul>
 800d252:	4604      	mov	r4, r0
 800d254:	460d      	mov	r5, r1
 800d256:	4602      	mov	r2, r0
 800d258:	460b      	mov	r3, r1
 800d25a:	4630      	mov	r0, r6
 800d25c:	4639      	mov	r1, r7
 800d25e:	f7f3 f81b 	bl	8000298 <__aeabi_dsub>
 800d262:	4602      	mov	r2, r0
 800d264:	460b      	mov	r3, r1
 800d266:	4680      	mov	r8, r0
 800d268:	4689      	mov	r9, r1
 800d26a:	4630      	mov	r0, r6
 800d26c:	4639      	mov	r1, r7
 800d26e:	f7f3 f813 	bl	8000298 <__aeabi_dsub>
 800d272:	4622      	mov	r2, r4
 800d274:	462b      	mov	r3, r5
 800d276:	f7f3 f80f 	bl	8000298 <__aeabi_dsub>
 800d27a:	a343      	add	r3, pc, #268	; (adr r3, 800d388 <__ieee754_rem_pio2+0x318>)
 800d27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d280:	4604      	mov	r4, r0
 800d282:	460d      	mov	r5, r1
 800d284:	ec51 0b18 	vmov	r0, r1, d8
 800d288:	f7f3 f9be 	bl	8000608 <__aeabi_dmul>
 800d28c:	4622      	mov	r2, r4
 800d28e:	462b      	mov	r3, r5
 800d290:	f7f3 f802 	bl	8000298 <__aeabi_dsub>
 800d294:	4602      	mov	r2, r0
 800d296:	460b      	mov	r3, r1
 800d298:	4604      	mov	r4, r0
 800d29a:	460d      	mov	r5, r1
 800d29c:	4640      	mov	r0, r8
 800d29e:	4649      	mov	r1, r9
 800d2a0:	f7f2 fffa 	bl	8000298 <__aeabi_dsub>
 800d2a4:	9a03      	ldr	r2, [sp, #12]
 800d2a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	2b31      	cmp	r3, #49	; 0x31
 800d2ae:	dc24      	bgt.n	800d2fa <__ieee754_rem_pio2+0x28a>
 800d2b0:	e9ca 0100 	strd	r0, r1, [sl]
 800d2b4:	4646      	mov	r6, r8
 800d2b6:	464f      	mov	r7, r9
 800d2b8:	e9da 8900 	ldrd	r8, r9, [sl]
 800d2bc:	4630      	mov	r0, r6
 800d2be:	4642      	mov	r2, r8
 800d2c0:	464b      	mov	r3, r9
 800d2c2:	4639      	mov	r1, r7
 800d2c4:	f7f2 ffe8 	bl	8000298 <__aeabi_dsub>
 800d2c8:	462b      	mov	r3, r5
 800d2ca:	4622      	mov	r2, r4
 800d2cc:	f7f2 ffe4 	bl	8000298 <__aeabi_dsub>
 800d2d0:	9b02      	ldr	r3, [sp, #8]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d2d8:	f6bf af0a 	bge.w	800d0f0 <__ieee754_rem_pio2+0x80>
 800d2dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d2e0:	f8ca 3004 	str.w	r3, [sl, #4]
 800d2e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d2e8:	f8ca 8000 	str.w	r8, [sl]
 800d2ec:	f8ca 0008 	str.w	r0, [sl, #8]
 800d2f0:	f8ca 300c 	str.w	r3, [sl, #12]
 800d2f4:	f1cb 0b00 	rsb	fp, fp, #0
 800d2f8:	e6fa      	b.n	800d0f0 <__ieee754_rem_pio2+0x80>
 800d2fa:	a327      	add	r3, pc, #156	; (adr r3, 800d398 <__ieee754_rem_pio2+0x328>)
 800d2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d300:	ec51 0b18 	vmov	r0, r1, d8
 800d304:	f7f3 f980 	bl	8000608 <__aeabi_dmul>
 800d308:	4604      	mov	r4, r0
 800d30a:	460d      	mov	r5, r1
 800d30c:	4602      	mov	r2, r0
 800d30e:	460b      	mov	r3, r1
 800d310:	4640      	mov	r0, r8
 800d312:	4649      	mov	r1, r9
 800d314:	f7f2 ffc0 	bl	8000298 <__aeabi_dsub>
 800d318:	4602      	mov	r2, r0
 800d31a:	460b      	mov	r3, r1
 800d31c:	4606      	mov	r6, r0
 800d31e:	460f      	mov	r7, r1
 800d320:	4640      	mov	r0, r8
 800d322:	4649      	mov	r1, r9
 800d324:	f7f2 ffb8 	bl	8000298 <__aeabi_dsub>
 800d328:	4622      	mov	r2, r4
 800d32a:	462b      	mov	r3, r5
 800d32c:	f7f2 ffb4 	bl	8000298 <__aeabi_dsub>
 800d330:	a31b      	add	r3, pc, #108	; (adr r3, 800d3a0 <__ieee754_rem_pio2+0x330>)
 800d332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d336:	4604      	mov	r4, r0
 800d338:	460d      	mov	r5, r1
 800d33a:	ec51 0b18 	vmov	r0, r1, d8
 800d33e:	f7f3 f963 	bl	8000608 <__aeabi_dmul>
 800d342:	4622      	mov	r2, r4
 800d344:	462b      	mov	r3, r5
 800d346:	f7f2 ffa7 	bl	8000298 <__aeabi_dsub>
 800d34a:	4604      	mov	r4, r0
 800d34c:	460d      	mov	r5, r1
 800d34e:	e75f      	b.n	800d210 <__ieee754_rem_pio2+0x1a0>
 800d350:	4b1b      	ldr	r3, [pc, #108]	; (800d3c0 <__ieee754_rem_pio2+0x350>)
 800d352:	4598      	cmp	r8, r3
 800d354:	dd36      	ble.n	800d3c4 <__ieee754_rem_pio2+0x354>
 800d356:	ee10 2a10 	vmov	r2, s0
 800d35a:	462b      	mov	r3, r5
 800d35c:	4620      	mov	r0, r4
 800d35e:	4629      	mov	r1, r5
 800d360:	f7f2 ff9a 	bl	8000298 <__aeabi_dsub>
 800d364:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d368:	e9ca 0100 	strd	r0, r1, [sl]
 800d36c:	e694      	b.n	800d098 <__ieee754_rem_pio2+0x28>
 800d36e:	bf00      	nop
 800d370:	54400000 	.word	0x54400000
 800d374:	3ff921fb 	.word	0x3ff921fb
 800d378:	1a626331 	.word	0x1a626331
 800d37c:	3dd0b461 	.word	0x3dd0b461
 800d380:	1a600000 	.word	0x1a600000
 800d384:	3dd0b461 	.word	0x3dd0b461
 800d388:	2e037073 	.word	0x2e037073
 800d38c:	3ba3198a 	.word	0x3ba3198a
 800d390:	6dc9c883 	.word	0x6dc9c883
 800d394:	3fe45f30 	.word	0x3fe45f30
 800d398:	2e000000 	.word	0x2e000000
 800d39c:	3ba3198a 	.word	0x3ba3198a
 800d3a0:	252049c1 	.word	0x252049c1
 800d3a4:	397b839a 	.word	0x397b839a
 800d3a8:	3fe921fb 	.word	0x3fe921fb
 800d3ac:	4002d97b 	.word	0x4002d97b
 800d3b0:	3ff921fb 	.word	0x3ff921fb
 800d3b4:	413921fb 	.word	0x413921fb
 800d3b8:	3fe00000 	.word	0x3fe00000
 800d3bc:	0800e6e8 	.word	0x0800e6e8
 800d3c0:	7fefffff 	.word	0x7fefffff
 800d3c4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d3c8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d3cc:	ee10 0a10 	vmov	r0, s0
 800d3d0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d3d4:	ee10 6a10 	vmov	r6, s0
 800d3d8:	460f      	mov	r7, r1
 800d3da:	f7f3 fbc5 	bl	8000b68 <__aeabi_d2iz>
 800d3de:	f7f3 f8a9 	bl	8000534 <__aeabi_i2d>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	4639      	mov	r1, r7
 800d3ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d3ee:	f7f2 ff53 	bl	8000298 <__aeabi_dsub>
 800d3f2:	4b23      	ldr	r3, [pc, #140]	; (800d480 <__ieee754_rem_pio2+0x410>)
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f7f3 f907 	bl	8000608 <__aeabi_dmul>
 800d3fa:	460f      	mov	r7, r1
 800d3fc:	4606      	mov	r6, r0
 800d3fe:	f7f3 fbb3 	bl	8000b68 <__aeabi_d2iz>
 800d402:	f7f3 f897 	bl	8000534 <__aeabi_i2d>
 800d406:	4602      	mov	r2, r0
 800d408:	460b      	mov	r3, r1
 800d40a:	4630      	mov	r0, r6
 800d40c:	4639      	mov	r1, r7
 800d40e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d412:	f7f2 ff41 	bl	8000298 <__aeabi_dsub>
 800d416:	4b1a      	ldr	r3, [pc, #104]	; (800d480 <__ieee754_rem_pio2+0x410>)
 800d418:	2200      	movs	r2, #0
 800d41a:	f7f3 f8f5 	bl	8000608 <__aeabi_dmul>
 800d41e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d422:	ad04      	add	r5, sp, #16
 800d424:	f04f 0803 	mov.w	r8, #3
 800d428:	46a9      	mov	r9, r5
 800d42a:	2600      	movs	r6, #0
 800d42c:	2700      	movs	r7, #0
 800d42e:	4632      	mov	r2, r6
 800d430:	463b      	mov	r3, r7
 800d432:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d436:	46c3      	mov	fp, r8
 800d438:	3d08      	subs	r5, #8
 800d43a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d43e:	f7f3 fb4b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d442:	2800      	cmp	r0, #0
 800d444:	d1f3      	bne.n	800d42e <__ieee754_rem_pio2+0x3be>
 800d446:	4b0f      	ldr	r3, [pc, #60]	; (800d484 <__ieee754_rem_pio2+0x414>)
 800d448:	9301      	str	r3, [sp, #4]
 800d44a:	2302      	movs	r3, #2
 800d44c:	9300      	str	r3, [sp, #0]
 800d44e:	4622      	mov	r2, r4
 800d450:	465b      	mov	r3, fp
 800d452:	4651      	mov	r1, sl
 800d454:	4648      	mov	r0, r9
 800d456:	f000 f993 	bl	800d780 <__kernel_rem_pio2>
 800d45a:	9b02      	ldr	r3, [sp, #8]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	4683      	mov	fp, r0
 800d460:	f6bf ae46 	bge.w	800d0f0 <__ieee754_rem_pio2+0x80>
 800d464:	e9da 2100 	ldrd	r2, r1, [sl]
 800d468:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d46c:	e9ca 2300 	strd	r2, r3, [sl]
 800d470:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d478:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d47c:	e73a      	b.n	800d2f4 <__ieee754_rem_pio2+0x284>
 800d47e:	bf00      	nop
 800d480:	41700000 	.word	0x41700000
 800d484:	0800e768 	.word	0x0800e768

0800d488 <__ieee754_sqrt>:
 800d488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d48c:	ec55 4b10 	vmov	r4, r5, d0
 800d490:	4e55      	ldr	r6, [pc, #340]	; (800d5e8 <__ieee754_sqrt+0x160>)
 800d492:	43ae      	bics	r6, r5
 800d494:	ee10 0a10 	vmov	r0, s0
 800d498:	ee10 3a10 	vmov	r3, s0
 800d49c:	462a      	mov	r2, r5
 800d49e:	4629      	mov	r1, r5
 800d4a0:	d110      	bne.n	800d4c4 <__ieee754_sqrt+0x3c>
 800d4a2:	ee10 2a10 	vmov	r2, s0
 800d4a6:	462b      	mov	r3, r5
 800d4a8:	f7f3 f8ae 	bl	8000608 <__aeabi_dmul>
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	4629      	mov	r1, r5
 800d4b4:	f7f2 fef2 	bl	800029c <__adddf3>
 800d4b8:	4604      	mov	r4, r0
 800d4ba:	460d      	mov	r5, r1
 800d4bc:	ec45 4b10 	vmov	d0, r4, r5
 800d4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c4:	2d00      	cmp	r5, #0
 800d4c6:	dc10      	bgt.n	800d4ea <__ieee754_sqrt+0x62>
 800d4c8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d4cc:	4330      	orrs	r0, r6
 800d4ce:	d0f5      	beq.n	800d4bc <__ieee754_sqrt+0x34>
 800d4d0:	b15d      	cbz	r5, 800d4ea <__ieee754_sqrt+0x62>
 800d4d2:	ee10 2a10 	vmov	r2, s0
 800d4d6:	462b      	mov	r3, r5
 800d4d8:	ee10 0a10 	vmov	r0, s0
 800d4dc:	f7f2 fedc 	bl	8000298 <__aeabi_dsub>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	460b      	mov	r3, r1
 800d4e4:	f7f3 f9ba 	bl	800085c <__aeabi_ddiv>
 800d4e8:	e7e6      	b.n	800d4b8 <__ieee754_sqrt+0x30>
 800d4ea:	1512      	asrs	r2, r2, #20
 800d4ec:	d074      	beq.n	800d5d8 <__ieee754_sqrt+0x150>
 800d4ee:	07d4      	lsls	r4, r2, #31
 800d4f0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d4f4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d4f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d4fc:	bf5e      	ittt	pl
 800d4fe:	0fda      	lsrpl	r2, r3, #31
 800d500:	005b      	lslpl	r3, r3, #1
 800d502:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d506:	2400      	movs	r4, #0
 800d508:	0fda      	lsrs	r2, r3, #31
 800d50a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d50e:	107f      	asrs	r7, r7, #1
 800d510:	005b      	lsls	r3, r3, #1
 800d512:	2516      	movs	r5, #22
 800d514:	4620      	mov	r0, r4
 800d516:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d51a:	1886      	adds	r6, r0, r2
 800d51c:	428e      	cmp	r6, r1
 800d51e:	bfde      	ittt	le
 800d520:	1b89      	suble	r1, r1, r6
 800d522:	18b0      	addle	r0, r6, r2
 800d524:	18a4      	addle	r4, r4, r2
 800d526:	0049      	lsls	r1, r1, #1
 800d528:	3d01      	subs	r5, #1
 800d52a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d52e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d532:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d536:	d1f0      	bne.n	800d51a <__ieee754_sqrt+0x92>
 800d538:	462a      	mov	r2, r5
 800d53a:	f04f 0e20 	mov.w	lr, #32
 800d53e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d542:	4281      	cmp	r1, r0
 800d544:	eb06 0c05 	add.w	ip, r6, r5
 800d548:	dc02      	bgt.n	800d550 <__ieee754_sqrt+0xc8>
 800d54a:	d113      	bne.n	800d574 <__ieee754_sqrt+0xec>
 800d54c:	459c      	cmp	ip, r3
 800d54e:	d811      	bhi.n	800d574 <__ieee754_sqrt+0xec>
 800d550:	f1bc 0f00 	cmp.w	ip, #0
 800d554:	eb0c 0506 	add.w	r5, ip, r6
 800d558:	da43      	bge.n	800d5e2 <__ieee754_sqrt+0x15a>
 800d55a:	2d00      	cmp	r5, #0
 800d55c:	db41      	blt.n	800d5e2 <__ieee754_sqrt+0x15a>
 800d55e:	f100 0801 	add.w	r8, r0, #1
 800d562:	1a09      	subs	r1, r1, r0
 800d564:	459c      	cmp	ip, r3
 800d566:	bf88      	it	hi
 800d568:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d56c:	eba3 030c 	sub.w	r3, r3, ip
 800d570:	4432      	add	r2, r6
 800d572:	4640      	mov	r0, r8
 800d574:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d578:	f1be 0e01 	subs.w	lr, lr, #1
 800d57c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d580:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d584:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d588:	d1db      	bne.n	800d542 <__ieee754_sqrt+0xba>
 800d58a:	430b      	orrs	r3, r1
 800d58c:	d006      	beq.n	800d59c <__ieee754_sqrt+0x114>
 800d58e:	1c50      	adds	r0, r2, #1
 800d590:	bf13      	iteet	ne
 800d592:	3201      	addne	r2, #1
 800d594:	3401      	addeq	r4, #1
 800d596:	4672      	moveq	r2, lr
 800d598:	f022 0201 	bicne.w	r2, r2, #1
 800d59c:	1063      	asrs	r3, r4, #1
 800d59e:	0852      	lsrs	r2, r2, #1
 800d5a0:	07e1      	lsls	r1, r4, #31
 800d5a2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d5a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d5aa:	bf48      	it	mi
 800d5ac:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d5b0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d5b4:	4614      	mov	r4, r2
 800d5b6:	e781      	b.n	800d4bc <__ieee754_sqrt+0x34>
 800d5b8:	0ad9      	lsrs	r1, r3, #11
 800d5ba:	3815      	subs	r0, #21
 800d5bc:	055b      	lsls	r3, r3, #21
 800d5be:	2900      	cmp	r1, #0
 800d5c0:	d0fa      	beq.n	800d5b8 <__ieee754_sqrt+0x130>
 800d5c2:	02cd      	lsls	r5, r1, #11
 800d5c4:	d50a      	bpl.n	800d5dc <__ieee754_sqrt+0x154>
 800d5c6:	f1c2 0420 	rsb	r4, r2, #32
 800d5ca:	fa23 f404 	lsr.w	r4, r3, r4
 800d5ce:	1e55      	subs	r5, r2, #1
 800d5d0:	4093      	lsls	r3, r2
 800d5d2:	4321      	orrs	r1, r4
 800d5d4:	1b42      	subs	r2, r0, r5
 800d5d6:	e78a      	b.n	800d4ee <__ieee754_sqrt+0x66>
 800d5d8:	4610      	mov	r0, r2
 800d5da:	e7f0      	b.n	800d5be <__ieee754_sqrt+0x136>
 800d5dc:	0049      	lsls	r1, r1, #1
 800d5de:	3201      	adds	r2, #1
 800d5e0:	e7ef      	b.n	800d5c2 <__ieee754_sqrt+0x13a>
 800d5e2:	4680      	mov	r8, r0
 800d5e4:	e7bd      	b.n	800d562 <__ieee754_sqrt+0xda>
 800d5e6:	bf00      	nop
 800d5e8:	7ff00000 	.word	0x7ff00000
 800d5ec:	00000000 	.word	0x00000000

0800d5f0 <__kernel_cos>:
 800d5f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f4:	ec57 6b10 	vmov	r6, r7, d0
 800d5f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d5fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d600:	ed8d 1b00 	vstr	d1, [sp]
 800d604:	da07      	bge.n	800d616 <__kernel_cos+0x26>
 800d606:	ee10 0a10 	vmov	r0, s0
 800d60a:	4639      	mov	r1, r7
 800d60c:	f7f3 faac 	bl	8000b68 <__aeabi_d2iz>
 800d610:	2800      	cmp	r0, #0
 800d612:	f000 8088 	beq.w	800d726 <__kernel_cos+0x136>
 800d616:	4632      	mov	r2, r6
 800d618:	463b      	mov	r3, r7
 800d61a:	4630      	mov	r0, r6
 800d61c:	4639      	mov	r1, r7
 800d61e:	f7f2 fff3 	bl	8000608 <__aeabi_dmul>
 800d622:	4b51      	ldr	r3, [pc, #324]	; (800d768 <__kernel_cos+0x178>)
 800d624:	2200      	movs	r2, #0
 800d626:	4604      	mov	r4, r0
 800d628:	460d      	mov	r5, r1
 800d62a:	f7f2 ffed 	bl	8000608 <__aeabi_dmul>
 800d62e:	a340      	add	r3, pc, #256	; (adr r3, 800d730 <__kernel_cos+0x140>)
 800d630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d634:	4682      	mov	sl, r0
 800d636:	468b      	mov	fp, r1
 800d638:	4620      	mov	r0, r4
 800d63a:	4629      	mov	r1, r5
 800d63c:	f7f2 ffe4 	bl	8000608 <__aeabi_dmul>
 800d640:	a33d      	add	r3, pc, #244	; (adr r3, 800d738 <__kernel_cos+0x148>)
 800d642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d646:	f7f2 fe29 	bl	800029c <__adddf3>
 800d64a:	4622      	mov	r2, r4
 800d64c:	462b      	mov	r3, r5
 800d64e:	f7f2 ffdb 	bl	8000608 <__aeabi_dmul>
 800d652:	a33b      	add	r3, pc, #236	; (adr r3, 800d740 <__kernel_cos+0x150>)
 800d654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d658:	f7f2 fe1e 	bl	8000298 <__aeabi_dsub>
 800d65c:	4622      	mov	r2, r4
 800d65e:	462b      	mov	r3, r5
 800d660:	f7f2 ffd2 	bl	8000608 <__aeabi_dmul>
 800d664:	a338      	add	r3, pc, #224	; (adr r3, 800d748 <__kernel_cos+0x158>)
 800d666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66a:	f7f2 fe17 	bl	800029c <__adddf3>
 800d66e:	4622      	mov	r2, r4
 800d670:	462b      	mov	r3, r5
 800d672:	f7f2 ffc9 	bl	8000608 <__aeabi_dmul>
 800d676:	a336      	add	r3, pc, #216	; (adr r3, 800d750 <__kernel_cos+0x160>)
 800d678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67c:	f7f2 fe0c 	bl	8000298 <__aeabi_dsub>
 800d680:	4622      	mov	r2, r4
 800d682:	462b      	mov	r3, r5
 800d684:	f7f2 ffc0 	bl	8000608 <__aeabi_dmul>
 800d688:	a333      	add	r3, pc, #204	; (adr r3, 800d758 <__kernel_cos+0x168>)
 800d68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68e:	f7f2 fe05 	bl	800029c <__adddf3>
 800d692:	4622      	mov	r2, r4
 800d694:	462b      	mov	r3, r5
 800d696:	f7f2 ffb7 	bl	8000608 <__aeabi_dmul>
 800d69a:	4622      	mov	r2, r4
 800d69c:	462b      	mov	r3, r5
 800d69e:	f7f2 ffb3 	bl	8000608 <__aeabi_dmul>
 800d6a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	460d      	mov	r5, r1
 800d6aa:	4630      	mov	r0, r6
 800d6ac:	4639      	mov	r1, r7
 800d6ae:	f7f2 ffab 	bl	8000608 <__aeabi_dmul>
 800d6b2:	460b      	mov	r3, r1
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	4629      	mov	r1, r5
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f7f2 fded 	bl	8000298 <__aeabi_dsub>
 800d6be:	4b2b      	ldr	r3, [pc, #172]	; (800d76c <__kernel_cos+0x17c>)
 800d6c0:	4598      	cmp	r8, r3
 800d6c2:	4606      	mov	r6, r0
 800d6c4:	460f      	mov	r7, r1
 800d6c6:	dc10      	bgt.n	800d6ea <__kernel_cos+0xfa>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	4650      	mov	r0, sl
 800d6ce:	4659      	mov	r1, fp
 800d6d0:	f7f2 fde2 	bl	8000298 <__aeabi_dsub>
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	4926      	ldr	r1, [pc, #152]	; (800d770 <__kernel_cos+0x180>)
 800d6d8:	4602      	mov	r2, r0
 800d6da:	2000      	movs	r0, #0
 800d6dc:	f7f2 fddc 	bl	8000298 <__aeabi_dsub>
 800d6e0:	ec41 0b10 	vmov	d0, r0, r1
 800d6e4:	b003      	add	sp, #12
 800d6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ea:	4b22      	ldr	r3, [pc, #136]	; (800d774 <__kernel_cos+0x184>)
 800d6ec:	4920      	ldr	r1, [pc, #128]	; (800d770 <__kernel_cos+0x180>)
 800d6ee:	4598      	cmp	r8, r3
 800d6f0:	bfcc      	ite	gt
 800d6f2:	4d21      	ldrgt	r5, [pc, #132]	; (800d778 <__kernel_cos+0x188>)
 800d6f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d6f8:	2400      	movs	r4, #0
 800d6fa:	4622      	mov	r2, r4
 800d6fc:	462b      	mov	r3, r5
 800d6fe:	2000      	movs	r0, #0
 800d700:	f7f2 fdca 	bl	8000298 <__aeabi_dsub>
 800d704:	4622      	mov	r2, r4
 800d706:	4680      	mov	r8, r0
 800d708:	4689      	mov	r9, r1
 800d70a:	462b      	mov	r3, r5
 800d70c:	4650      	mov	r0, sl
 800d70e:	4659      	mov	r1, fp
 800d710:	f7f2 fdc2 	bl	8000298 <__aeabi_dsub>
 800d714:	4632      	mov	r2, r6
 800d716:	463b      	mov	r3, r7
 800d718:	f7f2 fdbe 	bl	8000298 <__aeabi_dsub>
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	4640      	mov	r0, r8
 800d722:	4649      	mov	r1, r9
 800d724:	e7da      	b.n	800d6dc <__kernel_cos+0xec>
 800d726:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d760 <__kernel_cos+0x170>
 800d72a:	e7db      	b.n	800d6e4 <__kernel_cos+0xf4>
 800d72c:	f3af 8000 	nop.w
 800d730:	be8838d4 	.word	0xbe8838d4
 800d734:	bda8fae9 	.word	0xbda8fae9
 800d738:	bdb4b1c4 	.word	0xbdb4b1c4
 800d73c:	3e21ee9e 	.word	0x3e21ee9e
 800d740:	809c52ad 	.word	0x809c52ad
 800d744:	3e927e4f 	.word	0x3e927e4f
 800d748:	19cb1590 	.word	0x19cb1590
 800d74c:	3efa01a0 	.word	0x3efa01a0
 800d750:	16c15177 	.word	0x16c15177
 800d754:	3f56c16c 	.word	0x3f56c16c
 800d758:	5555554c 	.word	0x5555554c
 800d75c:	3fa55555 	.word	0x3fa55555
 800d760:	00000000 	.word	0x00000000
 800d764:	3ff00000 	.word	0x3ff00000
 800d768:	3fe00000 	.word	0x3fe00000
 800d76c:	3fd33332 	.word	0x3fd33332
 800d770:	3ff00000 	.word	0x3ff00000
 800d774:	3fe90000 	.word	0x3fe90000
 800d778:	3fd20000 	.word	0x3fd20000
 800d77c:	00000000 	.word	0x00000000

0800d780 <__kernel_rem_pio2>:
 800d780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d784:	ed2d 8b02 	vpush	{d8}
 800d788:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d78c:	f112 0f14 	cmn.w	r2, #20
 800d790:	9308      	str	r3, [sp, #32]
 800d792:	9101      	str	r1, [sp, #4]
 800d794:	4bc4      	ldr	r3, [pc, #784]	; (800daa8 <__kernel_rem_pio2+0x328>)
 800d796:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d798:	900b      	str	r0, [sp, #44]	; 0x2c
 800d79a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d79e:	9302      	str	r3, [sp, #8]
 800d7a0:	9b08      	ldr	r3, [sp, #32]
 800d7a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d7a6:	bfa8      	it	ge
 800d7a8:	1ed4      	subge	r4, r2, #3
 800d7aa:	9306      	str	r3, [sp, #24]
 800d7ac:	bfb2      	itee	lt
 800d7ae:	2400      	movlt	r4, #0
 800d7b0:	2318      	movge	r3, #24
 800d7b2:	fb94 f4f3 	sdivge	r4, r4, r3
 800d7b6:	f06f 0317 	mvn.w	r3, #23
 800d7ba:	fb04 3303 	mla	r3, r4, r3, r3
 800d7be:	eb03 0a02 	add.w	sl, r3, r2
 800d7c2:	9b02      	ldr	r3, [sp, #8]
 800d7c4:	9a06      	ldr	r2, [sp, #24]
 800d7c6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800da98 <__kernel_rem_pio2+0x318>
 800d7ca:	eb03 0802 	add.w	r8, r3, r2
 800d7ce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d7d0:	1aa7      	subs	r7, r4, r2
 800d7d2:	ae22      	add	r6, sp, #136	; 0x88
 800d7d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d7d8:	2500      	movs	r5, #0
 800d7da:	4545      	cmp	r5, r8
 800d7dc:	dd13      	ble.n	800d806 <__kernel_rem_pio2+0x86>
 800d7de:	9b08      	ldr	r3, [sp, #32]
 800d7e0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800da98 <__kernel_rem_pio2+0x318>
 800d7e4:	aa22      	add	r2, sp, #136	; 0x88
 800d7e6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d7ea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d7ee:	f04f 0800 	mov.w	r8, #0
 800d7f2:	9b02      	ldr	r3, [sp, #8]
 800d7f4:	4598      	cmp	r8, r3
 800d7f6:	dc2f      	bgt.n	800d858 <__kernel_rem_pio2+0xd8>
 800d7f8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d7fc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d800:	462f      	mov	r7, r5
 800d802:	2600      	movs	r6, #0
 800d804:	e01b      	b.n	800d83e <__kernel_rem_pio2+0xbe>
 800d806:	42ef      	cmn	r7, r5
 800d808:	d407      	bmi.n	800d81a <__kernel_rem_pio2+0x9a>
 800d80a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d80e:	f7f2 fe91 	bl	8000534 <__aeabi_i2d>
 800d812:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d816:	3501      	adds	r5, #1
 800d818:	e7df      	b.n	800d7da <__kernel_rem_pio2+0x5a>
 800d81a:	ec51 0b18 	vmov	r0, r1, d8
 800d81e:	e7f8      	b.n	800d812 <__kernel_rem_pio2+0x92>
 800d820:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d824:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d828:	f7f2 feee 	bl	8000608 <__aeabi_dmul>
 800d82c:	4602      	mov	r2, r0
 800d82e:	460b      	mov	r3, r1
 800d830:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d834:	f7f2 fd32 	bl	800029c <__adddf3>
 800d838:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d83c:	3601      	adds	r6, #1
 800d83e:	9b06      	ldr	r3, [sp, #24]
 800d840:	429e      	cmp	r6, r3
 800d842:	f1a7 0708 	sub.w	r7, r7, #8
 800d846:	ddeb      	ble.n	800d820 <__kernel_rem_pio2+0xa0>
 800d848:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d84c:	f108 0801 	add.w	r8, r8, #1
 800d850:	ecab 7b02 	vstmia	fp!, {d7}
 800d854:	3508      	adds	r5, #8
 800d856:	e7cc      	b.n	800d7f2 <__kernel_rem_pio2+0x72>
 800d858:	9b02      	ldr	r3, [sp, #8]
 800d85a:	aa0e      	add	r2, sp, #56	; 0x38
 800d85c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d860:	930d      	str	r3, [sp, #52]	; 0x34
 800d862:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d864:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d868:	9c02      	ldr	r4, [sp, #8]
 800d86a:	930c      	str	r3, [sp, #48]	; 0x30
 800d86c:	00e3      	lsls	r3, r4, #3
 800d86e:	930a      	str	r3, [sp, #40]	; 0x28
 800d870:	ab9a      	add	r3, sp, #616	; 0x268
 800d872:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d876:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d87a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d87e:	ab72      	add	r3, sp, #456	; 0x1c8
 800d880:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d884:	46c3      	mov	fp, r8
 800d886:	46a1      	mov	r9, r4
 800d888:	f1b9 0f00 	cmp.w	r9, #0
 800d88c:	f1a5 0508 	sub.w	r5, r5, #8
 800d890:	dc77      	bgt.n	800d982 <__kernel_rem_pio2+0x202>
 800d892:	ec47 6b10 	vmov	d0, r6, r7
 800d896:	4650      	mov	r0, sl
 800d898:	f000 fc02 	bl	800e0a0 <scalbn>
 800d89c:	ec57 6b10 	vmov	r6, r7, d0
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d8a6:	ee10 0a10 	vmov	r0, s0
 800d8aa:	4639      	mov	r1, r7
 800d8ac:	f7f2 feac 	bl	8000608 <__aeabi_dmul>
 800d8b0:	ec41 0b10 	vmov	d0, r0, r1
 800d8b4:	f000 fb74 	bl	800dfa0 <floor>
 800d8b8:	4b7c      	ldr	r3, [pc, #496]	; (800daac <__kernel_rem_pio2+0x32c>)
 800d8ba:	ec51 0b10 	vmov	r0, r1, d0
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f7f2 fea2 	bl	8000608 <__aeabi_dmul>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	460b      	mov	r3, r1
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	4639      	mov	r1, r7
 800d8cc:	f7f2 fce4 	bl	8000298 <__aeabi_dsub>
 800d8d0:	460f      	mov	r7, r1
 800d8d2:	4606      	mov	r6, r0
 800d8d4:	f7f3 f948 	bl	8000b68 <__aeabi_d2iz>
 800d8d8:	9004      	str	r0, [sp, #16]
 800d8da:	f7f2 fe2b 	bl	8000534 <__aeabi_i2d>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	4639      	mov	r1, r7
 800d8e6:	f7f2 fcd7 	bl	8000298 <__aeabi_dsub>
 800d8ea:	f1ba 0f00 	cmp.w	sl, #0
 800d8ee:	4606      	mov	r6, r0
 800d8f0:	460f      	mov	r7, r1
 800d8f2:	dd6d      	ble.n	800d9d0 <__kernel_rem_pio2+0x250>
 800d8f4:	1e62      	subs	r2, r4, #1
 800d8f6:	ab0e      	add	r3, sp, #56	; 0x38
 800d8f8:	9d04      	ldr	r5, [sp, #16]
 800d8fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d8fe:	f1ca 0118 	rsb	r1, sl, #24
 800d902:	fa40 f301 	asr.w	r3, r0, r1
 800d906:	441d      	add	r5, r3
 800d908:	408b      	lsls	r3, r1
 800d90a:	1ac0      	subs	r0, r0, r3
 800d90c:	ab0e      	add	r3, sp, #56	; 0x38
 800d90e:	9504      	str	r5, [sp, #16]
 800d910:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d914:	f1ca 0317 	rsb	r3, sl, #23
 800d918:	fa40 fb03 	asr.w	fp, r0, r3
 800d91c:	f1bb 0f00 	cmp.w	fp, #0
 800d920:	dd65      	ble.n	800d9ee <__kernel_rem_pio2+0x26e>
 800d922:	9b04      	ldr	r3, [sp, #16]
 800d924:	2200      	movs	r2, #0
 800d926:	3301      	adds	r3, #1
 800d928:	9304      	str	r3, [sp, #16]
 800d92a:	4615      	mov	r5, r2
 800d92c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d930:	4294      	cmp	r4, r2
 800d932:	f300 809c 	bgt.w	800da6e <__kernel_rem_pio2+0x2ee>
 800d936:	f1ba 0f00 	cmp.w	sl, #0
 800d93a:	dd07      	ble.n	800d94c <__kernel_rem_pio2+0x1cc>
 800d93c:	f1ba 0f01 	cmp.w	sl, #1
 800d940:	f000 80c0 	beq.w	800dac4 <__kernel_rem_pio2+0x344>
 800d944:	f1ba 0f02 	cmp.w	sl, #2
 800d948:	f000 80c6 	beq.w	800dad8 <__kernel_rem_pio2+0x358>
 800d94c:	f1bb 0f02 	cmp.w	fp, #2
 800d950:	d14d      	bne.n	800d9ee <__kernel_rem_pio2+0x26e>
 800d952:	4632      	mov	r2, r6
 800d954:	463b      	mov	r3, r7
 800d956:	4956      	ldr	r1, [pc, #344]	; (800dab0 <__kernel_rem_pio2+0x330>)
 800d958:	2000      	movs	r0, #0
 800d95a:	f7f2 fc9d 	bl	8000298 <__aeabi_dsub>
 800d95e:	4606      	mov	r6, r0
 800d960:	460f      	mov	r7, r1
 800d962:	2d00      	cmp	r5, #0
 800d964:	d043      	beq.n	800d9ee <__kernel_rem_pio2+0x26e>
 800d966:	4650      	mov	r0, sl
 800d968:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800daa0 <__kernel_rem_pio2+0x320>
 800d96c:	f000 fb98 	bl	800e0a0 <scalbn>
 800d970:	4630      	mov	r0, r6
 800d972:	4639      	mov	r1, r7
 800d974:	ec53 2b10 	vmov	r2, r3, d0
 800d978:	f7f2 fc8e 	bl	8000298 <__aeabi_dsub>
 800d97c:	4606      	mov	r6, r0
 800d97e:	460f      	mov	r7, r1
 800d980:	e035      	b.n	800d9ee <__kernel_rem_pio2+0x26e>
 800d982:	4b4c      	ldr	r3, [pc, #304]	; (800dab4 <__kernel_rem_pio2+0x334>)
 800d984:	2200      	movs	r2, #0
 800d986:	4630      	mov	r0, r6
 800d988:	4639      	mov	r1, r7
 800d98a:	f7f2 fe3d 	bl	8000608 <__aeabi_dmul>
 800d98e:	f7f3 f8eb 	bl	8000b68 <__aeabi_d2iz>
 800d992:	f7f2 fdcf 	bl	8000534 <__aeabi_i2d>
 800d996:	4602      	mov	r2, r0
 800d998:	460b      	mov	r3, r1
 800d99a:	ec43 2b18 	vmov	d8, r2, r3
 800d99e:	4b46      	ldr	r3, [pc, #280]	; (800dab8 <__kernel_rem_pio2+0x338>)
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f7f2 fe31 	bl	8000608 <__aeabi_dmul>
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	4630      	mov	r0, r6
 800d9ac:	4639      	mov	r1, r7
 800d9ae:	f7f2 fc73 	bl	8000298 <__aeabi_dsub>
 800d9b2:	f7f3 f8d9 	bl	8000b68 <__aeabi_d2iz>
 800d9b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9ba:	f84b 0b04 	str.w	r0, [fp], #4
 800d9be:	ec51 0b18 	vmov	r0, r1, d8
 800d9c2:	f7f2 fc6b 	bl	800029c <__adddf3>
 800d9c6:	f109 39ff 	add.w	r9, r9, #4294967295
 800d9ca:	4606      	mov	r6, r0
 800d9cc:	460f      	mov	r7, r1
 800d9ce:	e75b      	b.n	800d888 <__kernel_rem_pio2+0x108>
 800d9d0:	d106      	bne.n	800d9e0 <__kernel_rem_pio2+0x260>
 800d9d2:	1e63      	subs	r3, r4, #1
 800d9d4:	aa0e      	add	r2, sp, #56	; 0x38
 800d9d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d9da:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800d9de:	e79d      	b.n	800d91c <__kernel_rem_pio2+0x19c>
 800d9e0:	4b36      	ldr	r3, [pc, #216]	; (800dabc <__kernel_rem_pio2+0x33c>)
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f7f3 f896 	bl	8000b14 <__aeabi_dcmpge>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	d13d      	bne.n	800da68 <__kernel_rem_pio2+0x2e8>
 800d9ec:	4683      	mov	fp, r0
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	4639      	mov	r1, r7
 800d9f6:	f7f3 f86f 	bl	8000ad8 <__aeabi_dcmpeq>
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	f000 80c0 	beq.w	800db80 <__kernel_rem_pio2+0x400>
 800da00:	1e65      	subs	r5, r4, #1
 800da02:	462b      	mov	r3, r5
 800da04:	2200      	movs	r2, #0
 800da06:	9902      	ldr	r1, [sp, #8]
 800da08:	428b      	cmp	r3, r1
 800da0a:	da6c      	bge.n	800dae6 <__kernel_rem_pio2+0x366>
 800da0c:	2a00      	cmp	r2, #0
 800da0e:	f000 8089 	beq.w	800db24 <__kernel_rem_pio2+0x3a4>
 800da12:	ab0e      	add	r3, sp, #56	; 0x38
 800da14:	f1aa 0a18 	sub.w	sl, sl, #24
 800da18:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	f000 80ad 	beq.w	800db7c <__kernel_rem_pio2+0x3fc>
 800da22:	4650      	mov	r0, sl
 800da24:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800daa0 <__kernel_rem_pio2+0x320>
 800da28:	f000 fb3a 	bl	800e0a0 <scalbn>
 800da2c:	ab9a      	add	r3, sp, #616	; 0x268
 800da2e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800da32:	ec57 6b10 	vmov	r6, r7, d0
 800da36:	00ec      	lsls	r4, r5, #3
 800da38:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800da3c:	46aa      	mov	sl, r5
 800da3e:	f1ba 0f00 	cmp.w	sl, #0
 800da42:	f280 80d6 	bge.w	800dbf2 <__kernel_rem_pio2+0x472>
 800da46:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800da98 <__kernel_rem_pio2+0x318>
 800da4a:	462e      	mov	r6, r5
 800da4c:	2e00      	cmp	r6, #0
 800da4e:	f2c0 8104 	blt.w	800dc5a <__kernel_rem_pio2+0x4da>
 800da52:	ab72      	add	r3, sp, #456	; 0x1c8
 800da54:	ed8d 8b06 	vstr	d8, [sp, #24]
 800da58:	f8df a064 	ldr.w	sl, [pc, #100]	; 800dac0 <__kernel_rem_pio2+0x340>
 800da5c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800da60:	f04f 0800 	mov.w	r8, #0
 800da64:	1baf      	subs	r7, r5, r6
 800da66:	e0ea      	b.n	800dc3e <__kernel_rem_pio2+0x4be>
 800da68:	f04f 0b02 	mov.w	fp, #2
 800da6c:	e759      	b.n	800d922 <__kernel_rem_pio2+0x1a2>
 800da6e:	f8d8 3000 	ldr.w	r3, [r8]
 800da72:	b955      	cbnz	r5, 800da8a <__kernel_rem_pio2+0x30a>
 800da74:	b123      	cbz	r3, 800da80 <__kernel_rem_pio2+0x300>
 800da76:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800da7a:	f8c8 3000 	str.w	r3, [r8]
 800da7e:	2301      	movs	r3, #1
 800da80:	3201      	adds	r2, #1
 800da82:	f108 0804 	add.w	r8, r8, #4
 800da86:	461d      	mov	r5, r3
 800da88:	e752      	b.n	800d930 <__kernel_rem_pio2+0x1b0>
 800da8a:	1acb      	subs	r3, r1, r3
 800da8c:	f8c8 3000 	str.w	r3, [r8]
 800da90:	462b      	mov	r3, r5
 800da92:	e7f5      	b.n	800da80 <__kernel_rem_pio2+0x300>
 800da94:	f3af 8000 	nop.w
	...
 800daa4:	3ff00000 	.word	0x3ff00000
 800daa8:	0800e8b0 	.word	0x0800e8b0
 800daac:	40200000 	.word	0x40200000
 800dab0:	3ff00000 	.word	0x3ff00000
 800dab4:	3e700000 	.word	0x3e700000
 800dab8:	41700000 	.word	0x41700000
 800dabc:	3fe00000 	.word	0x3fe00000
 800dac0:	0800e870 	.word	0x0800e870
 800dac4:	1e62      	subs	r2, r4, #1
 800dac6:	ab0e      	add	r3, sp, #56	; 0x38
 800dac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dacc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dad0:	a90e      	add	r1, sp, #56	; 0x38
 800dad2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dad6:	e739      	b.n	800d94c <__kernel_rem_pio2+0x1cc>
 800dad8:	1e62      	subs	r2, r4, #1
 800dada:	ab0e      	add	r3, sp, #56	; 0x38
 800dadc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dae0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dae4:	e7f4      	b.n	800dad0 <__kernel_rem_pio2+0x350>
 800dae6:	a90e      	add	r1, sp, #56	; 0x38
 800dae8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800daec:	3b01      	subs	r3, #1
 800daee:	430a      	orrs	r2, r1
 800daf0:	e789      	b.n	800da06 <__kernel_rem_pio2+0x286>
 800daf2:	3301      	adds	r3, #1
 800daf4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800daf8:	2900      	cmp	r1, #0
 800dafa:	d0fa      	beq.n	800daf2 <__kernel_rem_pio2+0x372>
 800dafc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dafe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800db02:	446a      	add	r2, sp
 800db04:	3a98      	subs	r2, #152	; 0x98
 800db06:	920a      	str	r2, [sp, #40]	; 0x28
 800db08:	9a08      	ldr	r2, [sp, #32]
 800db0a:	18e3      	adds	r3, r4, r3
 800db0c:	18a5      	adds	r5, r4, r2
 800db0e:	aa22      	add	r2, sp, #136	; 0x88
 800db10:	f104 0801 	add.w	r8, r4, #1
 800db14:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800db18:	9304      	str	r3, [sp, #16]
 800db1a:	9b04      	ldr	r3, [sp, #16]
 800db1c:	4543      	cmp	r3, r8
 800db1e:	da04      	bge.n	800db2a <__kernel_rem_pio2+0x3aa>
 800db20:	461c      	mov	r4, r3
 800db22:	e6a3      	b.n	800d86c <__kernel_rem_pio2+0xec>
 800db24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db26:	2301      	movs	r3, #1
 800db28:	e7e4      	b.n	800daf4 <__kernel_rem_pio2+0x374>
 800db2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db2c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800db30:	f7f2 fd00 	bl	8000534 <__aeabi_i2d>
 800db34:	e8e5 0102 	strd	r0, r1, [r5], #8
 800db38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db3a:	46ab      	mov	fp, r5
 800db3c:	461c      	mov	r4, r3
 800db3e:	f04f 0900 	mov.w	r9, #0
 800db42:	2600      	movs	r6, #0
 800db44:	2700      	movs	r7, #0
 800db46:	9b06      	ldr	r3, [sp, #24]
 800db48:	4599      	cmp	r9, r3
 800db4a:	dd06      	ble.n	800db5a <__kernel_rem_pio2+0x3da>
 800db4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db4e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800db52:	f108 0801 	add.w	r8, r8, #1
 800db56:	930a      	str	r3, [sp, #40]	; 0x28
 800db58:	e7df      	b.n	800db1a <__kernel_rem_pio2+0x39a>
 800db5a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800db5e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800db62:	f7f2 fd51 	bl	8000608 <__aeabi_dmul>
 800db66:	4602      	mov	r2, r0
 800db68:	460b      	mov	r3, r1
 800db6a:	4630      	mov	r0, r6
 800db6c:	4639      	mov	r1, r7
 800db6e:	f7f2 fb95 	bl	800029c <__adddf3>
 800db72:	f109 0901 	add.w	r9, r9, #1
 800db76:	4606      	mov	r6, r0
 800db78:	460f      	mov	r7, r1
 800db7a:	e7e4      	b.n	800db46 <__kernel_rem_pio2+0x3c6>
 800db7c:	3d01      	subs	r5, #1
 800db7e:	e748      	b.n	800da12 <__kernel_rem_pio2+0x292>
 800db80:	ec47 6b10 	vmov	d0, r6, r7
 800db84:	f1ca 0000 	rsb	r0, sl, #0
 800db88:	f000 fa8a 	bl	800e0a0 <scalbn>
 800db8c:	ec57 6b10 	vmov	r6, r7, d0
 800db90:	4ba0      	ldr	r3, [pc, #640]	; (800de14 <__kernel_rem_pio2+0x694>)
 800db92:	ee10 0a10 	vmov	r0, s0
 800db96:	2200      	movs	r2, #0
 800db98:	4639      	mov	r1, r7
 800db9a:	f7f2 ffbb 	bl	8000b14 <__aeabi_dcmpge>
 800db9e:	b1f8      	cbz	r0, 800dbe0 <__kernel_rem_pio2+0x460>
 800dba0:	4b9d      	ldr	r3, [pc, #628]	; (800de18 <__kernel_rem_pio2+0x698>)
 800dba2:	2200      	movs	r2, #0
 800dba4:	4630      	mov	r0, r6
 800dba6:	4639      	mov	r1, r7
 800dba8:	f7f2 fd2e 	bl	8000608 <__aeabi_dmul>
 800dbac:	f7f2 ffdc 	bl	8000b68 <__aeabi_d2iz>
 800dbb0:	4680      	mov	r8, r0
 800dbb2:	f7f2 fcbf 	bl	8000534 <__aeabi_i2d>
 800dbb6:	4b97      	ldr	r3, [pc, #604]	; (800de14 <__kernel_rem_pio2+0x694>)
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f7f2 fd25 	bl	8000608 <__aeabi_dmul>
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	4639      	mov	r1, r7
 800dbc4:	4630      	mov	r0, r6
 800dbc6:	f7f2 fb67 	bl	8000298 <__aeabi_dsub>
 800dbca:	f7f2 ffcd 	bl	8000b68 <__aeabi_d2iz>
 800dbce:	1c65      	adds	r5, r4, #1
 800dbd0:	ab0e      	add	r3, sp, #56	; 0x38
 800dbd2:	f10a 0a18 	add.w	sl, sl, #24
 800dbd6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dbda:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800dbde:	e720      	b.n	800da22 <__kernel_rem_pio2+0x2a2>
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	4639      	mov	r1, r7
 800dbe4:	f7f2 ffc0 	bl	8000b68 <__aeabi_d2iz>
 800dbe8:	ab0e      	add	r3, sp, #56	; 0x38
 800dbea:	4625      	mov	r5, r4
 800dbec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dbf0:	e717      	b.n	800da22 <__kernel_rem_pio2+0x2a2>
 800dbf2:	ab0e      	add	r3, sp, #56	; 0x38
 800dbf4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800dbf8:	f7f2 fc9c 	bl	8000534 <__aeabi_i2d>
 800dbfc:	4632      	mov	r2, r6
 800dbfe:	463b      	mov	r3, r7
 800dc00:	f7f2 fd02 	bl	8000608 <__aeabi_dmul>
 800dc04:	4b84      	ldr	r3, [pc, #528]	; (800de18 <__kernel_rem_pio2+0x698>)
 800dc06:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	4639      	mov	r1, r7
 800dc10:	f7f2 fcfa 	bl	8000608 <__aeabi_dmul>
 800dc14:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc18:	4606      	mov	r6, r0
 800dc1a:	460f      	mov	r7, r1
 800dc1c:	e70f      	b.n	800da3e <__kernel_rem_pio2+0x2be>
 800dc1e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800dc22:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800dc26:	f7f2 fcef 	bl	8000608 <__aeabi_dmul>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc32:	f7f2 fb33 	bl	800029c <__adddf3>
 800dc36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dc3a:	f108 0801 	add.w	r8, r8, #1
 800dc3e:	9b02      	ldr	r3, [sp, #8]
 800dc40:	4598      	cmp	r8, r3
 800dc42:	dc01      	bgt.n	800dc48 <__kernel_rem_pio2+0x4c8>
 800dc44:	45b8      	cmp	r8, r7
 800dc46:	ddea      	ble.n	800dc1e <__kernel_rem_pio2+0x49e>
 800dc48:	ed9d 7b06 	vldr	d7, [sp, #24]
 800dc4c:	ab4a      	add	r3, sp, #296	; 0x128
 800dc4e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800dc52:	ed87 7b00 	vstr	d7, [r7]
 800dc56:	3e01      	subs	r6, #1
 800dc58:	e6f8      	b.n	800da4c <__kernel_rem_pio2+0x2cc>
 800dc5a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800dc5c:	2b02      	cmp	r3, #2
 800dc5e:	dc0b      	bgt.n	800dc78 <__kernel_rem_pio2+0x4f8>
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	dc35      	bgt.n	800dcd0 <__kernel_rem_pio2+0x550>
 800dc64:	d059      	beq.n	800dd1a <__kernel_rem_pio2+0x59a>
 800dc66:	9b04      	ldr	r3, [sp, #16]
 800dc68:	f003 0007 	and.w	r0, r3, #7
 800dc6c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800dc70:	ecbd 8b02 	vpop	{d8}
 800dc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc78:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800dc7a:	2b03      	cmp	r3, #3
 800dc7c:	d1f3      	bne.n	800dc66 <__kernel_rem_pio2+0x4e6>
 800dc7e:	ab4a      	add	r3, sp, #296	; 0x128
 800dc80:	4423      	add	r3, r4
 800dc82:	9306      	str	r3, [sp, #24]
 800dc84:	461c      	mov	r4, r3
 800dc86:	469a      	mov	sl, r3
 800dc88:	9502      	str	r5, [sp, #8]
 800dc8a:	9b02      	ldr	r3, [sp, #8]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f1aa 0a08 	sub.w	sl, sl, #8
 800dc92:	dc6b      	bgt.n	800dd6c <__kernel_rem_pio2+0x5ec>
 800dc94:	46aa      	mov	sl, r5
 800dc96:	f1ba 0f01 	cmp.w	sl, #1
 800dc9a:	f1a4 0408 	sub.w	r4, r4, #8
 800dc9e:	f300 8085 	bgt.w	800ddac <__kernel_rem_pio2+0x62c>
 800dca2:	9c06      	ldr	r4, [sp, #24]
 800dca4:	2000      	movs	r0, #0
 800dca6:	3408      	adds	r4, #8
 800dca8:	2100      	movs	r1, #0
 800dcaa:	2d01      	cmp	r5, #1
 800dcac:	f300 809d 	bgt.w	800ddea <__kernel_rem_pio2+0x66a>
 800dcb0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800dcb4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800dcb8:	f1bb 0f00 	cmp.w	fp, #0
 800dcbc:	f040 809b 	bne.w	800ddf6 <__kernel_rem_pio2+0x676>
 800dcc0:	9b01      	ldr	r3, [sp, #4]
 800dcc2:	e9c3 5600 	strd	r5, r6, [r3]
 800dcc6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800dcca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dcce:	e7ca      	b.n	800dc66 <__kernel_rem_pio2+0x4e6>
 800dcd0:	3408      	adds	r4, #8
 800dcd2:	ab4a      	add	r3, sp, #296	; 0x128
 800dcd4:	441c      	add	r4, r3
 800dcd6:	462e      	mov	r6, r5
 800dcd8:	2000      	movs	r0, #0
 800dcda:	2100      	movs	r1, #0
 800dcdc:	2e00      	cmp	r6, #0
 800dcde:	da36      	bge.n	800dd4e <__kernel_rem_pio2+0x5ce>
 800dce0:	f1bb 0f00 	cmp.w	fp, #0
 800dce4:	d039      	beq.n	800dd5a <__kernel_rem_pio2+0x5da>
 800dce6:	4602      	mov	r2, r0
 800dce8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dcec:	9c01      	ldr	r4, [sp, #4]
 800dcee:	e9c4 2300 	strd	r2, r3, [r4]
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800dcfa:	f7f2 facd 	bl	8000298 <__aeabi_dsub>
 800dcfe:	ae4c      	add	r6, sp, #304	; 0x130
 800dd00:	2401      	movs	r4, #1
 800dd02:	42a5      	cmp	r5, r4
 800dd04:	da2c      	bge.n	800dd60 <__kernel_rem_pio2+0x5e0>
 800dd06:	f1bb 0f00 	cmp.w	fp, #0
 800dd0a:	d002      	beq.n	800dd12 <__kernel_rem_pio2+0x592>
 800dd0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd10:	4619      	mov	r1, r3
 800dd12:	9b01      	ldr	r3, [sp, #4]
 800dd14:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dd18:	e7a5      	b.n	800dc66 <__kernel_rem_pio2+0x4e6>
 800dd1a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800dd1e:	eb0d 0403 	add.w	r4, sp, r3
 800dd22:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800dd26:	2000      	movs	r0, #0
 800dd28:	2100      	movs	r1, #0
 800dd2a:	2d00      	cmp	r5, #0
 800dd2c:	da09      	bge.n	800dd42 <__kernel_rem_pio2+0x5c2>
 800dd2e:	f1bb 0f00 	cmp.w	fp, #0
 800dd32:	d002      	beq.n	800dd3a <__kernel_rem_pio2+0x5ba>
 800dd34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd38:	4619      	mov	r1, r3
 800dd3a:	9b01      	ldr	r3, [sp, #4]
 800dd3c:	e9c3 0100 	strd	r0, r1, [r3]
 800dd40:	e791      	b.n	800dc66 <__kernel_rem_pio2+0x4e6>
 800dd42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dd46:	f7f2 faa9 	bl	800029c <__adddf3>
 800dd4a:	3d01      	subs	r5, #1
 800dd4c:	e7ed      	b.n	800dd2a <__kernel_rem_pio2+0x5aa>
 800dd4e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dd52:	f7f2 faa3 	bl	800029c <__adddf3>
 800dd56:	3e01      	subs	r6, #1
 800dd58:	e7c0      	b.n	800dcdc <__kernel_rem_pio2+0x55c>
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	e7c5      	b.n	800dcec <__kernel_rem_pio2+0x56c>
 800dd60:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800dd64:	f7f2 fa9a 	bl	800029c <__adddf3>
 800dd68:	3401      	adds	r4, #1
 800dd6a:	e7ca      	b.n	800dd02 <__kernel_rem_pio2+0x582>
 800dd6c:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd70:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800dd74:	9b02      	ldr	r3, [sp, #8]
 800dd76:	3b01      	subs	r3, #1
 800dd78:	9302      	str	r3, [sp, #8]
 800dd7a:	4632      	mov	r2, r6
 800dd7c:	463b      	mov	r3, r7
 800dd7e:	4640      	mov	r0, r8
 800dd80:	4649      	mov	r1, r9
 800dd82:	f7f2 fa8b 	bl	800029c <__adddf3>
 800dd86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	4640      	mov	r0, r8
 800dd90:	4649      	mov	r1, r9
 800dd92:	f7f2 fa81 	bl	8000298 <__aeabi_dsub>
 800dd96:	4632      	mov	r2, r6
 800dd98:	463b      	mov	r3, r7
 800dd9a:	f7f2 fa7f 	bl	800029c <__adddf3>
 800dd9e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800dda2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dda6:	ed8a 7b00 	vstr	d7, [sl]
 800ddaa:	e76e      	b.n	800dc8a <__kernel_rem_pio2+0x50a>
 800ddac:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ddb0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ddb4:	4640      	mov	r0, r8
 800ddb6:	4632      	mov	r2, r6
 800ddb8:	463b      	mov	r3, r7
 800ddba:	4649      	mov	r1, r9
 800ddbc:	f7f2 fa6e 	bl	800029c <__adddf3>
 800ddc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	460b      	mov	r3, r1
 800ddc8:	4640      	mov	r0, r8
 800ddca:	4649      	mov	r1, r9
 800ddcc:	f7f2 fa64 	bl	8000298 <__aeabi_dsub>
 800ddd0:	4632      	mov	r2, r6
 800ddd2:	463b      	mov	r3, r7
 800ddd4:	f7f2 fa62 	bl	800029c <__adddf3>
 800ddd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dddc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dde0:	ed84 7b00 	vstr	d7, [r4]
 800dde4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dde8:	e755      	b.n	800dc96 <__kernel_rem_pio2+0x516>
 800ddea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ddee:	f7f2 fa55 	bl	800029c <__adddf3>
 800ddf2:	3d01      	subs	r5, #1
 800ddf4:	e759      	b.n	800dcaa <__kernel_rem_pio2+0x52a>
 800ddf6:	9b01      	ldr	r3, [sp, #4]
 800ddf8:	9a01      	ldr	r2, [sp, #4]
 800ddfa:	601d      	str	r5, [r3, #0]
 800ddfc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800de00:	605c      	str	r4, [r3, #4]
 800de02:	609f      	str	r7, [r3, #8]
 800de04:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800de08:	60d3      	str	r3, [r2, #12]
 800de0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de0e:	6110      	str	r0, [r2, #16]
 800de10:	6153      	str	r3, [r2, #20]
 800de12:	e728      	b.n	800dc66 <__kernel_rem_pio2+0x4e6>
 800de14:	41700000 	.word	0x41700000
 800de18:	3e700000 	.word	0x3e700000
 800de1c:	00000000 	.word	0x00000000

0800de20 <__kernel_sin>:
 800de20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de24:	ed2d 8b04 	vpush	{d8-d9}
 800de28:	eeb0 8a41 	vmov.f32	s16, s2
 800de2c:	eef0 8a61 	vmov.f32	s17, s3
 800de30:	ec55 4b10 	vmov	r4, r5, d0
 800de34:	b083      	sub	sp, #12
 800de36:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800de3a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800de3e:	9001      	str	r0, [sp, #4]
 800de40:	da06      	bge.n	800de50 <__kernel_sin+0x30>
 800de42:	ee10 0a10 	vmov	r0, s0
 800de46:	4629      	mov	r1, r5
 800de48:	f7f2 fe8e 	bl	8000b68 <__aeabi_d2iz>
 800de4c:	2800      	cmp	r0, #0
 800de4e:	d051      	beq.n	800def4 <__kernel_sin+0xd4>
 800de50:	4622      	mov	r2, r4
 800de52:	462b      	mov	r3, r5
 800de54:	4620      	mov	r0, r4
 800de56:	4629      	mov	r1, r5
 800de58:	f7f2 fbd6 	bl	8000608 <__aeabi_dmul>
 800de5c:	4682      	mov	sl, r0
 800de5e:	468b      	mov	fp, r1
 800de60:	4602      	mov	r2, r0
 800de62:	460b      	mov	r3, r1
 800de64:	4620      	mov	r0, r4
 800de66:	4629      	mov	r1, r5
 800de68:	f7f2 fbce 	bl	8000608 <__aeabi_dmul>
 800de6c:	a341      	add	r3, pc, #260	; (adr r3, 800df74 <__kernel_sin+0x154>)
 800de6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de72:	4680      	mov	r8, r0
 800de74:	4689      	mov	r9, r1
 800de76:	4650      	mov	r0, sl
 800de78:	4659      	mov	r1, fp
 800de7a:	f7f2 fbc5 	bl	8000608 <__aeabi_dmul>
 800de7e:	a33f      	add	r3, pc, #252	; (adr r3, 800df7c <__kernel_sin+0x15c>)
 800de80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de84:	f7f2 fa08 	bl	8000298 <__aeabi_dsub>
 800de88:	4652      	mov	r2, sl
 800de8a:	465b      	mov	r3, fp
 800de8c:	f7f2 fbbc 	bl	8000608 <__aeabi_dmul>
 800de90:	a33c      	add	r3, pc, #240	; (adr r3, 800df84 <__kernel_sin+0x164>)
 800de92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de96:	f7f2 fa01 	bl	800029c <__adddf3>
 800de9a:	4652      	mov	r2, sl
 800de9c:	465b      	mov	r3, fp
 800de9e:	f7f2 fbb3 	bl	8000608 <__aeabi_dmul>
 800dea2:	a33a      	add	r3, pc, #232	; (adr r3, 800df8c <__kernel_sin+0x16c>)
 800dea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea8:	f7f2 f9f6 	bl	8000298 <__aeabi_dsub>
 800deac:	4652      	mov	r2, sl
 800deae:	465b      	mov	r3, fp
 800deb0:	f7f2 fbaa 	bl	8000608 <__aeabi_dmul>
 800deb4:	a337      	add	r3, pc, #220	; (adr r3, 800df94 <__kernel_sin+0x174>)
 800deb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deba:	f7f2 f9ef 	bl	800029c <__adddf3>
 800debe:	9b01      	ldr	r3, [sp, #4]
 800dec0:	4606      	mov	r6, r0
 800dec2:	460f      	mov	r7, r1
 800dec4:	b9eb      	cbnz	r3, 800df02 <__kernel_sin+0xe2>
 800dec6:	4602      	mov	r2, r0
 800dec8:	460b      	mov	r3, r1
 800deca:	4650      	mov	r0, sl
 800decc:	4659      	mov	r1, fp
 800dece:	f7f2 fb9b 	bl	8000608 <__aeabi_dmul>
 800ded2:	a325      	add	r3, pc, #148	; (adr r3, 800df68 <__kernel_sin+0x148>)
 800ded4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded8:	f7f2 f9de 	bl	8000298 <__aeabi_dsub>
 800dedc:	4642      	mov	r2, r8
 800dede:	464b      	mov	r3, r9
 800dee0:	f7f2 fb92 	bl	8000608 <__aeabi_dmul>
 800dee4:	4602      	mov	r2, r0
 800dee6:	460b      	mov	r3, r1
 800dee8:	4620      	mov	r0, r4
 800deea:	4629      	mov	r1, r5
 800deec:	f7f2 f9d6 	bl	800029c <__adddf3>
 800def0:	4604      	mov	r4, r0
 800def2:	460d      	mov	r5, r1
 800def4:	ec45 4b10 	vmov	d0, r4, r5
 800def8:	b003      	add	sp, #12
 800defa:	ecbd 8b04 	vpop	{d8-d9}
 800defe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df02:	4b1b      	ldr	r3, [pc, #108]	; (800df70 <__kernel_sin+0x150>)
 800df04:	ec51 0b18 	vmov	r0, r1, d8
 800df08:	2200      	movs	r2, #0
 800df0a:	f7f2 fb7d 	bl	8000608 <__aeabi_dmul>
 800df0e:	4632      	mov	r2, r6
 800df10:	ec41 0b19 	vmov	d9, r0, r1
 800df14:	463b      	mov	r3, r7
 800df16:	4640      	mov	r0, r8
 800df18:	4649      	mov	r1, r9
 800df1a:	f7f2 fb75 	bl	8000608 <__aeabi_dmul>
 800df1e:	4602      	mov	r2, r0
 800df20:	460b      	mov	r3, r1
 800df22:	ec51 0b19 	vmov	r0, r1, d9
 800df26:	f7f2 f9b7 	bl	8000298 <__aeabi_dsub>
 800df2a:	4652      	mov	r2, sl
 800df2c:	465b      	mov	r3, fp
 800df2e:	f7f2 fb6b 	bl	8000608 <__aeabi_dmul>
 800df32:	ec53 2b18 	vmov	r2, r3, d8
 800df36:	f7f2 f9af 	bl	8000298 <__aeabi_dsub>
 800df3a:	a30b      	add	r3, pc, #44	; (adr r3, 800df68 <__kernel_sin+0x148>)
 800df3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df40:	4606      	mov	r6, r0
 800df42:	460f      	mov	r7, r1
 800df44:	4640      	mov	r0, r8
 800df46:	4649      	mov	r1, r9
 800df48:	f7f2 fb5e 	bl	8000608 <__aeabi_dmul>
 800df4c:	4602      	mov	r2, r0
 800df4e:	460b      	mov	r3, r1
 800df50:	4630      	mov	r0, r6
 800df52:	4639      	mov	r1, r7
 800df54:	f7f2 f9a2 	bl	800029c <__adddf3>
 800df58:	4602      	mov	r2, r0
 800df5a:	460b      	mov	r3, r1
 800df5c:	4620      	mov	r0, r4
 800df5e:	4629      	mov	r1, r5
 800df60:	f7f2 f99a 	bl	8000298 <__aeabi_dsub>
 800df64:	e7c4      	b.n	800def0 <__kernel_sin+0xd0>
 800df66:	bf00      	nop
 800df68:	55555549 	.word	0x55555549
 800df6c:	3fc55555 	.word	0x3fc55555
 800df70:	3fe00000 	.word	0x3fe00000
 800df74:	5acfd57c 	.word	0x5acfd57c
 800df78:	3de5d93a 	.word	0x3de5d93a
 800df7c:	8a2b9ceb 	.word	0x8a2b9ceb
 800df80:	3e5ae5e6 	.word	0x3e5ae5e6
 800df84:	57b1fe7d 	.word	0x57b1fe7d
 800df88:	3ec71de3 	.word	0x3ec71de3
 800df8c:	19c161d5 	.word	0x19c161d5
 800df90:	3f2a01a0 	.word	0x3f2a01a0
 800df94:	1110f8a6 	.word	0x1110f8a6
 800df98:	3f811111 	.word	0x3f811111
 800df9c:	00000000 	.word	0x00000000

0800dfa0 <floor>:
 800dfa0:	ec51 0b10 	vmov	r0, r1, d0
 800dfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfa8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800dfac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800dfb0:	2e13      	cmp	r6, #19
 800dfb2:	ee10 5a10 	vmov	r5, s0
 800dfb6:	ee10 8a10 	vmov	r8, s0
 800dfba:	460c      	mov	r4, r1
 800dfbc:	dc32      	bgt.n	800e024 <floor+0x84>
 800dfbe:	2e00      	cmp	r6, #0
 800dfc0:	da14      	bge.n	800dfec <floor+0x4c>
 800dfc2:	a333      	add	r3, pc, #204	; (adr r3, 800e090 <floor+0xf0>)
 800dfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc8:	f7f2 f968 	bl	800029c <__adddf3>
 800dfcc:	2200      	movs	r2, #0
 800dfce:	2300      	movs	r3, #0
 800dfd0:	f7f2 fdaa 	bl	8000b28 <__aeabi_dcmpgt>
 800dfd4:	b138      	cbz	r0, 800dfe6 <floor+0x46>
 800dfd6:	2c00      	cmp	r4, #0
 800dfd8:	da57      	bge.n	800e08a <floor+0xea>
 800dfda:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800dfde:	431d      	orrs	r5, r3
 800dfe0:	d001      	beq.n	800dfe6 <floor+0x46>
 800dfe2:	4c2d      	ldr	r4, [pc, #180]	; (800e098 <floor+0xf8>)
 800dfe4:	2500      	movs	r5, #0
 800dfe6:	4621      	mov	r1, r4
 800dfe8:	4628      	mov	r0, r5
 800dfea:	e025      	b.n	800e038 <floor+0x98>
 800dfec:	4f2b      	ldr	r7, [pc, #172]	; (800e09c <floor+0xfc>)
 800dfee:	4137      	asrs	r7, r6
 800dff0:	ea01 0307 	and.w	r3, r1, r7
 800dff4:	4303      	orrs	r3, r0
 800dff6:	d01f      	beq.n	800e038 <floor+0x98>
 800dff8:	a325      	add	r3, pc, #148	; (adr r3, 800e090 <floor+0xf0>)
 800dffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffe:	f7f2 f94d 	bl	800029c <__adddf3>
 800e002:	2200      	movs	r2, #0
 800e004:	2300      	movs	r3, #0
 800e006:	f7f2 fd8f 	bl	8000b28 <__aeabi_dcmpgt>
 800e00a:	2800      	cmp	r0, #0
 800e00c:	d0eb      	beq.n	800dfe6 <floor+0x46>
 800e00e:	2c00      	cmp	r4, #0
 800e010:	bfbe      	ittt	lt
 800e012:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e016:	fa43 f606 	asrlt.w	r6, r3, r6
 800e01a:	19a4      	addlt	r4, r4, r6
 800e01c:	ea24 0407 	bic.w	r4, r4, r7
 800e020:	2500      	movs	r5, #0
 800e022:	e7e0      	b.n	800dfe6 <floor+0x46>
 800e024:	2e33      	cmp	r6, #51	; 0x33
 800e026:	dd0b      	ble.n	800e040 <floor+0xa0>
 800e028:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e02c:	d104      	bne.n	800e038 <floor+0x98>
 800e02e:	ee10 2a10 	vmov	r2, s0
 800e032:	460b      	mov	r3, r1
 800e034:	f7f2 f932 	bl	800029c <__adddf3>
 800e038:	ec41 0b10 	vmov	d0, r0, r1
 800e03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e040:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e044:	f04f 33ff 	mov.w	r3, #4294967295
 800e048:	fa23 f707 	lsr.w	r7, r3, r7
 800e04c:	4207      	tst	r7, r0
 800e04e:	d0f3      	beq.n	800e038 <floor+0x98>
 800e050:	a30f      	add	r3, pc, #60	; (adr r3, 800e090 <floor+0xf0>)
 800e052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e056:	f7f2 f921 	bl	800029c <__adddf3>
 800e05a:	2200      	movs	r2, #0
 800e05c:	2300      	movs	r3, #0
 800e05e:	f7f2 fd63 	bl	8000b28 <__aeabi_dcmpgt>
 800e062:	2800      	cmp	r0, #0
 800e064:	d0bf      	beq.n	800dfe6 <floor+0x46>
 800e066:	2c00      	cmp	r4, #0
 800e068:	da02      	bge.n	800e070 <floor+0xd0>
 800e06a:	2e14      	cmp	r6, #20
 800e06c:	d103      	bne.n	800e076 <floor+0xd6>
 800e06e:	3401      	adds	r4, #1
 800e070:	ea25 0507 	bic.w	r5, r5, r7
 800e074:	e7b7      	b.n	800dfe6 <floor+0x46>
 800e076:	2301      	movs	r3, #1
 800e078:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e07c:	fa03 f606 	lsl.w	r6, r3, r6
 800e080:	4435      	add	r5, r6
 800e082:	4545      	cmp	r5, r8
 800e084:	bf38      	it	cc
 800e086:	18e4      	addcc	r4, r4, r3
 800e088:	e7f2      	b.n	800e070 <floor+0xd0>
 800e08a:	2500      	movs	r5, #0
 800e08c:	462c      	mov	r4, r5
 800e08e:	e7aa      	b.n	800dfe6 <floor+0x46>
 800e090:	8800759c 	.word	0x8800759c
 800e094:	7e37e43c 	.word	0x7e37e43c
 800e098:	bff00000 	.word	0xbff00000
 800e09c:	000fffff 	.word	0x000fffff

0800e0a0 <scalbn>:
 800e0a0:	b570      	push	{r4, r5, r6, lr}
 800e0a2:	ec55 4b10 	vmov	r4, r5, d0
 800e0a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e0aa:	4606      	mov	r6, r0
 800e0ac:	462b      	mov	r3, r5
 800e0ae:	b99a      	cbnz	r2, 800e0d8 <scalbn+0x38>
 800e0b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e0b4:	4323      	orrs	r3, r4
 800e0b6:	d036      	beq.n	800e126 <scalbn+0x86>
 800e0b8:	4b39      	ldr	r3, [pc, #228]	; (800e1a0 <scalbn+0x100>)
 800e0ba:	4629      	mov	r1, r5
 800e0bc:	ee10 0a10 	vmov	r0, s0
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f7f2 faa1 	bl	8000608 <__aeabi_dmul>
 800e0c6:	4b37      	ldr	r3, [pc, #220]	; (800e1a4 <scalbn+0x104>)
 800e0c8:	429e      	cmp	r6, r3
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	460d      	mov	r5, r1
 800e0ce:	da10      	bge.n	800e0f2 <scalbn+0x52>
 800e0d0:	a32b      	add	r3, pc, #172	; (adr r3, 800e180 <scalbn+0xe0>)
 800e0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d6:	e03a      	b.n	800e14e <scalbn+0xae>
 800e0d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e0dc:	428a      	cmp	r2, r1
 800e0de:	d10c      	bne.n	800e0fa <scalbn+0x5a>
 800e0e0:	ee10 2a10 	vmov	r2, s0
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	4629      	mov	r1, r5
 800e0e8:	f7f2 f8d8 	bl	800029c <__adddf3>
 800e0ec:	4604      	mov	r4, r0
 800e0ee:	460d      	mov	r5, r1
 800e0f0:	e019      	b.n	800e126 <scalbn+0x86>
 800e0f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	3a36      	subs	r2, #54	; 0x36
 800e0fa:	4432      	add	r2, r6
 800e0fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e100:	428a      	cmp	r2, r1
 800e102:	dd08      	ble.n	800e116 <scalbn+0x76>
 800e104:	2d00      	cmp	r5, #0
 800e106:	a120      	add	r1, pc, #128	; (adr r1, 800e188 <scalbn+0xe8>)
 800e108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e10c:	da1c      	bge.n	800e148 <scalbn+0xa8>
 800e10e:	a120      	add	r1, pc, #128	; (adr r1, 800e190 <scalbn+0xf0>)
 800e110:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e114:	e018      	b.n	800e148 <scalbn+0xa8>
 800e116:	2a00      	cmp	r2, #0
 800e118:	dd08      	ble.n	800e12c <scalbn+0x8c>
 800e11a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e11e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e122:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e126:	ec45 4b10 	vmov	d0, r4, r5
 800e12a:	bd70      	pop	{r4, r5, r6, pc}
 800e12c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e130:	da19      	bge.n	800e166 <scalbn+0xc6>
 800e132:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e136:	429e      	cmp	r6, r3
 800e138:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e13c:	dd0a      	ble.n	800e154 <scalbn+0xb4>
 800e13e:	a112      	add	r1, pc, #72	; (adr r1, 800e188 <scalbn+0xe8>)
 800e140:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d1e2      	bne.n	800e10e <scalbn+0x6e>
 800e148:	a30f      	add	r3, pc, #60	; (adr r3, 800e188 <scalbn+0xe8>)
 800e14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14e:	f7f2 fa5b 	bl	8000608 <__aeabi_dmul>
 800e152:	e7cb      	b.n	800e0ec <scalbn+0x4c>
 800e154:	a10a      	add	r1, pc, #40	; (adr r1, 800e180 <scalbn+0xe0>)
 800e156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d0b8      	beq.n	800e0d0 <scalbn+0x30>
 800e15e:	a10e      	add	r1, pc, #56	; (adr r1, 800e198 <scalbn+0xf8>)
 800e160:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e164:	e7b4      	b.n	800e0d0 <scalbn+0x30>
 800e166:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e16a:	3236      	adds	r2, #54	; 0x36
 800e16c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e170:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e174:	4620      	mov	r0, r4
 800e176:	4b0c      	ldr	r3, [pc, #48]	; (800e1a8 <scalbn+0x108>)
 800e178:	2200      	movs	r2, #0
 800e17a:	e7e8      	b.n	800e14e <scalbn+0xae>
 800e17c:	f3af 8000 	nop.w
 800e180:	c2f8f359 	.word	0xc2f8f359
 800e184:	01a56e1f 	.word	0x01a56e1f
 800e188:	8800759c 	.word	0x8800759c
 800e18c:	7e37e43c 	.word	0x7e37e43c
 800e190:	8800759c 	.word	0x8800759c
 800e194:	fe37e43c 	.word	0xfe37e43c
 800e198:	c2f8f359 	.word	0xc2f8f359
 800e19c:	81a56e1f 	.word	0x81a56e1f
 800e1a0:	43500000 	.word	0x43500000
 800e1a4:	ffff3cb0 	.word	0xffff3cb0
 800e1a8:	3c900000 	.word	0x3c900000

0800e1ac <_init>:
 800e1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ae:	bf00      	nop
 800e1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1b2:	bc08      	pop	{r3}
 800e1b4:	469e      	mov	lr, r3
 800e1b6:	4770      	bx	lr

0800e1b8 <_fini>:
 800e1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ba:	bf00      	nop
 800e1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1be:	bc08      	pop	{r3}
 800e1c0:	469e      	mov	lr, r3
 800e1c2:	4770      	bx	lr
