
FRA262-G6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad8  08012e40  08012e40  00022e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013918  08013918  00030410  2**0
                  CONTENTS
  4 .ARM          00000008  08013918  08013918  00023918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013920  08013920  00030410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013920  08013920  00023920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013924  08013924  00023924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  08013928  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c14  20000410  08013d38  00030410  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002024  08013d38  00032024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192b4  00000000  00000000  00030440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000373f  00000000  00000000  000496f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  0004ce38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  0004e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac3f  00000000  00000000  0004f5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b4cd  00000000  00000000  0006a1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d37  00000000  00000000  000856ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001263e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f34  00000000  00000000  00126434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000410 	.word	0x20000410
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012e24 	.word	0x08012e24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000414 	.word	0x20000414
 80001dc:	08012e24 	.word	0x08012e24

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <ENDEFF_EMERGENCY>:
		timestamp = HAL_GetTick();
		complete = 1;
		return;
	}
}
void ENDEFF_EMERGENCY(I2C_HandleTypeDef *hi2c) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	6078      	str	r0, [r7, #4]
	static uint8_t data[1] = { 0xF0 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001010:	f005 f96a 	bl	80062e8 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <ENDEFF_EMERGENCY+0x44>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b09      	cmp	r3, #9
 800101e:	d911      	bls.n	8001044 <ENDEFF_EMERGENCY+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 1, HAL_MAX_DELAY);
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <ENDEFF_EMERGENCY+0x48>)
 800102a:	212a      	movs	r1, #42	; 0x2a
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f006 fc2f 	bl	8007890 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001032:	f005 f959 	bl	80062e8 <HAL_GetTick>
 8001036:	4603      	mov	r3, r0
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <ENDEFF_EMERGENCY+0x44>)
 800103a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <ENDEFF_EMERGENCY+0x4c>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]
		return;
 8001042:	bf00      	nop
	}

}
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000042c 	.word	0x2000042c
 8001050:	20000000 	.word	0x20000000
 8001054:	20000430 	.word	0x20000430

08001058 <ENDEFF_EMERGENCY_QUIT>:
void ENDEFF_EMERGENCY_QUIT(I2C_HandleTypeDef *hi2c) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
 800105e:	6078      	str	r0, [r7, #4]
	static uint8_t data[4] = { 0xE5, 0x7A, 0xFF, 0x81 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001060:	f005 f942 	bl	80062e8 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <ENDEFF_EMERGENCY_QUIT+0x44>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b09      	cmp	r3, #9
 800106e:	d911      	bls.n	8001094 <ENDEFF_EMERGENCY_QUIT+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 4, HAL_MAX_DELAY);
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2304      	movs	r3, #4
 8001078:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <ENDEFF_EMERGENCY_QUIT+0x48>)
 800107a:	212a      	movs	r1, #42	; 0x2a
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f006 fc07 	bl	8007890 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001082:	f005 f931 	bl	80062e8 <HAL_GetTick>
 8001086:	4603      	mov	r3, r0
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <ENDEFF_EMERGENCY_QUIT+0x44>)
 800108a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <ENDEFF_EMERGENCY_QUIT+0x4c>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
		return;
 8001092:	bf00      	nop
	}
}
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000042c 	.word	0x2000042c
 80010a0:	20000004 	.word	0x20000004
 80010a4:	20000430 	.word	0x20000430

080010a8 <ENDEFF_TEST_MODE>:
void ENDEFF_TEST_MODE(I2C_HandleTypeDef *hi2c) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x11 };
	if (HAL_GetTick() - timestamp >= 10) {
 80010b0:	f005 f91a 	bl	80062e8 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <ENDEFF_TEST_MODE+0x44>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b09      	cmp	r3, #9
 80010be:	d911      	bls.n	80010e4 <ENDEFF_TEST_MODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2302      	movs	r3, #2
 80010c8:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <ENDEFF_TEST_MODE+0x48>)
 80010ca:	212a      	movs	r1, #42	; 0x2a
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f006 fbdf 	bl	8007890 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80010d2:	f005 f909 	bl	80062e8 <HAL_GetTick>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <ENDEFF_TEST_MODE+0x44>)
 80010da:	6013      	str	r3, [r2, #0]
		complete = 1;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <ENDEFF_TEST_MODE+0x4c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
		return;
 80010e2:	bf00      	nop
	}
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000042c 	.word	0x2000042c
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000430 	.word	0x20000430

080010f8 <ENDEFF_TEST_MODE_QUIT>:
void ENDEFF_TEST_MODE_QUIT(I2C_HandleTypeDef *hi2c) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x01, 0x00 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001100:	f005 f8f2 	bl	80062e8 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <ENDEFF_TEST_MODE_QUIT+0x44>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b09      	cmp	r3, #9
 800110e:	d911      	bls.n	8001134 <ENDEFF_TEST_MODE_QUIT+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2302      	movs	r3, #2
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <ENDEFF_TEST_MODE_QUIT+0x48>)
 800111a:	212a      	movs	r1, #42	; 0x2a
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f006 fbb7 	bl	8007890 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001122:	f005 f8e1 	bl	80062e8 <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <ENDEFF_TEST_MODE_QUIT+0x44>)
 800112a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <ENDEFF_TEST_MODE_QUIT+0x4c>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]
		return;
 8001132:	bf00      	nop
	}
}
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000042c 	.word	0x2000042c
 8001140:	2000000c 	.word	0x2000000c
 8001144:	20000430 	.word	0x20000430

08001148 <ENDEFF_GRIPPER_RUNMODE>:
void ENDEFF_GRIPPER_RUNMODE(I2C_HandleTypeDef *hi2c) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x13 };
	if (HAL_GetTick() - timestamp >= 10) {
 8001150:	f005 f8ca 	bl	80062e8 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <ENDEFF_GRIPPER_RUNMODE+0x44>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b09      	cmp	r3, #9
 800115e:	d911      	bls.n	8001184 <ENDEFF_GRIPPER_RUNMODE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2302      	movs	r3, #2
 8001168:	4a09      	ldr	r2, [pc, #36]	; (8001190 <ENDEFF_GRIPPER_RUNMODE+0x48>)
 800116a:	212a      	movs	r1, #42	; 0x2a
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f006 fb8f 	bl	8007890 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001172:	f005 f8b9 	bl	80062e8 <HAL_GetTick>
 8001176:	4603      	mov	r3, r0
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <ENDEFF_GRIPPER_RUNMODE+0x44>)
 800117a:	6013      	str	r3, [r2, #0]
		complete = 1;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <ENDEFF_GRIPPER_RUNMODE+0x4c>)
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]
		return;
 8001182:	bf00      	nop
	}
}
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000042c 	.word	0x2000042c
 8001190:	20000010 	.word	0x20000010
 8001194:	20000430 	.word	0x20000430

08001198 <ENDEFF_GRIPPER_IDLE>:
void ENDEFF_GRIPPER_IDLE(I2C_HandleTypeDef *hi2c) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x8C };
	if (HAL_GetTick() - timestamp >= 10) {
 80011a0:	f005 f8a2 	bl	80062e8 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <ENDEFF_GRIPPER_IDLE+0x44>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b09      	cmp	r3, #9
 80011ae:	d911      	bls.n	80011d4 <ENDEFF_GRIPPER_IDLE+0x3c>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2302      	movs	r3, #2
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <ENDEFF_GRIPPER_IDLE+0x48>)
 80011ba:	212a      	movs	r1, #42	; 0x2a
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f006 fb67 	bl	8007890 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 80011c2:	f005 f891 	bl	80062e8 <HAL_GetTick>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <ENDEFF_GRIPPER_IDLE+0x44>)
 80011ca:	6013      	str	r3, [r2, #0]
		complete = 1;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <ENDEFF_GRIPPER_IDLE+0x4c>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
		return;
 80011d2:	bf00      	nop
	}
}
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000042c 	.word	0x2000042c
 80011e0:	20000014 	.word	0x20000014
 80011e4:	20000430 	.word	0x20000430

080011e8 <ENDEFF_GRIPPER_PICK>:
void ENDEFF_GRIPPER_PICK(I2C_HandleTypeDef *hi2c) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x5A };
	if (HAL_GetTick() - timestamp >= 2000) {
 80011f0:	f005 f87a 	bl	80062e8 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <ENDEFF_GRIPPER_PICK+0x44>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001200:	d311      	bcc.n	8001226 <ENDEFF_GRIPPER_PICK+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2302      	movs	r3, #2
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <ENDEFF_GRIPPER_PICK+0x48>)
 800120c:	212a      	movs	r1, #42	; 0x2a
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f006 fb3e 	bl	8007890 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001214:	f005 f868 	bl	80062e8 <HAL_GetTick>
 8001218:	4603      	mov	r3, r0
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <ENDEFF_GRIPPER_PICK+0x44>)
 800121c:	6013      	str	r3, [r2, #0]
		complete = 1;
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <ENDEFF_GRIPPER_PICK+0x4c>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
		return;
 8001224:	bf00      	nop
	}
}
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000042c 	.word	0x2000042c
 8001230:	20000018 	.word	0x20000018
 8001234:	20000430 	.word	0x20000430

08001238 <ENDEFF_GRIPPER_PLACE>:
void ENDEFF_GRIPPER_PLACE(I2C_HandleTypeDef *hi2c) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af02      	add	r7, sp, #8
 800123e:	6078      	str	r0, [r7, #4]
	static uint8_t data[2] = { 0x10, 0x69 };
	if (HAL_GetTick() - timestamp >= 2000) {
 8001240:	f005 f852 	bl	80062e8 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <ENDEFF_GRIPPER_PLACE+0x44>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001250:	d311      	bcc.n	8001276 <ENDEFF_GRIPPER_PLACE+0x3e>
		HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDR, data, 2, HAL_MAX_DELAY);
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2302      	movs	r3, #2
 800125a:	4a09      	ldr	r2, [pc, #36]	; (8001280 <ENDEFF_GRIPPER_PLACE+0x48>)
 800125c:	212a      	movs	r1, #42	; 0x2a
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f006 fb16 	bl	8007890 <HAL_I2C_Master_Transmit>
		timestamp = HAL_GetTick();
 8001264:	f005 f840 	bl	80062e8 <HAL_GetTick>
 8001268:	4603      	mov	r3, r0
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <ENDEFF_GRIPPER_PLACE+0x44>)
 800126c:	6013      	str	r3, [r2, #0]
		complete = 1;
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <ENDEFF_GRIPPER_PLACE+0x4c>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]
		return;
 8001274:	bf00      	nop
	}
}
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2000042c 	.word	0x2000042c
 8001280:	2000001c 	.word	0x2000001c
 8001284:	20000430 	.word	0x20000430

08001288 <ENE_I2C_UPDATE>:

void ENE_I2C_UPDATE(int16_t *DataFrame, I2C_HandleTypeDef *hi2c, uint8_t reinit) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	4613      	mov	r3, r2
 8001294:	71fb      	strb	r3, [r7, #7]
	static uint8_t feedback_flag;
	static enum {
		INIT, TEST, RUNMODE, PICKED
	} END_EFFECTOR_STATE = INIT;

	if (reinit) {
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <ENE_I2C_UPDATE+0x20>
		END_EFFECTOR_STATE = INIT;
 800129c:	4ba6      	ldr	r3, [pc, #664]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
		feedback_flag = 0;
 80012a2:	4ba6      	ldr	r3, [pc, #664]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
	}

	if (feedback_flag && (HAL_GetTick() - feedback_delay > 2200)) {
 80012a8:	4ba4      	ldr	r3, [pc, #656]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00f      	beq.n	80012d0 <ENE_I2C_UPDATE+0x48>
 80012b0:	f005 f81a 	bl	80062e8 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	4ba2      	ldr	r3, [pc, #648]	; (8001540 <ENE_I2C_UPDATE+0x2b8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	f640 0298 	movw	r2, #2200	; 0x898
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d905      	bls.n	80012d0 <ENE_I2C_UPDATE+0x48>
		feedback_flag = 0;
 80012c4:	4b9d      	ldr	r3, [pc, #628]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
		*DataFrame = 0b0010;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2202      	movs	r2, #2
 80012ce:	801a      	strh	r2, [r3, #0]
	}

	switch (END_EFFECTOR_STATE) {
 80012d0:	4b99      	ldr	r3, [pc, #612]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	f200 813c 	bhi.w	8001552 <ENE_I2C_UPDATE+0x2ca>
 80012da:	a201      	add	r2, pc, #4	; (adr r2, 80012e0 <ENE_I2C_UPDATE+0x58>)
 80012dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e0:	080012f1 	.word	0x080012f1
 80012e4:	0800134f 	.word	0x0800134f
 80012e8:	080013b3 	.word	0x080013b3
 80012ec:	08001497 	.word	0x08001497
	case (INIT):
		if ((*DataFrame & 0b0001) == 1) {
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00e      	beq.n	800131e <ENE_I2C_UPDATE+0x96>
			ENDEFF_TEST_MODE(hi2c);
 8001300:	68b8      	ldr	r0, [r7, #8]
 8001302:	f7ff fed1 	bl	80010a8 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 8001306:	4b8f      	ldr	r3, [pc, #572]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	f040 8110 	bne.w	8001530 <ENE_I2C_UPDATE+0x2a8>
				END_EFFECTOR_STATE = TEST;
 8001310:	4b89      	ldr	r3, [pc, #548]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001316:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 800131c:	e108      	b.n	8001530 <ENE_I2C_UPDATE+0x2a8>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001324:	b29b      	uxth	r3, r3
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8100 	beq.w	8001530 <ENE_I2C_UPDATE+0x2a8>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 8001330:	68b8      	ldr	r0, [r7, #8]
 8001332:	f7ff ff09 	bl	8001148 <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 8001336:	4b83      	ldr	r3, [pc, #524]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	f040 80f8 	bne.w	8001530 <ENE_I2C_UPDATE+0x2a8>
				END_EFFECTOR_STATE = RUNMODE;
 8001340:	4b7d      	ldr	r3, [pc, #500]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001342:	2202      	movs	r2, #2
 8001344:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001346:	4b7f      	ldr	r3, [pc, #508]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
		break;
 800134c:	e0f0      	b.n	8001530 <ENE_I2C_UPDATE+0x2a8>
	case (TEST):
		if ((*DataFrame & 0b0001) == 0) {
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001354:	b29b      	uxth	r3, r3
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10e      	bne.n	800137c <ENE_I2C_UPDATE+0xf4>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 800135e:	68b8      	ldr	r0, [r7, #8]
 8001360:	f7ff feca 	bl	80010f8 <ENDEFF_TEST_MODE_QUIT>
			if (complete == 1) {
 8001364:	4b77      	ldr	r3, [pc, #476]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	f040 80e3 	bne.w	8001534 <ENE_I2C_UPDATE+0x2ac>
				END_EFFECTOR_STATE = INIT;
 800136e:	4b72      	ldr	r3, [pc, #456]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001374:	4b73      	ldr	r3, [pc, #460]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
			if (complete == 1) {
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
			}
		}
		break;
 800137a:	e0db      	b.n	8001534 <ENE_I2C_UPDATE+0x2ac>
		} else if ((*DataFrame & 0b0010) == 0b10) {
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	b29b      	uxth	r3, r3
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80d3 	beq.w	8001534 <ENE_I2C_UPDATE+0x2ac>
			ENDEFF_TEST_MODE_QUIT(hi2c);
 800138e:	68b8      	ldr	r0, [r7, #8]
 8001390:	f7ff feb2 	bl	80010f8 <ENDEFF_TEST_MODE_QUIT>
			ENDEFF_GRIPPER_RUNMODE(hi2c);
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f7ff fed7 	bl	8001148 <ENDEFF_GRIPPER_RUNMODE>
			if (complete == 1) {
 800139a:	4b6a      	ldr	r3, [pc, #424]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	f040 80c8 	bne.w	8001534 <ENE_I2C_UPDATE+0x2ac>
				END_EFFECTOR_STATE = RUNMODE;
 80013a4:	4b64      	ldr	r3, [pc, #400]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80013a6:	2202      	movs	r2, #2
 80013a8:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80013aa:	4b66      	ldr	r3, [pc, #408]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
		break;
 80013b0:	e0c0      	b.n	8001534 <ENE_I2C_UPDATE+0x2ac>
	case (RUNMODE):
		if ((*DataFrame & 0b0010) == 0) {
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10e      	bne.n	80013e0 <ENE_I2C_UPDATE+0x158>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80013c2:	68b8      	ldr	r0, [r7, #8]
 80013c4:	f7ff fee8 	bl	8001198 <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80013c8:	4b5e      	ldr	r3, [pc, #376]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	f040 80bd 	bne.w	800154c <ENE_I2C_UPDATE+0x2c4>
				END_EFFECTOR_STATE = INIT;
 80013d2:	4b59      	ldr	r3, [pc, #356]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80013d8:	4b5a      	ldr	r3, [pc, #360]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
					complete = 0;
					picked = 0;
				}
			}
		}
		break;
 80013de:	e0b5      	b.n	800154c <ENE_I2C_UPDATE+0x2c4>
		} else if ((*DataFrame & 0b0001) == 1) {
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00e      	beq.n	800140e <ENE_I2C_UPDATE+0x186>
			ENDEFF_TEST_MODE(hi2c);
 80013f0:	68b8      	ldr	r0, [r7, #8]
 80013f2:	f7ff fe59 	bl	80010a8 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 80013f6:	4b53      	ldr	r3, [pc, #332]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	f040 80a6 	bne.w	800154c <ENE_I2C_UPDATE+0x2c4>
				END_EFFECTOR_STATE = TEST;
 8001400:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001406:	4b4f      	ldr	r3, [pc, #316]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
		break;
 800140c:	e09e      	b.n	800154c <ENE_I2C_UPDATE+0x2c4>
		} else if ((*DataFrame & 0b0100) == 0b100) {
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001414:	b29b      	uxth	r3, r3
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	d019      	beq.n	8001452 <ENE_I2C_UPDATE+0x1ca>
			ENDEFF_GRIPPER_PICK(hi2c);
 800141e:	68b8      	ldr	r0, [r7, #8]
 8001420:	f7ff fee2 	bl	80011e8 <ENDEFF_GRIPPER_PICK>
			if (complete == 1) {
 8001424:	4b47      	ldr	r3, [pc, #284]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	f040 808f 	bne.w	800154c <ENE_I2C_UPDATE+0x2c4>
				feedback_flag = 1;
 800142e:	4b43      	ldr	r3, [pc, #268]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
				feedback_delay = HAL_GetTick();
 8001434:	f004 ff58 	bl	80062e8 <HAL_GetTick>
 8001438:	4603      	mov	r3, r0
 800143a:	4a41      	ldr	r2, [pc, #260]	; (8001540 <ENE_I2C_UPDATE+0x2b8>)
 800143c:	6013      	str	r3, [r2, #0]
				END_EFFECTOR_STATE = PICKED;
 800143e:	4b3e      	ldr	r3, [pc, #248]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 8001440:	2203      	movs	r2, #3
 8001442:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001444:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
				picked = 1;
 800144a:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <ENE_I2C_UPDATE+0x2c0>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
		break;
 8001450:	e07c      	b.n	800154c <ENE_I2C_UPDATE+0x2c4>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001458:	b29b      	uxth	r3, r3
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d074      	beq.n	800154c <ENE_I2C_UPDATE+0x2c4>
			if (picked == 1) {
 8001462:	4b39      	ldr	r3, [pc, #228]	; (8001548 <ENE_I2C_UPDATE+0x2c0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d170      	bne.n	800154c <ENE_I2C_UPDATE+0x2c4>
				ENDEFF_GRIPPER_PLACE(hi2c);
 800146a:	68b8      	ldr	r0, [r7, #8]
 800146c:	f7ff fee4 	bl	8001238 <ENDEFF_GRIPPER_PLACE>
				if (complete == 1) {
 8001470:	4b34      	ldr	r3, [pc, #208]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d169      	bne.n	800154c <ENE_I2C_UPDATE+0x2c4>
					feedback_flag = 1;
 8001478:	4b30      	ldr	r3, [pc, #192]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
					feedback_delay = HAL_GetTick();
 800147e:	f004 ff33 	bl	80062e8 <HAL_GetTick>
 8001482:	4603      	mov	r3, r0
 8001484:	4a2e      	ldr	r2, [pc, #184]	; (8001540 <ENE_I2C_UPDATE+0x2b8>)
 8001486:	6013      	str	r3, [r2, #0]
					complete = 0;
 8001488:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
					picked = 0;
 800148e:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <ENE_I2C_UPDATE+0x2c0>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
		break;
 8001494:	e05a      	b.n	800154c <ENE_I2C_UPDATE+0x2c4>
	case (PICKED):
		if ((*DataFrame & 0b0010) == 0) {
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149c:	b29b      	uxth	r3, r3
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10d      	bne.n	80014c2 <ENE_I2C_UPDATE+0x23a>
			ENDEFF_GRIPPER_IDLE(hi2c);
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f7ff fe76 	bl	8001198 <ENDEFF_GRIPPER_IDLE>
			if (complete == 1) {
 80014ac:	4b25      	ldr	r3, [pc, #148]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d14d      	bne.n	8001550 <ENE_I2C_UPDATE+0x2c8>
				END_EFFECTOR_STATE = INIT;
 80014b4:	4b20      	ldr	r3, [pc, #128]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
				END_EFFECTOR_STATE = RUNMODE;
				complete = 0;
				picked = 0;
			}
		}
		break;
 80014c0:	e046      	b.n	8001550 <ENE_I2C_UPDATE+0x2c8>
		} else if ((*DataFrame & 0b0001) == 1) {
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00d      	beq.n	80014ee <ENE_I2C_UPDATE+0x266>
			ENDEFF_TEST_MODE(hi2c);
 80014d2:	68b8      	ldr	r0, [r7, #8]
 80014d4:	f7ff fde8 	bl	80010a8 <ENDEFF_TEST_MODE>
			if (complete == 1) {
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d137      	bne.n	8001550 <ENE_I2C_UPDATE+0x2c8>
				END_EFFECTOR_STATE = TEST;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
				complete = 0;
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
		break;
 80014ec:	e030      	b.n	8001550 <ENE_I2C_UPDATE+0x2c8>
		} else if ((*DataFrame & 0b1000) == 0b1000) {
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d028      	beq.n	8001550 <ENE_I2C_UPDATE+0x2c8>
			ENDEFF_GRIPPER_PLACE(hi2c);
 80014fe:	68b8      	ldr	r0, [r7, #8]
 8001500:	f7ff fe9a 	bl	8001238 <ENDEFF_GRIPPER_PLACE>
			if (complete == 1) {
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d121      	bne.n	8001550 <ENE_I2C_UPDATE+0x2c8>
				feedback_flag = 1;
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <ENE_I2C_UPDATE+0x2b4>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
				feedback_delay = HAL_GetTick();
 8001512:	f004 fee9 	bl	80062e8 <HAL_GetTick>
 8001516:	4603      	mov	r3, r0
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <ENE_I2C_UPDATE+0x2b8>)
 800151a:	6013      	str	r3, [r2, #0]
				END_EFFECTOR_STATE = RUNMODE;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <ENE_I2C_UPDATE+0x2b0>)
 800151e:	2202      	movs	r2, #2
 8001520:	701a      	strb	r2, [r3, #0]
				complete = 0;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <ENE_I2C_UPDATE+0x2bc>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
				picked = 0;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <ENE_I2C_UPDATE+0x2c0>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
		break;
 800152e:	e00f      	b.n	8001550 <ENE_I2C_UPDATE+0x2c8>
		break;
 8001530:	bf00      	nop
 8001532:	e00e      	b.n	8001552 <ENE_I2C_UPDATE+0x2ca>
		break;
 8001534:	bf00      	nop
 8001536:	e00c      	b.n	8001552 <ENE_I2C_UPDATE+0x2ca>
 8001538:	20000434 	.word	0x20000434
 800153c:	20000435 	.word	0x20000435
 8001540:	20000438 	.word	0x20000438
 8001544:	20000430 	.word	0x20000430
 8001548:	2000043c 	.word	0x2000043c
		break;
 800154c:	bf00      	nop
 800154e:	e000      	b.n	8001552 <ENE_I2C_UPDATE+0x2ca>
		break;
 8001550:	bf00      	nop
	}
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop

0800155c <UARTInterruptConfig>:
#include "Joystick.h"
#include "usart.h"

uint8_t RxBuffer[1];

void UARTInterruptConfig() {
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	4903      	ldr	r1, [pc, #12]	; (8001570 <UARTInterruptConfig+0x14>)
 8001564:	4803      	ldr	r0, [pc, #12]	; (8001574 <UARTInterruptConfig+0x18>)
 8001566:	f009 fad1 	bl	800ab0c <HAL_UART_Receive_IT>
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000440 	.word	0x20000440
 8001574:	20001e68 	.word	0x20001e68

08001578 <Joystick_Transmit>:

void Joystick_Transmit(int16_t Position_x, int16_t Position_y, uint8_t PicknPlace) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
 8001582:	460b      	mov	r3, r1
 8001584:	80bb      	strh	r3, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	70fb      	strb	r3, [r7, #3]
	static int LastPos_x;
	static int LastPos_y;
	static int LastState;
	static uint8_t data[5];

	data[0] = Position_x >> 8;
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	121b      	asrs	r3, r3, #8
 8001590:	b21b      	sxth	r3, r3
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <Joystick_Transmit+0xac>)
 8001596:	701a      	strb	r2, [r3, #0]
	data[1] = Position_x & 0xFF;
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <Joystick_Transmit+0xac>)
 800159e:	705a      	strb	r2, [r3, #1]
	data[2] = Position_y >> 8;
 80015a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015a4:	121b      	asrs	r3, r3, #8
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <Joystick_Transmit+0xac>)
 80015ac:	709a      	strb	r2, [r3, #2]
	data[3] = Position_y & 0xFF;
 80015ae:	88bb      	ldrh	r3, [r7, #4]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <Joystick_Transmit+0xac>)
 80015b4:	70da      	strb	r2, [r3, #3]
	data[4] = PicknPlace;
 80015b6:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <Joystick_Transmit+0xac>)
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	7113      	strb	r3, [r2, #4]

	if (Position_x != LastPos_x || Position_y != LastPos_y || PicknPlace != LastState) {
 80015bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <Joystick_Transmit+0xb0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d10a      	bne.n	80015de <Joystick_Transmit+0x66>
 80015c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <Joystick_Transmit+0xb4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d104      	bne.n	80015de <Joystick_Transmit+0x66>
 80015d4:	78fa      	ldrb	r2, [r7, #3]
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <Joystick_Transmit+0xb8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d012      	beq.n	8001604 <Joystick_Transmit+0x8c>
		static uint32_t timestamp = 0;
		if (HAL_GetTick() - timestamp > 50) {
 80015de:	f004 fe83 	bl	80062e8 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <Joystick_Transmit+0xbc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b32      	cmp	r3, #50	; 0x32
 80015ec:	d916      	bls.n	800161c <Joystick_Transmit+0xa4>
			timestamp = HAL_GetTick() + 50;
 80015ee:	f004 fe7b 	bl	80062e8 <HAL_GetTick>
 80015f2:	4603      	mov	r3, r0
 80015f4:	3332      	adds	r3, #50	; 0x32
 80015f6:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <Joystick_Transmit+0xbc>)
 80015f8:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_DMA(&huart1, data, sizeof(data));
 80015fa:	2205      	movs	r2, #5
 80015fc:	4909      	ldr	r1, [pc, #36]	; (8001624 <Joystick_Transmit+0xac>)
 80015fe:	480e      	ldr	r0, [pc, #56]	; (8001638 <Joystick_Transmit+0xc0>)
 8001600:	f009 fab4 	bl	800ab6c <HAL_UART_Transmit_DMA>
		} else {
			return;
		}
	}

	LastPos_x = Position_x;
 8001604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <Joystick_Transmit+0xb0>)
 800160a:	6013      	str	r3, [r2, #0]
	LastPos_y = Position_y;
 800160c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <Joystick_Transmit+0xb4>)
 8001612:	6013      	str	r3, [r2, #0]
	LastState = PicknPlace;
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <Joystick_Transmit+0xb8>)
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e000      	b.n	800161e <Joystick_Transmit+0xa6>
			return;
 800161c:	bf00      	nop
}
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000444 	.word	0x20000444
 8001628:	2000044c 	.word	0x2000044c
 800162c:	20000450 	.word	0x20000450
 8001630:	20000454 	.word	0x20000454
 8001634:	20000458 	.word	0x20000458
 8001638:	20001e68 	.word	0x20001e68

0800163c <Joystick_Received>:

void Joystick_Received(int *receivedByte) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	static int count;
	static uint8_t tempData[6];
	static enum {
		START, COUNT
	} Joy_State = START;
	switch (Joy_State) {
 8001644:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <Joystick_Received+0x144>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <Joystick_Received+0x16>
 800164c:	2b01      	cmp	r3, #1
 800164e:	d009      	beq.n	8001664 <Joystick_Received+0x28>
 8001650:	e08d      	b.n	800176e <Joystick_Received+0x132>
	case (START):
		if (RxBuffer[0] == 69) {
 8001652:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <Joystick_Received+0x148>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b45      	cmp	r3, #69	; 0x45
 8001658:	f040 8088 	bne.w	800176c <Joystick_Received+0x130>
			Joy_State = COUNT;
 800165c:	4b48      	ldr	r3, [pc, #288]	; (8001780 <Joystick_Received+0x144>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001662:	e083      	b.n	800176c <Joystick_Received+0x130>

	case (COUNT):
		if (RxBuffer[0] == 69) {
 8001664:	4b47      	ldr	r3, [pc, #284]	; (8001784 <Joystick_Received+0x148>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b45      	cmp	r3, #69	; 0x45
 800166a:	d111      	bne.n	8001690 <Joystick_Received+0x54>
			for (int i = 0; i < sizeof(tempData); i++) {
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e007      	b.n	8001682 <Joystick_Received+0x46>
				tempData[i] = 0;
 8001672:	4a45      	ldr	r2, [pc, #276]	; (8001788 <Joystick_Received+0x14c>)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(tempData); i++) {
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3301      	adds	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b05      	cmp	r3, #5
 8001686:	d9f4      	bls.n	8001672 <Joystick_Received+0x36>
			}
			count = 0;
 8001688:	4b40      	ldr	r3, [pc, #256]	; (800178c <Joystick_Received+0x150>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
			joystick_callback();
		} else {
			tempData[count] = RxBuffer[0];
			count++;
		}
		break;
 800168e:	e06e      	b.n	800176e <Joystick_Received+0x132>
		} else if (RxBuffer[0] == 71 && count < sizeof(tempData)) {
 8001690:	4b3c      	ldr	r3, [pc, #240]	; (8001784 <Joystick_Received+0x148>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b47      	cmp	r3, #71	; 0x47
 8001696:	d115      	bne.n	80016c4 <Joystick_Received+0x88>
 8001698:	4b3c      	ldr	r3, [pc, #240]	; (800178c <Joystick_Received+0x150>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b05      	cmp	r3, #5
 800169e:	d811      	bhi.n	80016c4 <Joystick_Received+0x88>
			for (int i = 0; i < sizeof(tempData); i++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	e007      	b.n	80016b6 <Joystick_Received+0x7a>
				tempData[i] = 0;
 80016a6:	4a38      	ldr	r2, [pc, #224]	; (8001788 <Joystick_Received+0x14c>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4413      	add	r3, r2
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(tempData); i++) {
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	3301      	adds	r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d9f4      	bls.n	80016a6 <Joystick_Received+0x6a>
			count = 0;
 80016bc:	4b33      	ldr	r3, [pc, #204]	; (800178c <Joystick_Received+0x150>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e052      	b.n	800176a <Joystick_Received+0x12e>
		} else if (RxBuffer[0] == 71 && count == 6) {
 80016c4:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <Joystick_Received+0x148>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b47      	cmp	r3, #71	; 0x47
 80016ca:	d142      	bne.n	8001752 <Joystick_Received+0x116>
 80016cc:	4b2f      	ldr	r3, [pc, #188]	; (800178c <Joystick_Received+0x150>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d13e      	bne.n	8001752 <Joystick_Received+0x116>
			count = 0;
 80016d4:	4b2d      	ldr	r3, [pc, #180]	; (800178c <Joystick_Received+0x150>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
			receivedByte[0] = (tempData[1] << 8) | tempData[0];
 80016da:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <Joystick_Received+0x14c>)
 80016dc:	785b      	ldrb	r3, [r3, #1]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	4a29      	ldr	r2, [pc, #164]	; (8001788 <Joystick_Received+0x14c>)
 80016e2:	7812      	ldrb	r2, [r2, #0]
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	601a      	str	r2, [r3, #0]
			receivedByte[1] = (tempData[3] << 8) | tempData[2];
 80016ea:	4b27      	ldr	r3, [pc, #156]	; (8001788 <Joystick_Received+0x14c>)
 80016ec:	78db      	ldrb	r3, [r3, #3]
 80016ee:	021a      	lsls	r2, r3, #8
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <Joystick_Received+0x14c>)
 80016f2:	789b      	ldrb	r3, [r3, #2]
 80016f4:	4619      	mov	r1, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3304      	adds	r3, #4
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
			receivedByte[2] = tempData[4];
 80016fe:	4b22      	ldr	r3, [pc, #136]	; (8001788 <Joystick_Received+0x14c>)
 8001700:	791a      	ldrb	r2, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3308      	adds	r3, #8
 8001706:	601a      	str	r2, [r3, #0]
			receivedByte[3] = tempData[5];
 8001708:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <Joystick_Received+0x14c>)
 800170a:	795a      	ldrb	r2, [r3, #5]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	330c      	adds	r3, #12
 8001710:	601a      	str	r2, [r3, #0]
			if (receivedByte[0] > UINT16_MAX / 2)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800171a:	db06      	blt.n	800172a <Joystick_Received+0xee>
				receivedByte[0] -= UINT16_MAX + 1;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e00d      	b.n	8001746 <Joystick_Received+0x10a>
			else if (receivedByte[1] > UINT16_MAX / 2)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3304      	adds	r3, #4
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001734:	db07      	blt.n	8001746 <Joystick_Received+0x10a>
				receivedByte[1] -= UINT16_MAX + 1;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3304      	adds	r3, #4
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3304      	adds	r3, #4
 8001740:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8001744:	601a      	str	r2, [r3, #0]
			Joy_State = START;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <Joystick_Received+0x144>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
			joystick_callback();
 800174c:	f002 fa54 	bl	8003bf8 <joystick_callback>
		} else if (RxBuffer[0] == 71 && count == 6) {
 8001750:	e00b      	b.n	800176a <Joystick_Received+0x12e>
			tempData[count] = RxBuffer[0];
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <Joystick_Received+0x150>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <Joystick_Received+0x148>)
 8001758:	7811      	ldrb	r1, [r2, #0]
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <Joystick_Received+0x14c>)
 800175c:	54d1      	strb	r1, [r2, r3]
			count++;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <Joystick_Received+0x150>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	4a09      	ldr	r2, [pc, #36]	; (800178c <Joystick_Received+0x150>)
 8001766:	6013      	str	r3, [r2, #0]
		break;
 8001768:	e001      	b.n	800176e <Joystick_Received+0x132>
 800176a:	e000      	b.n	800176e <Joystick_Received+0x132>
		break;
 800176c:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, RxBuffer, 1);
 800176e:	2201      	movs	r2, #1
 8001770:	4904      	ldr	r1, [pc, #16]	; (8001784 <Joystick_Received+0x148>)
 8001772:	4807      	ldr	r0, [pc, #28]	; (8001790 <Joystick_Received+0x154>)
 8001774:	f009 f9ca 	bl	800ab0c <HAL_UART_Receive_IT>
}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000045c 	.word	0x2000045c
 8001784:	20000440 	.word	0x20000440
 8001788:	20000460 	.word	0x20000460
 800178c:	20000468 	.word	0x20000468
 8001790:	20001e68 	.word	0x20001e68

08001794 <lowpass_filter>:
}

//float C1 = ComputeLowpassConstant(20, 10000);
//float C2 = ComputeLowpassConstant(10, 10000);

void lowpass_filter(int QEIReadRaw_now, float *velocity_measure_filter_now, float *acceleration_measure_filter_now){
 8001794:	b480      	push	{r7}
 8001796:	b08b      	sub	sp, #44	; 0x2c
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
    static int QEIReadRaw_past = 0;
    static float velocity_measure_filter_past = 0;
    float dt = 0.0001;
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <lowpass_filter+0xc4>)
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24

    float C1 = 20.0 / (20.0 + 10000.0);
 80017a4:	4b2d      	ldr	r3, [pc, #180]	; (800185c <lowpass_filter+0xc8>)
 80017a6:	623b      	str	r3, [r7, #32]
    float C2 = 10.0 / (10.0 + 10000.0);
 80017a8:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <lowpass_filter+0xcc>)
 80017aa:	61fb      	str	r3, [r7, #28]

    float velocity_measure = (QEIReadRaw_now - QEIReadRaw_past) / dt;
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <lowpass_filter+0xd0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c4:	edc7 7a06 	vstr	s15, [r7, #24]
    *velocity_measure_filter_now = (C1 * velocity_measure) + ((1 - C1) * (*velocity_measure_filter_now));
 80017c8:	ed97 7a08 	vldr	s14, [r7, #32]
 80017cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80017d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80017dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	edc3 7a00 	vstr	s15, [r3]

    float acceleration_measure = (*velocity_measure_filter_now - velocity_measure_filter_past) / dt;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	ed93 7a00 	vldr	s14, [r3]
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <lowpass_filter+0xd4>)
 80017fc:	edd3 7a00 	vldr	s15, [r3]
 8001800:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001804:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180c:	edc7 7a05 	vstr	s15, [r7, #20]
    *acceleration_measure_filter_now = (C2 * acceleration_measure) + ((1 - C2) * (*acceleration_measure_filter_now));
 8001810:	ed97 7a07 	vldr	s14, [r7, #28]
 8001814:	edd7 7a05 	vldr	s15, [r7, #20]
 8001818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001820:	edd7 7a07 	vldr	s15, [r7, #28]
 8001824:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edc3 7a00 	vstr	s15, [r3]

    velocity_measure_filter_past = *velocity_measure_filter_now;
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a09      	ldr	r2, [pc, #36]	; (8001868 <lowpass_filter+0xd4>)
 8001842:	6013      	str	r3, [r2, #0]

    QEIReadRaw_past = QEIReadRaw_now;
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <lowpass_filter+0xd0>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6013      	str	r3, [r2, #0]
}
 800184a:	bf00      	nop
 800184c:	372c      	adds	r7, #44	; 0x2c
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	38d1b717 	.word	0x38d1b717
 800185c:	3b02cf75 	.word	0x3b02cf75
 8001860:	3a82f0e9 	.word	0x3a82f0e9
 8001864:	2000046c 	.word	0x2000046c
 8001868:	20000470 	.word	0x20000470

0800186c <modbus_1t5_Timeout>:
void modbusRead1Register(); // function 03
void ModbusErrorReply(uint8_t);
void Modbus_frame_response();

// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim) {
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <modbus_1t5_Timeout+0x1c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2201      	movs	r2, #1
 800187a:	751a      	strb	r2, [r3, #20]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	20000474 	.word	0x20000474

0800188c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim) {
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <modbus_3t5_Timeout+0x1c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2201      	movs	r2, #1
 800189a:	755a      	strb	r2, [r3, #21]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	20000474 	.word	0x20000474

080018ac <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart, uint32_t pos) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev = 1;
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <modbus_UART_Recived+0x60>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2201      	movs	r2, #1
 80018bc:	759a      	strb	r2, [r3, #22]
	if (hModbus->modbusUartStructure.RxTail++ < MODBUS_MESSAGEBUFFER_SIZE) {
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <modbus_UART_Recived+0x60>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 80018c6:	1c59      	adds	r1, r3, #1
 80018c8:	b289      	uxth	r1, r1
 80018ca:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 80018ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80018d2:	d210      	bcs.n	80018f6 <modbus_UART_Recived+0x4a>

		HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <modbus_UART_Recived+0x60>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68d8      	ldr	r0, [r3, #12]
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <modbus_UART_Recived+0x60>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <modbus_UART_Recived+0x60>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80018e6:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80018ea:	4413      	add	r3, r2
 80018ec:	3302      	adds	r3, #2
 80018ee:	2201      	movs	r2, #1
 80018f0:	4619      	mov	r1, r3
 80018f2:	f009 f90b 	bl	800ab0c <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim, 0);
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <modbus_UART_Recived+0x60>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000474 	.word	0x20000474

08001910 <Modbus_init>:

void Modbus_init(ModbusHandleTypedef *hmodbus, u16u8_t *RegisterStartAddress) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800191a:	4a24      	ldr	r2, [pc, #144]	; (80019ac <Modbus_init+0x9c>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <Modbus_init+0x9c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, (void*) modbus_1t5_Timeout);
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <Modbus_init+0x9c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	4a20      	ldr	r2, [pc, #128]	; (80019b0 <Modbus_init+0xa0>)
 8001930:	2114      	movs	r1, #20
 8001932:	4618      	mov	r0, r3
 8001934:	f008 f9c4 	bl	8009cc0 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim, HAL_TIM_PERIOD_ELAPSED_CB_ID, (void*) modbus_3t5_Timeout);
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <Modbus_init+0x9c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <Modbus_init+0xa4>)
 8001940:	210e      	movs	r1, #14
 8001942:	4618      	mov	r0, r3
 8001944:	f008 f9bc 	bl	8009cc0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart, HAL_UART_RX_COMPLETE_CB_ID, (void*) modbus_UART_Recived);
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <Modbus_init+0x9c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <Modbus_init+0xa8>)
 8001950:	2103      	movs	r1, #3
 8001952:	4618      	mov	r0, r3
 8001954:	f009 f832 	bl	800a9bc <HAL_UART_RegisterCallback>
	//start Receive
	HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <Modbus_init+0x9c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68d8      	ldr	r0, [r3, #12]
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <Modbus_init+0x9c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <Modbus_init+0x9c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800196a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800196e:	4413      	add	r3, r2
 8001970:	3302      	adds	r3, #2
 8001972:	2201      	movs	r2, #1
 8001974:	4619      	mov	r1, r3
 8001976:	f009 f8c9 	bl	800ab0c <HAL_UART_Receive_IT>

	if (hModbus->htim->State == HAL_TIM_STATE_READY) {
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <Modbus_init+0x9c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d10c      	bne.n	80019a4 <Modbus_init+0x94>
		HAL_TIM_Base_Start_IT(hModbus->htim);
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <Modbus_init+0x9c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	4618      	mov	r0, r3
 8001992:	f006 ffd3 	bl	800893c <HAL_TIM_Base_Start_IT>
		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <Modbus_init+0x9c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f007 fc88 	bl	80092b4 <HAL_TIM_OnePulse_Start_IT>
	}

}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000474 	.word	0x20000474
 80019b0:	0800186d 	.word	0x0800186d
 80019b4:	0800188d 	.word	0x0800188d
 80019b8:	080018ad 	.word	0x080018ad

080019bc <CRC16>:

unsigned short CRC16(puchMsg, usDataLen)
	/* The function returns the CRC as a unsigned short type */
	unsigned char *puchMsg; /* message to calculate CRC upon */
	unsigned short usDataLen; /* quantity of bytes in message */
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 80019c8:	23ff      	movs	r3, #255	; 0xff
 80019ca:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 80019cc:	23ff      	movs	r3, #255	; 0xff
 80019ce:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80019d0:	e013      	b.n	80019fa <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	781a      	ldrb	r2, [r3, #0]
 80019da:	7bbb      	ldrb	r3, [r7, #14]
 80019dc:	4053      	eors	r3, r2
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 80019e2:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <CRC16+0x64>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4413      	add	r3, r2
 80019e8:	781a      	ldrb	r2, [r3, #0]
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	4053      	eors	r3, r2
 80019ee:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 80019f0:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <CRC16+0x68>)
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	4413      	add	r3, r2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80019fa:	883b      	ldrh	r3, [r7, #0]
 80019fc:	1e5a      	subs	r2, r3, #1
 80019fe:	803a      	strh	r2, [r7, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e6      	bne.n	80019d2 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo);
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	7bbb      	ldrb	r3, [r7, #14]
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	b29b      	uxth	r3, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	20000120 	.word	0x20000120
 8001a24:	20000020 	.word	0x20000020

08001a28 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker() {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
	switch (hModbus->Mstatus) {
 8001a2e:	4b81      	ldr	r3, [pc, #516]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	7e1b      	ldrb	r3, [r3, #24]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d80a      	bhi.n	8001a50 <Modbus_Protocal_Worker+0x28>
 8001a3a:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <Modbus_Protocal_Worker+0x18>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001a5b 	.word	0x08001a5b
 8001a44:	08001bfb 	.word	0x08001bfb
 8001a48:	08001ae7 	.word	0x08001ae7
 8001a4c:	08001b0d 	.word	0x08001b0d
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001a50:	4b78      	ldr	r3, [pc, #480]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2201      	movs	r2, #1
 8001a56:	761a      	strb	r2, [r3, #24]
		break;
 8001a58:	e0e8      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if (hModbus->TxCount) {
 8001a5a:	4b76      	ldr	r3, [pc, #472]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <Modbus_Protocal_Worker+0x44>
			Modbus_Emission();
 8001a66:	f000 f9dd 	bl	8001e24 <Modbus_Emission>
 8001a6a:	e01c      	b.n	8001aa6 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if (hModbus->Flag_URev) {
 8001a6c:	4b71      	ldr	r3, [pc, #452]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	7d9b      	ldrb	r3, [r3, #22]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d017      	beq.n	8001aa6 <Modbus_Protocal_Worker+0x7e>
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001a76:	4b6f      	ldr	r3, [pc, #444]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001a7e:	4b6d      	ldr	r3, [pc, #436]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2200      	movs	r2, #0
 8001a84:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001a86:	4b6b      	ldr	r3, [pc, #428]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0201 	orr.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus = Modbus_state_Reception;
 8001a9e:	4b65      	ldr	r3, [pc, #404]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if (hModbus->huart->RxState == HAL_UART_STATE_READY) {
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	f040 80b3 	bne.w	8001c1e <Modbus_Protocal_Worker+0x1f6>
			hModbus->modbusUartStructure.RxTail = 0;
 8001ab8:	4b5e      	ldr	r3, [pc, #376]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001ac2:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68d8      	ldr	r0, [r3, #12]
 8001ac8:	4b5a      	ldr	r3, [pc, #360]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001ad4:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001ad8:	4413      	add	r3, r2
 8001ada:	3302      	adds	r3, #2
 8001adc:	2201      	movs	r2, #1
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f009 f814 	bl	800ab0c <HAL_UART_Receive_IT>
		}
		break;
 8001ae4:	e09b      	b.n	8001c1e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if (hModbus->Flag_T15TimeOut) {
 8001ae6:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	7d1b      	ldrb	r3, [r3, #20]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 8098 	beq.w	8001c22 <Modbus_Protocal_Worker+0x1fa>
			/*reset recived flag*/
			hModbus->Flag_URev = 0;
 8001af2:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001afa:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	22fe      	movs	r2, #254	; 0xfe
 8001b00:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/

			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001b02:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2204      	movs	r2, #4
 8001b08:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001b0a:	e08a      	b.n	8001c22 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if (hModbus->Flag_URev) {
 8001b0c:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	7d9b      	ldrb	r3, [r3, #22]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <Modbus_Protocal_Worker+0x102>

			if (!hModbus->RecvStatus) {
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d103      	bne.n	8001b2a <Modbus_Protocal_Worker+0x102>
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001b22:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	22ff      	movs	r2, #255	; 0xff
 8001b28:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if (hModbus->RecvStatus == Modbus_RecvFrame_Null) {
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001b32:	f113 0f02 	cmn.w	r3, #2
 8001b36:	d150      	bne.n	8001bda <Modbus_Protocal_Worker+0x1b2>
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001b38:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx, hModbus->modbusUartStructure.RxTail - 2);
 8001b40:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b50:	3b02      	subs	r3, #2
 8001b52:	4619      	mov	r1, r3
 8001b54:	4610      	mov	r0, r2
 8001b56:	f7ff ff31 	bl	80019bc <CRC16>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80bb      	strh	r3, [r7, #4]

			if (!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001b5e:	793a      	ldrb	r2, [r7, #4]
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b6c:	3b02      	subs	r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d10c      	bne.n	8001b92 <Modbus_Protocal_Worker+0x16a>
					&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 1])) {
 8001b78:	797a      	ldrb	r2, [r7, #5]
 8001b7a:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b86:	3b01      	subs	r3, #1
 8001b88:	440b      	add	r3, r1
 8001b8a:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if (!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d004      	beq.n	8001b9c <Modbus_Protocal_Worker+0x174>
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001b92:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	22ff      	movs	r2, #255	; 0xff
 8001b98:	75da      	strb	r2, [r3, #23]
				break;
 8001b9a:	e047      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if (hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001b9c:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001ba4:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d113      	bne.n	8001bd6 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe, hModbus->modbusUartStructure.MessageBufferRx + 1, hModbus->modbusUartStructure.RxTail - 3);
 8001bae:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f103 0019 	add.w	r0, r3, #25
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f203 2372 	addw	r3, r3, #626	; 0x272
 8001bbe:	1c59      	adds	r1, r3, #1
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f00a f956 	bl	800be7c <memcpy>

			//execute command
			Modbus_frame_response();
 8001bd0:	f000 f910 	bl	8001df4 <Modbus_frame_response>
 8001bd4:	e001      	b.n	8001bda <Modbus_Protocal_Worker+0x1b2>
				break;
 8001bd6:	bf00      	nop
			hModbus->Mstatus = Modbus_state_Idle;
		}
		break;

	}
}
 8001bd8:	e028      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
		if (hModbus->Flag_T35TimeOut) {
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	7d5b      	ldrb	r3, [r3, #21]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2201      	movs	r2, #1
 8001bea:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f009 f838 	bl	800ac68 <HAL_UART_AbortReceive>
		break;
 8001bf8:	e015      	b.n	8001c26 <Modbus_Protocal_Worker+0x1fe>
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	d10f      	bne.n	8001c2a <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount = 0;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <Modbus_Protocal_Worker+0x20c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	761a      	strb	r2, [r3, #24]
		break;
 8001c1c:	e005      	b.n	8001c2a <Modbus_Protocal_Worker+0x202>
		break;
 8001c1e:	bf00      	nop
 8001c20:	e004      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
		break;
 8001c22:	bf00      	nop
 8001c24:	e002      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
		break;
 8001c26:	bf00      	nop
 8001c28:	e000      	b.n	8001c2c <Modbus_Protocal_Worker+0x204>
		break;
 8001c2a:	bf00      	nop
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000474 	.word	0x20000474

08001c38 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]);
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	7e9b      	ldrb	r3, [r3, #26]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	7edb      	ldrb	r3, [r3, #27]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	80fb      	strh	r3, [r7, #6]

	if (startAddress > hModbus->RegisterSize) {
 8001c56:	88fa      	ldrh	r2, [r7, #6]
 8001c58:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d903      	bls.n	8001c6a <modbusWrite1Register+0x32>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001c62:	2002      	movs	r0, #2
 8001c64:	f000 f8a4 	bl	8001db0 <ModbusErrorReply>
		return;
 8001c68:	e023      	b.n	8001cb2 <modbusWrite1Register+0x7a>
	}

	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	440b      	add	r3, r1
 8001c7a:	7f12      	ldrb	r2, [r2, #28]
 8001c7c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	440b      	add	r3, r1
 8001c8e:	7f52      	ldrb	r2, [r2, #29]
 8001c90:	701a      	strb	r2, [r3, #0]

	//generate response
	memcpy(hModbus->Txframe, hModbus->Rxframe, 8);
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f203 1045 	addw	r0, r3, #325	; 0x145
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3319      	adds	r3, #25
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f00a f8ea 	bl	800be7c <memcpy>
	//set number of byte to sent
	hModbus->TxCount = 5;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <modbusWrite1Register+0x80>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2205      	movs	r2, #5
 8001cae:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000474 	.word	0x20000474

08001cbc <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0

	uint16_t numberOfDataToRead = ((hModbus->Rxframe[3] << 8) + (hModbus->Rxframe[4]));
 8001cc2:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <modbusRead1Register+0xf0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	7f1b      	ldrb	r3, [r3, #28]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b37      	ldr	r3, [pc, #220]	; (8001dac <modbusRead1Register+0xf0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	7f5b      	ldrb	r3, [r3, #29]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress = ((hModbus->Rxframe[1] << 8) + (hModbus->Rxframe[2]));
 8001cda:	4b34      	ldr	r3, [pc, #208]	; (8001dac <modbusRead1Register+0xf0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	7e9b      	ldrb	r3, [r3, #26]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4b31      	ldr	r3, [pc, #196]	; (8001dac <modbusRead1Register+0xf0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	7edb      	ldrb	r3, [r3, #27]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if (numberOfDataToRead < 1 || numberOfDataToRead > 0x7D) {
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <modbusRead1Register+0x42>
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	2b7d      	cmp	r3, #125	; 0x7d
 8001cfc:	d903      	bls.n	8001d06 <modbusRead1Register+0x4a>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001cfe:	2003      	movs	r0, #3
 8001d00:	f000 f856 	bl	8001db0 <ModbusErrorReply>
		return;
 8001d04:	e04e      	b.n	8001da4 <modbusRead1Register+0xe8>
	}

	if (startAddress > hModbus->RegisterSize || (startAddress + numberOfDataToRead) > hModbus->RegisterSize) {
 8001d06:	88ba      	ldrh	r2, [r7, #4]
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <modbusRead1Register+0xf0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d808      	bhi.n	8001d24 <modbusRead1Register+0x68>
 8001d12:	88ba      	ldrh	r2, [r7, #4]
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	4413      	add	r3, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b24      	ldr	r3, [pc, #144]	; (8001dac <modbusRead1Register+0xf0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d903      	bls.n	8001d2c <modbusRead1Register+0x70>
		ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001d24:	2002      	movs	r0, #2
 8001d26:	f000 f843 	bl	8001db0 <ModbusErrorReply>
		return;
 8001d2a:	e03b      	b.n	8001da4 <modbusRead1Register+0xe8>
	}

	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <modbusRead1Register+0xf0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2203      	movs	r2, #3
 8001d32:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2 * numberOfDataToRead) & 0xFF;
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <modbusRead1Register+0xf0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	0052      	lsls	r2, r2, #1
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for (i = 0; i < numberOfDataToRead; i++) {
 8001d46:	2400      	movs	r4, #0
 8001d48:	e020      	b.n	8001d8c <modbusRead1Register+0xd0>
		hModbus->Txframe[2 * i + 2] = hModbus->RegisterAddress[startAddress + i].U8[1];
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <modbusRead1Register+0xf0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	88bb      	ldrh	r3, [r7, #4]
 8001d52:	4423      	add	r3, r4
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	18d1      	adds	r1, r2, r3
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <modbusRead1Register+0xf0>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	1c63      	adds	r3, r4, #1
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	7849      	ldrb	r1, [r1, #1]
 8001d62:	4413      	add	r3, r2
 8001d64:	460a      	mov	r2, r1
 8001d66:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2 * i + 3] = hModbus->RegisterAddress[startAddress + i].U8[0];
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <modbusRead1Register+0xf0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	88bb      	ldrh	r3, [r7, #4]
 8001d72:	4423      	add	r3, r4
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	18d1      	adds	r1, r2, r3
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <modbusRead1Register+0xf0>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	0063      	lsls	r3, r4, #1
 8001d7e:	3303      	adds	r3, #3
 8001d80:	7809      	ldrb	r1, [r1, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	460a      	mov	r2, r1
 8001d86:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for (i = 0; i < numberOfDataToRead; i++) {
 8001d8a:	3401      	adds	r4, #1
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	429c      	cmp	r4, r3
 8001d90:	dbdb      	blt.n	8001d4a <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2 + 2 * numberOfDataToRead;
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	3301      	adds	r3, #1
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <modbusRead1Register+0xf0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0052      	lsls	r2, r2, #1
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000474 	.word	0x20000474

08001db0 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode) {
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <ModbusErrorReply+0x40>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	7e5a      	ldrb	r2, [r3, #25]
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <ModbusErrorReply+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <ModbusErrorReply+0x40>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	79fa      	ldrb	r2, [r7, #7]
 8001dd4:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <ModbusErrorReply+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000474 	.word	0x20000474

08001df4 <Modbus_frame_response>:

void Modbus_frame_response() {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	switch (hModbus->Rxframe[0]) //check funcion
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <Modbus_frame_response+0x2c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	7e5b      	ldrb	r3, [r3, #25]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d004      	beq.n	8001e0c <Modbus_frame_response+0x18>
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d105      	bne.n	8001e12 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001e06:	f7ff ff17 	bl	8001c38 <modbusWrite1Register>
		break;
 8001e0a:	e006      	b.n	8001e1a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001e0c:	f7ff ff56 	bl	8001cbc <modbusRead1Register>
		break;
 8001e10:	e003      	b.n	8001e1a <Modbus_frame_response+0x26>
	default:
		ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001e12:	2001      	movs	r0, #1
 8001e14:	f7ff ffcc 	bl	8001db0 <ModbusErrorReply>
		break;
 8001e18:	bf00      	nop

	}
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000474 	.word	0x20000474

08001e24 <Modbus_Emission>:

void Modbus_Emission() {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
	if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b20      	cmp	r3, #32
 8001e38:	d15e      	bne.n	8001ef8 <Modbus_Emission+0xd4>
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy(hModbus->modbusUartStructure.MessageBufferTx + 1, hModbus->Txframe, hModbus->TxCount);
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8001e50:	1c58      	adds	r0, r3, #1
 8001e52:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f203 1145 	addw	r1, r3, #325	; 0x145
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001e62:	461a      	mov	r2, r3
 8001e64:	f00a f80a 	bl	800be7c <memcpy>

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount + 3;
 8001e68:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3203      	adds	r2, #3
 8001e78:	b292      	uxth	r2, r2
 8001e7a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx, hModbus->modbusUartStructure.TxTail - 2);
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001e8e:	3b02      	subs	r3, #2
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f7ff fd92 	bl	80019bc <CRC16>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail - 2] = CalculateCRC.U8[0];
 8001e9c:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <Modbus_Emission+0xfc>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <Modbus_Emission+0xfc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001ea8:	3b02      	subs	r3, #2
 8001eaa:	7939      	ldrb	r1, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	460a      	mov	r2, r1
 8001eb0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail - 1] = CalculateCRC.U8[1];
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <Modbus_Emission+0xfc>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <Modbus_Emission+0xfc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	7979      	ldrb	r1, [r7, #5]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	460a      	mov	r2, r1
 8001ec8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		//sent modbus
		if (hModbus->huart->gState == HAL_UART_STATE_READY) {
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <Modbus_Emission+0xfc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d10d      	bne.n	8001ef8 <Modbus_Emission+0xd4>
			HAL_UART_Transmit_DMA(hModbus->huart, hModbus->modbusUartStructure.MessageBufferTx, hModbus->modbusUartStructure.TxTail);
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <Modbus_Emission+0xfc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68d8      	ldr	r0, [r3, #12]
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <Modbus_Emission+0xfc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <Modbus_Emission+0xfc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f008 fe3a 	bl	800ab6c <HAL_UART_Transmit_DMA>
		}

	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <Modbus_Emission+0xfc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2200      	movs	r2, #0
 8001efe:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <Modbus_Emission+0xfc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2200      	movs	r2, #0
 8001f06:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev = 0;
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <Modbus_Emission+0xfc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus = Modbus_state_Emission;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <Modbus_Emission+0xfc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2202      	movs	r2, #2
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000474 	.word	0x20000474

08001f24 <PositionControlPID>:

// PRIVATE TYPEDEF ================================================================================

// USER CODE ======================================================================================

void PositionControlPID(float trajectory_setpoint, float final_setpoint, float position_now, float Kp, float Ki, float Kd, float *PID_out, int reset) {
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	ed87 0a07 	vstr	s0, [r7, #28]
 8001f2e:	edc7 0a06 	vstr	s1, [r7, #24]
 8001f32:	ed87 1a05 	vstr	s2, [r7, #20]
 8001f36:	edc7 1a04 	vstr	s3, [r7, #16]
 8001f3a:	ed87 2a03 	vstr	s4, [r7, #12]
 8001f3e:	edc7 2a02 	vstr	s5, [r7, #8]
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
	static float error_third = 0;
	static float first = 0;
	static float second = 0;
	static float third = 0;

	if(reset){
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <PositionControlPID+0x3a>
		error_second = 0;
 8001f4c:	4b3b      	ldr	r3, [pc, #236]	; (800203c <PositionControlPID+0x118>)
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
		error_third = 0;
 8001f54:	4b3a      	ldr	r3, [pc, #232]	; (8002040 <PositionControlPID+0x11c>)
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
		return;
 8001f5c:	e068      	b.n	8002030 <PositionControlPID+0x10c>
	}

	// error position
	error_first = trajectory_setpoint - position_now;
 8001f5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f62:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f6a:	4b36      	ldr	r3, [pc, #216]	; (8002044 <PositionControlPID+0x120>)
 8001f6c:	edc3 7a00 	vstr	s15, [r3]
	//Position.error[0] = PID_position - QEIReadRaw_now;

	// first error
	first = (Kp + Ki + Kd) * error_first;
 8001f70:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f74:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f84:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <PositionControlPID+0x120>)
 8001f86:	edd3 7a00 	vldr	s15, [r3]
 8001f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8e:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <PositionControlPID+0x124>)
 8001f90:	edc3 7a00 	vstr	s15, [r3]

	// second error
	second = (Kp + (2 * Kd)) * error_second;
 8001f94:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f98:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <PositionControlPID+0x118>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fae:	4b27      	ldr	r3, [pc, #156]	; (800204c <PositionControlPID+0x128>)
 8001fb0:	edc3 7a00 	vstr	s15, [r3]

	// third error
	third = Kd * error_third;
 8001fb4:	4b22      	ldr	r3, [pc, #136]	; (8002040 <PositionControlPID+0x11c>)
 8001fb6:	ed93 7a00 	vldr	s14, [r3]
 8001fba:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc2:	4b23      	ldr	r3, [pc, #140]	; (8002050 <PositionControlPID+0x12c>)
 8001fc4:	edc3 7a00 	vstr	s15, [r3]

	// voltage
	*PID_out += first - second + third;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	ed93 7a00 	vldr	s14, [r3]
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <PositionControlPID+0x124>)
 8001fd0:	edd3 6a00 	vldr	s13, [r3]
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <PositionControlPID+0x128>)
 8001fd6:	edd3 7a00 	vldr	s15, [r3]
 8001fda:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <PositionControlPID+0x12c>)
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	edc3 7a00 	vstr	s15, [r3]

	if (error_first == 0 && (final_setpoint - trajectory_setpoint) == 0) {
 8001ff2:	4b14      	ldr	r3, [pc, #80]	; (8002044 <PositionControlPID+0x120>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002000:	d10e      	bne.n	8002020 <PositionControlPID+0xfc>
 8002002:	ed97 7a06 	vldr	s14, [r7, #24]
 8002006:	edd7 7a07 	vldr	s15, [r7, #28]
 800200a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002016:	d103      	bne.n	8002020 <PositionControlPID+0xfc>
		*PID_out = 0; // Reset voltage to 0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
	}

	// set present to past
	error_third = error_second;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <PositionControlPID+0x118>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a06      	ldr	r2, [pc, #24]	; (8002040 <PositionControlPID+0x11c>)
 8002026:	6013      	str	r3, [r2, #0]
	error_second = error_first;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <PositionControlPID+0x120>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a03      	ldr	r2, [pc, #12]	; (800203c <PositionControlPID+0x118>)
 800202e:	6013      	str	r3, [r2, #0]

}
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000478 	.word	0x20000478
 8002040:	2000047c 	.word	0x2000047c
 8002044:	20000480 	.word	0x20000480
 8002048:	20000484 	.word	0x20000484
 800204c:	20000488 	.word	0x20000488
 8002050:	2000048c 	.word	0x2000048c

08002054 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800205a:	463b      	mov	r3, r7
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <MX_ADC1_Init+0x98>)
 8002068:	4a21      	ldr	r2, [pc, #132]	; (80020f0 <MX_ADC1_Init+0x9c>)
 800206a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800206c:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <MX_ADC1_Init+0x98>)
 800206e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002072:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002074:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <MX_ADC1_Init+0x98>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <MX_ADC1_Init+0x98>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002080:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <MX_ADC1_Init+0x98>)
 8002082:	2200      	movs	r2, #0
 8002084:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <MX_ADC1_Init+0x98>)
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800208e:	4b17      	ldr	r3, [pc, #92]	; (80020ec <MX_ADC1_Init+0x98>)
 8002090:	2200      	movs	r2, #0
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002094:	4b15      	ldr	r3, [pc, #84]	; (80020ec <MX_ADC1_Init+0x98>)
 8002096:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <MX_ADC1_Init+0xa0>)
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800209a:	4b14      	ldr	r3, [pc, #80]	; (80020ec <MX_ADC1_Init+0x98>)
 800209c:	2200      	movs	r2, #0
 800209e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <MX_ADC1_Init+0x98>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_ADC1_Init+0x98>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <MX_ADC1_Init+0x98>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020b4:	480d      	ldr	r0, [pc, #52]	; (80020ec <MX_ADC1_Init+0x98>)
 80020b6:	f004 f947 	bl	8006348 <HAL_ADC_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020c0:	f002 feb0 	bl	8004e24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80020c4:	230a      	movs	r3, #10
 80020c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020c8:	2301      	movs	r3, #1
 80020ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d0:	463b      	mov	r3, r7
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	; (80020ec <MX_ADC1_Init+0x98>)
 80020d6:	f004 f97b 	bl	80063d0 <HAL_ADC_ConfigChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020e0:	f002 fea0 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000490 	.word	0x20000490
 80020f0:	40012000 	.word	0x40012000
 80020f4:	0f000001 	.word	0x0f000001

080020f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a17      	ldr	r2, [pc, #92]	; (8002174 <HAL_ADC_MspInit+0x7c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d127      	bne.n	800216a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_ADC_MspInit+0x80>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	4a15      	ldr	r2, [pc, #84]	; (8002178 <HAL_ADC_MspInit+0x80>)
 8002124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002128:	6453      	str	r3, [r2, #68]	; 0x44
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_ADC_MspInit+0x80>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <HAL_ADC_MspInit+0x80>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <HAL_ADC_MspInit+0x80>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_ADC_MspInit+0x80>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002152:	2303      	movs	r3, #3
 8002154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002156:	2303      	movs	r3, #3
 8002158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4619      	mov	r1, r3
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <HAL_ADC_MspInit+0x84>)
 8002166:	f005 f881 	bl	800726c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800216a:	bf00      	nop
 800216c:	3728      	adds	r7, #40	; 0x28
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40012000 	.word	0x40012000
 8002178:	40023800 	.word	0x40023800
 800217c:	40020800 	.word	0x40020800

08002180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <MX_DMA_Init+0x78>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a1a      	ldr	r2, [pc, #104]	; (80021f8 <MX_DMA_Init+0x78>)
 8002190:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <MX_DMA_Init+0x78>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <MX_DMA_Init+0x78>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <MX_DMA_Init+0x78>)
 80021ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_DMA_Init+0x78>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	200f      	movs	r0, #15
 80021c4:	f004 fc0d 	bl	80069e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80021c8:	200f      	movs	r0, #15
 80021ca:	f004 fc26 	bl	8006a1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2011      	movs	r0, #17
 80021d4:	f004 fc05 	bl	80069e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80021d8:	2011      	movs	r0, #17
 80021da:	f004 fc1e 	bl	8006a1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2046      	movs	r0, #70	; 0x46
 80021e4:	f004 fbfd 	bl	80069e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80021e8:	2046      	movs	r0, #70	; 0x46
 80021ea:	f004 fc16 	bl	8006a1a <HAL_NVIC_EnableIRQ>

}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800

080021fc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC6   ------> USART6_TX
*/
void MX_GPIO_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
 8002210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b50      	ldr	r3, [pc, #320]	; (8002358 <MX_GPIO_Init+0x15c>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a4f      	ldr	r2, [pc, #316]	; (8002358 <MX_GPIO_Init+0x15c>)
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b4d      	ldr	r3, [pc, #308]	; (8002358 <MX_GPIO_Init+0x15c>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b49      	ldr	r3, [pc, #292]	; (8002358 <MX_GPIO_Init+0x15c>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a48      	ldr	r2, [pc, #288]	; (8002358 <MX_GPIO_Init+0x15c>)
 8002238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b46      	ldr	r3, [pc, #280]	; (8002358 <MX_GPIO_Init+0x15c>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	4b42      	ldr	r3, [pc, #264]	; (8002358 <MX_GPIO_Init+0x15c>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a41      	ldr	r2, [pc, #260]	; (8002358 <MX_GPIO_Init+0x15c>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b3f      	ldr	r3, [pc, #252]	; (8002358 <MX_GPIO_Init+0x15c>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4b3b      	ldr	r3, [pc, #236]	; (8002358 <MX_GPIO_Init+0x15c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a3a      	ldr	r2, [pc, #232]	; (8002358 <MX_GPIO_Init+0x15c>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b38      	ldr	r3, [pc, #224]	; (8002358 <MX_GPIO_Init+0x15c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002282:	2201      	movs	r2, #1
 8002284:	2110      	movs	r1, #16
 8002286:	4835      	ldr	r0, [pc, #212]	; (800235c <MX_GPIO_Init+0x160>)
 8002288:	f005 f98c 	bl	80075a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 800228c:	2200      	movs	r2, #0
 800228e:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8002292:	4832      	ldr	r0, [pc, #200]	; (800235c <MX_GPIO_Init+0x160>)
 8002294:	f005 f986 	bl	80075a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800229c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800229e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4619      	mov	r1, r3
 80022ae:	482c      	ldr	r0, [pc, #176]	; (8002360 <MX_GPIO_Init+0x164>)
 80022b0:	f004 ffdc 	bl	800726c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022b4:	2304      	movs	r3, #4
 80022b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	4826      	ldr	r0, [pc, #152]	; (8002360 <MX_GPIO_Init+0x164>)
 80022c8:	f004 ffd0 	bl	800726c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022cc:	2308      	movs	r3, #8
 80022ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	481f      	ldr	r0, [pc, #124]	; (8002360 <MX_GPIO_Init+0x164>)
 80022e2:	f004 ffc3 	bl	800726c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_11;
 80022e6:	f44f 6303 	mov.w	r3, #2096	; 0x830
 80022ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ec:	2301      	movs	r3, #1
 80022ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	4817      	ldr	r0, [pc, #92]	; (800235c <MX_GPIO_Init+0x160>)
 8002300:	f004 ffb4 	bl	800726c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	4812      	ldr	r0, [pc, #72]	; (8002364 <MX_GPIO_Init+0x168>)
 800231a:	f004 ffa7 	bl	800726c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800231e:	2340      	movs	r3, #64	; 0x40
 8002320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232a:	2303      	movs	r3, #3
 800232c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800232e:	2308      	movs	r3, #8
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	4809      	ldr	r0, [pc, #36]	; (8002360 <MX_GPIO_Init+0x164>)
 800233a:	f004 ff97 	bl	800726c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	2009      	movs	r0, #9
 8002344:	f004 fb4d 	bl	80069e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002348:	2009      	movs	r0, #9
 800234a:	f004 fb66 	bl	8006a1a <HAL_NVIC_EnableIRQ>

}
 800234e:	bf00      	nop
 8002350:	3728      	adds	r7, #40	; 0x28
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	40020000 	.word	0x40020000
 8002360:	40020800 	.word	0x40020800
 8002364:	40020400 	.word	0x40020400

08002368 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800236c:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <MX_I2C1_Init+0x50>)
 800236e:	4a13      	ldr	r2, [pc, #76]	; (80023bc <MX_I2C1_Init+0x54>)
 8002370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_I2C1_Init+0x50>)
 8002374:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <MX_I2C1_Init+0x58>)
 8002376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <MX_I2C1_Init+0x50>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_I2C1_Init+0x50>)
 8002380:	2200      	movs	r2, #0
 8002382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_I2C1_Init+0x50>)
 8002386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800238a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <MX_I2C1_Init+0x50>)
 800238e:	2200      	movs	r2, #0
 8002390:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_I2C1_Init+0x50>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <MX_I2C1_Init+0x50>)
 800239a:	2200      	movs	r2, #0
 800239c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_I2C1_Init+0x50>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <MX_I2C1_Init+0x50>)
 80023a6:	f005 f92f 	bl	8007608 <HAL_I2C_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023b0:	f002 fd38 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200004d8 	.word	0x200004d8
 80023bc:	40005400 	.word	0x40005400
 80023c0:	000186a0 	.word	0x000186a0

080023c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a19      	ldr	r2, [pc, #100]	; (8002448 <HAL_I2C_MspInit+0x84>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d12b      	bne.n	800243e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_I2C_MspInit+0x88>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a17      	ldr	r2, [pc, #92]	; (800244c <HAL_I2C_MspInit+0x88>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_I2C_MspInit+0x88>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002402:	23c0      	movs	r3, #192	; 0xc0
 8002404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002406:	2312      	movs	r3, #18
 8002408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240e:	2303      	movs	r3, #3
 8002410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002412:	2304      	movs	r3, #4
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002416:	f107 0314 	add.w	r3, r7, #20
 800241a:	4619      	mov	r1, r3
 800241c:	480c      	ldr	r0, [pc, #48]	; (8002450 <HAL_I2C_MspInit+0x8c>)
 800241e:	f004 ff25 	bl	800726c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_I2C_MspInit+0x88>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a08      	ldr	r2, [pc, #32]	; (800244c <HAL_I2C_MspInit+0x88>)
 800242c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_I2C_MspInit+0x88>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800243e:	bf00      	nop
 8002440:	3728      	adds	r7, #40	; 0x28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40005400 	.word	0x40005400
 800244c:	40023800 	.word	0x40023800
 8002450:	40020400 	.word	0x40020400

08002454 <motor>:
int32_t getLocalPosition();
int32_t getRawPosition();

// USER CODE ======================================================================================

void motor(float voltage) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage > 0) {
 800245e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002462:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246a:	dd11      	ble.n	8002490 <motor+0x3c>
		// forward
		if (voltage > 25000) {
 800246c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002470:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002504 <motor+0xb0>
 8002474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247c:	dd01      	ble.n	8002482 <motor+0x2e>
			voltage = 25000;
 800247e:	4b22      	ldr	r3, [pc, #136]	; (8002508 <motor+0xb4>)
 8002480:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 8002482:	2200      	movs	r2, #0
 8002484:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002488:	4820      	ldr	r0, [pc, #128]	; (800250c <motor+0xb8>)
 800248a:	f005 f88b 	bl	80075a4 <HAL_GPIO_WritePin>
 800248e:	e02b      	b.n	80024e8 <motor+0x94>
	} else if (voltage < 0) {
 8002490:	edd7 7a01 	vldr	s15, [r7, #4]
 8002494:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249c:	d521      	bpl.n	80024e2 <motor+0x8e>
		// backward
		voltage *= -1.0;
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe f85a 	bl	8000558 <__aeabi_f2d>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	f7fe fba4 	bl	8000bf8 <__aeabi_d2f>
 80024b0:	4603      	mov	r3, r0
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eef1 7a67 	vneg.f32	s15, s15
 80024ba:	edc7 7a01 	vstr	s15, [r7, #4]
		if (voltage > 25000) {
 80024be:	edd7 7a01 	vldr	s15, [r7, #4]
 80024c2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002504 <motor+0xb0>
 80024c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ce:	dd01      	ble.n	80024d4 <motor+0x80>
			voltage = 25000;
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <motor+0xb4>)
 80024d2:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
 80024d4:	2201      	movs	r2, #1
 80024d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024da:	480c      	ldr	r0, [pc, #48]	; (800250c <motor+0xb8>)
 80024dc:	f005 f862 	bl	80075a4 <HAL_GPIO_WritePin>
 80024e0:	e002      	b.n	80024e8 <motor+0x94>
	} else {
		// stop
		voltage = 0;
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	607b      	str	r3, [r7, #4]
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, voltage);
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <motor+0xbc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80024f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f4:	ee17 2a90 	vmov	r2, s15
 80024f8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	46c35000 	.word	0x46c35000
 8002508:	46c35000 	.word	0x46c35000
 800250c:	40020000 	.word	0x40020000
 8002510:	2000198c 	.word	0x2000198c

08002514 <getLocalPosition>:

int32_t getLocalPosition() {
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2) - homeoffset;
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <getLocalPosition+0x1c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <getLocalPosition+0x20>)
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	1a9b      	subs	r3, r3, r2
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20001a40 	.word	0x20001a40
 8002534:	20001918 	.word	0x20001918

08002538 <getRawPosition>:

int32_t getRawPosition() {
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <getRawPosition+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	20001a40 	.word	0x20001a40

08002550 <localize>:
float calculateNorm(Coordinate coord);
Coordinate negateCoordinate(Coordinate coord);

// USER CODE ======================================================================================

void localize(Coordinate *inputs, Coordinate *outputs, Coordinate *origin, float *angle) {
 8002550:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002554:	b0a2      	sub	sp, #136	; 0x88
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	603b      	str	r3, [r7, #0]
	Coordinate point1 = inputs[0];
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002566:	e892 0003 	ldmia.w	r2, {r0, r1}
 800256a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point2 = inputs[1];
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002574:	3208      	adds	r2, #8
 8002576:	e892 0003 	ldmia.w	r2, {r0, r1}
 800257a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate point3 = inputs[2];
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002584:	3210      	adds	r2, #16
 8002586:	e892 0003 	ldmia.w	r2, {r0, r1}
 800258a:	e883 0003 	stmia.w	r3, {r0, r1}
	Coordinate vectA = subtractCoordinates(point2, point1);
 800258e:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8002592:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002596:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800259a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800259e:	eeb0 1a46 	vmov.f32	s2, s12
 80025a2:	eef0 1a66 	vmov.f32	s3, s13
 80025a6:	eeb0 0a47 	vmov.f32	s0, s14
 80025aa:	eef0 0a67 	vmov.f32	s1, s15
 80025ae:	f000 fba7 	bl	8002d00 <subtractCoordinates>
 80025b2:	eeb0 7a40 	vmov.f32	s14, s0
 80025b6:	eef0 7a60 	vmov.f32	s15, s1
 80025ba:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 80025be:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	Coordinate vectB = subtractCoordinates(point3, point2);
 80025c2:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 80025c6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80025ca:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80025ce:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80025d2:	eeb0 1a46 	vmov.f32	s2, s12
 80025d6:	eef0 1a66 	vmov.f32	s3, s13
 80025da:	eeb0 0a47 	vmov.f32	s0, s14
 80025de:	eef0 0a67 	vmov.f32	s1, s15
 80025e2:	f000 fb8d 	bl	8002d00 <subtractCoordinates>
 80025e6:	eeb0 7a40 	vmov.f32	s14, s0
 80025ea:	eef0 7a60 	vmov.f32	s15, s1
 80025ee:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 80025f2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	Coordinate vectC = subtractCoordinates(point3, point1);
 80025f6:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 80025fa:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80025fe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002602:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002606:	eeb0 1a46 	vmov.f32	s2, s12
 800260a:	eef0 1a66 	vmov.f32	s3, s13
 800260e:	eeb0 0a47 	vmov.f32	s0, s14
 8002612:	eef0 0a67 	vmov.f32	s1, s15
 8002616:	f000 fb73 	bl	8002d00 <subtractCoordinates>
 800261a:	eeb0 7a40 	vmov.f32	s14, s0
 800261e:	eef0 7a60 	vmov.f32	s15, s1
 8002622:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8002626:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float lenA = calculateNorm(vectA);
 800262a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800262e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002632:	eeb0 0a47 	vmov.f32	s0, s14
 8002636:	eef0 0a67 	vmov.f32	s1, s15
 800263a:	f000 fb9b 	bl	8002d74 <calculateNorm>
 800263e:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
	float lenB = calculateNorm(vectB);
 8002642:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002646:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800264a:	eeb0 0a47 	vmov.f32	s0, s14
 800264e:	eef0 0a67 	vmov.f32	s1, s15
 8002652:	f000 fb8f 	bl	8002d74 <calculateNorm>
 8002656:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	float lenC = calculateNorm(vectC);
 800265a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800265e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002662:	eeb0 0a47 	vmov.f32	s0, s14
 8002666:	eef0 0a67 	vmov.f32	s1, s15
 800266a:	f000 fb83 	bl	8002d74 <calculateNorm>
 800266e:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	Coordinate vector1;
	Coordinate vector2;

	if (lenA < lenB && lenB < lenC && lenA < lenC) {
 8002672:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002676:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800267a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800267e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002682:	d534      	bpl.n	80026ee <localize+0x19e>
 8002684:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002688:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800268c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002694:	d52b      	bpl.n	80026ee <localize+0x19e>
 8002696:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800269a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800269e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a6:	d522      	bpl.n	80026ee <localize+0x19e>
		// CASE 1
		*origin = point2;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026b4:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectB;
 80026b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026bc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80026c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026c4:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = negateCoordinate(vectA);
 80026c8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80026cc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80026d0:	eeb0 0a47 	vmov.f32	s0, s14
 80026d4:	eef0 0a67 	vmov.f32	s1, s15
 80026d8:	f000 fb7f 	bl	8002dda <negateCoordinate>
 80026dc:	eeb0 7a40 	vmov.f32	s14, s0
 80026e0:	eef0 7a60 	vmov.f32	s15, s1
 80026e4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80026e8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80026ec:	e134      	b.n	8002958 <localize+0x408>
	} else if (lenC < lenB && lenB < lenA && lenC < lenA) {
 80026ee:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80026f2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80026f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fe:	d53e      	bpl.n	800277e <localize+0x22e>
 8002700:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002704:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002708:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800270c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002710:	d535      	bpl.n	800277e <localize+0x22e>
 8002712:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002716:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800271a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800271e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002722:	d52c      	bpl.n	800277e <localize+0x22e>
		// CASE 2
		*origin = point3;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	461a      	mov	r2, r3
 8002728:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800272c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002730:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectB);
 8002734:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002738:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800273c:	eeb0 0a47 	vmov.f32	s0, s14
 8002740:	eef0 0a67 	vmov.f32	s1, s15
 8002744:	f000 fb49 	bl	8002dda <negateCoordinate>
 8002748:	eeb0 7a40 	vmov.f32	s14, s0
 800274c:	eef0 7a60 	vmov.f32	s15, s1
 8002750:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8002754:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectC);
 8002758:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800275c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002760:	eeb0 0a47 	vmov.f32	s0, s14
 8002764:	eef0 0a67 	vmov.f32	s1, s15
 8002768:	f000 fb37 	bl	8002dda <negateCoordinate>
 800276c:	eeb0 7a40 	vmov.f32	s14, s0
 8002770:	eef0 7a60 	vmov.f32	s15, s1
 8002774:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8002778:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800277c:	e0ec      	b.n	8002958 <localize+0x408>
	} else if (lenA < lenC && lenC < lenB && lenA < lenB) {
 800277e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002782:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002786:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800278a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278e:	d52a      	bpl.n	80027e6 <localize+0x296>
 8002790:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002794:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002798:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800279c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a0:	d521      	bpl.n	80027e6 <localize+0x296>
 80027a2:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80027a6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80027aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b2:	d518      	bpl.n	80027e6 <localize+0x296>
		// CASE 3
		*origin = point1;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	461a      	mov	r2, r3
 80027b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027c0:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectC;
 80027c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d0:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectA;
 80027d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80027e4:	e0b8      	b.n	8002958 <localize+0x408>
	} else if (lenC < lenA && lenA < lenB && lenC < lenB) {
 80027e6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80027ea:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80027ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f6:	d52a      	bpl.n	800284e <localize+0x2fe>
 80027f8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80027fc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002800:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002808:	d521      	bpl.n	800284e <localize+0x2fe>
 800280a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800280e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281a:	d518      	bpl.n	800284e <localize+0x2fe>
		// CASE 4
		*origin = point1;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	461a      	mov	r2, r3
 8002820:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002824:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002828:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = vectA;
 800282c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002830:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002834:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002838:	e883 0003 	stmia.w	r3, {r0, r1}
		vector2 = vectC;
 800283c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002840:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002848:	e883 0003 	stmia.w	r3, {r0, r1}
 800284c:	e084      	b.n	8002958 <localize+0x408>
	} else if (lenB < lenC && lenC < lenA && lenB < lenA) {
 800284e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002852:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002856:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800285a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285e:	d53e      	bpl.n	80028de <localize+0x38e>
 8002860:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002864:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800286c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002870:	d535      	bpl.n	80028de <localize+0x38e>
 8002872:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002876:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800287a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800287e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002882:	d52c      	bpl.n	80028de <localize+0x38e>
		// CASE 5
		*origin = point3;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	461a      	mov	r2, r3
 8002888:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800288c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002890:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectC);
 8002894:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002898:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800289c:	eeb0 0a47 	vmov.f32	s0, s14
 80028a0:	eef0 0a67 	vmov.f32	s1, s15
 80028a4:	f000 fa99 	bl	8002dda <negateCoordinate>
 80028a8:	eeb0 7a40 	vmov.f32	s14, s0
 80028ac:	eef0 7a60 	vmov.f32	s15, s1
 80028b0:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80028b4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = negateCoordinate(vectB);
 80028b8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80028bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80028c0:	eeb0 0a47 	vmov.f32	s0, s14
 80028c4:	eef0 0a67 	vmov.f32	s1, s15
 80028c8:	f000 fa87 	bl	8002dda <negateCoordinate>
 80028cc:	eeb0 7a40 	vmov.f32	s14, s0
 80028d0:	eef0 7a60 	vmov.f32	s15, s1
 80028d4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80028d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80028dc:	e03c      	b.n	8002958 <localize+0x408>
	} else if (lenB < lenA && lenA < lenC && lenB < lenC) {
 80028de:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80028e2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80028e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ee:	d533      	bpl.n	8002958 <localize+0x408>
 80028f0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80028f4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80028f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002900:	d52a      	bpl.n	8002958 <localize+0x408>
 8002902:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002906:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800290a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800290e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002912:	d521      	bpl.n	8002958 <localize+0x408>
		// CASE 6
		*origin = point2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	461a      	mov	r2, r3
 8002918:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800291c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002920:	e882 0003 	stmia.w	r2, {r0, r1}
		vector1 = negateCoordinate(vectA);
 8002924:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002928:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800292c:	eeb0 0a47 	vmov.f32	s0, s14
 8002930:	eef0 0a67 	vmov.f32	s1, s15
 8002934:	f000 fa51 	bl	8002dda <negateCoordinate>
 8002938:	eeb0 7a40 	vmov.f32	s14, s0
 800293c:	eef0 7a60 	vmov.f32	s15, s1
 8002940:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8002944:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		vector2 = vectB;
 8002948:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800294c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002950:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002954:	e883 0003 	stmia.w	r3, {r0, r1}
	}

	// calculate vector angle
	if (vector1.x == 0) {
 8002958:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800295c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002964:	d10e      	bne.n	8002984 <localize+0x434>
		if (vector1.y > 0) {
 8002966:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800296a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800296e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002972:	dd03      	ble.n	800297c <localize+0x42c>
			*angle = M_PI / 2.0;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	4a72      	ldr	r2, [pc, #456]	; (8002b40 <localize+0x5f0>)
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e092      	b.n	8002aa2 <localize+0x552>
		} else {
			*angle = 1.5 * M_PI;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4a71      	ldr	r2, [pc, #452]	; (8002b44 <localize+0x5f4>)
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	e08e      	b.n	8002aa2 <localize+0x552>
		}
	} else if (vector1.y == 0) {
 8002984:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002988:	eef5 7a40 	vcmp.f32	s15, #0.0
 800298c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002990:	d10f      	bne.n	80029b2 <localize+0x462>
		if (vector1.x >= 0) {
 8002992:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800299a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299e:	db04      	blt.n	80029aa <localize+0x45a>
			*angle = 0;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	e07b      	b.n	8002aa2 <localize+0x552>
		} else {
			*angle = M_PI;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	4a66      	ldr	r2, [pc, #408]	; (8002b48 <localize+0x5f8>)
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e077      	b.n	8002aa2 <localize+0x552>
		}
	} else {
		*angle = fabs(atan(vector1.y / vector1.x));
 80029b2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80029b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80029ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80029be:	ee16 0a90 	vmov	r0, s13
 80029c2:	f7fd fdc9 	bl	8000558 <__aeabi_f2d>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	ec43 2b10 	vmov	d0, r2, r3
 80029ce:	f00d fecb 	bl	8010768 <atan>
 80029d2:	ec53 2b10 	vmov	r2, r3, d0
 80029d6:	4610      	mov	r0, r2
 80029d8:	4619      	mov	r1, r3
 80029da:	f7fe f90d 	bl	8000bf8 <__aeabi_d2f>
 80029de:	ee07 0a90 	vmov	s15, r0
 80029e2:	eef0 7ae7 	vabs.f32	s15, s15
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	edc3 7a00 	vstr	s15, [r3]
		if (vector1.x < 0 && vector1.y < 0) {
 80029ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80029f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f8:	d51a      	bpl.n	8002a30 <localize+0x4e0>
 80029fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a06:	d513      	bpl.n	8002a30 <localize+0x4e0>
			*angle = M_PI + *angle;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fda3 	bl	8000558 <__aeabi_f2d>
 8002a12:	a347      	add	r3, pc, #284	; (adr r3, 8002b30 <localize+0x5e0>)
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	f7fd fc40 	bl	800029c <__adddf3>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	f7fe f8e8 	bl	8000bf8 <__aeabi_d2f>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e038      	b.n	8002aa2 <localize+0x552>
		} else if (vector1.x < 0) {
 8002a30:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002a34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	d515      	bpl.n	8002a6a <localize+0x51a>
			*angle = M_PI - *angle;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fd fd88 	bl	8000558 <__aeabi_f2d>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	a138      	add	r1, pc, #224	; (adr r1, 8002b30 <localize+0x5e0>)
 8002a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a52:	f7fd fc21 	bl	8000298 <__aeabi_dsub>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f7fe f8cb 	bl	8000bf8 <__aeabi_d2f>
 8002a62:	4602      	mov	r2, r0
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e01b      	b.n	8002aa2 <localize+0x552>
		} else if (vector1.y < 0) {
 8002a6a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a76:	d514      	bpl.n	8002aa2 <localize+0x552>
			*angle = 2.0 * M_PI - *angle;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd6b 	bl	8000558 <__aeabi_f2d>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	a12c      	add	r1, pc, #176	; (adr r1, 8002b38 <localize+0x5e8>)
 8002a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a8c:	f7fd fc04 	bl	8000298 <__aeabi_dsub>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	f7fe f8ae 	bl	8000bf8 <__aeabi_d2f>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	601a      	str	r2, [r3, #0]
		}
	}

	// calculate for matrix directions
	float dir = vector1.x * vector2.y - vector1.y * vector2.x;
 8002aa2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002aa6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002aaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aae:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002ab2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002abe:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	if (dir < 0) {
 8002ac2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002ac6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ace:	d516      	bpl.n	8002afe <localize+0x5ae>
		*angle = *angle + M_PI;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fd3f 	bl	8000558 <__aeabi_f2d>
 8002ada:	a315      	add	r3, pc, #84	; (adr r3, 8002b30 <localize+0x5e0>)
 8002adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae0:	f7fd fbdc 	bl	800029c <__adddf3>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	f7fe f884 	bl	8000bf8 <__aeabi_d2f>
 8002af0:	4602      	mov	r2, r0
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	601a      	str	r2, [r3, #0]
		dir = -1.0;
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <localize+0x5fc>)
 8002af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002afc:	e003      	b.n	8002b06 <localize+0x5b6>
	} else {
		dir = 1.0;
 8002afe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	}

	// create 9 points
	float X[] = { 10.0, 30.0, 50.0 };
 8002b06:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <localize+0x600>)
 8002b08:	f107 031c 	add.w	r3, r7, #28
 8002b0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float Y[] = { 10.0, 25.0, 40.0 };
 8002b12:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <localize+0x604>)
 8002b14:	f107 0310 	add.w	r3, r7, #16
 8002b18:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < 3; i++) {
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b24:	e0e1      	b.n	8002cea <localize+0x79a>
		for (int j = 0; j < 3; j++) {
 8002b26:	2300      	movs	r3, #0
 8002b28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b2a:	e0d5      	b.n	8002cd8 <localize+0x788>
 8002b2c:	f3af 8000 	nop.w
 8002b30:	54442d18 	.word	0x54442d18
 8002b34:	400921fb 	.word	0x400921fb
 8002b38:	54442d18 	.word	0x54442d18
 8002b3c:	401921fb 	.word	0x401921fb
 8002b40:	3fc90fdb 	.word	0x3fc90fdb
 8002b44:	4096cbe4 	.word	0x4096cbe4
 8002b48:	40490fdb 	.word	0x40490fdb
 8002b4c:	bf800000 	.word	0xbf800000
 8002b50:	08012e40 	.word	0x08012e40
 8002b54:	08012e4c 	.word	0x08012e4c
			double angleValue = (double) (*angle);  // Dereference and convert to double
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fd fcfb 	bl	8000558 <__aeabi_f2d>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			outputs[i * 3 + j].x = origin->x + X[i] * dir * cos(angleValue) - Y[j] * sin(angleValue);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fd fcf2 	bl	8000558 <__aeabi_f2d>
 8002b74:	4604      	mov	r4, r0
 8002b76:	460d      	mov	r5, r1
 8002b78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	3388      	adds	r3, #136	; 0x88
 8002b80:	443b      	add	r3, r7
 8002b82:	3b6c      	subs	r3, #108	; 0x6c
 8002b84:	ed93 7a00 	vldr	s14, [r3]
 8002b88:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b90:	ee17 0a90 	vmov	r0, s15
 8002b94:	f7fd fce0 	bl	8000558 <__aeabi_f2d>
 8002b98:	4680      	mov	r8, r0
 8002b9a:	4689      	mov	r9, r1
 8002b9c:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002ba0:	f00d ff82 	bl	8010aa8 <cos>
 8002ba4:	ec53 2b10 	vmov	r2, r3, d0
 8002ba8:	4640      	mov	r0, r8
 8002baa:	4649      	mov	r1, r9
 8002bac:	f7fd fd2c 	bl	8000608 <__aeabi_dmul>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	f7fd fb70 	bl	800029c <__adddf3>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4690      	mov	r8, r2
 8002bc2:	4699      	mov	r9, r3
 8002bc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	3388      	adds	r3, #136	; 0x88
 8002bca:	443b      	add	r3, r7
 8002bcc:	3b78      	subs	r3, #120	; 0x78
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fcc1 	bl	8000558 <__aeabi_f2d>
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	460d      	mov	r5, r1
 8002bda:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002bde:	f00d ffc3 	bl	8010b68 <sin>
 8002be2:	ec53 2b10 	vmov	r2, r3, d0
 8002be6:	4620      	mov	r0, r4
 8002be8:	4629      	mov	r1, r5
 8002bea:	f7fd fd0d 	bl	8000608 <__aeabi_dmul>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4640      	mov	r0, r8
 8002bf4:	4649      	mov	r1, r9
 8002bf6:	f7fd fb4f 	bl	8000298 <__aeabi_dsub>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	441a      	add	r2, r3
 8002c0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c0e:	4413      	add	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	18d4      	adds	r4, r2, r3
 8002c16:	f7fd ffef 	bl	8000bf8 <__aeabi_d2f>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6023      	str	r3, [r4, #0]
			outputs[i * 3 + j].y = origin->y + X[i] * dir * sin(angleValue) + Y[j] * cos(angleValue);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fd fc98 	bl	8000558 <__aeabi_f2d>
 8002c28:	4604      	mov	r4, r0
 8002c2a:	460d      	mov	r5, r1
 8002c2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	3388      	adds	r3, #136	; 0x88
 8002c34:	443b      	add	r3, r7
 8002c36:	3b6c      	subs	r3, #108	; 0x6c
 8002c38:	ed93 7a00 	vldr	s14, [r3]
 8002c3c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c44:	ee17 0a90 	vmov	r0, s15
 8002c48:	f7fd fc86 	bl	8000558 <__aeabi_f2d>
 8002c4c:	4680      	mov	r8, r0
 8002c4e:	4689      	mov	r9, r1
 8002c50:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002c54:	f00d ff88 	bl	8010b68 <sin>
 8002c58:	ec53 2b10 	vmov	r2, r3, d0
 8002c5c:	4640      	mov	r0, r8
 8002c5e:	4649      	mov	r1, r9
 8002c60:	f7fd fcd2 	bl	8000608 <__aeabi_dmul>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4620      	mov	r0, r4
 8002c6a:	4629      	mov	r1, r5
 8002c6c:	f7fd fb16 	bl	800029c <__adddf3>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4690      	mov	r8, r2
 8002c76:	4699      	mov	r9, r3
 8002c78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	3388      	adds	r3, #136	; 0x88
 8002c7e:	443b      	add	r3, r7
 8002c80:	3b78      	subs	r3, #120	; 0x78
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fd fc67 	bl	8000558 <__aeabi_f2d>
 8002c8a:	4604      	mov	r4, r0
 8002c8c:	460d      	mov	r5, r1
 8002c8e:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002c92:	f00d ff09 	bl	8010aa8 <cos>
 8002c96:	ec53 2b10 	vmov	r2, r3, d0
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	f7fd fcb3 	bl	8000608 <__aeabi_dmul>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4640      	mov	r0, r8
 8002ca8:	4649      	mov	r1, r9
 8002caa:	f7fd faf7 	bl	800029c <__adddf3>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	441a      	add	r2, r3
 8002cc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	18d4      	adds	r4, r2, r3
 8002cca:	f7fd ff95 	bl	8000bf8 <__aeabi_d2f>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	6063      	str	r3, [r4, #4]
		for (int j = 0; j < 3; j++) {
 8002cd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	f77f af3c 	ble.w	8002b58 <localize+0x608>
	for (int i = 0; i < 3; i++) {
 8002ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	f77f af19 	ble.w	8002b26 <localize+0x5d6>

	// dirty fix for angle error
//	if (dir < 0){
//		*angle = *angle - M_PI;
//	}
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3788      	adds	r7, #136	; 0x88
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002d00 <subtractCoordinates>:

Coordinate subtractCoordinates(Coordinate coord1, Coordinate coord2) {
 8002d00:	b480      	push	{r7}
 8002d02:	b08b      	sub	sp, #44	; 0x2c
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	eeb0 6a40 	vmov.f32	s12, s0
 8002d0a:	eef0 6a60 	vmov.f32	s13, s1
 8002d0e:	eeb0 7a41 	vmov.f32	s14, s2
 8002d12:	eef0 7a61 	vmov.f32	s15, s3
 8002d16:	ed87 6a04 	vstr	s12, [r7, #16]
 8002d1a:	edc7 6a05 	vstr	s13, [r7, #20]
 8002d1e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002d22:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = coord1.x - coord2.x;
 8002d26:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d32:	edc7 7a06 	vstr	s15, [r7, #24]
	result.y = coord1.y - coord2.y;
 8002d36:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d42:	edc7 7a07 	vstr	s15, [r7, #28]
	return result;
 8002d46:	f107 0320 	add.w	r3, r7, #32
 8002d4a:	f107 0218 	add.w	r2, r7, #24
 8002d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d52:	e883 0003 	stmia.w	r3, {r0, r1}
 8002d56:	6a3a      	ldr	r2, [r7, #32]
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	ee07 2a10 	vmov	s14, r2
 8002d5e:	ee07 3a90 	vmov	s15, r3
}
 8002d62:	eeb0 0a47 	vmov.f32	s0, s14
 8002d66:	eef0 0a67 	vmov.f32	s1, s15
 8002d6a:	372c      	adds	r7, #44	; 0x2c
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <calculateNorm>:

float calculateNorm(Coordinate coord) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	eeb0 7a40 	vmov.f32	s14, s0
 8002d7e:	eef0 7a60 	vmov.f32	s15, s1
 8002d82:	ed87 7a00 	vstr	s14, [r7]
 8002d86:	edc7 7a01 	vstr	s15, [r7, #4]
	float norm = sqrt(coord.x * coord.x + coord.y * coord.y);
 8002d8a:	ed97 7a00 	vldr	s14, [r7]
 8002d8e:	edd7 7a00 	vldr	s15, [r7]
 8002d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d96:	edd7 6a01 	vldr	s13, [r7, #4]
 8002d9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da6:	ee17 0a90 	vmov	r0, s15
 8002daa:	f7fd fbd5 	bl	8000558 <__aeabi_f2d>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	ec43 2b10 	vmov	d0, r2, r3
 8002db6:	f00d ffa9 	bl	8010d0c <sqrt>
 8002dba:	ec53 2b10 	vmov	r2, r3, d0
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f7fd ff19 	bl	8000bf8 <__aeabi_d2f>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	60fb      	str	r3, [r7, #12]
	return norm;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	ee07 3a90 	vmov	s15, r3
}
 8002dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <negateCoordinate>:

Coordinate negateCoordinate(Coordinate coord) {
 8002dda:	b480      	push	{r7}
 8002ddc:	b089      	sub	sp, #36	; 0x24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	eeb0 7a40 	vmov.f32	s14, s0
 8002de4:	eef0 7a60 	vmov.f32	s15, s1
 8002de8:	ed87 7a02 	vstr	s14, [r7, #8]
 8002dec:	edc7 7a03 	vstr	s15, [r7, #12]
	Coordinate result;
	result.x = -coord.x;
 8002df0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002df4:	eef1 7a67 	vneg.f32	s15, s15
 8002df8:	edc7 7a04 	vstr	s15, [r7, #16]
	result.y = -coord.y;
 8002dfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e00:	eef1 7a67 	vneg.f32	s15, s15
 8002e04:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 8002e08:	f107 0318 	add.w	r3, r7, #24
 8002e0c:	f107 0210 	add.w	r2, r7, #16
 8002e10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e14:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	ee07 2a10 	vmov	s14, r2
 8002e20:	ee07 3a90 	vmov	s15, r3
}
 8002e24:	eeb0 0a47 	vmov.f32	s0, s14
 8002e28:	eef0 0a67 	vmov.f32	s1, s15
 8002e2c:	3724      	adds	r7, #36	; 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <modbus_init>:
void modbus_data_sync(MB *variables);
void modbus_init();

// USER CODE ======================================================================================

void modbus_init() {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
	hmodbus.huart = &huart2;
 8002e3c:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <modbus_init+0x28>)
 8002e3e:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <modbus_init+0x2c>)
 8002e40:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <modbus_init+0x28>)
 8002e44:	4a08      	ldr	r2, [pc, #32]	; (8002e68 <modbus_init+0x30>)
 8002e46:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <modbus_init+0x28>)
 8002e4a:	2215      	movs	r2, #21
 8002e4c:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 8002e4e:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <modbus_init+0x28>)
 8002e50:	2246      	movs	r2, #70	; 0x46
 8002e52:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, MBregisterFrame);
 8002e54:	4905      	ldr	r1, [pc, #20]	; (8002e6c <modbus_init+0x34>)
 8002e56:	4802      	ldr	r0, [pc, #8]	; (8002e60 <modbus_init+0x28>)
 8002e58:	f7fe fd5a 	bl	8001910 <Modbus_init>
}
 8002e5c:	bf00      	nop
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	2000052c 	.word	0x2000052c
 8002e64:	20001edc 	.word	0x20001edc
 8002e68:	20001d10 	.word	0x20001d10
 8002e6c:	20000a04 	.word	0x20000a04

08002e70 <modbus_heartbeat_handler>:

void modbus_heartbeat_handler(MB *variables) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	static int8_t fail = 0;
	static uint32_t timestamp = 0;
	if (HAL_GetTick() >= timestamp) {
 8002e78:	f003 fa36 	bl	80062e8 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <modbus_heartbeat_handler+0x78>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d32c      	bcc.n	8002ee0 <modbus_heartbeat_handler+0x70>
		timestamp = HAL_GetTick() + 200;
 8002e86:	f003 fa2f 	bl	80062e8 <HAL_GetTick>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	33c8      	adds	r3, #200	; 0xc8
 8002e8e:	4a16      	ldr	r2, [pc, #88]	; (8002ee8 <modbus_heartbeat_handler+0x78>)
 8002e90:	6013      	str	r3, [r2, #0]

		// check if the base system send heartbeat
		if (MBregisterFrame[0].U16 == 18537) {
 8002e92:	4b16      	ldr	r3, [pc, #88]	; (8002eec <modbus_heartbeat_handler+0x7c>)
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	f644 0269 	movw	r2, #18537	; 0x4869
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d106      	bne.n	8002eac <modbus_heartbeat_handler+0x3c>
			// success
			variables->heartbeat = 1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	849a      	strh	r2, [r3, #36]	; 0x24
			fail = 0;
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <modbus_heartbeat_handler+0x80>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	e015      	b.n	8002ed8 <modbus_heartbeat_handler+0x68>
		} else {
			// fail, count failure
			if (fail < 126) {
 8002eac:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <modbus_heartbeat_handler+0x80>)
 8002eae:	f993 3000 	ldrsb.w	r3, [r3]
 8002eb2:	2b7d      	cmp	r3, #125	; 0x7d
 8002eb4:	dc08      	bgt.n	8002ec8 <modbus_heartbeat_handler+0x58>
				fail++;
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <modbus_heartbeat_handler+0x80>)
 8002eb8:	f993 3000 	ldrsb.w	r3, [r3]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	b25a      	sxtb	r2, r3
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <modbus_heartbeat_handler+0x80>)
 8002ec6:	701a      	strb	r2, [r3, #0]
			}
			// if fail is too high then system is disconnected
			if (fail > 9) {
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <modbus_heartbeat_handler+0x80>)
 8002eca:	f993 3000 	ldrsb.w	r3, [r3]
 8002ece:	2b09      	cmp	r3, #9
 8002ed0:	dd02      	ble.n	8002ed8 <modbus_heartbeat_handler+0x68>
				variables->heartbeat = 0;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	849a      	strh	r2, [r3, #36]	; 0x24
			}
		}

		// set heartbeat for base system to see
		MBregisterFrame[0].U16 = 22881;
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <modbus_heartbeat_handler+0x7c>)
 8002eda:	f645 1261 	movw	r2, #22881	; 0x5961
 8002ede:	801a      	strh	r2, [r3, #0]
	}
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	2000195c 	.word	0x2000195c
 8002eec:	20000a04 	.word	0x20000a04
 8002ef0:	20001960 	.word	0x20001960

08002ef4 <modbus_data_sync>:

void modbus_data_sync(MB *variables) {
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	// report data back to base system
	MBregisterFrame[0x10].U16 = variables->y_moving_status;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	4b81      	ldr	r3, [pc, #516]	; (800310c <modbus_data_sync+0x218>)
 8002f06:	841a      	strh	r2, [r3, #32]
	MBregisterFrame[0x11].U16 = variables->y_actual_position;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	4b7e      	ldr	r3, [pc, #504]	; (800310c <modbus_data_sync+0x218>)
 8002f12:	845a      	strh	r2, [r3, #34]	; 0x22
	MBregisterFrame[0x12].U16 = variables->y_actual_speed;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	4b7b      	ldr	r3, [pc, #492]	; (800310c <modbus_data_sync+0x218>)
 8002f1e:	849a      	strh	r2, [r3, #36]	; 0x24
	MBregisterFrame[0x13].U16 = variables->y_actual_acceleration;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	4b78      	ldr	r3, [pc, #480]	; (800310c <modbus_data_sync+0x218>)
 8002f2a:	84da      	strh	r2, [r3, #38]	; 0x26
	MBregisterFrame[0x20].U16 = variables->pick_tray_origin_x;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	4b75      	ldr	r3, [pc, #468]	; (800310c <modbus_data_sync+0x218>)
 8002f36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	MBregisterFrame[0x21].U16 = variables->pick_tray_origin_y;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	4b72      	ldr	r3, [pc, #456]	; (800310c <modbus_data_sync+0x218>)
 8002f44:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	MBregisterFrame[0x22].U16 = variables->pick_tray_orientation;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	4b6e      	ldr	r3, [pc, #440]	; (800310c <modbus_data_sync+0x218>)
 8002f52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	MBregisterFrame[0x23].U16 = variables->place_tray_origin_x;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	4b6b      	ldr	r3, [pc, #428]	; (800310c <modbus_data_sync+0x218>)
 8002f60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	MBregisterFrame[0x24].U16 = variables->place_tray_origin_y;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	4b67      	ldr	r3, [pc, #412]	; (800310c <modbus_data_sync+0x218>)
 8002f6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	MBregisterFrame[0x25].U16 = variables->place_tray_orientation;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	4b64      	ldr	r3, [pc, #400]	; (800310c <modbus_data_sync+0x218>)
 8002f7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	MBregisterFrame[0x41].U16 = variables->x_target_position;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	4b60      	ldr	r3, [pc, #384]	; (800310c <modbus_data_sync+0x218>)
 8002f8a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	MBregisterFrame[0x42].U16 = variables->x_target_speed;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	4b5d      	ldr	r3, [pc, #372]	; (800310c <modbus_data_sync+0x218>)
 8002f98:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	MBregisterFrame[0x43].U16 = variables->x_target_acceleration_time;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	4b59      	ldr	r3, [pc, #356]	; (800310c <modbus_data_sync+0x218>)
 8002fa6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

	// get data from base system
	variables->goal_point_x = MBregisterFrame[0x30].U16;
 8002faa:	4b58      	ldr	r3, [pc, #352]	; (800310c <modbus_data_sync+0x218>)
 8002fac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002fb0:	b21a      	sxth	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	805a      	strh	r2, [r3, #2]
	variables->goal_point_y = MBregisterFrame[0x31].U16;
 8002fb6:	4b55      	ldr	r3, [pc, #340]	; (800310c <modbus_data_sync+0x218>)
 8002fb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002fbc:	b21a      	sxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	809a      	strh	r2, [r3, #4]
	variables->x_actual_position = MBregisterFrame[0x44].U16;
 8002fc2:	4b52      	ldr	r3, [pc, #328]	; (800310c <modbus_data_sync+0x218>)
 8002fc4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002fc8:	b21a      	sxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	80da      	strh	r2, [r3, #6]
	variables->x_actual_speed = MBregisterFrame[0x45].U16;
 8002fce:	4b4f      	ldr	r3, [pc, #316]	; (800310c <modbus_data_sync+0x218>)
 8002fd0:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002fd4:	b21a      	sxth	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	811a      	strh	r2, [r3, #8]

	static int16_t base_system_status_slave_temp;
	static int16_t base_system_status_master_temp;
	if (base_system_status_master_temp != MBregisterFrame[0x01].U16) {
 8002fda:	4b4d      	ldr	r3, [pc, #308]	; (8003110 <modbus_data_sync+0x21c>)
 8002fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b4a      	ldr	r3, [pc, #296]	; (800310c <modbus_data_sync+0x218>)
 8002fe4:	885b      	ldrh	r3, [r3, #2]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d00f      	beq.n	800300a <modbus_data_sync+0x116>
		variables->base_system_status = MBregisterFrame[0x01].U16;
 8002fea:	4b48      	ldr	r3, [pc, #288]	; (800310c <modbus_data_sync+0x218>)
 8002fec:	885b      	ldrh	r3, [r3, #2]
 8002fee:	b21a      	sxth	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	801a      	strh	r2, [r3, #0]
		base_system_status_master_temp = variables->base_system_status;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002ffa:	4b45      	ldr	r3, [pc, #276]	; (8003110 <modbus_data_sync+0x21c>)
 8002ffc:	801a      	strh	r2, [r3, #0]
		base_system_status_slave_temp = variables->base_system_status;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003004:	4b43      	ldr	r3, [pc, #268]	; (8003114 <modbus_data_sync+0x220>)
 8003006:	801a      	strh	r2, [r3, #0]
 8003008:	e017      	b.n	800303a <modbus_data_sync+0x146>
	} else if (base_system_status_slave_temp != variables->base_system_status) {
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003010:	4b40      	ldr	r3, [pc, #256]	; (8003114 <modbus_data_sync+0x220>)
 8003012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003016:	429a      	cmp	r2, r3
 8003018:	d00f      	beq.n	800303a <modbus_data_sync+0x146>
		MBregisterFrame[0x01].U16 = variables->base_system_status;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003020:	b29a      	uxth	r2, r3
 8003022:	4b3a      	ldr	r3, [pc, #232]	; (800310c <modbus_data_sync+0x218>)
 8003024:	805a      	strh	r2, [r3, #2]
		base_system_status_master_temp = variables->base_system_status;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f9b3 2000 	ldrsh.w	r2, [r3]
 800302c:	4b38      	ldr	r3, [pc, #224]	; (8003110 <modbus_data_sync+0x21c>)
 800302e:	801a      	strh	r2, [r3, #0]
		base_system_status_slave_temp = variables->base_system_status;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003036:	4b37      	ldr	r3, [pc, #220]	; (8003114 <modbus_data_sync+0x220>)
 8003038:	801a      	strh	r2, [r3, #0]
	}

	// update read/write variable
	static int16_t end_effector_status_slave_temp;
	static int16_t end_effector_status_master_temp;
	if (end_effector_status_master_temp != MBregisterFrame[0x02].U16) {
 800303a:	4b37      	ldr	r3, [pc, #220]	; (8003118 <modbus_data_sync+0x224>)
 800303c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003040:	461a      	mov	r2, r3
 8003042:	4b32      	ldr	r3, [pc, #200]	; (800310c <modbus_data_sync+0x218>)
 8003044:	889b      	ldrh	r3, [r3, #4]
 8003046:	429a      	cmp	r2, r3
 8003048:	d00f      	beq.n	800306a <modbus_data_sync+0x176>
		// there is an update from master
		variables->end_effector_status = MBregisterFrame[0x02].U16;
 800304a:	4b30      	ldr	r3, [pc, #192]	; (800310c <modbus_data_sync+0x218>)
 800304c:	889b      	ldrh	r3, [r3, #4]
 800304e:	b21a      	sxth	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	84da      	strh	r2, [r3, #38]	; 0x26
		end_effector_status_master_temp = variables->end_effector_status;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800305a:	4b2f      	ldr	r3, [pc, #188]	; (8003118 <modbus_data_sync+0x224>)
 800305c:	801a      	strh	r2, [r3, #0]
		end_effector_status_slave_temp = variables->end_effector_status;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003064:	4b2d      	ldr	r3, [pc, #180]	; (800311c <modbus_data_sync+0x228>)
 8003066:	801a      	strh	r2, [r3, #0]
 8003068:	e017      	b.n	800309a <modbus_data_sync+0x1a6>
	} else if (end_effector_status_slave_temp != variables->end_effector_status) {
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003070:	4b2a      	ldr	r3, [pc, #168]	; (800311c <modbus_data_sync+0x228>)
 8003072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003076:	429a      	cmp	r2, r3
 8003078:	d00f      	beq.n	800309a <modbus_data_sync+0x1a6>
		// there is an update locally
		MBregisterFrame[0x02].U16 = variables->end_effector_status;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003080:	b29a      	uxth	r2, r3
 8003082:	4b22      	ldr	r3, [pc, #136]	; (800310c <modbus_data_sync+0x218>)
 8003084:	809a      	strh	r2, [r3, #4]
		end_effector_status_slave_temp = variables->end_effector_status;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800308c:	4b23      	ldr	r3, [pc, #140]	; (800311c <modbus_data_sync+0x228>)
 800308e:	801a      	strh	r2, [r3, #0]
		end_effector_status_master_temp = variables->end_effector_status;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <modbus_data_sync+0x224>)
 8003098:	801a      	strh	r2, [r3, #0]
	}
	static int16_t x_moving_status_slave_temp;
	static int16_t x_moving_status_master_temp;
	if (x_moving_status_master_temp != MBregisterFrame[0x40].U16) {
 800309a:	4b21      	ldr	r3, [pc, #132]	; (8003120 <modbus_data_sync+0x22c>)
 800309c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b1a      	ldr	r3, [pc, #104]	; (800310c <modbus_data_sync+0x218>)
 80030a4:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d010      	beq.n	80030ce <modbus_data_sync+0x1da>
		// there is an update from master
		variables->x_moving_status = MBregisterFrame[0x40].U16;
 80030ac:	4b17      	ldr	r3, [pc, #92]	; (800310c <modbus_data_sync+0x218>)
 80030ae:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80030b2:	b21a      	sxth	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	851a      	strh	r2, [r3, #40]	; 0x28
		x_moving_status_master_temp = variables->x_moving_status;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80030be:	4b18      	ldr	r3, [pc, #96]	; (8003120 <modbus_data_sync+0x22c>)
 80030c0:	801a      	strh	r2, [r3, #0]
		x_moving_status_slave_temp = variables->x_moving_status;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80030c8:	4b16      	ldr	r3, [pc, #88]	; (8003124 <modbus_data_sync+0x230>)
 80030ca:	801a      	strh	r2, [r3, #0]
		// there is an update locally
		MBregisterFrame[0x40].U16 = variables->x_moving_status;
		x_moving_status_slave_temp = variables->x_moving_status;
		x_moving_status_master_temp = variables->x_moving_status;
	}
}
 80030cc:	e018      	b.n	8003100 <modbus_data_sync+0x20c>
	} else if (x_moving_status_slave_temp != variables->x_moving_status) {
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80030d4:	4b13      	ldr	r3, [pc, #76]	; (8003124 <modbus_data_sync+0x230>)
 80030d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d010      	beq.n	8003100 <modbus_data_sync+0x20c>
		MBregisterFrame[0x40].U16 = variables->x_moving_status;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	4b09      	ldr	r3, [pc, #36]	; (800310c <modbus_data_sync+0x218>)
 80030e8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		x_moving_status_slave_temp = variables->x_moving_status;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80030f2:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <modbus_data_sync+0x230>)
 80030f4:	801a      	strh	r2, [r3, #0]
		x_moving_status_master_temp = variables->x_moving_status;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <modbus_data_sync+0x22c>)
 80030fe:	801a      	strh	r2, [r3, #0]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	20000a04 	.word	0x20000a04
 8003110:	20001962 	.word	0x20001962
 8003114:	20001964 	.word	0x20001964
 8003118:	20001966 	.word	0x20001966
 800311c:	20001968 	.word	0x20001968
 8003120:	2000196a 	.word	0x2000196a
 8003124:	2000196c 	.word	0x2000196c

08003128 <Set_LED>:
void Set_LED(int LEDnum, int Red, int Green, int Blue);
void Set_Brightness(int brightness);
void WS2812_Send(void);
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim);

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	b2d9      	uxtb	r1, r3
 800313a:	4a11      	ldr	r2, [pc, #68]	; (8003180 <Set_LED+0x58>)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	b2d9      	uxtb	r1, r3
 8003146:	4a0e      	ldr	r2, [pc, #56]	; (8003180 <Set_LED+0x58>)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	460a      	mov	r2, r1
 8003150:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	b2d9      	uxtb	r1, r3
 8003156:	4a0a      	ldr	r2, [pc, #40]	; (8003180 <Set_LED+0x58>)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	460a      	mov	r2, r1
 8003160:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	b2d9      	uxtb	r1, r3
 8003166:	4a06      	ldr	r2, [pc, #24]	; (8003180 <Set_LED+0x58>)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	460a      	mov	r2, r1
 8003170:	70da      	strb	r2, [r3, #3]
}
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000a90 	.word	0x20000a90
 8003184:	00000000 	.word	0x00000000

08003188 <Set_Brightness>:

void Set_Brightness(int brightness)  // 0-45
{
 8003188:	b5b0      	push	{r4, r5, r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
	if (brightness > 45)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b2d      	cmp	r3, #45	; 0x2d
 8003194:	dd01      	ble.n	800319a <Set_Brightness+0x12>
		brightness = 45;
 8003196:	232d      	movs	r3, #45	; 0x2d
 8003198:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e060      	b.n	8003262 <Set_Brightness+0xda>
		LED_Mod[i][0] = LED_Data[i][0];
 80031a0:	4a37      	ldr	r2, [pc, #220]	; (8003280 <Set_Brightness+0xf8>)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80031a8:	4a36      	ldr	r2, [pc, #216]	; (8003284 <Set_Brightness+0xfc>)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 80031b0:	2301      	movs	r3, #1
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	e04f      	b.n	8003256 <Set_Brightness+0xce>
			float angle = 90 - brightness;  // in degrees
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80031bc:	ee07 3a90 	vmov	s15, r3
 80031c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031c4:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle * 3.14159265 / 180;  // in rad
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f7fd f9c5 	bl	8000558 <__aeabi_f2d>
 80031ce:	a32a      	add	r3, pc, #168	; (adr r3, 8003278 <Set_Brightness+0xf0>)
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	f7fd fa18 	bl	8000608 <__aeabi_dmul>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4610      	mov	r0, r2
 80031de:	4619      	mov	r1, r3
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	4b28      	ldr	r3, [pc, #160]	; (8003288 <Set_Brightness+0x100>)
 80031e6:	f7fd fb39 	bl	800085c <__aeabi_ddiv>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	f7fd fd01 	bl	8000bf8 <__aeabi_d2f>
 80031f6:	4603      	mov	r3, r0
 80031f8:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / tan(angle);
 80031fa:	4a21      	ldr	r2, [pc, #132]	; (8003280 <Set_Brightness+0xf8>)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	441a      	add	r2, r3
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4413      	add	r3, r2
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7fd f993 	bl	8000534 <__aeabi_i2d>
 800320e:	4604      	mov	r4, r0
 8003210:	460d      	mov	r5, r1
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f7fd f9a0 	bl	8000558 <__aeabi_f2d>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	ec43 2b10 	vmov	d0, r2, r3
 8003220:	f00d fcfa 	bl	8010c18 <tan>
 8003224:	ec53 2b10 	vmov	r2, r3, d0
 8003228:	4620      	mov	r0, r4
 800322a:	4629      	mov	r1, r5
 800322c:	f7fd fb16 	bl	800085c <__aeabi_ddiv>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	f7fd fcbe 	bl	8000bb8 <__aeabi_d2uiz>
 800323c:	4603      	mov	r3, r0
 800323e:	b2d9      	uxtb	r1, r3
 8003240:	4a10      	ldr	r2, [pc, #64]	; (8003284 <Set_Brightness+0xfc>)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	441a      	add	r2, r3
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4413      	add	r3, r2
 800324c:	460a      	mov	r2, r1
 800324e:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	3301      	adds	r3, #1
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2b03      	cmp	r3, #3
 800325a:	ddac      	ble.n	80031b6 <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	3301      	adds	r3, #1
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2b3b      	cmp	r3, #59	; 0x3b
 8003266:	dd9b      	ble.n	80031a0 <Set_Brightness+0x18>
		}
	}
#endif
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bdb0      	pop	{r4, r5, r7, pc}
 8003272:	bf00      	nop
 8003274:	f3af 8000 	nop.w
 8003278:	53c8d4f1 	.word	0x53c8d4f1
 800327c:	400921fb 	.word	0x400921fb
 8003280:	20000a90 	.word	0x20000a90
 8003284:	20000b80 	.word	0x20000b80
 8003288:	40668000 	.word	0x40668000

0800328c <WS2812_Send>:

void WS2812_Send(void) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
	if (!datasentflag) {
 8003292:	4b32      	ldr	r3, [pc, #200]	; (800335c <WS2812_Send+0xd0>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d05a      	beq.n	8003352 <WS2812_Send+0xc6>
		return;
	}
	uint32_t indx = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	e036      	b.n	8003314 <WS2812_Send+0x88>
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 80032a6:	4a2e      	ldr	r2, [pc, #184]	; (8003360 <WS2812_Send+0xd4>)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	785b      	ldrb	r3, [r3, #1]
 80032b0:	041a      	lsls	r2, r3, #16
 80032b2:	492b      	ldr	r1, [pc, #172]	; (8003360 <WS2812_Send+0xd4>)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	789b      	ldrb	r3, [r3, #2]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	431a      	orrs	r2, r3
 80032c0:	4927      	ldr	r1, [pc, #156]	; (8003360 <WS2812_Send+0xd4>)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	78db      	ldrb	r3, [r3, #3]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1] << 16) | (LED_Data[i][2] << 8) | (LED_Data[i][3]));
#endif

		for (int i = 23; i >= 0; i--) {
 80032ce:	2317      	movs	r3, #23
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	e019      	b.n	8003308 <WS2812_Send+0x7c>
			if (color & (1 << i)) {
 80032d4:	2201      	movs	r2, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <WS2812_Send+0x66>
				pwmData[indx] = 83;  // 2/3 of 125
 80032e6:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <WS2812_Send+0xd8>)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2153      	movs	r1, #83	; 0x53
 80032ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80032f0:	e004      	b.n	80032fc <WS2812_Send+0x70>
			} else {
				pwmData[indx] = 42;  // 1/3 of 125
 80032f2:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <WS2812_Send+0xd8>)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	212a      	movs	r1, #42	; 0x2a
 80032f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			indx++;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	3301      	adds	r3, #1
 8003300:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	3b01      	subs	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	dae2      	bge.n	80032d4 <WS2812_Send+0x48>
	for (int i = 0; i < MAX_LED; i++) {
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	3301      	adds	r3, #1
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b3b      	cmp	r3, #59	; 0x3b
 8003318:	ddc5      	ble.n	80032a6 <WS2812_Send+0x1a>
		}
	}

	for (int i = 0; i < 50; i++) {
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	e00a      	b.n	8003336 <WS2812_Send+0xaa>
		pwmData[indx] = 0;
 8003320:	4a10      	ldr	r2, [pc, #64]	; (8003364 <WS2812_Send+0xd8>)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2100      	movs	r1, #0
 8003326:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3301      	adds	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) {
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	3301      	adds	r3, #1
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b31      	cmp	r3, #49	; 0x31
 800333a:	ddf1      	ble.n	8003320 <WS2812_Send+0x94>
	}

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	b29b      	uxth	r3, r3
 8003340:	4a08      	ldr	r2, [pc, #32]	; (8003364 <WS2812_Send+0xd8>)
 8003342:	2100      	movs	r1, #0
 8003344:	4808      	ldr	r0, [pc, #32]	; (8003368 <WS2812_Send+0xdc>)
 8003346:	f005 fcd7 	bl	8008cf8 <HAL_TIM_PWM_Start_DMA>
	datasentflag = 0;
 800334a:	4b04      	ldr	r3, [pc, #16]	; (800335c <WS2812_Send+0xd0>)
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e000      	b.n	8003354 <WS2812_Send+0xc8>
		return;
 8003352:	bf00      	nop
}
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000220 	.word	0x20000220
 8003360:	20000b80 	.word	0x20000b80
 8003364:	20000c70 	.word	0x20000c70
 8003368:	20001af4 	.word	0x20001af4

0800336c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a07      	ldr	r2, [pc, #28]	; (8003394 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d106      	bne.n	800338a <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 800337c:	2100      	movs	r1, #0
 800337e:	4805      	ldr	r0, [pc, #20]	; (8003394 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8003380:	f005 fe6a 	bl	8009058 <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8003386:	2201      	movs	r2, #1
 8003388:	701a      	strb	r2, [r3, #0]
	}
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20001af4 	.word	0x20001af4
 8003398:	20000220 	.word	0x20000220
 800339c:	00000000 	.word	0x00000000

080033a0 <main_logic>:
void preset_data_xy();
void emergency_handler();

// USER CODE ======================================================================================

void main_logic(MB *variables) {
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	ENE_I2C_UPDATE(&variables->end_effector_status, &hi2c1, 0);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3326      	adds	r3, #38	; 0x26
 80033ac:	2200      	movs	r2, #0
 80033ae:	49aa      	ldr	r1, [pc, #680]	; (8003658 <main_logic+0x2b8>)
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fd ff69 	bl	8001288 <ENE_I2C_UPDATE>
	RGB_logic(state, tray_point_n, emergency);
 80033b6:	4ba9      	ldr	r3, [pc, #676]	; (800365c <main_logic+0x2bc>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	4ba8      	ldr	r3, [pc, #672]	; (8003660 <main_logic+0x2c0>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	4619      	mov	r1, r3
 80033c2:	4ba8      	ldr	r3, [pc, #672]	; (8003664 <main_logic+0x2c4>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f000 ff48 	bl	800425c <RGB_logic>
	data_report(variables);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fb97 	bl	8003b00 <data_report>
	Joystick_Transmit(variables->x_target_position, setpoint_y * 0.3, jog_enable + jog_point_n);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f9b3 401e 	ldrsh.w	r4, [r3, #30]
 80033d8:	4ba3      	ldr	r3, [pc, #652]	; (8003668 <main_logic+0x2c8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd f8a9 	bl	8000534 <__aeabi_i2d>
 80033e2:	a399      	add	r3, pc, #612	; (adr r3, 8003648 <main_logic+0x2a8>)
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	f7fd f90e 	bl	8000608 <__aeabi_dmul>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	f7fd fbb8 	bl	8000b68 <__aeabi_d2iz>
 80033f8:	4603      	mov	r3, r0
 80033fa:	b219      	sxth	r1, r3
 80033fc:	4b9b      	ldr	r3, [pc, #620]	; (800366c <main_logic+0x2cc>)
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	4b9b      	ldr	r3, [pc, #620]	; (8003670 <main_logic+0x2d0>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	4413      	add	r3, r2
 8003406:	b2db      	uxtb	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	4620      	mov	r0, r4
 800340c:	f7fe f8b4 	bl	8001578 <Joystick_Transmit>

	emergency_handler();
 8003410:	f000 fec8 	bl	80041a4 <emergency_handler>
	if (emergency) {
 8003414:	4b93      	ldr	r3, [pc, #588]	; (8003664 <main_logic+0x2c4>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f040 8206 	bne.w	800382a <main_logic+0x48a>
		return;
	}

	x_spam_position(variables);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fbce 	bl	8003bc0 <x_spam_position>

	static uint32_t wait_timer;
	switch (state) {
 8003424:	4b8d      	ldr	r3, [pc, #564]	; (800365c <main_logic+0x2bc>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b08      	cmp	r3, #8
 800342a:	f200 8209 	bhi.w	8003840 <main_logic+0x4a0>
 800342e:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <main_logic+0x94>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	08003459 	.word	0x08003459
 8003438:	08003477 	.word	0x08003477
 800343c:	08003563 	.word	0x08003563
 8003440:	08003563 	.word	0x08003563
 8003444:	08003575 	.word	0x08003575
 8003448:	080035ad 	.word	0x080035ad
 800344c:	080037bd 	.word	0x080037bd
 8003450:	08003813 	.word	0x08003813
 8003454:	0800381f 	.word	0x0800381f
	case MSwait:
		if (HAL_GetTick() - wait_timer > 1500) {
 8003458:	f002 ff46 	bl	80062e8 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	4b85      	ldr	r3, [pc, #532]	; (8003674 <main_logic+0x2d4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003468:	4293      	cmp	r3, r2
 800346a:	f240 81e0 	bls.w	800382e <main_logic+0x48e>
			state = MSidle;
 800346e:	4b7b      	ldr	r3, [pc, #492]	; (800365c <main_logic+0x2bc>)
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003474:	e1db      	b.n	800382e <main_logic+0x48e>
	case MSidle:
		wait_timer = HAL_GetTick();
 8003476:	f002 ff37 	bl	80062e8 <HAL_GetTick>
 800347a:	4603      	mov	r3, r0
 800347c:	4a7d      	ldr	r2, [pc, #500]	; (8003674 <main_logic+0x2d4>)
 800347e:	6013      	str	r3, [r2, #0]
		variables->y_moving_status = 0;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	815a      	strh	r2, [r3, #10]
		jog_enable = 0;
 8003486:	4b79      	ldr	r3, [pc, #484]	; (800366c <main_logic+0x2cc>)
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]

		if (variables->base_system_status & 0b1) {
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003492:	b29b      	uxth	r3, r3
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00b      	beq.n	80034b4 <main_logic+0x114>
			// pick mode
			variables->base_system_status = 0;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	801a      	strh	r2, [r3, #0]
			state = MSpick;
 80034a2:	4b6e      	ldr	r3, [pc, #440]	; (800365c <main_logic+0x2bc>)
 80034a4:	2202      	movs	r2, #2
 80034a6:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 1;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	815a      	strh	r2, [r3, #10]
			jog_enable = 1;
 80034ae:	4b6f      	ldr	r3, [pc, #444]	; (800366c <main_logic+0x2cc>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]
		}

		if (variables->base_system_status & 0b10) {
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00b      	beq.n	80034dc <main_logic+0x13c>
			// place mode
			variables->base_system_status = 0;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	801a      	strh	r2, [r3, #0]
			state = MSplace;
 80034ca:	4b64      	ldr	r3, [pc, #400]	; (800365c <main_logic+0x2bc>)
 80034cc:	2203      	movs	r2, #3
 80034ce:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	815a      	strh	r2, [r3, #10]
			jog_enable = 1;
 80034d6:	4b65      	ldr	r3, [pc, #404]	; (800366c <main_logic+0x2cc>)
 80034d8:	2201      	movs	r2, #1
 80034da:	701a      	strb	r2, [r3, #0]
		}

		if (variables->base_system_status & 0b100) {
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00e      	beq.n	800350a <main_logic+0x16a>
			// home mode
			variables->base_system_status = 0;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	801a      	strh	r2, [r3, #0]
			state = MShome;
 80034f2:	4b5a      	ldr	r3, [pc, #360]	; (800365c <main_logic+0x2bc>)
 80034f4:	2204      	movs	r2, #4
 80034f6:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 4;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2204      	movs	r2, #4
 80034fc:	815a      	strh	r2, [r3, #10]
			variables->x_target_position = 0;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	83da      	strh	r2, [r3, #30]
			variables->x_moving_status = 2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	851a      	strh	r2, [r3, #40]	; 0x28
			//variables->x_moving_status = 1;
		}

		if (variables->base_system_status & 0b1000) {
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003510:	b29b      	uxth	r3, r3
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d010      	beq.n	800353c <main_logic+0x19c>
			// start tray mode
			variables->base_system_status = 0;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	801a      	strh	r2, [r3, #0]
			state = MStray;
 8003520:	4b4e      	ldr	r3, [pc, #312]	; (800365c <main_logic+0x2bc>)
 8003522:	2205      	movs	r2, #5
 8003524:	701a      	strb	r2, [r3, #0]
			tray_wait_mode = 0;
 8003526:	4b54      	ldr	r3, [pc, #336]	; (8003678 <main_logic+0x2d8>)
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
			tray_point_n = 0;
 800352c:	4b4c      	ldr	r3, [pc, #304]	; (8003660 <main_logic+0x2c0>)
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]
			tray_delay = HAL_GetTick();
 8003532:	f002 fed9 	bl	80062e8 <HAL_GetTick>
 8003536:	4603      	mov	r3, r0
 8003538:	4a50      	ldr	r2, [pc, #320]	; (800367c <main_logic+0x2dc>)
 800353a:	6013      	str	r3, [r2, #0]
		}

		if (variables->base_system_status & 0b10000) {
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003542:	b29b      	uxth	r3, r3
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 8172 	beq.w	8003832 <main_logic+0x492>
			// point mode
			variables->base_system_status = 0;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	801a      	strh	r2, [r3, #0]
			state = MSpoint;
 8003554:	4b41      	ldr	r3, [pc, #260]	; (800365c <main_logic+0x2bc>)
 8003556:	2206      	movs	r2, #6
 8003558:	701a      	strb	r2, [r3, #0]
			variables->y_moving_status = 32;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	815a      	strh	r2, [r3, #10]
		}
		break;
 8003560:	e167      	b.n	8003832 <main_logic+0x492>
	case MSpick: // MSpick or MSplace
	case MSplace:
		variables->x_target_position = setpoint_x;
 8003562:	4b47      	ldr	r3, [pc, #284]	; (8003680 <main_logic+0x2e0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	b21a      	sxth	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	83da      	strh	r2, [r3, #30]
		x_spam_position(variables);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fb27 	bl	8003bc0 <x_spam_position>
		break;
 8003572:	e165      	b.n	8003840 <main_logic+0x4a0>
	case MShome:
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_RESET) {
 8003574:	2108      	movs	r1, #8
 8003576:	4843      	ldr	r0, [pc, #268]	; (8003684 <main_logic+0x2e4>)
 8003578:	f003 fffc 	bl	8007574 <HAL_GPIO_ReadPin>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d105      	bne.n	800358e <main_logic+0x1ee>
			home_status = 1;
 8003582:	4b41      	ldr	r3, [pc, #260]	; (8003688 <main_logic+0x2e8>)
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]
			home_handler();
 8003588:	f000 fa20 	bl	80039cc <home_handler>
		} else if (!home_status) {
			home_status = 1;
			PID_enable = 0;
			voltage = -8000;
		}
		break;
 800358c:	e153      	b.n	8003836 <main_logic+0x496>
		} else if (!home_status) {
 800358e:	4b3e      	ldr	r3, [pc, #248]	; (8003688 <main_logic+0x2e8>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f040 814f 	bne.w	8003836 <main_logic+0x496>
			home_status = 1;
 8003598:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <main_logic+0x2e8>)
 800359a:	2201      	movs	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]
			PID_enable = 0;
 800359e:	4b3b      	ldr	r3, [pc, #236]	; (800368c <main_logic+0x2ec>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
			voltage = -8000;
 80035a4:	4b3a      	ldr	r3, [pc, #232]	; (8003690 <main_logic+0x2f0>)
 80035a6:	4a3b      	ldr	r2, [pc, #236]	; (8003694 <main_logic+0x2f4>)
 80035a8:	601a      	str	r2, [r3, #0]
		break;
 80035aa:	e144      	b.n	8003836 <main_logic+0x496>
	case MStray:
		variables->x_target_position = setpoint_x;
 80035ac:	4b34      	ldr	r3, [pc, #208]	; (8003680 <main_logic+0x2e0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	b21a      	sxth	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	83da      	strh	r2, [r3, #30]
		x_spam_position(variables);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fb02 	bl	8003bc0 <x_spam_position>
		switch (tray_wait_mode) {
 80035bc:	4b2e      	ldr	r3, [pc, #184]	; (8003678 <main_logic+0x2d8>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	f200 80e7 	bhi.w	8003794 <main_logic+0x3f4>
 80035c6:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <main_logic+0x22c>)
 80035c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035cc:	080035e1 	.word	0x080035e1
 80035d0:	0800369d 	.word	0x0800369d
 80035d4:	080036c7 	.word	0x080036c7
 80035d8:	0800373b 	.word	0x0800373b
 80035dc:	08003765 	.word	0x08003765
		case 0:
			// move to pick
			variables->y_moving_status = 8;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2208      	movs	r2, #8
 80035e4:	815a      	strh	r2, [r3, #10]
			setpoint_x = pick[tray_point_n].x * 10;
 80035e6:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <main_logic+0x2c0>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	4a2b      	ldr	r2, [pc, #172]	; (8003698 <main_logic+0x2f8>)
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4413      	add	r3, r2
 80035f0:	edd3 7a00 	vldr	s15, [r3]
 80035f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80035f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003600:	ee17 2a90 	vmov	r2, s15
 8003604:	4b1e      	ldr	r3, [pc, #120]	; (8003680 <main_logic+0x2e0>)
 8003606:	601a      	str	r2, [r3, #0]
			setpoint_y = pick[tray_point_n].y / 0.03;
 8003608:	4b15      	ldr	r3, [pc, #84]	; (8003660 <main_logic+0x2c0>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	4a22      	ldr	r2, [pc, #136]	; (8003698 <main_logic+0x2f8>)
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	3304      	adds	r3, #4
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fc ff9e 	bl	8000558 <__aeabi_f2d>
 800361c:	a30c      	add	r3, pc, #48	; (adr r3, 8003650 <main_logic+0x2b0>)
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	f7fd f91b 	bl	800085c <__aeabi_ddiv>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	f7fd fa9b 	bl	8000b68 <__aeabi_d2iz>
 8003632:	4603      	mov	r3, r0
 8003634:	4a0c      	ldr	r2, [pc, #48]	; (8003668 <main_logic+0x2c8>)
 8003636:	6013      	str	r3, [r2, #0]
			variables->x_moving_status = 2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	851a      	strh	r2, [r3, #40]	; 0x28
			tray_wait_mode = 1;
 800363e:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <main_logic+0x2d8>)
 8003640:	2201      	movs	r2, #1
 8003642:	701a      	strb	r2, [r3, #0]
			break;
 8003644:	e0a6      	b.n	8003794 <main_logic+0x3f4>
 8003646:	bf00      	nop
 8003648:	33333333 	.word	0x33333333
 800364c:	3fd33333 	.word	0x3fd33333
 8003650:	eb851eb8 	.word	0xeb851eb8
 8003654:	3f9eb851 	.word	0x3f9eb851
 8003658:	200004d8 	.word	0x200004d8
 800365c:	20000221 	.word	0x20000221
 8003660:	20001818 	.word	0x20001818
 8003664:	20001814 	.word	0x20001814
 8003668:	20001910 	.word	0x20001910
 800366c:	20001816 	.word	0x20001816
 8003670:	20001817 	.word	0x20001817
 8003674:	20001970 	.word	0x20001970
 8003678:	20001819 	.word	0x20001819
 800367c:	2000181c 	.word	0x2000181c
 8003680:	20001914 	.word	0x20001914
 8003684:	40020800 	.word	0x40020800
 8003688:	20001815 	.word	0x20001815
 800368c:	20000222 	.word	0x20000222
 8003690:	20001820 	.word	0x20001820
 8003694:	c5fa0000 	.word	0xc5fa0000
 8003698:	20001850 	.word	0x20001850
		case 1:
			// wait for move to finish then pick
			if (move_finished(10)) {
 800369c:	200a      	movs	r0, #10
 800369e:	f000 fc03 	bl	8003ea8 <move_finished>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d06e      	beq.n	8003786 <main_logic+0x3e6>
				end_effector_gripper(variables, 0);
 80036a8:	2100      	movs	r1, #0
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f964 	bl	8003978 <end_effector_gripper>
				tray_wait_mode = 2;
 80036b0:	4b69      	ldr	r3, [pc, #420]	; (8003858 <main_logic+0x4b8>)
 80036b2:	2202      	movs	r2, #2
 80036b4:	701a      	strb	r2, [r3, #0]
				tray_delay = HAL_GetTick() + 2200;
 80036b6:	f002 fe17 	bl	80062e8 <HAL_GetTick>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80036c0:	4a66      	ldr	r2, [pc, #408]	; (800385c <main_logic+0x4bc>)
 80036c2:	6013      	str	r3, [r2, #0]
			}
			break;
 80036c4:	e05f      	b.n	8003786 <main_logic+0x3e6>
		case 2:
			// wait for pick to finish then move to place
			if (HAL_GetTick() >= tray_delay) {
 80036c6:	f002 fe0f 	bl	80062e8 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4b63      	ldr	r3, [pc, #396]	; (800385c <main_logic+0x4bc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d35a      	bcc.n	800378a <main_logic+0x3ea>
				variables->y_moving_status = 16;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2210      	movs	r2, #16
 80036d8:	815a      	strh	r2, [r3, #10]
				setpoint_x = place[tray_point_n].x * 10;
 80036da:	4b61      	ldr	r3, [pc, #388]	; (8003860 <main_logic+0x4c0>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	4a61      	ldr	r2, [pc, #388]	; (8003864 <main_logic+0x4c4>)
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	edd3 7a00 	vldr	s15, [r3]
 80036e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80036ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036f4:	ee17 2a90 	vmov	r2, s15
 80036f8:	4b5b      	ldr	r3, [pc, #364]	; (8003868 <main_logic+0x4c8>)
 80036fa:	601a      	str	r2, [r3, #0]
				setpoint_y = place[tray_point_n].y / 0.03;
 80036fc:	4b58      	ldr	r3, [pc, #352]	; (8003860 <main_logic+0x4c0>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	4a58      	ldr	r2, [pc, #352]	; (8003864 <main_logic+0x4c4>)
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	3304      	adds	r3, #4
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fc ff24 	bl	8000558 <__aeabi_f2d>
 8003710:	a34d      	add	r3, pc, #308	; (adr r3, 8003848 <main_logic+0x4a8>)
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003716:	f7fd f8a1 	bl	800085c <__aeabi_ddiv>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4610      	mov	r0, r2
 8003720:	4619      	mov	r1, r3
 8003722:	f7fd fa21 	bl	8000b68 <__aeabi_d2iz>
 8003726:	4603      	mov	r3, r0
 8003728:	4a50      	ldr	r2, [pc, #320]	; (800386c <main_logic+0x4cc>)
 800372a:	6013      	str	r3, [r2, #0]
				variables->x_moving_status = 2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	851a      	strh	r2, [r3, #40]	; 0x28
				tray_wait_mode = 3;
 8003732:	4b49      	ldr	r3, [pc, #292]	; (8003858 <main_logic+0x4b8>)
 8003734:	2203      	movs	r2, #3
 8003736:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003738:	e027      	b.n	800378a <main_logic+0x3ea>
		case 3:
			// wait for move to place then place
			if (move_finished(10)) {
 800373a:	200a      	movs	r0, #10
 800373c:	f000 fbb4 	bl	8003ea8 <move_finished>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d023      	beq.n	800378e <main_logic+0x3ee>
				end_effector_gripper(variables, 1);
 8003746:	2101      	movs	r1, #1
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f915 	bl	8003978 <end_effector_gripper>
				tray_wait_mode = 4;
 800374e:	4b42      	ldr	r3, [pc, #264]	; (8003858 <main_logic+0x4b8>)
 8003750:	2204      	movs	r2, #4
 8003752:	701a      	strb	r2, [r3, #0]
				tray_delay = HAL_GetTick() + 2200;
 8003754:	f002 fdc8 	bl	80062e8 <HAL_GetTick>
 8003758:	4603      	mov	r3, r0
 800375a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800375e:	4a3f      	ldr	r2, [pc, #252]	; (800385c <main_logic+0x4bc>)
 8003760:	6013      	str	r3, [r2, #0]
			}
			break;
 8003762:	e014      	b.n	800378e <main_logic+0x3ee>
		case 4:
			// wait for place to finish then reset to state 0
			if (HAL_GetTick() >= tray_delay) {
 8003764:	f002 fdc0 	bl	80062e8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	4b3c      	ldr	r3, [pc, #240]	; (800385c <main_logic+0x4bc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d30f      	bcc.n	8003792 <main_logic+0x3f2>
				tray_wait_mode = 0;
 8003772:	4b39      	ldr	r3, [pc, #228]	; (8003858 <main_logic+0x4b8>)
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
				tray_point_n++;
 8003778:	4b39      	ldr	r3, [pc, #228]	; (8003860 <main_logic+0x4c0>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	3301      	adds	r3, #1
 800377e:	b2da      	uxtb	r2, r3
 8003780:	4b37      	ldr	r3, [pc, #220]	; (8003860 <main_logic+0x4c0>)
 8003782:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003784:	e005      	b.n	8003792 <main_logic+0x3f2>
			break;
 8003786:	bf00      	nop
 8003788:	e004      	b.n	8003794 <main_logic+0x3f4>
			break;
 800378a:	bf00      	nop
 800378c:	e002      	b.n	8003794 <main_logic+0x3f4>
			break;
 800378e:	bf00      	nop
 8003790:	e000      	b.n	8003794 <main_logic+0x3f4>
			break;
 8003792:	bf00      	nop
		}
		if (tray_point_n >= 9) {
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <main_logic+0x4c0>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d94e      	bls.n	800383a <main_logic+0x49a>
			setpoint_y = 0;
 800379c:	4b33      	ldr	r3, [pc, #204]	; (800386c <main_logic+0x4cc>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
			tray_point_n = 0;
 80037a2:	4b2f      	ldr	r3, [pc, #188]	; (8003860 <main_logic+0x4c0>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	701a      	strb	r2, [r3, #0]
			variables->x_target_position = 0;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	83da      	strh	r2, [r3, #30]
			variables->x_moving_status = 2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
			state = MSidle;
 80037b4:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <main_logic+0x4d0>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80037ba:	e03e      	b.n	800383a <main_logic+0x49a>
	case MSpoint:
		setpoint_y = variables->goal_point_y / 0.3;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fc feb6 	bl	8000534 <__aeabi_i2d>
 80037c8:	a321      	add	r3, pc, #132	; (adr r3, 8003850 <main_logic+0x4b0>)
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	f7fd f845 	bl	800085c <__aeabi_ddiv>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	f7fd f9c5 	bl	8000b68 <__aeabi_d2iz>
 80037de:	4603      	mov	r3, r0
 80037e0:	4a22      	ldr	r2, [pc, #136]	; (800386c <main_logic+0x4cc>)
 80037e2:	6013      	str	r3, [r2, #0]
		variables->x_target_position = variables->goal_point_x;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	83da      	strh	r2, [r3, #30]
		variables->x_moving_status = 2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	851a      	strh	r2, [r3, #40]	; 0x28

		if (abs(setpoint_y - getLocalPosition()) < 10) {
 80037f4:	4b1d      	ldr	r3, [pc, #116]	; (800386c <main_logic+0x4cc>)
 80037f6:	681c      	ldr	r4, [r3, #0]
 80037f8:	f7fe fe8c 	bl	8002514 <getLocalPosition>
 80037fc:	4603      	mov	r3, r0
 80037fe:	1ae3      	subs	r3, r4, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	bfb8      	it	lt
 8003804:	425b      	neglt	r3, r3
 8003806:	2b09      	cmp	r3, #9
 8003808:	dc19      	bgt.n	800383e <main_logic+0x49e>
			state = MSwait;
 800380a:	4b19      	ldr	r3, [pc, #100]	; (8003870 <main_logic+0x4d0>)
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003810:	e015      	b.n	800383e <main_logic+0x49e>
	case MStestY:
		preset_data_y_only();
 8003812:	f000 fb75 	bl	8003f00 <preset_data_y_only>
		state = MSidle;
 8003816:	4b16      	ldr	r3, [pc, #88]	; (8003870 <main_logic+0x4d0>)
 8003818:	2201      	movs	r2, #1
 800381a:	701a      	strb	r2, [r3, #0]
		break;
 800381c:	e010      	b.n	8003840 <main_logic+0x4a0>
	case MStestXY:
		preset_data_xy();
 800381e:	f000 fbc7 	bl	8003fb0 <preset_data_xy>
		state = MSidle;
 8003822:	4b13      	ldr	r3, [pc, #76]	; (8003870 <main_logic+0x4d0>)
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]
		break;
 8003828:	e00a      	b.n	8003840 <main_logic+0x4a0>
		return;
 800382a:	bf00      	nop
 800382c:	e008      	b.n	8003840 <main_logic+0x4a0>
		break;
 800382e:	bf00      	nop
 8003830:	e006      	b.n	8003840 <main_logic+0x4a0>
		break;
 8003832:	bf00      	nop
 8003834:	e004      	b.n	8003840 <main_logic+0x4a0>
		break;
 8003836:	bf00      	nop
 8003838:	e002      	b.n	8003840 <main_logic+0x4a0>
		break;
 800383a:	bf00      	nop
 800383c:	e000      	b.n	8003840 <main_logic+0x4a0>
		break;
 800383e:	bf00      	nop
	}
}
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bd90      	pop	{r4, r7, pc}
 8003846:	bf00      	nop
 8003848:	eb851eb8 	.word	0xeb851eb8
 800384c:	3f9eb851 	.word	0x3f9eb851
 8003850:	33333333 	.word	0x33333333
 8003854:	3fd33333 	.word	0x3fd33333
 8003858:	20001819 	.word	0x20001819
 800385c:	2000181c 	.word	0x2000181c
 8003860:	20001818 	.word	0x20001818
 8003864:	20001898 	.word	0x20001898
 8003868:	20001914 	.word	0x20001914
 800386c:	20001910 	.word	0x20001910
 8003870:	20000221 	.word	0x20000221

08003874 <interrupt_logic>:

void interrupt_logic() {
 8003874:	b580      	push	{r7, lr}
 8003876:	ed2d 8b02 	vpush	{d8}
 800387a:	af00      	add	r7, sp, #0
	// Call trajectory function
	Trajectory(setpoint_y, 34000, 60000, (int*) &setpointtraj_y, (float*) &traj_velocity, (float*) &traj_acceleration, 0);
 800387c:	4b30      	ldr	r3, [pc, #192]	; (8003940 <interrupt_logic+0xcc>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	ee07 3a90 	vmov	s15, r3
 8003884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003888:	2300      	movs	r3, #0
 800388a:	4a2e      	ldr	r2, [pc, #184]	; (8003944 <interrupt_logic+0xd0>)
 800388c:	492e      	ldr	r1, [pc, #184]	; (8003948 <interrupt_logic+0xd4>)
 800388e:	482f      	ldr	r0, [pc, #188]	; (800394c <interrupt_logic+0xd8>)
 8003890:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8003950 <interrupt_logic+0xdc>
 8003894:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8003954 <interrupt_logic+0xe0>
 8003898:	eeb0 0a67 	vmov.f32	s0, s15
 800389c:	f001 fff8 	bl	8005890 <Trajectory>

	lowpass_filter(getRawPosition(), &actual_velocity, &actual_acceleration);
 80038a0:	f7fe fe4a 	bl	8002538 <getRawPosition>
 80038a4:	4603      	mov	r3, r0
 80038a6:	4a2c      	ldr	r2, [pc, #176]	; (8003958 <interrupt_logic+0xe4>)
 80038a8:	492c      	ldr	r1, [pc, #176]	; (800395c <interrupt_logic+0xe8>)
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd ff72 	bl	8001794 <lowpass_filter>

	// Call PID function
	if (PID_enable) {
 80038b0:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <interrupt_logic+0xec>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d036      	beq.n	8003926 <interrupt_logic+0xb2>
		static int count = 0;
		count++;
 80038b8:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <interrupt_logic+0xf0>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3301      	adds	r3, #1
 80038be:	4a29      	ldr	r2, [pc, #164]	; (8003964 <interrupt_logic+0xf0>)
 80038c0:	6013      	str	r3, [r2, #0]
		if (count >= 5) {
 80038c2:	4b28      	ldr	r3, [pc, #160]	; (8003964 <interrupt_logic+0xf0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	dd2d      	ble.n	8003926 <interrupt_logic+0xb2>
			PositionControlPID(setpointtraj_y, setpoint_y, getLocalPosition(), KP, KI, KD, &voltage, 0);
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <interrupt_logic+0xd8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80038d6:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <interrupt_logic+0xcc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80038e2:	f7fe fe17 	bl	8002514 <getLocalPosition>
 80038e6:	ee07 0a90 	vmov	s15, r0
 80038ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ee:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <interrupt_logic+0xf4>)
 80038f0:	ed93 7a00 	vldr	s14, [r3]
 80038f4:	4b1d      	ldr	r3, [pc, #116]	; (800396c <interrupt_logic+0xf8>)
 80038f6:	edd3 6a00 	vldr	s13, [r3]
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <interrupt_logic+0xfc>)
 80038fc:	ed93 6a00 	vldr	s12, [r3]
 8003900:	2100      	movs	r1, #0
 8003902:	481c      	ldr	r0, [pc, #112]	; (8003974 <interrupt_logic+0x100>)
 8003904:	eef0 2a46 	vmov.f32	s5, s12
 8003908:	eeb0 2a66 	vmov.f32	s4, s13
 800390c:	eef0 1a47 	vmov.f32	s3, s14
 8003910:	eeb0 1a67 	vmov.f32	s2, s15
 8003914:	eef0 0a68 	vmov.f32	s1, s17
 8003918:	eeb0 0a48 	vmov.f32	s0, s16
 800391c:	f7fe fb02 	bl	8001f24 <PositionControlPID>
			count = 0;
 8003920:	4b10      	ldr	r3, [pc, #64]	; (8003964 <interrupt_logic+0xf0>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
		}
	}

	// Call motor function
	motor(voltage);
 8003926:	4b13      	ldr	r3, [pc, #76]	; (8003974 <interrupt_logic+0x100>)
 8003928:	edd3 7a00 	vldr	s15, [r3]
 800392c:	eeb0 0a67 	vmov.f32	s0, s15
 8003930:	f7fe fd90 	bl	8002454 <motor>
}
 8003934:	bf00      	nop
 8003936:	46bd      	mov	sp, r7
 8003938:	ecbd 8b02 	vpop	{d8}
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20001910 	.word	0x20001910
 8003944:	2000182c 	.word	0x2000182c
 8003948:	20001828 	.word	0x20001828
 800394c:	20001824 	.word	0x20001824
 8003950:	476a6000 	.word	0x476a6000
 8003954:	4704d000 	.word	0x4704d000
 8003958:	20001834 	.word	0x20001834
 800395c:	20001830 	.word	0x20001830
 8003960:	20000222 	.word	0x20000222
 8003964:	20001974 	.word	0x20001974
 8003968:	20000224 	.word	0x20000224
 800396c:	20000228 	.word	0x20000228
 8003970:	2000022c 	.word	0x2000022c
 8003974:	20001820 	.word	0x20001820

08003978 <end_effector_gripper>:

void end_effector_gripper(MB *variables, uint8_t mode) {
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
	if ((variables->end_effector_status & 0b0010) == 0) {
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800398a:	b29b      	uxth	r3, r3
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d014      	beq.n	80039be <end_effector_gripper+0x46>
		return;
	}

	if (!mode) {
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d108      	bne.n	80039ac <end_effector_gripper+0x34>
		// pick
		variables->end_effector_status |= 0b0100;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80039a0:	f043 0304 	orr.w	r3, r3, #4
 80039a4:	b21a      	sxth	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	84da      	strh	r2, [r3, #38]	; 0x26
 80039aa:	e009      	b.n	80039c0 <end_effector_gripper+0x48>
	} else {
		// place
		variables->end_effector_status |= 0b1000;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80039b2:	f043 0308 	orr.w	r3, r3, #8
 80039b6:	b21a      	sxth	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	84da      	strh	r2, [r3, #38]	; 0x26
 80039bc:	e000      	b.n	80039c0 <end_effector_gripper+0x48>
		return;
 80039be:	bf00      	nop
	}
}
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <home_handler>:
		// on
		variables->end_effector_status |= 0b0001;
	}
}

void home_handler() {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	ed2d 8b02 	vpush	{d8}
 80039d2:	af00      	add	r7, sp, #0
	if (!home_status) {
 80039d4:	4b38      	ldr	r3, [pc, #224]	; (8003ab8 <home_handler+0xec>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d066      	beq.n	8003aaa <home_handler+0xde>
		return;
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_SET) {
 80039dc:	2108      	movs	r1, #8
 80039de:	4837      	ldr	r0, [pc, #220]	; (8003abc <home_handler+0xf0>)
 80039e0:	f003 fdc8 	bl	8007574 <HAL_GPIO_ReadPin>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d061      	beq.n	8003aae <home_handler+0xe2>
		return;
	}
	motor(0);
 80039ea:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8003ac0 <home_handler+0xf4>
 80039ee:	f7fe fd31 	bl	8002454 <motor>
	voltage = 0;
 80039f2:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <home_handler+0xf8>)
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
	homeoffset = getRawPosition() + 11500;
 80039fa:	f7fe fd9d 	bl	8002538 <getRawPosition>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f503 5333 	add.w	r3, r3, #11456	; 0x2cc0
 8003a04:	332c      	adds	r3, #44	; 0x2c
 8003a06:	4a30      	ldr	r2, [pc, #192]	; (8003ac8 <home_handler+0xfc>)
 8003a08:	6013      	str	r3, [r2, #0]
	setpointtraj_y = -11500;
 8003a0a:	4b30      	ldr	r3, [pc, #192]	; (8003acc <home_handler+0x100>)
 8003a0c:	4a30      	ldr	r2, [pc, #192]	; (8003ad0 <home_handler+0x104>)
 8003a0e:	601a      	str	r2, [r3, #0]
	setpoint_y = -11500;
 8003a10:	4b30      	ldr	r3, [pc, #192]	; (8003ad4 <home_handler+0x108>)
 8003a12:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <home_handler+0x104>)
 8003a14:	601a      	str	r2, [r3, #0]
	Trajectory(setpoint_y, 34000, 80000, (int*) &setpointtraj_y, (float*) &traj_velocity, (float*) &traj_acceleration, 1);
 8003a16:	4b2f      	ldr	r3, [pc, #188]	; (8003ad4 <home_handler+0x108>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a22:	2301      	movs	r3, #1
 8003a24:	4a2c      	ldr	r2, [pc, #176]	; (8003ad8 <home_handler+0x10c>)
 8003a26:	492d      	ldr	r1, [pc, #180]	; (8003adc <home_handler+0x110>)
 8003a28:	4828      	ldr	r0, [pc, #160]	; (8003acc <home_handler+0x100>)
 8003a2a:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8003ae0 <home_handler+0x114>
 8003a2e:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8003ae4 <home_handler+0x118>
 8003a32:	eeb0 0a67 	vmov.f32	s0, s15
 8003a36:	f001 ff2b 	bl	8005890 <Trajectory>
	PositionControlPID(setpointtraj_y, setpoint_y, getLocalPosition(), KP, KI, KD, &voltage, 1); // reset PID
 8003a3a:	4b24      	ldr	r3, [pc, #144]	; (8003acc <home_handler+0x100>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003a46:	4b23      	ldr	r3, [pc, #140]	; (8003ad4 <home_handler+0x108>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8003a52:	f7fe fd5f 	bl	8002514 <getLocalPosition>
 8003a56:	ee07 0a90 	vmov	s15, r0
 8003a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a5e:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <home_handler+0x11c>)
 8003a60:	ed93 7a00 	vldr	s14, [r3]
 8003a64:	4b21      	ldr	r3, [pc, #132]	; (8003aec <home_handler+0x120>)
 8003a66:	edd3 6a00 	vldr	s13, [r3]
 8003a6a:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <home_handler+0x124>)
 8003a6c:	ed93 6a00 	vldr	s12, [r3]
 8003a70:	2101      	movs	r1, #1
 8003a72:	4814      	ldr	r0, [pc, #80]	; (8003ac4 <home_handler+0xf8>)
 8003a74:	eef0 2a46 	vmov.f32	s5, s12
 8003a78:	eeb0 2a66 	vmov.f32	s4, s13
 8003a7c:	eef0 1a47 	vmov.f32	s3, s14
 8003a80:	eeb0 1a67 	vmov.f32	s2, s15
 8003a84:	eef0 0a68 	vmov.f32	s1, s17
 8003a88:	eeb0 0a48 	vmov.f32	s0, s16
 8003a8c:	f7fe fa4a 	bl	8001f24 <PositionControlPID>
	home_status = 0;
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <home_handler+0xec>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
	PID_enable = 1;
 8003a96:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <home_handler+0x128>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]
	state = MSwait;
 8003a9c:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <home_handler+0x12c>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
	setpoint_y = 0;
 8003aa2:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <home_handler+0x108>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	e002      	b.n	8003ab0 <home_handler+0xe4>
		return;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <home_handler+0xe4>
		return;
 8003aae:	bf00      	nop
}
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	ecbd 8b02 	vpop	{d8}
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20001815 	.word	0x20001815
 8003abc:	40020800 	.word	0x40020800
 8003ac0:	00000000 	.word	0x00000000
 8003ac4:	20001820 	.word	0x20001820
 8003ac8:	20001918 	.word	0x20001918
 8003acc:	20001824 	.word	0x20001824
 8003ad0:	ffffd314 	.word	0xffffd314
 8003ad4:	20001910 	.word	0x20001910
 8003ad8:	2000182c 	.word	0x2000182c
 8003adc:	20001828 	.word	0x20001828
 8003ae0:	479c4000 	.word	0x479c4000
 8003ae4:	4704d000 	.word	0x4704d000
 8003ae8:	20000224 	.word	0x20000224
 8003aec:	20000228 	.word	0x20000228
 8003af0:	2000022c 	.word	0x2000022c
 8003af4:	20000222 	.word	0x20000222
 8003af8:	20000221 	.word	0x20000221
 8003afc:	00000000 	.word	0x00000000

08003b00 <data_report>:

void data_report(MB *variables) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	variables->y_actual_position = getLocalPosition() * 0.3;
 8003b08:	f7fe fd04 	bl	8002514 <getLocalPosition>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fc fd10 	bl	8000534 <__aeabi_i2d>
 8003b14:	a326      	add	r3, pc, #152	; (adr r3, 8003bb0 <data_report+0xb0>)
 8003b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1a:	f7fc fd75 	bl	8000608 <__aeabi_dmul>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4610      	mov	r0, r2
 8003b24:	4619      	mov	r1, r3
 8003b26:	f7fd f81f 	bl	8000b68 <__aeabi_d2iz>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	b21a      	sxth	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	819a      	strh	r2, [r3, #12]
	variables->y_actual_speed = abs(actual_velocity) * 0.3;
 8003b32:	4b21      	ldr	r3, [pc, #132]	; (8003bb8 <data_report+0xb8>)
 8003b34:	edd3 7a00 	vldr	s15, [r3]
 8003b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b3c:	ee17 3a90 	vmov	r3, s15
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	bfb8      	it	lt
 8003b44:	425b      	neglt	r3, r3
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fc fcf4 	bl	8000534 <__aeabi_i2d>
 8003b4c:	a318      	add	r3, pc, #96	; (adr r3, 8003bb0 <data_report+0xb0>)
 8003b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b52:	f7fc fd59 	bl	8000608 <__aeabi_dmul>
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f7fd f803 	bl	8000b68 <__aeabi_d2iz>
 8003b62:	4603      	mov	r3, r0
 8003b64:	b21a      	sxth	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	81da      	strh	r2, [r3, #14]
	variables->y_actual_acceleration = abs(actual_acceleration) * 0.3;
 8003b6a:	4b14      	ldr	r3, [pc, #80]	; (8003bbc <data_report+0xbc>)
 8003b6c:	edd3 7a00 	vldr	s15, [r3]
 8003b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b74:	ee17 3a90 	vmov	r3, s15
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bfb8      	it	lt
 8003b7c:	425b      	neglt	r3, r3
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fc fcd8 	bl	8000534 <__aeabi_i2d>
 8003b84:	a30a      	add	r3, pc, #40	; (adr r3, 8003bb0 <data_report+0xb0>)
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	f7fc fd3d 	bl	8000608 <__aeabi_dmul>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	f7fc ffe7 	bl	8000b68 <__aeabi_d2iz>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	b21a      	sxth	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	821a      	strh	r2, [r3, #16]
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	f3af 8000 	nop.w
 8003bb0:	33333333 	.word	0x33333333
 8003bb4:	3fd33333 	.word	0x3fd33333
 8003bb8:	20001830 	.word	0x20001830
 8003bbc:	20001834 	.word	0x20001834

08003bc0 <x_spam_position>:

void x_spam_position(MB *variables) {
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
	if ((variables->x_actual_position - variables->x_target_position) != 0 && variables->x_moving_status == 0) {
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d007      	beq.n	8003be8 <x_spam_position+0x28>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d102      	bne.n	8003be8 <x_spam_position+0x28>
		variables->x_moving_status = 2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2202      	movs	r2, #2
 8003be6:	851a      	strh	r2, [r3, #40]	; 0x28
	}
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	0000      	movs	r0, r0
	...

08003bf8 <joystick_callback>:

void joystick_callback() {
 8003bf8:	b598      	push	{r3, r4, r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
	if (!jog_enable) {
 8003bfc:	4b96      	ldr	r3, [pc, #600]	; (8003e58 <joystick_callback+0x260>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 811d 	beq.w	8003e40 <joystick_callback+0x248>
		return;
	}

	setpoint_x += receivedByte[0];
 8003c06:	4b95      	ldr	r3, [pc, #596]	; (8003e5c <joystick_callback+0x264>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	4b95      	ldr	r3, [pc, #596]	; (8003e60 <joystick_callback+0x268>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4413      	add	r3, r2
 8003c10:	4a93      	ldr	r2, [pc, #588]	; (8003e60 <joystick_callback+0x268>)
 8003c12:	6013      	str	r3, [r2, #0]
	setpoint_y += receivedByte[1];
 8003c14:	4b91      	ldr	r3, [pc, #580]	; (8003e5c <joystick_callback+0x264>)
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	4b92      	ldr	r3, [pc, #584]	; (8003e64 <joystick_callback+0x26c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	4a91      	ldr	r2, [pc, #580]	; (8003e64 <joystick_callback+0x26c>)
 8003c20:	6013      	str	r3, [r2, #0]

	if (setpoint_x > 1400) {
 8003c22:	4b8f      	ldr	r3, [pc, #572]	; (8003e60 <joystick_callback+0x268>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8003c2a:	dd04      	ble.n	8003c36 <joystick_callback+0x3e>
		setpoint_x = 1400;
 8003c2c:	4b8c      	ldr	r3, [pc, #560]	; (8003e60 <joystick_callback+0x268>)
 8003c2e:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	e007      	b.n	8003c46 <joystick_callback+0x4e>
	} else if (setpoint_x < -1400) {
 8003c36:	4b8a      	ldr	r3, [pc, #552]	; (8003e60 <joystick_callback+0x268>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f513 6faf 	cmn.w	r3, #1400	; 0x578
 8003c3e:	da02      	bge.n	8003c46 <joystick_callback+0x4e>
		setpoint_x = -1400;
 8003c40:	4b87      	ldr	r3, [pc, #540]	; (8003e60 <joystick_callback+0x268>)
 8003c42:	4a89      	ldr	r2, [pc, #548]	; (8003e68 <joystick_callback+0x270>)
 8003c44:	601a      	str	r2, [r3, #0]
	}

	if (setpoint_y > 11667) {
 8003c46:	4b87      	ldr	r3, [pc, #540]	; (8003e64 <joystick_callback+0x26c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f642 5293 	movw	r2, #11667	; 0x2d93
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	dd04      	ble.n	8003c5c <joystick_callback+0x64>
		setpoint_y = 11667;
 8003c52:	4b84      	ldr	r3, [pc, #528]	; (8003e64 <joystick_callback+0x26c>)
 8003c54:	f642 5293 	movw	r2, #11667	; 0x2d93
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e007      	b.n	8003c6c <joystick_callback+0x74>
	} else if (setpoint_y < -11667) {
 8003c5c:	4b81      	ldr	r3, [pc, #516]	; (8003e64 <joystick_callback+0x26c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a82      	ldr	r2, [pc, #520]	; (8003e6c <joystick_callback+0x274>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	da02      	bge.n	8003c6c <joystick_callback+0x74>
		setpoint_y = -11667;
 8003c66:	4b7f      	ldr	r3, [pc, #508]	; (8003e64 <joystick_callback+0x26c>)
 8003c68:	4a80      	ldr	r2, [pc, #512]	; (8003e6c <joystick_callback+0x274>)
 8003c6a:	601a      	str	r2, [r3, #0]
	}

	if (receivedByte[2]) {
 8003c6c:	4b7b      	ldr	r3, [pc, #492]	; (8003e5c <joystick_callback+0x264>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d036      	beq.n	8003ce2 <joystick_callback+0xea>
		corners[jog_point_n].x = setpoint_x / 10.0;
 8003c74:	4b7a      	ldr	r3, [pc, #488]	; (8003e60 <joystick_callback+0x268>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fc fc5b 	bl	8000534 <__aeabi_i2d>
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	4b7b      	ldr	r3, [pc, #492]	; (8003e70 <joystick_callback+0x278>)
 8003c84:	f7fc fdea 	bl	800085c <__aeabi_ddiv>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4979      	ldr	r1, [pc, #484]	; (8003e74 <joystick_callback+0x27c>)
 8003c8e:	7809      	ldrb	r1, [r1, #0]
 8003c90:	460c      	mov	r4, r1
 8003c92:	4610      	mov	r0, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	f7fc ffaf 	bl	8000bf8 <__aeabi_d2f>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	4976      	ldr	r1, [pc, #472]	; (8003e78 <joystick_callback+0x280>)
 8003c9e:	00e3      	lsls	r3, r4, #3
 8003ca0:	440b      	add	r3, r1
 8003ca2:	601a      	str	r2, [r3, #0]
		corners[jog_point_n].y = setpoint_y * 0.03;
 8003ca4:	4b6f      	ldr	r3, [pc, #444]	; (8003e64 <joystick_callback+0x26c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc fc43 	bl	8000534 <__aeabi_i2d>
 8003cae:	a366      	add	r3, pc, #408	; (adr r3, 8003e48 <joystick_callback+0x250>)
 8003cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb4:	f7fc fca8 	bl	8000608 <__aeabi_dmul>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	496d      	ldr	r1, [pc, #436]	; (8003e74 <joystick_callback+0x27c>)
 8003cbe:	7809      	ldrb	r1, [r1, #0]
 8003cc0:	460c      	mov	r4, r1
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f7fc ff97 	bl	8000bf8 <__aeabi_d2f>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	496a      	ldr	r1, [pc, #424]	; (8003e78 <joystick_callback+0x280>)
 8003cce:	00e3      	lsls	r3, r4, #3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	601a      	str	r2, [r3, #0]
		jog_point_n++;
 8003cd6:	4b67      	ldr	r3, [pc, #412]	; (8003e74 <joystick_callback+0x27c>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	4b65      	ldr	r3, [pc, #404]	; (8003e74 <joystick_callback+0x27c>)
 8003ce0:	701a      	strb	r2, [r3, #0]
	}
	if (jog_point_n >= 3) {
 8003ce2:	4b64      	ldr	r3, [pc, #400]	; (8003e74 <joystick_callback+0x27c>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	f240 80ab 	bls.w	8003e42 <joystick_callback+0x24a>
		if (state == MSpick) {
 8003cec:	4b63      	ldr	r3, [pc, #396]	; (8003e7c <joystick_callback+0x284>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d14f      	bne.n	8003d94 <joystick_callback+0x19c>
			localize(corners, pick, &origin_pick, &angle_pick);
 8003cf4:	4b62      	ldr	r3, [pc, #392]	; (8003e80 <joystick_callback+0x288>)
 8003cf6:	4a63      	ldr	r2, [pc, #396]	; (8003e84 <joystick_callback+0x28c>)
 8003cf8:	4963      	ldr	r1, [pc, #396]	; (8003e88 <joystick_callback+0x290>)
 8003cfa:	485f      	ldr	r0, [pc, #380]	; (8003e78 <joystick_callback+0x280>)
 8003cfc:	f7fe fc28 	bl	8002550 <localize>
			MBvariables.pick_tray_orientation = (360.0 - (angle_pick * 180.0 / M_PI)) * 100.0;
 8003d00:	4b5f      	ldr	r3, [pc, #380]	; (8003e80 <joystick_callback+0x288>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fc fc27 	bl	8000558 <__aeabi_f2d>
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	4b5f      	ldr	r3, [pc, #380]	; (8003e8c <joystick_callback+0x294>)
 8003d10:	f7fc fc7a 	bl	8000608 <__aeabi_dmul>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	a34c      	add	r3, pc, #304	; (adr r3, 8003e50 <joystick_callback+0x258>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	f7fc fd9b 	bl	800085c <__aeabi_ddiv>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	f04f 0000 	mov.w	r0, #0
 8003d2e:	4958      	ldr	r1, [pc, #352]	; (8003e90 <joystick_callback+0x298>)
 8003d30:	f7fc fab2 	bl	8000298 <__aeabi_dsub>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	4b54      	ldr	r3, [pc, #336]	; (8003e94 <joystick_callback+0x29c>)
 8003d42:	f7fc fc61 	bl	8000608 <__aeabi_dmul>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f7fc ff0b 	bl	8000b68 <__aeabi_d2iz>
 8003d52:	4603      	mov	r3, r0
 8003d54:	b21a      	sxth	r2, r3
 8003d56:	4b50      	ldr	r3, [pc, #320]	; (8003e98 <joystick_callback+0x2a0>)
 8003d58:	82da      	strh	r2, [r3, #22]
			MBvariables.pick_tray_origin_x = origin_pick.x * 10;
 8003d5a:	4b4a      	ldr	r3, [pc, #296]	; (8003e84 <joystick_callback+0x28c>)
 8003d5c:	edd3 7a00 	vldr	s15, [r3]
 8003d60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d6c:	ee17 3a90 	vmov	r3, s15
 8003d70:	b21a      	sxth	r2, r3
 8003d72:	4b49      	ldr	r3, [pc, #292]	; (8003e98 <joystick_callback+0x2a0>)
 8003d74:	825a      	strh	r2, [r3, #18]
			MBvariables.pick_tray_origin_y = origin_pick.y * 10;
 8003d76:	4b43      	ldr	r3, [pc, #268]	; (8003e84 <joystick_callback+0x28c>)
 8003d78:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d7c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d88:	ee17 3a90 	vmov	r3, s15
 8003d8c:	b21a      	sxth	r2, r3
 8003d8e:	4b42      	ldr	r3, [pc, #264]	; (8003e98 <joystick_callback+0x2a0>)
 8003d90:	829a      	strh	r2, [r3, #20]
 8003d92:	e04e      	b.n	8003e32 <joystick_callback+0x23a>
		} else {
			localize(corners, place, &origin_place, &angle_place);
 8003d94:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <joystick_callback+0x2a4>)
 8003d96:	4a42      	ldr	r2, [pc, #264]	; (8003ea0 <joystick_callback+0x2a8>)
 8003d98:	4942      	ldr	r1, [pc, #264]	; (8003ea4 <joystick_callback+0x2ac>)
 8003d9a:	4837      	ldr	r0, [pc, #220]	; (8003e78 <joystick_callback+0x280>)
 8003d9c:	f7fe fbd8 	bl	8002550 <localize>
			MBvariables.place_tray_orientation = (360.0 - (angle_place * 180.0 / M_PI)) * 100.0;
 8003da0:	4b3e      	ldr	r3, [pc, #248]	; (8003e9c <joystick_callback+0x2a4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fc fbd7 	bl	8000558 <__aeabi_f2d>
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	4b37      	ldr	r3, [pc, #220]	; (8003e8c <joystick_callback+0x294>)
 8003db0:	f7fc fc2a 	bl	8000608 <__aeabi_dmul>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4610      	mov	r0, r2
 8003dba:	4619      	mov	r1, r3
 8003dbc:	a324      	add	r3, pc, #144	; (adr r3, 8003e50 <joystick_callback+0x258>)
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	f7fc fd4b 	bl	800085c <__aeabi_ddiv>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	f04f 0000 	mov.w	r0, #0
 8003dce:	4930      	ldr	r1, [pc, #192]	; (8003e90 <joystick_callback+0x298>)
 8003dd0:	f7fc fa62 	bl	8000298 <__aeabi_dsub>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	4b2c      	ldr	r3, [pc, #176]	; (8003e94 <joystick_callback+0x29c>)
 8003de2:	f7fc fc11 	bl	8000608 <__aeabi_dmul>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4610      	mov	r0, r2
 8003dec:	4619      	mov	r1, r3
 8003dee:	f7fc febb 	bl	8000b68 <__aeabi_d2iz>
 8003df2:	4603      	mov	r3, r0
 8003df4:	b21a      	sxth	r2, r3
 8003df6:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <joystick_callback+0x2a0>)
 8003df8:	839a      	strh	r2, [r3, #28]
			MBvariables.place_tray_origin_x = origin_place.x * 10;
 8003dfa:	4b29      	ldr	r3, [pc, #164]	; (8003ea0 <joystick_callback+0x2a8>)
 8003dfc:	edd3 7a00 	vldr	s15, [r3]
 8003e00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e0c:	ee17 3a90 	vmov	r3, s15
 8003e10:	b21a      	sxth	r2, r3
 8003e12:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <joystick_callback+0x2a0>)
 8003e14:	831a      	strh	r2, [r3, #24]
			MBvariables.place_tray_origin_y = origin_place.y * 10;
 8003e16:	4b22      	ldr	r3, [pc, #136]	; (8003ea0 <joystick_callback+0x2a8>)
 8003e18:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e1c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e28:	ee17 3a90 	vmov	r3, s15
 8003e2c:	b21a      	sxth	r2, r3
 8003e2e:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <joystick_callback+0x2a0>)
 8003e30:	835a      	strh	r2, [r3, #26]
		}
		state = MSwait;
 8003e32:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <joystick_callback+0x284>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
		jog_point_n = 0;
 8003e38:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <joystick_callback+0x27c>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	e000      	b.n	8003e42 <joystick_callback+0x24a>
		return;
 8003e40:	bf00      	nop
	}
}
 8003e42:	bd98      	pop	{r3, r4, r7, pc}
 8003e44:	f3af 8000 	nop.w
 8003e48:	eb851eb8 	.word	0xeb851eb8
 8003e4c:	3f9eb851 	.word	0x3f9eb851
 8003e50:	54442d18 	.word	0x54442d18
 8003e54:	400921fb 	.word	0x400921fb
 8003e58:	20001816 	.word	0x20001816
 8003e5c:	20001948 	.word	0x20001948
 8003e60:	20001914 	.word	0x20001914
 8003e64:	20001910 	.word	0x20001910
 8003e68:	fffffa88 	.word	0xfffffa88
 8003e6c:	ffffd26d 	.word	0xffffd26d
 8003e70:	40240000 	.word	0x40240000
 8003e74:	20001817 	.word	0x20001817
 8003e78:	20001838 	.word	0x20001838
 8003e7c:	20000221 	.word	0x20000221
 8003e80:	200018e8 	.word	0x200018e8
 8003e84:	200018e0 	.word	0x200018e0
 8003e88:	20001850 	.word	0x20001850
 8003e8c:	40668000 	.word	0x40668000
 8003e90:	40768000 	.word	0x40768000
 8003e94:	40590000 	.word	0x40590000
 8003e98:	2000191c 	.word	0x2000191c
 8003e9c:	200018f4 	.word	0x200018f4
 8003ea0:	200018ec 	.word	0x200018ec
 8003ea4:	20001898 	.word	0x20001898

08003ea8 <move_finished>:

uint8_t move_finished(uint32_t tolerance) {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	if (abs(getLocalPosition() - setpoint_y) < tolerance && abs(MBvariables.x_actual_position - setpoint_x) < tolerance) {
 8003eb0:	f7fe fb30 	bl	8002514 <getLocalPosition>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <move_finished+0x4c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bfb8      	it	lt
 8003ec0:	425b      	neglt	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d90f      	bls.n	8003eea <move_finished+0x42>
 8003eca:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <move_finished+0x50>)
 8003ecc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <move_finished+0x54>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bfb8      	it	lt
 8003edc:	425b      	neglt	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <move_finished+0x42>
		return 1;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <move_finished+0x44>
	}
	return 0;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20001910 	.word	0x20001910
 8003ef8:	2000191c 	.word	0x2000191c
 8003efc:	20001914 	.word	0x20001914

08003f00 <preset_data_y_only>:

void preset_data_y_only() {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
	for (int i = 0; i < 9; i++) {
 8003f06:	2300      	movs	r3, #0
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	e043      	b.n	8003f94 <preset_data_y_only+0x94>
		pick[i].y = 38.0 + 38.0 * i;
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7fc fb11 	bl	8000534 <__aeabi_i2d>
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	4b23      	ldr	r3, [pc, #140]	; (8003fa4 <preset_data_y_only+0xa4>)
 8003f18:	f7fc fb76 	bl	8000608 <__aeabi_dmul>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4610      	mov	r0, r2
 8003f22:	4619      	mov	r1, r3
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <preset_data_y_only+0xa4>)
 8003f2a:	f7fc f9b7 	bl	800029c <__adddf3>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4610      	mov	r0, r2
 8003f34:	4619      	mov	r1, r3
 8003f36:	f7fc fe5f 	bl	8000bf8 <__aeabi_d2f>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	491a      	ldr	r1, [pc, #104]	; (8003fa8 <preset_data_y_only+0xa8>)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	440b      	add	r3, r1
 8003f44:	3304      	adds	r3, #4
 8003f46:	601a      	str	r2, [r3, #0]
		place[i].y = -(38.0 + 38.0 * i);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7fc faf3 	bl	8000534 <__aeabi_i2d>
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <preset_data_y_only+0xa4>)
 8003f54:	f7fc fb58 	bl	8000608 <__aeabi_dmul>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <preset_data_y_only+0xa4>)
 8003f66:	f7fc f999 	bl	800029c <__adddf3>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4610      	mov	r0, r2
 8003f70:	4619      	mov	r1, r3
 8003f72:	f7fc fe41 	bl	8000bf8 <__aeabi_d2f>
 8003f76:	4603      	mov	r3, r0
 8003f78:	ee07 3a90 	vmov	s15, r3
 8003f7c:	eef1 7a67 	vneg.f32	s15, s15
 8003f80:	4a0a      	ldr	r2, [pc, #40]	; (8003fac <preset_data_y_only+0xac>)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4413      	add	r3, r2
 8003f88:	3304      	adds	r3, #4
 8003f8a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 9; i++) {
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3301      	adds	r3, #1
 8003f92:	607b      	str	r3, [r7, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	ddb8      	ble.n	8003f0c <preset_data_y_only+0xc>
	}
}
 8003f9a:	bf00      	nop
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40430000 	.word	0x40430000
 8003fa8:	20001850 	.word	0x20001850
 8003fac:	20001898 	.word	0x20001898

08003fb0 <preset_data_xy>:

void preset_data_xy() {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
	corners[0].x = 7.1;
 8003fb4:	4b64      	ldr	r3, [pc, #400]	; (8004148 <preset_data_xy+0x198>)
 8003fb6:	4a65      	ldr	r2, [pc, #404]	; (800414c <preset_data_xy+0x19c>)
 8003fb8:	601a      	str	r2, [r3, #0]
	corners[0].y = -68.0;
 8003fba:	4b63      	ldr	r3, [pc, #396]	; (8004148 <preset_data_xy+0x198>)
 8003fbc:	4a64      	ldr	r2, [pc, #400]	; (8004150 <preset_data_xy+0x1a0>)
 8003fbe:	605a      	str	r2, [r3, #4]
	corners[1].x = 52.7;
 8003fc0:	4b61      	ldr	r3, [pc, #388]	; (8004148 <preset_data_xy+0x198>)
 8003fc2:	4a64      	ldr	r2, [pc, #400]	; (8004154 <preset_data_xy+0x1a4>)
 8003fc4:	609a      	str	r2, [r3, #8]
	corners[1].y = -29.4;
 8003fc6:	4b60      	ldr	r3, [pc, #384]	; (8004148 <preset_data_xy+0x198>)
 8003fc8:	4a63      	ldr	r2, [pc, #396]	; (8004158 <preset_data_xy+0x1a8>)
 8003fca:	60da      	str	r2, [r3, #12]
	corners[2].x = 21.2;
 8003fcc:	4b5e      	ldr	r3, [pc, #376]	; (8004148 <preset_data_xy+0x198>)
 8003fce:	4a63      	ldr	r2, [pc, #396]	; (800415c <preset_data_xy+0x1ac>)
 8003fd0:	611a      	str	r2, [r3, #16]
	corners[2].y = 8.2;
 8003fd2:	4b5d      	ldr	r3, [pc, #372]	; (8004148 <preset_data_xy+0x198>)
 8003fd4:	4a62      	ldr	r2, [pc, #392]	; (8004160 <preset_data_xy+0x1b0>)
 8003fd6:	615a      	str	r2, [r3, #20]
	localize(corners, pick, &origin_pick, &angle_pick);
 8003fd8:	4b62      	ldr	r3, [pc, #392]	; (8004164 <preset_data_xy+0x1b4>)
 8003fda:	4a63      	ldr	r2, [pc, #396]	; (8004168 <preset_data_xy+0x1b8>)
 8003fdc:	4963      	ldr	r1, [pc, #396]	; (800416c <preset_data_xy+0x1bc>)
 8003fde:	485a      	ldr	r0, [pc, #360]	; (8004148 <preset_data_xy+0x198>)
 8003fe0:	f7fe fab6 	bl	8002550 <localize>
	MBvariables.pick_tray_orientation = (360.0 - (angle_pick * 180.0 / M_PI)) * 100.0;
 8003fe4:	4b5f      	ldr	r3, [pc, #380]	; (8004164 <preset_data_xy+0x1b4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fc fab5 	bl	8000558 <__aeabi_f2d>
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	4b5f      	ldr	r3, [pc, #380]	; (8004170 <preset_data_xy+0x1c0>)
 8003ff4:	f7fc fb08 	bl	8000608 <__aeabi_dmul>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	a34f      	add	r3, pc, #316	; (adr r3, 8004140 <preset_data_xy+0x190>)
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	f7fc fc29 	bl	800085c <__aeabi_ddiv>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	f04f 0000 	mov.w	r0, #0
 8004012:	4958      	ldr	r1, [pc, #352]	; (8004174 <preset_data_xy+0x1c4>)
 8004014:	f7fc f940 	bl	8000298 <__aeabi_dsub>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4610      	mov	r0, r2
 800401e:	4619      	mov	r1, r3
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	4b54      	ldr	r3, [pc, #336]	; (8004178 <preset_data_xy+0x1c8>)
 8004026:	f7fc faef 	bl	8000608 <__aeabi_dmul>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4610      	mov	r0, r2
 8004030:	4619      	mov	r1, r3
 8004032:	f7fc fd99 	bl	8000b68 <__aeabi_d2iz>
 8004036:	4603      	mov	r3, r0
 8004038:	b21a      	sxth	r2, r3
 800403a:	4b50      	ldr	r3, [pc, #320]	; (800417c <preset_data_xy+0x1cc>)
 800403c:	82da      	strh	r2, [r3, #22]
	MBvariables.pick_tray_origin_x = origin_pick.x * 10;
 800403e:	4b4a      	ldr	r3, [pc, #296]	; (8004168 <preset_data_xy+0x1b8>)
 8004040:	edd3 7a00 	vldr	s15, [r3]
 8004044:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004048:	ee67 7a87 	vmul.f32	s15, s15, s14
 800404c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004050:	ee17 3a90 	vmov	r3, s15
 8004054:	b21a      	sxth	r2, r3
 8004056:	4b49      	ldr	r3, [pc, #292]	; (800417c <preset_data_xy+0x1cc>)
 8004058:	825a      	strh	r2, [r3, #18]
	MBvariables.pick_tray_origin_y = origin_pick.y * 10;
 800405a:	4b43      	ldr	r3, [pc, #268]	; (8004168 <preset_data_xy+0x1b8>)
 800405c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004060:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800406c:	ee17 3a90 	vmov	r3, s15
 8004070:	b21a      	sxth	r2, r3
 8004072:	4b42      	ldr	r3, [pc, #264]	; (800417c <preset_data_xy+0x1cc>)
 8004074:	829a      	strh	r2, [r3, #20]

	corners[0].x = -90.3;
 8004076:	4b34      	ldr	r3, [pc, #208]	; (8004148 <preset_data_xy+0x198>)
 8004078:	4a41      	ldr	r2, [pc, #260]	; (8004180 <preset_data_xy+0x1d0>)
 800407a:	601a      	str	r2, [r3, #0]
	corners[0].y = -170.0;
 800407c:	4b32      	ldr	r3, [pc, #200]	; (8004148 <preset_data_xy+0x198>)
 800407e:	4a41      	ldr	r2, [pc, #260]	; (8004184 <preset_data_xy+0x1d4>)
 8004080:	605a      	str	r2, [r3, #4]
	corners[1].x = -46.1;
 8004082:	4b31      	ldr	r3, [pc, #196]	; (8004148 <preset_data_xy+0x198>)
 8004084:	4a40      	ldr	r2, [pc, #256]	; (8004188 <preset_data_xy+0x1d8>)
 8004086:	609a      	str	r2, [r3, #8]
	corners[1].y = -149.4;
 8004088:	4b2f      	ldr	r3, [pc, #188]	; (8004148 <preset_data_xy+0x198>)
 800408a:	4a40      	ldr	r2, [pc, #256]	; (800418c <preset_data_xy+0x1dc>)
 800408c:	60da      	str	r2, [r3, #12]
	corners[2].x = -69.6;
 800408e:	4b2e      	ldr	r3, [pc, #184]	; (8004148 <preset_data_xy+0x198>)
 8004090:	4a3f      	ldr	r2, [pc, #252]	; (8004190 <preset_data_xy+0x1e0>)
 8004092:	611a      	str	r2, [r3, #16]
	corners[2].y = -95.3;
 8004094:	4b2c      	ldr	r3, [pc, #176]	; (8004148 <preset_data_xy+0x198>)
 8004096:	4a3f      	ldr	r2, [pc, #252]	; (8004194 <preset_data_xy+0x1e4>)
 8004098:	615a      	str	r2, [r3, #20]
	localize(corners, place, &origin_place, &angle_place);
 800409a:	4b3f      	ldr	r3, [pc, #252]	; (8004198 <preset_data_xy+0x1e8>)
 800409c:	4a3f      	ldr	r2, [pc, #252]	; (800419c <preset_data_xy+0x1ec>)
 800409e:	4940      	ldr	r1, [pc, #256]	; (80041a0 <preset_data_xy+0x1f0>)
 80040a0:	4829      	ldr	r0, [pc, #164]	; (8004148 <preset_data_xy+0x198>)
 80040a2:	f7fe fa55 	bl	8002550 <localize>
	MBvariables.place_tray_orientation = (360.0 - (angle_place * 180.0 / M_PI)) * 100.0;
 80040a6:	4b3c      	ldr	r3, [pc, #240]	; (8004198 <preset_data_xy+0x1e8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fc fa54 	bl	8000558 <__aeabi_f2d>
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	4b2e      	ldr	r3, [pc, #184]	; (8004170 <preset_data_xy+0x1c0>)
 80040b6:	f7fc faa7 	bl	8000608 <__aeabi_dmul>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4610      	mov	r0, r2
 80040c0:	4619      	mov	r1, r3
 80040c2:	a31f      	add	r3, pc, #124	; (adr r3, 8004140 <preset_data_xy+0x190>)
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	f7fc fbc8 	bl	800085c <__aeabi_ddiv>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	f04f 0000 	mov.w	r0, #0
 80040d4:	4927      	ldr	r1, [pc, #156]	; (8004174 <preset_data_xy+0x1c4>)
 80040d6:	f7fc f8df 	bl	8000298 <__aeabi_dsub>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	4b24      	ldr	r3, [pc, #144]	; (8004178 <preset_data_xy+0x1c8>)
 80040e8:	f7fc fa8e 	bl	8000608 <__aeabi_dmul>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4610      	mov	r0, r2
 80040f2:	4619      	mov	r1, r3
 80040f4:	f7fc fd38 	bl	8000b68 <__aeabi_d2iz>
 80040f8:	4603      	mov	r3, r0
 80040fa:	b21a      	sxth	r2, r3
 80040fc:	4b1f      	ldr	r3, [pc, #124]	; (800417c <preset_data_xy+0x1cc>)
 80040fe:	839a      	strh	r2, [r3, #28]
	MBvariables.place_tray_origin_x = origin_place.x * 10;
 8004100:	4b26      	ldr	r3, [pc, #152]	; (800419c <preset_data_xy+0x1ec>)
 8004102:	edd3 7a00 	vldr	s15, [r3]
 8004106:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800410a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800410e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004112:	ee17 3a90 	vmov	r3, s15
 8004116:	b21a      	sxth	r2, r3
 8004118:	4b18      	ldr	r3, [pc, #96]	; (800417c <preset_data_xy+0x1cc>)
 800411a:	831a      	strh	r2, [r3, #24]
	MBvariables.place_tray_origin_y = origin_place.y * 10;
 800411c:	4b1f      	ldr	r3, [pc, #124]	; (800419c <preset_data_xy+0x1ec>)
 800411e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004122:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800412a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800412e:	ee17 3a90 	vmov	r3, s15
 8004132:	b21a      	sxth	r2, r3
 8004134:	4b11      	ldr	r3, [pc, #68]	; (800417c <preset_data_xy+0x1cc>)
 8004136:	835a      	strh	r2, [r3, #26]
}
 8004138:	bf00      	nop
 800413a:	bd80      	pop	{r7, pc}
 800413c:	f3af 8000 	nop.w
 8004140:	54442d18 	.word	0x54442d18
 8004144:	400921fb 	.word	0x400921fb
 8004148:	20001838 	.word	0x20001838
 800414c:	40e33333 	.word	0x40e33333
 8004150:	c2880000 	.word	0xc2880000
 8004154:	4252cccd 	.word	0x4252cccd
 8004158:	c1eb3333 	.word	0xc1eb3333
 800415c:	41a9999a 	.word	0x41a9999a
 8004160:	41033333 	.word	0x41033333
 8004164:	200018e8 	.word	0x200018e8
 8004168:	200018e0 	.word	0x200018e0
 800416c:	20001850 	.word	0x20001850
 8004170:	40668000 	.word	0x40668000
 8004174:	40768000 	.word	0x40768000
 8004178:	40590000 	.word	0x40590000
 800417c:	2000191c 	.word	0x2000191c
 8004180:	c2b4999a 	.word	0xc2b4999a
 8004184:	c32a0000 	.word	0xc32a0000
 8004188:	c2386666 	.word	0xc2386666
 800418c:	c3156666 	.word	0xc3156666
 8004190:	c28b3333 	.word	0xc28b3333
 8004194:	c2be999a 	.word	0xc2be999a
 8004198:	200018f4 	.word	0x200018f4
 800419c:	200018ec 	.word	0x200018ec
 80041a0:	20001898 	.word	0x20001898

080041a4 <emergency_handler>:

void emergency_handler() {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
	static uint8_t prev_state;
	emergency = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 80041a8:	2104      	movs	r1, #4
 80041aa:	4822      	ldr	r0, [pc, #136]	; (8004234 <emergency_handler+0x90>)
 80041ac:	f003 f9e2 	bl	8007574 <HAL_GPIO_ReadPin>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bf0c      	ite	eq
 80041b6:	2301      	moveq	r3, #1
 80041b8:	2300      	movne	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	4b1e      	ldr	r3, [pc, #120]	; (8004238 <emergency_handler+0x94>)
 80041c0:	701a      	strb	r2, [r3, #0]

	// going into emergency
	if (!prev_state && emergency) {
 80041c2:	4b1e      	ldr	r3, [pc, #120]	; (800423c <emergency_handler+0x98>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <emergency_handler+0x34>
 80041ca:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <emergency_handler+0x94>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <emergency_handler+0x34>
		ENDEFF_EMERGENCY(&hi2c1);
 80041d2:	481b      	ldr	r0, [pc, #108]	; (8004240 <emergency_handler+0x9c>)
 80041d4:	f7fc ff18 	bl	8001008 <ENDEFF_EMERGENCY>
	}

	// leaving emergency
	if (prev_state && !emergency) {
 80041d8:	4b18      	ldr	r3, [pc, #96]	; (800423c <emergency_handler+0x98>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00e      	beq.n	80041fe <emergency_handler+0x5a>
 80041e0:	4b15      	ldr	r3, [pc, #84]	; (8004238 <emergency_handler+0x94>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <emergency_handler+0x5a>
		ENDEFF_EMERGENCY_QUIT(&hi2c1);
 80041e8:	4815      	ldr	r0, [pc, #84]	; (8004240 <emergency_handler+0x9c>)
 80041ea:	f7fc ff35 	bl	8001058 <ENDEFF_EMERGENCY_QUIT>
		HAL_Delay(11);
 80041ee:	200b      	movs	r0, #11
 80041f0:	f002 f886 	bl	8006300 <HAL_Delay>
		ENE_I2C_UPDATE(&MBvariables.end_effector_status, &hi2c1, 1);
 80041f4:	2201      	movs	r2, #1
 80041f6:	4912      	ldr	r1, [pc, #72]	; (8004240 <emergency_handler+0x9c>)
 80041f8:	4812      	ldr	r0, [pc, #72]	; (8004244 <emergency_handler+0xa0>)
 80041fa:	f7fd f845 	bl	8001288 <ENE_I2C_UPDATE>
	}

	if (emergency) {
 80041fe:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <emergency_handler+0x94>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00f      	beq.n	8004226 <emergency_handler+0x82>
		PID_enable = 0;
 8004206:	4b10      	ldr	r3, [pc, #64]	; (8004248 <emergency_handler+0xa4>)
 8004208:	2200      	movs	r2, #0
 800420a:	701a      	strb	r2, [r3, #0]
		state = MSidle;
 800420c:	4b0f      	ldr	r3, [pc, #60]	; (800424c <emergency_handler+0xa8>)
 800420e:	2201      	movs	r2, #1
 8004210:	701a      	strb	r2, [r3, #0]
		voltage = 0;
 8004212:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <emergency_handler+0xac>)
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
		home_status = 0;
 800421a:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <emergency_handler+0xb0>)
 800421c:	2200      	movs	r2, #0
 800421e:	701a      	strb	r2, [r3, #0]
		MBvariables.base_system_status = 0;
 8004220:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <emergency_handler+0xb4>)
 8004222:	2200      	movs	r2, #0
 8004224:	801a      	strh	r2, [r3, #0]
	}

	prev_state = emergency;
 8004226:	4b04      	ldr	r3, [pc, #16]	; (8004238 <emergency_handler+0x94>)
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	4b04      	ldr	r3, [pc, #16]	; (800423c <emergency_handler+0x98>)
 800422c:	701a      	strb	r2, [r3, #0]
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40020800 	.word	0x40020800
 8004238:	20001814 	.word	0x20001814
 800423c:	20001978 	.word	0x20001978
 8004240:	200004d8 	.word	0x200004d8
 8004244:	20001942 	.word	0x20001942
 8004248:	20000222 	.word	0x20000222
 800424c:	20000221 	.word	0x20000221
 8004250:	20001820 	.word	0x20001820
 8004254:	20001815 	.word	0x20001815
 8004258:	2000191c 	.word	0x2000191c

0800425c <RGB_logic>:
uint32_t LEDtime = 0;
MachineState laststate = MSidle;

// USER CODE ======================================================================================

void RGB_logic(MachineState state, uint8_t point, uint8_t emergency) {
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	71fb      	strb	r3, [r7, #7]
 8004266:	460b      	mov	r3, r1
 8004268:	71bb      	strb	r3, [r7, #6]
 800426a:	4613      	mov	r3, r2
 800426c:	717b      	strb	r3, [r7, #5]
	// Run on 200 Hz
	static uint32_t timestamp;
	if (HAL_GetTick() - timestamp < 5) {
 800426e:	f002 f83b 	bl	80062e8 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	4b4a      	ldr	r3, [pc, #296]	; (80043a0 <RGB_logic+0x144>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b04      	cmp	r3, #4
 800427c:	f240 808c 	bls.w	8004398 <RGB_logic+0x13c>
		return;
	}
	timestamp = HAL_GetTick() + 5;
 8004280:	f002 f832 	bl	80062e8 <HAL_GetTick>
 8004284:	4603      	mov	r3, r0
 8004286:	3305      	adds	r3, #5
 8004288:	4a45      	ldr	r2, [pc, #276]	; (80043a0 <RGB_logic+0x144>)
 800428a:	6013      	str	r3, [r2, #0]

	// Main logic here
	if (emergency) {
 800428c:	797b      	ldrb	r3, [r7, #5]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00f      	beq.n	80042b2 <RGB_logic+0x56>
		laststate = MSwait;
 8004292:	4b44      	ldr	r3, [pc, #272]	; (80043a4 <RGB_logic+0x148>)
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
		RGB_BreathingPattern(500, 255, 0, 0);
 8004298:	2300      	movs	r3, #0
 800429a:	2200      	movs	r2, #0
 800429c:	21ff      	movs	r1, #255	; 0xff
 800429e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042a2:	f000 faf5 	bl	8004890 <RGB_BreathingPattern>
		Set_Brightness(45);
 80042a6:	202d      	movs	r0, #45	; 0x2d
 80042a8:	f7fe ff6e 	bl	8003188 <Set_Brightness>
		WS2812_Send();
 80042ac:	f7fe ffee 	bl	800328c <WS2812_Send>
		return;
 80042b0:	e073      	b.n	800439a <RGB_logic+0x13e>
	} else {
		switch (state) {
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	2b06      	cmp	r3, #6
 80042b6:	d868      	bhi.n	800438a <RGB_logic+0x12e>
 80042b8:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <RGB_logic+0x64>)
 80042ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042be:	bf00      	nop
 80042c0:	080042dd 	.word	0x080042dd
 80042c4:	08004301 	.word	0x08004301
 80042c8:	0800432d 	.word	0x0800432d
 80042cc:	0800432d 	.word	0x0800432d
 80042d0:	08004343 	.word	0x08004343
 80042d4:	08004359 	.word	0x08004359
 80042d8:	08004375 	.word	0x08004375
		case MSwait:
			if (laststate != MSwait) {
 80042dc:	4b31      	ldr	r3, [pc, #196]	; (80043a4 <RGB_logic+0x148>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <RGB_logic+0x8e>
				LEDtime = 0;
 80042e4:	4b30      	ldr	r3, [pc, #192]	; (80043a8 <RGB_logic+0x14c>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
			}
			RGB_BreathingPattern(500, 0, 255, 0);
 80042ea:	2300      	movs	r3, #0
 80042ec:	22ff      	movs	r2, #255	; 0xff
 80042ee:	2100      	movs	r1, #0
 80042f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042f4:	f000 facc 	bl	8004890 <RGB_BreathingPattern>
			laststate = MSwait;
 80042f8:	4b2a      	ldr	r3, [pc, #168]	; (80043a4 <RGB_logic+0x148>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]
			break;
 80042fe:	e045      	b.n	800438c <RGB_logic+0x130>
		case MSidle:
			if (laststate != MSidle) {
 8004300:	4b28      	ldr	r3, [pc, #160]	; (80043a4 <RGB_logic+0x148>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d002      	beq.n	800430e <RGB_logic+0xb2>
				LEDtime = 0;
 8004308:	4b27      	ldr	r3, [pc, #156]	; (80043a8 <RGB_logic+0x14c>)
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
			}
			RGB_Rainbow(!MBvariables.heartbeat);
 800430e:	4b27      	ldr	r3, [pc, #156]	; (80043ac <RGB_logic+0x150>)
 8004310:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f85e 	bl	80043e0 <RGB_Rainbow>
			laststate = MSidle;
 8004324:	4b1f      	ldr	r3, [pc, #124]	; (80043a4 <RGB_logic+0x148>)
 8004326:	2201      	movs	r2, #1
 8004328:	701a      	strb	r2, [r3, #0]
			break;
 800432a:	e02f      	b.n	800438c <RGB_logic+0x130>
		case MSpick:
		case MSplace:
			RGB_BreathingPattern(500, 255, 255, 255);
 800432c:	23ff      	movs	r3, #255	; 0xff
 800432e:	22ff      	movs	r2, #255	; 0xff
 8004330:	21ff      	movs	r1, #255	; 0xff
 8004332:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004336:	f000 faab 	bl	8004890 <RGB_BreathingPattern>
			laststate = MSpick;
 800433a:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <RGB_logic+0x148>)
 800433c:	2202      	movs	r2, #2
 800433e:	701a      	strb	r2, [r3, #0]
			break;
 8004340:	e024      	b.n	800438c <RGB_logic+0x130>
		case MShome:
			RGB_BreathingPattern(500, 0, 0, 255);
 8004342:	23ff      	movs	r3, #255	; 0xff
 8004344:	2200      	movs	r2, #0
 8004346:	2100      	movs	r1, #0
 8004348:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800434c:	f000 faa0 	bl	8004890 <RGB_BreathingPattern>
			laststate = MShome;
 8004350:	4b14      	ldr	r3, [pc, #80]	; (80043a4 <RGB_logic+0x148>)
 8004352:	2204      	movs	r2, #4
 8004354:	701a      	strb	r2, [r3, #0]
			break;
 8004356:	e019      	b.n	800438c <RGB_logic+0x130>
		case MStray:
			if (laststate != MStray) {
 8004358:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <RGB_logic+0x148>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b05      	cmp	r3, #5
 800435e:	d001      	beq.n	8004364 <RGB_logic+0x108>
				RGB_off();
 8004360:	f000 f826 	bl	80043b0 <RGB_off>
			}
			RGB_TrayProgress(point);
 8004364:	79bb      	ldrb	r3, [r7, #6]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fb7a 	bl	8004a60 <RGB_TrayProgress>
			laststate = MStray;
 800436c:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <RGB_logic+0x148>)
 800436e:	2205      	movs	r2, #5
 8004370:	701a      	strb	r2, [r3, #0]
			break;
 8004372:	e00b      	b.n	800438c <RGB_logic+0x130>
		case MSpoint:
			laststate = MSpoint;
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <RGB_logic+0x148>)
 8004376:	2206      	movs	r2, #6
 8004378:	701a      	strb	r2, [r3, #0]
			RGB_BreathingPattern(500, 255, 165, 0);
 800437a:	2300      	movs	r3, #0
 800437c:	22a5      	movs	r2, #165	; 0xa5
 800437e:	21ff      	movs	r1, #255	; 0xff
 8004380:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004384:	f000 fa84 	bl	8004890 <RGB_BreathingPattern>
			break;
 8004388:	e000      	b.n	800438c <RGB_logic+0x130>
		default:
			break;
 800438a:	bf00      	nop

//	for (int i = 16; i < 24; i++) {
//		Set_LED(i, 0, 0, 0);
//	}

	Set_Brightness(45);
 800438c:	202d      	movs	r0, #45	; 0x2d
 800438e:	f7fe fefb 	bl	8003188 <Set_Brightness>
	WS2812_Send();
 8004392:	f7fe ff7b 	bl	800328c <WS2812_Send>
 8004396:	e000      	b.n	800439a <RGB_logic+0x13e>
		return;
 8004398:	bf00      	nop
}
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	2000197c 	.word	0x2000197c
 80043a4:	20000223 	.word	0x20000223
 80043a8:	200018f8 	.word	0x200018f8
 80043ac:	2000191c 	.word	0x2000191c

080043b0 <RGB_off>:

void RGB_off() {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_LED; i++) {
 80043b6:	2300      	movs	r3, #0
 80043b8:	607b      	str	r3, [r7, #4]
 80043ba:	e008      	b.n	80043ce <RGB_off+0x1e>
		Set_LED(i, 0, 0, 0);
 80043bc:	2300      	movs	r3, #0
 80043be:	2200      	movs	r2, #0
 80043c0:	2100      	movs	r1, #0
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fe feb0 	bl	8003128 <Set_LED>
	for (int i = 0; i < MAX_LED; i++) {
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3301      	adds	r3, #1
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b3b      	cmp	r3, #59	; 0x3b
 80043d2:	ddf3      	ble.n	80043bc <RGB_off+0xc>
	}
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <RGB_Rainbow>:

void RGB_Rainbow(uint8_t dobreathing) {
 80043e0:	b5b0      	push	{r4, r5, r7, lr}
 80043e2:	b090      	sub	sp, #64	; 0x40
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	71fb      	strb	r3, [r7, #7]
	static uint32_t startTime = 0;
	static const uint32_t transitionDuration = 5000; // Transition duration in milliseconds

	if (HAL_GetTick() - startTime >= transitionDuration) {
 80043ea:	f001 ff7d 	bl	80062e8 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	4bc1      	ldr	r3, [pc, #772]	; (80046f8 <RGB_Rainbow+0x318>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	1ad2      	subs	r2, r2, r3
 80043f6:	4bc1      	ldr	r3, [pc, #772]	; (80046fc <RGB_Rainbow+0x31c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d304      	bcc.n	8004408 <RGB_Rainbow+0x28>
		startTime = HAL_GetTick();
 80043fe:	f001 ff73 	bl	80062e8 <HAL_GetTick>
 8004402:	4603      	mov	r3, r0
 8004404:	4abc      	ldr	r2, [pc, #752]	; (80046f8 <RGB_Rainbow+0x318>)
 8004406:	6013      	str	r3, [r2, #0]
	}

	// Calculate time elapsed in the current transition
	uint32_t elapsed = HAL_GetTick() - startTime;
 8004408:	f001 ff6e 	bl	80062e8 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	4bba      	ldr	r3, [pc, #744]	; (80046f8 <RGB_Rainbow+0x318>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculate the normalized progress (0.0 to 1.0) within the transition
	float progress = (float) elapsed / transitionDuration;
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	ee07 3a90 	vmov	s15, r3
 800441c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004420:	4bb6      	ldr	r3, [pc, #728]	; (80046fc <RGB_Rainbow+0x31c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	ee07 3a90 	vmov	s15, r3
 8004428:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800442c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004430:	edc7 7a08 	vstr	s15, [r7, #32]

	// Calculate the hue angle based on the progress
	float hueAngle = 360.0f * progress;
 8004434:	edd7 7a08 	vldr	s15, [r7, #32]
 8004438:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8004700 <RGB_Rainbow+0x320>
 800443c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004440:	edc7 7a07 	vstr	s15, [r7, #28]

	// Set LED colors based on the hue angle
	for (int i = 0; i < MAX_LED; i++) {
 8004444:	2300      	movs	r3, #0
 8004446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004448:	e1f2      	b.n	8004830 <RGB_Rainbow+0x450>
		// Calculate the hue value for the current LED
		float ledHue = hueAngle + (i * (360.0f / MAX_LED));
 800444a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800444c:	ee07 3a90 	vmov	s15, r3
 8004450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004454:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800445c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004464:	edc7 7a06 	vstr	s15, [r7, #24]

		// Convert hue to RGB using HSV color model
		float huePrime = fmodf(ledHue / 60.0f, 6.0f);
 8004468:	edd7 7a06 	vldr	s15, [r7, #24]
 800446c:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8004704 <RGB_Rainbow+0x324>
 8004470:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004474:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004478:	eeb0 0a47 	vmov.f32	s0, s14
 800447c:	f00c fc72 	bl	8010d64 <fmodf>
 8004480:	ed87 0a05 	vstr	s0, [r7, #20]
		float chroma = 1.0f;
 8004484:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004488:	613b      	str	r3, [r7, #16]
		float x = chroma * (1.0f - fabsf(fmodf(huePrime, 2.0f) - 1.0f));
 800448a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800448e:	ed97 0a05 	vldr	s0, [r7, #20]
 8004492:	f00c fc67 	bl	8010d64 <fmodf>
 8004496:	eef0 7a40 	vmov.f32	s15, s0
 800449a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800449e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044a2:	eef0 7ae7 	vabs.f32	s15, s15
 80044a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80044b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b6:	edc7 7a03 	vstr	s15, [r7, #12]

		float red, green, blue;

		if (huePrime >= 0.0f && huePrime < 1.0f) {
 80044ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80044be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c6:	db10      	blt.n	80044ea <RGB_Rainbow+0x10a>
 80044c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80044cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d8:	d507      	bpl.n	80044ea <RGB_Rainbow+0x10a>
			red = chroma;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	63bb      	str	r3, [r7, #56]	; 0x38
			green = x;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
			blue = 0.0f;
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	633b      	str	r3, [r7, #48]	; 0x30
 80044e8:	e06e      	b.n	80045c8 <RGB_Rainbow+0x1e8>
		} else if (huePrime >= 1.0f && huePrime < 2.0f) {
 80044ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80044ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fa:	db10      	blt.n	800451e <RGB_Rainbow+0x13e>
 80044fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8004500:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450c:	d507      	bpl.n	800451e <RGB_Rainbow+0x13e>
			red = x;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	63bb      	str	r3, [r7, #56]	; 0x38
			green = chroma;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	637b      	str	r3, [r7, #52]	; 0x34
			blue = 0.0f;
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	633b      	str	r3, [r7, #48]	; 0x30
 800451c:	e054      	b.n	80045c8 <RGB_Rainbow+0x1e8>
		} else if (huePrime >= 2.0f && huePrime < 3.0f) {
 800451e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004522:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800452a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452e:	db10      	blt.n	8004552 <RGB_Rainbow+0x172>
 8004530:	edd7 7a05 	vldr	s15, [r7, #20]
 8004534:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800453c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004540:	d507      	bpl.n	8004552 <RGB_Rainbow+0x172>
			red = 0.0f;
 8004542:	f04f 0300 	mov.w	r3, #0
 8004546:	63bb      	str	r3, [r7, #56]	; 0x38
			green = chroma;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	637b      	str	r3, [r7, #52]	; 0x34
			blue = x;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	633b      	str	r3, [r7, #48]	; 0x30
 8004550:	e03a      	b.n	80045c8 <RGB_Rainbow+0x1e8>
		} else if (huePrime >= 3.0f && huePrime < 4.0f) {
 8004552:	edd7 7a05 	vldr	s15, [r7, #20]
 8004556:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800455a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800455e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004562:	db10      	blt.n	8004586 <RGB_Rainbow+0x1a6>
 8004564:	edd7 7a05 	vldr	s15, [r7, #20]
 8004568:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800456c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004574:	d507      	bpl.n	8004586 <RGB_Rainbow+0x1a6>
			red = 0.0f;
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	63bb      	str	r3, [r7, #56]	; 0x38
			green = x;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	637b      	str	r3, [r7, #52]	; 0x34
			blue = chroma;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
 8004584:	e020      	b.n	80045c8 <RGB_Rainbow+0x1e8>
		} else if (huePrime >= 4.0f && huePrime < 5.0f) {
 8004586:	edd7 7a05 	vldr	s15, [r7, #20]
 800458a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800458e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004596:	db10      	blt.n	80045ba <RGB_Rainbow+0x1da>
 8004598:	edd7 7a05 	vldr	s15, [r7, #20]
 800459c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80045a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a8:	d507      	bpl.n	80045ba <RGB_Rainbow+0x1da>
			red = x;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	63bb      	str	r3, [r7, #56]	; 0x38
			green = 0.0f;
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	637b      	str	r3, [r7, #52]	; 0x34
			blue = chroma;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	633b      	str	r3, [r7, #48]	; 0x30
 80045b8:	e006      	b.n	80045c8 <RGB_Rainbow+0x1e8>
		} else {
			red = chroma;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	63bb      	str	r3, [r7, #56]	; 0x38
			green = 0.0f;
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	637b      	str	r3, [r7, #52]	; 0x34
			blue = x;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	633b      	str	r3, [r7, #48]	; 0x30
		}

		// slow fade in
		if (LEDtime == 0) {
 80045c8:	4b4f      	ldr	r3, [pc, #316]	; (8004708 <RGB_Rainbow+0x328>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d104      	bne.n	80045da <RGB_Rainbow+0x1fa>
			LEDtime = HAL_GetTick();
 80045d0:	f001 fe8a 	bl	80062e8 <HAL_GetTick>
 80045d4:	4603      	mov	r3, r0
 80045d6:	4a4c      	ldr	r2, [pc, #304]	; (8004708 <RGB_Rainbow+0x328>)
 80045d8:	6013      	str	r3, [r2, #0]
		}

		float intensity;
		if (HAL_GetTick() - LEDtime < 4000) {
 80045da:	f001 fe85 	bl	80062e8 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	4b49      	ldr	r3, [pc, #292]	; (8004708 <RGB_Rainbow+0x328>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80045ea:	d216      	bcs.n	800461a <RGB_Rainbow+0x23a>
			intensity = (HAL_GetTick() - LEDtime) / 4000.0;
 80045ec:	f001 fe7c 	bl	80062e8 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b45      	ldr	r3, [pc, #276]	; (8004708 <RGB_Rainbow+0x328>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fb ff8b 	bl	8000514 <__aeabi_ui2d>
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	4b42      	ldr	r3, [pc, #264]	; (800470c <RGB_Rainbow+0x32c>)
 8004604:	f7fc f92a 	bl	800085c <__aeabi_ddiv>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	f7fc faf2 	bl	8000bf8 <__aeabi_d2f>
 8004614:	4603      	mov	r3, r0
 8004616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004618:	e002      	b.n	8004620 <RGB_Rainbow+0x240>
		} else {
			intensity = 1;
 800461a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800461e:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		intensity = sqrt(intensity);
 8004620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004622:	f7fb ff99 	bl	8000558 <__aeabi_f2d>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	ec43 2b10 	vmov	d0, r2, r3
 800462e:	f00c fb6d 	bl	8010d0c <sqrt>
 8004632:	ec53 2b10 	vmov	r2, r3, d0
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	f7fc fadd 	bl	8000bf8 <__aeabi_d2f>
 800463e:	4603      	mov	r3, r0
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c

		// breathing pattern
		float intensity2;
		if (dobreathing) {
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d069      	beq.n	800471c <RGB_Rainbow+0x33c>
			intensity2 = 0.1 + 0.9 * (0.5 * (1.0 + sinf((2.0 * PI * elapsed) / 2000)));
 8004648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800464a:	f7fb ff63 	bl	8000514 <__aeabi_ui2d>
 800464e:	a324      	add	r3, pc, #144	; (adr r3, 80046e0 <RGB_Rainbow+0x300>)
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f7fb ffd8 	bl	8000608 <__aeabi_dmul>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4610      	mov	r0, r2
 800465e:	4619      	mov	r1, r3
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	4b2a      	ldr	r3, [pc, #168]	; (8004710 <RGB_Rainbow+0x330>)
 8004666:	f7fc f8f9 	bl	800085c <__aeabi_ddiv>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4610      	mov	r0, r2
 8004670:	4619      	mov	r1, r3
 8004672:	f7fc fac1 	bl	8000bf8 <__aeabi_d2f>
 8004676:	4603      	mov	r3, r0
 8004678:	ee00 3a10 	vmov	s0, r3
 800467c:	f00c fb00 	bl	8010c80 <sinf>
 8004680:	ee10 3a10 	vmov	r3, s0
 8004684:	4618      	mov	r0, r3
 8004686:	f7fb ff67 	bl	8000558 <__aeabi_f2d>
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	4b21      	ldr	r3, [pc, #132]	; (8004714 <RGB_Rainbow+0x334>)
 8004690:	f7fb fe04 	bl	800029c <__adddf3>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4610      	mov	r0, r2
 800469a:	4619      	mov	r1, r3
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	4b1d      	ldr	r3, [pc, #116]	; (8004718 <RGB_Rainbow+0x338>)
 80046a2:	f7fb ffb1 	bl	8000608 <__aeabi_dmul>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4610      	mov	r0, r2
 80046ac:	4619      	mov	r1, r3
 80046ae:	a30e      	add	r3, pc, #56	; (adr r3, 80046e8 <RGB_Rainbow+0x308>)
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	f7fb ffa8 	bl	8000608 <__aeabi_dmul>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4610      	mov	r0, r2
 80046be:	4619      	mov	r1, r3
 80046c0:	a30b      	add	r3, pc, #44	; (adr r3, 80046f0 <RGB_Rainbow+0x310>)
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	f7fb fde9 	bl	800029c <__adddf3>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4610      	mov	r0, r2
 80046d0:	4619      	mov	r1, r3
 80046d2:	f7fc fa91 	bl	8000bf8 <__aeabi_d2f>
 80046d6:	4603      	mov	r3, r0
 80046d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046da:	e022      	b.n	8004722 <RGB_Rainbow+0x342>
 80046dc:	f3af 8000 	nop.w
 80046e0:	60000000 	.word	0x60000000
 80046e4:	401921fb 	.word	0x401921fb
 80046e8:	cccccccd 	.word	0xcccccccd
 80046ec:	3feccccc 	.word	0x3feccccc
 80046f0:	9999999a 	.word	0x9999999a
 80046f4:	3fb99999 	.word	0x3fb99999
 80046f8:	20001980 	.word	0x20001980
 80046fc:	08012e58 	.word	0x08012e58
 8004700:	43b40000 	.word	0x43b40000
 8004704:	42700000 	.word	0x42700000
 8004708:	200018f8 	.word	0x200018f8
 800470c:	40af4000 	.word	0x40af4000
 8004710:	409f4000 	.word	0x409f4000
 8004714:	3ff00000 	.word	0x3ff00000
 8004718:	3fe00000 	.word	0x3fe00000
		} else {
			intensity2 = 1.0;
 800471c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004720:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		// Scale RGB values to 0-255 range
		uint8_t r = (uint8_t) (red * 255.0 * intensity * intensity2);
 8004722:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004724:	f7fb ff18 	bl	8000558 <__aeabi_f2d>
 8004728:	a347      	add	r3, pc, #284	; (adr r3, 8004848 <RGB_Rainbow+0x468>)
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	f7fb ff6b 	bl	8000608 <__aeabi_dmul>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4614      	mov	r4, r2
 8004738:	461d      	mov	r5, r3
 800473a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800473c:	f7fb ff0c 	bl	8000558 <__aeabi_f2d>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4620      	mov	r0, r4
 8004746:	4629      	mov	r1, r5
 8004748:	f7fb ff5e 	bl	8000608 <__aeabi_dmul>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4614      	mov	r4, r2
 8004752:	461d      	mov	r5, r3
 8004754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004756:	f7fb feff 	bl	8000558 <__aeabi_f2d>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4620      	mov	r0, r4
 8004760:	4629      	mov	r1, r5
 8004762:	f7fb ff51 	bl	8000608 <__aeabi_dmul>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4610      	mov	r0, r2
 800476c:	4619      	mov	r1, r3
 800476e:	f7fc fa23 	bl	8000bb8 <__aeabi_d2uiz>
 8004772:	4603      	mov	r3, r0
 8004774:	72fb      	strb	r3, [r7, #11]
		uint8_t g = (uint8_t) (green * 255.0 * intensity * intensity2);
 8004776:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004778:	f7fb feee 	bl	8000558 <__aeabi_f2d>
 800477c:	a332      	add	r3, pc, #200	; (adr r3, 8004848 <RGB_Rainbow+0x468>)
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	f7fb ff41 	bl	8000608 <__aeabi_dmul>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4614      	mov	r4, r2
 800478c:	461d      	mov	r5, r3
 800478e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004790:	f7fb fee2 	bl	8000558 <__aeabi_f2d>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4620      	mov	r0, r4
 800479a:	4629      	mov	r1, r5
 800479c:	f7fb ff34 	bl	8000608 <__aeabi_dmul>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4614      	mov	r4, r2
 80047a6:	461d      	mov	r5, r3
 80047a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047aa:	f7fb fed5 	bl	8000558 <__aeabi_f2d>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4620      	mov	r0, r4
 80047b4:	4629      	mov	r1, r5
 80047b6:	f7fb ff27 	bl	8000608 <__aeabi_dmul>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4610      	mov	r0, r2
 80047c0:	4619      	mov	r1, r3
 80047c2:	f7fc f9f9 	bl	8000bb8 <__aeabi_d2uiz>
 80047c6:	4603      	mov	r3, r0
 80047c8:	72bb      	strb	r3, [r7, #10]
		uint8_t b = (uint8_t) (blue * 255.0 * intensity * intensity2);
 80047ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047cc:	f7fb fec4 	bl	8000558 <__aeabi_f2d>
 80047d0:	a31d      	add	r3, pc, #116	; (adr r3, 8004848 <RGB_Rainbow+0x468>)
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	f7fb ff17 	bl	8000608 <__aeabi_dmul>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4614      	mov	r4, r2
 80047e0:	461d      	mov	r5, r3
 80047e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047e4:	f7fb feb8 	bl	8000558 <__aeabi_f2d>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4620      	mov	r0, r4
 80047ee:	4629      	mov	r1, r5
 80047f0:	f7fb ff0a 	bl	8000608 <__aeabi_dmul>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4614      	mov	r4, r2
 80047fa:	461d      	mov	r5, r3
 80047fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047fe:	f7fb feab 	bl	8000558 <__aeabi_f2d>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4620      	mov	r0, r4
 8004808:	4629      	mov	r1, r5
 800480a:	f7fb fefd 	bl	8000608 <__aeabi_dmul>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4610      	mov	r0, r2
 8004814:	4619      	mov	r1, r3
 8004816:	f7fc f9cf 	bl	8000bb8 <__aeabi_d2uiz>
 800481a:	4603      	mov	r3, r0
 800481c:	727b      	strb	r3, [r7, #9]

		// Set LED color
		Set_LED(i, r, g, b);
 800481e:	7af9      	ldrb	r1, [r7, #11]
 8004820:	7aba      	ldrb	r2, [r7, #10]
 8004822:	7a7b      	ldrb	r3, [r7, #9]
 8004824:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004826:	f7fe fc7f 	bl	8003128 <Set_LED>
	for (int i = 0; i < MAX_LED; i++) {
 800482a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800482c:	3301      	adds	r3, #1
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004832:	2b3b      	cmp	r3, #59	; 0x3b
 8004834:	f77f ae09 	ble.w	800444a <RGB_Rainbow+0x6a>
	}
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	3740      	adds	r7, #64	; 0x40
 800483e:	46bd      	mov	sp, r7
 8004840:	bdb0      	pop	{r4, r5, r7, pc}
 8004842:	bf00      	nop
 8004844:	f3af 8000 	nop.w
 8004848:	00000000 	.word	0x00000000
 800484c:	406fe000 	.word	0x406fe000

08004850 <RGB_Bootup>:

void RGB_Bootup(void) {
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
	for (int i = 0; i < 60; i++) {
 8004856:	2300      	movs	r3, #0
 8004858:	607b      	str	r3, [r7, #4]
 800485a:	e010      	b.n	800487e <RGB_Bootup+0x2e>
		Set_LED(i, 255, 0, 0);
 800485c:	2300      	movs	r3, #0
 800485e:	2200      	movs	r2, #0
 8004860:	21ff      	movs	r1, #255	; 0xff
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fe fc60 	bl	8003128 <Set_LED>
		HAL_Delay(10);
 8004868:	200a      	movs	r0, #10
 800486a:	f001 fd49 	bl	8006300 <HAL_Delay>
		Set_Brightness(45);
 800486e:	202d      	movs	r0, #45	; 0x2d
 8004870:	f7fe fc8a 	bl	8003188 <Set_Brightness>
		WS2812_Send();
 8004874:	f7fe fd0a 	bl	800328c <WS2812_Send>
	for (int i = 0; i < 60; i++) {
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3301      	adds	r3, #1
 800487c:	607b      	str	r3, [r7, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b3b      	cmp	r3, #59	; 0x3b
 8004882:	ddeb      	ble.n	800485c <RGB_Bootup+0xc>
	}
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <RGB_BreathingPattern>:

void RGB_BreathingPattern(uint32_t period, uint8_t R, uint8_t G, uint8_t B) {
 8004890:	b5b0      	push	{r4, r5, r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	4608      	mov	r0, r1
 800489a:	4611      	mov	r1, r2
 800489c:	461a      	mov	r2, r3
 800489e:	4603      	mov	r3, r0
 80048a0:	70fb      	strb	r3, [r7, #3]
 80048a2:	460b      	mov	r3, r1
 80048a4:	70bb      	strb	r3, [r7, #2]
 80048a6:	4613      	mov	r3, r2
 80048a8:	707b      	strb	r3, [r7, #1]
	if (LEDtime == 0) {
 80048aa:	4b69      	ldr	r3, [pc, #420]	; (8004a50 <RGB_BreathingPattern+0x1c0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d104      	bne.n	80048bc <RGB_BreathingPattern+0x2c>
		LEDtime = HAL_GetTick();
 80048b2:	f001 fd19 	bl	80062e8 <HAL_GetTick>
 80048b6:	4603      	mov	r3, r0
 80048b8:	4a65      	ldr	r2, [pc, #404]	; (8004a50 <RGB_BreathingPattern+0x1c0>)
 80048ba:	6013      	str	r3, [r2, #0]
	}

	uint32_t elapsedTime = HAL_GetTick() - LEDtime;
 80048bc:	f001 fd14 	bl	80062e8 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b63      	ldr	r3, [pc, #396]	; (8004a50 <RGB_BreathingPattern+0x1c0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	60fb      	str	r3, [r7, #12]
	float intensity;

	intensity = 0.5 * (1.0 + sinf((2.0 * PI * elapsedTime) / period));
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7fb fe22 	bl	8000514 <__aeabi_ui2d>
 80048d0:	a35d      	add	r3, pc, #372	; (adr r3, 8004a48 <RGB_BreathingPattern+0x1b8>)
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	f7fb fe97 	bl	8000608 <__aeabi_dmul>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4614      	mov	r4, r2
 80048e0:	461d      	mov	r5, r3
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fb fe16 	bl	8000514 <__aeabi_ui2d>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4620      	mov	r0, r4
 80048ee:	4629      	mov	r1, r5
 80048f0:	f7fb ffb4 	bl	800085c <__aeabi_ddiv>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4610      	mov	r0, r2
 80048fa:	4619      	mov	r1, r3
 80048fc:	f7fc f97c 	bl	8000bf8 <__aeabi_d2f>
 8004900:	4603      	mov	r3, r0
 8004902:	ee00 3a10 	vmov	s0, r3
 8004906:	f00c f9bb 	bl	8010c80 <sinf>
 800490a:	ee10 3a10 	vmov	r3, s0
 800490e:	4618      	mov	r0, r3
 8004910:	f7fb fe22 	bl	8000558 <__aeabi_f2d>
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	4b4e      	ldr	r3, [pc, #312]	; (8004a54 <RGB_BreathingPattern+0x1c4>)
 800491a:	f7fb fcbf 	bl	800029c <__adddf3>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4610      	mov	r0, r2
 8004924:	4619      	mov	r1, r3
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	4b4b      	ldr	r3, [pc, #300]	; (8004a58 <RGB_BreathingPattern+0x1c8>)
 800492c:	f7fb fe6c 	bl	8000608 <__aeabi_dmul>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4610      	mov	r0, r2
 8004936:	4619      	mov	r1, r3
 8004938:	f7fc f95e 	bl	8000bf8 <__aeabi_d2f>
 800493c:	4603      	mov	r3, r0
 800493e:	60bb      	str	r3, [r7, #8]

	// slow fade in
	if (LEDtime == 0) {
 8004940:	4b43      	ldr	r3, [pc, #268]	; (8004a50 <RGB_BreathingPattern+0x1c0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d104      	bne.n	8004952 <RGB_BreathingPattern+0xc2>
		LEDtime = HAL_GetTick();
 8004948:	f001 fcce 	bl	80062e8 <HAL_GetTick>
 800494c:	4603      	mov	r3, r0
 800494e:	4a40      	ldr	r2, [pc, #256]	; (8004a50 <RGB_BreathingPattern+0x1c0>)
 8004950:	6013      	str	r3, [r2, #0]
	}

	float intensity2;
	if (HAL_GetTick() - LEDtime < 4000) {
 8004952:	f001 fcc9 	bl	80062e8 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	4b3d      	ldr	r3, [pc, #244]	; (8004a50 <RGB_BreathingPattern+0x1c0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004962:	d216      	bcs.n	8004992 <RGB_BreathingPattern+0x102>
		intensity2 = (HAL_GetTick() - LEDtime) / 4000.0;
 8004964:	f001 fcc0 	bl	80062e8 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	4b39      	ldr	r3, [pc, #228]	; (8004a50 <RGB_BreathingPattern+0x1c0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	4618      	mov	r0, r3
 8004972:	f7fb fdcf 	bl	8000514 <__aeabi_ui2d>
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	4b38      	ldr	r3, [pc, #224]	; (8004a5c <RGB_BreathingPattern+0x1cc>)
 800497c:	f7fb ff6e 	bl	800085c <__aeabi_ddiv>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4610      	mov	r0, r2
 8004986:	4619      	mov	r1, r3
 8004988:	f7fc f936 	bl	8000bf8 <__aeabi_d2f>
 800498c:	4603      	mov	r3, r0
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	e002      	b.n	8004998 <RGB_BreathingPattern+0x108>
	} else {
		intensity2 = 1;
 8004992:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004996:	617b      	str	r3, [r7, #20]
	}

	intensity2 = sqrt(intensity2);
 8004998:	6978      	ldr	r0, [r7, #20]
 800499a:	f7fb fddd 	bl	8000558 <__aeabi_f2d>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	ec43 2b10 	vmov	d0, r2, r3
 80049a6:	f00c f9b1 	bl	8010d0c <sqrt>
 80049aa:	ec53 2b10 	vmov	r2, r3, d0
 80049ae:	4610      	mov	r0, r2
 80049b0:	4619      	mov	r1, r3
 80049b2:	f7fc f921 	bl	8000bf8 <__aeabi_d2f>
 80049b6:	4603      	mov	r3, r0
 80049b8:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < MAX_LED; i++) {
 80049ba:	2300      	movs	r3, #0
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	e038      	b.n	8004a32 <RGB_BreathingPattern+0x1a2>
		Set_LED(i, R * intensity * intensity2, G * intensity * intensity2, B * intensity * intensity2);
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80049ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80049d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049da:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80049de:	78bb      	ldrb	r3, [r7, #2]
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80049ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80049f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f8:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 80049fc:	787b      	ldrb	r3, [r7, #1]
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a06:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a1a:	ee17 3a90 	vmov	r3, s15
 8004a1e:	ee16 2a10 	vmov	r2, s12
 8004a22:	ee16 1a90 	vmov	r1, s13
 8004a26:	6938      	ldr	r0, [r7, #16]
 8004a28:	f7fe fb7e 	bl	8003128 <Set_LED>
	for (int i = 0; i < MAX_LED; i++) {
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b3b      	cmp	r3, #59	; 0x3b
 8004a36:	ddc3      	ble.n	80049c0 <RGB_BreathingPattern+0x130>
	}
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bdb0      	pop	{r4, r5, r7, pc}
 8004a42:	bf00      	nop
 8004a44:	f3af 8000 	nop.w
 8004a48:	60000000 	.word	0x60000000
 8004a4c:	401921fb 	.word	0x401921fb
 8004a50:	200018f8 	.word	0x200018f8
 8004a54:	3ff00000 	.word	0x3ff00000
 8004a58:	3fe00000 	.word	0x3fe00000
 8004a5c:	40af4000 	.word	0x40af4000

08004a60 <RGB_TrayProgress>:

void RGB_TrayProgress(uint8_t point) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	71fb      	strb	r3, [r7, #7]
	float percentage = (point + 1.0) / 9.0;
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fb fd61 	bl	8000534 <__aeabi_i2d>
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <RGB_TrayProgress+0x84>)
 8004a78:	f7fb fc10 	bl	800029c <__adddf3>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4610      	mov	r0, r2
 8004a82:	4619      	mov	r1, r3
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <RGB_TrayProgress+0x88>)
 8004a8a:	f7fb fee7 	bl	800085c <__aeabi_ddiv>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4610      	mov	r0, r2
 8004a94:	4619      	mov	r1, r3
 8004a96:	f7fc f8af 	bl	8000bf8 <__aeabi_d2f>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < (int) (60.0 * percentage); i++) {
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	e008      	b.n	8004ab6 <RGB_TrayProgress+0x56>
		Set_LED(i, 0, 255, 0);
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	22ff      	movs	r2, #255	; 0xff
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7fe fb3c 	bl	8003128 <Set_LED>
	for (int i = 0; i < (int) (60.0 * percentage); i++) {
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	68b8      	ldr	r0, [r7, #8]
 8004ab8:	f7fb fd4e 	bl	8000558 <__aeabi_f2d>
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <RGB_TrayProgress+0x8c>)
 8004ac2:	f7fb fda1 	bl	8000608 <__aeabi_dmul>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4610      	mov	r0, r2
 8004acc:	4619      	mov	r1, r3
 8004ace:	f7fc f84b 	bl	8000b68 <__aeabi_d2iz>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	dbe4      	blt.n	8004aa4 <RGB_TrayProgress+0x44>
	}
}
 8004ada:	bf00      	nop
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	3ff00000 	.word	0x3ff00000
 8004ae8:	40220000 	.word	0x40220000
 8004aec:	404e0000 	.word	0x404e0000

08004af0 <speaker_logic>:
void speaker_logic();
void speaker_play(uint8_t folder, uint8_t track);

// USER CODE ======================================================================================

void speaker_logic() {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
	if (!speaker_queue) {
 8004af4:	4b25      	ldr	r3, [pc, #148]	; (8004b8c <speaker_logic+0x9c>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d045      	beq.n	8004b88 <speaker_logic+0x98>
		return;
	}
	static uint8_t byte_n = 0;
	static uint8_t bit_n = 0;

	if (bit_n == 0) {
 8004afc:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <speaker_logic+0xa0>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d105      	bne.n	8004b10 <speaker_logic+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004b04:	2200      	movs	r2, #0
 8004b06:	2110      	movs	r1, #16
 8004b08:	4822      	ldr	r0, [pc, #136]	; (8004b94 <speaker_logic+0xa4>)
 8004b0a:	f002 fd4b 	bl	80075a4 <HAL_GPIO_WritePin>
 8004b0e:	e01d      	b.n	8004b4c <speaker_logic+0x5c>
	} else if (bit_n == 9) {
 8004b10:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <speaker_logic+0xa0>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b09      	cmp	r3, #9
 8004b16:	d105      	bne.n	8004b24 <speaker_logic+0x34>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004b18:	2201      	movs	r2, #1
 8004b1a:	2110      	movs	r1, #16
 8004b1c:	481d      	ldr	r0, [pc, #116]	; (8004b94 <speaker_logic+0xa4>)
 8004b1e:	f002 fd41 	bl	80075a4 <HAL_GPIO_WritePin>
 8004b22:	e013      	b.n	8004b4c <speaker_logic+0x5c>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, ((speaker_data[byte_n] >> (bit_n - 1)) & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004b24:	4b1c      	ldr	r3, [pc, #112]	; (8004b98 <speaker_logic+0xa8>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4b1c      	ldr	r3, [pc, #112]	; (8004b9c <speaker_logic+0xac>)
 8004b2c:	5c9b      	ldrb	r3, [r3, r2]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	4b17      	ldr	r3, [pc, #92]	; (8004b90 <speaker_logic+0xa0>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	fa42 f303 	asr.w	r3, r2, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	2110      	movs	r1, #16
 8004b46:	4813      	ldr	r0, [pc, #76]	; (8004b94 <speaker_logic+0xa4>)
 8004b48:	f002 fd2c 	bl	80075a4 <HAL_GPIO_WritePin>
	}

	bit_n++;
 8004b4c:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <speaker_logic+0xa0>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	3301      	adds	r3, #1
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <speaker_logic+0xa0>)
 8004b56:	701a      	strb	r2, [r3, #0]
	if (bit_n >= 10) {
 8004b58:	4b0d      	ldr	r3, [pc, #52]	; (8004b90 <speaker_logic+0xa0>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b09      	cmp	r3, #9
 8004b5e:	d908      	bls.n	8004b72 <speaker_logic+0x82>
		bit_n = 0;
 8004b60:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <speaker_logic+0xa0>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]
		byte_n++;
 8004b66:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <speaker_logic+0xa8>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <speaker_logic+0xa8>)
 8004b70:	701a      	strb	r2, [r3, #0]
	}

	if (byte_n >= 8) {
 8004b72:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <speaker_logic+0xa8>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b07      	cmp	r3, #7
 8004b78:	d907      	bls.n	8004b8a <speaker_logic+0x9a>
		byte_n = 0;
 8004b7a:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <speaker_logic+0xa8>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
		speaker_queue = 0;
 8004b80:	4b02      	ldr	r3, [pc, #8]	; (8004b8c <speaker_logic+0x9c>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	e000      	b.n	8004b8a <speaker_logic+0x9a>
		return;
 8004b88:	bf00      	nop
	}
}
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	200018fc 	.word	0x200018fc
 8004b90:	20001984 	.word	0x20001984
 8004b94:	40020000 	.word	0x40020000
 8004b98:	20001985 	.word	0x20001985
 8004b9c:	20001900 	.word	0x20001900

08004ba0 <speaker_play>:

void speaker_play(uint8_t folder, uint8_t track) {
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	460a      	mov	r2, r1
 8004baa:	71fb      	strb	r3, [r7, #7]
 8004bac:	4613      	mov	r3, r2
 8004bae:	71bb      	strb	r3, [r7, #6]
	if (speaker_queue) {
 8004bb0:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <speaker_play+0x5c>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d11b      	bne.n	8004bf0 <speaker_play+0x50>
		return;
	}
	speaker_data[0] = 0x7E;
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <speaker_play+0x60>)
 8004bba:	227e      	movs	r2, #126	; 0x7e
 8004bbc:	701a      	strb	r2, [r3, #0]
	speaker_data[1] = 0xFF;
 8004bbe:	4b10      	ldr	r3, [pc, #64]	; (8004c00 <speaker_play+0x60>)
 8004bc0:	22ff      	movs	r2, #255	; 0xff
 8004bc2:	705a      	strb	r2, [r3, #1]
	speaker_data[2] = 0x06;
 8004bc4:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <speaker_play+0x60>)
 8004bc6:	2206      	movs	r2, #6
 8004bc8:	709a      	strb	r2, [r3, #2]
	speaker_data[3] = 0x0F;
 8004bca:	4b0d      	ldr	r3, [pc, #52]	; (8004c00 <speaker_play+0x60>)
 8004bcc:	220f      	movs	r2, #15
 8004bce:	70da      	strb	r2, [r3, #3]
	speaker_data[4] = 0x00;
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <speaker_play+0x60>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	711a      	strb	r2, [r3, #4]
	speaker_data[5] = folder;
 8004bd6:	4a0a      	ldr	r2, [pc, #40]	; (8004c00 <speaker_play+0x60>)
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	7153      	strb	r3, [r2, #5]
	speaker_data[6] = track;
 8004bdc:	4a08      	ldr	r2, [pc, #32]	; (8004c00 <speaker_play+0x60>)
 8004bde:	79bb      	ldrb	r3, [r7, #6]
 8004be0:	7193      	strb	r3, [r2, #6]
	speaker_data[7] = 0xEF;
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <speaker_play+0x60>)
 8004be4:	22ef      	movs	r2, #239	; 0xef
 8004be6:	71da      	strb	r2, [r3, #7]

	speaker_queue = 1;
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <speaker_play+0x5c>)
 8004bea:	2201      	movs	r2, #1
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	e000      	b.n	8004bf2 <speaker_play+0x52>
		return;
 8004bf0:	bf00      	nop
}
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	200018fc 	.word	0x200018fc
 8004c00:	20001900 	.word	0x20001900

08004c04 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	MBvariables.x_target_acceleration_time = 1;
 8004c08:	4b29      	ldr	r3, [pc, #164]	; (8004cb0 <main+0xac>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	845a      	strh	r2, [r3, #34]	; 0x22
	MBvariables.x_target_speed = 1000;
 8004c0e:	4b28      	ldr	r3, [pc, #160]	; (8004cb0 <main+0xac>)
 8004c10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c14:	841a      	strh	r2, [r3, #32]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004c16:	f001 fb01 	bl	800621c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004c1a:	f000 f857 	bl	8004ccc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004c1e:	f7fd faed 	bl	80021fc <MX_GPIO_Init>
	MX_DMA_Init();
 8004c22:	f7fd faad 	bl	8002180 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8004c26:	f001 f9b3 	bl	8005f90 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8004c2a:	f7fd fb9d 	bl	8002368 <MX_I2C1_Init>
	MX_TIM1_Init();
 8004c2e:	f000 fa8d 	bl	800514c <MX_TIM1_Init>
	MX_TIM2_Init();
 8004c32:	f000 fb2b 	bl	800528c <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8004c36:	f001 f981 	bl	8005f3c <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8004c3a:	f7fd fa0b 	bl	8002054 <MX_ADC1_Init>
	MX_TIM9_Init();
 8004c3e:	f000 fbef 	bl	8005420 <MX_TIM9_Init>
	MX_TIM11_Init();
 8004c42:	f000 fc49 	bl	80054d8 <MX_TIM11_Init>
	MX_TIM3_Init();
 8004c46:	f000 fb75 	bl	8005334 <MX_TIM3_Init>
	MX_TIM10_Init();
 8004c4a:	f000 fc23 	bl	8005494 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */

	// start timer 1 in PWM for motor
	HAL_TIM_Base_Start(&htim1);
 8004c4e:	4819      	ldr	r0, [pc, #100]	; (8004cb4 <main+0xb0>)
 8004c50:	f003 fe1a 	bl	8008888 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004c54:	2100      	movs	r1, #0
 8004c56:	4817      	ldr	r0, [pc, #92]	; (8004cb4 <main+0xb0>)
 8004c58:	f003 ff9e 	bl	8008b98 <HAL_TIM_PWM_Start>

	// Start timer in encoder mode
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8004c5c:	2104      	movs	r1, #4
 8004c5e:	4816      	ldr	r0, [pc, #88]	; (8004cb8 <main+0xb4>)
 8004c60:	f004 fc42 	bl	80094e8 <HAL_TIM_Encoder_Start>

	// Timer 9 Timer Interrupt (1000Hz)
	HAL_TIM_Base_Start_IT(&htim9);
 8004c64:	4815      	ldr	r0, [pc, #84]	; (8004cbc <main+0xb8>)
 8004c66:	f003 fe69 	bl	800893c <HAL_TIM_Base_Start_IT>

	// Timer 10 Timer Interrupt (9600Hz)
	HAL_TIM_Base_Start_IT(&htim10);
 8004c6a:	4815      	ldr	r0, [pc, #84]	; (8004cc0 <main+0xbc>)
 8004c6c:	f003 fe66 	bl	800893c <HAL_TIM_Base_Start_IT>

	// Initialize modbus
	modbus_init();
 8004c70:	f7fe f8e2 	bl	8002e38 <modbus_init>

	// Initialize UART1
	UARTInterruptConfig();
 8004c74:	f7fc fc72 	bl	800155c <UARTInterruptConfig>

	// Startup tasks
	speaker_play(50, 1);
 8004c78:	2101      	movs	r1, #1
 8004c7a:	2032      	movs	r0, #50	; 0x32
 8004c7c:	f7ff ff90 	bl	8004ba0 <speaker_play>
	RGB_Bootup();
 8004c80:	f7ff fde6 	bl	8004850 <RGB_Bootup>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Modbus_Protocal_Worker();
 8004c84:	f7fc fed0 	bl	8001a28 <Modbus_Protocal_Worker>
		modbus_heartbeat_handler(&MBvariables);
 8004c88:	4809      	ldr	r0, [pc, #36]	; (8004cb0 <main+0xac>)
 8004c8a:	f7fe f8f1 	bl	8002e70 <modbus_heartbeat_handler>
		modbus_data_sync(&MBvariables);
 8004c8e:	4808      	ldr	r0, [pc, #32]	; (8004cb0 <main+0xac>)
 8004c90:	f7fe f930 	bl	8002ef4 <modbus_data_sync>
		QEIReadHome = getLocalPosition();
 8004c94:	f7fd fc3e 	bl	8002514 <getLocalPosition>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	; (8004cc4 <main+0xc0>)
 8004c9c:	6013      	str	r3, [r2, #0]
		QEIReadRaw = getRawPosition();
 8004c9e:	f7fd fc4b 	bl	8002538 <getRawPosition>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4a08      	ldr	r2, [pc, #32]	; (8004cc8 <main+0xc4>)
 8004ca6:	6013      	str	r3, [r2, #0]
		main_logic(&MBvariables);
 8004ca8:	4801      	ldr	r0, [pc, #4]	; (8004cb0 <main+0xac>)
 8004caa:	f7fe fb79 	bl	80033a0 <main_logic>
		Modbus_Protocal_Worker();
 8004cae:	e7e9      	b.n	8004c84 <main+0x80>
 8004cb0:	2000191c 	.word	0x2000191c
 8004cb4:	2000198c 	.word	0x2000198c
 8004cb8:	20001a40 	.word	0x20001a40
 8004cbc:	20001ba8 	.word	0x20001ba8
 8004cc0:	20001c5c 	.word	0x20001c5c
 8004cc4:	2000190c 	.word	0x2000190c
 8004cc8:	20001908 	.word	0x20001908

08004ccc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b094      	sub	sp, #80	; 0x50
 8004cd0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004cd2:	f107 0320 	add.w	r3, r7, #32
 8004cd6:	2230      	movs	r2, #48	; 0x30
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f007 f8dc 	bl	800be98 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004ce0:	f107 030c 	add.w	r3, r7, #12
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	605a      	str	r2, [r3, #4]
 8004cea:	609a      	str	r2, [r3, #8]
 8004cec:	60da      	str	r2, [r3, #12]
 8004cee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <SystemClock_Config+0xc8>)
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	4a26      	ldr	r2, [pc, #152]	; (8004d94 <SystemClock_Config+0xc8>)
 8004cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8004d00:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <SystemClock_Config+0xc8>)
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	607b      	str	r3, [r7, #4]
 8004d10:	4b21      	ldr	r3, [pc, #132]	; (8004d98 <SystemClock_Config+0xcc>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a20      	ldr	r2, [pc, #128]	; (8004d98 <SystemClock_Config+0xcc>)
 8004d16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	4b1e      	ldr	r3, [pc, #120]	; (8004d98 <SystemClock_Config+0xcc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d30:	2310      	movs	r3, #16
 8004d32:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d34:	2302      	movs	r3, #2
 8004d36:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004d3c:	2308      	movs	r3, #8
 8004d3e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8004d40:	2364      	movs	r3, #100	; 0x64
 8004d42:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d44:	2302      	movs	r3, #2
 8004d46:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004d48:	2304      	movs	r3, #4
 8004d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004d4c:	f107 0320 	add.w	r3, r7, #32
 8004d50:	4618      	mov	r0, r3
 8004d52:	f003 f8a5 	bl	8007ea0 <HAL_RCC_OscConfig>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <SystemClock_Config+0x94>
		Error_Handler();
 8004d5c:	f000 f862 	bl	8004e24 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d60:	230f      	movs	r3, #15
 8004d62:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d64:	2302      	movs	r3, #2
 8004d66:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d70:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8004d76:	f107 030c 	add.w	r3, r7, #12
 8004d7a:	2103      	movs	r1, #3
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f003 fb07 	bl	8008390 <HAL_RCC_ClockConfig>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <SystemClock_Config+0xc0>
		Error_Handler();
 8004d88:	f000 f84c 	bl	8004e24 <Error_Handler>
	}
}
 8004d8c:	bf00      	nop
 8004d8e:	3750      	adds	r7, #80	; 0x50
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40007000 	.word	0x40007000

08004d9c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	if (htim == &htim9) {
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a08      	ldr	r2, [pc, #32]	; (8004dc8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d102      	bne.n	8004db2 <HAL_TIM_PeriodElapsedCallback+0x16>
		interrupt_logic();
 8004dac:	f7fe fd62 	bl	8003874 <interrupt_logic>
	} else if (htim == &htim10) {
		speaker_logic();
	}
}
 8004db0:	e005      	b.n	8004dbe <HAL_TIM_PeriodElapsedCallback+0x22>
	} else if (htim == &htim10) {
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a05      	ldr	r2, [pc, #20]	; (8004dcc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d101      	bne.n	8004dbe <HAL_TIM_PeriodElapsedCallback+0x22>
		speaker_logic();
 8004dba:	f7ff fe99 	bl	8004af0 <speaker_logic>
}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20001ba8 	.word	0x20001ba8
 8004dcc:	20001c5c 	.word	0x20001c5c

08004dd0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a05      	ldr	r2, [pc, #20]	; (8004df0 <HAL_UART_RxCpltCallback+0x20>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d102      	bne.n	8004de6 <HAL_UART_RxCpltCallback+0x16>
		Joystick_Received((int*) &receivedByte);
 8004de0:	4804      	ldr	r0, [pc, #16]	; (8004df4 <HAL_UART_RxCpltCallback+0x24>)
 8004de2:	f7fc fc2b 	bl	800163c <Joystick_Received>
	}
}
 8004de6:	bf00      	nop
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20001e68 	.word	0x20001e68
 8004df4:	20001948 	.word	0x20001948

08004df8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d106      	bne.n	8004e16 <HAL_GPIO_EXTI_Callback+0x1e>
		home_handler();
 8004e08:	f7fe fde0 	bl	80039cc <home_handler>
		interrupt_count++;
 8004e0c:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <HAL_GPIO_EXTI_Callback+0x28>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3301      	adds	r3, #1
 8004e12:	4a03      	ldr	r2, [pc, #12]	; (8004e20 <HAL_GPIO_EXTI_Callback+0x28>)
 8004e14:	6013      	str	r3, [r2, #0]
	}
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20001958 	.word	0x20001958

08004e24 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e28:	b672      	cpsid	i
}
 8004e2a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004e2c:	e7fe      	b.n	8004e2c <Error_Handler+0x8>
	...

08004e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	607b      	str	r3, [r7, #4]
 8004e3a:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <HAL_MspInit+0x4c>)
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	4a0f      	ldr	r2, [pc, #60]	; (8004e7c <HAL_MspInit+0x4c>)
 8004e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e44:	6453      	str	r3, [r2, #68]	; 0x44
 8004e46:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <HAL_MspInit+0x4c>)
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e4e:	607b      	str	r3, [r7, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	603b      	str	r3, [r7, #0]
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <HAL_MspInit+0x4c>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	4a08      	ldr	r2, [pc, #32]	; (8004e7c <HAL_MspInit+0x4c>)
 8004e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e60:	6413      	str	r3, [r2, #64]	; 0x40
 8004e62:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <HAL_MspInit+0x4c>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004e6e:	2007      	movs	r0, #7
 8004e70:	f001 fdac 	bl	80069cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e74:	bf00      	nop
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40023800 	.word	0x40023800

08004e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e84:	e7fe      	b.n	8004e84 <NMI_Handler+0x4>

08004e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e86:	b480      	push	{r7}
 8004e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e8a:	e7fe      	b.n	8004e8a <HardFault_Handler+0x4>

08004e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e90:	e7fe      	b.n	8004e90 <MemManage_Handler+0x4>

08004e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e92:	b480      	push	{r7}
 8004e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e96:	e7fe      	b.n	8004e96 <BusFault_Handler+0x4>

08004e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e9c:	e7fe      	b.n	8004e9c <UsageFault_Handler+0x4>

08004e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ea2:	bf00      	nop
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004eb0:	bf00      	nop
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ebe:	bf00      	nop
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ecc:	f001 f9f8 	bl	80062c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ed0:	bf00      	nop
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004ed8:	2008      	movs	r0, #8
 8004eda:	f002 fb7d 	bl	80075d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004ede:	bf00      	nop
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8004ee8:	4802      	ldr	r0, [pc, #8]	; (8004ef4 <DMA1_Stream4_IRQHandler+0x10>)
 8004eea:	f001 ff49 	bl	8006d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004eee:	bf00      	nop
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20001dc4 	.word	0x20001dc4

08004ef8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004efc:	4802      	ldr	r0, [pc, #8]	; (8004f08 <DMA1_Stream6_IRQHandler+0x10>)
 8004efe:	f001 ff3f 	bl	8006d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004f02:	bf00      	nop
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20001fb0 	.word	0x20001fb0

08004f0c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f10:	4803      	ldr	r0, [pc, #12]	; (8004f20 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004f12:	f004 fb77 	bl	8009604 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8004f16:	4803      	ldr	r0, [pc, #12]	; (8004f24 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004f18:	f004 fb74 	bl	8009604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004f1c:	bf00      	nop
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	2000198c 	.word	0x2000198c
 8004f24:	20001ba8 	.word	0x20001ba8

08004f28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f2c:	4803      	ldr	r0, [pc, #12]	; (8004f3c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004f2e:	f004 fb69 	bl	8009604 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004f32:	4803      	ldr	r0, [pc, #12]	; (8004f40 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004f34:	f004 fb66 	bl	8009604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004f38:	bf00      	nop
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	2000198c 	.word	0x2000198c
 8004f40:	20001c5c 	.word	0x20001c5c

08004f44 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f48:	4803      	ldr	r0, [pc, #12]	; (8004f58 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004f4a:	f004 fb5b 	bl	8009604 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004f4e:	4803      	ldr	r0, [pc, #12]	; (8004f5c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004f50:	f004 fb58 	bl	8009604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004f54:	bf00      	nop
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	2000198c 	.word	0x2000198c
 8004f5c:	20001d10 	.word	0x20001d10

08004f60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004f64:	4802      	ldr	r0, [pc, #8]	; (8004f70 <USART1_IRQHandler+0x10>)
 8004f66:	f005 ff23 	bl	800adb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004f6a:	bf00      	nop
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20001e68 	.word	0x20001e68

08004f74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f78:	4802      	ldr	r0, [pc, #8]	; (8004f84 <USART2_IRQHandler+0x10>)
 8004f7a:	f005 ff19 	bl	800adb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004f7e:	bf00      	nop
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20001edc 	.word	0x20001edc

08004f88 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004f8c:	4802      	ldr	r0, [pc, #8]	; (8004f98 <DMA2_Stream7_IRQHandler+0x10>)
 8004f8e:	f001 fef7 	bl	8006d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004f92:	bf00      	nop
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20001f50 	.word	0x20001f50

08004f9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  return 1;
 8004fa0:	2301      	movs	r3, #1
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <_kill>:

int _kill(int pid, int sig)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004fb6:	f006 ff37 	bl	800be28 <__errno>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2216      	movs	r2, #22
 8004fbe:	601a      	str	r2, [r3, #0]
  return -1;
 8004fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <_exit>:

void _exit (int status)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff ffe7 	bl	8004fac <_kill>
  while (1) {}    /* Make sure we hang here */
 8004fde:	e7fe      	b.n	8004fde <_exit+0x12>

08004fe0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e00a      	b.n	8005008 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ff2:	f3af 8000 	nop.w
 8004ff6:	4601      	mov	r1, r0
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	60ba      	str	r2, [r7, #8]
 8004ffe:	b2ca      	uxtb	r2, r1
 8005000:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	3301      	adds	r3, #1
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	429a      	cmp	r2, r3
 800500e:	dbf0      	blt.n	8004ff2 <_read+0x12>
  }

  return len;
 8005010:	687b      	ldr	r3, [r7, #4]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b086      	sub	sp, #24
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	e009      	b.n	8005040 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	60ba      	str	r2, [r7, #8]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	3301      	adds	r3, #1
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	429a      	cmp	r2, r3
 8005046:	dbf1      	blt.n	800502c <_write+0x12>
  }
  return len;
 8005048:	687b      	ldr	r3, [r7, #4]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <_close>:

int _close(int file)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800505a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800507a:	605a      	str	r2, [r3, #4]
  return 0;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <_isatty>:

int _isatty(int file)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005092:	2301      	movs	r3, #1
}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
	...

080050bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050c4:	4a14      	ldr	r2, [pc, #80]	; (8005118 <_sbrk+0x5c>)
 80050c6:	4b15      	ldr	r3, [pc, #84]	; (800511c <_sbrk+0x60>)
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050d0:	4b13      	ldr	r3, [pc, #76]	; (8005120 <_sbrk+0x64>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050d8:	4b11      	ldr	r3, [pc, #68]	; (8005120 <_sbrk+0x64>)
 80050da:	4a12      	ldr	r2, [pc, #72]	; (8005124 <_sbrk+0x68>)
 80050dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <_sbrk+0x64>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4413      	add	r3, r2
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d207      	bcs.n	80050fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050ec:	f006 fe9c 	bl	800be28 <__errno>
 80050f0:	4603      	mov	r3, r0
 80050f2:	220c      	movs	r2, #12
 80050f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050f6:	f04f 33ff 	mov.w	r3, #4294967295
 80050fa:	e009      	b.n	8005110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050fc:	4b08      	ldr	r3, [pc, #32]	; (8005120 <_sbrk+0x64>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005102:	4b07      	ldr	r3, [pc, #28]	; (8005120 <_sbrk+0x64>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4413      	add	r3, r2
 800510a:	4a05      	ldr	r2, [pc, #20]	; (8005120 <_sbrk+0x64>)
 800510c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800510e:	68fb      	ldr	r3, [r7, #12]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20020000 	.word	0x20020000
 800511c:	00000400 	.word	0x00000400
 8005120:	20001988 	.word	0x20001988
 8005124:	20002028 	.word	0x20002028

08005128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800512c:	4b06      	ldr	r3, [pc, #24]	; (8005148 <SystemInit+0x20>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005132:	4a05      	ldr	r2, [pc, #20]	; (8005148 <SystemInit+0x20>)
 8005134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800513c:	bf00      	nop
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	e000ed00 	.word	0xe000ed00

0800514c <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b096      	sub	sp, #88	; 0x58
 8005150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005152:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	605a      	str	r2, [r3, #4]
 800515c:	609a      	str	r2, [r3, #8]
 800515e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005160:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800516a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	605a      	str	r2, [r3, #4]
 8005174:	609a      	str	r2, [r3, #8]
 8005176:	60da      	str	r2, [r3, #12]
 8005178:	611a      	str	r2, [r3, #16]
 800517a:	615a      	str	r2, [r3, #20]
 800517c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	2220      	movs	r2, #32
 8005182:	2100      	movs	r1, #0
 8005184:	4618      	mov	r0, r3
 8005186:	f006 fe87 	bl	800be98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800518a:	4b3e      	ldr	r3, [pc, #248]	; (8005284 <MX_TIM1_Init+0x138>)
 800518c:	4a3e      	ldr	r2, [pc, #248]	; (8005288 <MX_TIM1_Init+0x13c>)
 800518e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8005190:	4b3c      	ldr	r3, [pc, #240]	; (8005284 <MX_TIM1_Init+0x138>)
 8005192:	2204      	movs	r2, #4
 8005194:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005196:	4b3b      	ldr	r3, [pc, #236]	; (8005284 <MX_TIM1_Init+0x138>)
 8005198:	2200      	movs	r2, #0
 800519a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25000-1;
 800519c:	4b39      	ldr	r3, [pc, #228]	; (8005284 <MX_TIM1_Init+0x138>)
 800519e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 80051a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051a4:	4b37      	ldr	r3, [pc, #220]	; (8005284 <MX_TIM1_Init+0x138>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80051aa:	4b36      	ldr	r3, [pc, #216]	; (8005284 <MX_TIM1_Init+0x138>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051b0:	4b34      	ldr	r3, [pc, #208]	; (8005284 <MX_TIM1_Init+0x138>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80051b6:	4833      	ldr	r0, [pc, #204]	; (8005284 <MX_TIM1_Init+0x138>)
 80051b8:	f003 fb0a 	bl	80087d0 <HAL_TIM_Base_Init>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80051c2:	f7ff fe2f 	bl	8004e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80051cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80051d0:	4619      	mov	r1, r3
 80051d2:	482c      	ldr	r0, [pc, #176]	; (8005284 <MX_TIM1_Init+0x138>)
 80051d4:	f004 fc5c 	bl	8009a90 <HAL_TIM_ConfigClockSource>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80051de:	f7ff fe21 	bl	8004e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80051e2:	4828      	ldr	r0, [pc, #160]	; (8005284 <MX_TIM1_Init+0x138>)
 80051e4:	f003 fc72 	bl	8008acc <HAL_TIM_PWM_Init>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80051ee:	f7ff fe19 	bl	8004e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051f2:	2300      	movs	r3, #0
 80051f4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051f6:	2300      	movs	r3, #0
 80051f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80051fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80051fe:	4619      	mov	r1, r3
 8005200:	4820      	ldr	r0, [pc, #128]	; (8005284 <MX_TIM1_Init+0x138>)
 8005202:	f005 faa3 	bl	800a74c <HAL_TIMEx_MasterConfigSynchronization>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800520c:	f7ff fe0a 	bl	8004e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005210:	2360      	movs	r3, #96	; 0x60
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005214:	2300      	movs	r3, #0
 8005216:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005218:	2300      	movs	r3, #0
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800521c:	2300      	movs	r3, #0
 800521e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005220:	2300      	movs	r3, #0
 8005222:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005224:	2300      	movs	r3, #0
 8005226:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005228:	2300      	movs	r3, #0
 800522a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800522c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005230:	2200      	movs	r2, #0
 8005232:	4619      	mov	r1, r3
 8005234:	4813      	ldr	r0, [pc, #76]	; (8005284 <MX_TIM1_Init+0x138>)
 8005236:	f004 fb69 	bl	800990c <HAL_TIM_PWM_ConfigChannel>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8005240:	f7ff fdf0 	bl	8004e24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005244:	2300      	movs	r3, #0
 8005246:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005248:	2300      	movs	r3, #0
 800524a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800525c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800525e:	2300      	movs	r3, #0
 8005260:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005262:	1d3b      	adds	r3, r7, #4
 8005264:	4619      	mov	r1, r3
 8005266:	4807      	ldr	r0, [pc, #28]	; (8005284 <MX_TIM1_Init+0x138>)
 8005268:	f005 fade 	bl	800a828 <HAL_TIMEx_ConfigBreakDeadTime>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8005272:	f7ff fdd7 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005276:	4803      	ldr	r0, [pc, #12]	; (8005284 <MX_TIM1_Init+0x138>)
 8005278:	f000 faaa 	bl	80057d0 <HAL_TIM_MspPostInit>

}
 800527c:	bf00      	nop
 800527e:	3758      	adds	r7, #88	; 0x58
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	2000198c 	.word	0x2000198c
 8005288:	40010000 	.word	0x40010000

0800528c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08c      	sub	sp, #48	; 0x30
 8005290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005292:	f107 030c 	add.w	r3, r7, #12
 8005296:	2224      	movs	r2, #36	; 0x24
 8005298:	2100      	movs	r1, #0
 800529a:	4618      	mov	r0, r3
 800529c:	f006 fdfc 	bl	800be98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052a0:	1d3b      	adds	r3, r7, #4
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80052a8:	4b21      	ldr	r3, [pc, #132]	; (8005330 <MX_TIM2_Init+0xa4>)
 80052aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80052ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80052b0:	4b1f      	ldr	r3, [pc, #124]	; (8005330 <MX_TIM2_Init+0xa4>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052b6:	4b1e      	ldr	r3, [pc, #120]	; (8005330 <MX_TIM2_Init+0xa4>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80052bc:	4b1c      	ldr	r3, [pc, #112]	; (8005330 <MX_TIM2_Init+0xa4>)
 80052be:	f04f 32ff 	mov.w	r2, #4294967295
 80052c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052c4:	4b1a      	ldr	r3, [pc, #104]	; (8005330 <MX_TIM2_Init+0xa4>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052ca:	4b19      	ldr	r3, [pc, #100]	; (8005330 <MX_TIM2_Init+0xa4>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80052d0:	2303      	movs	r3, #3
 80052d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80052d4:	2300      	movs	r3, #0
 80052d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80052d8:	2301      	movs	r3, #1
 80052da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80052dc:	2300      	movs	r3, #0
 80052de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80052e4:	2300      	movs	r3, #0
 80052e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80052e8:	2301      	movs	r3, #1
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80052ec:	2300      	movs	r3, #0
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80052f4:	f107 030c 	add.w	r3, r7, #12
 80052f8:	4619      	mov	r1, r3
 80052fa:	480d      	ldr	r0, [pc, #52]	; (8005330 <MX_TIM2_Init+0xa4>)
 80052fc:	f004 f840 	bl	8009380 <HAL_TIM_Encoder_Init>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005306:	f7ff fd8d 	bl	8004e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800530a:	2300      	movs	r3, #0
 800530c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800530e:	2300      	movs	r3, #0
 8005310:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005312:	1d3b      	adds	r3, r7, #4
 8005314:	4619      	mov	r1, r3
 8005316:	4806      	ldr	r0, [pc, #24]	; (8005330 <MX_TIM2_Init+0xa4>)
 8005318:	f005 fa18 	bl	800a74c <HAL_TIMEx_MasterConfigSynchronization>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8005322:	f7ff fd7f 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005326:	bf00      	nop
 8005328:	3730      	adds	r7, #48	; 0x30
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20001a40 	.word	0x20001a40

08005334 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08e      	sub	sp, #56	; 0x38
 8005338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800533a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	605a      	str	r2, [r3, #4]
 8005344:	609a      	str	r2, [r3, #8]
 8005346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005348:	f107 0320 	add.w	r3, r7, #32
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005352:	1d3b      	adds	r3, r7, #4
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	605a      	str	r2, [r3, #4]
 800535a:	609a      	str	r2, [r3, #8]
 800535c:	60da      	str	r2, [r3, #12]
 800535e:	611a      	str	r2, [r3, #16]
 8005360:	615a      	str	r2, [r3, #20]
 8005362:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005364:	4b2c      	ldr	r3, [pc, #176]	; (8005418 <MX_TIM3_Init+0xe4>)
 8005366:	4a2d      	ldr	r2, [pc, #180]	; (800541c <MX_TIM3_Init+0xe8>)
 8005368:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800536a:	4b2b      	ldr	r3, [pc, #172]	; (8005418 <MX_TIM3_Init+0xe4>)
 800536c:	2200      	movs	r2, #0
 800536e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005370:	4b29      	ldr	r3, [pc, #164]	; (8005418 <MX_TIM3_Init+0xe4>)
 8005372:	2200      	movs	r2, #0
 8005374:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 125-1;
 8005376:	4b28      	ldr	r3, [pc, #160]	; (8005418 <MX_TIM3_Init+0xe4>)
 8005378:	227c      	movs	r2, #124	; 0x7c
 800537a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800537c:	4b26      	ldr	r3, [pc, #152]	; (8005418 <MX_TIM3_Init+0xe4>)
 800537e:	2200      	movs	r2, #0
 8005380:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005382:	4b25      	ldr	r3, [pc, #148]	; (8005418 <MX_TIM3_Init+0xe4>)
 8005384:	2200      	movs	r2, #0
 8005386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005388:	4823      	ldr	r0, [pc, #140]	; (8005418 <MX_TIM3_Init+0xe4>)
 800538a:	f003 fa21 	bl	80087d0 <HAL_TIM_Base_Init>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8005394:	f7ff fd46 	bl	8004e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800539e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053a2:	4619      	mov	r1, r3
 80053a4:	481c      	ldr	r0, [pc, #112]	; (8005418 <MX_TIM3_Init+0xe4>)
 80053a6:	f004 fb73 	bl	8009a90 <HAL_TIM_ConfigClockSource>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80053b0:	f7ff fd38 	bl	8004e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80053b4:	4818      	ldr	r0, [pc, #96]	; (8005418 <MX_TIM3_Init+0xe4>)
 80053b6:	f003 fb89 	bl	8008acc <HAL_TIM_PWM_Init>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80053c0:	f7ff fd30 	bl	8004e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053c4:	2300      	movs	r3, #0
 80053c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053c8:	2300      	movs	r3, #0
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80053cc:	f107 0320 	add.w	r3, r7, #32
 80053d0:	4619      	mov	r1, r3
 80053d2:	4811      	ldr	r0, [pc, #68]	; (8005418 <MX_TIM3_Init+0xe4>)
 80053d4:	f005 f9ba 	bl	800a74c <HAL_TIMEx_MasterConfigSynchronization>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80053de:	f7ff fd21 	bl	8004e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053e2:	2360      	movs	r3, #96	; 0x60
 80053e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053f2:	1d3b      	adds	r3, r7, #4
 80053f4:	2200      	movs	r2, #0
 80053f6:	4619      	mov	r1, r3
 80053f8:	4807      	ldr	r0, [pc, #28]	; (8005418 <MX_TIM3_Init+0xe4>)
 80053fa:	f004 fa87 	bl	800990c <HAL_TIM_PWM_ConfigChannel>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8005404:	f7ff fd0e 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005408:	4803      	ldr	r0, [pc, #12]	; (8005418 <MX_TIM3_Init+0xe4>)
 800540a:	f000 f9e1 	bl	80057d0 <HAL_TIM_MspPostInit>

}
 800540e:	bf00      	nop
 8005410:	3738      	adds	r7, #56	; 0x38
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20001af4 	.word	0x20001af4
 800541c:	40000400 	.word	0x40000400

08005420 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005426:	463b      	mov	r3, r7
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	605a      	str	r2, [r3, #4]
 800542e:	609a      	str	r2, [r3, #8]
 8005430:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8005432:	4b16      	ldr	r3, [pc, #88]	; (800548c <MX_TIM9_Init+0x6c>)
 8005434:	4a16      	ldr	r2, [pc, #88]	; (8005490 <MX_TIM9_Init+0x70>)
 8005436:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10-1;
 8005438:	4b14      	ldr	r3, [pc, #80]	; (800548c <MX_TIM9_Init+0x6c>)
 800543a:	2209      	movs	r2, #9
 800543c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800543e:	4b13      	ldr	r3, [pc, #76]	; (800548c <MX_TIM9_Init+0x6c>)
 8005440:	2200      	movs	r2, #0
 8005442:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8005444:	4b11      	ldr	r3, [pc, #68]	; (800548c <MX_TIM9_Init+0x6c>)
 8005446:	f240 32e7 	movw	r2, #999	; 0x3e7
 800544a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800544c:	4b0f      	ldr	r3, [pc, #60]	; (800548c <MX_TIM9_Init+0x6c>)
 800544e:	2200      	movs	r2, #0
 8005450:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005452:	4b0e      	ldr	r3, [pc, #56]	; (800548c <MX_TIM9_Init+0x6c>)
 8005454:	2200      	movs	r2, #0
 8005456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005458:	480c      	ldr	r0, [pc, #48]	; (800548c <MX_TIM9_Init+0x6c>)
 800545a:	f003 f9b9 	bl	80087d0 <HAL_TIM_Base_Init>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8005464:	f7ff fcde 	bl	8004e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800546c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800546e:	463b      	mov	r3, r7
 8005470:	4619      	mov	r1, r3
 8005472:	4806      	ldr	r0, [pc, #24]	; (800548c <MX_TIM9_Init+0x6c>)
 8005474:	f004 fb0c 	bl	8009a90 <HAL_TIM_ConfigClockSource>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800547e:	f7ff fcd1 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20001ba8 	.word	0x20001ba8
 8005490:	40014000 	.word	0x40014000

08005494 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005498:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <MX_TIM10_Init+0x3c>)
 800549a:	4a0e      	ldr	r2, [pc, #56]	; (80054d4 <MX_TIM10_Init+0x40>)
 800549c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 48-1;
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <MX_TIM10_Init+0x3c>)
 80054a0:	222f      	movs	r2, #47	; 0x2f
 80054a2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054a4:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <MX_TIM10_Init+0x3c>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 217-1;
 80054aa:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <MX_TIM10_Init+0x3c>)
 80054ac:	22d8      	movs	r2, #216	; 0xd8
 80054ae:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <MX_TIM10_Init+0x3c>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054b6:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <MX_TIM10_Init+0x3c>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80054bc:	4804      	ldr	r0, [pc, #16]	; (80054d0 <MX_TIM10_Init+0x3c>)
 80054be:	f003 f987 	bl	80087d0 <HAL_TIM_Base_Init>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80054c8:	f7ff fcac 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80054cc:	bf00      	nop
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20001c5c 	.word	0x20001c5c
 80054d4:	40014400 	.word	0x40014400

080054d8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80054de:	1d3b      	adds	r3, r7, #4
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	605a      	str	r2, [r3, #4]
 80054e6:	609a      	str	r2, [r3, #8]
 80054e8:	60da      	str	r2, [r3, #12]
 80054ea:	611a      	str	r2, [r3, #16]
 80054ec:	615a      	str	r2, [r3, #20]
 80054ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80054f0:	4b21      	ldr	r3, [pc, #132]	; (8005578 <MX_TIM11_Init+0xa0>)
 80054f2:	4a22      	ldr	r2, [pc, #136]	; (800557c <MX_TIM11_Init+0xa4>)
 80054f4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80054f6:	4b20      	ldr	r3, [pc, #128]	; (8005578 <MX_TIM11_Init+0xa0>)
 80054f8:	2263      	movs	r2, #99	; 0x63
 80054fa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054fc:	4b1e      	ldr	r3, [pc, #120]	; (8005578 <MX_TIM11_Init+0xa0>)
 80054fe:	2200      	movs	r2, #0
 8005500:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8005502:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <MX_TIM11_Init+0xa0>)
 8005504:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8005508:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800550a:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <MX_TIM11_Init+0xa0>)
 800550c:	2200      	movs	r2, #0
 800550e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005510:	4b19      	ldr	r3, [pc, #100]	; (8005578 <MX_TIM11_Init+0xa0>)
 8005512:	2200      	movs	r2, #0
 8005514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005516:	4818      	ldr	r0, [pc, #96]	; (8005578 <MX_TIM11_Init+0xa0>)
 8005518:	f003 f95a 	bl	80087d0 <HAL_TIM_Base_Init>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8005522:	f7ff fc7f 	bl	8004e24 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8005526:	4814      	ldr	r0, [pc, #80]	; (8005578 <MX_TIM11_Init+0xa0>)
 8005528:	f003 fa6a 	bl	8008a00 <HAL_TIM_OC_Init>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8005532:	f7ff fc77 	bl	8004e24 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8005536:	2108      	movs	r1, #8
 8005538:	480f      	ldr	r0, [pc, #60]	; (8005578 <MX_TIM11_Init+0xa0>)
 800553a:	f003 fe53 	bl	80091e4 <HAL_TIM_OnePulse_Init>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8005544:	f7ff fc6e 	bl	8004e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8005548:	2310      	movs	r3, #16
 800554a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 800554c:	f240 5399 	movw	r3, #1433	; 0x599
 8005550:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800555a:	1d3b      	adds	r3, r7, #4
 800555c:	2200      	movs	r2, #0
 800555e:	4619      	mov	r1, r3
 8005560:	4805      	ldr	r0, [pc, #20]	; (8005578 <MX_TIM11_Init+0xa0>)
 8005562:	f004 f977 	bl	8009854 <HAL_TIM_OC_ConfigChannel>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 800556c:	f7ff fc5a 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8005570:	bf00      	nop
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	20001d10 	.word	0x20001d10
 800557c:	40014800 	.word	0x40014800

08005580 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a65      	ldr	r2, [pc, #404]	; (8005724 <HAL_TIM_Base_MspInit+0x1a4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d126      	bne.n	80055e0 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	4b64      	ldr	r3, [pc, #400]	; (8005728 <HAL_TIM_Base_MspInit+0x1a8>)
 8005598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559a:	4a63      	ldr	r2, [pc, #396]	; (8005728 <HAL_TIM_Base_MspInit+0x1a8>)
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	6453      	str	r3, [r2, #68]	; 0x44
 80055a2:	4b61      	ldr	r3, [pc, #388]	; (8005728 <HAL_TIM_Base_MspInit+0x1a8>)
 80055a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80055ae:	2200      	movs	r2, #0
 80055b0:	2100      	movs	r1, #0
 80055b2:	2018      	movs	r0, #24
 80055b4:	f001 fa15 	bl	80069e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80055b8:	2018      	movs	r0, #24
 80055ba:	f001 fa2e 	bl	8006a1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80055be:	2200      	movs	r2, #0
 80055c0:	2100      	movs	r1, #0
 80055c2:	2019      	movs	r0, #25
 80055c4:	f001 fa0d 	bl	80069e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80055c8:	2019      	movs	r0, #25
 80055ca:	f001 fa26 	bl	8006a1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80055ce:	2200      	movs	r2, #0
 80055d0:	2100      	movs	r1, #0
 80055d2:	201a      	movs	r0, #26
 80055d4:	f001 fa05 	bl	80069e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80055d8:	201a      	movs	r0, #26
 80055da:	f001 fa1e 	bl	8006a1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80055de:	e09c      	b.n	800571a <HAL_TIM_Base_MspInit+0x19a>
  else if(tim_baseHandle->Instance==TIM3)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a51      	ldr	r2, [pc, #324]	; (800572c <HAL_TIM_Base_MspInit+0x1ac>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d144      	bne.n	8005674 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80055ea:	2300      	movs	r3, #0
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	4b4e      	ldr	r3, [pc, #312]	; (8005728 <HAL_TIM_Base_MspInit+0x1a8>)
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	4a4d      	ldr	r2, [pc, #308]	; (8005728 <HAL_TIM_Base_MspInit+0x1a8>)
 80055f4:	f043 0302 	orr.w	r3, r3, #2
 80055f8:	6413      	str	r3, [r2, #64]	; 0x40
 80055fa:	4b4b      	ldr	r3, [pc, #300]	; (8005728 <HAL_TIM_Base_MspInit+0x1a8>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	61bb      	str	r3, [r7, #24]
 8005604:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8005606:	4b4a      	ldr	r3, [pc, #296]	; (8005730 <HAL_TIM_Base_MspInit+0x1b0>)
 8005608:	4a4a      	ldr	r2, [pc, #296]	; (8005734 <HAL_TIM_Base_MspInit+0x1b4>)
 800560a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 800560c:	4b48      	ldr	r3, [pc, #288]	; (8005730 <HAL_TIM_Base_MspInit+0x1b0>)
 800560e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005612:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005614:	4b46      	ldr	r3, [pc, #280]	; (8005730 <HAL_TIM_Base_MspInit+0x1b0>)
 8005616:	2240      	movs	r2, #64	; 0x40
 8005618:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800561a:	4b45      	ldr	r3, [pc, #276]	; (8005730 <HAL_TIM_Base_MspInit+0x1b0>)
 800561c:	2200      	movs	r2, #0
 800561e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8005620:	4b43      	ldr	r3, [pc, #268]	; (8005730 <HAL_TIM_Base_MspInit+0x1b0>)
 8005622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005626:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005628:	4b41      	ldr	r3, [pc, #260]	; (8005730 <HAL_TIM_Base_MspInit+0x1b0>)
 800562a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800562e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005630:	4b3f      	ldr	r3, [pc, #252]	; (8005730 <HAL_TIM_Base_MspInit+0x1b0>)
 8005632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005636:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8005638:	4b3d      	ldr	r3, [pc, #244]	; (8005730 <HAL_TIM_Base_MspInit+0x1b0>)
 800563a:	2200      	movs	r2, #0
 800563c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800563e:	4b3c      	ldr	r3, [pc, #240]	; (8005730 <HAL_TIM_Base_MspInit+0x1b0>)
 8005640:	2200      	movs	r2, #0
 8005642:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005644:	4b3a      	ldr	r3, [pc, #232]	; (8005730 <HAL_TIM_Base_MspInit+0x1b0>)
 8005646:	2200      	movs	r2, #0
 8005648:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800564a:	4839      	ldr	r0, [pc, #228]	; (8005730 <HAL_TIM_Base_MspInit+0x1b0>)
 800564c:	f001 fa00 	bl	8006a50 <HAL_DMA_Init>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_TIM_Base_MspInit+0xda>
      Error_Handler();
 8005656:	f7ff fbe5 	bl	8004e24 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a34      	ldr	r2, [pc, #208]	; (8005730 <HAL_TIM_Base_MspInit+0x1b0>)
 800565e:	625a      	str	r2, [r3, #36]	; 0x24
 8005660:	4a33      	ldr	r2, [pc, #204]	; (8005730 <HAL_TIM_Base_MspInit+0x1b0>)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a31      	ldr	r2, [pc, #196]	; (8005730 <HAL_TIM_Base_MspInit+0x1b0>)
 800566a:	639a      	str	r2, [r3, #56]	; 0x38
 800566c:	4a30      	ldr	r2, [pc, #192]	; (8005730 <HAL_TIM_Base_MspInit+0x1b0>)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005672:	e052      	b.n	800571a <HAL_TIM_Base_MspInit+0x19a>
  else if(tim_baseHandle->Instance==TIM9)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a2f      	ldr	r2, [pc, #188]	; (8005738 <HAL_TIM_Base_MspInit+0x1b8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d116      	bne.n	80056ac <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	4b29      	ldr	r3, [pc, #164]	; (8005728 <HAL_TIM_Base_MspInit+0x1a8>)
 8005684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005686:	4a28      	ldr	r2, [pc, #160]	; (8005728 <HAL_TIM_Base_MspInit+0x1a8>)
 8005688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800568c:	6453      	str	r3, [r2, #68]	; 0x44
 800568e:	4b26      	ldr	r3, [pc, #152]	; (8005728 <HAL_TIM_Base_MspInit+0x1a8>)
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800569a:	2200      	movs	r2, #0
 800569c:	2100      	movs	r1, #0
 800569e:	2018      	movs	r0, #24
 80056a0:	f001 f99f 	bl	80069e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80056a4:	2018      	movs	r0, #24
 80056a6:	f001 f9b8 	bl	8006a1a <HAL_NVIC_EnableIRQ>
}
 80056aa:	e036      	b.n	800571a <HAL_TIM_Base_MspInit+0x19a>
  else if(tim_baseHandle->Instance==TIM10)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a22      	ldr	r2, [pc, #136]	; (800573c <HAL_TIM_Base_MspInit+0x1bc>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d116      	bne.n	80056e4 <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80056b6:	2300      	movs	r3, #0
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	4b1b      	ldr	r3, [pc, #108]	; (8005728 <HAL_TIM_Base_MspInit+0x1a8>)
 80056bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056be:	4a1a      	ldr	r2, [pc, #104]	; (8005728 <HAL_TIM_Base_MspInit+0x1a8>)
 80056c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056c4:	6453      	str	r3, [r2, #68]	; 0x44
 80056c6:	4b18      	ldr	r3, [pc, #96]	; (8005728 <HAL_TIM_Base_MspInit+0x1a8>)
 80056c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80056d2:	2200      	movs	r2, #0
 80056d4:	2100      	movs	r1, #0
 80056d6:	2019      	movs	r0, #25
 80056d8:	f001 f983 	bl	80069e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80056dc:	2019      	movs	r0, #25
 80056de:	f001 f99c 	bl	8006a1a <HAL_NVIC_EnableIRQ>
}
 80056e2:	e01a      	b.n	800571a <HAL_TIM_Base_MspInit+0x19a>
  else if(tim_baseHandle->Instance==TIM11)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a15      	ldr	r2, [pc, #84]	; (8005740 <HAL_TIM_Base_MspInit+0x1c0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d115      	bne.n	800571a <HAL_TIM_Base_MspInit+0x19a>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <HAL_TIM_Base_MspInit+0x1a8>)
 80056f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f6:	4a0c      	ldr	r2, [pc, #48]	; (8005728 <HAL_TIM_Base_MspInit+0x1a8>)
 80056f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056fc:	6453      	str	r3, [r2, #68]	; 0x44
 80056fe:	4b0a      	ldr	r3, [pc, #40]	; (8005728 <HAL_TIM_Base_MspInit+0x1a8>)
 8005700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800570a:	2200      	movs	r2, #0
 800570c:	2100      	movs	r1, #0
 800570e:	201a      	movs	r0, #26
 8005710:	f001 f967 	bl	80069e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005714:	201a      	movs	r0, #26
 8005716:	f001 f980 	bl	8006a1a <HAL_NVIC_EnableIRQ>
}
 800571a:	bf00      	nop
 800571c:	3720      	adds	r7, #32
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40010000 	.word	0x40010000
 8005728:	40023800 	.word	0x40023800
 800572c:	40000400 	.word	0x40000400
 8005730:	20001dc4 	.word	0x20001dc4
 8005734:	40026070 	.word	0x40026070
 8005738:	40014000 	.word	0x40014000
 800573c:	40014400 	.word	0x40014400
 8005740:	40014800 	.word	0x40014800

08005744 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08a      	sub	sp, #40	; 0x28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800574c:	f107 0314 	add.w	r3, r7, #20
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	605a      	str	r2, [r3, #4]
 8005756:	609a      	str	r2, [r3, #8]
 8005758:	60da      	str	r2, [r3, #12]
 800575a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005764:	d12b      	bne.n	80057be <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005766:	2300      	movs	r3, #0
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	4b17      	ldr	r3, [pc, #92]	; (80057c8 <HAL_TIM_Encoder_MspInit+0x84>)
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	4a16      	ldr	r2, [pc, #88]	; (80057c8 <HAL_TIM_Encoder_MspInit+0x84>)
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	6413      	str	r3, [r2, #64]	; 0x40
 8005776:	4b14      	ldr	r3, [pc, #80]	; (80057c8 <HAL_TIM_Encoder_MspInit+0x84>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	613b      	str	r3, [r7, #16]
 8005780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <HAL_TIM_Encoder_MspInit+0x84>)
 8005788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578a:	4a0f      	ldr	r2, [pc, #60]	; (80057c8 <HAL_TIM_Encoder_MspInit+0x84>)
 800578c:	f043 0301 	orr.w	r3, r3, #1
 8005790:	6313      	str	r3, [r2, #48]	; 0x30
 8005792:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <HAL_TIM_Encoder_MspInit+0x84>)
 8005794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800579e:	2303      	movs	r3, #3
 80057a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057a2:	2302      	movs	r3, #2
 80057a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057aa:	2300      	movs	r3, #0
 80057ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80057ae:	2301      	movs	r3, #1
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057b2:	f107 0314 	add.w	r3, r7, #20
 80057b6:	4619      	mov	r1, r3
 80057b8:	4804      	ldr	r0, [pc, #16]	; (80057cc <HAL_TIM_Encoder_MspInit+0x88>)
 80057ba:	f001 fd57 	bl	800726c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80057be:	bf00      	nop
 80057c0:	3728      	adds	r7, #40	; 0x28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	40023800 	.word	0x40023800
 80057cc:	40020000 	.word	0x40020000

080057d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08a      	sub	sp, #40	; 0x28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057d8:	f107 0314 	add.w	r3, r7, #20
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	605a      	str	r2, [r3, #4]
 80057e2:	609a      	str	r2, [r3, #8]
 80057e4:	60da      	str	r2, [r3, #12]
 80057e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a24      	ldr	r2, [pc, #144]	; (8005880 <HAL_TIM_MspPostInit+0xb0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d11f      	bne.n	8005832 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057f2:	2300      	movs	r3, #0
 80057f4:	613b      	str	r3, [r7, #16]
 80057f6:	4b23      	ldr	r3, [pc, #140]	; (8005884 <HAL_TIM_MspPostInit+0xb4>)
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	4a22      	ldr	r2, [pc, #136]	; (8005884 <HAL_TIM_MspPostInit+0xb4>)
 80057fc:	f043 0301 	orr.w	r3, r3, #1
 8005800:	6313      	str	r3, [r2, #48]	; 0x30
 8005802:	4b20      	ldr	r3, [pc, #128]	; (8005884 <HAL_TIM_MspPostInit+0xb4>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	613b      	str	r3, [r7, #16]
 800580c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800580e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005814:	2302      	movs	r3, #2
 8005816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005818:	2300      	movs	r3, #0
 800581a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800581c:	2300      	movs	r3, #0
 800581e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005820:	2301      	movs	r3, #1
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005824:	f107 0314 	add.w	r3, r7, #20
 8005828:	4619      	mov	r1, r3
 800582a:	4817      	ldr	r0, [pc, #92]	; (8005888 <HAL_TIM_MspPostInit+0xb8>)
 800582c:	f001 fd1e 	bl	800726c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005830:	e022      	b.n	8005878 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a15      	ldr	r2, [pc, #84]	; (800588c <HAL_TIM_MspPostInit+0xbc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d11d      	bne.n	8005878 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800583c:	2300      	movs	r3, #0
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	4b10      	ldr	r3, [pc, #64]	; (8005884 <HAL_TIM_MspPostInit+0xb4>)
 8005842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005844:	4a0f      	ldr	r2, [pc, #60]	; (8005884 <HAL_TIM_MspPostInit+0xb4>)
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	6313      	str	r3, [r2, #48]	; 0x30
 800584c:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <HAL_TIM_MspPostInit+0xb4>)
 800584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005858:	2340      	movs	r3, #64	; 0x40
 800585a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800585c:	2302      	movs	r3, #2
 800585e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005860:	2300      	movs	r3, #0
 8005862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005864:	2300      	movs	r3, #0
 8005866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005868:	2302      	movs	r3, #2
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800586c:	f107 0314 	add.w	r3, r7, #20
 8005870:	4619      	mov	r1, r3
 8005872:	4805      	ldr	r0, [pc, #20]	; (8005888 <HAL_TIM_MspPostInit+0xb8>)
 8005874:	f001 fcfa 	bl	800726c <HAL_GPIO_Init>
}
 8005878:	bf00      	nop
 800587a:	3728      	adds	r7, #40	; 0x28
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40010000 	.word	0x40010000
 8005884:	40023800 	.word	0x40023800
 8005888:	40020000 	.word	0x40020000
 800588c:	40000400 	.word	0x40000400

08005890 <Trajectory>:
float setpoint_now = 0;
float target = 0;

// USER CODE ======================================================================================

void Trajectory(float setpoint_now_input, float velocity_max, float acceleration_max, int *position_out, float *velocity_out, float *acceleration_out, int homemode) {
 8005890:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005894:	b088      	sub	sp, #32
 8005896:	af00      	add	r7, sp, #0
 8005898:	ed87 0a07 	vstr	s0, [r7, #28]
 800589c:	edc7 0a06 	vstr	s1, [r7, #24]
 80058a0:	ed87 1a05 	vstr	s2, [r7, #20]
 80058a4:	6138      	str	r0, [r7, #16]
 80058a6:	60f9      	str	r1, [r7, #12]
 80058a8:	60ba      	str	r2, [r7, #8]
 80058aa:	607b      	str	r3, [r7, #4]
	static float time_err = 0;

	static float setpoint_past = 0;
	static float distance = 0;

	if(homemode == 1){
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d115      	bne.n	80058de <Trajectory+0x4e>
		setpoint_past = setpoint_now_input;
 80058b2:	4a6c      	ldr	r2, [pc, #432]	; (8005a64 <Trajectory+0x1d4>)
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	6013      	str	r3, [r2, #0]
		time_trajectory = 0;
 80058b8:	4b6b      	ldr	r3, [pc, #428]	; (8005a68 <Trajectory+0x1d8>)
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
		abs_distance = 0;
 80058c0:	4b6a      	ldr	r3, [pc, #424]	; (8005a6c <Trajectory+0x1dc>)
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
		distance = 0;
 80058c8:	4b69      	ldr	r3, [pc, #420]	; (8005a70 <Trajectory+0x1e0>)
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
		position = setpoint_now_input;
 80058d0:	4a68      	ldr	r2, [pc, #416]	; (8005a74 <Trajectory+0x1e4>)
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	6013      	str	r3, [r2, #0]
		initial_position = setpoint_now_input;
 80058d6:	4a68      	ldr	r2, [pc, #416]	; (8005a78 <Trajectory+0x1e8>)
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	6013      	str	r3, [r2, #0]
		return;
 80058dc:	e306      	b.n	8005eec <Trajectory+0x65c>
	}

	else if(homemode == 0)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f040 82f2 	bne.w	8005eca <Trajectory+0x63a>
	{
		// distance and +-(sign)
		if (setpoint_past != setpoint_now_input && time_trajectory == 0) {
 80058e6:	4b5f      	ldr	r3, [pc, #380]	; (8005a64 <Trajectory+0x1d4>)
 80058e8:	edd3 7a00 	vldr	s15, [r3]
 80058ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80058f0:	eeb4 7a67 	vcmp.f32	s14, s15
 80058f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f8:	d03f      	beq.n	800597a <Trajectory+0xea>
 80058fa:	4b5b      	ldr	r3, [pc, #364]	; (8005a68 <Trajectory+0x1d8>)
 80058fc:	edd3 7a00 	vldr	s15, [r3]
 8005900:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005908:	d137      	bne.n	800597a <Trajectory+0xea>
			setpoint_now = setpoint_now_input;
 800590a:	4a5c      	ldr	r2, [pc, #368]	; (8005a7c <Trajectory+0x1ec>)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	6013      	str	r3, [r2, #0]
			distance = setpoint_now - initial_position;
 8005910:	4b5a      	ldr	r3, [pc, #360]	; (8005a7c <Trajectory+0x1ec>)
 8005912:	ed93 7a00 	vldr	s14, [r3]
 8005916:	4b58      	ldr	r3, [pc, #352]	; (8005a78 <Trajectory+0x1e8>)
 8005918:	edd3 7a00 	vldr	s15, [r3]
 800591c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005920:	4b53      	ldr	r3, [pc, #332]	; (8005a70 <Trajectory+0x1e0>)
 8005922:	edc3 7a00 	vstr	s15, [r3]
			setpoint_past = setpoint_now;
 8005926:	4b55      	ldr	r3, [pc, #340]	; (8005a7c <Trajectory+0x1ec>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a4e      	ldr	r2, [pc, #312]	; (8005a64 <Trajectory+0x1d4>)
 800592c:	6013      	str	r3, [r2, #0]
			if (distance >= 0) {
 800592e:	4b50      	ldr	r3, [pc, #320]	; (8005a70 <Trajectory+0x1e0>)
 8005930:	edd3 7a00 	vldr	s15, [r3]
 8005934:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800593c:	db07      	blt.n	800594e <Trajectory+0xbe>
				sign = 1;
 800593e:	4b50      	ldr	r3, [pc, #320]	; (8005a80 <Trajectory+0x1f0>)
 8005940:	2201      	movs	r2, #1
 8005942:	601a      	str	r2, [r3, #0]
				abs_distance = distance;
 8005944:	4b4a      	ldr	r3, [pc, #296]	; (8005a70 <Trajectory+0x1e0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a48      	ldr	r2, [pc, #288]	; (8005a6c <Trajectory+0x1dc>)
 800594a:	6013      	str	r3, [r2, #0]
			if (distance >= 0) {
 800594c:	e019      	b.n	8005982 <Trajectory+0xf2>
			} else if (distance < 0) {
 800594e:	4b48      	ldr	r3, [pc, #288]	; (8005a70 <Trajectory+0x1e0>)
 8005950:	edd3 7a00 	vldr	s15, [r3]
 8005954:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595c:	d400      	bmi.n	8005960 <Trajectory+0xd0>
			if (distance >= 0) {
 800595e:	e010      	b.n	8005982 <Trajectory+0xf2>
				sign = -1;
 8005960:	4b47      	ldr	r3, [pc, #284]	; (8005a80 <Trajectory+0x1f0>)
 8005962:	f04f 32ff 	mov.w	r2, #4294967295
 8005966:	601a      	str	r2, [r3, #0]
				abs_distance = distance * (-1);
 8005968:	4b41      	ldr	r3, [pc, #260]	; (8005a70 <Trajectory+0x1e0>)
 800596a:	edd3 7a00 	vldr	s15, [r3]
 800596e:	eef1 7a67 	vneg.f32	s15, s15
 8005972:	4b3e      	ldr	r3, [pc, #248]	; (8005a6c <Trajectory+0x1dc>)
 8005974:	edc3 7a00 	vstr	s15, [r3]
			if (distance >= 0) {
 8005978:	e003      	b.n	8005982 <Trajectory+0xf2>
			}
		} else {
			setpoint_past = setpoint_now;
 800597a:	4b40      	ldr	r3, [pc, #256]	; (8005a7c <Trajectory+0x1ec>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a39      	ldr	r2, [pc, #228]	; (8005a64 <Trajectory+0x1d4>)
 8005980:	6013      	str	r3, [r2, #0]
		}

	// Define pattern of trapezoidal_trajectory
	if (abs_distance > ((velocity_max * velocity_max) / acceleration_max)) {
 8005982:	edd7 7a06 	vldr	s15, [r7, #24]
 8005986:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800598a:	edd7 7a05 	vldr	s15, [r7, #20]
 800598e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005992:	4b36      	ldr	r3, [pc, #216]	; (8005a6c <Trajectory+0x1dc>)
 8005994:	edd3 7a00 	vldr	s15, [r3]
 8005998:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800599c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a0:	d57a      	bpl.n	8005a98 <Trajectory+0x208>
		time_acc = ((velocity_max - 0) / acceleration_max);
 80059a2:	edd7 6a06 	vldr	s13, [r7, #24]
 80059a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80059aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ae:	4b35      	ldr	r3, [pc, #212]	; (8005a84 <Trajectory+0x1f4>)
 80059b0:	edc3 7a00 	vstr	s15, [r3]
		time_const = ((1.0 / velocity_max) * ((abs_distance) - ((velocity_max * velocity_max) / acceleration_max)));
 80059b4:	69b8      	ldr	r0, [r7, #24]
 80059b6:	f7fa fdcf 	bl	8000558 <__aeabi_f2d>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	f04f 0000 	mov.w	r0, #0
 80059c2:	4931      	ldr	r1, [pc, #196]	; (8005a88 <Trajectory+0x1f8>)
 80059c4:	f7fa ff4a 	bl	800085c <__aeabi_ddiv>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4614      	mov	r4, r2
 80059ce:	461d      	mov	r5, r3
 80059d0:	4b26      	ldr	r3, [pc, #152]	; (8005a6c <Trajectory+0x1dc>)
 80059d2:	ed93 7a00 	vldr	s14, [r3]
 80059d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80059da:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80059de:	edd7 6a05 	vldr	s13, [r7, #20]
 80059e2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80059e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059ea:	ee17 0a90 	vmov	r0, s15
 80059ee:	f7fa fdb3 	bl	8000558 <__aeabi_f2d>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4620      	mov	r0, r4
 80059f8:	4629      	mov	r1, r5
 80059fa:	f7fa fe05 	bl	8000608 <__aeabi_dmul>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4610      	mov	r0, r2
 8005a04:	4619      	mov	r1, r3
 8005a06:	f7fb f8f7 	bl	8000bf8 <__aeabi_d2f>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	4a1f      	ldr	r2, [pc, #124]	; (8005a8c <Trajectory+0x1fc>)
 8005a0e:	6013      	str	r3, [r2, #0]
		time_total = (2 * time_acc) + (abs_distance - (velocity_max * velocity_max) / acceleration_max) / velocity_max;
 8005a10:	4b1c      	ldr	r3, [pc, #112]	; (8005a84 <Trajectory+0x1f4>)
 8005a12:	edd3 7a00 	vldr	s15, [r3]
 8005a16:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005a1a:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <Trajectory+0x1dc>)
 8005a1c:	edd3 6a00 	vldr	s13, [r3]
 8005a20:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a24:	ee67 5aa7 	vmul.f32	s11, s15, s15
 8005a28:	ed97 6a05 	vldr	s12, [r7, #20]
 8005a2c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005a30:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005a34:	edd7 6a06 	vldr	s13, [r7, #24]
 8005a38:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a40:	4b13      	ldr	r3, [pc, #76]	; (8005a90 <Trajectory+0x200>)
 8005a42:	edc3 7a00 	vstr	s15, [r3]
		max_velocity = velocity_max * sign;
 8005a46:	4b0e      	ldr	r3, [pc, #56]	; (8005a80 <Trajectory+0x1f0>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a52:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5a:	4b0e      	ldr	r3, [pc, #56]	; (8005a94 <Trajectory+0x204>)
 8005a5c:	edc3 7a00 	vstr	s15, [r3]
 8005a60:	e056      	b.n	8005b10 <Trajectory+0x280>
 8005a62:	bf00      	nop
 8005a64:	20001e40 	.word	0x20001e40
 8005a68:	20001e44 	.word	0x20001e44
 8005a6c:	20001e24 	.word	0x20001e24
 8005a70:	20001e48 	.word	0x20001e48
 8005a74:	20001e2c 	.word	0x20001e2c
 8005a78:	20001e28 	.word	0x20001e28
 8005a7c:	20001e3c 	.word	0x20001e3c
 8005a80:	20001e38 	.word	0x20001e38
 8005a84:	20001e4c 	.word	0x20001e4c
 8005a88:	3ff00000 	.word	0x3ff00000
 8005a8c:	20001e50 	.word	0x20001e50
 8005a90:	20001e54 	.word	0x20001e54
 8005a94:	20001e58 	.word	0x20001e58
	}

	else {
		time_acc = sqrt(abs_distance / acceleration_max);
 8005a98:	4b8d      	ldr	r3, [pc, #564]	; (8005cd0 <Trajectory+0x440>)
 8005a9a:	ed93 7a00 	vldr	s14, [r3]
 8005a9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005aa2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005aa6:	ee16 0a90 	vmov	r0, s13
 8005aaa:	f7fa fd55 	bl	8000558 <__aeabi_f2d>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	ec43 2b10 	vmov	d0, r2, r3
 8005ab6:	f00b f929 	bl	8010d0c <sqrt>
 8005aba:	ec53 2b10 	vmov	r2, r3, d0
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	f7fb f899 	bl	8000bf8 <__aeabi_d2f>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	4a82      	ldr	r2, [pc, #520]	; (8005cd4 <Trajectory+0x444>)
 8005aca:	6013      	str	r3, [r2, #0]
		time_total = time_acc * 2;
 8005acc:	4b81      	ldr	r3, [pc, #516]	; (8005cd4 <Trajectory+0x444>)
 8005ace:	edd3 7a00 	vldr	s15, [r3]
 8005ad2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ad6:	4b80      	ldr	r3, [pc, #512]	; (8005cd8 <Trajectory+0x448>)
 8005ad8:	edc3 7a00 	vstr	s15, [r3]
		time_const = 0;
 8005adc:	4b7f      	ldr	r3, [pc, #508]	; (8005cdc <Trajectory+0x44c>)
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
		position_const = 0;
 8005ae4:	4b7e      	ldr	r3, [pc, #504]	; (8005ce0 <Trajectory+0x450>)
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]
		max_velocity = acceleration_max * time_acc * sign;
 8005aec:	4b79      	ldr	r3, [pc, #484]	; (8005cd4 <Trajectory+0x444>)
 8005aee:	ed93 7a00 	vldr	s14, [r3]
 8005af2:	edd7 7a05 	vldr	s15, [r7, #20]
 8005af6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005afa:	4b7a      	ldr	r3, [pc, #488]	; (8005ce4 <Trajectory+0x454>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b0a:	4b77      	ldr	r3, [pc, #476]	; (8005ce8 <Trajectory+0x458>)
 8005b0c:	edc3 7a00 	vstr	s15, [r3]
	}

	//acceleration segment
	if ((0 <= time_trajectory) && (time_trajectory < time_acc)) {
 8005b10:	4b76      	ldr	r3, [pc, #472]	; (8005cec <Trajectory+0x45c>)
 8005b12:	edd3 7a00 	vldr	s15, [r3]
 8005b16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b1e:	f2c0 8085 	blt.w	8005c2c <Trajectory+0x39c>
 8005b22:	4b72      	ldr	r3, [pc, #456]	; (8005cec <Trajectory+0x45c>)
 8005b24:	ed93 7a00 	vldr	s14, [r3]
 8005b28:	4b6a      	ldr	r3, [pc, #424]	; (8005cd4 <Trajectory+0x444>)
 8005b2a:	edd3 7a00 	vldr	s15, [r3]
 8005b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b36:	d579      	bpl.n	8005c2c <Trajectory+0x39c>
		time_trajectory += 0.0001;
 8005b38:	4b6c      	ldr	r3, [pc, #432]	; (8005cec <Trajectory+0x45c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fa fd0b 	bl	8000558 <__aeabi_f2d>
 8005b42:	a361      	add	r3, pc, #388	; (adr r3, 8005cc8 <Trajectory+0x438>)
 8005b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b48:	f7fa fba8 	bl	800029c <__adddf3>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4610      	mov	r0, r2
 8005b52:	4619      	mov	r1, r3
 8005b54:	f7fb f850 	bl	8000bf8 <__aeabi_d2f>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	4a64      	ldr	r2, [pc, #400]	; (8005cec <Trajectory+0x45c>)
 8005b5c:	6013      	str	r3, [r2, #0]
		position = initial_position + (0.5 * acceleration_max * (time_trajectory * time_trajectory) * sign);
 8005b5e:	4b64      	ldr	r3, [pc, #400]	; (8005cf0 <Trajectory+0x460>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fa fcf8 	bl	8000558 <__aeabi_f2d>
 8005b68:	4604      	mov	r4, r0
 8005b6a:	460d      	mov	r5, r1
 8005b6c:	6978      	ldr	r0, [r7, #20]
 8005b6e:	f7fa fcf3 	bl	8000558 <__aeabi_f2d>
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	4b5f      	ldr	r3, [pc, #380]	; (8005cf4 <Trajectory+0x464>)
 8005b78:	f7fa fd46 	bl	8000608 <__aeabi_dmul>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4690      	mov	r8, r2
 8005b82:	4699      	mov	r9, r3
 8005b84:	4b59      	ldr	r3, [pc, #356]	; (8005cec <Trajectory+0x45c>)
 8005b86:	ed93 7a00 	vldr	s14, [r3]
 8005b8a:	4b58      	ldr	r3, [pc, #352]	; (8005cec <Trajectory+0x45c>)
 8005b8c:	edd3 7a00 	vldr	s15, [r3]
 8005b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b94:	ee17 0a90 	vmov	r0, s15
 8005b98:	f7fa fcde 	bl	8000558 <__aeabi_f2d>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4640      	mov	r0, r8
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	f7fa fd30 	bl	8000608 <__aeabi_dmul>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4690      	mov	r8, r2
 8005bae:	4699      	mov	r9, r3
 8005bb0:	4b4c      	ldr	r3, [pc, #304]	; (8005ce4 <Trajectory+0x454>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fa fcbd 	bl	8000534 <__aeabi_i2d>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	f7fa fd21 	bl	8000608 <__aeabi_dmul>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4620      	mov	r0, r4
 8005bcc:	4629      	mov	r1, r5
 8005bce:	f7fa fb65 	bl	800029c <__adddf3>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	4619      	mov	r1, r3
 8005bda:	f7fb f80d 	bl	8000bf8 <__aeabi_d2f>
 8005bde:	4603      	mov	r3, r0
 8005be0:	4a45      	ldr	r2, [pc, #276]	; (8005cf8 <Trajectory+0x468>)
 8005be2:	6013      	str	r3, [r2, #0]
		velocity = (acceleration_max * time_trajectory * sign);
 8005be4:	4b41      	ldr	r3, [pc, #260]	; (8005cec <Trajectory+0x45c>)
 8005be6:	ed93 7a00 	vldr	s14, [r3]
 8005bea:	edd7 7a05 	vldr	s15, [r7, #20]
 8005bee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bf2:	4b3c      	ldr	r3, [pc, #240]	; (8005ce4 <Trajectory+0x454>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c02:	4b3e      	ldr	r3, [pc, #248]	; (8005cfc <Trajectory+0x46c>)
 8005c04:	edc3 7a00 	vstr	s15, [r3]
		position_acc = position;
 8005c08:	4b3b      	ldr	r3, [pc, #236]	; (8005cf8 <Trajectory+0x468>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a3c      	ldr	r2, [pc, #240]	; (8005d00 <Trajectory+0x470>)
 8005c0e:	6013      	str	r3, [r2, #0]
		acceleration = acceleration_max * sign;
 8005c10:	4b34      	ldr	r3, [pc, #208]	; (8005ce4 <Trajectory+0x454>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	ee07 3a90 	vmov	s15, r3
 8005c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c24:	4b37      	ldr	r3, [pc, #220]	; (8005d04 <Trajectory+0x474>)
 8005c26:	edc3 7a00 	vstr	s15, [r3]
 8005c2a:	e12d      	b.n	8005e88 <Trajectory+0x5f8>
	}

	//constant segment
	else if ((time_trajectory) < (time_total - time_acc)) {
 8005c2c:	4b2a      	ldr	r3, [pc, #168]	; (8005cd8 <Trajectory+0x448>)
 8005c2e:	ed93 7a00 	vldr	s14, [r3]
 8005c32:	4b28      	ldr	r3, [pc, #160]	; (8005cd4 <Trajectory+0x444>)
 8005c34:	edd3 7a00 	vldr	s15, [r3]
 8005c38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c3c:	4b2b      	ldr	r3, [pc, #172]	; (8005cec <Trajectory+0x45c>)
 8005c3e:	edd3 7a00 	vldr	s15, [r3]
 8005c42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c4a:	dd5d      	ble.n	8005d08 <Trajectory+0x478>
		time_trajectory += 0.0001;
 8005c4c:	4b27      	ldr	r3, [pc, #156]	; (8005cec <Trajectory+0x45c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fa fc81 	bl	8000558 <__aeabi_f2d>
 8005c56:	a31c      	add	r3, pc, #112	; (adr r3, 8005cc8 <Trajectory+0x438>)
 8005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5c:	f7fa fb1e 	bl	800029c <__adddf3>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4610      	mov	r0, r2
 8005c66:	4619      	mov	r1, r3
 8005c68:	f7fa ffc6 	bl	8000bf8 <__aeabi_d2f>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	4a1f      	ldr	r2, [pc, #124]	; (8005cec <Trajectory+0x45c>)
 8005c70:	6013      	str	r3, [r2, #0]
		position = position_acc + (max_velocity * (time_trajectory - time_acc));
 8005c72:	4b1e      	ldr	r3, [pc, #120]	; (8005cec <Trajectory+0x45c>)
 8005c74:	ed93 7a00 	vldr	s14, [r3]
 8005c78:	4b16      	ldr	r3, [pc, #88]	; (8005cd4 <Trajectory+0x444>)
 8005c7a:	edd3 7a00 	vldr	s15, [r3]
 8005c7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c82:	4b19      	ldr	r3, [pc, #100]	; (8005ce8 <Trajectory+0x458>)
 8005c84:	edd3 7a00 	vldr	s15, [r3]
 8005c88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c8c:	4b1c      	ldr	r3, [pc, #112]	; (8005d00 <Trajectory+0x470>)
 8005c8e:	edd3 7a00 	vldr	s15, [r3]
 8005c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c96:	4b18      	ldr	r3, [pc, #96]	; (8005cf8 <Trajectory+0x468>)
 8005c98:	edc3 7a00 	vstr	s15, [r3]
		position_const = position - position_acc;
 8005c9c:	4b16      	ldr	r3, [pc, #88]	; (8005cf8 <Trajectory+0x468>)
 8005c9e:	ed93 7a00 	vldr	s14, [r3]
 8005ca2:	4b17      	ldr	r3, [pc, #92]	; (8005d00 <Trajectory+0x470>)
 8005ca4:	edd3 7a00 	vldr	s15, [r3]
 8005ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cac:	4b0c      	ldr	r3, [pc, #48]	; (8005ce0 <Trajectory+0x450>)
 8005cae:	edc3 7a00 	vstr	s15, [r3]
		velocity = (max_velocity);
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	; (8005ce8 <Trajectory+0x458>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a11      	ldr	r2, [pc, #68]	; (8005cfc <Trajectory+0x46c>)
 8005cb8:	6013      	str	r3, [r2, #0]
		acceleration = 0;
 8005cba:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <Trajectory+0x474>)
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	e0e1      	b.n	8005e88 <Trajectory+0x5f8>
 8005cc4:	f3af 8000 	nop.w
 8005cc8:	eb1c432d 	.word	0xeb1c432d
 8005ccc:	3f1a36e2 	.word	0x3f1a36e2
 8005cd0:	20001e24 	.word	0x20001e24
 8005cd4:	20001e4c 	.word	0x20001e4c
 8005cd8:	20001e54 	.word	0x20001e54
 8005cdc:	20001e50 	.word	0x20001e50
 8005ce0:	20001e5c 	.word	0x20001e5c
 8005ce4:	20001e38 	.word	0x20001e38
 8005ce8:	20001e58 	.word	0x20001e58
 8005cec:	20001e44 	.word	0x20001e44
 8005cf0:	20001e28 	.word	0x20001e28
 8005cf4:	3fe00000 	.word	0x3fe00000
 8005cf8:	20001e2c 	.word	0x20001e2c
 8005cfc:	20001e30 	.word	0x20001e30
 8005d00:	20001e60 	.word	0x20001e60
 8005d04:	20001e34 	.word	0x20001e34
	}

	//deceleration segment
	else if (((time_total - time_acc) <= time_trajectory) && (time_trajectory < time_total)) {
 8005d08:	4b7d      	ldr	r3, [pc, #500]	; (8005f00 <Trajectory+0x670>)
 8005d0a:	ed93 7a00 	vldr	s14, [r3]
 8005d0e:	4b7d      	ldr	r3, [pc, #500]	; (8005f04 <Trajectory+0x674>)
 8005d10:	edd3 7a00 	vldr	s15, [r3]
 8005d14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d18:	4b7b      	ldr	r3, [pc, #492]	; (8005f08 <Trajectory+0x678>)
 8005d1a:	edd3 7a00 	vldr	s15, [r3]
 8005d1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d26:	f200 80af 	bhi.w	8005e88 <Trajectory+0x5f8>
 8005d2a:	4b77      	ldr	r3, [pc, #476]	; (8005f08 <Trajectory+0x678>)
 8005d2c:	ed93 7a00 	vldr	s14, [r3]
 8005d30:	4b73      	ldr	r3, [pc, #460]	; (8005f00 <Trajectory+0x670>)
 8005d32:	edd3 7a00 	vldr	s15, [r3]
 8005d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3e:	f140 80a3 	bpl.w	8005e88 <Trajectory+0x5f8>
		time_trajectory += 0.0001;
 8005d42:	4b71      	ldr	r3, [pc, #452]	; (8005f08 <Trajectory+0x678>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fa fc06 	bl	8000558 <__aeabi_f2d>
 8005d4c:	a36a      	add	r3, pc, #424	; (adr r3, 8005ef8 <Trajectory+0x668>)
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	f7fa faa3 	bl	800029c <__adddf3>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	f7fa ff4b 	bl	8000bf8 <__aeabi_d2f>
 8005d62:	4603      	mov	r3, r0
 8005d64:	4a68      	ldr	r2, [pc, #416]	; (8005f08 <Trajectory+0x678>)
 8005d66:	6013      	str	r3, [r2, #0]
		time_err = (time_trajectory - (time_acc + time_const));
 8005d68:	4b67      	ldr	r3, [pc, #412]	; (8005f08 <Trajectory+0x678>)
 8005d6a:	ed93 7a00 	vldr	s14, [r3]
 8005d6e:	4b65      	ldr	r3, [pc, #404]	; (8005f04 <Trajectory+0x674>)
 8005d70:	edd3 6a00 	vldr	s13, [r3]
 8005d74:	4b65      	ldr	r3, [pc, #404]	; (8005f0c <Trajectory+0x67c>)
 8005d76:	edd3 7a00 	vldr	s15, [r3]
 8005d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d82:	4b63      	ldr	r3, [pc, #396]	; (8005f10 <Trajectory+0x680>)
 8005d84:	edc3 7a00 	vstr	s15, [r3]
		position = position_acc + position_const + (max_velocity * time_err) + (0.5 * (-1) * acceleration_max * (time_err * time_err) * sign);
 8005d88:	4b62      	ldr	r3, [pc, #392]	; (8005f14 <Trajectory+0x684>)
 8005d8a:	ed93 7a00 	vldr	s14, [r3]
 8005d8e:	4b62      	ldr	r3, [pc, #392]	; (8005f18 <Trajectory+0x688>)
 8005d90:	edd3 7a00 	vldr	s15, [r3]
 8005d94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d98:	4b60      	ldr	r3, [pc, #384]	; (8005f1c <Trajectory+0x68c>)
 8005d9a:	edd3 6a00 	vldr	s13, [r3]
 8005d9e:	4b5c      	ldr	r3, [pc, #368]	; (8005f10 <Trajectory+0x680>)
 8005da0:	edd3 7a00 	vldr	s15, [r3]
 8005da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dac:	ee17 0a90 	vmov	r0, s15
 8005db0:	f7fa fbd2 	bl	8000558 <__aeabi_f2d>
 8005db4:	4604      	mov	r4, r0
 8005db6:	460d      	mov	r5, r1
 8005db8:	6978      	ldr	r0, [r7, #20]
 8005dba:	f7fa fbcd 	bl	8000558 <__aeabi_f2d>
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	4b57      	ldr	r3, [pc, #348]	; (8005f20 <Trajectory+0x690>)
 8005dc4:	f7fa fc20 	bl	8000608 <__aeabi_dmul>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4690      	mov	r8, r2
 8005dce:	4699      	mov	r9, r3
 8005dd0:	4b4f      	ldr	r3, [pc, #316]	; (8005f10 <Trajectory+0x680>)
 8005dd2:	ed93 7a00 	vldr	s14, [r3]
 8005dd6:	4b4e      	ldr	r3, [pc, #312]	; (8005f10 <Trajectory+0x680>)
 8005dd8:	edd3 7a00 	vldr	s15, [r3]
 8005ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de0:	ee17 0a90 	vmov	r0, s15
 8005de4:	f7fa fbb8 	bl	8000558 <__aeabi_f2d>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4640      	mov	r0, r8
 8005dee:	4649      	mov	r1, r9
 8005df0:	f7fa fc0a 	bl	8000608 <__aeabi_dmul>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	4690      	mov	r8, r2
 8005dfa:	4699      	mov	r9, r3
 8005dfc:	4b49      	ldr	r3, [pc, #292]	; (8005f24 <Trajectory+0x694>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fa fb97 	bl	8000534 <__aeabi_i2d>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	4649      	mov	r1, r9
 8005e0e:	f7fa fbfb 	bl	8000608 <__aeabi_dmul>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4620      	mov	r0, r4
 8005e18:	4629      	mov	r1, r5
 8005e1a:	f7fa fa3f 	bl	800029c <__adddf3>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	4610      	mov	r0, r2
 8005e24:	4619      	mov	r1, r3
 8005e26:	f7fa fee7 	bl	8000bf8 <__aeabi_d2f>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	4a3e      	ldr	r2, [pc, #248]	; (8005f28 <Trajectory+0x698>)
 8005e2e:	6013      	str	r3, [r2, #0]
		velocity = (-acceleration_max * sign * time_err) + (max_velocity);
 8005e30:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e34:	eeb1 7a67 	vneg.f32	s14, s15
 8005e38:	4b3a      	ldr	r3, [pc, #232]	; (8005f24 <Trajectory+0x694>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	ee07 3a90 	vmov	s15, r3
 8005e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e48:	4b31      	ldr	r3, [pc, #196]	; (8005f10 <Trajectory+0x680>)
 8005e4a:	edd3 7a00 	vldr	s15, [r3]
 8005e4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e52:	4b32      	ldr	r3, [pc, #200]	; (8005f1c <Trajectory+0x68c>)
 8005e54:	edd3 7a00 	vldr	s15, [r3]
 8005e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e5c:	4b33      	ldr	r3, [pc, #204]	; (8005f2c <Trajectory+0x69c>)
 8005e5e:	edc3 7a00 	vstr	s15, [r3]
		acceleration = -acceleration_max * sign;
 8005e62:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e66:	eeb1 7a67 	vneg.f32	s14, s15
 8005e6a:	4b2e      	ldr	r3, [pc, #184]	; (8005f24 <Trajectory+0x694>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7a:	4b2d      	ldr	r3, [pc, #180]	; (8005f30 <Trajectory+0x6a0>)
 8005e7c:	edc3 7a00 	vstr	s15, [r3]
		initial_position = position;
 8005e80:	4b29      	ldr	r3, [pc, #164]	; (8005f28 <Trajectory+0x698>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a2b      	ldr	r2, [pc, #172]	; (8005f34 <Trajectory+0x6a4>)
 8005e86:	6013      	str	r3, [r2, #0]
	}

	position = (int) position;
 8005e88:	4b27      	ldr	r3, [pc, #156]	; (8005f28 <Trajectory+0x698>)
 8005e8a:	edd3 7a00 	vldr	s15, [r3]
 8005e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e96:	4b24      	ldr	r3, [pc, #144]	; (8005f28 <Trajectory+0x698>)
 8005e98:	edc3 7a00 	vstr	s15, [r3]

	if (setpoint_now == position) {
 8005e9c:	4b26      	ldr	r3, [pc, #152]	; (8005f38 <Trajectory+0x6a8>)
 8005e9e:	ed93 7a00 	vldr	s14, [r3]
 8005ea2:	4b21      	ldr	r3, [pc, #132]	; (8005f28 <Trajectory+0x698>)
 8005ea4:	edd3 7a00 	vldr	s15, [r3]
 8005ea8:	eeb4 7a67 	vcmp.f32	s14, s15
 8005eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb0:	d10b      	bne.n	8005eca <Trajectory+0x63a>
		time_trajectory = 0;
 8005eb2:	4b15      	ldr	r3, [pc, #84]	; (8005f08 <Trajectory+0x678>)
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]
		acceleration = 0;
 8005eba:	4b1d      	ldr	r3, [pc, #116]	; (8005f30 <Trajectory+0x6a0>)
 8005ebc:	f04f 0200 	mov.w	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]
		velocity = 0;
 8005ec2:	4b1a      	ldr	r3, [pc, #104]	; (8005f2c <Trajectory+0x69c>)
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
	}
	}

	*position_out = position;
 8005eca:	4b17      	ldr	r3, [pc, #92]	; (8005f28 <Trajectory+0x698>)
 8005ecc:	edd3 7a00 	vldr	s15, [r3]
 8005ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ed4:	ee17 2a90 	vmov	r2, s15
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	601a      	str	r2, [r3, #0]
	*velocity_out = velocity;
 8005edc:	4b13      	ldr	r3, [pc, #76]	; (8005f2c <Trajectory+0x69c>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	601a      	str	r2, [r3, #0]
	*acceleration_out = acceleration;
 8005ee4:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <Trajectory+0x6a0>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	601a      	str	r2, [r3, #0]
}
 8005eec:	3720      	adds	r7, #32
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005ef4:	f3af 8000 	nop.w
 8005ef8:	eb1c432d 	.word	0xeb1c432d
 8005efc:	3f1a36e2 	.word	0x3f1a36e2
 8005f00:	20001e54 	.word	0x20001e54
 8005f04:	20001e4c 	.word	0x20001e4c
 8005f08:	20001e44 	.word	0x20001e44
 8005f0c:	20001e50 	.word	0x20001e50
 8005f10:	20001e64 	.word	0x20001e64
 8005f14:	20001e60 	.word	0x20001e60
 8005f18:	20001e5c 	.word	0x20001e5c
 8005f1c:	20001e58 	.word	0x20001e58
 8005f20:	bfe00000 	.word	0xbfe00000
 8005f24:	20001e38 	.word	0x20001e38
 8005f28:	20001e2c 	.word	0x20001e2c
 8005f2c:	20001e30 	.word	0x20001e30
 8005f30:	20001e34 	.word	0x20001e34
 8005f34:	20001e28 	.word	0x20001e28
 8005f38:	20001e3c 	.word	0x20001e3c

08005f3c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005f40:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <MX_USART1_UART_Init+0x4c>)
 8005f42:	4a12      	ldr	r2, [pc, #72]	; (8005f8c <MX_USART1_UART_Init+0x50>)
 8005f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005f46:	4b10      	ldr	r3, [pc, #64]	; (8005f88 <MX_USART1_UART_Init+0x4c>)
 8005f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f4e:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <MX_USART1_UART_Init+0x4c>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005f54:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <MX_USART1_UART_Init+0x4c>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005f5a:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <MX_USART1_UART_Init+0x4c>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005f60:	4b09      	ldr	r3, [pc, #36]	; (8005f88 <MX_USART1_UART_Init+0x4c>)
 8005f62:	220c      	movs	r2, #12
 8005f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f66:	4b08      	ldr	r3, [pc, #32]	; (8005f88 <MX_USART1_UART_Init+0x4c>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f6c:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <MX_USART1_UART_Init+0x4c>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f72:	4805      	ldr	r0, [pc, #20]	; (8005f88 <MX_USART1_UART_Init+0x4c>)
 8005f74:	f004 fcc8 	bl	800a908 <HAL_UART_Init>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005f7e:	f7fe ff51 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005f82:	bf00      	nop
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20001e68 	.word	0x20001e68
 8005f8c:	40011000 	.word	0x40011000

08005f90 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005f94:	4b12      	ldr	r3, [pc, #72]	; (8005fe0 <MX_USART2_UART_Init+0x50>)
 8005f96:	4a13      	ldr	r2, [pc, #76]	; (8005fe4 <MX_USART2_UART_Init+0x54>)
 8005f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8005f9a:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <MX_USART2_UART_Init+0x50>)
 8005f9c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8005fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8005fa2:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <MX_USART2_UART_Init+0x50>)
 8005fa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005fa8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005faa:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <MX_USART2_UART_Init+0x50>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <MX_USART2_UART_Init+0x50>)
 8005fb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005fb8:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <MX_USART2_UART_Init+0x50>)
 8005fba:	220c      	movs	r2, #12
 8005fbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fbe:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <MX_USART2_UART_Init+0x50>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fc4:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <MX_USART2_UART_Init+0x50>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005fca:	4805      	ldr	r0, [pc, #20]	; (8005fe0 <MX_USART2_UART_Init+0x50>)
 8005fcc:	f004 fc9c 	bl	800a908 <HAL_UART_Init>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8005fd6:	f7fe ff25 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005fda:	bf00      	nop
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20001edc 	.word	0x20001edc
 8005fe4:	40004400 	.word	0x40004400

08005fe8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08c      	sub	sp, #48	; 0x30
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ff0:	f107 031c 	add.w	r3, r7, #28
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	605a      	str	r2, [r3, #4]
 8005ffa:	609a      	str	r2, [r3, #8]
 8005ffc:	60da      	str	r2, [r3, #12]
 8005ffe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a68      	ldr	r2, [pc, #416]	; (80061a8 <HAL_UART_MspInit+0x1c0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d163      	bne.n	80060d2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800600a:	2300      	movs	r3, #0
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	4b67      	ldr	r3, [pc, #412]	; (80061ac <HAL_UART_MspInit+0x1c4>)
 8006010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006012:	4a66      	ldr	r2, [pc, #408]	; (80061ac <HAL_UART_MspInit+0x1c4>)
 8006014:	f043 0310 	orr.w	r3, r3, #16
 8006018:	6453      	str	r3, [r2, #68]	; 0x44
 800601a:	4b64      	ldr	r3, [pc, #400]	; (80061ac <HAL_UART_MspInit+0x1c4>)
 800601c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601e:	f003 0310 	and.w	r3, r3, #16
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]
 800602a:	4b60      	ldr	r3, [pc, #384]	; (80061ac <HAL_UART_MspInit+0x1c4>)
 800602c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602e:	4a5f      	ldr	r2, [pc, #380]	; (80061ac <HAL_UART_MspInit+0x1c4>)
 8006030:	f043 0301 	orr.w	r3, r3, #1
 8006034:	6313      	str	r3, [r2, #48]	; 0x30
 8006036:	4b5d      	ldr	r3, [pc, #372]	; (80061ac <HAL_UART_MspInit+0x1c4>)
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006042:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006048:	2302      	movs	r3, #2
 800604a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800604c:	2300      	movs	r3, #0
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006050:	2303      	movs	r3, #3
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006054:	2307      	movs	r3, #7
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006058:	f107 031c 	add.w	r3, r7, #28
 800605c:	4619      	mov	r1, r3
 800605e:	4854      	ldr	r0, [pc, #336]	; (80061b0 <HAL_UART_MspInit+0x1c8>)
 8006060:	f001 f904 	bl	800726c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006064:	4b53      	ldr	r3, [pc, #332]	; (80061b4 <HAL_UART_MspInit+0x1cc>)
 8006066:	4a54      	ldr	r2, [pc, #336]	; (80061b8 <HAL_UART_MspInit+0x1d0>)
 8006068:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800606a:	4b52      	ldr	r3, [pc, #328]	; (80061b4 <HAL_UART_MspInit+0x1cc>)
 800606c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006070:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006072:	4b50      	ldr	r3, [pc, #320]	; (80061b4 <HAL_UART_MspInit+0x1cc>)
 8006074:	2240      	movs	r2, #64	; 0x40
 8006076:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006078:	4b4e      	ldr	r3, [pc, #312]	; (80061b4 <HAL_UART_MspInit+0x1cc>)
 800607a:	2200      	movs	r2, #0
 800607c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800607e:	4b4d      	ldr	r3, [pc, #308]	; (80061b4 <HAL_UART_MspInit+0x1cc>)
 8006080:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006084:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006086:	4b4b      	ldr	r3, [pc, #300]	; (80061b4 <HAL_UART_MspInit+0x1cc>)
 8006088:	2200      	movs	r2, #0
 800608a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800608c:	4b49      	ldr	r3, [pc, #292]	; (80061b4 <HAL_UART_MspInit+0x1cc>)
 800608e:	2200      	movs	r2, #0
 8006090:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006092:	4b48      	ldr	r3, [pc, #288]	; (80061b4 <HAL_UART_MspInit+0x1cc>)
 8006094:	2200      	movs	r2, #0
 8006096:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006098:	4b46      	ldr	r3, [pc, #280]	; (80061b4 <HAL_UART_MspInit+0x1cc>)
 800609a:	2200      	movs	r2, #0
 800609c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800609e:	4b45      	ldr	r3, [pc, #276]	; (80061b4 <HAL_UART_MspInit+0x1cc>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80060a4:	4843      	ldr	r0, [pc, #268]	; (80061b4 <HAL_UART_MspInit+0x1cc>)
 80060a6:	f000 fcd3 	bl	8006a50 <HAL_DMA_Init>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80060b0:	f7fe feb8 	bl	8004e24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a3f      	ldr	r2, [pc, #252]	; (80061b4 <HAL_UART_MspInit+0x1cc>)
 80060b8:	635a      	str	r2, [r3, #52]	; 0x34
 80060ba:	4a3e      	ldr	r2, [pc, #248]	; (80061b4 <HAL_UART_MspInit+0x1cc>)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80060c0:	2200      	movs	r2, #0
 80060c2:	2100      	movs	r1, #0
 80060c4:	2025      	movs	r0, #37	; 0x25
 80060c6:	f000 fc8c 	bl	80069e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80060ca:	2025      	movs	r0, #37	; 0x25
 80060cc:	f000 fca5 	bl	8006a1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80060d0:	e066      	b.n	80061a0 <HAL_UART_MspInit+0x1b8>
  else if(uartHandle->Instance==USART2)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a39      	ldr	r2, [pc, #228]	; (80061bc <HAL_UART_MspInit+0x1d4>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d161      	bne.n	80061a0 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	4b32      	ldr	r3, [pc, #200]	; (80061ac <HAL_UART_MspInit+0x1c4>)
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	4a31      	ldr	r2, [pc, #196]	; (80061ac <HAL_UART_MspInit+0x1c4>)
 80060e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ea:	6413      	str	r3, [r2, #64]	; 0x40
 80060ec:	4b2f      	ldr	r3, [pc, #188]	; (80061ac <HAL_UART_MspInit+0x1c4>)
 80060ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f4:	613b      	str	r3, [r7, #16]
 80060f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	4b2b      	ldr	r3, [pc, #172]	; (80061ac <HAL_UART_MspInit+0x1c4>)
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	4a2a      	ldr	r2, [pc, #168]	; (80061ac <HAL_UART_MspInit+0x1c4>)
 8006102:	f043 0301 	orr.w	r3, r3, #1
 8006106:	6313      	str	r3, [r2, #48]	; 0x30
 8006108:	4b28      	ldr	r3, [pc, #160]	; (80061ac <HAL_UART_MspInit+0x1c4>)
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006114:	230c      	movs	r3, #12
 8006116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006118:	2302      	movs	r3, #2
 800611a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800611c:	2300      	movs	r3, #0
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006120:	2303      	movs	r3, #3
 8006122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006124:	2307      	movs	r3, #7
 8006126:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006128:	f107 031c 	add.w	r3, r7, #28
 800612c:	4619      	mov	r1, r3
 800612e:	4820      	ldr	r0, [pc, #128]	; (80061b0 <HAL_UART_MspInit+0x1c8>)
 8006130:	f001 f89c 	bl	800726c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006134:	4b22      	ldr	r3, [pc, #136]	; (80061c0 <HAL_UART_MspInit+0x1d8>)
 8006136:	4a23      	ldr	r2, [pc, #140]	; (80061c4 <HAL_UART_MspInit+0x1dc>)
 8006138:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800613a:	4b21      	ldr	r3, [pc, #132]	; (80061c0 <HAL_UART_MspInit+0x1d8>)
 800613c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006140:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006142:	4b1f      	ldr	r3, [pc, #124]	; (80061c0 <HAL_UART_MspInit+0x1d8>)
 8006144:	2240      	movs	r2, #64	; 0x40
 8006146:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006148:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <HAL_UART_MspInit+0x1d8>)
 800614a:	2200      	movs	r2, #0
 800614c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800614e:	4b1c      	ldr	r3, [pc, #112]	; (80061c0 <HAL_UART_MspInit+0x1d8>)
 8006150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006154:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006156:	4b1a      	ldr	r3, [pc, #104]	; (80061c0 <HAL_UART_MspInit+0x1d8>)
 8006158:	2200      	movs	r2, #0
 800615a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800615c:	4b18      	ldr	r3, [pc, #96]	; (80061c0 <HAL_UART_MspInit+0x1d8>)
 800615e:	2200      	movs	r2, #0
 8006160:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006162:	4b17      	ldr	r3, [pc, #92]	; (80061c0 <HAL_UART_MspInit+0x1d8>)
 8006164:	2200      	movs	r2, #0
 8006166:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006168:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <HAL_UART_MspInit+0x1d8>)
 800616a:	2200      	movs	r2, #0
 800616c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800616e:	4b14      	ldr	r3, [pc, #80]	; (80061c0 <HAL_UART_MspInit+0x1d8>)
 8006170:	2200      	movs	r2, #0
 8006172:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006174:	4812      	ldr	r0, [pc, #72]	; (80061c0 <HAL_UART_MspInit+0x1d8>)
 8006176:	f000 fc6b 	bl	8006a50 <HAL_DMA_Init>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8006180:	f7fe fe50 	bl	8004e24 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a0e      	ldr	r2, [pc, #56]	; (80061c0 <HAL_UART_MspInit+0x1d8>)
 8006188:	635a      	str	r2, [r3, #52]	; 0x34
 800618a:	4a0d      	ldr	r2, [pc, #52]	; (80061c0 <HAL_UART_MspInit+0x1d8>)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006190:	2200      	movs	r2, #0
 8006192:	2100      	movs	r1, #0
 8006194:	2026      	movs	r0, #38	; 0x26
 8006196:	f000 fc24 	bl	80069e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800619a:	2026      	movs	r0, #38	; 0x26
 800619c:	f000 fc3d 	bl	8006a1a <HAL_NVIC_EnableIRQ>
}
 80061a0:	bf00      	nop
 80061a2:	3730      	adds	r7, #48	; 0x30
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40011000 	.word	0x40011000
 80061ac:	40023800 	.word	0x40023800
 80061b0:	40020000 	.word	0x40020000
 80061b4:	20001f50 	.word	0x20001f50
 80061b8:	400264b8 	.word	0x400264b8
 80061bc:	40004400 	.word	0x40004400
 80061c0:	20001fb0 	.word	0x20001fb0
 80061c4:	400260a0 	.word	0x400260a0

080061c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80061c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80061cc:	480d      	ldr	r0, [pc, #52]	; (8006204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80061ce:	490e      	ldr	r1, [pc, #56]	; (8006208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80061d0:	4a0e      	ldr	r2, [pc, #56]	; (800620c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80061d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80061d4:	e002      	b.n	80061dc <LoopCopyDataInit>

080061d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061da:	3304      	adds	r3, #4

080061dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80061e0:	d3f9      	bcc.n	80061d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80061e2:	4a0b      	ldr	r2, [pc, #44]	; (8006210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80061e4:	4c0b      	ldr	r4, [pc, #44]	; (8006214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80061e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80061e8:	e001      	b.n	80061ee <LoopFillZerobss>

080061ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80061ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80061ec:	3204      	adds	r2, #4

080061ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80061ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80061f0:	d3fb      	bcc.n	80061ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80061f2:	f7fe ff99 	bl	8005128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80061f6:	f005 fe1d 	bl	800be34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80061fa:	f7fe fd03 	bl	8004c04 <main>
  bx  lr    
 80061fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006208:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 800620c:	08013928 	.word	0x08013928
  ldr r2, =_sbss
 8006210:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 8006214:	20002024 	.word	0x20002024

08006218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006218:	e7fe      	b.n	8006218 <ADC_IRQHandler>
	...

0800621c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006220:	4b0e      	ldr	r3, [pc, #56]	; (800625c <HAL_Init+0x40>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a0d      	ldr	r2, [pc, #52]	; (800625c <HAL_Init+0x40>)
 8006226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800622a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800622c:	4b0b      	ldr	r3, [pc, #44]	; (800625c <HAL_Init+0x40>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a0a      	ldr	r2, [pc, #40]	; (800625c <HAL_Init+0x40>)
 8006232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006238:	4b08      	ldr	r3, [pc, #32]	; (800625c <HAL_Init+0x40>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a07      	ldr	r2, [pc, #28]	; (800625c <HAL_Init+0x40>)
 800623e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006244:	2003      	movs	r0, #3
 8006246:	f000 fbc1 	bl	80069cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800624a:	2000      	movs	r0, #0
 800624c:	f000 f808 	bl	8006260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006250:	f7fe fdee 	bl	8004e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	40023c00 	.word	0x40023c00

08006260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006268:	4b12      	ldr	r3, [pc, #72]	; (80062b4 <HAL_InitTick+0x54>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <HAL_InitTick+0x58>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	4619      	mov	r1, r3
 8006272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006276:	fbb3 f3f1 	udiv	r3, r3, r1
 800627a:	fbb2 f3f3 	udiv	r3, r2, r3
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fbd9 	bl	8006a36 <HAL_SYSTICK_Config>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e00e      	b.n	80062ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b0f      	cmp	r3, #15
 8006292:	d80a      	bhi.n	80062aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006294:	2200      	movs	r2, #0
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	f04f 30ff 	mov.w	r0, #4294967295
 800629c:	f000 fba1 	bl	80069e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80062a0:	4a06      	ldr	r2, [pc, #24]	; (80062bc <HAL_InitTick+0x5c>)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	e000      	b.n	80062ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20000230 	.word	0x20000230
 80062b8:	20000238 	.word	0x20000238
 80062bc:	20000234 	.word	0x20000234

080062c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062c4:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <HAL_IncTick+0x20>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	461a      	mov	r2, r3
 80062ca:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <HAL_IncTick+0x24>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4413      	add	r3, r2
 80062d0:	4a04      	ldr	r2, [pc, #16]	; (80062e4 <HAL_IncTick+0x24>)
 80062d2:	6013      	str	r3, [r2, #0]
}
 80062d4:	bf00      	nop
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20000238 	.word	0x20000238
 80062e4:	20002010 	.word	0x20002010

080062e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  return uwTick;
 80062ec:	4b03      	ldr	r3, [pc, #12]	; (80062fc <HAL_GetTick+0x14>)
 80062ee:	681b      	ldr	r3, [r3, #0]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	20002010 	.word	0x20002010

08006300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006308:	f7ff ffee 	bl	80062e8 <HAL_GetTick>
 800630c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d005      	beq.n	8006326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800631a:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <HAL_Delay+0x44>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006326:	bf00      	nop
 8006328:	f7ff ffde 	bl	80062e8 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	429a      	cmp	r2, r3
 8006336:	d8f7      	bhi.n	8006328 <HAL_Delay+0x28>
  {
  }
}
 8006338:	bf00      	nop
 800633a:	bf00      	nop
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000238 	.word	0x20000238

08006348 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e033      	b.n	80063c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d109      	bne.n	800637a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fb fec6 	bl	80020f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	f003 0310 	and.w	r3, r3, #16
 8006382:	2b00      	cmp	r3, #0
 8006384:	d118      	bne.n	80063b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800638e:	f023 0302 	bic.w	r3, r3, #2
 8006392:	f043 0202 	orr.w	r2, r3, #2
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f94a 	bl	8006634 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f023 0303 	bic.w	r3, r3, #3
 80063ae:	f043 0201 	orr.w	r2, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	641a      	str	r2, [r3, #64]	; 0x40
 80063b6:	e001      	b.n	80063bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_ADC_ConfigChannel+0x1c>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e113      	b.n	8006614 <HAL_ADC_ConfigChannel+0x244>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b09      	cmp	r3, #9
 80063fa:	d925      	bls.n	8006448 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68d9      	ldr	r1, [r3, #12]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	461a      	mov	r2, r3
 800640a:	4613      	mov	r3, r2
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	4413      	add	r3, r2
 8006410:	3b1e      	subs	r3, #30
 8006412:	2207      	movs	r2, #7
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	43da      	mvns	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	400a      	ands	r2, r1
 8006420:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68d9      	ldr	r1, [r3, #12]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	b29b      	uxth	r3, r3
 8006432:	4618      	mov	r0, r3
 8006434:	4603      	mov	r3, r0
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	4403      	add	r3, r0
 800643a:	3b1e      	subs	r3, #30
 800643c:	409a      	lsls	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	60da      	str	r2, [r3, #12]
 8006446:	e022      	b.n	800648e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6919      	ldr	r1, [r3, #16]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	b29b      	uxth	r3, r3
 8006454:	461a      	mov	r2, r3
 8006456:	4613      	mov	r3, r2
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	4413      	add	r3, r2
 800645c:	2207      	movs	r2, #7
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	43da      	mvns	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	400a      	ands	r2, r1
 800646a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6919      	ldr	r1, [r3, #16]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	4618      	mov	r0, r3
 800647e:	4603      	mov	r3, r0
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	4403      	add	r3, r0
 8006484:	409a      	lsls	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b06      	cmp	r3, #6
 8006494:	d824      	bhi.n	80064e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	4613      	mov	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	3b05      	subs	r3, #5
 80064a8:	221f      	movs	r2, #31
 80064aa:	fa02 f303 	lsl.w	r3, r2, r3
 80064ae:	43da      	mvns	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	400a      	ands	r2, r1
 80064b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	4618      	mov	r0, r3
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	4613      	mov	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	3b05      	subs	r3, #5
 80064d2:	fa00 f203 	lsl.w	r2, r0, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	635a      	str	r2, [r3, #52]	; 0x34
 80064de:	e04c      	b.n	800657a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2b0c      	cmp	r3, #12
 80064e6:	d824      	bhi.n	8006532 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	3b23      	subs	r3, #35	; 0x23
 80064fa:	221f      	movs	r2, #31
 80064fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006500:	43da      	mvns	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	400a      	ands	r2, r1
 8006508:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	b29b      	uxth	r3, r3
 8006516:	4618      	mov	r0, r3
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	3b23      	subs	r3, #35	; 0x23
 8006524:	fa00 f203 	lsl.w	r2, r0, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	631a      	str	r2, [r3, #48]	; 0x30
 8006530:	e023      	b.n	800657a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	3b41      	subs	r3, #65	; 0x41
 8006544:	221f      	movs	r2, #31
 8006546:	fa02 f303 	lsl.w	r3, r2, r3
 800654a:	43da      	mvns	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	400a      	ands	r2, r1
 8006552:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	b29b      	uxth	r3, r3
 8006560:	4618      	mov	r0, r3
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	4613      	mov	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	3b41      	subs	r3, #65	; 0x41
 800656e:	fa00 f203 	lsl.w	r2, r0, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800657a:	4b29      	ldr	r3, [pc, #164]	; (8006620 <HAL_ADC_ConfigChannel+0x250>)
 800657c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a28      	ldr	r2, [pc, #160]	; (8006624 <HAL_ADC_ConfigChannel+0x254>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d10f      	bne.n	80065a8 <HAL_ADC_ConfigChannel+0x1d8>
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b12      	cmp	r3, #18
 800658e:	d10b      	bne.n	80065a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a1d      	ldr	r2, [pc, #116]	; (8006624 <HAL_ADC_ConfigChannel+0x254>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d12b      	bne.n	800660a <HAL_ADC_ConfigChannel+0x23a>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1c      	ldr	r2, [pc, #112]	; (8006628 <HAL_ADC_ConfigChannel+0x258>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <HAL_ADC_ConfigChannel+0x1f4>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b11      	cmp	r3, #17
 80065c2:	d122      	bne.n	800660a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a11      	ldr	r2, [pc, #68]	; (8006628 <HAL_ADC_ConfigChannel+0x258>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d111      	bne.n	800660a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80065e6:	4b11      	ldr	r3, [pc, #68]	; (800662c <HAL_ADC_ConfigChannel+0x25c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a11      	ldr	r2, [pc, #68]	; (8006630 <HAL_ADC_ConfigChannel+0x260>)
 80065ec:	fba2 2303 	umull	r2, r3, r2, r3
 80065f0:	0c9a      	lsrs	r2, r3, #18
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80065fc:	e002      	b.n	8006604 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	3b01      	subs	r3, #1
 8006602:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1f9      	bne.n	80065fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	40012300 	.word	0x40012300
 8006624:	40012000 	.word	0x40012000
 8006628:	10000012 	.word	0x10000012
 800662c:	20000230 	.word	0x20000230
 8006630:	431bde83 	.word	0x431bde83

08006634 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800663c:	4b79      	ldr	r3, [pc, #484]	; (8006824 <ADC_Init+0x1f0>)
 800663e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	431a      	orrs	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006668:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6859      	ldr	r1, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	021a      	lsls	r2, r3, #8
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800668c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6859      	ldr	r1, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689a      	ldr	r2, [r3, #8]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6899      	ldr	r1, [r3, #8]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c6:	4a58      	ldr	r2, [pc, #352]	; (8006828 <ADC_Init+0x1f4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d022      	beq.n	8006712 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6899      	ldr	r1, [r3, #8]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80066fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6899      	ldr	r1, [r3, #8]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	609a      	str	r2, [r3, #8]
 8006710:	e00f      	b.n	8006732 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006720:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006730:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0202 	bic.w	r2, r2, #2
 8006740:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6899      	ldr	r1, [r3, #8]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	7e1b      	ldrb	r3, [r3, #24]
 800674c:	005a      	lsls	r2, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01b      	beq.n	8006798 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800676e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800677e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6859      	ldr	r1, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	3b01      	subs	r3, #1
 800678c:	035a      	lsls	r2, r3, #13
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	605a      	str	r2, [r3, #4]
 8006796:	e007      	b.n	80067a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80067b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	051a      	lsls	r2, r3, #20
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80067dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6899      	ldr	r1, [r3, #8]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067ea:	025a      	lsls	r2, r3, #9
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006802:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6899      	ldr	r1, [r3, #8]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	029a      	lsls	r2, r3, #10
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	609a      	str	r2, [r3, #8]
}
 8006818:	bf00      	nop
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	40012300 	.word	0x40012300
 8006828:	0f000001 	.word	0x0f000001

0800682c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800683c:	4b0c      	ldr	r3, [pc, #48]	; (8006870 <__NVIC_SetPriorityGrouping+0x44>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006848:	4013      	ands	r3, r2
 800684a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800685c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800685e:	4a04      	ldr	r2, [pc, #16]	; (8006870 <__NVIC_SetPriorityGrouping+0x44>)
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	60d3      	str	r3, [r2, #12]
}
 8006864:	bf00      	nop
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	e000ed00 	.word	0xe000ed00

08006874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006878:	4b04      	ldr	r3, [pc, #16]	; (800688c <__NVIC_GetPriorityGrouping+0x18>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	0a1b      	lsrs	r3, r3, #8
 800687e:	f003 0307 	and.w	r3, r3, #7
}
 8006882:	4618      	mov	r0, r3
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	e000ed00 	.word	0xe000ed00

08006890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	4603      	mov	r3, r0
 8006898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800689a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	db0b      	blt.n	80068ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	f003 021f 	and.w	r2, r3, #31
 80068a8:	4907      	ldr	r1, [pc, #28]	; (80068c8 <__NVIC_EnableIRQ+0x38>)
 80068aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ae:	095b      	lsrs	r3, r3, #5
 80068b0:	2001      	movs	r0, #1
 80068b2:	fa00 f202 	lsl.w	r2, r0, r2
 80068b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	e000e100 	.word	0xe000e100

080068cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	4603      	mov	r3, r0
 80068d4:	6039      	str	r1, [r7, #0]
 80068d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	db0a      	blt.n	80068f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	490c      	ldr	r1, [pc, #48]	; (8006918 <__NVIC_SetPriority+0x4c>)
 80068e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ea:	0112      	lsls	r2, r2, #4
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	440b      	add	r3, r1
 80068f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068f4:	e00a      	b.n	800690c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	4908      	ldr	r1, [pc, #32]	; (800691c <__NVIC_SetPriority+0x50>)
 80068fc:	79fb      	ldrb	r3, [r7, #7]
 80068fe:	f003 030f 	and.w	r3, r3, #15
 8006902:	3b04      	subs	r3, #4
 8006904:	0112      	lsls	r2, r2, #4
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	440b      	add	r3, r1
 800690a:	761a      	strb	r2, [r3, #24]
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	e000e100 	.word	0xe000e100
 800691c:	e000ed00 	.word	0xe000ed00

08006920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006920:	b480      	push	{r7}
 8006922:	b089      	sub	sp, #36	; 0x24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f003 0307 	and.w	r3, r3, #7
 8006932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f1c3 0307 	rsb	r3, r3, #7
 800693a:	2b04      	cmp	r3, #4
 800693c:	bf28      	it	cs
 800693e:	2304      	movcs	r3, #4
 8006940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	3304      	adds	r3, #4
 8006946:	2b06      	cmp	r3, #6
 8006948:	d902      	bls.n	8006950 <NVIC_EncodePriority+0x30>
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	3b03      	subs	r3, #3
 800694e:	e000      	b.n	8006952 <NVIC_EncodePriority+0x32>
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006954:	f04f 32ff 	mov.w	r2, #4294967295
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	fa02 f303 	lsl.w	r3, r2, r3
 800695e:	43da      	mvns	r2, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	401a      	ands	r2, r3
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006968:	f04f 31ff 	mov.w	r1, #4294967295
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	fa01 f303 	lsl.w	r3, r1, r3
 8006972:	43d9      	mvns	r1, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006978:	4313      	orrs	r3, r2
         );
}
 800697a:	4618      	mov	r0, r3
 800697c:	3724      	adds	r7, #36	; 0x24
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
	...

08006988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3b01      	subs	r3, #1
 8006994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006998:	d301      	bcc.n	800699e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800699a:	2301      	movs	r3, #1
 800699c:	e00f      	b.n	80069be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800699e:	4a0a      	ldr	r2, [pc, #40]	; (80069c8 <SysTick_Config+0x40>)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80069a6:	210f      	movs	r1, #15
 80069a8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ac:	f7ff ff8e 	bl	80068cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80069b0:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <SysTick_Config+0x40>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069b6:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <SysTick_Config+0x40>)
 80069b8:	2207      	movs	r2, #7
 80069ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	e000e010 	.word	0xe000e010

080069cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7ff ff29 	bl	800682c <__NVIC_SetPriorityGrouping>
}
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b086      	sub	sp, #24
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	4603      	mov	r3, r0
 80069ea:	60b9      	str	r1, [r7, #8]
 80069ec:	607a      	str	r2, [r7, #4]
 80069ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80069f4:	f7ff ff3e 	bl	8006874 <__NVIC_GetPriorityGrouping>
 80069f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	6978      	ldr	r0, [r7, #20]
 8006a00:	f7ff ff8e 	bl	8006920 <NVIC_EncodePriority>
 8006a04:	4602      	mov	r2, r0
 8006a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7ff ff5d 	bl	80068cc <__NVIC_SetPriority>
}
 8006a12:	bf00      	nop
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b082      	sub	sp, #8
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	4603      	mov	r3, r0
 8006a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff ff31 	bl	8006890 <__NVIC_EnableIRQ>
}
 8006a2e:	bf00      	nop
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b082      	sub	sp, #8
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff ffa2 	bl	8006988 <SysTick_Config>
 8006a44:	4603      	mov	r3, r0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006a5c:	f7ff fc44 	bl	80062e8 <HAL_GetTick>
 8006a60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e099      	b.n	8006ba0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0201 	bic.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a8c:	e00f      	b.n	8006aae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a8e:	f7ff fc2b 	bl	80062e8 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b05      	cmp	r3, #5
 8006a9a:	d908      	bls.n	8006aae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2203      	movs	r2, #3
 8006aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e078      	b.n	8006ba0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e8      	bne.n	8006a8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	4b38      	ldr	r3, [pc, #224]	; (8006ba8 <HAL_DMA_Init+0x158>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d107      	bne.n	8006b18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	4313      	orrs	r3, r2
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f023 0307 	bic.w	r3, r3, #7
 8006b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d117      	bne.n	8006b72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00e      	beq.n	8006b72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fb0d 	bl	8007174 <DMA_CheckFifoParam>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d008      	beq.n	8006b72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2240      	movs	r2, #64	; 0x40
 8006b64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e016      	b.n	8006ba0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fac4 	bl	8007108 <DMA_CalcBaseAndBitshift>
 8006b80:	4603      	mov	r3, r0
 8006b82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b88:	223f      	movs	r2, #63	; 0x3f
 8006b8a:	409a      	lsls	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	f010803f 	.word	0xf010803f

08006bac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_DMA_Start_IT+0x26>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e040      	b.n	8006c54 <HAL_DMA_Start_IT+0xa8>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d12f      	bne.n	8006c46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2202      	movs	r2, #2
 8006bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 fa56 	bl	80070ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c04:	223f      	movs	r2, #63	; 0x3f
 8006c06:	409a      	lsls	r2, r3
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0216 	orr.w	r2, r2, #22
 8006c1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d007      	beq.n	8006c34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0208 	orr.w	r2, r2, #8
 8006c32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0201 	orr.w	r2, r2, #1
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	e005      	b.n	8006c52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006c4e:	2302      	movs	r3, #2
 8006c50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006c6a:	f7ff fb3d 	bl	80062e8 <HAL_GetTick>
 8006c6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d008      	beq.n	8006c8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2280      	movs	r2, #128	; 0x80
 8006c80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e052      	b.n	8006d34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0216 	bic.w	r2, r2, #22
 8006c9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	695a      	ldr	r2, [r3, #20]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d103      	bne.n	8006cbe <HAL_DMA_Abort+0x62>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d007      	beq.n	8006cce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0208 	bic.w	r2, r2, #8
 8006ccc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0201 	bic.w	r2, r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cde:	e013      	b.n	8006d08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ce0:	f7ff fb02 	bl	80062e8 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b05      	cmp	r3, #5
 8006cec:	d90c      	bls.n	8006d08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2203      	movs	r2, #3
 8006cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e015      	b.n	8006d34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e4      	bne.n	8006ce0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d1a:	223f      	movs	r2, #63	; 0x3f
 8006d1c:	409a      	lsls	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d004      	beq.n	8006d5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2280      	movs	r2, #128	; 0x80
 8006d54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e00c      	b.n	8006d74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2205      	movs	r2, #5
 8006d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0201 	bic.w	r2, r2, #1
 8006d70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d8c:	4b8e      	ldr	r3, [pc, #568]	; (8006fc8 <HAL_DMA_IRQHandler+0x248>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a8e      	ldr	r2, [pc, #568]	; (8006fcc <HAL_DMA_IRQHandler+0x24c>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	0a9b      	lsrs	r3, r3, #10
 8006d98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006daa:	2208      	movs	r2, #8
 8006dac:	409a      	lsls	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4013      	ands	r3, r2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d01a      	beq.n	8006dec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d013      	beq.n	8006dec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0204 	bic.w	r2, r2, #4
 8006dd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd8:	2208      	movs	r2, #8
 8006dda:	409a      	lsls	r2, r3
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de4:	f043 0201 	orr.w	r2, r3, #1
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df0:	2201      	movs	r2, #1
 8006df2:	409a      	lsls	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4013      	ands	r3, r2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d012      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00b      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0e:	2201      	movs	r2, #1
 8006e10:	409a      	lsls	r2, r3
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1a:	f043 0202 	orr.w	r2, r3, #2
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e26:	2204      	movs	r2, #4
 8006e28:	409a      	lsls	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d012      	beq.n	8006e58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00b      	beq.n	8006e58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e44:	2204      	movs	r2, #4
 8006e46:	409a      	lsls	r2, r3
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e50:	f043 0204 	orr.w	r2, r3, #4
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5c:	2210      	movs	r2, #16
 8006e5e:	409a      	lsls	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4013      	ands	r3, r2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d043      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0308 	and.w	r3, r3, #8
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d03c      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e7a:	2210      	movs	r2, #16
 8006e7c:	409a      	lsls	r2, r3
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d018      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d108      	bne.n	8006eb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d024      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
 8006eae:	e01f      	b.n	8006ef0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d01b      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	4798      	blx	r3
 8006ec0:	e016      	b.n	8006ef0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d107      	bne.n	8006ee0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0208 	bic.w	r2, r2, #8
 8006ede:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	409a      	lsls	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4013      	ands	r3, r2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 808f 	beq.w	8007020 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 8087 	beq.w	8007020 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f16:	2220      	movs	r2, #32
 8006f18:	409a      	lsls	r2, r3
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b05      	cmp	r3, #5
 8006f28:	d136      	bne.n	8006f98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 0216 	bic.w	r2, r2, #22
 8006f38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	695a      	ldr	r2, [r3, #20]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d103      	bne.n	8006f5a <HAL_DMA_IRQHandler+0x1da>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d007      	beq.n	8006f6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0208 	bic.w	r2, r2, #8
 8006f68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f6e:	223f      	movs	r2, #63	; 0x3f
 8006f70:	409a      	lsls	r2, r3
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d07e      	beq.n	800708c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	4798      	blx	r3
        }
        return;
 8006f96:	e079      	b.n	800708c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d01d      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10d      	bne.n	8006fd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d031      	beq.n	8007020 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	4798      	blx	r3
 8006fc4:	e02c      	b.n	8007020 <HAL_DMA_IRQHandler+0x2a0>
 8006fc6:	bf00      	nop
 8006fc8:	20000230 	.word	0x20000230
 8006fcc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d023      	beq.n	8007020 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	4798      	blx	r3
 8006fe0:	e01e      	b.n	8007020 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10f      	bne.n	8007010 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0210 	bic.w	r2, r2, #16
 8006ffe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007024:	2b00      	cmp	r3, #0
 8007026:	d032      	beq.n	800708e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	d022      	beq.n	800707a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2205      	movs	r2, #5
 8007038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0201 	bic.w	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	3301      	adds	r3, #1
 8007050:	60bb      	str	r3, [r7, #8]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	429a      	cmp	r2, r3
 8007056:	d307      	bcc.n	8007068 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1f2      	bne.n	800704c <HAL_DMA_IRQHandler+0x2cc>
 8007066:	e000      	b.n	800706a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007068:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	4798      	blx	r3
 800708a:	e000      	b.n	800708e <HAL_DMA_IRQHandler+0x30e>
        return;
 800708c:	bf00      	nop
    }
  }
}
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	2b40      	cmp	r3, #64	; 0x40
 80070d8:	d108      	bne.n	80070ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80070ea:	e007      	b.n	80070fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	60da      	str	r2, [r3, #12]
}
 80070fc:	bf00      	nop
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	b2db      	uxtb	r3, r3
 8007116:	3b10      	subs	r3, #16
 8007118:	4a14      	ldr	r2, [pc, #80]	; (800716c <DMA_CalcBaseAndBitshift+0x64>)
 800711a:	fba2 2303 	umull	r2, r3, r2, r3
 800711e:	091b      	lsrs	r3, r3, #4
 8007120:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007122:	4a13      	ldr	r2, [pc, #76]	; (8007170 <DMA_CalcBaseAndBitshift+0x68>)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b03      	cmp	r3, #3
 8007134:	d909      	bls.n	800714a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800713e:	f023 0303 	bic.w	r3, r3, #3
 8007142:	1d1a      	adds	r2, r3, #4
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	659a      	str	r2, [r3, #88]	; 0x58
 8007148:	e007      	b.n	800715a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007152:	f023 0303 	bic.w	r3, r3, #3
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	aaaaaaab 	.word	0xaaaaaaab
 8007170:	08012e74 	.word	0x08012e74

08007174 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d11f      	bne.n	80071ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b03      	cmp	r3, #3
 8007192:	d856      	bhi.n	8007242 <DMA_CheckFifoParam+0xce>
 8007194:	a201      	add	r2, pc, #4	; (adr r2, 800719c <DMA_CheckFifoParam+0x28>)
 8007196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719a:	bf00      	nop
 800719c:	080071ad 	.word	0x080071ad
 80071a0:	080071bf 	.word	0x080071bf
 80071a4:	080071ad 	.word	0x080071ad
 80071a8:	08007243 	.word	0x08007243
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d046      	beq.n	8007246 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071bc:	e043      	b.n	8007246 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071c6:	d140      	bne.n	800724a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071cc:	e03d      	b.n	800724a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d6:	d121      	bne.n	800721c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d837      	bhi.n	800724e <DMA_CheckFifoParam+0xda>
 80071de:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <DMA_CheckFifoParam+0x70>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	080071f5 	.word	0x080071f5
 80071e8:	080071fb 	.word	0x080071fb
 80071ec:	080071f5 	.word	0x080071f5
 80071f0:	0800720d 	.word	0x0800720d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	73fb      	strb	r3, [r7, #15]
      break;
 80071f8:	e030      	b.n	800725c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d025      	beq.n	8007252 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800720a:	e022      	b.n	8007252 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007214:	d11f      	bne.n	8007256 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800721a:	e01c      	b.n	8007256 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b02      	cmp	r3, #2
 8007220:	d903      	bls.n	800722a <DMA_CheckFifoParam+0xb6>
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b03      	cmp	r3, #3
 8007226:	d003      	beq.n	8007230 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007228:	e018      	b.n	800725c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	73fb      	strb	r3, [r7, #15]
      break;
 800722e:	e015      	b.n	800725c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00e      	beq.n	800725a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	73fb      	strb	r3, [r7, #15]
      break;
 8007240:	e00b      	b.n	800725a <DMA_CheckFifoParam+0xe6>
      break;
 8007242:	bf00      	nop
 8007244:	e00a      	b.n	800725c <DMA_CheckFifoParam+0xe8>
      break;
 8007246:	bf00      	nop
 8007248:	e008      	b.n	800725c <DMA_CheckFifoParam+0xe8>
      break;
 800724a:	bf00      	nop
 800724c:	e006      	b.n	800725c <DMA_CheckFifoParam+0xe8>
      break;
 800724e:	bf00      	nop
 8007250:	e004      	b.n	800725c <DMA_CheckFifoParam+0xe8>
      break;
 8007252:	bf00      	nop
 8007254:	e002      	b.n	800725c <DMA_CheckFifoParam+0xe8>
      break;   
 8007256:	bf00      	nop
 8007258:	e000      	b.n	800725c <DMA_CheckFifoParam+0xe8>
      break;
 800725a:	bf00      	nop
    }
  } 
  
  return status; 
 800725c:	7bfb      	ldrb	r3, [r7, #15]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop

0800726c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800726c:	b480      	push	{r7}
 800726e:	b089      	sub	sp, #36	; 0x24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007276:	2300      	movs	r3, #0
 8007278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800727a:	2300      	movs	r3, #0
 800727c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800727e:	2300      	movs	r3, #0
 8007280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007282:	2300      	movs	r3, #0
 8007284:	61fb      	str	r3, [r7, #28]
 8007286:	e159      	b.n	800753c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007288:	2201      	movs	r2, #1
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	fa02 f303 	lsl.w	r3, r2, r3
 8007290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	4013      	ands	r3, r2
 800729a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	f040 8148 	bne.w	8007536 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d005      	beq.n	80072be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d130      	bne.n	8007320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	2203      	movs	r2, #3
 80072ca:	fa02 f303 	lsl.w	r3, r2, r3
 80072ce:	43db      	mvns	r3, r3
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	4013      	ands	r3, r2
 80072d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68da      	ldr	r2, [r3, #12]
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	fa02 f303 	lsl.w	r3, r2, r3
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80072f4:	2201      	movs	r2, #1
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	fa02 f303 	lsl.w	r3, r2, r3
 80072fc:	43db      	mvns	r3, r3
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	4013      	ands	r3, r2
 8007302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	091b      	lsrs	r3, r3, #4
 800730a:	f003 0201 	and.w	r2, r3, #1
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	fa02 f303 	lsl.w	r3, r2, r3
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	4313      	orrs	r3, r2
 8007318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f003 0303 	and.w	r3, r3, #3
 8007328:	2b03      	cmp	r3, #3
 800732a:	d017      	beq.n	800735c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	2203      	movs	r2, #3
 8007338:	fa02 f303 	lsl.w	r3, r2, r3
 800733c:	43db      	mvns	r3, r3
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	4013      	ands	r3, r2
 8007342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	fa02 f303 	lsl.w	r3, r2, r3
 8007350:	69ba      	ldr	r2, [r7, #24]
 8007352:	4313      	orrs	r3, r2
 8007354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f003 0303 	and.w	r3, r3, #3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d123      	bne.n	80073b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	08da      	lsrs	r2, r3, #3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3208      	adds	r2, #8
 8007370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	220f      	movs	r2, #15
 8007380:	fa02 f303 	lsl.w	r3, r2, r3
 8007384:	43db      	mvns	r3, r3
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	4013      	ands	r3, r2
 800738a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	691a      	ldr	r2, [r3, #16]
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	4313      	orrs	r3, r2
 80073a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	08da      	lsrs	r2, r3, #3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3208      	adds	r2, #8
 80073aa:	69b9      	ldr	r1, [r7, #24]
 80073ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	2203      	movs	r2, #3
 80073bc:	fa02 f303 	lsl.w	r3, r2, r3
 80073c0:	43db      	mvns	r3, r3
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	4013      	ands	r3, r2
 80073c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f003 0203 	and.w	r2, r3, #3
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	fa02 f303 	lsl.w	r3, r2, r3
 80073d8:	69ba      	ldr	r2, [r7, #24]
 80073da:	4313      	orrs	r3, r2
 80073dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	69ba      	ldr	r2, [r7, #24]
 80073e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 80a2 	beq.w	8007536 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	4b57      	ldr	r3, [pc, #348]	; (8007554 <HAL_GPIO_Init+0x2e8>)
 80073f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fa:	4a56      	ldr	r2, [pc, #344]	; (8007554 <HAL_GPIO_Init+0x2e8>)
 80073fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007400:	6453      	str	r3, [r2, #68]	; 0x44
 8007402:	4b54      	ldr	r3, [pc, #336]	; (8007554 <HAL_GPIO_Init+0x2e8>)
 8007404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800740e:	4a52      	ldr	r2, [pc, #328]	; (8007558 <HAL_GPIO_Init+0x2ec>)
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	089b      	lsrs	r3, r3, #2
 8007414:	3302      	adds	r3, #2
 8007416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800741a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	f003 0303 	and.w	r3, r3, #3
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	220f      	movs	r2, #15
 8007426:	fa02 f303 	lsl.w	r3, r2, r3
 800742a:	43db      	mvns	r3, r3
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	4013      	ands	r3, r2
 8007430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a49      	ldr	r2, [pc, #292]	; (800755c <HAL_GPIO_Init+0x2f0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d019      	beq.n	800746e <HAL_GPIO_Init+0x202>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a48      	ldr	r2, [pc, #288]	; (8007560 <HAL_GPIO_Init+0x2f4>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d013      	beq.n	800746a <HAL_GPIO_Init+0x1fe>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a47      	ldr	r2, [pc, #284]	; (8007564 <HAL_GPIO_Init+0x2f8>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d00d      	beq.n	8007466 <HAL_GPIO_Init+0x1fa>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a46      	ldr	r2, [pc, #280]	; (8007568 <HAL_GPIO_Init+0x2fc>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d007      	beq.n	8007462 <HAL_GPIO_Init+0x1f6>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a45      	ldr	r2, [pc, #276]	; (800756c <HAL_GPIO_Init+0x300>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d101      	bne.n	800745e <HAL_GPIO_Init+0x1f2>
 800745a:	2304      	movs	r3, #4
 800745c:	e008      	b.n	8007470 <HAL_GPIO_Init+0x204>
 800745e:	2307      	movs	r3, #7
 8007460:	e006      	b.n	8007470 <HAL_GPIO_Init+0x204>
 8007462:	2303      	movs	r3, #3
 8007464:	e004      	b.n	8007470 <HAL_GPIO_Init+0x204>
 8007466:	2302      	movs	r3, #2
 8007468:	e002      	b.n	8007470 <HAL_GPIO_Init+0x204>
 800746a:	2301      	movs	r3, #1
 800746c:	e000      	b.n	8007470 <HAL_GPIO_Init+0x204>
 800746e:	2300      	movs	r3, #0
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	f002 0203 	and.w	r2, r2, #3
 8007476:	0092      	lsls	r2, r2, #2
 8007478:	4093      	lsls	r3, r2
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	4313      	orrs	r3, r2
 800747e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007480:	4935      	ldr	r1, [pc, #212]	; (8007558 <HAL_GPIO_Init+0x2ec>)
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	089b      	lsrs	r3, r3, #2
 8007486:	3302      	adds	r3, #2
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800748e:	4b38      	ldr	r3, [pc, #224]	; (8007570 <HAL_GPIO_Init+0x304>)
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	43db      	mvns	r3, r3
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	4013      	ands	r3, r2
 800749c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80074aa:	69ba      	ldr	r2, [r7, #24]
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80074b2:	4a2f      	ldr	r2, [pc, #188]	; (8007570 <HAL_GPIO_Init+0x304>)
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80074b8:	4b2d      	ldr	r3, [pc, #180]	; (8007570 <HAL_GPIO_Init+0x304>)
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	43db      	mvns	r3, r3
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	4013      	ands	r3, r2
 80074c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	4313      	orrs	r3, r2
 80074da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80074dc:	4a24      	ldr	r2, [pc, #144]	; (8007570 <HAL_GPIO_Init+0x304>)
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80074e2:	4b23      	ldr	r3, [pc, #140]	; (8007570 <HAL_GPIO_Init+0x304>)
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	43db      	mvns	r3, r3
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	4013      	ands	r3, r2
 80074f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	4313      	orrs	r3, r2
 8007504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007506:	4a1a      	ldr	r2, [pc, #104]	; (8007570 <HAL_GPIO_Init+0x304>)
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800750c:	4b18      	ldr	r3, [pc, #96]	; (8007570 <HAL_GPIO_Init+0x304>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	43db      	mvns	r3, r3
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	4013      	ands	r3, r2
 800751a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d003      	beq.n	8007530 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	4313      	orrs	r3, r2
 800752e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007530:	4a0f      	ldr	r2, [pc, #60]	; (8007570 <HAL_GPIO_Init+0x304>)
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	3301      	adds	r3, #1
 800753a:	61fb      	str	r3, [r7, #28]
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	2b0f      	cmp	r3, #15
 8007540:	f67f aea2 	bls.w	8007288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	3724      	adds	r7, #36	; 0x24
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	40023800 	.word	0x40023800
 8007558:	40013800 	.word	0x40013800
 800755c:	40020000 	.word	0x40020000
 8007560:	40020400 	.word	0x40020400
 8007564:	40020800 	.word	0x40020800
 8007568:	40020c00 	.word	0x40020c00
 800756c:	40021000 	.word	0x40021000
 8007570:	40013c00 	.word	0x40013c00

08007574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	460b      	mov	r3, r1
 800757e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691a      	ldr	r2, [r3, #16]
 8007584:	887b      	ldrh	r3, [r7, #2]
 8007586:	4013      	ands	r3, r2
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800758c:	2301      	movs	r3, #1
 800758e:	73fb      	strb	r3, [r7, #15]
 8007590:	e001      	b.n	8007596 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007596:	7bfb      	ldrb	r3, [r7, #15]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	807b      	strh	r3, [r7, #2]
 80075b0:	4613      	mov	r3, r2
 80075b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075b4:	787b      	ldrb	r3, [r7, #1]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075ba:	887a      	ldrh	r2, [r7, #2]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80075c0:	e003      	b.n	80075ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80075c2:	887b      	ldrh	r3, [r7, #2]
 80075c4:	041a      	lsls	r2, r3, #16
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	619a      	str	r2, [r3, #24]
}
 80075ca:	bf00      	nop
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
	...

080075d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80075e2:	4b08      	ldr	r3, [pc, #32]	; (8007604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075e4:	695a      	ldr	r2, [r3, #20]
 80075e6:	88fb      	ldrh	r3, [r7, #6]
 80075e8:	4013      	ands	r3, r2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d006      	beq.n	80075fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80075ee:	4a05      	ldr	r2, [pc, #20]	; (8007604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075f0:	88fb      	ldrh	r3, [r7, #6]
 80075f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80075f4:	88fb      	ldrh	r3, [r7, #6]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fd fbfe 	bl	8004df8 <HAL_GPIO_EXTI_Callback>
  }
}
 80075fc:	bf00      	nop
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	40013c00 	.word	0x40013c00

08007608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e12b      	b.n	8007872 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d106      	bne.n	8007634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7fa fec8 	bl	80023c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2224      	movs	r2, #36	; 0x24
 8007638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0201 	bic.w	r2, r2, #1
 800764a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800765a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800766a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800766c:	f001 f888 	bl	8008780 <HAL_RCC_GetPCLK1Freq>
 8007670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	4a81      	ldr	r2, [pc, #516]	; (800787c <HAL_I2C_Init+0x274>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d807      	bhi.n	800768c <HAL_I2C_Init+0x84>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4a80      	ldr	r2, [pc, #512]	; (8007880 <HAL_I2C_Init+0x278>)
 8007680:	4293      	cmp	r3, r2
 8007682:	bf94      	ite	ls
 8007684:	2301      	movls	r3, #1
 8007686:	2300      	movhi	r3, #0
 8007688:	b2db      	uxtb	r3, r3
 800768a:	e006      	b.n	800769a <HAL_I2C_Init+0x92>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4a7d      	ldr	r2, [pc, #500]	; (8007884 <HAL_I2C_Init+0x27c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	bf94      	ite	ls
 8007694:	2301      	movls	r3, #1
 8007696:	2300      	movhi	r3, #0
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e0e7      	b.n	8007872 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4a78      	ldr	r2, [pc, #480]	; (8007888 <HAL_I2C_Init+0x280>)
 80076a6:	fba2 2303 	umull	r2, r3, r2, r3
 80076aa:	0c9b      	lsrs	r3, r3, #18
 80076ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	430a      	orrs	r2, r1
 80076c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6a1b      	ldr	r3, [r3, #32]
 80076c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	4a6a      	ldr	r2, [pc, #424]	; (800787c <HAL_I2C_Init+0x274>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d802      	bhi.n	80076dc <HAL_I2C_Init+0xd4>
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	3301      	adds	r3, #1
 80076da:	e009      	b.n	80076f0 <HAL_I2C_Init+0xe8>
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80076e2:	fb02 f303 	mul.w	r3, r2, r3
 80076e6:	4a69      	ldr	r2, [pc, #420]	; (800788c <HAL_I2C_Init+0x284>)
 80076e8:	fba2 2303 	umull	r2, r3, r2, r3
 80076ec:	099b      	lsrs	r3, r3, #6
 80076ee:	3301      	adds	r3, #1
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	6812      	ldr	r2, [r2, #0]
 80076f4:	430b      	orrs	r3, r1
 80076f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007702:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	495c      	ldr	r1, [pc, #368]	; (800787c <HAL_I2C_Init+0x274>)
 800770c:	428b      	cmp	r3, r1
 800770e:	d819      	bhi.n	8007744 <HAL_I2C_Init+0x13c>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	1e59      	subs	r1, r3, #1
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	fbb1 f3f3 	udiv	r3, r1, r3
 800771e:	1c59      	adds	r1, r3, #1
 8007720:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007724:	400b      	ands	r3, r1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <HAL_I2C_Init+0x138>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	1e59      	subs	r1, r3, #1
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	fbb1 f3f3 	udiv	r3, r1, r3
 8007738:	3301      	adds	r3, #1
 800773a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800773e:	e051      	b.n	80077e4 <HAL_I2C_Init+0x1dc>
 8007740:	2304      	movs	r3, #4
 8007742:	e04f      	b.n	80077e4 <HAL_I2C_Init+0x1dc>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d111      	bne.n	8007770 <HAL_I2C_Init+0x168>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	1e58      	subs	r0, r3, #1
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6859      	ldr	r1, [r3, #4]
 8007754:	460b      	mov	r3, r1
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	440b      	add	r3, r1
 800775a:	fbb0 f3f3 	udiv	r3, r0, r3
 800775e:	3301      	adds	r3, #1
 8007760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007764:	2b00      	cmp	r3, #0
 8007766:	bf0c      	ite	eq
 8007768:	2301      	moveq	r3, #1
 800776a:	2300      	movne	r3, #0
 800776c:	b2db      	uxtb	r3, r3
 800776e:	e012      	b.n	8007796 <HAL_I2C_Init+0x18e>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	1e58      	subs	r0, r3, #1
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6859      	ldr	r1, [r3, #4]
 8007778:	460b      	mov	r3, r1
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	440b      	add	r3, r1
 800777e:	0099      	lsls	r1, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	fbb0 f3f3 	udiv	r3, r0, r3
 8007786:	3301      	adds	r3, #1
 8007788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800778c:	2b00      	cmp	r3, #0
 800778e:	bf0c      	ite	eq
 8007790:	2301      	moveq	r3, #1
 8007792:	2300      	movne	r3, #0
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <HAL_I2C_Init+0x196>
 800779a:	2301      	movs	r3, #1
 800779c:	e022      	b.n	80077e4 <HAL_I2C_Init+0x1dc>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10e      	bne.n	80077c4 <HAL_I2C_Init+0x1bc>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	1e58      	subs	r0, r3, #1
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6859      	ldr	r1, [r3, #4]
 80077ae:	460b      	mov	r3, r1
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	440b      	add	r3, r1
 80077b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80077b8:	3301      	adds	r3, #1
 80077ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077c2:	e00f      	b.n	80077e4 <HAL_I2C_Init+0x1dc>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	1e58      	subs	r0, r3, #1
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6859      	ldr	r1, [r3, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	440b      	add	r3, r1
 80077d2:	0099      	lsls	r1, r3, #2
 80077d4:	440b      	add	r3, r1
 80077d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80077da:	3301      	adds	r3, #1
 80077dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	6809      	ldr	r1, [r1, #0]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	69da      	ldr	r2, [r3, #28]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	431a      	orrs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007812:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6911      	ldr	r1, [r2, #16]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	68d2      	ldr	r2, [r2, #12]
 800781e:	4311      	orrs	r1, r2
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6812      	ldr	r2, [r2, #0]
 8007824:	430b      	orrs	r3, r1
 8007826:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695a      	ldr	r2, [r3, #20]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0201 	orr.w	r2, r2, #1
 8007852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2220      	movs	r2, #32
 800785e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	000186a0 	.word	0x000186a0
 8007880:	001e847f 	.word	0x001e847f
 8007884:	003d08ff 	.word	0x003d08ff
 8007888:	431bde83 	.word	0x431bde83
 800788c:	10624dd3 	.word	0x10624dd3

08007890 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af02      	add	r7, sp, #8
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	607a      	str	r2, [r7, #4]
 800789a:	461a      	mov	r2, r3
 800789c:	460b      	mov	r3, r1
 800789e:	817b      	strh	r3, [r7, #10]
 80078a0:	4613      	mov	r3, r2
 80078a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078a4:	f7fe fd20 	bl	80062e8 <HAL_GetTick>
 80078a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	f040 80e0 	bne.w	8007a78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	2319      	movs	r3, #25
 80078be:	2201      	movs	r2, #1
 80078c0:	4970      	ldr	r1, [pc, #448]	; (8007a84 <HAL_I2C_Master_Transmit+0x1f4>)
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 f964 	bl	8007b90 <I2C_WaitOnFlagUntilTimeout>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80078ce:	2302      	movs	r3, #2
 80078d0:	e0d3      	b.n	8007a7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d101      	bne.n	80078e0 <HAL_I2C_Master_Transmit+0x50>
 80078dc:	2302      	movs	r3, #2
 80078de:	e0cc      	b.n	8007a7a <HAL_I2C_Master_Transmit+0x1ea>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d007      	beq.n	8007906 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0201 	orr.w	r2, r2, #1
 8007904:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007914:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2221      	movs	r2, #33	; 0x21
 800791a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2210      	movs	r2, #16
 8007922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	893a      	ldrh	r2, [r7, #8]
 8007936:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793c:	b29a      	uxth	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4a50      	ldr	r2, [pc, #320]	; (8007a88 <HAL_I2C_Master_Transmit+0x1f8>)
 8007946:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007948:	8979      	ldrh	r1, [r7, #10]
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	6a3a      	ldr	r2, [r7, #32]
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 f89c 	bl	8007a8c <I2C_MasterRequestWrite>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e08d      	b.n	8007a7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800795e:	2300      	movs	r3, #0
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	613b      	str	r3, [r7, #16]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	613b      	str	r3, [r7, #16]
 8007972:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007974:	e066      	b.n	8007a44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	6a39      	ldr	r1, [r7, #32]
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 f9de 	bl	8007d3c <I2C_WaitOnTXEFlagUntilTimeout>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00d      	beq.n	80079a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798a:	2b04      	cmp	r3, #4
 800798c:	d107      	bne.n	800799e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800799c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e06b      	b.n	8007a7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	781a      	ldrb	r2, [r3, #0]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079bc:	b29b      	uxth	r3, r3
 80079be:	3b01      	subs	r3, #1
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ca:	3b01      	subs	r3, #1
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d11b      	bne.n	8007a18 <HAL_I2C_Master_Transmit+0x188>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d017      	beq.n	8007a18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	781a      	ldrb	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	1c5a      	adds	r2, r3, #1
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	3b01      	subs	r3, #1
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	6a39      	ldr	r1, [r7, #32]
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f9ce 	bl	8007dbe <I2C_WaitOnBTFFlagUntilTimeout>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00d      	beq.n	8007a44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d107      	bne.n	8007a40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e01a      	b.n	8007a7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d194      	bne.n	8007976 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	e000      	b.n	8007a7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007a78:	2302      	movs	r3, #2
  }
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	00100002 	.word	0x00100002
 8007a88:	ffff0000 	.word	0xffff0000

08007a8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b088      	sub	sp, #32
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	607a      	str	r2, [r7, #4]
 8007a96:	603b      	str	r3, [r7, #0]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2b08      	cmp	r3, #8
 8007aa6:	d006      	beq.n	8007ab6 <I2C_MasterRequestWrite+0x2a>
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d003      	beq.n	8007ab6 <I2C_MasterRequestWrite+0x2a>
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ab4:	d108      	bne.n	8007ac8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	e00b      	b.n	8007ae0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007acc:	2b12      	cmp	r3, #18
 8007ace:	d107      	bne.n	8007ae0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ade:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 f84f 	bl	8007b90 <I2C_WaitOnFlagUntilTimeout>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00d      	beq.n	8007b14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b06:	d103      	bne.n	8007b10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e035      	b.n	8007b80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b1c:	d108      	bne.n	8007b30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b1e:	897b      	ldrh	r3, [r7, #10]
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	461a      	mov	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b2c:	611a      	str	r2, [r3, #16]
 8007b2e:	e01b      	b.n	8007b68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007b30:	897b      	ldrh	r3, [r7, #10]
 8007b32:	11db      	asrs	r3, r3, #7
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	f003 0306 	and.w	r3, r3, #6
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	f063 030f 	orn	r3, r3, #15
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	490e      	ldr	r1, [pc, #56]	; (8007b88 <I2C_MasterRequestWrite+0xfc>)
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 f875 	bl	8007c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e010      	b.n	8007b80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007b5e:	897b      	ldrh	r3, [r7, #10]
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	4907      	ldr	r1, [pc, #28]	; (8007b8c <I2C_MasterRequestWrite+0x100>)
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 f865 	bl	8007c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e000      	b.n	8007b80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	00010008 	.word	0x00010008
 8007b8c:	00010002 	.word	0x00010002

08007b90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	603b      	str	r3, [r7, #0]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ba0:	e025      	b.n	8007bee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba8:	d021      	beq.n	8007bee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007baa:	f7fe fb9d 	bl	80062e8 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d302      	bcc.n	8007bc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d116      	bne.n	8007bee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bda:	f043 0220 	orr.w	r2, r3, #32
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e023      	b.n	8007c36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	0c1b      	lsrs	r3, r3, #16
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d10d      	bne.n	8007c14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	43da      	mvns	r2, r3
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4013      	ands	r3, r2
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	bf0c      	ite	eq
 8007c0a:	2301      	moveq	r3, #1
 8007c0c:	2300      	movne	r3, #0
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	461a      	mov	r2, r3
 8007c12:	e00c      	b.n	8007c2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	43da      	mvns	r2, r3
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bf0c      	ite	eq
 8007c26:	2301      	moveq	r3, #1
 8007c28:	2300      	movne	r3, #0
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d0b6      	beq.n	8007ba2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	60f8      	str	r0, [r7, #12]
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	607a      	str	r2, [r7, #4]
 8007c4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c4c:	e051      	b.n	8007cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c5c:	d123      	bne.n	8007ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2220      	movs	r2, #32
 8007c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c92:	f043 0204 	orr.w	r2, r3, #4
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e046      	b.n	8007d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cac:	d021      	beq.n	8007cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cae:	f7fe fb1b 	bl	80062e8 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d302      	bcc.n	8007cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d116      	bne.n	8007cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	f043 0220 	orr.w	r2, r3, #32
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e020      	b.n	8007d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	0c1b      	lsrs	r3, r3, #16
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d10c      	bne.n	8007d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	43da      	mvns	r2, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4013      	ands	r3, r2
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	bf14      	ite	ne
 8007d0e:	2301      	movne	r3, #1
 8007d10:	2300      	moveq	r3, #0
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	e00b      	b.n	8007d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	43da      	mvns	r2, r3
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	4013      	ands	r3, r2
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	bf14      	ite	ne
 8007d28:	2301      	movne	r3, #1
 8007d2a:	2300      	moveq	r3, #0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d18d      	bne.n	8007c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d48:	e02d      	b.n	8007da6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f000 f878 	bl	8007e40 <I2C_IsAcknowledgeFailed>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e02d      	b.n	8007db6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d60:	d021      	beq.n	8007da6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d62:	f7fe fac1 	bl	80062e8 <HAL_GetTick>
 8007d66:	4602      	mov	r2, r0
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d302      	bcc.n	8007d78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d116      	bne.n	8007da6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2220      	movs	r2, #32
 8007d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	f043 0220 	orr.w	r2, r3, #32
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e007      	b.n	8007db6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db0:	2b80      	cmp	r3, #128	; 0x80
 8007db2:	d1ca      	bne.n	8007d4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	60f8      	str	r0, [r7, #12]
 8007dc6:	60b9      	str	r1, [r7, #8]
 8007dc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dca:	e02d      	b.n	8007e28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 f837 	bl	8007e40 <I2C_IsAcknowledgeFailed>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e02d      	b.n	8007e38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de2:	d021      	beq.n	8007e28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007de4:	f7fe fa80 	bl	80062e8 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d302      	bcc.n	8007dfa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d116      	bne.n	8007e28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2220      	movs	r2, #32
 8007e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e14:	f043 0220 	orr.w	r2, r3, #32
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e007      	b.n	8007e38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	f003 0304 	and.w	r3, r3, #4
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	d1ca      	bne.n	8007dcc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e56:	d11b      	bne.n	8007e90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7c:	f043 0204 	orr.w	r2, r3, #4
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e000      	b.n	8007e92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
	...

08007ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e267      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d075      	beq.n	8007faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ebe:	4b88      	ldr	r3, [pc, #544]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f003 030c 	and.w	r3, r3, #12
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d00c      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007eca:	4b85      	ldr	r3, [pc, #532]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ed2:	2b08      	cmp	r3, #8
 8007ed4:	d112      	bne.n	8007efc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ed6:	4b82      	ldr	r3, [pc, #520]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ee2:	d10b      	bne.n	8007efc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ee4:	4b7e      	ldr	r3, [pc, #504]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d05b      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x108>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d157      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e242      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f04:	d106      	bne.n	8007f14 <HAL_RCC_OscConfig+0x74>
 8007f06:	4b76      	ldr	r3, [pc, #472]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a75      	ldr	r2, [pc, #468]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	e01d      	b.n	8007f50 <HAL_RCC_OscConfig+0xb0>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f1c:	d10c      	bne.n	8007f38 <HAL_RCC_OscConfig+0x98>
 8007f1e:	4b70      	ldr	r3, [pc, #448]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a6f      	ldr	r2, [pc, #444]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	4b6d      	ldr	r3, [pc, #436]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a6c      	ldr	r2, [pc, #432]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f34:	6013      	str	r3, [r2, #0]
 8007f36:	e00b      	b.n	8007f50 <HAL_RCC_OscConfig+0xb0>
 8007f38:	4b69      	ldr	r3, [pc, #420]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a68      	ldr	r2, [pc, #416]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	4b66      	ldr	r3, [pc, #408]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a65      	ldr	r2, [pc, #404]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d013      	beq.n	8007f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f58:	f7fe f9c6 	bl	80062e8 <HAL_GetTick>
 8007f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f5e:	e008      	b.n	8007f72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f60:	f7fe f9c2 	bl	80062e8 <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2b64      	cmp	r3, #100	; 0x64
 8007f6c:	d901      	bls.n	8007f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e207      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f72:	4b5b      	ldr	r3, [pc, #364]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0f0      	beq.n	8007f60 <HAL_RCC_OscConfig+0xc0>
 8007f7e:	e014      	b.n	8007faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f80:	f7fe f9b2 	bl	80062e8 <HAL_GetTick>
 8007f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f86:	e008      	b.n	8007f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f88:	f7fe f9ae 	bl	80062e8 <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	2b64      	cmp	r3, #100	; 0x64
 8007f94:	d901      	bls.n	8007f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e1f3      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f9a:	4b51      	ldr	r3, [pc, #324]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1f0      	bne.n	8007f88 <HAL_RCC_OscConfig+0xe8>
 8007fa6:	e000      	b.n	8007faa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d063      	beq.n	800807e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007fb6:	4b4a      	ldr	r3, [pc, #296]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f003 030c 	and.w	r3, r3, #12
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00b      	beq.n	8007fda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007fc2:	4b47      	ldr	r3, [pc, #284]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007fca:	2b08      	cmp	r3, #8
 8007fcc:	d11c      	bne.n	8008008 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007fce:	4b44      	ldr	r3, [pc, #272]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d116      	bne.n	8008008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fda:	4b41      	ldr	r3, [pc, #260]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d005      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x152>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d001      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e1c7      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ff2:	4b3b      	ldr	r3, [pc, #236]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	4937      	ldr	r1, [pc, #220]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8008002:	4313      	orrs	r3, r2
 8008004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008006:	e03a      	b.n	800807e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d020      	beq.n	8008052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008010:	4b34      	ldr	r3, [pc, #208]	; (80080e4 <HAL_RCC_OscConfig+0x244>)
 8008012:	2201      	movs	r2, #1
 8008014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008016:	f7fe f967 	bl	80062e8 <HAL_GetTick>
 800801a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800801c:	e008      	b.n	8008030 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800801e:	f7fe f963 	bl	80062e8 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	2b02      	cmp	r3, #2
 800802a:	d901      	bls.n	8008030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e1a8      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008030:	4b2b      	ldr	r3, [pc, #172]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	2b00      	cmp	r3, #0
 800803a:	d0f0      	beq.n	800801e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800803c:	4b28      	ldr	r3, [pc, #160]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	4925      	ldr	r1, [pc, #148]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 800804c:	4313      	orrs	r3, r2
 800804e:	600b      	str	r3, [r1, #0]
 8008050:	e015      	b.n	800807e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008052:	4b24      	ldr	r3, [pc, #144]	; (80080e4 <HAL_RCC_OscConfig+0x244>)
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008058:	f7fe f946 	bl	80062e8 <HAL_GetTick>
 800805c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800805e:	e008      	b.n	8008072 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008060:	f7fe f942 	bl	80062e8 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d901      	bls.n	8008072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e187      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008072:	4b1b      	ldr	r3, [pc, #108]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1f0      	bne.n	8008060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0308 	and.w	r3, r3, #8
 8008086:	2b00      	cmp	r3, #0
 8008088:	d036      	beq.n	80080f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d016      	beq.n	80080c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008092:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <HAL_RCC_OscConfig+0x248>)
 8008094:	2201      	movs	r2, #1
 8008096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008098:	f7fe f926 	bl	80062e8 <HAL_GetTick>
 800809c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800809e:	e008      	b.n	80080b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080a0:	f7fe f922 	bl	80062e8 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d901      	bls.n	80080b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e167      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080b2:	4b0b      	ldr	r3, [pc, #44]	; (80080e0 <HAL_RCC_OscConfig+0x240>)
 80080b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080b6:	f003 0302 	and.w	r3, r3, #2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d0f0      	beq.n	80080a0 <HAL_RCC_OscConfig+0x200>
 80080be:	e01b      	b.n	80080f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080c0:	4b09      	ldr	r3, [pc, #36]	; (80080e8 <HAL_RCC_OscConfig+0x248>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080c6:	f7fe f90f 	bl	80062e8 <HAL_GetTick>
 80080ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080cc:	e00e      	b.n	80080ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080ce:	f7fe f90b 	bl	80062e8 <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d907      	bls.n	80080ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e150      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
 80080e0:	40023800 	.word	0x40023800
 80080e4:	42470000 	.word	0x42470000
 80080e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080ec:	4b88      	ldr	r3, [pc, #544]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 80080ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1ea      	bne.n	80080ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 8097 	beq.w	8008234 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008106:	2300      	movs	r3, #0
 8008108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800810a:	4b81      	ldr	r3, [pc, #516]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 800810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10f      	bne.n	8008136 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008116:	2300      	movs	r3, #0
 8008118:	60bb      	str	r3, [r7, #8]
 800811a:	4b7d      	ldr	r3, [pc, #500]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 800811c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811e:	4a7c      	ldr	r2, [pc, #496]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 8008120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008124:	6413      	str	r3, [r2, #64]	; 0x40
 8008126:	4b7a      	ldr	r3, [pc, #488]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 8008128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800812e:	60bb      	str	r3, [r7, #8]
 8008130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008132:	2301      	movs	r3, #1
 8008134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008136:	4b77      	ldr	r3, [pc, #476]	; (8008314 <HAL_RCC_OscConfig+0x474>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800813e:	2b00      	cmp	r3, #0
 8008140:	d118      	bne.n	8008174 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008142:	4b74      	ldr	r3, [pc, #464]	; (8008314 <HAL_RCC_OscConfig+0x474>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a73      	ldr	r2, [pc, #460]	; (8008314 <HAL_RCC_OscConfig+0x474>)
 8008148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800814c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800814e:	f7fe f8cb 	bl	80062e8 <HAL_GetTick>
 8008152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008154:	e008      	b.n	8008168 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008156:	f7fe f8c7 	bl	80062e8 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b02      	cmp	r3, #2
 8008162:	d901      	bls.n	8008168 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e10c      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008168:	4b6a      	ldr	r3, [pc, #424]	; (8008314 <HAL_RCC_OscConfig+0x474>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008170:	2b00      	cmp	r3, #0
 8008172:	d0f0      	beq.n	8008156 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d106      	bne.n	800818a <HAL_RCC_OscConfig+0x2ea>
 800817c:	4b64      	ldr	r3, [pc, #400]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 800817e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008180:	4a63      	ldr	r2, [pc, #396]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 8008182:	f043 0301 	orr.w	r3, r3, #1
 8008186:	6713      	str	r3, [r2, #112]	; 0x70
 8008188:	e01c      	b.n	80081c4 <HAL_RCC_OscConfig+0x324>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2b05      	cmp	r3, #5
 8008190:	d10c      	bne.n	80081ac <HAL_RCC_OscConfig+0x30c>
 8008192:	4b5f      	ldr	r3, [pc, #380]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 8008194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008196:	4a5e      	ldr	r2, [pc, #376]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 8008198:	f043 0304 	orr.w	r3, r3, #4
 800819c:	6713      	str	r3, [r2, #112]	; 0x70
 800819e:	4b5c      	ldr	r3, [pc, #368]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 80081a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a2:	4a5b      	ldr	r2, [pc, #364]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 80081a4:	f043 0301 	orr.w	r3, r3, #1
 80081a8:	6713      	str	r3, [r2, #112]	; 0x70
 80081aa:	e00b      	b.n	80081c4 <HAL_RCC_OscConfig+0x324>
 80081ac:	4b58      	ldr	r3, [pc, #352]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 80081ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b0:	4a57      	ldr	r2, [pc, #348]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 80081b2:	f023 0301 	bic.w	r3, r3, #1
 80081b6:	6713      	str	r3, [r2, #112]	; 0x70
 80081b8:	4b55      	ldr	r3, [pc, #340]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 80081ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081bc:	4a54      	ldr	r2, [pc, #336]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 80081be:	f023 0304 	bic.w	r3, r3, #4
 80081c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d015      	beq.n	80081f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081cc:	f7fe f88c 	bl	80062e8 <HAL_GetTick>
 80081d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081d2:	e00a      	b.n	80081ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081d4:	f7fe f888 	bl	80062e8 <HAL_GetTick>
 80081d8:	4602      	mov	r2, r0
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	f241 3288 	movw	r2, #5000	; 0x1388
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d901      	bls.n	80081ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e0cb      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081ea:	4b49      	ldr	r3, [pc, #292]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 80081ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ee:	f003 0302 	and.w	r3, r3, #2
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0ee      	beq.n	80081d4 <HAL_RCC_OscConfig+0x334>
 80081f6:	e014      	b.n	8008222 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081f8:	f7fe f876 	bl	80062e8 <HAL_GetTick>
 80081fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081fe:	e00a      	b.n	8008216 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008200:	f7fe f872 	bl	80062e8 <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	f241 3288 	movw	r2, #5000	; 0x1388
 800820e:	4293      	cmp	r3, r2
 8008210:	d901      	bls.n	8008216 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e0b5      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008216:	4b3e      	ldr	r3, [pc, #248]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 8008218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1ee      	bne.n	8008200 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d105      	bne.n	8008234 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008228:	4b39      	ldr	r3, [pc, #228]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	4a38      	ldr	r2, [pc, #224]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 800822e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008232:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 80a1 	beq.w	8008380 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800823e:	4b34      	ldr	r3, [pc, #208]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f003 030c 	and.w	r3, r3, #12
 8008246:	2b08      	cmp	r3, #8
 8008248:	d05c      	beq.n	8008304 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	2b02      	cmp	r3, #2
 8008250:	d141      	bne.n	80082d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008252:	4b31      	ldr	r3, [pc, #196]	; (8008318 <HAL_RCC_OscConfig+0x478>)
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008258:	f7fe f846 	bl	80062e8 <HAL_GetTick>
 800825c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800825e:	e008      	b.n	8008272 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008260:	f7fe f842 	bl	80062e8 <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	2b02      	cmp	r3, #2
 800826c:	d901      	bls.n	8008272 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e087      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008272:	4b27      	ldr	r3, [pc, #156]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1f0      	bne.n	8008260 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69da      	ldr	r2, [r3, #28]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	431a      	orrs	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	019b      	lsls	r3, r3, #6
 800828e:	431a      	orrs	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008294:	085b      	lsrs	r3, r3, #1
 8008296:	3b01      	subs	r3, #1
 8008298:	041b      	lsls	r3, r3, #16
 800829a:	431a      	orrs	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a0:	061b      	lsls	r3, r3, #24
 80082a2:	491b      	ldr	r1, [pc, #108]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082a8:	4b1b      	ldr	r3, [pc, #108]	; (8008318 <HAL_RCC_OscConfig+0x478>)
 80082aa:	2201      	movs	r2, #1
 80082ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082ae:	f7fe f81b 	bl	80062e8 <HAL_GetTick>
 80082b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082b4:	e008      	b.n	80082c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082b6:	f7fe f817 	bl	80062e8 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d901      	bls.n	80082c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e05c      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082c8:	4b11      	ldr	r3, [pc, #68]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d0f0      	beq.n	80082b6 <HAL_RCC_OscConfig+0x416>
 80082d4:	e054      	b.n	8008380 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082d6:	4b10      	ldr	r3, [pc, #64]	; (8008318 <HAL_RCC_OscConfig+0x478>)
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082dc:	f7fe f804 	bl	80062e8 <HAL_GetTick>
 80082e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082e2:	e008      	b.n	80082f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082e4:	f7fe f800 	bl	80062e8 <HAL_GetTick>
 80082e8:	4602      	mov	r2, r0
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d901      	bls.n	80082f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e045      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082f6:	4b06      	ldr	r3, [pc, #24]	; (8008310 <HAL_RCC_OscConfig+0x470>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1f0      	bne.n	80082e4 <HAL_RCC_OscConfig+0x444>
 8008302:	e03d      	b.n	8008380 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d107      	bne.n	800831c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e038      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
 8008310:	40023800 	.word	0x40023800
 8008314:	40007000 	.word	0x40007000
 8008318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800831c:	4b1b      	ldr	r3, [pc, #108]	; (800838c <HAL_RCC_OscConfig+0x4ec>)
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d028      	beq.n	800837c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008334:	429a      	cmp	r2, r3
 8008336:	d121      	bne.n	800837c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008342:	429a      	cmp	r2, r3
 8008344:	d11a      	bne.n	800837c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800834c:	4013      	ands	r3, r2
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008354:	4293      	cmp	r3, r2
 8008356:	d111      	bne.n	800837c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008362:	085b      	lsrs	r3, r3, #1
 8008364:	3b01      	subs	r3, #1
 8008366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008368:	429a      	cmp	r2, r3
 800836a:	d107      	bne.n	800837c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008378:	429a      	cmp	r2, r3
 800837a:	d001      	beq.n	8008380 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e000      	b.n	8008382 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3718      	adds	r7, #24
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	40023800 	.word	0x40023800

08008390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e0cc      	b.n	800853e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083a4:	4b68      	ldr	r3, [pc, #416]	; (8008548 <HAL_RCC_ClockConfig+0x1b8>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0307 	and.w	r3, r3, #7
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d90c      	bls.n	80083cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083b2:	4b65      	ldr	r3, [pc, #404]	; (8008548 <HAL_RCC_ClockConfig+0x1b8>)
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	b2d2      	uxtb	r2, r2
 80083b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ba:	4b63      	ldr	r3, [pc, #396]	; (8008548 <HAL_RCC_ClockConfig+0x1b8>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0307 	and.w	r3, r3, #7
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d001      	beq.n	80083cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e0b8      	b.n	800853e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d020      	beq.n	800841a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d005      	beq.n	80083f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083e4:	4b59      	ldr	r3, [pc, #356]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	4a58      	ldr	r2, [pc, #352]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 80083ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80083ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0308 	and.w	r3, r3, #8
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d005      	beq.n	8008408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80083fc:	4b53      	ldr	r3, [pc, #332]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	4a52      	ldr	r2, [pc, #328]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 8008402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008408:	4b50      	ldr	r3, [pc, #320]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	494d      	ldr	r1, [pc, #308]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 8008416:	4313      	orrs	r3, r2
 8008418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b00      	cmp	r3, #0
 8008424:	d044      	beq.n	80084b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d107      	bne.n	800843e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800842e:	4b47      	ldr	r3, [pc, #284]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d119      	bne.n	800846e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e07f      	b.n	800853e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	2b02      	cmp	r3, #2
 8008444:	d003      	beq.n	800844e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800844a:	2b03      	cmp	r3, #3
 800844c:	d107      	bne.n	800845e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800844e:	4b3f      	ldr	r3, [pc, #252]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d109      	bne.n	800846e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e06f      	b.n	800853e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800845e:	4b3b      	ldr	r3, [pc, #236]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e067      	b.n	800853e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800846e:	4b37      	ldr	r3, [pc, #220]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f023 0203 	bic.w	r2, r3, #3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	4934      	ldr	r1, [pc, #208]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 800847c:	4313      	orrs	r3, r2
 800847e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008480:	f7fd ff32 	bl	80062e8 <HAL_GetTick>
 8008484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008486:	e00a      	b.n	800849e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008488:	f7fd ff2e 	bl	80062e8 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	f241 3288 	movw	r2, #5000	; 0x1388
 8008496:	4293      	cmp	r3, r2
 8008498:	d901      	bls.n	800849e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e04f      	b.n	800853e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800849e:	4b2b      	ldr	r3, [pc, #172]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f003 020c 	and.w	r2, r3, #12
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d1eb      	bne.n	8008488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084b0:	4b25      	ldr	r3, [pc, #148]	; (8008548 <HAL_RCC_ClockConfig+0x1b8>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0307 	and.w	r3, r3, #7
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d20c      	bcs.n	80084d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084be:	4b22      	ldr	r3, [pc, #136]	; (8008548 <HAL_RCC_ClockConfig+0x1b8>)
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	b2d2      	uxtb	r2, r2
 80084c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084c6:	4b20      	ldr	r3, [pc, #128]	; (8008548 <HAL_RCC_ClockConfig+0x1b8>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0307 	and.w	r3, r3, #7
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d001      	beq.n	80084d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e032      	b.n	800853e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0304 	and.w	r3, r3, #4
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d008      	beq.n	80084f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084e4:	4b19      	ldr	r3, [pc, #100]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	4916      	ldr	r1, [pc, #88]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0308 	and.w	r3, r3, #8
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d009      	beq.n	8008516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008502:	4b12      	ldr	r3, [pc, #72]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	00db      	lsls	r3, r3, #3
 8008510:	490e      	ldr	r1, [pc, #56]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 8008512:	4313      	orrs	r3, r2
 8008514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008516:	f000 f821 	bl	800855c <HAL_RCC_GetSysClockFreq>
 800851a:	4602      	mov	r2, r0
 800851c:	4b0b      	ldr	r3, [pc, #44]	; (800854c <HAL_RCC_ClockConfig+0x1bc>)
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	091b      	lsrs	r3, r3, #4
 8008522:	f003 030f 	and.w	r3, r3, #15
 8008526:	490a      	ldr	r1, [pc, #40]	; (8008550 <HAL_RCC_ClockConfig+0x1c0>)
 8008528:	5ccb      	ldrb	r3, [r1, r3]
 800852a:	fa22 f303 	lsr.w	r3, r2, r3
 800852e:	4a09      	ldr	r2, [pc, #36]	; (8008554 <HAL_RCC_ClockConfig+0x1c4>)
 8008530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008532:	4b09      	ldr	r3, [pc, #36]	; (8008558 <HAL_RCC_ClockConfig+0x1c8>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4618      	mov	r0, r3
 8008538:	f7fd fe92 	bl	8006260 <HAL_InitTick>

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	40023c00 	.word	0x40023c00
 800854c:	40023800 	.word	0x40023800
 8008550:	08012e5c 	.word	0x08012e5c
 8008554:	20000230 	.word	0x20000230
 8008558:	20000234 	.word	0x20000234

0800855c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800855c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008560:	b094      	sub	sp, #80	; 0x50
 8008562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008564:	2300      	movs	r3, #0
 8008566:	647b      	str	r3, [r7, #68]	; 0x44
 8008568:	2300      	movs	r3, #0
 800856a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800856c:	2300      	movs	r3, #0
 800856e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008574:	4b79      	ldr	r3, [pc, #484]	; (800875c <HAL_RCC_GetSysClockFreq+0x200>)
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f003 030c 	and.w	r3, r3, #12
 800857c:	2b08      	cmp	r3, #8
 800857e:	d00d      	beq.n	800859c <HAL_RCC_GetSysClockFreq+0x40>
 8008580:	2b08      	cmp	r3, #8
 8008582:	f200 80e1 	bhi.w	8008748 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <HAL_RCC_GetSysClockFreq+0x34>
 800858a:	2b04      	cmp	r3, #4
 800858c:	d003      	beq.n	8008596 <HAL_RCC_GetSysClockFreq+0x3a>
 800858e:	e0db      	b.n	8008748 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008590:	4b73      	ldr	r3, [pc, #460]	; (8008760 <HAL_RCC_GetSysClockFreq+0x204>)
 8008592:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008594:	e0db      	b.n	800874e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008596:	4b73      	ldr	r3, [pc, #460]	; (8008764 <HAL_RCC_GetSysClockFreq+0x208>)
 8008598:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800859a:	e0d8      	b.n	800874e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800859c:	4b6f      	ldr	r3, [pc, #444]	; (800875c <HAL_RCC_GetSysClockFreq+0x200>)
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085a6:	4b6d      	ldr	r3, [pc, #436]	; (800875c <HAL_RCC_GetSysClockFreq+0x200>)
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d063      	beq.n	800867a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085b2:	4b6a      	ldr	r3, [pc, #424]	; (800875c <HAL_RCC_GetSysClockFreq+0x200>)
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	099b      	lsrs	r3, r3, #6
 80085b8:	2200      	movs	r2, #0
 80085ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80085bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80085be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c4:	633b      	str	r3, [r7, #48]	; 0x30
 80085c6:	2300      	movs	r3, #0
 80085c8:	637b      	str	r3, [r7, #52]	; 0x34
 80085ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80085ce:	4622      	mov	r2, r4
 80085d0:	462b      	mov	r3, r5
 80085d2:	f04f 0000 	mov.w	r0, #0
 80085d6:	f04f 0100 	mov.w	r1, #0
 80085da:	0159      	lsls	r1, r3, #5
 80085dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80085e0:	0150      	lsls	r0, r2, #5
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	4621      	mov	r1, r4
 80085e8:	1a51      	subs	r1, r2, r1
 80085ea:	6139      	str	r1, [r7, #16]
 80085ec:	4629      	mov	r1, r5
 80085ee:	eb63 0301 	sbc.w	r3, r3, r1
 80085f2:	617b      	str	r3, [r7, #20]
 80085f4:	f04f 0200 	mov.w	r2, #0
 80085f8:	f04f 0300 	mov.w	r3, #0
 80085fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008600:	4659      	mov	r1, fp
 8008602:	018b      	lsls	r3, r1, #6
 8008604:	4651      	mov	r1, sl
 8008606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800860a:	4651      	mov	r1, sl
 800860c:	018a      	lsls	r2, r1, #6
 800860e:	4651      	mov	r1, sl
 8008610:	ebb2 0801 	subs.w	r8, r2, r1
 8008614:	4659      	mov	r1, fp
 8008616:	eb63 0901 	sbc.w	r9, r3, r1
 800861a:	f04f 0200 	mov.w	r2, #0
 800861e:	f04f 0300 	mov.w	r3, #0
 8008622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800862a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800862e:	4690      	mov	r8, r2
 8008630:	4699      	mov	r9, r3
 8008632:	4623      	mov	r3, r4
 8008634:	eb18 0303 	adds.w	r3, r8, r3
 8008638:	60bb      	str	r3, [r7, #8]
 800863a:	462b      	mov	r3, r5
 800863c:	eb49 0303 	adc.w	r3, r9, r3
 8008640:	60fb      	str	r3, [r7, #12]
 8008642:	f04f 0200 	mov.w	r2, #0
 8008646:	f04f 0300 	mov.w	r3, #0
 800864a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800864e:	4629      	mov	r1, r5
 8008650:	024b      	lsls	r3, r1, #9
 8008652:	4621      	mov	r1, r4
 8008654:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008658:	4621      	mov	r1, r4
 800865a:	024a      	lsls	r2, r1, #9
 800865c:	4610      	mov	r0, r2
 800865e:	4619      	mov	r1, r3
 8008660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008662:	2200      	movs	r2, #0
 8008664:	62bb      	str	r3, [r7, #40]	; 0x28
 8008666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008668:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800866c:	f7f8 fb14 	bl	8000c98 <__aeabi_uldivmod>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4613      	mov	r3, r2
 8008676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008678:	e058      	b.n	800872c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800867a:	4b38      	ldr	r3, [pc, #224]	; (800875c <HAL_RCC_GetSysClockFreq+0x200>)
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	099b      	lsrs	r3, r3, #6
 8008680:	2200      	movs	r2, #0
 8008682:	4618      	mov	r0, r3
 8008684:	4611      	mov	r1, r2
 8008686:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800868a:	623b      	str	r3, [r7, #32]
 800868c:	2300      	movs	r3, #0
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
 8008690:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008694:	4642      	mov	r2, r8
 8008696:	464b      	mov	r3, r9
 8008698:	f04f 0000 	mov.w	r0, #0
 800869c:	f04f 0100 	mov.w	r1, #0
 80086a0:	0159      	lsls	r1, r3, #5
 80086a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086a6:	0150      	lsls	r0, r2, #5
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	4641      	mov	r1, r8
 80086ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80086b2:	4649      	mov	r1, r9
 80086b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80086b8:	f04f 0200 	mov.w	r2, #0
 80086bc:	f04f 0300 	mov.w	r3, #0
 80086c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80086c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80086c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80086cc:	ebb2 040a 	subs.w	r4, r2, sl
 80086d0:	eb63 050b 	sbc.w	r5, r3, fp
 80086d4:	f04f 0200 	mov.w	r2, #0
 80086d8:	f04f 0300 	mov.w	r3, #0
 80086dc:	00eb      	lsls	r3, r5, #3
 80086de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80086e2:	00e2      	lsls	r2, r4, #3
 80086e4:	4614      	mov	r4, r2
 80086e6:	461d      	mov	r5, r3
 80086e8:	4643      	mov	r3, r8
 80086ea:	18e3      	adds	r3, r4, r3
 80086ec:	603b      	str	r3, [r7, #0]
 80086ee:	464b      	mov	r3, r9
 80086f0:	eb45 0303 	adc.w	r3, r5, r3
 80086f4:	607b      	str	r3, [r7, #4]
 80086f6:	f04f 0200 	mov.w	r2, #0
 80086fa:	f04f 0300 	mov.w	r3, #0
 80086fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008702:	4629      	mov	r1, r5
 8008704:	028b      	lsls	r3, r1, #10
 8008706:	4621      	mov	r1, r4
 8008708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800870c:	4621      	mov	r1, r4
 800870e:	028a      	lsls	r2, r1, #10
 8008710:	4610      	mov	r0, r2
 8008712:	4619      	mov	r1, r3
 8008714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008716:	2200      	movs	r2, #0
 8008718:	61bb      	str	r3, [r7, #24]
 800871a:	61fa      	str	r2, [r7, #28]
 800871c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008720:	f7f8 faba 	bl	8000c98 <__aeabi_uldivmod>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4613      	mov	r3, r2
 800872a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800872c:	4b0b      	ldr	r3, [pc, #44]	; (800875c <HAL_RCC_GetSysClockFreq+0x200>)
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	0c1b      	lsrs	r3, r3, #16
 8008732:	f003 0303 	and.w	r3, r3, #3
 8008736:	3301      	adds	r3, #1
 8008738:	005b      	lsls	r3, r3, #1
 800873a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800873c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800873e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008740:	fbb2 f3f3 	udiv	r3, r2, r3
 8008744:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008746:	e002      	b.n	800874e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008748:	4b05      	ldr	r3, [pc, #20]	; (8008760 <HAL_RCC_GetSysClockFreq+0x204>)
 800874a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800874c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800874e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008750:	4618      	mov	r0, r3
 8008752:	3750      	adds	r7, #80	; 0x50
 8008754:	46bd      	mov	sp, r7
 8008756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800875a:	bf00      	nop
 800875c:	40023800 	.word	0x40023800
 8008760:	00f42400 	.word	0x00f42400
 8008764:	007a1200 	.word	0x007a1200

08008768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008768:	b480      	push	{r7}
 800876a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800876c:	4b03      	ldr	r3, [pc, #12]	; (800877c <HAL_RCC_GetHCLKFreq+0x14>)
 800876e:	681b      	ldr	r3, [r3, #0]
}
 8008770:	4618      	mov	r0, r3
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	20000230 	.word	0x20000230

08008780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008784:	f7ff fff0 	bl	8008768 <HAL_RCC_GetHCLKFreq>
 8008788:	4602      	mov	r2, r0
 800878a:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	0a9b      	lsrs	r3, r3, #10
 8008790:	f003 0307 	and.w	r3, r3, #7
 8008794:	4903      	ldr	r1, [pc, #12]	; (80087a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008796:	5ccb      	ldrb	r3, [r1, r3]
 8008798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800879c:	4618      	mov	r0, r3
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	40023800 	.word	0x40023800
 80087a4:	08012e6c 	.word	0x08012e6c

080087a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80087ac:	f7ff ffdc 	bl	8008768 <HAL_RCC_GetHCLKFreq>
 80087b0:	4602      	mov	r2, r0
 80087b2:	4b05      	ldr	r3, [pc, #20]	; (80087c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	0b5b      	lsrs	r3, r3, #13
 80087b8:	f003 0307 	and.w	r3, r3, #7
 80087bc:	4903      	ldr	r1, [pc, #12]	; (80087cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80087be:	5ccb      	ldrb	r3, [r1, r3]
 80087c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	40023800 	.word	0x40023800
 80087cc:	08012e6c 	.word	0x08012e6c

080087d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e04c      	b.n	800887c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d111      	bne.n	8008812 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f001 ff50 	bl	800a69c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008800:	2b00      	cmp	r3, #0
 8008802:	d102      	bne.n	800880a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a1f      	ldr	r2, [pc, #124]	; (8008884 <HAL_TIM_Base_Init+0xb4>)
 8008808:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2202      	movs	r2, #2
 8008816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	3304      	adds	r3, #4
 8008822:	4619      	mov	r1, r3
 8008824:	4610      	mov	r0, r2
 8008826:	f001 fc6d 	bl	800a104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2201      	movs	r2, #1
 800884e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	08005581 	.word	0x08005581

08008888 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b01      	cmp	r3, #1
 800889a:	d001      	beq.n	80088a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e03c      	b.n	800891a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a1e      	ldr	r2, [pc, #120]	; (8008928 <HAL_TIM_Base_Start+0xa0>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d018      	beq.n	80088e4 <HAL_TIM_Base_Start+0x5c>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ba:	d013      	beq.n	80088e4 <HAL_TIM_Base_Start+0x5c>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a1a      	ldr	r2, [pc, #104]	; (800892c <HAL_TIM_Base_Start+0xa4>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d00e      	beq.n	80088e4 <HAL_TIM_Base_Start+0x5c>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a19      	ldr	r2, [pc, #100]	; (8008930 <HAL_TIM_Base_Start+0xa8>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d009      	beq.n	80088e4 <HAL_TIM_Base_Start+0x5c>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a17      	ldr	r2, [pc, #92]	; (8008934 <HAL_TIM_Base_Start+0xac>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d004      	beq.n	80088e4 <HAL_TIM_Base_Start+0x5c>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a16      	ldr	r2, [pc, #88]	; (8008938 <HAL_TIM_Base_Start+0xb0>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d111      	bne.n	8008908 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f003 0307 	and.w	r3, r3, #7
 80088ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b06      	cmp	r3, #6
 80088f4:	d010      	beq.n	8008918 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0201 	orr.w	r2, r2, #1
 8008904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008906:	e007      	b.n	8008918 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f042 0201 	orr.w	r2, r2, #1
 8008916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	40010000 	.word	0x40010000
 800892c:	40000400 	.word	0x40000400
 8008930:	40000800 	.word	0x40000800
 8008934:	40000c00 	.word	0x40000c00
 8008938:	40014000 	.word	0x40014000

0800893c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b01      	cmp	r3, #1
 800894e:	d001      	beq.n	8008954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e044      	b.n	80089de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2202      	movs	r2, #2
 8008958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68da      	ldr	r2, [r3, #12]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0201 	orr.w	r2, r2, #1
 800896a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a1e      	ldr	r2, [pc, #120]	; (80089ec <HAL_TIM_Base_Start_IT+0xb0>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d018      	beq.n	80089a8 <HAL_TIM_Base_Start_IT+0x6c>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800897e:	d013      	beq.n	80089a8 <HAL_TIM_Base_Start_IT+0x6c>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a1a      	ldr	r2, [pc, #104]	; (80089f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d00e      	beq.n	80089a8 <HAL_TIM_Base_Start_IT+0x6c>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a19      	ldr	r2, [pc, #100]	; (80089f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d009      	beq.n	80089a8 <HAL_TIM_Base_Start_IT+0x6c>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a17      	ldr	r2, [pc, #92]	; (80089f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d004      	beq.n	80089a8 <HAL_TIM_Base_Start_IT+0x6c>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a16      	ldr	r2, [pc, #88]	; (80089fc <HAL_TIM_Base_Start_IT+0xc0>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d111      	bne.n	80089cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f003 0307 	and.w	r3, r3, #7
 80089b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2b06      	cmp	r3, #6
 80089b8:	d010      	beq.n	80089dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f042 0201 	orr.w	r2, r2, #1
 80089c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ca:	e007      	b.n	80089dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f042 0201 	orr.w	r2, r2, #1
 80089da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	40010000 	.word	0x40010000
 80089f0:	40000400 	.word	0x40000400
 80089f4:	40000800 	.word	0x40000800
 80089f8:	40000c00 	.word	0x40000c00
 80089fc:	40014000 	.word	0x40014000

08008a00 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e04c      	b.n	8008aac <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d111      	bne.n	8008a42 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f001 fe38 	bl	800a69c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a1f      	ldr	r2, [pc, #124]	; (8008ab4 <HAL_TIM_OC_Init+0xb4>)
 8008a38:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2202      	movs	r2, #2
 8008a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3304      	adds	r3, #4
 8008a52:	4619      	mov	r1, r3
 8008a54:	4610      	mov	r0, r2
 8008a56:	f001 fb55 	bl	800a104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	08008ab9 	.word	0x08008ab9

08008ab8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e04c      	b.n	8008b78 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d111      	bne.n	8008b0e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f001 fdd2 	bl	800a69c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d102      	bne.n	8008b06 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a1f      	ldr	r2, [pc, #124]	; (8008b80 <HAL_TIM_PWM_Init+0xb4>)
 8008b04:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2202      	movs	r2, #2
 8008b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	4619      	mov	r1, r3
 8008b20:	4610      	mov	r0, r2
 8008b22:	f001 faef 	bl	800a104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	08008b85 	.word	0x08008b85

08008b84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d109      	bne.n	8008bbc <HAL_TIM_PWM_Start+0x24>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	bf14      	ite	ne
 8008bb4:	2301      	movne	r3, #1
 8008bb6:	2300      	moveq	r3, #0
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	e022      	b.n	8008c02 <HAL_TIM_PWM_Start+0x6a>
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2b04      	cmp	r3, #4
 8008bc0:	d109      	bne.n	8008bd6 <HAL_TIM_PWM_Start+0x3e>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	bf14      	ite	ne
 8008bce:	2301      	movne	r3, #1
 8008bd0:	2300      	moveq	r3, #0
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	e015      	b.n	8008c02 <HAL_TIM_PWM_Start+0x6a>
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	2b08      	cmp	r3, #8
 8008bda:	d109      	bne.n	8008bf0 <HAL_TIM_PWM_Start+0x58>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	bf14      	ite	ne
 8008be8:	2301      	movne	r3, #1
 8008bea:	2300      	moveq	r3, #0
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	e008      	b.n	8008c02 <HAL_TIM_PWM_Start+0x6a>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	bf14      	ite	ne
 8008bfc:	2301      	movne	r3, #1
 8008bfe:	2300      	moveq	r3, #0
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e068      	b.n	8008cdc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d104      	bne.n	8008c1a <HAL_TIM_PWM_Start+0x82>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2202      	movs	r2, #2
 8008c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c18:	e013      	b.n	8008c42 <HAL_TIM_PWM_Start+0xaa>
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b04      	cmp	r3, #4
 8008c1e:	d104      	bne.n	8008c2a <HAL_TIM_PWM_Start+0x92>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2202      	movs	r2, #2
 8008c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c28:	e00b      	b.n	8008c42 <HAL_TIM_PWM_Start+0xaa>
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	2b08      	cmp	r3, #8
 8008c2e:	d104      	bne.n	8008c3a <HAL_TIM_PWM_Start+0xa2>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2202      	movs	r2, #2
 8008c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c38:	e003      	b.n	8008c42 <HAL_TIM_PWM_Start+0xaa>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2201      	movs	r2, #1
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f001 fd00 	bl	800a650 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a23      	ldr	r2, [pc, #140]	; (8008ce4 <HAL_TIM_PWM_Start+0x14c>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d107      	bne.n	8008c6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a1d      	ldr	r2, [pc, #116]	; (8008ce4 <HAL_TIM_PWM_Start+0x14c>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d018      	beq.n	8008ca6 <HAL_TIM_PWM_Start+0x10e>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c7c:	d013      	beq.n	8008ca6 <HAL_TIM_PWM_Start+0x10e>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a19      	ldr	r2, [pc, #100]	; (8008ce8 <HAL_TIM_PWM_Start+0x150>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d00e      	beq.n	8008ca6 <HAL_TIM_PWM_Start+0x10e>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a17      	ldr	r2, [pc, #92]	; (8008cec <HAL_TIM_PWM_Start+0x154>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d009      	beq.n	8008ca6 <HAL_TIM_PWM_Start+0x10e>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a16      	ldr	r2, [pc, #88]	; (8008cf0 <HAL_TIM_PWM_Start+0x158>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d004      	beq.n	8008ca6 <HAL_TIM_PWM_Start+0x10e>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a14      	ldr	r2, [pc, #80]	; (8008cf4 <HAL_TIM_PWM_Start+0x15c>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d111      	bne.n	8008cca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	f003 0307 	and.w	r3, r3, #7
 8008cb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2b06      	cmp	r3, #6
 8008cb6:	d010      	beq.n	8008cda <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f042 0201 	orr.w	r2, r2, #1
 8008cc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cc8:	e007      	b.n	8008cda <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f042 0201 	orr.w	r2, r2, #1
 8008cd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	40010000 	.word	0x40010000
 8008ce8:	40000400 	.word	0x40000400
 8008cec:	40000800 	.word	0x40000800
 8008cf0:	40000c00 	.word	0x40000c00
 8008cf4:	40014000 	.word	0x40014000

08008cf8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d109      	bne.n	8008d24 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	bf0c      	ite	eq
 8008d1c:	2301      	moveq	r3, #1
 8008d1e:	2300      	movne	r3, #0
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	e022      	b.n	8008d6a <HAL_TIM_PWM_Start_DMA+0x72>
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2b04      	cmp	r3, #4
 8008d28:	d109      	bne.n	8008d3e <HAL_TIM_PWM_Start_DMA+0x46>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	bf0c      	ite	eq
 8008d36:	2301      	moveq	r3, #1
 8008d38:	2300      	movne	r3, #0
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	e015      	b.n	8008d6a <HAL_TIM_PWM_Start_DMA+0x72>
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2b08      	cmp	r3, #8
 8008d42:	d109      	bne.n	8008d58 <HAL_TIM_PWM_Start_DMA+0x60>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	bf0c      	ite	eq
 8008d50:	2301      	moveq	r3, #1
 8008d52:	2300      	movne	r3, #0
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	e008      	b.n	8008d6a <HAL_TIM_PWM_Start_DMA+0x72>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	bf0c      	ite	eq
 8008d64:	2301      	moveq	r3, #1
 8008d66:	2300      	movne	r3, #0
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008d6e:	2302      	movs	r3, #2
 8008d70:	e15d      	b.n	800902e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d109      	bne.n	8008d8c <HAL_TIM_PWM_Start_DMA+0x94>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	bf0c      	ite	eq
 8008d84:	2301      	moveq	r3, #1
 8008d86:	2300      	movne	r3, #0
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	e022      	b.n	8008dd2 <HAL_TIM_PWM_Start_DMA+0xda>
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	2b04      	cmp	r3, #4
 8008d90:	d109      	bne.n	8008da6 <HAL_TIM_PWM_Start_DMA+0xae>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	bf0c      	ite	eq
 8008d9e:	2301      	moveq	r3, #1
 8008da0:	2300      	movne	r3, #0
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	e015      	b.n	8008dd2 <HAL_TIM_PWM_Start_DMA+0xda>
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2b08      	cmp	r3, #8
 8008daa:	d109      	bne.n	8008dc0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	bf0c      	ite	eq
 8008db8:	2301      	moveq	r3, #1
 8008dba:	2300      	movne	r3, #0
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	e008      	b.n	8008dd2 <HAL_TIM_PWM_Start_DMA+0xda>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	bf0c      	ite	eq
 8008dcc:	2301      	moveq	r3, #1
 8008dce:	2300      	movne	r3, #0
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d024      	beq.n	8008e20 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d104      	bne.n	8008de6 <HAL_TIM_PWM_Start_DMA+0xee>
 8008ddc:	887b      	ldrh	r3, [r7, #2]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e123      	b.n	800902e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d104      	bne.n	8008df6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008df4:	e016      	b.n	8008e24 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	2b04      	cmp	r3, #4
 8008dfa:	d104      	bne.n	8008e06 <HAL_TIM_PWM_Start_DMA+0x10e>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2202      	movs	r2, #2
 8008e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e04:	e00e      	b.n	8008e24 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	2b08      	cmp	r3, #8
 8008e0a:	d104      	bne.n	8008e16 <HAL_TIM_PWM_Start_DMA+0x11e>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2202      	movs	r2, #2
 8008e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e14:	e006      	b.n	8008e24 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2202      	movs	r2, #2
 8008e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e1e:	e001      	b.n	8008e24 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	e104      	b.n	800902e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2b0c      	cmp	r3, #12
 8008e28:	f200 80ae 	bhi.w	8008f88 <HAL_TIM_PWM_Start_DMA+0x290>
 8008e2c:	a201      	add	r2, pc, #4	; (adr r2, 8008e34 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e32:	bf00      	nop
 8008e34:	08008e69 	.word	0x08008e69
 8008e38:	08008f89 	.word	0x08008f89
 8008e3c:	08008f89 	.word	0x08008f89
 8008e40:	08008f89 	.word	0x08008f89
 8008e44:	08008eb1 	.word	0x08008eb1
 8008e48:	08008f89 	.word	0x08008f89
 8008e4c:	08008f89 	.word	0x08008f89
 8008e50:	08008f89 	.word	0x08008f89
 8008e54:	08008ef9 	.word	0x08008ef9
 8008e58:	08008f89 	.word	0x08008f89
 8008e5c:	08008f89 	.word	0x08008f89
 8008e60:	08008f89 	.word	0x08008f89
 8008e64:	08008f41 	.word	0x08008f41
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	4a72      	ldr	r2, [pc, #456]	; (8009038 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008e6e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e74:	4a71      	ldr	r2, [pc, #452]	; (800903c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008e76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7c:	4a70      	ldr	r2, [pc, #448]	; (8009040 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008e7e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3334      	adds	r3, #52	; 0x34
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	887b      	ldrh	r3, [r7, #2]
 8008e90:	f7fd fe8c 	bl	8006bac <HAL_DMA_Start_IT>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e0c7      	b.n	800902e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68da      	ldr	r2, [r3, #12]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eac:	60da      	str	r2, [r3, #12]
      break;
 8008eae:	e06e      	b.n	8008f8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb4:	4a60      	ldr	r2, [pc, #384]	; (8009038 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008eb6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebc:	4a5f      	ldr	r2, [pc, #380]	; (800903c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008ebe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec4:	4a5e      	ldr	r2, [pc, #376]	; (8009040 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008ec6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008ecc:	6879      	ldr	r1, [r7, #4]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3338      	adds	r3, #56	; 0x38
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	887b      	ldrh	r3, [r7, #2]
 8008ed8:	f7fd fe68 	bl	8006bac <HAL_DMA_Start_IT>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e0a3      	b.n	800902e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68da      	ldr	r2, [r3, #12]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ef4:	60da      	str	r2, [r3, #12]
      break;
 8008ef6:	e04a      	b.n	8008f8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efc:	4a4e      	ldr	r2, [pc, #312]	; (8009038 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008efe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	4a4d      	ldr	r2, [pc, #308]	; (800903c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008f06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0c:	4a4c      	ldr	r2, [pc, #304]	; (8009040 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008f0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008f14:	6879      	ldr	r1, [r7, #4]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	333c      	adds	r3, #60	; 0x3c
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	887b      	ldrh	r3, [r7, #2]
 8008f20:	f7fd fe44 	bl	8006bac <HAL_DMA_Start_IT>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e07f      	b.n	800902e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68da      	ldr	r2, [r3, #12]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f3c:	60da      	str	r2, [r3, #12]
      break;
 8008f3e:	e026      	b.n	8008f8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f44:	4a3c      	ldr	r2, [pc, #240]	; (8009038 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008f46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4c:	4a3b      	ldr	r2, [pc, #236]	; (800903c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008f4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f54:	4a3a      	ldr	r2, [pc, #232]	; (8009040 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008f56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3340      	adds	r3, #64	; 0x40
 8008f64:	461a      	mov	r2, r3
 8008f66:	887b      	ldrh	r3, [r7, #2]
 8008f68:	f7fd fe20 	bl	8006bac <HAL_DMA_Start_IT>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e05b      	b.n	800902e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68da      	ldr	r2, [r3, #12]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f84:	60da      	str	r2, [r3, #12]
      break;
 8008f86:	e002      	b.n	8008f8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8008f8e:	7dfb      	ldrb	r3, [r7, #23]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d14b      	bne.n	800902c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	68b9      	ldr	r1, [r7, #8]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f001 fb57 	bl	800a650 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a27      	ldr	r2, [pc, #156]	; (8009044 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d107      	bne.n	8008fbc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a20      	ldr	r2, [pc, #128]	; (8009044 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d018      	beq.n	8008ff8 <HAL_TIM_PWM_Start_DMA+0x300>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fce:	d013      	beq.n	8008ff8 <HAL_TIM_PWM_Start_DMA+0x300>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a1c      	ldr	r2, [pc, #112]	; (8009048 <HAL_TIM_PWM_Start_DMA+0x350>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d00e      	beq.n	8008ff8 <HAL_TIM_PWM_Start_DMA+0x300>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a1b      	ldr	r2, [pc, #108]	; (800904c <HAL_TIM_PWM_Start_DMA+0x354>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d009      	beq.n	8008ff8 <HAL_TIM_PWM_Start_DMA+0x300>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a19      	ldr	r2, [pc, #100]	; (8009050 <HAL_TIM_PWM_Start_DMA+0x358>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d004      	beq.n	8008ff8 <HAL_TIM_PWM_Start_DMA+0x300>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a18      	ldr	r2, [pc, #96]	; (8009054 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d111      	bne.n	800901c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f003 0307 	and.w	r3, r3, #7
 8009002:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	2b06      	cmp	r3, #6
 8009008:	d010      	beq.n	800902c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f042 0201 	orr.w	r2, r2, #1
 8009018:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800901a:	e007      	b.n	800902c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f042 0201 	orr.w	r2, r2, #1
 800902a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800902c:	7dfb      	ldrb	r3, [r7, #23]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3718      	adds	r7, #24
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	08009feb 	.word	0x08009feb
 800903c:	0800a097 	.word	0x0800a097
 8009040:	08009f55 	.word	0x08009f55
 8009044:	40010000 	.word	0x40010000
 8009048:	40000400 	.word	0x40000400
 800904c:	40000800 	.word	0x40000800
 8009050:	40000c00 	.word	0x40000c00
 8009054:	40014000 	.word	0x40014000

08009058 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009062:	2300      	movs	r3, #0
 8009064:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2b0c      	cmp	r3, #12
 800906a:	d855      	bhi.n	8009118 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800906c:	a201      	add	r2, pc, #4	; (adr r2, 8009074 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800906e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009072:	bf00      	nop
 8009074:	080090a9 	.word	0x080090a9
 8009078:	08009119 	.word	0x08009119
 800907c:	08009119 	.word	0x08009119
 8009080:	08009119 	.word	0x08009119
 8009084:	080090c5 	.word	0x080090c5
 8009088:	08009119 	.word	0x08009119
 800908c:	08009119 	.word	0x08009119
 8009090:	08009119 	.word	0x08009119
 8009094:	080090e1 	.word	0x080090e1
 8009098:	08009119 	.word	0x08009119
 800909c:	08009119 	.word	0x08009119
 80090a0:	08009119 	.word	0x08009119
 80090a4:	080090fd 	.word	0x080090fd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68da      	ldr	r2, [r3, #12]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80090b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090bc:	4618      	mov	r0, r3
 80090be:	f7fd fe3d 	bl	8006d3c <HAL_DMA_Abort_IT>
      break;
 80090c2:	e02c      	b.n	800911e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68da      	ldr	r2, [r3, #12]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fd fe2f 	bl	8006d3c <HAL_DMA_Abort_IT>
      break;
 80090de:	e01e      	b.n	800911e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fd fe21 	bl	8006d3c <HAL_DMA_Abort_IT>
      break;
 80090fa:	e010      	b.n	800911e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68da      	ldr	r2, [r3, #12]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800910a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009110:	4618      	mov	r0, r3
 8009112:	f7fd fe13 	bl	8006d3c <HAL_DMA_Abort_IT>
      break;
 8009116:	e002      	b.n	800911e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	73fb      	strb	r3, [r7, #15]
      break;
 800911c:	bf00      	nop
  }

  if (status == HAL_OK)
 800911e:	7bfb      	ldrb	r3, [r7, #15]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d157      	bne.n	80091d4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2200      	movs	r2, #0
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	4618      	mov	r0, r3
 800912e:	f001 fa8f 	bl	800a650 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a2a      	ldr	r2, [pc, #168]	; (80091e0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d117      	bne.n	800916c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6a1a      	ldr	r2, [r3, #32]
 8009142:	f241 1311 	movw	r3, #4369	; 0x1111
 8009146:	4013      	ands	r3, r2
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10f      	bne.n	800916c <HAL_TIM_PWM_Stop_DMA+0x114>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6a1a      	ldr	r2, [r3, #32]
 8009152:	f240 4344 	movw	r3, #1092	; 0x444
 8009156:	4013      	ands	r3, r2
 8009158:	2b00      	cmp	r3, #0
 800915a:	d107      	bne.n	800916c <HAL_TIM_PWM_Stop_DMA+0x114>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800916a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	6a1a      	ldr	r2, [r3, #32]
 8009172:	f241 1311 	movw	r3, #4369	; 0x1111
 8009176:	4013      	ands	r3, r2
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10f      	bne.n	800919c <HAL_TIM_PWM_Stop_DMA+0x144>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6a1a      	ldr	r2, [r3, #32]
 8009182:	f240 4344 	movw	r3, #1092	; 0x444
 8009186:	4013      	ands	r3, r2
 8009188:	2b00      	cmp	r3, #0
 800918a:	d107      	bne.n	800919c <HAL_TIM_PWM_Stop_DMA+0x144>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 0201 	bic.w	r2, r2, #1
 800919a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d104      	bne.n	80091ac <HAL_TIM_PWM_Stop_DMA+0x154>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091aa:	e013      	b.n	80091d4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	2b04      	cmp	r3, #4
 80091b0:	d104      	bne.n	80091bc <HAL_TIM_PWM_Stop_DMA+0x164>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091ba:	e00b      	b.n	80091d4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	2b08      	cmp	r3, #8
 80091c0:	d104      	bne.n	80091cc <HAL_TIM_PWM_Stop_DMA+0x174>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091ca:	e003      	b.n	80091d4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	40010000 	.word	0x40010000

080091e4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e04c      	b.n	8009292 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d111      	bne.n	8009228 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f001 fa45 	bl	800a69c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009216:	2b00      	cmp	r3, #0
 8009218:	d102      	bne.n	8009220 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a1f      	ldr	r2, [pc, #124]	; (800929c <HAL_TIM_OnePulse_Init+0xb8>)
 800921e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2202      	movs	r2, #2
 800922c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	3304      	adds	r3, #4
 8009238:	4619      	mov	r1, r3
 800923a:	4610      	mov	r0, r2
 800923c:	f000 ff62 	bl	800a104 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f022 0208 	bic.w	r2, r2, #8
 800924e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6819      	ldr	r1, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	430a      	orrs	r2, r1
 800925e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	080092a1 	.word	0x080092a1

080092a0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80092cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092dc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092de:	7bfb      	ldrb	r3, [r7, #15]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d108      	bne.n	80092f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80092e4:	7bbb      	ldrb	r3, [r7, #14]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d105      	bne.n	80092f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092ea:	7b7b      	ldrb	r3, [r7, #13]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d102      	bne.n	80092f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80092f0:	7b3b      	ldrb	r3, [r7, #12]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d001      	beq.n	80092fa <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e03b      	b.n	8009372 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2202      	movs	r2, #2
 80092fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2202      	movs	r2, #2
 8009306:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2202      	movs	r2, #2
 800930e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2202      	movs	r2, #2
 8009316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68da      	ldr	r2, [r3, #12]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f042 0202 	orr.w	r2, r2, #2
 8009328:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68da      	ldr	r2, [r3, #12]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f042 0204 	orr.w	r2, r2, #4
 8009338:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2201      	movs	r2, #1
 8009340:	2100      	movs	r1, #0
 8009342:	4618      	mov	r0, r3
 8009344:	f001 f984 	bl	800a650 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2201      	movs	r2, #1
 800934e:	2104      	movs	r1, #4
 8009350:	4618      	mov	r0, r3
 8009352:	f001 f97d 	bl	800a650 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a08      	ldr	r2, [pc, #32]	; (800937c <HAL_TIM_OnePulse_Start_IT+0xc8>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d107      	bne.n	8009370 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800936e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	40010000 	.word	0x40010000

08009380 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d101      	bne.n	8009394 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e0a2      	b.n	80094da <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800939a:	b2db      	uxtb	r3, r3
 800939c:	2b00      	cmp	r3, #0
 800939e:	d111      	bne.n	80093c4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 f977 	bl	800a69c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d102      	bne.n	80093bc <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a4a      	ldr	r2, [pc, #296]	; (80094e4 <HAL_TIM_Encoder_Init+0x164>)
 80093ba:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2202      	movs	r2, #2
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	6812      	ldr	r2, [r2, #0]
 80093d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093da:	f023 0307 	bic.w	r3, r3, #7
 80093de:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3304      	adds	r3, #4
 80093e8:	4619      	mov	r1, r3
 80093ea:	4610      	mov	r0, r2
 80093ec:	f000 fe8a 	bl	800a104 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	4313      	orrs	r3, r2
 8009410:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009418:	f023 0303 	bic.w	r3, r3, #3
 800941c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	689a      	ldr	r2, [r3, #8]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	021b      	lsls	r3, r3, #8
 8009428:	4313      	orrs	r3, r2
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	4313      	orrs	r3, r2
 800942e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009436:	f023 030c 	bic.w	r3, r3, #12
 800943a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	68da      	ldr	r2, [r3, #12]
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	69db      	ldr	r3, [r3, #28]
 8009450:	021b      	lsls	r3, r3, #8
 8009452:	4313      	orrs	r3, r2
 8009454:	693a      	ldr	r2, [r7, #16]
 8009456:	4313      	orrs	r3, r2
 8009458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	011a      	lsls	r2, r3, #4
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	6a1b      	ldr	r3, [r3, #32]
 8009464:	031b      	lsls	r3, r3, #12
 8009466:	4313      	orrs	r3, r2
 8009468:	693a      	ldr	r2, [r7, #16]
 800946a:	4313      	orrs	r3, r2
 800946c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009474:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800947c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	695b      	ldr	r3, [r3, #20]
 8009486:	011b      	lsls	r3, r3, #4
 8009488:	4313      	orrs	r3, r2
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	4313      	orrs	r3, r2
 800948e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	693a      	ldr	r2, [r7, #16]
 800949e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	08005745 	.word	0x08005745

080094e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009500:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009508:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009510:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d110      	bne.n	800953a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d102      	bne.n	8009524 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800951e:	7b7b      	ldrb	r3, [r7, #13]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d001      	beq.n	8009528 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e069      	b.n	80095fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2202      	movs	r2, #2
 800952c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2202      	movs	r2, #2
 8009534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009538:	e031      	b.n	800959e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2b04      	cmp	r3, #4
 800953e:	d110      	bne.n	8009562 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009540:	7bbb      	ldrb	r3, [r7, #14]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d102      	bne.n	800954c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009546:	7b3b      	ldrb	r3, [r7, #12]
 8009548:	2b01      	cmp	r3, #1
 800954a:	d001      	beq.n	8009550 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e055      	b.n	80095fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2202      	movs	r2, #2
 8009554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2202      	movs	r2, #2
 800955c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009560:	e01d      	b.n	800959e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d108      	bne.n	800957a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009568:	7bbb      	ldrb	r3, [r7, #14]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d105      	bne.n	800957a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800956e:	7b7b      	ldrb	r3, [r7, #13]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d102      	bne.n	800957a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009574:	7b3b      	ldrb	r3, [r7, #12]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d001      	beq.n	800957e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	e03e      	b.n	80095fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2202      	movs	r2, #2
 8009582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2202      	movs	r2, #2
 800958a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2202      	movs	r2, #2
 8009592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2202      	movs	r2, #2
 800959a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d003      	beq.n	80095ac <HAL_TIM_Encoder_Start+0xc4>
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2b04      	cmp	r3, #4
 80095a8:	d008      	beq.n	80095bc <HAL_TIM_Encoder_Start+0xd4>
 80095aa:	e00f      	b.n	80095cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2201      	movs	r2, #1
 80095b2:	2100      	movs	r1, #0
 80095b4:	4618      	mov	r0, r3
 80095b6:	f001 f84b 	bl	800a650 <TIM_CCxChannelCmd>
      break;
 80095ba:	e016      	b.n	80095ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2201      	movs	r2, #1
 80095c2:	2104      	movs	r1, #4
 80095c4:	4618      	mov	r0, r3
 80095c6:	f001 f843 	bl	800a650 <TIM_CCxChannelCmd>
      break;
 80095ca:	e00e      	b.n	80095ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2201      	movs	r2, #1
 80095d2:	2100      	movs	r1, #0
 80095d4:	4618      	mov	r0, r3
 80095d6:	f001 f83b 	bl	800a650 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2201      	movs	r2, #1
 80095e0:	2104      	movs	r1, #4
 80095e2:	4618      	mov	r0, r3
 80095e4:	f001 f834 	bl	800a650 <TIM_CCxChannelCmd>
      break;
 80095e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f042 0201 	orr.w	r2, r2, #1
 80095f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	f003 0302 	and.w	r3, r3, #2
 8009616:	2b02      	cmp	r3, #2
 8009618:	d128      	bne.n	800966c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	f003 0302 	and.w	r3, r3, #2
 8009624:	2b02      	cmp	r3, #2
 8009626:	d121      	bne.n	800966c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f06f 0202 	mvn.w	r2, #2
 8009630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	f003 0303 	and.w	r3, r3, #3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d005      	beq.n	8009652 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	4798      	blx	r3
 8009650:	e009      	b.n	8009666 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	f003 0304 	and.w	r3, r3, #4
 8009676:	2b04      	cmp	r3, #4
 8009678:	d128      	bne.n	80096cc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b04      	cmp	r3, #4
 8009686:	d121      	bne.n	80096cc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f06f 0204 	mvn.w	r2, #4
 8009690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2202      	movs	r2, #2
 8009696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d005      	beq.n	80096b2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	4798      	blx	r3
 80096b0:	e009      	b.n	80096c6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	f003 0308 	and.w	r3, r3, #8
 80096d6:	2b08      	cmp	r3, #8
 80096d8:	d128      	bne.n	800972c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	f003 0308 	and.w	r3, r3, #8
 80096e4:	2b08      	cmp	r3, #8
 80096e6:	d121      	bne.n	800972c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f06f 0208 	mvn.w	r2, #8
 80096f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2204      	movs	r2, #4
 80096f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	f003 0303 	and.w	r3, r3, #3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d005      	beq.n	8009712 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	4798      	blx	r3
 8009710:	e009      	b.n	8009726 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	f003 0310 	and.w	r3, r3, #16
 8009736:	2b10      	cmp	r3, #16
 8009738:	d128      	bne.n	800978c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	f003 0310 	and.w	r3, r3, #16
 8009744:	2b10      	cmp	r3, #16
 8009746:	d121      	bne.n	800978c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f06f 0210 	mvn.w	r2, #16
 8009750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2208      	movs	r2, #8
 8009756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	69db      	ldr	r3, [r3, #28]
 800975e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009762:	2b00      	cmp	r3, #0
 8009764:	d005      	beq.n	8009772 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	4798      	blx	r3
 8009770:	e009      	b.n	8009786 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	2b01      	cmp	r3, #1
 8009798:	d110      	bne.n	80097bc <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d109      	bne.n	80097bc <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f06f 0201 	mvn.w	r2, #1
 80097b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c6:	2b80      	cmp	r3, #128	; 0x80
 80097c8:	d110      	bne.n	80097ec <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097d4:	2b80      	cmp	r3, #128	; 0x80
 80097d6:	d109      	bne.n	80097ec <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f6:	2b40      	cmp	r3, #64	; 0x40
 80097f8:	d110      	bne.n	800981c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009804:	2b40      	cmp	r3, #64	; 0x40
 8009806:	d109      	bne.n	800981c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	f003 0320 	and.w	r3, r3, #32
 8009826:	2b20      	cmp	r3, #32
 8009828:	d110      	bne.n	800984c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	f003 0320 	and.w	r3, r3, #32
 8009834:	2b20      	cmp	r3, #32
 8009836:	d109      	bne.n	800984c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f06f 0220 	mvn.w	r2, #32
 8009840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800984c:	bf00      	nop
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b086      	sub	sp, #24
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009860:	2300      	movs	r3, #0
 8009862:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800986a:	2b01      	cmp	r3, #1
 800986c:	d101      	bne.n	8009872 <HAL_TIM_OC_ConfigChannel+0x1e>
 800986e:	2302      	movs	r3, #2
 8009870:	e048      	b.n	8009904 <HAL_TIM_OC_ConfigChannel+0xb0>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2201      	movs	r2, #1
 8009876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b0c      	cmp	r3, #12
 800987e:	d839      	bhi.n	80098f4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8009880:	a201      	add	r2, pc, #4	; (adr r2, 8009888 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009886:	bf00      	nop
 8009888:	080098bd 	.word	0x080098bd
 800988c:	080098f5 	.word	0x080098f5
 8009890:	080098f5 	.word	0x080098f5
 8009894:	080098f5 	.word	0x080098f5
 8009898:	080098cb 	.word	0x080098cb
 800989c:	080098f5 	.word	0x080098f5
 80098a0:	080098f5 	.word	0x080098f5
 80098a4:	080098f5 	.word	0x080098f5
 80098a8:	080098d9 	.word	0x080098d9
 80098ac:	080098f5 	.word	0x080098f5
 80098b0:	080098f5 	.word	0x080098f5
 80098b4:	080098f5 	.word	0x080098f5
 80098b8:	080098e7 	.word	0x080098e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68b9      	ldr	r1, [r7, #8]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 fc9e 	bl	800a204 <TIM_OC1_SetConfig>
      break;
 80098c8:	e017      	b.n	80098fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68b9      	ldr	r1, [r7, #8]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 fcfd 	bl	800a2d0 <TIM_OC2_SetConfig>
      break;
 80098d6:	e010      	b.n	80098fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68b9      	ldr	r1, [r7, #8]
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 fd62 	bl	800a3a8 <TIM_OC3_SetConfig>
      break;
 80098e4:	e009      	b.n	80098fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68b9      	ldr	r1, [r7, #8]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f000 fdc5 	bl	800a47c <TIM_OC4_SetConfig>
      break;
 80098f2:	e002      	b.n	80098fa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	75fb      	strb	r3, [r7, #23]
      break;
 80098f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009902:	7dfb      	ldrb	r3, [r7, #23]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3718      	adds	r7, #24
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009922:	2b01      	cmp	r3, #1
 8009924:	d101      	bne.n	800992a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009926:	2302      	movs	r3, #2
 8009928:	e0ae      	b.n	8009a88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2201      	movs	r2, #1
 800992e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2b0c      	cmp	r3, #12
 8009936:	f200 809f 	bhi.w	8009a78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800993a:	a201      	add	r2, pc, #4	; (adr r2, 8009940 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800993c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009940:	08009975 	.word	0x08009975
 8009944:	08009a79 	.word	0x08009a79
 8009948:	08009a79 	.word	0x08009a79
 800994c:	08009a79 	.word	0x08009a79
 8009950:	080099b5 	.word	0x080099b5
 8009954:	08009a79 	.word	0x08009a79
 8009958:	08009a79 	.word	0x08009a79
 800995c:	08009a79 	.word	0x08009a79
 8009960:	080099f7 	.word	0x080099f7
 8009964:	08009a79 	.word	0x08009a79
 8009968:	08009a79 	.word	0x08009a79
 800996c:	08009a79 	.word	0x08009a79
 8009970:	08009a37 	.word	0x08009a37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68b9      	ldr	r1, [r7, #8]
 800997a:	4618      	mov	r0, r3
 800997c:	f000 fc42 	bl	800a204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	699a      	ldr	r2, [r3, #24]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f042 0208 	orr.w	r2, r2, #8
 800998e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	699a      	ldr	r2, [r3, #24]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f022 0204 	bic.w	r2, r2, #4
 800999e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6999      	ldr	r1, [r3, #24]
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	691a      	ldr	r2, [r3, #16]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	430a      	orrs	r2, r1
 80099b0:	619a      	str	r2, [r3, #24]
      break;
 80099b2:	e064      	b.n	8009a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68b9      	ldr	r1, [r7, #8]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 fc88 	bl	800a2d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	699a      	ldr	r2, [r3, #24]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	699a      	ldr	r2, [r3, #24]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6999      	ldr	r1, [r3, #24]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	021a      	lsls	r2, r3, #8
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	430a      	orrs	r2, r1
 80099f2:	619a      	str	r2, [r3, #24]
      break;
 80099f4:	e043      	b.n	8009a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 fcd3 	bl	800a3a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	69da      	ldr	r2, [r3, #28]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f042 0208 	orr.w	r2, r2, #8
 8009a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	69da      	ldr	r2, [r3, #28]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f022 0204 	bic.w	r2, r2, #4
 8009a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	69d9      	ldr	r1, [r3, #28]
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	691a      	ldr	r2, [r3, #16]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	430a      	orrs	r2, r1
 8009a32:	61da      	str	r2, [r3, #28]
      break;
 8009a34:	e023      	b.n	8009a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68b9      	ldr	r1, [r7, #8]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f000 fd1d 	bl	800a47c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	69da      	ldr	r2, [r3, #28]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	69da      	ldr	r2, [r3, #28]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	69d9      	ldr	r1, [r3, #28]
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	021a      	lsls	r2, r3, #8
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	430a      	orrs	r2, r1
 8009a74:	61da      	str	r2, [r3, #28]
      break;
 8009a76:	e002      	b.n	8009a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3718      	adds	r7, #24
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d101      	bne.n	8009aac <HAL_TIM_ConfigClockSource+0x1c>
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	e0b4      	b.n	8009c16 <HAL_TIM_ConfigClockSource+0x186>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ad2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ae4:	d03e      	beq.n	8009b64 <HAL_TIM_ConfigClockSource+0xd4>
 8009ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aea:	f200 8087 	bhi.w	8009bfc <HAL_TIM_ConfigClockSource+0x16c>
 8009aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009af2:	f000 8086 	beq.w	8009c02 <HAL_TIM_ConfigClockSource+0x172>
 8009af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009afa:	d87f      	bhi.n	8009bfc <HAL_TIM_ConfigClockSource+0x16c>
 8009afc:	2b70      	cmp	r3, #112	; 0x70
 8009afe:	d01a      	beq.n	8009b36 <HAL_TIM_ConfigClockSource+0xa6>
 8009b00:	2b70      	cmp	r3, #112	; 0x70
 8009b02:	d87b      	bhi.n	8009bfc <HAL_TIM_ConfigClockSource+0x16c>
 8009b04:	2b60      	cmp	r3, #96	; 0x60
 8009b06:	d050      	beq.n	8009baa <HAL_TIM_ConfigClockSource+0x11a>
 8009b08:	2b60      	cmp	r3, #96	; 0x60
 8009b0a:	d877      	bhi.n	8009bfc <HAL_TIM_ConfigClockSource+0x16c>
 8009b0c:	2b50      	cmp	r3, #80	; 0x50
 8009b0e:	d03c      	beq.n	8009b8a <HAL_TIM_ConfigClockSource+0xfa>
 8009b10:	2b50      	cmp	r3, #80	; 0x50
 8009b12:	d873      	bhi.n	8009bfc <HAL_TIM_ConfigClockSource+0x16c>
 8009b14:	2b40      	cmp	r3, #64	; 0x40
 8009b16:	d058      	beq.n	8009bca <HAL_TIM_ConfigClockSource+0x13a>
 8009b18:	2b40      	cmp	r3, #64	; 0x40
 8009b1a:	d86f      	bhi.n	8009bfc <HAL_TIM_ConfigClockSource+0x16c>
 8009b1c:	2b30      	cmp	r3, #48	; 0x30
 8009b1e:	d064      	beq.n	8009bea <HAL_TIM_ConfigClockSource+0x15a>
 8009b20:	2b30      	cmp	r3, #48	; 0x30
 8009b22:	d86b      	bhi.n	8009bfc <HAL_TIM_ConfigClockSource+0x16c>
 8009b24:	2b20      	cmp	r3, #32
 8009b26:	d060      	beq.n	8009bea <HAL_TIM_ConfigClockSource+0x15a>
 8009b28:	2b20      	cmp	r3, #32
 8009b2a:	d867      	bhi.n	8009bfc <HAL_TIM_ConfigClockSource+0x16c>
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d05c      	beq.n	8009bea <HAL_TIM_ConfigClockSource+0x15a>
 8009b30:	2b10      	cmp	r3, #16
 8009b32:	d05a      	beq.n	8009bea <HAL_TIM_ConfigClockSource+0x15a>
 8009b34:	e062      	b.n	8009bfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6818      	ldr	r0, [r3, #0]
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	6899      	ldr	r1, [r3, #8]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	685a      	ldr	r2, [r3, #4]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	f000 fd63 	bl	800a610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	609a      	str	r2, [r3, #8]
      break;
 8009b62:	e04f      	b.n	8009c04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6818      	ldr	r0, [r3, #0]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	6899      	ldr	r1, [r3, #8]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	685a      	ldr	r2, [r3, #4]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	f000 fd4c 	bl	800a610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689a      	ldr	r2, [r3, #8]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b86:	609a      	str	r2, [r3, #8]
      break;
 8009b88:	e03c      	b.n	8009c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6818      	ldr	r0, [r3, #0]
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	6859      	ldr	r1, [r3, #4]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	461a      	mov	r2, r3
 8009b98:	f000 fcc0 	bl	800a51c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2150      	movs	r1, #80	; 0x50
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f000 fd19 	bl	800a5da <TIM_ITRx_SetConfig>
      break;
 8009ba8:	e02c      	b.n	8009c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6818      	ldr	r0, [r3, #0]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	6859      	ldr	r1, [r3, #4]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	f000 fcdf 	bl	800a57a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2160      	movs	r1, #96	; 0x60
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 fd09 	bl	800a5da <TIM_ITRx_SetConfig>
      break;
 8009bc8:	e01c      	b.n	8009c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6818      	ldr	r0, [r3, #0]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	6859      	ldr	r1, [r3, #4]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	f000 fca0 	bl	800a51c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2140      	movs	r1, #64	; 0x40
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 fcf9 	bl	800a5da <TIM_ITRx_SetConfig>
      break;
 8009be8:	e00c      	b.n	8009c04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	f000 fcf0 	bl	800a5da <TIM_ITRx_SetConfig>
      break;
 8009bfa:	e003      	b.n	8009c04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8009c00:	e000      	b.n	8009c04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b083      	sub	sp, #12
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009c26:	bf00      	nop
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b083      	sub	sp, #12
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c3a:	bf00      	nop
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr

08009c46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c46:	b480      	push	{r7}
 8009c48:	b083      	sub	sp, #12
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c4e:	bf00      	nop
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b083      	sub	sp, #12
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009c62:	bf00      	nop
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr

08009c6e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009c6e:	b480      	push	{r7}
 8009c70:	b083      	sub	sp, #12
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009c76:	bf00      	nop
 8009c78:	370c      	adds	r7, #12
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b083      	sub	sp, #12
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c8a:	bf00      	nop
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009c9e:	bf00      	nop
 8009ca0:	370c      	adds	r7, #12
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr

08009caa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009caa:	b480      	push	{r7}
 8009cac:	b083      	sub	sp, #12
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009cb2:	bf00      	nop
 8009cb4:	370c      	adds	r7, #12
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
	...

08009cc0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	607a      	str	r2, [r7, #4]
 8009ccc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d101      	bne.n	8009cdc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e135      	b.n	8009f48 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d101      	bne.n	8009cea <HAL_TIM_RegisterCallback+0x2a>
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	e12e      	b.n	8009f48 <HAL_TIM_RegisterCallback+0x288>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	f040 80ba 	bne.w	8009e74 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8009d00:	7afb      	ldrb	r3, [r7, #11]
 8009d02:	2b1a      	cmp	r3, #26
 8009d04:	f200 80b3 	bhi.w	8009e6e <HAL_TIM_RegisterCallback+0x1ae>
 8009d08:	a201      	add	r2, pc, #4	; (adr r2, 8009d10 <HAL_TIM_RegisterCallback+0x50>)
 8009d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0e:	bf00      	nop
 8009d10:	08009d7d 	.word	0x08009d7d
 8009d14:	08009d85 	.word	0x08009d85
 8009d18:	08009d8d 	.word	0x08009d8d
 8009d1c:	08009d95 	.word	0x08009d95
 8009d20:	08009d9d 	.word	0x08009d9d
 8009d24:	08009da5 	.word	0x08009da5
 8009d28:	08009dad 	.word	0x08009dad
 8009d2c:	08009db5 	.word	0x08009db5
 8009d30:	08009dbd 	.word	0x08009dbd
 8009d34:	08009dc5 	.word	0x08009dc5
 8009d38:	08009dcd 	.word	0x08009dcd
 8009d3c:	08009dd5 	.word	0x08009dd5
 8009d40:	08009ddd 	.word	0x08009ddd
 8009d44:	08009de5 	.word	0x08009de5
 8009d48:	08009ded 	.word	0x08009ded
 8009d4c:	08009df7 	.word	0x08009df7
 8009d50:	08009e01 	.word	0x08009e01
 8009d54:	08009e0b 	.word	0x08009e0b
 8009d58:	08009e15 	.word	0x08009e15
 8009d5c:	08009e1f 	.word	0x08009e1f
 8009d60:	08009e29 	.word	0x08009e29
 8009d64:	08009e33 	.word	0x08009e33
 8009d68:	08009e3d 	.word	0x08009e3d
 8009d6c:	08009e47 	.word	0x08009e47
 8009d70:	08009e51 	.word	0x08009e51
 8009d74:	08009e5b 	.word	0x08009e5b
 8009d78:	08009e65 	.word	0x08009e65
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009d82:	e0dc      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009d8a:	e0d8      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009d92:	e0d4      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009d9a:	e0d0      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009da2:	e0cc      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009daa:	e0c8      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009db2:	e0c4      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009dba:	e0c0      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009dc2:	e0bc      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009dca:	e0b8      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009dd2:	e0b4      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009dda:	e0b0      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009de2:	e0ac      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009dea:	e0a8      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009df4:	e0a3      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8009dfe:	e09e      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8009e08:	e099      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8009e12:	e094      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8009e1c:	e08f      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8009e26:	e08a      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8009e30:	e085      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8009e3a:	e080      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8009e44:	e07b      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8009e4e:	e076      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8009e58:	e071      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8009e62:	e06c      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009e6c:	e067      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	75fb      	strb	r3, [r7, #23]
        break;
 8009e72:	e064      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d15c      	bne.n	8009f3a <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8009e80:	7afb      	ldrb	r3, [r7, #11]
 8009e82:	2b0d      	cmp	r3, #13
 8009e84:	d856      	bhi.n	8009f34 <HAL_TIM_RegisterCallback+0x274>
 8009e86:	a201      	add	r2, pc, #4	; (adr r2, 8009e8c <HAL_TIM_RegisterCallback+0x1cc>)
 8009e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8c:	08009ec5 	.word	0x08009ec5
 8009e90:	08009ecd 	.word	0x08009ecd
 8009e94:	08009ed5 	.word	0x08009ed5
 8009e98:	08009edd 	.word	0x08009edd
 8009e9c:	08009ee5 	.word	0x08009ee5
 8009ea0:	08009eed 	.word	0x08009eed
 8009ea4:	08009ef5 	.word	0x08009ef5
 8009ea8:	08009efd 	.word	0x08009efd
 8009eac:	08009f05 	.word	0x08009f05
 8009eb0:	08009f0d 	.word	0x08009f0d
 8009eb4:	08009f15 	.word	0x08009f15
 8009eb8:	08009f1d 	.word	0x08009f1d
 8009ebc:	08009f25 	.word	0x08009f25
 8009ec0:	08009f2d 	.word	0x08009f2d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009eca:	e038      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009ed2:	e034      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009eda:	e030      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009ee2:	e02c      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009eea:	e028      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009ef2:	e024      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009efa:	e020      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009f02:	e01c      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009f0a:	e018      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009f12:	e014      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009f1a:	e010      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009f22:	e00c      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009f2a:	e008      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009f32:	e004      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	75fb      	strb	r3, [r7, #23]
        break;
 8009f38:	e001      	b.n	8009f3e <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	371c      	adds	r7, #28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f60:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d107      	bne.n	8009f7c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2201      	movs	r2, #1
 8009f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f7a:	e02a      	b.n	8009fd2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d107      	bne.n	8009f96 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2202      	movs	r2, #2
 8009f8a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f94:	e01d      	b.n	8009fd2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d107      	bne.n	8009fb0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2204      	movs	r2, #4
 8009fa4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fae:	e010      	b.n	8009fd2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d107      	bne.n	8009fca <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2208      	movs	r2, #8
 8009fbe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fc8:	e003      	b.n	8009fd2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	4798      	blx	r3
#else
  HAL_TIM_ErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	771a      	strb	r2, [r3, #28]
}
 8009fe2:	bf00      	nop
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d10b      	bne.n	800a01a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2201      	movs	r2, #1
 800a006:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	69db      	ldr	r3, [r3, #28]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d136      	bne.n	800a07e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a018:	e031      	b.n	800a07e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	429a      	cmp	r2, r3
 800a022:	d10b      	bne.n	800a03c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2202      	movs	r2, #2
 800a028:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d125      	bne.n	800a07e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a03a:	e020      	b.n	800a07e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	429a      	cmp	r2, r3
 800a044:	d10b      	bne.n	800a05e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2204      	movs	r2, #4
 800a04a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	69db      	ldr	r3, [r3, #28]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d114      	bne.n	800a07e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a05c:	e00f      	b.n	800a07e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	429a      	cmp	r2, r3
 800a066:	d10a      	bne.n	800a07e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2208      	movs	r2, #8
 800a06c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	69db      	ldr	r3, [r3, #28]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d103      	bne.n	800a07e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2201      	movs	r2, #1
 800a07a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	771a      	strb	r2, [r3, #28]
}
 800a08e:	bf00      	nop
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b084      	sub	sp, #16
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d103      	bne.n	800a0b6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	771a      	strb	r2, [r3, #28]
 800a0b4:	e019      	b.n	800a0ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d103      	bne.n	800a0c8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	771a      	strb	r2, [r3, #28]
 800a0c6:	e010      	b.n	800a0ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d103      	bne.n	800a0da <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2204      	movs	r2, #4
 800a0d6:	771a      	strb	r2, [r3, #28]
 800a0d8:	e007      	b.n	800a0ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d102      	bne.n	800a0ea <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2208      	movs	r2, #8
 800a0e8:	771a      	strb	r2, [r3, #28]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	771a      	strb	r2, [r3, #28]
}
 800a0fa:	bf00      	nop
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
	...

0800a104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a34      	ldr	r2, [pc, #208]	; (800a1e8 <TIM_Base_SetConfig+0xe4>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d00f      	beq.n	800a13c <TIM_Base_SetConfig+0x38>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a122:	d00b      	beq.n	800a13c <TIM_Base_SetConfig+0x38>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a31      	ldr	r2, [pc, #196]	; (800a1ec <TIM_Base_SetConfig+0xe8>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d007      	beq.n	800a13c <TIM_Base_SetConfig+0x38>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a30      	ldr	r2, [pc, #192]	; (800a1f0 <TIM_Base_SetConfig+0xec>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d003      	beq.n	800a13c <TIM_Base_SetConfig+0x38>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a2f      	ldr	r2, [pc, #188]	; (800a1f4 <TIM_Base_SetConfig+0xf0>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d108      	bne.n	800a14e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a25      	ldr	r2, [pc, #148]	; (800a1e8 <TIM_Base_SetConfig+0xe4>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d01b      	beq.n	800a18e <TIM_Base_SetConfig+0x8a>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a15c:	d017      	beq.n	800a18e <TIM_Base_SetConfig+0x8a>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a22      	ldr	r2, [pc, #136]	; (800a1ec <TIM_Base_SetConfig+0xe8>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d013      	beq.n	800a18e <TIM_Base_SetConfig+0x8a>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a21      	ldr	r2, [pc, #132]	; (800a1f0 <TIM_Base_SetConfig+0xec>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d00f      	beq.n	800a18e <TIM_Base_SetConfig+0x8a>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a20      	ldr	r2, [pc, #128]	; (800a1f4 <TIM_Base_SetConfig+0xf0>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d00b      	beq.n	800a18e <TIM_Base_SetConfig+0x8a>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a1f      	ldr	r2, [pc, #124]	; (800a1f8 <TIM_Base_SetConfig+0xf4>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d007      	beq.n	800a18e <TIM_Base_SetConfig+0x8a>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4a1e      	ldr	r2, [pc, #120]	; (800a1fc <TIM_Base_SetConfig+0xf8>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d003      	beq.n	800a18e <TIM_Base_SetConfig+0x8a>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a1d      	ldr	r2, [pc, #116]	; (800a200 <TIM_Base_SetConfig+0xfc>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d108      	bne.n	800a1a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	695b      	ldr	r3, [r3, #20]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	689a      	ldr	r2, [r3, #8]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a08      	ldr	r2, [pc, #32]	; (800a1e8 <TIM_Base_SetConfig+0xe4>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d103      	bne.n	800a1d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	691a      	ldr	r2, [r3, #16]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	615a      	str	r2, [r3, #20]
}
 800a1da:	bf00      	nop
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	40010000 	.word	0x40010000
 800a1ec:	40000400 	.word	0x40000400
 800a1f0:	40000800 	.word	0x40000800
 800a1f4:	40000c00 	.word	0x40000c00
 800a1f8:	40014000 	.word	0x40014000
 800a1fc:	40014400 	.word	0x40014400
 800a200:	40014800 	.word	0x40014800

0800a204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	f023 0201 	bic.w	r2, r3, #1
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f023 0303 	bic.w	r3, r3, #3
 800a23a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	4313      	orrs	r3, r2
 800a244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f023 0302 	bic.w	r3, r3, #2
 800a24c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	4313      	orrs	r3, r2
 800a256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4a1c      	ldr	r2, [pc, #112]	; (800a2cc <TIM_OC1_SetConfig+0xc8>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d10c      	bne.n	800a27a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	f023 0308 	bic.w	r3, r3, #8
 800a266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	4313      	orrs	r3, r2
 800a270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f023 0304 	bic.w	r3, r3, #4
 800a278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a13      	ldr	r2, [pc, #76]	; (800a2cc <TIM_OC1_SetConfig+0xc8>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d111      	bne.n	800a2a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	693a      	ldr	r2, [r7, #16]
 800a298:	4313      	orrs	r3, r2
 800a29a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	693a      	ldr	r2, [r7, #16]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	685a      	ldr	r2, [r3, #4]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	697a      	ldr	r2, [r7, #20]
 800a2be:	621a      	str	r2, [r3, #32]
}
 800a2c0:	bf00      	nop
 800a2c2:	371c      	adds	r7, #28
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	40010000 	.word	0x40010000

0800a2d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b087      	sub	sp, #28
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	f023 0210 	bic.w	r2, r3, #16
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a1b      	ldr	r3, [r3, #32]
 800a2ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	699b      	ldr	r3, [r3, #24]
 800a2f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	021b      	lsls	r3, r3, #8
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	4313      	orrs	r3, r2
 800a312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	f023 0320 	bic.w	r3, r3, #32
 800a31a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	011b      	lsls	r3, r3, #4
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	4313      	orrs	r3, r2
 800a326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	4a1e      	ldr	r2, [pc, #120]	; (800a3a4 <TIM_OC2_SetConfig+0xd4>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d10d      	bne.n	800a34c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	011b      	lsls	r3, r3, #4
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	4313      	orrs	r3, r2
 800a342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a34a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a15      	ldr	r2, [pc, #84]	; (800a3a4 <TIM_OC2_SetConfig+0xd4>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d113      	bne.n	800a37c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a35a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a362:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	695b      	ldr	r3, [r3, #20]
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	693a      	ldr	r2, [r7, #16]
 800a378:	4313      	orrs	r3, r2
 800a37a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	621a      	str	r2, [r3, #32]
}
 800a396:	bf00      	nop
 800a398:	371c      	adds	r7, #28
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	40010000 	.word	0x40010000

0800a3a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a1b      	ldr	r3, [r3, #32]
 800a3c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	69db      	ldr	r3, [r3, #28]
 800a3ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f023 0303 	bic.w	r3, r3, #3
 800a3de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	021b      	lsls	r3, r3, #8
 800a3f8:	697a      	ldr	r2, [r7, #20]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a1d      	ldr	r2, [pc, #116]	; (800a478 <TIM_OC3_SetConfig+0xd0>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d10d      	bne.n	800a422 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a40c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	021b      	lsls	r3, r3, #8
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	4313      	orrs	r3, r2
 800a418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a14      	ldr	r2, [pc, #80]	; (800a478 <TIM_OC3_SetConfig+0xd0>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d113      	bne.n	800a452 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	011b      	lsls	r3, r3, #4
 800a440:	693a      	ldr	r2, [r7, #16]
 800a442:	4313      	orrs	r3, r2
 800a444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	011b      	lsls	r3, r3, #4
 800a44c:	693a      	ldr	r2, [r7, #16]
 800a44e:	4313      	orrs	r3, r2
 800a450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	685a      	ldr	r2, [r3, #4]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	621a      	str	r2, [r3, #32]
}
 800a46c:	bf00      	nop
 800a46e:	371c      	adds	r7, #28
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	40010000 	.word	0x40010000

0800a47c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b087      	sub	sp, #28
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a1b      	ldr	r3, [r3, #32]
 800a48a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a1b      	ldr	r3, [r3, #32]
 800a496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	69db      	ldr	r3, [r3, #28]
 800a4a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	021b      	lsls	r3, r3, #8
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	031b      	lsls	r3, r3, #12
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4a10      	ldr	r2, [pc, #64]	; (800a518 <TIM_OC4_SetConfig+0x9c>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d109      	bne.n	800a4f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	695b      	ldr	r3, [r3, #20]
 800a4e8:	019b      	lsls	r3, r3, #6
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	697a      	ldr	r2, [r7, #20]
 800a4f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	685a      	ldr	r2, [r3, #4]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	621a      	str	r2, [r3, #32]
}
 800a50a:	bf00      	nop
 800a50c:	371c      	adds	r7, #28
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	40010000 	.word	0x40010000

0800a51c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6a1b      	ldr	r3, [r3, #32]
 800a52c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	f023 0201 	bic.w	r2, r3, #1
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	011b      	lsls	r3, r3, #4
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	4313      	orrs	r3, r2
 800a550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	f023 030a 	bic.w	r3, r3, #10
 800a558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	4313      	orrs	r3, r2
 800a560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	621a      	str	r2, [r3, #32]
}
 800a56e:	bf00      	nop
 800a570:	371c      	adds	r7, #28
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b087      	sub	sp, #28
 800a57e:	af00      	add	r7, sp, #0
 800a580:	60f8      	str	r0, [r7, #12]
 800a582:	60b9      	str	r1, [r7, #8]
 800a584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	f023 0210 	bic.w	r2, r3, #16
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	699b      	ldr	r3, [r3, #24]
 800a596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6a1b      	ldr	r3, [r3, #32]
 800a59c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	031b      	lsls	r3, r3, #12
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	011b      	lsls	r3, r3, #4
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	697a      	ldr	r2, [r7, #20]
 800a5c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	621a      	str	r2, [r3, #32]
}
 800a5ce:	bf00      	nop
 800a5d0:	371c      	adds	r7, #28
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr

0800a5da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	b085      	sub	sp, #20
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	f043 0307 	orr.w	r3, r3, #7
 800a5fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	609a      	str	r2, [r3, #8]
}
 800a604:	bf00      	nop
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a610:	b480      	push	{r7}
 800a612:	b087      	sub	sp, #28
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
 800a61c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a62a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	021a      	lsls	r2, r3, #8
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	431a      	orrs	r2, r3
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	4313      	orrs	r3, r2
 800a638:	697a      	ldr	r2, [r7, #20]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	697a      	ldr	r2, [r7, #20]
 800a642:	609a      	str	r2, [r3, #8]
}
 800a644:	bf00      	nop
 800a646:	371c      	adds	r7, #28
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a650:	b480      	push	{r7}
 800a652:	b087      	sub	sp, #28
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	f003 031f 	and.w	r3, r3, #31
 800a662:	2201      	movs	r2, #1
 800a664:	fa02 f303 	lsl.w	r3, r2, r3
 800a668:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6a1a      	ldr	r2, [r3, #32]
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	43db      	mvns	r3, r3
 800a672:	401a      	ands	r2, r3
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6a1a      	ldr	r2, [r3, #32]
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	f003 031f 	and.w	r3, r3, #31
 800a682:	6879      	ldr	r1, [r7, #4]
 800a684:	fa01 f303 	lsl.w	r3, r1, r3
 800a688:	431a      	orrs	r2, r3
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	621a      	str	r2, [r3, #32]
}
 800a68e:	bf00      	nop
 800a690:	371c      	adds	r7, #28
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
	...

0800a69c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a1c      	ldr	r2, [pc, #112]	; (800a718 <TIM_ResetCallback+0x7c>)
 800a6a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a1b      	ldr	r2, [pc, #108]	; (800a71c <TIM_ResetCallback+0x80>)
 800a6b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a1a      	ldr	r2, [pc, #104]	; (800a720 <TIM_ResetCallback+0x84>)
 800a6b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a19      	ldr	r2, [pc, #100]	; (800a724 <TIM_ResetCallback+0x88>)
 800a6c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a18      	ldr	r2, [pc, #96]	; (800a728 <TIM_ResetCallback+0x8c>)
 800a6c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4a17      	ldr	r2, [pc, #92]	; (800a72c <TIM_ResetCallback+0x90>)
 800a6d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a16      	ldr	r2, [pc, #88]	; (800a730 <TIM_ResetCallback+0x94>)
 800a6d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a15      	ldr	r2, [pc, #84]	; (800a734 <TIM_ResetCallback+0x98>)
 800a6e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a14      	ldr	r2, [pc, #80]	; (800a738 <TIM_ResetCallback+0x9c>)
 800a6e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a13      	ldr	r2, [pc, #76]	; (800a73c <TIM_ResetCallback+0xa0>)
 800a6f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a12      	ldr	r2, [pc, #72]	; (800a740 <TIM_ResetCallback+0xa4>)
 800a6f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a11      	ldr	r2, [pc, #68]	; (800a744 <TIM_ResetCallback+0xa8>)
 800a700:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a10      	ldr	r2, [pc, #64]	; (800a748 <TIM_ResetCallback+0xac>)
 800a708:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr
 800a718:	08004d9d 	.word	0x08004d9d
 800a71c:	08009c1f 	.word	0x08009c1f
 800a720:	08009c83 	.word	0x08009c83
 800a724:	08009c97 	.word	0x08009c97
 800a728:	08009c47 	.word	0x08009c47
 800a72c:	08009c5b 	.word	0x08009c5b
 800a730:	08009c33 	.word	0x08009c33
 800a734:	0800336d 	.word	0x0800336d
 800a738:	08009c6f 	.word	0x08009c6f
 800a73c:	08009cab 	.word	0x08009cab
 800a740:	0800a8cd 	.word	0x0800a8cd
 800a744:	0800a8e1 	.word	0x0800a8e1
 800a748:	0800a8f5 	.word	0x0800a8f5

0800a74c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d101      	bne.n	800a764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a760:	2302      	movs	r3, #2
 800a762:	e050      	b.n	800a806 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2202      	movs	r2, #2
 800a770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a78a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	4313      	orrs	r3, r2
 800a794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a1c      	ldr	r2, [pc, #112]	; (800a814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d018      	beq.n	800a7da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7b0:	d013      	beq.n	800a7da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a18      	ldr	r2, [pc, #96]	; (800a818 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d00e      	beq.n	800a7da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a16      	ldr	r2, [pc, #88]	; (800a81c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d009      	beq.n	800a7da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a15      	ldr	r2, [pc, #84]	; (800a820 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d004      	beq.n	800a7da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a13      	ldr	r2, [pc, #76]	; (800a824 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d10c      	bne.n	800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	40010000 	.word	0x40010000
 800a818:	40000400 	.word	0x40000400
 800a81c:	40000800 	.word	0x40000800
 800a820:	40000c00 	.word	0x40000c00
 800a824:	40014000 	.word	0x40014000

0800a828 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a832:	2300      	movs	r3, #0
 800a834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d101      	bne.n	800a844 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a840:	2302      	movs	r3, #2
 800a842:	e03d      	b.n	800a8c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	4313      	orrs	r3, r2
 800a858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	4313      	orrs	r3, r2
 800a866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	4313      	orrs	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4313      	orrs	r3, r2
 800a882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	4313      	orrs	r3, r2
 800a890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	695b      	ldr	r3, [r3, #20]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	69db      	ldr	r3, [r3, #28]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3714      	adds	r7, #20
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a8e8:	bf00      	nop
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8fc:	bf00      	nop
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d101      	bne.n	800a91a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e04a      	b.n	800a9b0 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b00      	cmp	r3, #0
 800a924:	d111      	bne.n	800a94a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fd22 	bl	800b378 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d102      	bne.n	800a942 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a1e      	ldr	r2, [pc, #120]	; (800a9b8 <HAL_UART_Init+0xb0>)
 800a940:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2224      	movs	r2, #36	; 0x24
 800a94e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68da      	ldr	r2, [r3, #12]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a960:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 ffec 	bl	800b940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	691a      	ldr	r2, [r3, #16]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a976:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	695a      	ldr	r2, [r3, #20]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a986:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68da      	ldr	r2, [r3, #12]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a996:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2220      	movs	r2, #32
 800a9a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	08005fe9 	.word	0x08005fe9

0800a9bc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b087      	sub	sp, #28
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	607a      	str	r2, [r7, #4]
 800a9c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d107      	bne.n	800a9e4 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d8:	f043 0220 	orr.w	r2, r3, #32
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e08c      	b.n	800aafe <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d101      	bne.n	800a9f2 <HAL_UART_RegisterCallback+0x36>
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	e085      	b.n	800aafe <HAL_UART_RegisterCallback+0x142>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b20      	cmp	r3, #32
 800aa04:	d151      	bne.n	800aaaa <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800aa06:	7afb      	ldrb	r3, [r7, #11]
 800aa08:	2b0c      	cmp	r3, #12
 800aa0a:	d845      	bhi.n	800aa98 <HAL_UART_RegisterCallback+0xdc>
 800aa0c:	a201      	add	r2, pc, #4	; (adr r2, 800aa14 <HAL_UART_RegisterCallback+0x58>)
 800aa0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa12:	bf00      	nop
 800aa14:	0800aa49 	.word	0x0800aa49
 800aa18:	0800aa51 	.word	0x0800aa51
 800aa1c:	0800aa59 	.word	0x0800aa59
 800aa20:	0800aa61 	.word	0x0800aa61
 800aa24:	0800aa69 	.word	0x0800aa69
 800aa28:	0800aa71 	.word	0x0800aa71
 800aa2c:	0800aa79 	.word	0x0800aa79
 800aa30:	0800aa81 	.word	0x0800aa81
 800aa34:	0800aa99 	.word	0x0800aa99
 800aa38:	0800aa99 	.word	0x0800aa99
 800aa3c:	0800aa99 	.word	0x0800aa99
 800aa40:	0800aa89 	.word	0x0800aa89
 800aa44:	0800aa91 	.word	0x0800aa91
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800aa4e:	e051      	b.n	800aaf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800aa56:	e04d      	b.n	800aaf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800aa5e:	e049      	b.n	800aaf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800aa66:	e045      	b.n	800aaf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800aa6e:	e041      	b.n	800aaf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800aa76:	e03d      	b.n	800aaf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800aa7e:	e039      	b.n	800aaf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800aa86:	e035      	b.n	800aaf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800aa8e:	e031      	b.n	800aaf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800aa96:	e02d      	b.n	800aaf4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9c:	f043 0220 	orr.w	r2, r3, #32
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	75fb      	strb	r3, [r7, #23]
        break;
 800aaa8:	e024      	b.n	800aaf4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d116      	bne.n	800aae4 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800aab6:	7afb      	ldrb	r3, [r7, #11]
 800aab8:	2b0b      	cmp	r3, #11
 800aaba:	d002      	beq.n	800aac2 <HAL_UART_RegisterCallback+0x106>
 800aabc:	2b0c      	cmp	r3, #12
 800aabe:	d004      	beq.n	800aaca <HAL_UART_RegisterCallback+0x10e>
 800aac0:	e007      	b.n	800aad2 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800aac8:	e014      	b.n	800aaf4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800aad0:	e010      	b.n	800aaf4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad6:	f043 0220 	orr.w	r2, r3, #32
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	75fb      	strb	r3, [r7, #23]
        break;
 800aae2:	e007      	b.n	800aaf4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae8:	f043 0220 	orr.w	r2, r3, #32
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aafc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	371c      	adds	r7, #28
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop

0800ab0c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	4613      	mov	r3, r2
 800ab18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	2b20      	cmp	r3, #32
 800ab24:	d11d      	bne.n	800ab62 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d002      	beq.n	800ab32 <HAL_UART_Receive_IT+0x26>
 800ab2c:	88fb      	ldrh	r3, [r7, #6]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e016      	b.n	800ab64 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d101      	bne.n	800ab44 <HAL_UART_Receive_IT+0x38>
 800ab40:	2302      	movs	r3, #2
 800ab42:	e00f      	b.n	800ab64 <HAL_UART_Receive_IT+0x58>
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ab52:	88fb      	ldrh	r3, [r7, #6]
 800ab54:	461a      	mov	r2, r3
 800ab56:	68b9      	ldr	r1, [r7, #8]
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	f000 fced 	bl	800b538 <UART_Start_Receive_IT>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	e000      	b.n	800ab64 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ab62:	2302      	movs	r3, #2
  }
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b08c      	sub	sp, #48	; 0x30
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	4613      	mov	r3, r2
 800ab78:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	2b20      	cmp	r3, #32
 800ab84:	d165      	bne.n	800ac52 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d002      	beq.n	800ab92 <HAL_UART_Transmit_DMA+0x26>
 800ab8c:	88fb      	ldrh	r3, [r7, #6]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d101      	bne.n	800ab96 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e05e      	b.n	800ac54 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d101      	bne.n	800aba4 <HAL_UART_Transmit_DMA+0x38>
 800aba0:	2302      	movs	r3, #2
 800aba2:	e057      	b.n	800ac54 <HAL_UART_Transmit_DMA+0xe8>
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800abac:	68ba      	ldr	r2, [r7, #8]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	88fa      	ldrh	r2, [r7, #6]
 800abb6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	88fa      	ldrh	r2, [r7, #6]
 800abbc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2221      	movs	r2, #33	; 0x21
 800abc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abd0:	4a22      	ldr	r2, [pc, #136]	; (800ac5c <HAL_UART_Transmit_DMA+0xf0>)
 800abd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abd8:	4a21      	ldr	r2, [pc, #132]	; (800ac60 <HAL_UART_Transmit_DMA+0xf4>)
 800abda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe0:	4a20      	ldr	r2, [pc, #128]	; (800ac64 <HAL_UART_Transmit_DMA+0xf8>)
 800abe2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe8:	2200      	movs	r2, #0
 800abea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800abec:	f107 0308 	add.w	r3, r7, #8
 800abf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800abf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf8:	6819      	ldr	r1, [r3, #0]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	3304      	adds	r3, #4
 800ac00:	461a      	mov	r2, r3
 800ac02:	88fb      	ldrh	r3, [r7, #6]
 800ac04:	f7fb ffd2 	bl	8006bac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac10:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	3314      	adds	r3, #20
 800ac20:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	e853 3f00 	ldrex	r3, [r3]
 800ac28:	617b      	str	r3, [r7, #20]
   return(result);
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac30:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	3314      	adds	r3, #20
 800ac38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac3a:	627a      	str	r2, [r7, #36]	; 0x24
 800ac3c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3e:	6a39      	ldr	r1, [r7, #32]
 800ac40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac42:	e841 2300 	strex	r3, r2, [r1]
 800ac46:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1e5      	bne.n	800ac1a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	e000      	b.n	800ac54 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800ac52:	2302      	movs	r3, #2
  }
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3730      	adds	r7, #48	; 0x30
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	0800b3e9 	.word	0x0800b3e9
 800ac60:	0800b485 	.word	0x0800b485
 800ac64:	0800b4a3 	.word	0x0800b4a3

0800ac68 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b09a      	sub	sp, #104	; 0x68
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	330c      	adds	r3, #12
 800ac76:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac7a:	e853 3f00 	ldrex	r3, [r3]
 800ac7e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ac80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac86:	667b      	str	r3, [r7, #100]	; 0x64
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	330c      	adds	r3, #12
 800ac8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ac90:	657a      	str	r2, [r7, #84]	; 0x54
 800ac92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac98:	e841 2300 	strex	r3, r2, [r1]
 800ac9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ac9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1e5      	bne.n	800ac70 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	3314      	adds	r3, #20
 800acaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acae:	e853 3f00 	ldrex	r3, [r3]
 800acb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800acb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb6:	f023 0301 	bic.w	r3, r3, #1
 800acba:	663b      	str	r3, [r7, #96]	; 0x60
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	3314      	adds	r3, #20
 800acc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800acc4:	643a      	str	r2, [r7, #64]	; 0x40
 800acc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800acca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800accc:	e841 2300 	strex	r3, r2, [r1]
 800acd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800acd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1e5      	bne.n	800aca4 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d119      	bne.n	800ad14 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	330c      	adds	r3, #12
 800ace6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace8:	6a3b      	ldr	r3, [r7, #32]
 800acea:	e853 3f00 	ldrex	r3, [r3]
 800acee:	61fb      	str	r3, [r7, #28]
   return(result);
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	f023 0310 	bic.w	r3, r3, #16
 800acf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	330c      	adds	r3, #12
 800acfe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad00:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad08:	e841 2300 	strex	r3, r2, [r1]
 800ad0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1e5      	bne.n	800ace0 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad1e:	2b40      	cmp	r3, #64	; 0x40
 800ad20:	d136      	bne.n	800ad90 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3314      	adds	r3, #20
 800ad28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	e853 3f00 	ldrex	r3, [r3]
 800ad30:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad38:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3314      	adds	r3, #20
 800ad40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad42:	61ba      	str	r2, [r7, #24]
 800ad44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad46:	6979      	ldr	r1, [r7, #20]
 800ad48:	69ba      	ldr	r2, [r7, #24]
 800ad4a:	e841 2300 	strex	r3, r2, [r1]
 800ad4e:	613b      	str	r3, [r7, #16]
   return(result);
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1e5      	bne.n	800ad22 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d018      	beq.n	800ad90 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad62:	2200      	movs	r2, #0
 800ad64:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7fb ff76 	bl	8006c5c <HAL_DMA_Abort>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00c      	beq.n	800ad90 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fc f98a 	bl	8007094 <HAL_DMA_GetError>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b20      	cmp	r3, #32
 800ad84:	d104      	bne.n	800ad90 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2210      	movs	r2, #16
 800ad8a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800ad8c:	2303      	movs	r3, #3
 800ad8e:	e00a      	b.n	800ada6 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2220      	movs	r2, #32
 800ad9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3768      	adds	r7, #104	; 0x68
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
	...

0800adb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b0ba      	sub	sp, #232	; 0xe8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800add6:	2300      	movs	r3, #0
 800add8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800addc:	2300      	movs	r3, #0
 800adde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ade2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ade6:	f003 030f 	and.w	r3, r3, #15
 800adea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800adee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10f      	bne.n	800ae16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800adf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adfa:	f003 0320 	and.w	r3, r3, #32
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d009      	beq.n	800ae16 <HAL_UART_IRQHandler+0x66>
 800ae02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae06:	f003 0320 	and.w	r3, r3, #32
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d003      	beq.n	800ae16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fcd9 	bl	800b7c6 <UART_Receive_IT>
      return;
 800ae14:	e25b      	b.n	800b2ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ae16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	f000 80e1 	beq.w	800afe2 <HAL_UART_IRQHandler+0x232>
 800ae20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae24:	f003 0301 	and.w	r3, r3, #1
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d106      	bne.n	800ae3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ae2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f000 80d4 	beq.w	800afe2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ae3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae3e:	f003 0301 	and.w	r3, r3, #1
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00b      	beq.n	800ae5e <HAL_UART_IRQHandler+0xae>
 800ae46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d005      	beq.n	800ae5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae56:	f043 0201 	orr.w	r2, r3, #1
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae62:	f003 0304 	and.w	r3, r3, #4
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00b      	beq.n	800ae82 <HAL_UART_IRQHandler+0xd2>
 800ae6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae6e:	f003 0301 	and.w	r3, r3, #1
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d005      	beq.n	800ae82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae7a:	f043 0202 	orr.w	r2, r3, #2
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae86:	f003 0302 	and.w	r3, r3, #2
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00b      	beq.n	800aea6 <HAL_UART_IRQHandler+0xf6>
 800ae8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae92:	f003 0301 	and.w	r3, r3, #1
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d005      	beq.n	800aea6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9e:	f043 0204 	orr.w	r2, r3, #4
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeaa:	f003 0308 	and.w	r3, r3, #8
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d011      	beq.n	800aed6 <HAL_UART_IRQHandler+0x126>
 800aeb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeb6:	f003 0320 	and.w	r3, r3, #32
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d105      	bne.n	800aeca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aec2:	f003 0301 	and.w	r3, r3, #1
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d005      	beq.n	800aed6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	f043 0208 	orr.w	r2, r3, #8
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f000 81f2 	beq.w	800b2c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aee4:	f003 0320 	and.w	r3, r3, #32
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d008      	beq.n	800aefe <HAL_UART_IRQHandler+0x14e>
 800aeec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aef0:	f003 0320 	and.w	r3, r3, #32
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d002      	beq.n	800aefe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fc64 	bl	800b7c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	695b      	ldr	r3, [r3, #20]
 800af04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af08:	2b40      	cmp	r3, #64	; 0x40
 800af0a:	bf0c      	ite	eq
 800af0c:	2301      	moveq	r3, #1
 800af0e:	2300      	movne	r3, #0
 800af10:	b2db      	uxtb	r3, r3
 800af12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1a:	f003 0308 	and.w	r3, r3, #8
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d103      	bne.n	800af2a <HAL_UART_IRQHandler+0x17a>
 800af22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af26:	2b00      	cmp	r3, #0
 800af28:	d051      	beq.n	800afce <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 fb6a 	bl	800b604 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af3a:	2b40      	cmp	r3, #64	; 0x40
 800af3c:	d142      	bne.n	800afc4 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3314      	adds	r3, #20
 800af44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af4c:	e853 3f00 	ldrex	r3, [r3]
 800af50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	3314      	adds	r3, #20
 800af66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800af6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800af76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af7a:	e841 2300 	strex	r3, r2, [r1]
 800af7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800af82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1d9      	bne.n	800af3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d013      	beq.n	800afba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af96:	4a7f      	ldr	r2, [pc, #508]	; (800b194 <HAL_UART_IRQHandler+0x3e4>)
 800af98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fb fecc 	bl	8006d3c <HAL_DMA_Abort_IT>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d019      	beq.n	800afde <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800afb4:	4610      	mov	r0, r2
 800afb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afb8:	e011      	b.n	800afde <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afc2:	e00c      	b.n	800afde <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afcc:	e007      	b.n	800afde <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800afdc:	e172      	b.n	800b2c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afde:	bf00      	nop
    return;
 800afe0:	e170      	b.n	800b2c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	f040 814c 	bne.w	800b284 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800afec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aff0:	f003 0310 	and.w	r3, r3, #16
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f000 8145 	beq.w	800b284 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800affa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800affe:	f003 0310 	and.w	r3, r3, #16
 800b002:	2b00      	cmp	r3, #0
 800b004:	f000 813e 	beq.w	800b284 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b008:	2300      	movs	r3, #0
 800b00a:	60bb      	str	r3, [r7, #8]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	60bb      	str	r3, [r7, #8]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	60bb      	str	r3, [r7, #8]
 800b01c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	695b      	ldr	r3, [r3, #20]
 800b024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b028:	2b40      	cmp	r3, #64	; 0x40
 800b02a:	f040 80b5 	bne.w	800b198 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b03a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f000 8142 	beq.w	800b2c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b048:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b04c:	429a      	cmp	r2, r3
 800b04e:	f080 813b 	bcs.w	800b2c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b058:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05e:	69db      	ldr	r3, [r3, #28]
 800b060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b064:	f000 8088 	beq.w	800b178 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	330c      	adds	r3, #12
 800b06e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b072:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b076:	e853 3f00 	ldrex	r3, [r3]
 800b07a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b07e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b082:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b086:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	330c      	adds	r3, #12
 800b090:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b094:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b098:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b0a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b0a4:	e841 2300 	strex	r3, r2, [r1]
 800b0a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b0ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1d9      	bne.n	800b068 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	3314      	adds	r3, #20
 800b0ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0be:	e853 3f00 	ldrex	r3, [r3]
 800b0c2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b0c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0c6:	f023 0301 	bic.w	r3, r3, #1
 800b0ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	3314      	adds	r3, #20
 800b0d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b0d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b0dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b0e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0e4:	e841 2300 	strex	r3, r2, [r1]
 800b0e8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b0ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1e1      	bne.n	800b0b4 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	3314      	adds	r3, #20
 800b0f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0fa:	e853 3f00 	ldrex	r3, [r3]
 800b0fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b106:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	3314      	adds	r3, #20
 800b110:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b114:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b116:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b118:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b11a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b11c:	e841 2300 	strex	r3, r2, [r1]
 800b120:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b122:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1e3      	bne.n	800b0f0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2220      	movs	r2, #32
 800b12c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	330c      	adds	r3, #12
 800b13c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b140:	e853 3f00 	ldrex	r3, [r3]
 800b144:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b148:	f023 0310 	bic.w	r3, r3, #16
 800b14c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	330c      	adds	r3, #12
 800b156:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b15a:	65ba      	str	r2, [r7, #88]	; 0x58
 800b15c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b160:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b162:	e841 2300 	strex	r3, r2, [r1]
 800b166:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1e3      	bne.n	800b136 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b172:	4618      	mov	r0, r3
 800b174:	f7fb fd72 	bl	8006c5c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b184:	b292      	uxth	r2, r2
 800b186:	1a8a      	subs	r2, r1, r2
 800b188:	b292      	uxth	r2, r2
 800b18a:	4611      	mov	r1, r2
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b190:	e09a      	b.n	800b2c8 <HAL_UART_IRQHandler+0x518>
 800b192:	bf00      	nop
 800b194:	0800b6cb 	.word	0x0800b6cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f000 808c 	beq.w	800b2cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b1b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f000 8087 	beq.w	800b2cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	330c      	adds	r3, #12
 800b1c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c8:	e853 3f00 	ldrex	r3, [r3]
 800b1cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	330c      	adds	r3, #12
 800b1de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b1e2:	647a      	str	r2, [r7, #68]	; 0x44
 800b1e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b1e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1ea:	e841 2300 	strex	r3, r2, [r1]
 800b1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1e3      	bne.n	800b1be <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	3314      	adds	r3, #20
 800b1fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b200:	e853 3f00 	ldrex	r3, [r3]
 800b204:	623b      	str	r3, [r7, #32]
   return(result);
 800b206:	6a3b      	ldr	r3, [r7, #32]
 800b208:	f023 0301 	bic.w	r3, r3, #1
 800b20c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3314      	adds	r3, #20
 800b216:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b21a:	633a      	str	r2, [r7, #48]	; 0x30
 800b21c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b222:	e841 2300 	strex	r3, r2, [r1]
 800b226:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1e3      	bne.n	800b1f6 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2220      	movs	r2, #32
 800b232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	330c      	adds	r3, #12
 800b242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	e853 3f00 	ldrex	r3, [r3]
 800b24a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f023 0310 	bic.w	r3, r3, #16
 800b252:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	330c      	adds	r3, #12
 800b25c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b260:	61fa      	str	r2, [r7, #28]
 800b262:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b264:	69b9      	ldr	r1, [r7, #24]
 800b266:	69fa      	ldr	r2, [r7, #28]
 800b268:	e841 2300 	strex	r3, r2, [r1]
 800b26c:	617b      	str	r3, [r7, #20]
   return(result);
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d1e3      	bne.n	800b23c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b278:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b27c:	4611      	mov	r1, r2
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b282:	e023      	b.n	800b2cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d009      	beq.n	800b2a4 <HAL_UART_IRQHandler+0x4f4>
 800b290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d003      	beq.n	800b2a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 fa29 	bl	800b6f4 <UART_Transmit_IT>
    return;
 800b2a2:	e014      	b.n	800b2ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b2a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00e      	beq.n	800b2ce <HAL_UART_IRQHandler+0x51e>
 800b2b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d008      	beq.n	800b2ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 fa69 	bl	800b794 <UART_EndTransmit_IT>
    return;
 800b2c2:	e004      	b.n	800b2ce <HAL_UART_IRQHandler+0x51e>
    return;
 800b2c4:	bf00      	nop
 800b2c6:	e002      	b.n	800b2ce <HAL_UART_IRQHandler+0x51e>
      return;
 800b2c8:	bf00      	nop
 800b2ca:	e000      	b.n	800b2ce <HAL_UART_IRQHandler+0x51e>
      return;
 800b2cc:	bf00      	nop
  }
}
 800b2ce:	37e8      	adds	r7, #232	; 0xe8
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b2dc:	bf00      	nop
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b2f0:	bf00      	nop
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b304:	bf00      	nop
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b318:	bf00      	nop
 800b31a:	370c      	adds	r7, #12
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b32c:	bf00      	nop
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b340:	bf00      	nop
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b354:	bf00      	nop
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	460b      	mov	r3, r1
 800b36a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4a10      	ldr	r2, [pc, #64]	; (800b3c4 <UART_InitCallbacksToDefault+0x4c>)
 800b384:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a0f      	ldr	r2, [pc, #60]	; (800b3c8 <UART_InitCallbacksToDefault+0x50>)
 800b38a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a0f      	ldr	r2, [pc, #60]	; (800b3cc <UART_InitCallbacksToDefault+0x54>)
 800b390:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4a0e      	ldr	r2, [pc, #56]	; (800b3d0 <UART_InitCallbacksToDefault+0x58>)
 800b396:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a0e      	ldr	r2, [pc, #56]	; (800b3d4 <UART_InitCallbacksToDefault+0x5c>)
 800b39c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a0d      	ldr	r2, [pc, #52]	; (800b3d8 <UART_InitCallbacksToDefault+0x60>)
 800b3a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a0d      	ldr	r2, [pc, #52]	; (800b3dc <UART_InitCallbacksToDefault+0x64>)
 800b3a8:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4a0c      	ldr	r2, [pc, #48]	; (800b3e0 <UART_InitCallbacksToDefault+0x68>)
 800b3ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a0c      	ldr	r2, [pc, #48]	; (800b3e4 <UART_InitCallbacksToDefault+0x6c>)
 800b3b4:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b3b6:	bf00      	nop
 800b3b8:	370c      	adds	r7, #12
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	0800b2e9 	.word	0x0800b2e9
 800b3c8:	0800b2d5 	.word	0x0800b2d5
 800b3cc:	0800b2fd 	.word	0x0800b2fd
 800b3d0:	08004dd1 	.word	0x08004dd1
 800b3d4:	0800b311 	.word	0x0800b311
 800b3d8:	0800b325 	.word	0x0800b325
 800b3dc:	0800b339 	.word	0x0800b339
 800b3e0:	0800b34d 	.word	0x0800b34d
 800b3e4:	0800b361 	.word	0x0800b361

0800b3e8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b090      	sub	sp, #64	; 0x40
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b400:	2b00      	cmp	r3, #0
 800b402:	d137      	bne.n	800b474 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b406:	2200      	movs	r2, #0
 800b408:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	3314      	adds	r3, #20
 800b410:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	e853 3f00 	ldrex	r3, [r3]
 800b418:	623b      	str	r3, [r7, #32]
   return(result);
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b420:	63bb      	str	r3, [r7, #56]	; 0x38
 800b422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	3314      	adds	r3, #20
 800b428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b42a:	633a      	str	r2, [r7, #48]	; 0x30
 800b42c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b42e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b432:	e841 2300 	strex	r3, r2, [r1]
 800b436:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1e5      	bne.n	800b40a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	330c      	adds	r3, #12
 800b444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	e853 3f00 	ldrex	r3, [r3]
 800b44c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b454:	637b      	str	r3, [r7, #52]	; 0x34
 800b456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	330c      	adds	r3, #12
 800b45c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b45e:	61fa      	str	r2, [r7, #28]
 800b460:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b462:	69b9      	ldr	r1, [r7, #24]
 800b464:	69fa      	ldr	r2, [r7, #28]
 800b466:	e841 2300 	strex	r3, r2, [r1]
 800b46a:	617b      	str	r3, [r7, #20]
   return(result);
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1e5      	bne.n	800b43e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b472:	e003      	b.n	800b47c <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800b474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b478:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b47a:	4798      	blx	r3
}
 800b47c:	bf00      	nop
 800b47e:	3740      	adds	r7, #64	; 0x40
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b490:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b49a:	bf00      	nop
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b084      	sub	sp, #16
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4be:	2b80      	cmp	r3, #128	; 0x80
 800b4c0:	bf0c      	ite	eq
 800b4c2:	2301      	moveq	r3, #1
 800b4c4:	2300      	movne	r3, #0
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	2b21      	cmp	r3, #33	; 0x21
 800b4d4:	d108      	bne.n	800b4e8 <UART_DMAError+0x46>
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d005      	beq.n	800b4e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b4e2:	68b8      	ldr	r0, [r7, #8]
 800b4e4:	f000 f866 	bl	800b5b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	695b      	ldr	r3, [r3, #20]
 800b4ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4f2:	2b40      	cmp	r3, #64	; 0x40
 800b4f4:	bf0c      	ite	eq
 800b4f6:	2301      	moveq	r3, #1
 800b4f8:	2300      	movne	r3, #0
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b504:	b2db      	uxtb	r3, r3
 800b506:	2b22      	cmp	r3, #34	; 0x22
 800b508:	d108      	bne.n	800b51c <UART_DMAError+0x7a>
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d005      	beq.n	800b51c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	2200      	movs	r2, #0
 800b514:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b516:	68b8      	ldr	r0, [r7, #8]
 800b518:	f000 f874 	bl	800b604 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b520:	f043 0210 	orr.w	r2, r3, #16
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b52c:	68b8      	ldr	r0, [r7, #8]
 800b52e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b530:	bf00      	nop
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	4613      	mov	r3, r2
 800b544:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	68ba      	ldr	r2, [r7, #8]
 800b54a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	88fa      	ldrh	r2, [r7, #6]
 800b550:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	88fa      	ldrh	r2, [r7, #6]
 800b556:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2222      	movs	r2, #34	; 0x22
 800b562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d007      	beq.n	800b586 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68da      	ldr	r2, [r3, #12]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b584:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	695a      	ldr	r2, [r3, #20]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f042 0201 	orr.w	r2, r2, #1
 800b594:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68da      	ldr	r2, [r3, #12]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f042 0220 	orr.w	r2, r2, #32
 800b5a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3714      	adds	r7, #20
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b089      	sub	sp, #36	; 0x24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	330c      	adds	r3, #12
 800b5c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	e853 3f00 	ldrex	r3, [r3]
 800b5ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b5d2:	61fb      	str	r3, [r7, #28]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	330c      	adds	r3, #12
 800b5da:	69fa      	ldr	r2, [r7, #28]
 800b5dc:	61ba      	str	r2, [r7, #24]
 800b5de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e0:	6979      	ldr	r1, [r7, #20]
 800b5e2:	69ba      	ldr	r2, [r7, #24]
 800b5e4:	e841 2300 	strex	r3, r2, [r1]
 800b5e8:	613b      	str	r3, [r7, #16]
   return(result);
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1e5      	bne.n	800b5bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2220      	movs	r2, #32
 800b5f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b5f8:	bf00      	nop
 800b5fa:	3724      	adds	r7, #36	; 0x24
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr

0800b604 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b604:	b480      	push	{r7}
 800b606:	b095      	sub	sp, #84	; 0x54
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	330c      	adds	r3, #12
 800b612:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b616:	e853 3f00 	ldrex	r3, [r3]
 800b61a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b622:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	330c      	adds	r3, #12
 800b62a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b62c:	643a      	str	r2, [r7, #64]	; 0x40
 800b62e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b630:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b634:	e841 2300 	strex	r3, r2, [r1]
 800b638:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1e5      	bne.n	800b60c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	3314      	adds	r3, #20
 800b646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b648:	6a3b      	ldr	r3, [r7, #32]
 800b64a:	e853 3f00 	ldrex	r3, [r3]
 800b64e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	f023 0301 	bic.w	r3, r3, #1
 800b656:	64bb      	str	r3, [r7, #72]	; 0x48
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3314      	adds	r3, #20
 800b65e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b660:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b668:	e841 2300 	strex	r3, r2, [r1]
 800b66c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b670:	2b00      	cmp	r3, #0
 800b672:	d1e5      	bne.n	800b640 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d119      	bne.n	800b6b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	330c      	adds	r3, #12
 800b682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	e853 3f00 	ldrex	r3, [r3]
 800b68a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	f023 0310 	bic.w	r3, r3, #16
 800b692:	647b      	str	r3, [r7, #68]	; 0x44
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	330c      	adds	r3, #12
 800b69a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b69c:	61ba      	str	r2, [r7, #24]
 800b69e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a0:	6979      	ldr	r1, [r7, #20]
 800b6a2:	69ba      	ldr	r2, [r7, #24]
 800b6a4:	e841 2300 	strex	r3, r2, [r1]
 800b6a8:	613b      	str	r3, [r7, #16]
   return(result);
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1e5      	bne.n	800b67c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2220      	movs	r2, #32
 800b6b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b6be:	bf00      	nop
 800b6c0:	3754      	adds	r7, #84	; 0x54
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr

0800b6ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b084      	sub	sp, #16
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6ec:	bf00      	nop
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b21      	cmp	r3, #33	; 0x21
 800b706:	d13e      	bne.n	800b786 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b710:	d114      	bne.n	800b73c <UART_Transmit_IT+0x48>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d110      	bne.n	800b73c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	881b      	ldrh	r3, [r3, #0]
 800b724:	461a      	mov	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b72e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6a1b      	ldr	r3, [r3, #32]
 800b734:	1c9a      	adds	r2, r3, #2
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	621a      	str	r2, [r3, #32]
 800b73a:	e008      	b.n	800b74e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6a1b      	ldr	r3, [r3, #32]
 800b740:	1c59      	adds	r1, r3, #1
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	6211      	str	r1, [r2, #32]
 800b746:	781a      	ldrb	r2, [r3, #0]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b752:	b29b      	uxth	r3, r3
 800b754:	3b01      	subs	r3, #1
 800b756:	b29b      	uxth	r3, r3
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	4619      	mov	r1, r3
 800b75c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10f      	bne.n	800b782 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	68da      	ldr	r2, [r3, #12]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b770:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	68da      	ldr	r2, [r3, #12]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b780:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b782:	2300      	movs	r3, #0
 800b784:	e000      	b.n	800b788 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b786:	2302      	movs	r3, #2
  }
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	68da      	ldr	r2, [r3, #12]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2220      	movs	r2, #32
 800b7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b08c      	sub	sp, #48	; 0x30
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	2b22      	cmp	r3, #34	; 0x22
 800b7d8:	f040 80ad 	bne.w	800b936 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7e4:	d117      	bne.n	800b816 <UART_Receive_IT+0x50>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d113      	bne.n	800b816 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b804:	b29a      	uxth	r2, r3
 800b806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b808:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80e:	1c9a      	adds	r2, r3, #2
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	629a      	str	r2, [r3, #40]	; 0x28
 800b814:	e026      	b.n	800b864 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b81a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b81c:	2300      	movs	r3, #0
 800b81e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b828:	d007      	beq.n	800b83a <UART_Receive_IT+0x74>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10a      	bne.n	800b848 <UART_Receive_IT+0x82>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	691b      	ldr	r3, [r3, #16]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d106      	bne.n	800b848 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	b2da      	uxtb	r2, r3
 800b842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b844:	701a      	strb	r2, [r3, #0]
 800b846:	e008      	b.n	800b85a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b854:	b2da      	uxtb	r2, r3
 800b856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b858:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b85e:	1c5a      	adds	r2, r3, #1
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b868:	b29b      	uxth	r3, r3
 800b86a:	3b01      	subs	r3, #1
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	4619      	mov	r1, r3
 800b872:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b874:	2b00      	cmp	r3, #0
 800b876:	d15c      	bne.n	800b932 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	68da      	ldr	r2, [r3, #12]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f022 0220 	bic.w	r2, r2, #32
 800b886:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68da      	ldr	r2, [r3, #12]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b896:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	695a      	ldr	r2, [r3, #20]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f022 0201 	bic.w	r2, r2, #1
 800b8a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2220      	movs	r2, #32
 800b8ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d136      	bne.n	800b926 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	330c      	adds	r3, #12
 800b8c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	e853 3f00 	ldrex	r3, [r3]
 800b8cc:	613b      	str	r3, [r7, #16]
   return(result);
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	f023 0310 	bic.w	r3, r3, #16
 800b8d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	330c      	adds	r3, #12
 800b8dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8de:	623a      	str	r2, [r7, #32]
 800b8e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e2:	69f9      	ldr	r1, [r7, #28]
 800b8e4:	6a3a      	ldr	r2, [r7, #32]
 800b8e6:	e841 2300 	strex	r3, r2, [r1]
 800b8ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1e5      	bne.n	800b8be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 0310 	and.w	r3, r3, #16
 800b8fc:	2b10      	cmp	r3, #16
 800b8fe:	d10a      	bne.n	800b916 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b900:	2300      	movs	r3, #0
 800b902:	60fb      	str	r3, [r7, #12]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	60fb      	str	r3, [r7, #12]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	60fb      	str	r3, [r7, #12]
 800b914:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b91e:	4611      	mov	r1, r2
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	4798      	blx	r3
 800b924:	e003      	b.n	800b92e <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	e002      	b.n	800b938 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	e000      	b.n	800b938 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b936:	2302      	movs	r3, #2
  }
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3730      	adds	r7, #48	; 0x30
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b944:	b0c0      	sub	sp, #256	; 0x100
 800b946:	af00      	add	r7, sp, #0
 800b948:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b94c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b95c:	68d9      	ldr	r1, [r3, #12]
 800b95e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	ea40 0301 	orr.w	r3, r0, r1
 800b968:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b96a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b96e:	689a      	ldr	r2, [r3, #8]
 800b970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	431a      	orrs	r2, r3
 800b978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	431a      	orrs	r2, r3
 800b980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b984:	69db      	ldr	r3, [r3, #28]
 800b986:	4313      	orrs	r3, r2
 800b988:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b98c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b998:	f021 010c 	bic.w	r1, r1, #12
 800b99c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b9a6:	430b      	orrs	r3, r1
 800b9a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b9aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	695b      	ldr	r3, [r3, #20]
 800b9b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b9b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ba:	6999      	ldr	r1, [r3, #24]
 800b9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	ea40 0301 	orr.w	r3, r0, r1
 800b9c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b9c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	4b8f      	ldr	r3, [pc, #572]	; (800bc0c <UART_SetConfig+0x2cc>)
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d005      	beq.n	800b9e0 <UART_SetConfig+0xa0>
 800b9d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	4b8d      	ldr	r3, [pc, #564]	; (800bc10 <UART_SetConfig+0x2d0>)
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d104      	bne.n	800b9ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b9e0:	f7fc fee2 	bl	80087a8 <HAL_RCC_GetPCLK2Freq>
 800b9e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b9e8:	e003      	b.n	800b9f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b9ea:	f7fc fec9 	bl	8008780 <HAL_RCC_GetPCLK1Freq>
 800b9ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9f6:	69db      	ldr	r3, [r3, #28]
 800b9f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9fc:	f040 810c 	bne.w	800bc18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ba00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba04:	2200      	movs	r2, #0
 800ba06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ba0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ba0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ba12:	4622      	mov	r2, r4
 800ba14:	462b      	mov	r3, r5
 800ba16:	1891      	adds	r1, r2, r2
 800ba18:	65b9      	str	r1, [r7, #88]	; 0x58
 800ba1a:	415b      	adcs	r3, r3
 800ba1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ba22:	4621      	mov	r1, r4
 800ba24:	eb12 0801 	adds.w	r8, r2, r1
 800ba28:	4629      	mov	r1, r5
 800ba2a:	eb43 0901 	adc.w	r9, r3, r1
 800ba2e:	f04f 0200 	mov.w	r2, #0
 800ba32:	f04f 0300 	mov.w	r3, #0
 800ba36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ba3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ba3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ba42:	4690      	mov	r8, r2
 800ba44:	4699      	mov	r9, r3
 800ba46:	4623      	mov	r3, r4
 800ba48:	eb18 0303 	adds.w	r3, r8, r3
 800ba4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba50:	462b      	mov	r3, r5
 800ba52:	eb49 0303 	adc.w	r3, r9, r3
 800ba56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ba5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ba6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ba6e:	460b      	mov	r3, r1
 800ba70:	18db      	adds	r3, r3, r3
 800ba72:	653b      	str	r3, [r7, #80]	; 0x50
 800ba74:	4613      	mov	r3, r2
 800ba76:	eb42 0303 	adc.w	r3, r2, r3
 800ba7a:	657b      	str	r3, [r7, #84]	; 0x54
 800ba7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ba80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ba84:	f7f5 f908 	bl	8000c98 <__aeabi_uldivmod>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	4b61      	ldr	r3, [pc, #388]	; (800bc14 <UART_SetConfig+0x2d4>)
 800ba8e:	fba3 2302 	umull	r2, r3, r3, r2
 800ba92:	095b      	lsrs	r3, r3, #5
 800ba94:	011c      	lsls	r4, r3, #4
 800ba96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800baa0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800baa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800baa8:	4642      	mov	r2, r8
 800baaa:	464b      	mov	r3, r9
 800baac:	1891      	adds	r1, r2, r2
 800baae:	64b9      	str	r1, [r7, #72]	; 0x48
 800bab0:	415b      	adcs	r3, r3
 800bab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bab4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bab8:	4641      	mov	r1, r8
 800baba:	eb12 0a01 	adds.w	sl, r2, r1
 800babe:	4649      	mov	r1, r9
 800bac0:	eb43 0b01 	adc.w	fp, r3, r1
 800bac4:	f04f 0200 	mov.w	r2, #0
 800bac8:	f04f 0300 	mov.w	r3, #0
 800bacc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bad0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bad8:	4692      	mov	sl, r2
 800bada:	469b      	mov	fp, r3
 800badc:	4643      	mov	r3, r8
 800bade:	eb1a 0303 	adds.w	r3, sl, r3
 800bae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bae6:	464b      	mov	r3, r9
 800bae8:	eb4b 0303 	adc.w	r3, fp, r3
 800baec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800baf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bafc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bb00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bb04:	460b      	mov	r3, r1
 800bb06:	18db      	adds	r3, r3, r3
 800bb08:	643b      	str	r3, [r7, #64]	; 0x40
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	eb42 0303 	adc.w	r3, r2, r3
 800bb10:	647b      	str	r3, [r7, #68]	; 0x44
 800bb12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bb16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bb1a:	f7f5 f8bd 	bl	8000c98 <__aeabi_uldivmod>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	460b      	mov	r3, r1
 800bb22:	4611      	mov	r1, r2
 800bb24:	4b3b      	ldr	r3, [pc, #236]	; (800bc14 <UART_SetConfig+0x2d4>)
 800bb26:	fba3 2301 	umull	r2, r3, r3, r1
 800bb2a:	095b      	lsrs	r3, r3, #5
 800bb2c:	2264      	movs	r2, #100	; 0x64
 800bb2e:	fb02 f303 	mul.w	r3, r2, r3
 800bb32:	1acb      	subs	r3, r1, r3
 800bb34:	00db      	lsls	r3, r3, #3
 800bb36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bb3a:	4b36      	ldr	r3, [pc, #216]	; (800bc14 <UART_SetConfig+0x2d4>)
 800bb3c:	fba3 2302 	umull	r2, r3, r3, r2
 800bb40:	095b      	lsrs	r3, r3, #5
 800bb42:	005b      	lsls	r3, r3, #1
 800bb44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bb48:	441c      	add	r4, r3
 800bb4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bb58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bb5c:	4642      	mov	r2, r8
 800bb5e:	464b      	mov	r3, r9
 800bb60:	1891      	adds	r1, r2, r2
 800bb62:	63b9      	str	r1, [r7, #56]	; 0x38
 800bb64:	415b      	adcs	r3, r3
 800bb66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bb6c:	4641      	mov	r1, r8
 800bb6e:	1851      	adds	r1, r2, r1
 800bb70:	6339      	str	r1, [r7, #48]	; 0x30
 800bb72:	4649      	mov	r1, r9
 800bb74:	414b      	adcs	r3, r1
 800bb76:	637b      	str	r3, [r7, #52]	; 0x34
 800bb78:	f04f 0200 	mov.w	r2, #0
 800bb7c:	f04f 0300 	mov.w	r3, #0
 800bb80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bb84:	4659      	mov	r1, fp
 800bb86:	00cb      	lsls	r3, r1, #3
 800bb88:	4651      	mov	r1, sl
 800bb8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb8e:	4651      	mov	r1, sl
 800bb90:	00ca      	lsls	r2, r1, #3
 800bb92:	4610      	mov	r0, r2
 800bb94:	4619      	mov	r1, r3
 800bb96:	4603      	mov	r3, r0
 800bb98:	4642      	mov	r2, r8
 800bb9a:	189b      	adds	r3, r3, r2
 800bb9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bba0:	464b      	mov	r3, r9
 800bba2:	460a      	mov	r2, r1
 800bba4:	eb42 0303 	adc.w	r3, r2, r3
 800bba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bbac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bbb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bbbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	18db      	adds	r3, r3, r3
 800bbc4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	eb42 0303 	adc.w	r3, r2, r3
 800bbcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bbd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bbd6:	f7f5 f85f 	bl	8000c98 <__aeabi_uldivmod>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	460b      	mov	r3, r1
 800bbde:	4b0d      	ldr	r3, [pc, #52]	; (800bc14 <UART_SetConfig+0x2d4>)
 800bbe0:	fba3 1302 	umull	r1, r3, r3, r2
 800bbe4:	095b      	lsrs	r3, r3, #5
 800bbe6:	2164      	movs	r1, #100	; 0x64
 800bbe8:	fb01 f303 	mul.w	r3, r1, r3
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	00db      	lsls	r3, r3, #3
 800bbf0:	3332      	adds	r3, #50	; 0x32
 800bbf2:	4a08      	ldr	r2, [pc, #32]	; (800bc14 <UART_SetConfig+0x2d4>)
 800bbf4:	fba2 2303 	umull	r2, r3, r2, r3
 800bbf8:	095b      	lsrs	r3, r3, #5
 800bbfa:	f003 0207 	and.w	r2, r3, #7
 800bbfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4422      	add	r2, r4
 800bc06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bc08:	e105      	b.n	800be16 <UART_SetConfig+0x4d6>
 800bc0a:	bf00      	nop
 800bc0c:	40011000 	.word	0x40011000
 800bc10:	40011400 	.word	0x40011400
 800bc14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bc22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bc26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bc2a:	4642      	mov	r2, r8
 800bc2c:	464b      	mov	r3, r9
 800bc2e:	1891      	adds	r1, r2, r2
 800bc30:	6239      	str	r1, [r7, #32]
 800bc32:	415b      	adcs	r3, r3
 800bc34:	627b      	str	r3, [r7, #36]	; 0x24
 800bc36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bc3a:	4641      	mov	r1, r8
 800bc3c:	1854      	adds	r4, r2, r1
 800bc3e:	4649      	mov	r1, r9
 800bc40:	eb43 0501 	adc.w	r5, r3, r1
 800bc44:	f04f 0200 	mov.w	r2, #0
 800bc48:	f04f 0300 	mov.w	r3, #0
 800bc4c:	00eb      	lsls	r3, r5, #3
 800bc4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bc52:	00e2      	lsls	r2, r4, #3
 800bc54:	4614      	mov	r4, r2
 800bc56:	461d      	mov	r5, r3
 800bc58:	4643      	mov	r3, r8
 800bc5a:	18e3      	adds	r3, r4, r3
 800bc5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc60:	464b      	mov	r3, r9
 800bc62:	eb45 0303 	adc.w	r3, r5, r3
 800bc66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bc6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc7a:	f04f 0200 	mov.w	r2, #0
 800bc7e:	f04f 0300 	mov.w	r3, #0
 800bc82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bc86:	4629      	mov	r1, r5
 800bc88:	008b      	lsls	r3, r1, #2
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc90:	4621      	mov	r1, r4
 800bc92:	008a      	lsls	r2, r1, #2
 800bc94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bc98:	f7f4 fffe 	bl	8000c98 <__aeabi_uldivmod>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4b60      	ldr	r3, [pc, #384]	; (800be24 <UART_SetConfig+0x4e4>)
 800bca2:	fba3 2302 	umull	r2, r3, r3, r2
 800bca6:	095b      	lsrs	r3, r3, #5
 800bca8:	011c      	lsls	r4, r3, #4
 800bcaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bcb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bcb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bcbc:	4642      	mov	r2, r8
 800bcbe:	464b      	mov	r3, r9
 800bcc0:	1891      	adds	r1, r2, r2
 800bcc2:	61b9      	str	r1, [r7, #24]
 800bcc4:	415b      	adcs	r3, r3
 800bcc6:	61fb      	str	r3, [r7, #28]
 800bcc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bccc:	4641      	mov	r1, r8
 800bcce:	1851      	adds	r1, r2, r1
 800bcd0:	6139      	str	r1, [r7, #16]
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	414b      	adcs	r3, r1
 800bcd6:	617b      	str	r3, [r7, #20]
 800bcd8:	f04f 0200 	mov.w	r2, #0
 800bcdc:	f04f 0300 	mov.w	r3, #0
 800bce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bce4:	4659      	mov	r1, fp
 800bce6:	00cb      	lsls	r3, r1, #3
 800bce8:	4651      	mov	r1, sl
 800bcea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bcee:	4651      	mov	r1, sl
 800bcf0:	00ca      	lsls	r2, r1, #3
 800bcf2:	4610      	mov	r0, r2
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	4642      	mov	r2, r8
 800bcfa:	189b      	adds	r3, r3, r2
 800bcfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd00:	464b      	mov	r3, r9
 800bd02:	460a      	mov	r2, r1
 800bd04:	eb42 0303 	adc.w	r3, r2, r3
 800bd08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd16:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bd18:	f04f 0200 	mov.w	r2, #0
 800bd1c:	f04f 0300 	mov.w	r3, #0
 800bd20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bd24:	4649      	mov	r1, r9
 800bd26:	008b      	lsls	r3, r1, #2
 800bd28:	4641      	mov	r1, r8
 800bd2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd2e:	4641      	mov	r1, r8
 800bd30:	008a      	lsls	r2, r1, #2
 800bd32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bd36:	f7f4 ffaf 	bl	8000c98 <__aeabi_uldivmod>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	4b39      	ldr	r3, [pc, #228]	; (800be24 <UART_SetConfig+0x4e4>)
 800bd40:	fba3 1302 	umull	r1, r3, r3, r2
 800bd44:	095b      	lsrs	r3, r3, #5
 800bd46:	2164      	movs	r1, #100	; 0x64
 800bd48:	fb01 f303 	mul.w	r3, r1, r3
 800bd4c:	1ad3      	subs	r3, r2, r3
 800bd4e:	011b      	lsls	r3, r3, #4
 800bd50:	3332      	adds	r3, #50	; 0x32
 800bd52:	4a34      	ldr	r2, [pc, #208]	; (800be24 <UART_SetConfig+0x4e4>)
 800bd54:	fba2 2303 	umull	r2, r3, r2, r3
 800bd58:	095b      	lsrs	r3, r3, #5
 800bd5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd5e:	441c      	add	r4, r3
 800bd60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd64:	2200      	movs	r2, #0
 800bd66:	673b      	str	r3, [r7, #112]	; 0x70
 800bd68:	677a      	str	r2, [r7, #116]	; 0x74
 800bd6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bd6e:	4642      	mov	r2, r8
 800bd70:	464b      	mov	r3, r9
 800bd72:	1891      	adds	r1, r2, r2
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	415b      	adcs	r3, r3
 800bd78:	60fb      	str	r3, [r7, #12]
 800bd7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd7e:	4641      	mov	r1, r8
 800bd80:	1851      	adds	r1, r2, r1
 800bd82:	6039      	str	r1, [r7, #0]
 800bd84:	4649      	mov	r1, r9
 800bd86:	414b      	adcs	r3, r1
 800bd88:	607b      	str	r3, [r7, #4]
 800bd8a:	f04f 0200 	mov.w	r2, #0
 800bd8e:	f04f 0300 	mov.w	r3, #0
 800bd92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bd96:	4659      	mov	r1, fp
 800bd98:	00cb      	lsls	r3, r1, #3
 800bd9a:	4651      	mov	r1, sl
 800bd9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bda0:	4651      	mov	r1, sl
 800bda2:	00ca      	lsls	r2, r1, #3
 800bda4:	4610      	mov	r0, r2
 800bda6:	4619      	mov	r1, r3
 800bda8:	4603      	mov	r3, r0
 800bdaa:	4642      	mov	r2, r8
 800bdac:	189b      	adds	r3, r3, r2
 800bdae:	66bb      	str	r3, [r7, #104]	; 0x68
 800bdb0:	464b      	mov	r3, r9
 800bdb2:	460a      	mov	r2, r1
 800bdb4:	eb42 0303 	adc.w	r3, r2, r3
 800bdb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bdba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	663b      	str	r3, [r7, #96]	; 0x60
 800bdc4:	667a      	str	r2, [r7, #100]	; 0x64
 800bdc6:	f04f 0200 	mov.w	r2, #0
 800bdca:	f04f 0300 	mov.w	r3, #0
 800bdce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bdd2:	4649      	mov	r1, r9
 800bdd4:	008b      	lsls	r3, r1, #2
 800bdd6:	4641      	mov	r1, r8
 800bdd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bddc:	4641      	mov	r1, r8
 800bdde:	008a      	lsls	r2, r1, #2
 800bde0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bde4:	f7f4 ff58 	bl	8000c98 <__aeabi_uldivmod>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4b0d      	ldr	r3, [pc, #52]	; (800be24 <UART_SetConfig+0x4e4>)
 800bdee:	fba3 1302 	umull	r1, r3, r3, r2
 800bdf2:	095b      	lsrs	r3, r3, #5
 800bdf4:	2164      	movs	r1, #100	; 0x64
 800bdf6:	fb01 f303 	mul.w	r3, r1, r3
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	011b      	lsls	r3, r3, #4
 800bdfe:	3332      	adds	r3, #50	; 0x32
 800be00:	4a08      	ldr	r2, [pc, #32]	; (800be24 <UART_SetConfig+0x4e4>)
 800be02:	fba2 2303 	umull	r2, r3, r2, r3
 800be06:	095b      	lsrs	r3, r3, #5
 800be08:	f003 020f 	and.w	r2, r3, #15
 800be0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4422      	add	r2, r4
 800be14:	609a      	str	r2, [r3, #8]
}
 800be16:	bf00      	nop
 800be18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800be1c:	46bd      	mov	sp, r7
 800be1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be22:	bf00      	nop
 800be24:	51eb851f 	.word	0x51eb851f

0800be28 <__errno>:
 800be28:	4b01      	ldr	r3, [pc, #4]	; (800be30 <__errno+0x8>)
 800be2a:	6818      	ldr	r0, [r3, #0]
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	2000023c 	.word	0x2000023c

0800be34 <__libc_init_array>:
 800be34:	b570      	push	{r4, r5, r6, lr}
 800be36:	4d0d      	ldr	r5, [pc, #52]	; (800be6c <__libc_init_array+0x38>)
 800be38:	4c0d      	ldr	r4, [pc, #52]	; (800be70 <__libc_init_array+0x3c>)
 800be3a:	1b64      	subs	r4, r4, r5
 800be3c:	10a4      	asrs	r4, r4, #2
 800be3e:	2600      	movs	r6, #0
 800be40:	42a6      	cmp	r6, r4
 800be42:	d109      	bne.n	800be58 <__libc_init_array+0x24>
 800be44:	4d0b      	ldr	r5, [pc, #44]	; (800be74 <__libc_init_array+0x40>)
 800be46:	4c0c      	ldr	r4, [pc, #48]	; (800be78 <__libc_init_array+0x44>)
 800be48:	f006 ffec 	bl	8012e24 <_init>
 800be4c:	1b64      	subs	r4, r4, r5
 800be4e:	10a4      	asrs	r4, r4, #2
 800be50:	2600      	movs	r6, #0
 800be52:	42a6      	cmp	r6, r4
 800be54:	d105      	bne.n	800be62 <__libc_init_array+0x2e>
 800be56:	bd70      	pop	{r4, r5, r6, pc}
 800be58:	f855 3b04 	ldr.w	r3, [r5], #4
 800be5c:	4798      	blx	r3
 800be5e:	3601      	adds	r6, #1
 800be60:	e7ee      	b.n	800be40 <__libc_init_array+0xc>
 800be62:	f855 3b04 	ldr.w	r3, [r5], #4
 800be66:	4798      	blx	r3
 800be68:	3601      	adds	r6, #1
 800be6a:	e7f2      	b.n	800be52 <__libc_init_array+0x1e>
 800be6c:	08013920 	.word	0x08013920
 800be70:	08013920 	.word	0x08013920
 800be74:	08013920 	.word	0x08013920
 800be78:	08013924 	.word	0x08013924

0800be7c <memcpy>:
 800be7c:	440a      	add	r2, r1
 800be7e:	4291      	cmp	r1, r2
 800be80:	f100 33ff 	add.w	r3, r0, #4294967295
 800be84:	d100      	bne.n	800be88 <memcpy+0xc>
 800be86:	4770      	bx	lr
 800be88:	b510      	push	{r4, lr}
 800be8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be92:	4291      	cmp	r1, r2
 800be94:	d1f9      	bne.n	800be8a <memcpy+0xe>
 800be96:	bd10      	pop	{r4, pc}

0800be98 <memset>:
 800be98:	4402      	add	r2, r0
 800be9a:	4603      	mov	r3, r0
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d100      	bne.n	800bea2 <memset+0xa>
 800bea0:	4770      	bx	lr
 800bea2:	f803 1b01 	strb.w	r1, [r3], #1
 800bea6:	e7f9      	b.n	800be9c <memset+0x4>

0800bea8 <__cvt>:
 800bea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800beac:	ec55 4b10 	vmov	r4, r5, d0
 800beb0:	2d00      	cmp	r5, #0
 800beb2:	460e      	mov	r6, r1
 800beb4:	4619      	mov	r1, r3
 800beb6:	462b      	mov	r3, r5
 800beb8:	bfbb      	ittet	lt
 800beba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bebe:	461d      	movlt	r5, r3
 800bec0:	2300      	movge	r3, #0
 800bec2:	232d      	movlt	r3, #45	; 0x2d
 800bec4:	700b      	strb	r3, [r1, #0]
 800bec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bec8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800becc:	4691      	mov	r9, r2
 800bece:	f023 0820 	bic.w	r8, r3, #32
 800bed2:	bfbc      	itt	lt
 800bed4:	4622      	movlt	r2, r4
 800bed6:	4614      	movlt	r4, r2
 800bed8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bedc:	d005      	beq.n	800beea <__cvt+0x42>
 800bede:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bee2:	d100      	bne.n	800bee6 <__cvt+0x3e>
 800bee4:	3601      	adds	r6, #1
 800bee6:	2102      	movs	r1, #2
 800bee8:	e000      	b.n	800beec <__cvt+0x44>
 800beea:	2103      	movs	r1, #3
 800beec:	ab03      	add	r3, sp, #12
 800beee:	9301      	str	r3, [sp, #4]
 800bef0:	ab02      	add	r3, sp, #8
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	ec45 4b10 	vmov	d0, r4, r5
 800bef8:	4653      	mov	r3, sl
 800befa:	4632      	mov	r2, r6
 800befc:	f001 fdac 	bl	800da58 <_dtoa_r>
 800bf00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bf04:	4607      	mov	r7, r0
 800bf06:	d102      	bne.n	800bf0e <__cvt+0x66>
 800bf08:	f019 0f01 	tst.w	r9, #1
 800bf0c:	d022      	beq.n	800bf54 <__cvt+0xac>
 800bf0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bf12:	eb07 0906 	add.w	r9, r7, r6
 800bf16:	d110      	bne.n	800bf3a <__cvt+0x92>
 800bf18:	783b      	ldrb	r3, [r7, #0]
 800bf1a:	2b30      	cmp	r3, #48	; 0x30
 800bf1c:	d10a      	bne.n	800bf34 <__cvt+0x8c>
 800bf1e:	2200      	movs	r2, #0
 800bf20:	2300      	movs	r3, #0
 800bf22:	4620      	mov	r0, r4
 800bf24:	4629      	mov	r1, r5
 800bf26:	f7f4 fdd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf2a:	b918      	cbnz	r0, 800bf34 <__cvt+0x8c>
 800bf2c:	f1c6 0601 	rsb	r6, r6, #1
 800bf30:	f8ca 6000 	str.w	r6, [sl]
 800bf34:	f8da 3000 	ldr.w	r3, [sl]
 800bf38:	4499      	add	r9, r3
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	4620      	mov	r0, r4
 800bf40:	4629      	mov	r1, r5
 800bf42:	f7f4 fdc9 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf46:	b108      	cbz	r0, 800bf4c <__cvt+0xa4>
 800bf48:	f8cd 900c 	str.w	r9, [sp, #12]
 800bf4c:	2230      	movs	r2, #48	; 0x30
 800bf4e:	9b03      	ldr	r3, [sp, #12]
 800bf50:	454b      	cmp	r3, r9
 800bf52:	d307      	bcc.n	800bf64 <__cvt+0xbc>
 800bf54:	9b03      	ldr	r3, [sp, #12]
 800bf56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf58:	1bdb      	subs	r3, r3, r7
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	6013      	str	r3, [r2, #0]
 800bf5e:	b004      	add	sp, #16
 800bf60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf64:	1c59      	adds	r1, r3, #1
 800bf66:	9103      	str	r1, [sp, #12]
 800bf68:	701a      	strb	r2, [r3, #0]
 800bf6a:	e7f0      	b.n	800bf4e <__cvt+0xa6>

0800bf6c <__exponent>:
 800bf6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2900      	cmp	r1, #0
 800bf72:	bfb8      	it	lt
 800bf74:	4249      	neglt	r1, r1
 800bf76:	f803 2b02 	strb.w	r2, [r3], #2
 800bf7a:	bfb4      	ite	lt
 800bf7c:	222d      	movlt	r2, #45	; 0x2d
 800bf7e:	222b      	movge	r2, #43	; 0x2b
 800bf80:	2909      	cmp	r1, #9
 800bf82:	7042      	strb	r2, [r0, #1]
 800bf84:	dd2a      	ble.n	800bfdc <__exponent+0x70>
 800bf86:	f10d 0407 	add.w	r4, sp, #7
 800bf8a:	46a4      	mov	ip, r4
 800bf8c:	270a      	movs	r7, #10
 800bf8e:	46a6      	mov	lr, r4
 800bf90:	460a      	mov	r2, r1
 800bf92:	fb91 f6f7 	sdiv	r6, r1, r7
 800bf96:	fb07 1516 	mls	r5, r7, r6, r1
 800bf9a:	3530      	adds	r5, #48	; 0x30
 800bf9c:	2a63      	cmp	r2, #99	; 0x63
 800bf9e:	f104 34ff 	add.w	r4, r4, #4294967295
 800bfa2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bfa6:	4631      	mov	r1, r6
 800bfa8:	dcf1      	bgt.n	800bf8e <__exponent+0x22>
 800bfaa:	3130      	adds	r1, #48	; 0x30
 800bfac:	f1ae 0502 	sub.w	r5, lr, #2
 800bfb0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bfb4:	1c44      	adds	r4, r0, #1
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	4561      	cmp	r1, ip
 800bfba:	d30a      	bcc.n	800bfd2 <__exponent+0x66>
 800bfbc:	f10d 0209 	add.w	r2, sp, #9
 800bfc0:	eba2 020e 	sub.w	r2, r2, lr
 800bfc4:	4565      	cmp	r5, ip
 800bfc6:	bf88      	it	hi
 800bfc8:	2200      	movhi	r2, #0
 800bfca:	4413      	add	r3, r2
 800bfcc:	1a18      	subs	r0, r3, r0
 800bfce:	b003      	add	sp, #12
 800bfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bfda:	e7ed      	b.n	800bfb8 <__exponent+0x4c>
 800bfdc:	2330      	movs	r3, #48	; 0x30
 800bfde:	3130      	adds	r1, #48	; 0x30
 800bfe0:	7083      	strb	r3, [r0, #2]
 800bfe2:	70c1      	strb	r1, [r0, #3]
 800bfe4:	1d03      	adds	r3, r0, #4
 800bfe6:	e7f1      	b.n	800bfcc <__exponent+0x60>

0800bfe8 <_printf_float>:
 800bfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfec:	ed2d 8b02 	vpush	{d8}
 800bff0:	b08d      	sub	sp, #52	; 0x34
 800bff2:	460c      	mov	r4, r1
 800bff4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bff8:	4616      	mov	r6, r2
 800bffa:	461f      	mov	r7, r3
 800bffc:	4605      	mov	r5, r0
 800bffe:	f002 fe89 	bl	800ed14 <_localeconv_r>
 800c002:	f8d0 a000 	ldr.w	sl, [r0]
 800c006:	4650      	mov	r0, sl
 800c008:	f7f4 f8ea 	bl	80001e0 <strlen>
 800c00c:	2300      	movs	r3, #0
 800c00e:	930a      	str	r3, [sp, #40]	; 0x28
 800c010:	6823      	ldr	r3, [r4, #0]
 800c012:	9305      	str	r3, [sp, #20]
 800c014:	f8d8 3000 	ldr.w	r3, [r8]
 800c018:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c01c:	3307      	adds	r3, #7
 800c01e:	f023 0307 	bic.w	r3, r3, #7
 800c022:	f103 0208 	add.w	r2, r3, #8
 800c026:	f8c8 2000 	str.w	r2, [r8]
 800c02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c032:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c036:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c03a:	9307      	str	r3, [sp, #28]
 800c03c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c040:	ee08 0a10 	vmov	s16, r0
 800c044:	4b9f      	ldr	r3, [pc, #636]	; (800c2c4 <_printf_float+0x2dc>)
 800c046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c04a:	f04f 32ff 	mov.w	r2, #4294967295
 800c04e:	f7f4 fd75 	bl	8000b3c <__aeabi_dcmpun>
 800c052:	bb88      	cbnz	r0, 800c0b8 <_printf_float+0xd0>
 800c054:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c058:	4b9a      	ldr	r3, [pc, #616]	; (800c2c4 <_printf_float+0x2dc>)
 800c05a:	f04f 32ff 	mov.w	r2, #4294967295
 800c05e:	f7f4 fd4f 	bl	8000b00 <__aeabi_dcmple>
 800c062:	bb48      	cbnz	r0, 800c0b8 <_printf_float+0xd0>
 800c064:	2200      	movs	r2, #0
 800c066:	2300      	movs	r3, #0
 800c068:	4640      	mov	r0, r8
 800c06a:	4649      	mov	r1, r9
 800c06c:	f7f4 fd3e 	bl	8000aec <__aeabi_dcmplt>
 800c070:	b110      	cbz	r0, 800c078 <_printf_float+0x90>
 800c072:	232d      	movs	r3, #45	; 0x2d
 800c074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c078:	4b93      	ldr	r3, [pc, #588]	; (800c2c8 <_printf_float+0x2e0>)
 800c07a:	4894      	ldr	r0, [pc, #592]	; (800c2cc <_printf_float+0x2e4>)
 800c07c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c080:	bf94      	ite	ls
 800c082:	4698      	movls	r8, r3
 800c084:	4680      	movhi	r8, r0
 800c086:	2303      	movs	r3, #3
 800c088:	6123      	str	r3, [r4, #16]
 800c08a:	9b05      	ldr	r3, [sp, #20]
 800c08c:	f023 0204 	bic.w	r2, r3, #4
 800c090:	6022      	str	r2, [r4, #0]
 800c092:	f04f 0900 	mov.w	r9, #0
 800c096:	9700      	str	r7, [sp, #0]
 800c098:	4633      	mov	r3, r6
 800c09a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c09c:	4621      	mov	r1, r4
 800c09e:	4628      	mov	r0, r5
 800c0a0:	f000 f9d8 	bl	800c454 <_printf_common>
 800c0a4:	3001      	adds	r0, #1
 800c0a6:	f040 8090 	bne.w	800c1ca <_printf_float+0x1e2>
 800c0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ae:	b00d      	add	sp, #52	; 0x34
 800c0b0:	ecbd 8b02 	vpop	{d8}
 800c0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b8:	4642      	mov	r2, r8
 800c0ba:	464b      	mov	r3, r9
 800c0bc:	4640      	mov	r0, r8
 800c0be:	4649      	mov	r1, r9
 800c0c0:	f7f4 fd3c 	bl	8000b3c <__aeabi_dcmpun>
 800c0c4:	b140      	cbz	r0, 800c0d8 <_printf_float+0xf0>
 800c0c6:	464b      	mov	r3, r9
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	bfbc      	itt	lt
 800c0cc:	232d      	movlt	r3, #45	; 0x2d
 800c0ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c0d2:	487f      	ldr	r0, [pc, #508]	; (800c2d0 <_printf_float+0x2e8>)
 800c0d4:	4b7f      	ldr	r3, [pc, #508]	; (800c2d4 <_printf_float+0x2ec>)
 800c0d6:	e7d1      	b.n	800c07c <_printf_float+0x94>
 800c0d8:	6863      	ldr	r3, [r4, #4]
 800c0da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c0de:	9206      	str	r2, [sp, #24]
 800c0e0:	1c5a      	adds	r2, r3, #1
 800c0e2:	d13f      	bne.n	800c164 <_printf_float+0x17c>
 800c0e4:	2306      	movs	r3, #6
 800c0e6:	6063      	str	r3, [r4, #4]
 800c0e8:	9b05      	ldr	r3, [sp, #20]
 800c0ea:	6861      	ldr	r1, [r4, #4]
 800c0ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	9303      	str	r3, [sp, #12]
 800c0f4:	ab0a      	add	r3, sp, #40	; 0x28
 800c0f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c0fa:	ab09      	add	r3, sp, #36	; 0x24
 800c0fc:	ec49 8b10 	vmov	d0, r8, r9
 800c100:	9300      	str	r3, [sp, #0]
 800c102:	6022      	str	r2, [r4, #0]
 800c104:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c108:	4628      	mov	r0, r5
 800c10a:	f7ff fecd 	bl	800bea8 <__cvt>
 800c10e:	9b06      	ldr	r3, [sp, #24]
 800c110:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c112:	2b47      	cmp	r3, #71	; 0x47
 800c114:	4680      	mov	r8, r0
 800c116:	d108      	bne.n	800c12a <_printf_float+0x142>
 800c118:	1cc8      	adds	r0, r1, #3
 800c11a:	db02      	blt.n	800c122 <_printf_float+0x13a>
 800c11c:	6863      	ldr	r3, [r4, #4]
 800c11e:	4299      	cmp	r1, r3
 800c120:	dd41      	ble.n	800c1a6 <_printf_float+0x1be>
 800c122:	f1ab 0b02 	sub.w	fp, fp, #2
 800c126:	fa5f fb8b 	uxtb.w	fp, fp
 800c12a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c12e:	d820      	bhi.n	800c172 <_printf_float+0x18a>
 800c130:	3901      	subs	r1, #1
 800c132:	465a      	mov	r2, fp
 800c134:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c138:	9109      	str	r1, [sp, #36]	; 0x24
 800c13a:	f7ff ff17 	bl	800bf6c <__exponent>
 800c13e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c140:	1813      	adds	r3, r2, r0
 800c142:	2a01      	cmp	r2, #1
 800c144:	4681      	mov	r9, r0
 800c146:	6123      	str	r3, [r4, #16]
 800c148:	dc02      	bgt.n	800c150 <_printf_float+0x168>
 800c14a:	6822      	ldr	r2, [r4, #0]
 800c14c:	07d2      	lsls	r2, r2, #31
 800c14e:	d501      	bpl.n	800c154 <_printf_float+0x16c>
 800c150:	3301      	adds	r3, #1
 800c152:	6123      	str	r3, [r4, #16]
 800c154:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d09c      	beq.n	800c096 <_printf_float+0xae>
 800c15c:	232d      	movs	r3, #45	; 0x2d
 800c15e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c162:	e798      	b.n	800c096 <_printf_float+0xae>
 800c164:	9a06      	ldr	r2, [sp, #24]
 800c166:	2a47      	cmp	r2, #71	; 0x47
 800c168:	d1be      	bne.n	800c0e8 <_printf_float+0x100>
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d1bc      	bne.n	800c0e8 <_printf_float+0x100>
 800c16e:	2301      	movs	r3, #1
 800c170:	e7b9      	b.n	800c0e6 <_printf_float+0xfe>
 800c172:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c176:	d118      	bne.n	800c1aa <_printf_float+0x1c2>
 800c178:	2900      	cmp	r1, #0
 800c17a:	6863      	ldr	r3, [r4, #4]
 800c17c:	dd0b      	ble.n	800c196 <_printf_float+0x1ae>
 800c17e:	6121      	str	r1, [r4, #16]
 800c180:	b913      	cbnz	r3, 800c188 <_printf_float+0x1a0>
 800c182:	6822      	ldr	r2, [r4, #0]
 800c184:	07d0      	lsls	r0, r2, #31
 800c186:	d502      	bpl.n	800c18e <_printf_float+0x1a6>
 800c188:	3301      	adds	r3, #1
 800c18a:	440b      	add	r3, r1
 800c18c:	6123      	str	r3, [r4, #16]
 800c18e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c190:	f04f 0900 	mov.w	r9, #0
 800c194:	e7de      	b.n	800c154 <_printf_float+0x16c>
 800c196:	b913      	cbnz	r3, 800c19e <_printf_float+0x1b6>
 800c198:	6822      	ldr	r2, [r4, #0]
 800c19a:	07d2      	lsls	r2, r2, #31
 800c19c:	d501      	bpl.n	800c1a2 <_printf_float+0x1ba>
 800c19e:	3302      	adds	r3, #2
 800c1a0:	e7f4      	b.n	800c18c <_printf_float+0x1a4>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e7f2      	b.n	800c18c <_printf_float+0x1a4>
 800c1a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c1aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1ac:	4299      	cmp	r1, r3
 800c1ae:	db05      	blt.n	800c1bc <_printf_float+0x1d4>
 800c1b0:	6823      	ldr	r3, [r4, #0]
 800c1b2:	6121      	str	r1, [r4, #16]
 800c1b4:	07d8      	lsls	r0, r3, #31
 800c1b6:	d5ea      	bpl.n	800c18e <_printf_float+0x1a6>
 800c1b8:	1c4b      	adds	r3, r1, #1
 800c1ba:	e7e7      	b.n	800c18c <_printf_float+0x1a4>
 800c1bc:	2900      	cmp	r1, #0
 800c1be:	bfd4      	ite	le
 800c1c0:	f1c1 0202 	rsble	r2, r1, #2
 800c1c4:	2201      	movgt	r2, #1
 800c1c6:	4413      	add	r3, r2
 800c1c8:	e7e0      	b.n	800c18c <_printf_float+0x1a4>
 800c1ca:	6823      	ldr	r3, [r4, #0]
 800c1cc:	055a      	lsls	r2, r3, #21
 800c1ce:	d407      	bmi.n	800c1e0 <_printf_float+0x1f8>
 800c1d0:	6923      	ldr	r3, [r4, #16]
 800c1d2:	4642      	mov	r2, r8
 800c1d4:	4631      	mov	r1, r6
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	47b8      	blx	r7
 800c1da:	3001      	adds	r0, #1
 800c1dc:	d12c      	bne.n	800c238 <_printf_float+0x250>
 800c1de:	e764      	b.n	800c0aa <_printf_float+0xc2>
 800c1e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c1e4:	f240 80e0 	bls.w	800c3a8 <_printf_float+0x3c0>
 800c1e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	f7f4 fc72 	bl	8000ad8 <__aeabi_dcmpeq>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d034      	beq.n	800c262 <_printf_float+0x27a>
 800c1f8:	4a37      	ldr	r2, [pc, #220]	; (800c2d8 <_printf_float+0x2f0>)
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	4631      	mov	r1, r6
 800c1fe:	4628      	mov	r0, r5
 800c200:	47b8      	blx	r7
 800c202:	3001      	adds	r0, #1
 800c204:	f43f af51 	beq.w	800c0aa <_printf_float+0xc2>
 800c208:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c20c:	429a      	cmp	r2, r3
 800c20e:	db02      	blt.n	800c216 <_printf_float+0x22e>
 800c210:	6823      	ldr	r3, [r4, #0]
 800c212:	07d8      	lsls	r0, r3, #31
 800c214:	d510      	bpl.n	800c238 <_printf_float+0x250>
 800c216:	ee18 3a10 	vmov	r3, s16
 800c21a:	4652      	mov	r2, sl
 800c21c:	4631      	mov	r1, r6
 800c21e:	4628      	mov	r0, r5
 800c220:	47b8      	blx	r7
 800c222:	3001      	adds	r0, #1
 800c224:	f43f af41 	beq.w	800c0aa <_printf_float+0xc2>
 800c228:	f04f 0800 	mov.w	r8, #0
 800c22c:	f104 091a 	add.w	r9, r4, #26
 800c230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c232:	3b01      	subs	r3, #1
 800c234:	4543      	cmp	r3, r8
 800c236:	dc09      	bgt.n	800c24c <_printf_float+0x264>
 800c238:	6823      	ldr	r3, [r4, #0]
 800c23a:	079b      	lsls	r3, r3, #30
 800c23c:	f100 8105 	bmi.w	800c44a <_printf_float+0x462>
 800c240:	68e0      	ldr	r0, [r4, #12]
 800c242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c244:	4298      	cmp	r0, r3
 800c246:	bfb8      	it	lt
 800c248:	4618      	movlt	r0, r3
 800c24a:	e730      	b.n	800c0ae <_printf_float+0xc6>
 800c24c:	2301      	movs	r3, #1
 800c24e:	464a      	mov	r2, r9
 800c250:	4631      	mov	r1, r6
 800c252:	4628      	mov	r0, r5
 800c254:	47b8      	blx	r7
 800c256:	3001      	adds	r0, #1
 800c258:	f43f af27 	beq.w	800c0aa <_printf_float+0xc2>
 800c25c:	f108 0801 	add.w	r8, r8, #1
 800c260:	e7e6      	b.n	800c230 <_printf_float+0x248>
 800c262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c264:	2b00      	cmp	r3, #0
 800c266:	dc39      	bgt.n	800c2dc <_printf_float+0x2f4>
 800c268:	4a1b      	ldr	r2, [pc, #108]	; (800c2d8 <_printf_float+0x2f0>)
 800c26a:	2301      	movs	r3, #1
 800c26c:	4631      	mov	r1, r6
 800c26e:	4628      	mov	r0, r5
 800c270:	47b8      	blx	r7
 800c272:	3001      	adds	r0, #1
 800c274:	f43f af19 	beq.w	800c0aa <_printf_float+0xc2>
 800c278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c27c:	4313      	orrs	r3, r2
 800c27e:	d102      	bne.n	800c286 <_printf_float+0x29e>
 800c280:	6823      	ldr	r3, [r4, #0]
 800c282:	07d9      	lsls	r1, r3, #31
 800c284:	d5d8      	bpl.n	800c238 <_printf_float+0x250>
 800c286:	ee18 3a10 	vmov	r3, s16
 800c28a:	4652      	mov	r2, sl
 800c28c:	4631      	mov	r1, r6
 800c28e:	4628      	mov	r0, r5
 800c290:	47b8      	blx	r7
 800c292:	3001      	adds	r0, #1
 800c294:	f43f af09 	beq.w	800c0aa <_printf_float+0xc2>
 800c298:	f04f 0900 	mov.w	r9, #0
 800c29c:	f104 0a1a 	add.w	sl, r4, #26
 800c2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2a2:	425b      	negs	r3, r3
 800c2a4:	454b      	cmp	r3, r9
 800c2a6:	dc01      	bgt.n	800c2ac <_printf_float+0x2c4>
 800c2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2aa:	e792      	b.n	800c1d2 <_printf_float+0x1ea>
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	4652      	mov	r2, sl
 800c2b0:	4631      	mov	r1, r6
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	47b8      	blx	r7
 800c2b6:	3001      	adds	r0, #1
 800c2b8:	f43f aef7 	beq.w	800c0aa <_printf_float+0xc2>
 800c2bc:	f109 0901 	add.w	r9, r9, #1
 800c2c0:	e7ee      	b.n	800c2a0 <_printf_float+0x2b8>
 800c2c2:	bf00      	nop
 800c2c4:	7fefffff 	.word	0x7fefffff
 800c2c8:	08012e80 	.word	0x08012e80
 800c2cc:	08012e84 	.word	0x08012e84
 800c2d0:	08012e8c 	.word	0x08012e8c
 800c2d4:	08012e88 	.word	0x08012e88
 800c2d8:	08012e90 	.word	0x08012e90
 800c2dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	bfa8      	it	ge
 800c2e4:	461a      	movge	r2, r3
 800c2e6:	2a00      	cmp	r2, #0
 800c2e8:	4691      	mov	r9, r2
 800c2ea:	dc37      	bgt.n	800c35c <_printf_float+0x374>
 800c2ec:	f04f 0b00 	mov.w	fp, #0
 800c2f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2f4:	f104 021a 	add.w	r2, r4, #26
 800c2f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2fa:	9305      	str	r3, [sp, #20]
 800c2fc:	eba3 0309 	sub.w	r3, r3, r9
 800c300:	455b      	cmp	r3, fp
 800c302:	dc33      	bgt.n	800c36c <_printf_float+0x384>
 800c304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c308:	429a      	cmp	r2, r3
 800c30a:	db3b      	blt.n	800c384 <_printf_float+0x39c>
 800c30c:	6823      	ldr	r3, [r4, #0]
 800c30e:	07da      	lsls	r2, r3, #31
 800c310:	d438      	bmi.n	800c384 <_printf_float+0x39c>
 800c312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c314:	9a05      	ldr	r2, [sp, #20]
 800c316:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c318:	1a9a      	subs	r2, r3, r2
 800c31a:	eba3 0901 	sub.w	r9, r3, r1
 800c31e:	4591      	cmp	r9, r2
 800c320:	bfa8      	it	ge
 800c322:	4691      	movge	r9, r2
 800c324:	f1b9 0f00 	cmp.w	r9, #0
 800c328:	dc35      	bgt.n	800c396 <_printf_float+0x3ae>
 800c32a:	f04f 0800 	mov.w	r8, #0
 800c32e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c332:	f104 0a1a 	add.w	sl, r4, #26
 800c336:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c33a:	1a9b      	subs	r3, r3, r2
 800c33c:	eba3 0309 	sub.w	r3, r3, r9
 800c340:	4543      	cmp	r3, r8
 800c342:	f77f af79 	ble.w	800c238 <_printf_float+0x250>
 800c346:	2301      	movs	r3, #1
 800c348:	4652      	mov	r2, sl
 800c34a:	4631      	mov	r1, r6
 800c34c:	4628      	mov	r0, r5
 800c34e:	47b8      	blx	r7
 800c350:	3001      	adds	r0, #1
 800c352:	f43f aeaa 	beq.w	800c0aa <_printf_float+0xc2>
 800c356:	f108 0801 	add.w	r8, r8, #1
 800c35a:	e7ec      	b.n	800c336 <_printf_float+0x34e>
 800c35c:	4613      	mov	r3, r2
 800c35e:	4631      	mov	r1, r6
 800c360:	4642      	mov	r2, r8
 800c362:	4628      	mov	r0, r5
 800c364:	47b8      	blx	r7
 800c366:	3001      	adds	r0, #1
 800c368:	d1c0      	bne.n	800c2ec <_printf_float+0x304>
 800c36a:	e69e      	b.n	800c0aa <_printf_float+0xc2>
 800c36c:	2301      	movs	r3, #1
 800c36e:	4631      	mov	r1, r6
 800c370:	4628      	mov	r0, r5
 800c372:	9205      	str	r2, [sp, #20]
 800c374:	47b8      	blx	r7
 800c376:	3001      	adds	r0, #1
 800c378:	f43f ae97 	beq.w	800c0aa <_printf_float+0xc2>
 800c37c:	9a05      	ldr	r2, [sp, #20]
 800c37e:	f10b 0b01 	add.w	fp, fp, #1
 800c382:	e7b9      	b.n	800c2f8 <_printf_float+0x310>
 800c384:	ee18 3a10 	vmov	r3, s16
 800c388:	4652      	mov	r2, sl
 800c38a:	4631      	mov	r1, r6
 800c38c:	4628      	mov	r0, r5
 800c38e:	47b8      	blx	r7
 800c390:	3001      	adds	r0, #1
 800c392:	d1be      	bne.n	800c312 <_printf_float+0x32a>
 800c394:	e689      	b.n	800c0aa <_printf_float+0xc2>
 800c396:	9a05      	ldr	r2, [sp, #20]
 800c398:	464b      	mov	r3, r9
 800c39a:	4442      	add	r2, r8
 800c39c:	4631      	mov	r1, r6
 800c39e:	4628      	mov	r0, r5
 800c3a0:	47b8      	blx	r7
 800c3a2:	3001      	adds	r0, #1
 800c3a4:	d1c1      	bne.n	800c32a <_printf_float+0x342>
 800c3a6:	e680      	b.n	800c0aa <_printf_float+0xc2>
 800c3a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3aa:	2a01      	cmp	r2, #1
 800c3ac:	dc01      	bgt.n	800c3b2 <_printf_float+0x3ca>
 800c3ae:	07db      	lsls	r3, r3, #31
 800c3b0:	d538      	bpl.n	800c424 <_printf_float+0x43c>
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	4642      	mov	r2, r8
 800c3b6:	4631      	mov	r1, r6
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	47b8      	blx	r7
 800c3bc:	3001      	adds	r0, #1
 800c3be:	f43f ae74 	beq.w	800c0aa <_printf_float+0xc2>
 800c3c2:	ee18 3a10 	vmov	r3, s16
 800c3c6:	4652      	mov	r2, sl
 800c3c8:	4631      	mov	r1, r6
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	47b8      	blx	r7
 800c3ce:	3001      	adds	r0, #1
 800c3d0:	f43f ae6b 	beq.w	800c0aa <_printf_float+0xc2>
 800c3d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3d8:	2200      	movs	r2, #0
 800c3da:	2300      	movs	r3, #0
 800c3dc:	f7f4 fb7c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3e0:	b9d8      	cbnz	r0, 800c41a <_printf_float+0x432>
 800c3e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3e4:	f108 0201 	add.w	r2, r8, #1
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	4631      	mov	r1, r6
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	47b8      	blx	r7
 800c3f0:	3001      	adds	r0, #1
 800c3f2:	d10e      	bne.n	800c412 <_printf_float+0x42a>
 800c3f4:	e659      	b.n	800c0aa <_printf_float+0xc2>
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	4652      	mov	r2, sl
 800c3fa:	4631      	mov	r1, r6
 800c3fc:	4628      	mov	r0, r5
 800c3fe:	47b8      	blx	r7
 800c400:	3001      	adds	r0, #1
 800c402:	f43f ae52 	beq.w	800c0aa <_printf_float+0xc2>
 800c406:	f108 0801 	add.w	r8, r8, #1
 800c40a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c40c:	3b01      	subs	r3, #1
 800c40e:	4543      	cmp	r3, r8
 800c410:	dcf1      	bgt.n	800c3f6 <_printf_float+0x40e>
 800c412:	464b      	mov	r3, r9
 800c414:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c418:	e6dc      	b.n	800c1d4 <_printf_float+0x1ec>
 800c41a:	f04f 0800 	mov.w	r8, #0
 800c41e:	f104 0a1a 	add.w	sl, r4, #26
 800c422:	e7f2      	b.n	800c40a <_printf_float+0x422>
 800c424:	2301      	movs	r3, #1
 800c426:	4642      	mov	r2, r8
 800c428:	e7df      	b.n	800c3ea <_printf_float+0x402>
 800c42a:	2301      	movs	r3, #1
 800c42c:	464a      	mov	r2, r9
 800c42e:	4631      	mov	r1, r6
 800c430:	4628      	mov	r0, r5
 800c432:	47b8      	blx	r7
 800c434:	3001      	adds	r0, #1
 800c436:	f43f ae38 	beq.w	800c0aa <_printf_float+0xc2>
 800c43a:	f108 0801 	add.w	r8, r8, #1
 800c43e:	68e3      	ldr	r3, [r4, #12]
 800c440:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c442:	1a5b      	subs	r3, r3, r1
 800c444:	4543      	cmp	r3, r8
 800c446:	dcf0      	bgt.n	800c42a <_printf_float+0x442>
 800c448:	e6fa      	b.n	800c240 <_printf_float+0x258>
 800c44a:	f04f 0800 	mov.w	r8, #0
 800c44e:	f104 0919 	add.w	r9, r4, #25
 800c452:	e7f4      	b.n	800c43e <_printf_float+0x456>

0800c454 <_printf_common>:
 800c454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c458:	4616      	mov	r6, r2
 800c45a:	4699      	mov	r9, r3
 800c45c:	688a      	ldr	r2, [r1, #8]
 800c45e:	690b      	ldr	r3, [r1, #16]
 800c460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c464:	4293      	cmp	r3, r2
 800c466:	bfb8      	it	lt
 800c468:	4613      	movlt	r3, r2
 800c46a:	6033      	str	r3, [r6, #0]
 800c46c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c470:	4607      	mov	r7, r0
 800c472:	460c      	mov	r4, r1
 800c474:	b10a      	cbz	r2, 800c47a <_printf_common+0x26>
 800c476:	3301      	adds	r3, #1
 800c478:	6033      	str	r3, [r6, #0]
 800c47a:	6823      	ldr	r3, [r4, #0]
 800c47c:	0699      	lsls	r1, r3, #26
 800c47e:	bf42      	ittt	mi
 800c480:	6833      	ldrmi	r3, [r6, #0]
 800c482:	3302      	addmi	r3, #2
 800c484:	6033      	strmi	r3, [r6, #0]
 800c486:	6825      	ldr	r5, [r4, #0]
 800c488:	f015 0506 	ands.w	r5, r5, #6
 800c48c:	d106      	bne.n	800c49c <_printf_common+0x48>
 800c48e:	f104 0a19 	add.w	sl, r4, #25
 800c492:	68e3      	ldr	r3, [r4, #12]
 800c494:	6832      	ldr	r2, [r6, #0]
 800c496:	1a9b      	subs	r3, r3, r2
 800c498:	42ab      	cmp	r3, r5
 800c49a:	dc26      	bgt.n	800c4ea <_printf_common+0x96>
 800c49c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c4a0:	1e13      	subs	r3, r2, #0
 800c4a2:	6822      	ldr	r2, [r4, #0]
 800c4a4:	bf18      	it	ne
 800c4a6:	2301      	movne	r3, #1
 800c4a8:	0692      	lsls	r2, r2, #26
 800c4aa:	d42b      	bmi.n	800c504 <_printf_common+0xb0>
 800c4ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4b0:	4649      	mov	r1, r9
 800c4b2:	4638      	mov	r0, r7
 800c4b4:	47c0      	blx	r8
 800c4b6:	3001      	adds	r0, #1
 800c4b8:	d01e      	beq.n	800c4f8 <_printf_common+0xa4>
 800c4ba:	6823      	ldr	r3, [r4, #0]
 800c4bc:	68e5      	ldr	r5, [r4, #12]
 800c4be:	6832      	ldr	r2, [r6, #0]
 800c4c0:	f003 0306 	and.w	r3, r3, #6
 800c4c4:	2b04      	cmp	r3, #4
 800c4c6:	bf08      	it	eq
 800c4c8:	1aad      	subeq	r5, r5, r2
 800c4ca:	68a3      	ldr	r3, [r4, #8]
 800c4cc:	6922      	ldr	r2, [r4, #16]
 800c4ce:	bf0c      	ite	eq
 800c4d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4d4:	2500      	movne	r5, #0
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	bfc4      	itt	gt
 800c4da:	1a9b      	subgt	r3, r3, r2
 800c4dc:	18ed      	addgt	r5, r5, r3
 800c4de:	2600      	movs	r6, #0
 800c4e0:	341a      	adds	r4, #26
 800c4e2:	42b5      	cmp	r5, r6
 800c4e4:	d11a      	bne.n	800c51c <_printf_common+0xc8>
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	e008      	b.n	800c4fc <_printf_common+0xa8>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	4652      	mov	r2, sl
 800c4ee:	4649      	mov	r1, r9
 800c4f0:	4638      	mov	r0, r7
 800c4f2:	47c0      	blx	r8
 800c4f4:	3001      	adds	r0, #1
 800c4f6:	d103      	bne.n	800c500 <_printf_common+0xac>
 800c4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c500:	3501      	adds	r5, #1
 800c502:	e7c6      	b.n	800c492 <_printf_common+0x3e>
 800c504:	18e1      	adds	r1, r4, r3
 800c506:	1c5a      	adds	r2, r3, #1
 800c508:	2030      	movs	r0, #48	; 0x30
 800c50a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c50e:	4422      	add	r2, r4
 800c510:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c514:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c518:	3302      	adds	r3, #2
 800c51a:	e7c7      	b.n	800c4ac <_printf_common+0x58>
 800c51c:	2301      	movs	r3, #1
 800c51e:	4622      	mov	r2, r4
 800c520:	4649      	mov	r1, r9
 800c522:	4638      	mov	r0, r7
 800c524:	47c0      	blx	r8
 800c526:	3001      	adds	r0, #1
 800c528:	d0e6      	beq.n	800c4f8 <_printf_common+0xa4>
 800c52a:	3601      	adds	r6, #1
 800c52c:	e7d9      	b.n	800c4e2 <_printf_common+0x8e>
	...

0800c530 <_printf_i>:
 800c530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c534:	7e0f      	ldrb	r7, [r1, #24]
 800c536:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c538:	2f78      	cmp	r7, #120	; 0x78
 800c53a:	4691      	mov	r9, r2
 800c53c:	4680      	mov	r8, r0
 800c53e:	460c      	mov	r4, r1
 800c540:	469a      	mov	sl, r3
 800c542:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c546:	d807      	bhi.n	800c558 <_printf_i+0x28>
 800c548:	2f62      	cmp	r7, #98	; 0x62
 800c54a:	d80a      	bhi.n	800c562 <_printf_i+0x32>
 800c54c:	2f00      	cmp	r7, #0
 800c54e:	f000 80d8 	beq.w	800c702 <_printf_i+0x1d2>
 800c552:	2f58      	cmp	r7, #88	; 0x58
 800c554:	f000 80a3 	beq.w	800c69e <_printf_i+0x16e>
 800c558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c55c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c560:	e03a      	b.n	800c5d8 <_printf_i+0xa8>
 800c562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c566:	2b15      	cmp	r3, #21
 800c568:	d8f6      	bhi.n	800c558 <_printf_i+0x28>
 800c56a:	a101      	add	r1, pc, #4	; (adr r1, 800c570 <_printf_i+0x40>)
 800c56c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c570:	0800c5c9 	.word	0x0800c5c9
 800c574:	0800c5dd 	.word	0x0800c5dd
 800c578:	0800c559 	.word	0x0800c559
 800c57c:	0800c559 	.word	0x0800c559
 800c580:	0800c559 	.word	0x0800c559
 800c584:	0800c559 	.word	0x0800c559
 800c588:	0800c5dd 	.word	0x0800c5dd
 800c58c:	0800c559 	.word	0x0800c559
 800c590:	0800c559 	.word	0x0800c559
 800c594:	0800c559 	.word	0x0800c559
 800c598:	0800c559 	.word	0x0800c559
 800c59c:	0800c6e9 	.word	0x0800c6e9
 800c5a0:	0800c60d 	.word	0x0800c60d
 800c5a4:	0800c6cb 	.word	0x0800c6cb
 800c5a8:	0800c559 	.word	0x0800c559
 800c5ac:	0800c559 	.word	0x0800c559
 800c5b0:	0800c70b 	.word	0x0800c70b
 800c5b4:	0800c559 	.word	0x0800c559
 800c5b8:	0800c60d 	.word	0x0800c60d
 800c5bc:	0800c559 	.word	0x0800c559
 800c5c0:	0800c559 	.word	0x0800c559
 800c5c4:	0800c6d3 	.word	0x0800c6d3
 800c5c8:	682b      	ldr	r3, [r5, #0]
 800c5ca:	1d1a      	adds	r2, r3, #4
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	602a      	str	r2, [r5, #0]
 800c5d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5d8:	2301      	movs	r3, #1
 800c5da:	e0a3      	b.n	800c724 <_printf_i+0x1f4>
 800c5dc:	6820      	ldr	r0, [r4, #0]
 800c5de:	6829      	ldr	r1, [r5, #0]
 800c5e0:	0606      	lsls	r6, r0, #24
 800c5e2:	f101 0304 	add.w	r3, r1, #4
 800c5e6:	d50a      	bpl.n	800c5fe <_printf_i+0xce>
 800c5e8:	680e      	ldr	r6, [r1, #0]
 800c5ea:	602b      	str	r3, [r5, #0]
 800c5ec:	2e00      	cmp	r6, #0
 800c5ee:	da03      	bge.n	800c5f8 <_printf_i+0xc8>
 800c5f0:	232d      	movs	r3, #45	; 0x2d
 800c5f2:	4276      	negs	r6, r6
 800c5f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5f8:	485e      	ldr	r0, [pc, #376]	; (800c774 <_printf_i+0x244>)
 800c5fa:	230a      	movs	r3, #10
 800c5fc:	e019      	b.n	800c632 <_printf_i+0x102>
 800c5fe:	680e      	ldr	r6, [r1, #0]
 800c600:	602b      	str	r3, [r5, #0]
 800c602:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c606:	bf18      	it	ne
 800c608:	b236      	sxthne	r6, r6
 800c60a:	e7ef      	b.n	800c5ec <_printf_i+0xbc>
 800c60c:	682b      	ldr	r3, [r5, #0]
 800c60e:	6820      	ldr	r0, [r4, #0]
 800c610:	1d19      	adds	r1, r3, #4
 800c612:	6029      	str	r1, [r5, #0]
 800c614:	0601      	lsls	r1, r0, #24
 800c616:	d501      	bpl.n	800c61c <_printf_i+0xec>
 800c618:	681e      	ldr	r6, [r3, #0]
 800c61a:	e002      	b.n	800c622 <_printf_i+0xf2>
 800c61c:	0646      	lsls	r6, r0, #25
 800c61e:	d5fb      	bpl.n	800c618 <_printf_i+0xe8>
 800c620:	881e      	ldrh	r6, [r3, #0]
 800c622:	4854      	ldr	r0, [pc, #336]	; (800c774 <_printf_i+0x244>)
 800c624:	2f6f      	cmp	r7, #111	; 0x6f
 800c626:	bf0c      	ite	eq
 800c628:	2308      	moveq	r3, #8
 800c62a:	230a      	movne	r3, #10
 800c62c:	2100      	movs	r1, #0
 800c62e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c632:	6865      	ldr	r5, [r4, #4]
 800c634:	60a5      	str	r5, [r4, #8]
 800c636:	2d00      	cmp	r5, #0
 800c638:	bfa2      	ittt	ge
 800c63a:	6821      	ldrge	r1, [r4, #0]
 800c63c:	f021 0104 	bicge.w	r1, r1, #4
 800c640:	6021      	strge	r1, [r4, #0]
 800c642:	b90e      	cbnz	r6, 800c648 <_printf_i+0x118>
 800c644:	2d00      	cmp	r5, #0
 800c646:	d04d      	beq.n	800c6e4 <_printf_i+0x1b4>
 800c648:	4615      	mov	r5, r2
 800c64a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c64e:	fb03 6711 	mls	r7, r3, r1, r6
 800c652:	5dc7      	ldrb	r7, [r0, r7]
 800c654:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c658:	4637      	mov	r7, r6
 800c65a:	42bb      	cmp	r3, r7
 800c65c:	460e      	mov	r6, r1
 800c65e:	d9f4      	bls.n	800c64a <_printf_i+0x11a>
 800c660:	2b08      	cmp	r3, #8
 800c662:	d10b      	bne.n	800c67c <_printf_i+0x14c>
 800c664:	6823      	ldr	r3, [r4, #0]
 800c666:	07de      	lsls	r6, r3, #31
 800c668:	d508      	bpl.n	800c67c <_printf_i+0x14c>
 800c66a:	6923      	ldr	r3, [r4, #16]
 800c66c:	6861      	ldr	r1, [r4, #4]
 800c66e:	4299      	cmp	r1, r3
 800c670:	bfde      	ittt	le
 800c672:	2330      	movle	r3, #48	; 0x30
 800c674:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c678:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c67c:	1b52      	subs	r2, r2, r5
 800c67e:	6122      	str	r2, [r4, #16]
 800c680:	f8cd a000 	str.w	sl, [sp]
 800c684:	464b      	mov	r3, r9
 800c686:	aa03      	add	r2, sp, #12
 800c688:	4621      	mov	r1, r4
 800c68a:	4640      	mov	r0, r8
 800c68c:	f7ff fee2 	bl	800c454 <_printf_common>
 800c690:	3001      	adds	r0, #1
 800c692:	d14c      	bne.n	800c72e <_printf_i+0x1fe>
 800c694:	f04f 30ff 	mov.w	r0, #4294967295
 800c698:	b004      	add	sp, #16
 800c69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c69e:	4835      	ldr	r0, [pc, #212]	; (800c774 <_printf_i+0x244>)
 800c6a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c6a4:	6829      	ldr	r1, [r5, #0]
 800c6a6:	6823      	ldr	r3, [r4, #0]
 800c6a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c6ac:	6029      	str	r1, [r5, #0]
 800c6ae:	061d      	lsls	r5, r3, #24
 800c6b0:	d514      	bpl.n	800c6dc <_printf_i+0x1ac>
 800c6b2:	07df      	lsls	r7, r3, #31
 800c6b4:	bf44      	itt	mi
 800c6b6:	f043 0320 	orrmi.w	r3, r3, #32
 800c6ba:	6023      	strmi	r3, [r4, #0]
 800c6bc:	b91e      	cbnz	r6, 800c6c6 <_printf_i+0x196>
 800c6be:	6823      	ldr	r3, [r4, #0]
 800c6c0:	f023 0320 	bic.w	r3, r3, #32
 800c6c4:	6023      	str	r3, [r4, #0]
 800c6c6:	2310      	movs	r3, #16
 800c6c8:	e7b0      	b.n	800c62c <_printf_i+0xfc>
 800c6ca:	6823      	ldr	r3, [r4, #0]
 800c6cc:	f043 0320 	orr.w	r3, r3, #32
 800c6d0:	6023      	str	r3, [r4, #0]
 800c6d2:	2378      	movs	r3, #120	; 0x78
 800c6d4:	4828      	ldr	r0, [pc, #160]	; (800c778 <_printf_i+0x248>)
 800c6d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6da:	e7e3      	b.n	800c6a4 <_printf_i+0x174>
 800c6dc:	0659      	lsls	r1, r3, #25
 800c6de:	bf48      	it	mi
 800c6e0:	b2b6      	uxthmi	r6, r6
 800c6e2:	e7e6      	b.n	800c6b2 <_printf_i+0x182>
 800c6e4:	4615      	mov	r5, r2
 800c6e6:	e7bb      	b.n	800c660 <_printf_i+0x130>
 800c6e8:	682b      	ldr	r3, [r5, #0]
 800c6ea:	6826      	ldr	r6, [r4, #0]
 800c6ec:	6961      	ldr	r1, [r4, #20]
 800c6ee:	1d18      	adds	r0, r3, #4
 800c6f0:	6028      	str	r0, [r5, #0]
 800c6f2:	0635      	lsls	r5, r6, #24
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	d501      	bpl.n	800c6fc <_printf_i+0x1cc>
 800c6f8:	6019      	str	r1, [r3, #0]
 800c6fa:	e002      	b.n	800c702 <_printf_i+0x1d2>
 800c6fc:	0670      	lsls	r0, r6, #25
 800c6fe:	d5fb      	bpl.n	800c6f8 <_printf_i+0x1c8>
 800c700:	8019      	strh	r1, [r3, #0]
 800c702:	2300      	movs	r3, #0
 800c704:	6123      	str	r3, [r4, #16]
 800c706:	4615      	mov	r5, r2
 800c708:	e7ba      	b.n	800c680 <_printf_i+0x150>
 800c70a:	682b      	ldr	r3, [r5, #0]
 800c70c:	1d1a      	adds	r2, r3, #4
 800c70e:	602a      	str	r2, [r5, #0]
 800c710:	681d      	ldr	r5, [r3, #0]
 800c712:	6862      	ldr	r2, [r4, #4]
 800c714:	2100      	movs	r1, #0
 800c716:	4628      	mov	r0, r5
 800c718:	f7f3 fd6a 	bl	80001f0 <memchr>
 800c71c:	b108      	cbz	r0, 800c722 <_printf_i+0x1f2>
 800c71e:	1b40      	subs	r0, r0, r5
 800c720:	6060      	str	r0, [r4, #4]
 800c722:	6863      	ldr	r3, [r4, #4]
 800c724:	6123      	str	r3, [r4, #16]
 800c726:	2300      	movs	r3, #0
 800c728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c72c:	e7a8      	b.n	800c680 <_printf_i+0x150>
 800c72e:	6923      	ldr	r3, [r4, #16]
 800c730:	462a      	mov	r2, r5
 800c732:	4649      	mov	r1, r9
 800c734:	4640      	mov	r0, r8
 800c736:	47d0      	blx	sl
 800c738:	3001      	adds	r0, #1
 800c73a:	d0ab      	beq.n	800c694 <_printf_i+0x164>
 800c73c:	6823      	ldr	r3, [r4, #0]
 800c73e:	079b      	lsls	r3, r3, #30
 800c740:	d413      	bmi.n	800c76a <_printf_i+0x23a>
 800c742:	68e0      	ldr	r0, [r4, #12]
 800c744:	9b03      	ldr	r3, [sp, #12]
 800c746:	4298      	cmp	r0, r3
 800c748:	bfb8      	it	lt
 800c74a:	4618      	movlt	r0, r3
 800c74c:	e7a4      	b.n	800c698 <_printf_i+0x168>
 800c74e:	2301      	movs	r3, #1
 800c750:	4632      	mov	r2, r6
 800c752:	4649      	mov	r1, r9
 800c754:	4640      	mov	r0, r8
 800c756:	47d0      	blx	sl
 800c758:	3001      	adds	r0, #1
 800c75a:	d09b      	beq.n	800c694 <_printf_i+0x164>
 800c75c:	3501      	adds	r5, #1
 800c75e:	68e3      	ldr	r3, [r4, #12]
 800c760:	9903      	ldr	r1, [sp, #12]
 800c762:	1a5b      	subs	r3, r3, r1
 800c764:	42ab      	cmp	r3, r5
 800c766:	dcf2      	bgt.n	800c74e <_printf_i+0x21e>
 800c768:	e7eb      	b.n	800c742 <_printf_i+0x212>
 800c76a:	2500      	movs	r5, #0
 800c76c:	f104 0619 	add.w	r6, r4, #25
 800c770:	e7f5      	b.n	800c75e <_printf_i+0x22e>
 800c772:	bf00      	nop
 800c774:	08012e92 	.word	0x08012e92
 800c778:	08012ea3 	.word	0x08012ea3

0800c77c <_scanf_float>:
 800c77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c780:	b087      	sub	sp, #28
 800c782:	4617      	mov	r7, r2
 800c784:	9303      	str	r3, [sp, #12]
 800c786:	688b      	ldr	r3, [r1, #8]
 800c788:	1e5a      	subs	r2, r3, #1
 800c78a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c78e:	bf83      	ittte	hi
 800c790:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c794:	195b      	addhi	r3, r3, r5
 800c796:	9302      	strhi	r3, [sp, #8]
 800c798:	2300      	movls	r3, #0
 800c79a:	bf86      	itte	hi
 800c79c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c7a0:	608b      	strhi	r3, [r1, #8]
 800c7a2:	9302      	strls	r3, [sp, #8]
 800c7a4:	680b      	ldr	r3, [r1, #0]
 800c7a6:	468b      	mov	fp, r1
 800c7a8:	2500      	movs	r5, #0
 800c7aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c7ae:	f84b 3b1c 	str.w	r3, [fp], #28
 800c7b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c7b6:	4680      	mov	r8, r0
 800c7b8:	460c      	mov	r4, r1
 800c7ba:	465e      	mov	r6, fp
 800c7bc:	46aa      	mov	sl, r5
 800c7be:	46a9      	mov	r9, r5
 800c7c0:	9501      	str	r5, [sp, #4]
 800c7c2:	68a2      	ldr	r2, [r4, #8]
 800c7c4:	b152      	cbz	r2, 800c7dc <_scanf_float+0x60>
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	2b4e      	cmp	r3, #78	; 0x4e
 800c7cc:	d864      	bhi.n	800c898 <_scanf_float+0x11c>
 800c7ce:	2b40      	cmp	r3, #64	; 0x40
 800c7d0:	d83c      	bhi.n	800c84c <_scanf_float+0xd0>
 800c7d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c7d6:	b2c8      	uxtb	r0, r1
 800c7d8:	280e      	cmp	r0, #14
 800c7da:	d93a      	bls.n	800c852 <_scanf_float+0xd6>
 800c7dc:	f1b9 0f00 	cmp.w	r9, #0
 800c7e0:	d003      	beq.n	800c7ea <_scanf_float+0x6e>
 800c7e2:	6823      	ldr	r3, [r4, #0]
 800c7e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7e8:	6023      	str	r3, [r4, #0]
 800c7ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7ee:	f1ba 0f01 	cmp.w	sl, #1
 800c7f2:	f200 8113 	bhi.w	800ca1c <_scanf_float+0x2a0>
 800c7f6:	455e      	cmp	r6, fp
 800c7f8:	f200 8105 	bhi.w	800ca06 <_scanf_float+0x28a>
 800c7fc:	2501      	movs	r5, #1
 800c7fe:	4628      	mov	r0, r5
 800c800:	b007      	add	sp, #28
 800c802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c806:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c80a:	2a0d      	cmp	r2, #13
 800c80c:	d8e6      	bhi.n	800c7dc <_scanf_float+0x60>
 800c80e:	a101      	add	r1, pc, #4	; (adr r1, 800c814 <_scanf_float+0x98>)
 800c810:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c814:	0800c953 	.word	0x0800c953
 800c818:	0800c7dd 	.word	0x0800c7dd
 800c81c:	0800c7dd 	.word	0x0800c7dd
 800c820:	0800c7dd 	.word	0x0800c7dd
 800c824:	0800c9b3 	.word	0x0800c9b3
 800c828:	0800c98b 	.word	0x0800c98b
 800c82c:	0800c7dd 	.word	0x0800c7dd
 800c830:	0800c7dd 	.word	0x0800c7dd
 800c834:	0800c961 	.word	0x0800c961
 800c838:	0800c7dd 	.word	0x0800c7dd
 800c83c:	0800c7dd 	.word	0x0800c7dd
 800c840:	0800c7dd 	.word	0x0800c7dd
 800c844:	0800c7dd 	.word	0x0800c7dd
 800c848:	0800c919 	.word	0x0800c919
 800c84c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c850:	e7db      	b.n	800c80a <_scanf_float+0x8e>
 800c852:	290e      	cmp	r1, #14
 800c854:	d8c2      	bhi.n	800c7dc <_scanf_float+0x60>
 800c856:	a001      	add	r0, pc, #4	; (adr r0, 800c85c <_scanf_float+0xe0>)
 800c858:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c85c:	0800c90b 	.word	0x0800c90b
 800c860:	0800c7dd 	.word	0x0800c7dd
 800c864:	0800c90b 	.word	0x0800c90b
 800c868:	0800c99f 	.word	0x0800c99f
 800c86c:	0800c7dd 	.word	0x0800c7dd
 800c870:	0800c8b9 	.word	0x0800c8b9
 800c874:	0800c8f5 	.word	0x0800c8f5
 800c878:	0800c8f5 	.word	0x0800c8f5
 800c87c:	0800c8f5 	.word	0x0800c8f5
 800c880:	0800c8f5 	.word	0x0800c8f5
 800c884:	0800c8f5 	.word	0x0800c8f5
 800c888:	0800c8f5 	.word	0x0800c8f5
 800c88c:	0800c8f5 	.word	0x0800c8f5
 800c890:	0800c8f5 	.word	0x0800c8f5
 800c894:	0800c8f5 	.word	0x0800c8f5
 800c898:	2b6e      	cmp	r3, #110	; 0x6e
 800c89a:	d809      	bhi.n	800c8b0 <_scanf_float+0x134>
 800c89c:	2b60      	cmp	r3, #96	; 0x60
 800c89e:	d8b2      	bhi.n	800c806 <_scanf_float+0x8a>
 800c8a0:	2b54      	cmp	r3, #84	; 0x54
 800c8a2:	d077      	beq.n	800c994 <_scanf_float+0x218>
 800c8a4:	2b59      	cmp	r3, #89	; 0x59
 800c8a6:	d199      	bne.n	800c7dc <_scanf_float+0x60>
 800c8a8:	2d07      	cmp	r5, #7
 800c8aa:	d197      	bne.n	800c7dc <_scanf_float+0x60>
 800c8ac:	2508      	movs	r5, #8
 800c8ae:	e029      	b.n	800c904 <_scanf_float+0x188>
 800c8b0:	2b74      	cmp	r3, #116	; 0x74
 800c8b2:	d06f      	beq.n	800c994 <_scanf_float+0x218>
 800c8b4:	2b79      	cmp	r3, #121	; 0x79
 800c8b6:	e7f6      	b.n	800c8a6 <_scanf_float+0x12a>
 800c8b8:	6821      	ldr	r1, [r4, #0]
 800c8ba:	05c8      	lsls	r0, r1, #23
 800c8bc:	d51a      	bpl.n	800c8f4 <_scanf_float+0x178>
 800c8be:	9b02      	ldr	r3, [sp, #8]
 800c8c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c8c4:	6021      	str	r1, [r4, #0]
 800c8c6:	f109 0901 	add.w	r9, r9, #1
 800c8ca:	b11b      	cbz	r3, 800c8d4 <_scanf_float+0x158>
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	3201      	adds	r2, #1
 800c8d0:	9302      	str	r3, [sp, #8]
 800c8d2:	60a2      	str	r2, [r4, #8]
 800c8d4:	68a3      	ldr	r3, [r4, #8]
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	60a3      	str	r3, [r4, #8]
 800c8da:	6923      	ldr	r3, [r4, #16]
 800c8dc:	3301      	adds	r3, #1
 800c8de:	6123      	str	r3, [r4, #16]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	607b      	str	r3, [r7, #4]
 800c8e8:	f340 8084 	ble.w	800c9f4 <_scanf_float+0x278>
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	603b      	str	r3, [r7, #0]
 800c8f2:	e766      	b.n	800c7c2 <_scanf_float+0x46>
 800c8f4:	eb1a 0f05 	cmn.w	sl, r5
 800c8f8:	f47f af70 	bne.w	800c7dc <_scanf_float+0x60>
 800c8fc:	6822      	ldr	r2, [r4, #0]
 800c8fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c902:	6022      	str	r2, [r4, #0]
 800c904:	f806 3b01 	strb.w	r3, [r6], #1
 800c908:	e7e4      	b.n	800c8d4 <_scanf_float+0x158>
 800c90a:	6822      	ldr	r2, [r4, #0]
 800c90c:	0610      	lsls	r0, r2, #24
 800c90e:	f57f af65 	bpl.w	800c7dc <_scanf_float+0x60>
 800c912:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c916:	e7f4      	b.n	800c902 <_scanf_float+0x186>
 800c918:	f1ba 0f00 	cmp.w	sl, #0
 800c91c:	d10e      	bne.n	800c93c <_scanf_float+0x1c0>
 800c91e:	f1b9 0f00 	cmp.w	r9, #0
 800c922:	d10e      	bne.n	800c942 <_scanf_float+0x1c6>
 800c924:	6822      	ldr	r2, [r4, #0]
 800c926:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c92a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c92e:	d108      	bne.n	800c942 <_scanf_float+0x1c6>
 800c930:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c934:	6022      	str	r2, [r4, #0]
 800c936:	f04f 0a01 	mov.w	sl, #1
 800c93a:	e7e3      	b.n	800c904 <_scanf_float+0x188>
 800c93c:	f1ba 0f02 	cmp.w	sl, #2
 800c940:	d055      	beq.n	800c9ee <_scanf_float+0x272>
 800c942:	2d01      	cmp	r5, #1
 800c944:	d002      	beq.n	800c94c <_scanf_float+0x1d0>
 800c946:	2d04      	cmp	r5, #4
 800c948:	f47f af48 	bne.w	800c7dc <_scanf_float+0x60>
 800c94c:	3501      	adds	r5, #1
 800c94e:	b2ed      	uxtb	r5, r5
 800c950:	e7d8      	b.n	800c904 <_scanf_float+0x188>
 800c952:	f1ba 0f01 	cmp.w	sl, #1
 800c956:	f47f af41 	bne.w	800c7dc <_scanf_float+0x60>
 800c95a:	f04f 0a02 	mov.w	sl, #2
 800c95e:	e7d1      	b.n	800c904 <_scanf_float+0x188>
 800c960:	b97d      	cbnz	r5, 800c982 <_scanf_float+0x206>
 800c962:	f1b9 0f00 	cmp.w	r9, #0
 800c966:	f47f af3c 	bne.w	800c7e2 <_scanf_float+0x66>
 800c96a:	6822      	ldr	r2, [r4, #0]
 800c96c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c970:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c974:	f47f af39 	bne.w	800c7ea <_scanf_float+0x6e>
 800c978:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c97c:	6022      	str	r2, [r4, #0]
 800c97e:	2501      	movs	r5, #1
 800c980:	e7c0      	b.n	800c904 <_scanf_float+0x188>
 800c982:	2d03      	cmp	r5, #3
 800c984:	d0e2      	beq.n	800c94c <_scanf_float+0x1d0>
 800c986:	2d05      	cmp	r5, #5
 800c988:	e7de      	b.n	800c948 <_scanf_float+0x1cc>
 800c98a:	2d02      	cmp	r5, #2
 800c98c:	f47f af26 	bne.w	800c7dc <_scanf_float+0x60>
 800c990:	2503      	movs	r5, #3
 800c992:	e7b7      	b.n	800c904 <_scanf_float+0x188>
 800c994:	2d06      	cmp	r5, #6
 800c996:	f47f af21 	bne.w	800c7dc <_scanf_float+0x60>
 800c99a:	2507      	movs	r5, #7
 800c99c:	e7b2      	b.n	800c904 <_scanf_float+0x188>
 800c99e:	6822      	ldr	r2, [r4, #0]
 800c9a0:	0591      	lsls	r1, r2, #22
 800c9a2:	f57f af1b 	bpl.w	800c7dc <_scanf_float+0x60>
 800c9a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c9aa:	6022      	str	r2, [r4, #0]
 800c9ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800c9b0:	e7a8      	b.n	800c904 <_scanf_float+0x188>
 800c9b2:	6822      	ldr	r2, [r4, #0]
 800c9b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c9b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c9bc:	d006      	beq.n	800c9cc <_scanf_float+0x250>
 800c9be:	0550      	lsls	r0, r2, #21
 800c9c0:	f57f af0c 	bpl.w	800c7dc <_scanf_float+0x60>
 800c9c4:	f1b9 0f00 	cmp.w	r9, #0
 800c9c8:	f43f af0f 	beq.w	800c7ea <_scanf_float+0x6e>
 800c9cc:	0591      	lsls	r1, r2, #22
 800c9ce:	bf58      	it	pl
 800c9d0:	9901      	ldrpl	r1, [sp, #4]
 800c9d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c9d6:	bf58      	it	pl
 800c9d8:	eba9 0101 	subpl.w	r1, r9, r1
 800c9dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c9e0:	bf58      	it	pl
 800c9e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c9e6:	6022      	str	r2, [r4, #0]
 800c9e8:	f04f 0900 	mov.w	r9, #0
 800c9ec:	e78a      	b.n	800c904 <_scanf_float+0x188>
 800c9ee:	f04f 0a03 	mov.w	sl, #3
 800c9f2:	e787      	b.n	800c904 <_scanf_float+0x188>
 800c9f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c9f8:	4639      	mov	r1, r7
 800c9fa:	4640      	mov	r0, r8
 800c9fc:	4798      	blx	r3
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	f43f aedf 	beq.w	800c7c2 <_scanf_float+0x46>
 800ca04:	e6ea      	b.n	800c7dc <_scanf_float+0x60>
 800ca06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca0e:	463a      	mov	r2, r7
 800ca10:	4640      	mov	r0, r8
 800ca12:	4798      	blx	r3
 800ca14:	6923      	ldr	r3, [r4, #16]
 800ca16:	3b01      	subs	r3, #1
 800ca18:	6123      	str	r3, [r4, #16]
 800ca1a:	e6ec      	b.n	800c7f6 <_scanf_float+0x7a>
 800ca1c:	1e6b      	subs	r3, r5, #1
 800ca1e:	2b06      	cmp	r3, #6
 800ca20:	d825      	bhi.n	800ca6e <_scanf_float+0x2f2>
 800ca22:	2d02      	cmp	r5, #2
 800ca24:	d836      	bhi.n	800ca94 <_scanf_float+0x318>
 800ca26:	455e      	cmp	r6, fp
 800ca28:	f67f aee8 	bls.w	800c7fc <_scanf_float+0x80>
 800ca2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca34:	463a      	mov	r2, r7
 800ca36:	4640      	mov	r0, r8
 800ca38:	4798      	blx	r3
 800ca3a:	6923      	ldr	r3, [r4, #16]
 800ca3c:	3b01      	subs	r3, #1
 800ca3e:	6123      	str	r3, [r4, #16]
 800ca40:	e7f1      	b.n	800ca26 <_scanf_float+0x2aa>
 800ca42:	9802      	ldr	r0, [sp, #8]
 800ca44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca48:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ca4c:	9002      	str	r0, [sp, #8]
 800ca4e:	463a      	mov	r2, r7
 800ca50:	4640      	mov	r0, r8
 800ca52:	4798      	blx	r3
 800ca54:	6923      	ldr	r3, [r4, #16]
 800ca56:	3b01      	subs	r3, #1
 800ca58:	6123      	str	r3, [r4, #16]
 800ca5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca5e:	fa5f fa8a 	uxtb.w	sl, sl
 800ca62:	f1ba 0f02 	cmp.w	sl, #2
 800ca66:	d1ec      	bne.n	800ca42 <_scanf_float+0x2c6>
 800ca68:	3d03      	subs	r5, #3
 800ca6a:	b2ed      	uxtb	r5, r5
 800ca6c:	1b76      	subs	r6, r6, r5
 800ca6e:	6823      	ldr	r3, [r4, #0]
 800ca70:	05da      	lsls	r2, r3, #23
 800ca72:	d52f      	bpl.n	800cad4 <_scanf_float+0x358>
 800ca74:	055b      	lsls	r3, r3, #21
 800ca76:	d510      	bpl.n	800ca9a <_scanf_float+0x31e>
 800ca78:	455e      	cmp	r6, fp
 800ca7a:	f67f aebf 	bls.w	800c7fc <_scanf_float+0x80>
 800ca7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca86:	463a      	mov	r2, r7
 800ca88:	4640      	mov	r0, r8
 800ca8a:	4798      	blx	r3
 800ca8c:	6923      	ldr	r3, [r4, #16]
 800ca8e:	3b01      	subs	r3, #1
 800ca90:	6123      	str	r3, [r4, #16]
 800ca92:	e7f1      	b.n	800ca78 <_scanf_float+0x2fc>
 800ca94:	46aa      	mov	sl, r5
 800ca96:	9602      	str	r6, [sp, #8]
 800ca98:	e7df      	b.n	800ca5a <_scanf_float+0x2de>
 800ca9a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ca9e:	6923      	ldr	r3, [r4, #16]
 800caa0:	2965      	cmp	r1, #101	; 0x65
 800caa2:	f103 33ff 	add.w	r3, r3, #4294967295
 800caa6:	f106 35ff 	add.w	r5, r6, #4294967295
 800caaa:	6123      	str	r3, [r4, #16]
 800caac:	d00c      	beq.n	800cac8 <_scanf_float+0x34c>
 800caae:	2945      	cmp	r1, #69	; 0x45
 800cab0:	d00a      	beq.n	800cac8 <_scanf_float+0x34c>
 800cab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cab6:	463a      	mov	r2, r7
 800cab8:	4640      	mov	r0, r8
 800caba:	4798      	blx	r3
 800cabc:	6923      	ldr	r3, [r4, #16]
 800cabe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cac2:	3b01      	subs	r3, #1
 800cac4:	1eb5      	subs	r5, r6, #2
 800cac6:	6123      	str	r3, [r4, #16]
 800cac8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cacc:	463a      	mov	r2, r7
 800cace:	4640      	mov	r0, r8
 800cad0:	4798      	blx	r3
 800cad2:	462e      	mov	r6, r5
 800cad4:	6825      	ldr	r5, [r4, #0]
 800cad6:	f015 0510 	ands.w	r5, r5, #16
 800cada:	d159      	bne.n	800cb90 <_scanf_float+0x414>
 800cadc:	7035      	strb	r5, [r6, #0]
 800cade:	6823      	ldr	r3, [r4, #0]
 800cae0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cae8:	d11b      	bne.n	800cb22 <_scanf_float+0x3a6>
 800caea:	9b01      	ldr	r3, [sp, #4]
 800caec:	454b      	cmp	r3, r9
 800caee:	eba3 0209 	sub.w	r2, r3, r9
 800caf2:	d123      	bne.n	800cb3c <_scanf_float+0x3c0>
 800caf4:	2200      	movs	r2, #0
 800caf6:	4659      	mov	r1, fp
 800caf8:	4640      	mov	r0, r8
 800cafa:	f000 fe97 	bl	800d82c <_strtod_r>
 800cafe:	6822      	ldr	r2, [r4, #0]
 800cb00:	9b03      	ldr	r3, [sp, #12]
 800cb02:	f012 0f02 	tst.w	r2, #2
 800cb06:	ec57 6b10 	vmov	r6, r7, d0
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	d021      	beq.n	800cb52 <_scanf_float+0x3d6>
 800cb0e:	9903      	ldr	r1, [sp, #12]
 800cb10:	1d1a      	adds	r2, r3, #4
 800cb12:	600a      	str	r2, [r1, #0]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	e9c3 6700 	strd	r6, r7, [r3]
 800cb1a:	68e3      	ldr	r3, [r4, #12]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	60e3      	str	r3, [r4, #12]
 800cb20:	e66d      	b.n	800c7fe <_scanf_float+0x82>
 800cb22:	9b04      	ldr	r3, [sp, #16]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d0e5      	beq.n	800caf4 <_scanf_float+0x378>
 800cb28:	9905      	ldr	r1, [sp, #20]
 800cb2a:	230a      	movs	r3, #10
 800cb2c:	462a      	mov	r2, r5
 800cb2e:	3101      	adds	r1, #1
 800cb30:	4640      	mov	r0, r8
 800cb32:	f000 ff03 	bl	800d93c <_strtol_r>
 800cb36:	9b04      	ldr	r3, [sp, #16]
 800cb38:	9e05      	ldr	r6, [sp, #20]
 800cb3a:	1ac2      	subs	r2, r0, r3
 800cb3c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cb40:	429e      	cmp	r6, r3
 800cb42:	bf28      	it	cs
 800cb44:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cb48:	4912      	ldr	r1, [pc, #72]	; (800cb94 <_scanf_float+0x418>)
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	f000 f82c 	bl	800cba8 <siprintf>
 800cb50:	e7d0      	b.n	800caf4 <_scanf_float+0x378>
 800cb52:	9903      	ldr	r1, [sp, #12]
 800cb54:	f012 0f04 	tst.w	r2, #4
 800cb58:	f103 0204 	add.w	r2, r3, #4
 800cb5c:	600a      	str	r2, [r1, #0]
 800cb5e:	d1d9      	bne.n	800cb14 <_scanf_float+0x398>
 800cb60:	f8d3 8000 	ldr.w	r8, [r3]
 800cb64:	ee10 2a10 	vmov	r2, s0
 800cb68:	ee10 0a10 	vmov	r0, s0
 800cb6c:	463b      	mov	r3, r7
 800cb6e:	4639      	mov	r1, r7
 800cb70:	f7f3 ffe4 	bl	8000b3c <__aeabi_dcmpun>
 800cb74:	b128      	cbz	r0, 800cb82 <_scanf_float+0x406>
 800cb76:	4808      	ldr	r0, [pc, #32]	; (800cb98 <_scanf_float+0x41c>)
 800cb78:	f000 f810 	bl	800cb9c <nanf>
 800cb7c:	ed88 0a00 	vstr	s0, [r8]
 800cb80:	e7cb      	b.n	800cb1a <_scanf_float+0x39e>
 800cb82:	4630      	mov	r0, r6
 800cb84:	4639      	mov	r1, r7
 800cb86:	f7f4 f837 	bl	8000bf8 <__aeabi_d2f>
 800cb8a:	f8c8 0000 	str.w	r0, [r8]
 800cb8e:	e7c4      	b.n	800cb1a <_scanf_float+0x39e>
 800cb90:	2500      	movs	r5, #0
 800cb92:	e634      	b.n	800c7fe <_scanf_float+0x82>
 800cb94:	08012eb4 	.word	0x08012eb4
 800cb98:	080132c0 	.word	0x080132c0

0800cb9c <nanf>:
 800cb9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cba4 <nanf+0x8>
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	7fc00000 	.word	0x7fc00000

0800cba8 <siprintf>:
 800cba8:	b40e      	push	{r1, r2, r3}
 800cbaa:	b500      	push	{lr}
 800cbac:	b09c      	sub	sp, #112	; 0x70
 800cbae:	ab1d      	add	r3, sp, #116	; 0x74
 800cbb0:	9002      	str	r0, [sp, #8]
 800cbb2:	9006      	str	r0, [sp, #24]
 800cbb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cbb8:	4809      	ldr	r0, [pc, #36]	; (800cbe0 <siprintf+0x38>)
 800cbba:	9107      	str	r1, [sp, #28]
 800cbbc:	9104      	str	r1, [sp, #16]
 800cbbe:	4909      	ldr	r1, [pc, #36]	; (800cbe4 <siprintf+0x3c>)
 800cbc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbc4:	9105      	str	r1, [sp, #20]
 800cbc6:	6800      	ldr	r0, [r0, #0]
 800cbc8:	9301      	str	r3, [sp, #4]
 800cbca:	a902      	add	r1, sp, #8
 800cbcc:	f002 fed4 	bl	800f978 <_svfiprintf_r>
 800cbd0:	9b02      	ldr	r3, [sp, #8]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	701a      	strb	r2, [r3, #0]
 800cbd6:	b01c      	add	sp, #112	; 0x70
 800cbd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbdc:	b003      	add	sp, #12
 800cbde:	4770      	bx	lr
 800cbe0:	2000023c 	.word	0x2000023c
 800cbe4:	ffff0208 	.word	0xffff0208

0800cbe8 <sulp>:
 800cbe8:	b570      	push	{r4, r5, r6, lr}
 800cbea:	4604      	mov	r4, r0
 800cbec:	460d      	mov	r5, r1
 800cbee:	ec45 4b10 	vmov	d0, r4, r5
 800cbf2:	4616      	mov	r6, r2
 800cbf4:	f002 fc1e 	bl	800f434 <__ulp>
 800cbf8:	ec51 0b10 	vmov	r0, r1, d0
 800cbfc:	b17e      	cbz	r6, 800cc1e <sulp+0x36>
 800cbfe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cc02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	dd09      	ble.n	800cc1e <sulp+0x36>
 800cc0a:	051b      	lsls	r3, r3, #20
 800cc0c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cc10:	2400      	movs	r4, #0
 800cc12:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cc16:	4622      	mov	r2, r4
 800cc18:	462b      	mov	r3, r5
 800cc1a:	f7f3 fcf5 	bl	8000608 <__aeabi_dmul>
 800cc1e:	bd70      	pop	{r4, r5, r6, pc}

0800cc20 <_strtod_l>:
 800cc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc24:	ed2d 8b02 	vpush	{d8}
 800cc28:	b09d      	sub	sp, #116	; 0x74
 800cc2a:	461f      	mov	r7, r3
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	9318      	str	r3, [sp, #96]	; 0x60
 800cc30:	4ba2      	ldr	r3, [pc, #648]	; (800cebc <_strtod_l+0x29c>)
 800cc32:	9213      	str	r2, [sp, #76]	; 0x4c
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	9305      	str	r3, [sp, #20]
 800cc38:	4604      	mov	r4, r0
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	4688      	mov	r8, r1
 800cc3e:	f7f3 facf 	bl	80001e0 <strlen>
 800cc42:	f04f 0a00 	mov.w	sl, #0
 800cc46:	4605      	mov	r5, r0
 800cc48:	f04f 0b00 	mov.w	fp, #0
 800cc4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cc50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc52:	781a      	ldrb	r2, [r3, #0]
 800cc54:	2a2b      	cmp	r2, #43	; 0x2b
 800cc56:	d04e      	beq.n	800ccf6 <_strtod_l+0xd6>
 800cc58:	d83b      	bhi.n	800ccd2 <_strtod_l+0xb2>
 800cc5a:	2a0d      	cmp	r2, #13
 800cc5c:	d834      	bhi.n	800ccc8 <_strtod_l+0xa8>
 800cc5e:	2a08      	cmp	r2, #8
 800cc60:	d834      	bhi.n	800cccc <_strtod_l+0xac>
 800cc62:	2a00      	cmp	r2, #0
 800cc64:	d03e      	beq.n	800cce4 <_strtod_l+0xc4>
 800cc66:	2300      	movs	r3, #0
 800cc68:	930a      	str	r3, [sp, #40]	; 0x28
 800cc6a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cc6c:	7833      	ldrb	r3, [r6, #0]
 800cc6e:	2b30      	cmp	r3, #48	; 0x30
 800cc70:	f040 80b0 	bne.w	800cdd4 <_strtod_l+0x1b4>
 800cc74:	7873      	ldrb	r3, [r6, #1]
 800cc76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cc7a:	2b58      	cmp	r3, #88	; 0x58
 800cc7c:	d168      	bne.n	800cd50 <_strtod_l+0x130>
 800cc7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc80:	9301      	str	r3, [sp, #4]
 800cc82:	ab18      	add	r3, sp, #96	; 0x60
 800cc84:	9702      	str	r7, [sp, #8]
 800cc86:	9300      	str	r3, [sp, #0]
 800cc88:	4a8d      	ldr	r2, [pc, #564]	; (800cec0 <_strtod_l+0x2a0>)
 800cc8a:	ab19      	add	r3, sp, #100	; 0x64
 800cc8c:	a917      	add	r1, sp, #92	; 0x5c
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f001 fd38 	bl	800e704 <__gethex>
 800cc94:	f010 0707 	ands.w	r7, r0, #7
 800cc98:	4605      	mov	r5, r0
 800cc9a:	d005      	beq.n	800cca8 <_strtod_l+0x88>
 800cc9c:	2f06      	cmp	r7, #6
 800cc9e:	d12c      	bne.n	800ccfa <_strtod_l+0xda>
 800cca0:	3601      	adds	r6, #1
 800cca2:	2300      	movs	r3, #0
 800cca4:	9617      	str	r6, [sp, #92]	; 0x5c
 800cca6:	930a      	str	r3, [sp, #40]	; 0x28
 800cca8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	f040 8590 	bne.w	800d7d0 <_strtod_l+0xbb0>
 800ccb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccb2:	b1eb      	cbz	r3, 800ccf0 <_strtod_l+0xd0>
 800ccb4:	4652      	mov	r2, sl
 800ccb6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ccba:	ec43 2b10 	vmov	d0, r2, r3
 800ccbe:	b01d      	add	sp, #116	; 0x74
 800ccc0:	ecbd 8b02 	vpop	{d8}
 800ccc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc8:	2a20      	cmp	r2, #32
 800ccca:	d1cc      	bne.n	800cc66 <_strtod_l+0x46>
 800cccc:	3301      	adds	r3, #1
 800ccce:	9317      	str	r3, [sp, #92]	; 0x5c
 800ccd0:	e7be      	b.n	800cc50 <_strtod_l+0x30>
 800ccd2:	2a2d      	cmp	r2, #45	; 0x2d
 800ccd4:	d1c7      	bne.n	800cc66 <_strtod_l+0x46>
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	920a      	str	r2, [sp, #40]	; 0x28
 800ccda:	1c5a      	adds	r2, r3, #1
 800ccdc:	9217      	str	r2, [sp, #92]	; 0x5c
 800ccde:	785b      	ldrb	r3, [r3, #1]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d1c2      	bne.n	800cc6a <_strtod_l+0x4a>
 800cce4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cce6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	f040 856e 	bne.w	800d7cc <_strtod_l+0xbac>
 800ccf0:	4652      	mov	r2, sl
 800ccf2:	465b      	mov	r3, fp
 800ccf4:	e7e1      	b.n	800ccba <_strtod_l+0x9a>
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	e7ee      	b.n	800ccd8 <_strtod_l+0xb8>
 800ccfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ccfc:	b13a      	cbz	r2, 800cd0e <_strtod_l+0xee>
 800ccfe:	2135      	movs	r1, #53	; 0x35
 800cd00:	a81a      	add	r0, sp, #104	; 0x68
 800cd02:	f002 fca2 	bl	800f64a <__copybits>
 800cd06:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f002 f861 	bl	800edd0 <_Bfree>
 800cd0e:	3f01      	subs	r7, #1
 800cd10:	2f04      	cmp	r7, #4
 800cd12:	d806      	bhi.n	800cd22 <_strtod_l+0x102>
 800cd14:	e8df f007 	tbb	[pc, r7]
 800cd18:	1714030a 	.word	0x1714030a
 800cd1c:	0a          	.byte	0x0a
 800cd1d:	00          	.byte	0x00
 800cd1e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cd22:	0728      	lsls	r0, r5, #28
 800cd24:	d5c0      	bpl.n	800cca8 <_strtod_l+0x88>
 800cd26:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cd2a:	e7bd      	b.n	800cca8 <_strtod_l+0x88>
 800cd2c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800cd30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cd32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cd36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cd3a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cd3e:	e7f0      	b.n	800cd22 <_strtod_l+0x102>
 800cd40:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cec4 <_strtod_l+0x2a4>
 800cd44:	e7ed      	b.n	800cd22 <_strtod_l+0x102>
 800cd46:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cd4a:	f04f 3aff 	mov.w	sl, #4294967295
 800cd4e:	e7e8      	b.n	800cd22 <_strtod_l+0x102>
 800cd50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd52:	1c5a      	adds	r2, r3, #1
 800cd54:	9217      	str	r2, [sp, #92]	; 0x5c
 800cd56:	785b      	ldrb	r3, [r3, #1]
 800cd58:	2b30      	cmp	r3, #48	; 0x30
 800cd5a:	d0f9      	beq.n	800cd50 <_strtod_l+0x130>
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d0a3      	beq.n	800cca8 <_strtod_l+0x88>
 800cd60:	2301      	movs	r3, #1
 800cd62:	f04f 0900 	mov.w	r9, #0
 800cd66:	9304      	str	r3, [sp, #16]
 800cd68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd6a:	9308      	str	r3, [sp, #32]
 800cd6c:	f8cd 901c 	str.w	r9, [sp, #28]
 800cd70:	464f      	mov	r7, r9
 800cd72:	220a      	movs	r2, #10
 800cd74:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cd76:	7806      	ldrb	r6, [r0, #0]
 800cd78:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cd7c:	b2d9      	uxtb	r1, r3
 800cd7e:	2909      	cmp	r1, #9
 800cd80:	d92a      	bls.n	800cdd8 <_strtod_l+0x1b8>
 800cd82:	9905      	ldr	r1, [sp, #20]
 800cd84:	462a      	mov	r2, r5
 800cd86:	f002 ff0f 	bl	800fba8 <strncmp>
 800cd8a:	b398      	cbz	r0, 800cdf4 <_strtod_l+0x1d4>
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	4632      	mov	r2, r6
 800cd90:	463d      	mov	r5, r7
 800cd92:	9005      	str	r0, [sp, #20]
 800cd94:	4603      	mov	r3, r0
 800cd96:	2a65      	cmp	r2, #101	; 0x65
 800cd98:	d001      	beq.n	800cd9e <_strtod_l+0x17e>
 800cd9a:	2a45      	cmp	r2, #69	; 0x45
 800cd9c:	d118      	bne.n	800cdd0 <_strtod_l+0x1b0>
 800cd9e:	b91d      	cbnz	r5, 800cda8 <_strtod_l+0x188>
 800cda0:	9a04      	ldr	r2, [sp, #16]
 800cda2:	4302      	orrs	r2, r0
 800cda4:	d09e      	beq.n	800cce4 <_strtod_l+0xc4>
 800cda6:	2500      	movs	r5, #0
 800cda8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800cdac:	f108 0201 	add.w	r2, r8, #1
 800cdb0:	9217      	str	r2, [sp, #92]	; 0x5c
 800cdb2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cdb6:	2a2b      	cmp	r2, #43	; 0x2b
 800cdb8:	d075      	beq.n	800cea6 <_strtod_l+0x286>
 800cdba:	2a2d      	cmp	r2, #45	; 0x2d
 800cdbc:	d07b      	beq.n	800ceb6 <_strtod_l+0x296>
 800cdbe:	f04f 0c00 	mov.w	ip, #0
 800cdc2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cdc6:	2909      	cmp	r1, #9
 800cdc8:	f240 8082 	bls.w	800ced0 <_strtod_l+0x2b0>
 800cdcc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cdd0:	2600      	movs	r6, #0
 800cdd2:	e09d      	b.n	800cf10 <_strtod_l+0x2f0>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	e7c4      	b.n	800cd62 <_strtod_l+0x142>
 800cdd8:	2f08      	cmp	r7, #8
 800cdda:	bfd8      	it	le
 800cddc:	9907      	ldrle	r1, [sp, #28]
 800cdde:	f100 0001 	add.w	r0, r0, #1
 800cde2:	bfda      	itte	le
 800cde4:	fb02 3301 	mlale	r3, r2, r1, r3
 800cde8:	9307      	strle	r3, [sp, #28]
 800cdea:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cdee:	3701      	adds	r7, #1
 800cdf0:	9017      	str	r0, [sp, #92]	; 0x5c
 800cdf2:	e7bf      	b.n	800cd74 <_strtod_l+0x154>
 800cdf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cdf6:	195a      	adds	r2, r3, r5
 800cdf8:	9217      	str	r2, [sp, #92]	; 0x5c
 800cdfa:	5d5a      	ldrb	r2, [r3, r5]
 800cdfc:	2f00      	cmp	r7, #0
 800cdfe:	d037      	beq.n	800ce70 <_strtod_l+0x250>
 800ce00:	9005      	str	r0, [sp, #20]
 800ce02:	463d      	mov	r5, r7
 800ce04:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ce08:	2b09      	cmp	r3, #9
 800ce0a:	d912      	bls.n	800ce32 <_strtod_l+0x212>
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	e7c2      	b.n	800cd96 <_strtod_l+0x176>
 800ce10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce12:	1c5a      	adds	r2, r3, #1
 800ce14:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce16:	785a      	ldrb	r2, [r3, #1]
 800ce18:	3001      	adds	r0, #1
 800ce1a:	2a30      	cmp	r2, #48	; 0x30
 800ce1c:	d0f8      	beq.n	800ce10 <_strtod_l+0x1f0>
 800ce1e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ce22:	2b08      	cmp	r3, #8
 800ce24:	f200 84d9 	bhi.w	800d7da <_strtod_l+0xbba>
 800ce28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce2a:	9005      	str	r0, [sp, #20]
 800ce2c:	2000      	movs	r0, #0
 800ce2e:	9308      	str	r3, [sp, #32]
 800ce30:	4605      	mov	r5, r0
 800ce32:	3a30      	subs	r2, #48	; 0x30
 800ce34:	f100 0301 	add.w	r3, r0, #1
 800ce38:	d014      	beq.n	800ce64 <_strtod_l+0x244>
 800ce3a:	9905      	ldr	r1, [sp, #20]
 800ce3c:	4419      	add	r1, r3
 800ce3e:	9105      	str	r1, [sp, #20]
 800ce40:	462b      	mov	r3, r5
 800ce42:	eb00 0e05 	add.w	lr, r0, r5
 800ce46:	210a      	movs	r1, #10
 800ce48:	4573      	cmp	r3, lr
 800ce4a:	d113      	bne.n	800ce74 <_strtod_l+0x254>
 800ce4c:	182b      	adds	r3, r5, r0
 800ce4e:	2b08      	cmp	r3, #8
 800ce50:	f105 0501 	add.w	r5, r5, #1
 800ce54:	4405      	add	r5, r0
 800ce56:	dc1c      	bgt.n	800ce92 <_strtod_l+0x272>
 800ce58:	9907      	ldr	r1, [sp, #28]
 800ce5a:	230a      	movs	r3, #10
 800ce5c:	fb03 2301 	mla	r3, r3, r1, r2
 800ce60:	9307      	str	r3, [sp, #28]
 800ce62:	2300      	movs	r3, #0
 800ce64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ce66:	1c51      	adds	r1, r2, #1
 800ce68:	9117      	str	r1, [sp, #92]	; 0x5c
 800ce6a:	7852      	ldrb	r2, [r2, #1]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	e7c9      	b.n	800ce04 <_strtod_l+0x1e4>
 800ce70:	4638      	mov	r0, r7
 800ce72:	e7d2      	b.n	800ce1a <_strtod_l+0x1fa>
 800ce74:	2b08      	cmp	r3, #8
 800ce76:	dc04      	bgt.n	800ce82 <_strtod_l+0x262>
 800ce78:	9e07      	ldr	r6, [sp, #28]
 800ce7a:	434e      	muls	r6, r1
 800ce7c:	9607      	str	r6, [sp, #28]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	e7e2      	b.n	800ce48 <_strtod_l+0x228>
 800ce82:	f103 0c01 	add.w	ip, r3, #1
 800ce86:	f1bc 0f10 	cmp.w	ip, #16
 800ce8a:	bfd8      	it	le
 800ce8c:	fb01 f909 	mulle.w	r9, r1, r9
 800ce90:	e7f5      	b.n	800ce7e <_strtod_l+0x25e>
 800ce92:	2d10      	cmp	r5, #16
 800ce94:	bfdc      	itt	le
 800ce96:	230a      	movle	r3, #10
 800ce98:	fb03 2909 	mlale	r9, r3, r9, r2
 800ce9c:	e7e1      	b.n	800ce62 <_strtod_l+0x242>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	9305      	str	r3, [sp, #20]
 800cea2:	2301      	movs	r3, #1
 800cea4:	e77c      	b.n	800cda0 <_strtod_l+0x180>
 800cea6:	f04f 0c00 	mov.w	ip, #0
 800ceaa:	f108 0202 	add.w	r2, r8, #2
 800ceae:	9217      	str	r2, [sp, #92]	; 0x5c
 800ceb0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ceb4:	e785      	b.n	800cdc2 <_strtod_l+0x1a2>
 800ceb6:	f04f 0c01 	mov.w	ip, #1
 800ceba:	e7f6      	b.n	800ceaa <_strtod_l+0x28a>
 800cebc:	08013108 	.word	0x08013108
 800cec0:	08012ebc 	.word	0x08012ebc
 800cec4:	7ff00000 	.word	0x7ff00000
 800cec8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ceca:	1c51      	adds	r1, r2, #1
 800cecc:	9117      	str	r1, [sp, #92]	; 0x5c
 800cece:	7852      	ldrb	r2, [r2, #1]
 800ced0:	2a30      	cmp	r2, #48	; 0x30
 800ced2:	d0f9      	beq.n	800cec8 <_strtod_l+0x2a8>
 800ced4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ced8:	2908      	cmp	r1, #8
 800ceda:	f63f af79 	bhi.w	800cdd0 <_strtod_l+0x1b0>
 800cede:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cee2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cee4:	9206      	str	r2, [sp, #24]
 800cee6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cee8:	1c51      	adds	r1, r2, #1
 800ceea:	9117      	str	r1, [sp, #92]	; 0x5c
 800ceec:	7852      	ldrb	r2, [r2, #1]
 800ceee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cef2:	2e09      	cmp	r6, #9
 800cef4:	d937      	bls.n	800cf66 <_strtod_l+0x346>
 800cef6:	9e06      	ldr	r6, [sp, #24]
 800cef8:	1b89      	subs	r1, r1, r6
 800cefa:	2908      	cmp	r1, #8
 800cefc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cf00:	dc02      	bgt.n	800cf08 <_strtod_l+0x2e8>
 800cf02:	4576      	cmp	r6, lr
 800cf04:	bfa8      	it	ge
 800cf06:	4676      	movge	r6, lr
 800cf08:	f1bc 0f00 	cmp.w	ip, #0
 800cf0c:	d000      	beq.n	800cf10 <_strtod_l+0x2f0>
 800cf0e:	4276      	negs	r6, r6
 800cf10:	2d00      	cmp	r5, #0
 800cf12:	d14d      	bne.n	800cfb0 <_strtod_l+0x390>
 800cf14:	9904      	ldr	r1, [sp, #16]
 800cf16:	4301      	orrs	r1, r0
 800cf18:	f47f aec6 	bne.w	800cca8 <_strtod_l+0x88>
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f47f aee1 	bne.w	800cce4 <_strtod_l+0xc4>
 800cf22:	2a69      	cmp	r2, #105	; 0x69
 800cf24:	d027      	beq.n	800cf76 <_strtod_l+0x356>
 800cf26:	dc24      	bgt.n	800cf72 <_strtod_l+0x352>
 800cf28:	2a49      	cmp	r2, #73	; 0x49
 800cf2a:	d024      	beq.n	800cf76 <_strtod_l+0x356>
 800cf2c:	2a4e      	cmp	r2, #78	; 0x4e
 800cf2e:	f47f aed9 	bne.w	800cce4 <_strtod_l+0xc4>
 800cf32:	499f      	ldr	r1, [pc, #636]	; (800d1b0 <_strtod_l+0x590>)
 800cf34:	a817      	add	r0, sp, #92	; 0x5c
 800cf36:	f001 fe3d 	bl	800ebb4 <__match>
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	f43f aed2 	beq.w	800cce4 <_strtod_l+0xc4>
 800cf40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	2b28      	cmp	r3, #40	; 0x28
 800cf46:	d12d      	bne.n	800cfa4 <_strtod_l+0x384>
 800cf48:	499a      	ldr	r1, [pc, #616]	; (800d1b4 <_strtod_l+0x594>)
 800cf4a:	aa1a      	add	r2, sp, #104	; 0x68
 800cf4c:	a817      	add	r0, sp, #92	; 0x5c
 800cf4e:	f001 fe45 	bl	800ebdc <__hexnan>
 800cf52:	2805      	cmp	r0, #5
 800cf54:	d126      	bne.n	800cfa4 <_strtod_l+0x384>
 800cf56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf58:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cf5c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cf60:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cf64:	e6a0      	b.n	800cca8 <_strtod_l+0x88>
 800cf66:	210a      	movs	r1, #10
 800cf68:	fb01 2e0e 	mla	lr, r1, lr, r2
 800cf6c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cf70:	e7b9      	b.n	800cee6 <_strtod_l+0x2c6>
 800cf72:	2a6e      	cmp	r2, #110	; 0x6e
 800cf74:	e7db      	b.n	800cf2e <_strtod_l+0x30e>
 800cf76:	4990      	ldr	r1, [pc, #576]	; (800d1b8 <_strtod_l+0x598>)
 800cf78:	a817      	add	r0, sp, #92	; 0x5c
 800cf7a:	f001 fe1b 	bl	800ebb4 <__match>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	f43f aeb0 	beq.w	800cce4 <_strtod_l+0xc4>
 800cf84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf86:	498d      	ldr	r1, [pc, #564]	; (800d1bc <_strtod_l+0x59c>)
 800cf88:	3b01      	subs	r3, #1
 800cf8a:	a817      	add	r0, sp, #92	; 0x5c
 800cf8c:	9317      	str	r3, [sp, #92]	; 0x5c
 800cf8e:	f001 fe11 	bl	800ebb4 <__match>
 800cf92:	b910      	cbnz	r0, 800cf9a <_strtod_l+0x37a>
 800cf94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf96:	3301      	adds	r3, #1
 800cf98:	9317      	str	r3, [sp, #92]	; 0x5c
 800cf9a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d1cc <_strtod_l+0x5ac>
 800cf9e:	f04f 0a00 	mov.w	sl, #0
 800cfa2:	e681      	b.n	800cca8 <_strtod_l+0x88>
 800cfa4:	4886      	ldr	r0, [pc, #536]	; (800d1c0 <_strtod_l+0x5a0>)
 800cfa6:	f002 fde7 	bl	800fb78 <nan>
 800cfaa:	ec5b ab10 	vmov	sl, fp, d0
 800cfae:	e67b      	b.n	800cca8 <_strtod_l+0x88>
 800cfb0:	9b05      	ldr	r3, [sp, #20]
 800cfb2:	9807      	ldr	r0, [sp, #28]
 800cfb4:	1af3      	subs	r3, r6, r3
 800cfb6:	2f00      	cmp	r7, #0
 800cfb8:	bf08      	it	eq
 800cfba:	462f      	moveq	r7, r5
 800cfbc:	2d10      	cmp	r5, #16
 800cfbe:	9306      	str	r3, [sp, #24]
 800cfc0:	46a8      	mov	r8, r5
 800cfc2:	bfa8      	it	ge
 800cfc4:	f04f 0810 	movge.w	r8, #16
 800cfc8:	f7f3 faa4 	bl	8000514 <__aeabi_ui2d>
 800cfcc:	2d09      	cmp	r5, #9
 800cfce:	4682      	mov	sl, r0
 800cfd0:	468b      	mov	fp, r1
 800cfd2:	dd13      	ble.n	800cffc <_strtod_l+0x3dc>
 800cfd4:	4b7b      	ldr	r3, [pc, #492]	; (800d1c4 <_strtod_l+0x5a4>)
 800cfd6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cfda:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cfde:	f7f3 fb13 	bl	8000608 <__aeabi_dmul>
 800cfe2:	4682      	mov	sl, r0
 800cfe4:	4648      	mov	r0, r9
 800cfe6:	468b      	mov	fp, r1
 800cfe8:	f7f3 fa94 	bl	8000514 <__aeabi_ui2d>
 800cfec:	4602      	mov	r2, r0
 800cfee:	460b      	mov	r3, r1
 800cff0:	4650      	mov	r0, sl
 800cff2:	4659      	mov	r1, fp
 800cff4:	f7f3 f952 	bl	800029c <__adddf3>
 800cff8:	4682      	mov	sl, r0
 800cffa:	468b      	mov	fp, r1
 800cffc:	2d0f      	cmp	r5, #15
 800cffe:	dc38      	bgt.n	800d072 <_strtod_l+0x452>
 800d000:	9b06      	ldr	r3, [sp, #24]
 800d002:	2b00      	cmp	r3, #0
 800d004:	f43f ae50 	beq.w	800cca8 <_strtod_l+0x88>
 800d008:	dd24      	ble.n	800d054 <_strtod_l+0x434>
 800d00a:	2b16      	cmp	r3, #22
 800d00c:	dc0b      	bgt.n	800d026 <_strtod_l+0x406>
 800d00e:	496d      	ldr	r1, [pc, #436]	; (800d1c4 <_strtod_l+0x5a4>)
 800d010:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d014:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d018:	4652      	mov	r2, sl
 800d01a:	465b      	mov	r3, fp
 800d01c:	f7f3 faf4 	bl	8000608 <__aeabi_dmul>
 800d020:	4682      	mov	sl, r0
 800d022:	468b      	mov	fp, r1
 800d024:	e640      	b.n	800cca8 <_strtod_l+0x88>
 800d026:	9a06      	ldr	r2, [sp, #24]
 800d028:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d02c:	4293      	cmp	r3, r2
 800d02e:	db20      	blt.n	800d072 <_strtod_l+0x452>
 800d030:	4c64      	ldr	r4, [pc, #400]	; (800d1c4 <_strtod_l+0x5a4>)
 800d032:	f1c5 050f 	rsb	r5, r5, #15
 800d036:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d03a:	4652      	mov	r2, sl
 800d03c:	465b      	mov	r3, fp
 800d03e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d042:	f7f3 fae1 	bl	8000608 <__aeabi_dmul>
 800d046:	9b06      	ldr	r3, [sp, #24]
 800d048:	1b5d      	subs	r5, r3, r5
 800d04a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d04e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d052:	e7e3      	b.n	800d01c <_strtod_l+0x3fc>
 800d054:	9b06      	ldr	r3, [sp, #24]
 800d056:	3316      	adds	r3, #22
 800d058:	db0b      	blt.n	800d072 <_strtod_l+0x452>
 800d05a:	9b05      	ldr	r3, [sp, #20]
 800d05c:	1b9e      	subs	r6, r3, r6
 800d05e:	4b59      	ldr	r3, [pc, #356]	; (800d1c4 <_strtod_l+0x5a4>)
 800d060:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d064:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d068:	4650      	mov	r0, sl
 800d06a:	4659      	mov	r1, fp
 800d06c:	f7f3 fbf6 	bl	800085c <__aeabi_ddiv>
 800d070:	e7d6      	b.n	800d020 <_strtod_l+0x400>
 800d072:	9b06      	ldr	r3, [sp, #24]
 800d074:	eba5 0808 	sub.w	r8, r5, r8
 800d078:	4498      	add	r8, r3
 800d07a:	f1b8 0f00 	cmp.w	r8, #0
 800d07e:	dd74      	ble.n	800d16a <_strtod_l+0x54a>
 800d080:	f018 030f 	ands.w	r3, r8, #15
 800d084:	d00a      	beq.n	800d09c <_strtod_l+0x47c>
 800d086:	494f      	ldr	r1, [pc, #316]	; (800d1c4 <_strtod_l+0x5a4>)
 800d088:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d08c:	4652      	mov	r2, sl
 800d08e:	465b      	mov	r3, fp
 800d090:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d094:	f7f3 fab8 	bl	8000608 <__aeabi_dmul>
 800d098:	4682      	mov	sl, r0
 800d09a:	468b      	mov	fp, r1
 800d09c:	f038 080f 	bics.w	r8, r8, #15
 800d0a0:	d04f      	beq.n	800d142 <_strtod_l+0x522>
 800d0a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d0a6:	dd22      	ble.n	800d0ee <_strtod_l+0x4ce>
 800d0a8:	2500      	movs	r5, #0
 800d0aa:	462e      	mov	r6, r5
 800d0ac:	9507      	str	r5, [sp, #28]
 800d0ae:	9505      	str	r5, [sp, #20]
 800d0b0:	2322      	movs	r3, #34	; 0x22
 800d0b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d1cc <_strtod_l+0x5ac>
 800d0b6:	6023      	str	r3, [r4, #0]
 800d0b8:	f04f 0a00 	mov.w	sl, #0
 800d0bc:	9b07      	ldr	r3, [sp, #28]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	f43f adf2 	beq.w	800cca8 <_strtod_l+0x88>
 800d0c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	f001 fe82 	bl	800edd0 <_Bfree>
 800d0cc:	9905      	ldr	r1, [sp, #20]
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f001 fe7e 	bl	800edd0 <_Bfree>
 800d0d4:	4631      	mov	r1, r6
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	f001 fe7a 	bl	800edd0 <_Bfree>
 800d0dc:	9907      	ldr	r1, [sp, #28]
 800d0de:	4620      	mov	r0, r4
 800d0e0:	f001 fe76 	bl	800edd0 <_Bfree>
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	4620      	mov	r0, r4
 800d0e8:	f001 fe72 	bl	800edd0 <_Bfree>
 800d0ec:	e5dc      	b.n	800cca8 <_strtod_l+0x88>
 800d0ee:	4b36      	ldr	r3, [pc, #216]	; (800d1c8 <_strtod_l+0x5a8>)
 800d0f0:	9304      	str	r3, [sp, #16]
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d0f8:	4650      	mov	r0, sl
 800d0fa:	4659      	mov	r1, fp
 800d0fc:	4699      	mov	r9, r3
 800d0fe:	f1b8 0f01 	cmp.w	r8, #1
 800d102:	dc21      	bgt.n	800d148 <_strtod_l+0x528>
 800d104:	b10b      	cbz	r3, 800d10a <_strtod_l+0x4ea>
 800d106:	4682      	mov	sl, r0
 800d108:	468b      	mov	fp, r1
 800d10a:	4b2f      	ldr	r3, [pc, #188]	; (800d1c8 <_strtod_l+0x5a8>)
 800d10c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d110:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d114:	4652      	mov	r2, sl
 800d116:	465b      	mov	r3, fp
 800d118:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d11c:	f7f3 fa74 	bl	8000608 <__aeabi_dmul>
 800d120:	4b2a      	ldr	r3, [pc, #168]	; (800d1cc <_strtod_l+0x5ac>)
 800d122:	460a      	mov	r2, r1
 800d124:	400b      	ands	r3, r1
 800d126:	492a      	ldr	r1, [pc, #168]	; (800d1d0 <_strtod_l+0x5b0>)
 800d128:	428b      	cmp	r3, r1
 800d12a:	4682      	mov	sl, r0
 800d12c:	d8bc      	bhi.n	800d0a8 <_strtod_l+0x488>
 800d12e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d132:	428b      	cmp	r3, r1
 800d134:	bf86      	itte	hi
 800d136:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d1d4 <_strtod_l+0x5b4>
 800d13a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d13e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d142:	2300      	movs	r3, #0
 800d144:	9304      	str	r3, [sp, #16]
 800d146:	e084      	b.n	800d252 <_strtod_l+0x632>
 800d148:	f018 0f01 	tst.w	r8, #1
 800d14c:	d005      	beq.n	800d15a <_strtod_l+0x53a>
 800d14e:	9b04      	ldr	r3, [sp, #16]
 800d150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d154:	f7f3 fa58 	bl	8000608 <__aeabi_dmul>
 800d158:	2301      	movs	r3, #1
 800d15a:	9a04      	ldr	r2, [sp, #16]
 800d15c:	3208      	adds	r2, #8
 800d15e:	f109 0901 	add.w	r9, r9, #1
 800d162:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d166:	9204      	str	r2, [sp, #16]
 800d168:	e7c9      	b.n	800d0fe <_strtod_l+0x4de>
 800d16a:	d0ea      	beq.n	800d142 <_strtod_l+0x522>
 800d16c:	f1c8 0800 	rsb	r8, r8, #0
 800d170:	f018 020f 	ands.w	r2, r8, #15
 800d174:	d00a      	beq.n	800d18c <_strtod_l+0x56c>
 800d176:	4b13      	ldr	r3, [pc, #76]	; (800d1c4 <_strtod_l+0x5a4>)
 800d178:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d17c:	4650      	mov	r0, sl
 800d17e:	4659      	mov	r1, fp
 800d180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d184:	f7f3 fb6a 	bl	800085c <__aeabi_ddiv>
 800d188:	4682      	mov	sl, r0
 800d18a:	468b      	mov	fp, r1
 800d18c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d190:	d0d7      	beq.n	800d142 <_strtod_l+0x522>
 800d192:	f1b8 0f1f 	cmp.w	r8, #31
 800d196:	dd1f      	ble.n	800d1d8 <_strtod_l+0x5b8>
 800d198:	2500      	movs	r5, #0
 800d19a:	462e      	mov	r6, r5
 800d19c:	9507      	str	r5, [sp, #28]
 800d19e:	9505      	str	r5, [sp, #20]
 800d1a0:	2322      	movs	r3, #34	; 0x22
 800d1a2:	f04f 0a00 	mov.w	sl, #0
 800d1a6:	f04f 0b00 	mov.w	fp, #0
 800d1aa:	6023      	str	r3, [r4, #0]
 800d1ac:	e786      	b.n	800d0bc <_strtod_l+0x49c>
 800d1ae:	bf00      	nop
 800d1b0:	08012e8d 	.word	0x08012e8d
 800d1b4:	08012ed0 	.word	0x08012ed0
 800d1b8:	08012e85 	.word	0x08012e85
 800d1bc:	08013014 	.word	0x08013014
 800d1c0:	080132c0 	.word	0x080132c0
 800d1c4:	080131a0 	.word	0x080131a0
 800d1c8:	08013178 	.word	0x08013178
 800d1cc:	7ff00000 	.word	0x7ff00000
 800d1d0:	7ca00000 	.word	0x7ca00000
 800d1d4:	7fefffff 	.word	0x7fefffff
 800d1d8:	f018 0310 	ands.w	r3, r8, #16
 800d1dc:	bf18      	it	ne
 800d1de:	236a      	movne	r3, #106	; 0x6a
 800d1e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d590 <_strtod_l+0x970>
 800d1e4:	9304      	str	r3, [sp, #16]
 800d1e6:	4650      	mov	r0, sl
 800d1e8:	4659      	mov	r1, fp
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	f018 0f01 	tst.w	r8, #1
 800d1f0:	d004      	beq.n	800d1fc <_strtod_l+0x5dc>
 800d1f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d1f6:	f7f3 fa07 	bl	8000608 <__aeabi_dmul>
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d200:	f109 0908 	add.w	r9, r9, #8
 800d204:	d1f2      	bne.n	800d1ec <_strtod_l+0x5cc>
 800d206:	b10b      	cbz	r3, 800d20c <_strtod_l+0x5ec>
 800d208:	4682      	mov	sl, r0
 800d20a:	468b      	mov	fp, r1
 800d20c:	9b04      	ldr	r3, [sp, #16]
 800d20e:	b1c3      	cbz	r3, 800d242 <_strtod_l+0x622>
 800d210:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d214:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d218:	2b00      	cmp	r3, #0
 800d21a:	4659      	mov	r1, fp
 800d21c:	dd11      	ble.n	800d242 <_strtod_l+0x622>
 800d21e:	2b1f      	cmp	r3, #31
 800d220:	f340 8124 	ble.w	800d46c <_strtod_l+0x84c>
 800d224:	2b34      	cmp	r3, #52	; 0x34
 800d226:	bfde      	ittt	le
 800d228:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d22c:	f04f 33ff 	movle.w	r3, #4294967295
 800d230:	fa03 f202 	lslle.w	r2, r3, r2
 800d234:	f04f 0a00 	mov.w	sl, #0
 800d238:	bfcc      	ite	gt
 800d23a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d23e:	ea02 0b01 	andle.w	fp, r2, r1
 800d242:	2200      	movs	r2, #0
 800d244:	2300      	movs	r3, #0
 800d246:	4650      	mov	r0, sl
 800d248:	4659      	mov	r1, fp
 800d24a:	f7f3 fc45 	bl	8000ad8 <__aeabi_dcmpeq>
 800d24e:	2800      	cmp	r0, #0
 800d250:	d1a2      	bne.n	800d198 <_strtod_l+0x578>
 800d252:	9b07      	ldr	r3, [sp, #28]
 800d254:	9300      	str	r3, [sp, #0]
 800d256:	9908      	ldr	r1, [sp, #32]
 800d258:	462b      	mov	r3, r5
 800d25a:	463a      	mov	r2, r7
 800d25c:	4620      	mov	r0, r4
 800d25e:	f001 fe1f 	bl	800eea0 <__s2b>
 800d262:	9007      	str	r0, [sp, #28]
 800d264:	2800      	cmp	r0, #0
 800d266:	f43f af1f 	beq.w	800d0a8 <_strtod_l+0x488>
 800d26a:	9b05      	ldr	r3, [sp, #20]
 800d26c:	1b9e      	subs	r6, r3, r6
 800d26e:	9b06      	ldr	r3, [sp, #24]
 800d270:	2b00      	cmp	r3, #0
 800d272:	bfb4      	ite	lt
 800d274:	4633      	movlt	r3, r6
 800d276:	2300      	movge	r3, #0
 800d278:	930c      	str	r3, [sp, #48]	; 0x30
 800d27a:	9b06      	ldr	r3, [sp, #24]
 800d27c:	2500      	movs	r5, #0
 800d27e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d282:	9312      	str	r3, [sp, #72]	; 0x48
 800d284:	462e      	mov	r6, r5
 800d286:	9b07      	ldr	r3, [sp, #28]
 800d288:	4620      	mov	r0, r4
 800d28a:	6859      	ldr	r1, [r3, #4]
 800d28c:	f001 fd60 	bl	800ed50 <_Balloc>
 800d290:	9005      	str	r0, [sp, #20]
 800d292:	2800      	cmp	r0, #0
 800d294:	f43f af0c 	beq.w	800d0b0 <_strtod_l+0x490>
 800d298:	9b07      	ldr	r3, [sp, #28]
 800d29a:	691a      	ldr	r2, [r3, #16]
 800d29c:	3202      	adds	r2, #2
 800d29e:	f103 010c 	add.w	r1, r3, #12
 800d2a2:	0092      	lsls	r2, r2, #2
 800d2a4:	300c      	adds	r0, #12
 800d2a6:	f7fe fde9 	bl	800be7c <memcpy>
 800d2aa:	ec4b ab10 	vmov	d0, sl, fp
 800d2ae:	aa1a      	add	r2, sp, #104	; 0x68
 800d2b0:	a919      	add	r1, sp, #100	; 0x64
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f002 f93a 	bl	800f52c <__d2b>
 800d2b8:	ec4b ab18 	vmov	d8, sl, fp
 800d2bc:	9018      	str	r0, [sp, #96]	; 0x60
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	f43f aef6 	beq.w	800d0b0 <_strtod_l+0x490>
 800d2c4:	2101      	movs	r1, #1
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f001 fe84 	bl	800efd4 <__i2b>
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	f43f aeee 	beq.w	800d0b0 <_strtod_l+0x490>
 800d2d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d2d6:	9904      	ldr	r1, [sp, #16]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	bfab      	itete	ge
 800d2dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d2de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d2e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d2e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d2e6:	bfac      	ite	ge
 800d2e8:	eb03 0902 	addge.w	r9, r3, r2
 800d2ec:	1ad7      	sublt	r7, r2, r3
 800d2ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d2f0:	eba3 0801 	sub.w	r8, r3, r1
 800d2f4:	4490      	add	r8, r2
 800d2f6:	4ba1      	ldr	r3, [pc, #644]	; (800d57c <_strtod_l+0x95c>)
 800d2f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800d2fc:	4598      	cmp	r8, r3
 800d2fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d302:	f280 80c7 	bge.w	800d494 <_strtod_l+0x874>
 800d306:	eba3 0308 	sub.w	r3, r3, r8
 800d30a:	2b1f      	cmp	r3, #31
 800d30c:	eba2 0203 	sub.w	r2, r2, r3
 800d310:	f04f 0101 	mov.w	r1, #1
 800d314:	f300 80b1 	bgt.w	800d47a <_strtod_l+0x85a>
 800d318:	fa01 f303 	lsl.w	r3, r1, r3
 800d31c:	930d      	str	r3, [sp, #52]	; 0x34
 800d31e:	2300      	movs	r3, #0
 800d320:	9308      	str	r3, [sp, #32]
 800d322:	eb09 0802 	add.w	r8, r9, r2
 800d326:	9b04      	ldr	r3, [sp, #16]
 800d328:	45c1      	cmp	r9, r8
 800d32a:	4417      	add	r7, r2
 800d32c:	441f      	add	r7, r3
 800d32e:	464b      	mov	r3, r9
 800d330:	bfa8      	it	ge
 800d332:	4643      	movge	r3, r8
 800d334:	42bb      	cmp	r3, r7
 800d336:	bfa8      	it	ge
 800d338:	463b      	movge	r3, r7
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	bfc2      	ittt	gt
 800d33e:	eba8 0803 	subgt.w	r8, r8, r3
 800d342:	1aff      	subgt	r7, r7, r3
 800d344:	eba9 0903 	subgt.w	r9, r9, r3
 800d348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	dd17      	ble.n	800d37e <_strtod_l+0x75e>
 800d34e:	4631      	mov	r1, r6
 800d350:	461a      	mov	r2, r3
 800d352:	4620      	mov	r0, r4
 800d354:	f001 fefe 	bl	800f154 <__pow5mult>
 800d358:	4606      	mov	r6, r0
 800d35a:	2800      	cmp	r0, #0
 800d35c:	f43f aea8 	beq.w	800d0b0 <_strtod_l+0x490>
 800d360:	4601      	mov	r1, r0
 800d362:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d364:	4620      	mov	r0, r4
 800d366:	f001 fe4b 	bl	800f000 <__multiply>
 800d36a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d36c:	2800      	cmp	r0, #0
 800d36e:	f43f ae9f 	beq.w	800d0b0 <_strtod_l+0x490>
 800d372:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d374:	4620      	mov	r0, r4
 800d376:	f001 fd2b 	bl	800edd0 <_Bfree>
 800d37a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d37c:	9318      	str	r3, [sp, #96]	; 0x60
 800d37e:	f1b8 0f00 	cmp.w	r8, #0
 800d382:	f300 808c 	bgt.w	800d49e <_strtod_l+0x87e>
 800d386:	9b06      	ldr	r3, [sp, #24]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	dd08      	ble.n	800d39e <_strtod_l+0x77e>
 800d38c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d38e:	9905      	ldr	r1, [sp, #20]
 800d390:	4620      	mov	r0, r4
 800d392:	f001 fedf 	bl	800f154 <__pow5mult>
 800d396:	9005      	str	r0, [sp, #20]
 800d398:	2800      	cmp	r0, #0
 800d39a:	f43f ae89 	beq.w	800d0b0 <_strtod_l+0x490>
 800d39e:	2f00      	cmp	r7, #0
 800d3a0:	dd08      	ble.n	800d3b4 <_strtod_l+0x794>
 800d3a2:	9905      	ldr	r1, [sp, #20]
 800d3a4:	463a      	mov	r2, r7
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	f001 ff2e 	bl	800f208 <__lshift>
 800d3ac:	9005      	str	r0, [sp, #20]
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	f43f ae7e 	beq.w	800d0b0 <_strtod_l+0x490>
 800d3b4:	f1b9 0f00 	cmp.w	r9, #0
 800d3b8:	dd08      	ble.n	800d3cc <_strtod_l+0x7ac>
 800d3ba:	4631      	mov	r1, r6
 800d3bc:	464a      	mov	r2, r9
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f001 ff22 	bl	800f208 <__lshift>
 800d3c4:	4606      	mov	r6, r0
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	f43f ae72 	beq.w	800d0b0 <_strtod_l+0x490>
 800d3cc:	9a05      	ldr	r2, [sp, #20]
 800d3ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f001 ffa5 	bl	800f320 <__mdiff>
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	f43f ae69 	beq.w	800d0b0 <_strtod_l+0x490>
 800d3de:	68c3      	ldr	r3, [r0, #12]
 800d3e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	60c3      	str	r3, [r0, #12]
 800d3e6:	4631      	mov	r1, r6
 800d3e8:	f001 ff7e 	bl	800f2e8 <__mcmp>
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	da60      	bge.n	800d4b2 <_strtod_l+0x892>
 800d3f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3f2:	ea53 030a 	orrs.w	r3, r3, sl
 800d3f6:	f040 8082 	bne.w	800d4fe <_strtod_l+0x8de>
 800d3fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d17d      	bne.n	800d4fe <_strtod_l+0x8de>
 800d402:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d406:	0d1b      	lsrs	r3, r3, #20
 800d408:	051b      	lsls	r3, r3, #20
 800d40a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d40e:	d976      	bls.n	800d4fe <_strtod_l+0x8de>
 800d410:	696b      	ldr	r3, [r5, #20]
 800d412:	b913      	cbnz	r3, 800d41a <_strtod_l+0x7fa>
 800d414:	692b      	ldr	r3, [r5, #16]
 800d416:	2b01      	cmp	r3, #1
 800d418:	dd71      	ble.n	800d4fe <_strtod_l+0x8de>
 800d41a:	4629      	mov	r1, r5
 800d41c:	2201      	movs	r2, #1
 800d41e:	4620      	mov	r0, r4
 800d420:	f001 fef2 	bl	800f208 <__lshift>
 800d424:	4631      	mov	r1, r6
 800d426:	4605      	mov	r5, r0
 800d428:	f001 ff5e 	bl	800f2e8 <__mcmp>
 800d42c:	2800      	cmp	r0, #0
 800d42e:	dd66      	ble.n	800d4fe <_strtod_l+0x8de>
 800d430:	9904      	ldr	r1, [sp, #16]
 800d432:	4a53      	ldr	r2, [pc, #332]	; (800d580 <_strtod_l+0x960>)
 800d434:	465b      	mov	r3, fp
 800d436:	2900      	cmp	r1, #0
 800d438:	f000 8081 	beq.w	800d53e <_strtod_l+0x91e>
 800d43c:	ea02 010b 	and.w	r1, r2, fp
 800d440:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d444:	dc7b      	bgt.n	800d53e <_strtod_l+0x91e>
 800d446:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d44a:	f77f aea9 	ble.w	800d1a0 <_strtod_l+0x580>
 800d44e:	4b4d      	ldr	r3, [pc, #308]	; (800d584 <_strtod_l+0x964>)
 800d450:	4650      	mov	r0, sl
 800d452:	4659      	mov	r1, fp
 800d454:	2200      	movs	r2, #0
 800d456:	f7f3 f8d7 	bl	8000608 <__aeabi_dmul>
 800d45a:	460b      	mov	r3, r1
 800d45c:	4303      	orrs	r3, r0
 800d45e:	bf08      	it	eq
 800d460:	2322      	moveq	r3, #34	; 0x22
 800d462:	4682      	mov	sl, r0
 800d464:	468b      	mov	fp, r1
 800d466:	bf08      	it	eq
 800d468:	6023      	streq	r3, [r4, #0]
 800d46a:	e62b      	b.n	800d0c4 <_strtod_l+0x4a4>
 800d46c:	f04f 32ff 	mov.w	r2, #4294967295
 800d470:	fa02 f303 	lsl.w	r3, r2, r3
 800d474:	ea03 0a0a 	and.w	sl, r3, sl
 800d478:	e6e3      	b.n	800d242 <_strtod_l+0x622>
 800d47a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d47e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d482:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d486:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d48a:	fa01 f308 	lsl.w	r3, r1, r8
 800d48e:	9308      	str	r3, [sp, #32]
 800d490:	910d      	str	r1, [sp, #52]	; 0x34
 800d492:	e746      	b.n	800d322 <_strtod_l+0x702>
 800d494:	2300      	movs	r3, #0
 800d496:	9308      	str	r3, [sp, #32]
 800d498:	2301      	movs	r3, #1
 800d49a:	930d      	str	r3, [sp, #52]	; 0x34
 800d49c:	e741      	b.n	800d322 <_strtod_l+0x702>
 800d49e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d4a0:	4642      	mov	r2, r8
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f001 feb0 	bl	800f208 <__lshift>
 800d4a8:	9018      	str	r0, [sp, #96]	; 0x60
 800d4aa:	2800      	cmp	r0, #0
 800d4ac:	f47f af6b 	bne.w	800d386 <_strtod_l+0x766>
 800d4b0:	e5fe      	b.n	800d0b0 <_strtod_l+0x490>
 800d4b2:	465f      	mov	r7, fp
 800d4b4:	d16e      	bne.n	800d594 <_strtod_l+0x974>
 800d4b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d4b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4bc:	b342      	cbz	r2, 800d510 <_strtod_l+0x8f0>
 800d4be:	4a32      	ldr	r2, [pc, #200]	; (800d588 <_strtod_l+0x968>)
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d128      	bne.n	800d516 <_strtod_l+0x8f6>
 800d4c4:	9b04      	ldr	r3, [sp, #16]
 800d4c6:	4651      	mov	r1, sl
 800d4c8:	b1eb      	cbz	r3, 800d506 <_strtod_l+0x8e6>
 800d4ca:	4b2d      	ldr	r3, [pc, #180]	; (800d580 <_strtod_l+0x960>)
 800d4cc:	403b      	ands	r3, r7
 800d4ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d6:	d819      	bhi.n	800d50c <_strtod_l+0x8ec>
 800d4d8:	0d1b      	lsrs	r3, r3, #20
 800d4da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d4de:	fa02 f303 	lsl.w	r3, r2, r3
 800d4e2:	4299      	cmp	r1, r3
 800d4e4:	d117      	bne.n	800d516 <_strtod_l+0x8f6>
 800d4e6:	4b29      	ldr	r3, [pc, #164]	; (800d58c <_strtod_l+0x96c>)
 800d4e8:	429f      	cmp	r7, r3
 800d4ea:	d102      	bne.n	800d4f2 <_strtod_l+0x8d2>
 800d4ec:	3101      	adds	r1, #1
 800d4ee:	f43f addf 	beq.w	800d0b0 <_strtod_l+0x490>
 800d4f2:	4b23      	ldr	r3, [pc, #140]	; (800d580 <_strtod_l+0x960>)
 800d4f4:	403b      	ands	r3, r7
 800d4f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d4fa:	f04f 0a00 	mov.w	sl, #0
 800d4fe:	9b04      	ldr	r3, [sp, #16]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d1a4      	bne.n	800d44e <_strtod_l+0x82e>
 800d504:	e5de      	b.n	800d0c4 <_strtod_l+0x4a4>
 800d506:	f04f 33ff 	mov.w	r3, #4294967295
 800d50a:	e7ea      	b.n	800d4e2 <_strtod_l+0x8c2>
 800d50c:	4613      	mov	r3, r2
 800d50e:	e7e8      	b.n	800d4e2 <_strtod_l+0x8c2>
 800d510:	ea53 030a 	orrs.w	r3, r3, sl
 800d514:	d08c      	beq.n	800d430 <_strtod_l+0x810>
 800d516:	9b08      	ldr	r3, [sp, #32]
 800d518:	b1db      	cbz	r3, 800d552 <_strtod_l+0x932>
 800d51a:	423b      	tst	r3, r7
 800d51c:	d0ef      	beq.n	800d4fe <_strtod_l+0x8de>
 800d51e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d520:	9a04      	ldr	r2, [sp, #16]
 800d522:	4650      	mov	r0, sl
 800d524:	4659      	mov	r1, fp
 800d526:	b1c3      	cbz	r3, 800d55a <_strtod_l+0x93a>
 800d528:	f7ff fb5e 	bl	800cbe8 <sulp>
 800d52c:	4602      	mov	r2, r0
 800d52e:	460b      	mov	r3, r1
 800d530:	ec51 0b18 	vmov	r0, r1, d8
 800d534:	f7f2 feb2 	bl	800029c <__adddf3>
 800d538:	4682      	mov	sl, r0
 800d53a:	468b      	mov	fp, r1
 800d53c:	e7df      	b.n	800d4fe <_strtod_l+0x8de>
 800d53e:	4013      	ands	r3, r2
 800d540:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d544:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d548:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d54c:	f04f 3aff 	mov.w	sl, #4294967295
 800d550:	e7d5      	b.n	800d4fe <_strtod_l+0x8de>
 800d552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d554:	ea13 0f0a 	tst.w	r3, sl
 800d558:	e7e0      	b.n	800d51c <_strtod_l+0x8fc>
 800d55a:	f7ff fb45 	bl	800cbe8 <sulp>
 800d55e:	4602      	mov	r2, r0
 800d560:	460b      	mov	r3, r1
 800d562:	ec51 0b18 	vmov	r0, r1, d8
 800d566:	f7f2 fe97 	bl	8000298 <__aeabi_dsub>
 800d56a:	2200      	movs	r2, #0
 800d56c:	2300      	movs	r3, #0
 800d56e:	4682      	mov	sl, r0
 800d570:	468b      	mov	fp, r1
 800d572:	f7f3 fab1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d576:	2800      	cmp	r0, #0
 800d578:	d0c1      	beq.n	800d4fe <_strtod_l+0x8de>
 800d57a:	e611      	b.n	800d1a0 <_strtod_l+0x580>
 800d57c:	fffffc02 	.word	0xfffffc02
 800d580:	7ff00000 	.word	0x7ff00000
 800d584:	39500000 	.word	0x39500000
 800d588:	000fffff 	.word	0x000fffff
 800d58c:	7fefffff 	.word	0x7fefffff
 800d590:	08012ee8 	.word	0x08012ee8
 800d594:	4631      	mov	r1, r6
 800d596:	4628      	mov	r0, r5
 800d598:	f002 f824 	bl	800f5e4 <__ratio>
 800d59c:	ec59 8b10 	vmov	r8, r9, d0
 800d5a0:	ee10 0a10 	vmov	r0, s0
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d5aa:	4649      	mov	r1, r9
 800d5ac:	f7f3 faa8 	bl	8000b00 <__aeabi_dcmple>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	d07a      	beq.n	800d6aa <_strtod_l+0xa8a>
 800d5b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d04a      	beq.n	800d650 <_strtod_l+0xa30>
 800d5ba:	4b95      	ldr	r3, [pc, #596]	; (800d810 <_strtod_l+0xbf0>)
 800d5bc:	2200      	movs	r2, #0
 800d5be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d5c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d810 <_strtod_l+0xbf0>
 800d5c6:	f04f 0800 	mov.w	r8, #0
 800d5ca:	4b92      	ldr	r3, [pc, #584]	; (800d814 <_strtod_l+0xbf4>)
 800d5cc:	403b      	ands	r3, r7
 800d5ce:	930d      	str	r3, [sp, #52]	; 0x34
 800d5d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d5d2:	4b91      	ldr	r3, [pc, #580]	; (800d818 <_strtod_l+0xbf8>)
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	f040 80b0 	bne.w	800d73a <_strtod_l+0xb1a>
 800d5da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d5de:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d5e2:	ec4b ab10 	vmov	d0, sl, fp
 800d5e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d5ea:	f001 ff23 	bl	800f434 <__ulp>
 800d5ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d5f2:	ec53 2b10 	vmov	r2, r3, d0
 800d5f6:	f7f3 f807 	bl	8000608 <__aeabi_dmul>
 800d5fa:	4652      	mov	r2, sl
 800d5fc:	465b      	mov	r3, fp
 800d5fe:	f7f2 fe4d 	bl	800029c <__adddf3>
 800d602:	460b      	mov	r3, r1
 800d604:	4983      	ldr	r1, [pc, #524]	; (800d814 <_strtod_l+0xbf4>)
 800d606:	4a85      	ldr	r2, [pc, #532]	; (800d81c <_strtod_l+0xbfc>)
 800d608:	4019      	ands	r1, r3
 800d60a:	4291      	cmp	r1, r2
 800d60c:	4682      	mov	sl, r0
 800d60e:	d960      	bls.n	800d6d2 <_strtod_l+0xab2>
 800d610:	ee18 3a90 	vmov	r3, s17
 800d614:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d618:	4293      	cmp	r3, r2
 800d61a:	d104      	bne.n	800d626 <_strtod_l+0xa06>
 800d61c:	ee18 3a10 	vmov	r3, s16
 800d620:	3301      	adds	r3, #1
 800d622:	f43f ad45 	beq.w	800d0b0 <_strtod_l+0x490>
 800d626:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d828 <_strtod_l+0xc08>
 800d62a:	f04f 3aff 	mov.w	sl, #4294967295
 800d62e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d630:	4620      	mov	r0, r4
 800d632:	f001 fbcd 	bl	800edd0 <_Bfree>
 800d636:	9905      	ldr	r1, [sp, #20]
 800d638:	4620      	mov	r0, r4
 800d63a:	f001 fbc9 	bl	800edd0 <_Bfree>
 800d63e:	4631      	mov	r1, r6
 800d640:	4620      	mov	r0, r4
 800d642:	f001 fbc5 	bl	800edd0 <_Bfree>
 800d646:	4629      	mov	r1, r5
 800d648:	4620      	mov	r0, r4
 800d64a:	f001 fbc1 	bl	800edd0 <_Bfree>
 800d64e:	e61a      	b.n	800d286 <_strtod_l+0x666>
 800d650:	f1ba 0f00 	cmp.w	sl, #0
 800d654:	d11b      	bne.n	800d68e <_strtod_l+0xa6e>
 800d656:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d65a:	b9f3      	cbnz	r3, 800d69a <_strtod_l+0xa7a>
 800d65c:	4b6c      	ldr	r3, [pc, #432]	; (800d810 <_strtod_l+0xbf0>)
 800d65e:	2200      	movs	r2, #0
 800d660:	4640      	mov	r0, r8
 800d662:	4649      	mov	r1, r9
 800d664:	f7f3 fa42 	bl	8000aec <__aeabi_dcmplt>
 800d668:	b9d0      	cbnz	r0, 800d6a0 <_strtod_l+0xa80>
 800d66a:	4640      	mov	r0, r8
 800d66c:	4649      	mov	r1, r9
 800d66e:	4b6c      	ldr	r3, [pc, #432]	; (800d820 <_strtod_l+0xc00>)
 800d670:	2200      	movs	r2, #0
 800d672:	f7f2 ffc9 	bl	8000608 <__aeabi_dmul>
 800d676:	4680      	mov	r8, r0
 800d678:	4689      	mov	r9, r1
 800d67a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d67e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d682:	9315      	str	r3, [sp, #84]	; 0x54
 800d684:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d688:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d68c:	e79d      	b.n	800d5ca <_strtod_l+0x9aa>
 800d68e:	f1ba 0f01 	cmp.w	sl, #1
 800d692:	d102      	bne.n	800d69a <_strtod_l+0xa7a>
 800d694:	2f00      	cmp	r7, #0
 800d696:	f43f ad83 	beq.w	800d1a0 <_strtod_l+0x580>
 800d69a:	4b62      	ldr	r3, [pc, #392]	; (800d824 <_strtod_l+0xc04>)
 800d69c:	2200      	movs	r2, #0
 800d69e:	e78e      	b.n	800d5be <_strtod_l+0x99e>
 800d6a0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d820 <_strtod_l+0xc00>
 800d6a4:	f04f 0800 	mov.w	r8, #0
 800d6a8:	e7e7      	b.n	800d67a <_strtod_l+0xa5a>
 800d6aa:	4b5d      	ldr	r3, [pc, #372]	; (800d820 <_strtod_l+0xc00>)
 800d6ac:	4640      	mov	r0, r8
 800d6ae:	4649      	mov	r1, r9
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f7f2 ffa9 	bl	8000608 <__aeabi_dmul>
 800d6b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6b8:	4680      	mov	r8, r0
 800d6ba:	4689      	mov	r9, r1
 800d6bc:	b933      	cbnz	r3, 800d6cc <_strtod_l+0xaac>
 800d6be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6c2:	900e      	str	r0, [sp, #56]	; 0x38
 800d6c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d6ca:	e7dd      	b.n	800d688 <_strtod_l+0xa68>
 800d6cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d6d0:	e7f9      	b.n	800d6c6 <_strtod_l+0xaa6>
 800d6d2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d6d6:	9b04      	ldr	r3, [sp, #16]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d1a8      	bne.n	800d62e <_strtod_l+0xa0e>
 800d6dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d6e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6e2:	0d1b      	lsrs	r3, r3, #20
 800d6e4:	051b      	lsls	r3, r3, #20
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d1a1      	bne.n	800d62e <_strtod_l+0xa0e>
 800d6ea:	4640      	mov	r0, r8
 800d6ec:	4649      	mov	r1, r9
 800d6ee:	f7f3 faeb 	bl	8000cc8 <__aeabi_d2lz>
 800d6f2:	f7f2 ff5b 	bl	80005ac <__aeabi_l2d>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	4640      	mov	r0, r8
 800d6fc:	4649      	mov	r1, r9
 800d6fe:	f7f2 fdcb 	bl	8000298 <__aeabi_dsub>
 800d702:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d704:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d708:	ea43 030a 	orr.w	r3, r3, sl
 800d70c:	4313      	orrs	r3, r2
 800d70e:	4680      	mov	r8, r0
 800d710:	4689      	mov	r9, r1
 800d712:	d055      	beq.n	800d7c0 <_strtod_l+0xba0>
 800d714:	a336      	add	r3, pc, #216	; (adr r3, 800d7f0 <_strtod_l+0xbd0>)
 800d716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71a:	f7f3 f9e7 	bl	8000aec <__aeabi_dcmplt>
 800d71e:	2800      	cmp	r0, #0
 800d720:	f47f acd0 	bne.w	800d0c4 <_strtod_l+0x4a4>
 800d724:	a334      	add	r3, pc, #208	; (adr r3, 800d7f8 <_strtod_l+0xbd8>)
 800d726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72a:	4640      	mov	r0, r8
 800d72c:	4649      	mov	r1, r9
 800d72e:	f7f3 f9fb 	bl	8000b28 <__aeabi_dcmpgt>
 800d732:	2800      	cmp	r0, #0
 800d734:	f43f af7b 	beq.w	800d62e <_strtod_l+0xa0e>
 800d738:	e4c4      	b.n	800d0c4 <_strtod_l+0x4a4>
 800d73a:	9b04      	ldr	r3, [sp, #16]
 800d73c:	b333      	cbz	r3, 800d78c <_strtod_l+0xb6c>
 800d73e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d740:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d744:	d822      	bhi.n	800d78c <_strtod_l+0xb6c>
 800d746:	a32e      	add	r3, pc, #184	; (adr r3, 800d800 <_strtod_l+0xbe0>)
 800d748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74c:	4640      	mov	r0, r8
 800d74e:	4649      	mov	r1, r9
 800d750:	f7f3 f9d6 	bl	8000b00 <__aeabi_dcmple>
 800d754:	b1a0      	cbz	r0, 800d780 <_strtod_l+0xb60>
 800d756:	4649      	mov	r1, r9
 800d758:	4640      	mov	r0, r8
 800d75a:	f7f3 fa2d 	bl	8000bb8 <__aeabi_d2uiz>
 800d75e:	2801      	cmp	r0, #1
 800d760:	bf38      	it	cc
 800d762:	2001      	movcc	r0, #1
 800d764:	f7f2 fed6 	bl	8000514 <__aeabi_ui2d>
 800d768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d76a:	4680      	mov	r8, r0
 800d76c:	4689      	mov	r9, r1
 800d76e:	bb23      	cbnz	r3, 800d7ba <_strtod_l+0xb9a>
 800d770:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d774:	9010      	str	r0, [sp, #64]	; 0x40
 800d776:	9311      	str	r3, [sp, #68]	; 0x44
 800d778:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d77c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d782:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d784:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d788:	1a9b      	subs	r3, r3, r2
 800d78a:	9309      	str	r3, [sp, #36]	; 0x24
 800d78c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d790:	eeb0 0a48 	vmov.f32	s0, s16
 800d794:	eef0 0a68 	vmov.f32	s1, s17
 800d798:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d79c:	f001 fe4a 	bl	800f434 <__ulp>
 800d7a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d7a4:	ec53 2b10 	vmov	r2, r3, d0
 800d7a8:	f7f2 ff2e 	bl	8000608 <__aeabi_dmul>
 800d7ac:	ec53 2b18 	vmov	r2, r3, d8
 800d7b0:	f7f2 fd74 	bl	800029c <__adddf3>
 800d7b4:	4682      	mov	sl, r0
 800d7b6:	468b      	mov	fp, r1
 800d7b8:	e78d      	b.n	800d6d6 <_strtod_l+0xab6>
 800d7ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d7be:	e7db      	b.n	800d778 <_strtod_l+0xb58>
 800d7c0:	a311      	add	r3, pc, #68	; (adr r3, 800d808 <_strtod_l+0xbe8>)
 800d7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c6:	f7f3 f991 	bl	8000aec <__aeabi_dcmplt>
 800d7ca:	e7b2      	b.n	800d732 <_strtod_l+0xb12>
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	930a      	str	r3, [sp, #40]	; 0x28
 800d7d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d7d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7d4:	6013      	str	r3, [r2, #0]
 800d7d6:	f7ff ba6b 	b.w	800ccb0 <_strtod_l+0x90>
 800d7da:	2a65      	cmp	r2, #101	; 0x65
 800d7dc:	f43f ab5f 	beq.w	800ce9e <_strtod_l+0x27e>
 800d7e0:	2a45      	cmp	r2, #69	; 0x45
 800d7e2:	f43f ab5c 	beq.w	800ce9e <_strtod_l+0x27e>
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	f7ff bb94 	b.w	800cf14 <_strtod_l+0x2f4>
 800d7ec:	f3af 8000 	nop.w
 800d7f0:	94a03595 	.word	0x94a03595
 800d7f4:	3fdfffff 	.word	0x3fdfffff
 800d7f8:	35afe535 	.word	0x35afe535
 800d7fc:	3fe00000 	.word	0x3fe00000
 800d800:	ffc00000 	.word	0xffc00000
 800d804:	41dfffff 	.word	0x41dfffff
 800d808:	94a03595 	.word	0x94a03595
 800d80c:	3fcfffff 	.word	0x3fcfffff
 800d810:	3ff00000 	.word	0x3ff00000
 800d814:	7ff00000 	.word	0x7ff00000
 800d818:	7fe00000 	.word	0x7fe00000
 800d81c:	7c9fffff 	.word	0x7c9fffff
 800d820:	3fe00000 	.word	0x3fe00000
 800d824:	bff00000 	.word	0xbff00000
 800d828:	7fefffff 	.word	0x7fefffff

0800d82c <_strtod_r>:
 800d82c:	4b01      	ldr	r3, [pc, #4]	; (800d834 <_strtod_r+0x8>)
 800d82e:	f7ff b9f7 	b.w	800cc20 <_strtod_l>
 800d832:	bf00      	nop
 800d834:	200002a4 	.word	0x200002a4

0800d838 <_strtol_l.constprop.0>:
 800d838:	2b01      	cmp	r3, #1
 800d83a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d83e:	d001      	beq.n	800d844 <_strtol_l.constprop.0+0xc>
 800d840:	2b24      	cmp	r3, #36	; 0x24
 800d842:	d906      	bls.n	800d852 <_strtol_l.constprop.0+0x1a>
 800d844:	f7fe faf0 	bl	800be28 <__errno>
 800d848:	2316      	movs	r3, #22
 800d84a:	6003      	str	r3, [r0, #0]
 800d84c:	2000      	movs	r0, #0
 800d84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d852:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d938 <_strtol_l.constprop.0+0x100>
 800d856:	460d      	mov	r5, r1
 800d858:	462e      	mov	r6, r5
 800d85a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d85e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d862:	f017 0708 	ands.w	r7, r7, #8
 800d866:	d1f7      	bne.n	800d858 <_strtol_l.constprop.0+0x20>
 800d868:	2c2d      	cmp	r4, #45	; 0x2d
 800d86a:	d132      	bne.n	800d8d2 <_strtol_l.constprop.0+0x9a>
 800d86c:	782c      	ldrb	r4, [r5, #0]
 800d86e:	2701      	movs	r7, #1
 800d870:	1cb5      	adds	r5, r6, #2
 800d872:	2b00      	cmp	r3, #0
 800d874:	d05b      	beq.n	800d92e <_strtol_l.constprop.0+0xf6>
 800d876:	2b10      	cmp	r3, #16
 800d878:	d109      	bne.n	800d88e <_strtol_l.constprop.0+0x56>
 800d87a:	2c30      	cmp	r4, #48	; 0x30
 800d87c:	d107      	bne.n	800d88e <_strtol_l.constprop.0+0x56>
 800d87e:	782c      	ldrb	r4, [r5, #0]
 800d880:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d884:	2c58      	cmp	r4, #88	; 0x58
 800d886:	d14d      	bne.n	800d924 <_strtol_l.constprop.0+0xec>
 800d888:	786c      	ldrb	r4, [r5, #1]
 800d88a:	2310      	movs	r3, #16
 800d88c:	3502      	adds	r5, #2
 800d88e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d892:	f108 38ff 	add.w	r8, r8, #4294967295
 800d896:	f04f 0c00 	mov.w	ip, #0
 800d89a:	fbb8 f9f3 	udiv	r9, r8, r3
 800d89e:	4666      	mov	r6, ip
 800d8a0:	fb03 8a19 	mls	sl, r3, r9, r8
 800d8a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d8a8:	f1be 0f09 	cmp.w	lr, #9
 800d8ac:	d816      	bhi.n	800d8dc <_strtol_l.constprop.0+0xa4>
 800d8ae:	4674      	mov	r4, lr
 800d8b0:	42a3      	cmp	r3, r4
 800d8b2:	dd24      	ble.n	800d8fe <_strtol_l.constprop.0+0xc6>
 800d8b4:	f1bc 0f00 	cmp.w	ip, #0
 800d8b8:	db1e      	blt.n	800d8f8 <_strtol_l.constprop.0+0xc0>
 800d8ba:	45b1      	cmp	r9, r6
 800d8bc:	d31c      	bcc.n	800d8f8 <_strtol_l.constprop.0+0xc0>
 800d8be:	d101      	bne.n	800d8c4 <_strtol_l.constprop.0+0x8c>
 800d8c0:	45a2      	cmp	sl, r4
 800d8c2:	db19      	blt.n	800d8f8 <_strtol_l.constprop.0+0xc0>
 800d8c4:	fb06 4603 	mla	r6, r6, r3, r4
 800d8c8:	f04f 0c01 	mov.w	ip, #1
 800d8cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8d0:	e7e8      	b.n	800d8a4 <_strtol_l.constprop.0+0x6c>
 800d8d2:	2c2b      	cmp	r4, #43	; 0x2b
 800d8d4:	bf04      	itt	eq
 800d8d6:	782c      	ldrbeq	r4, [r5, #0]
 800d8d8:	1cb5      	addeq	r5, r6, #2
 800d8da:	e7ca      	b.n	800d872 <_strtol_l.constprop.0+0x3a>
 800d8dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d8e0:	f1be 0f19 	cmp.w	lr, #25
 800d8e4:	d801      	bhi.n	800d8ea <_strtol_l.constprop.0+0xb2>
 800d8e6:	3c37      	subs	r4, #55	; 0x37
 800d8e8:	e7e2      	b.n	800d8b0 <_strtol_l.constprop.0+0x78>
 800d8ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d8ee:	f1be 0f19 	cmp.w	lr, #25
 800d8f2:	d804      	bhi.n	800d8fe <_strtol_l.constprop.0+0xc6>
 800d8f4:	3c57      	subs	r4, #87	; 0x57
 800d8f6:	e7db      	b.n	800d8b0 <_strtol_l.constprop.0+0x78>
 800d8f8:	f04f 3cff 	mov.w	ip, #4294967295
 800d8fc:	e7e6      	b.n	800d8cc <_strtol_l.constprop.0+0x94>
 800d8fe:	f1bc 0f00 	cmp.w	ip, #0
 800d902:	da05      	bge.n	800d910 <_strtol_l.constprop.0+0xd8>
 800d904:	2322      	movs	r3, #34	; 0x22
 800d906:	6003      	str	r3, [r0, #0]
 800d908:	4646      	mov	r6, r8
 800d90a:	b942      	cbnz	r2, 800d91e <_strtol_l.constprop.0+0xe6>
 800d90c:	4630      	mov	r0, r6
 800d90e:	e79e      	b.n	800d84e <_strtol_l.constprop.0+0x16>
 800d910:	b107      	cbz	r7, 800d914 <_strtol_l.constprop.0+0xdc>
 800d912:	4276      	negs	r6, r6
 800d914:	2a00      	cmp	r2, #0
 800d916:	d0f9      	beq.n	800d90c <_strtol_l.constprop.0+0xd4>
 800d918:	f1bc 0f00 	cmp.w	ip, #0
 800d91c:	d000      	beq.n	800d920 <_strtol_l.constprop.0+0xe8>
 800d91e:	1e69      	subs	r1, r5, #1
 800d920:	6011      	str	r1, [r2, #0]
 800d922:	e7f3      	b.n	800d90c <_strtol_l.constprop.0+0xd4>
 800d924:	2430      	movs	r4, #48	; 0x30
 800d926:	2b00      	cmp	r3, #0
 800d928:	d1b1      	bne.n	800d88e <_strtol_l.constprop.0+0x56>
 800d92a:	2308      	movs	r3, #8
 800d92c:	e7af      	b.n	800d88e <_strtol_l.constprop.0+0x56>
 800d92e:	2c30      	cmp	r4, #48	; 0x30
 800d930:	d0a5      	beq.n	800d87e <_strtol_l.constprop.0+0x46>
 800d932:	230a      	movs	r3, #10
 800d934:	e7ab      	b.n	800d88e <_strtol_l.constprop.0+0x56>
 800d936:	bf00      	nop
 800d938:	08012f11 	.word	0x08012f11

0800d93c <_strtol_r>:
 800d93c:	f7ff bf7c 	b.w	800d838 <_strtol_l.constprop.0>

0800d940 <quorem>:
 800d940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d944:	6903      	ldr	r3, [r0, #16]
 800d946:	690c      	ldr	r4, [r1, #16]
 800d948:	42a3      	cmp	r3, r4
 800d94a:	4607      	mov	r7, r0
 800d94c:	f2c0 8081 	blt.w	800da52 <quorem+0x112>
 800d950:	3c01      	subs	r4, #1
 800d952:	f101 0814 	add.w	r8, r1, #20
 800d956:	f100 0514 	add.w	r5, r0, #20
 800d95a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d95e:	9301      	str	r3, [sp, #4]
 800d960:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d964:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d968:	3301      	adds	r3, #1
 800d96a:	429a      	cmp	r2, r3
 800d96c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d970:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d974:	fbb2 f6f3 	udiv	r6, r2, r3
 800d978:	d331      	bcc.n	800d9de <quorem+0x9e>
 800d97a:	f04f 0e00 	mov.w	lr, #0
 800d97e:	4640      	mov	r0, r8
 800d980:	46ac      	mov	ip, r5
 800d982:	46f2      	mov	sl, lr
 800d984:	f850 2b04 	ldr.w	r2, [r0], #4
 800d988:	b293      	uxth	r3, r2
 800d98a:	fb06 e303 	mla	r3, r6, r3, lr
 800d98e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d992:	b29b      	uxth	r3, r3
 800d994:	ebaa 0303 	sub.w	r3, sl, r3
 800d998:	f8dc a000 	ldr.w	sl, [ip]
 800d99c:	0c12      	lsrs	r2, r2, #16
 800d99e:	fa13 f38a 	uxtah	r3, r3, sl
 800d9a2:	fb06 e202 	mla	r2, r6, r2, lr
 800d9a6:	9300      	str	r3, [sp, #0]
 800d9a8:	9b00      	ldr	r3, [sp, #0]
 800d9aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d9ae:	b292      	uxth	r2, r2
 800d9b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d9b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d9b8:	f8bd 3000 	ldrh.w	r3, [sp]
 800d9bc:	4581      	cmp	r9, r0
 800d9be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9c2:	f84c 3b04 	str.w	r3, [ip], #4
 800d9c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d9ca:	d2db      	bcs.n	800d984 <quorem+0x44>
 800d9cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800d9d0:	b92b      	cbnz	r3, 800d9de <quorem+0x9e>
 800d9d2:	9b01      	ldr	r3, [sp, #4]
 800d9d4:	3b04      	subs	r3, #4
 800d9d6:	429d      	cmp	r5, r3
 800d9d8:	461a      	mov	r2, r3
 800d9da:	d32e      	bcc.n	800da3a <quorem+0xfa>
 800d9dc:	613c      	str	r4, [r7, #16]
 800d9de:	4638      	mov	r0, r7
 800d9e0:	f001 fc82 	bl	800f2e8 <__mcmp>
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	db24      	blt.n	800da32 <quorem+0xf2>
 800d9e8:	3601      	adds	r6, #1
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	f04f 0c00 	mov.w	ip, #0
 800d9f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800d9f4:	f8d0 e000 	ldr.w	lr, [r0]
 800d9f8:	b293      	uxth	r3, r2
 800d9fa:	ebac 0303 	sub.w	r3, ip, r3
 800d9fe:	0c12      	lsrs	r2, r2, #16
 800da00:	fa13 f38e 	uxtah	r3, r3, lr
 800da04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800da08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da12:	45c1      	cmp	r9, r8
 800da14:	f840 3b04 	str.w	r3, [r0], #4
 800da18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800da1c:	d2e8      	bcs.n	800d9f0 <quorem+0xb0>
 800da1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da26:	b922      	cbnz	r2, 800da32 <quorem+0xf2>
 800da28:	3b04      	subs	r3, #4
 800da2a:	429d      	cmp	r5, r3
 800da2c:	461a      	mov	r2, r3
 800da2e:	d30a      	bcc.n	800da46 <quorem+0x106>
 800da30:	613c      	str	r4, [r7, #16]
 800da32:	4630      	mov	r0, r6
 800da34:	b003      	add	sp, #12
 800da36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da3a:	6812      	ldr	r2, [r2, #0]
 800da3c:	3b04      	subs	r3, #4
 800da3e:	2a00      	cmp	r2, #0
 800da40:	d1cc      	bne.n	800d9dc <quorem+0x9c>
 800da42:	3c01      	subs	r4, #1
 800da44:	e7c7      	b.n	800d9d6 <quorem+0x96>
 800da46:	6812      	ldr	r2, [r2, #0]
 800da48:	3b04      	subs	r3, #4
 800da4a:	2a00      	cmp	r2, #0
 800da4c:	d1f0      	bne.n	800da30 <quorem+0xf0>
 800da4e:	3c01      	subs	r4, #1
 800da50:	e7eb      	b.n	800da2a <quorem+0xea>
 800da52:	2000      	movs	r0, #0
 800da54:	e7ee      	b.n	800da34 <quorem+0xf4>
	...

0800da58 <_dtoa_r>:
 800da58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5c:	ed2d 8b04 	vpush	{d8-d9}
 800da60:	ec57 6b10 	vmov	r6, r7, d0
 800da64:	b093      	sub	sp, #76	; 0x4c
 800da66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800da68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800da6c:	9106      	str	r1, [sp, #24]
 800da6e:	ee10 aa10 	vmov	sl, s0
 800da72:	4604      	mov	r4, r0
 800da74:	9209      	str	r2, [sp, #36]	; 0x24
 800da76:	930c      	str	r3, [sp, #48]	; 0x30
 800da78:	46bb      	mov	fp, r7
 800da7a:	b975      	cbnz	r5, 800da9a <_dtoa_r+0x42>
 800da7c:	2010      	movs	r0, #16
 800da7e:	f001 f94d 	bl	800ed1c <malloc>
 800da82:	4602      	mov	r2, r0
 800da84:	6260      	str	r0, [r4, #36]	; 0x24
 800da86:	b920      	cbnz	r0, 800da92 <_dtoa_r+0x3a>
 800da88:	4ba7      	ldr	r3, [pc, #668]	; (800dd28 <_dtoa_r+0x2d0>)
 800da8a:	21ea      	movs	r1, #234	; 0xea
 800da8c:	48a7      	ldr	r0, [pc, #668]	; (800dd2c <_dtoa_r+0x2d4>)
 800da8e:	f002 f8ad 	bl	800fbec <__assert_func>
 800da92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800da96:	6005      	str	r5, [r0, #0]
 800da98:	60c5      	str	r5, [r0, #12]
 800da9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da9c:	6819      	ldr	r1, [r3, #0]
 800da9e:	b151      	cbz	r1, 800dab6 <_dtoa_r+0x5e>
 800daa0:	685a      	ldr	r2, [r3, #4]
 800daa2:	604a      	str	r2, [r1, #4]
 800daa4:	2301      	movs	r3, #1
 800daa6:	4093      	lsls	r3, r2
 800daa8:	608b      	str	r3, [r1, #8]
 800daaa:	4620      	mov	r0, r4
 800daac:	f001 f990 	bl	800edd0 <_Bfree>
 800dab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dab2:	2200      	movs	r2, #0
 800dab4:	601a      	str	r2, [r3, #0]
 800dab6:	1e3b      	subs	r3, r7, #0
 800dab8:	bfaa      	itet	ge
 800daba:	2300      	movge	r3, #0
 800dabc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800dac0:	f8c8 3000 	strge.w	r3, [r8]
 800dac4:	4b9a      	ldr	r3, [pc, #616]	; (800dd30 <_dtoa_r+0x2d8>)
 800dac6:	bfbc      	itt	lt
 800dac8:	2201      	movlt	r2, #1
 800daca:	f8c8 2000 	strlt.w	r2, [r8]
 800dace:	ea33 030b 	bics.w	r3, r3, fp
 800dad2:	d11b      	bne.n	800db0c <_dtoa_r+0xb4>
 800dad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dad6:	f242 730f 	movw	r3, #9999	; 0x270f
 800dada:	6013      	str	r3, [r2, #0]
 800dadc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dae0:	4333      	orrs	r3, r6
 800dae2:	f000 8592 	beq.w	800e60a <_dtoa_r+0xbb2>
 800dae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dae8:	b963      	cbnz	r3, 800db04 <_dtoa_r+0xac>
 800daea:	4b92      	ldr	r3, [pc, #584]	; (800dd34 <_dtoa_r+0x2dc>)
 800daec:	e022      	b.n	800db34 <_dtoa_r+0xdc>
 800daee:	4b92      	ldr	r3, [pc, #584]	; (800dd38 <_dtoa_r+0x2e0>)
 800daf0:	9301      	str	r3, [sp, #4]
 800daf2:	3308      	adds	r3, #8
 800daf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800daf6:	6013      	str	r3, [r2, #0]
 800daf8:	9801      	ldr	r0, [sp, #4]
 800dafa:	b013      	add	sp, #76	; 0x4c
 800dafc:	ecbd 8b04 	vpop	{d8-d9}
 800db00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db04:	4b8b      	ldr	r3, [pc, #556]	; (800dd34 <_dtoa_r+0x2dc>)
 800db06:	9301      	str	r3, [sp, #4]
 800db08:	3303      	adds	r3, #3
 800db0a:	e7f3      	b.n	800daf4 <_dtoa_r+0x9c>
 800db0c:	2200      	movs	r2, #0
 800db0e:	2300      	movs	r3, #0
 800db10:	4650      	mov	r0, sl
 800db12:	4659      	mov	r1, fp
 800db14:	f7f2 ffe0 	bl	8000ad8 <__aeabi_dcmpeq>
 800db18:	ec4b ab19 	vmov	d9, sl, fp
 800db1c:	4680      	mov	r8, r0
 800db1e:	b158      	cbz	r0, 800db38 <_dtoa_r+0xe0>
 800db20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db22:	2301      	movs	r3, #1
 800db24:	6013      	str	r3, [r2, #0]
 800db26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db28:	2b00      	cmp	r3, #0
 800db2a:	f000 856b 	beq.w	800e604 <_dtoa_r+0xbac>
 800db2e:	4883      	ldr	r0, [pc, #524]	; (800dd3c <_dtoa_r+0x2e4>)
 800db30:	6018      	str	r0, [r3, #0]
 800db32:	1e43      	subs	r3, r0, #1
 800db34:	9301      	str	r3, [sp, #4]
 800db36:	e7df      	b.n	800daf8 <_dtoa_r+0xa0>
 800db38:	ec4b ab10 	vmov	d0, sl, fp
 800db3c:	aa10      	add	r2, sp, #64	; 0x40
 800db3e:	a911      	add	r1, sp, #68	; 0x44
 800db40:	4620      	mov	r0, r4
 800db42:	f001 fcf3 	bl	800f52c <__d2b>
 800db46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800db4a:	ee08 0a10 	vmov	s16, r0
 800db4e:	2d00      	cmp	r5, #0
 800db50:	f000 8084 	beq.w	800dc5c <_dtoa_r+0x204>
 800db54:	ee19 3a90 	vmov	r3, s19
 800db58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800db60:	4656      	mov	r6, sl
 800db62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800db66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800db6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800db6e:	4b74      	ldr	r3, [pc, #464]	; (800dd40 <_dtoa_r+0x2e8>)
 800db70:	2200      	movs	r2, #0
 800db72:	4630      	mov	r0, r6
 800db74:	4639      	mov	r1, r7
 800db76:	f7f2 fb8f 	bl	8000298 <__aeabi_dsub>
 800db7a:	a365      	add	r3, pc, #404	; (adr r3, 800dd10 <_dtoa_r+0x2b8>)
 800db7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db80:	f7f2 fd42 	bl	8000608 <__aeabi_dmul>
 800db84:	a364      	add	r3, pc, #400	; (adr r3, 800dd18 <_dtoa_r+0x2c0>)
 800db86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8a:	f7f2 fb87 	bl	800029c <__adddf3>
 800db8e:	4606      	mov	r6, r0
 800db90:	4628      	mov	r0, r5
 800db92:	460f      	mov	r7, r1
 800db94:	f7f2 fcce 	bl	8000534 <__aeabi_i2d>
 800db98:	a361      	add	r3, pc, #388	; (adr r3, 800dd20 <_dtoa_r+0x2c8>)
 800db9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9e:	f7f2 fd33 	bl	8000608 <__aeabi_dmul>
 800dba2:	4602      	mov	r2, r0
 800dba4:	460b      	mov	r3, r1
 800dba6:	4630      	mov	r0, r6
 800dba8:	4639      	mov	r1, r7
 800dbaa:	f7f2 fb77 	bl	800029c <__adddf3>
 800dbae:	4606      	mov	r6, r0
 800dbb0:	460f      	mov	r7, r1
 800dbb2:	f7f2 ffd9 	bl	8000b68 <__aeabi_d2iz>
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	9000      	str	r0, [sp, #0]
 800dbba:	2300      	movs	r3, #0
 800dbbc:	4630      	mov	r0, r6
 800dbbe:	4639      	mov	r1, r7
 800dbc0:	f7f2 ff94 	bl	8000aec <__aeabi_dcmplt>
 800dbc4:	b150      	cbz	r0, 800dbdc <_dtoa_r+0x184>
 800dbc6:	9800      	ldr	r0, [sp, #0]
 800dbc8:	f7f2 fcb4 	bl	8000534 <__aeabi_i2d>
 800dbcc:	4632      	mov	r2, r6
 800dbce:	463b      	mov	r3, r7
 800dbd0:	f7f2 ff82 	bl	8000ad8 <__aeabi_dcmpeq>
 800dbd4:	b910      	cbnz	r0, 800dbdc <_dtoa_r+0x184>
 800dbd6:	9b00      	ldr	r3, [sp, #0]
 800dbd8:	3b01      	subs	r3, #1
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	9b00      	ldr	r3, [sp, #0]
 800dbde:	2b16      	cmp	r3, #22
 800dbe0:	d85a      	bhi.n	800dc98 <_dtoa_r+0x240>
 800dbe2:	9a00      	ldr	r2, [sp, #0]
 800dbe4:	4b57      	ldr	r3, [pc, #348]	; (800dd44 <_dtoa_r+0x2ec>)
 800dbe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbee:	ec51 0b19 	vmov	r0, r1, d9
 800dbf2:	f7f2 ff7b 	bl	8000aec <__aeabi_dcmplt>
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	d050      	beq.n	800dc9c <_dtoa_r+0x244>
 800dbfa:	9b00      	ldr	r3, [sp, #0]
 800dbfc:	3b01      	subs	r3, #1
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	2300      	movs	r3, #0
 800dc02:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc06:	1b5d      	subs	r5, r3, r5
 800dc08:	1e6b      	subs	r3, r5, #1
 800dc0a:	9305      	str	r3, [sp, #20]
 800dc0c:	bf45      	ittet	mi
 800dc0e:	f1c5 0301 	rsbmi	r3, r5, #1
 800dc12:	9304      	strmi	r3, [sp, #16]
 800dc14:	2300      	movpl	r3, #0
 800dc16:	2300      	movmi	r3, #0
 800dc18:	bf4c      	ite	mi
 800dc1a:	9305      	strmi	r3, [sp, #20]
 800dc1c:	9304      	strpl	r3, [sp, #16]
 800dc1e:	9b00      	ldr	r3, [sp, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	db3d      	blt.n	800dca0 <_dtoa_r+0x248>
 800dc24:	9b05      	ldr	r3, [sp, #20]
 800dc26:	9a00      	ldr	r2, [sp, #0]
 800dc28:	920a      	str	r2, [sp, #40]	; 0x28
 800dc2a:	4413      	add	r3, r2
 800dc2c:	9305      	str	r3, [sp, #20]
 800dc2e:	2300      	movs	r3, #0
 800dc30:	9307      	str	r3, [sp, #28]
 800dc32:	9b06      	ldr	r3, [sp, #24]
 800dc34:	2b09      	cmp	r3, #9
 800dc36:	f200 8089 	bhi.w	800dd4c <_dtoa_r+0x2f4>
 800dc3a:	2b05      	cmp	r3, #5
 800dc3c:	bfc4      	itt	gt
 800dc3e:	3b04      	subgt	r3, #4
 800dc40:	9306      	strgt	r3, [sp, #24]
 800dc42:	9b06      	ldr	r3, [sp, #24]
 800dc44:	f1a3 0302 	sub.w	r3, r3, #2
 800dc48:	bfcc      	ite	gt
 800dc4a:	2500      	movgt	r5, #0
 800dc4c:	2501      	movle	r5, #1
 800dc4e:	2b03      	cmp	r3, #3
 800dc50:	f200 8087 	bhi.w	800dd62 <_dtoa_r+0x30a>
 800dc54:	e8df f003 	tbb	[pc, r3]
 800dc58:	59383a2d 	.word	0x59383a2d
 800dc5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dc60:	441d      	add	r5, r3
 800dc62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dc66:	2b20      	cmp	r3, #32
 800dc68:	bfc1      	itttt	gt
 800dc6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dc6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dc72:	fa0b f303 	lslgt.w	r3, fp, r3
 800dc76:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dc7a:	bfda      	itte	le
 800dc7c:	f1c3 0320 	rsble	r3, r3, #32
 800dc80:	fa06 f003 	lslle.w	r0, r6, r3
 800dc84:	4318      	orrgt	r0, r3
 800dc86:	f7f2 fc45 	bl	8000514 <__aeabi_ui2d>
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	4606      	mov	r6, r0
 800dc8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dc92:	3d01      	subs	r5, #1
 800dc94:	930e      	str	r3, [sp, #56]	; 0x38
 800dc96:	e76a      	b.n	800db6e <_dtoa_r+0x116>
 800dc98:	2301      	movs	r3, #1
 800dc9a:	e7b2      	b.n	800dc02 <_dtoa_r+0x1aa>
 800dc9c:	900b      	str	r0, [sp, #44]	; 0x2c
 800dc9e:	e7b1      	b.n	800dc04 <_dtoa_r+0x1ac>
 800dca0:	9b04      	ldr	r3, [sp, #16]
 800dca2:	9a00      	ldr	r2, [sp, #0]
 800dca4:	1a9b      	subs	r3, r3, r2
 800dca6:	9304      	str	r3, [sp, #16]
 800dca8:	4253      	negs	r3, r2
 800dcaa:	9307      	str	r3, [sp, #28]
 800dcac:	2300      	movs	r3, #0
 800dcae:	930a      	str	r3, [sp, #40]	; 0x28
 800dcb0:	e7bf      	b.n	800dc32 <_dtoa_r+0x1da>
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	9308      	str	r3, [sp, #32]
 800dcb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	dc55      	bgt.n	800dd68 <_dtoa_r+0x310>
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	9209      	str	r2, [sp, #36]	; 0x24
 800dcc6:	e00c      	b.n	800dce2 <_dtoa_r+0x28a>
 800dcc8:	2301      	movs	r3, #1
 800dcca:	e7f3      	b.n	800dcb4 <_dtoa_r+0x25c>
 800dccc:	2300      	movs	r3, #0
 800dcce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcd0:	9308      	str	r3, [sp, #32]
 800dcd2:	9b00      	ldr	r3, [sp, #0]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	9302      	str	r3, [sp, #8]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	9303      	str	r3, [sp, #12]
 800dcde:	bfb8      	it	lt
 800dce0:	2301      	movlt	r3, #1
 800dce2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dce4:	2200      	movs	r2, #0
 800dce6:	6042      	str	r2, [r0, #4]
 800dce8:	2204      	movs	r2, #4
 800dcea:	f102 0614 	add.w	r6, r2, #20
 800dcee:	429e      	cmp	r6, r3
 800dcf0:	6841      	ldr	r1, [r0, #4]
 800dcf2:	d93d      	bls.n	800dd70 <_dtoa_r+0x318>
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	f001 f82b 	bl	800ed50 <_Balloc>
 800dcfa:	9001      	str	r0, [sp, #4]
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	d13b      	bne.n	800dd78 <_dtoa_r+0x320>
 800dd00:	4b11      	ldr	r3, [pc, #68]	; (800dd48 <_dtoa_r+0x2f0>)
 800dd02:	4602      	mov	r2, r0
 800dd04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dd08:	e6c0      	b.n	800da8c <_dtoa_r+0x34>
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	e7df      	b.n	800dcce <_dtoa_r+0x276>
 800dd0e:	bf00      	nop
 800dd10:	636f4361 	.word	0x636f4361
 800dd14:	3fd287a7 	.word	0x3fd287a7
 800dd18:	8b60c8b3 	.word	0x8b60c8b3
 800dd1c:	3fc68a28 	.word	0x3fc68a28
 800dd20:	509f79fb 	.word	0x509f79fb
 800dd24:	3fd34413 	.word	0x3fd34413
 800dd28:	0801301e 	.word	0x0801301e
 800dd2c:	08013035 	.word	0x08013035
 800dd30:	7ff00000 	.word	0x7ff00000
 800dd34:	0801301a 	.word	0x0801301a
 800dd38:	08013011 	.word	0x08013011
 800dd3c:	08012e91 	.word	0x08012e91
 800dd40:	3ff80000 	.word	0x3ff80000
 800dd44:	080131a0 	.word	0x080131a0
 800dd48:	08013090 	.word	0x08013090
 800dd4c:	2501      	movs	r5, #1
 800dd4e:	2300      	movs	r3, #0
 800dd50:	9306      	str	r3, [sp, #24]
 800dd52:	9508      	str	r5, [sp, #32]
 800dd54:	f04f 33ff 	mov.w	r3, #4294967295
 800dd58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	2312      	movs	r3, #18
 800dd60:	e7b0      	b.n	800dcc4 <_dtoa_r+0x26c>
 800dd62:	2301      	movs	r3, #1
 800dd64:	9308      	str	r3, [sp, #32]
 800dd66:	e7f5      	b.n	800dd54 <_dtoa_r+0x2fc>
 800dd68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dd6e:	e7b8      	b.n	800dce2 <_dtoa_r+0x28a>
 800dd70:	3101      	adds	r1, #1
 800dd72:	6041      	str	r1, [r0, #4]
 800dd74:	0052      	lsls	r2, r2, #1
 800dd76:	e7b8      	b.n	800dcea <_dtoa_r+0x292>
 800dd78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd7a:	9a01      	ldr	r2, [sp, #4]
 800dd7c:	601a      	str	r2, [r3, #0]
 800dd7e:	9b03      	ldr	r3, [sp, #12]
 800dd80:	2b0e      	cmp	r3, #14
 800dd82:	f200 809d 	bhi.w	800dec0 <_dtoa_r+0x468>
 800dd86:	2d00      	cmp	r5, #0
 800dd88:	f000 809a 	beq.w	800dec0 <_dtoa_r+0x468>
 800dd8c:	9b00      	ldr	r3, [sp, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	dd32      	ble.n	800ddf8 <_dtoa_r+0x3a0>
 800dd92:	4ab7      	ldr	r2, [pc, #732]	; (800e070 <_dtoa_r+0x618>)
 800dd94:	f003 030f 	and.w	r3, r3, #15
 800dd98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dd9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dda0:	9b00      	ldr	r3, [sp, #0]
 800dda2:	05d8      	lsls	r0, r3, #23
 800dda4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800dda8:	d516      	bpl.n	800ddd8 <_dtoa_r+0x380>
 800ddaa:	4bb2      	ldr	r3, [pc, #712]	; (800e074 <_dtoa_r+0x61c>)
 800ddac:	ec51 0b19 	vmov	r0, r1, d9
 800ddb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ddb4:	f7f2 fd52 	bl	800085c <__aeabi_ddiv>
 800ddb8:	f007 070f 	and.w	r7, r7, #15
 800ddbc:	4682      	mov	sl, r0
 800ddbe:	468b      	mov	fp, r1
 800ddc0:	2503      	movs	r5, #3
 800ddc2:	4eac      	ldr	r6, [pc, #688]	; (800e074 <_dtoa_r+0x61c>)
 800ddc4:	b957      	cbnz	r7, 800dddc <_dtoa_r+0x384>
 800ddc6:	4642      	mov	r2, r8
 800ddc8:	464b      	mov	r3, r9
 800ddca:	4650      	mov	r0, sl
 800ddcc:	4659      	mov	r1, fp
 800ddce:	f7f2 fd45 	bl	800085c <__aeabi_ddiv>
 800ddd2:	4682      	mov	sl, r0
 800ddd4:	468b      	mov	fp, r1
 800ddd6:	e028      	b.n	800de2a <_dtoa_r+0x3d2>
 800ddd8:	2502      	movs	r5, #2
 800ddda:	e7f2      	b.n	800ddc2 <_dtoa_r+0x36a>
 800dddc:	07f9      	lsls	r1, r7, #31
 800ddde:	d508      	bpl.n	800ddf2 <_dtoa_r+0x39a>
 800dde0:	4640      	mov	r0, r8
 800dde2:	4649      	mov	r1, r9
 800dde4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dde8:	f7f2 fc0e 	bl	8000608 <__aeabi_dmul>
 800ddec:	3501      	adds	r5, #1
 800ddee:	4680      	mov	r8, r0
 800ddf0:	4689      	mov	r9, r1
 800ddf2:	107f      	asrs	r7, r7, #1
 800ddf4:	3608      	adds	r6, #8
 800ddf6:	e7e5      	b.n	800ddc4 <_dtoa_r+0x36c>
 800ddf8:	f000 809b 	beq.w	800df32 <_dtoa_r+0x4da>
 800ddfc:	9b00      	ldr	r3, [sp, #0]
 800ddfe:	4f9d      	ldr	r7, [pc, #628]	; (800e074 <_dtoa_r+0x61c>)
 800de00:	425e      	negs	r6, r3
 800de02:	4b9b      	ldr	r3, [pc, #620]	; (800e070 <_dtoa_r+0x618>)
 800de04:	f006 020f 	and.w	r2, r6, #15
 800de08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de10:	ec51 0b19 	vmov	r0, r1, d9
 800de14:	f7f2 fbf8 	bl	8000608 <__aeabi_dmul>
 800de18:	1136      	asrs	r6, r6, #4
 800de1a:	4682      	mov	sl, r0
 800de1c:	468b      	mov	fp, r1
 800de1e:	2300      	movs	r3, #0
 800de20:	2502      	movs	r5, #2
 800de22:	2e00      	cmp	r6, #0
 800de24:	d17a      	bne.n	800df1c <_dtoa_r+0x4c4>
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1d3      	bne.n	800ddd2 <_dtoa_r+0x37a>
 800de2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f000 8082 	beq.w	800df36 <_dtoa_r+0x4de>
 800de32:	4b91      	ldr	r3, [pc, #580]	; (800e078 <_dtoa_r+0x620>)
 800de34:	2200      	movs	r2, #0
 800de36:	4650      	mov	r0, sl
 800de38:	4659      	mov	r1, fp
 800de3a:	f7f2 fe57 	bl	8000aec <__aeabi_dcmplt>
 800de3e:	2800      	cmp	r0, #0
 800de40:	d079      	beq.n	800df36 <_dtoa_r+0x4de>
 800de42:	9b03      	ldr	r3, [sp, #12]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d076      	beq.n	800df36 <_dtoa_r+0x4de>
 800de48:	9b02      	ldr	r3, [sp, #8]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	dd36      	ble.n	800debc <_dtoa_r+0x464>
 800de4e:	9b00      	ldr	r3, [sp, #0]
 800de50:	4650      	mov	r0, sl
 800de52:	4659      	mov	r1, fp
 800de54:	1e5f      	subs	r7, r3, #1
 800de56:	2200      	movs	r2, #0
 800de58:	4b88      	ldr	r3, [pc, #544]	; (800e07c <_dtoa_r+0x624>)
 800de5a:	f7f2 fbd5 	bl	8000608 <__aeabi_dmul>
 800de5e:	9e02      	ldr	r6, [sp, #8]
 800de60:	4682      	mov	sl, r0
 800de62:	468b      	mov	fp, r1
 800de64:	3501      	adds	r5, #1
 800de66:	4628      	mov	r0, r5
 800de68:	f7f2 fb64 	bl	8000534 <__aeabi_i2d>
 800de6c:	4652      	mov	r2, sl
 800de6e:	465b      	mov	r3, fp
 800de70:	f7f2 fbca 	bl	8000608 <__aeabi_dmul>
 800de74:	4b82      	ldr	r3, [pc, #520]	; (800e080 <_dtoa_r+0x628>)
 800de76:	2200      	movs	r2, #0
 800de78:	f7f2 fa10 	bl	800029c <__adddf3>
 800de7c:	46d0      	mov	r8, sl
 800de7e:	46d9      	mov	r9, fp
 800de80:	4682      	mov	sl, r0
 800de82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800de86:	2e00      	cmp	r6, #0
 800de88:	d158      	bne.n	800df3c <_dtoa_r+0x4e4>
 800de8a:	4b7e      	ldr	r3, [pc, #504]	; (800e084 <_dtoa_r+0x62c>)
 800de8c:	2200      	movs	r2, #0
 800de8e:	4640      	mov	r0, r8
 800de90:	4649      	mov	r1, r9
 800de92:	f7f2 fa01 	bl	8000298 <__aeabi_dsub>
 800de96:	4652      	mov	r2, sl
 800de98:	465b      	mov	r3, fp
 800de9a:	4680      	mov	r8, r0
 800de9c:	4689      	mov	r9, r1
 800de9e:	f7f2 fe43 	bl	8000b28 <__aeabi_dcmpgt>
 800dea2:	2800      	cmp	r0, #0
 800dea4:	f040 8295 	bne.w	800e3d2 <_dtoa_r+0x97a>
 800dea8:	4652      	mov	r2, sl
 800deaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800deae:	4640      	mov	r0, r8
 800deb0:	4649      	mov	r1, r9
 800deb2:	f7f2 fe1b 	bl	8000aec <__aeabi_dcmplt>
 800deb6:	2800      	cmp	r0, #0
 800deb8:	f040 8289 	bne.w	800e3ce <_dtoa_r+0x976>
 800debc:	ec5b ab19 	vmov	sl, fp, d9
 800dec0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	f2c0 8148 	blt.w	800e158 <_dtoa_r+0x700>
 800dec8:	9a00      	ldr	r2, [sp, #0]
 800deca:	2a0e      	cmp	r2, #14
 800decc:	f300 8144 	bgt.w	800e158 <_dtoa_r+0x700>
 800ded0:	4b67      	ldr	r3, [pc, #412]	; (800e070 <_dtoa_r+0x618>)
 800ded2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ded6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800deda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f280 80d5 	bge.w	800e08c <_dtoa_r+0x634>
 800dee2:	9b03      	ldr	r3, [sp, #12]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	f300 80d1 	bgt.w	800e08c <_dtoa_r+0x634>
 800deea:	f040 826f 	bne.w	800e3cc <_dtoa_r+0x974>
 800deee:	4b65      	ldr	r3, [pc, #404]	; (800e084 <_dtoa_r+0x62c>)
 800def0:	2200      	movs	r2, #0
 800def2:	4640      	mov	r0, r8
 800def4:	4649      	mov	r1, r9
 800def6:	f7f2 fb87 	bl	8000608 <__aeabi_dmul>
 800defa:	4652      	mov	r2, sl
 800defc:	465b      	mov	r3, fp
 800defe:	f7f2 fe09 	bl	8000b14 <__aeabi_dcmpge>
 800df02:	9e03      	ldr	r6, [sp, #12]
 800df04:	4637      	mov	r7, r6
 800df06:	2800      	cmp	r0, #0
 800df08:	f040 8245 	bne.w	800e396 <_dtoa_r+0x93e>
 800df0c:	9d01      	ldr	r5, [sp, #4]
 800df0e:	2331      	movs	r3, #49	; 0x31
 800df10:	f805 3b01 	strb.w	r3, [r5], #1
 800df14:	9b00      	ldr	r3, [sp, #0]
 800df16:	3301      	adds	r3, #1
 800df18:	9300      	str	r3, [sp, #0]
 800df1a:	e240      	b.n	800e39e <_dtoa_r+0x946>
 800df1c:	07f2      	lsls	r2, r6, #31
 800df1e:	d505      	bpl.n	800df2c <_dtoa_r+0x4d4>
 800df20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df24:	f7f2 fb70 	bl	8000608 <__aeabi_dmul>
 800df28:	3501      	adds	r5, #1
 800df2a:	2301      	movs	r3, #1
 800df2c:	1076      	asrs	r6, r6, #1
 800df2e:	3708      	adds	r7, #8
 800df30:	e777      	b.n	800de22 <_dtoa_r+0x3ca>
 800df32:	2502      	movs	r5, #2
 800df34:	e779      	b.n	800de2a <_dtoa_r+0x3d2>
 800df36:	9f00      	ldr	r7, [sp, #0]
 800df38:	9e03      	ldr	r6, [sp, #12]
 800df3a:	e794      	b.n	800de66 <_dtoa_r+0x40e>
 800df3c:	9901      	ldr	r1, [sp, #4]
 800df3e:	4b4c      	ldr	r3, [pc, #304]	; (800e070 <_dtoa_r+0x618>)
 800df40:	4431      	add	r1, r6
 800df42:	910d      	str	r1, [sp, #52]	; 0x34
 800df44:	9908      	ldr	r1, [sp, #32]
 800df46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800df4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800df4e:	2900      	cmp	r1, #0
 800df50:	d043      	beq.n	800dfda <_dtoa_r+0x582>
 800df52:	494d      	ldr	r1, [pc, #308]	; (800e088 <_dtoa_r+0x630>)
 800df54:	2000      	movs	r0, #0
 800df56:	f7f2 fc81 	bl	800085c <__aeabi_ddiv>
 800df5a:	4652      	mov	r2, sl
 800df5c:	465b      	mov	r3, fp
 800df5e:	f7f2 f99b 	bl	8000298 <__aeabi_dsub>
 800df62:	9d01      	ldr	r5, [sp, #4]
 800df64:	4682      	mov	sl, r0
 800df66:	468b      	mov	fp, r1
 800df68:	4649      	mov	r1, r9
 800df6a:	4640      	mov	r0, r8
 800df6c:	f7f2 fdfc 	bl	8000b68 <__aeabi_d2iz>
 800df70:	4606      	mov	r6, r0
 800df72:	f7f2 fadf 	bl	8000534 <__aeabi_i2d>
 800df76:	4602      	mov	r2, r0
 800df78:	460b      	mov	r3, r1
 800df7a:	4640      	mov	r0, r8
 800df7c:	4649      	mov	r1, r9
 800df7e:	f7f2 f98b 	bl	8000298 <__aeabi_dsub>
 800df82:	3630      	adds	r6, #48	; 0x30
 800df84:	f805 6b01 	strb.w	r6, [r5], #1
 800df88:	4652      	mov	r2, sl
 800df8a:	465b      	mov	r3, fp
 800df8c:	4680      	mov	r8, r0
 800df8e:	4689      	mov	r9, r1
 800df90:	f7f2 fdac 	bl	8000aec <__aeabi_dcmplt>
 800df94:	2800      	cmp	r0, #0
 800df96:	d163      	bne.n	800e060 <_dtoa_r+0x608>
 800df98:	4642      	mov	r2, r8
 800df9a:	464b      	mov	r3, r9
 800df9c:	4936      	ldr	r1, [pc, #216]	; (800e078 <_dtoa_r+0x620>)
 800df9e:	2000      	movs	r0, #0
 800dfa0:	f7f2 f97a 	bl	8000298 <__aeabi_dsub>
 800dfa4:	4652      	mov	r2, sl
 800dfa6:	465b      	mov	r3, fp
 800dfa8:	f7f2 fda0 	bl	8000aec <__aeabi_dcmplt>
 800dfac:	2800      	cmp	r0, #0
 800dfae:	f040 80b5 	bne.w	800e11c <_dtoa_r+0x6c4>
 800dfb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfb4:	429d      	cmp	r5, r3
 800dfb6:	d081      	beq.n	800debc <_dtoa_r+0x464>
 800dfb8:	4b30      	ldr	r3, [pc, #192]	; (800e07c <_dtoa_r+0x624>)
 800dfba:	2200      	movs	r2, #0
 800dfbc:	4650      	mov	r0, sl
 800dfbe:	4659      	mov	r1, fp
 800dfc0:	f7f2 fb22 	bl	8000608 <__aeabi_dmul>
 800dfc4:	4b2d      	ldr	r3, [pc, #180]	; (800e07c <_dtoa_r+0x624>)
 800dfc6:	4682      	mov	sl, r0
 800dfc8:	468b      	mov	fp, r1
 800dfca:	4640      	mov	r0, r8
 800dfcc:	4649      	mov	r1, r9
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f7f2 fb1a 	bl	8000608 <__aeabi_dmul>
 800dfd4:	4680      	mov	r8, r0
 800dfd6:	4689      	mov	r9, r1
 800dfd8:	e7c6      	b.n	800df68 <_dtoa_r+0x510>
 800dfda:	4650      	mov	r0, sl
 800dfdc:	4659      	mov	r1, fp
 800dfde:	f7f2 fb13 	bl	8000608 <__aeabi_dmul>
 800dfe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfe4:	9d01      	ldr	r5, [sp, #4]
 800dfe6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfe8:	4682      	mov	sl, r0
 800dfea:	468b      	mov	fp, r1
 800dfec:	4649      	mov	r1, r9
 800dfee:	4640      	mov	r0, r8
 800dff0:	f7f2 fdba 	bl	8000b68 <__aeabi_d2iz>
 800dff4:	4606      	mov	r6, r0
 800dff6:	f7f2 fa9d 	bl	8000534 <__aeabi_i2d>
 800dffa:	3630      	adds	r6, #48	; 0x30
 800dffc:	4602      	mov	r2, r0
 800dffe:	460b      	mov	r3, r1
 800e000:	4640      	mov	r0, r8
 800e002:	4649      	mov	r1, r9
 800e004:	f7f2 f948 	bl	8000298 <__aeabi_dsub>
 800e008:	f805 6b01 	strb.w	r6, [r5], #1
 800e00c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e00e:	429d      	cmp	r5, r3
 800e010:	4680      	mov	r8, r0
 800e012:	4689      	mov	r9, r1
 800e014:	f04f 0200 	mov.w	r2, #0
 800e018:	d124      	bne.n	800e064 <_dtoa_r+0x60c>
 800e01a:	4b1b      	ldr	r3, [pc, #108]	; (800e088 <_dtoa_r+0x630>)
 800e01c:	4650      	mov	r0, sl
 800e01e:	4659      	mov	r1, fp
 800e020:	f7f2 f93c 	bl	800029c <__adddf3>
 800e024:	4602      	mov	r2, r0
 800e026:	460b      	mov	r3, r1
 800e028:	4640      	mov	r0, r8
 800e02a:	4649      	mov	r1, r9
 800e02c:	f7f2 fd7c 	bl	8000b28 <__aeabi_dcmpgt>
 800e030:	2800      	cmp	r0, #0
 800e032:	d173      	bne.n	800e11c <_dtoa_r+0x6c4>
 800e034:	4652      	mov	r2, sl
 800e036:	465b      	mov	r3, fp
 800e038:	4913      	ldr	r1, [pc, #76]	; (800e088 <_dtoa_r+0x630>)
 800e03a:	2000      	movs	r0, #0
 800e03c:	f7f2 f92c 	bl	8000298 <__aeabi_dsub>
 800e040:	4602      	mov	r2, r0
 800e042:	460b      	mov	r3, r1
 800e044:	4640      	mov	r0, r8
 800e046:	4649      	mov	r1, r9
 800e048:	f7f2 fd50 	bl	8000aec <__aeabi_dcmplt>
 800e04c:	2800      	cmp	r0, #0
 800e04e:	f43f af35 	beq.w	800debc <_dtoa_r+0x464>
 800e052:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e054:	1e6b      	subs	r3, r5, #1
 800e056:	930f      	str	r3, [sp, #60]	; 0x3c
 800e058:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e05c:	2b30      	cmp	r3, #48	; 0x30
 800e05e:	d0f8      	beq.n	800e052 <_dtoa_r+0x5fa>
 800e060:	9700      	str	r7, [sp, #0]
 800e062:	e049      	b.n	800e0f8 <_dtoa_r+0x6a0>
 800e064:	4b05      	ldr	r3, [pc, #20]	; (800e07c <_dtoa_r+0x624>)
 800e066:	f7f2 facf 	bl	8000608 <__aeabi_dmul>
 800e06a:	4680      	mov	r8, r0
 800e06c:	4689      	mov	r9, r1
 800e06e:	e7bd      	b.n	800dfec <_dtoa_r+0x594>
 800e070:	080131a0 	.word	0x080131a0
 800e074:	08013178 	.word	0x08013178
 800e078:	3ff00000 	.word	0x3ff00000
 800e07c:	40240000 	.word	0x40240000
 800e080:	401c0000 	.word	0x401c0000
 800e084:	40140000 	.word	0x40140000
 800e088:	3fe00000 	.word	0x3fe00000
 800e08c:	9d01      	ldr	r5, [sp, #4]
 800e08e:	4656      	mov	r6, sl
 800e090:	465f      	mov	r7, fp
 800e092:	4642      	mov	r2, r8
 800e094:	464b      	mov	r3, r9
 800e096:	4630      	mov	r0, r6
 800e098:	4639      	mov	r1, r7
 800e09a:	f7f2 fbdf 	bl	800085c <__aeabi_ddiv>
 800e09e:	f7f2 fd63 	bl	8000b68 <__aeabi_d2iz>
 800e0a2:	4682      	mov	sl, r0
 800e0a4:	f7f2 fa46 	bl	8000534 <__aeabi_i2d>
 800e0a8:	4642      	mov	r2, r8
 800e0aa:	464b      	mov	r3, r9
 800e0ac:	f7f2 faac 	bl	8000608 <__aeabi_dmul>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	4630      	mov	r0, r6
 800e0b6:	4639      	mov	r1, r7
 800e0b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e0bc:	f7f2 f8ec 	bl	8000298 <__aeabi_dsub>
 800e0c0:	f805 6b01 	strb.w	r6, [r5], #1
 800e0c4:	9e01      	ldr	r6, [sp, #4]
 800e0c6:	9f03      	ldr	r7, [sp, #12]
 800e0c8:	1bae      	subs	r6, r5, r6
 800e0ca:	42b7      	cmp	r7, r6
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	460b      	mov	r3, r1
 800e0d0:	d135      	bne.n	800e13e <_dtoa_r+0x6e6>
 800e0d2:	f7f2 f8e3 	bl	800029c <__adddf3>
 800e0d6:	4642      	mov	r2, r8
 800e0d8:	464b      	mov	r3, r9
 800e0da:	4606      	mov	r6, r0
 800e0dc:	460f      	mov	r7, r1
 800e0de:	f7f2 fd23 	bl	8000b28 <__aeabi_dcmpgt>
 800e0e2:	b9d0      	cbnz	r0, 800e11a <_dtoa_r+0x6c2>
 800e0e4:	4642      	mov	r2, r8
 800e0e6:	464b      	mov	r3, r9
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	4639      	mov	r1, r7
 800e0ec:	f7f2 fcf4 	bl	8000ad8 <__aeabi_dcmpeq>
 800e0f0:	b110      	cbz	r0, 800e0f8 <_dtoa_r+0x6a0>
 800e0f2:	f01a 0f01 	tst.w	sl, #1
 800e0f6:	d110      	bne.n	800e11a <_dtoa_r+0x6c2>
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	ee18 1a10 	vmov	r1, s16
 800e0fe:	f000 fe67 	bl	800edd0 <_Bfree>
 800e102:	2300      	movs	r3, #0
 800e104:	9800      	ldr	r0, [sp, #0]
 800e106:	702b      	strb	r3, [r5, #0]
 800e108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e10a:	3001      	adds	r0, #1
 800e10c:	6018      	str	r0, [r3, #0]
 800e10e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e110:	2b00      	cmp	r3, #0
 800e112:	f43f acf1 	beq.w	800daf8 <_dtoa_r+0xa0>
 800e116:	601d      	str	r5, [r3, #0]
 800e118:	e4ee      	b.n	800daf8 <_dtoa_r+0xa0>
 800e11a:	9f00      	ldr	r7, [sp, #0]
 800e11c:	462b      	mov	r3, r5
 800e11e:	461d      	mov	r5, r3
 800e120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e124:	2a39      	cmp	r2, #57	; 0x39
 800e126:	d106      	bne.n	800e136 <_dtoa_r+0x6de>
 800e128:	9a01      	ldr	r2, [sp, #4]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d1f7      	bne.n	800e11e <_dtoa_r+0x6c6>
 800e12e:	9901      	ldr	r1, [sp, #4]
 800e130:	2230      	movs	r2, #48	; 0x30
 800e132:	3701      	adds	r7, #1
 800e134:	700a      	strb	r2, [r1, #0]
 800e136:	781a      	ldrb	r2, [r3, #0]
 800e138:	3201      	adds	r2, #1
 800e13a:	701a      	strb	r2, [r3, #0]
 800e13c:	e790      	b.n	800e060 <_dtoa_r+0x608>
 800e13e:	4ba6      	ldr	r3, [pc, #664]	; (800e3d8 <_dtoa_r+0x980>)
 800e140:	2200      	movs	r2, #0
 800e142:	f7f2 fa61 	bl	8000608 <__aeabi_dmul>
 800e146:	2200      	movs	r2, #0
 800e148:	2300      	movs	r3, #0
 800e14a:	4606      	mov	r6, r0
 800e14c:	460f      	mov	r7, r1
 800e14e:	f7f2 fcc3 	bl	8000ad8 <__aeabi_dcmpeq>
 800e152:	2800      	cmp	r0, #0
 800e154:	d09d      	beq.n	800e092 <_dtoa_r+0x63a>
 800e156:	e7cf      	b.n	800e0f8 <_dtoa_r+0x6a0>
 800e158:	9a08      	ldr	r2, [sp, #32]
 800e15a:	2a00      	cmp	r2, #0
 800e15c:	f000 80d7 	beq.w	800e30e <_dtoa_r+0x8b6>
 800e160:	9a06      	ldr	r2, [sp, #24]
 800e162:	2a01      	cmp	r2, #1
 800e164:	f300 80ba 	bgt.w	800e2dc <_dtoa_r+0x884>
 800e168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e16a:	2a00      	cmp	r2, #0
 800e16c:	f000 80b2 	beq.w	800e2d4 <_dtoa_r+0x87c>
 800e170:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e174:	9e07      	ldr	r6, [sp, #28]
 800e176:	9d04      	ldr	r5, [sp, #16]
 800e178:	9a04      	ldr	r2, [sp, #16]
 800e17a:	441a      	add	r2, r3
 800e17c:	9204      	str	r2, [sp, #16]
 800e17e:	9a05      	ldr	r2, [sp, #20]
 800e180:	2101      	movs	r1, #1
 800e182:	441a      	add	r2, r3
 800e184:	4620      	mov	r0, r4
 800e186:	9205      	str	r2, [sp, #20]
 800e188:	f000 ff24 	bl	800efd4 <__i2b>
 800e18c:	4607      	mov	r7, r0
 800e18e:	2d00      	cmp	r5, #0
 800e190:	dd0c      	ble.n	800e1ac <_dtoa_r+0x754>
 800e192:	9b05      	ldr	r3, [sp, #20]
 800e194:	2b00      	cmp	r3, #0
 800e196:	dd09      	ble.n	800e1ac <_dtoa_r+0x754>
 800e198:	42ab      	cmp	r3, r5
 800e19a:	9a04      	ldr	r2, [sp, #16]
 800e19c:	bfa8      	it	ge
 800e19e:	462b      	movge	r3, r5
 800e1a0:	1ad2      	subs	r2, r2, r3
 800e1a2:	9204      	str	r2, [sp, #16]
 800e1a4:	9a05      	ldr	r2, [sp, #20]
 800e1a6:	1aed      	subs	r5, r5, r3
 800e1a8:	1ad3      	subs	r3, r2, r3
 800e1aa:	9305      	str	r3, [sp, #20]
 800e1ac:	9b07      	ldr	r3, [sp, #28]
 800e1ae:	b31b      	cbz	r3, 800e1f8 <_dtoa_r+0x7a0>
 800e1b0:	9b08      	ldr	r3, [sp, #32]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	f000 80af 	beq.w	800e316 <_dtoa_r+0x8be>
 800e1b8:	2e00      	cmp	r6, #0
 800e1ba:	dd13      	ble.n	800e1e4 <_dtoa_r+0x78c>
 800e1bc:	4639      	mov	r1, r7
 800e1be:	4632      	mov	r2, r6
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f000 ffc7 	bl	800f154 <__pow5mult>
 800e1c6:	ee18 2a10 	vmov	r2, s16
 800e1ca:	4601      	mov	r1, r0
 800e1cc:	4607      	mov	r7, r0
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	f000 ff16 	bl	800f000 <__multiply>
 800e1d4:	ee18 1a10 	vmov	r1, s16
 800e1d8:	4680      	mov	r8, r0
 800e1da:	4620      	mov	r0, r4
 800e1dc:	f000 fdf8 	bl	800edd0 <_Bfree>
 800e1e0:	ee08 8a10 	vmov	s16, r8
 800e1e4:	9b07      	ldr	r3, [sp, #28]
 800e1e6:	1b9a      	subs	r2, r3, r6
 800e1e8:	d006      	beq.n	800e1f8 <_dtoa_r+0x7a0>
 800e1ea:	ee18 1a10 	vmov	r1, s16
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f000 ffb0 	bl	800f154 <__pow5mult>
 800e1f4:	ee08 0a10 	vmov	s16, r0
 800e1f8:	2101      	movs	r1, #1
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f000 feea 	bl	800efd4 <__i2b>
 800e200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e202:	2b00      	cmp	r3, #0
 800e204:	4606      	mov	r6, r0
 800e206:	f340 8088 	ble.w	800e31a <_dtoa_r+0x8c2>
 800e20a:	461a      	mov	r2, r3
 800e20c:	4601      	mov	r1, r0
 800e20e:	4620      	mov	r0, r4
 800e210:	f000 ffa0 	bl	800f154 <__pow5mult>
 800e214:	9b06      	ldr	r3, [sp, #24]
 800e216:	2b01      	cmp	r3, #1
 800e218:	4606      	mov	r6, r0
 800e21a:	f340 8081 	ble.w	800e320 <_dtoa_r+0x8c8>
 800e21e:	f04f 0800 	mov.w	r8, #0
 800e222:	6933      	ldr	r3, [r6, #16]
 800e224:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e228:	6918      	ldr	r0, [r3, #16]
 800e22a:	f000 fe83 	bl	800ef34 <__hi0bits>
 800e22e:	f1c0 0020 	rsb	r0, r0, #32
 800e232:	9b05      	ldr	r3, [sp, #20]
 800e234:	4418      	add	r0, r3
 800e236:	f010 001f 	ands.w	r0, r0, #31
 800e23a:	f000 8092 	beq.w	800e362 <_dtoa_r+0x90a>
 800e23e:	f1c0 0320 	rsb	r3, r0, #32
 800e242:	2b04      	cmp	r3, #4
 800e244:	f340 808a 	ble.w	800e35c <_dtoa_r+0x904>
 800e248:	f1c0 001c 	rsb	r0, r0, #28
 800e24c:	9b04      	ldr	r3, [sp, #16]
 800e24e:	4403      	add	r3, r0
 800e250:	9304      	str	r3, [sp, #16]
 800e252:	9b05      	ldr	r3, [sp, #20]
 800e254:	4403      	add	r3, r0
 800e256:	4405      	add	r5, r0
 800e258:	9305      	str	r3, [sp, #20]
 800e25a:	9b04      	ldr	r3, [sp, #16]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	dd07      	ble.n	800e270 <_dtoa_r+0x818>
 800e260:	ee18 1a10 	vmov	r1, s16
 800e264:	461a      	mov	r2, r3
 800e266:	4620      	mov	r0, r4
 800e268:	f000 ffce 	bl	800f208 <__lshift>
 800e26c:	ee08 0a10 	vmov	s16, r0
 800e270:	9b05      	ldr	r3, [sp, #20]
 800e272:	2b00      	cmp	r3, #0
 800e274:	dd05      	ble.n	800e282 <_dtoa_r+0x82a>
 800e276:	4631      	mov	r1, r6
 800e278:	461a      	mov	r2, r3
 800e27a:	4620      	mov	r0, r4
 800e27c:	f000 ffc4 	bl	800f208 <__lshift>
 800e280:	4606      	mov	r6, r0
 800e282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e284:	2b00      	cmp	r3, #0
 800e286:	d06e      	beq.n	800e366 <_dtoa_r+0x90e>
 800e288:	ee18 0a10 	vmov	r0, s16
 800e28c:	4631      	mov	r1, r6
 800e28e:	f001 f82b 	bl	800f2e8 <__mcmp>
 800e292:	2800      	cmp	r0, #0
 800e294:	da67      	bge.n	800e366 <_dtoa_r+0x90e>
 800e296:	9b00      	ldr	r3, [sp, #0]
 800e298:	3b01      	subs	r3, #1
 800e29a:	ee18 1a10 	vmov	r1, s16
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	220a      	movs	r2, #10
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f000 fdb5 	bl	800ee14 <__multadd>
 800e2aa:	9b08      	ldr	r3, [sp, #32]
 800e2ac:	ee08 0a10 	vmov	s16, r0
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	f000 81b1 	beq.w	800e618 <_dtoa_r+0xbc0>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	4639      	mov	r1, r7
 800e2ba:	220a      	movs	r2, #10
 800e2bc:	4620      	mov	r0, r4
 800e2be:	f000 fda9 	bl	800ee14 <__multadd>
 800e2c2:	9b02      	ldr	r3, [sp, #8]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	4607      	mov	r7, r0
 800e2c8:	f300 808e 	bgt.w	800e3e8 <_dtoa_r+0x990>
 800e2cc:	9b06      	ldr	r3, [sp, #24]
 800e2ce:	2b02      	cmp	r3, #2
 800e2d0:	dc51      	bgt.n	800e376 <_dtoa_r+0x91e>
 800e2d2:	e089      	b.n	800e3e8 <_dtoa_r+0x990>
 800e2d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e2da:	e74b      	b.n	800e174 <_dtoa_r+0x71c>
 800e2dc:	9b03      	ldr	r3, [sp, #12]
 800e2de:	1e5e      	subs	r6, r3, #1
 800e2e0:	9b07      	ldr	r3, [sp, #28]
 800e2e2:	42b3      	cmp	r3, r6
 800e2e4:	bfbf      	itttt	lt
 800e2e6:	9b07      	ldrlt	r3, [sp, #28]
 800e2e8:	9607      	strlt	r6, [sp, #28]
 800e2ea:	1af2      	sublt	r2, r6, r3
 800e2ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e2ee:	bfb6      	itet	lt
 800e2f0:	189b      	addlt	r3, r3, r2
 800e2f2:	1b9e      	subge	r6, r3, r6
 800e2f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e2f6:	9b03      	ldr	r3, [sp, #12]
 800e2f8:	bfb8      	it	lt
 800e2fa:	2600      	movlt	r6, #0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	bfb7      	itett	lt
 800e300:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e304:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e308:	1a9d      	sublt	r5, r3, r2
 800e30a:	2300      	movlt	r3, #0
 800e30c:	e734      	b.n	800e178 <_dtoa_r+0x720>
 800e30e:	9e07      	ldr	r6, [sp, #28]
 800e310:	9d04      	ldr	r5, [sp, #16]
 800e312:	9f08      	ldr	r7, [sp, #32]
 800e314:	e73b      	b.n	800e18e <_dtoa_r+0x736>
 800e316:	9a07      	ldr	r2, [sp, #28]
 800e318:	e767      	b.n	800e1ea <_dtoa_r+0x792>
 800e31a:	9b06      	ldr	r3, [sp, #24]
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	dc18      	bgt.n	800e352 <_dtoa_r+0x8fa>
 800e320:	f1ba 0f00 	cmp.w	sl, #0
 800e324:	d115      	bne.n	800e352 <_dtoa_r+0x8fa>
 800e326:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e32a:	b993      	cbnz	r3, 800e352 <_dtoa_r+0x8fa>
 800e32c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e330:	0d1b      	lsrs	r3, r3, #20
 800e332:	051b      	lsls	r3, r3, #20
 800e334:	b183      	cbz	r3, 800e358 <_dtoa_r+0x900>
 800e336:	9b04      	ldr	r3, [sp, #16]
 800e338:	3301      	adds	r3, #1
 800e33a:	9304      	str	r3, [sp, #16]
 800e33c:	9b05      	ldr	r3, [sp, #20]
 800e33e:	3301      	adds	r3, #1
 800e340:	9305      	str	r3, [sp, #20]
 800e342:	f04f 0801 	mov.w	r8, #1
 800e346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e348:	2b00      	cmp	r3, #0
 800e34a:	f47f af6a 	bne.w	800e222 <_dtoa_r+0x7ca>
 800e34e:	2001      	movs	r0, #1
 800e350:	e76f      	b.n	800e232 <_dtoa_r+0x7da>
 800e352:	f04f 0800 	mov.w	r8, #0
 800e356:	e7f6      	b.n	800e346 <_dtoa_r+0x8ee>
 800e358:	4698      	mov	r8, r3
 800e35a:	e7f4      	b.n	800e346 <_dtoa_r+0x8ee>
 800e35c:	f43f af7d 	beq.w	800e25a <_dtoa_r+0x802>
 800e360:	4618      	mov	r0, r3
 800e362:	301c      	adds	r0, #28
 800e364:	e772      	b.n	800e24c <_dtoa_r+0x7f4>
 800e366:	9b03      	ldr	r3, [sp, #12]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	dc37      	bgt.n	800e3dc <_dtoa_r+0x984>
 800e36c:	9b06      	ldr	r3, [sp, #24]
 800e36e:	2b02      	cmp	r3, #2
 800e370:	dd34      	ble.n	800e3dc <_dtoa_r+0x984>
 800e372:	9b03      	ldr	r3, [sp, #12]
 800e374:	9302      	str	r3, [sp, #8]
 800e376:	9b02      	ldr	r3, [sp, #8]
 800e378:	b96b      	cbnz	r3, 800e396 <_dtoa_r+0x93e>
 800e37a:	4631      	mov	r1, r6
 800e37c:	2205      	movs	r2, #5
 800e37e:	4620      	mov	r0, r4
 800e380:	f000 fd48 	bl	800ee14 <__multadd>
 800e384:	4601      	mov	r1, r0
 800e386:	4606      	mov	r6, r0
 800e388:	ee18 0a10 	vmov	r0, s16
 800e38c:	f000 ffac 	bl	800f2e8 <__mcmp>
 800e390:	2800      	cmp	r0, #0
 800e392:	f73f adbb 	bgt.w	800df0c <_dtoa_r+0x4b4>
 800e396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e398:	9d01      	ldr	r5, [sp, #4]
 800e39a:	43db      	mvns	r3, r3
 800e39c:	9300      	str	r3, [sp, #0]
 800e39e:	f04f 0800 	mov.w	r8, #0
 800e3a2:	4631      	mov	r1, r6
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	f000 fd13 	bl	800edd0 <_Bfree>
 800e3aa:	2f00      	cmp	r7, #0
 800e3ac:	f43f aea4 	beq.w	800e0f8 <_dtoa_r+0x6a0>
 800e3b0:	f1b8 0f00 	cmp.w	r8, #0
 800e3b4:	d005      	beq.n	800e3c2 <_dtoa_r+0x96a>
 800e3b6:	45b8      	cmp	r8, r7
 800e3b8:	d003      	beq.n	800e3c2 <_dtoa_r+0x96a>
 800e3ba:	4641      	mov	r1, r8
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f000 fd07 	bl	800edd0 <_Bfree>
 800e3c2:	4639      	mov	r1, r7
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	f000 fd03 	bl	800edd0 <_Bfree>
 800e3ca:	e695      	b.n	800e0f8 <_dtoa_r+0x6a0>
 800e3cc:	2600      	movs	r6, #0
 800e3ce:	4637      	mov	r7, r6
 800e3d0:	e7e1      	b.n	800e396 <_dtoa_r+0x93e>
 800e3d2:	9700      	str	r7, [sp, #0]
 800e3d4:	4637      	mov	r7, r6
 800e3d6:	e599      	b.n	800df0c <_dtoa_r+0x4b4>
 800e3d8:	40240000 	.word	0x40240000
 800e3dc:	9b08      	ldr	r3, [sp, #32]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	f000 80ca 	beq.w	800e578 <_dtoa_r+0xb20>
 800e3e4:	9b03      	ldr	r3, [sp, #12]
 800e3e6:	9302      	str	r3, [sp, #8]
 800e3e8:	2d00      	cmp	r5, #0
 800e3ea:	dd05      	ble.n	800e3f8 <_dtoa_r+0x9a0>
 800e3ec:	4639      	mov	r1, r7
 800e3ee:	462a      	mov	r2, r5
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	f000 ff09 	bl	800f208 <__lshift>
 800e3f6:	4607      	mov	r7, r0
 800e3f8:	f1b8 0f00 	cmp.w	r8, #0
 800e3fc:	d05b      	beq.n	800e4b6 <_dtoa_r+0xa5e>
 800e3fe:	6879      	ldr	r1, [r7, #4]
 800e400:	4620      	mov	r0, r4
 800e402:	f000 fca5 	bl	800ed50 <_Balloc>
 800e406:	4605      	mov	r5, r0
 800e408:	b928      	cbnz	r0, 800e416 <_dtoa_r+0x9be>
 800e40a:	4b87      	ldr	r3, [pc, #540]	; (800e628 <_dtoa_r+0xbd0>)
 800e40c:	4602      	mov	r2, r0
 800e40e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e412:	f7ff bb3b 	b.w	800da8c <_dtoa_r+0x34>
 800e416:	693a      	ldr	r2, [r7, #16]
 800e418:	3202      	adds	r2, #2
 800e41a:	0092      	lsls	r2, r2, #2
 800e41c:	f107 010c 	add.w	r1, r7, #12
 800e420:	300c      	adds	r0, #12
 800e422:	f7fd fd2b 	bl	800be7c <memcpy>
 800e426:	2201      	movs	r2, #1
 800e428:	4629      	mov	r1, r5
 800e42a:	4620      	mov	r0, r4
 800e42c:	f000 feec 	bl	800f208 <__lshift>
 800e430:	9b01      	ldr	r3, [sp, #4]
 800e432:	f103 0901 	add.w	r9, r3, #1
 800e436:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e43a:	4413      	add	r3, r2
 800e43c:	9305      	str	r3, [sp, #20]
 800e43e:	f00a 0301 	and.w	r3, sl, #1
 800e442:	46b8      	mov	r8, r7
 800e444:	9304      	str	r3, [sp, #16]
 800e446:	4607      	mov	r7, r0
 800e448:	4631      	mov	r1, r6
 800e44a:	ee18 0a10 	vmov	r0, s16
 800e44e:	f7ff fa77 	bl	800d940 <quorem>
 800e452:	4641      	mov	r1, r8
 800e454:	9002      	str	r0, [sp, #8]
 800e456:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e45a:	ee18 0a10 	vmov	r0, s16
 800e45e:	f000 ff43 	bl	800f2e8 <__mcmp>
 800e462:	463a      	mov	r2, r7
 800e464:	9003      	str	r0, [sp, #12]
 800e466:	4631      	mov	r1, r6
 800e468:	4620      	mov	r0, r4
 800e46a:	f000 ff59 	bl	800f320 <__mdiff>
 800e46e:	68c2      	ldr	r2, [r0, #12]
 800e470:	f109 3bff 	add.w	fp, r9, #4294967295
 800e474:	4605      	mov	r5, r0
 800e476:	bb02      	cbnz	r2, 800e4ba <_dtoa_r+0xa62>
 800e478:	4601      	mov	r1, r0
 800e47a:	ee18 0a10 	vmov	r0, s16
 800e47e:	f000 ff33 	bl	800f2e8 <__mcmp>
 800e482:	4602      	mov	r2, r0
 800e484:	4629      	mov	r1, r5
 800e486:	4620      	mov	r0, r4
 800e488:	9207      	str	r2, [sp, #28]
 800e48a:	f000 fca1 	bl	800edd0 <_Bfree>
 800e48e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e492:	ea43 0102 	orr.w	r1, r3, r2
 800e496:	9b04      	ldr	r3, [sp, #16]
 800e498:	430b      	orrs	r3, r1
 800e49a:	464d      	mov	r5, r9
 800e49c:	d10f      	bne.n	800e4be <_dtoa_r+0xa66>
 800e49e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e4a2:	d02a      	beq.n	800e4fa <_dtoa_r+0xaa2>
 800e4a4:	9b03      	ldr	r3, [sp, #12]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	dd02      	ble.n	800e4b0 <_dtoa_r+0xa58>
 800e4aa:	9b02      	ldr	r3, [sp, #8]
 800e4ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e4b0:	f88b a000 	strb.w	sl, [fp]
 800e4b4:	e775      	b.n	800e3a2 <_dtoa_r+0x94a>
 800e4b6:	4638      	mov	r0, r7
 800e4b8:	e7ba      	b.n	800e430 <_dtoa_r+0x9d8>
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	e7e2      	b.n	800e484 <_dtoa_r+0xa2c>
 800e4be:	9b03      	ldr	r3, [sp, #12]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	db04      	blt.n	800e4ce <_dtoa_r+0xa76>
 800e4c4:	9906      	ldr	r1, [sp, #24]
 800e4c6:	430b      	orrs	r3, r1
 800e4c8:	9904      	ldr	r1, [sp, #16]
 800e4ca:	430b      	orrs	r3, r1
 800e4cc:	d122      	bne.n	800e514 <_dtoa_r+0xabc>
 800e4ce:	2a00      	cmp	r2, #0
 800e4d0:	ddee      	ble.n	800e4b0 <_dtoa_r+0xa58>
 800e4d2:	ee18 1a10 	vmov	r1, s16
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	4620      	mov	r0, r4
 800e4da:	f000 fe95 	bl	800f208 <__lshift>
 800e4de:	4631      	mov	r1, r6
 800e4e0:	ee08 0a10 	vmov	s16, r0
 800e4e4:	f000 ff00 	bl	800f2e8 <__mcmp>
 800e4e8:	2800      	cmp	r0, #0
 800e4ea:	dc03      	bgt.n	800e4f4 <_dtoa_r+0xa9c>
 800e4ec:	d1e0      	bne.n	800e4b0 <_dtoa_r+0xa58>
 800e4ee:	f01a 0f01 	tst.w	sl, #1
 800e4f2:	d0dd      	beq.n	800e4b0 <_dtoa_r+0xa58>
 800e4f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e4f8:	d1d7      	bne.n	800e4aa <_dtoa_r+0xa52>
 800e4fa:	2339      	movs	r3, #57	; 0x39
 800e4fc:	f88b 3000 	strb.w	r3, [fp]
 800e500:	462b      	mov	r3, r5
 800e502:	461d      	mov	r5, r3
 800e504:	3b01      	subs	r3, #1
 800e506:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e50a:	2a39      	cmp	r2, #57	; 0x39
 800e50c:	d071      	beq.n	800e5f2 <_dtoa_r+0xb9a>
 800e50e:	3201      	adds	r2, #1
 800e510:	701a      	strb	r2, [r3, #0]
 800e512:	e746      	b.n	800e3a2 <_dtoa_r+0x94a>
 800e514:	2a00      	cmp	r2, #0
 800e516:	dd07      	ble.n	800e528 <_dtoa_r+0xad0>
 800e518:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e51c:	d0ed      	beq.n	800e4fa <_dtoa_r+0xaa2>
 800e51e:	f10a 0301 	add.w	r3, sl, #1
 800e522:	f88b 3000 	strb.w	r3, [fp]
 800e526:	e73c      	b.n	800e3a2 <_dtoa_r+0x94a>
 800e528:	9b05      	ldr	r3, [sp, #20]
 800e52a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e52e:	4599      	cmp	r9, r3
 800e530:	d047      	beq.n	800e5c2 <_dtoa_r+0xb6a>
 800e532:	ee18 1a10 	vmov	r1, s16
 800e536:	2300      	movs	r3, #0
 800e538:	220a      	movs	r2, #10
 800e53a:	4620      	mov	r0, r4
 800e53c:	f000 fc6a 	bl	800ee14 <__multadd>
 800e540:	45b8      	cmp	r8, r7
 800e542:	ee08 0a10 	vmov	s16, r0
 800e546:	f04f 0300 	mov.w	r3, #0
 800e54a:	f04f 020a 	mov.w	r2, #10
 800e54e:	4641      	mov	r1, r8
 800e550:	4620      	mov	r0, r4
 800e552:	d106      	bne.n	800e562 <_dtoa_r+0xb0a>
 800e554:	f000 fc5e 	bl	800ee14 <__multadd>
 800e558:	4680      	mov	r8, r0
 800e55a:	4607      	mov	r7, r0
 800e55c:	f109 0901 	add.w	r9, r9, #1
 800e560:	e772      	b.n	800e448 <_dtoa_r+0x9f0>
 800e562:	f000 fc57 	bl	800ee14 <__multadd>
 800e566:	4639      	mov	r1, r7
 800e568:	4680      	mov	r8, r0
 800e56a:	2300      	movs	r3, #0
 800e56c:	220a      	movs	r2, #10
 800e56e:	4620      	mov	r0, r4
 800e570:	f000 fc50 	bl	800ee14 <__multadd>
 800e574:	4607      	mov	r7, r0
 800e576:	e7f1      	b.n	800e55c <_dtoa_r+0xb04>
 800e578:	9b03      	ldr	r3, [sp, #12]
 800e57a:	9302      	str	r3, [sp, #8]
 800e57c:	9d01      	ldr	r5, [sp, #4]
 800e57e:	ee18 0a10 	vmov	r0, s16
 800e582:	4631      	mov	r1, r6
 800e584:	f7ff f9dc 	bl	800d940 <quorem>
 800e588:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e58c:	9b01      	ldr	r3, [sp, #4]
 800e58e:	f805 ab01 	strb.w	sl, [r5], #1
 800e592:	1aea      	subs	r2, r5, r3
 800e594:	9b02      	ldr	r3, [sp, #8]
 800e596:	4293      	cmp	r3, r2
 800e598:	dd09      	ble.n	800e5ae <_dtoa_r+0xb56>
 800e59a:	ee18 1a10 	vmov	r1, s16
 800e59e:	2300      	movs	r3, #0
 800e5a0:	220a      	movs	r2, #10
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	f000 fc36 	bl	800ee14 <__multadd>
 800e5a8:	ee08 0a10 	vmov	s16, r0
 800e5ac:	e7e7      	b.n	800e57e <_dtoa_r+0xb26>
 800e5ae:	9b02      	ldr	r3, [sp, #8]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	bfc8      	it	gt
 800e5b4:	461d      	movgt	r5, r3
 800e5b6:	9b01      	ldr	r3, [sp, #4]
 800e5b8:	bfd8      	it	le
 800e5ba:	2501      	movle	r5, #1
 800e5bc:	441d      	add	r5, r3
 800e5be:	f04f 0800 	mov.w	r8, #0
 800e5c2:	ee18 1a10 	vmov	r1, s16
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	f000 fe1d 	bl	800f208 <__lshift>
 800e5ce:	4631      	mov	r1, r6
 800e5d0:	ee08 0a10 	vmov	s16, r0
 800e5d4:	f000 fe88 	bl	800f2e8 <__mcmp>
 800e5d8:	2800      	cmp	r0, #0
 800e5da:	dc91      	bgt.n	800e500 <_dtoa_r+0xaa8>
 800e5dc:	d102      	bne.n	800e5e4 <_dtoa_r+0xb8c>
 800e5de:	f01a 0f01 	tst.w	sl, #1
 800e5e2:	d18d      	bne.n	800e500 <_dtoa_r+0xaa8>
 800e5e4:	462b      	mov	r3, r5
 800e5e6:	461d      	mov	r5, r3
 800e5e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5ec:	2a30      	cmp	r2, #48	; 0x30
 800e5ee:	d0fa      	beq.n	800e5e6 <_dtoa_r+0xb8e>
 800e5f0:	e6d7      	b.n	800e3a2 <_dtoa_r+0x94a>
 800e5f2:	9a01      	ldr	r2, [sp, #4]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d184      	bne.n	800e502 <_dtoa_r+0xaaa>
 800e5f8:	9b00      	ldr	r3, [sp, #0]
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	9300      	str	r3, [sp, #0]
 800e5fe:	2331      	movs	r3, #49	; 0x31
 800e600:	7013      	strb	r3, [r2, #0]
 800e602:	e6ce      	b.n	800e3a2 <_dtoa_r+0x94a>
 800e604:	4b09      	ldr	r3, [pc, #36]	; (800e62c <_dtoa_r+0xbd4>)
 800e606:	f7ff ba95 	b.w	800db34 <_dtoa_r+0xdc>
 800e60a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	f47f aa6e 	bne.w	800daee <_dtoa_r+0x96>
 800e612:	4b07      	ldr	r3, [pc, #28]	; (800e630 <_dtoa_r+0xbd8>)
 800e614:	f7ff ba8e 	b.w	800db34 <_dtoa_r+0xdc>
 800e618:	9b02      	ldr	r3, [sp, #8]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	dcae      	bgt.n	800e57c <_dtoa_r+0xb24>
 800e61e:	9b06      	ldr	r3, [sp, #24]
 800e620:	2b02      	cmp	r3, #2
 800e622:	f73f aea8 	bgt.w	800e376 <_dtoa_r+0x91e>
 800e626:	e7a9      	b.n	800e57c <_dtoa_r+0xb24>
 800e628:	08013090 	.word	0x08013090
 800e62c:	08012e90 	.word	0x08012e90
 800e630:	08013011 	.word	0x08013011

0800e634 <rshift>:
 800e634:	6903      	ldr	r3, [r0, #16]
 800e636:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e63a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e63e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e642:	f100 0414 	add.w	r4, r0, #20
 800e646:	dd45      	ble.n	800e6d4 <rshift+0xa0>
 800e648:	f011 011f 	ands.w	r1, r1, #31
 800e64c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e650:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e654:	d10c      	bne.n	800e670 <rshift+0x3c>
 800e656:	f100 0710 	add.w	r7, r0, #16
 800e65a:	4629      	mov	r1, r5
 800e65c:	42b1      	cmp	r1, r6
 800e65e:	d334      	bcc.n	800e6ca <rshift+0x96>
 800e660:	1a9b      	subs	r3, r3, r2
 800e662:	009b      	lsls	r3, r3, #2
 800e664:	1eea      	subs	r2, r5, #3
 800e666:	4296      	cmp	r6, r2
 800e668:	bf38      	it	cc
 800e66a:	2300      	movcc	r3, #0
 800e66c:	4423      	add	r3, r4
 800e66e:	e015      	b.n	800e69c <rshift+0x68>
 800e670:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e674:	f1c1 0820 	rsb	r8, r1, #32
 800e678:	40cf      	lsrs	r7, r1
 800e67a:	f105 0e04 	add.w	lr, r5, #4
 800e67e:	46a1      	mov	r9, r4
 800e680:	4576      	cmp	r6, lr
 800e682:	46f4      	mov	ip, lr
 800e684:	d815      	bhi.n	800e6b2 <rshift+0x7e>
 800e686:	1a9a      	subs	r2, r3, r2
 800e688:	0092      	lsls	r2, r2, #2
 800e68a:	3a04      	subs	r2, #4
 800e68c:	3501      	adds	r5, #1
 800e68e:	42ae      	cmp	r6, r5
 800e690:	bf38      	it	cc
 800e692:	2200      	movcc	r2, #0
 800e694:	18a3      	adds	r3, r4, r2
 800e696:	50a7      	str	r7, [r4, r2]
 800e698:	b107      	cbz	r7, 800e69c <rshift+0x68>
 800e69a:	3304      	adds	r3, #4
 800e69c:	1b1a      	subs	r2, r3, r4
 800e69e:	42a3      	cmp	r3, r4
 800e6a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e6a4:	bf08      	it	eq
 800e6a6:	2300      	moveq	r3, #0
 800e6a8:	6102      	str	r2, [r0, #16]
 800e6aa:	bf08      	it	eq
 800e6ac:	6143      	streq	r3, [r0, #20]
 800e6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6b2:	f8dc c000 	ldr.w	ip, [ip]
 800e6b6:	fa0c fc08 	lsl.w	ip, ip, r8
 800e6ba:	ea4c 0707 	orr.w	r7, ip, r7
 800e6be:	f849 7b04 	str.w	r7, [r9], #4
 800e6c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e6c6:	40cf      	lsrs	r7, r1
 800e6c8:	e7da      	b.n	800e680 <rshift+0x4c>
 800e6ca:	f851 cb04 	ldr.w	ip, [r1], #4
 800e6ce:	f847 cf04 	str.w	ip, [r7, #4]!
 800e6d2:	e7c3      	b.n	800e65c <rshift+0x28>
 800e6d4:	4623      	mov	r3, r4
 800e6d6:	e7e1      	b.n	800e69c <rshift+0x68>

0800e6d8 <__hexdig_fun>:
 800e6d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e6dc:	2b09      	cmp	r3, #9
 800e6de:	d802      	bhi.n	800e6e6 <__hexdig_fun+0xe>
 800e6e0:	3820      	subs	r0, #32
 800e6e2:	b2c0      	uxtb	r0, r0
 800e6e4:	4770      	bx	lr
 800e6e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e6ea:	2b05      	cmp	r3, #5
 800e6ec:	d801      	bhi.n	800e6f2 <__hexdig_fun+0x1a>
 800e6ee:	3847      	subs	r0, #71	; 0x47
 800e6f0:	e7f7      	b.n	800e6e2 <__hexdig_fun+0xa>
 800e6f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e6f6:	2b05      	cmp	r3, #5
 800e6f8:	d801      	bhi.n	800e6fe <__hexdig_fun+0x26>
 800e6fa:	3827      	subs	r0, #39	; 0x27
 800e6fc:	e7f1      	b.n	800e6e2 <__hexdig_fun+0xa>
 800e6fe:	2000      	movs	r0, #0
 800e700:	4770      	bx	lr
	...

0800e704 <__gethex>:
 800e704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e708:	ed2d 8b02 	vpush	{d8}
 800e70c:	b089      	sub	sp, #36	; 0x24
 800e70e:	ee08 0a10 	vmov	s16, r0
 800e712:	9304      	str	r3, [sp, #16]
 800e714:	4bb4      	ldr	r3, [pc, #720]	; (800e9e8 <__gethex+0x2e4>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	9301      	str	r3, [sp, #4]
 800e71a:	4618      	mov	r0, r3
 800e71c:	468b      	mov	fp, r1
 800e71e:	4690      	mov	r8, r2
 800e720:	f7f1 fd5e 	bl	80001e0 <strlen>
 800e724:	9b01      	ldr	r3, [sp, #4]
 800e726:	f8db 2000 	ldr.w	r2, [fp]
 800e72a:	4403      	add	r3, r0
 800e72c:	4682      	mov	sl, r0
 800e72e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e732:	9305      	str	r3, [sp, #20]
 800e734:	1c93      	adds	r3, r2, #2
 800e736:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e73a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e73e:	32fe      	adds	r2, #254	; 0xfe
 800e740:	18d1      	adds	r1, r2, r3
 800e742:	461f      	mov	r7, r3
 800e744:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e748:	9100      	str	r1, [sp, #0]
 800e74a:	2830      	cmp	r0, #48	; 0x30
 800e74c:	d0f8      	beq.n	800e740 <__gethex+0x3c>
 800e74e:	f7ff ffc3 	bl	800e6d8 <__hexdig_fun>
 800e752:	4604      	mov	r4, r0
 800e754:	2800      	cmp	r0, #0
 800e756:	d13a      	bne.n	800e7ce <__gethex+0xca>
 800e758:	9901      	ldr	r1, [sp, #4]
 800e75a:	4652      	mov	r2, sl
 800e75c:	4638      	mov	r0, r7
 800e75e:	f001 fa23 	bl	800fba8 <strncmp>
 800e762:	4605      	mov	r5, r0
 800e764:	2800      	cmp	r0, #0
 800e766:	d168      	bne.n	800e83a <__gethex+0x136>
 800e768:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e76c:	eb07 060a 	add.w	r6, r7, sl
 800e770:	f7ff ffb2 	bl	800e6d8 <__hexdig_fun>
 800e774:	2800      	cmp	r0, #0
 800e776:	d062      	beq.n	800e83e <__gethex+0x13a>
 800e778:	4633      	mov	r3, r6
 800e77a:	7818      	ldrb	r0, [r3, #0]
 800e77c:	2830      	cmp	r0, #48	; 0x30
 800e77e:	461f      	mov	r7, r3
 800e780:	f103 0301 	add.w	r3, r3, #1
 800e784:	d0f9      	beq.n	800e77a <__gethex+0x76>
 800e786:	f7ff ffa7 	bl	800e6d8 <__hexdig_fun>
 800e78a:	2301      	movs	r3, #1
 800e78c:	fab0 f480 	clz	r4, r0
 800e790:	0964      	lsrs	r4, r4, #5
 800e792:	4635      	mov	r5, r6
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	463a      	mov	r2, r7
 800e798:	4616      	mov	r6, r2
 800e79a:	3201      	adds	r2, #1
 800e79c:	7830      	ldrb	r0, [r6, #0]
 800e79e:	f7ff ff9b 	bl	800e6d8 <__hexdig_fun>
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	d1f8      	bne.n	800e798 <__gethex+0x94>
 800e7a6:	9901      	ldr	r1, [sp, #4]
 800e7a8:	4652      	mov	r2, sl
 800e7aa:	4630      	mov	r0, r6
 800e7ac:	f001 f9fc 	bl	800fba8 <strncmp>
 800e7b0:	b980      	cbnz	r0, 800e7d4 <__gethex+0xd0>
 800e7b2:	b94d      	cbnz	r5, 800e7c8 <__gethex+0xc4>
 800e7b4:	eb06 050a 	add.w	r5, r6, sl
 800e7b8:	462a      	mov	r2, r5
 800e7ba:	4616      	mov	r6, r2
 800e7bc:	3201      	adds	r2, #1
 800e7be:	7830      	ldrb	r0, [r6, #0]
 800e7c0:	f7ff ff8a 	bl	800e6d8 <__hexdig_fun>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d1f8      	bne.n	800e7ba <__gethex+0xb6>
 800e7c8:	1bad      	subs	r5, r5, r6
 800e7ca:	00ad      	lsls	r5, r5, #2
 800e7cc:	e004      	b.n	800e7d8 <__gethex+0xd4>
 800e7ce:	2400      	movs	r4, #0
 800e7d0:	4625      	mov	r5, r4
 800e7d2:	e7e0      	b.n	800e796 <__gethex+0x92>
 800e7d4:	2d00      	cmp	r5, #0
 800e7d6:	d1f7      	bne.n	800e7c8 <__gethex+0xc4>
 800e7d8:	7833      	ldrb	r3, [r6, #0]
 800e7da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e7de:	2b50      	cmp	r3, #80	; 0x50
 800e7e0:	d13b      	bne.n	800e85a <__gethex+0x156>
 800e7e2:	7873      	ldrb	r3, [r6, #1]
 800e7e4:	2b2b      	cmp	r3, #43	; 0x2b
 800e7e6:	d02c      	beq.n	800e842 <__gethex+0x13e>
 800e7e8:	2b2d      	cmp	r3, #45	; 0x2d
 800e7ea:	d02e      	beq.n	800e84a <__gethex+0x146>
 800e7ec:	1c71      	adds	r1, r6, #1
 800e7ee:	f04f 0900 	mov.w	r9, #0
 800e7f2:	7808      	ldrb	r0, [r1, #0]
 800e7f4:	f7ff ff70 	bl	800e6d8 <__hexdig_fun>
 800e7f8:	1e43      	subs	r3, r0, #1
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	2b18      	cmp	r3, #24
 800e7fe:	d82c      	bhi.n	800e85a <__gethex+0x156>
 800e800:	f1a0 0210 	sub.w	r2, r0, #16
 800e804:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e808:	f7ff ff66 	bl	800e6d8 <__hexdig_fun>
 800e80c:	1e43      	subs	r3, r0, #1
 800e80e:	b2db      	uxtb	r3, r3
 800e810:	2b18      	cmp	r3, #24
 800e812:	d91d      	bls.n	800e850 <__gethex+0x14c>
 800e814:	f1b9 0f00 	cmp.w	r9, #0
 800e818:	d000      	beq.n	800e81c <__gethex+0x118>
 800e81a:	4252      	negs	r2, r2
 800e81c:	4415      	add	r5, r2
 800e81e:	f8cb 1000 	str.w	r1, [fp]
 800e822:	b1e4      	cbz	r4, 800e85e <__gethex+0x15a>
 800e824:	9b00      	ldr	r3, [sp, #0]
 800e826:	2b00      	cmp	r3, #0
 800e828:	bf14      	ite	ne
 800e82a:	2700      	movne	r7, #0
 800e82c:	2706      	moveq	r7, #6
 800e82e:	4638      	mov	r0, r7
 800e830:	b009      	add	sp, #36	; 0x24
 800e832:	ecbd 8b02 	vpop	{d8}
 800e836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e83a:	463e      	mov	r6, r7
 800e83c:	4625      	mov	r5, r4
 800e83e:	2401      	movs	r4, #1
 800e840:	e7ca      	b.n	800e7d8 <__gethex+0xd4>
 800e842:	f04f 0900 	mov.w	r9, #0
 800e846:	1cb1      	adds	r1, r6, #2
 800e848:	e7d3      	b.n	800e7f2 <__gethex+0xee>
 800e84a:	f04f 0901 	mov.w	r9, #1
 800e84e:	e7fa      	b.n	800e846 <__gethex+0x142>
 800e850:	230a      	movs	r3, #10
 800e852:	fb03 0202 	mla	r2, r3, r2, r0
 800e856:	3a10      	subs	r2, #16
 800e858:	e7d4      	b.n	800e804 <__gethex+0x100>
 800e85a:	4631      	mov	r1, r6
 800e85c:	e7df      	b.n	800e81e <__gethex+0x11a>
 800e85e:	1bf3      	subs	r3, r6, r7
 800e860:	3b01      	subs	r3, #1
 800e862:	4621      	mov	r1, r4
 800e864:	2b07      	cmp	r3, #7
 800e866:	dc0b      	bgt.n	800e880 <__gethex+0x17c>
 800e868:	ee18 0a10 	vmov	r0, s16
 800e86c:	f000 fa70 	bl	800ed50 <_Balloc>
 800e870:	4604      	mov	r4, r0
 800e872:	b940      	cbnz	r0, 800e886 <__gethex+0x182>
 800e874:	4b5d      	ldr	r3, [pc, #372]	; (800e9ec <__gethex+0x2e8>)
 800e876:	4602      	mov	r2, r0
 800e878:	21de      	movs	r1, #222	; 0xde
 800e87a:	485d      	ldr	r0, [pc, #372]	; (800e9f0 <__gethex+0x2ec>)
 800e87c:	f001 f9b6 	bl	800fbec <__assert_func>
 800e880:	3101      	adds	r1, #1
 800e882:	105b      	asrs	r3, r3, #1
 800e884:	e7ee      	b.n	800e864 <__gethex+0x160>
 800e886:	f100 0914 	add.w	r9, r0, #20
 800e88a:	f04f 0b00 	mov.w	fp, #0
 800e88e:	f1ca 0301 	rsb	r3, sl, #1
 800e892:	f8cd 9008 	str.w	r9, [sp, #8]
 800e896:	f8cd b000 	str.w	fp, [sp]
 800e89a:	9306      	str	r3, [sp, #24]
 800e89c:	42b7      	cmp	r7, r6
 800e89e:	d340      	bcc.n	800e922 <__gethex+0x21e>
 800e8a0:	9802      	ldr	r0, [sp, #8]
 800e8a2:	9b00      	ldr	r3, [sp, #0]
 800e8a4:	f840 3b04 	str.w	r3, [r0], #4
 800e8a8:	eba0 0009 	sub.w	r0, r0, r9
 800e8ac:	1080      	asrs	r0, r0, #2
 800e8ae:	0146      	lsls	r6, r0, #5
 800e8b0:	6120      	str	r0, [r4, #16]
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f000 fb3e 	bl	800ef34 <__hi0bits>
 800e8b8:	1a30      	subs	r0, r6, r0
 800e8ba:	f8d8 6000 	ldr.w	r6, [r8]
 800e8be:	42b0      	cmp	r0, r6
 800e8c0:	dd63      	ble.n	800e98a <__gethex+0x286>
 800e8c2:	1b87      	subs	r7, r0, r6
 800e8c4:	4639      	mov	r1, r7
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	f000 fee2 	bl	800f690 <__any_on>
 800e8cc:	4682      	mov	sl, r0
 800e8ce:	b1a8      	cbz	r0, 800e8fc <__gethex+0x1f8>
 800e8d0:	1e7b      	subs	r3, r7, #1
 800e8d2:	1159      	asrs	r1, r3, #5
 800e8d4:	f003 021f 	and.w	r2, r3, #31
 800e8d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e8dc:	f04f 0a01 	mov.w	sl, #1
 800e8e0:	fa0a f202 	lsl.w	r2, sl, r2
 800e8e4:	420a      	tst	r2, r1
 800e8e6:	d009      	beq.n	800e8fc <__gethex+0x1f8>
 800e8e8:	4553      	cmp	r3, sl
 800e8ea:	dd05      	ble.n	800e8f8 <__gethex+0x1f4>
 800e8ec:	1eb9      	subs	r1, r7, #2
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	f000 fece 	bl	800f690 <__any_on>
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	d145      	bne.n	800e984 <__gethex+0x280>
 800e8f8:	f04f 0a02 	mov.w	sl, #2
 800e8fc:	4639      	mov	r1, r7
 800e8fe:	4620      	mov	r0, r4
 800e900:	f7ff fe98 	bl	800e634 <rshift>
 800e904:	443d      	add	r5, r7
 800e906:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e90a:	42ab      	cmp	r3, r5
 800e90c:	da4c      	bge.n	800e9a8 <__gethex+0x2a4>
 800e90e:	ee18 0a10 	vmov	r0, s16
 800e912:	4621      	mov	r1, r4
 800e914:	f000 fa5c 	bl	800edd0 <_Bfree>
 800e918:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e91a:	2300      	movs	r3, #0
 800e91c:	6013      	str	r3, [r2, #0]
 800e91e:	27a3      	movs	r7, #163	; 0xa3
 800e920:	e785      	b.n	800e82e <__gethex+0x12a>
 800e922:	1e73      	subs	r3, r6, #1
 800e924:	9a05      	ldr	r2, [sp, #20]
 800e926:	9303      	str	r3, [sp, #12]
 800e928:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d019      	beq.n	800e964 <__gethex+0x260>
 800e930:	f1bb 0f20 	cmp.w	fp, #32
 800e934:	d107      	bne.n	800e946 <__gethex+0x242>
 800e936:	9b02      	ldr	r3, [sp, #8]
 800e938:	9a00      	ldr	r2, [sp, #0]
 800e93a:	f843 2b04 	str.w	r2, [r3], #4
 800e93e:	9302      	str	r3, [sp, #8]
 800e940:	2300      	movs	r3, #0
 800e942:	9300      	str	r3, [sp, #0]
 800e944:	469b      	mov	fp, r3
 800e946:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e94a:	f7ff fec5 	bl	800e6d8 <__hexdig_fun>
 800e94e:	9b00      	ldr	r3, [sp, #0]
 800e950:	f000 000f 	and.w	r0, r0, #15
 800e954:	fa00 f00b 	lsl.w	r0, r0, fp
 800e958:	4303      	orrs	r3, r0
 800e95a:	9300      	str	r3, [sp, #0]
 800e95c:	f10b 0b04 	add.w	fp, fp, #4
 800e960:	9b03      	ldr	r3, [sp, #12]
 800e962:	e00d      	b.n	800e980 <__gethex+0x27c>
 800e964:	9b03      	ldr	r3, [sp, #12]
 800e966:	9a06      	ldr	r2, [sp, #24]
 800e968:	4413      	add	r3, r2
 800e96a:	42bb      	cmp	r3, r7
 800e96c:	d3e0      	bcc.n	800e930 <__gethex+0x22c>
 800e96e:	4618      	mov	r0, r3
 800e970:	9901      	ldr	r1, [sp, #4]
 800e972:	9307      	str	r3, [sp, #28]
 800e974:	4652      	mov	r2, sl
 800e976:	f001 f917 	bl	800fba8 <strncmp>
 800e97a:	9b07      	ldr	r3, [sp, #28]
 800e97c:	2800      	cmp	r0, #0
 800e97e:	d1d7      	bne.n	800e930 <__gethex+0x22c>
 800e980:	461e      	mov	r6, r3
 800e982:	e78b      	b.n	800e89c <__gethex+0x198>
 800e984:	f04f 0a03 	mov.w	sl, #3
 800e988:	e7b8      	b.n	800e8fc <__gethex+0x1f8>
 800e98a:	da0a      	bge.n	800e9a2 <__gethex+0x29e>
 800e98c:	1a37      	subs	r7, r6, r0
 800e98e:	4621      	mov	r1, r4
 800e990:	ee18 0a10 	vmov	r0, s16
 800e994:	463a      	mov	r2, r7
 800e996:	f000 fc37 	bl	800f208 <__lshift>
 800e99a:	1bed      	subs	r5, r5, r7
 800e99c:	4604      	mov	r4, r0
 800e99e:	f100 0914 	add.w	r9, r0, #20
 800e9a2:	f04f 0a00 	mov.w	sl, #0
 800e9a6:	e7ae      	b.n	800e906 <__gethex+0x202>
 800e9a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e9ac:	42a8      	cmp	r0, r5
 800e9ae:	dd72      	ble.n	800ea96 <__gethex+0x392>
 800e9b0:	1b45      	subs	r5, r0, r5
 800e9b2:	42ae      	cmp	r6, r5
 800e9b4:	dc36      	bgt.n	800ea24 <__gethex+0x320>
 800e9b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e9ba:	2b02      	cmp	r3, #2
 800e9bc:	d02a      	beq.n	800ea14 <__gethex+0x310>
 800e9be:	2b03      	cmp	r3, #3
 800e9c0:	d02c      	beq.n	800ea1c <__gethex+0x318>
 800e9c2:	2b01      	cmp	r3, #1
 800e9c4:	d11c      	bne.n	800ea00 <__gethex+0x2fc>
 800e9c6:	42ae      	cmp	r6, r5
 800e9c8:	d11a      	bne.n	800ea00 <__gethex+0x2fc>
 800e9ca:	2e01      	cmp	r6, #1
 800e9cc:	d112      	bne.n	800e9f4 <__gethex+0x2f0>
 800e9ce:	9a04      	ldr	r2, [sp, #16]
 800e9d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e9d4:	6013      	str	r3, [r2, #0]
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	6123      	str	r3, [r4, #16]
 800e9da:	f8c9 3000 	str.w	r3, [r9]
 800e9de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e9e0:	2762      	movs	r7, #98	; 0x62
 800e9e2:	601c      	str	r4, [r3, #0]
 800e9e4:	e723      	b.n	800e82e <__gethex+0x12a>
 800e9e6:	bf00      	nop
 800e9e8:	08013108 	.word	0x08013108
 800e9ec:	08013090 	.word	0x08013090
 800e9f0:	080130a1 	.word	0x080130a1
 800e9f4:	1e71      	subs	r1, r6, #1
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	f000 fe4a 	bl	800f690 <__any_on>
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	d1e6      	bne.n	800e9ce <__gethex+0x2ca>
 800ea00:	ee18 0a10 	vmov	r0, s16
 800ea04:	4621      	mov	r1, r4
 800ea06:	f000 f9e3 	bl	800edd0 <_Bfree>
 800ea0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	6013      	str	r3, [r2, #0]
 800ea10:	2750      	movs	r7, #80	; 0x50
 800ea12:	e70c      	b.n	800e82e <__gethex+0x12a>
 800ea14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d1f2      	bne.n	800ea00 <__gethex+0x2fc>
 800ea1a:	e7d8      	b.n	800e9ce <__gethex+0x2ca>
 800ea1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d1d5      	bne.n	800e9ce <__gethex+0x2ca>
 800ea22:	e7ed      	b.n	800ea00 <__gethex+0x2fc>
 800ea24:	1e6f      	subs	r7, r5, #1
 800ea26:	f1ba 0f00 	cmp.w	sl, #0
 800ea2a:	d131      	bne.n	800ea90 <__gethex+0x38c>
 800ea2c:	b127      	cbz	r7, 800ea38 <__gethex+0x334>
 800ea2e:	4639      	mov	r1, r7
 800ea30:	4620      	mov	r0, r4
 800ea32:	f000 fe2d 	bl	800f690 <__any_on>
 800ea36:	4682      	mov	sl, r0
 800ea38:	117b      	asrs	r3, r7, #5
 800ea3a:	2101      	movs	r1, #1
 800ea3c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ea40:	f007 071f 	and.w	r7, r7, #31
 800ea44:	fa01 f707 	lsl.w	r7, r1, r7
 800ea48:	421f      	tst	r7, r3
 800ea4a:	4629      	mov	r1, r5
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	bf18      	it	ne
 800ea50:	f04a 0a02 	orrne.w	sl, sl, #2
 800ea54:	1b76      	subs	r6, r6, r5
 800ea56:	f7ff fded 	bl	800e634 <rshift>
 800ea5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ea5e:	2702      	movs	r7, #2
 800ea60:	f1ba 0f00 	cmp.w	sl, #0
 800ea64:	d048      	beq.n	800eaf8 <__gethex+0x3f4>
 800ea66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea6a:	2b02      	cmp	r3, #2
 800ea6c:	d015      	beq.n	800ea9a <__gethex+0x396>
 800ea6e:	2b03      	cmp	r3, #3
 800ea70:	d017      	beq.n	800eaa2 <__gethex+0x39e>
 800ea72:	2b01      	cmp	r3, #1
 800ea74:	d109      	bne.n	800ea8a <__gethex+0x386>
 800ea76:	f01a 0f02 	tst.w	sl, #2
 800ea7a:	d006      	beq.n	800ea8a <__gethex+0x386>
 800ea7c:	f8d9 0000 	ldr.w	r0, [r9]
 800ea80:	ea4a 0a00 	orr.w	sl, sl, r0
 800ea84:	f01a 0f01 	tst.w	sl, #1
 800ea88:	d10e      	bne.n	800eaa8 <__gethex+0x3a4>
 800ea8a:	f047 0710 	orr.w	r7, r7, #16
 800ea8e:	e033      	b.n	800eaf8 <__gethex+0x3f4>
 800ea90:	f04f 0a01 	mov.w	sl, #1
 800ea94:	e7d0      	b.n	800ea38 <__gethex+0x334>
 800ea96:	2701      	movs	r7, #1
 800ea98:	e7e2      	b.n	800ea60 <__gethex+0x35c>
 800ea9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea9c:	f1c3 0301 	rsb	r3, r3, #1
 800eaa0:	9315      	str	r3, [sp, #84]	; 0x54
 800eaa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d0f0      	beq.n	800ea8a <__gethex+0x386>
 800eaa8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eaac:	f104 0314 	add.w	r3, r4, #20
 800eab0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eab4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eab8:	f04f 0c00 	mov.w	ip, #0
 800eabc:	4618      	mov	r0, r3
 800eabe:	f853 2b04 	ldr.w	r2, [r3], #4
 800eac2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800eac6:	d01c      	beq.n	800eb02 <__gethex+0x3fe>
 800eac8:	3201      	adds	r2, #1
 800eaca:	6002      	str	r2, [r0, #0]
 800eacc:	2f02      	cmp	r7, #2
 800eace:	f104 0314 	add.w	r3, r4, #20
 800ead2:	d13f      	bne.n	800eb54 <__gethex+0x450>
 800ead4:	f8d8 2000 	ldr.w	r2, [r8]
 800ead8:	3a01      	subs	r2, #1
 800eada:	42b2      	cmp	r2, r6
 800eadc:	d10a      	bne.n	800eaf4 <__gethex+0x3f0>
 800eade:	1171      	asrs	r1, r6, #5
 800eae0:	2201      	movs	r2, #1
 800eae2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eae6:	f006 061f 	and.w	r6, r6, #31
 800eaea:	fa02 f606 	lsl.w	r6, r2, r6
 800eaee:	421e      	tst	r6, r3
 800eaf0:	bf18      	it	ne
 800eaf2:	4617      	movne	r7, r2
 800eaf4:	f047 0720 	orr.w	r7, r7, #32
 800eaf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eafa:	601c      	str	r4, [r3, #0]
 800eafc:	9b04      	ldr	r3, [sp, #16]
 800eafe:	601d      	str	r5, [r3, #0]
 800eb00:	e695      	b.n	800e82e <__gethex+0x12a>
 800eb02:	4299      	cmp	r1, r3
 800eb04:	f843 cc04 	str.w	ip, [r3, #-4]
 800eb08:	d8d8      	bhi.n	800eabc <__gethex+0x3b8>
 800eb0a:	68a3      	ldr	r3, [r4, #8]
 800eb0c:	459b      	cmp	fp, r3
 800eb0e:	db19      	blt.n	800eb44 <__gethex+0x440>
 800eb10:	6861      	ldr	r1, [r4, #4]
 800eb12:	ee18 0a10 	vmov	r0, s16
 800eb16:	3101      	adds	r1, #1
 800eb18:	f000 f91a 	bl	800ed50 <_Balloc>
 800eb1c:	4681      	mov	r9, r0
 800eb1e:	b918      	cbnz	r0, 800eb28 <__gethex+0x424>
 800eb20:	4b1a      	ldr	r3, [pc, #104]	; (800eb8c <__gethex+0x488>)
 800eb22:	4602      	mov	r2, r0
 800eb24:	2184      	movs	r1, #132	; 0x84
 800eb26:	e6a8      	b.n	800e87a <__gethex+0x176>
 800eb28:	6922      	ldr	r2, [r4, #16]
 800eb2a:	3202      	adds	r2, #2
 800eb2c:	f104 010c 	add.w	r1, r4, #12
 800eb30:	0092      	lsls	r2, r2, #2
 800eb32:	300c      	adds	r0, #12
 800eb34:	f7fd f9a2 	bl	800be7c <memcpy>
 800eb38:	4621      	mov	r1, r4
 800eb3a:	ee18 0a10 	vmov	r0, s16
 800eb3e:	f000 f947 	bl	800edd0 <_Bfree>
 800eb42:	464c      	mov	r4, r9
 800eb44:	6923      	ldr	r3, [r4, #16]
 800eb46:	1c5a      	adds	r2, r3, #1
 800eb48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eb4c:	6122      	str	r2, [r4, #16]
 800eb4e:	2201      	movs	r2, #1
 800eb50:	615a      	str	r2, [r3, #20]
 800eb52:	e7bb      	b.n	800eacc <__gethex+0x3c8>
 800eb54:	6922      	ldr	r2, [r4, #16]
 800eb56:	455a      	cmp	r2, fp
 800eb58:	dd0b      	ble.n	800eb72 <__gethex+0x46e>
 800eb5a:	2101      	movs	r1, #1
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	f7ff fd69 	bl	800e634 <rshift>
 800eb62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb66:	3501      	adds	r5, #1
 800eb68:	42ab      	cmp	r3, r5
 800eb6a:	f6ff aed0 	blt.w	800e90e <__gethex+0x20a>
 800eb6e:	2701      	movs	r7, #1
 800eb70:	e7c0      	b.n	800eaf4 <__gethex+0x3f0>
 800eb72:	f016 061f 	ands.w	r6, r6, #31
 800eb76:	d0fa      	beq.n	800eb6e <__gethex+0x46a>
 800eb78:	4453      	add	r3, sl
 800eb7a:	f1c6 0620 	rsb	r6, r6, #32
 800eb7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eb82:	f000 f9d7 	bl	800ef34 <__hi0bits>
 800eb86:	42b0      	cmp	r0, r6
 800eb88:	dbe7      	blt.n	800eb5a <__gethex+0x456>
 800eb8a:	e7f0      	b.n	800eb6e <__gethex+0x46a>
 800eb8c:	08013090 	.word	0x08013090

0800eb90 <L_shift>:
 800eb90:	f1c2 0208 	rsb	r2, r2, #8
 800eb94:	0092      	lsls	r2, r2, #2
 800eb96:	b570      	push	{r4, r5, r6, lr}
 800eb98:	f1c2 0620 	rsb	r6, r2, #32
 800eb9c:	6843      	ldr	r3, [r0, #4]
 800eb9e:	6804      	ldr	r4, [r0, #0]
 800eba0:	fa03 f506 	lsl.w	r5, r3, r6
 800eba4:	432c      	orrs	r4, r5
 800eba6:	40d3      	lsrs	r3, r2
 800eba8:	6004      	str	r4, [r0, #0]
 800ebaa:	f840 3f04 	str.w	r3, [r0, #4]!
 800ebae:	4288      	cmp	r0, r1
 800ebb0:	d3f4      	bcc.n	800eb9c <L_shift+0xc>
 800ebb2:	bd70      	pop	{r4, r5, r6, pc}

0800ebb4 <__match>:
 800ebb4:	b530      	push	{r4, r5, lr}
 800ebb6:	6803      	ldr	r3, [r0, #0]
 800ebb8:	3301      	adds	r3, #1
 800ebba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebbe:	b914      	cbnz	r4, 800ebc6 <__match+0x12>
 800ebc0:	6003      	str	r3, [r0, #0]
 800ebc2:	2001      	movs	r0, #1
 800ebc4:	bd30      	pop	{r4, r5, pc}
 800ebc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ebce:	2d19      	cmp	r5, #25
 800ebd0:	bf98      	it	ls
 800ebd2:	3220      	addls	r2, #32
 800ebd4:	42a2      	cmp	r2, r4
 800ebd6:	d0f0      	beq.n	800ebba <__match+0x6>
 800ebd8:	2000      	movs	r0, #0
 800ebda:	e7f3      	b.n	800ebc4 <__match+0x10>

0800ebdc <__hexnan>:
 800ebdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebe0:	680b      	ldr	r3, [r1, #0]
 800ebe2:	115e      	asrs	r6, r3, #5
 800ebe4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ebe8:	f013 031f 	ands.w	r3, r3, #31
 800ebec:	b087      	sub	sp, #28
 800ebee:	bf18      	it	ne
 800ebf0:	3604      	addne	r6, #4
 800ebf2:	2500      	movs	r5, #0
 800ebf4:	1f37      	subs	r7, r6, #4
 800ebf6:	4690      	mov	r8, r2
 800ebf8:	6802      	ldr	r2, [r0, #0]
 800ebfa:	9301      	str	r3, [sp, #4]
 800ebfc:	4682      	mov	sl, r0
 800ebfe:	f846 5c04 	str.w	r5, [r6, #-4]
 800ec02:	46b9      	mov	r9, r7
 800ec04:	463c      	mov	r4, r7
 800ec06:	9502      	str	r5, [sp, #8]
 800ec08:	46ab      	mov	fp, r5
 800ec0a:	7851      	ldrb	r1, [r2, #1]
 800ec0c:	1c53      	adds	r3, r2, #1
 800ec0e:	9303      	str	r3, [sp, #12]
 800ec10:	b341      	cbz	r1, 800ec64 <__hexnan+0x88>
 800ec12:	4608      	mov	r0, r1
 800ec14:	9205      	str	r2, [sp, #20]
 800ec16:	9104      	str	r1, [sp, #16]
 800ec18:	f7ff fd5e 	bl	800e6d8 <__hexdig_fun>
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	d14f      	bne.n	800ecc0 <__hexnan+0xe4>
 800ec20:	9904      	ldr	r1, [sp, #16]
 800ec22:	9a05      	ldr	r2, [sp, #20]
 800ec24:	2920      	cmp	r1, #32
 800ec26:	d818      	bhi.n	800ec5a <__hexnan+0x7e>
 800ec28:	9b02      	ldr	r3, [sp, #8]
 800ec2a:	459b      	cmp	fp, r3
 800ec2c:	dd13      	ble.n	800ec56 <__hexnan+0x7a>
 800ec2e:	454c      	cmp	r4, r9
 800ec30:	d206      	bcs.n	800ec40 <__hexnan+0x64>
 800ec32:	2d07      	cmp	r5, #7
 800ec34:	dc04      	bgt.n	800ec40 <__hexnan+0x64>
 800ec36:	462a      	mov	r2, r5
 800ec38:	4649      	mov	r1, r9
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f7ff ffa8 	bl	800eb90 <L_shift>
 800ec40:	4544      	cmp	r4, r8
 800ec42:	d950      	bls.n	800ece6 <__hexnan+0x10a>
 800ec44:	2300      	movs	r3, #0
 800ec46:	f1a4 0904 	sub.w	r9, r4, #4
 800ec4a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec4e:	f8cd b008 	str.w	fp, [sp, #8]
 800ec52:	464c      	mov	r4, r9
 800ec54:	461d      	mov	r5, r3
 800ec56:	9a03      	ldr	r2, [sp, #12]
 800ec58:	e7d7      	b.n	800ec0a <__hexnan+0x2e>
 800ec5a:	2929      	cmp	r1, #41	; 0x29
 800ec5c:	d156      	bne.n	800ed0c <__hexnan+0x130>
 800ec5e:	3202      	adds	r2, #2
 800ec60:	f8ca 2000 	str.w	r2, [sl]
 800ec64:	f1bb 0f00 	cmp.w	fp, #0
 800ec68:	d050      	beq.n	800ed0c <__hexnan+0x130>
 800ec6a:	454c      	cmp	r4, r9
 800ec6c:	d206      	bcs.n	800ec7c <__hexnan+0xa0>
 800ec6e:	2d07      	cmp	r5, #7
 800ec70:	dc04      	bgt.n	800ec7c <__hexnan+0xa0>
 800ec72:	462a      	mov	r2, r5
 800ec74:	4649      	mov	r1, r9
 800ec76:	4620      	mov	r0, r4
 800ec78:	f7ff ff8a 	bl	800eb90 <L_shift>
 800ec7c:	4544      	cmp	r4, r8
 800ec7e:	d934      	bls.n	800ecea <__hexnan+0x10e>
 800ec80:	f1a8 0204 	sub.w	r2, r8, #4
 800ec84:	4623      	mov	r3, r4
 800ec86:	f853 1b04 	ldr.w	r1, [r3], #4
 800ec8a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ec8e:	429f      	cmp	r7, r3
 800ec90:	d2f9      	bcs.n	800ec86 <__hexnan+0xaa>
 800ec92:	1b3b      	subs	r3, r7, r4
 800ec94:	f023 0303 	bic.w	r3, r3, #3
 800ec98:	3304      	adds	r3, #4
 800ec9a:	3401      	adds	r4, #1
 800ec9c:	3e03      	subs	r6, #3
 800ec9e:	42b4      	cmp	r4, r6
 800eca0:	bf88      	it	hi
 800eca2:	2304      	movhi	r3, #4
 800eca4:	4443      	add	r3, r8
 800eca6:	2200      	movs	r2, #0
 800eca8:	f843 2b04 	str.w	r2, [r3], #4
 800ecac:	429f      	cmp	r7, r3
 800ecae:	d2fb      	bcs.n	800eca8 <__hexnan+0xcc>
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	b91b      	cbnz	r3, 800ecbc <__hexnan+0xe0>
 800ecb4:	4547      	cmp	r7, r8
 800ecb6:	d127      	bne.n	800ed08 <__hexnan+0x12c>
 800ecb8:	2301      	movs	r3, #1
 800ecba:	603b      	str	r3, [r7, #0]
 800ecbc:	2005      	movs	r0, #5
 800ecbe:	e026      	b.n	800ed0e <__hexnan+0x132>
 800ecc0:	3501      	adds	r5, #1
 800ecc2:	2d08      	cmp	r5, #8
 800ecc4:	f10b 0b01 	add.w	fp, fp, #1
 800ecc8:	dd06      	ble.n	800ecd8 <__hexnan+0xfc>
 800ecca:	4544      	cmp	r4, r8
 800eccc:	d9c3      	bls.n	800ec56 <__hexnan+0x7a>
 800ecce:	2300      	movs	r3, #0
 800ecd0:	f844 3c04 	str.w	r3, [r4, #-4]
 800ecd4:	2501      	movs	r5, #1
 800ecd6:	3c04      	subs	r4, #4
 800ecd8:	6822      	ldr	r2, [r4, #0]
 800ecda:	f000 000f 	and.w	r0, r0, #15
 800ecde:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ece2:	6022      	str	r2, [r4, #0]
 800ece4:	e7b7      	b.n	800ec56 <__hexnan+0x7a>
 800ece6:	2508      	movs	r5, #8
 800ece8:	e7b5      	b.n	800ec56 <__hexnan+0x7a>
 800ecea:	9b01      	ldr	r3, [sp, #4]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d0df      	beq.n	800ecb0 <__hexnan+0xd4>
 800ecf0:	f04f 32ff 	mov.w	r2, #4294967295
 800ecf4:	f1c3 0320 	rsb	r3, r3, #32
 800ecf8:	fa22 f303 	lsr.w	r3, r2, r3
 800ecfc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ed00:	401a      	ands	r2, r3
 800ed02:	f846 2c04 	str.w	r2, [r6, #-4]
 800ed06:	e7d3      	b.n	800ecb0 <__hexnan+0xd4>
 800ed08:	3f04      	subs	r7, #4
 800ed0a:	e7d1      	b.n	800ecb0 <__hexnan+0xd4>
 800ed0c:	2004      	movs	r0, #4
 800ed0e:	b007      	add	sp, #28
 800ed10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed14 <_localeconv_r>:
 800ed14:	4800      	ldr	r0, [pc, #0]	; (800ed18 <_localeconv_r+0x4>)
 800ed16:	4770      	bx	lr
 800ed18:	20000394 	.word	0x20000394

0800ed1c <malloc>:
 800ed1c:	4b02      	ldr	r3, [pc, #8]	; (800ed28 <malloc+0xc>)
 800ed1e:	4601      	mov	r1, r0
 800ed20:	6818      	ldr	r0, [r3, #0]
 800ed22:	f000 bd59 	b.w	800f7d8 <_malloc_r>
 800ed26:	bf00      	nop
 800ed28:	2000023c 	.word	0x2000023c

0800ed2c <__ascii_mbtowc>:
 800ed2c:	b082      	sub	sp, #8
 800ed2e:	b901      	cbnz	r1, 800ed32 <__ascii_mbtowc+0x6>
 800ed30:	a901      	add	r1, sp, #4
 800ed32:	b142      	cbz	r2, 800ed46 <__ascii_mbtowc+0x1a>
 800ed34:	b14b      	cbz	r3, 800ed4a <__ascii_mbtowc+0x1e>
 800ed36:	7813      	ldrb	r3, [r2, #0]
 800ed38:	600b      	str	r3, [r1, #0]
 800ed3a:	7812      	ldrb	r2, [r2, #0]
 800ed3c:	1e10      	subs	r0, r2, #0
 800ed3e:	bf18      	it	ne
 800ed40:	2001      	movne	r0, #1
 800ed42:	b002      	add	sp, #8
 800ed44:	4770      	bx	lr
 800ed46:	4610      	mov	r0, r2
 800ed48:	e7fb      	b.n	800ed42 <__ascii_mbtowc+0x16>
 800ed4a:	f06f 0001 	mvn.w	r0, #1
 800ed4e:	e7f8      	b.n	800ed42 <__ascii_mbtowc+0x16>

0800ed50 <_Balloc>:
 800ed50:	b570      	push	{r4, r5, r6, lr}
 800ed52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ed54:	4604      	mov	r4, r0
 800ed56:	460d      	mov	r5, r1
 800ed58:	b976      	cbnz	r6, 800ed78 <_Balloc+0x28>
 800ed5a:	2010      	movs	r0, #16
 800ed5c:	f7ff ffde 	bl	800ed1c <malloc>
 800ed60:	4602      	mov	r2, r0
 800ed62:	6260      	str	r0, [r4, #36]	; 0x24
 800ed64:	b920      	cbnz	r0, 800ed70 <_Balloc+0x20>
 800ed66:	4b18      	ldr	r3, [pc, #96]	; (800edc8 <_Balloc+0x78>)
 800ed68:	4818      	ldr	r0, [pc, #96]	; (800edcc <_Balloc+0x7c>)
 800ed6a:	2166      	movs	r1, #102	; 0x66
 800ed6c:	f000 ff3e 	bl	800fbec <__assert_func>
 800ed70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed74:	6006      	str	r6, [r0, #0]
 800ed76:	60c6      	str	r6, [r0, #12]
 800ed78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ed7a:	68f3      	ldr	r3, [r6, #12]
 800ed7c:	b183      	cbz	r3, 800eda0 <_Balloc+0x50>
 800ed7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ed86:	b9b8      	cbnz	r0, 800edb8 <_Balloc+0x68>
 800ed88:	2101      	movs	r1, #1
 800ed8a:	fa01 f605 	lsl.w	r6, r1, r5
 800ed8e:	1d72      	adds	r2, r6, #5
 800ed90:	0092      	lsls	r2, r2, #2
 800ed92:	4620      	mov	r0, r4
 800ed94:	f000 fc9d 	bl	800f6d2 <_calloc_r>
 800ed98:	b160      	cbz	r0, 800edb4 <_Balloc+0x64>
 800ed9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ed9e:	e00e      	b.n	800edbe <_Balloc+0x6e>
 800eda0:	2221      	movs	r2, #33	; 0x21
 800eda2:	2104      	movs	r1, #4
 800eda4:	4620      	mov	r0, r4
 800eda6:	f000 fc94 	bl	800f6d2 <_calloc_r>
 800edaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edac:	60f0      	str	r0, [r6, #12]
 800edae:	68db      	ldr	r3, [r3, #12]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d1e4      	bne.n	800ed7e <_Balloc+0x2e>
 800edb4:	2000      	movs	r0, #0
 800edb6:	bd70      	pop	{r4, r5, r6, pc}
 800edb8:	6802      	ldr	r2, [r0, #0]
 800edba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800edbe:	2300      	movs	r3, #0
 800edc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800edc4:	e7f7      	b.n	800edb6 <_Balloc+0x66>
 800edc6:	bf00      	nop
 800edc8:	0801301e 	.word	0x0801301e
 800edcc:	0801311c 	.word	0x0801311c

0800edd0 <_Bfree>:
 800edd0:	b570      	push	{r4, r5, r6, lr}
 800edd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800edd4:	4605      	mov	r5, r0
 800edd6:	460c      	mov	r4, r1
 800edd8:	b976      	cbnz	r6, 800edf8 <_Bfree+0x28>
 800edda:	2010      	movs	r0, #16
 800eddc:	f7ff ff9e 	bl	800ed1c <malloc>
 800ede0:	4602      	mov	r2, r0
 800ede2:	6268      	str	r0, [r5, #36]	; 0x24
 800ede4:	b920      	cbnz	r0, 800edf0 <_Bfree+0x20>
 800ede6:	4b09      	ldr	r3, [pc, #36]	; (800ee0c <_Bfree+0x3c>)
 800ede8:	4809      	ldr	r0, [pc, #36]	; (800ee10 <_Bfree+0x40>)
 800edea:	218a      	movs	r1, #138	; 0x8a
 800edec:	f000 fefe 	bl	800fbec <__assert_func>
 800edf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800edf4:	6006      	str	r6, [r0, #0]
 800edf6:	60c6      	str	r6, [r0, #12]
 800edf8:	b13c      	cbz	r4, 800ee0a <_Bfree+0x3a>
 800edfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800edfc:	6862      	ldr	r2, [r4, #4]
 800edfe:	68db      	ldr	r3, [r3, #12]
 800ee00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee04:	6021      	str	r1, [r4, #0]
 800ee06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ee0a:	bd70      	pop	{r4, r5, r6, pc}
 800ee0c:	0801301e 	.word	0x0801301e
 800ee10:	0801311c 	.word	0x0801311c

0800ee14 <__multadd>:
 800ee14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee18:	690d      	ldr	r5, [r1, #16]
 800ee1a:	4607      	mov	r7, r0
 800ee1c:	460c      	mov	r4, r1
 800ee1e:	461e      	mov	r6, r3
 800ee20:	f101 0c14 	add.w	ip, r1, #20
 800ee24:	2000      	movs	r0, #0
 800ee26:	f8dc 3000 	ldr.w	r3, [ip]
 800ee2a:	b299      	uxth	r1, r3
 800ee2c:	fb02 6101 	mla	r1, r2, r1, r6
 800ee30:	0c1e      	lsrs	r6, r3, #16
 800ee32:	0c0b      	lsrs	r3, r1, #16
 800ee34:	fb02 3306 	mla	r3, r2, r6, r3
 800ee38:	b289      	uxth	r1, r1
 800ee3a:	3001      	adds	r0, #1
 800ee3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ee40:	4285      	cmp	r5, r0
 800ee42:	f84c 1b04 	str.w	r1, [ip], #4
 800ee46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ee4a:	dcec      	bgt.n	800ee26 <__multadd+0x12>
 800ee4c:	b30e      	cbz	r6, 800ee92 <__multadd+0x7e>
 800ee4e:	68a3      	ldr	r3, [r4, #8]
 800ee50:	42ab      	cmp	r3, r5
 800ee52:	dc19      	bgt.n	800ee88 <__multadd+0x74>
 800ee54:	6861      	ldr	r1, [r4, #4]
 800ee56:	4638      	mov	r0, r7
 800ee58:	3101      	adds	r1, #1
 800ee5a:	f7ff ff79 	bl	800ed50 <_Balloc>
 800ee5e:	4680      	mov	r8, r0
 800ee60:	b928      	cbnz	r0, 800ee6e <__multadd+0x5a>
 800ee62:	4602      	mov	r2, r0
 800ee64:	4b0c      	ldr	r3, [pc, #48]	; (800ee98 <__multadd+0x84>)
 800ee66:	480d      	ldr	r0, [pc, #52]	; (800ee9c <__multadd+0x88>)
 800ee68:	21b5      	movs	r1, #181	; 0xb5
 800ee6a:	f000 febf 	bl	800fbec <__assert_func>
 800ee6e:	6922      	ldr	r2, [r4, #16]
 800ee70:	3202      	adds	r2, #2
 800ee72:	f104 010c 	add.w	r1, r4, #12
 800ee76:	0092      	lsls	r2, r2, #2
 800ee78:	300c      	adds	r0, #12
 800ee7a:	f7fc ffff 	bl	800be7c <memcpy>
 800ee7e:	4621      	mov	r1, r4
 800ee80:	4638      	mov	r0, r7
 800ee82:	f7ff ffa5 	bl	800edd0 <_Bfree>
 800ee86:	4644      	mov	r4, r8
 800ee88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ee8c:	3501      	adds	r5, #1
 800ee8e:	615e      	str	r6, [r3, #20]
 800ee90:	6125      	str	r5, [r4, #16]
 800ee92:	4620      	mov	r0, r4
 800ee94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee98:	08013090 	.word	0x08013090
 800ee9c:	0801311c 	.word	0x0801311c

0800eea0 <__s2b>:
 800eea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eea4:	460c      	mov	r4, r1
 800eea6:	4615      	mov	r5, r2
 800eea8:	461f      	mov	r7, r3
 800eeaa:	2209      	movs	r2, #9
 800eeac:	3308      	adds	r3, #8
 800eeae:	4606      	mov	r6, r0
 800eeb0:	fb93 f3f2 	sdiv	r3, r3, r2
 800eeb4:	2100      	movs	r1, #0
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	db09      	blt.n	800eed0 <__s2b+0x30>
 800eebc:	4630      	mov	r0, r6
 800eebe:	f7ff ff47 	bl	800ed50 <_Balloc>
 800eec2:	b940      	cbnz	r0, 800eed6 <__s2b+0x36>
 800eec4:	4602      	mov	r2, r0
 800eec6:	4b19      	ldr	r3, [pc, #100]	; (800ef2c <__s2b+0x8c>)
 800eec8:	4819      	ldr	r0, [pc, #100]	; (800ef30 <__s2b+0x90>)
 800eeca:	21ce      	movs	r1, #206	; 0xce
 800eecc:	f000 fe8e 	bl	800fbec <__assert_func>
 800eed0:	0052      	lsls	r2, r2, #1
 800eed2:	3101      	adds	r1, #1
 800eed4:	e7f0      	b.n	800eeb8 <__s2b+0x18>
 800eed6:	9b08      	ldr	r3, [sp, #32]
 800eed8:	6143      	str	r3, [r0, #20]
 800eeda:	2d09      	cmp	r5, #9
 800eedc:	f04f 0301 	mov.w	r3, #1
 800eee0:	6103      	str	r3, [r0, #16]
 800eee2:	dd16      	ble.n	800ef12 <__s2b+0x72>
 800eee4:	f104 0909 	add.w	r9, r4, #9
 800eee8:	46c8      	mov	r8, r9
 800eeea:	442c      	add	r4, r5
 800eeec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eef0:	4601      	mov	r1, r0
 800eef2:	3b30      	subs	r3, #48	; 0x30
 800eef4:	220a      	movs	r2, #10
 800eef6:	4630      	mov	r0, r6
 800eef8:	f7ff ff8c 	bl	800ee14 <__multadd>
 800eefc:	45a0      	cmp	r8, r4
 800eefe:	d1f5      	bne.n	800eeec <__s2b+0x4c>
 800ef00:	f1a5 0408 	sub.w	r4, r5, #8
 800ef04:	444c      	add	r4, r9
 800ef06:	1b2d      	subs	r5, r5, r4
 800ef08:	1963      	adds	r3, r4, r5
 800ef0a:	42bb      	cmp	r3, r7
 800ef0c:	db04      	blt.n	800ef18 <__s2b+0x78>
 800ef0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef12:	340a      	adds	r4, #10
 800ef14:	2509      	movs	r5, #9
 800ef16:	e7f6      	b.n	800ef06 <__s2b+0x66>
 800ef18:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ef1c:	4601      	mov	r1, r0
 800ef1e:	3b30      	subs	r3, #48	; 0x30
 800ef20:	220a      	movs	r2, #10
 800ef22:	4630      	mov	r0, r6
 800ef24:	f7ff ff76 	bl	800ee14 <__multadd>
 800ef28:	e7ee      	b.n	800ef08 <__s2b+0x68>
 800ef2a:	bf00      	nop
 800ef2c:	08013090 	.word	0x08013090
 800ef30:	0801311c 	.word	0x0801311c

0800ef34 <__hi0bits>:
 800ef34:	0c03      	lsrs	r3, r0, #16
 800ef36:	041b      	lsls	r3, r3, #16
 800ef38:	b9d3      	cbnz	r3, 800ef70 <__hi0bits+0x3c>
 800ef3a:	0400      	lsls	r0, r0, #16
 800ef3c:	2310      	movs	r3, #16
 800ef3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ef42:	bf04      	itt	eq
 800ef44:	0200      	lsleq	r0, r0, #8
 800ef46:	3308      	addeq	r3, #8
 800ef48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ef4c:	bf04      	itt	eq
 800ef4e:	0100      	lsleq	r0, r0, #4
 800ef50:	3304      	addeq	r3, #4
 800ef52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ef56:	bf04      	itt	eq
 800ef58:	0080      	lsleq	r0, r0, #2
 800ef5a:	3302      	addeq	r3, #2
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	db05      	blt.n	800ef6c <__hi0bits+0x38>
 800ef60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ef64:	f103 0301 	add.w	r3, r3, #1
 800ef68:	bf08      	it	eq
 800ef6a:	2320      	moveq	r3, #32
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	4770      	bx	lr
 800ef70:	2300      	movs	r3, #0
 800ef72:	e7e4      	b.n	800ef3e <__hi0bits+0xa>

0800ef74 <__lo0bits>:
 800ef74:	6803      	ldr	r3, [r0, #0]
 800ef76:	f013 0207 	ands.w	r2, r3, #7
 800ef7a:	4601      	mov	r1, r0
 800ef7c:	d00b      	beq.n	800ef96 <__lo0bits+0x22>
 800ef7e:	07da      	lsls	r2, r3, #31
 800ef80:	d423      	bmi.n	800efca <__lo0bits+0x56>
 800ef82:	0798      	lsls	r0, r3, #30
 800ef84:	bf49      	itett	mi
 800ef86:	085b      	lsrmi	r3, r3, #1
 800ef88:	089b      	lsrpl	r3, r3, #2
 800ef8a:	2001      	movmi	r0, #1
 800ef8c:	600b      	strmi	r3, [r1, #0]
 800ef8e:	bf5c      	itt	pl
 800ef90:	600b      	strpl	r3, [r1, #0]
 800ef92:	2002      	movpl	r0, #2
 800ef94:	4770      	bx	lr
 800ef96:	b298      	uxth	r0, r3
 800ef98:	b9a8      	cbnz	r0, 800efc6 <__lo0bits+0x52>
 800ef9a:	0c1b      	lsrs	r3, r3, #16
 800ef9c:	2010      	movs	r0, #16
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	b90a      	cbnz	r2, 800efa6 <__lo0bits+0x32>
 800efa2:	3008      	adds	r0, #8
 800efa4:	0a1b      	lsrs	r3, r3, #8
 800efa6:	071a      	lsls	r2, r3, #28
 800efa8:	bf04      	itt	eq
 800efaa:	091b      	lsreq	r3, r3, #4
 800efac:	3004      	addeq	r0, #4
 800efae:	079a      	lsls	r2, r3, #30
 800efb0:	bf04      	itt	eq
 800efb2:	089b      	lsreq	r3, r3, #2
 800efb4:	3002      	addeq	r0, #2
 800efb6:	07da      	lsls	r2, r3, #31
 800efb8:	d403      	bmi.n	800efc2 <__lo0bits+0x4e>
 800efba:	085b      	lsrs	r3, r3, #1
 800efbc:	f100 0001 	add.w	r0, r0, #1
 800efc0:	d005      	beq.n	800efce <__lo0bits+0x5a>
 800efc2:	600b      	str	r3, [r1, #0]
 800efc4:	4770      	bx	lr
 800efc6:	4610      	mov	r0, r2
 800efc8:	e7e9      	b.n	800ef9e <__lo0bits+0x2a>
 800efca:	2000      	movs	r0, #0
 800efcc:	4770      	bx	lr
 800efce:	2020      	movs	r0, #32
 800efd0:	4770      	bx	lr
	...

0800efd4 <__i2b>:
 800efd4:	b510      	push	{r4, lr}
 800efd6:	460c      	mov	r4, r1
 800efd8:	2101      	movs	r1, #1
 800efda:	f7ff feb9 	bl	800ed50 <_Balloc>
 800efde:	4602      	mov	r2, r0
 800efe0:	b928      	cbnz	r0, 800efee <__i2b+0x1a>
 800efe2:	4b05      	ldr	r3, [pc, #20]	; (800eff8 <__i2b+0x24>)
 800efe4:	4805      	ldr	r0, [pc, #20]	; (800effc <__i2b+0x28>)
 800efe6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800efea:	f000 fdff 	bl	800fbec <__assert_func>
 800efee:	2301      	movs	r3, #1
 800eff0:	6144      	str	r4, [r0, #20]
 800eff2:	6103      	str	r3, [r0, #16]
 800eff4:	bd10      	pop	{r4, pc}
 800eff6:	bf00      	nop
 800eff8:	08013090 	.word	0x08013090
 800effc:	0801311c 	.word	0x0801311c

0800f000 <__multiply>:
 800f000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f004:	4691      	mov	r9, r2
 800f006:	690a      	ldr	r2, [r1, #16]
 800f008:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	bfb8      	it	lt
 800f010:	460b      	movlt	r3, r1
 800f012:	460c      	mov	r4, r1
 800f014:	bfbc      	itt	lt
 800f016:	464c      	movlt	r4, r9
 800f018:	4699      	movlt	r9, r3
 800f01a:	6927      	ldr	r7, [r4, #16]
 800f01c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f020:	68a3      	ldr	r3, [r4, #8]
 800f022:	6861      	ldr	r1, [r4, #4]
 800f024:	eb07 060a 	add.w	r6, r7, sl
 800f028:	42b3      	cmp	r3, r6
 800f02a:	b085      	sub	sp, #20
 800f02c:	bfb8      	it	lt
 800f02e:	3101      	addlt	r1, #1
 800f030:	f7ff fe8e 	bl	800ed50 <_Balloc>
 800f034:	b930      	cbnz	r0, 800f044 <__multiply+0x44>
 800f036:	4602      	mov	r2, r0
 800f038:	4b44      	ldr	r3, [pc, #272]	; (800f14c <__multiply+0x14c>)
 800f03a:	4845      	ldr	r0, [pc, #276]	; (800f150 <__multiply+0x150>)
 800f03c:	f240 115d 	movw	r1, #349	; 0x15d
 800f040:	f000 fdd4 	bl	800fbec <__assert_func>
 800f044:	f100 0514 	add.w	r5, r0, #20
 800f048:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f04c:	462b      	mov	r3, r5
 800f04e:	2200      	movs	r2, #0
 800f050:	4543      	cmp	r3, r8
 800f052:	d321      	bcc.n	800f098 <__multiply+0x98>
 800f054:	f104 0314 	add.w	r3, r4, #20
 800f058:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f05c:	f109 0314 	add.w	r3, r9, #20
 800f060:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f064:	9202      	str	r2, [sp, #8]
 800f066:	1b3a      	subs	r2, r7, r4
 800f068:	3a15      	subs	r2, #21
 800f06a:	f022 0203 	bic.w	r2, r2, #3
 800f06e:	3204      	adds	r2, #4
 800f070:	f104 0115 	add.w	r1, r4, #21
 800f074:	428f      	cmp	r7, r1
 800f076:	bf38      	it	cc
 800f078:	2204      	movcc	r2, #4
 800f07a:	9201      	str	r2, [sp, #4]
 800f07c:	9a02      	ldr	r2, [sp, #8]
 800f07e:	9303      	str	r3, [sp, #12]
 800f080:	429a      	cmp	r2, r3
 800f082:	d80c      	bhi.n	800f09e <__multiply+0x9e>
 800f084:	2e00      	cmp	r6, #0
 800f086:	dd03      	ble.n	800f090 <__multiply+0x90>
 800f088:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d05a      	beq.n	800f146 <__multiply+0x146>
 800f090:	6106      	str	r6, [r0, #16]
 800f092:	b005      	add	sp, #20
 800f094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f098:	f843 2b04 	str.w	r2, [r3], #4
 800f09c:	e7d8      	b.n	800f050 <__multiply+0x50>
 800f09e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f0a2:	f1ba 0f00 	cmp.w	sl, #0
 800f0a6:	d024      	beq.n	800f0f2 <__multiply+0xf2>
 800f0a8:	f104 0e14 	add.w	lr, r4, #20
 800f0ac:	46a9      	mov	r9, r5
 800f0ae:	f04f 0c00 	mov.w	ip, #0
 800f0b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f0b6:	f8d9 1000 	ldr.w	r1, [r9]
 800f0ba:	fa1f fb82 	uxth.w	fp, r2
 800f0be:	b289      	uxth	r1, r1
 800f0c0:	fb0a 110b 	mla	r1, sl, fp, r1
 800f0c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f0c8:	f8d9 2000 	ldr.w	r2, [r9]
 800f0cc:	4461      	add	r1, ip
 800f0ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f0d2:	fb0a c20b 	mla	r2, sl, fp, ip
 800f0d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f0da:	b289      	uxth	r1, r1
 800f0dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f0e0:	4577      	cmp	r7, lr
 800f0e2:	f849 1b04 	str.w	r1, [r9], #4
 800f0e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f0ea:	d8e2      	bhi.n	800f0b2 <__multiply+0xb2>
 800f0ec:	9a01      	ldr	r2, [sp, #4]
 800f0ee:	f845 c002 	str.w	ip, [r5, r2]
 800f0f2:	9a03      	ldr	r2, [sp, #12]
 800f0f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f0f8:	3304      	adds	r3, #4
 800f0fa:	f1b9 0f00 	cmp.w	r9, #0
 800f0fe:	d020      	beq.n	800f142 <__multiply+0x142>
 800f100:	6829      	ldr	r1, [r5, #0]
 800f102:	f104 0c14 	add.w	ip, r4, #20
 800f106:	46ae      	mov	lr, r5
 800f108:	f04f 0a00 	mov.w	sl, #0
 800f10c:	f8bc b000 	ldrh.w	fp, [ip]
 800f110:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f114:	fb09 220b 	mla	r2, r9, fp, r2
 800f118:	4492      	add	sl, r2
 800f11a:	b289      	uxth	r1, r1
 800f11c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f120:	f84e 1b04 	str.w	r1, [lr], #4
 800f124:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f128:	f8be 1000 	ldrh.w	r1, [lr]
 800f12c:	0c12      	lsrs	r2, r2, #16
 800f12e:	fb09 1102 	mla	r1, r9, r2, r1
 800f132:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f136:	4567      	cmp	r7, ip
 800f138:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f13c:	d8e6      	bhi.n	800f10c <__multiply+0x10c>
 800f13e:	9a01      	ldr	r2, [sp, #4]
 800f140:	50a9      	str	r1, [r5, r2]
 800f142:	3504      	adds	r5, #4
 800f144:	e79a      	b.n	800f07c <__multiply+0x7c>
 800f146:	3e01      	subs	r6, #1
 800f148:	e79c      	b.n	800f084 <__multiply+0x84>
 800f14a:	bf00      	nop
 800f14c:	08013090 	.word	0x08013090
 800f150:	0801311c 	.word	0x0801311c

0800f154 <__pow5mult>:
 800f154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f158:	4615      	mov	r5, r2
 800f15a:	f012 0203 	ands.w	r2, r2, #3
 800f15e:	4606      	mov	r6, r0
 800f160:	460f      	mov	r7, r1
 800f162:	d007      	beq.n	800f174 <__pow5mult+0x20>
 800f164:	4c25      	ldr	r4, [pc, #148]	; (800f1fc <__pow5mult+0xa8>)
 800f166:	3a01      	subs	r2, #1
 800f168:	2300      	movs	r3, #0
 800f16a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f16e:	f7ff fe51 	bl	800ee14 <__multadd>
 800f172:	4607      	mov	r7, r0
 800f174:	10ad      	asrs	r5, r5, #2
 800f176:	d03d      	beq.n	800f1f4 <__pow5mult+0xa0>
 800f178:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f17a:	b97c      	cbnz	r4, 800f19c <__pow5mult+0x48>
 800f17c:	2010      	movs	r0, #16
 800f17e:	f7ff fdcd 	bl	800ed1c <malloc>
 800f182:	4602      	mov	r2, r0
 800f184:	6270      	str	r0, [r6, #36]	; 0x24
 800f186:	b928      	cbnz	r0, 800f194 <__pow5mult+0x40>
 800f188:	4b1d      	ldr	r3, [pc, #116]	; (800f200 <__pow5mult+0xac>)
 800f18a:	481e      	ldr	r0, [pc, #120]	; (800f204 <__pow5mult+0xb0>)
 800f18c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f190:	f000 fd2c 	bl	800fbec <__assert_func>
 800f194:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f198:	6004      	str	r4, [r0, #0]
 800f19a:	60c4      	str	r4, [r0, #12]
 800f19c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f1a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f1a4:	b94c      	cbnz	r4, 800f1ba <__pow5mult+0x66>
 800f1a6:	f240 2171 	movw	r1, #625	; 0x271
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	f7ff ff12 	bl	800efd4 <__i2b>
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f1b6:	4604      	mov	r4, r0
 800f1b8:	6003      	str	r3, [r0, #0]
 800f1ba:	f04f 0900 	mov.w	r9, #0
 800f1be:	07eb      	lsls	r3, r5, #31
 800f1c0:	d50a      	bpl.n	800f1d8 <__pow5mult+0x84>
 800f1c2:	4639      	mov	r1, r7
 800f1c4:	4622      	mov	r2, r4
 800f1c6:	4630      	mov	r0, r6
 800f1c8:	f7ff ff1a 	bl	800f000 <__multiply>
 800f1cc:	4639      	mov	r1, r7
 800f1ce:	4680      	mov	r8, r0
 800f1d0:	4630      	mov	r0, r6
 800f1d2:	f7ff fdfd 	bl	800edd0 <_Bfree>
 800f1d6:	4647      	mov	r7, r8
 800f1d8:	106d      	asrs	r5, r5, #1
 800f1da:	d00b      	beq.n	800f1f4 <__pow5mult+0xa0>
 800f1dc:	6820      	ldr	r0, [r4, #0]
 800f1de:	b938      	cbnz	r0, 800f1f0 <__pow5mult+0x9c>
 800f1e0:	4622      	mov	r2, r4
 800f1e2:	4621      	mov	r1, r4
 800f1e4:	4630      	mov	r0, r6
 800f1e6:	f7ff ff0b 	bl	800f000 <__multiply>
 800f1ea:	6020      	str	r0, [r4, #0]
 800f1ec:	f8c0 9000 	str.w	r9, [r0]
 800f1f0:	4604      	mov	r4, r0
 800f1f2:	e7e4      	b.n	800f1be <__pow5mult+0x6a>
 800f1f4:	4638      	mov	r0, r7
 800f1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1fa:	bf00      	nop
 800f1fc:	08013268 	.word	0x08013268
 800f200:	0801301e 	.word	0x0801301e
 800f204:	0801311c 	.word	0x0801311c

0800f208 <__lshift>:
 800f208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f20c:	460c      	mov	r4, r1
 800f20e:	6849      	ldr	r1, [r1, #4]
 800f210:	6923      	ldr	r3, [r4, #16]
 800f212:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f216:	68a3      	ldr	r3, [r4, #8]
 800f218:	4607      	mov	r7, r0
 800f21a:	4691      	mov	r9, r2
 800f21c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f220:	f108 0601 	add.w	r6, r8, #1
 800f224:	42b3      	cmp	r3, r6
 800f226:	db0b      	blt.n	800f240 <__lshift+0x38>
 800f228:	4638      	mov	r0, r7
 800f22a:	f7ff fd91 	bl	800ed50 <_Balloc>
 800f22e:	4605      	mov	r5, r0
 800f230:	b948      	cbnz	r0, 800f246 <__lshift+0x3e>
 800f232:	4602      	mov	r2, r0
 800f234:	4b2a      	ldr	r3, [pc, #168]	; (800f2e0 <__lshift+0xd8>)
 800f236:	482b      	ldr	r0, [pc, #172]	; (800f2e4 <__lshift+0xdc>)
 800f238:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f23c:	f000 fcd6 	bl	800fbec <__assert_func>
 800f240:	3101      	adds	r1, #1
 800f242:	005b      	lsls	r3, r3, #1
 800f244:	e7ee      	b.n	800f224 <__lshift+0x1c>
 800f246:	2300      	movs	r3, #0
 800f248:	f100 0114 	add.w	r1, r0, #20
 800f24c:	f100 0210 	add.w	r2, r0, #16
 800f250:	4618      	mov	r0, r3
 800f252:	4553      	cmp	r3, sl
 800f254:	db37      	blt.n	800f2c6 <__lshift+0xbe>
 800f256:	6920      	ldr	r0, [r4, #16]
 800f258:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f25c:	f104 0314 	add.w	r3, r4, #20
 800f260:	f019 091f 	ands.w	r9, r9, #31
 800f264:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f268:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f26c:	d02f      	beq.n	800f2ce <__lshift+0xc6>
 800f26e:	f1c9 0e20 	rsb	lr, r9, #32
 800f272:	468a      	mov	sl, r1
 800f274:	f04f 0c00 	mov.w	ip, #0
 800f278:	681a      	ldr	r2, [r3, #0]
 800f27a:	fa02 f209 	lsl.w	r2, r2, r9
 800f27e:	ea42 020c 	orr.w	r2, r2, ip
 800f282:	f84a 2b04 	str.w	r2, [sl], #4
 800f286:	f853 2b04 	ldr.w	r2, [r3], #4
 800f28a:	4298      	cmp	r0, r3
 800f28c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f290:	d8f2      	bhi.n	800f278 <__lshift+0x70>
 800f292:	1b03      	subs	r3, r0, r4
 800f294:	3b15      	subs	r3, #21
 800f296:	f023 0303 	bic.w	r3, r3, #3
 800f29a:	3304      	adds	r3, #4
 800f29c:	f104 0215 	add.w	r2, r4, #21
 800f2a0:	4290      	cmp	r0, r2
 800f2a2:	bf38      	it	cc
 800f2a4:	2304      	movcc	r3, #4
 800f2a6:	f841 c003 	str.w	ip, [r1, r3]
 800f2aa:	f1bc 0f00 	cmp.w	ip, #0
 800f2ae:	d001      	beq.n	800f2b4 <__lshift+0xac>
 800f2b0:	f108 0602 	add.w	r6, r8, #2
 800f2b4:	3e01      	subs	r6, #1
 800f2b6:	4638      	mov	r0, r7
 800f2b8:	612e      	str	r6, [r5, #16]
 800f2ba:	4621      	mov	r1, r4
 800f2bc:	f7ff fd88 	bl	800edd0 <_Bfree>
 800f2c0:	4628      	mov	r0, r5
 800f2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	e7c1      	b.n	800f252 <__lshift+0x4a>
 800f2ce:	3904      	subs	r1, #4
 800f2d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f2d8:	4298      	cmp	r0, r3
 800f2da:	d8f9      	bhi.n	800f2d0 <__lshift+0xc8>
 800f2dc:	e7ea      	b.n	800f2b4 <__lshift+0xac>
 800f2de:	bf00      	nop
 800f2e0:	08013090 	.word	0x08013090
 800f2e4:	0801311c 	.word	0x0801311c

0800f2e8 <__mcmp>:
 800f2e8:	b530      	push	{r4, r5, lr}
 800f2ea:	6902      	ldr	r2, [r0, #16]
 800f2ec:	690c      	ldr	r4, [r1, #16]
 800f2ee:	1b12      	subs	r2, r2, r4
 800f2f0:	d10e      	bne.n	800f310 <__mcmp+0x28>
 800f2f2:	f100 0314 	add.w	r3, r0, #20
 800f2f6:	3114      	adds	r1, #20
 800f2f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f2fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f300:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f304:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f308:	42a5      	cmp	r5, r4
 800f30a:	d003      	beq.n	800f314 <__mcmp+0x2c>
 800f30c:	d305      	bcc.n	800f31a <__mcmp+0x32>
 800f30e:	2201      	movs	r2, #1
 800f310:	4610      	mov	r0, r2
 800f312:	bd30      	pop	{r4, r5, pc}
 800f314:	4283      	cmp	r3, r0
 800f316:	d3f3      	bcc.n	800f300 <__mcmp+0x18>
 800f318:	e7fa      	b.n	800f310 <__mcmp+0x28>
 800f31a:	f04f 32ff 	mov.w	r2, #4294967295
 800f31e:	e7f7      	b.n	800f310 <__mcmp+0x28>

0800f320 <__mdiff>:
 800f320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f324:	460c      	mov	r4, r1
 800f326:	4606      	mov	r6, r0
 800f328:	4611      	mov	r1, r2
 800f32a:	4620      	mov	r0, r4
 800f32c:	4690      	mov	r8, r2
 800f32e:	f7ff ffdb 	bl	800f2e8 <__mcmp>
 800f332:	1e05      	subs	r5, r0, #0
 800f334:	d110      	bne.n	800f358 <__mdiff+0x38>
 800f336:	4629      	mov	r1, r5
 800f338:	4630      	mov	r0, r6
 800f33a:	f7ff fd09 	bl	800ed50 <_Balloc>
 800f33e:	b930      	cbnz	r0, 800f34e <__mdiff+0x2e>
 800f340:	4b3a      	ldr	r3, [pc, #232]	; (800f42c <__mdiff+0x10c>)
 800f342:	4602      	mov	r2, r0
 800f344:	f240 2132 	movw	r1, #562	; 0x232
 800f348:	4839      	ldr	r0, [pc, #228]	; (800f430 <__mdiff+0x110>)
 800f34a:	f000 fc4f 	bl	800fbec <__assert_func>
 800f34e:	2301      	movs	r3, #1
 800f350:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f354:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f358:	bfa4      	itt	ge
 800f35a:	4643      	movge	r3, r8
 800f35c:	46a0      	movge	r8, r4
 800f35e:	4630      	mov	r0, r6
 800f360:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f364:	bfa6      	itte	ge
 800f366:	461c      	movge	r4, r3
 800f368:	2500      	movge	r5, #0
 800f36a:	2501      	movlt	r5, #1
 800f36c:	f7ff fcf0 	bl	800ed50 <_Balloc>
 800f370:	b920      	cbnz	r0, 800f37c <__mdiff+0x5c>
 800f372:	4b2e      	ldr	r3, [pc, #184]	; (800f42c <__mdiff+0x10c>)
 800f374:	4602      	mov	r2, r0
 800f376:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f37a:	e7e5      	b.n	800f348 <__mdiff+0x28>
 800f37c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f380:	6926      	ldr	r6, [r4, #16]
 800f382:	60c5      	str	r5, [r0, #12]
 800f384:	f104 0914 	add.w	r9, r4, #20
 800f388:	f108 0514 	add.w	r5, r8, #20
 800f38c:	f100 0e14 	add.w	lr, r0, #20
 800f390:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f394:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f398:	f108 0210 	add.w	r2, r8, #16
 800f39c:	46f2      	mov	sl, lr
 800f39e:	2100      	movs	r1, #0
 800f3a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800f3a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f3a8:	fa1f f883 	uxth.w	r8, r3
 800f3ac:	fa11 f18b 	uxtah	r1, r1, fp
 800f3b0:	0c1b      	lsrs	r3, r3, #16
 800f3b2:	eba1 0808 	sub.w	r8, r1, r8
 800f3b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f3ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f3be:	fa1f f888 	uxth.w	r8, r8
 800f3c2:	1419      	asrs	r1, r3, #16
 800f3c4:	454e      	cmp	r6, r9
 800f3c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f3ca:	f84a 3b04 	str.w	r3, [sl], #4
 800f3ce:	d8e7      	bhi.n	800f3a0 <__mdiff+0x80>
 800f3d0:	1b33      	subs	r3, r6, r4
 800f3d2:	3b15      	subs	r3, #21
 800f3d4:	f023 0303 	bic.w	r3, r3, #3
 800f3d8:	3304      	adds	r3, #4
 800f3da:	3415      	adds	r4, #21
 800f3dc:	42a6      	cmp	r6, r4
 800f3de:	bf38      	it	cc
 800f3e0:	2304      	movcc	r3, #4
 800f3e2:	441d      	add	r5, r3
 800f3e4:	4473      	add	r3, lr
 800f3e6:	469e      	mov	lr, r3
 800f3e8:	462e      	mov	r6, r5
 800f3ea:	4566      	cmp	r6, ip
 800f3ec:	d30e      	bcc.n	800f40c <__mdiff+0xec>
 800f3ee:	f10c 0203 	add.w	r2, ip, #3
 800f3f2:	1b52      	subs	r2, r2, r5
 800f3f4:	f022 0203 	bic.w	r2, r2, #3
 800f3f8:	3d03      	subs	r5, #3
 800f3fa:	45ac      	cmp	ip, r5
 800f3fc:	bf38      	it	cc
 800f3fe:	2200      	movcc	r2, #0
 800f400:	441a      	add	r2, r3
 800f402:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f406:	b17b      	cbz	r3, 800f428 <__mdiff+0x108>
 800f408:	6107      	str	r7, [r0, #16]
 800f40a:	e7a3      	b.n	800f354 <__mdiff+0x34>
 800f40c:	f856 8b04 	ldr.w	r8, [r6], #4
 800f410:	fa11 f288 	uxtah	r2, r1, r8
 800f414:	1414      	asrs	r4, r2, #16
 800f416:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f41a:	b292      	uxth	r2, r2
 800f41c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f420:	f84e 2b04 	str.w	r2, [lr], #4
 800f424:	1421      	asrs	r1, r4, #16
 800f426:	e7e0      	b.n	800f3ea <__mdiff+0xca>
 800f428:	3f01      	subs	r7, #1
 800f42a:	e7ea      	b.n	800f402 <__mdiff+0xe2>
 800f42c:	08013090 	.word	0x08013090
 800f430:	0801311c 	.word	0x0801311c

0800f434 <__ulp>:
 800f434:	b082      	sub	sp, #8
 800f436:	ed8d 0b00 	vstr	d0, [sp]
 800f43a:	9b01      	ldr	r3, [sp, #4]
 800f43c:	4912      	ldr	r1, [pc, #72]	; (800f488 <__ulp+0x54>)
 800f43e:	4019      	ands	r1, r3
 800f440:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f444:	2900      	cmp	r1, #0
 800f446:	dd05      	ble.n	800f454 <__ulp+0x20>
 800f448:	2200      	movs	r2, #0
 800f44a:	460b      	mov	r3, r1
 800f44c:	ec43 2b10 	vmov	d0, r2, r3
 800f450:	b002      	add	sp, #8
 800f452:	4770      	bx	lr
 800f454:	4249      	negs	r1, r1
 800f456:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f45a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f45e:	f04f 0200 	mov.w	r2, #0
 800f462:	f04f 0300 	mov.w	r3, #0
 800f466:	da04      	bge.n	800f472 <__ulp+0x3e>
 800f468:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f46c:	fa41 f300 	asr.w	r3, r1, r0
 800f470:	e7ec      	b.n	800f44c <__ulp+0x18>
 800f472:	f1a0 0114 	sub.w	r1, r0, #20
 800f476:	291e      	cmp	r1, #30
 800f478:	bfda      	itte	le
 800f47a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f47e:	fa20 f101 	lsrle.w	r1, r0, r1
 800f482:	2101      	movgt	r1, #1
 800f484:	460a      	mov	r2, r1
 800f486:	e7e1      	b.n	800f44c <__ulp+0x18>
 800f488:	7ff00000 	.word	0x7ff00000

0800f48c <__b2d>:
 800f48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f48e:	6905      	ldr	r5, [r0, #16]
 800f490:	f100 0714 	add.w	r7, r0, #20
 800f494:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f498:	1f2e      	subs	r6, r5, #4
 800f49a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f7ff fd48 	bl	800ef34 <__hi0bits>
 800f4a4:	f1c0 0320 	rsb	r3, r0, #32
 800f4a8:	280a      	cmp	r0, #10
 800f4aa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f528 <__b2d+0x9c>
 800f4ae:	600b      	str	r3, [r1, #0]
 800f4b0:	dc14      	bgt.n	800f4dc <__b2d+0x50>
 800f4b2:	f1c0 0e0b 	rsb	lr, r0, #11
 800f4b6:	fa24 f10e 	lsr.w	r1, r4, lr
 800f4ba:	42b7      	cmp	r7, r6
 800f4bc:	ea41 030c 	orr.w	r3, r1, ip
 800f4c0:	bf34      	ite	cc
 800f4c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f4c6:	2100      	movcs	r1, #0
 800f4c8:	3015      	adds	r0, #21
 800f4ca:	fa04 f000 	lsl.w	r0, r4, r0
 800f4ce:	fa21 f10e 	lsr.w	r1, r1, lr
 800f4d2:	ea40 0201 	orr.w	r2, r0, r1
 800f4d6:	ec43 2b10 	vmov	d0, r2, r3
 800f4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4dc:	42b7      	cmp	r7, r6
 800f4de:	bf3a      	itte	cc
 800f4e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f4e4:	f1a5 0608 	subcc.w	r6, r5, #8
 800f4e8:	2100      	movcs	r1, #0
 800f4ea:	380b      	subs	r0, #11
 800f4ec:	d017      	beq.n	800f51e <__b2d+0x92>
 800f4ee:	f1c0 0c20 	rsb	ip, r0, #32
 800f4f2:	fa04 f500 	lsl.w	r5, r4, r0
 800f4f6:	42be      	cmp	r6, r7
 800f4f8:	fa21 f40c 	lsr.w	r4, r1, ip
 800f4fc:	ea45 0504 	orr.w	r5, r5, r4
 800f500:	bf8c      	ite	hi
 800f502:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f506:	2400      	movls	r4, #0
 800f508:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f50c:	fa01 f000 	lsl.w	r0, r1, r0
 800f510:	fa24 f40c 	lsr.w	r4, r4, ip
 800f514:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f518:	ea40 0204 	orr.w	r2, r0, r4
 800f51c:	e7db      	b.n	800f4d6 <__b2d+0x4a>
 800f51e:	ea44 030c 	orr.w	r3, r4, ip
 800f522:	460a      	mov	r2, r1
 800f524:	e7d7      	b.n	800f4d6 <__b2d+0x4a>
 800f526:	bf00      	nop
 800f528:	3ff00000 	.word	0x3ff00000

0800f52c <__d2b>:
 800f52c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f530:	4689      	mov	r9, r1
 800f532:	2101      	movs	r1, #1
 800f534:	ec57 6b10 	vmov	r6, r7, d0
 800f538:	4690      	mov	r8, r2
 800f53a:	f7ff fc09 	bl	800ed50 <_Balloc>
 800f53e:	4604      	mov	r4, r0
 800f540:	b930      	cbnz	r0, 800f550 <__d2b+0x24>
 800f542:	4602      	mov	r2, r0
 800f544:	4b25      	ldr	r3, [pc, #148]	; (800f5dc <__d2b+0xb0>)
 800f546:	4826      	ldr	r0, [pc, #152]	; (800f5e0 <__d2b+0xb4>)
 800f548:	f240 310a 	movw	r1, #778	; 0x30a
 800f54c:	f000 fb4e 	bl	800fbec <__assert_func>
 800f550:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f554:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f558:	bb35      	cbnz	r5, 800f5a8 <__d2b+0x7c>
 800f55a:	2e00      	cmp	r6, #0
 800f55c:	9301      	str	r3, [sp, #4]
 800f55e:	d028      	beq.n	800f5b2 <__d2b+0x86>
 800f560:	4668      	mov	r0, sp
 800f562:	9600      	str	r6, [sp, #0]
 800f564:	f7ff fd06 	bl	800ef74 <__lo0bits>
 800f568:	9900      	ldr	r1, [sp, #0]
 800f56a:	b300      	cbz	r0, 800f5ae <__d2b+0x82>
 800f56c:	9a01      	ldr	r2, [sp, #4]
 800f56e:	f1c0 0320 	rsb	r3, r0, #32
 800f572:	fa02 f303 	lsl.w	r3, r2, r3
 800f576:	430b      	orrs	r3, r1
 800f578:	40c2      	lsrs	r2, r0
 800f57a:	6163      	str	r3, [r4, #20]
 800f57c:	9201      	str	r2, [sp, #4]
 800f57e:	9b01      	ldr	r3, [sp, #4]
 800f580:	61a3      	str	r3, [r4, #24]
 800f582:	2b00      	cmp	r3, #0
 800f584:	bf14      	ite	ne
 800f586:	2202      	movne	r2, #2
 800f588:	2201      	moveq	r2, #1
 800f58a:	6122      	str	r2, [r4, #16]
 800f58c:	b1d5      	cbz	r5, 800f5c4 <__d2b+0x98>
 800f58e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f592:	4405      	add	r5, r0
 800f594:	f8c9 5000 	str.w	r5, [r9]
 800f598:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f59c:	f8c8 0000 	str.w	r0, [r8]
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	b003      	add	sp, #12
 800f5a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f5ac:	e7d5      	b.n	800f55a <__d2b+0x2e>
 800f5ae:	6161      	str	r1, [r4, #20]
 800f5b0:	e7e5      	b.n	800f57e <__d2b+0x52>
 800f5b2:	a801      	add	r0, sp, #4
 800f5b4:	f7ff fcde 	bl	800ef74 <__lo0bits>
 800f5b8:	9b01      	ldr	r3, [sp, #4]
 800f5ba:	6163      	str	r3, [r4, #20]
 800f5bc:	2201      	movs	r2, #1
 800f5be:	6122      	str	r2, [r4, #16]
 800f5c0:	3020      	adds	r0, #32
 800f5c2:	e7e3      	b.n	800f58c <__d2b+0x60>
 800f5c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f5c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f5cc:	f8c9 0000 	str.w	r0, [r9]
 800f5d0:	6918      	ldr	r0, [r3, #16]
 800f5d2:	f7ff fcaf 	bl	800ef34 <__hi0bits>
 800f5d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f5da:	e7df      	b.n	800f59c <__d2b+0x70>
 800f5dc:	08013090 	.word	0x08013090
 800f5e0:	0801311c 	.word	0x0801311c

0800f5e4 <__ratio>:
 800f5e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5e8:	4688      	mov	r8, r1
 800f5ea:	4669      	mov	r1, sp
 800f5ec:	4681      	mov	r9, r0
 800f5ee:	f7ff ff4d 	bl	800f48c <__b2d>
 800f5f2:	a901      	add	r1, sp, #4
 800f5f4:	4640      	mov	r0, r8
 800f5f6:	ec55 4b10 	vmov	r4, r5, d0
 800f5fa:	f7ff ff47 	bl	800f48c <__b2d>
 800f5fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f602:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f606:	eba3 0c02 	sub.w	ip, r3, r2
 800f60a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f60e:	1a9b      	subs	r3, r3, r2
 800f610:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f614:	ec51 0b10 	vmov	r0, r1, d0
 800f618:	2b00      	cmp	r3, #0
 800f61a:	bfd6      	itet	le
 800f61c:	460a      	movle	r2, r1
 800f61e:	462a      	movgt	r2, r5
 800f620:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f624:	468b      	mov	fp, r1
 800f626:	462f      	mov	r7, r5
 800f628:	bfd4      	ite	le
 800f62a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f62e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f632:	4620      	mov	r0, r4
 800f634:	ee10 2a10 	vmov	r2, s0
 800f638:	465b      	mov	r3, fp
 800f63a:	4639      	mov	r1, r7
 800f63c:	f7f1 f90e 	bl	800085c <__aeabi_ddiv>
 800f640:	ec41 0b10 	vmov	d0, r0, r1
 800f644:	b003      	add	sp, #12
 800f646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f64a <__copybits>:
 800f64a:	3901      	subs	r1, #1
 800f64c:	b570      	push	{r4, r5, r6, lr}
 800f64e:	1149      	asrs	r1, r1, #5
 800f650:	6914      	ldr	r4, [r2, #16]
 800f652:	3101      	adds	r1, #1
 800f654:	f102 0314 	add.w	r3, r2, #20
 800f658:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f65c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f660:	1f05      	subs	r5, r0, #4
 800f662:	42a3      	cmp	r3, r4
 800f664:	d30c      	bcc.n	800f680 <__copybits+0x36>
 800f666:	1aa3      	subs	r3, r4, r2
 800f668:	3b11      	subs	r3, #17
 800f66a:	f023 0303 	bic.w	r3, r3, #3
 800f66e:	3211      	adds	r2, #17
 800f670:	42a2      	cmp	r2, r4
 800f672:	bf88      	it	hi
 800f674:	2300      	movhi	r3, #0
 800f676:	4418      	add	r0, r3
 800f678:	2300      	movs	r3, #0
 800f67a:	4288      	cmp	r0, r1
 800f67c:	d305      	bcc.n	800f68a <__copybits+0x40>
 800f67e:	bd70      	pop	{r4, r5, r6, pc}
 800f680:	f853 6b04 	ldr.w	r6, [r3], #4
 800f684:	f845 6f04 	str.w	r6, [r5, #4]!
 800f688:	e7eb      	b.n	800f662 <__copybits+0x18>
 800f68a:	f840 3b04 	str.w	r3, [r0], #4
 800f68e:	e7f4      	b.n	800f67a <__copybits+0x30>

0800f690 <__any_on>:
 800f690:	f100 0214 	add.w	r2, r0, #20
 800f694:	6900      	ldr	r0, [r0, #16]
 800f696:	114b      	asrs	r3, r1, #5
 800f698:	4298      	cmp	r0, r3
 800f69a:	b510      	push	{r4, lr}
 800f69c:	db11      	blt.n	800f6c2 <__any_on+0x32>
 800f69e:	dd0a      	ble.n	800f6b6 <__any_on+0x26>
 800f6a0:	f011 011f 	ands.w	r1, r1, #31
 800f6a4:	d007      	beq.n	800f6b6 <__any_on+0x26>
 800f6a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f6aa:	fa24 f001 	lsr.w	r0, r4, r1
 800f6ae:	fa00 f101 	lsl.w	r1, r0, r1
 800f6b2:	428c      	cmp	r4, r1
 800f6b4:	d10b      	bne.n	800f6ce <__any_on+0x3e>
 800f6b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d803      	bhi.n	800f6c6 <__any_on+0x36>
 800f6be:	2000      	movs	r0, #0
 800f6c0:	bd10      	pop	{r4, pc}
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	e7f7      	b.n	800f6b6 <__any_on+0x26>
 800f6c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f6ca:	2900      	cmp	r1, #0
 800f6cc:	d0f5      	beq.n	800f6ba <__any_on+0x2a>
 800f6ce:	2001      	movs	r0, #1
 800f6d0:	e7f6      	b.n	800f6c0 <__any_on+0x30>

0800f6d2 <_calloc_r>:
 800f6d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6d4:	fba1 2402 	umull	r2, r4, r1, r2
 800f6d8:	b94c      	cbnz	r4, 800f6ee <_calloc_r+0x1c>
 800f6da:	4611      	mov	r1, r2
 800f6dc:	9201      	str	r2, [sp, #4]
 800f6de:	f000 f87b 	bl	800f7d8 <_malloc_r>
 800f6e2:	9a01      	ldr	r2, [sp, #4]
 800f6e4:	4605      	mov	r5, r0
 800f6e6:	b930      	cbnz	r0, 800f6f6 <_calloc_r+0x24>
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	b003      	add	sp, #12
 800f6ec:	bd30      	pop	{r4, r5, pc}
 800f6ee:	220c      	movs	r2, #12
 800f6f0:	6002      	str	r2, [r0, #0]
 800f6f2:	2500      	movs	r5, #0
 800f6f4:	e7f8      	b.n	800f6e8 <_calloc_r+0x16>
 800f6f6:	4621      	mov	r1, r4
 800f6f8:	f7fc fbce 	bl	800be98 <memset>
 800f6fc:	e7f4      	b.n	800f6e8 <_calloc_r+0x16>
	...

0800f700 <_free_r>:
 800f700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f702:	2900      	cmp	r1, #0
 800f704:	d044      	beq.n	800f790 <_free_r+0x90>
 800f706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f70a:	9001      	str	r0, [sp, #4]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	f1a1 0404 	sub.w	r4, r1, #4
 800f712:	bfb8      	it	lt
 800f714:	18e4      	addlt	r4, r4, r3
 800f716:	f000 fab3 	bl	800fc80 <__malloc_lock>
 800f71a:	4a1e      	ldr	r2, [pc, #120]	; (800f794 <_free_r+0x94>)
 800f71c:	9801      	ldr	r0, [sp, #4]
 800f71e:	6813      	ldr	r3, [r2, #0]
 800f720:	b933      	cbnz	r3, 800f730 <_free_r+0x30>
 800f722:	6063      	str	r3, [r4, #4]
 800f724:	6014      	str	r4, [r2, #0]
 800f726:	b003      	add	sp, #12
 800f728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f72c:	f000 baae 	b.w	800fc8c <__malloc_unlock>
 800f730:	42a3      	cmp	r3, r4
 800f732:	d908      	bls.n	800f746 <_free_r+0x46>
 800f734:	6825      	ldr	r5, [r4, #0]
 800f736:	1961      	adds	r1, r4, r5
 800f738:	428b      	cmp	r3, r1
 800f73a:	bf01      	itttt	eq
 800f73c:	6819      	ldreq	r1, [r3, #0]
 800f73e:	685b      	ldreq	r3, [r3, #4]
 800f740:	1949      	addeq	r1, r1, r5
 800f742:	6021      	streq	r1, [r4, #0]
 800f744:	e7ed      	b.n	800f722 <_free_r+0x22>
 800f746:	461a      	mov	r2, r3
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	b10b      	cbz	r3, 800f750 <_free_r+0x50>
 800f74c:	42a3      	cmp	r3, r4
 800f74e:	d9fa      	bls.n	800f746 <_free_r+0x46>
 800f750:	6811      	ldr	r1, [r2, #0]
 800f752:	1855      	adds	r5, r2, r1
 800f754:	42a5      	cmp	r5, r4
 800f756:	d10b      	bne.n	800f770 <_free_r+0x70>
 800f758:	6824      	ldr	r4, [r4, #0]
 800f75a:	4421      	add	r1, r4
 800f75c:	1854      	adds	r4, r2, r1
 800f75e:	42a3      	cmp	r3, r4
 800f760:	6011      	str	r1, [r2, #0]
 800f762:	d1e0      	bne.n	800f726 <_free_r+0x26>
 800f764:	681c      	ldr	r4, [r3, #0]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	6053      	str	r3, [r2, #4]
 800f76a:	4421      	add	r1, r4
 800f76c:	6011      	str	r1, [r2, #0]
 800f76e:	e7da      	b.n	800f726 <_free_r+0x26>
 800f770:	d902      	bls.n	800f778 <_free_r+0x78>
 800f772:	230c      	movs	r3, #12
 800f774:	6003      	str	r3, [r0, #0]
 800f776:	e7d6      	b.n	800f726 <_free_r+0x26>
 800f778:	6825      	ldr	r5, [r4, #0]
 800f77a:	1961      	adds	r1, r4, r5
 800f77c:	428b      	cmp	r3, r1
 800f77e:	bf04      	itt	eq
 800f780:	6819      	ldreq	r1, [r3, #0]
 800f782:	685b      	ldreq	r3, [r3, #4]
 800f784:	6063      	str	r3, [r4, #4]
 800f786:	bf04      	itt	eq
 800f788:	1949      	addeq	r1, r1, r5
 800f78a:	6021      	streq	r1, [r4, #0]
 800f78c:	6054      	str	r4, [r2, #4]
 800f78e:	e7ca      	b.n	800f726 <_free_r+0x26>
 800f790:	b003      	add	sp, #12
 800f792:	bd30      	pop	{r4, r5, pc}
 800f794:	20002014 	.word	0x20002014

0800f798 <sbrk_aligned>:
 800f798:	b570      	push	{r4, r5, r6, lr}
 800f79a:	4e0e      	ldr	r6, [pc, #56]	; (800f7d4 <sbrk_aligned+0x3c>)
 800f79c:	460c      	mov	r4, r1
 800f79e:	6831      	ldr	r1, [r6, #0]
 800f7a0:	4605      	mov	r5, r0
 800f7a2:	b911      	cbnz	r1, 800f7aa <sbrk_aligned+0x12>
 800f7a4:	f000 f9f0 	bl	800fb88 <_sbrk_r>
 800f7a8:	6030      	str	r0, [r6, #0]
 800f7aa:	4621      	mov	r1, r4
 800f7ac:	4628      	mov	r0, r5
 800f7ae:	f000 f9eb 	bl	800fb88 <_sbrk_r>
 800f7b2:	1c43      	adds	r3, r0, #1
 800f7b4:	d00a      	beq.n	800f7cc <sbrk_aligned+0x34>
 800f7b6:	1cc4      	adds	r4, r0, #3
 800f7b8:	f024 0403 	bic.w	r4, r4, #3
 800f7bc:	42a0      	cmp	r0, r4
 800f7be:	d007      	beq.n	800f7d0 <sbrk_aligned+0x38>
 800f7c0:	1a21      	subs	r1, r4, r0
 800f7c2:	4628      	mov	r0, r5
 800f7c4:	f000 f9e0 	bl	800fb88 <_sbrk_r>
 800f7c8:	3001      	adds	r0, #1
 800f7ca:	d101      	bne.n	800f7d0 <sbrk_aligned+0x38>
 800f7cc:	f04f 34ff 	mov.w	r4, #4294967295
 800f7d0:	4620      	mov	r0, r4
 800f7d2:	bd70      	pop	{r4, r5, r6, pc}
 800f7d4:	20002018 	.word	0x20002018

0800f7d8 <_malloc_r>:
 800f7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7dc:	1ccd      	adds	r5, r1, #3
 800f7de:	f025 0503 	bic.w	r5, r5, #3
 800f7e2:	3508      	adds	r5, #8
 800f7e4:	2d0c      	cmp	r5, #12
 800f7e6:	bf38      	it	cc
 800f7e8:	250c      	movcc	r5, #12
 800f7ea:	2d00      	cmp	r5, #0
 800f7ec:	4607      	mov	r7, r0
 800f7ee:	db01      	blt.n	800f7f4 <_malloc_r+0x1c>
 800f7f0:	42a9      	cmp	r1, r5
 800f7f2:	d905      	bls.n	800f800 <_malloc_r+0x28>
 800f7f4:	230c      	movs	r3, #12
 800f7f6:	603b      	str	r3, [r7, #0]
 800f7f8:	2600      	movs	r6, #0
 800f7fa:	4630      	mov	r0, r6
 800f7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f800:	4e2e      	ldr	r6, [pc, #184]	; (800f8bc <_malloc_r+0xe4>)
 800f802:	f000 fa3d 	bl	800fc80 <__malloc_lock>
 800f806:	6833      	ldr	r3, [r6, #0]
 800f808:	461c      	mov	r4, r3
 800f80a:	bb34      	cbnz	r4, 800f85a <_malloc_r+0x82>
 800f80c:	4629      	mov	r1, r5
 800f80e:	4638      	mov	r0, r7
 800f810:	f7ff ffc2 	bl	800f798 <sbrk_aligned>
 800f814:	1c43      	adds	r3, r0, #1
 800f816:	4604      	mov	r4, r0
 800f818:	d14d      	bne.n	800f8b6 <_malloc_r+0xde>
 800f81a:	6834      	ldr	r4, [r6, #0]
 800f81c:	4626      	mov	r6, r4
 800f81e:	2e00      	cmp	r6, #0
 800f820:	d140      	bne.n	800f8a4 <_malloc_r+0xcc>
 800f822:	6823      	ldr	r3, [r4, #0]
 800f824:	4631      	mov	r1, r6
 800f826:	4638      	mov	r0, r7
 800f828:	eb04 0803 	add.w	r8, r4, r3
 800f82c:	f000 f9ac 	bl	800fb88 <_sbrk_r>
 800f830:	4580      	cmp	r8, r0
 800f832:	d13a      	bne.n	800f8aa <_malloc_r+0xd2>
 800f834:	6821      	ldr	r1, [r4, #0]
 800f836:	3503      	adds	r5, #3
 800f838:	1a6d      	subs	r5, r5, r1
 800f83a:	f025 0503 	bic.w	r5, r5, #3
 800f83e:	3508      	adds	r5, #8
 800f840:	2d0c      	cmp	r5, #12
 800f842:	bf38      	it	cc
 800f844:	250c      	movcc	r5, #12
 800f846:	4629      	mov	r1, r5
 800f848:	4638      	mov	r0, r7
 800f84a:	f7ff ffa5 	bl	800f798 <sbrk_aligned>
 800f84e:	3001      	adds	r0, #1
 800f850:	d02b      	beq.n	800f8aa <_malloc_r+0xd2>
 800f852:	6823      	ldr	r3, [r4, #0]
 800f854:	442b      	add	r3, r5
 800f856:	6023      	str	r3, [r4, #0]
 800f858:	e00e      	b.n	800f878 <_malloc_r+0xa0>
 800f85a:	6822      	ldr	r2, [r4, #0]
 800f85c:	1b52      	subs	r2, r2, r5
 800f85e:	d41e      	bmi.n	800f89e <_malloc_r+0xc6>
 800f860:	2a0b      	cmp	r2, #11
 800f862:	d916      	bls.n	800f892 <_malloc_r+0xba>
 800f864:	1961      	adds	r1, r4, r5
 800f866:	42a3      	cmp	r3, r4
 800f868:	6025      	str	r5, [r4, #0]
 800f86a:	bf18      	it	ne
 800f86c:	6059      	strne	r1, [r3, #4]
 800f86e:	6863      	ldr	r3, [r4, #4]
 800f870:	bf08      	it	eq
 800f872:	6031      	streq	r1, [r6, #0]
 800f874:	5162      	str	r2, [r4, r5]
 800f876:	604b      	str	r3, [r1, #4]
 800f878:	4638      	mov	r0, r7
 800f87a:	f104 060b 	add.w	r6, r4, #11
 800f87e:	f000 fa05 	bl	800fc8c <__malloc_unlock>
 800f882:	f026 0607 	bic.w	r6, r6, #7
 800f886:	1d23      	adds	r3, r4, #4
 800f888:	1af2      	subs	r2, r6, r3
 800f88a:	d0b6      	beq.n	800f7fa <_malloc_r+0x22>
 800f88c:	1b9b      	subs	r3, r3, r6
 800f88e:	50a3      	str	r3, [r4, r2]
 800f890:	e7b3      	b.n	800f7fa <_malloc_r+0x22>
 800f892:	6862      	ldr	r2, [r4, #4]
 800f894:	42a3      	cmp	r3, r4
 800f896:	bf0c      	ite	eq
 800f898:	6032      	streq	r2, [r6, #0]
 800f89a:	605a      	strne	r2, [r3, #4]
 800f89c:	e7ec      	b.n	800f878 <_malloc_r+0xa0>
 800f89e:	4623      	mov	r3, r4
 800f8a0:	6864      	ldr	r4, [r4, #4]
 800f8a2:	e7b2      	b.n	800f80a <_malloc_r+0x32>
 800f8a4:	4634      	mov	r4, r6
 800f8a6:	6876      	ldr	r6, [r6, #4]
 800f8a8:	e7b9      	b.n	800f81e <_malloc_r+0x46>
 800f8aa:	230c      	movs	r3, #12
 800f8ac:	603b      	str	r3, [r7, #0]
 800f8ae:	4638      	mov	r0, r7
 800f8b0:	f000 f9ec 	bl	800fc8c <__malloc_unlock>
 800f8b4:	e7a1      	b.n	800f7fa <_malloc_r+0x22>
 800f8b6:	6025      	str	r5, [r4, #0]
 800f8b8:	e7de      	b.n	800f878 <_malloc_r+0xa0>
 800f8ba:	bf00      	nop
 800f8bc:	20002014 	.word	0x20002014

0800f8c0 <__ssputs_r>:
 800f8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c4:	688e      	ldr	r6, [r1, #8]
 800f8c6:	429e      	cmp	r6, r3
 800f8c8:	4682      	mov	sl, r0
 800f8ca:	460c      	mov	r4, r1
 800f8cc:	4690      	mov	r8, r2
 800f8ce:	461f      	mov	r7, r3
 800f8d0:	d838      	bhi.n	800f944 <__ssputs_r+0x84>
 800f8d2:	898a      	ldrh	r2, [r1, #12]
 800f8d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f8d8:	d032      	beq.n	800f940 <__ssputs_r+0x80>
 800f8da:	6825      	ldr	r5, [r4, #0]
 800f8dc:	6909      	ldr	r1, [r1, #16]
 800f8de:	eba5 0901 	sub.w	r9, r5, r1
 800f8e2:	6965      	ldr	r5, [r4, #20]
 800f8e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f8e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f8ec:	3301      	adds	r3, #1
 800f8ee:	444b      	add	r3, r9
 800f8f0:	106d      	asrs	r5, r5, #1
 800f8f2:	429d      	cmp	r5, r3
 800f8f4:	bf38      	it	cc
 800f8f6:	461d      	movcc	r5, r3
 800f8f8:	0553      	lsls	r3, r2, #21
 800f8fa:	d531      	bpl.n	800f960 <__ssputs_r+0xa0>
 800f8fc:	4629      	mov	r1, r5
 800f8fe:	f7ff ff6b 	bl	800f7d8 <_malloc_r>
 800f902:	4606      	mov	r6, r0
 800f904:	b950      	cbnz	r0, 800f91c <__ssputs_r+0x5c>
 800f906:	230c      	movs	r3, #12
 800f908:	f8ca 3000 	str.w	r3, [sl]
 800f90c:	89a3      	ldrh	r3, [r4, #12]
 800f90e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f912:	81a3      	strh	r3, [r4, #12]
 800f914:	f04f 30ff 	mov.w	r0, #4294967295
 800f918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f91c:	6921      	ldr	r1, [r4, #16]
 800f91e:	464a      	mov	r2, r9
 800f920:	f7fc faac 	bl	800be7c <memcpy>
 800f924:	89a3      	ldrh	r3, [r4, #12]
 800f926:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f92a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f92e:	81a3      	strh	r3, [r4, #12]
 800f930:	6126      	str	r6, [r4, #16]
 800f932:	6165      	str	r5, [r4, #20]
 800f934:	444e      	add	r6, r9
 800f936:	eba5 0509 	sub.w	r5, r5, r9
 800f93a:	6026      	str	r6, [r4, #0]
 800f93c:	60a5      	str	r5, [r4, #8]
 800f93e:	463e      	mov	r6, r7
 800f940:	42be      	cmp	r6, r7
 800f942:	d900      	bls.n	800f946 <__ssputs_r+0x86>
 800f944:	463e      	mov	r6, r7
 800f946:	6820      	ldr	r0, [r4, #0]
 800f948:	4632      	mov	r2, r6
 800f94a:	4641      	mov	r1, r8
 800f94c:	f000 f97e 	bl	800fc4c <memmove>
 800f950:	68a3      	ldr	r3, [r4, #8]
 800f952:	1b9b      	subs	r3, r3, r6
 800f954:	60a3      	str	r3, [r4, #8]
 800f956:	6823      	ldr	r3, [r4, #0]
 800f958:	4433      	add	r3, r6
 800f95a:	6023      	str	r3, [r4, #0]
 800f95c:	2000      	movs	r0, #0
 800f95e:	e7db      	b.n	800f918 <__ssputs_r+0x58>
 800f960:	462a      	mov	r2, r5
 800f962:	f000 f999 	bl	800fc98 <_realloc_r>
 800f966:	4606      	mov	r6, r0
 800f968:	2800      	cmp	r0, #0
 800f96a:	d1e1      	bne.n	800f930 <__ssputs_r+0x70>
 800f96c:	6921      	ldr	r1, [r4, #16]
 800f96e:	4650      	mov	r0, sl
 800f970:	f7ff fec6 	bl	800f700 <_free_r>
 800f974:	e7c7      	b.n	800f906 <__ssputs_r+0x46>
	...

0800f978 <_svfiprintf_r>:
 800f978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f97c:	4698      	mov	r8, r3
 800f97e:	898b      	ldrh	r3, [r1, #12]
 800f980:	061b      	lsls	r3, r3, #24
 800f982:	b09d      	sub	sp, #116	; 0x74
 800f984:	4607      	mov	r7, r0
 800f986:	460d      	mov	r5, r1
 800f988:	4614      	mov	r4, r2
 800f98a:	d50e      	bpl.n	800f9aa <_svfiprintf_r+0x32>
 800f98c:	690b      	ldr	r3, [r1, #16]
 800f98e:	b963      	cbnz	r3, 800f9aa <_svfiprintf_r+0x32>
 800f990:	2140      	movs	r1, #64	; 0x40
 800f992:	f7ff ff21 	bl	800f7d8 <_malloc_r>
 800f996:	6028      	str	r0, [r5, #0]
 800f998:	6128      	str	r0, [r5, #16]
 800f99a:	b920      	cbnz	r0, 800f9a6 <_svfiprintf_r+0x2e>
 800f99c:	230c      	movs	r3, #12
 800f99e:	603b      	str	r3, [r7, #0]
 800f9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9a4:	e0d1      	b.n	800fb4a <_svfiprintf_r+0x1d2>
 800f9a6:	2340      	movs	r3, #64	; 0x40
 800f9a8:	616b      	str	r3, [r5, #20]
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800f9ae:	2320      	movs	r3, #32
 800f9b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9b8:	2330      	movs	r3, #48	; 0x30
 800f9ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fb64 <_svfiprintf_r+0x1ec>
 800f9be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9c2:	f04f 0901 	mov.w	r9, #1
 800f9c6:	4623      	mov	r3, r4
 800f9c8:	469a      	mov	sl, r3
 800f9ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9ce:	b10a      	cbz	r2, 800f9d4 <_svfiprintf_r+0x5c>
 800f9d0:	2a25      	cmp	r2, #37	; 0x25
 800f9d2:	d1f9      	bne.n	800f9c8 <_svfiprintf_r+0x50>
 800f9d4:	ebba 0b04 	subs.w	fp, sl, r4
 800f9d8:	d00b      	beq.n	800f9f2 <_svfiprintf_r+0x7a>
 800f9da:	465b      	mov	r3, fp
 800f9dc:	4622      	mov	r2, r4
 800f9de:	4629      	mov	r1, r5
 800f9e0:	4638      	mov	r0, r7
 800f9e2:	f7ff ff6d 	bl	800f8c0 <__ssputs_r>
 800f9e6:	3001      	adds	r0, #1
 800f9e8:	f000 80aa 	beq.w	800fb40 <_svfiprintf_r+0x1c8>
 800f9ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9ee:	445a      	add	r2, fp
 800f9f0:	9209      	str	r2, [sp, #36]	; 0x24
 800f9f2:	f89a 3000 	ldrb.w	r3, [sl]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	f000 80a2 	beq.w	800fb40 <_svfiprintf_r+0x1c8>
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800fa02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa06:	f10a 0a01 	add.w	sl, sl, #1
 800fa0a:	9304      	str	r3, [sp, #16]
 800fa0c:	9307      	str	r3, [sp, #28]
 800fa0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa12:	931a      	str	r3, [sp, #104]	; 0x68
 800fa14:	4654      	mov	r4, sl
 800fa16:	2205      	movs	r2, #5
 800fa18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa1c:	4851      	ldr	r0, [pc, #324]	; (800fb64 <_svfiprintf_r+0x1ec>)
 800fa1e:	f7f0 fbe7 	bl	80001f0 <memchr>
 800fa22:	9a04      	ldr	r2, [sp, #16]
 800fa24:	b9d8      	cbnz	r0, 800fa5e <_svfiprintf_r+0xe6>
 800fa26:	06d0      	lsls	r0, r2, #27
 800fa28:	bf44      	itt	mi
 800fa2a:	2320      	movmi	r3, #32
 800fa2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa30:	0711      	lsls	r1, r2, #28
 800fa32:	bf44      	itt	mi
 800fa34:	232b      	movmi	r3, #43	; 0x2b
 800fa36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa3a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa3e:	2b2a      	cmp	r3, #42	; 0x2a
 800fa40:	d015      	beq.n	800fa6e <_svfiprintf_r+0xf6>
 800fa42:	9a07      	ldr	r2, [sp, #28]
 800fa44:	4654      	mov	r4, sl
 800fa46:	2000      	movs	r0, #0
 800fa48:	f04f 0c0a 	mov.w	ip, #10
 800fa4c:	4621      	mov	r1, r4
 800fa4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa52:	3b30      	subs	r3, #48	; 0x30
 800fa54:	2b09      	cmp	r3, #9
 800fa56:	d94e      	bls.n	800faf6 <_svfiprintf_r+0x17e>
 800fa58:	b1b0      	cbz	r0, 800fa88 <_svfiprintf_r+0x110>
 800fa5a:	9207      	str	r2, [sp, #28]
 800fa5c:	e014      	b.n	800fa88 <_svfiprintf_r+0x110>
 800fa5e:	eba0 0308 	sub.w	r3, r0, r8
 800fa62:	fa09 f303 	lsl.w	r3, r9, r3
 800fa66:	4313      	orrs	r3, r2
 800fa68:	9304      	str	r3, [sp, #16]
 800fa6a:	46a2      	mov	sl, r4
 800fa6c:	e7d2      	b.n	800fa14 <_svfiprintf_r+0x9c>
 800fa6e:	9b03      	ldr	r3, [sp, #12]
 800fa70:	1d19      	adds	r1, r3, #4
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	9103      	str	r1, [sp, #12]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	bfbb      	ittet	lt
 800fa7a:	425b      	neglt	r3, r3
 800fa7c:	f042 0202 	orrlt.w	r2, r2, #2
 800fa80:	9307      	strge	r3, [sp, #28]
 800fa82:	9307      	strlt	r3, [sp, #28]
 800fa84:	bfb8      	it	lt
 800fa86:	9204      	strlt	r2, [sp, #16]
 800fa88:	7823      	ldrb	r3, [r4, #0]
 800fa8a:	2b2e      	cmp	r3, #46	; 0x2e
 800fa8c:	d10c      	bne.n	800faa8 <_svfiprintf_r+0x130>
 800fa8e:	7863      	ldrb	r3, [r4, #1]
 800fa90:	2b2a      	cmp	r3, #42	; 0x2a
 800fa92:	d135      	bne.n	800fb00 <_svfiprintf_r+0x188>
 800fa94:	9b03      	ldr	r3, [sp, #12]
 800fa96:	1d1a      	adds	r2, r3, #4
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	9203      	str	r2, [sp, #12]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	bfb8      	it	lt
 800faa0:	f04f 33ff 	movlt.w	r3, #4294967295
 800faa4:	3402      	adds	r4, #2
 800faa6:	9305      	str	r3, [sp, #20]
 800faa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fb74 <_svfiprintf_r+0x1fc>
 800faac:	7821      	ldrb	r1, [r4, #0]
 800faae:	2203      	movs	r2, #3
 800fab0:	4650      	mov	r0, sl
 800fab2:	f7f0 fb9d 	bl	80001f0 <memchr>
 800fab6:	b140      	cbz	r0, 800faca <_svfiprintf_r+0x152>
 800fab8:	2340      	movs	r3, #64	; 0x40
 800faba:	eba0 000a 	sub.w	r0, r0, sl
 800fabe:	fa03 f000 	lsl.w	r0, r3, r0
 800fac2:	9b04      	ldr	r3, [sp, #16]
 800fac4:	4303      	orrs	r3, r0
 800fac6:	3401      	adds	r4, #1
 800fac8:	9304      	str	r3, [sp, #16]
 800faca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800face:	4826      	ldr	r0, [pc, #152]	; (800fb68 <_svfiprintf_r+0x1f0>)
 800fad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fad4:	2206      	movs	r2, #6
 800fad6:	f7f0 fb8b 	bl	80001f0 <memchr>
 800fada:	2800      	cmp	r0, #0
 800fadc:	d038      	beq.n	800fb50 <_svfiprintf_r+0x1d8>
 800fade:	4b23      	ldr	r3, [pc, #140]	; (800fb6c <_svfiprintf_r+0x1f4>)
 800fae0:	bb1b      	cbnz	r3, 800fb2a <_svfiprintf_r+0x1b2>
 800fae2:	9b03      	ldr	r3, [sp, #12]
 800fae4:	3307      	adds	r3, #7
 800fae6:	f023 0307 	bic.w	r3, r3, #7
 800faea:	3308      	adds	r3, #8
 800faec:	9303      	str	r3, [sp, #12]
 800faee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faf0:	4433      	add	r3, r6
 800faf2:	9309      	str	r3, [sp, #36]	; 0x24
 800faf4:	e767      	b.n	800f9c6 <_svfiprintf_r+0x4e>
 800faf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800fafa:	460c      	mov	r4, r1
 800fafc:	2001      	movs	r0, #1
 800fafe:	e7a5      	b.n	800fa4c <_svfiprintf_r+0xd4>
 800fb00:	2300      	movs	r3, #0
 800fb02:	3401      	adds	r4, #1
 800fb04:	9305      	str	r3, [sp, #20]
 800fb06:	4619      	mov	r1, r3
 800fb08:	f04f 0c0a 	mov.w	ip, #10
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb12:	3a30      	subs	r2, #48	; 0x30
 800fb14:	2a09      	cmp	r2, #9
 800fb16:	d903      	bls.n	800fb20 <_svfiprintf_r+0x1a8>
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d0c5      	beq.n	800faa8 <_svfiprintf_r+0x130>
 800fb1c:	9105      	str	r1, [sp, #20]
 800fb1e:	e7c3      	b.n	800faa8 <_svfiprintf_r+0x130>
 800fb20:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb24:	4604      	mov	r4, r0
 800fb26:	2301      	movs	r3, #1
 800fb28:	e7f0      	b.n	800fb0c <_svfiprintf_r+0x194>
 800fb2a:	ab03      	add	r3, sp, #12
 800fb2c:	9300      	str	r3, [sp, #0]
 800fb2e:	462a      	mov	r2, r5
 800fb30:	4b0f      	ldr	r3, [pc, #60]	; (800fb70 <_svfiprintf_r+0x1f8>)
 800fb32:	a904      	add	r1, sp, #16
 800fb34:	4638      	mov	r0, r7
 800fb36:	f7fc fa57 	bl	800bfe8 <_printf_float>
 800fb3a:	1c42      	adds	r2, r0, #1
 800fb3c:	4606      	mov	r6, r0
 800fb3e:	d1d6      	bne.n	800faee <_svfiprintf_r+0x176>
 800fb40:	89ab      	ldrh	r3, [r5, #12]
 800fb42:	065b      	lsls	r3, r3, #25
 800fb44:	f53f af2c 	bmi.w	800f9a0 <_svfiprintf_r+0x28>
 800fb48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb4a:	b01d      	add	sp, #116	; 0x74
 800fb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb50:	ab03      	add	r3, sp, #12
 800fb52:	9300      	str	r3, [sp, #0]
 800fb54:	462a      	mov	r2, r5
 800fb56:	4b06      	ldr	r3, [pc, #24]	; (800fb70 <_svfiprintf_r+0x1f8>)
 800fb58:	a904      	add	r1, sp, #16
 800fb5a:	4638      	mov	r0, r7
 800fb5c:	f7fc fce8 	bl	800c530 <_printf_i>
 800fb60:	e7eb      	b.n	800fb3a <_svfiprintf_r+0x1c2>
 800fb62:	bf00      	nop
 800fb64:	08013274 	.word	0x08013274
 800fb68:	0801327e 	.word	0x0801327e
 800fb6c:	0800bfe9 	.word	0x0800bfe9
 800fb70:	0800f8c1 	.word	0x0800f8c1
 800fb74:	0801327a 	.word	0x0801327a

0800fb78 <nan>:
 800fb78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fb80 <nan+0x8>
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	00000000 	.word	0x00000000
 800fb84:	7ff80000 	.word	0x7ff80000

0800fb88 <_sbrk_r>:
 800fb88:	b538      	push	{r3, r4, r5, lr}
 800fb8a:	4d06      	ldr	r5, [pc, #24]	; (800fba4 <_sbrk_r+0x1c>)
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	4604      	mov	r4, r0
 800fb90:	4608      	mov	r0, r1
 800fb92:	602b      	str	r3, [r5, #0]
 800fb94:	f7f5 fa92 	bl	80050bc <_sbrk>
 800fb98:	1c43      	adds	r3, r0, #1
 800fb9a:	d102      	bne.n	800fba2 <_sbrk_r+0x1a>
 800fb9c:	682b      	ldr	r3, [r5, #0]
 800fb9e:	b103      	cbz	r3, 800fba2 <_sbrk_r+0x1a>
 800fba0:	6023      	str	r3, [r4, #0]
 800fba2:	bd38      	pop	{r3, r4, r5, pc}
 800fba4:	2000201c 	.word	0x2000201c

0800fba8 <strncmp>:
 800fba8:	b510      	push	{r4, lr}
 800fbaa:	b17a      	cbz	r2, 800fbcc <strncmp+0x24>
 800fbac:	4603      	mov	r3, r0
 800fbae:	3901      	subs	r1, #1
 800fbb0:	1884      	adds	r4, r0, r2
 800fbb2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fbb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fbba:	4290      	cmp	r0, r2
 800fbbc:	d101      	bne.n	800fbc2 <strncmp+0x1a>
 800fbbe:	42a3      	cmp	r3, r4
 800fbc0:	d101      	bne.n	800fbc6 <strncmp+0x1e>
 800fbc2:	1a80      	subs	r0, r0, r2
 800fbc4:	bd10      	pop	{r4, pc}
 800fbc6:	2800      	cmp	r0, #0
 800fbc8:	d1f3      	bne.n	800fbb2 <strncmp+0xa>
 800fbca:	e7fa      	b.n	800fbc2 <strncmp+0x1a>
 800fbcc:	4610      	mov	r0, r2
 800fbce:	e7f9      	b.n	800fbc4 <strncmp+0x1c>

0800fbd0 <__ascii_wctomb>:
 800fbd0:	b149      	cbz	r1, 800fbe6 <__ascii_wctomb+0x16>
 800fbd2:	2aff      	cmp	r2, #255	; 0xff
 800fbd4:	bf85      	ittet	hi
 800fbd6:	238a      	movhi	r3, #138	; 0x8a
 800fbd8:	6003      	strhi	r3, [r0, #0]
 800fbda:	700a      	strbls	r2, [r1, #0]
 800fbdc:	f04f 30ff 	movhi.w	r0, #4294967295
 800fbe0:	bf98      	it	ls
 800fbe2:	2001      	movls	r0, #1
 800fbe4:	4770      	bx	lr
 800fbe6:	4608      	mov	r0, r1
 800fbe8:	4770      	bx	lr
	...

0800fbec <__assert_func>:
 800fbec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fbee:	4614      	mov	r4, r2
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	4b09      	ldr	r3, [pc, #36]	; (800fc18 <__assert_func+0x2c>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	4605      	mov	r5, r0
 800fbf8:	68d8      	ldr	r0, [r3, #12]
 800fbfa:	b14c      	cbz	r4, 800fc10 <__assert_func+0x24>
 800fbfc:	4b07      	ldr	r3, [pc, #28]	; (800fc1c <__assert_func+0x30>)
 800fbfe:	9100      	str	r1, [sp, #0]
 800fc00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc04:	4906      	ldr	r1, [pc, #24]	; (800fc20 <__assert_func+0x34>)
 800fc06:	462b      	mov	r3, r5
 800fc08:	f000 f80e 	bl	800fc28 <fiprintf>
 800fc0c:	f000 fa8c 	bl	8010128 <abort>
 800fc10:	4b04      	ldr	r3, [pc, #16]	; (800fc24 <__assert_func+0x38>)
 800fc12:	461c      	mov	r4, r3
 800fc14:	e7f3      	b.n	800fbfe <__assert_func+0x12>
 800fc16:	bf00      	nop
 800fc18:	2000023c 	.word	0x2000023c
 800fc1c:	08013285 	.word	0x08013285
 800fc20:	08013292 	.word	0x08013292
 800fc24:	080132c0 	.word	0x080132c0

0800fc28 <fiprintf>:
 800fc28:	b40e      	push	{r1, r2, r3}
 800fc2a:	b503      	push	{r0, r1, lr}
 800fc2c:	4601      	mov	r1, r0
 800fc2e:	ab03      	add	r3, sp, #12
 800fc30:	4805      	ldr	r0, [pc, #20]	; (800fc48 <fiprintf+0x20>)
 800fc32:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc36:	6800      	ldr	r0, [r0, #0]
 800fc38:	9301      	str	r3, [sp, #4]
 800fc3a:	f000 f885 	bl	800fd48 <_vfiprintf_r>
 800fc3e:	b002      	add	sp, #8
 800fc40:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc44:	b003      	add	sp, #12
 800fc46:	4770      	bx	lr
 800fc48:	2000023c 	.word	0x2000023c

0800fc4c <memmove>:
 800fc4c:	4288      	cmp	r0, r1
 800fc4e:	b510      	push	{r4, lr}
 800fc50:	eb01 0402 	add.w	r4, r1, r2
 800fc54:	d902      	bls.n	800fc5c <memmove+0x10>
 800fc56:	4284      	cmp	r4, r0
 800fc58:	4623      	mov	r3, r4
 800fc5a:	d807      	bhi.n	800fc6c <memmove+0x20>
 800fc5c:	1e43      	subs	r3, r0, #1
 800fc5e:	42a1      	cmp	r1, r4
 800fc60:	d008      	beq.n	800fc74 <memmove+0x28>
 800fc62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc6a:	e7f8      	b.n	800fc5e <memmove+0x12>
 800fc6c:	4402      	add	r2, r0
 800fc6e:	4601      	mov	r1, r0
 800fc70:	428a      	cmp	r2, r1
 800fc72:	d100      	bne.n	800fc76 <memmove+0x2a>
 800fc74:	bd10      	pop	{r4, pc}
 800fc76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc7e:	e7f7      	b.n	800fc70 <memmove+0x24>

0800fc80 <__malloc_lock>:
 800fc80:	4801      	ldr	r0, [pc, #4]	; (800fc88 <__malloc_lock+0x8>)
 800fc82:	f000 bc11 	b.w	80104a8 <__retarget_lock_acquire_recursive>
 800fc86:	bf00      	nop
 800fc88:	20002020 	.word	0x20002020

0800fc8c <__malloc_unlock>:
 800fc8c:	4801      	ldr	r0, [pc, #4]	; (800fc94 <__malloc_unlock+0x8>)
 800fc8e:	f000 bc0c 	b.w	80104aa <__retarget_lock_release_recursive>
 800fc92:	bf00      	nop
 800fc94:	20002020 	.word	0x20002020

0800fc98 <_realloc_r>:
 800fc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc9c:	4680      	mov	r8, r0
 800fc9e:	4614      	mov	r4, r2
 800fca0:	460e      	mov	r6, r1
 800fca2:	b921      	cbnz	r1, 800fcae <_realloc_r+0x16>
 800fca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fca8:	4611      	mov	r1, r2
 800fcaa:	f7ff bd95 	b.w	800f7d8 <_malloc_r>
 800fcae:	b92a      	cbnz	r2, 800fcbc <_realloc_r+0x24>
 800fcb0:	f7ff fd26 	bl	800f700 <_free_r>
 800fcb4:	4625      	mov	r5, r4
 800fcb6:	4628      	mov	r0, r5
 800fcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcbc:	f000 fc5c 	bl	8010578 <_malloc_usable_size_r>
 800fcc0:	4284      	cmp	r4, r0
 800fcc2:	4607      	mov	r7, r0
 800fcc4:	d802      	bhi.n	800fccc <_realloc_r+0x34>
 800fcc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fcca:	d812      	bhi.n	800fcf2 <_realloc_r+0x5a>
 800fccc:	4621      	mov	r1, r4
 800fcce:	4640      	mov	r0, r8
 800fcd0:	f7ff fd82 	bl	800f7d8 <_malloc_r>
 800fcd4:	4605      	mov	r5, r0
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	d0ed      	beq.n	800fcb6 <_realloc_r+0x1e>
 800fcda:	42bc      	cmp	r4, r7
 800fcdc:	4622      	mov	r2, r4
 800fcde:	4631      	mov	r1, r6
 800fce0:	bf28      	it	cs
 800fce2:	463a      	movcs	r2, r7
 800fce4:	f7fc f8ca 	bl	800be7c <memcpy>
 800fce8:	4631      	mov	r1, r6
 800fcea:	4640      	mov	r0, r8
 800fcec:	f7ff fd08 	bl	800f700 <_free_r>
 800fcf0:	e7e1      	b.n	800fcb6 <_realloc_r+0x1e>
 800fcf2:	4635      	mov	r5, r6
 800fcf4:	e7df      	b.n	800fcb6 <_realloc_r+0x1e>

0800fcf6 <__sfputc_r>:
 800fcf6:	6893      	ldr	r3, [r2, #8]
 800fcf8:	3b01      	subs	r3, #1
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	b410      	push	{r4}
 800fcfe:	6093      	str	r3, [r2, #8]
 800fd00:	da08      	bge.n	800fd14 <__sfputc_r+0x1e>
 800fd02:	6994      	ldr	r4, [r2, #24]
 800fd04:	42a3      	cmp	r3, r4
 800fd06:	db01      	blt.n	800fd0c <__sfputc_r+0x16>
 800fd08:	290a      	cmp	r1, #10
 800fd0a:	d103      	bne.n	800fd14 <__sfputc_r+0x1e>
 800fd0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd10:	f000 b94a 	b.w	800ffa8 <__swbuf_r>
 800fd14:	6813      	ldr	r3, [r2, #0]
 800fd16:	1c58      	adds	r0, r3, #1
 800fd18:	6010      	str	r0, [r2, #0]
 800fd1a:	7019      	strb	r1, [r3, #0]
 800fd1c:	4608      	mov	r0, r1
 800fd1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd22:	4770      	bx	lr

0800fd24 <__sfputs_r>:
 800fd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd26:	4606      	mov	r6, r0
 800fd28:	460f      	mov	r7, r1
 800fd2a:	4614      	mov	r4, r2
 800fd2c:	18d5      	adds	r5, r2, r3
 800fd2e:	42ac      	cmp	r4, r5
 800fd30:	d101      	bne.n	800fd36 <__sfputs_r+0x12>
 800fd32:	2000      	movs	r0, #0
 800fd34:	e007      	b.n	800fd46 <__sfputs_r+0x22>
 800fd36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd3a:	463a      	mov	r2, r7
 800fd3c:	4630      	mov	r0, r6
 800fd3e:	f7ff ffda 	bl	800fcf6 <__sfputc_r>
 800fd42:	1c43      	adds	r3, r0, #1
 800fd44:	d1f3      	bne.n	800fd2e <__sfputs_r+0xa>
 800fd46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fd48 <_vfiprintf_r>:
 800fd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd4c:	460d      	mov	r5, r1
 800fd4e:	b09d      	sub	sp, #116	; 0x74
 800fd50:	4614      	mov	r4, r2
 800fd52:	4698      	mov	r8, r3
 800fd54:	4606      	mov	r6, r0
 800fd56:	b118      	cbz	r0, 800fd60 <_vfiprintf_r+0x18>
 800fd58:	6983      	ldr	r3, [r0, #24]
 800fd5a:	b90b      	cbnz	r3, 800fd60 <_vfiprintf_r+0x18>
 800fd5c:	f000 fb06 	bl	801036c <__sinit>
 800fd60:	4b89      	ldr	r3, [pc, #548]	; (800ff88 <_vfiprintf_r+0x240>)
 800fd62:	429d      	cmp	r5, r3
 800fd64:	d11b      	bne.n	800fd9e <_vfiprintf_r+0x56>
 800fd66:	6875      	ldr	r5, [r6, #4]
 800fd68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd6a:	07d9      	lsls	r1, r3, #31
 800fd6c:	d405      	bmi.n	800fd7a <_vfiprintf_r+0x32>
 800fd6e:	89ab      	ldrh	r3, [r5, #12]
 800fd70:	059a      	lsls	r2, r3, #22
 800fd72:	d402      	bmi.n	800fd7a <_vfiprintf_r+0x32>
 800fd74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd76:	f000 fb97 	bl	80104a8 <__retarget_lock_acquire_recursive>
 800fd7a:	89ab      	ldrh	r3, [r5, #12]
 800fd7c:	071b      	lsls	r3, r3, #28
 800fd7e:	d501      	bpl.n	800fd84 <_vfiprintf_r+0x3c>
 800fd80:	692b      	ldr	r3, [r5, #16]
 800fd82:	b9eb      	cbnz	r3, 800fdc0 <_vfiprintf_r+0x78>
 800fd84:	4629      	mov	r1, r5
 800fd86:	4630      	mov	r0, r6
 800fd88:	f000 f960 	bl	801004c <__swsetup_r>
 800fd8c:	b1c0      	cbz	r0, 800fdc0 <_vfiprintf_r+0x78>
 800fd8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd90:	07dc      	lsls	r4, r3, #31
 800fd92:	d50e      	bpl.n	800fdb2 <_vfiprintf_r+0x6a>
 800fd94:	f04f 30ff 	mov.w	r0, #4294967295
 800fd98:	b01d      	add	sp, #116	; 0x74
 800fd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd9e:	4b7b      	ldr	r3, [pc, #492]	; (800ff8c <_vfiprintf_r+0x244>)
 800fda0:	429d      	cmp	r5, r3
 800fda2:	d101      	bne.n	800fda8 <_vfiprintf_r+0x60>
 800fda4:	68b5      	ldr	r5, [r6, #8]
 800fda6:	e7df      	b.n	800fd68 <_vfiprintf_r+0x20>
 800fda8:	4b79      	ldr	r3, [pc, #484]	; (800ff90 <_vfiprintf_r+0x248>)
 800fdaa:	429d      	cmp	r5, r3
 800fdac:	bf08      	it	eq
 800fdae:	68f5      	ldreq	r5, [r6, #12]
 800fdb0:	e7da      	b.n	800fd68 <_vfiprintf_r+0x20>
 800fdb2:	89ab      	ldrh	r3, [r5, #12]
 800fdb4:	0598      	lsls	r0, r3, #22
 800fdb6:	d4ed      	bmi.n	800fd94 <_vfiprintf_r+0x4c>
 800fdb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdba:	f000 fb76 	bl	80104aa <__retarget_lock_release_recursive>
 800fdbe:	e7e9      	b.n	800fd94 <_vfiprintf_r+0x4c>
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	9309      	str	r3, [sp, #36]	; 0x24
 800fdc4:	2320      	movs	r3, #32
 800fdc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdca:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdce:	2330      	movs	r3, #48	; 0x30
 800fdd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ff94 <_vfiprintf_r+0x24c>
 800fdd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fdd8:	f04f 0901 	mov.w	r9, #1
 800fddc:	4623      	mov	r3, r4
 800fdde:	469a      	mov	sl, r3
 800fde0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fde4:	b10a      	cbz	r2, 800fdea <_vfiprintf_r+0xa2>
 800fde6:	2a25      	cmp	r2, #37	; 0x25
 800fde8:	d1f9      	bne.n	800fdde <_vfiprintf_r+0x96>
 800fdea:	ebba 0b04 	subs.w	fp, sl, r4
 800fdee:	d00b      	beq.n	800fe08 <_vfiprintf_r+0xc0>
 800fdf0:	465b      	mov	r3, fp
 800fdf2:	4622      	mov	r2, r4
 800fdf4:	4629      	mov	r1, r5
 800fdf6:	4630      	mov	r0, r6
 800fdf8:	f7ff ff94 	bl	800fd24 <__sfputs_r>
 800fdfc:	3001      	adds	r0, #1
 800fdfe:	f000 80aa 	beq.w	800ff56 <_vfiprintf_r+0x20e>
 800fe02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe04:	445a      	add	r2, fp
 800fe06:	9209      	str	r2, [sp, #36]	; 0x24
 800fe08:	f89a 3000 	ldrb.w	r3, [sl]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	f000 80a2 	beq.w	800ff56 <_vfiprintf_r+0x20e>
 800fe12:	2300      	movs	r3, #0
 800fe14:	f04f 32ff 	mov.w	r2, #4294967295
 800fe18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe1c:	f10a 0a01 	add.w	sl, sl, #1
 800fe20:	9304      	str	r3, [sp, #16]
 800fe22:	9307      	str	r3, [sp, #28]
 800fe24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe28:	931a      	str	r3, [sp, #104]	; 0x68
 800fe2a:	4654      	mov	r4, sl
 800fe2c:	2205      	movs	r2, #5
 800fe2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe32:	4858      	ldr	r0, [pc, #352]	; (800ff94 <_vfiprintf_r+0x24c>)
 800fe34:	f7f0 f9dc 	bl	80001f0 <memchr>
 800fe38:	9a04      	ldr	r2, [sp, #16]
 800fe3a:	b9d8      	cbnz	r0, 800fe74 <_vfiprintf_r+0x12c>
 800fe3c:	06d1      	lsls	r1, r2, #27
 800fe3e:	bf44      	itt	mi
 800fe40:	2320      	movmi	r3, #32
 800fe42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe46:	0713      	lsls	r3, r2, #28
 800fe48:	bf44      	itt	mi
 800fe4a:	232b      	movmi	r3, #43	; 0x2b
 800fe4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe50:	f89a 3000 	ldrb.w	r3, [sl]
 800fe54:	2b2a      	cmp	r3, #42	; 0x2a
 800fe56:	d015      	beq.n	800fe84 <_vfiprintf_r+0x13c>
 800fe58:	9a07      	ldr	r2, [sp, #28]
 800fe5a:	4654      	mov	r4, sl
 800fe5c:	2000      	movs	r0, #0
 800fe5e:	f04f 0c0a 	mov.w	ip, #10
 800fe62:	4621      	mov	r1, r4
 800fe64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe68:	3b30      	subs	r3, #48	; 0x30
 800fe6a:	2b09      	cmp	r3, #9
 800fe6c:	d94e      	bls.n	800ff0c <_vfiprintf_r+0x1c4>
 800fe6e:	b1b0      	cbz	r0, 800fe9e <_vfiprintf_r+0x156>
 800fe70:	9207      	str	r2, [sp, #28]
 800fe72:	e014      	b.n	800fe9e <_vfiprintf_r+0x156>
 800fe74:	eba0 0308 	sub.w	r3, r0, r8
 800fe78:	fa09 f303 	lsl.w	r3, r9, r3
 800fe7c:	4313      	orrs	r3, r2
 800fe7e:	9304      	str	r3, [sp, #16]
 800fe80:	46a2      	mov	sl, r4
 800fe82:	e7d2      	b.n	800fe2a <_vfiprintf_r+0xe2>
 800fe84:	9b03      	ldr	r3, [sp, #12]
 800fe86:	1d19      	adds	r1, r3, #4
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	9103      	str	r1, [sp, #12]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	bfbb      	ittet	lt
 800fe90:	425b      	neglt	r3, r3
 800fe92:	f042 0202 	orrlt.w	r2, r2, #2
 800fe96:	9307      	strge	r3, [sp, #28]
 800fe98:	9307      	strlt	r3, [sp, #28]
 800fe9a:	bfb8      	it	lt
 800fe9c:	9204      	strlt	r2, [sp, #16]
 800fe9e:	7823      	ldrb	r3, [r4, #0]
 800fea0:	2b2e      	cmp	r3, #46	; 0x2e
 800fea2:	d10c      	bne.n	800febe <_vfiprintf_r+0x176>
 800fea4:	7863      	ldrb	r3, [r4, #1]
 800fea6:	2b2a      	cmp	r3, #42	; 0x2a
 800fea8:	d135      	bne.n	800ff16 <_vfiprintf_r+0x1ce>
 800feaa:	9b03      	ldr	r3, [sp, #12]
 800feac:	1d1a      	adds	r2, r3, #4
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	9203      	str	r2, [sp, #12]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	bfb8      	it	lt
 800feb6:	f04f 33ff 	movlt.w	r3, #4294967295
 800feba:	3402      	adds	r4, #2
 800febc:	9305      	str	r3, [sp, #20]
 800febe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ffa4 <_vfiprintf_r+0x25c>
 800fec2:	7821      	ldrb	r1, [r4, #0]
 800fec4:	2203      	movs	r2, #3
 800fec6:	4650      	mov	r0, sl
 800fec8:	f7f0 f992 	bl	80001f0 <memchr>
 800fecc:	b140      	cbz	r0, 800fee0 <_vfiprintf_r+0x198>
 800fece:	2340      	movs	r3, #64	; 0x40
 800fed0:	eba0 000a 	sub.w	r0, r0, sl
 800fed4:	fa03 f000 	lsl.w	r0, r3, r0
 800fed8:	9b04      	ldr	r3, [sp, #16]
 800feda:	4303      	orrs	r3, r0
 800fedc:	3401      	adds	r4, #1
 800fede:	9304      	str	r3, [sp, #16]
 800fee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fee4:	482c      	ldr	r0, [pc, #176]	; (800ff98 <_vfiprintf_r+0x250>)
 800fee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800feea:	2206      	movs	r2, #6
 800feec:	f7f0 f980 	bl	80001f0 <memchr>
 800fef0:	2800      	cmp	r0, #0
 800fef2:	d03f      	beq.n	800ff74 <_vfiprintf_r+0x22c>
 800fef4:	4b29      	ldr	r3, [pc, #164]	; (800ff9c <_vfiprintf_r+0x254>)
 800fef6:	bb1b      	cbnz	r3, 800ff40 <_vfiprintf_r+0x1f8>
 800fef8:	9b03      	ldr	r3, [sp, #12]
 800fefa:	3307      	adds	r3, #7
 800fefc:	f023 0307 	bic.w	r3, r3, #7
 800ff00:	3308      	adds	r3, #8
 800ff02:	9303      	str	r3, [sp, #12]
 800ff04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff06:	443b      	add	r3, r7
 800ff08:	9309      	str	r3, [sp, #36]	; 0x24
 800ff0a:	e767      	b.n	800fddc <_vfiprintf_r+0x94>
 800ff0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff10:	460c      	mov	r4, r1
 800ff12:	2001      	movs	r0, #1
 800ff14:	e7a5      	b.n	800fe62 <_vfiprintf_r+0x11a>
 800ff16:	2300      	movs	r3, #0
 800ff18:	3401      	adds	r4, #1
 800ff1a:	9305      	str	r3, [sp, #20]
 800ff1c:	4619      	mov	r1, r3
 800ff1e:	f04f 0c0a 	mov.w	ip, #10
 800ff22:	4620      	mov	r0, r4
 800ff24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff28:	3a30      	subs	r2, #48	; 0x30
 800ff2a:	2a09      	cmp	r2, #9
 800ff2c:	d903      	bls.n	800ff36 <_vfiprintf_r+0x1ee>
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d0c5      	beq.n	800febe <_vfiprintf_r+0x176>
 800ff32:	9105      	str	r1, [sp, #20]
 800ff34:	e7c3      	b.n	800febe <_vfiprintf_r+0x176>
 800ff36:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	e7f0      	b.n	800ff22 <_vfiprintf_r+0x1da>
 800ff40:	ab03      	add	r3, sp, #12
 800ff42:	9300      	str	r3, [sp, #0]
 800ff44:	462a      	mov	r2, r5
 800ff46:	4b16      	ldr	r3, [pc, #88]	; (800ffa0 <_vfiprintf_r+0x258>)
 800ff48:	a904      	add	r1, sp, #16
 800ff4a:	4630      	mov	r0, r6
 800ff4c:	f7fc f84c 	bl	800bfe8 <_printf_float>
 800ff50:	4607      	mov	r7, r0
 800ff52:	1c78      	adds	r0, r7, #1
 800ff54:	d1d6      	bne.n	800ff04 <_vfiprintf_r+0x1bc>
 800ff56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff58:	07d9      	lsls	r1, r3, #31
 800ff5a:	d405      	bmi.n	800ff68 <_vfiprintf_r+0x220>
 800ff5c:	89ab      	ldrh	r3, [r5, #12]
 800ff5e:	059a      	lsls	r2, r3, #22
 800ff60:	d402      	bmi.n	800ff68 <_vfiprintf_r+0x220>
 800ff62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff64:	f000 faa1 	bl	80104aa <__retarget_lock_release_recursive>
 800ff68:	89ab      	ldrh	r3, [r5, #12]
 800ff6a:	065b      	lsls	r3, r3, #25
 800ff6c:	f53f af12 	bmi.w	800fd94 <_vfiprintf_r+0x4c>
 800ff70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff72:	e711      	b.n	800fd98 <_vfiprintf_r+0x50>
 800ff74:	ab03      	add	r3, sp, #12
 800ff76:	9300      	str	r3, [sp, #0]
 800ff78:	462a      	mov	r2, r5
 800ff7a:	4b09      	ldr	r3, [pc, #36]	; (800ffa0 <_vfiprintf_r+0x258>)
 800ff7c:	a904      	add	r1, sp, #16
 800ff7e:	4630      	mov	r0, r6
 800ff80:	f7fc fad6 	bl	800c530 <_printf_i>
 800ff84:	e7e4      	b.n	800ff50 <_vfiprintf_r+0x208>
 800ff86:	bf00      	nop
 800ff88:	080132e4 	.word	0x080132e4
 800ff8c:	08013304 	.word	0x08013304
 800ff90:	080132c4 	.word	0x080132c4
 800ff94:	08013274 	.word	0x08013274
 800ff98:	0801327e 	.word	0x0801327e
 800ff9c:	0800bfe9 	.word	0x0800bfe9
 800ffa0:	0800fd25 	.word	0x0800fd25
 800ffa4:	0801327a 	.word	0x0801327a

0800ffa8 <__swbuf_r>:
 800ffa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffaa:	460e      	mov	r6, r1
 800ffac:	4614      	mov	r4, r2
 800ffae:	4605      	mov	r5, r0
 800ffb0:	b118      	cbz	r0, 800ffba <__swbuf_r+0x12>
 800ffb2:	6983      	ldr	r3, [r0, #24]
 800ffb4:	b90b      	cbnz	r3, 800ffba <__swbuf_r+0x12>
 800ffb6:	f000 f9d9 	bl	801036c <__sinit>
 800ffba:	4b21      	ldr	r3, [pc, #132]	; (8010040 <__swbuf_r+0x98>)
 800ffbc:	429c      	cmp	r4, r3
 800ffbe:	d12b      	bne.n	8010018 <__swbuf_r+0x70>
 800ffc0:	686c      	ldr	r4, [r5, #4]
 800ffc2:	69a3      	ldr	r3, [r4, #24]
 800ffc4:	60a3      	str	r3, [r4, #8]
 800ffc6:	89a3      	ldrh	r3, [r4, #12]
 800ffc8:	071a      	lsls	r2, r3, #28
 800ffca:	d52f      	bpl.n	801002c <__swbuf_r+0x84>
 800ffcc:	6923      	ldr	r3, [r4, #16]
 800ffce:	b36b      	cbz	r3, 801002c <__swbuf_r+0x84>
 800ffd0:	6923      	ldr	r3, [r4, #16]
 800ffd2:	6820      	ldr	r0, [r4, #0]
 800ffd4:	1ac0      	subs	r0, r0, r3
 800ffd6:	6963      	ldr	r3, [r4, #20]
 800ffd8:	b2f6      	uxtb	r6, r6
 800ffda:	4283      	cmp	r3, r0
 800ffdc:	4637      	mov	r7, r6
 800ffde:	dc04      	bgt.n	800ffea <__swbuf_r+0x42>
 800ffe0:	4621      	mov	r1, r4
 800ffe2:	4628      	mov	r0, r5
 800ffe4:	f000 f92e 	bl	8010244 <_fflush_r>
 800ffe8:	bb30      	cbnz	r0, 8010038 <__swbuf_r+0x90>
 800ffea:	68a3      	ldr	r3, [r4, #8]
 800ffec:	3b01      	subs	r3, #1
 800ffee:	60a3      	str	r3, [r4, #8]
 800fff0:	6823      	ldr	r3, [r4, #0]
 800fff2:	1c5a      	adds	r2, r3, #1
 800fff4:	6022      	str	r2, [r4, #0]
 800fff6:	701e      	strb	r6, [r3, #0]
 800fff8:	6963      	ldr	r3, [r4, #20]
 800fffa:	3001      	adds	r0, #1
 800fffc:	4283      	cmp	r3, r0
 800fffe:	d004      	beq.n	801000a <__swbuf_r+0x62>
 8010000:	89a3      	ldrh	r3, [r4, #12]
 8010002:	07db      	lsls	r3, r3, #31
 8010004:	d506      	bpl.n	8010014 <__swbuf_r+0x6c>
 8010006:	2e0a      	cmp	r6, #10
 8010008:	d104      	bne.n	8010014 <__swbuf_r+0x6c>
 801000a:	4621      	mov	r1, r4
 801000c:	4628      	mov	r0, r5
 801000e:	f000 f919 	bl	8010244 <_fflush_r>
 8010012:	b988      	cbnz	r0, 8010038 <__swbuf_r+0x90>
 8010014:	4638      	mov	r0, r7
 8010016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010018:	4b0a      	ldr	r3, [pc, #40]	; (8010044 <__swbuf_r+0x9c>)
 801001a:	429c      	cmp	r4, r3
 801001c:	d101      	bne.n	8010022 <__swbuf_r+0x7a>
 801001e:	68ac      	ldr	r4, [r5, #8]
 8010020:	e7cf      	b.n	800ffc2 <__swbuf_r+0x1a>
 8010022:	4b09      	ldr	r3, [pc, #36]	; (8010048 <__swbuf_r+0xa0>)
 8010024:	429c      	cmp	r4, r3
 8010026:	bf08      	it	eq
 8010028:	68ec      	ldreq	r4, [r5, #12]
 801002a:	e7ca      	b.n	800ffc2 <__swbuf_r+0x1a>
 801002c:	4621      	mov	r1, r4
 801002e:	4628      	mov	r0, r5
 8010030:	f000 f80c 	bl	801004c <__swsetup_r>
 8010034:	2800      	cmp	r0, #0
 8010036:	d0cb      	beq.n	800ffd0 <__swbuf_r+0x28>
 8010038:	f04f 37ff 	mov.w	r7, #4294967295
 801003c:	e7ea      	b.n	8010014 <__swbuf_r+0x6c>
 801003e:	bf00      	nop
 8010040:	080132e4 	.word	0x080132e4
 8010044:	08013304 	.word	0x08013304
 8010048:	080132c4 	.word	0x080132c4

0801004c <__swsetup_r>:
 801004c:	4b32      	ldr	r3, [pc, #200]	; (8010118 <__swsetup_r+0xcc>)
 801004e:	b570      	push	{r4, r5, r6, lr}
 8010050:	681d      	ldr	r5, [r3, #0]
 8010052:	4606      	mov	r6, r0
 8010054:	460c      	mov	r4, r1
 8010056:	b125      	cbz	r5, 8010062 <__swsetup_r+0x16>
 8010058:	69ab      	ldr	r3, [r5, #24]
 801005a:	b913      	cbnz	r3, 8010062 <__swsetup_r+0x16>
 801005c:	4628      	mov	r0, r5
 801005e:	f000 f985 	bl	801036c <__sinit>
 8010062:	4b2e      	ldr	r3, [pc, #184]	; (801011c <__swsetup_r+0xd0>)
 8010064:	429c      	cmp	r4, r3
 8010066:	d10f      	bne.n	8010088 <__swsetup_r+0x3c>
 8010068:	686c      	ldr	r4, [r5, #4]
 801006a:	89a3      	ldrh	r3, [r4, #12]
 801006c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010070:	0719      	lsls	r1, r3, #28
 8010072:	d42c      	bmi.n	80100ce <__swsetup_r+0x82>
 8010074:	06dd      	lsls	r5, r3, #27
 8010076:	d411      	bmi.n	801009c <__swsetup_r+0x50>
 8010078:	2309      	movs	r3, #9
 801007a:	6033      	str	r3, [r6, #0]
 801007c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010080:	81a3      	strh	r3, [r4, #12]
 8010082:	f04f 30ff 	mov.w	r0, #4294967295
 8010086:	e03e      	b.n	8010106 <__swsetup_r+0xba>
 8010088:	4b25      	ldr	r3, [pc, #148]	; (8010120 <__swsetup_r+0xd4>)
 801008a:	429c      	cmp	r4, r3
 801008c:	d101      	bne.n	8010092 <__swsetup_r+0x46>
 801008e:	68ac      	ldr	r4, [r5, #8]
 8010090:	e7eb      	b.n	801006a <__swsetup_r+0x1e>
 8010092:	4b24      	ldr	r3, [pc, #144]	; (8010124 <__swsetup_r+0xd8>)
 8010094:	429c      	cmp	r4, r3
 8010096:	bf08      	it	eq
 8010098:	68ec      	ldreq	r4, [r5, #12]
 801009a:	e7e6      	b.n	801006a <__swsetup_r+0x1e>
 801009c:	0758      	lsls	r0, r3, #29
 801009e:	d512      	bpl.n	80100c6 <__swsetup_r+0x7a>
 80100a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100a2:	b141      	cbz	r1, 80100b6 <__swsetup_r+0x6a>
 80100a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100a8:	4299      	cmp	r1, r3
 80100aa:	d002      	beq.n	80100b2 <__swsetup_r+0x66>
 80100ac:	4630      	mov	r0, r6
 80100ae:	f7ff fb27 	bl	800f700 <_free_r>
 80100b2:	2300      	movs	r3, #0
 80100b4:	6363      	str	r3, [r4, #52]	; 0x34
 80100b6:	89a3      	ldrh	r3, [r4, #12]
 80100b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80100bc:	81a3      	strh	r3, [r4, #12]
 80100be:	2300      	movs	r3, #0
 80100c0:	6063      	str	r3, [r4, #4]
 80100c2:	6923      	ldr	r3, [r4, #16]
 80100c4:	6023      	str	r3, [r4, #0]
 80100c6:	89a3      	ldrh	r3, [r4, #12]
 80100c8:	f043 0308 	orr.w	r3, r3, #8
 80100cc:	81a3      	strh	r3, [r4, #12]
 80100ce:	6923      	ldr	r3, [r4, #16]
 80100d0:	b94b      	cbnz	r3, 80100e6 <__swsetup_r+0x9a>
 80100d2:	89a3      	ldrh	r3, [r4, #12]
 80100d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80100d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100dc:	d003      	beq.n	80100e6 <__swsetup_r+0x9a>
 80100de:	4621      	mov	r1, r4
 80100e0:	4630      	mov	r0, r6
 80100e2:	f000 fa09 	bl	80104f8 <__smakebuf_r>
 80100e6:	89a0      	ldrh	r0, [r4, #12]
 80100e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100ec:	f010 0301 	ands.w	r3, r0, #1
 80100f0:	d00a      	beq.n	8010108 <__swsetup_r+0xbc>
 80100f2:	2300      	movs	r3, #0
 80100f4:	60a3      	str	r3, [r4, #8]
 80100f6:	6963      	ldr	r3, [r4, #20]
 80100f8:	425b      	negs	r3, r3
 80100fa:	61a3      	str	r3, [r4, #24]
 80100fc:	6923      	ldr	r3, [r4, #16]
 80100fe:	b943      	cbnz	r3, 8010112 <__swsetup_r+0xc6>
 8010100:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010104:	d1ba      	bne.n	801007c <__swsetup_r+0x30>
 8010106:	bd70      	pop	{r4, r5, r6, pc}
 8010108:	0781      	lsls	r1, r0, #30
 801010a:	bf58      	it	pl
 801010c:	6963      	ldrpl	r3, [r4, #20]
 801010e:	60a3      	str	r3, [r4, #8]
 8010110:	e7f4      	b.n	80100fc <__swsetup_r+0xb0>
 8010112:	2000      	movs	r0, #0
 8010114:	e7f7      	b.n	8010106 <__swsetup_r+0xba>
 8010116:	bf00      	nop
 8010118:	2000023c 	.word	0x2000023c
 801011c:	080132e4 	.word	0x080132e4
 8010120:	08013304 	.word	0x08013304
 8010124:	080132c4 	.word	0x080132c4

08010128 <abort>:
 8010128:	b508      	push	{r3, lr}
 801012a:	2006      	movs	r0, #6
 801012c:	f000 fa54 	bl	80105d8 <raise>
 8010130:	2001      	movs	r0, #1
 8010132:	f7f4 ff4b 	bl	8004fcc <_exit>
	...

08010138 <__sflush_r>:
 8010138:	898a      	ldrh	r2, [r1, #12]
 801013a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801013e:	4605      	mov	r5, r0
 8010140:	0710      	lsls	r0, r2, #28
 8010142:	460c      	mov	r4, r1
 8010144:	d458      	bmi.n	80101f8 <__sflush_r+0xc0>
 8010146:	684b      	ldr	r3, [r1, #4]
 8010148:	2b00      	cmp	r3, #0
 801014a:	dc05      	bgt.n	8010158 <__sflush_r+0x20>
 801014c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801014e:	2b00      	cmp	r3, #0
 8010150:	dc02      	bgt.n	8010158 <__sflush_r+0x20>
 8010152:	2000      	movs	r0, #0
 8010154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801015a:	2e00      	cmp	r6, #0
 801015c:	d0f9      	beq.n	8010152 <__sflush_r+0x1a>
 801015e:	2300      	movs	r3, #0
 8010160:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010164:	682f      	ldr	r7, [r5, #0]
 8010166:	602b      	str	r3, [r5, #0]
 8010168:	d032      	beq.n	80101d0 <__sflush_r+0x98>
 801016a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801016c:	89a3      	ldrh	r3, [r4, #12]
 801016e:	075a      	lsls	r2, r3, #29
 8010170:	d505      	bpl.n	801017e <__sflush_r+0x46>
 8010172:	6863      	ldr	r3, [r4, #4]
 8010174:	1ac0      	subs	r0, r0, r3
 8010176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010178:	b10b      	cbz	r3, 801017e <__sflush_r+0x46>
 801017a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801017c:	1ac0      	subs	r0, r0, r3
 801017e:	2300      	movs	r3, #0
 8010180:	4602      	mov	r2, r0
 8010182:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010184:	6a21      	ldr	r1, [r4, #32]
 8010186:	4628      	mov	r0, r5
 8010188:	47b0      	blx	r6
 801018a:	1c43      	adds	r3, r0, #1
 801018c:	89a3      	ldrh	r3, [r4, #12]
 801018e:	d106      	bne.n	801019e <__sflush_r+0x66>
 8010190:	6829      	ldr	r1, [r5, #0]
 8010192:	291d      	cmp	r1, #29
 8010194:	d82c      	bhi.n	80101f0 <__sflush_r+0xb8>
 8010196:	4a2a      	ldr	r2, [pc, #168]	; (8010240 <__sflush_r+0x108>)
 8010198:	40ca      	lsrs	r2, r1
 801019a:	07d6      	lsls	r6, r2, #31
 801019c:	d528      	bpl.n	80101f0 <__sflush_r+0xb8>
 801019e:	2200      	movs	r2, #0
 80101a0:	6062      	str	r2, [r4, #4]
 80101a2:	04d9      	lsls	r1, r3, #19
 80101a4:	6922      	ldr	r2, [r4, #16]
 80101a6:	6022      	str	r2, [r4, #0]
 80101a8:	d504      	bpl.n	80101b4 <__sflush_r+0x7c>
 80101aa:	1c42      	adds	r2, r0, #1
 80101ac:	d101      	bne.n	80101b2 <__sflush_r+0x7a>
 80101ae:	682b      	ldr	r3, [r5, #0]
 80101b0:	b903      	cbnz	r3, 80101b4 <__sflush_r+0x7c>
 80101b2:	6560      	str	r0, [r4, #84]	; 0x54
 80101b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101b6:	602f      	str	r7, [r5, #0]
 80101b8:	2900      	cmp	r1, #0
 80101ba:	d0ca      	beq.n	8010152 <__sflush_r+0x1a>
 80101bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101c0:	4299      	cmp	r1, r3
 80101c2:	d002      	beq.n	80101ca <__sflush_r+0x92>
 80101c4:	4628      	mov	r0, r5
 80101c6:	f7ff fa9b 	bl	800f700 <_free_r>
 80101ca:	2000      	movs	r0, #0
 80101cc:	6360      	str	r0, [r4, #52]	; 0x34
 80101ce:	e7c1      	b.n	8010154 <__sflush_r+0x1c>
 80101d0:	6a21      	ldr	r1, [r4, #32]
 80101d2:	2301      	movs	r3, #1
 80101d4:	4628      	mov	r0, r5
 80101d6:	47b0      	blx	r6
 80101d8:	1c41      	adds	r1, r0, #1
 80101da:	d1c7      	bne.n	801016c <__sflush_r+0x34>
 80101dc:	682b      	ldr	r3, [r5, #0]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d0c4      	beq.n	801016c <__sflush_r+0x34>
 80101e2:	2b1d      	cmp	r3, #29
 80101e4:	d001      	beq.n	80101ea <__sflush_r+0xb2>
 80101e6:	2b16      	cmp	r3, #22
 80101e8:	d101      	bne.n	80101ee <__sflush_r+0xb6>
 80101ea:	602f      	str	r7, [r5, #0]
 80101ec:	e7b1      	b.n	8010152 <__sflush_r+0x1a>
 80101ee:	89a3      	ldrh	r3, [r4, #12]
 80101f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101f4:	81a3      	strh	r3, [r4, #12]
 80101f6:	e7ad      	b.n	8010154 <__sflush_r+0x1c>
 80101f8:	690f      	ldr	r7, [r1, #16]
 80101fa:	2f00      	cmp	r7, #0
 80101fc:	d0a9      	beq.n	8010152 <__sflush_r+0x1a>
 80101fe:	0793      	lsls	r3, r2, #30
 8010200:	680e      	ldr	r6, [r1, #0]
 8010202:	bf08      	it	eq
 8010204:	694b      	ldreq	r3, [r1, #20]
 8010206:	600f      	str	r7, [r1, #0]
 8010208:	bf18      	it	ne
 801020a:	2300      	movne	r3, #0
 801020c:	eba6 0807 	sub.w	r8, r6, r7
 8010210:	608b      	str	r3, [r1, #8]
 8010212:	f1b8 0f00 	cmp.w	r8, #0
 8010216:	dd9c      	ble.n	8010152 <__sflush_r+0x1a>
 8010218:	6a21      	ldr	r1, [r4, #32]
 801021a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801021c:	4643      	mov	r3, r8
 801021e:	463a      	mov	r2, r7
 8010220:	4628      	mov	r0, r5
 8010222:	47b0      	blx	r6
 8010224:	2800      	cmp	r0, #0
 8010226:	dc06      	bgt.n	8010236 <__sflush_r+0xfe>
 8010228:	89a3      	ldrh	r3, [r4, #12]
 801022a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801022e:	81a3      	strh	r3, [r4, #12]
 8010230:	f04f 30ff 	mov.w	r0, #4294967295
 8010234:	e78e      	b.n	8010154 <__sflush_r+0x1c>
 8010236:	4407      	add	r7, r0
 8010238:	eba8 0800 	sub.w	r8, r8, r0
 801023c:	e7e9      	b.n	8010212 <__sflush_r+0xda>
 801023e:	bf00      	nop
 8010240:	20400001 	.word	0x20400001

08010244 <_fflush_r>:
 8010244:	b538      	push	{r3, r4, r5, lr}
 8010246:	690b      	ldr	r3, [r1, #16]
 8010248:	4605      	mov	r5, r0
 801024a:	460c      	mov	r4, r1
 801024c:	b913      	cbnz	r3, 8010254 <_fflush_r+0x10>
 801024e:	2500      	movs	r5, #0
 8010250:	4628      	mov	r0, r5
 8010252:	bd38      	pop	{r3, r4, r5, pc}
 8010254:	b118      	cbz	r0, 801025e <_fflush_r+0x1a>
 8010256:	6983      	ldr	r3, [r0, #24]
 8010258:	b90b      	cbnz	r3, 801025e <_fflush_r+0x1a>
 801025a:	f000 f887 	bl	801036c <__sinit>
 801025e:	4b14      	ldr	r3, [pc, #80]	; (80102b0 <_fflush_r+0x6c>)
 8010260:	429c      	cmp	r4, r3
 8010262:	d11b      	bne.n	801029c <_fflush_r+0x58>
 8010264:	686c      	ldr	r4, [r5, #4]
 8010266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d0ef      	beq.n	801024e <_fflush_r+0xa>
 801026e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010270:	07d0      	lsls	r0, r2, #31
 8010272:	d404      	bmi.n	801027e <_fflush_r+0x3a>
 8010274:	0599      	lsls	r1, r3, #22
 8010276:	d402      	bmi.n	801027e <_fflush_r+0x3a>
 8010278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801027a:	f000 f915 	bl	80104a8 <__retarget_lock_acquire_recursive>
 801027e:	4628      	mov	r0, r5
 8010280:	4621      	mov	r1, r4
 8010282:	f7ff ff59 	bl	8010138 <__sflush_r>
 8010286:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010288:	07da      	lsls	r2, r3, #31
 801028a:	4605      	mov	r5, r0
 801028c:	d4e0      	bmi.n	8010250 <_fflush_r+0xc>
 801028e:	89a3      	ldrh	r3, [r4, #12]
 8010290:	059b      	lsls	r3, r3, #22
 8010292:	d4dd      	bmi.n	8010250 <_fflush_r+0xc>
 8010294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010296:	f000 f908 	bl	80104aa <__retarget_lock_release_recursive>
 801029a:	e7d9      	b.n	8010250 <_fflush_r+0xc>
 801029c:	4b05      	ldr	r3, [pc, #20]	; (80102b4 <_fflush_r+0x70>)
 801029e:	429c      	cmp	r4, r3
 80102a0:	d101      	bne.n	80102a6 <_fflush_r+0x62>
 80102a2:	68ac      	ldr	r4, [r5, #8]
 80102a4:	e7df      	b.n	8010266 <_fflush_r+0x22>
 80102a6:	4b04      	ldr	r3, [pc, #16]	; (80102b8 <_fflush_r+0x74>)
 80102a8:	429c      	cmp	r4, r3
 80102aa:	bf08      	it	eq
 80102ac:	68ec      	ldreq	r4, [r5, #12]
 80102ae:	e7da      	b.n	8010266 <_fflush_r+0x22>
 80102b0:	080132e4 	.word	0x080132e4
 80102b4:	08013304 	.word	0x08013304
 80102b8:	080132c4 	.word	0x080132c4

080102bc <std>:
 80102bc:	2300      	movs	r3, #0
 80102be:	b510      	push	{r4, lr}
 80102c0:	4604      	mov	r4, r0
 80102c2:	e9c0 3300 	strd	r3, r3, [r0]
 80102c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80102ca:	6083      	str	r3, [r0, #8]
 80102cc:	8181      	strh	r1, [r0, #12]
 80102ce:	6643      	str	r3, [r0, #100]	; 0x64
 80102d0:	81c2      	strh	r2, [r0, #14]
 80102d2:	6183      	str	r3, [r0, #24]
 80102d4:	4619      	mov	r1, r3
 80102d6:	2208      	movs	r2, #8
 80102d8:	305c      	adds	r0, #92	; 0x5c
 80102da:	f7fb fddd 	bl	800be98 <memset>
 80102de:	4b05      	ldr	r3, [pc, #20]	; (80102f4 <std+0x38>)
 80102e0:	6263      	str	r3, [r4, #36]	; 0x24
 80102e2:	4b05      	ldr	r3, [pc, #20]	; (80102f8 <std+0x3c>)
 80102e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80102e6:	4b05      	ldr	r3, [pc, #20]	; (80102fc <std+0x40>)
 80102e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80102ea:	4b05      	ldr	r3, [pc, #20]	; (8010300 <std+0x44>)
 80102ec:	6224      	str	r4, [r4, #32]
 80102ee:	6323      	str	r3, [r4, #48]	; 0x30
 80102f0:	bd10      	pop	{r4, pc}
 80102f2:	bf00      	nop
 80102f4:	08010611 	.word	0x08010611
 80102f8:	08010633 	.word	0x08010633
 80102fc:	0801066b 	.word	0x0801066b
 8010300:	0801068f 	.word	0x0801068f

08010304 <_cleanup_r>:
 8010304:	4901      	ldr	r1, [pc, #4]	; (801030c <_cleanup_r+0x8>)
 8010306:	f000 b8af 	b.w	8010468 <_fwalk_reent>
 801030a:	bf00      	nop
 801030c:	08010245 	.word	0x08010245

08010310 <__sfmoreglue>:
 8010310:	b570      	push	{r4, r5, r6, lr}
 8010312:	2268      	movs	r2, #104	; 0x68
 8010314:	1e4d      	subs	r5, r1, #1
 8010316:	4355      	muls	r5, r2
 8010318:	460e      	mov	r6, r1
 801031a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801031e:	f7ff fa5b 	bl	800f7d8 <_malloc_r>
 8010322:	4604      	mov	r4, r0
 8010324:	b140      	cbz	r0, 8010338 <__sfmoreglue+0x28>
 8010326:	2100      	movs	r1, #0
 8010328:	e9c0 1600 	strd	r1, r6, [r0]
 801032c:	300c      	adds	r0, #12
 801032e:	60a0      	str	r0, [r4, #8]
 8010330:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010334:	f7fb fdb0 	bl	800be98 <memset>
 8010338:	4620      	mov	r0, r4
 801033a:	bd70      	pop	{r4, r5, r6, pc}

0801033c <__sfp_lock_acquire>:
 801033c:	4801      	ldr	r0, [pc, #4]	; (8010344 <__sfp_lock_acquire+0x8>)
 801033e:	f000 b8b3 	b.w	80104a8 <__retarget_lock_acquire_recursive>
 8010342:	bf00      	nop
 8010344:	20002021 	.word	0x20002021

08010348 <__sfp_lock_release>:
 8010348:	4801      	ldr	r0, [pc, #4]	; (8010350 <__sfp_lock_release+0x8>)
 801034a:	f000 b8ae 	b.w	80104aa <__retarget_lock_release_recursive>
 801034e:	bf00      	nop
 8010350:	20002021 	.word	0x20002021

08010354 <__sinit_lock_acquire>:
 8010354:	4801      	ldr	r0, [pc, #4]	; (801035c <__sinit_lock_acquire+0x8>)
 8010356:	f000 b8a7 	b.w	80104a8 <__retarget_lock_acquire_recursive>
 801035a:	bf00      	nop
 801035c:	20002022 	.word	0x20002022

08010360 <__sinit_lock_release>:
 8010360:	4801      	ldr	r0, [pc, #4]	; (8010368 <__sinit_lock_release+0x8>)
 8010362:	f000 b8a2 	b.w	80104aa <__retarget_lock_release_recursive>
 8010366:	bf00      	nop
 8010368:	20002022 	.word	0x20002022

0801036c <__sinit>:
 801036c:	b510      	push	{r4, lr}
 801036e:	4604      	mov	r4, r0
 8010370:	f7ff fff0 	bl	8010354 <__sinit_lock_acquire>
 8010374:	69a3      	ldr	r3, [r4, #24]
 8010376:	b11b      	cbz	r3, 8010380 <__sinit+0x14>
 8010378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801037c:	f7ff bff0 	b.w	8010360 <__sinit_lock_release>
 8010380:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010384:	6523      	str	r3, [r4, #80]	; 0x50
 8010386:	4b13      	ldr	r3, [pc, #76]	; (80103d4 <__sinit+0x68>)
 8010388:	4a13      	ldr	r2, [pc, #76]	; (80103d8 <__sinit+0x6c>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	62a2      	str	r2, [r4, #40]	; 0x28
 801038e:	42a3      	cmp	r3, r4
 8010390:	bf04      	itt	eq
 8010392:	2301      	moveq	r3, #1
 8010394:	61a3      	streq	r3, [r4, #24]
 8010396:	4620      	mov	r0, r4
 8010398:	f000 f820 	bl	80103dc <__sfp>
 801039c:	6060      	str	r0, [r4, #4]
 801039e:	4620      	mov	r0, r4
 80103a0:	f000 f81c 	bl	80103dc <__sfp>
 80103a4:	60a0      	str	r0, [r4, #8]
 80103a6:	4620      	mov	r0, r4
 80103a8:	f000 f818 	bl	80103dc <__sfp>
 80103ac:	2200      	movs	r2, #0
 80103ae:	60e0      	str	r0, [r4, #12]
 80103b0:	2104      	movs	r1, #4
 80103b2:	6860      	ldr	r0, [r4, #4]
 80103b4:	f7ff ff82 	bl	80102bc <std>
 80103b8:	68a0      	ldr	r0, [r4, #8]
 80103ba:	2201      	movs	r2, #1
 80103bc:	2109      	movs	r1, #9
 80103be:	f7ff ff7d 	bl	80102bc <std>
 80103c2:	68e0      	ldr	r0, [r4, #12]
 80103c4:	2202      	movs	r2, #2
 80103c6:	2112      	movs	r1, #18
 80103c8:	f7ff ff78 	bl	80102bc <std>
 80103cc:	2301      	movs	r3, #1
 80103ce:	61a3      	str	r3, [r4, #24]
 80103d0:	e7d2      	b.n	8010378 <__sinit+0xc>
 80103d2:	bf00      	nop
 80103d4:	08012e7c 	.word	0x08012e7c
 80103d8:	08010305 	.word	0x08010305

080103dc <__sfp>:
 80103dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103de:	4607      	mov	r7, r0
 80103e0:	f7ff ffac 	bl	801033c <__sfp_lock_acquire>
 80103e4:	4b1e      	ldr	r3, [pc, #120]	; (8010460 <__sfp+0x84>)
 80103e6:	681e      	ldr	r6, [r3, #0]
 80103e8:	69b3      	ldr	r3, [r6, #24]
 80103ea:	b913      	cbnz	r3, 80103f2 <__sfp+0x16>
 80103ec:	4630      	mov	r0, r6
 80103ee:	f7ff ffbd 	bl	801036c <__sinit>
 80103f2:	3648      	adds	r6, #72	; 0x48
 80103f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80103f8:	3b01      	subs	r3, #1
 80103fa:	d503      	bpl.n	8010404 <__sfp+0x28>
 80103fc:	6833      	ldr	r3, [r6, #0]
 80103fe:	b30b      	cbz	r3, 8010444 <__sfp+0x68>
 8010400:	6836      	ldr	r6, [r6, #0]
 8010402:	e7f7      	b.n	80103f4 <__sfp+0x18>
 8010404:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010408:	b9d5      	cbnz	r5, 8010440 <__sfp+0x64>
 801040a:	4b16      	ldr	r3, [pc, #88]	; (8010464 <__sfp+0x88>)
 801040c:	60e3      	str	r3, [r4, #12]
 801040e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010412:	6665      	str	r5, [r4, #100]	; 0x64
 8010414:	f000 f847 	bl	80104a6 <__retarget_lock_init_recursive>
 8010418:	f7ff ff96 	bl	8010348 <__sfp_lock_release>
 801041c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010420:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010424:	6025      	str	r5, [r4, #0]
 8010426:	61a5      	str	r5, [r4, #24]
 8010428:	2208      	movs	r2, #8
 801042a:	4629      	mov	r1, r5
 801042c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010430:	f7fb fd32 	bl	800be98 <memset>
 8010434:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010438:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801043c:	4620      	mov	r0, r4
 801043e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010440:	3468      	adds	r4, #104	; 0x68
 8010442:	e7d9      	b.n	80103f8 <__sfp+0x1c>
 8010444:	2104      	movs	r1, #4
 8010446:	4638      	mov	r0, r7
 8010448:	f7ff ff62 	bl	8010310 <__sfmoreglue>
 801044c:	4604      	mov	r4, r0
 801044e:	6030      	str	r0, [r6, #0]
 8010450:	2800      	cmp	r0, #0
 8010452:	d1d5      	bne.n	8010400 <__sfp+0x24>
 8010454:	f7ff ff78 	bl	8010348 <__sfp_lock_release>
 8010458:	230c      	movs	r3, #12
 801045a:	603b      	str	r3, [r7, #0]
 801045c:	e7ee      	b.n	801043c <__sfp+0x60>
 801045e:	bf00      	nop
 8010460:	08012e7c 	.word	0x08012e7c
 8010464:	ffff0001 	.word	0xffff0001

08010468 <_fwalk_reent>:
 8010468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801046c:	4606      	mov	r6, r0
 801046e:	4688      	mov	r8, r1
 8010470:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010474:	2700      	movs	r7, #0
 8010476:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801047a:	f1b9 0901 	subs.w	r9, r9, #1
 801047e:	d505      	bpl.n	801048c <_fwalk_reent+0x24>
 8010480:	6824      	ldr	r4, [r4, #0]
 8010482:	2c00      	cmp	r4, #0
 8010484:	d1f7      	bne.n	8010476 <_fwalk_reent+0xe>
 8010486:	4638      	mov	r0, r7
 8010488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801048c:	89ab      	ldrh	r3, [r5, #12]
 801048e:	2b01      	cmp	r3, #1
 8010490:	d907      	bls.n	80104a2 <_fwalk_reent+0x3a>
 8010492:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010496:	3301      	adds	r3, #1
 8010498:	d003      	beq.n	80104a2 <_fwalk_reent+0x3a>
 801049a:	4629      	mov	r1, r5
 801049c:	4630      	mov	r0, r6
 801049e:	47c0      	blx	r8
 80104a0:	4307      	orrs	r7, r0
 80104a2:	3568      	adds	r5, #104	; 0x68
 80104a4:	e7e9      	b.n	801047a <_fwalk_reent+0x12>

080104a6 <__retarget_lock_init_recursive>:
 80104a6:	4770      	bx	lr

080104a8 <__retarget_lock_acquire_recursive>:
 80104a8:	4770      	bx	lr

080104aa <__retarget_lock_release_recursive>:
 80104aa:	4770      	bx	lr

080104ac <__swhatbuf_r>:
 80104ac:	b570      	push	{r4, r5, r6, lr}
 80104ae:	460e      	mov	r6, r1
 80104b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104b4:	2900      	cmp	r1, #0
 80104b6:	b096      	sub	sp, #88	; 0x58
 80104b8:	4614      	mov	r4, r2
 80104ba:	461d      	mov	r5, r3
 80104bc:	da08      	bge.n	80104d0 <__swhatbuf_r+0x24>
 80104be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80104c2:	2200      	movs	r2, #0
 80104c4:	602a      	str	r2, [r5, #0]
 80104c6:	061a      	lsls	r2, r3, #24
 80104c8:	d410      	bmi.n	80104ec <__swhatbuf_r+0x40>
 80104ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104ce:	e00e      	b.n	80104ee <__swhatbuf_r+0x42>
 80104d0:	466a      	mov	r2, sp
 80104d2:	f000 f903 	bl	80106dc <_fstat_r>
 80104d6:	2800      	cmp	r0, #0
 80104d8:	dbf1      	blt.n	80104be <__swhatbuf_r+0x12>
 80104da:	9a01      	ldr	r2, [sp, #4]
 80104dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80104e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80104e4:	425a      	negs	r2, r3
 80104e6:	415a      	adcs	r2, r3
 80104e8:	602a      	str	r2, [r5, #0]
 80104ea:	e7ee      	b.n	80104ca <__swhatbuf_r+0x1e>
 80104ec:	2340      	movs	r3, #64	; 0x40
 80104ee:	2000      	movs	r0, #0
 80104f0:	6023      	str	r3, [r4, #0]
 80104f2:	b016      	add	sp, #88	; 0x58
 80104f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080104f8 <__smakebuf_r>:
 80104f8:	898b      	ldrh	r3, [r1, #12]
 80104fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80104fc:	079d      	lsls	r5, r3, #30
 80104fe:	4606      	mov	r6, r0
 8010500:	460c      	mov	r4, r1
 8010502:	d507      	bpl.n	8010514 <__smakebuf_r+0x1c>
 8010504:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010508:	6023      	str	r3, [r4, #0]
 801050a:	6123      	str	r3, [r4, #16]
 801050c:	2301      	movs	r3, #1
 801050e:	6163      	str	r3, [r4, #20]
 8010510:	b002      	add	sp, #8
 8010512:	bd70      	pop	{r4, r5, r6, pc}
 8010514:	ab01      	add	r3, sp, #4
 8010516:	466a      	mov	r2, sp
 8010518:	f7ff ffc8 	bl	80104ac <__swhatbuf_r>
 801051c:	9900      	ldr	r1, [sp, #0]
 801051e:	4605      	mov	r5, r0
 8010520:	4630      	mov	r0, r6
 8010522:	f7ff f959 	bl	800f7d8 <_malloc_r>
 8010526:	b948      	cbnz	r0, 801053c <__smakebuf_r+0x44>
 8010528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801052c:	059a      	lsls	r2, r3, #22
 801052e:	d4ef      	bmi.n	8010510 <__smakebuf_r+0x18>
 8010530:	f023 0303 	bic.w	r3, r3, #3
 8010534:	f043 0302 	orr.w	r3, r3, #2
 8010538:	81a3      	strh	r3, [r4, #12]
 801053a:	e7e3      	b.n	8010504 <__smakebuf_r+0xc>
 801053c:	4b0d      	ldr	r3, [pc, #52]	; (8010574 <__smakebuf_r+0x7c>)
 801053e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010540:	89a3      	ldrh	r3, [r4, #12]
 8010542:	6020      	str	r0, [r4, #0]
 8010544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010548:	81a3      	strh	r3, [r4, #12]
 801054a:	9b00      	ldr	r3, [sp, #0]
 801054c:	6163      	str	r3, [r4, #20]
 801054e:	9b01      	ldr	r3, [sp, #4]
 8010550:	6120      	str	r0, [r4, #16]
 8010552:	b15b      	cbz	r3, 801056c <__smakebuf_r+0x74>
 8010554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010558:	4630      	mov	r0, r6
 801055a:	f000 f8d1 	bl	8010700 <_isatty_r>
 801055e:	b128      	cbz	r0, 801056c <__smakebuf_r+0x74>
 8010560:	89a3      	ldrh	r3, [r4, #12]
 8010562:	f023 0303 	bic.w	r3, r3, #3
 8010566:	f043 0301 	orr.w	r3, r3, #1
 801056a:	81a3      	strh	r3, [r4, #12]
 801056c:	89a0      	ldrh	r0, [r4, #12]
 801056e:	4305      	orrs	r5, r0
 8010570:	81a5      	strh	r5, [r4, #12]
 8010572:	e7cd      	b.n	8010510 <__smakebuf_r+0x18>
 8010574:	08010305 	.word	0x08010305

08010578 <_malloc_usable_size_r>:
 8010578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801057c:	1f18      	subs	r0, r3, #4
 801057e:	2b00      	cmp	r3, #0
 8010580:	bfbc      	itt	lt
 8010582:	580b      	ldrlt	r3, [r1, r0]
 8010584:	18c0      	addlt	r0, r0, r3
 8010586:	4770      	bx	lr

08010588 <_raise_r>:
 8010588:	291f      	cmp	r1, #31
 801058a:	b538      	push	{r3, r4, r5, lr}
 801058c:	4604      	mov	r4, r0
 801058e:	460d      	mov	r5, r1
 8010590:	d904      	bls.n	801059c <_raise_r+0x14>
 8010592:	2316      	movs	r3, #22
 8010594:	6003      	str	r3, [r0, #0]
 8010596:	f04f 30ff 	mov.w	r0, #4294967295
 801059a:	bd38      	pop	{r3, r4, r5, pc}
 801059c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801059e:	b112      	cbz	r2, 80105a6 <_raise_r+0x1e>
 80105a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80105a4:	b94b      	cbnz	r3, 80105ba <_raise_r+0x32>
 80105a6:	4620      	mov	r0, r4
 80105a8:	f000 f830 	bl	801060c <_getpid_r>
 80105ac:	462a      	mov	r2, r5
 80105ae:	4601      	mov	r1, r0
 80105b0:	4620      	mov	r0, r4
 80105b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105b6:	f000 b817 	b.w	80105e8 <_kill_r>
 80105ba:	2b01      	cmp	r3, #1
 80105bc:	d00a      	beq.n	80105d4 <_raise_r+0x4c>
 80105be:	1c59      	adds	r1, r3, #1
 80105c0:	d103      	bne.n	80105ca <_raise_r+0x42>
 80105c2:	2316      	movs	r3, #22
 80105c4:	6003      	str	r3, [r0, #0]
 80105c6:	2001      	movs	r0, #1
 80105c8:	e7e7      	b.n	801059a <_raise_r+0x12>
 80105ca:	2400      	movs	r4, #0
 80105cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80105d0:	4628      	mov	r0, r5
 80105d2:	4798      	blx	r3
 80105d4:	2000      	movs	r0, #0
 80105d6:	e7e0      	b.n	801059a <_raise_r+0x12>

080105d8 <raise>:
 80105d8:	4b02      	ldr	r3, [pc, #8]	; (80105e4 <raise+0xc>)
 80105da:	4601      	mov	r1, r0
 80105dc:	6818      	ldr	r0, [r3, #0]
 80105de:	f7ff bfd3 	b.w	8010588 <_raise_r>
 80105e2:	bf00      	nop
 80105e4:	2000023c 	.word	0x2000023c

080105e8 <_kill_r>:
 80105e8:	b538      	push	{r3, r4, r5, lr}
 80105ea:	4d07      	ldr	r5, [pc, #28]	; (8010608 <_kill_r+0x20>)
 80105ec:	2300      	movs	r3, #0
 80105ee:	4604      	mov	r4, r0
 80105f0:	4608      	mov	r0, r1
 80105f2:	4611      	mov	r1, r2
 80105f4:	602b      	str	r3, [r5, #0]
 80105f6:	f7f4 fcd9 	bl	8004fac <_kill>
 80105fa:	1c43      	adds	r3, r0, #1
 80105fc:	d102      	bne.n	8010604 <_kill_r+0x1c>
 80105fe:	682b      	ldr	r3, [r5, #0]
 8010600:	b103      	cbz	r3, 8010604 <_kill_r+0x1c>
 8010602:	6023      	str	r3, [r4, #0]
 8010604:	bd38      	pop	{r3, r4, r5, pc}
 8010606:	bf00      	nop
 8010608:	2000201c 	.word	0x2000201c

0801060c <_getpid_r>:
 801060c:	f7f4 bcc6 	b.w	8004f9c <_getpid>

08010610 <__sread>:
 8010610:	b510      	push	{r4, lr}
 8010612:	460c      	mov	r4, r1
 8010614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010618:	f000 f894 	bl	8010744 <_read_r>
 801061c:	2800      	cmp	r0, #0
 801061e:	bfab      	itete	ge
 8010620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010622:	89a3      	ldrhlt	r3, [r4, #12]
 8010624:	181b      	addge	r3, r3, r0
 8010626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801062a:	bfac      	ite	ge
 801062c:	6563      	strge	r3, [r4, #84]	; 0x54
 801062e:	81a3      	strhlt	r3, [r4, #12]
 8010630:	bd10      	pop	{r4, pc}

08010632 <__swrite>:
 8010632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010636:	461f      	mov	r7, r3
 8010638:	898b      	ldrh	r3, [r1, #12]
 801063a:	05db      	lsls	r3, r3, #23
 801063c:	4605      	mov	r5, r0
 801063e:	460c      	mov	r4, r1
 8010640:	4616      	mov	r6, r2
 8010642:	d505      	bpl.n	8010650 <__swrite+0x1e>
 8010644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010648:	2302      	movs	r3, #2
 801064a:	2200      	movs	r2, #0
 801064c:	f000 f868 	bl	8010720 <_lseek_r>
 8010650:	89a3      	ldrh	r3, [r4, #12]
 8010652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801065a:	81a3      	strh	r3, [r4, #12]
 801065c:	4632      	mov	r2, r6
 801065e:	463b      	mov	r3, r7
 8010660:	4628      	mov	r0, r5
 8010662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010666:	f000 b817 	b.w	8010698 <_write_r>

0801066a <__sseek>:
 801066a:	b510      	push	{r4, lr}
 801066c:	460c      	mov	r4, r1
 801066e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010672:	f000 f855 	bl	8010720 <_lseek_r>
 8010676:	1c43      	adds	r3, r0, #1
 8010678:	89a3      	ldrh	r3, [r4, #12]
 801067a:	bf15      	itete	ne
 801067c:	6560      	strne	r0, [r4, #84]	; 0x54
 801067e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010686:	81a3      	strheq	r3, [r4, #12]
 8010688:	bf18      	it	ne
 801068a:	81a3      	strhne	r3, [r4, #12]
 801068c:	bd10      	pop	{r4, pc}

0801068e <__sclose>:
 801068e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010692:	f000 b813 	b.w	80106bc <_close_r>
	...

08010698 <_write_r>:
 8010698:	b538      	push	{r3, r4, r5, lr}
 801069a:	4d07      	ldr	r5, [pc, #28]	; (80106b8 <_write_r+0x20>)
 801069c:	4604      	mov	r4, r0
 801069e:	4608      	mov	r0, r1
 80106a0:	4611      	mov	r1, r2
 80106a2:	2200      	movs	r2, #0
 80106a4:	602a      	str	r2, [r5, #0]
 80106a6:	461a      	mov	r2, r3
 80106a8:	f7f4 fcb7 	bl	800501a <_write>
 80106ac:	1c43      	adds	r3, r0, #1
 80106ae:	d102      	bne.n	80106b6 <_write_r+0x1e>
 80106b0:	682b      	ldr	r3, [r5, #0]
 80106b2:	b103      	cbz	r3, 80106b6 <_write_r+0x1e>
 80106b4:	6023      	str	r3, [r4, #0]
 80106b6:	bd38      	pop	{r3, r4, r5, pc}
 80106b8:	2000201c 	.word	0x2000201c

080106bc <_close_r>:
 80106bc:	b538      	push	{r3, r4, r5, lr}
 80106be:	4d06      	ldr	r5, [pc, #24]	; (80106d8 <_close_r+0x1c>)
 80106c0:	2300      	movs	r3, #0
 80106c2:	4604      	mov	r4, r0
 80106c4:	4608      	mov	r0, r1
 80106c6:	602b      	str	r3, [r5, #0]
 80106c8:	f7f4 fcc3 	bl	8005052 <_close>
 80106cc:	1c43      	adds	r3, r0, #1
 80106ce:	d102      	bne.n	80106d6 <_close_r+0x1a>
 80106d0:	682b      	ldr	r3, [r5, #0]
 80106d2:	b103      	cbz	r3, 80106d6 <_close_r+0x1a>
 80106d4:	6023      	str	r3, [r4, #0]
 80106d6:	bd38      	pop	{r3, r4, r5, pc}
 80106d8:	2000201c 	.word	0x2000201c

080106dc <_fstat_r>:
 80106dc:	b538      	push	{r3, r4, r5, lr}
 80106de:	4d07      	ldr	r5, [pc, #28]	; (80106fc <_fstat_r+0x20>)
 80106e0:	2300      	movs	r3, #0
 80106e2:	4604      	mov	r4, r0
 80106e4:	4608      	mov	r0, r1
 80106e6:	4611      	mov	r1, r2
 80106e8:	602b      	str	r3, [r5, #0]
 80106ea:	f7f4 fcbe 	bl	800506a <_fstat>
 80106ee:	1c43      	adds	r3, r0, #1
 80106f0:	d102      	bne.n	80106f8 <_fstat_r+0x1c>
 80106f2:	682b      	ldr	r3, [r5, #0]
 80106f4:	b103      	cbz	r3, 80106f8 <_fstat_r+0x1c>
 80106f6:	6023      	str	r3, [r4, #0]
 80106f8:	bd38      	pop	{r3, r4, r5, pc}
 80106fa:	bf00      	nop
 80106fc:	2000201c 	.word	0x2000201c

08010700 <_isatty_r>:
 8010700:	b538      	push	{r3, r4, r5, lr}
 8010702:	4d06      	ldr	r5, [pc, #24]	; (801071c <_isatty_r+0x1c>)
 8010704:	2300      	movs	r3, #0
 8010706:	4604      	mov	r4, r0
 8010708:	4608      	mov	r0, r1
 801070a:	602b      	str	r3, [r5, #0]
 801070c:	f7f4 fcbd 	bl	800508a <_isatty>
 8010710:	1c43      	adds	r3, r0, #1
 8010712:	d102      	bne.n	801071a <_isatty_r+0x1a>
 8010714:	682b      	ldr	r3, [r5, #0]
 8010716:	b103      	cbz	r3, 801071a <_isatty_r+0x1a>
 8010718:	6023      	str	r3, [r4, #0]
 801071a:	bd38      	pop	{r3, r4, r5, pc}
 801071c:	2000201c 	.word	0x2000201c

08010720 <_lseek_r>:
 8010720:	b538      	push	{r3, r4, r5, lr}
 8010722:	4d07      	ldr	r5, [pc, #28]	; (8010740 <_lseek_r+0x20>)
 8010724:	4604      	mov	r4, r0
 8010726:	4608      	mov	r0, r1
 8010728:	4611      	mov	r1, r2
 801072a:	2200      	movs	r2, #0
 801072c:	602a      	str	r2, [r5, #0]
 801072e:	461a      	mov	r2, r3
 8010730:	f7f4 fcb6 	bl	80050a0 <_lseek>
 8010734:	1c43      	adds	r3, r0, #1
 8010736:	d102      	bne.n	801073e <_lseek_r+0x1e>
 8010738:	682b      	ldr	r3, [r5, #0]
 801073a:	b103      	cbz	r3, 801073e <_lseek_r+0x1e>
 801073c:	6023      	str	r3, [r4, #0]
 801073e:	bd38      	pop	{r3, r4, r5, pc}
 8010740:	2000201c 	.word	0x2000201c

08010744 <_read_r>:
 8010744:	b538      	push	{r3, r4, r5, lr}
 8010746:	4d07      	ldr	r5, [pc, #28]	; (8010764 <_read_r+0x20>)
 8010748:	4604      	mov	r4, r0
 801074a:	4608      	mov	r0, r1
 801074c:	4611      	mov	r1, r2
 801074e:	2200      	movs	r2, #0
 8010750:	602a      	str	r2, [r5, #0]
 8010752:	461a      	mov	r2, r3
 8010754:	f7f4 fc44 	bl	8004fe0 <_read>
 8010758:	1c43      	adds	r3, r0, #1
 801075a:	d102      	bne.n	8010762 <_read_r+0x1e>
 801075c:	682b      	ldr	r3, [r5, #0]
 801075e:	b103      	cbz	r3, 8010762 <_read_r+0x1e>
 8010760:	6023      	str	r3, [r4, #0]
 8010762:	bd38      	pop	{r3, r4, r5, pc}
 8010764:	2000201c 	.word	0x2000201c

08010768 <atan>:
 8010768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801076c:	ec55 4b10 	vmov	r4, r5, d0
 8010770:	4bc3      	ldr	r3, [pc, #780]	; (8010a80 <atan+0x318>)
 8010772:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010776:	429e      	cmp	r6, r3
 8010778:	46ab      	mov	fp, r5
 801077a:	dd18      	ble.n	80107ae <atan+0x46>
 801077c:	4bc1      	ldr	r3, [pc, #772]	; (8010a84 <atan+0x31c>)
 801077e:	429e      	cmp	r6, r3
 8010780:	dc01      	bgt.n	8010786 <atan+0x1e>
 8010782:	d109      	bne.n	8010798 <atan+0x30>
 8010784:	b144      	cbz	r4, 8010798 <atan+0x30>
 8010786:	4622      	mov	r2, r4
 8010788:	462b      	mov	r3, r5
 801078a:	4620      	mov	r0, r4
 801078c:	4629      	mov	r1, r5
 801078e:	f7ef fd85 	bl	800029c <__adddf3>
 8010792:	4604      	mov	r4, r0
 8010794:	460d      	mov	r5, r1
 8010796:	e006      	b.n	80107a6 <atan+0x3e>
 8010798:	f1bb 0f00 	cmp.w	fp, #0
 801079c:	f300 8131 	bgt.w	8010a02 <atan+0x29a>
 80107a0:	a59b      	add	r5, pc, #620	; (adr r5, 8010a10 <atan+0x2a8>)
 80107a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80107a6:	ec45 4b10 	vmov	d0, r4, r5
 80107aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ae:	4bb6      	ldr	r3, [pc, #728]	; (8010a88 <atan+0x320>)
 80107b0:	429e      	cmp	r6, r3
 80107b2:	dc14      	bgt.n	80107de <atan+0x76>
 80107b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80107b8:	429e      	cmp	r6, r3
 80107ba:	dc0d      	bgt.n	80107d8 <atan+0x70>
 80107bc:	a396      	add	r3, pc, #600	; (adr r3, 8010a18 <atan+0x2b0>)
 80107be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c2:	ee10 0a10 	vmov	r0, s0
 80107c6:	4629      	mov	r1, r5
 80107c8:	f7ef fd68 	bl	800029c <__adddf3>
 80107cc:	4baf      	ldr	r3, [pc, #700]	; (8010a8c <atan+0x324>)
 80107ce:	2200      	movs	r2, #0
 80107d0:	f7f0 f9aa 	bl	8000b28 <__aeabi_dcmpgt>
 80107d4:	2800      	cmp	r0, #0
 80107d6:	d1e6      	bne.n	80107a6 <atan+0x3e>
 80107d8:	f04f 3aff 	mov.w	sl, #4294967295
 80107dc:	e02b      	b.n	8010836 <atan+0xce>
 80107de:	f000 f9b7 	bl	8010b50 <fabs>
 80107e2:	4bab      	ldr	r3, [pc, #684]	; (8010a90 <atan+0x328>)
 80107e4:	429e      	cmp	r6, r3
 80107e6:	ec55 4b10 	vmov	r4, r5, d0
 80107ea:	f300 80bf 	bgt.w	801096c <atan+0x204>
 80107ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80107f2:	429e      	cmp	r6, r3
 80107f4:	f300 80a0 	bgt.w	8010938 <atan+0x1d0>
 80107f8:	ee10 2a10 	vmov	r2, s0
 80107fc:	ee10 0a10 	vmov	r0, s0
 8010800:	462b      	mov	r3, r5
 8010802:	4629      	mov	r1, r5
 8010804:	f7ef fd4a 	bl	800029c <__adddf3>
 8010808:	4ba0      	ldr	r3, [pc, #640]	; (8010a8c <atan+0x324>)
 801080a:	2200      	movs	r2, #0
 801080c:	f7ef fd44 	bl	8000298 <__aeabi_dsub>
 8010810:	2200      	movs	r2, #0
 8010812:	4606      	mov	r6, r0
 8010814:	460f      	mov	r7, r1
 8010816:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801081a:	4620      	mov	r0, r4
 801081c:	4629      	mov	r1, r5
 801081e:	f7ef fd3d 	bl	800029c <__adddf3>
 8010822:	4602      	mov	r2, r0
 8010824:	460b      	mov	r3, r1
 8010826:	4630      	mov	r0, r6
 8010828:	4639      	mov	r1, r7
 801082a:	f7f0 f817 	bl	800085c <__aeabi_ddiv>
 801082e:	f04f 0a00 	mov.w	sl, #0
 8010832:	4604      	mov	r4, r0
 8010834:	460d      	mov	r5, r1
 8010836:	4622      	mov	r2, r4
 8010838:	462b      	mov	r3, r5
 801083a:	4620      	mov	r0, r4
 801083c:	4629      	mov	r1, r5
 801083e:	f7ef fee3 	bl	8000608 <__aeabi_dmul>
 8010842:	4602      	mov	r2, r0
 8010844:	460b      	mov	r3, r1
 8010846:	4680      	mov	r8, r0
 8010848:	4689      	mov	r9, r1
 801084a:	f7ef fedd 	bl	8000608 <__aeabi_dmul>
 801084e:	a374      	add	r3, pc, #464	; (adr r3, 8010a20 <atan+0x2b8>)
 8010850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010854:	4606      	mov	r6, r0
 8010856:	460f      	mov	r7, r1
 8010858:	f7ef fed6 	bl	8000608 <__aeabi_dmul>
 801085c:	a372      	add	r3, pc, #456	; (adr r3, 8010a28 <atan+0x2c0>)
 801085e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010862:	f7ef fd1b 	bl	800029c <__adddf3>
 8010866:	4632      	mov	r2, r6
 8010868:	463b      	mov	r3, r7
 801086a:	f7ef fecd 	bl	8000608 <__aeabi_dmul>
 801086e:	a370      	add	r3, pc, #448	; (adr r3, 8010a30 <atan+0x2c8>)
 8010870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010874:	f7ef fd12 	bl	800029c <__adddf3>
 8010878:	4632      	mov	r2, r6
 801087a:	463b      	mov	r3, r7
 801087c:	f7ef fec4 	bl	8000608 <__aeabi_dmul>
 8010880:	a36d      	add	r3, pc, #436	; (adr r3, 8010a38 <atan+0x2d0>)
 8010882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010886:	f7ef fd09 	bl	800029c <__adddf3>
 801088a:	4632      	mov	r2, r6
 801088c:	463b      	mov	r3, r7
 801088e:	f7ef febb 	bl	8000608 <__aeabi_dmul>
 8010892:	a36b      	add	r3, pc, #428	; (adr r3, 8010a40 <atan+0x2d8>)
 8010894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010898:	f7ef fd00 	bl	800029c <__adddf3>
 801089c:	4632      	mov	r2, r6
 801089e:	463b      	mov	r3, r7
 80108a0:	f7ef feb2 	bl	8000608 <__aeabi_dmul>
 80108a4:	a368      	add	r3, pc, #416	; (adr r3, 8010a48 <atan+0x2e0>)
 80108a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108aa:	f7ef fcf7 	bl	800029c <__adddf3>
 80108ae:	4642      	mov	r2, r8
 80108b0:	464b      	mov	r3, r9
 80108b2:	f7ef fea9 	bl	8000608 <__aeabi_dmul>
 80108b6:	a366      	add	r3, pc, #408	; (adr r3, 8010a50 <atan+0x2e8>)
 80108b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108bc:	4680      	mov	r8, r0
 80108be:	4689      	mov	r9, r1
 80108c0:	4630      	mov	r0, r6
 80108c2:	4639      	mov	r1, r7
 80108c4:	f7ef fea0 	bl	8000608 <__aeabi_dmul>
 80108c8:	a363      	add	r3, pc, #396	; (adr r3, 8010a58 <atan+0x2f0>)
 80108ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ce:	f7ef fce3 	bl	8000298 <__aeabi_dsub>
 80108d2:	4632      	mov	r2, r6
 80108d4:	463b      	mov	r3, r7
 80108d6:	f7ef fe97 	bl	8000608 <__aeabi_dmul>
 80108da:	a361      	add	r3, pc, #388	; (adr r3, 8010a60 <atan+0x2f8>)
 80108dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e0:	f7ef fcda 	bl	8000298 <__aeabi_dsub>
 80108e4:	4632      	mov	r2, r6
 80108e6:	463b      	mov	r3, r7
 80108e8:	f7ef fe8e 	bl	8000608 <__aeabi_dmul>
 80108ec:	a35e      	add	r3, pc, #376	; (adr r3, 8010a68 <atan+0x300>)
 80108ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f2:	f7ef fcd1 	bl	8000298 <__aeabi_dsub>
 80108f6:	4632      	mov	r2, r6
 80108f8:	463b      	mov	r3, r7
 80108fa:	f7ef fe85 	bl	8000608 <__aeabi_dmul>
 80108fe:	a35c      	add	r3, pc, #368	; (adr r3, 8010a70 <atan+0x308>)
 8010900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010904:	f7ef fcc8 	bl	8000298 <__aeabi_dsub>
 8010908:	4632      	mov	r2, r6
 801090a:	463b      	mov	r3, r7
 801090c:	f7ef fe7c 	bl	8000608 <__aeabi_dmul>
 8010910:	4602      	mov	r2, r0
 8010912:	460b      	mov	r3, r1
 8010914:	4640      	mov	r0, r8
 8010916:	4649      	mov	r1, r9
 8010918:	f7ef fcc0 	bl	800029c <__adddf3>
 801091c:	4622      	mov	r2, r4
 801091e:	462b      	mov	r3, r5
 8010920:	f7ef fe72 	bl	8000608 <__aeabi_dmul>
 8010924:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010928:	4602      	mov	r2, r0
 801092a:	460b      	mov	r3, r1
 801092c:	d14b      	bne.n	80109c6 <atan+0x25e>
 801092e:	4620      	mov	r0, r4
 8010930:	4629      	mov	r1, r5
 8010932:	f7ef fcb1 	bl	8000298 <__aeabi_dsub>
 8010936:	e72c      	b.n	8010792 <atan+0x2a>
 8010938:	ee10 0a10 	vmov	r0, s0
 801093c:	4b53      	ldr	r3, [pc, #332]	; (8010a8c <atan+0x324>)
 801093e:	2200      	movs	r2, #0
 8010940:	4629      	mov	r1, r5
 8010942:	f7ef fca9 	bl	8000298 <__aeabi_dsub>
 8010946:	4b51      	ldr	r3, [pc, #324]	; (8010a8c <atan+0x324>)
 8010948:	4606      	mov	r6, r0
 801094a:	460f      	mov	r7, r1
 801094c:	2200      	movs	r2, #0
 801094e:	4620      	mov	r0, r4
 8010950:	4629      	mov	r1, r5
 8010952:	f7ef fca3 	bl	800029c <__adddf3>
 8010956:	4602      	mov	r2, r0
 8010958:	460b      	mov	r3, r1
 801095a:	4630      	mov	r0, r6
 801095c:	4639      	mov	r1, r7
 801095e:	f7ef ff7d 	bl	800085c <__aeabi_ddiv>
 8010962:	f04f 0a01 	mov.w	sl, #1
 8010966:	4604      	mov	r4, r0
 8010968:	460d      	mov	r5, r1
 801096a:	e764      	b.n	8010836 <atan+0xce>
 801096c:	4b49      	ldr	r3, [pc, #292]	; (8010a94 <atan+0x32c>)
 801096e:	429e      	cmp	r6, r3
 8010970:	da1d      	bge.n	80109ae <atan+0x246>
 8010972:	ee10 0a10 	vmov	r0, s0
 8010976:	4b48      	ldr	r3, [pc, #288]	; (8010a98 <atan+0x330>)
 8010978:	2200      	movs	r2, #0
 801097a:	4629      	mov	r1, r5
 801097c:	f7ef fc8c 	bl	8000298 <__aeabi_dsub>
 8010980:	4b45      	ldr	r3, [pc, #276]	; (8010a98 <atan+0x330>)
 8010982:	4606      	mov	r6, r0
 8010984:	460f      	mov	r7, r1
 8010986:	2200      	movs	r2, #0
 8010988:	4620      	mov	r0, r4
 801098a:	4629      	mov	r1, r5
 801098c:	f7ef fe3c 	bl	8000608 <__aeabi_dmul>
 8010990:	4b3e      	ldr	r3, [pc, #248]	; (8010a8c <atan+0x324>)
 8010992:	2200      	movs	r2, #0
 8010994:	f7ef fc82 	bl	800029c <__adddf3>
 8010998:	4602      	mov	r2, r0
 801099a:	460b      	mov	r3, r1
 801099c:	4630      	mov	r0, r6
 801099e:	4639      	mov	r1, r7
 80109a0:	f7ef ff5c 	bl	800085c <__aeabi_ddiv>
 80109a4:	f04f 0a02 	mov.w	sl, #2
 80109a8:	4604      	mov	r4, r0
 80109aa:	460d      	mov	r5, r1
 80109ac:	e743      	b.n	8010836 <atan+0xce>
 80109ae:	462b      	mov	r3, r5
 80109b0:	ee10 2a10 	vmov	r2, s0
 80109b4:	4939      	ldr	r1, [pc, #228]	; (8010a9c <atan+0x334>)
 80109b6:	2000      	movs	r0, #0
 80109b8:	f7ef ff50 	bl	800085c <__aeabi_ddiv>
 80109bc:	f04f 0a03 	mov.w	sl, #3
 80109c0:	4604      	mov	r4, r0
 80109c2:	460d      	mov	r5, r1
 80109c4:	e737      	b.n	8010836 <atan+0xce>
 80109c6:	4b36      	ldr	r3, [pc, #216]	; (8010aa0 <atan+0x338>)
 80109c8:	4e36      	ldr	r6, [pc, #216]	; (8010aa4 <atan+0x33c>)
 80109ca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80109ce:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80109d2:	e9da 2300 	ldrd	r2, r3, [sl]
 80109d6:	f7ef fc5f 	bl	8000298 <__aeabi_dsub>
 80109da:	4622      	mov	r2, r4
 80109dc:	462b      	mov	r3, r5
 80109de:	f7ef fc5b 	bl	8000298 <__aeabi_dsub>
 80109e2:	4602      	mov	r2, r0
 80109e4:	460b      	mov	r3, r1
 80109e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80109ea:	f7ef fc55 	bl	8000298 <__aeabi_dsub>
 80109ee:	f1bb 0f00 	cmp.w	fp, #0
 80109f2:	4604      	mov	r4, r0
 80109f4:	460d      	mov	r5, r1
 80109f6:	f6bf aed6 	bge.w	80107a6 <atan+0x3e>
 80109fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80109fe:	461d      	mov	r5, r3
 8010a00:	e6d1      	b.n	80107a6 <atan+0x3e>
 8010a02:	a51d      	add	r5, pc, #116	; (adr r5, 8010a78 <atan+0x310>)
 8010a04:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010a08:	e6cd      	b.n	80107a6 <atan+0x3e>
 8010a0a:	bf00      	nop
 8010a0c:	f3af 8000 	nop.w
 8010a10:	54442d18 	.word	0x54442d18
 8010a14:	bff921fb 	.word	0xbff921fb
 8010a18:	8800759c 	.word	0x8800759c
 8010a1c:	7e37e43c 	.word	0x7e37e43c
 8010a20:	e322da11 	.word	0xe322da11
 8010a24:	3f90ad3a 	.word	0x3f90ad3a
 8010a28:	24760deb 	.word	0x24760deb
 8010a2c:	3fa97b4b 	.word	0x3fa97b4b
 8010a30:	a0d03d51 	.word	0xa0d03d51
 8010a34:	3fb10d66 	.word	0x3fb10d66
 8010a38:	c54c206e 	.word	0xc54c206e
 8010a3c:	3fb745cd 	.word	0x3fb745cd
 8010a40:	920083ff 	.word	0x920083ff
 8010a44:	3fc24924 	.word	0x3fc24924
 8010a48:	5555550d 	.word	0x5555550d
 8010a4c:	3fd55555 	.word	0x3fd55555
 8010a50:	2c6a6c2f 	.word	0x2c6a6c2f
 8010a54:	bfa2b444 	.word	0xbfa2b444
 8010a58:	52defd9a 	.word	0x52defd9a
 8010a5c:	3fadde2d 	.word	0x3fadde2d
 8010a60:	af749a6d 	.word	0xaf749a6d
 8010a64:	3fb3b0f2 	.word	0x3fb3b0f2
 8010a68:	fe231671 	.word	0xfe231671
 8010a6c:	3fbc71c6 	.word	0x3fbc71c6
 8010a70:	9998ebc4 	.word	0x9998ebc4
 8010a74:	3fc99999 	.word	0x3fc99999
 8010a78:	54442d18 	.word	0x54442d18
 8010a7c:	3ff921fb 	.word	0x3ff921fb
 8010a80:	440fffff 	.word	0x440fffff
 8010a84:	7ff00000 	.word	0x7ff00000
 8010a88:	3fdbffff 	.word	0x3fdbffff
 8010a8c:	3ff00000 	.word	0x3ff00000
 8010a90:	3ff2ffff 	.word	0x3ff2ffff
 8010a94:	40038000 	.word	0x40038000
 8010a98:	3ff80000 	.word	0x3ff80000
 8010a9c:	bff00000 	.word	0xbff00000
 8010aa0:	08013348 	.word	0x08013348
 8010aa4:	08013328 	.word	0x08013328

08010aa8 <cos>:
 8010aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010aaa:	ec53 2b10 	vmov	r2, r3, d0
 8010aae:	4826      	ldr	r0, [pc, #152]	; (8010b48 <cos+0xa0>)
 8010ab0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010ab4:	4281      	cmp	r1, r0
 8010ab6:	dc06      	bgt.n	8010ac6 <cos+0x1e>
 8010ab8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010b40 <cos+0x98>
 8010abc:	b005      	add	sp, #20
 8010abe:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ac2:	f000 bded 	b.w	80116a0 <__kernel_cos>
 8010ac6:	4821      	ldr	r0, [pc, #132]	; (8010b4c <cos+0xa4>)
 8010ac8:	4281      	cmp	r1, r0
 8010aca:	dd09      	ble.n	8010ae0 <cos+0x38>
 8010acc:	ee10 0a10 	vmov	r0, s0
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	f7ef fbe1 	bl	8000298 <__aeabi_dsub>
 8010ad6:	ec41 0b10 	vmov	d0, r0, r1
 8010ada:	b005      	add	sp, #20
 8010adc:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ae0:	4668      	mov	r0, sp
 8010ae2:	f000 f961 	bl	8010da8 <__ieee754_rem_pio2>
 8010ae6:	f000 0003 	and.w	r0, r0, #3
 8010aea:	2801      	cmp	r0, #1
 8010aec:	d00b      	beq.n	8010b06 <cos+0x5e>
 8010aee:	2802      	cmp	r0, #2
 8010af0:	d016      	beq.n	8010b20 <cos+0x78>
 8010af2:	b9e0      	cbnz	r0, 8010b2e <cos+0x86>
 8010af4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010af8:	ed9d 0b00 	vldr	d0, [sp]
 8010afc:	f000 fdd0 	bl	80116a0 <__kernel_cos>
 8010b00:	ec51 0b10 	vmov	r0, r1, d0
 8010b04:	e7e7      	b.n	8010ad6 <cos+0x2e>
 8010b06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b0a:	ed9d 0b00 	vldr	d0, [sp]
 8010b0e:	f001 f9df 	bl	8011ed0 <__kernel_sin>
 8010b12:	ec53 2b10 	vmov	r2, r3, d0
 8010b16:	ee10 0a10 	vmov	r0, s0
 8010b1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010b1e:	e7da      	b.n	8010ad6 <cos+0x2e>
 8010b20:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b24:	ed9d 0b00 	vldr	d0, [sp]
 8010b28:	f000 fdba 	bl	80116a0 <__kernel_cos>
 8010b2c:	e7f1      	b.n	8010b12 <cos+0x6a>
 8010b2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b32:	ed9d 0b00 	vldr	d0, [sp]
 8010b36:	2001      	movs	r0, #1
 8010b38:	f001 f9ca 	bl	8011ed0 <__kernel_sin>
 8010b3c:	e7e0      	b.n	8010b00 <cos+0x58>
 8010b3e:	bf00      	nop
	...
 8010b48:	3fe921fb 	.word	0x3fe921fb
 8010b4c:	7fefffff 	.word	0x7fefffff

08010b50 <fabs>:
 8010b50:	ec51 0b10 	vmov	r0, r1, d0
 8010b54:	ee10 2a10 	vmov	r2, s0
 8010b58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010b5c:	ec43 2b10 	vmov	d0, r2, r3
 8010b60:	4770      	bx	lr
 8010b62:	0000      	movs	r0, r0
 8010b64:	0000      	movs	r0, r0
	...

08010b68 <sin>:
 8010b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b6a:	ec53 2b10 	vmov	r2, r3, d0
 8010b6e:	4828      	ldr	r0, [pc, #160]	; (8010c10 <sin+0xa8>)
 8010b70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010b74:	4281      	cmp	r1, r0
 8010b76:	dc07      	bgt.n	8010b88 <sin+0x20>
 8010b78:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010c08 <sin+0xa0>
 8010b7c:	2000      	movs	r0, #0
 8010b7e:	b005      	add	sp, #20
 8010b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b84:	f001 b9a4 	b.w	8011ed0 <__kernel_sin>
 8010b88:	4822      	ldr	r0, [pc, #136]	; (8010c14 <sin+0xac>)
 8010b8a:	4281      	cmp	r1, r0
 8010b8c:	dd09      	ble.n	8010ba2 <sin+0x3a>
 8010b8e:	ee10 0a10 	vmov	r0, s0
 8010b92:	4619      	mov	r1, r3
 8010b94:	f7ef fb80 	bl	8000298 <__aeabi_dsub>
 8010b98:	ec41 0b10 	vmov	d0, r0, r1
 8010b9c:	b005      	add	sp, #20
 8010b9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ba2:	4668      	mov	r0, sp
 8010ba4:	f000 f900 	bl	8010da8 <__ieee754_rem_pio2>
 8010ba8:	f000 0003 	and.w	r0, r0, #3
 8010bac:	2801      	cmp	r0, #1
 8010bae:	d00c      	beq.n	8010bca <sin+0x62>
 8010bb0:	2802      	cmp	r0, #2
 8010bb2:	d011      	beq.n	8010bd8 <sin+0x70>
 8010bb4:	b9f0      	cbnz	r0, 8010bf4 <sin+0x8c>
 8010bb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010bba:	ed9d 0b00 	vldr	d0, [sp]
 8010bbe:	2001      	movs	r0, #1
 8010bc0:	f001 f986 	bl	8011ed0 <__kernel_sin>
 8010bc4:	ec51 0b10 	vmov	r0, r1, d0
 8010bc8:	e7e6      	b.n	8010b98 <sin+0x30>
 8010bca:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010bce:	ed9d 0b00 	vldr	d0, [sp]
 8010bd2:	f000 fd65 	bl	80116a0 <__kernel_cos>
 8010bd6:	e7f5      	b.n	8010bc4 <sin+0x5c>
 8010bd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010bdc:	ed9d 0b00 	vldr	d0, [sp]
 8010be0:	2001      	movs	r0, #1
 8010be2:	f001 f975 	bl	8011ed0 <__kernel_sin>
 8010be6:	ec53 2b10 	vmov	r2, r3, d0
 8010bea:	ee10 0a10 	vmov	r0, s0
 8010bee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010bf2:	e7d1      	b.n	8010b98 <sin+0x30>
 8010bf4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010bf8:	ed9d 0b00 	vldr	d0, [sp]
 8010bfc:	f000 fd50 	bl	80116a0 <__kernel_cos>
 8010c00:	e7f1      	b.n	8010be6 <sin+0x7e>
 8010c02:	bf00      	nop
 8010c04:	f3af 8000 	nop.w
	...
 8010c10:	3fe921fb 	.word	0x3fe921fb
 8010c14:	7fefffff 	.word	0x7fefffff

08010c18 <tan>:
 8010c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c1a:	ec53 2b10 	vmov	r2, r3, d0
 8010c1e:	4816      	ldr	r0, [pc, #88]	; (8010c78 <tan+0x60>)
 8010c20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010c24:	4281      	cmp	r1, r0
 8010c26:	dc07      	bgt.n	8010c38 <tan+0x20>
 8010c28:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8010c70 <tan+0x58>
 8010c2c:	2001      	movs	r0, #1
 8010c2e:	b005      	add	sp, #20
 8010c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c34:	f001 ba0c 	b.w	8012050 <__kernel_tan>
 8010c38:	4810      	ldr	r0, [pc, #64]	; (8010c7c <tan+0x64>)
 8010c3a:	4281      	cmp	r1, r0
 8010c3c:	dd09      	ble.n	8010c52 <tan+0x3a>
 8010c3e:	ee10 0a10 	vmov	r0, s0
 8010c42:	4619      	mov	r1, r3
 8010c44:	f7ef fb28 	bl	8000298 <__aeabi_dsub>
 8010c48:	ec41 0b10 	vmov	d0, r0, r1
 8010c4c:	b005      	add	sp, #20
 8010c4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c52:	4668      	mov	r0, sp
 8010c54:	f000 f8a8 	bl	8010da8 <__ieee754_rem_pio2>
 8010c58:	0040      	lsls	r0, r0, #1
 8010c5a:	f000 0002 	and.w	r0, r0, #2
 8010c5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010c62:	ed9d 0b00 	vldr	d0, [sp]
 8010c66:	f1c0 0001 	rsb	r0, r0, #1
 8010c6a:	f001 f9f1 	bl	8012050 <__kernel_tan>
 8010c6e:	e7ed      	b.n	8010c4c <tan+0x34>
	...
 8010c78:	3fe921fb 	.word	0x3fe921fb
 8010c7c:	7fefffff 	.word	0x7fefffff

08010c80 <sinf>:
 8010c80:	ee10 3a10 	vmov	r3, s0
 8010c84:	b507      	push	{r0, r1, r2, lr}
 8010c86:	4a1f      	ldr	r2, [pc, #124]	; (8010d04 <sinf+0x84>)
 8010c88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	dc07      	bgt.n	8010ca0 <sinf+0x20>
 8010c90:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8010d08 <sinf+0x88>
 8010c94:	2000      	movs	r0, #0
 8010c96:	b003      	add	sp, #12
 8010c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c9c:	f001 beb8 	b.w	8012a10 <__kernel_sinf>
 8010ca0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010ca4:	db04      	blt.n	8010cb0 <sinf+0x30>
 8010ca6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010caa:	b003      	add	sp, #12
 8010cac:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cb0:	4668      	mov	r0, sp
 8010cb2:	f000 fbb9 	bl	8011428 <__ieee754_rem_pio2f>
 8010cb6:	f000 0003 	and.w	r0, r0, #3
 8010cba:	2801      	cmp	r0, #1
 8010cbc:	d00a      	beq.n	8010cd4 <sinf+0x54>
 8010cbe:	2802      	cmp	r0, #2
 8010cc0:	d00f      	beq.n	8010ce2 <sinf+0x62>
 8010cc2:	b9c0      	cbnz	r0, 8010cf6 <sinf+0x76>
 8010cc4:	eddd 0a01 	vldr	s1, [sp, #4]
 8010cc8:	ed9d 0a00 	vldr	s0, [sp]
 8010ccc:	2001      	movs	r0, #1
 8010cce:	f001 fe9f 	bl	8012a10 <__kernel_sinf>
 8010cd2:	e7ea      	b.n	8010caa <sinf+0x2a>
 8010cd4:	eddd 0a01 	vldr	s1, [sp, #4]
 8010cd8:	ed9d 0a00 	vldr	s0, [sp]
 8010cdc:	f001 fbc2 	bl	8012464 <__kernel_cosf>
 8010ce0:	e7e3      	b.n	8010caa <sinf+0x2a>
 8010ce2:	eddd 0a01 	vldr	s1, [sp, #4]
 8010ce6:	ed9d 0a00 	vldr	s0, [sp]
 8010cea:	2001      	movs	r0, #1
 8010cec:	f001 fe90 	bl	8012a10 <__kernel_sinf>
 8010cf0:	eeb1 0a40 	vneg.f32	s0, s0
 8010cf4:	e7d9      	b.n	8010caa <sinf+0x2a>
 8010cf6:	eddd 0a01 	vldr	s1, [sp, #4]
 8010cfa:	ed9d 0a00 	vldr	s0, [sp]
 8010cfe:	f001 fbb1 	bl	8012464 <__kernel_cosf>
 8010d02:	e7f5      	b.n	8010cf0 <sinf+0x70>
 8010d04:	3f490fd8 	.word	0x3f490fd8
 8010d08:	00000000 	.word	0x00000000

08010d0c <sqrt>:
 8010d0c:	b538      	push	{r3, r4, r5, lr}
 8010d0e:	ed2d 8b02 	vpush	{d8}
 8010d12:	ec55 4b10 	vmov	r4, r5, d0
 8010d16:	f000 fa53 	bl	80111c0 <__ieee754_sqrt>
 8010d1a:	4622      	mov	r2, r4
 8010d1c:	462b      	mov	r3, r5
 8010d1e:	4620      	mov	r0, r4
 8010d20:	4629      	mov	r1, r5
 8010d22:	eeb0 8a40 	vmov.f32	s16, s0
 8010d26:	eef0 8a60 	vmov.f32	s17, s1
 8010d2a:	f7ef ff07 	bl	8000b3c <__aeabi_dcmpun>
 8010d2e:	b990      	cbnz	r0, 8010d56 <sqrt+0x4a>
 8010d30:	2200      	movs	r2, #0
 8010d32:	2300      	movs	r3, #0
 8010d34:	4620      	mov	r0, r4
 8010d36:	4629      	mov	r1, r5
 8010d38:	f7ef fed8 	bl	8000aec <__aeabi_dcmplt>
 8010d3c:	b158      	cbz	r0, 8010d56 <sqrt+0x4a>
 8010d3e:	f7fb f873 	bl	800be28 <__errno>
 8010d42:	2321      	movs	r3, #33	; 0x21
 8010d44:	6003      	str	r3, [r0, #0]
 8010d46:	2200      	movs	r2, #0
 8010d48:	2300      	movs	r3, #0
 8010d4a:	4610      	mov	r0, r2
 8010d4c:	4619      	mov	r1, r3
 8010d4e:	f7ef fd85 	bl	800085c <__aeabi_ddiv>
 8010d52:	ec41 0b18 	vmov	d8, r0, r1
 8010d56:	eeb0 0a48 	vmov.f32	s0, s16
 8010d5a:	eef0 0a68 	vmov.f32	s1, s17
 8010d5e:	ecbd 8b02 	vpop	{d8}
 8010d62:	bd38      	pop	{r3, r4, r5, pc}

08010d64 <fmodf>:
 8010d64:	b508      	push	{r3, lr}
 8010d66:	ed2d 8b02 	vpush	{d8}
 8010d6a:	eef0 8a40 	vmov.f32	s17, s0
 8010d6e:	eeb0 8a60 	vmov.f32	s16, s1
 8010d72:	f000 fad7 	bl	8011324 <__ieee754_fmodf>
 8010d76:	eef4 8a48 	vcmp.f32	s17, s16
 8010d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d7e:	d60c      	bvs.n	8010d9a <fmodf+0x36>
 8010d80:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010da0 <fmodf+0x3c>
 8010d84:	eeb4 8a68 	vcmp.f32	s16, s17
 8010d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d8c:	d105      	bne.n	8010d9a <fmodf+0x36>
 8010d8e:	f7fb f84b 	bl	800be28 <__errno>
 8010d92:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010d96:	2321      	movs	r3, #33	; 0x21
 8010d98:	6003      	str	r3, [r0, #0]
 8010d9a:	ecbd 8b02 	vpop	{d8}
 8010d9e:	bd08      	pop	{r3, pc}
	...

08010da8 <__ieee754_rem_pio2>:
 8010da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dac:	ed2d 8b02 	vpush	{d8}
 8010db0:	ec55 4b10 	vmov	r4, r5, d0
 8010db4:	4bca      	ldr	r3, [pc, #808]	; (80110e0 <__ieee754_rem_pio2+0x338>)
 8010db6:	b08b      	sub	sp, #44	; 0x2c
 8010db8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010dbc:	4598      	cmp	r8, r3
 8010dbe:	4682      	mov	sl, r0
 8010dc0:	9502      	str	r5, [sp, #8]
 8010dc2:	dc08      	bgt.n	8010dd6 <__ieee754_rem_pio2+0x2e>
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	ed80 0b00 	vstr	d0, [r0]
 8010dcc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010dd0:	f04f 0b00 	mov.w	fp, #0
 8010dd4:	e028      	b.n	8010e28 <__ieee754_rem_pio2+0x80>
 8010dd6:	4bc3      	ldr	r3, [pc, #780]	; (80110e4 <__ieee754_rem_pio2+0x33c>)
 8010dd8:	4598      	cmp	r8, r3
 8010dda:	dc78      	bgt.n	8010ece <__ieee754_rem_pio2+0x126>
 8010ddc:	9b02      	ldr	r3, [sp, #8]
 8010dde:	4ec2      	ldr	r6, [pc, #776]	; (80110e8 <__ieee754_rem_pio2+0x340>)
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	ee10 0a10 	vmov	r0, s0
 8010de6:	a3b0      	add	r3, pc, #704	; (adr r3, 80110a8 <__ieee754_rem_pio2+0x300>)
 8010de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dec:	4629      	mov	r1, r5
 8010dee:	dd39      	ble.n	8010e64 <__ieee754_rem_pio2+0xbc>
 8010df0:	f7ef fa52 	bl	8000298 <__aeabi_dsub>
 8010df4:	45b0      	cmp	r8, r6
 8010df6:	4604      	mov	r4, r0
 8010df8:	460d      	mov	r5, r1
 8010dfa:	d01b      	beq.n	8010e34 <__ieee754_rem_pio2+0x8c>
 8010dfc:	a3ac      	add	r3, pc, #688	; (adr r3, 80110b0 <__ieee754_rem_pio2+0x308>)
 8010dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e02:	f7ef fa49 	bl	8000298 <__aeabi_dsub>
 8010e06:	4602      	mov	r2, r0
 8010e08:	460b      	mov	r3, r1
 8010e0a:	e9ca 2300 	strd	r2, r3, [sl]
 8010e0e:	4620      	mov	r0, r4
 8010e10:	4629      	mov	r1, r5
 8010e12:	f7ef fa41 	bl	8000298 <__aeabi_dsub>
 8010e16:	a3a6      	add	r3, pc, #664	; (adr r3, 80110b0 <__ieee754_rem_pio2+0x308>)
 8010e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1c:	f7ef fa3c 	bl	8000298 <__aeabi_dsub>
 8010e20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010e24:	f04f 0b01 	mov.w	fp, #1
 8010e28:	4658      	mov	r0, fp
 8010e2a:	b00b      	add	sp, #44	; 0x2c
 8010e2c:	ecbd 8b02 	vpop	{d8}
 8010e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e34:	a3a0      	add	r3, pc, #640	; (adr r3, 80110b8 <__ieee754_rem_pio2+0x310>)
 8010e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e3a:	f7ef fa2d 	bl	8000298 <__aeabi_dsub>
 8010e3e:	a3a0      	add	r3, pc, #640	; (adr r3, 80110c0 <__ieee754_rem_pio2+0x318>)
 8010e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e44:	4604      	mov	r4, r0
 8010e46:	460d      	mov	r5, r1
 8010e48:	f7ef fa26 	bl	8000298 <__aeabi_dsub>
 8010e4c:	4602      	mov	r2, r0
 8010e4e:	460b      	mov	r3, r1
 8010e50:	e9ca 2300 	strd	r2, r3, [sl]
 8010e54:	4620      	mov	r0, r4
 8010e56:	4629      	mov	r1, r5
 8010e58:	f7ef fa1e 	bl	8000298 <__aeabi_dsub>
 8010e5c:	a398      	add	r3, pc, #608	; (adr r3, 80110c0 <__ieee754_rem_pio2+0x318>)
 8010e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e62:	e7db      	b.n	8010e1c <__ieee754_rem_pio2+0x74>
 8010e64:	f7ef fa1a 	bl	800029c <__adddf3>
 8010e68:	45b0      	cmp	r8, r6
 8010e6a:	4604      	mov	r4, r0
 8010e6c:	460d      	mov	r5, r1
 8010e6e:	d016      	beq.n	8010e9e <__ieee754_rem_pio2+0xf6>
 8010e70:	a38f      	add	r3, pc, #572	; (adr r3, 80110b0 <__ieee754_rem_pio2+0x308>)
 8010e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e76:	f7ef fa11 	bl	800029c <__adddf3>
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	e9ca 2300 	strd	r2, r3, [sl]
 8010e82:	4620      	mov	r0, r4
 8010e84:	4629      	mov	r1, r5
 8010e86:	f7ef fa07 	bl	8000298 <__aeabi_dsub>
 8010e8a:	a389      	add	r3, pc, #548	; (adr r3, 80110b0 <__ieee754_rem_pio2+0x308>)
 8010e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e90:	f7ef fa04 	bl	800029c <__adddf3>
 8010e94:	f04f 3bff 	mov.w	fp, #4294967295
 8010e98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010e9c:	e7c4      	b.n	8010e28 <__ieee754_rem_pio2+0x80>
 8010e9e:	a386      	add	r3, pc, #536	; (adr r3, 80110b8 <__ieee754_rem_pio2+0x310>)
 8010ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea4:	f7ef f9fa 	bl	800029c <__adddf3>
 8010ea8:	a385      	add	r3, pc, #532	; (adr r3, 80110c0 <__ieee754_rem_pio2+0x318>)
 8010eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eae:	4604      	mov	r4, r0
 8010eb0:	460d      	mov	r5, r1
 8010eb2:	f7ef f9f3 	bl	800029c <__adddf3>
 8010eb6:	4602      	mov	r2, r0
 8010eb8:	460b      	mov	r3, r1
 8010eba:	e9ca 2300 	strd	r2, r3, [sl]
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	4629      	mov	r1, r5
 8010ec2:	f7ef f9e9 	bl	8000298 <__aeabi_dsub>
 8010ec6:	a37e      	add	r3, pc, #504	; (adr r3, 80110c0 <__ieee754_rem_pio2+0x318>)
 8010ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ecc:	e7e0      	b.n	8010e90 <__ieee754_rem_pio2+0xe8>
 8010ece:	4b87      	ldr	r3, [pc, #540]	; (80110ec <__ieee754_rem_pio2+0x344>)
 8010ed0:	4598      	cmp	r8, r3
 8010ed2:	f300 80d9 	bgt.w	8011088 <__ieee754_rem_pio2+0x2e0>
 8010ed6:	f7ff fe3b 	bl	8010b50 <fabs>
 8010eda:	ec55 4b10 	vmov	r4, r5, d0
 8010ede:	ee10 0a10 	vmov	r0, s0
 8010ee2:	a379      	add	r3, pc, #484	; (adr r3, 80110c8 <__ieee754_rem_pio2+0x320>)
 8010ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee8:	4629      	mov	r1, r5
 8010eea:	f7ef fb8d 	bl	8000608 <__aeabi_dmul>
 8010eee:	4b80      	ldr	r3, [pc, #512]	; (80110f0 <__ieee754_rem_pio2+0x348>)
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	f7ef f9d3 	bl	800029c <__adddf3>
 8010ef6:	f7ef fe37 	bl	8000b68 <__aeabi_d2iz>
 8010efa:	4683      	mov	fp, r0
 8010efc:	f7ef fb1a 	bl	8000534 <__aeabi_i2d>
 8010f00:	4602      	mov	r2, r0
 8010f02:	460b      	mov	r3, r1
 8010f04:	ec43 2b18 	vmov	d8, r2, r3
 8010f08:	a367      	add	r3, pc, #412	; (adr r3, 80110a8 <__ieee754_rem_pio2+0x300>)
 8010f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f0e:	f7ef fb7b 	bl	8000608 <__aeabi_dmul>
 8010f12:	4602      	mov	r2, r0
 8010f14:	460b      	mov	r3, r1
 8010f16:	4620      	mov	r0, r4
 8010f18:	4629      	mov	r1, r5
 8010f1a:	f7ef f9bd 	bl	8000298 <__aeabi_dsub>
 8010f1e:	a364      	add	r3, pc, #400	; (adr r3, 80110b0 <__ieee754_rem_pio2+0x308>)
 8010f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f24:	4606      	mov	r6, r0
 8010f26:	460f      	mov	r7, r1
 8010f28:	ec51 0b18 	vmov	r0, r1, d8
 8010f2c:	f7ef fb6c 	bl	8000608 <__aeabi_dmul>
 8010f30:	f1bb 0f1f 	cmp.w	fp, #31
 8010f34:	4604      	mov	r4, r0
 8010f36:	460d      	mov	r5, r1
 8010f38:	dc0d      	bgt.n	8010f56 <__ieee754_rem_pio2+0x1ae>
 8010f3a:	4b6e      	ldr	r3, [pc, #440]	; (80110f4 <__ieee754_rem_pio2+0x34c>)
 8010f3c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f44:	4543      	cmp	r3, r8
 8010f46:	d006      	beq.n	8010f56 <__ieee754_rem_pio2+0x1ae>
 8010f48:	4622      	mov	r2, r4
 8010f4a:	462b      	mov	r3, r5
 8010f4c:	4630      	mov	r0, r6
 8010f4e:	4639      	mov	r1, r7
 8010f50:	f7ef f9a2 	bl	8000298 <__aeabi_dsub>
 8010f54:	e00f      	b.n	8010f76 <__ieee754_rem_pio2+0x1ce>
 8010f56:	462b      	mov	r3, r5
 8010f58:	4622      	mov	r2, r4
 8010f5a:	4630      	mov	r0, r6
 8010f5c:	4639      	mov	r1, r7
 8010f5e:	f7ef f99b 	bl	8000298 <__aeabi_dsub>
 8010f62:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010f66:	9303      	str	r3, [sp, #12]
 8010f68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010f6c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8010f70:	f1b8 0f10 	cmp.w	r8, #16
 8010f74:	dc02      	bgt.n	8010f7c <__ieee754_rem_pio2+0x1d4>
 8010f76:	e9ca 0100 	strd	r0, r1, [sl]
 8010f7a:	e039      	b.n	8010ff0 <__ieee754_rem_pio2+0x248>
 8010f7c:	a34e      	add	r3, pc, #312	; (adr r3, 80110b8 <__ieee754_rem_pio2+0x310>)
 8010f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f82:	ec51 0b18 	vmov	r0, r1, d8
 8010f86:	f7ef fb3f 	bl	8000608 <__aeabi_dmul>
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	460d      	mov	r5, r1
 8010f8e:	4602      	mov	r2, r0
 8010f90:	460b      	mov	r3, r1
 8010f92:	4630      	mov	r0, r6
 8010f94:	4639      	mov	r1, r7
 8010f96:	f7ef f97f 	bl	8000298 <__aeabi_dsub>
 8010f9a:	4602      	mov	r2, r0
 8010f9c:	460b      	mov	r3, r1
 8010f9e:	4680      	mov	r8, r0
 8010fa0:	4689      	mov	r9, r1
 8010fa2:	4630      	mov	r0, r6
 8010fa4:	4639      	mov	r1, r7
 8010fa6:	f7ef f977 	bl	8000298 <__aeabi_dsub>
 8010faa:	4622      	mov	r2, r4
 8010fac:	462b      	mov	r3, r5
 8010fae:	f7ef f973 	bl	8000298 <__aeabi_dsub>
 8010fb2:	a343      	add	r3, pc, #268	; (adr r3, 80110c0 <__ieee754_rem_pio2+0x318>)
 8010fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb8:	4604      	mov	r4, r0
 8010fba:	460d      	mov	r5, r1
 8010fbc:	ec51 0b18 	vmov	r0, r1, d8
 8010fc0:	f7ef fb22 	bl	8000608 <__aeabi_dmul>
 8010fc4:	4622      	mov	r2, r4
 8010fc6:	462b      	mov	r3, r5
 8010fc8:	f7ef f966 	bl	8000298 <__aeabi_dsub>
 8010fcc:	4602      	mov	r2, r0
 8010fce:	460b      	mov	r3, r1
 8010fd0:	4604      	mov	r4, r0
 8010fd2:	460d      	mov	r5, r1
 8010fd4:	4640      	mov	r0, r8
 8010fd6:	4649      	mov	r1, r9
 8010fd8:	f7ef f95e 	bl	8000298 <__aeabi_dsub>
 8010fdc:	9a03      	ldr	r2, [sp, #12]
 8010fde:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010fe2:	1ad3      	subs	r3, r2, r3
 8010fe4:	2b31      	cmp	r3, #49	; 0x31
 8010fe6:	dc24      	bgt.n	8011032 <__ieee754_rem_pio2+0x28a>
 8010fe8:	e9ca 0100 	strd	r0, r1, [sl]
 8010fec:	4646      	mov	r6, r8
 8010fee:	464f      	mov	r7, r9
 8010ff0:	e9da 8900 	ldrd	r8, r9, [sl]
 8010ff4:	4630      	mov	r0, r6
 8010ff6:	4642      	mov	r2, r8
 8010ff8:	464b      	mov	r3, r9
 8010ffa:	4639      	mov	r1, r7
 8010ffc:	f7ef f94c 	bl	8000298 <__aeabi_dsub>
 8011000:	462b      	mov	r3, r5
 8011002:	4622      	mov	r2, r4
 8011004:	f7ef f948 	bl	8000298 <__aeabi_dsub>
 8011008:	9b02      	ldr	r3, [sp, #8]
 801100a:	2b00      	cmp	r3, #0
 801100c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011010:	f6bf af0a 	bge.w	8010e28 <__ieee754_rem_pio2+0x80>
 8011014:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011018:	f8ca 3004 	str.w	r3, [sl, #4]
 801101c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011020:	f8ca 8000 	str.w	r8, [sl]
 8011024:	f8ca 0008 	str.w	r0, [sl, #8]
 8011028:	f8ca 300c 	str.w	r3, [sl, #12]
 801102c:	f1cb 0b00 	rsb	fp, fp, #0
 8011030:	e6fa      	b.n	8010e28 <__ieee754_rem_pio2+0x80>
 8011032:	a327      	add	r3, pc, #156	; (adr r3, 80110d0 <__ieee754_rem_pio2+0x328>)
 8011034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011038:	ec51 0b18 	vmov	r0, r1, d8
 801103c:	f7ef fae4 	bl	8000608 <__aeabi_dmul>
 8011040:	4604      	mov	r4, r0
 8011042:	460d      	mov	r5, r1
 8011044:	4602      	mov	r2, r0
 8011046:	460b      	mov	r3, r1
 8011048:	4640      	mov	r0, r8
 801104a:	4649      	mov	r1, r9
 801104c:	f7ef f924 	bl	8000298 <__aeabi_dsub>
 8011050:	4602      	mov	r2, r0
 8011052:	460b      	mov	r3, r1
 8011054:	4606      	mov	r6, r0
 8011056:	460f      	mov	r7, r1
 8011058:	4640      	mov	r0, r8
 801105a:	4649      	mov	r1, r9
 801105c:	f7ef f91c 	bl	8000298 <__aeabi_dsub>
 8011060:	4622      	mov	r2, r4
 8011062:	462b      	mov	r3, r5
 8011064:	f7ef f918 	bl	8000298 <__aeabi_dsub>
 8011068:	a31b      	add	r3, pc, #108	; (adr r3, 80110d8 <__ieee754_rem_pio2+0x330>)
 801106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801106e:	4604      	mov	r4, r0
 8011070:	460d      	mov	r5, r1
 8011072:	ec51 0b18 	vmov	r0, r1, d8
 8011076:	f7ef fac7 	bl	8000608 <__aeabi_dmul>
 801107a:	4622      	mov	r2, r4
 801107c:	462b      	mov	r3, r5
 801107e:	f7ef f90b 	bl	8000298 <__aeabi_dsub>
 8011082:	4604      	mov	r4, r0
 8011084:	460d      	mov	r5, r1
 8011086:	e75f      	b.n	8010f48 <__ieee754_rem_pio2+0x1a0>
 8011088:	4b1b      	ldr	r3, [pc, #108]	; (80110f8 <__ieee754_rem_pio2+0x350>)
 801108a:	4598      	cmp	r8, r3
 801108c:	dd36      	ble.n	80110fc <__ieee754_rem_pio2+0x354>
 801108e:	ee10 2a10 	vmov	r2, s0
 8011092:	462b      	mov	r3, r5
 8011094:	4620      	mov	r0, r4
 8011096:	4629      	mov	r1, r5
 8011098:	f7ef f8fe 	bl	8000298 <__aeabi_dsub>
 801109c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80110a0:	e9ca 0100 	strd	r0, r1, [sl]
 80110a4:	e694      	b.n	8010dd0 <__ieee754_rem_pio2+0x28>
 80110a6:	bf00      	nop
 80110a8:	54400000 	.word	0x54400000
 80110ac:	3ff921fb 	.word	0x3ff921fb
 80110b0:	1a626331 	.word	0x1a626331
 80110b4:	3dd0b461 	.word	0x3dd0b461
 80110b8:	1a600000 	.word	0x1a600000
 80110bc:	3dd0b461 	.word	0x3dd0b461
 80110c0:	2e037073 	.word	0x2e037073
 80110c4:	3ba3198a 	.word	0x3ba3198a
 80110c8:	6dc9c883 	.word	0x6dc9c883
 80110cc:	3fe45f30 	.word	0x3fe45f30
 80110d0:	2e000000 	.word	0x2e000000
 80110d4:	3ba3198a 	.word	0x3ba3198a
 80110d8:	252049c1 	.word	0x252049c1
 80110dc:	397b839a 	.word	0x397b839a
 80110e0:	3fe921fb 	.word	0x3fe921fb
 80110e4:	4002d97b 	.word	0x4002d97b
 80110e8:	3ff921fb 	.word	0x3ff921fb
 80110ec:	413921fb 	.word	0x413921fb
 80110f0:	3fe00000 	.word	0x3fe00000
 80110f4:	08013368 	.word	0x08013368
 80110f8:	7fefffff 	.word	0x7fefffff
 80110fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8011100:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8011104:	ee10 0a10 	vmov	r0, s0
 8011108:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801110c:	ee10 6a10 	vmov	r6, s0
 8011110:	460f      	mov	r7, r1
 8011112:	f7ef fd29 	bl	8000b68 <__aeabi_d2iz>
 8011116:	f7ef fa0d 	bl	8000534 <__aeabi_i2d>
 801111a:	4602      	mov	r2, r0
 801111c:	460b      	mov	r3, r1
 801111e:	4630      	mov	r0, r6
 8011120:	4639      	mov	r1, r7
 8011122:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011126:	f7ef f8b7 	bl	8000298 <__aeabi_dsub>
 801112a:	4b23      	ldr	r3, [pc, #140]	; (80111b8 <__ieee754_rem_pio2+0x410>)
 801112c:	2200      	movs	r2, #0
 801112e:	f7ef fa6b 	bl	8000608 <__aeabi_dmul>
 8011132:	460f      	mov	r7, r1
 8011134:	4606      	mov	r6, r0
 8011136:	f7ef fd17 	bl	8000b68 <__aeabi_d2iz>
 801113a:	f7ef f9fb 	bl	8000534 <__aeabi_i2d>
 801113e:	4602      	mov	r2, r0
 8011140:	460b      	mov	r3, r1
 8011142:	4630      	mov	r0, r6
 8011144:	4639      	mov	r1, r7
 8011146:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801114a:	f7ef f8a5 	bl	8000298 <__aeabi_dsub>
 801114e:	4b1a      	ldr	r3, [pc, #104]	; (80111b8 <__ieee754_rem_pio2+0x410>)
 8011150:	2200      	movs	r2, #0
 8011152:	f7ef fa59 	bl	8000608 <__aeabi_dmul>
 8011156:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801115a:	ad04      	add	r5, sp, #16
 801115c:	f04f 0803 	mov.w	r8, #3
 8011160:	46a9      	mov	r9, r5
 8011162:	2600      	movs	r6, #0
 8011164:	2700      	movs	r7, #0
 8011166:	4632      	mov	r2, r6
 8011168:	463b      	mov	r3, r7
 801116a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801116e:	46c3      	mov	fp, r8
 8011170:	3d08      	subs	r5, #8
 8011172:	f108 38ff 	add.w	r8, r8, #4294967295
 8011176:	f7ef fcaf 	bl	8000ad8 <__aeabi_dcmpeq>
 801117a:	2800      	cmp	r0, #0
 801117c:	d1f3      	bne.n	8011166 <__ieee754_rem_pio2+0x3be>
 801117e:	4b0f      	ldr	r3, [pc, #60]	; (80111bc <__ieee754_rem_pio2+0x414>)
 8011180:	9301      	str	r3, [sp, #4]
 8011182:	2302      	movs	r3, #2
 8011184:	9300      	str	r3, [sp, #0]
 8011186:	4622      	mov	r2, r4
 8011188:	465b      	mov	r3, fp
 801118a:	4651      	mov	r1, sl
 801118c:	4648      	mov	r0, r9
 801118e:	f000 fb4f 	bl	8011830 <__kernel_rem_pio2>
 8011192:	9b02      	ldr	r3, [sp, #8]
 8011194:	2b00      	cmp	r3, #0
 8011196:	4683      	mov	fp, r0
 8011198:	f6bf ae46 	bge.w	8010e28 <__ieee754_rem_pio2+0x80>
 801119c:	e9da 2100 	ldrd	r2, r1, [sl]
 80111a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111a4:	e9ca 2300 	strd	r2, r3, [sl]
 80111a8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80111ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111b0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80111b4:	e73a      	b.n	801102c <__ieee754_rem_pio2+0x284>
 80111b6:	bf00      	nop
 80111b8:	41700000 	.word	0x41700000
 80111bc:	080133e8 	.word	0x080133e8

080111c0 <__ieee754_sqrt>:
 80111c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111c4:	ec55 4b10 	vmov	r4, r5, d0
 80111c8:	4e55      	ldr	r6, [pc, #340]	; (8011320 <__ieee754_sqrt+0x160>)
 80111ca:	43ae      	bics	r6, r5
 80111cc:	ee10 0a10 	vmov	r0, s0
 80111d0:	ee10 3a10 	vmov	r3, s0
 80111d4:	462a      	mov	r2, r5
 80111d6:	4629      	mov	r1, r5
 80111d8:	d110      	bne.n	80111fc <__ieee754_sqrt+0x3c>
 80111da:	ee10 2a10 	vmov	r2, s0
 80111de:	462b      	mov	r3, r5
 80111e0:	f7ef fa12 	bl	8000608 <__aeabi_dmul>
 80111e4:	4602      	mov	r2, r0
 80111e6:	460b      	mov	r3, r1
 80111e8:	4620      	mov	r0, r4
 80111ea:	4629      	mov	r1, r5
 80111ec:	f7ef f856 	bl	800029c <__adddf3>
 80111f0:	4604      	mov	r4, r0
 80111f2:	460d      	mov	r5, r1
 80111f4:	ec45 4b10 	vmov	d0, r4, r5
 80111f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111fc:	2d00      	cmp	r5, #0
 80111fe:	dc10      	bgt.n	8011222 <__ieee754_sqrt+0x62>
 8011200:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011204:	4330      	orrs	r0, r6
 8011206:	d0f5      	beq.n	80111f4 <__ieee754_sqrt+0x34>
 8011208:	b15d      	cbz	r5, 8011222 <__ieee754_sqrt+0x62>
 801120a:	ee10 2a10 	vmov	r2, s0
 801120e:	462b      	mov	r3, r5
 8011210:	ee10 0a10 	vmov	r0, s0
 8011214:	f7ef f840 	bl	8000298 <__aeabi_dsub>
 8011218:	4602      	mov	r2, r0
 801121a:	460b      	mov	r3, r1
 801121c:	f7ef fb1e 	bl	800085c <__aeabi_ddiv>
 8011220:	e7e6      	b.n	80111f0 <__ieee754_sqrt+0x30>
 8011222:	1512      	asrs	r2, r2, #20
 8011224:	d074      	beq.n	8011310 <__ieee754_sqrt+0x150>
 8011226:	07d4      	lsls	r4, r2, #31
 8011228:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801122c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8011230:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8011234:	bf5e      	ittt	pl
 8011236:	0fda      	lsrpl	r2, r3, #31
 8011238:	005b      	lslpl	r3, r3, #1
 801123a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801123e:	2400      	movs	r4, #0
 8011240:	0fda      	lsrs	r2, r3, #31
 8011242:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8011246:	107f      	asrs	r7, r7, #1
 8011248:	005b      	lsls	r3, r3, #1
 801124a:	2516      	movs	r5, #22
 801124c:	4620      	mov	r0, r4
 801124e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011252:	1886      	adds	r6, r0, r2
 8011254:	428e      	cmp	r6, r1
 8011256:	bfde      	ittt	le
 8011258:	1b89      	suble	r1, r1, r6
 801125a:	18b0      	addle	r0, r6, r2
 801125c:	18a4      	addle	r4, r4, r2
 801125e:	0049      	lsls	r1, r1, #1
 8011260:	3d01      	subs	r5, #1
 8011262:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8011266:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801126a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801126e:	d1f0      	bne.n	8011252 <__ieee754_sqrt+0x92>
 8011270:	462a      	mov	r2, r5
 8011272:	f04f 0e20 	mov.w	lr, #32
 8011276:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801127a:	4281      	cmp	r1, r0
 801127c:	eb06 0c05 	add.w	ip, r6, r5
 8011280:	dc02      	bgt.n	8011288 <__ieee754_sqrt+0xc8>
 8011282:	d113      	bne.n	80112ac <__ieee754_sqrt+0xec>
 8011284:	459c      	cmp	ip, r3
 8011286:	d811      	bhi.n	80112ac <__ieee754_sqrt+0xec>
 8011288:	f1bc 0f00 	cmp.w	ip, #0
 801128c:	eb0c 0506 	add.w	r5, ip, r6
 8011290:	da43      	bge.n	801131a <__ieee754_sqrt+0x15a>
 8011292:	2d00      	cmp	r5, #0
 8011294:	db41      	blt.n	801131a <__ieee754_sqrt+0x15a>
 8011296:	f100 0801 	add.w	r8, r0, #1
 801129a:	1a09      	subs	r1, r1, r0
 801129c:	459c      	cmp	ip, r3
 801129e:	bf88      	it	hi
 80112a0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80112a4:	eba3 030c 	sub.w	r3, r3, ip
 80112a8:	4432      	add	r2, r6
 80112aa:	4640      	mov	r0, r8
 80112ac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80112b0:	f1be 0e01 	subs.w	lr, lr, #1
 80112b4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80112b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80112bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80112c0:	d1db      	bne.n	801127a <__ieee754_sqrt+0xba>
 80112c2:	430b      	orrs	r3, r1
 80112c4:	d006      	beq.n	80112d4 <__ieee754_sqrt+0x114>
 80112c6:	1c50      	adds	r0, r2, #1
 80112c8:	bf13      	iteet	ne
 80112ca:	3201      	addne	r2, #1
 80112cc:	3401      	addeq	r4, #1
 80112ce:	4672      	moveq	r2, lr
 80112d0:	f022 0201 	bicne.w	r2, r2, #1
 80112d4:	1063      	asrs	r3, r4, #1
 80112d6:	0852      	lsrs	r2, r2, #1
 80112d8:	07e1      	lsls	r1, r4, #31
 80112da:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80112de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80112e2:	bf48      	it	mi
 80112e4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80112e8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80112ec:	4614      	mov	r4, r2
 80112ee:	e781      	b.n	80111f4 <__ieee754_sqrt+0x34>
 80112f0:	0ad9      	lsrs	r1, r3, #11
 80112f2:	3815      	subs	r0, #21
 80112f4:	055b      	lsls	r3, r3, #21
 80112f6:	2900      	cmp	r1, #0
 80112f8:	d0fa      	beq.n	80112f0 <__ieee754_sqrt+0x130>
 80112fa:	02cd      	lsls	r5, r1, #11
 80112fc:	d50a      	bpl.n	8011314 <__ieee754_sqrt+0x154>
 80112fe:	f1c2 0420 	rsb	r4, r2, #32
 8011302:	fa23 f404 	lsr.w	r4, r3, r4
 8011306:	1e55      	subs	r5, r2, #1
 8011308:	4093      	lsls	r3, r2
 801130a:	4321      	orrs	r1, r4
 801130c:	1b42      	subs	r2, r0, r5
 801130e:	e78a      	b.n	8011226 <__ieee754_sqrt+0x66>
 8011310:	4610      	mov	r0, r2
 8011312:	e7f0      	b.n	80112f6 <__ieee754_sqrt+0x136>
 8011314:	0049      	lsls	r1, r1, #1
 8011316:	3201      	adds	r2, #1
 8011318:	e7ef      	b.n	80112fa <__ieee754_sqrt+0x13a>
 801131a:	4680      	mov	r8, r0
 801131c:	e7bd      	b.n	801129a <__ieee754_sqrt+0xda>
 801131e:	bf00      	nop
 8011320:	7ff00000 	.word	0x7ff00000

08011324 <__ieee754_fmodf>:
 8011324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011326:	ee10 5a90 	vmov	r5, s1
 801132a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 801132e:	d009      	beq.n	8011344 <__ieee754_fmodf+0x20>
 8011330:	ee10 2a10 	vmov	r2, s0
 8011334:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8011338:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801133c:	da02      	bge.n	8011344 <__ieee754_fmodf+0x20>
 801133e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8011342:	dd04      	ble.n	801134e <__ieee754_fmodf+0x2a>
 8011344:	ee60 0a20 	vmul.f32	s1, s0, s1
 8011348:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 801134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801134e:	42a3      	cmp	r3, r4
 8011350:	dbfc      	blt.n	801134c <__ieee754_fmodf+0x28>
 8011352:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8011356:	d105      	bne.n	8011364 <__ieee754_fmodf+0x40>
 8011358:	4b32      	ldr	r3, [pc, #200]	; (8011424 <__ieee754_fmodf+0x100>)
 801135a:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 801135e:	ed93 0a00 	vldr	s0, [r3]
 8011362:	e7f3      	b.n	801134c <__ieee754_fmodf+0x28>
 8011364:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8011368:	d13f      	bne.n	80113ea <__ieee754_fmodf+0xc6>
 801136a:	0219      	lsls	r1, r3, #8
 801136c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8011370:	2900      	cmp	r1, #0
 8011372:	dc37      	bgt.n	80113e4 <__ieee754_fmodf+0xc0>
 8011374:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8011378:	d13d      	bne.n	80113f6 <__ieee754_fmodf+0xd2>
 801137a:	0227      	lsls	r7, r4, #8
 801137c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8011380:	2f00      	cmp	r7, #0
 8011382:	da35      	bge.n	80113f0 <__ieee754_fmodf+0xcc>
 8011384:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8011388:	bfbb      	ittet	lt
 801138a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801138e:	1a12      	sublt	r2, r2, r0
 8011390:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8011394:	4093      	lsllt	r3, r2
 8011396:	bfa8      	it	ge
 8011398:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 801139c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80113a0:	bfb5      	itete	lt
 80113a2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80113a6:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 80113aa:	1a52      	sublt	r2, r2, r1
 80113ac:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 80113b0:	bfb8      	it	lt
 80113b2:	4094      	lsllt	r4, r2
 80113b4:	1a40      	subs	r0, r0, r1
 80113b6:	1b1a      	subs	r2, r3, r4
 80113b8:	bb00      	cbnz	r0, 80113fc <__ieee754_fmodf+0xd8>
 80113ba:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 80113be:	bf38      	it	cc
 80113c0:	4613      	movcc	r3, r2
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d0c8      	beq.n	8011358 <__ieee754_fmodf+0x34>
 80113c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80113ca:	db1f      	blt.n	801140c <__ieee754_fmodf+0xe8>
 80113cc:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80113d0:	db1f      	blt.n	8011412 <__ieee754_fmodf+0xee>
 80113d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80113d6:	317f      	adds	r1, #127	; 0x7f
 80113d8:	4333      	orrs	r3, r6
 80113da:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 80113de:	ee00 3a10 	vmov	s0, r3
 80113e2:	e7b3      	b.n	801134c <__ieee754_fmodf+0x28>
 80113e4:	3801      	subs	r0, #1
 80113e6:	0049      	lsls	r1, r1, #1
 80113e8:	e7c2      	b.n	8011370 <__ieee754_fmodf+0x4c>
 80113ea:	15d8      	asrs	r0, r3, #23
 80113ec:	387f      	subs	r0, #127	; 0x7f
 80113ee:	e7c1      	b.n	8011374 <__ieee754_fmodf+0x50>
 80113f0:	3901      	subs	r1, #1
 80113f2:	007f      	lsls	r7, r7, #1
 80113f4:	e7c4      	b.n	8011380 <__ieee754_fmodf+0x5c>
 80113f6:	15e1      	asrs	r1, r4, #23
 80113f8:	397f      	subs	r1, #127	; 0x7f
 80113fa:	e7c3      	b.n	8011384 <__ieee754_fmodf+0x60>
 80113fc:	2a00      	cmp	r2, #0
 80113fe:	da02      	bge.n	8011406 <__ieee754_fmodf+0xe2>
 8011400:	005b      	lsls	r3, r3, #1
 8011402:	3801      	subs	r0, #1
 8011404:	e7d7      	b.n	80113b6 <__ieee754_fmodf+0x92>
 8011406:	d0a7      	beq.n	8011358 <__ieee754_fmodf+0x34>
 8011408:	0053      	lsls	r3, r2, #1
 801140a:	e7fa      	b.n	8011402 <__ieee754_fmodf+0xde>
 801140c:	005b      	lsls	r3, r3, #1
 801140e:	3901      	subs	r1, #1
 8011410:	e7d9      	b.n	80113c6 <__ieee754_fmodf+0xa2>
 8011412:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8011416:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 801141a:	3182      	adds	r1, #130	; 0x82
 801141c:	410b      	asrs	r3, r1
 801141e:	4333      	orrs	r3, r6
 8011420:	e7dd      	b.n	80113de <__ieee754_fmodf+0xba>
 8011422:	bf00      	nop
 8011424:	080134f0 	.word	0x080134f0

08011428 <__ieee754_rem_pio2f>:
 8011428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801142a:	ee10 6a10 	vmov	r6, s0
 801142e:	4b8e      	ldr	r3, [pc, #568]	; (8011668 <__ieee754_rem_pio2f+0x240>)
 8011430:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8011434:	429d      	cmp	r5, r3
 8011436:	b087      	sub	sp, #28
 8011438:	eef0 7a40 	vmov.f32	s15, s0
 801143c:	4604      	mov	r4, r0
 801143e:	dc05      	bgt.n	801144c <__ieee754_rem_pio2f+0x24>
 8011440:	2300      	movs	r3, #0
 8011442:	ed80 0a00 	vstr	s0, [r0]
 8011446:	6043      	str	r3, [r0, #4]
 8011448:	2000      	movs	r0, #0
 801144a:	e01a      	b.n	8011482 <__ieee754_rem_pio2f+0x5a>
 801144c:	4b87      	ldr	r3, [pc, #540]	; (801166c <__ieee754_rem_pio2f+0x244>)
 801144e:	429d      	cmp	r5, r3
 8011450:	dc46      	bgt.n	80114e0 <__ieee754_rem_pio2f+0xb8>
 8011452:	2e00      	cmp	r6, #0
 8011454:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8011670 <__ieee754_rem_pio2f+0x248>
 8011458:	4b86      	ldr	r3, [pc, #536]	; (8011674 <__ieee754_rem_pio2f+0x24c>)
 801145a:	f025 050f 	bic.w	r5, r5, #15
 801145e:	dd1f      	ble.n	80114a0 <__ieee754_rem_pio2f+0x78>
 8011460:	429d      	cmp	r5, r3
 8011462:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011466:	d00e      	beq.n	8011486 <__ieee754_rem_pio2f+0x5e>
 8011468:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8011678 <__ieee754_rem_pio2f+0x250>
 801146c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8011470:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011474:	ed80 0a00 	vstr	s0, [r0]
 8011478:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801147c:	2001      	movs	r0, #1
 801147e:	edc4 7a01 	vstr	s15, [r4, #4]
 8011482:	b007      	add	sp, #28
 8011484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011486:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801167c <__ieee754_rem_pio2f+0x254>
 801148a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8011680 <__ieee754_rem_pio2f+0x258>
 801148e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011492:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011496:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801149a:	edc0 6a00 	vstr	s13, [r0]
 801149e:	e7eb      	b.n	8011478 <__ieee754_rem_pio2f+0x50>
 80114a0:	429d      	cmp	r5, r3
 80114a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80114a6:	d00e      	beq.n	80114c6 <__ieee754_rem_pio2f+0x9e>
 80114a8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8011678 <__ieee754_rem_pio2f+0x250>
 80114ac:	ee37 0a87 	vadd.f32	s0, s15, s14
 80114b0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80114b4:	ed80 0a00 	vstr	s0, [r0]
 80114b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80114bc:	f04f 30ff 	mov.w	r0, #4294967295
 80114c0:	edc4 7a01 	vstr	s15, [r4, #4]
 80114c4:	e7dd      	b.n	8011482 <__ieee754_rem_pio2f+0x5a>
 80114c6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801167c <__ieee754_rem_pio2f+0x254>
 80114ca:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8011680 <__ieee754_rem_pio2f+0x258>
 80114ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 80114d2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80114d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80114da:	edc0 6a00 	vstr	s13, [r0]
 80114de:	e7eb      	b.n	80114b8 <__ieee754_rem_pio2f+0x90>
 80114e0:	4b68      	ldr	r3, [pc, #416]	; (8011684 <__ieee754_rem_pio2f+0x25c>)
 80114e2:	429d      	cmp	r5, r3
 80114e4:	dc72      	bgt.n	80115cc <__ieee754_rem_pio2f+0x1a4>
 80114e6:	f001 fbe1 	bl	8012cac <fabsf>
 80114ea:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8011688 <__ieee754_rem_pio2f+0x260>
 80114ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80114f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80114f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80114fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80114fe:	ee17 0a90 	vmov	r0, s15
 8011502:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8011670 <__ieee754_rem_pio2f+0x248>
 8011506:	eea7 0a67 	vfms.f32	s0, s14, s15
 801150a:	281f      	cmp	r0, #31
 801150c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8011678 <__ieee754_rem_pio2f+0x250>
 8011510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011514:	eeb1 6a47 	vneg.f32	s12, s14
 8011518:	ee70 6a67 	vsub.f32	s13, s0, s15
 801151c:	ee16 2a90 	vmov	r2, s13
 8011520:	dc1c      	bgt.n	801155c <__ieee754_rem_pio2f+0x134>
 8011522:	495a      	ldr	r1, [pc, #360]	; (801168c <__ieee754_rem_pio2f+0x264>)
 8011524:	1e47      	subs	r7, r0, #1
 8011526:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801152a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801152e:	428b      	cmp	r3, r1
 8011530:	d014      	beq.n	801155c <__ieee754_rem_pio2f+0x134>
 8011532:	6022      	str	r2, [r4, #0]
 8011534:	ed94 7a00 	vldr	s14, [r4]
 8011538:	ee30 0a47 	vsub.f32	s0, s0, s14
 801153c:	2e00      	cmp	r6, #0
 801153e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011542:	ed84 0a01 	vstr	s0, [r4, #4]
 8011546:	da9c      	bge.n	8011482 <__ieee754_rem_pio2f+0x5a>
 8011548:	eeb1 7a47 	vneg.f32	s14, s14
 801154c:	eeb1 0a40 	vneg.f32	s0, s0
 8011550:	ed84 7a00 	vstr	s14, [r4]
 8011554:	ed84 0a01 	vstr	s0, [r4, #4]
 8011558:	4240      	negs	r0, r0
 801155a:	e792      	b.n	8011482 <__ieee754_rem_pio2f+0x5a>
 801155c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011560:	15eb      	asrs	r3, r5, #23
 8011562:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8011566:	2d08      	cmp	r5, #8
 8011568:	dde3      	ble.n	8011532 <__ieee754_rem_pio2f+0x10a>
 801156a:	eddf 7a44 	vldr	s15, [pc, #272]	; 801167c <__ieee754_rem_pio2f+0x254>
 801156e:	eddf 5a44 	vldr	s11, [pc, #272]	; 8011680 <__ieee754_rem_pio2f+0x258>
 8011572:	eef0 6a40 	vmov.f32	s13, s0
 8011576:	eee6 6a27 	vfma.f32	s13, s12, s15
 801157a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801157e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8011582:	eef0 7a40 	vmov.f32	s15, s0
 8011586:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801158a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801158e:	ee15 2a90 	vmov	r2, s11
 8011592:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011596:	1a5b      	subs	r3, r3, r1
 8011598:	2b19      	cmp	r3, #25
 801159a:	dc04      	bgt.n	80115a6 <__ieee754_rem_pio2f+0x17e>
 801159c:	edc4 5a00 	vstr	s11, [r4]
 80115a0:	eeb0 0a66 	vmov.f32	s0, s13
 80115a4:	e7c6      	b.n	8011534 <__ieee754_rem_pio2f+0x10c>
 80115a6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8011690 <__ieee754_rem_pio2f+0x268>
 80115aa:	eeb0 0a66 	vmov.f32	s0, s13
 80115ae:	eea6 0a25 	vfma.f32	s0, s12, s11
 80115b2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80115b6:	eddf 6a37 	vldr	s13, [pc, #220]	; 8011694 <__ieee754_rem_pio2f+0x26c>
 80115ba:	eee6 7a25 	vfma.f32	s15, s12, s11
 80115be:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80115c2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80115c6:	ed84 7a00 	vstr	s14, [r4]
 80115ca:	e7b3      	b.n	8011534 <__ieee754_rem_pio2f+0x10c>
 80115cc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80115d0:	db06      	blt.n	80115e0 <__ieee754_rem_pio2f+0x1b8>
 80115d2:	ee70 7a40 	vsub.f32	s15, s0, s0
 80115d6:	edc0 7a01 	vstr	s15, [r0, #4]
 80115da:	edc0 7a00 	vstr	s15, [r0]
 80115de:	e733      	b.n	8011448 <__ieee754_rem_pio2f+0x20>
 80115e0:	15ea      	asrs	r2, r5, #23
 80115e2:	3a86      	subs	r2, #134	; 0x86
 80115e4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80115e8:	ee07 3a90 	vmov	s15, r3
 80115ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80115f0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8011698 <__ieee754_rem_pio2f+0x270>
 80115f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80115f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80115fc:	ed8d 7a03 	vstr	s14, [sp, #12]
 8011600:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011604:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011608:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801160c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011610:	ed8d 7a04 	vstr	s14, [sp, #16]
 8011614:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011618:	eef5 7a40 	vcmp.f32	s15, #0.0
 801161c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011620:	edcd 7a05 	vstr	s15, [sp, #20]
 8011624:	d11e      	bne.n	8011664 <__ieee754_rem_pio2f+0x23c>
 8011626:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801162a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801162e:	bf14      	ite	ne
 8011630:	2302      	movne	r3, #2
 8011632:	2301      	moveq	r3, #1
 8011634:	4919      	ldr	r1, [pc, #100]	; (801169c <__ieee754_rem_pio2f+0x274>)
 8011636:	9101      	str	r1, [sp, #4]
 8011638:	2102      	movs	r1, #2
 801163a:	9100      	str	r1, [sp, #0]
 801163c:	a803      	add	r0, sp, #12
 801163e:	4621      	mov	r1, r4
 8011640:	f000 ff70 	bl	8012524 <__kernel_rem_pio2f>
 8011644:	2e00      	cmp	r6, #0
 8011646:	f6bf af1c 	bge.w	8011482 <__ieee754_rem_pio2f+0x5a>
 801164a:	edd4 7a00 	vldr	s15, [r4]
 801164e:	eef1 7a67 	vneg.f32	s15, s15
 8011652:	edc4 7a00 	vstr	s15, [r4]
 8011656:	edd4 7a01 	vldr	s15, [r4, #4]
 801165a:	eef1 7a67 	vneg.f32	s15, s15
 801165e:	edc4 7a01 	vstr	s15, [r4, #4]
 8011662:	e779      	b.n	8011558 <__ieee754_rem_pio2f+0x130>
 8011664:	2303      	movs	r3, #3
 8011666:	e7e5      	b.n	8011634 <__ieee754_rem_pio2f+0x20c>
 8011668:	3f490fd8 	.word	0x3f490fd8
 801166c:	4016cbe3 	.word	0x4016cbe3
 8011670:	3fc90f80 	.word	0x3fc90f80
 8011674:	3fc90fd0 	.word	0x3fc90fd0
 8011678:	37354443 	.word	0x37354443
 801167c:	37354400 	.word	0x37354400
 8011680:	2e85a308 	.word	0x2e85a308
 8011684:	43490f80 	.word	0x43490f80
 8011688:	3f22f984 	.word	0x3f22f984
 801168c:	080134f8 	.word	0x080134f8
 8011690:	2e85a300 	.word	0x2e85a300
 8011694:	248d3132 	.word	0x248d3132
 8011698:	43800000 	.word	0x43800000
 801169c:	08013578 	.word	0x08013578

080116a0 <__kernel_cos>:
 80116a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a4:	ec57 6b10 	vmov	r6, r7, d0
 80116a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80116ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80116b0:	ed8d 1b00 	vstr	d1, [sp]
 80116b4:	da07      	bge.n	80116c6 <__kernel_cos+0x26>
 80116b6:	ee10 0a10 	vmov	r0, s0
 80116ba:	4639      	mov	r1, r7
 80116bc:	f7ef fa54 	bl	8000b68 <__aeabi_d2iz>
 80116c0:	2800      	cmp	r0, #0
 80116c2:	f000 8088 	beq.w	80117d6 <__kernel_cos+0x136>
 80116c6:	4632      	mov	r2, r6
 80116c8:	463b      	mov	r3, r7
 80116ca:	4630      	mov	r0, r6
 80116cc:	4639      	mov	r1, r7
 80116ce:	f7ee ff9b 	bl	8000608 <__aeabi_dmul>
 80116d2:	4b51      	ldr	r3, [pc, #324]	; (8011818 <__kernel_cos+0x178>)
 80116d4:	2200      	movs	r2, #0
 80116d6:	4604      	mov	r4, r0
 80116d8:	460d      	mov	r5, r1
 80116da:	f7ee ff95 	bl	8000608 <__aeabi_dmul>
 80116de:	a340      	add	r3, pc, #256	; (adr r3, 80117e0 <__kernel_cos+0x140>)
 80116e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e4:	4682      	mov	sl, r0
 80116e6:	468b      	mov	fp, r1
 80116e8:	4620      	mov	r0, r4
 80116ea:	4629      	mov	r1, r5
 80116ec:	f7ee ff8c 	bl	8000608 <__aeabi_dmul>
 80116f0:	a33d      	add	r3, pc, #244	; (adr r3, 80117e8 <__kernel_cos+0x148>)
 80116f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f6:	f7ee fdd1 	bl	800029c <__adddf3>
 80116fa:	4622      	mov	r2, r4
 80116fc:	462b      	mov	r3, r5
 80116fe:	f7ee ff83 	bl	8000608 <__aeabi_dmul>
 8011702:	a33b      	add	r3, pc, #236	; (adr r3, 80117f0 <__kernel_cos+0x150>)
 8011704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011708:	f7ee fdc6 	bl	8000298 <__aeabi_dsub>
 801170c:	4622      	mov	r2, r4
 801170e:	462b      	mov	r3, r5
 8011710:	f7ee ff7a 	bl	8000608 <__aeabi_dmul>
 8011714:	a338      	add	r3, pc, #224	; (adr r3, 80117f8 <__kernel_cos+0x158>)
 8011716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801171a:	f7ee fdbf 	bl	800029c <__adddf3>
 801171e:	4622      	mov	r2, r4
 8011720:	462b      	mov	r3, r5
 8011722:	f7ee ff71 	bl	8000608 <__aeabi_dmul>
 8011726:	a336      	add	r3, pc, #216	; (adr r3, 8011800 <__kernel_cos+0x160>)
 8011728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172c:	f7ee fdb4 	bl	8000298 <__aeabi_dsub>
 8011730:	4622      	mov	r2, r4
 8011732:	462b      	mov	r3, r5
 8011734:	f7ee ff68 	bl	8000608 <__aeabi_dmul>
 8011738:	a333      	add	r3, pc, #204	; (adr r3, 8011808 <__kernel_cos+0x168>)
 801173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801173e:	f7ee fdad 	bl	800029c <__adddf3>
 8011742:	4622      	mov	r2, r4
 8011744:	462b      	mov	r3, r5
 8011746:	f7ee ff5f 	bl	8000608 <__aeabi_dmul>
 801174a:	4622      	mov	r2, r4
 801174c:	462b      	mov	r3, r5
 801174e:	f7ee ff5b 	bl	8000608 <__aeabi_dmul>
 8011752:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011756:	4604      	mov	r4, r0
 8011758:	460d      	mov	r5, r1
 801175a:	4630      	mov	r0, r6
 801175c:	4639      	mov	r1, r7
 801175e:	f7ee ff53 	bl	8000608 <__aeabi_dmul>
 8011762:	460b      	mov	r3, r1
 8011764:	4602      	mov	r2, r0
 8011766:	4629      	mov	r1, r5
 8011768:	4620      	mov	r0, r4
 801176a:	f7ee fd95 	bl	8000298 <__aeabi_dsub>
 801176e:	4b2b      	ldr	r3, [pc, #172]	; (801181c <__kernel_cos+0x17c>)
 8011770:	4598      	cmp	r8, r3
 8011772:	4606      	mov	r6, r0
 8011774:	460f      	mov	r7, r1
 8011776:	dc10      	bgt.n	801179a <__kernel_cos+0xfa>
 8011778:	4602      	mov	r2, r0
 801177a:	460b      	mov	r3, r1
 801177c:	4650      	mov	r0, sl
 801177e:	4659      	mov	r1, fp
 8011780:	f7ee fd8a 	bl	8000298 <__aeabi_dsub>
 8011784:	460b      	mov	r3, r1
 8011786:	4926      	ldr	r1, [pc, #152]	; (8011820 <__kernel_cos+0x180>)
 8011788:	4602      	mov	r2, r0
 801178a:	2000      	movs	r0, #0
 801178c:	f7ee fd84 	bl	8000298 <__aeabi_dsub>
 8011790:	ec41 0b10 	vmov	d0, r0, r1
 8011794:	b003      	add	sp, #12
 8011796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801179a:	4b22      	ldr	r3, [pc, #136]	; (8011824 <__kernel_cos+0x184>)
 801179c:	4920      	ldr	r1, [pc, #128]	; (8011820 <__kernel_cos+0x180>)
 801179e:	4598      	cmp	r8, r3
 80117a0:	bfcc      	ite	gt
 80117a2:	4d21      	ldrgt	r5, [pc, #132]	; (8011828 <__kernel_cos+0x188>)
 80117a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80117a8:	2400      	movs	r4, #0
 80117aa:	4622      	mov	r2, r4
 80117ac:	462b      	mov	r3, r5
 80117ae:	2000      	movs	r0, #0
 80117b0:	f7ee fd72 	bl	8000298 <__aeabi_dsub>
 80117b4:	4622      	mov	r2, r4
 80117b6:	4680      	mov	r8, r0
 80117b8:	4689      	mov	r9, r1
 80117ba:	462b      	mov	r3, r5
 80117bc:	4650      	mov	r0, sl
 80117be:	4659      	mov	r1, fp
 80117c0:	f7ee fd6a 	bl	8000298 <__aeabi_dsub>
 80117c4:	4632      	mov	r2, r6
 80117c6:	463b      	mov	r3, r7
 80117c8:	f7ee fd66 	bl	8000298 <__aeabi_dsub>
 80117cc:	4602      	mov	r2, r0
 80117ce:	460b      	mov	r3, r1
 80117d0:	4640      	mov	r0, r8
 80117d2:	4649      	mov	r1, r9
 80117d4:	e7da      	b.n	801178c <__kernel_cos+0xec>
 80117d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011810 <__kernel_cos+0x170>
 80117da:	e7db      	b.n	8011794 <__kernel_cos+0xf4>
 80117dc:	f3af 8000 	nop.w
 80117e0:	be8838d4 	.word	0xbe8838d4
 80117e4:	bda8fae9 	.word	0xbda8fae9
 80117e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80117ec:	3e21ee9e 	.word	0x3e21ee9e
 80117f0:	809c52ad 	.word	0x809c52ad
 80117f4:	3e927e4f 	.word	0x3e927e4f
 80117f8:	19cb1590 	.word	0x19cb1590
 80117fc:	3efa01a0 	.word	0x3efa01a0
 8011800:	16c15177 	.word	0x16c15177
 8011804:	3f56c16c 	.word	0x3f56c16c
 8011808:	5555554c 	.word	0x5555554c
 801180c:	3fa55555 	.word	0x3fa55555
 8011810:	00000000 	.word	0x00000000
 8011814:	3ff00000 	.word	0x3ff00000
 8011818:	3fe00000 	.word	0x3fe00000
 801181c:	3fd33332 	.word	0x3fd33332
 8011820:	3ff00000 	.word	0x3ff00000
 8011824:	3fe90000 	.word	0x3fe90000
 8011828:	3fd20000 	.word	0x3fd20000
 801182c:	00000000 	.word	0x00000000

08011830 <__kernel_rem_pio2>:
 8011830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011834:	ed2d 8b02 	vpush	{d8}
 8011838:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801183c:	f112 0f14 	cmn.w	r2, #20
 8011840:	9308      	str	r3, [sp, #32]
 8011842:	9101      	str	r1, [sp, #4]
 8011844:	4bc4      	ldr	r3, [pc, #784]	; (8011b58 <__kernel_rem_pio2+0x328>)
 8011846:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011848:	900b      	str	r0, [sp, #44]	; 0x2c
 801184a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801184e:	9302      	str	r3, [sp, #8]
 8011850:	9b08      	ldr	r3, [sp, #32]
 8011852:	f103 33ff 	add.w	r3, r3, #4294967295
 8011856:	bfa8      	it	ge
 8011858:	1ed4      	subge	r4, r2, #3
 801185a:	9306      	str	r3, [sp, #24]
 801185c:	bfb2      	itee	lt
 801185e:	2400      	movlt	r4, #0
 8011860:	2318      	movge	r3, #24
 8011862:	fb94 f4f3 	sdivge	r4, r4, r3
 8011866:	f06f 0317 	mvn.w	r3, #23
 801186a:	fb04 3303 	mla	r3, r4, r3, r3
 801186e:	eb03 0a02 	add.w	sl, r3, r2
 8011872:	9b02      	ldr	r3, [sp, #8]
 8011874:	9a06      	ldr	r2, [sp, #24]
 8011876:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8011b48 <__kernel_rem_pio2+0x318>
 801187a:	eb03 0802 	add.w	r8, r3, r2
 801187e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011880:	1aa7      	subs	r7, r4, r2
 8011882:	ae22      	add	r6, sp, #136	; 0x88
 8011884:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011888:	2500      	movs	r5, #0
 801188a:	4545      	cmp	r5, r8
 801188c:	dd13      	ble.n	80118b6 <__kernel_rem_pio2+0x86>
 801188e:	9b08      	ldr	r3, [sp, #32]
 8011890:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8011b48 <__kernel_rem_pio2+0x318>
 8011894:	aa22      	add	r2, sp, #136	; 0x88
 8011896:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801189a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801189e:	f04f 0800 	mov.w	r8, #0
 80118a2:	9b02      	ldr	r3, [sp, #8]
 80118a4:	4598      	cmp	r8, r3
 80118a6:	dc2f      	bgt.n	8011908 <__kernel_rem_pio2+0xd8>
 80118a8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80118ac:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80118b0:	462f      	mov	r7, r5
 80118b2:	2600      	movs	r6, #0
 80118b4:	e01b      	b.n	80118ee <__kernel_rem_pio2+0xbe>
 80118b6:	42ef      	cmn	r7, r5
 80118b8:	d407      	bmi.n	80118ca <__kernel_rem_pio2+0x9a>
 80118ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80118be:	f7ee fe39 	bl	8000534 <__aeabi_i2d>
 80118c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80118c6:	3501      	adds	r5, #1
 80118c8:	e7df      	b.n	801188a <__kernel_rem_pio2+0x5a>
 80118ca:	ec51 0b18 	vmov	r0, r1, d8
 80118ce:	e7f8      	b.n	80118c2 <__kernel_rem_pio2+0x92>
 80118d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80118d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80118d8:	f7ee fe96 	bl	8000608 <__aeabi_dmul>
 80118dc:	4602      	mov	r2, r0
 80118de:	460b      	mov	r3, r1
 80118e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80118e4:	f7ee fcda 	bl	800029c <__adddf3>
 80118e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80118ec:	3601      	adds	r6, #1
 80118ee:	9b06      	ldr	r3, [sp, #24]
 80118f0:	429e      	cmp	r6, r3
 80118f2:	f1a7 0708 	sub.w	r7, r7, #8
 80118f6:	ddeb      	ble.n	80118d0 <__kernel_rem_pio2+0xa0>
 80118f8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80118fc:	f108 0801 	add.w	r8, r8, #1
 8011900:	ecab 7b02 	vstmia	fp!, {d7}
 8011904:	3508      	adds	r5, #8
 8011906:	e7cc      	b.n	80118a2 <__kernel_rem_pio2+0x72>
 8011908:	9b02      	ldr	r3, [sp, #8]
 801190a:	aa0e      	add	r2, sp, #56	; 0x38
 801190c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011910:	930d      	str	r3, [sp, #52]	; 0x34
 8011912:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011914:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011918:	9c02      	ldr	r4, [sp, #8]
 801191a:	930c      	str	r3, [sp, #48]	; 0x30
 801191c:	00e3      	lsls	r3, r4, #3
 801191e:	930a      	str	r3, [sp, #40]	; 0x28
 8011920:	ab9a      	add	r3, sp, #616	; 0x268
 8011922:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011926:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801192a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801192e:	ab72      	add	r3, sp, #456	; 0x1c8
 8011930:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8011934:	46c3      	mov	fp, r8
 8011936:	46a1      	mov	r9, r4
 8011938:	f1b9 0f00 	cmp.w	r9, #0
 801193c:	f1a5 0508 	sub.w	r5, r5, #8
 8011940:	dc77      	bgt.n	8011a32 <__kernel_rem_pio2+0x202>
 8011942:	ec47 6b10 	vmov	d0, r6, r7
 8011946:	4650      	mov	r0, sl
 8011948:	f001 f92a 	bl	8012ba0 <scalbn>
 801194c:	ec57 6b10 	vmov	r6, r7, d0
 8011950:	2200      	movs	r2, #0
 8011952:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011956:	ee10 0a10 	vmov	r0, s0
 801195a:	4639      	mov	r1, r7
 801195c:	f7ee fe54 	bl	8000608 <__aeabi_dmul>
 8011960:	ec41 0b10 	vmov	d0, r0, r1
 8011964:	f001 f89c 	bl	8012aa0 <floor>
 8011968:	4b7c      	ldr	r3, [pc, #496]	; (8011b5c <__kernel_rem_pio2+0x32c>)
 801196a:	ec51 0b10 	vmov	r0, r1, d0
 801196e:	2200      	movs	r2, #0
 8011970:	f7ee fe4a 	bl	8000608 <__aeabi_dmul>
 8011974:	4602      	mov	r2, r0
 8011976:	460b      	mov	r3, r1
 8011978:	4630      	mov	r0, r6
 801197a:	4639      	mov	r1, r7
 801197c:	f7ee fc8c 	bl	8000298 <__aeabi_dsub>
 8011980:	460f      	mov	r7, r1
 8011982:	4606      	mov	r6, r0
 8011984:	f7ef f8f0 	bl	8000b68 <__aeabi_d2iz>
 8011988:	9004      	str	r0, [sp, #16]
 801198a:	f7ee fdd3 	bl	8000534 <__aeabi_i2d>
 801198e:	4602      	mov	r2, r0
 8011990:	460b      	mov	r3, r1
 8011992:	4630      	mov	r0, r6
 8011994:	4639      	mov	r1, r7
 8011996:	f7ee fc7f 	bl	8000298 <__aeabi_dsub>
 801199a:	f1ba 0f00 	cmp.w	sl, #0
 801199e:	4606      	mov	r6, r0
 80119a0:	460f      	mov	r7, r1
 80119a2:	dd6d      	ble.n	8011a80 <__kernel_rem_pio2+0x250>
 80119a4:	1e62      	subs	r2, r4, #1
 80119a6:	ab0e      	add	r3, sp, #56	; 0x38
 80119a8:	9d04      	ldr	r5, [sp, #16]
 80119aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80119ae:	f1ca 0118 	rsb	r1, sl, #24
 80119b2:	fa40 f301 	asr.w	r3, r0, r1
 80119b6:	441d      	add	r5, r3
 80119b8:	408b      	lsls	r3, r1
 80119ba:	1ac0      	subs	r0, r0, r3
 80119bc:	ab0e      	add	r3, sp, #56	; 0x38
 80119be:	9504      	str	r5, [sp, #16]
 80119c0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80119c4:	f1ca 0317 	rsb	r3, sl, #23
 80119c8:	fa40 fb03 	asr.w	fp, r0, r3
 80119cc:	f1bb 0f00 	cmp.w	fp, #0
 80119d0:	dd65      	ble.n	8011a9e <__kernel_rem_pio2+0x26e>
 80119d2:	9b04      	ldr	r3, [sp, #16]
 80119d4:	2200      	movs	r2, #0
 80119d6:	3301      	adds	r3, #1
 80119d8:	9304      	str	r3, [sp, #16]
 80119da:	4615      	mov	r5, r2
 80119dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80119e0:	4294      	cmp	r4, r2
 80119e2:	f300 809c 	bgt.w	8011b1e <__kernel_rem_pio2+0x2ee>
 80119e6:	f1ba 0f00 	cmp.w	sl, #0
 80119ea:	dd07      	ble.n	80119fc <__kernel_rem_pio2+0x1cc>
 80119ec:	f1ba 0f01 	cmp.w	sl, #1
 80119f0:	f000 80c0 	beq.w	8011b74 <__kernel_rem_pio2+0x344>
 80119f4:	f1ba 0f02 	cmp.w	sl, #2
 80119f8:	f000 80c6 	beq.w	8011b88 <__kernel_rem_pio2+0x358>
 80119fc:	f1bb 0f02 	cmp.w	fp, #2
 8011a00:	d14d      	bne.n	8011a9e <__kernel_rem_pio2+0x26e>
 8011a02:	4632      	mov	r2, r6
 8011a04:	463b      	mov	r3, r7
 8011a06:	4956      	ldr	r1, [pc, #344]	; (8011b60 <__kernel_rem_pio2+0x330>)
 8011a08:	2000      	movs	r0, #0
 8011a0a:	f7ee fc45 	bl	8000298 <__aeabi_dsub>
 8011a0e:	4606      	mov	r6, r0
 8011a10:	460f      	mov	r7, r1
 8011a12:	2d00      	cmp	r5, #0
 8011a14:	d043      	beq.n	8011a9e <__kernel_rem_pio2+0x26e>
 8011a16:	4650      	mov	r0, sl
 8011a18:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8011b50 <__kernel_rem_pio2+0x320>
 8011a1c:	f001 f8c0 	bl	8012ba0 <scalbn>
 8011a20:	4630      	mov	r0, r6
 8011a22:	4639      	mov	r1, r7
 8011a24:	ec53 2b10 	vmov	r2, r3, d0
 8011a28:	f7ee fc36 	bl	8000298 <__aeabi_dsub>
 8011a2c:	4606      	mov	r6, r0
 8011a2e:	460f      	mov	r7, r1
 8011a30:	e035      	b.n	8011a9e <__kernel_rem_pio2+0x26e>
 8011a32:	4b4c      	ldr	r3, [pc, #304]	; (8011b64 <__kernel_rem_pio2+0x334>)
 8011a34:	2200      	movs	r2, #0
 8011a36:	4630      	mov	r0, r6
 8011a38:	4639      	mov	r1, r7
 8011a3a:	f7ee fde5 	bl	8000608 <__aeabi_dmul>
 8011a3e:	f7ef f893 	bl	8000b68 <__aeabi_d2iz>
 8011a42:	f7ee fd77 	bl	8000534 <__aeabi_i2d>
 8011a46:	4602      	mov	r2, r0
 8011a48:	460b      	mov	r3, r1
 8011a4a:	ec43 2b18 	vmov	d8, r2, r3
 8011a4e:	4b46      	ldr	r3, [pc, #280]	; (8011b68 <__kernel_rem_pio2+0x338>)
 8011a50:	2200      	movs	r2, #0
 8011a52:	f7ee fdd9 	bl	8000608 <__aeabi_dmul>
 8011a56:	4602      	mov	r2, r0
 8011a58:	460b      	mov	r3, r1
 8011a5a:	4630      	mov	r0, r6
 8011a5c:	4639      	mov	r1, r7
 8011a5e:	f7ee fc1b 	bl	8000298 <__aeabi_dsub>
 8011a62:	f7ef f881 	bl	8000b68 <__aeabi_d2iz>
 8011a66:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011a6a:	f84b 0b04 	str.w	r0, [fp], #4
 8011a6e:	ec51 0b18 	vmov	r0, r1, d8
 8011a72:	f7ee fc13 	bl	800029c <__adddf3>
 8011a76:	f109 39ff 	add.w	r9, r9, #4294967295
 8011a7a:	4606      	mov	r6, r0
 8011a7c:	460f      	mov	r7, r1
 8011a7e:	e75b      	b.n	8011938 <__kernel_rem_pio2+0x108>
 8011a80:	d106      	bne.n	8011a90 <__kernel_rem_pio2+0x260>
 8011a82:	1e63      	subs	r3, r4, #1
 8011a84:	aa0e      	add	r2, sp, #56	; 0x38
 8011a86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011a8a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8011a8e:	e79d      	b.n	80119cc <__kernel_rem_pio2+0x19c>
 8011a90:	4b36      	ldr	r3, [pc, #216]	; (8011b6c <__kernel_rem_pio2+0x33c>)
 8011a92:	2200      	movs	r2, #0
 8011a94:	f7ef f83e 	bl	8000b14 <__aeabi_dcmpge>
 8011a98:	2800      	cmp	r0, #0
 8011a9a:	d13d      	bne.n	8011b18 <__kernel_rem_pio2+0x2e8>
 8011a9c:	4683      	mov	fp, r0
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	4630      	mov	r0, r6
 8011aa4:	4639      	mov	r1, r7
 8011aa6:	f7ef f817 	bl	8000ad8 <__aeabi_dcmpeq>
 8011aaa:	2800      	cmp	r0, #0
 8011aac:	f000 80c0 	beq.w	8011c30 <__kernel_rem_pio2+0x400>
 8011ab0:	1e65      	subs	r5, r4, #1
 8011ab2:	462b      	mov	r3, r5
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	9902      	ldr	r1, [sp, #8]
 8011ab8:	428b      	cmp	r3, r1
 8011aba:	da6c      	bge.n	8011b96 <__kernel_rem_pio2+0x366>
 8011abc:	2a00      	cmp	r2, #0
 8011abe:	f000 8089 	beq.w	8011bd4 <__kernel_rem_pio2+0x3a4>
 8011ac2:	ab0e      	add	r3, sp, #56	; 0x38
 8011ac4:	f1aa 0a18 	sub.w	sl, sl, #24
 8011ac8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	f000 80ad 	beq.w	8011c2c <__kernel_rem_pio2+0x3fc>
 8011ad2:	4650      	mov	r0, sl
 8011ad4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8011b50 <__kernel_rem_pio2+0x320>
 8011ad8:	f001 f862 	bl	8012ba0 <scalbn>
 8011adc:	ab9a      	add	r3, sp, #616	; 0x268
 8011ade:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011ae2:	ec57 6b10 	vmov	r6, r7, d0
 8011ae6:	00ec      	lsls	r4, r5, #3
 8011ae8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8011aec:	46aa      	mov	sl, r5
 8011aee:	f1ba 0f00 	cmp.w	sl, #0
 8011af2:	f280 80d6 	bge.w	8011ca2 <__kernel_rem_pio2+0x472>
 8011af6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8011b48 <__kernel_rem_pio2+0x318>
 8011afa:	462e      	mov	r6, r5
 8011afc:	2e00      	cmp	r6, #0
 8011afe:	f2c0 8104 	blt.w	8011d0a <__kernel_rem_pio2+0x4da>
 8011b02:	ab72      	add	r3, sp, #456	; 0x1c8
 8011b04:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011b08:	f8df a064 	ldr.w	sl, [pc, #100]	; 8011b70 <__kernel_rem_pio2+0x340>
 8011b0c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8011b10:	f04f 0800 	mov.w	r8, #0
 8011b14:	1baf      	subs	r7, r5, r6
 8011b16:	e0ea      	b.n	8011cee <__kernel_rem_pio2+0x4be>
 8011b18:	f04f 0b02 	mov.w	fp, #2
 8011b1c:	e759      	b.n	80119d2 <__kernel_rem_pio2+0x1a2>
 8011b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8011b22:	b955      	cbnz	r5, 8011b3a <__kernel_rem_pio2+0x30a>
 8011b24:	b123      	cbz	r3, 8011b30 <__kernel_rem_pio2+0x300>
 8011b26:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011b2a:	f8c8 3000 	str.w	r3, [r8]
 8011b2e:	2301      	movs	r3, #1
 8011b30:	3201      	adds	r2, #1
 8011b32:	f108 0804 	add.w	r8, r8, #4
 8011b36:	461d      	mov	r5, r3
 8011b38:	e752      	b.n	80119e0 <__kernel_rem_pio2+0x1b0>
 8011b3a:	1acb      	subs	r3, r1, r3
 8011b3c:	f8c8 3000 	str.w	r3, [r8]
 8011b40:	462b      	mov	r3, r5
 8011b42:	e7f5      	b.n	8011b30 <__kernel_rem_pio2+0x300>
 8011b44:	f3af 8000 	nop.w
	...
 8011b54:	3ff00000 	.word	0x3ff00000
 8011b58:	080138d0 	.word	0x080138d0
 8011b5c:	40200000 	.word	0x40200000
 8011b60:	3ff00000 	.word	0x3ff00000
 8011b64:	3e700000 	.word	0x3e700000
 8011b68:	41700000 	.word	0x41700000
 8011b6c:	3fe00000 	.word	0x3fe00000
 8011b70:	08013890 	.word	0x08013890
 8011b74:	1e62      	subs	r2, r4, #1
 8011b76:	ab0e      	add	r3, sp, #56	; 0x38
 8011b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b7c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011b80:	a90e      	add	r1, sp, #56	; 0x38
 8011b82:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011b86:	e739      	b.n	80119fc <__kernel_rem_pio2+0x1cc>
 8011b88:	1e62      	subs	r2, r4, #1
 8011b8a:	ab0e      	add	r3, sp, #56	; 0x38
 8011b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011b94:	e7f4      	b.n	8011b80 <__kernel_rem_pio2+0x350>
 8011b96:	a90e      	add	r1, sp, #56	; 0x38
 8011b98:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011b9c:	3b01      	subs	r3, #1
 8011b9e:	430a      	orrs	r2, r1
 8011ba0:	e789      	b.n	8011ab6 <__kernel_rem_pio2+0x286>
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011ba8:	2900      	cmp	r1, #0
 8011baa:	d0fa      	beq.n	8011ba2 <__kernel_rem_pio2+0x372>
 8011bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011bae:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8011bb2:	446a      	add	r2, sp
 8011bb4:	3a98      	subs	r2, #152	; 0x98
 8011bb6:	920a      	str	r2, [sp, #40]	; 0x28
 8011bb8:	9a08      	ldr	r2, [sp, #32]
 8011bba:	18e3      	adds	r3, r4, r3
 8011bbc:	18a5      	adds	r5, r4, r2
 8011bbe:	aa22      	add	r2, sp, #136	; 0x88
 8011bc0:	f104 0801 	add.w	r8, r4, #1
 8011bc4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011bc8:	9304      	str	r3, [sp, #16]
 8011bca:	9b04      	ldr	r3, [sp, #16]
 8011bcc:	4543      	cmp	r3, r8
 8011bce:	da04      	bge.n	8011bda <__kernel_rem_pio2+0x3aa>
 8011bd0:	461c      	mov	r4, r3
 8011bd2:	e6a3      	b.n	801191c <__kernel_rem_pio2+0xec>
 8011bd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	e7e4      	b.n	8011ba4 <__kernel_rem_pio2+0x374>
 8011bda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011bdc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011be0:	f7ee fca8 	bl	8000534 <__aeabi_i2d>
 8011be4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bea:	46ab      	mov	fp, r5
 8011bec:	461c      	mov	r4, r3
 8011bee:	f04f 0900 	mov.w	r9, #0
 8011bf2:	2600      	movs	r6, #0
 8011bf4:	2700      	movs	r7, #0
 8011bf6:	9b06      	ldr	r3, [sp, #24]
 8011bf8:	4599      	cmp	r9, r3
 8011bfa:	dd06      	ble.n	8011c0a <__kernel_rem_pio2+0x3da>
 8011bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bfe:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011c02:	f108 0801 	add.w	r8, r8, #1
 8011c06:	930a      	str	r3, [sp, #40]	; 0x28
 8011c08:	e7df      	b.n	8011bca <__kernel_rem_pio2+0x39a>
 8011c0a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011c0e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011c12:	f7ee fcf9 	bl	8000608 <__aeabi_dmul>
 8011c16:	4602      	mov	r2, r0
 8011c18:	460b      	mov	r3, r1
 8011c1a:	4630      	mov	r0, r6
 8011c1c:	4639      	mov	r1, r7
 8011c1e:	f7ee fb3d 	bl	800029c <__adddf3>
 8011c22:	f109 0901 	add.w	r9, r9, #1
 8011c26:	4606      	mov	r6, r0
 8011c28:	460f      	mov	r7, r1
 8011c2a:	e7e4      	b.n	8011bf6 <__kernel_rem_pio2+0x3c6>
 8011c2c:	3d01      	subs	r5, #1
 8011c2e:	e748      	b.n	8011ac2 <__kernel_rem_pio2+0x292>
 8011c30:	ec47 6b10 	vmov	d0, r6, r7
 8011c34:	f1ca 0000 	rsb	r0, sl, #0
 8011c38:	f000 ffb2 	bl	8012ba0 <scalbn>
 8011c3c:	ec57 6b10 	vmov	r6, r7, d0
 8011c40:	4ba0      	ldr	r3, [pc, #640]	; (8011ec4 <__kernel_rem_pio2+0x694>)
 8011c42:	ee10 0a10 	vmov	r0, s0
 8011c46:	2200      	movs	r2, #0
 8011c48:	4639      	mov	r1, r7
 8011c4a:	f7ee ff63 	bl	8000b14 <__aeabi_dcmpge>
 8011c4e:	b1f8      	cbz	r0, 8011c90 <__kernel_rem_pio2+0x460>
 8011c50:	4b9d      	ldr	r3, [pc, #628]	; (8011ec8 <__kernel_rem_pio2+0x698>)
 8011c52:	2200      	movs	r2, #0
 8011c54:	4630      	mov	r0, r6
 8011c56:	4639      	mov	r1, r7
 8011c58:	f7ee fcd6 	bl	8000608 <__aeabi_dmul>
 8011c5c:	f7ee ff84 	bl	8000b68 <__aeabi_d2iz>
 8011c60:	4680      	mov	r8, r0
 8011c62:	f7ee fc67 	bl	8000534 <__aeabi_i2d>
 8011c66:	4b97      	ldr	r3, [pc, #604]	; (8011ec4 <__kernel_rem_pio2+0x694>)
 8011c68:	2200      	movs	r2, #0
 8011c6a:	f7ee fccd 	bl	8000608 <__aeabi_dmul>
 8011c6e:	460b      	mov	r3, r1
 8011c70:	4602      	mov	r2, r0
 8011c72:	4639      	mov	r1, r7
 8011c74:	4630      	mov	r0, r6
 8011c76:	f7ee fb0f 	bl	8000298 <__aeabi_dsub>
 8011c7a:	f7ee ff75 	bl	8000b68 <__aeabi_d2iz>
 8011c7e:	1c65      	adds	r5, r4, #1
 8011c80:	ab0e      	add	r3, sp, #56	; 0x38
 8011c82:	f10a 0a18 	add.w	sl, sl, #24
 8011c86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011c8a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011c8e:	e720      	b.n	8011ad2 <__kernel_rem_pio2+0x2a2>
 8011c90:	4630      	mov	r0, r6
 8011c92:	4639      	mov	r1, r7
 8011c94:	f7ee ff68 	bl	8000b68 <__aeabi_d2iz>
 8011c98:	ab0e      	add	r3, sp, #56	; 0x38
 8011c9a:	4625      	mov	r5, r4
 8011c9c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011ca0:	e717      	b.n	8011ad2 <__kernel_rem_pio2+0x2a2>
 8011ca2:	ab0e      	add	r3, sp, #56	; 0x38
 8011ca4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011ca8:	f7ee fc44 	bl	8000534 <__aeabi_i2d>
 8011cac:	4632      	mov	r2, r6
 8011cae:	463b      	mov	r3, r7
 8011cb0:	f7ee fcaa 	bl	8000608 <__aeabi_dmul>
 8011cb4:	4b84      	ldr	r3, [pc, #528]	; (8011ec8 <__kernel_rem_pio2+0x698>)
 8011cb6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8011cba:	2200      	movs	r2, #0
 8011cbc:	4630      	mov	r0, r6
 8011cbe:	4639      	mov	r1, r7
 8011cc0:	f7ee fca2 	bl	8000608 <__aeabi_dmul>
 8011cc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011cc8:	4606      	mov	r6, r0
 8011cca:	460f      	mov	r7, r1
 8011ccc:	e70f      	b.n	8011aee <__kernel_rem_pio2+0x2be>
 8011cce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8011cd2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8011cd6:	f7ee fc97 	bl	8000608 <__aeabi_dmul>
 8011cda:	4602      	mov	r2, r0
 8011cdc:	460b      	mov	r3, r1
 8011cde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ce2:	f7ee fadb 	bl	800029c <__adddf3>
 8011ce6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011cea:	f108 0801 	add.w	r8, r8, #1
 8011cee:	9b02      	ldr	r3, [sp, #8]
 8011cf0:	4598      	cmp	r8, r3
 8011cf2:	dc01      	bgt.n	8011cf8 <__kernel_rem_pio2+0x4c8>
 8011cf4:	45b8      	cmp	r8, r7
 8011cf6:	ddea      	ble.n	8011cce <__kernel_rem_pio2+0x49e>
 8011cf8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011cfc:	ab4a      	add	r3, sp, #296	; 0x128
 8011cfe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011d02:	ed87 7b00 	vstr	d7, [r7]
 8011d06:	3e01      	subs	r6, #1
 8011d08:	e6f8      	b.n	8011afc <__kernel_rem_pio2+0x2cc>
 8011d0a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011d0c:	2b02      	cmp	r3, #2
 8011d0e:	dc0b      	bgt.n	8011d28 <__kernel_rem_pio2+0x4f8>
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	dc35      	bgt.n	8011d80 <__kernel_rem_pio2+0x550>
 8011d14:	d059      	beq.n	8011dca <__kernel_rem_pio2+0x59a>
 8011d16:	9b04      	ldr	r3, [sp, #16]
 8011d18:	f003 0007 	and.w	r0, r3, #7
 8011d1c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011d20:	ecbd 8b02 	vpop	{d8}
 8011d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d28:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011d2a:	2b03      	cmp	r3, #3
 8011d2c:	d1f3      	bne.n	8011d16 <__kernel_rem_pio2+0x4e6>
 8011d2e:	ab4a      	add	r3, sp, #296	; 0x128
 8011d30:	4423      	add	r3, r4
 8011d32:	9306      	str	r3, [sp, #24]
 8011d34:	461c      	mov	r4, r3
 8011d36:	469a      	mov	sl, r3
 8011d38:	9502      	str	r5, [sp, #8]
 8011d3a:	9b02      	ldr	r3, [sp, #8]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	f1aa 0a08 	sub.w	sl, sl, #8
 8011d42:	dc6b      	bgt.n	8011e1c <__kernel_rem_pio2+0x5ec>
 8011d44:	46aa      	mov	sl, r5
 8011d46:	f1ba 0f01 	cmp.w	sl, #1
 8011d4a:	f1a4 0408 	sub.w	r4, r4, #8
 8011d4e:	f300 8085 	bgt.w	8011e5c <__kernel_rem_pio2+0x62c>
 8011d52:	9c06      	ldr	r4, [sp, #24]
 8011d54:	2000      	movs	r0, #0
 8011d56:	3408      	adds	r4, #8
 8011d58:	2100      	movs	r1, #0
 8011d5a:	2d01      	cmp	r5, #1
 8011d5c:	f300 809d 	bgt.w	8011e9a <__kernel_rem_pio2+0x66a>
 8011d60:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011d64:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8011d68:	f1bb 0f00 	cmp.w	fp, #0
 8011d6c:	f040 809b 	bne.w	8011ea6 <__kernel_rem_pio2+0x676>
 8011d70:	9b01      	ldr	r3, [sp, #4]
 8011d72:	e9c3 5600 	strd	r5, r6, [r3]
 8011d76:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011d7a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011d7e:	e7ca      	b.n	8011d16 <__kernel_rem_pio2+0x4e6>
 8011d80:	3408      	adds	r4, #8
 8011d82:	ab4a      	add	r3, sp, #296	; 0x128
 8011d84:	441c      	add	r4, r3
 8011d86:	462e      	mov	r6, r5
 8011d88:	2000      	movs	r0, #0
 8011d8a:	2100      	movs	r1, #0
 8011d8c:	2e00      	cmp	r6, #0
 8011d8e:	da36      	bge.n	8011dfe <__kernel_rem_pio2+0x5ce>
 8011d90:	f1bb 0f00 	cmp.w	fp, #0
 8011d94:	d039      	beq.n	8011e0a <__kernel_rem_pio2+0x5da>
 8011d96:	4602      	mov	r2, r0
 8011d98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d9c:	9c01      	ldr	r4, [sp, #4]
 8011d9e:	e9c4 2300 	strd	r2, r3, [r4]
 8011da2:	4602      	mov	r2, r0
 8011da4:	460b      	mov	r3, r1
 8011da6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011daa:	f7ee fa75 	bl	8000298 <__aeabi_dsub>
 8011dae:	ae4c      	add	r6, sp, #304	; 0x130
 8011db0:	2401      	movs	r4, #1
 8011db2:	42a5      	cmp	r5, r4
 8011db4:	da2c      	bge.n	8011e10 <__kernel_rem_pio2+0x5e0>
 8011db6:	f1bb 0f00 	cmp.w	fp, #0
 8011dba:	d002      	beq.n	8011dc2 <__kernel_rem_pio2+0x592>
 8011dbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	9b01      	ldr	r3, [sp, #4]
 8011dc4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011dc8:	e7a5      	b.n	8011d16 <__kernel_rem_pio2+0x4e6>
 8011dca:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8011dce:	eb0d 0403 	add.w	r4, sp, r3
 8011dd2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011dd6:	2000      	movs	r0, #0
 8011dd8:	2100      	movs	r1, #0
 8011dda:	2d00      	cmp	r5, #0
 8011ddc:	da09      	bge.n	8011df2 <__kernel_rem_pio2+0x5c2>
 8011dde:	f1bb 0f00 	cmp.w	fp, #0
 8011de2:	d002      	beq.n	8011dea <__kernel_rem_pio2+0x5ba>
 8011de4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011de8:	4619      	mov	r1, r3
 8011dea:	9b01      	ldr	r3, [sp, #4]
 8011dec:	e9c3 0100 	strd	r0, r1, [r3]
 8011df0:	e791      	b.n	8011d16 <__kernel_rem_pio2+0x4e6>
 8011df2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011df6:	f7ee fa51 	bl	800029c <__adddf3>
 8011dfa:	3d01      	subs	r5, #1
 8011dfc:	e7ed      	b.n	8011dda <__kernel_rem_pio2+0x5aa>
 8011dfe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011e02:	f7ee fa4b 	bl	800029c <__adddf3>
 8011e06:	3e01      	subs	r6, #1
 8011e08:	e7c0      	b.n	8011d8c <__kernel_rem_pio2+0x55c>
 8011e0a:	4602      	mov	r2, r0
 8011e0c:	460b      	mov	r3, r1
 8011e0e:	e7c5      	b.n	8011d9c <__kernel_rem_pio2+0x56c>
 8011e10:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011e14:	f7ee fa42 	bl	800029c <__adddf3>
 8011e18:	3401      	adds	r4, #1
 8011e1a:	e7ca      	b.n	8011db2 <__kernel_rem_pio2+0x582>
 8011e1c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011e20:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011e24:	9b02      	ldr	r3, [sp, #8]
 8011e26:	3b01      	subs	r3, #1
 8011e28:	9302      	str	r3, [sp, #8]
 8011e2a:	4632      	mov	r2, r6
 8011e2c:	463b      	mov	r3, r7
 8011e2e:	4640      	mov	r0, r8
 8011e30:	4649      	mov	r1, r9
 8011e32:	f7ee fa33 	bl	800029c <__adddf3>
 8011e36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011e3a:	4602      	mov	r2, r0
 8011e3c:	460b      	mov	r3, r1
 8011e3e:	4640      	mov	r0, r8
 8011e40:	4649      	mov	r1, r9
 8011e42:	f7ee fa29 	bl	8000298 <__aeabi_dsub>
 8011e46:	4632      	mov	r2, r6
 8011e48:	463b      	mov	r3, r7
 8011e4a:	f7ee fa27 	bl	800029c <__adddf3>
 8011e4e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011e52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011e56:	ed8a 7b00 	vstr	d7, [sl]
 8011e5a:	e76e      	b.n	8011d3a <__kernel_rem_pio2+0x50a>
 8011e5c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011e60:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011e64:	4640      	mov	r0, r8
 8011e66:	4632      	mov	r2, r6
 8011e68:	463b      	mov	r3, r7
 8011e6a:	4649      	mov	r1, r9
 8011e6c:	f7ee fa16 	bl	800029c <__adddf3>
 8011e70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e74:	4602      	mov	r2, r0
 8011e76:	460b      	mov	r3, r1
 8011e78:	4640      	mov	r0, r8
 8011e7a:	4649      	mov	r1, r9
 8011e7c:	f7ee fa0c 	bl	8000298 <__aeabi_dsub>
 8011e80:	4632      	mov	r2, r6
 8011e82:	463b      	mov	r3, r7
 8011e84:	f7ee fa0a 	bl	800029c <__adddf3>
 8011e88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011e8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011e90:	ed84 7b00 	vstr	d7, [r4]
 8011e94:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011e98:	e755      	b.n	8011d46 <__kernel_rem_pio2+0x516>
 8011e9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011e9e:	f7ee f9fd 	bl	800029c <__adddf3>
 8011ea2:	3d01      	subs	r5, #1
 8011ea4:	e759      	b.n	8011d5a <__kernel_rem_pio2+0x52a>
 8011ea6:	9b01      	ldr	r3, [sp, #4]
 8011ea8:	9a01      	ldr	r2, [sp, #4]
 8011eaa:	601d      	str	r5, [r3, #0]
 8011eac:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011eb0:	605c      	str	r4, [r3, #4]
 8011eb2:	609f      	str	r7, [r3, #8]
 8011eb4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011eb8:	60d3      	str	r3, [r2, #12]
 8011eba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ebe:	6110      	str	r0, [r2, #16]
 8011ec0:	6153      	str	r3, [r2, #20]
 8011ec2:	e728      	b.n	8011d16 <__kernel_rem_pio2+0x4e6>
 8011ec4:	41700000 	.word	0x41700000
 8011ec8:	3e700000 	.word	0x3e700000
 8011ecc:	00000000 	.word	0x00000000

08011ed0 <__kernel_sin>:
 8011ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ed4:	ed2d 8b04 	vpush	{d8-d9}
 8011ed8:	eeb0 8a41 	vmov.f32	s16, s2
 8011edc:	eef0 8a61 	vmov.f32	s17, s3
 8011ee0:	ec55 4b10 	vmov	r4, r5, d0
 8011ee4:	b083      	sub	sp, #12
 8011ee6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011eea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011eee:	9001      	str	r0, [sp, #4]
 8011ef0:	da06      	bge.n	8011f00 <__kernel_sin+0x30>
 8011ef2:	ee10 0a10 	vmov	r0, s0
 8011ef6:	4629      	mov	r1, r5
 8011ef8:	f7ee fe36 	bl	8000b68 <__aeabi_d2iz>
 8011efc:	2800      	cmp	r0, #0
 8011efe:	d051      	beq.n	8011fa4 <__kernel_sin+0xd4>
 8011f00:	4622      	mov	r2, r4
 8011f02:	462b      	mov	r3, r5
 8011f04:	4620      	mov	r0, r4
 8011f06:	4629      	mov	r1, r5
 8011f08:	f7ee fb7e 	bl	8000608 <__aeabi_dmul>
 8011f0c:	4682      	mov	sl, r0
 8011f0e:	468b      	mov	fp, r1
 8011f10:	4602      	mov	r2, r0
 8011f12:	460b      	mov	r3, r1
 8011f14:	4620      	mov	r0, r4
 8011f16:	4629      	mov	r1, r5
 8011f18:	f7ee fb76 	bl	8000608 <__aeabi_dmul>
 8011f1c:	a341      	add	r3, pc, #260	; (adr r3, 8012024 <__kernel_sin+0x154>)
 8011f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f22:	4680      	mov	r8, r0
 8011f24:	4689      	mov	r9, r1
 8011f26:	4650      	mov	r0, sl
 8011f28:	4659      	mov	r1, fp
 8011f2a:	f7ee fb6d 	bl	8000608 <__aeabi_dmul>
 8011f2e:	a33f      	add	r3, pc, #252	; (adr r3, 801202c <__kernel_sin+0x15c>)
 8011f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f34:	f7ee f9b0 	bl	8000298 <__aeabi_dsub>
 8011f38:	4652      	mov	r2, sl
 8011f3a:	465b      	mov	r3, fp
 8011f3c:	f7ee fb64 	bl	8000608 <__aeabi_dmul>
 8011f40:	a33c      	add	r3, pc, #240	; (adr r3, 8012034 <__kernel_sin+0x164>)
 8011f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f46:	f7ee f9a9 	bl	800029c <__adddf3>
 8011f4a:	4652      	mov	r2, sl
 8011f4c:	465b      	mov	r3, fp
 8011f4e:	f7ee fb5b 	bl	8000608 <__aeabi_dmul>
 8011f52:	a33a      	add	r3, pc, #232	; (adr r3, 801203c <__kernel_sin+0x16c>)
 8011f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f58:	f7ee f99e 	bl	8000298 <__aeabi_dsub>
 8011f5c:	4652      	mov	r2, sl
 8011f5e:	465b      	mov	r3, fp
 8011f60:	f7ee fb52 	bl	8000608 <__aeabi_dmul>
 8011f64:	a337      	add	r3, pc, #220	; (adr r3, 8012044 <__kernel_sin+0x174>)
 8011f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f6a:	f7ee f997 	bl	800029c <__adddf3>
 8011f6e:	9b01      	ldr	r3, [sp, #4]
 8011f70:	4606      	mov	r6, r0
 8011f72:	460f      	mov	r7, r1
 8011f74:	b9eb      	cbnz	r3, 8011fb2 <__kernel_sin+0xe2>
 8011f76:	4602      	mov	r2, r0
 8011f78:	460b      	mov	r3, r1
 8011f7a:	4650      	mov	r0, sl
 8011f7c:	4659      	mov	r1, fp
 8011f7e:	f7ee fb43 	bl	8000608 <__aeabi_dmul>
 8011f82:	a325      	add	r3, pc, #148	; (adr r3, 8012018 <__kernel_sin+0x148>)
 8011f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f88:	f7ee f986 	bl	8000298 <__aeabi_dsub>
 8011f8c:	4642      	mov	r2, r8
 8011f8e:	464b      	mov	r3, r9
 8011f90:	f7ee fb3a 	bl	8000608 <__aeabi_dmul>
 8011f94:	4602      	mov	r2, r0
 8011f96:	460b      	mov	r3, r1
 8011f98:	4620      	mov	r0, r4
 8011f9a:	4629      	mov	r1, r5
 8011f9c:	f7ee f97e 	bl	800029c <__adddf3>
 8011fa0:	4604      	mov	r4, r0
 8011fa2:	460d      	mov	r5, r1
 8011fa4:	ec45 4b10 	vmov	d0, r4, r5
 8011fa8:	b003      	add	sp, #12
 8011faa:	ecbd 8b04 	vpop	{d8-d9}
 8011fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fb2:	4b1b      	ldr	r3, [pc, #108]	; (8012020 <__kernel_sin+0x150>)
 8011fb4:	ec51 0b18 	vmov	r0, r1, d8
 8011fb8:	2200      	movs	r2, #0
 8011fba:	f7ee fb25 	bl	8000608 <__aeabi_dmul>
 8011fbe:	4632      	mov	r2, r6
 8011fc0:	ec41 0b19 	vmov	d9, r0, r1
 8011fc4:	463b      	mov	r3, r7
 8011fc6:	4640      	mov	r0, r8
 8011fc8:	4649      	mov	r1, r9
 8011fca:	f7ee fb1d 	bl	8000608 <__aeabi_dmul>
 8011fce:	4602      	mov	r2, r0
 8011fd0:	460b      	mov	r3, r1
 8011fd2:	ec51 0b19 	vmov	r0, r1, d9
 8011fd6:	f7ee f95f 	bl	8000298 <__aeabi_dsub>
 8011fda:	4652      	mov	r2, sl
 8011fdc:	465b      	mov	r3, fp
 8011fde:	f7ee fb13 	bl	8000608 <__aeabi_dmul>
 8011fe2:	ec53 2b18 	vmov	r2, r3, d8
 8011fe6:	f7ee f957 	bl	8000298 <__aeabi_dsub>
 8011fea:	a30b      	add	r3, pc, #44	; (adr r3, 8012018 <__kernel_sin+0x148>)
 8011fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff0:	4606      	mov	r6, r0
 8011ff2:	460f      	mov	r7, r1
 8011ff4:	4640      	mov	r0, r8
 8011ff6:	4649      	mov	r1, r9
 8011ff8:	f7ee fb06 	bl	8000608 <__aeabi_dmul>
 8011ffc:	4602      	mov	r2, r0
 8011ffe:	460b      	mov	r3, r1
 8012000:	4630      	mov	r0, r6
 8012002:	4639      	mov	r1, r7
 8012004:	f7ee f94a 	bl	800029c <__adddf3>
 8012008:	4602      	mov	r2, r0
 801200a:	460b      	mov	r3, r1
 801200c:	4620      	mov	r0, r4
 801200e:	4629      	mov	r1, r5
 8012010:	f7ee f942 	bl	8000298 <__aeabi_dsub>
 8012014:	e7c4      	b.n	8011fa0 <__kernel_sin+0xd0>
 8012016:	bf00      	nop
 8012018:	55555549 	.word	0x55555549
 801201c:	3fc55555 	.word	0x3fc55555
 8012020:	3fe00000 	.word	0x3fe00000
 8012024:	5acfd57c 	.word	0x5acfd57c
 8012028:	3de5d93a 	.word	0x3de5d93a
 801202c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012030:	3e5ae5e6 	.word	0x3e5ae5e6
 8012034:	57b1fe7d 	.word	0x57b1fe7d
 8012038:	3ec71de3 	.word	0x3ec71de3
 801203c:	19c161d5 	.word	0x19c161d5
 8012040:	3f2a01a0 	.word	0x3f2a01a0
 8012044:	1110f8a6 	.word	0x1110f8a6
 8012048:	3f811111 	.word	0x3f811111
 801204c:	00000000 	.word	0x00000000

08012050 <__kernel_tan>:
 8012050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012054:	ed2d 8b06 	vpush	{d8-d10}
 8012058:	ec5b ab10 	vmov	sl, fp, d0
 801205c:	4be0      	ldr	r3, [pc, #896]	; (80123e0 <__kernel_tan+0x390>)
 801205e:	b083      	sub	sp, #12
 8012060:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8012064:	429f      	cmp	r7, r3
 8012066:	ec59 8b11 	vmov	r8, r9, d1
 801206a:	4606      	mov	r6, r0
 801206c:	f8cd b000 	str.w	fp, [sp]
 8012070:	dc61      	bgt.n	8012136 <__kernel_tan+0xe6>
 8012072:	ee10 0a10 	vmov	r0, s0
 8012076:	4659      	mov	r1, fp
 8012078:	f7ee fd76 	bl	8000b68 <__aeabi_d2iz>
 801207c:	4605      	mov	r5, r0
 801207e:	2800      	cmp	r0, #0
 8012080:	f040 8083 	bne.w	801218a <__kernel_tan+0x13a>
 8012084:	1c73      	adds	r3, r6, #1
 8012086:	4652      	mov	r2, sl
 8012088:	4313      	orrs	r3, r2
 801208a:	433b      	orrs	r3, r7
 801208c:	d112      	bne.n	80120b4 <__kernel_tan+0x64>
 801208e:	ec4b ab10 	vmov	d0, sl, fp
 8012092:	f7fe fd5d 	bl	8010b50 <fabs>
 8012096:	49d3      	ldr	r1, [pc, #844]	; (80123e4 <__kernel_tan+0x394>)
 8012098:	ec53 2b10 	vmov	r2, r3, d0
 801209c:	2000      	movs	r0, #0
 801209e:	f7ee fbdd 	bl	800085c <__aeabi_ddiv>
 80120a2:	4682      	mov	sl, r0
 80120a4:	468b      	mov	fp, r1
 80120a6:	ec4b ab10 	vmov	d0, sl, fp
 80120aa:	b003      	add	sp, #12
 80120ac:	ecbd 8b06 	vpop	{d8-d10}
 80120b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120b4:	2e01      	cmp	r6, #1
 80120b6:	d0f6      	beq.n	80120a6 <__kernel_tan+0x56>
 80120b8:	4642      	mov	r2, r8
 80120ba:	464b      	mov	r3, r9
 80120bc:	4650      	mov	r0, sl
 80120be:	4659      	mov	r1, fp
 80120c0:	f7ee f8ec 	bl	800029c <__adddf3>
 80120c4:	4602      	mov	r2, r0
 80120c6:	460b      	mov	r3, r1
 80120c8:	460f      	mov	r7, r1
 80120ca:	2000      	movs	r0, #0
 80120cc:	49c6      	ldr	r1, [pc, #792]	; (80123e8 <__kernel_tan+0x398>)
 80120ce:	f7ee fbc5 	bl	800085c <__aeabi_ddiv>
 80120d2:	e9cd 0100 	strd	r0, r1, [sp]
 80120d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120da:	462e      	mov	r6, r5
 80120dc:	4652      	mov	r2, sl
 80120de:	462c      	mov	r4, r5
 80120e0:	4630      	mov	r0, r6
 80120e2:	461d      	mov	r5, r3
 80120e4:	4639      	mov	r1, r7
 80120e6:	465b      	mov	r3, fp
 80120e8:	f7ee f8d6 	bl	8000298 <__aeabi_dsub>
 80120ec:	4602      	mov	r2, r0
 80120ee:	460b      	mov	r3, r1
 80120f0:	4640      	mov	r0, r8
 80120f2:	4649      	mov	r1, r9
 80120f4:	f7ee f8d0 	bl	8000298 <__aeabi_dsub>
 80120f8:	4632      	mov	r2, r6
 80120fa:	462b      	mov	r3, r5
 80120fc:	f7ee fa84 	bl	8000608 <__aeabi_dmul>
 8012100:	4632      	mov	r2, r6
 8012102:	4680      	mov	r8, r0
 8012104:	4689      	mov	r9, r1
 8012106:	462b      	mov	r3, r5
 8012108:	4630      	mov	r0, r6
 801210a:	4639      	mov	r1, r7
 801210c:	f7ee fa7c 	bl	8000608 <__aeabi_dmul>
 8012110:	4bb4      	ldr	r3, [pc, #720]	; (80123e4 <__kernel_tan+0x394>)
 8012112:	2200      	movs	r2, #0
 8012114:	f7ee f8c2 	bl	800029c <__adddf3>
 8012118:	4602      	mov	r2, r0
 801211a:	460b      	mov	r3, r1
 801211c:	4640      	mov	r0, r8
 801211e:	4649      	mov	r1, r9
 8012120:	f7ee f8bc 	bl	800029c <__adddf3>
 8012124:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012128:	f7ee fa6e 	bl	8000608 <__aeabi_dmul>
 801212c:	4622      	mov	r2, r4
 801212e:	462b      	mov	r3, r5
 8012130:	f7ee f8b4 	bl	800029c <__adddf3>
 8012134:	e7b5      	b.n	80120a2 <__kernel_tan+0x52>
 8012136:	4bad      	ldr	r3, [pc, #692]	; (80123ec <__kernel_tan+0x39c>)
 8012138:	429f      	cmp	r7, r3
 801213a:	dd26      	ble.n	801218a <__kernel_tan+0x13a>
 801213c:	9b00      	ldr	r3, [sp, #0]
 801213e:	2b00      	cmp	r3, #0
 8012140:	da09      	bge.n	8012156 <__kernel_tan+0x106>
 8012142:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012146:	469b      	mov	fp, r3
 8012148:	ee10 aa10 	vmov	sl, s0
 801214c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012150:	ee11 8a10 	vmov	r8, s2
 8012154:	4699      	mov	r9, r3
 8012156:	4652      	mov	r2, sl
 8012158:	465b      	mov	r3, fp
 801215a:	a183      	add	r1, pc, #524	; (adr r1, 8012368 <__kernel_tan+0x318>)
 801215c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012160:	f7ee f89a 	bl	8000298 <__aeabi_dsub>
 8012164:	4642      	mov	r2, r8
 8012166:	464b      	mov	r3, r9
 8012168:	4604      	mov	r4, r0
 801216a:	460d      	mov	r5, r1
 801216c:	a180      	add	r1, pc, #512	; (adr r1, 8012370 <__kernel_tan+0x320>)
 801216e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012172:	f7ee f891 	bl	8000298 <__aeabi_dsub>
 8012176:	4622      	mov	r2, r4
 8012178:	462b      	mov	r3, r5
 801217a:	f7ee f88f 	bl	800029c <__adddf3>
 801217e:	f04f 0800 	mov.w	r8, #0
 8012182:	4682      	mov	sl, r0
 8012184:	468b      	mov	fp, r1
 8012186:	f04f 0900 	mov.w	r9, #0
 801218a:	4652      	mov	r2, sl
 801218c:	465b      	mov	r3, fp
 801218e:	4650      	mov	r0, sl
 8012190:	4659      	mov	r1, fp
 8012192:	f7ee fa39 	bl	8000608 <__aeabi_dmul>
 8012196:	4602      	mov	r2, r0
 8012198:	460b      	mov	r3, r1
 801219a:	ec43 2b18 	vmov	d8, r2, r3
 801219e:	f7ee fa33 	bl	8000608 <__aeabi_dmul>
 80121a2:	ec53 2b18 	vmov	r2, r3, d8
 80121a6:	4604      	mov	r4, r0
 80121a8:	460d      	mov	r5, r1
 80121aa:	4650      	mov	r0, sl
 80121ac:	4659      	mov	r1, fp
 80121ae:	f7ee fa2b 	bl	8000608 <__aeabi_dmul>
 80121b2:	a371      	add	r3, pc, #452	; (adr r3, 8012378 <__kernel_tan+0x328>)
 80121b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b8:	ec41 0b19 	vmov	d9, r0, r1
 80121bc:	4620      	mov	r0, r4
 80121be:	4629      	mov	r1, r5
 80121c0:	f7ee fa22 	bl	8000608 <__aeabi_dmul>
 80121c4:	a36e      	add	r3, pc, #440	; (adr r3, 8012380 <__kernel_tan+0x330>)
 80121c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ca:	f7ee f867 	bl	800029c <__adddf3>
 80121ce:	4622      	mov	r2, r4
 80121d0:	462b      	mov	r3, r5
 80121d2:	f7ee fa19 	bl	8000608 <__aeabi_dmul>
 80121d6:	a36c      	add	r3, pc, #432	; (adr r3, 8012388 <__kernel_tan+0x338>)
 80121d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121dc:	f7ee f85e 	bl	800029c <__adddf3>
 80121e0:	4622      	mov	r2, r4
 80121e2:	462b      	mov	r3, r5
 80121e4:	f7ee fa10 	bl	8000608 <__aeabi_dmul>
 80121e8:	a369      	add	r3, pc, #420	; (adr r3, 8012390 <__kernel_tan+0x340>)
 80121ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ee:	f7ee f855 	bl	800029c <__adddf3>
 80121f2:	4622      	mov	r2, r4
 80121f4:	462b      	mov	r3, r5
 80121f6:	f7ee fa07 	bl	8000608 <__aeabi_dmul>
 80121fa:	a367      	add	r3, pc, #412	; (adr r3, 8012398 <__kernel_tan+0x348>)
 80121fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012200:	f7ee f84c 	bl	800029c <__adddf3>
 8012204:	4622      	mov	r2, r4
 8012206:	462b      	mov	r3, r5
 8012208:	f7ee f9fe 	bl	8000608 <__aeabi_dmul>
 801220c:	a364      	add	r3, pc, #400	; (adr r3, 80123a0 <__kernel_tan+0x350>)
 801220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012212:	f7ee f843 	bl	800029c <__adddf3>
 8012216:	ec53 2b18 	vmov	r2, r3, d8
 801221a:	f7ee f9f5 	bl	8000608 <__aeabi_dmul>
 801221e:	a362      	add	r3, pc, #392	; (adr r3, 80123a8 <__kernel_tan+0x358>)
 8012220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012224:	ec41 0b1a 	vmov	d10, r0, r1
 8012228:	4620      	mov	r0, r4
 801222a:	4629      	mov	r1, r5
 801222c:	f7ee f9ec 	bl	8000608 <__aeabi_dmul>
 8012230:	a35f      	add	r3, pc, #380	; (adr r3, 80123b0 <__kernel_tan+0x360>)
 8012232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012236:	f7ee f831 	bl	800029c <__adddf3>
 801223a:	4622      	mov	r2, r4
 801223c:	462b      	mov	r3, r5
 801223e:	f7ee f9e3 	bl	8000608 <__aeabi_dmul>
 8012242:	a35d      	add	r3, pc, #372	; (adr r3, 80123b8 <__kernel_tan+0x368>)
 8012244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012248:	f7ee f828 	bl	800029c <__adddf3>
 801224c:	4622      	mov	r2, r4
 801224e:	462b      	mov	r3, r5
 8012250:	f7ee f9da 	bl	8000608 <__aeabi_dmul>
 8012254:	a35a      	add	r3, pc, #360	; (adr r3, 80123c0 <__kernel_tan+0x370>)
 8012256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801225a:	f7ee f81f 	bl	800029c <__adddf3>
 801225e:	4622      	mov	r2, r4
 8012260:	462b      	mov	r3, r5
 8012262:	f7ee f9d1 	bl	8000608 <__aeabi_dmul>
 8012266:	a358      	add	r3, pc, #352	; (adr r3, 80123c8 <__kernel_tan+0x378>)
 8012268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226c:	f7ee f816 	bl	800029c <__adddf3>
 8012270:	4622      	mov	r2, r4
 8012272:	462b      	mov	r3, r5
 8012274:	f7ee f9c8 	bl	8000608 <__aeabi_dmul>
 8012278:	a355      	add	r3, pc, #340	; (adr r3, 80123d0 <__kernel_tan+0x380>)
 801227a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801227e:	f7ee f80d 	bl	800029c <__adddf3>
 8012282:	4602      	mov	r2, r0
 8012284:	460b      	mov	r3, r1
 8012286:	ec51 0b1a 	vmov	r0, r1, d10
 801228a:	f7ee f807 	bl	800029c <__adddf3>
 801228e:	ec53 2b19 	vmov	r2, r3, d9
 8012292:	f7ee f9b9 	bl	8000608 <__aeabi_dmul>
 8012296:	4642      	mov	r2, r8
 8012298:	464b      	mov	r3, r9
 801229a:	f7ed ffff 	bl	800029c <__adddf3>
 801229e:	ec53 2b18 	vmov	r2, r3, d8
 80122a2:	f7ee f9b1 	bl	8000608 <__aeabi_dmul>
 80122a6:	4642      	mov	r2, r8
 80122a8:	464b      	mov	r3, r9
 80122aa:	f7ed fff7 	bl	800029c <__adddf3>
 80122ae:	a34a      	add	r3, pc, #296	; (adr r3, 80123d8 <__kernel_tan+0x388>)
 80122b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b4:	4604      	mov	r4, r0
 80122b6:	460d      	mov	r5, r1
 80122b8:	ec51 0b19 	vmov	r0, r1, d9
 80122bc:	f7ee f9a4 	bl	8000608 <__aeabi_dmul>
 80122c0:	4622      	mov	r2, r4
 80122c2:	462b      	mov	r3, r5
 80122c4:	f7ed ffea 	bl	800029c <__adddf3>
 80122c8:	460b      	mov	r3, r1
 80122ca:	ec41 0b18 	vmov	d8, r0, r1
 80122ce:	4602      	mov	r2, r0
 80122d0:	4659      	mov	r1, fp
 80122d2:	4650      	mov	r0, sl
 80122d4:	f7ed ffe2 	bl	800029c <__adddf3>
 80122d8:	4b44      	ldr	r3, [pc, #272]	; (80123ec <__kernel_tan+0x39c>)
 80122da:	429f      	cmp	r7, r3
 80122dc:	4604      	mov	r4, r0
 80122de:	460d      	mov	r5, r1
 80122e0:	f340 8086 	ble.w	80123f0 <__kernel_tan+0x3a0>
 80122e4:	4630      	mov	r0, r6
 80122e6:	f7ee f925 	bl	8000534 <__aeabi_i2d>
 80122ea:	4622      	mov	r2, r4
 80122ec:	4680      	mov	r8, r0
 80122ee:	4689      	mov	r9, r1
 80122f0:	462b      	mov	r3, r5
 80122f2:	4620      	mov	r0, r4
 80122f4:	4629      	mov	r1, r5
 80122f6:	f7ee f987 	bl	8000608 <__aeabi_dmul>
 80122fa:	4642      	mov	r2, r8
 80122fc:	4606      	mov	r6, r0
 80122fe:	460f      	mov	r7, r1
 8012300:	464b      	mov	r3, r9
 8012302:	4620      	mov	r0, r4
 8012304:	4629      	mov	r1, r5
 8012306:	f7ed ffc9 	bl	800029c <__adddf3>
 801230a:	4602      	mov	r2, r0
 801230c:	460b      	mov	r3, r1
 801230e:	4630      	mov	r0, r6
 8012310:	4639      	mov	r1, r7
 8012312:	f7ee faa3 	bl	800085c <__aeabi_ddiv>
 8012316:	ec53 2b18 	vmov	r2, r3, d8
 801231a:	f7ed ffbd 	bl	8000298 <__aeabi_dsub>
 801231e:	4602      	mov	r2, r0
 8012320:	460b      	mov	r3, r1
 8012322:	4650      	mov	r0, sl
 8012324:	4659      	mov	r1, fp
 8012326:	f7ed ffb7 	bl	8000298 <__aeabi_dsub>
 801232a:	4602      	mov	r2, r0
 801232c:	460b      	mov	r3, r1
 801232e:	f7ed ffb5 	bl	800029c <__adddf3>
 8012332:	4602      	mov	r2, r0
 8012334:	460b      	mov	r3, r1
 8012336:	4640      	mov	r0, r8
 8012338:	4649      	mov	r1, r9
 801233a:	f7ed ffad 	bl	8000298 <__aeabi_dsub>
 801233e:	9b00      	ldr	r3, [sp, #0]
 8012340:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8012344:	f00a 0a02 	and.w	sl, sl, #2
 8012348:	4604      	mov	r4, r0
 801234a:	f1ca 0001 	rsb	r0, sl, #1
 801234e:	460d      	mov	r5, r1
 8012350:	f7ee f8f0 	bl	8000534 <__aeabi_i2d>
 8012354:	4602      	mov	r2, r0
 8012356:	460b      	mov	r3, r1
 8012358:	4620      	mov	r0, r4
 801235a:	4629      	mov	r1, r5
 801235c:	f7ee f954 	bl	8000608 <__aeabi_dmul>
 8012360:	e69f      	b.n	80120a2 <__kernel_tan+0x52>
 8012362:	bf00      	nop
 8012364:	f3af 8000 	nop.w
 8012368:	54442d18 	.word	0x54442d18
 801236c:	3fe921fb 	.word	0x3fe921fb
 8012370:	33145c07 	.word	0x33145c07
 8012374:	3c81a626 	.word	0x3c81a626
 8012378:	74bf7ad4 	.word	0x74bf7ad4
 801237c:	3efb2a70 	.word	0x3efb2a70
 8012380:	32f0a7e9 	.word	0x32f0a7e9
 8012384:	3f12b80f 	.word	0x3f12b80f
 8012388:	1a8d1068 	.word	0x1a8d1068
 801238c:	3f3026f7 	.word	0x3f3026f7
 8012390:	fee08315 	.word	0xfee08315
 8012394:	3f57dbc8 	.word	0x3f57dbc8
 8012398:	e96e8493 	.word	0xe96e8493
 801239c:	3f8226e3 	.word	0x3f8226e3
 80123a0:	1bb341fe 	.word	0x1bb341fe
 80123a4:	3faba1ba 	.word	0x3faba1ba
 80123a8:	db605373 	.word	0xdb605373
 80123ac:	bef375cb 	.word	0xbef375cb
 80123b0:	a03792a6 	.word	0xa03792a6
 80123b4:	3f147e88 	.word	0x3f147e88
 80123b8:	f2f26501 	.word	0xf2f26501
 80123bc:	3f4344d8 	.word	0x3f4344d8
 80123c0:	c9560328 	.word	0xc9560328
 80123c4:	3f6d6d22 	.word	0x3f6d6d22
 80123c8:	8406d637 	.word	0x8406d637
 80123cc:	3f9664f4 	.word	0x3f9664f4
 80123d0:	1110fe7a 	.word	0x1110fe7a
 80123d4:	3fc11111 	.word	0x3fc11111
 80123d8:	55555563 	.word	0x55555563
 80123dc:	3fd55555 	.word	0x3fd55555
 80123e0:	3e2fffff 	.word	0x3e2fffff
 80123e4:	3ff00000 	.word	0x3ff00000
 80123e8:	bff00000 	.word	0xbff00000
 80123ec:	3fe59427 	.word	0x3fe59427
 80123f0:	2e01      	cmp	r6, #1
 80123f2:	d02f      	beq.n	8012454 <__kernel_tan+0x404>
 80123f4:	460f      	mov	r7, r1
 80123f6:	4602      	mov	r2, r0
 80123f8:	460b      	mov	r3, r1
 80123fa:	4689      	mov	r9, r1
 80123fc:	2000      	movs	r0, #0
 80123fe:	4917      	ldr	r1, [pc, #92]	; (801245c <__kernel_tan+0x40c>)
 8012400:	f7ee fa2c 	bl	800085c <__aeabi_ddiv>
 8012404:	2600      	movs	r6, #0
 8012406:	e9cd 0100 	strd	r0, r1, [sp]
 801240a:	4652      	mov	r2, sl
 801240c:	465b      	mov	r3, fp
 801240e:	4630      	mov	r0, r6
 8012410:	4639      	mov	r1, r7
 8012412:	f7ed ff41 	bl	8000298 <__aeabi_dsub>
 8012416:	e9dd 4500 	ldrd	r4, r5, [sp]
 801241a:	4602      	mov	r2, r0
 801241c:	460b      	mov	r3, r1
 801241e:	ec51 0b18 	vmov	r0, r1, d8
 8012422:	f7ed ff39 	bl	8000298 <__aeabi_dsub>
 8012426:	4632      	mov	r2, r6
 8012428:	462b      	mov	r3, r5
 801242a:	f7ee f8ed 	bl	8000608 <__aeabi_dmul>
 801242e:	46b0      	mov	r8, r6
 8012430:	460f      	mov	r7, r1
 8012432:	4642      	mov	r2, r8
 8012434:	462b      	mov	r3, r5
 8012436:	4634      	mov	r4, r6
 8012438:	4649      	mov	r1, r9
 801243a:	4606      	mov	r6, r0
 801243c:	4640      	mov	r0, r8
 801243e:	f7ee f8e3 	bl	8000608 <__aeabi_dmul>
 8012442:	4b07      	ldr	r3, [pc, #28]	; (8012460 <__kernel_tan+0x410>)
 8012444:	2200      	movs	r2, #0
 8012446:	f7ed ff29 	bl	800029c <__adddf3>
 801244a:	4602      	mov	r2, r0
 801244c:	460b      	mov	r3, r1
 801244e:	4630      	mov	r0, r6
 8012450:	4639      	mov	r1, r7
 8012452:	e665      	b.n	8012120 <__kernel_tan+0xd0>
 8012454:	4682      	mov	sl, r0
 8012456:	468b      	mov	fp, r1
 8012458:	e625      	b.n	80120a6 <__kernel_tan+0x56>
 801245a:	bf00      	nop
 801245c:	bff00000 	.word	0xbff00000
 8012460:	3ff00000 	.word	0x3ff00000

08012464 <__kernel_cosf>:
 8012464:	ee10 3a10 	vmov	r3, s0
 8012468:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801246c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012470:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8012474:	da05      	bge.n	8012482 <__kernel_cosf+0x1e>
 8012476:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801247a:	ee17 2a90 	vmov	r2, s15
 801247e:	2a00      	cmp	r2, #0
 8012480:	d03d      	beq.n	80124fe <__kernel_cosf+0x9a>
 8012482:	ee60 5a00 	vmul.f32	s11, s0, s0
 8012486:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012504 <__kernel_cosf+0xa0>
 801248a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8012508 <__kernel_cosf+0xa4>
 801248e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801250c <__kernel_cosf+0xa8>
 8012492:	4a1f      	ldr	r2, [pc, #124]	; (8012510 <__kernel_cosf+0xac>)
 8012494:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012498:	4293      	cmp	r3, r2
 801249a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8012514 <__kernel_cosf+0xb0>
 801249e:	eee7 7a25 	vfma.f32	s15, s14, s11
 80124a2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8012518 <__kernel_cosf+0xb4>
 80124a6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80124aa:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801251c <__kernel_cosf+0xb8>
 80124ae:	eee7 7a25 	vfma.f32	s15, s14, s11
 80124b2:	eeb0 7a66 	vmov.f32	s14, s13
 80124b6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80124ba:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80124be:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80124c2:	ee67 6a25 	vmul.f32	s13, s14, s11
 80124c6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80124ca:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80124ce:	dc04      	bgt.n	80124da <__kernel_cosf+0x76>
 80124d0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80124d4:	ee36 0a47 	vsub.f32	s0, s12, s14
 80124d8:	4770      	bx	lr
 80124da:	4a11      	ldr	r2, [pc, #68]	; (8012520 <__kernel_cosf+0xbc>)
 80124dc:	4293      	cmp	r3, r2
 80124de:	bfda      	itte	le
 80124e0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80124e4:	ee06 3a90 	vmovle	s13, r3
 80124e8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80124ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80124f0:	ee36 0a66 	vsub.f32	s0, s12, s13
 80124f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80124f8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80124fc:	4770      	bx	lr
 80124fe:	eeb0 0a46 	vmov.f32	s0, s12
 8012502:	4770      	bx	lr
 8012504:	ad47d74e 	.word	0xad47d74e
 8012508:	310f74f6 	.word	0x310f74f6
 801250c:	3d2aaaab 	.word	0x3d2aaaab
 8012510:	3e999999 	.word	0x3e999999
 8012514:	b493f27c 	.word	0xb493f27c
 8012518:	37d00d01 	.word	0x37d00d01
 801251c:	bab60b61 	.word	0xbab60b61
 8012520:	3f480000 	.word	0x3f480000

08012524 <__kernel_rem_pio2f>:
 8012524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012528:	ed2d 8b04 	vpush	{d8-d9}
 801252c:	b0d9      	sub	sp, #356	; 0x164
 801252e:	4688      	mov	r8, r1
 8012530:	9002      	str	r0, [sp, #8]
 8012532:	49bb      	ldr	r1, [pc, #748]	; (8012820 <__kernel_rem_pio2f+0x2fc>)
 8012534:	9866      	ldr	r0, [sp, #408]	; 0x198
 8012536:	9301      	str	r3, [sp, #4]
 8012538:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801253c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8012540:	1e59      	subs	r1, r3, #1
 8012542:	1d13      	adds	r3, r2, #4
 8012544:	db27      	blt.n	8012596 <__kernel_rem_pio2f+0x72>
 8012546:	f1b2 0b03 	subs.w	fp, r2, #3
 801254a:	bf48      	it	mi
 801254c:	f102 0b04 	addmi.w	fp, r2, #4
 8012550:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8012554:	1c45      	adds	r5, r0, #1
 8012556:	00ec      	lsls	r4, r5, #3
 8012558:	1a47      	subs	r7, r0, r1
 801255a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8012830 <__kernel_rem_pio2f+0x30c>
 801255e:	9403      	str	r4, [sp, #12]
 8012560:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8012564:	eb0a 0c01 	add.w	ip, sl, r1
 8012568:	ae1c      	add	r6, sp, #112	; 0x70
 801256a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801256e:	2400      	movs	r4, #0
 8012570:	4564      	cmp	r4, ip
 8012572:	dd12      	ble.n	801259a <__kernel_rem_pio2f+0x76>
 8012574:	9b01      	ldr	r3, [sp, #4]
 8012576:	ac1c      	add	r4, sp, #112	; 0x70
 8012578:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801257c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8012580:	f04f 0c00 	mov.w	ip, #0
 8012584:	45d4      	cmp	ip, sl
 8012586:	dc27      	bgt.n	80125d8 <__kernel_rem_pio2f+0xb4>
 8012588:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801258c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8012830 <__kernel_rem_pio2f+0x30c>
 8012590:	4627      	mov	r7, r4
 8012592:	2600      	movs	r6, #0
 8012594:	e016      	b.n	80125c4 <__kernel_rem_pio2f+0xa0>
 8012596:	2000      	movs	r0, #0
 8012598:	e7dc      	b.n	8012554 <__kernel_rem_pio2f+0x30>
 801259a:	42e7      	cmn	r7, r4
 801259c:	bf5d      	ittte	pl
 801259e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80125a2:	ee07 3a90 	vmovpl	s15, r3
 80125a6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80125aa:	eef0 7a47 	vmovmi.f32	s15, s14
 80125ae:	ece6 7a01 	vstmia	r6!, {s15}
 80125b2:	3401      	adds	r4, #1
 80125b4:	e7dc      	b.n	8012570 <__kernel_rem_pio2f+0x4c>
 80125b6:	ecf9 6a01 	vldmia	r9!, {s13}
 80125ba:	ed97 7a00 	vldr	s14, [r7]
 80125be:	eee6 7a87 	vfma.f32	s15, s13, s14
 80125c2:	3601      	adds	r6, #1
 80125c4:	428e      	cmp	r6, r1
 80125c6:	f1a7 0704 	sub.w	r7, r7, #4
 80125ca:	ddf4      	ble.n	80125b6 <__kernel_rem_pio2f+0x92>
 80125cc:	eceb 7a01 	vstmia	fp!, {s15}
 80125d0:	f10c 0c01 	add.w	ip, ip, #1
 80125d4:	3404      	adds	r4, #4
 80125d6:	e7d5      	b.n	8012584 <__kernel_rem_pio2f+0x60>
 80125d8:	ab08      	add	r3, sp, #32
 80125da:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80125de:	eddf 8a93 	vldr	s17, [pc, #588]	; 801282c <__kernel_rem_pio2f+0x308>
 80125e2:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8012828 <__kernel_rem_pio2f+0x304>
 80125e6:	9304      	str	r3, [sp, #16]
 80125e8:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80125ec:	4656      	mov	r6, sl
 80125ee:	00b3      	lsls	r3, r6, #2
 80125f0:	9305      	str	r3, [sp, #20]
 80125f2:	ab58      	add	r3, sp, #352	; 0x160
 80125f4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80125f8:	ac08      	add	r4, sp, #32
 80125fa:	ab44      	add	r3, sp, #272	; 0x110
 80125fc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8012600:	46a4      	mov	ip, r4
 8012602:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8012606:	4637      	mov	r7, r6
 8012608:	2f00      	cmp	r7, #0
 801260a:	f1a0 0004 	sub.w	r0, r0, #4
 801260e:	dc4f      	bgt.n	80126b0 <__kernel_rem_pio2f+0x18c>
 8012610:	4628      	mov	r0, r5
 8012612:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8012616:	f000 fb93 	bl	8012d40 <scalbnf>
 801261a:	eeb0 8a40 	vmov.f32	s16, s0
 801261e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8012622:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012626:	f000 fb49 	bl	8012cbc <floorf>
 801262a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801262e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8012632:	2d00      	cmp	r5, #0
 8012634:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8012638:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801263c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8012640:	ee17 9a90 	vmov	r9, s15
 8012644:	ee38 8a40 	vsub.f32	s16, s16, s0
 8012648:	dd44      	ble.n	80126d4 <__kernel_rem_pio2f+0x1b0>
 801264a:	f106 3cff 	add.w	ip, r6, #4294967295
 801264e:	ab08      	add	r3, sp, #32
 8012650:	f1c5 0e08 	rsb	lr, r5, #8
 8012654:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8012658:	fa47 f00e 	asr.w	r0, r7, lr
 801265c:	4481      	add	r9, r0
 801265e:	fa00 f00e 	lsl.w	r0, r0, lr
 8012662:	1a3f      	subs	r7, r7, r0
 8012664:	f1c5 0007 	rsb	r0, r5, #7
 8012668:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801266c:	4107      	asrs	r7, r0
 801266e:	2f00      	cmp	r7, #0
 8012670:	dd3f      	ble.n	80126f2 <__kernel_rem_pio2f+0x1ce>
 8012672:	f04f 0e00 	mov.w	lr, #0
 8012676:	f109 0901 	add.w	r9, r9, #1
 801267a:	4673      	mov	r3, lr
 801267c:	4576      	cmp	r6, lr
 801267e:	dc6b      	bgt.n	8012758 <__kernel_rem_pio2f+0x234>
 8012680:	2d00      	cmp	r5, #0
 8012682:	dd04      	ble.n	801268e <__kernel_rem_pio2f+0x16a>
 8012684:	2d01      	cmp	r5, #1
 8012686:	d078      	beq.n	801277a <__kernel_rem_pio2f+0x256>
 8012688:	2d02      	cmp	r5, #2
 801268a:	f000 8081 	beq.w	8012790 <__kernel_rem_pio2f+0x26c>
 801268e:	2f02      	cmp	r7, #2
 8012690:	d12f      	bne.n	80126f2 <__kernel_rem_pio2f+0x1ce>
 8012692:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012696:	ee30 8a48 	vsub.f32	s16, s0, s16
 801269a:	b353      	cbz	r3, 80126f2 <__kernel_rem_pio2f+0x1ce>
 801269c:	4628      	mov	r0, r5
 801269e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80126a2:	f000 fb4d 	bl	8012d40 <scalbnf>
 80126a6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80126aa:	ee38 8a40 	vsub.f32	s16, s16, s0
 80126ae:	e020      	b.n	80126f2 <__kernel_rem_pio2f+0x1ce>
 80126b0:	ee60 7a28 	vmul.f32	s15, s0, s17
 80126b4:	3f01      	subs	r7, #1
 80126b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80126ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80126be:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80126c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80126c6:	ecac 0a01 	vstmia	ip!, {s0}
 80126ca:	ed90 0a00 	vldr	s0, [r0]
 80126ce:	ee37 0a80 	vadd.f32	s0, s15, s0
 80126d2:	e799      	b.n	8012608 <__kernel_rem_pio2f+0xe4>
 80126d4:	d105      	bne.n	80126e2 <__kernel_rem_pio2f+0x1be>
 80126d6:	1e70      	subs	r0, r6, #1
 80126d8:	ab08      	add	r3, sp, #32
 80126da:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80126de:	11ff      	asrs	r7, r7, #7
 80126e0:	e7c5      	b.n	801266e <__kernel_rem_pio2f+0x14a>
 80126e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80126e6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80126ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ee:	da31      	bge.n	8012754 <__kernel_rem_pio2f+0x230>
 80126f0:	2700      	movs	r7, #0
 80126f2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80126f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126fa:	f040 809b 	bne.w	8012834 <__kernel_rem_pio2f+0x310>
 80126fe:	1e74      	subs	r4, r6, #1
 8012700:	46a4      	mov	ip, r4
 8012702:	2000      	movs	r0, #0
 8012704:	45d4      	cmp	ip, sl
 8012706:	da4a      	bge.n	801279e <__kernel_rem_pio2f+0x27a>
 8012708:	2800      	cmp	r0, #0
 801270a:	d07a      	beq.n	8012802 <__kernel_rem_pio2f+0x2de>
 801270c:	ab08      	add	r3, sp, #32
 801270e:	3d08      	subs	r5, #8
 8012710:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012714:	2b00      	cmp	r3, #0
 8012716:	f000 8081 	beq.w	801281c <__kernel_rem_pio2f+0x2f8>
 801271a:	4628      	mov	r0, r5
 801271c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012720:	00a5      	lsls	r5, r4, #2
 8012722:	f000 fb0d 	bl	8012d40 <scalbnf>
 8012726:	aa44      	add	r2, sp, #272	; 0x110
 8012728:	1d2b      	adds	r3, r5, #4
 801272a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801282c <__kernel_rem_pio2f+0x308>
 801272e:	18d1      	adds	r1, r2, r3
 8012730:	4622      	mov	r2, r4
 8012732:	2a00      	cmp	r2, #0
 8012734:	f280 80ae 	bge.w	8012894 <__kernel_rem_pio2f+0x370>
 8012738:	4622      	mov	r2, r4
 801273a:	2a00      	cmp	r2, #0
 801273c:	f2c0 80cc 	blt.w	80128d8 <__kernel_rem_pio2f+0x3b4>
 8012740:	a944      	add	r1, sp, #272	; 0x110
 8012742:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8012746:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8012824 <__kernel_rem_pio2f+0x300>
 801274a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8012830 <__kernel_rem_pio2f+0x30c>
 801274e:	2000      	movs	r0, #0
 8012750:	1aa1      	subs	r1, r4, r2
 8012752:	e0b6      	b.n	80128c2 <__kernel_rem_pio2f+0x39e>
 8012754:	2702      	movs	r7, #2
 8012756:	e78c      	b.n	8012672 <__kernel_rem_pio2f+0x14e>
 8012758:	6820      	ldr	r0, [r4, #0]
 801275a:	b94b      	cbnz	r3, 8012770 <__kernel_rem_pio2f+0x24c>
 801275c:	b118      	cbz	r0, 8012766 <__kernel_rem_pio2f+0x242>
 801275e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8012762:	6020      	str	r0, [r4, #0]
 8012764:	2001      	movs	r0, #1
 8012766:	f10e 0e01 	add.w	lr, lr, #1
 801276a:	3404      	adds	r4, #4
 801276c:	4603      	mov	r3, r0
 801276e:	e785      	b.n	801267c <__kernel_rem_pio2f+0x158>
 8012770:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8012774:	6020      	str	r0, [r4, #0]
 8012776:	4618      	mov	r0, r3
 8012778:	e7f5      	b.n	8012766 <__kernel_rem_pio2f+0x242>
 801277a:	1e74      	subs	r4, r6, #1
 801277c:	a808      	add	r0, sp, #32
 801277e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8012782:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8012786:	f10d 0c20 	add.w	ip, sp, #32
 801278a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801278e:	e77e      	b.n	801268e <__kernel_rem_pio2f+0x16a>
 8012790:	1e74      	subs	r4, r6, #1
 8012792:	a808      	add	r0, sp, #32
 8012794:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8012798:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801279c:	e7f3      	b.n	8012786 <__kernel_rem_pio2f+0x262>
 801279e:	ab08      	add	r3, sp, #32
 80127a0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80127a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80127a8:	4318      	orrs	r0, r3
 80127aa:	e7ab      	b.n	8012704 <__kernel_rem_pio2f+0x1e0>
 80127ac:	f10c 0c01 	add.w	ip, ip, #1
 80127b0:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80127b4:	2c00      	cmp	r4, #0
 80127b6:	d0f9      	beq.n	80127ac <__kernel_rem_pio2f+0x288>
 80127b8:	9b05      	ldr	r3, [sp, #20]
 80127ba:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80127be:	eb0d 0003 	add.w	r0, sp, r3
 80127c2:	9b01      	ldr	r3, [sp, #4]
 80127c4:	18f4      	adds	r4, r6, r3
 80127c6:	ab1c      	add	r3, sp, #112	; 0x70
 80127c8:	1c77      	adds	r7, r6, #1
 80127ca:	384c      	subs	r0, #76	; 0x4c
 80127cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80127d0:	4466      	add	r6, ip
 80127d2:	42be      	cmp	r6, r7
 80127d4:	f6ff af0b 	blt.w	80125ee <__kernel_rem_pio2f+0xca>
 80127d8:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80127dc:	f8dd e008 	ldr.w	lr, [sp, #8]
 80127e0:	ee07 3a90 	vmov	s15, r3
 80127e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80127e8:	f04f 0c00 	mov.w	ip, #0
 80127ec:	ece4 7a01 	vstmia	r4!, {s15}
 80127f0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8012830 <__kernel_rem_pio2f+0x30c>
 80127f4:	46a1      	mov	r9, r4
 80127f6:	458c      	cmp	ip, r1
 80127f8:	dd07      	ble.n	801280a <__kernel_rem_pio2f+0x2e6>
 80127fa:	ece0 7a01 	vstmia	r0!, {s15}
 80127fe:	3701      	adds	r7, #1
 8012800:	e7e7      	b.n	80127d2 <__kernel_rem_pio2f+0x2ae>
 8012802:	9804      	ldr	r0, [sp, #16]
 8012804:	f04f 0c01 	mov.w	ip, #1
 8012808:	e7d2      	b.n	80127b0 <__kernel_rem_pio2f+0x28c>
 801280a:	ecfe 6a01 	vldmia	lr!, {s13}
 801280e:	ed39 7a01 	vldmdb	r9!, {s14}
 8012812:	f10c 0c01 	add.w	ip, ip, #1
 8012816:	eee6 7a87 	vfma.f32	s15, s13, s14
 801281a:	e7ec      	b.n	80127f6 <__kernel_rem_pio2f+0x2d2>
 801281c:	3c01      	subs	r4, #1
 801281e:	e775      	b.n	801270c <__kernel_rem_pio2f+0x1e8>
 8012820:	0801390c 	.word	0x0801390c
 8012824:	080138e0 	.word	0x080138e0
 8012828:	43800000 	.word	0x43800000
 801282c:	3b800000 	.word	0x3b800000
 8012830:	00000000 	.word	0x00000000
 8012834:	9b03      	ldr	r3, [sp, #12]
 8012836:	eeb0 0a48 	vmov.f32	s0, s16
 801283a:	1a98      	subs	r0, r3, r2
 801283c:	f000 fa80 	bl	8012d40 <scalbnf>
 8012840:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8012828 <__kernel_rem_pio2f+0x304>
 8012844:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801284c:	db19      	blt.n	8012882 <__kernel_rem_pio2f+0x35e>
 801284e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801282c <__kernel_rem_pio2f+0x308>
 8012852:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012856:	aa08      	add	r2, sp, #32
 8012858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801285c:	1c74      	adds	r4, r6, #1
 801285e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012862:	3508      	adds	r5, #8
 8012864:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801286c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012870:	ee10 3a10 	vmov	r3, s0
 8012874:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8012878:	ee17 3a90 	vmov	r3, s15
 801287c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012880:	e74b      	b.n	801271a <__kernel_rem_pio2f+0x1f6>
 8012882:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012886:	aa08      	add	r2, sp, #32
 8012888:	ee10 3a10 	vmov	r3, s0
 801288c:	4634      	mov	r4, r6
 801288e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8012892:	e742      	b.n	801271a <__kernel_rem_pio2f+0x1f6>
 8012894:	a808      	add	r0, sp, #32
 8012896:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801289a:	9001      	str	r0, [sp, #4]
 801289c:	ee07 0a90 	vmov	s15, r0
 80128a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128a4:	3a01      	subs	r2, #1
 80128a6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80128aa:	ee20 0a07 	vmul.f32	s0, s0, s14
 80128ae:	ed61 7a01 	vstmdb	r1!, {s15}
 80128b2:	e73e      	b.n	8012732 <__kernel_rem_pio2f+0x20e>
 80128b4:	ecfc 6a01 	vldmia	ip!, {s13}
 80128b8:	ecb6 7a01 	vldmia	r6!, {s14}
 80128bc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80128c0:	3001      	adds	r0, #1
 80128c2:	4550      	cmp	r0, sl
 80128c4:	dc01      	bgt.n	80128ca <__kernel_rem_pio2f+0x3a6>
 80128c6:	4288      	cmp	r0, r1
 80128c8:	ddf4      	ble.n	80128b4 <__kernel_rem_pio2f+0x390>
 80128ca:	a858      	add	r0, sp, #352	; 0x160
 80128cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80128d0:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80128d4:	3a01      	subs	r2, #1
 80128d6:	e730      	b.n	801273a <__kernel_rem_pio2f+0x216>
 80128d8:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80128da:	2a02      	cmp	r2, #2
 80128dc:	dc09      	bgt.n	80128f2 <__kernel_rem_pio2f+0x3ce>
 80128de:	2a00      	cmp	r2, #0
 80128e0:	dc2a      	bgt.n	8012938 <__kernel_rem_pio2f+0x414>
 80128e2:	d043      	beq.n	801296c <__kernel_rem_pio2f+0x448>
 80128e4:	f009 0007 	and.w	r0, r9, #7
 80128e8:	b059      	add	sp, #356	; 0x164
 80128ea:	ecbd 8b04 	vpop	{d8-d9}
 80128ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128f2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80128f4:	2b03      	cmp	r3, #3
 80128f6:	d1f5      	bne.n	80128e4 <__kernel_rem_pio2f+0x3c0>
 80128f8:	ab30      	add	r3, sp, #192	; 0xc0
 80128fa:	442b      	add	r3, r5
 80128fc:	461a      	mov	r2, r3
 80128fe:	4619      	mov	r1, r3
 8012900:	4620      	mov	r0, r4
 8012902:	2800      	cmp	r0, #0
 8012904:	f1a1 0104 	sub.w	r1, r1, #4
 8012908:	dc51      	bgt.n	80129ae <__kernel_rem_pio2f+0x48a>
 801290a:	4621      	mov	r1, r4
 801290c:	2901      	cmp	r1, #1
 801290e:	f1a2 0204 	sub.w	r2, r2, #4
 8012912:	dc5c      	bgt.n	80129ce <__kernel_rem_pio2f+0x4aa>
 8012914:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8012830 <__kernel_rem_pio2f+0x30c>
 8012918:	3304      	adds	r3, #4
 801291a:	2c01      	cmp	r4, #1
 801291c:	dc67      	bgt.n	80129ee <__kernel_rem_pio2f+0x4ca>
 801291e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8012922:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8012926:	2f00      	cmp	r7, #0
 8012928:	d167      	bne.n	80129fa <__kernel_rem_pio2f+0x4d6>
 801292a:	edc8 6a00 	vstr	s13, [r8]
 801292e:	ed88 7a01 	vstr	s14, [r8, #4]
 8012932:	edc8 7a02 	vstr	s15, [r8, #8]
 8012936:	e7d5      	b.n	80128e4 <__kernel_rem_pio2f+0x3c0>
 8012938:	aa30      	add	r2, sp, #192	; 0xc0
 801293a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8012830 <__kernel_rem_pio2f+0x30c>
 801293e:	4413      	add	r3, r2
 8012940:	4622      	mov	r2, r4
 8012942:	2a00      	cmp	r2, #0
 8012944:	da24      	bge.n	8012990 <__kernel_rem_pio2f+0x46c>
 8012946:	b34f      	cbz	r7, 801299c <__kernel_rem_pio2f+0x478>
 8012948:	eef1 7a47 	vneg.f32	s15, s14
 801294c:	edc8 7a00 	vstr	s15, [r8]
 8012950:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8012954:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012958:	aa31      	add	r2, sp, #196	; 0xc4
 801295a:	2301      	movs	r3, #1
 801295c:	429c      	cmp	r4, r3
 801295e:	da20      	bge.n	80129a2 <__kernel_rem_pio2f+0x47e>
 8012960:	b10f      	cbz	r7, 8012966 <__kernel_rem_pio2f+0x442>
 8012962:	eef1 7a67 	vneg.f32	s15, s15
 8012966:	edc8 7a01 	vstr	s15, [r8, #4]
 801296a:	e7bb      	b.n	80128e4 <__kernel_rem_pio2f+0x3c0>
 801296c:	aa30      	add	r2, sp, #192	; 0xc0
 801296e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8012830 <__kernel_rem_pio2f+0x30c>
 8012972:	4413      	add	r3, r2
 8012974:	2c00      	cmp	r4, #0
 8012976:	da05      	bge.n	8012984 <__kernel_rem_pio2f+0x460>
 8012978:	b10f      	cbz	r7, 801297e <__kernel_rem_pio2f+0x45a>
 801297a:	eef1 7a67 	vneg.f32	s15, s15
 801297e:	edc8 7a00 	vstr	s15, [r8]
 8012982:	e7af      	b.n	80128e4 <__kernel_rem_pio2f+0x3c0>
 8012984:	ed33 7a01 	vldmdb	r3!, {s14}
 8012988:	3c01      	subs	r4, #1
 801298a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801298e:	e7f1      	b.n	8012974 <__kernel_rem_pio2f+0x450>
 8012990:	ed73 7a01 	vldmdb	r3!, {s15}
 8012994:	3a01      	subs	r2, #1
 8012996:	ee37 7a27 	vadd.f32	s14, s14, s15
 801299a:	e7d2      	b.n	8012942 <__kernel_rem_pio2f+0x41e>
 801299c:	eef0 7a47 	vmov.f32	s15, s14
 80129a0:	e7d4      	b.n	801294c <__kernel_rem_pio2f+0x428>
 80129a2:	ecb2 7a01 	vldmia	r2!, {s14}
 80129a6:	3301      	adds	r3, #1
 80129a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80129ac:	e7d6      	b.n	801295c <__kernel_rem_pio2f+0x438>
 80129ae:	edd1 7a00 	vldr	s15, [r1]
 80129b2:	edd1 6a01 	vldr	s13, [r1, #4]
 80129b6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80129ba:	3801      	subs	r0, #1
 80129bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80129c0:	ed81 7a00 	vstr	s14, [r1]
 80129c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80129c8:	edc1 7a01 	vstr	s15, [r1, #4]
 80129cc:	e799      	b.n	8012902 <__kernel_rem_pio2f+0x3de>
 80129ce:	edd2 7a00 	vldr	s15, [r2]
 80129d2:	edd2 6a01 	vldr	s13, [r2, #4]
 80129d6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80129da:	3901      	subs	r1, #1
 80129dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80129e0:	ed82 7a00 	vstr	s14, [r2]
 80129e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80129e8:	edc2 7a01 	vstr	s15, [r2, #4]
 80129ec:	e78e      	b.n	801290c <__kernel_rem_pio2f+0x3e8>
 80129ee:	ed33 7a01 	vldmdb	r3!, {s14}
 80129f2:	3c01      	subs	r4, #1
 80129f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80129f8:	e78f      	b.n	801291a <__kernel_rem_pio2f+0x3f6>
 80129fa:	eef1 6a66 	vneg.f32	s13, s13
 80129fe:	eeb1 7a47 	vneg.f32	s14, s14
 8012a02:	edc8 6a00 	vstr	s13, [r8]
 8012a06:	ed88 7a01 	vstr	s14, [r8, #4]
 8012a0a:	eef1 7a67 	vneg.f32	s15, s15
 8012a0e:	e790      	b.n	8012932 <__kernel_rem_pio2f+0x40e>

08012a10 <__kernel_sinf>:
 8012a10:	ee10 3a10 	vmov	r3, s0
 8012a14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012a18:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012a1c:	da04      	bge.n	8012a28 <__kernel_sinf+0x18>
 8012a1e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012a22:	ee17 3a90 	vmov	r3, s15
 8012a26:	b35b      	cbz	r3, 8012a80 <__kernel_sinf+0x70>
 8012a28:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012a2c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012a84 <__kernel_sinf+0x74>
 8012a30:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8012a88 <__kernel_sinf+0x78>
 8012a34:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012a38:	eddf 7a14 	vldr	s15, [pc, #80]	; 8012a8c <__kernel_sinf+0x7c>
 8012a3c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012a40:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8012a90 <__kernel_sinf+0x80>
 8012a44:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012a48:	eddf 7a12 	vldr	s15, [pc, #72]	; 8012a94 <__kernel_sinf+0x84>
 8012a4c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012a50:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012a54:	b930      	cbnz	r0, 8012a64 <__kernel_sinf+0x54>
 8012a56:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8012a98 <__kernel_sinf+0x88>
 8012a5a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012a5e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012a62:	4770      	bx	lr
 8012a64:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012a68:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8012a6c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012a70:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8012a74:	eddf 7a09 	vldr	s15, [pc, #36]	; 8012a9c <__kernel_sinf+0x8c>
 8012a78:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012a7c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012a80:	4770      	bx	lr
 8012a82:	bf00      	nop
 8012a84:	2f2ec9d3 	.word	0x2f2ec9d3
 8012a88:	b2d72f34 	.word	0xb2d72f34
 8012a8c:	3638ef1b 	.word	0x3638ef1b
 8012a90:	b9500d01 	.word	0xb9500d01
 8012a94:	3c088889 	.word	0x3c088889
 8012a98:	be2aaaab 	.word	0xbe2aaaab
 8012a9c:	3e2aaaab 	.word	0x3e2aaaab

08012aa0 <floor>:
 8012aa0:	ec51 0b10 	vmov	r0, r1, d0
 8012aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aa8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012aac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012ab0:	2e13      	cmp	r6, #19
 8012ab2:	ee10 5a10 	vmov	r5, s0
 8012ab6:	ee10 8a10 	vmov	r8, s0
 8012aba:	460c      	mov	r4, r1
 8012abc:	dc32      	bgt.n	8012b24 <floor+0x84>
 8012abe:	2e00      	cmp	r6, #0
 8012ac0:	da14      	bge.n	8012aec <floor+0x4c>
 8012ac2:	a333      	add	r3, pc, #204	; (adr r3, 8012b90 <floor+0xf0>)
 8012ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac8:	f7ed fbe8 	bl	800029c <__adddf3>
 8012acc:	2200      	movs	r2, #0
 8012ace:	2300      	movs	r3, #0
 8012ad0:	f7ee f82a 	bl	8000b28 <__aeabi_dcmpgt>
 8012ad4:	b138      	cbz	r0, 8012ae6 <floor+0x46>
 8012ad6:	2c00      	cmp	r4, #0
 8012ad8:	da57      	bge.n	8012b8a <floor+0xea>
 8012ada:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012ade:	431d      	orrs	r5, r3
 8012ae0:	d001      	beq.n	8012ae6 <floor+0x46>
 8012ae2:	4c2d      	ldr	r4, [pc, #180]	; (8012b98 <floor+0xf8>)
 8012ae4:	2500      	movs	r5, #0
 8012ae6:	4621      	mov	r1, r4
 8012ae8:	4628      	mov	r0, r5
 8012aea:	e025      	b.n	8012b38 <floor+0x98>
 8012aec:	4f2b      	ldr	r7, [pc, #172]	; (8012b9c <floor+0xfc>)
 8012aee:	4137      	asrs	r7, r6
 8012af0:	ea01 0307 	and.w	r3, r1, r7
 8012af4:	4303      	orrs	r3, r0
 8012af6:	d01f      	beq.n	8012b38 <floor+0x98>
 8012af8:	a325      	add	r3, pc, #148	; (adr r3, 8012b90 <floor+0xf0>)
 8012afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012afe:	f7ed fbcd 	bl	800029c <__adddf3>
 8012b02:	2200      	movs	r2, #0
 8012b04:	2300      	movs	r3, #0
 8012b06:	f7ee f80f 	bl	8000b28 <__aeabi_dcmpgt>
 8012b0a:	2800      	cmp	r0, #0
 8012b0c:	d0eb      	beq.n	8012ae6 <floor+0x46>
 8012b0e:	2c00      	cmp	r4, #0
 8012b10:	bfbe      	ittt	lt
 8012b12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012b16:	fa43 f606 	asrlt.w	r6, r3, r6
 8012b1a:	19a4      	addlt	r4, r4, r6
 8012b1c:	ea24 0407 	bic.w	r4, r4, r7
 8012b20:	2500      	movs	r5, #0
 8012b22:	e7e0      	b.n	8012ae6 <floor+0x46>
 8012b24:	2e33      	cmp	r6, #51	; 0x33
 8012b26:	dd0b      	ble.n	8012b40 <floor+0xa0>
 8012b28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012b2c:	d104      	bne.n	8012b38 <floor+0x98>
 8012b2e:	ee10 2a10 	vmov	r2, s0
 8012b32:	460b      	mov	r3, r1
 8012b34:	f7ed fbb2 	bl	800029c <__adddf3>
 8012b38:	ec41 0b10 	vmov	d0, r0, r1
 8012b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b40:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012b44:	f04f 33ff 	mov.w	r3, #4294967295
 8012b48:	fa23 f707 	lsr.w	r7, r3, r7
 8012b4c:	4207      	tst	r7, r0
 8012b4e:	d0f3      	beq.n	8012b38 <floor+0x98>
 8012b50:	a30f      	add	r3, pc, #60	; (adr r3, 8012b90 <floor+0xf0>)
 8012b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b56:	f7ed fba1 	bl	800029c <__adddf3>
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	f7ed ffe3 	bl	8000b28 <__aeabi_dcmpgt>
 8012b62:	2800      	cmp	r0, #0
 8012b64:	d0bf      	beq.n	8012ae6 <floor+0x46>
 8012b66:	2c00      	cmp	r4, #0
 8012b68:	da02      	bge.n	8012b70 <floor+0xd0>
 8012b6a:	2e14      	cmp	r6, #20
 8012b6c:	d103      	bne.n	8012b76 <floor+0xd6>
 8012b6e:	3401      	adds	r4, #1
 8012b70:	ea25 0507 	bic.w	r5, r5, r7
 8012b74:	e7b7      	b.n	8012ae6 <floor+0x46>
 8012b76:	2301      	movs	r3, #1
 8012b78:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012b7c:	fa03 f606 	lsl.w	r6, r3, r6
 8012b80:	4435      	add	r5, r6
 8012b82:	4545      	cmp	r5, r8
 8012b84:	bf38      	it	cc
 8012b86:	18e4      	addcc	r4, r4, r3
 8012b88:	e7f2      	b.n	8012b70 <floor+0xd0>
 8012b8a:	2500      	movs	r5, #0
 8012b8c:	462c      	mov	r4, r5
 8012b8e:	e7aa      	b.n	8012ae6 <floor+0x46>
 8012b90:	8800759c 	.word	0x8800759c
 8012b94:	7e37e43c 	.word	0x7e37e43c
 8012b98:	bff00000 	.word	0xbff00000
 8012b9c:	000fffff 	.word	0x000fffff

08012ba0 <scalbn>:
 8012ba0:	b570      	push	{r4, r5, r6, lr}
 8012ba2:	ec55 4b10 	vmov	r4, r5, d0
 8012ba6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012baa:	4606      	mov	r6, r0
 8012bac:	462b      	mov	r3, r5
 8012bae:	b99a      	cbnz	r2, 8012bd8 <scalbn+0x38>
 8012bb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012bb4:	4323      	orrs	r3, r4
 8012bb6:	d036      	beq.n	8012c26 <scalbn+0x86>
 8012bb8:	4b39      	ldr	r3, [pc, #228]	; (8012ca0 <scalbn+0x100>)
 8012bba:	4629      	mov	r1, r5
 8012bbc:	ee10 0a10 	vmov	r0, s0
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	f7ed fd21 	bl	8000608 <__aeabi_dmul>
 8012bc6:	4b37      	ldr	r3, [pc, #220]	; (8012ca4 <scalbn+0x104>)
 8012bc8:	429e      	cmp	r6, r3
 8012bca:	4604      	mov	r4, r0
 8012bcc:	460d      	mov	r5, r1
 8012bce:	da10      	bge.n	8012bf2 <scalbn+0x52>
 8012bd0:	a32b      	add	r3, pc, #172	; (adr r3, 8012c80 <scalbn+0xe0>)
 8012bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd6:	e03a      	b.n	8012c4e <scalbn+0xae>
 8012bd8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012bdc:	428a      	cmp	r2, r1
 8012bde:	d10c      	bne.n	8012bfa <scalbn+0x5a>
 8012be0:	ee10 2a10 	vmov	r2, s0
 8012be4:	4620      	mov	r0, r4
 8012be6:	4629      	mov	r1, r5
 8012be8:	f7ed fb58 	bl	800029c <__adddf3>
 8012bec:	4604      	mov	r4, r0
 8012bee:	460d      	mov	r5, r1
 8012bf0:	e019      	b.n	8012c26 <scalbn+0x86>
 8012bf2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012bf6:	460b      	mov	r3, r1
 8012bf8:	3a36      	subs	r2, #54	; 0x36
 8012bfa:	4432      	add	r2, r6
 8012bfc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012c00:	428a      	cmp	r2, r1
 8012c02:	dd08      	ble.n	8012c16 <scalbn+0x76>
 8012c04:	2d00      	cmp	r5, #0
 8012c06:	a120      	add	r1, pc, #128	; (adr r1, 8012c88 <scalbn+0xe8>)
 8012c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c0c:	da1c      	bge.n	8012c48 <scalbn+0xa8>
 8012c0e:	a120      	add	r1, pc, #128	; (adr r1, 8012c90 <scalbn+0xf0>)
 8012c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c14:	e018      	b.n	8012c48 <scalbn+0xa8>
 8012c16:	2a00      	cmp	r2, #0
 8012c18:	dd08      	ble.n	8012c2c <scalbn+0x8c>
 8012c1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012c1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012c22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012c26:	ec45 4b10 	vmov	d0, r4, r5
 8012c2a:	bd70      	pop	{r4, r5, r6, pc}
 8012c2c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012c30:	da19      	bge.n	8012c66 <scalbn+0xc6>
 8012c32:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012c36:	429e      	cmp	r6, r3
 8012c38:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012c3c:	dd0a      	ble.n	8012c54 <scalbn+0xb4>
 8012c3e:	a112      	add	r1, pc, #72	; (adr r1, 8012c88 <scalbn+0xe8>)
 8012c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d1e2      	bne.n	8012c0e <scalbn+0x6e>
 8012c48:	a30f      	add	r3, pc, #60	; (adr r3, 8012c88 <scalbn+0xe8>)
 8012c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c4e:	f7ed fcdb 	bl	8000608 <__aeabi_dmul>
 8012c52:	e7cb      	b.n	8012bec <scalbn+0x4c>
 8012c54:	a10a      	add	r1, pc, #40	; (adr r1, 8012c80 <scalbn+0xe0>)
 8012c56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d0b8      	beq.n	8012bd0 <scalbn+0x30>
 8012c5e:	a10e      	add	r1, pc, #56	; (adr r1, 8012c98 <scalbn+0xf8>)
 8012c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c64:	e7b4      	b.n	8012bd0 <scalbn+0x30>
 8012c66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012c6a:	3236      	adds	r2, #54	; 0x36
 8012c6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012c70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012c74:	4620      	mov	r0, r4
 8012c76:	4b0c      	ldr	r3, [pc, #48]	; (8012ca8 <scalbn+0x108>)
 8012c78:	2200      	movs	r2, #0
 8012c7a:	e7e8      	b.n	8012c4e <scalbn+0xae>
 8012c7c:	f3af 8000 	nop.w
 8012c80:	c2f8f359 	.word	0xc2f8f359
 8012c84:	01a56e1f 	.word	0x01a56e1f
 8012c88:	8800759c 	.word	0x8800759c
 8012c8c:	7e37e43c 	.word	0x7e37e43c
 8012c90:	8800759c 	.word	0x8800759c
 8012c94:	fe37e43c 	.word	0xfe37e43c
 8012c98:	c2f8f359 	.word	0xc2f8f359
 8012c9c:	81a56e1f 	.word	0x81a56e1f
 8012ca0:	43500000 	.word	0x43500000
 8012ca4:	ffff3cb0 	.word	0xffff3cb0
 8012ca8:	3c900000 	.word	0x3c900000

08012cac <fabsf>:
 8012cac:	ee10 3a10 	vmov	r3, s0
 8012cb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012cb4:	ee00 3a10 	vmov	s0, r3
 8012cb8:	4770      	bx	lr
	...

08012cbc <floorf>:
 8012cbc:	ee10 3a10 	vmov	r3, s0
 8012cc0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012cc4:	3a7f      	subs	r2, #127	; 0x7f
 8012cc6:	2a16      	cmp	r2, #22
 8012cc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012ccc:	dc2a      	bgt.n	8012d24 <floorf+0x68>
 8012cce:	2a00      	cmp	r2, #0
 8012cd0:	da11      	bge.n	8012cf6 <floorf+0x3a>
 8012cd2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012d34 <floorf+0x78>
 8012cd6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012cda:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce2:	dd05      	ble.n	8012cf0 <floorf+0x34>
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	da23      	bge.n	8012d30 <floorf+0x74>
 8012ce8:	4a13      	ldr	r2, [pc, #76]	; (8012d38 <floorf+0x7c>)
 8012cea:	2900      	cmp	r1, #0
 8012cec:	bf18      	it	ne
 8012cee:	4613      	movne	r3, r2
 8012cf0:	ee00 3a10 	vmov	s0, r3
 8012cf4:	4770      	bx	lr
 8012cf6:	4911      	ldr	r1, [pc, #68]	; (8012d3c <floorf+0x80>)
 8012cf8:	4111      	asrs	r1, r2
 8012cfa:	420b      	tst	r3, r1
 8012cfc:	d0fa      	beq.n	8012cf4 <floorf+0x38>
 8012cfe:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012d34 <floorf+0x78>
 8012d02:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012d06:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d0e:	ddef      	ble.n	8012cf0 <floorf+0x34>
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	bfbe      	ittt	lt
 8012d14:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8012d18:	fa40 f202 	asrlt.w	r2, r0, r2
 8012d1c:	189b      	addlt	r3, r3, r2
 8012d1e:	ea23 0301 	bic.w	r3, r3, r1
 8012d22:	e7e5      	b.n	8012cf0 <floorf+0x34>
 8012d24:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012d28:	d3e4      	bcc.n	8012cf4 <floorf+0x38>
 8012d2a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012d2e:	4770      	bx	lr
 8012d30:	2300      	movs	r3, #0
 8012d32:	e7dd      	b.n	8012cf0 <floorf+0x34>
 8012d34:	7149f2ca 	.word	0x7149f2ca
 8012d38:	bf800000 	.word	0xbf800000
 8012d3c:	007fffff 	.word	0x007fffff

08012d40 <scalbnf>:
 8012d40:	ee10 3a10 	vmov	r3, s0
 8012d44:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8012d48:	d025      	beq.n	8012d96 <scalbnf+0x56>
 8012d4a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012d4e:	d302      	bcc.n	8012d56 <scalbnf+0x16>
 8012d50:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012d54:	4770      	bx	lr
 8012d56:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8012d5a:	d122      	bne.n	8012da2 <scalbnf+0x62>
 8012d5c:	4b2a      	ldr	r3, [pc, #168]	; (8012e08 <scalbnf+0xc8>)
 8012d5e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012e0c <scalbnf+0xcc>
 8012d62:	4298      	cmp	r0, r3
 8012d64:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012d68:	db16      	blt.n	8012d98 <scalbnf+0x58>
 8012d6a:	ee10 3a10 	vmov	r3, s0
 8012d6e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012d72:	3a19      	subs	r2, #25
 8012d74:	4402      	add	r2, r0
 8012d76:	2afe      	cmp	r2, #254	; 0xfe
 8012d78:	dd15      	ble.n	8012da6 <scalbnf+0x66>
 8012d7a:	ee10 3a10 	vmov	r3, s0
 8012d7e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8012e10 <scalbnf+0xd0>
 8012d82:	eddf 6a24 	vldr	s13, [pc, #144]	; 8012e14 <scalbnf+0xd4>
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	eeb0 7a67 	vmov.f32	s14, s15
 8012d8c:	bfb8      	it	lt
 8012d8e:	eef0 7a66 	vmovlt.f32	s15, s13
 8012d92:	ee27 0a27 	vmul.f32	s0, s14, s15
 8012d96:	4770      	bx	lr
 8012d98:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012e18 <scalbnf+0xd8>
 8012d9c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012da0:	4770      	bx	lr
 8012da2:	0dd2      	lsrs	r2, r2, #23
 8012da4:	e7e6      	b.n	8012d74 <scalbnf+0x34>
 8012da6:	2a00      	cmp	r2, #0
 8012da8:	dd06      	ble.n	8012db8 <scalbnf+0x78>
 8012daa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012dae:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012db2:	ee00 3a10 	vmov	s0, r3
 8012db6:	4770      	bx	lr
 8012db8:	f112 0f16 	cmn.w	r2, #22
 8012dbc:	da1a      	bge.n	8012df4 <scalbnf+0xb4>
 8012dbe:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012dc2:	4298      	cmp	r0, r3
 8012dc4:	ee10 3a10 	vmov	r3, s0
 8012dc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012dcc:	dd0a      	ble.n	8012de4 <scalbnf+0xa4>
 8012dce:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8012e10 <scalbnf+0xd0>
 8012dd2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8012e14 <scalbnf+0xd4>
 8012dd6:	eef0 7a40 	vmov.f32	s15, s0
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	bf18      	it	ne
 8012dde:	eeb0 0a47 	vmovne.f32	s0, s14
 8012de2:	e7db      	b.n	8012d9c <scalbnf+0x5c>
 8012de4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8012e18 <scalbnf+0xd8>
 8012de8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8012e1c <scalbnf+0xdc>
 8012dec:	eef0 7a40 	vmov.f32	s15, s0
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	e7f3      	b.n	8012ddc <scalbnf+0x9c>
 8012df4:	3219      	adds	r2, #25
 8012df6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012dfa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012dfe:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012e20 <scalbnf+0xe0>
 8012e02:	ee07 3a10 	vmov	s14, r3
 8012e06:	e7c4      	b.n	8012d92 <scalbnf+0x52>
 8012e08:	ffff3cb0 	.word	0xffff3cb0
 8012e0c:	4c000000 	.word	0x4c000000
 8012e10:	7149f2ca 	.word	0x7149f2ca
 8012e14:	f149f2ca 	.word	0xf149f2ca
 8012e18:	0da24260 	.word	0x0da24260
 8012e1c:	8da24260 	.word	0x8da24260
 8012e20:	33000000 	.word	0x33000000

08012e24 <_init>:
 8012e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e26:	bf00      	nop
 8012e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e2a:	bc08      	pop	{r3}
 8012e2c:	469e      	mov	lr, r3
 8012e2e:	4770      	bx	lr

08012e30 <_fini>:
 8012e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e32:	bf00      	nop
 8012e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e36:	bc08      	pop	{r3}
 8012e38:	469e      	mov	lr, r3
 8012e3a:	4770      	bx	lr
